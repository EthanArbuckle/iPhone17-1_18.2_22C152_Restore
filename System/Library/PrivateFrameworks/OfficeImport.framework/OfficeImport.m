void *operator new[](size_t a1)
{
  _DWORD *exception;

  if (!a1)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  return operator new[](a1);
}

uint64_t OIPreviewProcessWithData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return OIPreviewProcessWithDataAndOptions(a1, a2, a3, 0, a4, a5);
}

uint64_t OIPreviewProcessWithDataAndOptions(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  objc_opt_class();
  objc_opt_class();
  v12 = createArchiverForClient(a5, a6, a4);
  if (!a3 || (unint64_t v13 = +[CMFileManager getFileTypeFromUTI:a3]) == 0) {
    unint64_t v13 = +[CMFileManager getFileTypeFromPath:a2];
  }
  +[QLTop fillHTMLArchiveForOfficeData:a1 fileName:a2 dataFormat:v13 archiver:v12];

  return 0;
}

void sub_238A76F70(void *exc_buf, int a2)
{
  if (a2 == 2)
  {
    id v4 = objc_begin_catch(exc_buf);
    handleExceptionForClientWithCallbacks(v4, v3, v2);
    objc_end_catch();
    JUMPOUT(0x238A76F50);
  }
  objc_begin_catch(exc_buf);

  objc_exception_rethrow();
}

void sub_238A76FC4(_Unwind_Exception *a1)
{
}

CMProgressiveArchiveManager *createArchiverForClient(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [[CMProgressiveArchiveManager alloc] initWithClient:a1 andCallBacks:a2];
  v5 = [a3 objectForKey:@"IsOnPhone"];
  v6 = v5;
  if (v5) {
    uint64_t v7 = [v5 BOOLValue];
  }
  else {
    uint64_t v7 = 0;
  }
  [(CMArchiveManager *)v4 setIsOnPhone:v7];
  v8 = [a3 objectForKey:kOIPreviewOptionsPassphrase];
  [(CMArchiveManager *)v4 setPassphrase:v8];

  return v4;
}

void sub_238A7709C(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238A77174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A7724C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A774A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A77584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238A776DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A77814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  objc_sync_exit(v10);

  _Unwind_Resume(a1);
}

void sub_238A77BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_238A7832C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_238A7858C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238A78AE0(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void PptObjectFactory::PptObjectFactory(PptObjectFactory *this)
{
  this->var0 = (void **)&unk_26EBEF2B0;
  this->var1 = 0;
}

void PptObjectFactory::init(PptObjectFactory *this)
{
  uint64_t v2 = (PptEshObjectFactory *)operator new(0x10uLL);
  PptEshObjectFactory::PptEshObjectFactory(v2);
  this->var1 = v2;
}

void sub_238A78B7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *operator new(size_t a1)
{
  return operator new(a1);
}

void PptEshObjectFactory::PptEshObjectFactory(PptEshObjectFactory *this)
{
  *((unsigned char *)this + 8) = 0;
  *(void *)this = &unk_26EBEF270;
}

void PptBinaryReader::PptBinaryReader(PptBinaryReader *this, PptObjectFactory *a2)
{
  *(void *)this = &unk_26EBE44E0;
  id v4 = (char *)this + 8;
  OcReader::OcReader((OcReader *)((char *)this + 8));
  *(void *)this = &unk_26EBEFA88;
  *((void *)this + 1) = &unk_26EBEFBA8;
  *((void *)this + 3) = &unk_26EBEFC88;
  *((void *)this + 4) = 0;
  SsrwOORootStorage::SsrwOORootStorage((PptBinaryReader *)((char *)this + 40));
  *((void *)this + 31) = 0;
  *((void *)this + 30) = (char *)this + 248;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 40) = 2;
  *((unsigned char *)this + 164) = 0;
  *((void *)this + 29) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = a2;
  *((void *)this + 34) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 38) = 0;
  *((unsigned char *)this + 312) = 0;
  (*(void (**)(char *, PptEshObjectFactory *))(*((void *)this + 1) + 144))(v4, a2->var1);
}

void sub_238A78D2C(_Unwind_Exception *a1)
{
  v8 = *v6;
  if (*v6)
  {
    *(void *)(v2 + 296) = v8;
    operator delete(v8);
  }
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy(v4, *v5);
  SsrwOORootStorage::~SsrwOORootStorage(v3);
  OcReader::~OcReader(v1);
  _Unwind_Resume(a1);
}

void OcReader::OcReader(OcReader *this)
{
  this->var0 = (void **)&unk_26EBD9F18;
  this->var1 = 0;
}

void SsrwOORootStorage::SsrwOORootStorage(SsrwOORootStorage *this)
{
  SsrwOOStorage::SsrwOOStorage((SsrwOOStorage *)this, 0);
  *(void *)(v1 + 80) = 0;
}

void SsrwOOStorage::SsrwOOStorage(SsrwOOStorage *this, _Storage *a2)
{
  this->var0 = a2;
}

OcReader *OcReader::setEscherObjectFactory(OcReader *this, EshObjectFactory *a2)
{
  this->var1 = a2;
  return this;
}

void sub_238A78F6C(void *a1, int a2)
{
  if (a2 == 3)
  {
    v5 = (unsigned int *)__cxa_begin_catch(a1);
    PBConvertCsException(v5);
    __cxa_end_catch();
  }
  else
  {
    v6 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      [v6 raise];
    }
    else {
      +[TCMessageException raise:TCUnknownProblemMessage];
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x238A78F54);
}

void sub_238A78FF8(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 2)
  {
    [v2 setStartErrorMessageFromException:objc_begin_catch(exception_object)];
    objc_end_catch();
    JUMPOUT(0x238A78F54);
  }
  _Unwind_Resume(exception_object);
}

void PptBinaryReader::start(PptBinaryReader *this, const void **a2, unsigned int a3)
{
  v6 = (PptBinaryReader *)((char *)this + 40);
  (*(void (**)(PptBinaryReader *))(*(void *)this + 24))(this);
  PptBinaryReader::initSkipConditions(this);
  SsrwOORootStorage::openInBuf(v6, a2, a3);
  PptBinaryReader::commonStart(this);
}

double PptBinaryReader::finish(PptBinaryReader *this)
{
  uint64_t v2 = *((void *)this + 19);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 19) = 0;
  uint64_t v3 = *((void *)this + 18);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 18) = 0;
  uint64_t v4 = (SsrwOOStorage *)*((void *)this + 16);
  if (v4)
  {
    SsrwOOStorage::~SsrwOOStorage(v4);
    MEMORY[0x23EC997B0]();
  }
  *((void *)this + 16) = 0;
  if (SsrwOORootStorage::isOpen((PptBinaryReader *)((char *)this + 40))) {
    SsrwOORootStorage::close((PptBinaryReader *)((char *)this + 40), 0);
  }
  *((void *)this + 17) = 0;
  uint64_t v5 = *((void *)this + 23);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 23) = 0;
  uint64_t v6 = *((void *)this + 21);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 21) = 0;
  uint64_t v7 = *((void *)this + 22);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 22) = 0;
  v8 = (PptPersistDir *)*((void *)this + 24);
  if (v8)
  {
    PptPersistDir::~PptPersistDir(v8);
    MEMORY[0x23EC997B0]();
  }
  *((void *)this + 24) = 0;
  uint64_t v9 = *((void *)this + 25);
  if (v9) {
    MEMORY[0x23EC997B0](v9, 0x1000C408B6DE1C6);
  }
  uint64_t v10 = *((void *)this + 26);
  *((void *)this + 25) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  *((unsigned char *)this + 164) = 0;
  double result = 0.0;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((void *)this + 37) = *((void *)this + 36);
  return result;
}

BOOL SsrwOORootStorage::isOpen(SsrwOORootStorage *this)
{
  return *((void *)this + 10) != 0;
}

uint64_t *PptBinaryReader::initSkipConditions(PptBinaryReader *this)
{
  uint64_t v1 = (void *)((char *)this + 248);
  uint64_t v2 = (uint64_t **)((char *)this + 240);
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 240, *((void **)this + 31));
  *(v1 - 1) = v1;
  void *v1 = 0;
  v1[1] = 0;
  unsigned int v4 = 6002;
  uint64_t v5 = &v4;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v2, &v4, (uint64_t)&std::piecewise_construct, &v5)+ 8) = 0;
  unsigned int v4 = 4085;
  uint64_t v5 = &v4;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v2, &v4, (uint64_t)&std::piecewise_construct, &v5)+ 8) = 0;
  unsigned int v4 = 1000;
  uint64_t v5 = &v4;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v2, &v4, (uint64_t)&std::piecewise_construct, &v5)+ 8) = 1;
  unsigned int v4 = 1006;
  uint64_t v5 = &v4;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v2, &v4, (uint64_t)&std::piecewise_construct, &v5)+ 8) = 1;
  unsigned int v4 = 1016;
  uint64_t v5 = &v4;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v2, &v4, (uint64_t)&std::piecewise_construct, &v5)+ 8) = 1;
  unsigned int v4 = 1008;
  uint64_t v5 = &v4;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v2, &v4, (uint64_t)&std::piecewise_construct, &v5)+ 8) = 1;
  unsigned int v4 = 4041;
  uint64_t v5 = &v4;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v2, &v4, (uint64_t)&std::piecewise_construct, &v5)+ 8) = 1;
  unsigned int v4 = 4011;
  uint64_t v5 = &v4;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v2, &v4, (uint64_t)&std::piecewise_construct, &v5)+ 8) = 0;
  unsigned int v4 = 6003;
  uint64_t v5 = &v4;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v2, &v4, (uint64_t)&std::piecewise_construct, &v5)+ 8) = 0;
  unsigned int v4 = 6010;
  uint64_t v5 = &v4;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v2, &v4, (uint64_t)&std::piecewise_construct, &v5)+ 8) = 0;
  unsigned int v4 = 6024;
  uint64_t v5 = &v4;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v2, &v4, (uint64_t)&std::piecewise_construct, &v5)+ 8) = 0;
  unsigned int v4 = 6025;
  uint64_t v5 = &v4;
  double result = std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v2, &v4, (uint64_t)&std::piecewise_construct, &v5);
  *((_DWORD *)result + 8) = 0;
  return result;
}

uint64_t SsrwOORootStorage::openInBuf(SsrwOORootStorage *this, const void **a2, unsigned int a3)
{
  LODWORD(result) = openStructuredStorageInBuf(a2, a3, 0, (uint64_t *)this + 10);
  if (result || (uint64_t result = getStorageFromRoot(*((void *)this + 10), this), result))
  {
    int v5 = result;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v5;
  }
  return result;
}

uint64_t openStructuredStorageInBuf(void *a1, unsigned int a2, int a3, uint64_t *a4)
{
  if (!a1) {
    return 6;
  }
  uint64_t v5 = 6;
  if (a4 && *a1)
  {
    if ((a3 & 0xFFFFFFFD) != 0)
    {
      return 2;
    }
    else
    {
      v8 = SsrwOpenMemForReading((uint64_t)a1, a2);
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v5 = openStructuredStorageInternal((uint64_t)v8, a4, 1, a3);
        if (v5) {
          SsrwFclose(v9);
        }
      }
      else
      {
        return 1;
      }
    }
  }
  return v5;
}

_DWORD *SsrwOpenMemForReading(uint64_t a1, unsigned int a2)
{
  uint64_t result = malloc_type_malloc(0x60uLL, 0x10A2040658F7E63uLL);
  if (result)
  {
    result[11] = 0;
    *(_DWORD *)((char *)result + 41) = 0;
    *((void *)result + 6) = SsrwMemFread;
    *((void *)result + 7) = SsrwMemFwrite;
    *((void *)result + 8) = SsrwMemFclose;
    *((void *)result + 9) = SsrwMemFseek;
    *((void *)result + 10) = SsrwMemFtell;
    *((void *)result + 11) = SsrwMemFtruncate;
    *(void *)uint64_t result = a1;
    *((void *)result + 1) = a2;
    *((void *)result + 3) = 0;
    *((void *)result + 4) = 0;
    *((void *)result + 2) = a2;
    *((unsigned char *)result + 40) = 1;
  }
  return result;
}

uint64_t openStructuredStorageInternal(uint64_t a1, uint64_t *a2, char a3, int a4)
{
  int v32 = 0;
  v8 = malloc_type_malloc(0x70uLL, 0x10300407518E08AuLL);
  if (!v8) {
    return 5;
  }
  uint64_t v9 = (uint64_t)v8;
  v8[5] = 0u;
  v8[6] = 0u;
  v8[3] = 0u;
  v8[4] = 0u;
  v8[1] = 0u;
  v8[2] = 0u;
  _OWORD *v8 = 0u;
  rootStorageInit((uint64_t)v8, a4, 0x200u);
  if (!v10)
  {
    *(void *)uint64_t v9 = a1;
    uint64_t Fat = headerRead(a1, *(void *)(v9 + 16));
    if (Fat) {
      goto LABEL_5;
    }
    int v13 = 1 << headerGetSectorShift(*(void *)(v9 + 16));
    tocSetSectorSize(*(void *)(v9 + 40), v13);
    v14 = malloc_type_malloc(v13, 0x7358A8CDuLL);
    *(void *)(v9 + 80) = v14;
    if (!v14) {
      goto LABEL_15;
    }
    bzero(v14, v13);
    uint64_t Fat = fatConstruct(v9, (void *)(v9 + 24), v13);
    if (Fat) {
      goto LABEL_5;
    }
    unsigned int FatSize = headerGetFatSize(*(void *)(v9 + 16));
    if (FatSize >> 30) {
      goto LABEL_15;
    }
    v16 = malloc_type_malloc(4 * FatSize, 0x5E92E671uLL);
    if (!v16) {
      goto LABEL_15;
    }
    v17 = v16;
    unsigned int v18 = headerGetFatSize(*(void *)(v9 + 16));
    bzero(v17, 4 * v18);
    Xunsigned int FatSize = headerGetXFatSize(*(void *)(v9 + 16));
    if (XFatSize)
    {
      v20 = malloc_type_malloc(4 * XFatSize, 0xBF89B1ADuLL);
      if (!v20)
      {
        free(v17);
LABEL_15:
        *(void *)uint64_t v9 = 0;
        closeStg((char *)v9);
        return 5;
      }
    }
    else
    {
      v20 = 0;
    }
    uint64_t v22 = headerReadFatSectors(*(void *)v9, *(void *)(v9 + 16), (uint64_t)v17, &v32);
    if (v22)
    {
      uint64_t ChainLastSector = v22;
      if (v20) {
        free(v20);
      }
      free(v17);
      goto LABEL_6;
    }
    unsigned int v23 = headerGetFatSize(*(void *)(v9 + 16));
    if (v23 >= 0x6E)
    {
      FatSectorsFromXuint64_t Fat = readFatSectorsFromXFat(v9, (uint64_t)v17, (int *)v20);
      if (FatSectorsFromXFat)
      {
        uint64_t ChainLastSector = FatSectorsFromXFat;
        *(void *)uint64_t v9 = 0;
        if (v20) {
          free(v20);
        }
        free(v17);
        goto LABEL_7;
      }
    }
    fatSetFatSectors(*(void *)(v9 + 24), (uint64_t)v17, v23);
    *(void *)(v9 + 96) = v20;
    uint64_t Fat = fatReadFat(*(unsigned int ***)(v9 + 24));
    if (!Fat)
    {
      if (headerGetSmallFatSize(*(void *)(v9 + 16)))
      {
        uint64_t v25 = initializeSmallFat((void *)v9);
      }
      else
      {
        char SmallSectorShift = headerGetSmallSectorShift(*(void *)(v9 + 16));
        uint64_t v25 = fatConstruct(v9, (void *)(v9 + 32), 1 << SmallSectorShift);
      }
      uint64_t ChainLastSector = v25;
      if (v25) {
        goto LABEL_6;
      }
      uint64_t v27 = *(void *)(v9 + 24);
      unsigned int DirectoryStartSector = headerGetDirectoryStartSector(*(void *)(v9 + 16));
      uint64_t Fat = fatGetChain(v27, DirectoryStartSector, (unsigned int *)(v9 + 72), (void *)(v9 + 64));
      if (!Fat)
      {
        uint64_t Fat = tocRead(*(void *)(v9 + 40), v9);
        if (!Fat)
        {
          uint64_t Fat = storageConstructRoot(v9, (void *)(v9 + 48));
          if (!Fat)
          {
            uint64_t EntryAtIndex = tocGetEntryAtIndex(*(uint64_t **)(v9 + 40), 0);
            if (!EntryAtIndex)
            {
              *(void *)uint64_t v9 = 0;
              closeStg((char *)v9);
              return 11;
            }
            uint64_t v30 = *(void *)(v9 + 24);
            unsigned int StartSector = directoryGetStartSector(EntryAtIndex);
            uint64_t ChainLastSector = fatGetChainLastSector(v30, StartSector, (unsigned int *)(v9 + 92));
            if (!ChainLastSector)
            {
              *(unsigned char *)(v9 + 8) = a3;
              *a2 = v9;
              return ChainLastSector;
            }
            goto LABEL_6;
          }
        }
      }
    }
LABEL_5:
    uint64_t ChainLastSector = Fat;
LABEL_6:
    *(void *)uint64_t v9 = 0;
    goto LABEL_7;
  }
  uint64_t ChainLastSector = v10;
LABEL_7:
  closeStg((char *)v9);
  return ChainLastSector;
}

double rootStorageInit(uint64_t a1, int a2, unsigned int a3)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  if (!headerInit((void *)(a1 + 16)))
  {
    uint64_t v7 = *(_WORD **)(a1 + 16);
    unsigned __int16 v8 = SsrwUINTLog2(a3);
    headerSetSectorShift(v7, v8);
    char SectorShift = headerGetSectorShift(*(void *)(a1 + 16));
    if (!tocConstruct(1 << SectorShift, (void *)(a1 + 40)))
    {
      tocSetSectorSize(*(void *)(a1 + 40), a3);
      *(_DWORD *)(a1 + 56) = a2;
      *(void *)(a1 + 96) = 0;
      *(void *)(a1 + 104) = a2 == 1;
      *(void *)(a1 + 80) = 0;
      *(void *)(a1 + 64) = 0;
      *(void *)(a1 + 48) = 0;
      *(void *)(a1 + 72) = -1;
      double result = NAN;
      *(void *)(a1 + 88) = 0xFFFFFFFF00000000;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
    }
  }
  return result;
}

uint64_t headerInit(void *a1)
{
  uint64_t v2 = malloc_type_malloc(0x4CuLL, 0x100004015A9971DuLL);
  if (!v2) {
    return 5;
  }
  uint64_t v3 = v2;
  uint64_t result = 0;
  v3[3] = 0x9FFFE0003003ELL;
  *((_WORD *)v3 + 16) = 6;
  v3[1] = 0;
  v3[2] = 0;
  *uint64_t v3 = 0xE11AB1A1E011CFD0;
  *(void *)((char *)v3 + 34) = 0;
  v3[5] = 0;
  *((_OWORD *)v3 + 3) = xmmword_238EDE9D0;
  v3[8] = 0xFFFFFFFF00000000;
  *((_DWORD *)v3 + 18) = 0;
  *a1 = v3;
  return result;
}

uint64_t SsrwUINTLog2(unsigned int a1)
{
  if (a1 < 2) {
    return 0;
  }
  LODWORD(v1) = 0;
  do
  {
    uint64_t v1 = (v1 + 1);
    BOOL v2 = a1 > 3;
    a1 >>= 1;
  }
  while (v2);
  return v1;
}

_WORD *headerSetSectorShift(_WORD *result, unsigned int a2)
{
  if (result)
  {
    result[15] = a2;
    if ((unsigned __int16)result[16] >= a2) {
      result[16] = a2 >> 1;
    }
    if (a2 != 9) {
      result[13] = 4;
    }
  }
  return result;
}

uint64_t headerGetSectorShift(uint64_t result)
{
  if (result) {
    return *(unsigned __int16 *)(result + 30);
  }
  return result;
}

uint64_t tocConstruct(int a1, void *a2)
{
  unsigned int v4 = malloc_type_malloc(0x10uLL, 0x1020040EDED9539uLL);
  if (!v4) {
    return 5;
  }
  uint64_t v5 = v4;
  uint64_t result = 0;
  v5[2] = 0;
  v5[3] = a1;
  *(void *)uint64_t v5 = 0;
  *a2 = v5;
  return result;
}

uint64_t tocSetSectorSize(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 12) = a2;
  return 0;
}

uint64_t headerRead(uint64_t a1, uint64_t a2)
{
  SsrwFseek(a1);
  if (!SsrwFtell(a1)) {
    return 17;
  }
  SsrwFseek(a1);
  unsigned int v4 = malloc_type_malloc(0x4CuLL, 0x8FE19A4uLL);
  if (!v4) {
    return 5;
  }
  uint64_t v5 = (char *)v4;
  *(_OWORD *)((char *)v4 + 60) = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  *unsigned int v4 = 0u;
  v4[1] = 0u;
  if (SsrwFread((uint64_t)v4, 76, 1, a1) == 1
    && *(void *)v5 == 0xE11AB1A1E011CFD0
    && (*(_OWORD *)(a2 + 8) = *(_OWORD *)(v5 + 8),
        *(_WORD *)(a2 + 24) = CsLeReadUInt16((unsigned __int16 *)v5 + 12),
        *(_WORD *)(a2 + 26) = CsLeReadUInt16((unsigned __int16 *)v5 + 13),
        unsigned int UInt16 = CsLeReadUInt16((unsigned __int16 *)v5 + 14),
        *(_WORD *)(a2 + 28) = UInt16,
        UInt16 >= 0xFFFE)
    && (unsigned int v7 = CsLeReadUInt16((unsigned __int16 *)v5 + 15), *(_WORD *)(a2 + 30) = v7, v7 <= 0xC))
  {
    *(_WORD *)(a2 + 32) = CsLeReadUInt16((unsigned __int16 *)v5 + 16);
    __int16 v10 = *((_WORD *)v5 + 19);
    *(_DWORD *)(a2 + 34) = *(_DWORD *)(v5 + 34);
    *(_WORD *)(a2 + 38) = v10;
    *(_DWORD *)(a2 + 40) = CsLeReadSInt32((unsigned int *)v5 + 10);
    *(_DWORD *)(a2 + 44) = CsLeReadSInt32((unsigned int *)v5 + 11);
    *(_DWORD *)(a2 + 48) = CsLeReadSInt32((unsigned int *)v5 + 12);
    *(_DWORD *)(a2 + 52) = CsLeReadSInt32((unsigned int *)v5 + 13);
    *(_DWORD *)(a2 + 56) = CsLeReadSInt32((unsigned int *)v5 + 14);
    *(_DWORD *)(a2 + 60) = CsLeReadSInt32((unsigned int *)v5 + 15);
    *(_DWORD *)(a2 + 64) = CsLeReadSInt32((unsigned int *)v5 + 16);
    *(_DWORD *)(a2 + 68) = CsLeReadSInt32((unsigned int *)v5 + 17);
    uint64_t v8 = 0;
    *(_DWORD *)(a2 + 72) = CsLeReadSInt32((unsigned int *)v5 + 18);
  }
  else
  {
    uint64_t v8 = 3;
  }
  free(v5);
  return v8;
}

uint64_t SsrwFseek(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(uint64_t (**)(void))(a1 + 72)) != 0) {
    return v1();
  }
  else {
    return 0;
  }
}

uint64_t SsrwMemFseek(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 2)
  {
    uint64_t v3 = *(void *)(a1 + 8) + a2;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 24);
    uint64_t v4 = v3 + a2;
    if (!a3) {
      uint64_t v3 = a2;
    }
    if (a3 == 1) {
      uint64_t v3 = v4;
    }
  }
  *(void *)(a1 + 24) = v3;
  return 0;
}

uint64_t SsrwFtell(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(uint64_t (**)(void))(a1 + 80)) != 0) {
    return v1();
  }
  else {
    return 0;
  }
}

void *SsrwMemFtell(void *result)
{
  if (result)
  {
    if (*result) {
      return (void *)result[3];
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t SsrwFread(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 && a1 && (uint64_t v4 = *(uint64_t (**)(void))(a4 + 48)) != 0) {
    return v4();
  }
  else {
    return 0;
  }
}

uint64_t SsrwMemFread(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 0;
  }
  if ((*(unsigned char *)(a4 + 40) & 1) == 0) {
    return 0;
  }
  uint64_t v5 = a3;
  size_t v6 = a3 * a2;
  if (a3 * a2 < 0) {
    return 0;
  }
  uint64_t v7 = *(void *)(a4 + 24);
  uint64_t v8 = (*(void *)(a4 + 16) - v7) & ~((*(void *)(a4 + 16) - v7) >> 63);
  if (v8 < (int)v6)
  {
    uint64_t v5 = v8 / (int)a2;
    size_t v6 = v5 * a2;
  }
  if (v6)
  {
    memcpy(a1, (const void *)(**(void **)a4 + v7), v6);
    *(void *)(a4 + 24) += (int)v6;
  }
  return v5;
}

uint64_t CsLeReadUInt16(unsigned __int16 *a1)
{
  return *a1;
}

uint64_t CsLeReadSInt32(unsigned int *a1)
{
  return *a1;
}

uint64_t fatConstruct(uint64_t a1, void *a2, __int16 a3)
{
  size_t v6 = malloc_type_malloc(0x38uLL, 0x10300407B4512BAuLL);
  if (!v6) {
    return 5;
  }
  uint64_t v7 = v6;
  uint64_t result = 0;
  v7[1] = 0u;
  v7[2] = 0u;
  *((void *)v7 + 6) = 0;
  *uint64_t v7 = 0u;
  *((void *)v7 + 4) = a1;
  *((_DWORD *)v7 + 12) = 0;
  *((_DWORD *)v7 + 6) = 0;
  *((_DWORD *)v7 + 10) = -2;
  *((_WORD *)v7 + 22) = a3;
  *a2 = v7;
  return result;
}

uint64_t headerGetFatSize(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 44);
  }
  return result;
}

uint64_t headerGetXFatSize(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 72);
  }
  return result;
}

uint64_t headerReadFatSectors(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v5 = *(unsigned int *)(a2 + 44);
  if (v5 >= 0x6D) {
    int v6 = 109;
  }
  else {
    int v6 = *(_DWORD *)(a2 + 44);
  }
  if (v6)
  {
    uint64_t v9 = (char *)malloc_type_malloc((4 * v6), 0xBF89B1ADuLL);
    if (v9)
    {
      __int16 v10 = v9;
      bzero(v9, (4 * v6));
      if (SsrwFseek(a1) || SsrwFread((uint64_t)v10, (4 * v6), 1, a1) != 1)
      {
        free(v10);
        return 4;
      }
      else
      {
        uint64_t v11 = 0;
        int v12 = 109;
        if (v5 < 0x6D) {
          int v12 = v5;
        }
        int v13 = 4 * v12;
        do
        {
          *(_DWORD *)(a3 + v11) = CsLeReadSInt32((unsigned int *)&v10[v11]);
          v11 += 4;
        }
        while (v13 != v11);
        free(v10);
        uint64_t result = 0;
        *a4 = v6;
      }
    }
    else
    {
      return 5;
    }
  }
  else
  {
    uint64_t result = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t fatSetFatSectors(uint64_t result, uint64_t a2, int a3)
{
  *(void *)uint64_t result = a2;
  *(_DWORD *)(result + 24) = a3;
  return result;
}

uint64_t fatReadFat(unsigned int **a1)
{
  if (!a1) {
    return 6;
  }
  uint64_t v2 = (uint64_t)a1[4];
  if (!v2 || !*((_DWORD *)a1 + 6) || !*a1) {
    return 6;
  }
  uint64_t Header = rootStorageGetHeader(v2);
  unsigned int v4 = 1 << headerGetSectorShift(Header) >> 2;
  unint64_t v5 = *((unsigned int *)a1 + 6) * (unint64_t)v4;
  *((_DWORD *)a1 + 4) = v5;
  if ((v5 & 0xFFFFFFFF00000000) != 0) {
    return 8;
  }
  uint64_t v7 = (unsigned int *)malloc_type_calloc(v5, 4uLL, 0x100004052888210uLL);
  a1[1] = v7;
  int v8 = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 12) = 4 * v8;
  if (!v7) {
    return 5;
  }
  *((_DWORD *)a1 + 5) = v8;
  uint64_t v9 = *a1;
  if (**a1 == -2 || !*((_DWORD *)a1 + 6)) {
    return 0;
  }
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  Sector = 0;
  unsigned int v27 = -2;
  unsigned int v28 = -2;
  unsigned int v14 = -2;
  while (1)
  {
    uint64_t v15 = (uint64_t)a1[4];
    uint64_t v16 = *v9;
    if (v12)
    {
      uint64_t result = rootStorageGetSector(v15, v16, (uint64_t)Sector);
      if (result) {
        goto LABEL_39;
      }
    }
    else
    {
      Sector = (unsigned int *)rootStorageReadSector(v15, v16);
      if (!Sector)
      {
        uint64_t result = rootStorageGetStatus((uint64_t)a1[4]);
        if (result) {
          goto LABEL_39;
        }
      }
    }
    unint64_t v17 = v10;
    unsigned int v18 = v12 * v4;
    ++v12;
    v26 = Sector;
    if (v18 < v12 * v4) {
      break;
    }
LABEL_34:
    ++v9;
    unsigned int v10 = v17 + v4;
    Sector = v26;
    if (v12 >= *((_DWORD *)a1 + 6))
    {
      uint64_t result = 0;
      unsigned int v24 = v28;
      goto LABEL_40;
    }
  }
  int v19 = 0;
  unint64_t v20 = v17;
  while (v20 < *((unsigned int *)a1 + 4))
  {
    unsigned int SInt32 = CsLeReadSInt32(Sector);
    if (SInt32 > v11 && SInt32 < 0xFFFFFFF0) {
      unsigned int v11 = SInt32;
    }
    if (SInt32 == -1)
    {
      if (v14 == -2)
      {
        *((_DWORD *)a1 + 10) = v17 + v19;
        unsigned int v23 = a1[1];
        unsigned int v14 = v20;
      }
      else
      {
        unsigned int v23 = a1[1];
        v23[v14] = v17 + v19;
        unsigned int v14 = v17 + v19;
      }
      v23[v20] = -2;
    }
    else
    {
      a1[1][v20] = SInt32;
      unsigned int v27 = v14;
      unsigned int v28 = v17 + v19;
    }
    ++v20;
    ++Sector;
    if (v4 == ++v19) {
      goto LABEL_34;
    }
  }
  uint64_t result = 8;
LABEL_39:
  unsigned int v24 = v28;
  if (v11 > v28) {
    return 8;
  }
LABEL_40:
  unsigned int v25 = v24 + 1;
  if (v24 != -2 && v25 > *((_DWORD *)a1 + 4)) {
    return 8;
  }
  if (v24 != -2 && !result)
  {
    *((_DWORD *)a1 + 4) = v25;
    uint64_t result = 0;
    if (v27 == -2) {
      *((_DWORD *)a1 + 10) = -2;
    }
    else {
      a1[1][v27] = -2;
    }
  }
  return result;
}

uint64_t rootStorageGetHeader(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t result = *(void *)(a1 + 16);
  if (!result) {
    return 0;
  }
  return result;
}

uint64_t rootStorageReadSector(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 76) == a2) {
    return *(void *)(a1 + 80);
  }
  int Sector = readSector(a1, a2);
  *(_DWORD *)(a1 + 88) = Sector;
  if (!Sector) {
    return *(void *)(a1 + 80);
  }
  else {
    return 0;
  }
}

uint64_t readSector(uint64_t a1, int a2)
{
  char SectorShift = headerGetSectorShift(*(void *)(a1 + 16));
  SsrwFseek(*(void *)a1);
  if (SsrwFtell(*(void *)a1) != (unint64_t)(a2 + 1) << SectorShift) {
    return 4;
  }
  int v5 = 1 << SectorShift;
  uint64_t v6 = SsrwFread(*(void *)(a1 + 80), 1, v5, *(void *)a1);
  if (v6 != v5) {
    return 4 * (v6 == 0);
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 76) = a2;
  return result;
}

uint64_t rootStorageGetSector(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char SectorShift = headerGetSectorShift(*(void *)(a1 + 16));
  SsrwFseek(*(void *)a1);
  uint64_t result = 4 * (SsrwFread(a3, 1 << SectorShift, 1, *(void *)a1) != 1);
  *(_DWORD *)(a1 + 88) = result;
  return result;
}

uint64_t headerGetSmallFatSize(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 64);
  }
  return result;
}

uint64_t headerGetSmallSectorShift(uint64_t result)
{
  if (result) {
    return *(unsigned __int16 *)(result + 32);
  }
  return result;
}

uint64_t headerGetSmallFatStartSector(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 60);
  }
  return result;
}

uint64_t fatGetChain(uint64_t a1, unsigned int a2, unsigned int *a3, void *a4)
{
  if (!a3) {
    return 6;
  }
  unsigned int v5 = *a3;
  if (!*a3) {
    return 0;
  }
  unsigned int v6 = a2;
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  if (v8 <= a2) {
    return 8;
  }
  uint64_t v9 = *(void *)(a1 + 8);
  unsigned int v10 = *(_DWORD *)(v9 + 4 * a2);
  if (v10 > v8 && v10 != -2) {
    return 8;
  }
  unsigned int v13 = 1;
  uint64_t result = 8;
  while (v10 != -2)
  {
    if (v10 >= v8) {
      return 8;
    }
    if (v13 + 1 > v8)
    {
      ++v13;
      break;
    }
    unsigned int v10 = *(_DWORD *)(v9 + 4 * v10);
    BOOL v15 = v10 <= v8 || v10 == -2;
    ++v13;
    if (!v15) {
      return result;
    }
  }
  if (v5 == -1)
  {
    *a3 = v13;
    unsigned int v5 = v13;
  }
  else if (v5 > v13)
  {
    return 8;
  }
  if (!v5) {
    return 0;
  }
  uint64_t result = 5;
  if (!(v5 >> 30) && (v5 & 0x3FFFFFFF) != 0)
  {
    uint64_t v16 = malloc_type_calloc(v5, 4uLL, 0x100004052888210uLL);
    if (!v16) {
      return 5;
    }
    *a4 = v16;
    _DWORD *v16 = v6;
    if (v6 != -2)
    {
      unsigned int v17 = *(_DWORD *)(a1 + 16);
      if (v17 <= v6)
      {
LABEL_45:
        free(v16);
        *a4 = 0;
        return 8;
      }
      uint64_t v18 = 0;
      uint64_t v19 = *(void *)(a1 + 8);
      while (1)
      {
        unint64_t v20 = (unsigned int *)(v19 + 4 * v6);
        if ((unint64_t)v20 > v19 - 4 + (unint64_t)*(unsigned int *)(a1 + 48)) {
          break;
        }
        unsigned int v21 = *v20;
        if (*v20 == -2 || v18 >= *a3 - 1) {
          break;
        }
        if ((v21 + 4 > 3 || v21 == -2) && v21 <= v17)
        {
          v16[v18 + 1] = v21;
          unsigned int v6 = *v20;
          unsigned int v17 = *(_DWORD *)(a1 + 16);
          ++v18;
          if (*v20 < v17) {
            continue;
          }
        }
        goto LABEL_45;
      }
    }
    return 0;
  }
  return result;
}

uint64_t headerSetSmallFatSize(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 64) = a2;
  }
  return result;
}

uint64_t headerGetDirectoryStartSector(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 48);
  }
  return result;
}

uint64_t tocRead(uint64_t a1, uint64_t a2)
{
  return directoryConstructAllDirs(a2, (uint64_t *)a1, (signed int *)(a1 + 8));
}

uint64_t directoryConstructAllDirs(uint64_t a1, uint64_t *a2, signed int *a3)
{
  uint64_t v47 = 0;
  int v46 = 0;
  uint64_t result = 6;
  if (a1 && a2 && a3 && !*a2 && !*a3)
  {
    rootStorageGetDirChain(a1, &v47, &v46);
    uint64_t Header = rootStorageGetHeader(a1);
    char SectorShift = headerGetSectorShift(Header);
    unsigned int v9 = v46 << SectorShift;
    if ((v46 << SectorShift) < 0x80) {
      return 8;
    }
    if (v9 <= 0xC30C307F)
    {
      unsigned int v10 = v9 >> 7;
      unsigned int v11 = malloc_type_malloc(168 * (v9 >> 7) + 168, 0x13AB5A48uLL);
      if (v11)
      {
        uint64_t v12 = (uint64_t)v11;
        bzero(v11, 168 * v10);
        directoryConstructEntry(-1, v12);
        uint64_t v13 = 0;
        *(unsigned char *)(v12 + 88) = 1;
        *a2 = v12 + 168;
        signed int v41 = v10;
        if (v10 <= 1) {
          uint64_t v14 = 1;
        }
        else {
          uint64_t v14 = v10;
        }
        uint64_t v15 = 16;
        uint64_t v44 = v14;
        while (1)
        {
          *(void *)(*a2 + 168 * v13) = a1;
          uint64_t v16 = *a2;
          unsigned int v17 = (uint64_t *)(*a2 + 168 * v13);
          uint64_t v49 = 0;
          int v48 = 0;
          rootStorageGetDirChain(*v17, &v49, &v48);
          uint64_t v18 = rootStorageGetHeader(*v17);
          unsigned int v19 = headerGetSectorShift(v18);
          if (v19 >= 7)
          {
            int v21 = (1 << v19) / 128;
            uint64_t Sector = rootStorageReadSector(*v17, *(_DWORD *)(v49 + 4 * ((int)v13 / v21)));
            if (!Sector)
            {
              uint64_t v14 = v44;
              if (!rootStorageGetStatus(*v17)) {
                goto LABEL_16;
              }
              goto LABEL_15;
            }
            uint64_t v23 = 0;
            *(_DWORD *)(v16 + 168 * v13 + 12) = v13;
            uint64_t v24 = Sector + (((int)v13 % v21) << 7);
            do
            {
              *(_WORD *)(v16 + v15 + v23) = CsLeReadUInt16((unsigned __int16 *)(v24 + v23));
              v23 += 2;
            }
            while (v23 != 64);
            uint64_t v25 = v16 + 168 * v13;
            *(_WORD *)(v25 + 80) = CsLeReadUInt16((unsigned __int16 *)(v24 + 64));
            v45 = (_WORD *)(v25 + 80);
            *(_DWORD *)(v25 + 84) = *(char *)(v24 + 66);
            v26 = (int *)(v25 + 84);
            *(unsigned char *)(v25 + 88) = *(unsigned char *)(v24 + 67);
            *(_DWORD *)(v25 + 92) = CsLeReadSInt32((unsigned int *)(v24 + 68));
            v43 = (int *)(v25 + 92);
            *(_DWORD *)(v25 + 96) = CsLeReadSInt32((unsigned int *)(v24 + 72));
            v42 = (int *)(v25 + 96);
            *(_DWORD *)(v25 + 100) = CsLeReadSInt32((unsigned int *)(v24 + 76));
            uint64_t v27 = v25 + 100;
            *(_DWORD *)(v27 + 8) = CsLeReadSInt32((unsigned int *)(v24 + 80));
            *(_WORD *)(v27 + 12) = CsLeReadUInt16((unsigned __int16 *)(v24 + 84));
            *(_WORD *)(v27 + 14) = CsLeReadUInt16((unsigned __int16 *)(v24 + 86));
            *(void *)(v27 + 16) = *(void *)(v24 + 88);
            *(_DWORD *)(v27 + 4) = CsLeReadSInt32((unsigned int *)(v24 + 96));
            *(void *)(v27 + 28) = leReadTime((uint64_t *)(v24 + 100));
            *(void *)(v27 + 36) = leReadTime((uint64_t *)(v24 + 108));
            *(_DWORD *)(v27 + 44) = CsLeReadSInt32((unsigned int *)(v24 + 116));
            uint64_t v28 = rootStorageGetHeader(*v17);
            unsigned int MajorVersion = headerGetMajorVersion(v28);
            uint64_t v30 = (unsigned int *)(v24 + 120);
            uint64_t v31 = MajorVersion < 4 ? CsLeReadSInt32(v30) : CsLeReadUInt64((uint64_t)v30);
            uint64_t v32 = v16 + 168 * v13;
            *(void *)(v32 + 152) = v31;
            *(void *)(v32 + 160) = 0;
            int v33 = *v26;
            unsigned int v34 = *v26 - 1;
            uint64_t v14 = v44;
            if (v34 < 2) {
              goto LABEL_30;
            }
            if (!v33) {
              goto LABEL_16;
            }
            if (v33 == 5)
            {
LABEL_30:
              unsigned int v35 = (unsigned __int16)*v45;
              if ((v35 & 1) == 0 && v35 <= 0x41)
              {
                if (v35 < 4)
                {
                  if (v33 == 5) {
                    goto LABEL_44;
                  }
                }
                else
                {
                  unsigned int v36 = v35 >> 1;
                  v37 = (_WORD *)(v16 + 168 * v13 + 16);
                  LODWORD(v38) = v36 - 1;
                  if (!v37[v38]) {
                    goto LABEL_35;
                  }
                  if (v33 == 5)
                  {
                    _WORD *v37 = 0;
                    _WORD *v45 = 1;
LABEL_35:
                    if ((int)v38 <= 1) {
                      uint64_t v38 = 1;
                    }
                    else {
                      uint64_t v38 = v38;
                    }
                    do
                    {
                      if (!*(_WORD *)(v16 + v15))
                      {
                        if (v33 != 5) {
                          goto LABEL_15;
                        }
                        _WORD *v37 = 0;
                        _WORD *v45 = 1;
                      }
                      v16 += 2;
                      --v38;
                    }
                    while (v38);
LABEL_44:
                    if (*v43 >= -1 && *v43 < v41)
                    {
                      BOOL v40 = *v42 >= -1 && *v42 < v41;
                      if (v40 && *(int *)v27 >= -1 && *(_DWORD *)v27 < v41) {
                        goto LABEL_16;
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_15:
          uint64_t v20 = *a2 + 168 * v13;
          directoryConstructEntry(-1, v20);
          *(unsigned char *)(v20 + 88) = 1;
LABEL_16:
          ++v13;
          v15 += 168;
          if (v13 == v14)
          {
            uint64_t result = directoryNormalize(*a2, (_DWORD *)*a2);
            *a3 = v41;
            return result;
          }
        }
      }
    }
    return 5;
  }
  return result;
}

uint64_t rootStorageGetDirChain(uint64_t result, void *a2, _DWORD *a3)
{
  if (result)
  {
    uint64_t v3 = *(void *)(result + 64);
    if (v3)
    {
      int v4 = *(_DWORD *)(result + 72);
      if (v4)
      {
        *a2 = v3;
        *a3 = v4;
      }
    }
  }
  return result;
}

uint64_t directoryConstructEntry(int a1, uint64_t a2)
{
  *(_WORD *)(a2 + 16) = 0;
  *(_WORD *)(a2 + 80) = 0;
  *(_DWORD *)(a2 + 8) = -1;
  *(_DWORD *)(a2 + 12) = a1;
  *(_DWORD *)(a2 + 84) = 0;
  *(unsigned char *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 92) = xmmword_238EDE970;
  *(void *)(a2 + 116) = 0;
  *(void *)(a2 + 108) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(_DWORD *)(a2 + 144) = -1;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  return 0;
}

uint64_t leReadTime(uint64_t *a1)
{
  uint64_t v3 = 0;
  uint64_t v2 = *a1;
  time_tFromWinFileTime((unsigned int *)&v2, &v3);
  return v3;
}

uint64_t time_tFromWinFileTime(unsigned int *a1, void *a2)
{
  unsigned int v2 = *a1;
  if (*(void *)a1)
  {
    unsigned int v4 = HIWORD(v2);
    BOOL v5 = (unsigned __int16)*a1 < 0x8000u;
    if ((unsigned __int16)*a1 < 0x8000u) {
      int v6 = 0x8000;
    }
    else {
      int v6 = -32768;
    }
    int v7 = (__PAIR64__(v4, (unsigned __int16)*a1) - 0x8000) >> 32;
    BOOL v8 = v4 >= (v5 | 0xD53Eu);
    unsigned int v9 = v4 - (v5 | 0xD53E);
    if (!v8)
    {
      unsigned int v9 = v7 + 10946;
      BOOL v5 = 1;
    }
    if (v5) {
      int v10 = -27111903;
    }
    else {
      int v10 = -27111902;
    }
    int v11 = a1[1] + v10;
    if (v11 < 0) {
      unsigned int v9 = 0xFFFF - v9;
    }
    unsigned int v12 = v11 ^ (v11 >> 31);
    unsigned int v13 = v9 + ((v12 % 0x2710) << 16);
    unsigned int v14 = v13 / 0x2710 + ((v12 / 0x2710 - 1000 * ((4294968 * (unint64_t)(v12 / 0x2710)) >> 32)) << 16);
    int v15 = v6 + (unsigned __int16)v2;
    if (v11 >= 0) {
      unsigned int v16 = v14 / 0x3E8;
    }
    else {
      unsigned int v16 = 0xFFFF - v14 / 0x3E8;
    }
    if (v11 < 0) {
      int v15 = 0xFFFF - v15;
    }
    LODWORD(v17) = ((v15 + ((v13 % 0x2710) << 16)) / 0x2710 + ((v14 % 0x3E8) << 16)) / 0x3E8;
    if (v11 >= 0) {
      uint64_t v17 = v17;
    }
    else {
      uint64_t v17 = (0xFFFF - v17);
    }
    uint64_t v3 = ((v16 << 16) | ((unint64_t)((v12 / 0x989680) ^ (v11 >> 31)) << 32)) + v17;
  }
  else
  {
    uint64_t v3 = 0;
  }
  *a2 = v3;
  return 0;
}

uint64_t headerGetMajorVersion(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 26);
}

uint64_t directoryNormalize(uint64_t a1, _DWORD *a2)
{
  int v2 = a2[21];
  if (v2 == 10) {
    return 16;
  }
  if (!v2) {
    return 0;
  }
  a2[21] = 10;
  int v6 = a2[25];
  if (v6 != -1)
  {
    uint64_t result = directoryNormalize(a1, a1 + 168 * v6);
    if (result) {
      return result;
    }
    *(_DWORD *)(a1 + 168 * (int)a2[25] + 8) = -1;
  }
  int v7 = a2[23];
  if (v7 != -1)
  {
    uint64_t result = directoryNormalize(a1, a1 + 168 * v7);
    if (result) {
      return result;
    }
    *(_DWORD *)(a1 + 168 * (int)a2[23] + 8) = a2[3];
  }
  int v8 = a2[24];
  if (v8 != -1)
  {
    uint64_t result = directoryNormalize(a1, a1 + 168 * v8);
    if (result) {
      return result;
    }
    *(_DWORD *)(a1 + 168 * (int)a2[24] + 8) = a2[3];
  }
  uint64_t result = 0;
  a2[21] = v2;
  return result;
}

uint64_t storageConstructRoot(uint64_t a1, void *a2)
{
  TOC = (uint64_t *)rootStorageGetTOC(a1);
  uint64_t EntryAtIndex = tocGetEntryAtIndex(TOC, 0);
  if (!EntryAtIndex) {
    return 11;
  }
  uint64_t result = storageConstructFromDirEntry(EntryAtIndex, a2);
  if (!result)
  {
    *(void *)(*a2 + 16) = 0;
    uint64_t v7 = *a2;
    *(_DWORD *)(v7 + 8) = 0;
    *(void *)uint64_t v7 = a1;
    int SmallStreamCutoff = headerGetSmallStreamCutoff(a1);
    uint64_t result = 0;
    unsigned int v9 = (uint64_t *)(*a2 + 40);
    uint64_t v10 = *v9;
    *(_DWORD *)(*a2 + 32) = SmallStreamCutoff;
    if (!v10)
    {
      documentPropertiesConstruct((uint64_t)v9);
      return 0;
    }
  }
  return result;
}

uint64_t rootStorageGetTOC(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t result = *(void *)(a1 + 40);
  if (!result) {
    return 0;
  }
  return result;
}

uint64_t tocGetEntryAtIndex(uint64_t *a1, unsigned int a2)
{
  return directoryGetAtIndex(*a1, a2);
}

uint64_t directoryGetAtIndex(uint64_t a1, unsigned int a2)
{
  return a1 + 168 * a2;
}

uint64_t storageConstructFromDirEntry(uint64_t a1, void *a2)
{
  uint64_t v8 = 0;
  if ((directoryGetType(a1) & 0xFFFFFFFB) != 1) {
    return 9;
  }
  int v4 = storageConstruct(&v8);
  uint64_t result = 5;
  if (!v4)
  {
    uint64_t v6 = v8;
    if (v8)
    {
      int Index = directoryGetIndex(a1);
      uint64_t result = 0;
      *(_DWORD *)(v6 + 8) = Index;
      *a2 = v6;
    }
  }
  return result;
}

uint64_t directoryGetType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 84);
}

uint64_t storageConstruct(void *a1)
{
  int v2 = malloc_type_malloc(0x30uLL, 0x1020040F265C080uLL);
  if (!v2) {
    return 5;
  }
  uint64_t v3 = v2;
  v2[1] = 0u;
  v2[2] = 0u;
  *int v2 = 0u;
  *((_DWORD *)v2 + 2) = -1;
  uint64_t v4 = openListConstruct((void *)v2 + 3);
  if (v4) {
    free(v3);
  }
  else {
    *a1 = v3;
  }
  return v4;
}

uint64_t openListConstruct(void *a1)
{
  if (!a1) {
    return 6;
  }
  int v2 = malloc_type_malloc(0x10uLL, 0x10200403A5D3213uLL);
  if (!v2) {
    return 5;
  }
  uint64_t v3 = v2;
  uint64_t result = 0;
  *uint64_t v3 = 0;
  v3[1] = 0;
  *a1 = v3;
  return result;
}

uint64_t directoryGetIndex(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 12);
  }
  return result;
}

uint64_t headerGetSmallStreamCutoff(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 56);
  }
  return result;
}

uint64_t documentPropertiesConstruct(uint64_t a1)
{
  int v2 = malloc_type_malloc(0x28uLL, 0x20040769AC3DAuLL);
  *(void *)a1 = v2;
  if (!v2) {
    return 5;
  }
  uint64_t v3 = v2;
  uint64_t result = 0;
  v3[4] = 0;
  *(_OWORD *)uint64_t v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  **(void **)a1 = 0;
  *(void *)(*(void *)a1 + 24) = 0;
  *(void *)(*(void *)a1 + 8) = 0;
  *(void *)(*(void *)a1 + 16) = 0;
  *(void *)(*(void *)a1 + 32) = 0;
  return result;
}

uint64_t directoryGetStartSector(uint64_t a1)
{
  return *(unsigned int *)(a1 + 144);
}

uint64_t fatGetChainLastSector(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  if (a2 > 0xFFFFFFFD)
  {
    a2 = -1;
LABEL_3:
    uint64_t result = 0;
    *a3 = a2;
    return result;
  }
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4 > a2)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = (unsigned int *)(v5 + 4 * a2);
    unsigned int v7 = *v6;
    if (*v6 <= v4 || v7 == -2)
    {
      if (v7 == -2) {
        goto LABEL_3;
      }
      int v9 = 1;
      while (v7 < v4)
      {
        if (++v9 > v4) {
          break;
        }
        uint64_t v10 = v6;
        uint64_t v6 = (unsigned int *)(v5 + 4 * v7);
        unsigned int v7 = *v6;
        if (*v6 > v4 && v7 != -2) {
          break;
        }
        if (v7 == -2)
        {
          a2 = *v10;
          goto LABEL_3;
        }
      }
    }
  }
  return 8;
}

uint64_t getStorageFromRoot(uint64_t a1, void *a2)
{
  uint64_t result = 6;
  if (a1 && a2)
  {
    uint64_t v4 = *(void *)(a1 + 48);
    if (v4)
    {
      uint64_t result = 0;
      *a2 = v4;
    }
    else
    {
      return 11;
    }
  }
  return result;
}

void PptBinaryReader::commonStart(PptBinaryReader *this)
{
  int v2 = (SsrwOOStorage *)((char *)this + 40);
  if (SsrwOOStorage::hasChild((SsrwOOStorage *)((char *)this + 40), (const unsigned __int16 *)"P"))
  {
    int v2 = (SsrwOOStorage *)SsrwOOStorage::openStorage(v2, (const unsigned __int16 *)"P");
    *((void *)this + 16) = v2;
  }
  *((void *)this + 17) = v2;
  *((void *)this + 19) = SsrwOOStorage::openStream(v2, (const unsigned __int16 *)"C");
  uint64_t v3 = (EshHeader *)operator new(0x10uLL);
  EshHeader::makeDefault(v3);
  uint64_t v4 = (const void *)*((void *)this + 2);
  if (v4) {
  else
  }
    uint64_t v5 = 0;
  uint64_t v6 = (PptParserVisitor *)operator new(0x48uLL);
  PptParserVisitor::PptParserVisitor(v6, v5);
  *((void *)this + 23) = v6;
  PptParserVisitor::init(v6, *((SsrwOOStream **)this + 19));
  PptParserVisitor::parse(*((SsrwOOStream ***)this + 23), v3, 0);
  if (v3->var3 == 4086)
  {
    unsigned int v7 = (PptCurrentUserAtom *)operator new(0x58uLL);
    PptCurrentUserAtom::PptCurrentUserAtom(v7, v3);
    *((void *)this + 26) = v7;
    if (v7) {
    else
    }
      uint64_t v8 = 0;
    (*(void (**)(_DWORD *, void))(*(void *)v8 + 112))(v8, *((void *)this + 23));
    int v11 = v8 + 13;
    int v10 = v8[13];
    uint64_t v9 = v11[1];
    uint64_t v12 = *((void *)this + 23);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    *((void *)this + 23) = 0;
    (*(void (**)(void, void))(**((void **)this + 19) + 152))(*((void *)this + 19), 0);
    uint64_t v13 = *((void *)this + 19);
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    *((void *)this + 19) = 0;
    uint64_t v14 = *((void *)this + 26);
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    *((void *)this + 26) = 0;
    if (v10 == -476987297 || v10 == -204356385)
    {
      *((void *)this + 19) = SsrwOOStorage::openStream(*((SsrwOOStorage **)this + 17), L"PowerPoint Document");
      int v15 = (PptParserVisitor *)operator new(0x48uLL);
      PptParserVisitor::PptParserVisitor(v15, v5);
      *((void *)this + 23) = v15;
      PptParserVisitor::init(v15, *((SsrwOOStream **)this + 19));
      unsigned int v16 = (PptEshReader *)operator new(0x60uLL);
      PptEshReader::PptEshReader(v16);
      *((void *)this + 21) = v16;
      EshGroupProperties::init((uint64_t)v16, *((void *)this + 2));
      uint64_t v17 = (EshHeader *)operator new(0x10uLL);
      EshHeader::makeDefault(v17);
      *((void *)this + 25) = v17;
      uint64_t v18 = (SsrwOOStgInfo *)(*(uint64_t (**)(void))(**((void **)this + 19) + 168))(*((void *)this + 19));
      *((_DWORD *)this + 55) = SsrwOOStgInfo::getSize(v18);
      unsigned int v19 = (PptPersistDir *)operator new(0x68uLL);
      PptPersistDir::PptPersistDir(v19, *((PptParserVisitor **)this + 23));
      *((void *)this + 24) = v19;
      PptPersistDir::getDirEntries(v19, v9);
      int OffsetByRef = PptPersistDir::getOffsetByRef(*((PptPersistDir **)this + 24), *(_DWORD *)(*((void *)this + 24) + 84));
      *((_DWORD *)this + 54) = OffsetByRef;
      if (OffsetByRef)
      {
        if (PptPersistDir::getRefByOffset(*((PptPersistDir **)this + 24), 0) == -1) {
          uint64_t NextOffset = PptPersistDir::getNextOffset(*((PptPersistDir **)this + 24), 0);
        }
        else {
          uint64_t NextOffset = 0;
        }
        *((_DWORD *)this + 54) = NextOffset;
      }
      else
      {
        uint64_t NextOffset = 0;
      }
      PptParserVisitor::parse(*((SsrwOOStream ***)this + 23), *((EshHeader **)this + 25), NextOffset);
      *((unsigned char *)this + 164) = 0;
      if (SsrwOOStorage::hasChild(*((SsrwOOStorage **)this + 17), L"Pictures"))
      {
        uint64_t v22 = SsrwOOStorage::openStream(*((SsrwOOStorage **)this + 17), L"Pictures");
        *((void *)this + 18) = v22;
        *((_DWORD *)this + 56) = (*(uint64_t (**)(SsrwOOStgStream *))(*(void *)v22 + 40))(v22);
        uint64_t v23 = (SsrwOOStgInfo *)(*(uint64_t (**)(void))(**((void **)this + 18) + 168))(*((void *)this + 18));
        unsigned int Size = SsrwOOStgInfo::getSize(v23);
        *((_DWORD *)this + 57) = Size;
        if (Size < 9)
        {
          (*(void (**)(void, void))(**((void **)this + 18) + 152))(*((void *)this + 18), 0);
          uint64_t v26 = *((void *)this + 18);
          if (v26) {
            (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
          }
          *((void *)this + 18) = 0;
        }
        else
        {
          uint64_t v25 = (PptEshReader *)operator new(0x60uLL);
          PptEshReader::PptEshReader(v25);
          *((void *)this + 22) = v25;
          EshGroupProperties::init((uint64_t)v25, *((void *)this + 2));
        }
      }
      *((void *)this + 29) = 0;
      JUMPOUT(0x23EC997B0);
    }
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 8003;
  }
  uint64_t v27 = __cxa_allocate_exception(4uLL);
  *uint64_t v27 = 4001;
}

void sub_238A7B66C(_Unwind_Exception *a1)
{
  operator delete(v2);
  MEMORY[0x23EC997B0](v1, 0x1000C408B6DE1C6);
  _Unwind_Resume(a1);
}

uint64_t SsrwOOStorage::hasChild(SsrwOOStorage *this, const unsigned __int16 *a2)
{
  signed int v15 = 0;
  uint64_t v14 = 0;
  int ChildrenInfo = getChildrenInfo((uint64_t)this->var0, (void ***)&v14, (unsigned int *)&v15);
  if (ChildrenInfo)
  {
    int v12 = ChildrenInfo;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v12;
  }
  if (v15 < 1 || v14 == 0) {
    return 0;
  }
  uint64_t v6 = 0;
  char v7 = 0;
  uint64_t v8 = 1;
  do
  {
    if (!_ChWcscmp(*(const unsigned __int16 **)((char *)v14 + v6), a2)) {
      char v7 = 1;
    }
    uint64_t v5 = v7 & 1;
    v6 += 64;
  }
  while (v8++ < v15 && v5 == 0);
  freeInfo((void **)v14, v15);
  free(v14);
  return v5;
}

size_t getChildrenInfo(uint64_t a1, void ***a2, unsigned int *a3)
{
  size_t result = 6;
  if (a1 && a2 && a3)
  {
    TOC = (uint64_t *)rootStorageGetTOC(*(void *)a1);
    uint64_t EntryAtIndex = tocGetEntryAtIndex(TOC, *(_DWORD *)(a1 + 8));
    if (!EntryAtIndex) {
      return 6;
    }
    uint64_t v9 = EntryAtIndex;
    size_t result = tocCountEntryChildren((uint64_t)TOC, EntryAtIndex);
    if (!result)
    {
      *a3 = 0;
      return result;
    }
    unsigned int v10 = result;
    if (result == -1)
    {
      *a3 = 0;
      return 16;
    }
    size_t v11 = (unint64_t)result << 6;
    if (v11 >= v10)
    {
      int v12 = (void **)malloc_type_malloc(v11, 0xBF89B1ADuLL);
      if (v12)
      {
        uint64_t v13 = v12;
        unsigned int v14 = tocFillChildrenStgArray(TOC, v9, (uint64_t)v12);
        if (v14 == v10)
        {
          size_t result = 0;
          *a2 = v13;
          *a3 = v10;
          return result;
        }
        freeInfo(v13, v14);
        free(v13);
      }
    }
    return 5;
  }
  return result;
}

size_t tocCountEntryChildren(uint64_t a1, uint64_t a2)
{
  size_t result = directoryGetFirstChild(*(void *)a1, a2);
  if (result)
  {
    uint64_t v4 = *(void *)a1;
    size_t v5 = *(unsigned int *)(a1 + 8);
    return directoryCountChildren(result, 0, v4, v5);
  }
  return result;
}

uint64_t directoryGetFirstChild(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 100);
  if (v2 == -1) {
    return 0;
  }
  else {
    return a1 + 168 * v2;
  }
}

size_t directoryCountChildren(uint64_t a1, int a2, uint64_t a3, size_t count)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if ((count & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  size_t v4 = count;
  if (count)
  {
    if (count > 0x3FF)
    {
      uint64_t v8 = malloc_type_calloc(count, 1uLL, 0x100004077774924uLL);
      size_t v4 = directoryCountChildrenAndCheck(a1, a2, a3, v4, (uint64_t)v8);
      if (v8 != v10) {
        free(v8);
      }
    }
    else
    {
      bzero(v10, 0x400uLL);
      return directoryCountChildrenAndCheck(a1, a2, a3, v4, (uint64_t)v10);
    }
  }
  return v4;
}

uint64_t directoryCountChildrenAndCheck(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    uint64_t v8 = result;
    uint64_t v9 = (a2 + 1);
    uint64_t v10 = *(unsigned int *)(result + 92);
    if (v10 == -1
      || (size_t result = 0xFFFFFFFFLL, (v10 & 0x80000000) == 0)
      && (int)v10 < (int)a4
      && !*(unsigned char *)(a5 + v10)
      && (*(unsigned char *)(a5 + v10) = 1,
          size_t result = directoryCountChildrenAndCheck(a3 + 168 * v10, v9, a3, a4, a5),
          uint64_t v9 = result,
          *(unsigned char *)(a5 + v10) = 0,
          result != -1))
    {
      uint64_t v11 = *(unsigned int *)(v8 + 96);
      if (v11 == -1)
      {
        return v9;
      }
      else
      {
        size_t result = 0xFFFFFFFFLL;
        if ((v11 & 0x80000000) == 0 && (int)v11 < (int)a4 && !*(unsigned char *)(a5 + v11))
        {
          *(unsigned char *)(a5 + v11) = 1;
          size_t result = directoryCountChildrenAndCheck(a3 + 168 * v11, v9, a3, a4, a5);
          *(unsigned char *)(a5 + v11) = 0;
        }
      }
    }
  }
  return result;
}

uint64_t tocFillChildrenStgArray(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = directoryGetFirstChild(*a1, a2);
  if (result)
  {
    unsigned int v7 = 0;
    directoryFillStgArray(result, a3, &v7, *a1);
    if (v6) {
      return 0;
    }
    else {
      return v7;
    }
  }
  return result;
}

void directoryFillStgArray(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  __n128 v8 = directoryFillStgInfo(a1, (uint64_t *)(a2 + ((unint64_t)*a3 << 6)));
  if (!v9)
  {
    ++*a3;
    int v10 = *(_DWORD *)(a1 + 92);
    if (v10 == -1 || !directoryFillStgArray(a4 + 168 * v10, a2, a3, a4, v8))
    {
      int v11 = *(_DWORD *)(a1 + 96);
      if (v11 != -1) {
        directoryFillStgArray(a4 + 168 * v11, a2, a3, a4, v8);
      }
    }
  }
}

__n128 directoryFillStgInfo(uint64_t a1, uint64_t *a2)
{
  if (a1 && a2)
  {
    uint64_t v4 = _ChWcslen((const unsigned __int16 *)(a1 + 16));
    uint64_t v6 = v4 + 1;
    if (v4 == -1 || v6 < 0 || !(2 * v6))
    {
      *a2 = 0;
    }
    else
    {
      unsigned int v7 = malloc_type_malloc(2 * v6, 0xBF89B1ADuLL);
      *a2 = (uint64_t)v7;
      if (v7)
      {
        __n128 v8 = v7;
        uint64_t v9 = _ChWcslen((const unsigned __int16 *)(a1 + 16));
        bzero(v8, 2 * v9 + 2);
        int v10 = (_WORD *)*a2;
        uint64_t v11 = _ChWcslen((const unsigned __int16 *)(a1 + 16));
        memcpy(v10, (const void *)(a1 + 16), 2 * v11);
        int v12 = (_WORD *)*a2;
        v12[_ChWcslen((const unsigned __int16 *)(a1 + 16))] = 0;
        uint64_t v13 = *(int *)(a1 + 84);
        if v13 <= 5 && ((0x27u >> v13))
        {
          int v14 = *(_DWORD *)(a1 + 104);
          *((_DWORD *)a2 + 2) = dword_238EDE980[v13];
          *((_DWORD *)a2 + 3) = v14;
          a2[2] = *(void *)(a1 + 152);
          *(_OWORD *)(a2 + 3) = *(_OWORD *)(a1 + 128);
          *((_DWORD *)a2 + 10) = headerGetSmallStreamCutoff(*(void *)a1);
          __n128 result = *(__n128 *)(a1 + 108);
          *(__n128 *)((char *)a2 + 44) = result;
        }
      }
    }
  }
  return result;
}

uint64_t _ChWcslenA(uint64_t a1)
{
  uint64_t v1 = 0;
  while (*(_DWORD *)(a1 + 4 * v1++))
    ;
  return v1 - 1;
}

_WORD *WcharToChCHAR2(_WORD *result, int *a2)
{
  int v2 = *a2;
  uint64_t v3 = result;
  if (*a2)
  {
    uint64_t v4 = a2 + 1;
    uint64_t v3 = result;
    do
    {
      *v3++ = v2;
      int v5 = *v4++;
      LOWORD(v2) = v5;
    }
    while (v5);
  }
  *uint64_t v3 = 0;
  return result;
}

uint64_t _ChWcscmp(const unsigned __int16 *a1, const unsigned __int16 *a2)
{
  unsigned int v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1 + 1;
    while (1)
    {
      unsigned int v4 = *a2;
      if (v2 < v4) {
        return 0xFFFFFFFFLL;
      }
      if (v4 < v2) {
        return 1;
      }
      ++a2;
      unsigned int v5 = *v3++;
      unsigned int v2 = v5;
      if (!v5) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    if (*a2) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 0;
    }
  }
}

uint64_t freeInfo(void **a1, unsigned int a2)
{
  uint64_t result = 6;
  if (a1 && (a2 & 0x80000000) == 0)
  {
    if (a2)
    {
      uint64_t v4 = a2;
      do
      {
        if (*a1) {
          free(*a1);
        }
        a1 += 8;
        --v4;
      }
      while (v4);
    }
    return 0;
  }
  return result;
}

SsrwOOStgStream *SsrwOOStorage::openStream(SsrwOOStorage *this, const unsigned __int16 *a2)
{
  unsigned int v7 = 0;
  int v2 = openStream((uint64_t)this->var0, a2, (uint64_t *)&v7);
  if (v2)
  {
    int v5 = v2;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v5;
  }
  uint64_t v3 = (SsrwOOStgStream *)operator new(0xC8uLL);
  SsrwOOStgStream::SsrwOOStgStream(v3, v7);
  return v3;
}

void sub_238A7BEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  int v12 = v10;
  operator delete(v12);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    closeStream(&a10);
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 5;
  }
  _Unwind_Resume(a1);
}

uint64_t _ChWcslen(const unsigned __int16 *a1)
{
  uint64_t v1 = 0;
  while (a1[v1++])
    ;
  return v1 - 1;
}

_DWORD *ChCHAR2ToWchar(_DWORD *result, _WORD *a2)
{
  int v2 = (unsigned __int16)*a2;
  uint64_t v3 = result;
  if (*a2)
  {
    uint64_t v4 = a2 + 1;
    uint64_t v3 = result;
    do
    {
      *v3++ = v2;
      int v5 = *v4++;
      int v2 = v5;
    }
    while (v5);
  }
  *uint64_t v3 = 0;
  return result;
}

uint64_t openStream(uint64_t a1, const unsigned __int16 *a2, uint64_t *a3)
{
  if (!a1) {
    return 6;
  }
  uint64_t ChildEntry = 6;
  if (a2)
  {
    uint64_t v6 = *(void *)a1;
    if (v6)
    {
      if (a3 && *a2)
      {
        if ((*(_DWORD *)(a1 + 32) | 2) == 2)
        {
          uint64_t v11 = 0;
          TOC = (uint64_t *)rootStorageGetTOC(v6);
          uint64_t EntryAtIndex = tocGetEntryAtIndex(TOC, *(_DWORD *)(a1 + 8));
          if (EntryAtIndex)
          {
            uint64_t ChildEntry = tocFindChildEntry(TOC, EntryAtIndex, a2, &v11);
            if (!ChildEntry)
            {
              uint64_t ChildEntry = streamConstruct(*(void *)a1, a1, v11, *(unsigned int *)(a1 + 32), a3);
              if (!ChildEntry)
              {
                if ((*(_DWORD *)(a1 + 32) - 1) <= 1
                  && (uint64_t ChildEntry = streamUpgradeMiniToRegular((uint64_t *)*a3), ChildEntry)
                  || (uint64_t ChildEntry = openListAppend(*(void *)(a1 + 24), 2, *a3), ChildEntry))
                {
                  streamDestroy((void **)a3);
                }
              }
            }
          }
          else
          {
            return 11;
          }
        }
        else
        {
          return 2;
        }
      }
    }
  }
  return ChildEntry;
}

uint64_t tocFindChildEntry(uint64_t *a1, uint64_t a2, const unsigned __int16 *a3, uint64_t *a4)
{
  return directoryFindChild(a2, a3, *a1, a4);
}

uint64_t directoryFindChild(uint64_t a1, const unsigned __int16 *a2, uint64_t a3, uint64_t *a4)
{
  int v7 = *(_DWORD *)(a1 + 100);
  int v8 = *(_DWORD *)(a1 + 84);
  if (v8 == 1)
  {
    if (!a4) {
      return 6;
    }
  }
  else
  {
    uint64_t result = 6;
    if (!a4 || v8 != 5) {
      return result;
    }
  }
  *a4 = 0;
  if (v7 == -1) {
    return 11;
  }
  while (1)
  {
    if (!*(_DWORD *)(a3 + 168 * v7 + 84)) {
      return 16;
    }
    int v10 = v7;
    int v11 = compareNames((const unsigned __int16 *)(a3 + 168 * v7 + 16), a2);
    if (!v11) {
      break;
    }
    uint64_t v12 = a3 + 168 * v10;
    uint64_t v13 = (int *)(v12 + 92);
    int v14 = (int *)(v12 + 96);
    if (v11 > 0) {
      int v14 = v13;
    }
    int v7 = *v14;
    if (v7 == -1)
    {
      uint64_t v15 = *a4;
      goto LABEL_16;
    }
  }
  uint64_t v15 = a3 + 168 * v10;
  *a4 = v15;
LABEL_16:
  if (v15) {
    return 0;
  }
  else {
    return 11;
  }
}

uint64_t compareNames(const unsigned __int16 *a1, const unsigned __int16 *a2)
{
  uint64_t v3 = a1;
  int v4 = _ChWcslen(a1);
  int v5 = _ChWcslen(a2);
  if (v4 == v5)
  {
    if (v4 < 1)
    {
      return 0;
    }
    else
    {
      uint64_t v6 = v4;
      while (1)
      {
        __darwin_ct_rune_t v7 = *v3++;
        unsigned __int16 v8 = __toupper(v7);
        __darwin_ct_rune_t v9 = *a2++;
        unsigned __int16 v10 = __toupper(v9);
        if (v8 < v10) {
          return 0xFFFFFFFFLL;
        }
        if (v8 > v10) {
          break;
        }
        if (!--v6) {
          return 0;
        }
      }
      return 1;
    }
  }
  else if (v4 < v5)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 1;
  }
}

uint64_t streamConstruct(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t Header = rootStorageGetHeader(a1);
  TOC = (uint64_t *)rootStorageGetTOC(a1);
  int Type = directoryGetType(a3);
  if (Type != 5 && Type != 2) {
    return 10;
  }
  uint64_t v13 = (char *)malloc_type_malloc(0x80uLL, 0x1030040FF6B07E4uLL);
  if (!v13) {
    return 5;
  }
  uint64_t v14 = (uint64_t)v13;
  uint64_t v30 = a5;
  *(_OWORD *)(v13 + 8) = 0u;
  *((void *)v13 + 15) = 0;
  *(_OWORD *)(v13 + 104) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  uint64_t v15 = (uint64_t *)(v13 + 56);
  *(void *)uint64_t v13 = a1;
  *((void *)v13 + 2) = a2;
  *((_DWORD *)v13 + 2) = directoryGetIndex(a3);
  char SectorShift = headerGetSectorShift(Header);
  char SmallSectorShift = headerGetSmallSectorShift(Header);
  uint64_t StreamSharedBlock = directoryQueryStreamSharedBlock(a3, v15);
  if (!StreamSharedBlock)
  {
    uint64_t v19 = *v15;
    if (!*(_DWORD *)(*v15 + 20))
    {
      uint64_t StreamLength = directoryGetStreamLength(a3);
      uint64_t v19 = *v15;
      *(void *)*uint64_t v15 = StreamLength;
    }
    *(_WORD *)(v19 + 32) = 0;
    if (headerGetSmallStreamCutoff(a1) != 1 && headerGetSmallStreamCutoff(a1) != 2)
    {
      *(void *)(v14 + 32) = 0;
LABEL_15:
      if ((a4 & 0xFFFFFFFD) != 0) {
        goto LABEL_16;
      }
      if (streamShouldBeMini(v14))
      {
        Smalluint64_t Fat = rootStorageGetSmallFat(a1);
      }
      else
      {
        Smalluint64_t Fat = rootStorageGetFat(a1);
        char SmallSectorShift = SectorShift;
      }
      if (!*(_DWORD *)(*v15 + 20))
      {
        *(_DWORD *)(*v15 + 20) = calcReqdSectors(*(void *)*v15, 1 << SmallSectorShift);
        unsigned int StartSector = directoryGetStartSector(a3);
        uint64_t Chain = fatGetChain(SmallFat, StartSector, (unsigned int *)(*v15 + 20), (void *)(*v15 + 8));
        if (Chain) {
          goto LABEL_30;
        }
        *(_DWORD *)(*v15 + 16) = *(_DWORD *)(*v15 + 20);
      }
      if (!streamShouldBeMini(v14)
        || *(void *)(*v15 + 24)
        || *(_DWORD *)(*v15 + 36) != 1
        || (uint64_t v27 = tocGetEntryAtIndex(TOC, 0), Chain = streamConstruct(a1, a2, v27, a4, *v15 + 24), !Chain))
      {
LABEL_16:
        *(void *)(v14 + 24) = 0;
        *(void *)(v14 + 40) = 0xFFFFFFFF00000000;
        *(_DWORD *)(v14 + 48) = a4;
        uint64_t v22 = (uint64_t *)rootStorageGetTOC(*(void *)v14);
        uint64_t EntryAtIndex = tocGetEntryAtIndex(v22, *(_DWORD *)(v14 + 8));
        directoryFillStgInfo(EntryAtIndex, (uint64_t *)(v14 + 64));
        uint64_t StreamSharedBlock = v24;
        if (!v24)
        {
          *uint64_t v30 = v14;
          return StreamSharedBlock;
        }
        goto LABEL_17;
      }
LABEL_30:
      uint64_t StreamSharedBlock = Chain;
LABEL_17:
      directoryReleaseStreamSharedBlock(a3);
      free((void *)v14);
      return StreamSharedBlock;
    }
    int v21 = malloc_type_malloc(1 << SectorShift, 0x8B150643uLL);
    *(void *)(v14 + 32) = v21;
    if (v21)
    {
      bzero(v21, 1 << SectorShift);
      goto LABEL_15;
    }
    free((void *)v14);
    return 5;
  }
  return StreamSharedBlock;
}

uint64_t directoryQueryStreamSharedBlock(uint64_t a1, uint64_t *a2)
{
  if (!a1) {
    return 6;
  }
  int v2 = *(_DWORD *)(a1 + 84);
  if (v2 != 5 && v2 != 2) {
    return 6;
  }
  uint64_t v6 = (uint64_t *)(a1 + 160);
  uint64_t v5 = *(void *)(a1 + 160);
  if (!v5)
  {
    if (!a2) {
      return 6;
    }
    goto LABEL_14;
  }
  int RefCount = streamSharedBlockGetRefCount(v5);
  uint64_t result = 6;
  if (a2 && RefCount)
  {
    if (*v6)
    {
      int v9 = streamSharedBlockGetRefCount(*v6);
      streamSharedBlockSetRefCount(*v6, v9 + 1);
      uint64_t result = 0;
      *a2 = *v6;
      return result;
    }
LABEL_14:
    uint64_t result = streamConstructSharedBlock(v6);
    if (!result)
    {
      *a2 = *v6;
      streamSharedBlockSetRefCount(*v6, 1);
      return 0;
    }
  }
  return result;
}

uint64_t streamConstructSharedBlock(void *a1)
{
  if (!a1) {
    return 6;
  }
  int v2 = malloc_type_malloc(0x28uLL, 0x1030040D90EF640uLL);
  if (!v2) {
    return 5;
  }
  uint64_t v3 = v2;
  uint64_t result = 0;
  v3[9] = 0;
  *(_OWORD *)uint64_t v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_WORD *)v3 + 16) = 0;
  *a1 = v3;
  return result;
}

uint64_t streamSharedBlockSetRefCount(uint64_t result, int a2)
{
  *(_DWORD *)(result + 36) = a2;
  return result;
}

uint64_t directoryGetStreamLength(uint64_t a1)
{
  return *(void *)(a1 + 152);
}

uint64_t streamShouldBeMini(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (*(unsigned char *)(v1 + 32)) {
    return *(unsigned __int8 *)(v1 + 33);
  }
  uint64_t Header = rootStorageGetHeader(*(void *)a1);
  unsigned int SmallStreamCutoff = headerGetSmallStreamCutoff(Header);
  TOC = (uint64_t *)rootStorageGetTOC(*(void *)a1);
  uint64_t EntryAtIndex = tocGetEntryAtIndex(TOC, *(_DWORD *)(a1 + 8));
  *(unsigned char *)(v1 + 32) = 1;
  uint64_t result = **(void **)(a1 + 56) < (unint64_t)SmallStreamCutoff
        && directoryGetType(EntryAtIndex) != 5;
  *(unsigned char *)(v1 + 33) = result;
  return result;
}

uint64_t rootStorageGetSmallFat(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t result = *(void *)(a1 + 32);
  if (!result) {
    return 0;
  }
  return result;
}

unint64_t calcReqdSectors(uint64_t a1, unsigned int a2)
{
  return ((unint64_t)(a2 - 1) + a1) / a2;
}

uint64_t rootStorageGetFat(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t result = *(void *)(a1 + 24);
  if (!result) {
    return 0;
  }
  return result;
}

uint64_t openListAppend(uint64_t a1, int a2, uint64_t a3)
{
  if (!a1) {
    return 6;
  }
  uint64_t v6 = malloc_type_malloc(0x18uLL, 0x1020040F89CB87BuLL);
  if (!v6) {
    return 5;
  }
  _DWORD *v6 = a2;
  v6[1] = 0;
  __darwin_ct_rune_t v7 = (void *)a1;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 2) = 0;
  do
  {
    unsigned __int16 v8 = v7;
    uint64_t v9 = *v7;
    __darwin_ct_rune_t v7 = (void *)(*v7 + 16);
  }
  while (v9);
  uint64_t v10 = 0;
  void *v8 = v6;
  ++*(_DWORD *)(a1 + 8);
  return v10;
}

void SsrwOOStgStream::SsrwOOStgStream(SsrwOOStgStream *this, _Stream *a2)
{
  *(void *)this = &unk_26EBDA3C8;
  StreamInfo = (const _StgInfo *)getStreamInfo((uint64_t)a2);
  SsrwOOStgInfo::SsrwOOStgInfo((SsrwOOStgStream *)((char *)this + 8), StreamInfo);
  *((void *)this + 24) = a2;
}

EshHeader *EshHeader::makeDefault(EshHeader *this)
{
  *(void *)((char *)&this->var1 + 1) = 0;
  *(void *)&this->var0 = 0;
  return this;
}

void PptParserVisitor::PptParserVisitor(PptParserVisitor *this, PptEshObjectFactory *a2)
{
  *(void *)this = &unk_26EBEF5A0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = a2;
  *((void *)this + 5) = 0;
  EshHeader::makeDefault((EshHeader *)this + 3);
  *((_DWORD *)this + 16) = 0;
}

void PptParserVisitor::init(PptParserVisitor *this, SsrwOOStream *a2)
{
  *((void *)this + 1) = a2;
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4001;
  }
  uint64_t v3 = (EshParserVisitor *)operator new(0x40uLL);
  EshParserVisitor::EshParserVisitor(v3, *((SsrwOOStream **)this + 1), *((const EshObjectFactory **)this + 4));
  *((void *)this + 2) = v3;
  int v4 = (PptSkipVisitor *)operator new(0xB8uLL);
  PptSkipVisitor::PptSkipVisitor(v4, *((SsrwOOStream **)this + 1), 1, 0);
  *((void *)this + 3) = v4;
}

void sub_238A7C908(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void EshParserVisitor::EshParserVisitor(EshParserVisitor *this, SsrwOOStream *a2, const EshObjectFactory *a3)
{
  EshDataModelVisitor::EshDataModelVisitor(this);
  *(void *)uint64_t v5 = &unk_26EBD96A8;
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = a2;
  *(_DWORD *)(v5 + 48) = 255;
  *(void *)(v5 + 56) = a3;
}

void EshDataModelVisitor::EshDataModelVisitor(EshDataModelVisitor *this)
{
  *(void *)this = &unk_26EBD70F0;
  *((void *)this + 1) = 0;
}

void PptSkipVisitor::PptSkipVisitor(PptSkipVisitor *this, SsrwOOStream *a2, char a3, char a4)
{
  *(void *)this = a2;
  *((unsigned char *)this + 8) = a3;
  *((unsigned char *)this + 9) = a4;
  *((void *)this + 18) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 20) = 0;
}

double PptParserVisitor::parse(SsrwOOStream **this, EshHeader *a2, uint64_t a3)
{
  return PptParserVisitor::parse((PptParserVisitor *)this, a2, a3, this[1]);
}

double PptParserVisitor::parse(PptParserVisitor *this, EshHeader *a2, uint64_t a3, SsrwOOStream *a4)
{
  var0 = a4->var0;
  if (a3 == -1)
  {
    unsigned int v8 = ((uint64_t (*)(SsrwOOStream *))var0[5])(a4);
  }
  else
  {
    unsigned int v8 = a3;
    ((void (*)(SsrwOOStream *, uint64_t, void))var0[2])(a4, a3, 0);
  }
  unsigned int v9 = (*((uint64_t (**)(SsrwOOStream *))a4->var0 + 10))(a4);
  a2->var4 = v9 & 0xF;
  a2->var2 = v9 >> 4;
  a2->var3 = (*((uint64_t (**)(SsrwOOStream *))a4->var0 + 10))(a4);
  unsigned int v10 = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if (v10 >= 0x10000001)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 7005;
  }
  a2->var0 = v10;
  a2->var1 = v8;
  if (a2->var3 == 5003) {
    a2->var4 = 15;
  }
  return EshHeader::operator=((uint64_t)this + 48, (uint64_t)a2);
}

uint64_t SsrwOOStgStream::seek(uint64_t a1, int a2, int a3)
{
  uint64_t result = streamSeek(*(void *)(a1 + 192), a2, a3);
  if (result)
  {
    int v4 = result;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v4;
  }
  return result;
}

uint64_t streamSeek(uint64_t a1, int a2, int a3)
{
  return streamSeek64(a1, a2, a3);
}

uint64_t streamSeek64(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (a3 == 1)
    {
      uint64_t v5 = (unint64_t *)(a1 + 24);
    }
    else
    {
      if (a3 != 2) {
        return 6;
      }
      uint64_t v5 = *(unint64_t **)(a1 + 56);
    }
    unint64_t v6 = *v5;
  }
  else
  {
    unint64_t v6 = 0;
  }
  BOOL v7 = __CFADD__(v6, a2);
  if (a2 >= 1 && v7 || a2 < 0 && v6 < -a2) {
    return 6;
  }
  if ((*(_DWORD *)(a1 + 48) - 1) > 1
    || *(_DWORD *)(a1 + 44) == -1
    || (uint64_t result = streamFlushToDisk(a1), !result))
  {
    uint64_t result = 0;
    *(void *)(a1 + 24) = v6 + a2;
  }
  return result;
}

uint64_t SsrwOOStgStream::readUInt16(SsrwOOStgStream *this)
{
  unsigned __int16 v5 = 0;
  int v1 = readUInt16(*((void *)this + 24), &v5);
  if (v1)
  {
    int v3 = v1;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v3;
  }
  return v5;
}

uint64_t readUInt16(uint64_t a1, _WORD *a2)
{
  unsigned int v6 = 2;
  uint64_t v2 = 6;
  if (a1 && a2)
  {
    uint64_t v2 = streamRead(a1, (uint64_t)&v5, &v6);
    *a2 = CsLeReadUInt16(&v5);
  }
  return v2;
}

uint64_t streamRead(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  int v31 = 0;
  if (!a1) {
    return 6;
  }
  uint64_t Status = 6;
  if (a3)
  {
    if (a2)
    {
      uint64_t v7 = *(void *)a1;
      if (v7)
      {
        if ((*(_DWORD *)(a1 + 48) | 2) == 2)
        {
          if (*a3)
          {
            if (*(void *)(a1 + 24) >= **(void **)(a1 + 56))
            {
              *a3 = 0;
              return 15;
            }
            else
            {
              uint64_t Header = rootStorageGetHeader(v7);
              char SectorShift = headerGetSectorShift(Header);
              char SmallSectorShift = headerGetSmallSectorShift(Header);
              int v11 = *(uint64_t **)(a1 + 56);
              uint64_t v12 = v11[3];
              if (v12)
              {
                size_t v13 = (1 << SmallSectorShift);
                uint64_t v14 = (char *)malloc_type_malloc(v13, 0xCB53EB4CuLL);
                if (!v14) {
                  return 5;
                }
                uint64_t Sector = v14;
                bzero(v14, v13);
                int v11 = *(uint64_t **)(a1 + 56);
              }
              else
              {
                uint64_t Sector = 0;
                size_t v13 = (1 << SectorShift);
              }
              uint64_t v30 = v12;
              unint64_t v17 = *a3;
              uint64_t v18 = *v11;
              unint64_t v19 = *(void *)(a1 + 24);
              unint64_t v20 = v18 - v19;
              if (v20 <= v17) {
                LODWORD(v17) = v20;
              }
              *a3 = v17;
              unsigned int v21 = 0;
              if (v17)
              {
                int v22 = v19 % v13;
                unint64_t v23 = (v19 / v13);
                while (1)
                {
                  uint64_t v24 = *(void *)(a1 + 56);
                  if (v23 >= *(unsigned int *)(v24 + 16)) {
                    break;
                  }
                  unsigned int v25 = *(_DWORD *)(*(void *)(v24 + 8) + 4 * v23);
                  uint64_t v26 = *(void *)(v24 + 24);
                  if (v26)
                  {
                    uint64_t v27 = streamSeek64(v26, v13 * (unint64_t)v25, 0);
                    if (v27
                      || (int v31 = v13,
                          uint64_t v27 = streamRead(*(void *)(*(void *)(a1 + 56) + 24), Sector, &v31),
                          v27))
                    {
                      uint64_t Status = v27;
                      goto LABEL_34;
                    }
                  }
                  else
                  {
                    uint64_t Sector = (char *)rootStorageReadSector(*(void *)a1, v25);
                    if (!Sector)
                    {
                      uint64_t Status = rootStorageGetStatus(*(void *)a1);
                      goto LABEL_37;
                    }
                  }
                  unsigned int v28 = *a3 - v21;
                  if ((int)v13 - v22 >= v28) {
                    size_t v29 = v28;
                  }
                  else {
                    size_t v29 = (v13 - v22);
                  }
                  memcpy((void *)(a2 + v21), &Sector[v22], v29);
                  int v22 = 0;
                  uint64_t Status = 0;
                  ++v23;
                  v21 += v29;
                  if (v21 >= *a3) {
                    goto LABEL_34;
                  }
                }
                uint64_t Status = 15;
                if (v30 && Sector) {
                  free(Sector);
                }
              }
              else
              {
                uint64_t Status = 0;
LABEL_34:
                if (v30 && Sector) {
                  free(Sector);
                }
LABEL_37:
                *a3 = v21;
                *(void *)(a1 + 24) += v21;
              }
            }
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return Status;
}

uint64_t SsrwOOStgStream::readSInt32(SsrwOOStgStream *this)
{
  unsigned int v5 = 0;
  int v1 = readSInt32(*((void *)this + 24), &v5);
  if (v1)
  {
    int v3 = v1;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v3;
  }
  return v5;
}

uint64_t readSInt32(uint64_t a1, _DWORD *a2)
{
  unsigned int v6 = 4;
  uint64_t v2 = 6;
  if (a1 && a2)
  {
    uint64_t v2 = streamRead(a1, (uint64_t)&v5, &v6);
    *a2 = CsLeReadSInt32(&v5);
  }
  return v2;
}

double EshHeader::operator=(uint64_t a1, uint64_t a2)
{
  double result = *(double *)a2;
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  return result;
}

void PptCurrentUserAtom::PptCurrentUserAtom(PptCurrentUserAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE9928;
  *(void *)(v2 + 32) = &unk_26EBE99D8;
  *(void *)(v2 + 72) = 0;
  *(void *)(v2 + 80) = 0;
}

void EshAtom::EshAtom(EshAtom *this, const EshHeader *a2)
{
  EshRecord::EshRecord(this, a2);
  *uint64_t v2 = &unk_26EBD6A28;
}

void EshRecord::EshRecord(EshRecord *this, const EshHeader *a2)
{
  EshObject::EshObject((EshObject *)this, a2->var3);
  *int v3 = &unk_26EBD7BE8;
  EshHeader::operator=((uint64_t)v3 + 12, (uint64_t)a2);
}

void EshObject::EshObject(EshObject *this, unsigned __int16 a2)
{
  this->var0 = (void **)&unk_26EBD86C0;
  this->var1 = a2;
}

uint64_t PptCurrentUserAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptCurrentUserAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4) {
    goto LABEL_24;
  }
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 8) {
    goto LABEL_24;
  }
  *((_DWORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 12) {
    goto LABEL_24;
  }
  *((_WORD *)a2 + 30) = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 14) {
    goto LABEL_24;
  }
  *((_WORD *)a2 + 31) = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 16) {
    goto LABEL_24;
  }
  *((unsigned char *)a2 + 64) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 17) {
    goto LABEL_24;
  }
  *((unsigned char *)a2 + 65) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 18) {
    goto LABEL_24;
  }
  PptSkipVisitor::skipKnownBytes(*((unsigned char **)this + 3), a2, 2u);
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  if (v5 != v4 + 20) {
    goto LABEL_24;
  }
  int v6 = v5;
  uint64_t v7 = operator new[](*((unsigned __int16 *)a2 + 30) + 1);
  *((void *)this + 5) = v7;
  unsigned int v18 = *((unsigned __int16 *)a2 + 30);
  (*(void (**)(void, void *, unsigned int *))(**((void **)this + 1) + 56))(*((void *)this + 1), v7, &v18);
  if (v18 != *((unsigned __int16 *)a2 + 30)) {
    goto LABEL_24;
  }
  *(unsigned char *)(*((void *)this + 5) + v18) = 0;
  PptCurrentUserAtom::setSingleByteUserName(a2, *((const char **)this + 5));
  uint64_t v8 = *((void *)this + 5);
  if (v8) {
    MEMORY[0x23EC99790](v8, 0x1000C8077774924);
  }
  *((void *)this + 5) = 0;
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v6 + *((unsigned __int16 *)a2 + 30))
  {
LABEL_24:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  PptSkipVisitor::skipKnownBytes(*((unsigned char **)this + 3), a2, 4u);
  uint64_t v9 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3) + 8), 0);
  int v10 = 0;
  unsigned int v11 = (*(unsigned int (**)(void))(**((void **)this + 1) + 176))(*((void *)this + 1)) >> 1;
  while (v11 != v10)
  {
    ++v10;
    if (!(*(unsigned int (**)(void))(**((void **)this + 1) + 128))(*((void *)this + 1)))
    {
      unsigned int v11 = v10 - 1;
      break;
    }
  }
  uint64_t v12 = (CsString *)operator new(0x18uLL);
  CsString::CsString(v12);
  CsString::reserve(v12, v11 + 1);
  v12->var2 = 0;
  bzero(v12->var1, 2 * v12->var3);
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3) + 8), 0);
  if (v11)
  {
    unsigned int v13 = v11;
    do
    {
      unsigned __int16 v14 = (*(uint64_t (**)(void))(**((void **)this + 1) + 128))(*((void *)this + 1));
      CsString::append(v12, v14);
      --v13;
    }
    while (v13);
  }
  CsString::setCount(v12, v11);
  if (v12->var1) {
    var1 = v12->var1;
  }
  else {
    var1 = (const unsigned __int16 *)&unk_238EF0ED8;
  }
  PptCurrentUserAtom::setDoubleByteUserName(a2, var1);
  (*(void (**)(void, uint64_t, void))(**((void **)this + 1) + 16))(*((void *)this + 1), v9, 0);
  PptParserVisitor::endRead(this, a2);
  (*((void (**)(CsString *))v12->var0 + 1))(v12);
  return 1;
}

void sub_238A7D874(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t PptSkipVisitor::beginRead(uint64_t result)
{
  *(void *)(result + 168) = *(void *)(result + 160);
  return result;
}

uint64_t SsrwOOStgStream::getPos(SsrwOOStgStream *this)
{
  unsigned int v5 = 0;
  int Pos = streamGetPos(*((void *)this + 24), &v5);
  if (Pos)
  {
    int v3 = Pos;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v3;
  }
  return v5;
}

uint64_t streamGetPos(uint64_t a1, _DWORD *a2)
{
  if (!a1) {
    return 6;
  }
  uint64_t result = 0;
  *a2 = *(void *)(a1 + 24);
  return result;
}

uint64_t SsrwOOStgStream::readUInt32(SsrwOOStgStream *this)
{
  unsigned int v5 = 0;
  int v1 = readSInt32(*((void *)this + 24), &v5);
  if (v1)
  {
    int v3 = v1;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v3;
  }
  return v5;
}

uint64_t SsrwOOStgStream::readSInt16(SsrwOOStgStream *this)
{
  __int16 v5 = 0;
  int v1 = readSInt16(*((void *)this + 24), &v5);
  if (v1)
  {
    int v3 = v1;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v3;
  }
  return v5;
}

uint64_t readSInt16(uint64_t a1, _WORD *a2)
{
  unsigned int v6 = 2;
  uint64_t v2 = 6;
  if (a1 && a2)
  {
    uint64_t v2 = streamRead(a1, (uint64_t)&v5, &v6);
    *a2 = CsLeReadSInt16(&v5);
  }
  return v2;
}

uint64_t CsLeReadSInt16(__int16 *a1)
{
  return *a1;
}

uint64_t SsrwOOStgStream::readByte(SsrwOOStgStream *this)
{
  unsigned int v6 = 1;
  unsigned __int8 v5 = 0;
  int v1 = streamRead(*((void *)this + 24), (uint64_t)&v5, &v6);
  if (v1)
  {
    int v3 = v1;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v3;
  }
  return v5;
}

unsigned char *PptSkipVisitor::skipKnownBytes(unsigned char *this, const EshRecord *a2, unsigned int a3)
{
  unsigned int v26 = a3;
  if (a3)
  {
    LODWORD(v3) = a3;
    int v4 = this;
    if (!this[8])
    {
      size_t v10 = a3;
      unsigned int v11 = operator new[](a3);
      bzero(v11, v10);
      this = (unsigned char *)(*(uint64_t (**)(void, void *, unsigned int *))(*(void *)*v4 + 184))(*v4, v11, &v26);
      if (!v11) {
        return this;
      }
      return (unsigned char *)MEMORY[0x23EC99790](v11, 0x1000C8077774924);
    }
    if ((*(unsigned int (**)(void))(**(void **)this + 40))() + a3 > *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3) + 8
      || (*(unsigned int (**)(void))(*(void *)*v4 + 176))() < v3)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 4003;
    }
    uint64_t v6 = (*(unsigned int (**)(void))(*(void *)*v4 + 40))() - *((_DWORD *)a2 + 4) - 8;
    unint64_t v7 = v4[22];
    uint64_t v8 = (unint64_t *)v4[21];
    if ((unint64_t)v8 >= v7)
    {
      uint64_t v12 = v4[20];
      unint64_t v13 = (unint64_t)v8 - v12;
      unint64_t v14 = (v7 - v12) >> 3;
      unsigned int v15 = 2 * v14;
      if (2 * (int)v14 <= (v13 >> 3) + 1) {
        unsigned int v15 = (v13 >> 3) + 1;
      }
      if (v14 >= 0x7FFFFFFF) {
        unint64_t v16 = 0xFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16)
      {
        unint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)(v4 + 22), v16);
        uint64_t v19 = v18;
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v19 = 0;
      }
      unint64_t v20 = (unint64_t *)&v17[v13 & 0x7FFFFFFF8];
      unsigned int v21 = &v17[8 * v19];
      size_t v3 = v3;
      unint64_t *v20 = v6 | ((unint64_t)v3 << 32);
      uint64_t v9 = v20 + 1;
      unint64_t v23 = (char *)v4[20];
      int v22 = (char *)v4[21];
      if (v22 != v23)
      {
        do
        {
          unint64_t v24 = *((void *)v22 - 1);
          v22 -= 8;
          *--unint64_t v20 = v24;
        }
        while (v22 != v23);
        int v22 = (char *)v4[20];
      }
      v4[20] = v20;
      v4[21] = v9;
      v4[22] = v21;
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      size_t v3 = v3;
      unint64_t *v8 = v6 | ((unint64_t)v3 << 32);
      uint64_t v9 = v8 + 1;
    }
    v4[21] = v9;
    unsigned int v11 = operator new[](v3);
    this = (unsigned char *)(*(uint64_t (**)(void, void *, unsigned int *))(*(void *)*v4 + 56))(*v4, v11, &v26);
    if (v11) {
      return (unsigned char *)MEMORY[0x23EC99790](v11, 0x1000C8077774924);
    }
  }
  return this;
}

uint64_t SsrwOOStgStream::getBytesAvailableToRead(SsrwOOStgStream *this)
{
  unsigned int v5 = 0;
  int BytesAvailableToRead = streamGetBytesAvailableToRead(*((void *)this + 24), &v5);
  if (BytesAvailableToRead)
  {
    int v3 = BytesAvailableToRead;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v3;
  }
  return v5;
}

uint64_t streamGetBytesAvailableToRead(uint64_t a1, _DWORD *a2)
{
  uint64_t result = 6;
  if (a1 && a2 && (*(_DWORD *)(a1 + 48) | 2) == 2)
  {
    uint64_t result = 0;
    *a2 = **(_DWORD **)(a1 + 56) - *(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t SsrwOOStgStream::readBytes(SsrwOOStgStream *this, uint64_t a2, unsigned int *a3)
{
  uint64_t result = streamRead(*((void *)this + 24), a2, a3);
  if (result)
  {
    int v4 = result;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v4;
  }
  return result;
}

char *PptCurrentUserAtom::setSingleByteUserName(PptCurrentUserAtom *this, const char *__s)
{
  uint64_t v4 = *((void *)this + 9);
  if (v4) {
    MEMORY[0x23EC99790](v4, 0x1000C8077774924);
  }
  *((void *)this + 9) = 0;
  int v5 = strlen(__s);
  uint64_t v6 = (char *)operator new[]((v5 + 1));
  *((void *)this + 9) = v6;
  return strcpy(v6, __s);
}

uint64_t SsrwOOStgStream::readChar16(SsrwOOStgStream *this)
{
  unsigned __int16 v5 = 0;
  int v1 = readUInt16(*((void *)this + 24), &v5);
  if (v1)
  {
    int v3 = v1;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v3;
  }
  return v5;
}

void CsString::CsString(CsString *this)
{
  this->var1 = 0;
  *(void *)&this->var2 = 0;
  this->var0 = (void **)&unk_26EBD9A80;
}

CsString *CsString::reserve(CsString *this, int a2)
{
  if (a2 == -1) {
    goto LABEL_10;
  }
  uint64_t v2 = this;
  if (a2 + 1 < this->var3) {
    return this;
  }
  unint64_t v3 = 64 - ((a2 + 1) & 0x3Fu) + (unint64_t)(a2 + 1);
  if (HIDWORD(v3))
  {
LABEL_10:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  this->var3 = v3;
  uint64_t v4 = operator new[](2 * (64 - ((a2 + 1) & 0x3Fu) + a2 + 1));
  bzero(v4, 2 * v2->var3);
  uint64_t var2 = v2->var2;
  if (var2) {
    _ChWcsncpy(v4, v2->var1, var2);
  }
  this = (CsString *)v2->var1;
  if (this) {
    this = (CsString *)MEMORY[0x23EC99790](this, 0x1000C80BDFB0063);
  }
  v2->var1 = v4;
  return this;
}

CsString *CsString::append(CsString *this, unsigned __int16 a2)
{
  unsigned int v4 = this->var2 + 1;
  uint64_t result = CsString::reserve(this, v4);
  var1 = this->var1;
  var1[this->var2] = a2;
  this->uint64_t var2 = v4;
  var1[v4] = 0;
  return result;
}

CsString *CsString::setCount(CsString *this, unsigned int a2)
{
  unint64_t v3 = this;
  if (this->var3 < a2) {
    this = CsString::reserve(this, a2);
  }
  v3->uint64_t var2 = a2;
  var1 = v3->var1;
  if (var1) {
    var1[a2] = 0;
  }
  return this;
}

_WORD *PptCurrentUserAtom::setDoubleByteUserName(PptCurrentUserAtom *this, const unsigned __int16 *a2)
{
  uint64_t v4 = *((void *)this + 10);
  if (v4) {
    MEMORY[0x23EC99790](v4, 0x1000C80BDFB0063);
  }
  *((void *)this + 10) = 0;
  uint64_t v5 = _ChWcslen(a2);
  uint64_t v6 = operator new[]((2 * v5 + 4) & 0x1FFFFFFFELL);
  *((void *)this + 10) = v6;
  return _ChWcscpy(v6, a2);
}

_WORD *_ChWcscpy(_WORD *result, const unsigned __int16 *a2)
{
  __int16 v2 = *a2;
  unint64_t v3 = result;
  if (*a2)
  {
    uint64_t v4 = a2 + 1;
    unint64_t v3 = result;
    do
    {
      *v3++ = v2;
      int v5 = *v4++;
      __int16 v2 = v5;
    }
    while (v5);
  }
  *unint64_t v3 = 0;
  return result;
}

unsigned char *PptParserVisitor::endRead(PptParserVisitor *this, EshRecord *a2)
{
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) > *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3) + 8)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  uint64_t v4 = (PptSkipVisitor *)*((void *)this + 3);
  return PptSkipVisitor::skipUnknownToEnd(v4, a2);
}

unsigned char *PptSkipVisitor::skipUnknownToEnd(PptSkipVisitor *this, const EshRecord *a2)
{
  unsigned int v4 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3) + 8;
  if (v4 < (*(unsigned int (**)(void))(**(void **)this + 40))(*(void *)this))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  int v5 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3);
  unsigned int v6 = v5 - (*(uint64_t (**)(void))(**(void **)this + 40))() + 8;
  return PptSkipVisitor::skipUnknownBytes(this, a2, v6);
}

unsigned char *PptSkipVisitor::skipUnknownBytes(PptSkipVisitor *this, const EshRecord *a2, unsigned int a3)
{
  if (a3 && *((unsigned char *)this + 9))
  {
    int v6 = (*(uint64_t (**)(void))(**(void **)this + 40))();
    int v7 = *((_DWORD *)a2 + 4);
    uint64_t v8 = (unsigned __int16 *)operator new(0xCuLL);
    unsigned __int16 *v8 = EshRecord::getRecordType(a2);
    *((_DWORD *)v8 + 1) = v6 - v7 - 8;
    *((_DWORD *)v8 + 2) = a3;
    if (EshRecord::getVersion(a2) != 15
      && !ChBinaryTree<PptSkipVisitor::PptSkipWarning,PptSkipVisitor::PptWarningLess>::find_internal((uint64_t)this + 144, v8, *((void *)this + 18)))
    {
      if (*((unsigned char *)this + 8)) {
        snprintf((char *)this + 10, 0x80uLL, "Record: #%04hX(%d), Header offset: #%04lX(%lu) - Read unknown bytes (%lu-%lu) as 0!\n", *((unsigned __int16 *)a2 + 11));
      }
      else {
        snprintf((char *)this + 10, 0x80uLL, "Record: %d, Offset: %lu - Wrote unknown bytes (%lu-%lu) as 0!\n");
      }
      ChLogFunction((const char *)this + 10, 0, 1, 0, 0);
      v9.n128_f64[0] = ChBinaryTree<PptSkipVisitor::PptSkipWarning,PptSkipVisitor::PptWarningLess>::insert_internal((uint64_t)this + 144, v8, (uint64_t *)this + 18, 0);
    }
    MEMORY[0x23EC997B0](v8, 0x1000C4054111E92, v9);
  }
  return PptSkipVisitor::skipKnownBytes(this, a2, a3);
}

void sub_238A7E410(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C4054111E92);
  _Unwind_Resume(a1);
}

void CsString::~CsString(CsString *this)
{
  this->var0 = (void **)&unk_26EBD9A80;
  p_var1 = &this->var1;
  var1 = this->var1;
  if (var1) {
    MEMORY[0x23EC99790](var1, 0x1000C80BDFB0063);
  }
  *p_var1 = 0;
  p_var1[1] = 0;
  JUMPOUT(0x23EC997B0);
}

{
  unsigned __int16 *var1;
  unsigned __int16 **p_var1;

  this->var0 = (void **)&unk_26EBD9A80;
  p_var1 = &this->var1;
  var1 = this->var1;
  if (var1) {
    MEMORY[0x23EC99790](var1, 0x1000C80BDFB0063);
  }
  *p_var1 = 0;
  p_var1[1] = 0;
}

void PptParserVisitor::~PptParserVisitor(PptParserVisitor *this)
{
  PptParserVisitor::~PptParserVisitor(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;
  uint64_t *v3;
  void *v4;
  uint64_t v5;

  *(void *)this = &unk_26EBEF5A0;
  __int16 v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  unint64_t v3 = (uint64_t *)*((void *)this + 3);
  if (v3)
  {
    unsigned int v4 = (void *)v3[20];
    if (v4)
    {
      v3[21] = (uint64_t)v4;
      operator delete(v4);
    }
    ChBinaryTree<PptSkipVisitor::PptSkipWarning,PptSkipVisitor::PptWarningLess>::clear(v3 + 18);
    MEMORY[0x23EC997B0](v3, 0x1020C401FB183FFLL);
  }
  *((void *)this + 3) = 0;
  int v5 = *((void *)this + 5);
  if (v5) {
    MEMORY[0x23EC99790](v5, 0x1000C8077774924);
  }
  *((void *)this + 5) = 0;
}

void EshParserVisitor::~EshParserVisitor(EshParserVisitor *this)
{
  EshParserVisitor::~EshParserVisitor(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBD96A8;
  __int16 v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C80BDFB0063);
  }
  *((void *)this + 2) = 0;
  EshDataModelVisitor::~EshDataModelVisitor(this);
}

void EshDataModelVisitor::~EshDataModelVisitor(EshDataModelVisitor *this)
{
  *(void *)this = &unk_26EBD70F0;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 1) = 0;
}

uint64_t ChBinaryTree<PptSkipVisitor::PptSkipWarning,PptSkipVisitor::PptWarningLess>::clear(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result)
  {
    uint64_t v3 = ChBinaryTree<PptSkipVisitor::PptSkipWarning,PptSkipVisitor::PptWarningLess>::node::~node(result);
    uint64_t result = MEMORY[0x23EC997B0](v3, 0x1020C40E213B89CLL);
  }
  *a1 = 0;
  return result;
}

uint64_t SsrwOOStgStream::close(SsrwOOStgStream *this, char a2)
{
  uint64_t v3 = (uint64_t *)((char *)this + 192);
  uint64_t result = *((void *)this + 24);
  if (result)
  {
    int v5 = streamSeek(result, 0, 2);
    if ((a2 & 1) == 0)
    {
      if (v5)
      {
        int v6 = v5;
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = v6;
      }
    }
    uint64_t result = closeStream(v3);
    *uint64_t v3 = 0;
  }
  return result;
}

uint64_t closeStream(uint64_t *a1)
{
  if (!a1) {
    return 6;
  }
  uint64_t v2 = *a1;
  if (!v2) {
    return 6;
  }
  if ((*(_DWORD *)(v2 + 48) - 1) <= 1)
  {
    streamFlushToDisk(v2);
    streamResize(*a1, *(void *)(*a1 + 24));
    uint64_t v2 = *a1;
  }
  TOC = (uint64_t *)rootStorageGetTOC(*(void *)v2);
  uint64_t EntryAtIndex = tocGetEntryAtIndex(TOC, *(_DWORD *)(*a1 + 8));
  uint64_t v5 = *a1;
  if ((*(_DWORD *)(*a1 + 48) - 1) <= 1)
  {
    uint64_t v6 = EntryAtIndex;
    uint64_t v7 = directorySetSize(EntryAtIndex, **(void **)(v5 + 56));
    if (v7) {
      goto LABEL_14;
    }
    uint64_t v7 = directorySetCurrentCreationTime(v6);
    if (v7) {
      goto LABEL_14;
    }
    uint64_t v7 = directorySetCurrentModificationTime(v6);
    if (v7) {
      goto LABEL_14;
    }
    uint64_t v8 = *a1;
    *(unsigned char *)(*(void *)(*a1 + 56) + 32) = 0;
    int ShouldBeMini = streamShouldBeMini(v8);
    uint64_t v5 = *a1;
    if (ShouldBeMini)
    {
      if (*(_DWORD *)(*(void *)(v5 + 56) + 36) == 1)
      {
        uint64_t v7 = convertToSmallStream(*a1);
        if (v7)
        {
LABEL_14:
          streamDestroy((void **)a1);
          return v7;
        }
        uint64_t v5 = *a1;
      }
    }
  }
  uint64_t v7 = storageRemoveOpenChild(*(void *)(v5 + 16), 2, v5);
  if (!v7) {
    goto LABEL_14;
  }
  return v7;
}

uint64_t storageRemoveOpenChild(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v5 = -1;
  uint64_t result = openListFindItem(*(int ***)(a1 + 24), &v5, a2, a3);
  if (!result) {
    return openListRemoveItem(*(void *)(a1 + 24), v5);
  }
  return result;
}

uint64_t openListFindItem(int **a1, _DWORD *a2, int a3, uint64_t a4)
{
  unsigned int v4 = *a1;
  if (!*a1) {
    return 11;
  }
  for (int i = 0; ; ++i)
  {
    if ((int v6 = *v4, a3 == 2) && v6 == 2 || a3 == 1 && v6 == 1)
    {
      if (*((void *)v4 + 1) == a4) {
        break;
      }
    }
    unsigned int v4 = (int *)*((void *)v4 + 2);
    if (!v4) {
      return 11;
    }
  }
  uint64_t result = 0;
  *a2 = i;
  return result;
}

uint64_t openListRemoveItem(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    return 6;
  }
  if (*(_DWORD *)(a1 + 8) <= a2) {
    return 6;
  }
  uint64_t v3 = *(void **)a1;
  if (a2)
  {
    while (1)
    {
      unsigned int v4 = v3;
      uint64_t v3 = (void *)v3[2];
      if (!v3) {
        return 11;
      }
      if (!--a2)
      {
        unsigned int v5 = v4 + 2;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unsigned int v5 = (void *)a1;
LABEL_10:
    void *v5 = v3[2];
    free(v3);
    uint64_t result = 0;
    --*(_DWORD *)(a1 + 8);
  }
  return result;
}

uint64_t streamDestroy(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    if (*((void *)v1 + 7))
    {
      TOC = (uint64_t *)rootStorageGetTOC(*(void *)v1);
      uint64_t EntryAtIndex = tocGetEntryAtIndex(TOC, *((_DWORD *)*a1 + 2));
      directoryReleaseStreamSharedBlock(EntryAtIndex);
      uint64_t v1 = *a1;
    }
    unsigned int v5 = (void *)*((void *)v1 + 4);
    if (v5)
    {
      free(v5);
      uint64_t v1 = *a1;
    }
    freeInfo((void **)v1 + 8, 1u);
    free(*a1);
    *a1 = 0;
  }
  return 0;
}

uint64_t directoryReleaseStreamSharedBlock(uint64_t a1)
{
  if (!a1) {
    return 6;
  }
  int v1 = *(_DWORD *)(a1 + 84);
  if (v1 != 5 && v1 != 2) {
    return 6;
  }
  unsigned int v4 = (void **)(a1 + 160);
  uint64_t v3 = *(void **)(a1 + 160);
  if (v3)
  {
    if (!streamSharedBlockGetRefCount((uint64_t)v3)) {
      return 6;
    }
    uint64_t v3 = *v4;
  }
  int RefCount = streamSharedBlockGetRefCount((uint64_t)v3);
  if (RefCount == 1)
  {
    uint64_t result = streamDestroySharedBlock(v4);
    if (result) {
      return result;
    }
  }
  else
  {
    streamSharedBlockSetRefCount((uint64_t)*v4, RefCount - 1);
  }
  return 0;
}

uint64_t streamSharedBlockGetRefCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t streamDestroySharedBlock(void **a1)
{
  int v1 = *a1;
  if (!*a1) {
    return 6;
  }
  uint64_t v3 = (void *)v1[1];
  if (v3) {
    free(v3);
  }
  if (v1[3]) {
    streamDestroy(v1 + 3);
  }
  free(v1);
  uint64_t result = 0;
  *a1 = 0;
  return result;
}

void SsrwOOStgStream::~SsrwOOStgStream(SsrwOOStgStream *this)
{
  SsrwOOStgStream::~SsrwOOStgStream(this);
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBDA3C8;
  if (*((void *)this + 24)) {
    SsrwOOStgStream::close(this, 1);
  }
  TSURectWithOriginAndSize((char *)this + 8);
}

void PptCurrentUserAtom::~PptCurrentUserAtom(PptCurrentUserAtom *this)
{
  PptCurrentUserAtom::~PptCurrentUserAtom(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_26EBE9928;
  *((void *)this + 4) = &unk_26EBE99D8;
  uint64_t v2 = *((void *)this + 9);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 9) = 0;
  uint64_t v3 = *((void *)this + 10);
  if (v3) {
    MEMORY[0x23EC99790](v3, 0x1000C80BDFB0063);
  }
  *((void *)this + 10) = 0;
}

void PptEshReader::PptEshReader(PptEshReader *this)
{
  EshBinaryReader::EshBinaryReader(this);
  void *v1 = &unk_26EBEFD10;
}

void EshBinaryReader::EshBinaryReader(EshBinaryReader *this)
{
  *(void *)this = &unk_26EBD9840;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 16) = 10;
  *((_DWORD *)this + 18) = 0;
  EshHeader::makeDefault((EshHeader *)((char *)this + 76));
  *((unsigned char *)this + 92) = 0;
}

void sub_238A7ED60(_Unwind_Exception *a1)
{
  ChStack<EshHeader>::~ChStack(v1 + 40);
  _Unwind_Resume(a1);
}

uint64_t EshGroupProperties::init(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t getStreamInfo(uint64_t a1)
{
  return a1 + 64;
}

void PptPersistDir::PptPersistDir(PptPersistDir *this, PptParserVisitor *a2)
{
  *((void *)this + 5) = 0;
  *(void *)this = a2;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = (char *)this + 40;
  *((void *)this + 9) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = (char *)this + 64;
  *((void *)this + 10) = -1;
  *((unsigned char *)this + 92) = 0;
  *((_DWORD *)this + 24) = 0;
}

PptPersistDir *PptPersistDir::getDirEntries(PptPersistDir *this, uint64_t a2)
{
  unsigned int v4 = (EshHeader *)operator new(0x10uLL);
  uint64_t result = (PptPersistDir *)EshHeader::makeDefault(v4);
  *(void *)((char *)this + 84) = -1;
  if ((int)a2 >= 1)
  {
    int v6 = 0;
    uint64_t v7 = (char **)((char *)this + 40);
    uint64_t v30 = v4;
    do
    {
      uint64_t v8 = v6;
      PptParserVisitor::parse(*(SsrwOOStream ***)this, v4, a2);
      if (v4->var3 != 4085)
      {
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = 4001;
      }
      __n128 v9 = (PptUserEditAtom *)operator new(0x50uLL);
      PptUserEditAtom::PptUserEditAtom(v9, v4);
      *((void *)this + 3) = v9;
      if (v9) {
      (*(void (**)(PptUserEditAtom *, void))(*(void *)v9 + 112))(v9, *(void *)this);
      }
      int v10 = *((_DWORD *)v9 + 14);
      uint64_t v11 = *((unsigned int *)v9 + 15);
      if (!*((_DWORD *)this + 12))
      {
        *((_DWORD *)this + 21) = *((_DWORD *)v9 + 16);
        int DataLength = EshRecord::getDataLength(v9);
        *((unsigned char *)this + 92) = DataLength == 32;
        if (DataLength == 32) {
          *((_DWORD *)this + 24) = *((_DWORD *)v9 + 19);
        }
        *((_DWORD *)this + 20) = *((_DWORD *)v9 + 17);
      }
      uint64_t v13 = *((void *)this + 3);
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      *((void *)this + 3) = 0;
      PptParserVisitor::parse(*(SsrwOOStream ***)this, v4, v11);
      if (v4->var3 != 6002)
      {
        unsigned int v28 = __cxa_allocate_exception(4uLL);
        *unsigned int v28 = 4001;
      }
      unint64_t v14 = (PptPersistPtrIncrAtom *)operator new(0x68uLL);
      PptPersistPtrIncrAtom::PptPersistPtrIncrAtom(v14, v4);
      *((void *)this + 3) = v14;
      if (v14) {
      else
      }
        unsigned int v15 = 0;
      int v31 = v10;
      (*(void (**)(void *, void))(*v15 + 112))(v15, *(void *)this);
      uint64_t result = (PptPersistDir *)operator new(0x10uLL);
      int v6 = result;
      *((void *)result + 1) = 0;
      *((void *)this + 2) = result;
      *(void *)uint64_t result = v15;
      *((void *)this + 3) = 0;
      if (v8) {
        unint64_t v16 = v8;
      }
      else {
        unint64_t v16 = this;
      }
      *((void *)v16 + 1) = result;
      unint64_t v17 = (void *)v15[9];
      if (v17 != v15 + 10)
      {
        do
        {
          unsigned int v18 = *((_DWORD *)v17 + 7);
          if (*((_DWORD *)this + 22) < (signed int)v18) {
            *((_DWORD *)this + 22) = v18;
          }
          uint64_t v19 = *v7;
          if (!*v7) {
            goto LABEL_33;
          }
          unint64_t v20 = (char **)((char *)this + 40);
          do
          {
            unsigned int v21 = *((_DWORD *)v19 + 7);
            BOOL v22 = v21 >= v18;
            if (v21 >= v18) {
              unint64_t v23 = (char **)v19;
            }
            else {
              unint64_t v23 = (char **)(v19 + 8);
            }
            if (v22) {
              unint64_t v20 = (char **)v19;
            }
            uint64_t v19 = *v23;
          }
          while (*v23);
          if (v20 == v7 || v18 < *((_DWORD *)v20 + 7))
          {
LABEL_33:
            int v24 = *((_DWORD *)v17 + 8);
            unsigned int v32 = v18;
            int v33 = &v32;
            *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 4, &v32, (uint64_t)&std::piecewise_construct, &v33)+ 8) = v24;
            int v33 = (unsigned int *)(v17 + 4);
            uint64_t result = (PptPersistDir *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 7, (unsigned int *)v17 + 8, (uint64_t)&std::piecewise_construct, &v33);
            *((_DWORD *)result + 8) = v18;
          }
          unsigned int v25 = (void *)v17[1];
          if (v25)
          {
            do
            {
              unsigned int v26 = v25;
              unsigned int v25 = (void *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              unsigned int v26 = (void *)v17[2];
              BOOL v27 = *v26 == (void)v17;
              unint64_t v17 = v26;
            }
            while (!v27);
          }
          unint64_t v17 = v26;
        }
        while (v26 != v15 + 10);
      }
      a2 = v31;
      unsigned int v4 = v30;
    }
    while (v31 >= 1);
  }
  if (v4) {
    return (PptPersistDir *)MEMORY[0x23EC997B0](v4, 0x1000C408B6DE1C6);
  }
  return result;
}

void sub_238A7F1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  operator delete(v10);
  _Unwind_Resume(a1);
}

void PptUserEditAtom::PptUserEditAtom(PptUserEditAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEEBA8;
  *(void *)(v2 + 32) = &unk_26EBEEC50;
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 72) = 0;
}

uint64_t PptUserEditAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptUserEditAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4) {
    goto LABEL_12;
  }
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 8) {
    goto LABEL_12;
  }
  *((_DWORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 12) {
    goto LABEL_12;
  }
  *((_DWORD *)a2 + 15) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 16) {
    goto LABEL_12;
  }
  *((_DWORD *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 20) {
    goto LABEL_12;
  }
  *((_DWORD *)a2 + 17) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 24) {
    goto LABEL_12;
  }
  *((_DWORD *)a2 + 18) = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 26) {
    goto LABEL_12;
  }
  PptSkipVisitor::skipKnownBytes(*((unsigned char **)this + 3), a2, 2u);
  if (EshRecord::getDataLength(a2) == 32)
  {
    if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) == v4 + 28)
    {
      *((_DWORD *)a2 + 19) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
      goto LABEL_11;
    }
LABEL_12:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
LABEL_11:
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t EshRecord::getDataLength(EshRecord *this)
{
  return *((unsigned int *)this + 3);
}

void PptUserEditAtom::~PptUserEditAtom(PptUserEditAtom *this)
{
}

void PptPersistPtrIncrAtom::PptPersistPtrIncrAtom(PptPersistPtrIncrAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBECC38;
  *(void *)(v2 + 32) = &unk_26EBECCE8;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 88) = 0;
  *(void *)(v2 + 80) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = v2 + 80;
  *(_DWORD *)(v2 + 96) = 0;
}

uint64_t PptPersistPtrIncrAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptPersistPtrIncrAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int DataLength = EshRecord::getDataLength(a2);
  if (DataLength >= 4)
  {
    int v5 = 0;
    int v6 = DataLength >> 2;
    do
    {
      unsigned int v7 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
      EshAlignRule::addShapeId(a2, v7);
      ++v5;
      if (v7 >= 0x100000)
      {
        unsigned int v8 = v7 & 0xFFFFF;
        unsigned int v9 = v7 >> 20;
        unsigned int v10 = v9;
        do
        {
          unsigned int v11 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
          PptPersistPtrIncrAtom::addReference((uint64_t **)a2, v8++, v11);
          --v10;
        }
        while (v10);
        v5 += v9;
      }
    }
    while (v5 < v6);
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t *PptPersistPtrIncrAtom::addReference(uint64_t **this, unsigned int a2, unsigned int a3)
{
  unint64_t v6 = __PAIR64__(a3, a2);
  uint64_t result = std::__tree<ChPair<unsigned int,unsigned int>,PptPersistPtrIncrAtom::RefLess<ChPair<unsigned int,unsigned int>>,std::allocator<ChPair<unsigned int,unsigned int>>>::__emplace_unique_key_args<ChPair<unsigned int,unsigned int>,ChPair<unsigned int,unsigned int> const&>(this + 9, (unsigned int *)&v6, (uint64_t *)&v6);
  if (*((_DWORD *)this + 24) < a2) {
    *((_DWORD *)this + 24) = a2;
  }
  return result;
}

void *ChAutoPtr<SsrwOOStgInfo>::~ChAutoPtr(void *a1)
{
  if (*a1)
  {
    uint64_t v2 = TSURectWithOriginAndSize();
    MEMORY[0x23EC997B0](v2, 0x1020C40285AA8CALL);
  }
  *a1 = 0;
  return a1;
}

void sub_238A7FB70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'PptBinaryReader::readEncryptionInfo(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  return PptBinaryReader::readEncryptionInfo(a1 - 24, a2, a3, a4);
}

uint64_t PptBinaryReader::readEncryptionInfo(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  if (*(unsigned char *)(*(void *)(a1 + 192) + 92))
  {
    *a4 = 8001;
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 152) + 40))(*(void *)(a1 + 152));
    uint64_t OffsetByRef = PptPersistDir::getOffsetByRef(*(PptPersistDir **)(a1 + 192), *(_DWORD *)(*(void *)(a1 + 192) + 96));
    EshHeader::makeDefault(&v11);
    PptParserVisitor::parse(*(SsrwOOStream ***)(a1 + 184), &v11, OffsetByRef);
    PptCryptSession10ContainerAtom::PptCryptSession10ContainerAtom((PptCryptSession10ContainerAtom *)v10, &v11);
    uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 184) + 984))();
    if (v8)
    {
      *a3 = v10[12];
      operator new[]();
    }
    SsrwOOStream::seekFromStart(*(SsrwOOStream **)(a1 + 152), v6);
    PptCryptSession10ContainerAtom::~PptCryptSession10ContainerAtom((PptCryptSession10ContainerAtom *)v10);
  }
  else
  {
    uint64_t v8 = 0;
    *a4 = 8011;
  }
  return v8;
}

void sub_238A7FDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_238A7FF70(void *a1, int a2)
{
  int v4 = v2;

  if (a2 == 3)
  {
    unsigned int v7 = (unsigned int *)__cxa_begin_catch(a1);
    PBConvertCsException(v7);
    __cxa_end_catch();
  }
  else
  {
    uint64_t v8 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      [v8 raise];
    }
    else {
      +[TCMessageException raise:TCUnknownProblemMessage];
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x238A7FF1CLL);
}

void sub_238A80034(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a2 == 2)
  {
    id v9 = objc_begin_catch(exc_buf);

    objc_end_catch();
    JUMPOUT(0x238A7FF1CLL);
  }
  JUMPOUT(0x238A7FF9CLL);
}

void sub_238A80244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A80370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A803EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A804AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A806DC(_Unwind_Exception *a1)
{
  uint64_t v8 = v6;

  _Unwind_Resume(a1);
}

void sub_238A8099C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_238A80AA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A80B94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A80D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238A81080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238A810F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238A81160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238A811D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238A81240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238A816B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A8175C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A81DB4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *exc_buf, void *a10, uint64_t a11)
{
  objc_begin_catch(a1);
  if (a2 == 2)
  {
    objc_end_catch();
    JUMPOUT(0x238A81C58);
  }
  objc_exception_rethrow();
}

void sub_238A81E20()
{
}

void sub_238A81F9C()
{
}

void sub_238A81FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, id a18)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_238A821C4(_Unwind_Exception *a1)
{
  int v5 = v4;
  operator delete(v5);

  _Unwind_Resume(a1);
}

void sub_238A82270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A82334(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A823B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A82488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A825D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshAtom::versionForAtomType(EshAtom *this)
{
  int v1 = this - 61447;
  uint64_t result = 0;
  switch(v1)
  {
    case 0:
    case 3:
      uint64_t result = 2;
      break;
    case 1:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return result;
    case 2:
    case 11:
      uint64_t result = 1;
      break;
    case 4:
      uint64_t result = 3;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

EshDgg *PptEshObjectFactory::createObject(PptEshObjectFactory *this, int a2, int a3)
{
  if (a2 > 61452)
  {
    switch(a2)
    {
      case 61453:
        uint64_t v3 = (PptEshClientTextBox *)operator new(0x38uLL);
        PptEshClientTextBox::PptEshClientTextBox(v3);
        return v3;
      case 61456:
        uint64_t v3 = (PptEshClientTextBox *)operator new(0x30uLL);
        PptEshClientAnchor::PptEshClientAnchor(v3);
        return v3;
      case 61457:
        uint64_t v3 = (PptEshClientTextBox *)operator new(0x38uLL);
        PptEshClientData::PptEshClientData(v3);
        return v3;
    }
  }
  else
  {
    switch(a2)
    {
      case 6:
        uint64_t v3 = (PptEshClientTextBox *)operator new(0x190uLL);
        PptEshGroup::PptEshGroup(v3);
        (*(void (**)(PptEshClientTextBox *))(*(void *)v3 + 120))(v3);
        return v3;
      case 7:
        uint64_t v3 = (PptEshClientTextBox *)operator new(0x260uLL);
        PptEshShape::PptEshShape(v3);
        return v3;
      case 12:
        uint64_t v3 = (PptEshClientTextBox *)operator new(0x168uLL);
        PptEshBackground::PptEshBackground(v3);
        return v3;
    }
  }
  return EshObjectFactory::createObject((EshObjectFactory *)this, a2, a3);
}

void sub_238A82798(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

EshDgg *EshObjectFactory::createObject(EshObjectFactory *this, int a2, int a3)
{
  if (a2 == 1)
  {
    uint64_t v3 = (EshRoot *)operator new(0x28uLL);
    EshRoot::EshRoot(v3);
    return v3;
  }
  else if ((a2 - 2) > 0x1A)
  {
    return EshObjectFactory::createRecord(this, a2, a3);
  }
  else
  {
    return EshObjectFactory::createSemanticObject(this, a2);
  }
}

void sub_238A82874(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void EshRoot::EshRoot(EshRoot *this)
{
  EshObject::EshObject((EshObject *)this, 1u);
  void *v1 = &unk_26EBD8820;
  v1[3] = 0;
  v1[4] = 0;
  v1[2] = 0;
}

void sub_238A82940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PptBinaryReader::read(PptBinaryReader *this, EshRoot *a2)
{
  (*(void (**)(EshRoot *, void))(*(void *)a2 + 104))(a2, 0);
  PptBinaryReader::checkStarted(this);
  *((void *)this + 29) = 0;
  int v4 = *((_DWORD *)this + 40);
  if (v4 != 2) {
    goto LABEL_6;
  }
  if (!*((unsigned char *)this + 164))
  {
    *((unsigned char *)this + 164) = 1;
    if (*(_DWORD *)(*((void *)this + 25) + 4) == *((_DWORD *)this + 54))
    {
      int v13 = *(_DWORD *)(*((void *)this + 24) + 88);
      if (v13 >= 1)
      {
        int v14 = 0;
        do
        {
          uint64_t OffsetByRef = PptPersistDir::getOffsetByRef(*((PptPersistDir **)this + 24), ++v14);
          if ((OffsetByRef & 0x80000000) == 0)
          {
            PptParserVisitor::parse(*((PptParserVisitor **)this + 23), *((EshHeader **)this + 25), OffsetByRef, *((SsrwOOStream **)this + 19));
            EshRoot::appendChild(a2, *((const EshHeader **)this + 25));
          }
        }
        while (v13 != v14);
      }
      return;
    }
    exception = __cxa_allocate_exception(4uLL);
    int v28 = 7010;
    goto LABEL_59;
  }
  if ((unsigned __int16)(*(_WORD *)(*((void *)this + 25) + 10) + 4096) <= 0x122u)
  {
    if (!PptBinaryReader::isBadHeader(this))
    {
      (*(void (**)(void, void, void))(**((void **)this + 19) + 16))(*((void *)this + 19), *(unsigned int *)(*((void *)this + 25) + 4), 0);
      (*(void (**)(void, void))(**((void **)this + 21) + 16))(*((void *)this + 21), *((void *)this + 19));
      uint64_t v16 = *((void *)this + 21);
      goto LABEL_54;
    }
    int v4 = *((_DWORD *)this + 40);
LABEL_6:
    if (v4) {
      goto LABEL_7;
    }
    if (!*((void *)this + 22) || PptBinaryReader::isBadHeader(this)) {
      goto LABEL_22;
    }
    if (!EshBinaryReader::isStarted(*((EshBinaryReader **)this + 22))
      || EshBinaryReader::atEnd(*((EshBinaryReader **)this + 22)))
    {
      if (!EshBinaryReader::isStarted(*((EshBinaryReader **)this + 22))) {
        PptParserVisitor::parse(*((PptParserVisitor **)this + 23), *((EshHeader **)this + 25), 0, *((SsrwOOStream **)this + 18));
      }
      (*(void (**)(void))(**((void **)this + 18) + 16))();
      if ((*(unsigned int (**)(void))(**((void **)this + 18) + 176))(*((void *)this + 18)) >= 8)
      {
        uint64_t v17 = (*(uint64_t (**)(void))(**((void **)this + 18) + 40))(*((void *)this + 18));
        unsigned int v18 = (EshHeader *)operator new(0x10uLL);
        EshHeader::makeDefault(v18);
        uint64_t v19 = (SsrwOOStgInfo *)(*(uint64_t (**)(void))(**((void **)this + 18) + 168))(*((void *)this + 18));
        unsigned int Size = SsrwOOStgInfo::getSize(v19);
        v21.n128_f64[0] = PptParserVisitor::parse(*((PptParserVisitor **)this + 23), v18, 0, *((SsrwOOStream **)this + 18));
        if ((unsigned __int16)(v18->var3 + 4096) <= 0x122u)
        {
          int var0 = v18->var0;
          if (v18->var0 != -8 && var0 && Size >= var0 + v18->var1 + 8)
          {
            (*(void (**)(void, uint64_t, void, double))(**((void **)this + 18) + 16))(*((void *)this + 18), v17, 0, v21.n128_f64[0]);
            (*(void (**)(void, void))(**((void **)this + 22) + 16))(*((void *)this + 22), *((void *)this + 18));
            unint64_t v23 = (EshHeader *)*((void *)this + 25);
            int v24 = v23->var1 + v23->var0;
            uint64_t v25 = (v24 + 8);
            if (Size >= v24 + 16)
            {
              PptParserVisitor::parse(*((PptParserVisitor **)this + 23), v23, v25, *((SsrwOOStream **)this + 18));
              if (PptBinaryReader::isBadHeader(this) && (PptBinaryReader::findGoodHeader(this, v25) & 1) == 0) {
                EshHeader::makeDefault(*((EshHeader **)this + 25));
              }
            }
            else
            {
              v23->var1 = v25;
            }
          }
        }
        MEMORY[0x23EC997B0](v18, 0x1000C408B6DE1C6, v21);
      }
    }
    if (EshBinaryReader::atEnd(*((EshBinaryReader **)this + 22))) {
      return;
    }
    uint64_t v16 = *((void *)this + 22);
LABEL_54:
    unsigned int v26 = *(void (**)(void))(*(void *)v16 + 32);
    v26();
    return;
  }
LABEL_7:
  if (!*((void *)this + 22))
  {
LABEL_22:
    uint64_t v8 = *((void *)this + 25);
LABEL_23:
    *(_DWORD *)uint64_t v8 = 0;
    return;
  }
  int v5 = (SsrwOOStgInfo *)(*(uint64_t (**)(void))(**((void **)this + 18) + 168))(*((void *)this + 18));
  unsigned int v6 = SsrwOOStgInfo::getSize(v5);
  if (*((void *)this + 36) == *((void *)this + 37))
  {
    if (!*((unsigned char *)this + 312))
    {
      *((unsigned char *)this + 312) = 1;
      PptBinaryReader::parseStore(this);
      *((unsigned char *)this + 312) = 0;
      goto LABEL_11;
    }
    exception = __cxa_allocate_exception(4uLL);
    int v28 = 1000;
LABEL_59:
    _DWORD *exception = v28;
  }
LABEL_11:
  *((_DWORD *)this + 40) = 0;
  double v7 = PptParserVisitor::parse(*((PptParserVisitor **)this + 23), *((EshHeader **)this + 25), 0, *((SsrwOOStream **)this + 18));
  uint64_t v8 = *((void *)this + 25);
  if (*(_DWORD *)(v8 + 4) + *(_DWORD *)v8 + 8 > v6 || (unsigned __int16)(*(_WORD *)(v8 + 10) + 4096) >= 0x123u) {
    goto LABEL_23;
  }
  (*(void (**)(void, void, void, double))(**((void **)this + 18) + 16))(*((void *)this + 18), 0, 0, v7);
  id v9 = (EshHeader *)*((void *)this + 25);
  int v10 = v9->var0;
  if (v9->var0)
  {
    (*(void (**)(void, void))(**((void **)this + 22) + 16))(*((void *)this + 22), *((void *)this + 18));
    (*(void (**)(void, EshRoot *))(**((void **)this + 22) + 32))(*((void *)this + 22), a2);
    id v9 = (EshHeader *)*((void *)this + 25);
    int v10 = v9->var0;
  }
  unsigned int v11 = v9->var1 + v10;
  if (v11 + 16 <= v6)
  {
    PptParserVisitor::parse(*((PptParserVisitor **)this + 23), v9, v11 + 8, *((SsrwOOStream **)this + 18));
    if (!PptBinaryReader::isBadHeader(this)
      || (PptBinaryReader::findGoodHeader(this, *(_DWORD *)(*((void *)this + 25) + 4) + **((_DWORD **)this + 25) + 8) & 1) != 0)
    {
      return;
    }
    uint64_t v12 = (EshHeader *)*((void *)this + 25);
  }
  else
  {
    uint64_t v12 = v9;
  }
  EshHeader::makeDefault(v12);
}

void sub_238A8303C(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C408B6DE1C6);
  _Unwind_Resume(a1);
}

void EshRoot::setNumChildren(EshRoot *this, unsigned int a2)
{
  uint64_t v3 = (char **)((char *)this + 16);
  unint64_t v4 = *((void *)this + 3) - *((void *)this + 2);
  unint64_t v5 = v4 >> 3;
  if ((v4 >> 3) < a2)
  {
    double v7 = (char *)this + 32;
    unint64_t v8 = v4 >> 3;
    do
    {
      id v9 = (EshHeader *)operator new(0x10uLL);
      EshHeader::makeDefault(v9);
      unsigned int v11 = (EshHeader **)*((void *)this + 3);
      unint64_t v10 = *((void *)this + 4);
      if ((unint64_t)v11 >= v10)
      {
        unint64_t v13 = (char *)v11 - *v3;
        unint64_t v14 = (v10 - (unint64_t)*v3) >> 3;
        unsigned int v15 = 2 * v14;
        if (2 * (int)v14 <= (v13 >> 3) + 1) {
          unsigned int v15 = (v13 >> 3) + 1;
        }
        if (v14 >= 0x7FFFFFFF) {
          unint64_t v16 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16)
        {
          uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v7, v16);
          uint64_t v19 = v18;
        }
        else
        {
          uint64_t v17 = 0;
          uint64_t v19 = 0;
        }
        unint64_t v20 = (EshHeader **)&v17[v13 & 0x7FFFFFFF8];
        void *v20 = v9;
        uint64_t v12 = v20 + 1;
        BOOL v22 = (char *)*((void *)this + 2);
        __n128 v21 = (char *)*((void *)this + 3);
        if (v21 != v22)
        {
          do
          {
            unint64_t v23 = (EshHeader *)*((void *)v21 - 1);
            v21 -= 8;
            *--unint64_t v20 = v23;
          }
          while (v21 != v22);
          __n128 v21 = *v3;
        }
        *((void *)this + 2) = v20;
        *((void *)this + 3) = v12;
        *((void *)this + 4) = &v17[8 * v19];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        void *v11 = v9;
        uint64_t v12 = v11 + 1;
      }
      *((void *)this + 3) = v12;
      LODWORD(v8) = v8 + 1;
    }
    while (v8 != a2);
  }
  int v24 = v5 - a2;
  if (v5 > a2)
  {
    uint64_t v25 = 8 * a2;
    do
    {
      unsigned int v26 = *v3;
      uint64_t v27 = *(void *)&(*v3)[v25];
      if (v27)
      {
        MEMORY[0x23EC997B0](v27, 0x1000C408B6DE1C6);
        unsigned int v26 = *v3;
      }
      *(void *)&v26[v25] = 0;
      v25 += 8;
      --v24;
    }
    while (v24);
  }
  std::vector<EshHeader *,ChAllocator<EshHeader *>>::resize((uint64_t)v3, a2);
}

void sub_238A8320C(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x23EC997B0](v1, 0x1000C408B6DE1C6);
  }
  _Unwind_Resume(exception_object);
}

BOOL PptBinaryReader::checkStarted(PptBinaryReader *this)
{
  BOOL result = SsrwOORootStorage::isOpen((PptBinaryReader *)((char *)this + 40));
  if (!result
    || !*((void *)this + 19)
    || !*((void *)this + 21)
    || !*((void *)this + 23)
    || !*((void *)this + 25))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
  return result;
}

BOOL PptBinaryReader::isBadHeader(PptBinaryReader *this)
{
  uint64_t v2 = 152;
  if (!*((_DWORD *)this + 40)) {
    uint64_t v2 = 144;
  }
  uint64_t v3 = (SsrwOOStgInfo *)(*(uint64_t (**)(void))(**(void **)((char *)this + v2) + 168))(*(void *)((char *)this + v2));
  unsigned int Size = SsrwOOStgInfo::getSize(v3);
  unint64_t v5 = (EshHeader *)*((void *)this + 25);
  if (!*((_DWORD *)this + 40))
  {
    if (((unsigned __int16)(v5->var3 + 3816) >> 8) != 255) {
      return 1;
    }
    unsigned int v8 = v5->var2 & 0xFFFE;
    if (v8 <= 0x6DF)
    {
      if ((v5->var2 & 0xFFFEu) > 0x469)
      {
        if (v8 != 1130 && v8 != 1346) {
          return 1;
        }
      }
      else if (v8 != 534 && v8 != 980)
      {
        return 1;
      }
    }
    else
    {
      BOOL v9 = v8 - 1760 > 4 || ((1 << (v8 + 32)) & 0x15) == 0;
      if (v9 && v8 != 2048 && v8 != 1960) {
        return 1;
      }
    }
  }
  unsigned int v6 = v5->var1 + 8;
  if (v6 > Size || v5->var0 + v6 > Size) {
    return 1;
  }
  return EshHeader::isDefault(v5);
}

BOOL EshHeader::isDefault(EshHeader *this)
{
  return !this->var0 && !this->var1 && !this->var2 && !this->var3 && this->var4 == 0;
}

BOOL PptBinaryReader::isHeaderSkipped(PptBinaryReader *this, const EshHeader *a2)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 31);
  if (!v2) {
    return 0;
  }
  unint64_t v5 = (uint64_t **)((char *)this + 240);
  unsigned int var3 = a2->var3;
  while (1)
  {
    unsigned int v7 = *((_DWORD *)v2 + 7);
    if (v7 <= var3) {
      break;
    }
LABEL_6:
    uint64_t v2 = (uint64_t *)*v2;
    if (!v2) {
      return 0;
    }
  }
  if (v7 < var3)
  {
    ++v2;
    goto LABEL_6;
  }
  unsigned int v9 = a2->var3;
  unint64_t v10 = &v9;
  if (!*((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 30, &v9, (uint64_t)&std::piecewise_construct, &v10)+ 8))return 1; {
  unsigned int v9 = a2->var3;
  }
  unint64_t v10 = &v9;
  if (*((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v9, (uint64_t)&std::piecewise_construct, &v10)+ 8) == 1)return PptPersistDir::getRefByOffset(*((PptPersistDir **)this + 24), a2->var1) == -1; {
  return 0;
  }
}

uint64_t PptPersistDir::getRefByOffset(PptPersistDir *this, unsigned int a2)
{
  unsigned int v6 = a2;
  uint64_t v2 = (uint64_t *)*((void *)this + 8);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = (uint64_t **)((char *)this + 56);
  while (1)
  {
    unsigned int v4 = *((_DWORD *)v2 + 7);
    if (v4 <= a2) {
      break;
    }
LABEL_6:
    uint64_t v2 = (uint64_t *)*v2;
    if (!v2) {
      return 0xFFFFFFFFLL;
    }
  }
  if (v4 < a2)
  {
    ++v2;
    goto LABEL_6;
  }
  unsigned int v7 = &v6;
  return *((unsigned int *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v3, &v6, (uint64_t)&std::piecewise_construct, &v7)+ 8);
}

void EshRoot::appendChild(EshRoot *this, const EshHeader *a2)
{
  unsigned int v4 = operator new(0x10uLL);
  EshHeader::operator=((uint64_t)v4, (uint64_t)a2);
  unint64_t v5 = *((void *)this + 4);
  unsigned int v6 = (void *)*((void *)this + 3);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *((void *)this + 2);
    unint64_t v9 = (unint64_t)v6 - v8;
    unint64_t v10 = (v5 - v8) >> 3;
    unsigned int v11 = 2 * v10;
    if (2 * (int)v10 <= (v9 >> 3) + 1) {
      unsigned int v11 = (v9 >> 3) + 1;
    }
    if (v10 >= 0x7FFFFFFF) {
      unint64_t v12 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12)
    {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 32, v12);
      uint64_t v15 = v14;
    }
    else
    {
      unint64_t v13 = 0;
      uint64_t v15 = 0;
    }
    unint64_t v16 = &v13[v9 & 0x7FFFFFFF8];
    uint64_t v17 = &v13[8 * v15];
    *(void *)unint64_t v16 = v4;
    unsigned int v7 = v16 + 8;
    uint64_t v19 = (char *)*((void *)this + 2);
    unsigned int v18 = (char *)*((void *)this + 3);
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      unsigned int v18 = (char *)*((void *)this + 2);
    }
    *((void *)this + 2) = v16;
    *((void *)this + 3) = v7;
    *((void *)this + 4) = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    void *v6 = v4;
    unsigned int v7 = v6 + 1;
  }
  *((void *)this + 3) = v7;
}

void sub_238A83670(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x23EC997B0](v1, 0x1000C408B6DE1C6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PptBinaryReader::goToNextHeader(PptBinaryReader *this, char a2)
{
  if (a2) {
    goto LABEL_13;
  }
  uint64_t v3 = (const EshHeader *)*((void *)this + 25);
  int var3 = v3->var3;
  if (v3->var4 == 15)
  {
    if (var3 == 1064 || var3 == 12052 || var3 == 14003) {
      goto LABEL_13;
    }
  }
  else if (var3 != 5003)
  {
LABEL_13:
    unsigned int v7 = (int *)*((void *)this + 25);
    int v8 = *v7;
    int v9 = v7[1] + 8;
    goto LABEL_14;
  }
  if (PptBinaryReader::isHeaderSkipped(this, v3)) {
    goto LABEL_13;
  }
  int v9 = *(_DWORD *)(*((void *)this + 25) + 4);
  int v8 = 8;
LABEL_14:
  uint64_t v10 = (v9 + v8);
  uint64_t v11 = 152;
  if (!*((_DWORD *)this + 40)) {
    uint64_t v11 = 144;
  }
  (*(void (**)(void, uint64_t, void))(**(void **)((char *)this + v11) + 16))(*(void *)((char *)this + v11), v10, 0);
  *(_DWORD *)(*((void *)this + 25) + 4) = v10;
  if (*((_DWORD *)this + 40) || PptBinaryReader::isBadHeader(this))
  {
    do
    {
      unint64_t v12 = (_DWORD *)*((void *)this + 25);
      int v13 = v12[1];
      _DWORD *v12 = 0;
      v12[1] = v10;
      if (!PptBinaryReader::isBadHeader(this))
      {
        PptParserVisitor::parse(*((SsrwOOStream ***)this + 23), *((EshHeader **)this + 25), v10);
        uint64_t v10 = (*(_DWORD *)(*((void *)this + 25) + 4) + **((_DWORD **)this + 25) + 8);
      }
      if (PptBinaryReader::isBadHeader(this))
      {
        uint64_t NextOffset = PptPersistDir::getNextOffset(*((PptPersistDir **)this + 24), v13);
        if (NextOffset == -1)
        {
          uint64_t v10 = 0xFFFFFFFFLL;
        }
        else
        {
          PptParserVisitor::parse(*((SsrwOOStream ***)this + 23), *((EshHeader **)this + 25), NextOffset);
          uint64_t v10 = (*(_DWORD *)(*((void *)this + 25) + 4) + **((_DWORD **)this + 25) + 8);
        }
      }
      uint64_t result = PptBinaryReader::isBadHeader(this);
      if (result) {
        break;
      }
      uint64_t result = PptBinaryReader::isHeaderSkipped(this, *((const EshHeader **)this + 25));
    }
    while ((result & 1) != 0);
  }
  else
  {
    unint64_t v16 = *(uint64_t (**)(void))(**((void **)this + 22) + 16);
    return v16();
  }
  return result;
}

uint64_t PptPersistDir::getNextOffset(PptPersistDir *this, int a2)
{
  if (*((int *)this + 20) < 1) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v4 = (uint64_t **)((char *)this + 32);
  unint64_t v5 = (void *)((char *)this + 40);
  uint64_t v6 = 0xFFFFFFFFLL;
  unsigned int v7 = 1;
  do
  {
    uint64_t v8 = *v5;
    if (*v5)
    {
      int v9 = v5;
      do
      {
        unsigned int v10 = *(_DWORD *)(v8 + 28);
        BOOL v11 = v10 >= v7;
        if (v10 >= v7) {
          unint64_t v12 = (uint64_t *)v8;
        }
        else {
          unint64_t v12 = (uint64_t *)(v8 + 8);
        }
        if (v11) {
          int v9 = (void *)v8;
        }
        uint64_t v8 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v7 >= *((_DWORD *)v9 + 7))
      {
        unsigned int v15 = v7;
        unint64_t v16 = &v15;
        if (*((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v4, &v15, (uint64_t)&std::piecewise_construct, &v16)+ 8) > a2)
        {
          if (v6 == -1
            || (unsigned int v15 = v7,
                unint64_t v16 = &v15,
                *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v4, &v15, (uint64_t)&std::piecewise_construct, &v16)+ 8) < (int)v6))
          {
            unsigned int v15 = v7;
            unint64_t v16 = &v15;
            uint64_t v6 = *((unsigned int *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v4, &v15, (uint64_t)&std::piecewise_construct, &v16)+ 8);
          }
        }
      }
    }
  }
  while ((int)v7++ < *((_DWORD *)this + 20));
  return v6;
}

uint64_t EshRoot::getChildHeader(EshRoot *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (((unint64_t)(*((void *)this + 3) - v2) >> 3) <= a2) {
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  return *(void *)(v2 + 8 * a2);
}

void sub_238A83DD4(_Unwind_Exception *exc_buf, int a2)
{
  if (a2 == 1)
  {
    id v5 = objc_begin_catch(exc_buf);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    objc_exception_throw(v5);
  }

  _Unwind_Resume(exc_buf);
}

void sub_238A83E74(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_238A83E84()
{
}

uint64_t EshRoot::getNumChildren(EshRoot *this)
{
  return (*((void *)this + 3) - *((void *)this + 2)) >> 3;
}

uint64_t EshRoot::getChildType(EshRoot *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (((unint64_t)(*((void *)this + 3) - v2) >> 3) <= a2) {
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  return *(unsigned __int16 *)(*(void *)(v2 + 8 * a2) + 10);
}

uint64_t EshRoot::getChildVersion(EshRoot *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (((unint64_t)(*((void *)this + 3) - v2) >> 3) <= a2) {
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  return *(unsigned __int8 *)(*(void *)(v2 + 8 * a2) + 12);
}

uint64_t PptBinaryReader::getObjectFactory(PptBinaryReader *this)
{
  return *((void *)this + 33);
}

EshRoot *PptObjectFactory::createObject(PptObjectFactory *this, PptObjectFactory *a2, uint64_t a3)
{
  int v3 = a3;
  if (a2 == 1)
  {
    id v5 = (EshRoot *)operator new(0x28uLL);
    EshRoot::EshRoot(v5);
  }
  else
  {
    if ((a2 - 1) < 0x1C || (unsigned __int16)((_WORD)a2 + 4096) <= 0x122u) {
      PowerPointObject = (EshContainer *)(*(uint64_t (**)(PptEshObjectFactory *, PptObjectFactory *, uint64_t))(*(void *)this->var1 + 16))(this->var1, a2, a3);
    }
    else {
      PowerPointObject = PptObjectFactory::createPowerPointObject(a2, a3);
    }
    id v5 = PowerPointObject;
  }
  EshObjectFactory::verifyTypeAndVersionOfObject((EshObjectFactory *)v5, (EshObject *)a2, v3);
  return v5;
}

void sub_238A83FF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

EshContainer *PptObjectFactory::createPowerPointObject(PptObjectFactory *this, int a2)
{
  char v2 = a2;
  int v3 = (int)this;
  if (a2 == 15)
  {
    if (this != 1064 && this != 12052 && this != 14003) {
      goto LABEL_5;
    }
  }
  else if (this == 5003)
  {
LABEL_5:
    unsigned int v4 = (EshContainer *)operator new(0x48uLL);
    EshContainer::EshContainer(v4, v3);
    *(void *)unsigned int v4 = &unk_26EBE7950;
    *((void *)v4 + 7) = &unk_26EBE7A00;
    *((unsigned char *)v4 + 64) = 0;
    *((_DWORD *)v4 + 17) = -1;
    EshRecord::setVersion((uint64_t)v4, v2);
    return v4;
  }
  EshHeader::makeDefault(&v7);
  v7.int var3 = v3;
  v7.var4 = v2;
  if (v3 <= 3997)
  {
    if (v3 > 2020)
    {
      if (v3 > 3010)
      {
        switch(v3)
        {
          case 3031:
            unsigned int v4 = (EshContainer *)operator new(0x38uLL);
            PptGRatioAtom::PptGRatioAtom(v4, &v7);
            return v4;
          case 3032:
          case 3033:
          case 3036:
            goto LABEL_178;
          case 3034:
            unsigned int v4 = (EshContainer *)operator new(0x38uLL);
            PptGPointAtom::PptGPointAtom(v4, &v7);
            return v4;
          case 3035:
            unsigned int v4 = (EshContainer *)operator new(0x30uLL);
            PptOEShapeAtom::PptOEShapeAtom(v4, &v7);
            return v4;
          case 3037:
            unsigned int v4 = (EshContainer *)operator new(0x30uLL);
            PptRoundTripNewPlaceholderIdAtom::PptRoundTripNewPlaceholderIdAtom(v4, &v7);
            return v4;
          default:
            if (v3 == 3011)
            {
              unsigned int v4 = (EshContainer *)operator new(0x38uLL);
              PptOEPlaceholderAtom::PptOEPlaceholderAtom((PptOEPlaceholderAtom *)v4, &v7);
            }
            else
            {
              if (v3 != 3025) {
                goto LABEL_178;
              }
              unsigned int v4 = (EshContainer *)operator new(0x40uLL);
              PptGRectAtom::PptGRectAtom(v4, &v7);
            }
            break;
        }
      }
      else
      {
        switch(v3)
        {
          case 2021:
            unsigned int v4 = (EshContainer *)operator new(0x38uLL);
            PptSoundCollAtom::PptSoundCollAtom(v4, &v7);
            return v4;
          case 2022:
          case 2024:
          case 2026:
          case 2027:
          case 2028:
          case 2029:
          case 2030:
            goto LABEL_178;
          case 2023:
            unsigned int v4 = (EshContainer *)operator new(0x38uLL);
            PptSoundDataAtom::PptSoundDataAtom(v4, &v7);
            return v4;
          case 2025:
            unsigned int v4 = (EshContainer *)operator new(0x38uLL);
            PptBookmarkSeedAtom::PptBookmarkSeedAtom(v4, &v7);
            return v4;
          case 2031:
            unsigned int v4 = (EshContainer *)operator new(0x38uLL);
            PptInt4ArrayAtom::PptInt4ArrayAtom(v4, &v7);
            return v4;
          case 2032:
            unsigned int v4 = (EshContainer *)operator new(0x78uLL);
            PptColorSchemeAtom::PptColorSchemeAtom((PptColorSchemeAtom *)v4, &v7);
            return v4;
          default:
            if (v3 == 2041)
            {
              unsigned int v4 = (EshContainer *)operator new(0x38uLL);
              PptBinaryTagBlipAtom::PptBinaryTagBlipAtom(v4, &v7);
            }
            else
            {
              if (v3 != 3009) {
                goto LABEL_178;
              }
              unsigned int v4 = (EshContainer *)operator new(0x38uLL);
              PptExObjRefAtom::PptExObjRefAtom(v4, &v7);
            }
            break;
        }
      }
    }
    else
    {
      switch(v3)
      {
        case 1001:
          unsigned int v4 = (EshContainer *)operator new(0x58uLL);
          PptDocumentAtom::PptDocumentAtom(v4, &v7);
          break;
        case 1005:
          unsigned int v4 = (EshContainer *)operator new(0x78uLL);
          PptSlideBaseAtom::PptSlideBaseAtom(v4, &v7);
          break;
        case 1007:
          unsigned int v4 = (EshContainer *)operator new(0x60uLL);
          PptSlideAtom::PptSlideAtom(v4, &v7);
          break;
        case 1009:
          unsigned int v4 = (EshContainer *)operator new(0x38uLL);
          PptNotesAtom::PptNotesAtom(v4, &v7);
          break;
        case 1011:
          unsigned int v4 = (EshContainer *)operator new(0x40uLL);
          PptSlidePersistAtom::PptSlidePersistAtom(v4, &v7);
          break;
        case 1015:
          unsigned int v4 = (EshContainer *)operator new(0x58uLL);
          PptSSlideLayoutAtom::PptSSlideLayoutAtom(v4, &v7);
          break;
        case 1017:
          unsigned int v4 = (EshContainer *)operator new(0x48uLL);
          PptSSSlideInfoAtom::PptSSSlideInfoAtom((PptSSSlideInfoAtom *)v4, &v7);
          break;
        case 1019:
          unsigned int v4 = (EshContainer *)operator new(0x38uLL);
          PptGuideAtom::PptGuideAtom(v4, &v7);
          break;
        case 1021:
          unsigned int v4 = (EshContainer *)operator new(0x1E8uLL);
          PptViewInfoAtom::PptViewInfoAtom(v4, &v7);
          break;
        case 1022:
          unsigned int v4 = (EshContainer *)operator new(0x30uLL);
          PptSlideViewInfoAtom::PptSlideViewInfoAtom(v4, &v7);
          break;
        case 1024:
          unsigned int v4 = (EshContainer *)operator new(0x40uLL);
          PptVBAInfoAtom::PptVBAInfoAtom(v4, &v7);
          break;
        case 1025:
          unsigned int v4 = (EshContainer *)operator new(0x68uLL);
          PptSSDocInfoAtom::PptSSDocInfoAtom(v4, &v7);
          break;
        case 1030:
          unsigned int v4 = (EshContainer *)operator new(0xA8uLL);
          PptDocRoutingSlip::PptDocRoutingSlip(v4, &v7);
          break;
        case 1034:
          unsigned int v4 = (EshContainer *)operator new(0x38uLL);
          PptExObjListAtom::PptExObjListAtom(v4, &v7);
          break;
        case 1037:
          unsigned int v4 = (EshContainer *)operator new(0x30uLL);
          PptGridSpacing10Atom::PptGridSpacing10Atom(v4, &v7);
          break;
        case 1038:
          unsigned int v4 = (EshContainer *)operator new(0x60uLL);
          PptRoundTripThemeAtom::PptRoundTripThemeAtom(v4, &v7);
          break;
        case 1039:
          unsigned int v4 = (EshContainer *)operator new(0x60uLL);
          PptRoundTripColorMappingAtom::PptRoundTripColorMappingAtom(v4, &v7);
          break;
        case 1042:
          unsigned int v4 = (EshContainer *)operator new(0x48uLL);
          PptNamedShowSlidesAtom::PptNamedShowSlidesAtom(v4, &v7);
          break;
        case 1045:
          unsigned int v4 = (EshContainer *)operator new(0x48uLL);
          PptViewSettingsAtom::PptViewSettingsAtom(v4, &v7);
          break;
        case 1052:
          unsigned int v4 = (EshContainer *)operator new(0x38uLL);
          PptRoundTripOriginalMainMasterIdAtom::PptRoundTripOriginalMainMasterIdAtom(v4, &v7);
          break;
        case 1053:
          unsigned int v4 = (EshContainer *)operator new(0x38uLL);
          PptRoundTripCompositeMasterIdAtom::PptRoundTripCompositeMasterIdAtom(v4, &v7);
          break;
        case 1054:
          unsigned int v4 = (EshContainer *)operator new(0x60uLL);
          PptRoundTripContentMasterInfoAtom::PptRoundTripContentMasterInfoAtom(v4, &v7);
          break;
        case 1055:
          unsigned int v4 = (EshContainer *)operator new(0x38uLL);
          PptRoundTripShapeIdAtom::PptRoundTripShapeIdAtom(v4, &v7);
          break;
        case 1056:
          unsigned int v4 = (EshContainer *)operator new(0x30uLL);
          PptRoundTripHeaderFooterPlaceholderAtom::PptRoundTripHeaderFooterPlaceholderAtom(v4, &v7);
          break;
        case 1058:
          unsigned int v4 = (EshContainer *)operator new(0x38uLL);
          PptRoundTripContentMasterIdAtom::PptRoundTripContentMasterIdAtom(v4, &v7);
          break;
        case 1059:
          unsigned int v4 = (EshContainer *)operator new(0x60uLL);
          PptRoundTripOfficeArtTextStylesAtom::PptRoundTripOfficeArtTextStylesAtom(v4, &v7);
          break;
        case 1060:
          unsigned int v4 = (EshContainer *)operator new(0x38uLL);
          PptRoundTripHeaderFooterDefaultsAtom::PptRoundTripHeaderFooterDefaultsAtom(v4, &v7);
          break;
        case 1061:
          unsigned int v4 = (EshContainer *)operator new(0x30uLL);
          PptRoundTripDocFlagsAtom::PptRoundTripDocFlagsAtom(v4, &v7);
          break;
        case 1062:
          unsigned int v4 = (EshContainer *)operator new(0x38uLL);
          PptRoundTripShapeCheckSumForCustomLayoutsAtom::PptRoundTripShapeCheckSumForCustomLayoutsAtom(v4, &v7);
          break;
        case 1063:
          unsigned int v4 = (EshContainer *)operator new(0x60uLL);
          PptRoundTripNotesMasterTextStylesAtom::PptRoundTripNotesMasterTextStylesAtom(v4, &v7);
          break;
        case 1064:
          unsigned int v4 = (EshContainer *)operator new(0x60uLL);
          PptRoundTripCustomTableStylesAtom::PptRoundTripCustomTableStylesAtom(v4, &v7);
          break;
        default:
          goto LABEL_178;
      }
    }
  }
  else if (v3 > 6020)
  {
    if (v3 > 12051)
    {
      if (v3 <= 61734)
      {
        switch(v3)
        {
          case 12052:
            unsigned int v4 = (EshContainer *)operator new(0x40uLL);
            PptCryptSession10ContainerAtom::PptCryptSession10ContainerAtom(v4, &v7);
            break;
          case 14001:
            unsigned int v4 = (EshContainer *)operator new(0x30uLL);
            PptReviewAtom::PptReviewAtom(v4, &v7);
            break;
          case 14101:
            unsigned int v4 = (EshContainer *)operator new(0x48uLL);
            PptRoundTripSlideSyncInfoAtom::PptRoundTripSlideSyncInfoAtom(v4, &v7);
            break;
          default:
LABEL_178:
            unsigned int v4 = (EshContainer *)operator new(0x30uLL);
            EshAtom::EshAtom(v4, &v7);
            *(void *)unsigned int v4 = &unk_26EBEF4C0;
            *((void *)v4 + 4) = &unk_26EBEF568;
            *((_DWORD *)v4 + 10) = -1;
            *((unsigned char *)v4 + 44) = 0;
            break;
        }
      }
      else
      {
        switch(v3)
        {
          case 61735:
            unsigned int v4 = (EshContainer *)operator new(0x48uLL);
            PptAnimNodeAtom::PptAnimNodeAtom(v4, &v7);
            break;
          case 61736:
            unsigned int v4 = (EshContainer *)operator new(0x40uLL);
            PptAnimConditionAtom::PptAnimConditionAtom(v4, &v7);
            break;
          case 61737:
            unsigned int v4 = (EshContainer *)operator new(0x38uLL);
            PptAnimModifierAtom::PptAnimModifierAtom(v4, &v7);
            break;
          case 61747:
            unsigned int v4 = (EshContainer *)operator new(0x40uLL);
            PptAnimBehaviorAtom::PptAnimBehaviorAtom(v4, &v7);
            break;
          case 61748:
            unsigned int v4 = (EshContainer *)operator new(0x40uLL);
            PptAnimAnimateBehaviorAtom::PptAnimAnimateBehaviorAtom(v4, &v7);
            break;
          case 61749:
            unsigned int v4 = (EshContainer *)operator new(0x60uLL);
            PptAnimColorBehaviorAtom::PptAnimColorBehaviorAtom(v4, &v7);
            break;
          case 61750:
            unsigned int v4 = (EshContainer *)operator new(0x38uLL);
            PptAnimEffectBehaviorAtom::PptAnimEffectBehaviorAtom(v4, &v7);
            break;
          case 61751:
            unsigned int v4 = (EshContainer *)operator new(0x48uLL);
            PptAnimMotionBehaviorAtom::PptAnimMotionBehaviorAtom(v4, &v7);
            break;
          case 61752:
            unsigned int v4 = (EshContainer *)operator new(0x40uLL);
            PptAnimRotationBehaviorAtom::PptAnimRotationBehaviorAtom(v4, &v7);
            break;
          case 61753:
            unsigned int v4 = (EshContainer *)operator new(0x50uLL);
            PptAnimScaleBehaviorAtom::PptAnimScaleBehaviorAtom(v4, &v7);
            break;
          case 61754:
            unsigned int v4 = (EshContainer *)operator new(0x38uLL);
            PptAnimSetBehaviorAtom::PptAnimSetBehaviorAtom(v4, &v7);
            break;
          case 61755:
            unsigned int v4 = (EshContainer *)operator new(0x38uLL);
            PptAnimCmdBehaviorAtom::PptAnimCmdBehaviorAtom(v4, &v7);
            break;
          case 61760:
            unsigned int v4 = (EshContainer *)operator new(0x30uLL);
            PptAnimIterateDataAtom::PptAnimIterateDataAtom(v4, &v7);
            break;
          case 61761:
            unsigned int v4 = (EshContainer *)operator new(0x40uLL);
            PptAnimSequenceDataAtom::PptAnimSequenceDataAtom(v4, &v7);
            break;
          case 61762:
            unsigned int v4 = (EshContainer *)operator new(0x58uLL);
            PptAnimVariantAtom::PptAnimVariantAtom(v4, &v7);
            break;
          case 61763:
            unsigned int v4 = (EshContainer *)operator new(0x38uLL);
            PptAnimAnimationValueAtom::PptAnimAnimationValueAtom(v4, &v7);
            break;
          default:
            goto LABEL_178;
        }
      }
    }
    else if (v3 <= 11002)
    {
      switch(v3)
      {
        case 10000:
          unsigned int v4 = (EshContainer *)operator new(0x38uLL);
          PptRulerIndentAtom::PptRulerIndentAtom(v4, &v7);
          return v4;
        case 10001:
          unsigned int v4 = (EshContainer *)operator new(0xA0uLL);
          PptGScalingAtom::PptGScalingAtom(v4, &v7);
          return v4;
        case 10002:
          unsigned int v4 = (EshContainer *)operator new(0x40uLL);
          PptGRColorAtom::PptGRColorAtom(v4, &v7);
          return v4;
        case 10003:
          goto LABEL_178;
        case 10004:
          unsigned int v4 = (EshContainer *)operator new(0xA0uLL);
          PptGLineAtom::PptGLineAtom(v4, &v7);
          return v4;
        default:
          if (v3 == 6021)
          {
            unsigned int v4 = (EshContainer *)operator new(0x180uLL);
            PptEnvelopeData9Atom::PptEnvelopeData9Atom(v4, &v7);
          }
          else
          {
            if (v3 != 6023) {
              goto LABEL_178;
            }
            unsigned int v4 = (EshContainer *)operator new(0x68uLL);
            PptExitAnimationInfoAtom::PptExitAnimationInfoAtom(v4, &v7);
          }
          break;
      }
    }
    else
    {
      switch(v3)
      {
        case 11003:
          unsigned int v4 = (EshContainer *)operator new(0x48uLL);
          PptAnimVisualElementAtom::PptAnimVisualElementAtom(v4, &v7);
          break;
        case 11004:
        case 11005:
        case 11006:
        case 11007:
        case 11010:
        case 11012:
        case 11014:
        case 11015:
        case 11016:
        case 11018:
        case 11020:
          goto LABEL_178;
        case 11008:
          unsigned int v4 = (EshContainer *)operator new(0x38uLL);
          PptAnimHashCode10Atom::PptAnimHashCode10Atom(v4, &v7);
          break;
        case 11009:
          unsigned int v4 = (EshContainer *)operator new(0x38uLL);
          PptAnimVisualPageAtom::PptAnimVisualPageAtom(v4, &v7);
          break;
        case 11011:
          unsigned int v4 = (EshContainer *)operator new(0x40uLL);
          PptAnimBuildAtom::PptAnimBuildAtom(v4, &v7);
          break;
        case 11013:
          unsigned int v4 = (EshContainer *)operator new(0x38uLL);
          PptAnimChartBuildAtom::PptAnimChartBuildAtom(v4, &v7);
          break;
        case 11017:
          unsigned int v4 = (EshContainer *)operator new(0x40uLL);
          PptAnimParagraphBuildAtom::PptAnimParagraphBuildAtom(v4, &v7);
          break;
        case 11019:
          unsigned int v4 = (EshContainer *)operator new(0x60uLL);
          PptRoundTripAnimationAtom::PptRoundTripAnimationAtom(v4, &v7);
          break;
        case 11021:
          unsigned int v4 = (EshContainer *)operator new(0x38uLL);
          PptRoundTripAnimationHashAtom::PptRoundTripAnimationHashAtom(v4, &v7);
          break;
        default:
          switch(v3)
          {
            case 12001:
              unsigned int v4 = (EshContainer *)operator new(0x48uLL);
              PptComment10Atom::PptComment10Atom(v4, &v7);
              break;
            case 12005:
              unsigned int v4 = (EshContainer *)operator new(0x38uLL);
              PptCommentIndex10Atom::PptCommentIndex10Atom(v4, &v7);
              break;
            case 12006:
              unsigned int v4 = (EshContainer *)operator new(0x30uLL);
              PptLinkedShape10Atom::PptLinkedShape10Atom(v4, &v7);
              break;
            case 12007:
              unsigned int v4 = (EshContainer *)operator new(0x30uLL);
              PptLinkedSlide10Atom::PptLinkedSlide10Atom(v4, &v7);
              break;
            case 12010:
              unsigned int v4 = (EshContainer *)operator new(0x30uLL);
              PptSlideFlags10Atom::PptSlideFlags10Atom(v4, &v7);
              break;
            case 12011:
              unsigned int v4 = (EshContainer *)operator new(0x30uLL);
              PptSlideTime10Atom::PptSlideTime10Atom(v4, &v7);
              break;
            default:
              goto LABEL_178;
          }
          break;
      }
    }
  }
  else
  {
    switch(v3)
    {
      case 3998:
        unsigned int v4 = (EshContainer *)operator new(0x38uLL);
        PptOutlineTextRefAtom::PptOutlineTextRefAtom(v4, &v7);
        return v4;
      case 3999:
        unsigned int v4 = (EshContainer *)operator new(0x38uLL);
        PptTextHeaderAtom::PptTextHeaderAtom((PptTextHeaderAtom *)v4, &v7);
        return v4;
      case 4000:
        unsigned int v4 = (EshContainer *)operator new(0x48uLL);
        PptTextCharsAtom::PptTextCharsAtom(v4, &v7);
        return v4;
      case 4001:
        unsigned int v4 = (EshContainer *)operator new(0x68uLL);
        PptTextBlockStylingAtom::PptTextBlockStylingAtom(v4, &v7);
        return v4;
      case 4002:
        unsigned int v4 = (EshContainer *)operator new(0x68uLL);
        PptBaseTextPropertyAtom::PptBaseTextPropertyAtom(v4, &v7);
        return v4;
      case 4003:
        unsigned int v4 = (EshContainer *)operator new(0x48uLL);
        PptTextMasterStyleAtom::PptTextMasterStyleAtom((PptTextMasterStyleAtom *)v4, &v7);
        return v4;
      case 4004:
        unsigned int v4 = (EshContainer *)operator new(0x50uLL);
        PptTextDefaultCharacterStyleAtom::PptTextDefaultCharacterStyleAtom(v4, &v7);
        return v4;
      case 4005:
        unsigned int v4 = (EshContainer *)operator new(0x60uLL);
        PptTextDefaultParagraphStyleAtom::PptTextDefaultParagraphStyleAtom(v4, &v7);
        return v4;
      case 4006:
        unsigned int v4 = (EshContainer *)operator new(0x50uLL);
        PptTextGenericRulerAtom::PptTextGenericRulerAtom(v4, &v7);
        *(void *)unsigned int v4 = &unk_26EBEF2E8;
        uint64_t v6 = &unk_26EBEF390;
        goto LABEL_132;
      case 4007:
        unsigned int v4 = (EshContainer *)operator new(0x40uLL);
        PptTextBookmarkAtom::PptTextBookmarkAtom(v4, &v7);
        return v4;
      case 4008:
        unsigned int v4 = (EshContainer *)operator new(0x38uLL);
        PptTextBytesAtom::PptTextBytesAtom(v4, &v7);
        return v4;
      case 4009:
        unsigned int v4 = (EshContainer *)operator new(0x40uLL);
        PptTextDefaultSpecialInfoAtom::PptTextDefaultSpecialInfoAtom(v4, &v7);
        return v4;
      case 4010:
        unsigned int v4 = (EshContainer *)operator new(0x48uLL);
        PptTextBlockSpecialInfoAtom::PptTextBlockSpecialInfoAtom(v4, &v7);
        return v4;
      case 4011:
        unsigned int v4 = (EshContainer *)operator new(0x50uLL);
        PptTextGenericRulerAtom::PptTextGenericRulerAtom(v4, &v7);
        *(void *)unsigned int v4 = &unk_26EBEF3C8;
        uint64_t v6 = &unk_26EBEF470;
LABEL_132:
        *((void *)v4 + 4) = v6;
        return v4;
      case 4012:
        unsigned int v4 = (EshContainer *)operator new(0x48uLL);
        PptTextBlockStyling9Atom::PptTextBlockStyling9Atom(v4, &v7);
        return v4;
      case 4013:
        unsigned int v4 = (EshContainer *)operator new(0x48uLL);
        PptTextMasterStyle9Atom::PptTextMasterStyle9Atom((PptTextMasterStyle9Atom *)v4, &v7);
        return v4;
      case 4014:
      case 4019:
      case 4021:
      case 4025:
      case 4027:
      case 4028:
      case 4029:
      case 4030:
      case 4031:
      case 4032:
      case 4033:
      case 4036:
      case 4037:
      case 4039:
      case 4040:
      case 4041:
      case 4042:
      case 4043:
      case 4044:
      case 4046:
      case 4047:
      case 4052:
      case 4053:
      case 4054:
      case 4055:
      case 4057:
      case 4059:
      case 4060:
      case 4061:
      case 4062:
      case 4064:
      case 4068:
      case 4069:
      case 4070:
      case 4072:
      case 4073:
      case 4074:
      case 4075:
      case 4076:
      case 4077:
      case 4078:
      case 4079:
      case 4080:
      case 4082:
      case 4084:
      case 4092:
      case 4093:
      case 4094:
      case 4095:
      case 4096:
      case 4097:
      case 4098:
      case 4099:
      case 4101:
      case 4102:
      case 4103:
      case 4104:
      case 4105:
      case 4106:
      case 4107:
      case 4108:
      case 4109:
      case 4110:
      case 4111:
      case 4112:
      case 4116:
      case 4118:
      case 4119:
      case 4123:
        goto LABEL_178;
      case 4015:
        unsigned int v4 = (EshContainer *)operator new(0x38uLL);
        PptTextOutlineBlockKeyAtom::PptTextOutlineBlockKeyAtom(v4, &v7);
        return v4;
      case 4016:
        unsigned int v4 = (EshContainer *)operator new(0x40uLL);
        PptTextDefaultStyle9Atom::PptTextDefaultStyle9Atom(v4, &v7);
        return v4;
      case 4017:
        unsigned int v4 = (EshContainer *)operator new(0x48uLL);
        PptTextBlockStyling10Atom::PptTextBlockStyling10Atom(v4, &v7);
        return v4;
      case 4018:
        unsigned int v4 = (EshContainer *)operator new(0x48uLL);
        PptTextMasterStyle10Atom::PptTextMasterStyle10Atom(v4, &v7);
        return v4;
      case 4020:
        unsigned int v4 = (EshContainer *)operator new(0x40uLL);
        PptTextDefaultStyle10Atom::PptTextDefaultStyle10Atom(v4, &v7);
        return v4;
      case 4022:
        unsigned int v4 = (EshContainer *)operator new(0x48uLL);
        PptTextBlockStyling11Atom::PptTextBlockStyling11Atom(v4, &v7);
        return v4;
      case 4023:
        unsigned int v4 = (EshContainer *)operator new(0x50uLL);
        PptFontEntityAtom::PptFontEntityAtom(v4, &v7);
        return v4;
      case 4024:
        unsigned int v4 = (EshContainer *)operator new(0x38uLL);
        PptFontEmbedDataAtom::PptFontEmbedDataAtom(v4, &v7);
        return v4;
      case 4026:
        unsigned int v4 = (EshContainer *)operator new(0x48uLL);
        PptCString::PptCString(v4, &v7);
        return v4;
      case 4034:
        unsigned int v4 = (EshContainer *)operator new(0x38uLL);
        PptExOleObj::PptExOleObj(v4, &v7);
        return v4;
      case 4035:
        unsigned int v4 = (EshContainer *)operator new(0x48uLL);
        PptExOleObjAtom::PptExOleObjAtom(v4, &v7);
        return v4;
      case 4038:
        unsigned int v4 = (EshContainer *)operator new(0x70uLL);
        PptCorePictAtom::PptCorePictAtom(v4, &v7);
        return v4;
      case 4045:
        unsigned int v4 = (EshContainer *)operator new(0x38uLL);
        PptExEmbedAtom::PptExEmbedAtom(v4, &v7);
        return v4;
      case 4048:
        unsigned int v4 = (EshContainer *)operator new(0x50uLL);
        PptBookmarkEntityAtom::PptBookmarkEntityAtom(v4, &v7);
        return v4;
      case 4049:
        unsigned int v4 = (EshContainer *)operator new(0x38uLL);
        PptExLinkAtom::PptExLinkAtom(v4, &v7);
        return v4;
      case 4050:
        unsigned int v4 = (EshContainer *)operator new(0x38uLL);
        PptSrKinsokuAtom::PptSrKinsokuAtom(v4, &v7);
        return v4;
      case 4051:
        unsigned int v4 = (EshContainer *)operator new(0x38uLL);
        PptExHyperlinkAtom::PptExHyperlinkAtom(v4, &v7);
        return v4;
      case 4056:
        unsigned int v4 = (EshContainer *)operator new(0x38uLL);
        PptSlideNumberMCAtom::PptSlideNumberMCAtom(v4, &v7);
        return v4;
      case 4058:
        unsigned int v4 = (EshContainer *)operator new(0x40uLL);
        PptHeadersFootersAtom::PptHeadersFootersAtom((PptHeadersFootersAtom *)v4, &v7);
        return v4;
      case 4063:
        unsigned int v4 = (EshContainer *)operator new(0x38uLL);
        PptTxInteracInfoAtom::PptTxInteracInfoAtom((PptTxInteracInfoAtom *)v4, &v7);
        return v4;
      case 4065:
        unsigned int v4 = (EshContainer *)operator new(0x38uLL);
        PptEmFormatAtom::PptEmFormatAtom(v4, &v7);
        return v4;
      case 4066:
        unsigned int v4 = (EshContainer *)operator new(0x50uLL);
        PptCharFormatAtom::PptCharFormatAtom(v4, &v7);
        return v4;
      case 4067:
        unsigned int v4 = (EshContainer *)operator new(0x78uLL);
        PptParaFormatAtom::PptParaFormatAtom(v4, &v7);
        return v4;
      case 4071:
        unsigned int v4 = (EshContainer *)operator new(0x60uLL);
        PptRecolorInfoAtom::PptRecolorInfoAtom(v4, &v7);
        return v4;
      case 4081:
        unsigned int v4 = (EshContainer *)operator new(0x68uLL);
        PptEntranceAnimationInfoAtom::PptEntranceAnimationInfoAtom(v4, &v7);
        return v4;
      case 4083:
        unsigned int v4 = (EshContainer *)operator new(0x50uLL);
        PptInteractiveInfoAtom::PptInteractiveInfoAtom(v4, &v7);
        return v4;
      case 4085:
        unsigned int v4 = (EshContainer *)operator new(0x50uLL);
        PptUserEditAtom::PptUserEditAtom(v4, &v7);
        return v4;
      case 4086:
        unsigned int v4 = (EshContainer *)operator new(0x58uLL);
        PptCurrentUserAtom::PptCurrentUserAtom(v4, &v7);
        return v4;
      case 4087:
        unsigned int v4 = (EshContainer *)operator new(0x38uLL);
        PptDateTimeMCAtom::PptDateTimeMCAtom(v4, &v7);
        return v4;
      case 4088:
        unsigned int v4 = (EshContainer *)operator new(0x38uLL);
        PptGenericDateMCAtom::PptGenericDateMCAtom(v4, &v7);
        return v4;
      case 4089:
        unsigned int v4 = (EshContainer *)operator new(0x38uLL);
        PptHeaderMCAtom::PptHeaderMCAtom(v4, &v7);
        return v4;
      case 4090:
        unsigned int v4 = (EshContainer *)operator new(0x38uLL);
        PptFooterMCAtom::PptFooterMCAtom(v4, &v7);
        return v4;
      case 4091:
        unsigned int v4 = (EshContainer *)operator new(0x38uLL);
        PptExControlAtom::PptExControlAtom(v4, &v7);
        return v4;
      case 4100:
        unsigned int v4 = (EshContainer *)operator new(0x38uLL);
        PptExMediaAtom::PptExMediaAtom(v4, &v7);
        return v4;
      case 4113:
        unsigned int v4 = (EshContainer *)operator new(0x68uLL);
        PptExOleObjStg::PptExOleObjStg(v4, &v7);
        return v4;
      case 4114:
        unsigned int v4 = (EshContainer *)operator new(0x38uLL);
        PptExCDAudioAtom::PptExCDAudioAtom(v4, &v7);
        return v4;
      case 4115:
        unsigned int v4 = (EshContainer *)operator new(0x38uLL);
        PptExWaveAudioEmbeddedAtom::PptExWaveAudioEmbeddedAtom(v4, &v7);
        return v4;
      case 4117:
        unsigned int v4 = (EshContainer *)operator new(0xB8uLL);
        PptRTFDateTimeMCAtom::PptRTFDateTimeMCAtom(v4, &v7);
        return v4;
      case 4120:
        unsigned int v4 = (EshContainer *)operator new(0x38uLL);
        PptExHyperlinkExtraAtom::PptExHyperlinkExtraAtom(v4, &v7);
        return v4;
      case 4121:
        unsigned int v4 = (EshContainer *)operator new(0x48uLL);
        PptTextBlockStylingMac11Atom::PptTextBlockStylingMac11Atom(v4, &v7);
        return v4;
      case 4122:
        unsigned int v4 = (EshContainer *)operator new(0x50uLL);
        PptTextMasterStyleMac11Atom::PptTextMasterStyleMac11Atom(v4, &v7);
        return v4;
      case 4124:
        unsigned int v4 = (EshContainer *)operator new(0x40uLL);
        PptTextDefaultStyleMac11Atom::PptTextDefaultStyleMac11Atom(v4, &v7);
        return v4;
      default:
        if (v3 == 6000)
        {
          unsigned int v4 = (EshContainer *)operator new(0x40uLL);
          PptPrintOptions::PptPrintOptions(v4, &v7);
        }
        else
        {
          if (v3 != 6002) {
            goto LABEL_178;
          }
          unsigned int v4 = (EshContainer *)operator new(0x68uLL);
          PptPersistPtrIncrAtom::PptPersistPtrIncrAtom(v4, &v7);
        }
        break;
    }
  }
  return v4;
}

void sub_238A85398(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void EshContainer::EshContainer(EshContainer *this, unsigned __int16 a2)
{
  EshRecord::EshRecord(this, a2, 0xFu);
  *char v2 = &unk_26EBD7040;
  v2[5] = 0;
  v2[6] = 0;
  v2[4] = 0;
}

void EshRecord::EshRecord(EshRecord *this, unsigned __int16 a2, unsigned __int8 a3)
{
  EshObject::EshObject((EshObject *)this, a2);
  *(void *)uint64_t v5 = &unk_26EBD7BE8;
  EshHeader::EshHeader((EshHeader *)(v5 + 12), a3, 0, a2, 0, 0);
}

void EshHeader::EshHeader(EshHeader *this, unsigned __int8 a2, signed __int16 a3, unsigned __int16 a4, int a5, unsigned int a6)
{
  this->int var0 = a5;
  this->var1 = a6;
  this->uint64_t var2 = a3;
  this->int var3 = a4;
  this->var4 = a2;
}

EshObjectFactory *EshObjectFactory::verifyTypeAndVersionOfObject(EshObjectFactory *this, EshObject *a2, int a3)
{
  if (this)
  {
    int v4 = (int)a2;
    uint64_t v5 = this;
    this = (EshObjectFactory *)(*((uint64_t (**)(EshObjectFactory *))this->var0 + 4))(this);
    if (this)
    {
      if (EshRecord::getVersion((EshRecord *)v5) != a3
        || (this = (EshObjectFactory *)EshRecord::getRecordType((EshRecord *)v5), this != v4))
      {
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = 7005;
      }
    }
  }
  return this;
}

uint64_t EshRecord::isRecord(EshRecord *this)
{
  return 1;
}

uint64_t EshRecord::getVersion(EshRecord *this)
{
  return *((unsigned __int8 *)this + 24);
}

uint64_t EshRecord::getRecordType(EshRecord *this)
{
  return *((unsigned __int16 *)this + 11);
}

uint64_t PptBinaryReader::read(PptBinaryReader *this, EshObject *a2)
{
  if ((*((unsigned int (**)(EshObject *))a2->var0 + 11))(a2))
  {
    int v4 = *(uint64_t (**)(PptBinaryReader *, EshObject *))(*(void *)this + 248);
    return v4(this, a2);
  }
  else
  {
    uint64_t v6 = *(void *)this;
    if (a2->var1 - 2 > 0x1A)
    {
      EshHeader v7 = *(uint64_t (**)(PptBinaryReader *, EshObject *))(v6 + 256);
      uint64_t v8 = this;
      int v9 = a2;
    }
    else
    {
      EshHeader v7 = *(uint64_t (**)(PptBinaryReader *, EshObject *))(v6 + 264);
      uint64_t v8 = this;
      int v9 = a2;
    }
    return v7(v8, v9);
  }
}

uint64_t EshObject::isContainer(EshObject *this)
{
  return (*((unsigned int (**)(EshObject *))this->var0 + 10))(this) ^ 1;
}

uint64_t EshContainer::isAtom(EshContainer *this)
{
  return 0;
}

uint64_t PptBinaryReader::readContainer(PptBinaryReader *this, EshObject *a2)
{
  PptBinaryReader::readRecord(this, a2);
  uint64_t result = (*((uint64_t (**)(EshObject *))a2->var0 + 5))(a2);
  if (result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = (const EshHeader *)(*((uint64_t (**)(EshObject *, uint64_t))a2->var0 + 13))(a2, v5);
      if (PptBinaryReader::isHeaderSkipped(this, v6))
      {
        EshContainer::removeChild((EshContainer *)a2, v5);
      }
      else if ((unsigned __int16)(v6->var3 + 4096) > 0x122u {
             || EshObject::isEscher(a2)
      }
             || a2->var1 - 2 < 0x1B)
      {
        uint64_t v5 = (v5 + 1);
      }
      else
      {
        (*((void (**)(EshObject *, uint64_t, uint64_t))a2->var0 + 16))(a2, v5, 1);
      }
      uint64_t result = (*((uint64_t (**)(EshObject *))a2->var0 + 5))(a2);
    }
    while (v5 < result);
  }
  return result;
}

uint64_t PptBinaryReader::readRecord(PptBinaryReader *this, EshObject *a2)
{
  PptBinaryReader::checkStarted(this);
  int var0 = a2->var0;
  if ((unsigned __int16)(((uint64_t (*)(EshObject *))var0[2])(a2) + 4096) <= 0x122u)
  {
    if (*((_DWORD *)this + 40) == 2 && !EshBinaryReader::atEnd(*((EshBinaryReader **)this + 21)))
    {
      uint64_t v12 = *((void *)this + 21);
      goto LABEL_18;
    }
    uint64_t v6 = (EshBinaryReader *)*((void *)this + 22);
    if (v6)
    {
      if (!EshBinaryReader::atEnd(v6)) {
        goto LABEL_13;
      }
    }
  }
  if (PptBinaryReader::isBadHeader(this) && *((void *)this + 18) && *((_DWORD *)this + 40)) {
    *((_DWORD *)this + 40) = 0;
  }
  int v7 = (*((uint64_t (**)(EshObject *))a2->var0 + 2))(a2);
  PptBinaryReader::skipTo(this, v7);
  double v8 = EshRecord::setHeader(v5, *((const EshHeader **)this + 25));
  if (!*((_DWORD *)this + 40))
  {
LABEL_13:
    uint64_t v12 = *((void *)this + 22);
LABEL_18:
    (*(void (**)(uint64_t, EshObject *))(*(void *)v12 + 40))(v12, a2);
    goto LABEL_29;
  }
  uint64_t v9 = *((void *)this + 25);
  if ((unsigned __int16)(*(_WORD *)(v9 + 10) + 4096) > 0x122u)
  {
    (*(void (**)(EshRecord *, void, double))(*(void *)v5 + 112))(v5, *((void *)this + 23), v8);
    int v13 = (PptPersistDir *)*((void *)this + 24);
    unsigned int Offset = EshRecord::getOffset(v5);
    RefByunsigned int Offset = PptPersistDir::getRefByOffset(v13, Offset);
    if (RefByOffset != -1)
    {
      uint64_t v16 = RefByOffset;
      if ((*((unsigned int (**)(EshObject *))a2->var0 + 10))(a2))
      {
        unsigned int v18 = v17 + 32;
      }
      else
      {
        unsigned int v18 = v17 + 56;
      }
      if (v17) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      (*(void (**)(char *, uint64_t))(*(void *)v19 + 24))(v19, v16);
    }
    char v11 = EshRecord::getRecordType(v5) == 5003
       && (*(unsigned int (**)(EshRecord *))(*(void *)v5 + 40))(v5) == 0;
    unsigned int v10 = this;
  }
  else
  {
    (*(void (**)(void, void, void, double))(**((void **)this + 19) + 16))(*((void *)this + 19), *(unsigned int *)(v9 + 4), 0, v8);
    (*(void (**)(void, void))(**((void **)this + 21) + 16))(*((void *)this + 21), *((void *)this + 19));
    (*(void (**)(void, EshObject *))(**((void **)this + 21) + 40))(*((void *)this + 21), a2);
    unsigned int v10 = this;
    char v11 = 1;
  }
  PptBinaryReader::goToNextHeader(v10, v11);
LABEL_29:
  *((_DWORD *)this + 58) = EshRecord::getOffset(v5);
  uint64_t result = EshRecord::getDataLength(v5);
  *((_DWORD *)this + 59) = result;
  return result;
}

uint64_t EshObject::getType(EshObject *this)
{
  return this->var1;
}

BOOL PptBinaryReader::skipTo(PptBinaryReader *this, int a2)
{
  while (!PptBinaryReader::isBadHeader(this))
  {
    int v4 = (const EshHeader *)*((void *)this + 25);
    if (v4->var3 == a2 && !PptBinaryReader::isHeaderSkipped(this, v4)) {
      break;
    }
    PptBinaryReader::goToNextHeader(this, 0);
  }
  BOOL result = PptBinaryReader::isBadHeader(this);
  if (result)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 7000;
  }
  return result;
}

double EshRecord::setHeader(EshRecord *this, const EshHeader *a2)
{
  return EshHeader::operator=((uint64_t)this + 12, (uint64_t)a2);
}

uint64_t EshContainer::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, EshContainer *a2)
{
  int v4 = (char *)a2 + 12;
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  EshHeader::operator=((uint64_t)v15, (uint64_t)v4);
  int v7 = v15[0];
  int v6 = v15[1];
  EshContainer::removeChildren((uint64_t)a2);
  int v8 = v16;
  uint64_t v9 = (EshHeader *)operator new(0x10uLL);
  EshHeader::makeDefault(v9);
  uint64_t v10 = (v6 + v7 + 8);
  while (v5 < v10)
  {
    PptParserVisitor::parse(this, v9, v5, *((SsrwOOStream **)this + 1));
    EshContainer::addChild(a2, v9);
    BOOL v11 = (int)v5 + v9->var0 + 8 >= v5;
    uint64_t v5 = (v5 + v9->var0 + 8);
    if (!v11)
    {
      if (v8 != 5003)
      {
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = 7013;
      }
      goto LABEL_8;
    }
  }
  if (v5 <= v10) {
    goto LABEL_9;
  }
  if (v8 != 5003)
  {
    unsigned int v14 = __cxa_allocate_exception(4uLL);
    _DWORD *v14 = 7013;
  }
LABEL_8:
  EshContainer::removeChildren((uint64_t)a2);
LABEL_9:
  (*(void (**)(void, uint64_t, void))(**((void **)this + 1) + 16))(*((void *)this + 1), v10, 0);
  PptParserVisitor::endRead(this, a2);
  if (v9) {
    MEMORY[0x23EC997B0](v9, 0x1000C408B6DE1C6);
  }
  return 1;
}

void sub_238A86080(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C408B6DE1C6);
  _Unwind_Resume(a1);
}

uint64_t EshContainer::removeChildren(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 32);
  uint64_t v3 = *(void *)(this + 40);
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void *)(v2 + 8 * v4);
      if (this)
      {
        this = MEMORY[0x23EC997B0](this, 0x1000C408B6DE1C6);
        uint64_t v2 = *(void *)(v1 + 32);
        uint64_t v3 = *(void *)(v1 + 40);
      }
      if (v4 >= ((unint64_t)(v3 - v2) >> 3)) {
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      }
      *(void *)(v2 + 8 * v4++) = 0;
      uint64_t v2 = *(void *)(v1 + 32);
      uint64_t v3 = *(void *)(v1 + 40);
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  *(void *)(v1 + 40) = v2;
  return this;
}

void EshContainer::addChild(EshContainer *this, const EshHeader *a2)
{
  unint64_t v4 = operator new(0x10uLL);
  EshHeader::operator=((uint64_t)v4, (uint64_t)a2);
  unint64_t v5 = *((void *)this + 6);
  int v6 = (void *)*((void *)this + 5);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *((void *)this + 4);
    unint64_t v9 = (unint64_t)v6 - v8;
    unint64_t v10 = (v5 - v8) >> 3;
    unsigned int v11 = 2 * v10;
    if (2 * (int)v10 <= (v9 >> 3) + 1) {
      unsigned int v11 = (v9 >> 3) + 1;
    }
    if (v10 >= 0x7FFFFFFF) {
      unint64_t v12 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12)
    {
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 48, v12);
      uint64_t v15 = v14;
    }
    else
    {
      int v13 = 0;
      uint64_t v15 = 0;
    }
    unsigned __int16 v16 = &v13[v9 & 0x7FFFFFFF8];
    uint64_t v17 = &v13[8 * v15];
    *(void *)unsigned __int16 v16 = v4;
    int v7 = v16 + 8;
    uint64_t v19 = (char *)*((void *)this + 4);
    unsigned int v18 = (char *)*((void *)this + 5);
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      unsigned int v18 = (char *)*((void *)this + 4);
    }
    *((void *)this + 4) = v16;
    *((void *)this + 5) = v7;
    *((void *)this + 6) = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    void *v6 = v4;
    int v7 = v6 + 1;
  }
  *((void *)this + 5) = v7;
}

void sub_238A86250(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x23EC997B0](v1, 0x1000C408B6DE1C6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EshRecord::getOffset(EshRecord *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t EshContainer::getNumChildren(EshContainer *this)
{
  return (*((void *)this + 5) - *((void *)this + 4)) >> 3;
}

uint64_t EshContainer::getChildHeader(EshContainer *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (((unint64_t)(*((void *)this + 5) - v2) >> 3) <= a2) {
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  return *(void *)(v2 + 8 * a2);
}

void sub_238A86348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshContainer::getChildType(EshContainer *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (((unint64_t)(*((void *)this + 5) - v2) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  return *(unsigned __int16 *)(*(void *)(v2 + 8 * a2) + 10);
}

uint64_t EshContainer::getChildVersion(EshContainer *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (((unint64_t)(*((void *)this + 5) - v2) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  return *(unsigned __int8 *)(*(void *)(v2 + 8 * a2) + 12);
}

void PptDocumentAtom::PptDocumentAtom(PptDocumentAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE9C20;
  *(void *)(v2 + 32) = &unk_26EBE9CC8;
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 48) = 0;
  *(_WORD *)(v2 + 72) = 1;
  *(_DWORD *)(v2 + 76) = 0;
  *(_WORD *)(v2 + 80) = 0;
  *(unsigned char *)(v2 + 82) = 1;
}

uint64_t EshObject::isAtom(EshObject *this)
{
  return 1;
}

void PptBinaryReader::readAtom(PptBinaryReader *this, EshObject *a2)
{
  PptBinaryReader::readRecord(this, a2);
  if ((*((unsigned int (**)(EshObject *))a2->var0 + 2))(a2) == 61447 && HIDWORD(a2[3].var0))
  {
    uint64_t v4 = *((void *)this + 18);
    if (!v4)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 1004;
    }
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    EshParserVisitor::EshParserVisitor((EshParserVisitor *)v18, *((SsrwOOStream **)this + 18), *((const EshObjectFactory **)this + 2));
    EshHeader::makeDefault((EshHeader *)v15);
    EshParserVisitor::visit((EshParserVisitor *)v18, (EshHeader *)v15, *(unsigned int *)&a2[3].var1);
    if (!EshBlip::isBlipRecordType((EshBlip *)v16))
    {
      unsigned int v14 = __cxa_allocate_exception(4uLL);
      _DWORD *v14 = 7005;
    }
    int v6 = (const void *)(*(uint64_t (**)(void, void, void))(**((void **)this + 2) + 16))(*((void *)this + 2), v16, v17);
    if (!v6
    {
      unint64_t v12 = __cxa_allocate_exception(4uLL);
      _DWORD *v12 = 7005;
    }
    double v11 = EshRecord::setHeader(v8, (const EshHeader *)v15);
    (*(void (**)(EshRecord *, unsigned char *, double))(*(void *)v8 + 112))(v8, v18, v11);
    a2[2].int var0 = (void **)v8;
    (*(void (**)(void, uint64_t, void))(**((void **)this + 18) + 16))(*((void *)this + 18), v5, 0);
    EshParserVisitor::~EshParserVisitor((EshParserVisitor *)v18);
  }
}

void sub_238A866D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  EshParserVisitor::~EshParserVisitor((EshParserVisitor *)va);
  _Unwind_Resume(a1);
}

uint64_t PptDocumentAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptDocumentAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 8) {
    goto LABEL_12;
  }
  *((_DWORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 15) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 16) {
    goto LABEL_12;
  }
  PptSkipVisitor::skipUnknownBytes(*((PptSkipVisitor **)this + 3), a2, 8u);
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 24
    || (*((_DWORD *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 28)
    || (*((_DWORD *)a2 + 17) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 32)
    || (*((_WORD *)a2 + 36) = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 34)
    || (*((_DWORD *)a2 + 19) = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 36)
    || (*((unsigned char *)a2 + 80) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 37)
    || (*((unsigned char *)a2 + 81) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 38)
    || (PptSkipVisitor::skipKnownBytes(*((unsigned char **)this + 3), a2, 1u),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 39))
  {
LABEL_12:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  *((unsigned char *)a2 + 82) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptSrKinsokuAtom::PptSrKinsokuAtom(PptSrKinsokuAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBED930;
  *(void *)(v2 + 32) = &unk_26EBED9D8;
}

uint64_t PptSrKinsokuAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptSrKinsokuAtom *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptFontEntityAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, CsString *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), a2->var2 + 8, 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  unsigned int v9 = 32;
  CsString::reserve(a2 + 2, 32);
  a2[2].uint64_t var2 = 0;
  bzero(a2[2].var1, 2 * a2[2].var3);
  (*(void (**)(void, unsigned int *, unsigned __int16 *))(**((void **)this + 1) + 136))(*((void *)this + 1), &v9, a2[2].var1);
  CsString::setCount(a2 + 2, v9);
  var1 = (unsigned __int16 *)&unk_238EF0ED8;
  if (a2[2].var1) {
    var1 = a2[2].var1;
  }
  unsigned int v6 = v9;
  if (!var1[v9 - 1])
  {
    CsString::setCount(a2 + 2, v9 - 1);
    unsigned int v6 = v9;
  }
  PptSkipVisitor::skipKnownBytes(*((unsigned char **)this + 3), (const EshRecord *)a2, 64 - 2 * v6);
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 64
    || (BYTE1(a2[3].var0) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 65)
    || (PptSkipVisitor::skipUnknownBytes(*((PptSkipVisitor **)this + 3), (const EshRecord *)a2, 2u),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 67))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  LOBYTE(a2[3].var0) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  PptParserVisitor::endRead(this, (EshRecord *)a2);
  return 1;
}

{
  int DataLength;
  int v5;
  unsigned int v7;

  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), a2->var2 + 8, 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int DataLength = EshRecord::getDataLength((EshRecord *)a2);
  if (DataLength >= 0) {
    uint64_t v5 = DataLength;
  }
  else {
    uint64_t v5 = DataLength + 1;
  }
  int v7 = v5 >> 1;
  CsString::reserve(a2 + 2, (v5 >> 1) + 1);
  a2[2].uint64_t var2 = 0;
  bzero(a2[2].var1, 2 * a2[2].var3);
  (*(void (**)(void, unsigned int *, unsigned __int16 *))(**((void **)this + 1) + 136))(*((void *)this + 1), &v7, a2[2].var1);
  CsString::setCount(a2 + 2, v7);
  PptParserVisitor::endRead(this, (EshRecord *)a2);
  return 1;
}

{
  int DataLength;
  int v5;
  int v6;
  uint64_t v7;
  __int16 *var1;
  uint64_t v9;
  int v10;
  __int16 v11;

  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), a2->var2 + 8, 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int DataLength = EshRecord::getDataLength((EshRecord *)a2);
  uint64_t v5 = DataLength;
  if (DataLength >= 0) {
    unsigned int v6 = DataLength;
  }
  else {
    unsigned int v6 = DataLength + 1;
  }
  int v7 = (v6 >> 1);
  CsString::reserve(a2 + 2, v7 + 1);
  a2[2].uint64_t var2 = 0;
  bzero(a2[2].var1, 2 * a2[2].var3);
  if (v5 >= 2)
  {
    var1 = (__int16 *)a2[2].var1;
    unsigned int v9 = v7;
    do
    {
      unint64_t v10 = (*(uint64_t (**)(void))(**((void **)this + 1) + 128))(*((void *)this + 1));
      if (v10) {
        double v11 = v10;
      }
      else {
        double v11 = 32;
      }
      *var1++ = v11;
      --v9;
    }
    while (v9);
  }
  CsString::setCount(a2 + 2, v7);
  PptParserVisitor::endRead(this, (EshRecord *)a2);
  *((_DWORD *)this + 16) = v7;
  return 1;
}

uint64_t SsrwOOStgStream::readString16(uint64_t this, int *a2, unsigned __int16 *a3)
{
  int v6 = *a2;
  if (v6)
  {
    this = readString16(*(void *)(this + 192), &v6, a3);
    if (this)
    {
      int v4 = this;
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = v4;
    }
    *a2 = v6;
  }
  return this;
}

uint64_t readString16(uint64_t a1, int *a2, _WORD *a3)
{
  uint64_t result = 6;
  if (a1)
  {
    if (a2)
    {
      int v6 = a3;
      if (a3)
      {
        if (*a2 < 1)
        {
          uint64_t result = 0;
          int v8 = 0;
        }
        else
        {
          int v7 = 1;
          do
          {
            int v8 = v7;
            uint64_t result = readUInt16(a1, v6);
            if (!*v6++) {
              break;
            }
            int v7 = v8 + 1;
          }
          while (v8 < *a2 && result == 0);
        }
        *a2 = v8;
      }
    }
  }
  return result;
}

_WORD *_ChWcsncpy(_WORD *result, const unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v3 = result;
  if (a3)
  {
    uint64_t v3 = result;
    do
    {
      if (!*a2) {
        break;
      }
      *v3++ = *a2++;
      --a3;
    }
    while (a3);
  }
  *uint64_t v3 = 0;
  return result;
}

void PptCharProperty::PptCharProperty(PptCharProperty *this)
{
  *(_DWORD *)&this->var0 &= 0xFFE00000;
  *((_WORD *)this + 2) &= 0x8000u;
  *(_DWORD *)&this->var17 = 16711680;
  *(void *)&this->var13 = 0;
  *(void *)&this->var18.var0.var1 = 0;
  *(int *)((char *)&this->var18.var1 + 2) = 0;
}

uint64_t PptTextDefaultCharacterStyleAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextDefaultCharacterStyleAtom *a2)
{
  return 1;
}

void PptParaProperty::PptParaProperty(PptParaProperty *this)
{
  char v1 = *((unsigned char *)this + 2);
  *(_WORD *)this = 0;
  *((unsigned char *)this + 2) = v1 & 0xE0;
  *(_WORD *)((char *)this + 3) &= 0xC000u;
  *(void *)((char *)this + 6) = 0xFF000000000000;
  *((void *)this + 5) = 0;
  *(void *)((char *)this + 22) = 0;
  *(void *)((char *)this + 14) = 0;
  *(void *)((char *)this + 28) = 0;
}

uint64_t PptTextDefaultParagraphStyleAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextDefaultParagraphStyleAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  Endunsigned int Offset = EshRecord::getEndOffset(a2);
  PptSkipVisitor::skipKnownBytes(*((unsigned char **)this + 3), a2, 2u);
  PptParserVisitor::parseParaProperty(this, (PptTextDefaultParagraphStyleAtom *)((char *)a2 + 48), EndOffset);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptSpecialInfo::PptSpecialInfo(PptSpecialInfo *this)
{
  char v1 = *((unsigned char *)&this->var0 + 1) & 0xF8;
  *(unsigned char *)&this->var0 &= 0xF8u;
  *((unsigned char *)&this->var0 + 1) = v1;
  this->var1 = 0;
  this->uint64_t var2 = 0;
}

uint64_t PptTextDefaultSpecialInfoAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptSpecialInfo *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*(_DWORD *)&a2[1].var0 + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  Endunsigned int Offset = EshRecord::getEndOffset((EshRecord *)a2);
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) + 4 > EndOffset)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  char v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  PptParserVisitor::parseSpecialInfo(this, a2 + 3, v5, EndOffset);
  PptParserVisitor::endRead(this, (EshRecord *)a2);
  return 1;
}

void PptTextMasterStyleAtom::PptTextMasterStyleAtom(PptTextMasterStyleAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom((EshAtom *)this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEE8C0;
  *(void *)(v2 + 32) = &unk_26EBEE968;
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 48) = 0;
}

uint64_t PptTextMasterStyleAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextMasterStyleAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  EshRecord::getEndOffset((EshRecord *)a2);
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1));
  int Instance = EshRecord::getInstance((EshRecord *)a2);
  PptTextHeaderAtom::isDerivedType(Instance);
  if (v4) {
    PptTextMasterStyleAtom::addLevel(a2);
  }
  PptParserVisitor::endRead(this, (EshRecord *)a2);
  return 1;
}

uint64_t EshRecord::getInstance(EshRecord *this)
{
  return *((__int16 *)this + 10);
}

BOOL PptTextHeaderAtom::isDerivedType(int a1)
{
  return (a1 - 5) < 4;
}

void PptTextMasterStyleAtom::addLevel(PptTextMasterStyleAtom *this)
{
}

void sub_238A87AB0(_Unwind_Exception *a1)
{
  PptParaProperty::~PptParaProperty(v1);
  MEMORY[0x23EC997B0](v1, 0x1020C40E55D8E32);
  _Unwind_Resume(a1);
}

PptColor *PptColor::setColor(PptColor *this, unsigned int a2)
{
  this->var1 = HIBYTE(a2);
  this->var0.int var3 = BYTE2(a2);
  this->var0.uint64_t var2 = BYTE1(a2);
  this->var0.var1 = a2;
  return this;
}

BOOL EshObject::isEscher(EshObject *this)
{
  return (unsigned __int16)(this->var1 + 4096) < 0x123u;
}

uint64_t EshContainer::setChildType(uint64_t this, unsigned int a2, __int16 a3)
{
  uint64_t v3 = *(void *)(this + 32);
  if (((unint64_t)(*(void *)(this + 40) - v3) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  *(_WORD *)(*(void *)(v3 + 8 * a2) + 10) = a3;
  return this;
}

uint64_t EshObject::isRecord(EshObject *this)
{
  return 0;
}

uint64_t EshBinaryReader::start(EshBinaryReader *this, SsrwOOStream *a2)
{
  (*(void (**)(EshBinaryReader *))(*(void *)this + 24))(this);
  if (*((void *)this + 1))
  {
    exception = __cxa_allocate_exception(4uLL);
    int v10 = 7011;
    goto LABEL_12;
  }
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    int v10 = 7001;
LABEL_12:
    _DWORD *exception = v10;
  }
  if ((*((unsigned int (**)(SsrwOOStream *))a2->var0 + 22))(a2) <= 7) {
    goto LABEL_9;
  }
  *((void *)this + 1) = a2;
  int v4 = (EshParserVisitor *)operator new(0x40uLL);
  EshParserVisitor::EshParserVisitor(v4, a2, *((const EshObjectFactory **)this + 3));
  *((void *)this + 2) = v4;
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)this + 8) = v5;
  *((_DWORD *)this + 18) = v5;
  EshHeader::makeDefault((EshHeader *)((char *)this + 76));
  *((_DWORD *)this + 20) = -1;
  uint64_t v6 = (*(uint64_t (**)(EshBinaryReader *))(*(void *)this + 96))(this);
  *((_DWORD *)this + 9) = *(_DWORD *)(v6 + 4) + *(_DWORD *)v6 + 8;
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 176))(*((void *)this + 1)) < *(_DWORD *)v6
    || (unsigned __int16)(*(_WORD *)(v6 + 10) + 4096) >= 0x123u)
  {
LABEL_9:
    exception = __cxa_allocate_exception(4uLL);
    int v10 = 7009;
    goto LABEL_12;
  }
  *((_DWORD *)this + 9) = *(_DWORD *)v6 + *(_DWORD *)(v6 + 4) + 8;
  int v7 = *(uint64_t (**)(void))(**((void **)this + 1) + 16);
  return v7();
}

void sub_238A87D78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void EshBinaryReader::finish(EshBinaryReader *this)
{
  *((void *)this + 1) = 0;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  EshHeader::makeDefault(&v3);
  EshHeader::operator=((uint64_t)this + 76, (uint64_t)&v3);
  *((void *)this + 4) = 0;
  if (*((_DWORD *)this + 14)) {
    *((_DWORD *)this + 14) = 0;
  }
}

EshHeader *EshBinaryReader::getNextHeader(EshParserVisitor **this)
{
  char v1 = (EshHeader *)((char *)this + 76);
  uint64_t v2 = *((unsigned int *)this + 18);
  if (*((_DWORD *)this + 20) != v2) {
    EshParserVisitor::visit(this[2], v1, v2);
  }
  return v1;
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshHeader *a2, uint64_t a3)
{
  if (a3 == -1)
  {
    unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
  }
  else
  {
    unsigned int v5 = a3;
    if ((a3 & 0x80000000) != 0) {
      goto LABEL_8;
    }
    (*(void (**)(void, uint64_t, void))(**((void **)this + 3) + 16))(*((void *)this + 3), a3, 0);
  }
  unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 3) + 80))(*((void *)this + 3));
  a2->var4 = v6 & 0xF;
  a2->uint64_t var2 = v6 >> 4;
  int v7 = (*(uint64_t (**)(void))(**((void **)this + 3) + 80))(*((void *)this + 3));
  if (v7 == 1
    || (a2->int var3 = v7,
        unsigned int v8 = (*(uint64_t (**)(void))(**((void **)this + 3) + 96))(*((void *)this + 3)),
        v8 >= 0x10000001))
  {
LABEL_8:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 7005;
  }
  a2->int var0 = v8;
  a2->var1 = v5;
  return 1;
}

void EshBinaryReader::read(EshBinaryReader *this, EshRoot *a2)
{
  EshBinaryReader::checkStarted((uint64_t)this);
  if (*((_DWORD *)this + 18) == *((_DWORD *)this + 8))
  {
    int v4 = (EshHeader *)operator new(0x10uLL);
    EshHeader::makeDefault(v4);
    (*(void (**)(EshBinaryReader *, void, EshHeader *))(*(void *)this + 88))(this, *((unsigned int *)this + 8), v4);
    unsigned int v5 = *(void (**)(EshRoot *, void))(*(void *)a2 + 104);
    if (v4->var0)
    {
      v5(a2, 0);
      EshRoot::appendChild(a2, v4);
    }
    else
    {
      v5(a2, 0);
    }
    JUMPOUT(0x23EC997B0);
  }
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = 7010;
}

void sub_238A880D8(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x23EC997B0](v1, 0x1000C408B6DE1C6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EshBinaryReader::checkStarted(uint64_t this)
{
  if (!*(void *)(this + 8) || !*(void *)(this + 16))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
  return this;
}

uint64_t EshBinaryReader::getObjectHeader(EshParserVisitor **this, uint64_t a2, EshHeader *a3)
{
  uint64_t result = EshParserVisitor::visit(this[2], a3, a2);
  if (!*((unsigned char *)this + 92))
  {
    if (*((_DWORD *)this + 14))
    {
      uint64_t result = ChStack<EshHeader>::top((uint64_t)(this + 5));
      unsigned int v6 = *(_DWORD *)(result + 4) + *(_DWORD *)result + 8;
      unsigned int v7 = a3->var1 + a3->var0 + 8;
      BOOL v8 = v6 >= v7;
      unsigned int v9 = v6 - v7;
      if (!v8 || (v9 ? (BOOL v10 = v9 > 7) : (BOOL v10 = 1), !v10))
      {
LABEL_39:
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = 7013;
      }
      int var3 = a3->var3;
      if (*((_DWORD *)this + 14))
      {
        uint64_t result = ChStack<EshHeader>::top((uint64_t)(this + 5));
        int v12 = *(unsigned __int16 *)(result + 10);
LABEL_14:
        if (var3 != 61444)
        {
          if (var3 != 61451) {
            return result;
          }
          if (v12 != 61440) {
            goto LABEL_39;
          }
          unsigned int v13 = a3->var1 + a3->var0 + 8;
          uint64_t result = ChStack<EshHeader>::top((uint64_t)(this + 5));
          if (v13 < *(_DWORD *)(result + 4) + *(_DWORD *)result + 8)
          {
            unsigned int v14 = (EshHeader *)operator new(0x10uLL);
            EshHeader::makeDefault(v14);
            EshParserVisitor::visit(this[2], v14, a3->var1 + a3->var0 + 8);
            if ((__int16)v14->var3 == -3806) {
              a3->var0 += v14->var0 + 8;
            }
            uint64_t result = MEMORY[0x23EC997B0](v14, 0x1000C408B6DE1C6);
          }
          unsigned __int16 v15 = 4;
          goto LABEL_37;
        }
        if (v12 == 2) {
          goto LABEL_32;
        }
        if (v12 != 61443)
        {
          if (v12 != 61442) {
            goto LABEL_39;
          }
          unsigned __int16 v16 = (EshContainer *)operator new(0x38uLL);
          EshContainer::EshContainer(v16, 0xF004u);
          (*((void (**)(EshParserVisitor **, EshContainer *, EshHeader *))*this + 13))(this, v16, a3);
          HeaderOfint Type = EshContainer::getHeaderOfType(v16, 61450);
          if (!HeaderOfType)
          {
            __n128 v21 = __cxa_allocate_exception(4uLL);
            *__n128 v21 = 7013;
          }
          unsigned int v18 = (EshSp *)operator new(0x30uLL);
          EshSp::EshSp(v18);
          (*((void (**)(EshParserVisitor **, EshSp *, uint64_t))*this + 13))(this, v18, HeaderOfType);
          if (*((unsigned char *)v18 + 42))
          {
            unsigned __int16 v15 = 12;
          }
          else
          {
            if (!*((unsigned char *)v18 + 35))
            {
              BOOL v22 = __cxa_allocate_exception(4uLL);
              *BOOL v22 = 7013;
            }
            unsigned __int16 v15 = 7;
          }
          uint64_t result = (*(uint64_t (**)(EshSp *))(*(void *)v18 + 8))(v18);
          if (v16) {
            uint64_t result = (*(uint64_t (**)(EshContainer *))(*(void *)v16 + 8))(v16);
          }
          goto LABEL_37;
        }
        unsigned int var1 = a3->var1;
        uint64_t result = ChStack<EshHeader>::top((uint64_t)(this + 5));
        if (var1 != *(_DWORD *)(result + 4) + 8)
        {
LABEL_32:
          unsigned __int16 v15 = 7;
        }
        else if (*((_DWORD *)this + 14) <= 2u)
        {
          unsigned __int16 v15 = 5;
        }
        else
        {
          unsigned __int16 v15 = 6;
        }
LABEL_37:
        a3->int var3 = v15;
        a3->var4 = 0;
        a3->uint64_t var2 = 0;
        return result;
      }
    }
    else
    {
      int var3 = a3->var3;
    }
    int v12 = 2;
    goto LABEL_14;
  }
  return result;
}

void sub_238A8849C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(a1);
}

EshDgg *EshObjectFactory::createRecord(EshObjectFactory *this, __int16 a2, int a3)
{
  if (a3 == 15)
  {
    int v4 = (EshContainer *)operator new(0x38uLL);
    EshContainer::EshContainer(v4, a2);
    return v4;
  }
  else
  {
    return EshObjectFactory::createAtom(this, a2, a3);
  }
}

void sub_238A885CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL EshBinaryReader::atEnd(EshBinaryReader *this)
{
  return *((_DWORD *)this + 18) == *((_DWORD *)this + 9);
}

void EshBinaryReader::read(EshBinaryReader *this, EshObject *a2)
{
  EshBinaryReader::checkStarted((uint64_t)this);
  int v4 = (*((uint64_t (**)(EshObject *))a2->var0 + 2))(a2);
  unsigned int v5 = (EshHeader *)operator new(0x10uLL);
  EshHeader::makeDefault(v5);
  EshBinaryReader::findObjectHeader(this, v5, v4);
  if (*((_DWORD *)this + 18) != *((_DWORD *)this + 9))
  {
    if ((unsigned __int16)(v4 + 4096) <= 0x122u)
    {
      int v6 = (*((uint64_t (**)(EshObject *))a2->var0 + 11))(a2);
      uint64_t v7 = *(void *)this;
      if (v6) {
        (*(void (**)(EshBinaryReader *, EshObject *))(v7 + 112))(this, a2);
      }
      else {
        (*(void (**)(EshBinaryReader *, EshObject *))(v7 + 120))(this, a2);
      }
LABEL_12:
      EshBinaryReader::movePastObject(this, v5);
      JUMPOUT(0x23EC997B0);
    }
    switch(v4)
    {
      case 4:
        (*(void (**)(EshBinaryReader *, EshObject *))(*(void *)this + 128))(this, a2);
        goto LABEL_12;
      case 5:
        (*(void (**)(EshBinaryReader *, EshObject *))(*(void *)this + 136))(this, a2);
        goto LABEL_12;
      case 6:
        (*(void (**)(EshBinaryReader *, EshObject *))(*(void *)this + 160))(this, a2);
        goto LABEL_12;
      case 7:
        (*(void (**)(EshBinaryReader *, EshObject *))(*(void *)this + 152))(this, a2);
        goto LABEL_12;
      case 12:
        (*(void (**)(EshBinaryReader *, EshObject *))(*(void *)this + 144))(this, a2);
        goto LABEL_12;
      default:
        exception = __cxa_allocate_exception(4uLL);
        int v9 = 1004;
        goto LABEL_16;
    }
  }
  exception = __cxa_allocate_exception(4uLL);
  int v9 = 7000;
LABEL_16:
  _DWORD *exception = v9;
}

void sub_238A888A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void EshBinaryReader::findObjectHeader(EshBinaryReader *this, EshHeader *a2, int a3)
{
  while (*((_DWORD *)this + 18) != *((_DWORD *)this + 9))
  {
    (*(void (**)(EshBinaryReader *))(*(void *)this + 88))(this);
    if (a2->var3 == a3) {
      break;
    }
    EshBinaryReader::movePastObject(this, a2);
  }
}

EshHeader *EshBinaryReader::readObject(EshBinaryReader *this, EshContainer *a2)
{
  int v4 = (uint64_t *)((char *)this + 40);
  unsigned int v5 = (const EshHeader *)(*(uint64_t (**)(EshBinaryReader *))(*(void *)this + 96))(this);
  EshRecord::setHeader(a2, v5);
  int v6 = *((_DWORD *)a2 + 4);
  int v7 = *((_DWORD *)a2 + 3);
  EshContainer::removeChildren((uint64_t)a2);
  ChStack<EshHeader>::push(v4, (uint64_t)a2 + 12);
  BOOL v8 = (EshHeader *)operator new(0x10uLL);
  uint64_t result = EshHeader::makeDefault(v8);
  if (v6 + 8 < (v6 + 8 + v7))
  {
    do
    {
      (*(void (**)(EshBinaryReader *))(*(void *)this + 88))(this);
      if ((__int16)v8->var3 != -3816) {
        EshContainer::addChild(a2, v8);
      }
    }
    while (v8->var1 + v8->var0 + 8 < v6 + 8 + v7);
    --*((_DWORD *)this + 14);
LABEL_7:
    JUMPOUT(0x23EC997B0);
  }
  --*((_DWORD *)this + 14);
  if (v8) {
    goto LABEL_7;
  }
  return result;
}

void sub_238A88ACC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ChStack<EshHeader>::push(uint64_t *a1, uint64_t a2)
{
  LODWORD(v4) = *((_DWORD *)a1 + 4);
  unsigned int v5 = *((_DWORD *)a1 + 5);
  if ((int)v4 + 1 <= v5)
  {
    uint64_t v12 = *a1;
  }
  else
  {
    uint64_t v6 = *((_DWORD *)a1 + 6) + v5;
    *((_DWORD *)a1 + 5) = v6;
    int v7 = operator new[](16 * v6 + 16);
    *int v7 = 16;
    v7[1] = v6;
    if (v6)
    {
      unint64_t v8 = 0;
      uint64_t v9 = 16 * v6;
      do
      {
        EshHeader::makeDefault((EshHeader *)&v7[v8 / 8 + 2]);
        v8 += 16;
      }
      while (v9 != v8);
    }
    a1[1] = (uint64_t)(v7 + 2);
    LODWORD(v4) = *((_DWORD *)a1 + 4);
    if (v4)
    {
      uint64_t v10 = 0;
      unint64_t v11 = 0;
      do
      {
        EshHeader::operator=(a1[1] + v10, *a1 + v10);
        ++v11;
        unint64_t v4 = *((unsigned int *)a1 + 4);
        v10 += 16;
      }
      while (v11 < v4);
    }
    if (*a1)
    {
      MEMORY[0x23EC99790](*a1 - 16, 0x1000C808B6DE1C6);
      LODWORD(v4) = *((_DWORD *)a1 + 4);
    }
    uint64_t v12 = a1[1];
    *a1 = v12;
    a1[1] = 0;
  }
  EshHeader::operator=(v12 + 16 * v4, a2);
  ++*((_DWORD *)a1 + 4);
}

void sub_238A88C28(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

uint64_t ChStack<EshHeader>::top(uint64_t a1)
{
  if (!*(void *)a1 || (int v1 = *(_DWORD *)(a1 + 16)) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1000;
  }
  return *(void *)a1 + 16 * (v1 - 1);
}

void EshBinaryReader::movePastObject(EshBinaryReader *this, const EshHeader *a2)
{
  unsigned int var1 = a2->var1;
  if (var1 != *((_DWORD *)this + 18)) {
    goto LABEL_22;
  }
  int var3 = a2->var3;
  if (a2->var4 == 15)
  {
    if (var3 != 1064 && var3 != 12052 && var3 != 14003) {
      goto LABEL_13;
    }
LABEL_11:
    *((_DWORD *)this + 18) = var1 + a2->var0 + 8;
    (*(void (**)(void))(**((void **)this + 1) + 16))(*((void *)this + 1));
    unsigned int v8 = *((_DWORD *)this + 18);
    goto LABEL_14;
  }
  if (var3 != 5003) {
    goto LABEL_11;
  }
LABEL_13:
  ChStack<EshHeader>::push((uint64_t *)this + 5, (uint64_t)a2);
  unsigned int v8 = a2->var1 + 8;
  *((_DWORD *)this + 18) = v8;
LABEL_14:
  if (v8 > *((_DWORD *)this + 9))
  {
LABEL_22:
    exception = __cxa_allocate_exception(4uLL);
    int v13 = 1004;
    goto LABEL_21;
  }
  if (*((_DWORD *)this + 14))
  {
    while (1)
    {
      uint64_t v9 = (_DWORD *)ChStack<EshHeader>::top((uint64_t)this + 40);
      if (v8 < v9[1] + *v9 + 8) {
        return;
      }
      uint64_t v10 = (_DWORD *)ChStack<EshHeader>::top((uint64_t)this + 40);
      unsigned int v8 = v10[1] + *v10 + 8;
      if (v8 != *((_DWORD *)this + 18)) {
        break;
      }
      int v11 = *((_DWORD *)this + 14) - 1;
      *((_DWORD *)this + 14) = v11;
      if (!v11) {
        return;
      }
    }
    exception = __cxa_allocate_exception(4uLL);
    int v13 = 7013;
LABEL_21:
    _DWORD *exception = v13;
  }
}

EshDgg *EshObjectFactory::createAtom(EshObjectFactory *this, int a2, int a3)
{
  if (a3 == 15)
  {
LABEL_36:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 7000;
  }
  unsigned __int8 v3 = a3;
  unsigned __int16 v4 = a2;
  unsigned int v5 = 0;
  switch(a2)
  {
    case 61446:
      unsigned int v5 = (EshDgg *)operator new(0x48uLL);
      EshDgg::EshDgg(v5);
      return v5;
    case 61447:
      unsigned int v5 = (EshDgg *)operator new(0x68uLL);
      EshBSE::EshBSE((EshBSE *)v5);
      return v5;
    case 61448:
      unsigned int v5 = (EshDgg *)operator new(0x28uLL);
      EshDg::EshDg(v5);
      return v5;
    case 61449:
    case 61450:
    case 61452:
    case 61453:
    case 61455:
    case 61456:
    case 61457:
    case 61461:
    case 61462:
    case 61464:
    case 61465:
    case 61472:
    case 61473:
    case 61474:
    case 61475:
    case 61476:
    case 61477:
    case 61478:
    case 61479:
    case 61480:
LABEL_20:
      if (!this->var1) {
        goto LABEL_36;
      }
      unsigned int v5 = 0;
      if (a2 > 61461)
      {
        if (a2 != 61462)
        {
          if (a2 == 61720)
          {
            unsigned int v5 = (EshDgg *)operator new(0x38uLL);
            EshRegroupItems::EshRegroupItems(v5);
          }
          else if (a2 != 61727)
          {
LABEL_32:
            unsigned int v5 = (EshDgg *)operator new(0x50uLL);
            EshRawAtom::EshRawAtom(v5, v4, v3);
          }
        }
      }
      else
      {
        switch(a2)
        {
          case 61449:
            unsigned int v5 = (EshDgg *)operator new(0x30uLL);
            EshSpgr::EshSpgr(v5);
            break;
          case 61450:
            unsigned int v5 = (EshDgg *)operator new(0x30uLL);
            EshSp::EshSp(v5);
            break;
          case 61452:
            return v5;
          case 61455:
            unsigned int v5 = (EshDgg *)operator new(0x30uLL);
            EshChildAnchor::EshChildAnchor(v5);
            break;
          default:
            goto LABEL_32;
        }
      }
      return v5;
    case 61451:
LABEL_5:
      unsigned int v5 = (EshDgg *)operator new(0x40uLL);
      EshOpt::EshOpt(v5, v4);
      return v5;
    case 61454:
      return v5;
    case 61458:
      unsigned int v5 = (EshDgg *)operator new(0x38uLL);
      EshConnectorRule::EshConnectorRule(v5);
      return v5;
    case 61459:
      unsigned int v5 = (EshDgg *)operator new(0x48uLL);
      EshAlignRule::EshAlignRule(v5);
      return v5;
    case 61460:
      unsigned int v5 = (EshDgg *)operator new(0x28uLL);
      EshArcRule::EshArcRule(v5);
      return v5;
    case 61463:
      unsigned int v5 = (EshDgg *)operator new(0x28uLL);
      EshCalloutRule::EshCalloutRule(v5);
      return v5;
    case 61466:
      unsigned int v5 = (EshDgg *)operator new(0x118uLL);
      EshMetafileBlip::EshMetafileBlip(v5, 0xF01Au);
      return v5;
    case 61467:
      unsigned int v5 = (EshDgg *)operator new(0x118uLL);
      EshMetafileBlip::EshMetafileBlip(v5, 0xF01Bu);
      return v5;
    case 61468:
      unsigned int v5 = (EshDgg *)operator new(0x118uLL);
      EshMetafileBlip::EshMetafileBlip(v5, 0xF01Cu);
      return v5;
    case 61469:
      unsigned int v5 = (EshDgg *)operator new(0xD8uLL);
      EshBitmapBlip::EshBitmapBlip(v5, 0xF01Du);
      return v5;
    case 61470:
      unsigned int v5 = (EshDgg *)operator new(0xD8uLL);
      EshBitmapBlip::EshBitmapBlip(v5, 0xF01Eu);
      return v5;
    case 61471:
      unsigned int v5 = (EshDgg *)operator new(0x1E8uLL);
      EshDibBlip::EshDibBlip(v5, 0xF01Fu);
      return v5;
    case 61481:
      unsigned int v5 = (EshDgg *)operator new(0xD8uLL);
      EshBitmapBlip::EshBitmapBlip(v5, 0xF029u);
      return v5;
    case 61482:
      unsigned int v5 = (EshDgg *)operator new(0xD8uLL);
      EshBitmapBlip::EshBitmapBlip(v5, 0xF02Au);
      return v5;
    default:
      switch(a2)
      {
        case 61721:
          unsigned int v5 = (EshDgg *)operator new(0x40uLL);
          EshSelection::EshSelection(v5);
          return v5;
        case 61722:
          unsigned int v5 = (EshDgg *)operator new(0x38uLL);
          EshColorMRU::EshColorMRU(v5);
          return v5;
        case 61725:
          unsigned int v5 = (EshDgg *)operator new(0x28uLL);
          EshDeletedPspl::EshDeletedPspl(v5);
          return v5;
        case 61726:
          unsigned int v5 = (EshDgg *)operator new(0x38uLL);
          EshSplitMenuColors::EshSplitMenuColors(v5);
          return v5;
        case 61728:
          return v5;
        case 61729:
        case 61730:
          goto LABEL_5;
        default:
          goto LABEL_20;
      }
  }
}

void sub_238A89194(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void EshDgg::EshDgg(EshDgg *this)
{
  EshAtom::EshAtom(this, 0xF006u, 0);
  void *v1 = &unk_26EBD7320;
  v1[7] = 0;
  v1[8] = 0;
  v1[6] = 0;
  *(void *)((char *)v1 + 36) = 0;
  *(void *)((char *)v1 + 28) = 0;
}

void EshAtom::EshAtom(EshAtom *this, unsigned __int16 a2, unsigned __int8 a3)
{
  EshRecord::EshRecord(this, a2, a3);
  *unsigned __int8 v3 = &unk_26EBD6A28;
}

uint64_t EshBinaryReader::readObject(EshBinaryReader *this, EshAtom *a2)
{
  uint64_t v4 = (*(uint64_t (**)(EshBinaryReader *))(*(void *)this + 96))(this);
  unsigned int v5 = *(uint64_t (**)(EshBinaryReader *, EshAtom *, uint64_t))(*(void *)this + 104);
  return v5(this, a2, v4);
}

uint64_t EshBinaryReader::readRecordData(EshParserVisitor **this, EshRecord *a2, const EshHeader *a3)
{
  if (EshRecord::getRecordType(a2) != a3->var3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  EshRecord::setHeader(a2, a3);
  EshParserVisitor::beginRead(this[2], a2);
  (*(void (**)(EshRecord *, EshParserVisitor *))(*(void *)a2 + 112))(a2, this[2]);
  uint64_t v6 = this[2];
  return EshParserVisitor::endRead(v6, a2);
}

void sub_238A893D0(void *a1)
{
}

uint64_t EshParserVisitor::beginRead(EshParserVisitor *this, EshRecord *a2)
{
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = EshRecord::getOffset(a2) + 8;
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v2 + 16);
  return v4(v2, v3, 0);
}

uint64_t EshDgg::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshDgg *a2)
{
  uint64_t v4 = *((void *)this + 3);
  int Offset = EshRecord::getOffset(a2);
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, (Offset + 8), 0);
  *((_DWORD *)a2 + 7) = (*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3));
  *((_DWORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3));
  *((_DWORD *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3));
  *((_DWORD *)a2 + 10) = (*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3));
  int DataLength = EshRecord::getDataLength(a2);
  int v7 = DataLength - 9;
  if ((DataLength - 9) >= 0xF)
  {
    if (DataLength >= 16) {
      int v7 = DataLength - 16;
    }
    unsigned int v8 = v7 >> 3;
    if (v8 <= 1) {
      int v9 = 1;
    }
    else {
      int v9 = v8;
    }
    do
    {
      unsigned int v10 = (*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3));
      uint64_t v11 = (*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3));
      EshDgg::addIdCluster(a2, v10 | (unint64_t)(v11 << 32));
      --v9;
    }
    while (v9);
  }
  EshParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t EshParserVisitor::endRead(EshParserVisitor *this, EshRecord *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
  int v5 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3) + 8;
  if (v5 < 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 7005;
  }
  if (result != v5)
  {
    uint64_t v6 = *(uint64_t (**)(void))(**((void **)this + 3) + 16);
    return v6();
  }
  return result;
}

void EshBSE::EshBSE(EshBSE *this)
{
  EshAtom::EshAtom((EshAtom *)this, 0xF007u, 2u);
  *(void *)uint64_t v1 = &unk_26EBD6CC8;
  *(_DWORD *)(v1 + 64) = 0;
  *(unsigned char *)(v1 + 68) = 0;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 54) = 0;
  *(void *)(v1 + 72) = 0x100000001;
  *(void *)(v1 + 80) = 0;
  *(void *)(v1 + 88) = 0;
  *(_WORD *)(v1 + 96) = 0;
}

uint64_t EshBSE::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshBSE *a2)
{
  uint64_t v4 = *((void *)this + 3);
  int Offset = EshRecord::getOffset((EshRecord *)a2);
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, (Offset + 8), 0);
  a2->var11 = (*(uint64_t (**)(void))(**((void **)this + 3) + 64))(*((void *)this + 3));
  a2->var12 = (*(uint64_t (**)(void))(**((void **)this + 3) + 64))(*((void *)this + 3));
  EshParserVisitor::parseBlipUid(this, &a2->var15);
  a2->var8 = (*(uint64_t (**)(void))(**((void **)this + 3) + 80))(*((void *)this + 3));
  a2->var5 = (*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3));
  unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3));
  a2->var6 = v6;
  a2->var7 = (*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3));
  a2->var9 = (*(uint64_t (**)(void))(**((void **)this + 3) + 64))(*((void *)this + 3));
  int v7 = (*(uint64_t (**)(void))(**((void **)this + 3) + 64))(*((void *)this + 3));
  a2->var10 = v7;
  a2->var13 = (*(uint64_t (**)(void))(**((void **)this + 3) + 64))(*((void *)this + 3));
  a2->var14 = (*(uint64_t (**)(void))(**((void **)this + 3) + 64))(*((void *)this + 3));
  if (v7) {
    goto LABEL_13;
  }
  unsigned int v8 = a2->var2.var1 + a2->var2.var0 + 8;
  unsigned int v9 = (*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
  if (v8 <= v9) {
    goto LABEL_12;
  }
  if (!v6 || v8 - v9 <= 7)
  {
LABEL_13:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 7005;
  }
  unsigned int v10 = (EshHeader *)operator new(0x10uLL);
  EshHeader::makeDefault(v10);
  uint64_t v11 = (*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
  EshParserVisitor::visit(this, v10, v11);
  if (v10->var3 - 1 <= 0x1B)
  {
    uint64_t v20 = __cxa_allocate_exception(4uLL);
    _DWORD *v20 = 7005;
  }
  uint64_t v12 = (void *)(*(uint64_t (**)(void))(**((void **)this + 7) + 16))(*((void *)this + 7));
  int v13 = v12;
  if (v12)
  {
    uint64_t v14 = *v12;
    if (v15)
    {
      unsigned __int16 v16 = (EshBlip *)v15;
      double v17 = EshRecord::setHeader(v15, v10);
      (*((void (**)(EshBlip *, EshParserVisitor *, double))v16->var0 + 14))(v16, this, v17);
      if (v16->var2.var1 + v16->var2.var0 != a2->var2.var1 + a2->var2.var0)
      {
        __n128 v21 = __cxa_allocate_exception(4uLL);
        *__n128 v21 = 7005;
      }
      a2->int var3 = v16;
    }
    else
    {
      (*(void (**)(void *))(v14 + 8))(v13);
    }
  }
  MEMORY[0x23EC997B0](v10, 0x1000C408B6DE1C6);
LABEL_12:
  EshParserVisitor::endRead(this, (EshRecord *)a2);
  return 1;
}

void sub_238A89CBC(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C408B6DE1C6);
  _Unwind_Resume(a1);
}

uint64_t EshParserVisitor::parseBlipUid(EshParserVisitor *this, UID *a2)
{
  int v4 = 16;
  uint64_t result = (*(uint64_t (**)(void, UID *, int *))(**((void **)this + 3) + 56))(*((void *)this + 3), a2, &v4);
  if (v4 != 16)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 7005;
  }
  return result;
}

BOOL EshBlip::isBlipRecordType(EshBlip *this)
{
  return (unsigned __int16)((_WORD)this + 4072) < 0x100u;
}

void EshBitmapBlip::EshBitmapBlip(EshBitmapBlip *this, unsigned __int16 a2)
{
  *(void *)EshBlipT<EshBitmapBlipInfo>::EshBlipT((uint64_t)this, a2) = &unk_26EBD6AD0;
}

uint64_t EshBlipT<EshBitmapBlipInfo>::EshBlipT(uint64_t a1, unsigned __int16 a2)
{
  EshBlip::EshBlip((EshBlip *)a1, a2);
  *(void *)uint64_t v3 = &unk_26EBD6B90;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 48) = v3 + 20;
  OcBinaryData::OcBinaryData((OcBinaryData *)(v3 + 72));
  *(_WORD *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 120) = -1;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 136) = a1 + 128;
  OcBinaryData::OcBinaryData((OcBinaryData *)(a1 + 160));
  *(unsigned char *)(a1 + 208) = -1;
  return a1;
}

void sub_238A89E80(_Unwind_Exception *a1)
{
  OcBinaryData::~OcBinaryData(v2);
  EshBlip::~EshBlip(v1);
  _Unwind_Resume(a1);
}

void EshBlip::EshBlip(EshBlip *this, unsigned __int16 a2)
{
  EshAtom::EshAtom((EshAtom *)this, a2, 0);
  *uint64_t v2 = &unk_26EBD6C20;
  *(void *)((char *)v2 + 36) = 0;
  *(void *)((char *)v2 + 28) = 0;
}

void OcBinaryData::OcBinaryData(OcBinaryData *this)
{
  this->int var0 = (void **)&unk_26EBD9AB8;
  *(void *)&this->unsigned int var1 = 0;
  *(void *)&this->int var3 = 0;
  this->var5 = 0;
  this->var6 = 1;
  this->var7 = 0;
}

uint64_t EshBitmapBlip::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshBitmapBlip *a2)
{
  uint64_t v4 = *((void *)this + 3);
  int Offset = EshRecord::getOffset(a2);
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, (Offset + 8), 0);
  EshParserVisitor::parseBlipUid(this, (UID *)((char *)a2 + 28));
  if (**((_WORD **)a2 + 6)) {
    EshParserVisitor::parseBlipUid(this, (UID *)((char *)a2 + 56));
  }
  *((unsigned char *)a2 + 120) = (*(uint64_t (**)(void))(**((void **)this + 3) + 64))(*((void *)this + 3));
  int v6 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3);
  int v7 = (*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
  EshParserVisitor::delayReadData(this, (OcBinaryData *)((char *)a2 + 72), v6 - v7 + 8);
  EshParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t EshParserVisitor::delayReadData(EshParserVisitor *this, OcBinaryData *a2, unsigned int a3)
{
  int v6 = (SsrwOOStream *)*((void *)this + 3);
  unsigned int v7 = (*((uint64_t (**)(SsrwOOStream *))v6->var0 + 4))(v6);
  unsigned int v8 = (*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
  OcBinaryData::setDataInfo(a2, v6, v7, v8, a3);
  unsigned int v9 = *(uint64_t (**)(void))(**((void **)this + 3) + 16);
  return v9();
}

uint64_t SsrwOOStgStream::getID(SsrwOOStgStream *this)
{
  return 0;
}

OcBinaryData *OcBinaryData::setDataInfo(OcBinaryData *this, SsrwOOStream *a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  unsigned int v9 = this;
  if (this->var6)
  {
    this = (OcBinaryData *)this->var5;
    if (this) {
      this = (OcBinaryData *)MEMORY[0x23EC99790](this, 0x1000C8077774924);
    }
  }
  v9->var5 = 0;
  v9->var7 = a2;
  v9->unsigned int var1 = a4;
  v9->uint64_t var2 = a3;
  v9->int var3 = a5;
  v9->var4 = 0;
  return this;
}

EshShapeDefaults *EshObjectFactory::createSemanticObject(EshObjectFactory *this, int a2)
{
  uint64_t v2 = 0;
  switch(a2)
  {
    case 4:
      uint64_t v2 = (EshShapeDefaults *)operator new(0x1E0uLL);
      EshShapeDefaults::EshShapeDefaults(v2);
      break;
    case 5:
      uint64_t v2 = (EshShapeDefaults *)operator new(0x10uLL);
      EshPatriarch::EshPatriarch(v2);
      break;
    case 6:
      uint64_t v2 = (EshShapeDefaults *)operator new(0x170uLL);
      EshGroup::EshGroup(v2);
      (*(void (**)(EshShapeDefaults *))(*(void *)v2 + 120))(v2);
      break;
    case 7:
      uint64_t v2 = (EshShapeDefaults *)operator new(0x240uLL);
      EshShape::EshShape((EshShape *)v2);
      break;
    case 12:
      uint64_t v2 = (EshShapeDefaults *)operator new(0x148uLL);
      EshBackground::EshBackground(v2);
      break;
    default:
      return v2;
  }
  return v2;
}

void sub_238A8A30C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void EshShapeDefaults::EshShapeDefaults(EshShapeDefaults *this)
{
  EshShapeBase::EshShapeBase(this, 4u);
  v2->int var0 = (void **)&unk_26EBD9088;
  uint64_t v3 = v2 + 1;
  EshObject::EshObject(v2 + 26, 0xDu);
  *((void *)this + 52) = &unk_26EBD91C8;
  *((void *)this + 54) = v3;
  *((void *)this + 55) = &unk_26EBD92F0;
  *((void *)this + 56) = &unk_26EBD9358;
  EshObject::EshObject((EshObject *)((char *)this + 456), 0x13u);
  *((void *)this + 59) = v3;
  *((void *)this + 57) = &unk_26EBD9150;
}

void sub_238A8A448(_Unwind_Exception *a1)
{
  EshContentBase::~EshContentBase(v1);
  _Unwind_Resume(a1);
}

void EshShapeBase::EshShapeBase(EshShapeBase *this, unsigned __int16 a2)
{
  EshContentBase::EshContentBase(this, a2);
  v3->int var0 = (void **)&unk_26EBD8FC0;
  uint64_t v4 = v3 + 1;
  EshObject::EshObject(v3 + 17, 0xFu);
  *((void *)this + 36) = v4;
  *((void *)this + 34) = &unk_26EBD8A08;
  EshObject::EshObject((EshObject *)((char *)this + 296), 0x14u);
  *((void *)this + 39) = v4;
  *((void *)this + 37) = &unk_26EBD8118;
  EshObject::EshObject((EshObject *)this + 20, 0x10u);
  *((void *)this + 42) = v4;
  *((void *)this + 40) = &unk_26EBD8A98;
  EshObject::EshObject((EshObject *)((char *)this + 344), 0x15u);
  *((void *)this + 45) = v4;
  *((void *)this + 43) = &unk_26EBD8B28;
  EshObject::EshObject((EshObject *)this + 23, 0x18u);
  *((void *)this + 48) = v4;
  *((void *)this + 46) = &unk_26EBD8BB8;
  EshObject::EshObject((EshObject *)((char *)this + 392), 0x16u);
  *((void *)this + 51) = v4;
  *((void *)this + 49) = &unk_26EBD8C48;
}

void sub_238A8A5B0(_Unwind_Exception *a1)
{
  EshContentBase::~EshContentBase(v1);
  _Unwind_Resume(a1);
}

void EshContentBase::EshContentBase(EshContentBase *this, unsigned __int16 a2)
{
  EshObject::EshObject((EshObject *)this, a2);
  *(void *)uint64_t v2 = &unk_26EBD8318;
  EshContentData::EshContentData((EshContentData *)(v2 + 16));
}

void EshContentData::EshContentData(EshContentData *this)
{
  EshOpt::EshOpt((EshOpt *)this, 0xF00Bu);
  EshOpt::EshOpt((EshOpt *)(v2 + 64), 0xF121u);
  EshOpt::EshOpt((EshOpt *)((char *)this + 128), 0xF122u);
  EshSp::EshSp((EshSp *)((char *)this + 192));
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
}

void sub_238A8A684(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  EshOpt::~EshOpt(v4);
  EshOpt::~EshOpt(v2);
  EshOpt::~EshOpt(v1);
  _Unwind_Resume(a1);
}

void EshOpt::EshOpt(EshOpt *this, unsigned __int16 a2)
{
  EshAtom::EshAtom(this, a2, 3u);
  *(void *)uint64_t v2 = &unk_26EBD76D8;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 32) = v2 + 40;
  *(_DWORD *)(v2 + 56) = 255;
}

void EshSp::EshSp(EshSp *this)
{
  EshAtom::EshAtom(this, 0xF00Au, 2u);
  void *v1 = &unk_26EBD7E68;
  *(void *)((char *)v1 + 36) = 0;
  *(void *)((char *)v1 + 28) = 0;
}

void PptBinaryReader::readEshObject(PptBinaryReader *this, EshObject *a2)
{
  if (*((_DWORD *)this + 40) == 2)
  {
    (*(void (**)(void, EshObject *))(**((void **)this + 21) + 40))(*((void *)this + 21), a2);
    if ((*((unsigned int (**)(EshObject *))a2->var0 + 2))(a2) == 7
      || (*((unsigned int (**)(EshObject *))a2->var0 + 2))(a2) == 6
      || (*((unsigned int (**)(EshObject *))a2->var0 + 2))(a2) == 12)
    {
      if ((*((unsigned int (**)(EshObject *))a2->var0 + 2))(a2) == 7)
      {
        int v5 = v4 + 576;
      }
      else if ((*((unsigned int (**)(EshObject *))a2->var0 + 2))(a2) == 6)
      {
        int v5 = v4 + 368;
      }
      else
      {
        int v5 = v4 + 328;
      }
      if (!v4) {
        int v5 = 0;
      }
      unsigned int v9 = v5 + 8;
      unsigned int v8 = (uint64_t *)*((void *)v5 + 1);
      if (((*((void *)v9 + 1) - (void)v8) & 0x7FFFFFFF8) != 0)
      {
        uint64_t v10 = *v8;
        EshHeader::operator=(*((void *)this + 25), *v8);
        *(_DWORD *)(*((void *)this + 21) + 72) = *(_DWORD *)(v10 + 4);
      }
    }
  }
  else
  {
    uint64_t v6 = *((void *)this + 22);
    if (!v6)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 1000;
    }
    unsigned int v7 = *(void (**)(void))(*(void *)v6 + 40);
    v7();
  }
}

_DWORD *EshBinaryReader::readObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 16;
  uint64_t v5 = a1 + 40;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  v7.n128_f64[0] = EshHeader::operator=((uint64_t)&v15, v6);
  uint64_t v8 = a2 + 144;
  uint64_t v9 = a2 + 80;
  while (1)
  {
    uint64_t v10 = v4;
    if (v15.var3 != 61451)
    {
      if (v15.var3 == 61730)
      {
        uint64_t v10 = v8;
      }
      else
      {
        uint64_t v10 = v9;
        if (v15.var3 != 61729) {
          break;
        }
      }
    }
    (*(void (**)(uint64_t, uint64_t, EshHeader *, __n128))(*(void *)a1 + 104))(a1, v10, &v15, v7);
    unsigned int v11 = v15.var1 + v15.var0 + 8;
    uint64_t v12 = (_DWORD *)ChStack<EshHeader>::top(v5);
    if (v11 >= v12[1] + *v12 + 8) {
      break;
    }
    EshParserVisitor::visit(*(EshParserVisitor **)(a1 + 16), &v15, v15.var1 + v15.var0 + 8);
  }
  unsigned int v13 = *(_DWORD *)(a1 + 36);
  uint64_t result = (_DWORD *)ChStack<EshHeader>::top(v5);
  if (v13 < result[1] + *result + 8)
  {
    uint64_t result = (_DWORD *)ChStack<EshHeader>::top(v5);
    *(_DWORD *)(a1 + 36) = result[1] + *result + 8;
  }
  return result;
}

uint64_t EshOpt::accept(int a1, void *lpsrc)
{
  return v2();
}

BOOL EshParserVisitor::visit(EshParserVisitor *this, EshOpt *a2)
{
  uint64_t v4 = *((void *)this + 3);
  int Offset = EshRecord::getOffset(a2);
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, (Offset + 8), 0);
  unsigned int Version = EshRecord::getVersion(a2);
  if (Version >= 3) {
    int v6 = 6;
  }
  else {
    int v6 = 8;
  }
  int v7 = EshRecord::getInstance(a2) & 0xFFF;
  if ((int)EshRecord::getDataLength(a2) / v6 <= v7) {
    int v7 = (int)EshRecord::getDataLength(a2) / v6;
  }
  int v8 = (*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
  int v10 = *((_DWORD *)a2 + 3);
  int v9 = *((_DWORD *)a2 + 4);
  v57 = (EshPropValParserVisitor *)operator new(0x18uLL);
  EshPropValParserVisitor::EshPropValParserVisitor(v57, *((SsrwOOStream **)this + 3));
  uint64_t v11 = v8 + (unsigned __int16)v7 * v6;
  unsigned int v60 = v9 + v10 + 8;
  unsigned int v61 = (unsigned __int16)v7;
  if ((_WORD)v7)
  {
    int v58 = v8;
    int v59 = v6;
    int v12 = 0;
    BOOL v13 = 0;
    while (1)
    {
      __int16 v14 = (*(uint64_t (**)(void))(**((void **)this + 3) + 80))(*((void *)this + 3));
      if (Version <= 2) {
        (*(void (**)(void))(**((void **)this + 3) + 80))(*((void *)this + 3));
      }
      uint64_t v15 = (*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3));
      unsigned __int16 v16 = (EshColor *)v15;
      int v17 = v14;
      if (v14 < 0 && (v15 & 0x80000000) != 0) {
        break;
      }
      unsigned int v18 = v14 & 0x3FFF;
      if ((~v18 & 0x3F) != 0)
      {
        Propertyint Type = EshOpt::getPropertyType(v14 & 0x3FFF);
        int v30 = PropertyType;
        if (v17 < 0)
        {
          (*(void (**)(void, uint64_t, void))(**((void **)this + 3) + 16))(*((void *)this + 3), v11, 0);
          uint64_t v32 = (v16 + v11);
          BOOL v33 = __CFADD__(v16, v11);
          if (v32 > v60 || v33 || v32 < v11)
          {
            exception = __cxa_allocate_exception(4uLL);
            _DWORD *exception = 7005;
          }
          switch(v30)
          {
            case 0:
              unsigned int v34 = operator new(0x20uLL);
              *unsigned int v34 = (v17 & 0x4000) != 0;
              v34[1] = 1;
              *((_DWORD *)v34 + 1) = 0;
              *((_DWORD *)v34 + 6) = 0;
              *((void *)v34 + 1) = &unk_26EBD7870;
              *((void *)v34 + 2) = 0;
              v63.n128_u64[0] = (unint64_t)v34;
              if (v16)
              {
                *((_DWORD *)v57 + 4) = v16;
                (*(void (**)(EshPropValParserVisitor *))(*(void *)v57 + 16))(v57);
                unsigned int v34 = (unsigned char *)v63.n128_u64[0];
              }
              EshOpt::takeGenericProperty((uint64_t)a2, v17 & 0x3FFF, (uint64_t *)v34);
              v63.n128_u64[0] = 0;
              ChAutoPtr<EshOpt::GenericValue>::~ChAutoPtr((uint64_t *)&v63);
              break;
            case 8:
              if (v16)
              {
                BOOL v40 = (EshHeader *)operator new(0x10uLL);
                EshHeader::makeDefault(v40);
                uint64_t v41 = (*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
                EshParserVisitor::visit(this, v40, v41);
                v42 = (void *)(*(uint64_t (**)(void, void, void))(**((void **)this + 7) + 16))(*((void *)this + 7), v40->var3, v40->var4);
                v43 = v42;
                if (v42)
                {
                  uint64_t v44 = *v42;
                  if (v45)
                  {
                    int v46 = (uint64_t *)v45;
                    double v47 = EshRecord::setHeader(v45, v40);
                    (*(void (**)(uint64_t *, EshParserVisitor *, double))(*v46 + 112))(v46, this, v47);
                    if (*((_DWORD *)v46 + 4) + *((_DWORD *)v46 + 3) + 8 != v32)
                    {
                      v56 = __cxa_allocate_exception(4uLL);
                      _DWORD *v56 = 7005;
                    }
                    EshOpt::takeBlipRecordProperty((uint64_t)a2, v18, v46);
                  }
                  else
                  {
                    (*(void (**)(void *))(v44 + 8))(v43);
                  }
                }
                MEMORY[0x23EC997B0](v40, 0x1000C408B6DE1C6);
              }
              else
              {
                __n128 v63 = (__n128)1uLL;
                EshOpt::setProperty((uint64_t)a2, v17 & 0x3FFF, 8, &v63);
              }
              break;
            case 9:
              unsigned int v36 = (CsString *)operator new(0x18uLL);
              CsString::CsString(v36);
              if (v16)
              {
                unsigned int v37 = v16 >> 1;
                signed int v38 = (v16 >> 1) - 1;
                CsString::reserve(v36, v38);
                CsString::setCount(v36, v38);
                unsigned int var1 = v36->var1;
                v63.n128_u32[0] = v37;
                (*(void (**)(void, __n128 *, unsigned __int16 *))(**((void **)this + 3) + 136))(*((void *)this + 3), &v63, var1);
                if (v63.n128_u32[0] != v37 || var1[v38])
                {
                  v55 = __cxa_allocate_exception(4uLL);
                  _DWORD *v55 = 7005;
                }
              }
              EshOpt::takeStringProperty((uint64_t)a2, v18, (uint64_t *)v36);
              break;
            case 10:
              if (v16)
              {
                PropVal = EshPropValFactory::createPropVal((EshPropValFactory *)(v17 & 0x3FFF));
                uint64_t v49 = PropVal;
                *((_DWORD *)v57 + 4) = v16;
                if (PropVal) {
                  (*(void (**)(uint64_t *))(*PropVal + 24))(PropVal);
                }
                uint64_t v32 = (*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
              }
              else
              {
                uint64_t v49 = 0;
              }
              EshOpt::takeComplexProperty((uint64_t)a2, v17 & 0x3FFF, v49);
              break;
            case 11:
              v50 = (CsData *)operator new(0x10uLL);
              CsData::CsData(v50);
              v63.n128_u64[0] = (unint64_t)v50;
              if (v16)
              {
                SsrwOOStream::readCsData(*((SsrwOOStream **)this + 3), v50, v16);
                v50 = (CsData *)v63.n128_u64[0];
              }
              EshOpt::takeDataProperty((uint64_t)a2, v17 & 0x3FFF, (uint64_t *)v50);
              v63.n128_u64[0] = 0;
              ChAutoPtr<CsData>::~ChAutoPtr((CsData **)&v63);
              break;
            default:
              break;
          }
          (*(void (**)(void, void, void))(**((void **)this + 3) + 16))(*((void *)this + 3), (v59 + v59 * v12 + v58), 0);
          uint64_t v11 = v32;
        }
        else
        {
          switch(PropertyType)
          {
            case 0:
              int v31 = operator new(0x20uLL);
              *int v31 = (unsigned __int16)v17 >> 14;
              v31[1] = 0;
              *((_DWORD *)v31 + 1) = v16;
              *((_DWORD *)v31 + 6) = 0;
              *((void *)v31 + 1) = &unk_26EBD7870;
              *((void *)v31 + 2) = 0;
              v63.n128_u64[0] = (unint64_t)v31;
              EshOpt::takeGenericProperty((uint64_t)a2, v17 & 0x3FFF, (uint64_t *)v31);
              v63.n128_u64[0] = 0;
              ChAutoPtr<EshOpt::GenericValue>::~ChAutoPtr((uint64_t *)&v63);
              break;
            case 2:
              __n128 v63 = (__n128)v16;
              EshOpt::setProperty((uint64_t)a2, v17 & 0x3FFF, 2, &v63);
              break;
            case 3:
              __n128 v63 = (__n128)v16;
              EshOpt::setProperty((uint64_t)a2, v17 & 0x3FFF, 3, &v63);
              break;
            case 4:
              unsigned int v35 = EshParserVisitor::decodeColor((EshColor *)this, v16);
              v63.n128_u64[1] = 0;
              v63.n128_u64[0] = (unint64_t)*v35;
              EshOpt::setProperty((uint64_t)a2, v17 & 0x3FFF, 4, &v63);
              break;
            case 5:
              *((_DWORD *)this + 8) = v16 & 3;
              *((unsigned char *)this + 36) = (v16 & 4) != 0;
              *((unsigned char *)this + 37) = (v16 & 8) != 0;
              __n128 v63 = (__n128)*((unint64_t *)this + 4);
              EshOpt::setProperty((uint64_t)a2, v17 & 0x3FFF, 5, &v63);
              break;
            case 6:
              *((unsigned char *)this + 42) = v16 & 3 | (4 * ((v16 & 8) != 0)) | *((unsigned char *)this + 42) & 0xF8;
              *((_WORD *)this + 20) = WORD1(v16);
              __n128 v63 = 0uLL;
              v63.n128_u32[0] = *((_DWORD *)this + 10);
              EshOpt::setProperty((uint64_t)a2, v17 & 0x3FFF, 6, &v63);
              break;
            case 7:
              *((unsigned char *)this + 44) = v16 & 1;
              *((unsigned char *)this + 45) = (v16 & 2) != 0;
              *((unsigned char *)this + 46) = (v16 & 4) != 0;
              v63.n128_u64[1] = 0;
              *(unint64_t *)((char *)v63.n128_u64 + 3) = 0;
              v63.n128_u16[0] = *((_WORD *)this + 22);
              v63.n128_u8[2] = *((unsigned char *)this + 46);
              EshOpt::setProperty((uint64_t)a2, v17 & 0x3FFF, 7, &v63);
              break;
            case 8:
              if (v16 >= 0x10000) {
                ChLogF("Blip ID with non-zero high word (0x%04X)\n", v23, v24, v25, v26, v27, v28, v29, SBYTE2(v16));
              }
              v63.n128_u64[0] = 1;
              v63.n128_u64[1] = (unsigned __int16)v16;
              EshOpt::setProperty((uint64_t)a2, v17 & 0x3FFF, 8, &v63);
              break;
            default:
              break;
          }
        }
      }
      else
      {
        if (v14 < 0)
        {
          v52 = __cxa_allocate_exception(4uLL);
          _DWORD *v52 = 7005;
        }
        uint64_t v19 = 0;
        uint64_t v20 = WORD1(v15);
        uint64_t v21 = (unsigned __int16)v15;
        do
        {
          if (((1 << v19) & v20) != 0)
          {
            __n128 v63 = (__n128)(((1 << v19) & v21) != 0);
            EshOpt::setProperty((uint64_t)a2, v18, 1, &v63);
          }
          ++v19;
          --v18;
        }
        while (v19 != 16);
      }
      BOOL v13 = v61 <= ++v12;
      if (v12 == v61) {
        goto LABEL_64;
      }
    }
  }
  else
  {
LABEL_64:
    if (v60 != v11)
    {
      v54 = __cxa_allocate_exception(4uLL);
      _DWORD *v54 = 7005;
    }
    (*(void (**)(void))(**((void **)this + 3) + 16))(*((void *)this + 3));
    EshParserVisitor::endRead(this, a2);
    BOOL v13 = 1;
  }
  if (v57) {
    (*(void (**)(EshPropValParserVisitor *))(*(void *)v57 + 8))(v57);
  }
  return v13;
}

void sub_238A8B5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  MEMORY[0x23EC997B0](v17, 0x1000C408B6DE1C6);
  if (__p) {
    (*(void (**)(void *))(*(void *)__p + 8))(__p);
  }
  _Unwind_Resume(a1);
}

void EshPropValParserVisitor::EshPropValParserVisitor(EshPropValParserVisitor *this, SsrwOOStream *a2)
{
  *(void *)this = &unk_26EBD9788;
  *((void *)this + 1) = a2;
}

uint64_t EshOpt::getPropertyType(int a1)
{
  if (a1 >= 0) {
    int v1 = a1;
  }
  else {
    int v1 = a1 + 63;
  }
  int v2 = a1 - (v1 & 0xFFFFFFC0);
  if (v2 > 47) {
    return 1;
  }
  int v4 = v1 >> 6;
  if (v4 << 16 >= 1703936 || v2 >= *((__int16 *)&EshOpt::getPropertyType(EshOpt::PID)::blocks + 8 * (__int16)v4 + 4)) {
    return 0;
  }
  else {
    return *((unsigned int *)*(&EshOpt::getPropertyType(EshOpt::PID)::blocks + 2 * (__int16)v4) + (__int16)v2);
  }
}

EshColor *EshParserVisitor::decodeColor(EshColor *this, EshColor *a2)
{
  unsigned int v2 = a2;
  unsigned int v3 = a2 >> 24;
  int v4 = this + 6;
  EshColor::none(this + 6, a2);
  switch(v3)
  {
    case 0u:
    case 2u:
    case 4u:
      EshColor::rgb(v2, SBYTE1(v2), SBYTE2(v2), (uint64_t)v4);
      break;
    case 1u:
      EshColor::paletteIndex((EshColor *)(unsigned __int16)v2, (uint64_t)v4, v6);
      break;
    case 3u:
    case 5u:
    case 6u:
    case 7u:
      return v4;
    case 8u:
      EshColor::schemeIndex((EshColor *)(unsigned __int16)v2, (uint64_t)v4, v6);
      break;
    default:
      if (v3 == 16)
      {
        if (v2 <= 0x18u) {
          EshColor::systemIndex(v2, (uint64_t)v4, BYTE1(v2) & 0xF, SBYTE2(v2), (v2 >> 13) & 1, (v2 >> 14) & 1, (v2 >> 15) & 1);
        }
        if ((v2 & 0xF8) == 0xF0) {
          EshColor::property(v2, (uint64_t)v4, BYTE1(v2) & 0xF, SBYTE2(v2), (v2 >> 13) & 1, (v2 >> 14) & 1, (v2 >> 15) & 1);
        }
      }
      else if (v3 == 32)
      {
        EshColor::noModification(v4, v5);
      }
      break;
  }
  return v4;
}

EshColor *EshColor::none(EshColor *this, EshColor *a2)
{
  this->var0.int var0 = 255;
  return this;
}

EshColor *EshColor::schemeIndex(EshColor *this, uint64_t a2, EshColor *a3)
{
  *(_DWORD *)a2 = 8;
  *(_WORD *)(a2 + 4) = (_WORD)this;
  return this;
}

__n128 EshOpt::setProperty(uint64_t a1, unsigned int a2, uint64_t a3, __n128 *a4)
{
  unsigned int v7 = a2;
  int v8 = &v7;
  uint64_t v5 = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v7, (uint64_t)&std::piecewise_construct, &v8);
  __n128 result = *a4;
  *(__n128 *)(v5 + 5) = *a4;
  return result;
}

void EshPropValParserVisitor::~EshPropValParserVisitor(EshPropValParserVisitor *this)
{
}

void EshSplitMenuColors::EshSplitMenuColors(EshSplitMenuColors *this)
{
  EshAtom::EshAtom(this, 0xF11Eu, 0);
  void *v1 = &unk_26EBD7FB8;
  v1[5] = 0;
  v1[6] = 0;
  v1[4] = 0;
}

uint64_t EshSplitMenuColors::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshSplitMenuColors *a2)
{
  uint64_t v4 = *((void *)this + 3);
  int Offset = EshRecord::getOffset(a2);
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, (Offset + 8), 0);
  int Instance = EshRecord::getInstance(a2);
  if (EshRecord::getDataLength(a2) != 4 * (unsigned __int16)Instance)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 7005;
  }
  if (Instance)
  {
    int v7 = 0;
    do
    {
      int v8 = (EshColor *)(*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3));
      int v9 = EshParserVisitor::decodeColor((EshColor *)this, v8);
      EshSplitMenuColors::addColor(a2, v9);
      ++v7;
    }
    while ((unsigned __int16)v7 < (unsigned __int16)Instance);
  }
  EshParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t EshColor::operator=(uint64_t result, uint64_t a2)
{
  *(_DWORD *)__n128 result = *(_DWORD *)a2;
  switch(*(_DWORD *)a2)
  {
    case 0:
    case 2:
    case 4:
      __int16 v2 = *(_WORD *)(a2 + 4);
      *(unsigned char *)(result + 6) = *(unsigned char *)(a2 + 6);
      *(_WORD *)(result + 4) = v2;
      break;
    case 1:
    case 8:
      *(_WORD *)(result + 4) = *(_WORD *)(a2 + 4);
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      return result;
    default:
      if ((*(_DWORD *)a2 - 33) < 2) {
        *(_DWORD *)(result + 4) = *(_DWORD *)(a2 + 4);
      }
      break;
  }
  return result;
}

uint64_t EshColor::property(uint64_t result, uint64_t a2, char a3, char a4, int a5, int a6, int a7)
{
  *(_DWORD *)a2 = 33;
  *(unsigned char *)(a2 + 4) = result;
  char v7 = *(unsigned char *)(a2 + 6) & 0x80;
  *(unsigned char *)(a2 + 5) = a4;
  if (a5) {
    char v8 = 16;
  }
  else {
    char v8 = 0;
  }
  if (a6) {
    char v9 = 32;
  }
  else {
    char v9 = 0;
  }
  if (a7) {
    char v10 = 64;
  }
  else {
    char v10 = 0;
  }
  *(unsigned char *)(a2 + 6) = v8 & 0xF0 | a3 & 0xF | v9 | v10 | v7;
  return result;
}

void EshRoot::~EshRoot(EshRoot *this)
{
  EshRoot::~EshRoot(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;
  uint64_t v3;
  unint64_t v4;

  *(void *)this = &unk_26EBD8820;
  __int16 v2 = (void *)*((void *)this + 2);
  unsigned int v3 = *((void *)this + 3);
  if (((v3 - (void)v2) & 0x7FFFFFFF8) != 0)
  {
    uint64_t v4 = 0;
    do
    {
      if (v2[v4])
      {
        MEMORY[0x23EC997B0](v2[v4], 0x1000C408B6DE1C6);
        __int16 v2 = (void *)*((void *)this + 2);
        unsigned int v3 = *((void *)this + 3);
      }
      if (v4 >= ((unint64_t)(v3 - (void)v2) >> 3)) {
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      }
      v2[v4++] = 0;
      __int16 v2 = (void *)*((void *)this + 2);
      unsigned int v3 = *((void *)this + 3);
    }
    while (v4 < ((unint64_t)(v3 - (void)v2) >> 3));
  }
  *((void *)this + 3) = v2;
  if (v2) {
    operator delete(v2);
  }
}

void PptSlidePersistAtom::PptSlidePersistAtom(PptSlidePersistAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBED540;
  *(void *)(v2 + 32) = &unk_26EBED5E8;
  *(unsigned char *)(v2 + 60) = 0;
}

uint64_t PptSlidePersistAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptSlidePersistAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4
    || (*((unsigned char *)a2 + 60) = ((*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1)) & 2) != 0,
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 8)
    || (*((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 12)
    || (*((_DWORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 16))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  PptSkipVisitor::skipKnownBytes(*((unsigned char **)this + 3), a2, 4u);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptViewSettingsAtom::PptViewSettingsAtom(PptViewSettingsAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEEE90;
  *(void *)(v2 + 32) = &unk_26EBEEF38;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = 0;
  *(_DWORD *)(v2 + 64) = 0;
}

uint64_t PptViewSettingsAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptViewSettingsAtom *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 15) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptSlideViewInfoAtom::PptSlideViewInfoAtom(PptSlideViewInfoAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *uint64_t v2 = &unk_26EBED638;
  v2[4] = &unk_26EBED6E0;
  v2[5] = 0xFFFFFFFFLL;
}

uint64_t PptSlideViewInfoAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptSlideViewInfoAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((unsigned char *)a2 + 45) = (*(unsigned int (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) != 0;
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 1
    || (*((unsigned char *)a2 + 46) = (*(unsigned int (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) != 0,
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 2))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  *((unsigned char *)a2 + 47) = (*(unsigned int (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) != 0;
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptViewInfoAtom::PptViewInfoAtom(PptViewInfoAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v3 + 40) = -1;
  *(unsigned char *)(v3 + 44) = 0;
  *(void *)uint64_t v3 = &unk_26EBEED98;
  *(void *)(v3 + 32) = &unk_26EBEEE40;
  PptGScalingAtom::PptGScalingAtom((PptGScalingAtom *)(v3 + 48));
  PptGScalingAtom::PptGScalingAtom((PptViewInfoAtom *)((char *)this + 208));
  PptGPointAtom::PptGPointAtom((PptViewInfoAtom *)((char *)this + 368));
  PptGPointAtom::PptGPointAtom((PptViewInfoAtom *)((char *)this + 424));
  *((_WORD *)this + 240) = 256;
}

void PptGScalingAtom::PptGScalingAtom(PptGScalingAtom *this)
{
  EshAtom::EshAtom(this, 0x2711u, 0);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEBEA8;
  *(void *)(v2 + 32) = &unk_26EBEBF50;
  PptGRatioAtom::PptGRatioAtom((PptGRatioAtom *)(v2 + 48));
  PptGRatioAtom::PptGRatioAtom((PptGScalingAtom *)((char *)this + 104));
}

void PptGRatioAtom::PptGRatioAtom(PptGRatioAtom *this)
{
  EshAtom::EshAtom(this, 0xBD7u, 0);
  *(_DWORD *)(v1 + 40) = -1;
  *(unsigned char *)(v1 + 44) = 0;
  *(void *)uint64_t v1 = &unk_26EBEBBC0;
  *(void *)(v1 + 32) = &unk_26EBEBC68;
}

void PptGPointAtom::PptGPointAtom(PptGPointAtom *this)
{
  EshAtom::EshAtom(this, 0xBDAu, 0);
  *(_DWORD *)(v1 + 40) = -1;
  *(unsigned char *)(v1 + 44) = 0;
  *(void *)uint64_t v1 = &unk_26EBEB9D0;
  *(void *)(v1 + 32) = &unk_26EBEBA78;
  *(void *)(v1 + 48) = 0;
}

uint64_t PptViewInfoAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptViewInfoAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 36) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 37) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 50) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 51) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 16) {
    goto LABEL_8;
  }
  *((_DWORD *)a2 + 76) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 77) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 90) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 91) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 32
    || (*((_DWORD *)a2 + 104) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1)),
        *((_DWORD *)a2 + 105) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 40)
    || (*((_DWORD *)a2 + 118) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1)),
        *((_DWORD *)a2 + 119) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 48)
    || (*((unsigned char *)a2 + 480) = (*(unsigned int (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) != 0,
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 49)
    || (*((unsigned char *)a2 + 481) = (*(unsigned int (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) != 0,
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 50))
  {
LABEL_8:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  PptSkipVisitor::skipKnownBytes(*((unsigned char **)this + 3), a2, 2u);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptGuideAtom::PptGuideAtom(PptGuideAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEBFA0;
  *(void *)(v2 + 32) = &unk_26EBEC048;
  *(void *)(v2 + 48) = 0;
}

uint64_t PptGuideAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptGuideAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptCString::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptGridSpacing10Atom::PptGridSpacing10Atom(PptGridSpacing10Atom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBF1728;
  *(void *)(v2 + 32) = &unk_26EBF17D0;
}

uint64_t PptGridSpacing10Atom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptGridSpacing10Atom *a2)
{
  return 1;
}

void PptHeadersFootersAtom::PptHeadersFootersAtom(PptHeadersFootersAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom((EshAtom *)this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEC190;
  *(void *)(v2 + 32) = &unk_26EBEC238;
  *(unsigned char *)(v2 + 52) = 1;
  *(_DWORD *)(v2 + 53) = 0;
  *(unsigned char *)(v2 + 57) = 1;
}

uint64_t PptHeadersFootersAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptHeadersFootersAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), a2->var2.var1 + 8, 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  a2->var6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  int16x8_t v5 = (int16x8_t)((__n128 (*)(void))*(void *)(**((void **)this + 1) + 80))(*((void *)this + 1));
  a2->var7 = v6 & 1;
  v5.i64[0] = *(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(v6) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)&a2->var8 = vmovn_s16(v5).u32[0];
  a2->var12 = (v6 & 0x20) != 0;
  PptParserVisitor::endRead(this, (EshRecord *)a2);
  return 1;
}

void PptTextHeaderAtom::PptTextHeaderAtom(PptTextHeaderAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom((EshAtom *)this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEE1F0;
  *(void *)(v2 + 32) = &unk_26EBEE298;
  *(_DWORD *)(v2 + 48) = -1;
}

uint64_t PptTextHeaderAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextHeaderAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), a2->var2.var1 + 8, 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  if (v4 >= 9)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  a2->var6 = v4;
  PptParserVisitor::endRead(this, (EshRecord *)a2);
  *((_DWORD *)this + 16) = 0;
  return 1;
}

void PptTextBytesAtom::PptTextBytesAtom(PptTextBytesAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEDFF8;
  *(void *)(v2 + 32) = &unk_26EBEE0A8;
  *(void *)(v2 + 48) = 0;
}

uint64_t PptTextBytesAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextBytesAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  unsigned int DataLength = EshRecord::getDataLength(a2);
  unsigned int v14 = DataLength;
  if (DataLength)
  {
    unsigned int v5 = DataLength;
    size_t v6 = DataLength + 1;
    char v7 = operator new[](v6);
    *((void *)this + 5) = v7;
    bzero(v7, v6);
    (*(void (**)(void, void, unsigned int *))(**((void **)this + 1) + 56))(*((void *)this + 1), *((void *)this + 5), &v14);
    if (v14)
    {
      if (v14 != v5)
      {
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = 4003;
      }
      for (unint64_t i = 0; i < v5; ++i)
      {
        uint64_t v9 = *((void *)this + 5);
        if (!*(unsigned char *)(v9 + i))
        {
          *(unsigned char *)(v9 + i) = 32;
          unsigned int v5 = v14;
        }
      }
      uint64_t v10 = *((void *)this + 5);
      uint64_t v11 = *((void *)a2 + 6);
      if (v11) {
        MEMORY[0x23EC99790](v11, 0x1000C8077774924);
      }
      *((void *)a2 + 6) = v10;
      *((void *)this + 5) = 0;
    }
  }
  PptParserVisitor::endRead(this, a2);
  *((_DWORD *)this + 16) = EshRecord::getDataLength(a2);
  return 1;
}

uint64_t SsrwOOStgStream::readString8(uint64_t this, unsigned int *a2, char *a3)
{
  uint64_t v4 = *a2;
  if ((int)v4 < 1)
  {
    LODWORD(v4) = 0;
  }
  else
  {
    uint64_t v6 = this;
    uint64_t v7 = 0;
    while (1)
    {
      this = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 64))(v6);
      a3[v7] = this;
      if (!this) {
        break;
      }
      if (v4 == ++v7) {
        goto LABEL_8;
      }
    }
    LODWORD(v4) = v7 + 1;
  }
LABEL_8:
  *a2 = v4;
  return this;
}

void PptTextBlockStylingAtom::PptTextBlockStylingAtom(PptTextBlockStylingAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEDE08;
  *(void *)(v2 + 32) = &unk_26EBEDEB0;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_DWORD *)(v2 + 96) = 0;
}

uint64_t PptTextBlockStylingAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextBlockStylingAtom *a2)
{
  int v4 = *((_DWORD *)this + 16);
  *((_DWORD *)a2 + 24) = v4;
  unsigned int v5 = v4 + 1;
  BOOL v6 = v4 == -1;
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  Endint Offset = EshRecord::getEndOffset(a2);
  int v8 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  int DataLength = EshRecord::getDataLength(a2);
  if (!v6)
  {
    unsigned int v10 = 0;
    unsigned int v11 = DataLength + v8;
    while ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) < v11)
    {
      int v12 = (PptParaRun *)operator new(0x38uLL);
      PptParaRun::PptParaRun(v12);
      uint64_t v18 = v12;
      PptParserVisitor::parseParaRun(this, v12, EndOffset);
      int v13 = *(_DWORD *)v18;
      if (!*(_DWORD *)v18)
      {
        ChAutoPtr<PptParaRun>::~ChAutoPtr((uint64_t *)&v18);
        break;
      }
      EshDgg::addIdCluster(a2, (uint64_t)v18);
      v10 += v13;
      uint64_t v18 = 0;
      ChAutoPtr<PptParaRun>::~ChAutoPtr((uint64_t *)&v18);
      if (v10 >= v5) {
        break;
      }
    }
    unsigned int v14 = 0;
    while ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) < v11)
    {
      uint64_t v15 = (PptCharRun *)operator new(0x24uLL);
      PptCharRun::PptCharRun(v15);
      PptParserVisitor::parseCharRun(this, v15);
      int var0 = v15->var0;
      if (!v15->var0)
      {
        MEMORY[0x23EC997B0](v15, 0x1000C40E65D7F0ALL);
        break;
      }
      PptTextBlockStylingAtom::addCharRun(a2, v15);
      v14 += var0;
      if (v14 >= v5) {
        break;
      }
    }
  }
  PptParserVisitor::endRead(this, a2);
  *((_DWORD *)this + 16) = 0;
  return 1;
}

void sub_238A8DDCC(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C40E65D7F0ALL);
  _Unwind_Resume(a1);
}

void PptParaRun::PptParaRun(PptParaRun *this)
{
  *(_DWORD *)this = 0;
  *((_WORD *)this + 2) = 0;
  PptParaProperty::PptParaProperty((PptParaRun *)((char *)this + 8));
}

uint64_t *ChAutoPtr<PptParaRun>::~ChAutoPtr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    PptParaProperty::~PptParaProperty((PptParaProperty *)(v2 + 8));
    MEMORY[0x23EC997B0](v2, 0x1020C405935C4BCLL);
  }
  *a1 = 0;
  return a1;
}

void PptCharRun::PptCharRun(PptCharRun *this)
{
  this->int var0 = 0;
  PptCharProperty::PptCharProperty(&this->var1);
}

void PptTextBlockSpecialInfoAtom::PptTextBlockSpecialInfoAtom(PptTextBlockSpecialInfoAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEE4D8;
  *(void *)(v2 + 32) = &unk_26EBEE580;
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 48) = 0;
}

uint64_t PptTextBlockSpecialInfoAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextBlockSpecialInfoAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  for (unsigned int i = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3) + 8;
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) < i;
        PptParserVisitor::parseSpecialInfo11(this, (PptSpecialInfoRun *)((char *)v5 + 24), v6, i))
  {
    unsigned int v5 = PptTextBlockSpecialInfoAtom::addSpecialInfoRun(a2);
    if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) + 4 > i) {
      goto LABEL_8;
    }
    *(_DWORD *)unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
    if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) + 4 > i) {
      goto LABEL_8;
    }
    __int16 v6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
    PptParserVisitor::parseSpecialInfo(this, (PptSpecialInfo *)((char *)v5 + 8), v6, i);
    PptParserVisitor::parseSpecialInfo9(this, (PptSpecialInfoRun *)((char *)v5 + 20), v6, i);
  }
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != i)
  {
LABEL_8:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

PptSpecialInfoRun *PptTextBlockSpecialInfoAtom::addSpecialInfoRun(PptTextBlockSpecialInfoAtom *this)
{
  uint64_t v2 = (PptSpecialInfoRun *)operator new(0x28uLL);
  PptSpecialInfoRun::PptSpecialInfoRun(v2);
  unint64_t v3 = *((void *)this + 8);
  int v4 = (PptSpecialInfoRun **)*((void *)this + 7);
  if ((unint64_t)v4 >= v3)
  {
    uint64_t v6 = *((void *)this + 6);
    unint64_t v7 = (unint64_t)v4 - v6;
    unint64_t v8 = (v3 - v6) >> 3;
    unsigned int v9 = 2 * v8;
    if (2 * (int)v8 <= (v7 >> 3) + 1) {
      unsigned int v9 = (v7 >> 3) + 1;
    }
    if (v8 >= 0x7FFFFFFF) {
      unint64_t v10 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10)
    {
      unsigned int v11 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 64, v10);
      uint64_t v13 = v12;
    }
    else
    {
      unsigned int v11 = 0;
      uint64_t v13 = 0;
    }
    unsigned int v14 = (PptSpecialInfoRun **)&v11[v7 & 0x7FFFFFFF8];
    uint64_t v15 = &v11[8 * v13];
    EshHeader *v14 = v2;
    unsigned int v5 = v14 + 1;
    uint64_t v17 = (char *)*((void *)this + 6);
    unsigned __int16 v16 = (char *)*((void *)this + 7);
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = (PptSpecialInfoRun *)*((void *)v16 - 1);
        v16 -= 8;
        *--unsigned int v14 = v18;
      }
      while (v16 != v17);
      unsigned __int16 v16 = (char *)*((void *)this + 6);
    }
    *((void *)this + 6) = v14;
    *((void *)this + 7) = v5;
    *((void *)this + 8) = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *int v4 = v2;
    unsigned int v5 = v4 + 1;
  }
  *((void *)this + 7) = v5;
  return v2;
}

void sub_238A8E2F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void PptSpecialInfoRun::PptSpecialInfoRun(PptSpecialInfoRun *this)
{
  *(_DWORD *)this = 0;
  char v1 = *((unsigned char *)this + 9) & 0xF8;
  *((unsigned char *)this + 8) &= 0xF8u;
  *((unsigned char *)this + 9) = v1;
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
  char v2 = *((unsigned char *)this + 22) & 0xE0;
  *((unsigned char *)this + 20) &= 0xFCu;
  *((unsigned char *)this + 21) &= ~1u;
  *((unsigned char *)this + 22) = v2;
  *((unsigned char *)this + 24) = 0;
  *((void *)this + 4) = 0;
}

uint64_t PptTextCharsAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void sub_238A8E5C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshAtom::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, EshAtom *a2)
{
  return 1;
}

void PptSlideAtom::PptSlideAtom(PptSlideAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBED258;
  *(void *)(v2 + 32) = &unk_26EBED300;
  *(_WORD *)(v2 + 92) = 0;
  *(unsigned char *)(v2 + 94) = 0;
  *(_OWORD *)(v2 + 52) = 0u;
  *(_OWORD *)(v2 + 68) = 0u;
}

uint64_t PptSlideAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptSlideAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4) {
    goto LABEL_8;
  }
  for (uint64_t i = 52; i != 84; i += 4)
    *(_DWORD *)((char *)a2 + i) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 12
    || (*((_DWORD *)a2 + 21) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 16)
    || (*((_DWORD *)a2 + 22) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 20))
  {
LABEL_8:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  char v6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  *((unsigned char *)a2 + 92) = v6 & 1;
  *((unsigned char *)a2 + 93) = (v6 & 2) != 0;
  *((unsigned char *)a2 + 94) = (v6 & 4) != 0;
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptColorSchemeAtom::PptColorSchemeAtom(PptColorSchemeAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom((EshAtom *)this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE95D0;
  *(void *)(v2 + 32) = &unk_26EBE9688;
  *(void *)(v2 + 48) = &unk_26EBE96C0;
  *(void *)&long long v3 = 255;
  *((void *)&v3 + 1) = 255;
  *(_OWORD *)(v2 + 56) = v3;
  *(_OWORD *)(v2 + 72) = v3;
  *(_OWORD *)(v2 + 88) = v3;
  *(_OWORD *)(v2 + 104) = v3;
}

uint64_t PptColorSchemeAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptColorSchemeAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), a2->var2.var1 + 8, 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  a2->var7.unsigned int var1 = v5;
  a2->var7.uint64_t var2 = BYTE1(v5);
  a2->var7.int var3 = BYTE2(v5);
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4) {
    goto LABEL_9;
  }
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  a2->var8.unsigned int var1 = v6;
  a2->var8.uint64_t var2 = BYTE1(v6);
  a2->var8.int var3 = BYTE2(v6);
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 8) {
    goto LABEL_9;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  a2->var9.unsigned int var1 = v7;
  a2->var9.uint64_t var2 = BYTE1(v7);
  a2->var9.int var3 = BYTE2(v7);
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 12) {
    goto LABEL_9;
  }
  uint64_t v8 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  a2->var10.unsigned int var1 = v8;
  a2->var10.uint64_t var2 = BYTE1(v8);
  a2->var10.int var3 = BYTE2(v8);
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 16) {
    goto LABEL_9;
  }
  uint64_t v9 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  a2->var11.unsigned int var1 = v9;
  a2->var11.uint64_t var2 = BYTE1(v9);
  a2->var11.int var3 = BYTE2(v9);
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 20) {
    goto LABEL_9;
  }
  uint64_t v10 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  a2->var12.unsigned int var1 = v10;
  a2->var12.uint64_t var2 = BYTE1(v10);
  a2->var12.int var3 = BYTE2(v10);
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 24
    || (uint64_t v11 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1)),
        a2->var13.unsigned int var1 = v11,
        a2->var13.uint64_t var2 = BYTE1(v11),
        a2->var13.int var3 = BYTE2(v11),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 28))
  {
LABEL_9:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  uint64_t v12 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  a2->var14.unsigned int var1 = v12;
  a2->var14.uint64_t var2 = BYTE1(v12);
  a2->var14.int var3 = BYTE2(v12);
  PptParserVisitor::endRead(this, (EshRecord *)a2);
  return 1;
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshContainer *a2)
{
  uint64_t v4 = *((void *)this + 3);
  int Offset = EshRecord::getOffset(a2);
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, (Offset + 8), 0);
  EshContainer::removeChildren((uint64_t)a2);
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
  int DataLength = EshRecord::getDataLength(a2);
  EshContainer::removeChildren((uint64_t)a2);
  uint64_t v8 = (EshHeader *)operator new(0x10uLL);
  EshHeader::makeDefault(v8);
  unsigned int v9 = DataLength + v6;
  while (v6 < v9)
  {
    EshParserVisitor::visit(this, v8, v6);
    EshContainer::addChild(a2, v8);
    BOOL v10 = (int)v6 + v8->var0 + 8 >= v6;
    uint64_t v6 = (v6 + v8->var0 + 8);
    if (!v10)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 7013;
    }
  }
  if (v6 > v9)
  {
    uint64_t v13 = __cxa_allocate_exception(4uLL);
    *uint64_t v13 = 7013;
  }
  (*(void (**)(void, void, void))(**((void **)this + 3) + 16))(*((void *)this + 3), (*((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3) + 8), 0);
  EshParserVisitor::endRead(this, a2);
  if (v8) {
    MEMORY[0x23EC997B0](v8, 0x1000C408B6DE1C6);
  }
  return 1;
}

void sub_238A8F148(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t EshContainer::getHeaderOfType(EshContainer *this, int a2)
{
  return EshContainer::getHeaderOfType(this, a2, 0xFFFFu);
}

uint64_t EshContainer::getHeaderOfType(EshContainer *this, int a2, unsigned __int16 a3)
{
  unsigned int IndexOfChild = EshContainer::getIndexOfChild(this, a2, a3);
  if (IndexOfChild == -1) {
    return 0;
  }
  uint64_t v5 = *((void *)this + 4);
  if (IndexOfChild >= ((unint64_t)(*((void *)this + 5) - v5) >> 3)) {
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  return *(void *)(v5 + 8 * IndexOfChild);
}

uint64_t EshContainer::getIndexOfChild(EshContainer *this, int a2, unsigned __int16 a3)
{
  uint64_t v3 = *((void *)this + 4);
  unint64_t v4 = *((void *)this + 5) - v3;
  if ((v4 & 0x7FFFFFFF8) == 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  uint64_t v6 = (v4 >> 3);
  while (1)
  {
    uint64_t v7 = *(void *)(v3 + 8 * result);
    if (*(unsigned __int16 *)(v7 + 10) == a2 && (a3 == 0xFFFF || *(unsigned __int16 *)(v7 + 8) == a3)) {
      break;
    }
    if (v6 == ++result) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t EshSp::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t EshParserVisitor::visit(EshParserVisitor *a1, EshRecord *this)
{
  uint64_t v4 = *((void *)a1 + 3);
  int Offset = EshRecord::getOffset(this);
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, (Offset + 8), 0);
  *((_DWORD *)this + 7) = (*(uint64_t (**)(void))(**((void **)a1 + 3) + 104))(*((void *)a1 + 3));
  int16x8_t v6 = (int16x8_t)((__n128 (*)(void))*(void *)(**((void **)a1 + 3) + 96))(*((void *)a1 + 3));
  *((unsigned char *)this + 32) = v7 & 1;
  v6.i64[0] = *(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(v7) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)((char *)this + 33) = vmovn_s16(v6).u32[0];
  *((unsigned char *)this + 37) = (v7 & 0x20) != 0;
  *((unsigned char *)this + 38) = (v7 & 0x40) != 0;
  *((unsigned char *)this + 39) = (v7 & 0x80) != 0;
  int16x8_t v8 = (int16x8_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v7), (uint32x4_t)xmmword_238EDE0B0);
  *(int8x8_t *)v8.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v8), (int8x8_t)0x1000100010001);
  *((_DWORD *)this + 10) = vmovn_s16(v8).u32[0];
  EshParserVisitor::endRead(a1, this);
  return 1;
}

{
  uint64_t v4;
  int Offset;

  uint64_t v4 = *((void *)a1 + 3);
  int Offset = EshRecord::getOffset(this);
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, (Offset + 8), 0);
  *((_DWORD *)this + 7) = (*(uint64_t (**)(void))(**((void **)a1 + 3) + 104))(*((void *)a1 + 3));
  *((_DWORD *)this + 8) = (*(uint64_t (**)(void))(**((void **)a1 + 3) + 104))(*((void *)a1 + 3));
  EshParserVisitor::endRead(a1, this);
  return 1;
}

{
  uint64_t v4;
  int Offset;
  int v6;
  int v7;
  int v8;
  int v9;

  uint64_t v4 = *((void *)a1 + 3);
  int Offset = EshRecord::getOffset(this);
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, (Offset + 8), 0);
  if (EshRecord::getDataLength(this) == 8)
  {
    int16x8_t v6 = (*(uint64_t (**)(void))(**((void **)a1 + 3) + 72))(*((void *)a1 + 3));
    unsigned int v7 = (*(uint64_t (**)(void))(**((void **)a1 + 3) + 72))(*((void *)a1 + 3));
    int16x8_t v8 = (*(uint64_t (**)(void))(**((void **)a1 + 3) + 72))(*((void *)a1 + 3));
    unsigned int v9 = (*(uint64_t (**)(void))(**((void **)a1 + 3) + 72))(*((void *)a1 + 3));
  }
  else if (EshRecord::getDataLength(this) == 16)
  {
    unsigned int v7 = (*(uint64_t (**)(void))(**((void **)a1 + 3) + 96))(*((void *)a1 + 3));
    int16x8_t v6 = (*(uint64_t (**)(void))(**((void **)a1 + 3) + 96))(*((void *)a1 + 3));
    int16x8_t v8 = (*(uint64_t (**)(void))(**((void **)a1 + 3) + 96))(*((void *)a1 + 3));
    unsigned int v9 = (*(uint64_t (**)(void))(**((void **)a1 + 3) + 96))(*((void *)a1 + 3));
  }
  else
  {
    unsigned int v7 = 0;
    int16x8_t v6 = 0;
    int16x8_t v8 = 0;
    unsigned int v9 = 0;
  }
  *((_DWORD *)this + 7) = v7;
  *((_DWORD *)this + 8) = v6;
  *((_DWORD *)this + 9) = v8;
  *((_DWORD *)this + 10) = v9;
  EshParserVisitor::endRead(a1, this);
  return 1;
}

{
  uint64_t v4;
  int Offset;
  uint64_t v6;
  int v7;

  uint64_t v4 = *((void *)a1 + 3);
  int Offset = EshRecord::getOffset(this);
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, (Offset + 8), 0);
  EshParserVisitor::parseBlipUid(a1, (UID *)((char *)this + 28));
  if (**((_WORD **)this + 6)) {
    EshParserVisitor::parseBlipUid(a1, (UID *)((char *)this + 56));
  }
  *((unsigned char *)this + 120) = (*(uint64_t (**)(void))(**((void **)a1 + 3) + 64))(*((void *)a1 + 3));
  int16x8_t v6 = (*((_DWORD *)this + 4) + *((_DWORD *)this + 3) + 8);
  unsigned int v7 = (*(uint64_t (**)(void))(**((void **)a1 + 3) + 40))(*((void *)a1 + 3));
  EshParserVisitor::delayReadData(a1, (OcBinaryData *)((char *)this + 72), v6 - v7);
  (*(void (**)(void, uint64_t, void))(**((void **)a1 + 3) + 16))(*((void *)a1 + 3), v6, 0);
  EshParserVisitor::endRead(a1, this);
  return 1;
}

{
  uint64_t v4;
  int Offset;

  uint64_t v4 = *((void *)a1 + 3);
  int Offset = EshRecord::getOffset(this);
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, (Offset + 8), 0);
  *((_DWORD *)this + 7) = (*(uint64_t (**)(void))(**((void **)a1 + 3) + 104))(*((void *)a1 + 3));
  *((_DWORD *)this + 8) = (*(uint64_t (**)(void))(**((void **)a1 + 3) + 104))(*((void *)a1 + 3));
  EshParserVisitor::endRead(a1, this);
  return 1;
}

{
  uint64_t v4;
  int Offset;

  uint64_t v4 = *((void *)a1 + 3);
  int Offset = EshRecord::getOffset(this);
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, (Offset + 8), 0);
  *((_DWORD *)this + 7) = (*(uint64_t (**)(void))(**((void **)a1 + 3) + 104))(*((void *)a1 + 3));
  *((_DWORD *)this + 8) = (*(uint64_t (**)(void))(**((void **)a1 + 3) + 104))(*((void *)a1 + 3));
  EshParserVisitor::endRead(a1, this);
  return 1;
}

{
  uint64_t v4;
  int Offset;

  uint64_t v4 = *((void *)a1 + 3);
  int Offset = EshRecord::getOffset(this);
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, (Offset + 8), 0);
  *((_DWORD *)this + 7) = (*(uint64_t (**)(void))(**((void **)a1 + 3) + 104))(*((void *)a1 + 3));
  *((_DWORD *)this + 8) = (*(uint64_t (**)(void))(**((void **)a1 + 3) + 104))(*((void *)a1 + 3));
  *((_DWORD *)this + 9) = (*(uint64_t (**)(void))(**((void **)a1 + 3) + 104))(*((void *)a1 + 3));
  *((_DWORD *)this + 10) = (*(uint64_t (**)(void))(**((void **)a1 + 3) + 104))(*((void *)a1 + 3));
  *((_DWORD *)this + 11) = (*(uint64_t (**)(void))(**((void **)a1 + 3) + 104))(*((void *)a1 + 3));
  *((_DWORD *)this + 12) = (*(uint64_t (**)(void))(**((void **)a1 + 3) + 104))(*((void *)a1 + 3));
  EshParserVisitor::endRead(a1, this);
  return 1;
}

void EshSp::~EshSp(EshSp *this)
{
}

void EshContainer::~EshContainer(EshContainer *this)
{
  EshContainer::~EshContainer(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBD7040;
  EshContainer::removeChildren((uint64_t)this);
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
}

void EshDg::EshDg(EshDg *this)
{
  EshAtom::EshAtom(this, 0xF008u, 0);
  *(void *)uint64_t v1 = &unk_26EBD7278;
  *(_DWORD *)(v1 + 28) = 0;
  *(_DWORD *)(v1 + 32) = 0;
}

uint64_t EshDg::accept(int a1, void *lpsrc)
{
  return v2();
}

void EshPatriarch::EshPatriarch(EshPatriarch *this)
{
  EshObject::EshObject((EshObject *)this, 5u);
  *(void *)uint64_t v1 = &unk_26EBD8790;
  *(_DWORD *)(v1 + 12) = 0;
}

uint64_t EshPatriarch::isAtom(EshPatriarch *this)
{
  return 1;
}

uint64_t EshBinaryReader::readObject(EshBinaryReader *this, EshPatriarch *a2)
{
  uint64_t v4 = (EshContainer *)operator new(0x38uLL);
  EshContainer::EshContainer(v4, 0xF004u);
  uint64_t v5 = (*(uint64_t (**)(EshBinaryReader *))(*(void *)this + 96))(this);
  (*(void (**)(EshBinaryReader *, EshContainer *, uint64_t))(*(void *)this + 104))(this, v4, v5);
  int16x8_t v6 = (EshSpgr *)operator new(0x30uLL);
  EshSpgr::EshSpgr(v6);
  uint64_t v7 = (*(uint64_t (**)(EshContainer *, void))(*(void *)v4 + 104))(v4, 0);
  (*(void (**)(EshBinaryReader *, EshSpgr *, uint64_t))(*(void *)this + 104))(this, v6, v7);
  int16x8_t v8 = (int *)operator new(0x30uLL);
  EshSp::EshSp((EshSp *)v8);
  uint64_t v9 = (*(uint64_t (**)(EshContainer *, uint64_t))(*(void *)v4 + 104))(v4, 1);
  (*(void (**)(EshBinaryReader *, int *, uint64_t))(*(void *)this + 104))(this, v8, v9);
  EshRecord::setDataLength((uint64_t)a2, v8[7]);
  (*(void (**)(int *))(*(void *)v8 + 8))(v8);
  if (v6) {
    (*(void (**)(EshSpgr *))(*(void *)v6 + 8))(v6);
  }
  BOOL v10 = *(uint64_t (**)(EshContainer *))(*(void *)v4 + 8);
  return v10(v4);
}

void sub_238A8F8BC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void EshSpgr::EshSpgr(EshSpgr *this)
{
  EshRectAtom::EshRectAtom(this, 0xF009u, 1u);
  void *v1 = &unk_26EBD7F10;
}

void EshRectAtom::EshRectAtom(EshRectAtom *this, unsigned __int16 a2, unsigned __int8 a3)
{
  EshAtom::EshAtom(this, a2, a3);
  *uint64_t v3 = &unk_26EBD7C70;
  *(void *)((char *)v3 + 36) = 0;
  *(void *)((char *)v3 + 28) = 0;
}

uint64_t EshRectAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t EshRecord::setDataLength(uint64_t this, int a2)
{
  *(_DWORD *)(this + 12) = a2;
  return this;
}

void EshSpgr::~EshSpgr(EshSpgr *this)
{
}

void PptEshShape::PptEshShape(PptEshShape *this)
{
  EshShape::EshShape((EshShape *)this);
  PptEshClientContainer::PptEshClientContainer((PptEshClientContainer *)(v2 + 576));
  *(void *)this = &unk_26EBEA3F0;
  *((void *)this + 52) = &unk_26EBEA4C8;
  *((void *)this + 72) = &unk_26EBEA508;
}

void sub_238A8FD84(_Unwind_Exception *a1)
{
  EshContentBase::~EshContentBase(v1);
  _Unwind_Resume(a1);
}

void EshShape::EshShape(EshShape *this)
{
  EshShapeBase::EshShapeBase((EshShapeBase *)this, 7u);
  *(void *)uint64_t v2 = &unk_26EBD88C0;
  *(void *)(v2 + 416) = &unk_26EBD8990;
  EshObject::EshObject((EshObject *)(v2 + 424), 0x12u);
  *((void *)this + 53) = &unk_26EBD9478;
  *((void *)this + 55) = (char *)this + 16;
  *((void *)this + 56) = &unk_26EBD95A0;
  EshObject::EshObject((EshObject *)((char *)this + 456), 0x17u);
  *((void *)this + 59) = (char *)this + 16;
  *((void *)this + 57) = &unk_26EBD8CD8;
  EshObject::EshObject((EshObject *)this + 30, 0x13u);
  *((void *)this + 62) = (char *)this + 16;
  *((void *)this + 60) = &unk_26EBD8D68;
  EshObject::EshObject((EshObject *)((char *)this + 504), 0xEu);
  *((void *)this + 65) = (char *)this + 16;
  *((void *)this + 63) = &unk_26EBD8E10;
  EshObject::EshObject((EshObject *)this + 33, 0x19u);
  *((void *)this + 68) = (char *)this + 16;
  *((void *)this + 66) = &unk_26EBD8EA0;
  EshObject::EshObject((EshObject *)((char *)this + 552), 0x11u);
  *((void *)this + 71) = (char *)this + 16;
  *((void *)this + 69) = &unk_26EBD8F30;
}

void sub_238A8FF28(_Unwind_Exception *a1)
{
  EshContentBase::~EshContentBase(v1);
  _Unwind_Resume(a1);
}

void PptEshClientContainer::PptEshClientContainer(PptEshClientContainer *this)
{
  *(void *)this = &unk_26EBEA140;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
}

BOOL PptEshShape::isAtom(PptEshShape *this)
{
  return ((*((void *)this + 74) - *((void *)this + 73)) & 0x7FFFFFFF8) == 0;
}

uint64_t EshBinaryReader::readObject(EshBinaryReader *this, EshShape *a2)
{
  uint64_t v4 = (EshContainer *)operator new(0x38uLL);
  EshContainer::EshContainer(v4, 0xF004u);
  uint64_t v5 = (*(uint64_t (**)(EshBinaryReader *))(*(void *)this + 96))(this);
  (*(void (**)(EshBinaryReader *, EshContainer *, uint64_t))(*(void *)this + 104))(this, v4, v5);
  for (uint64_t i = 0; ; uint64_t i = (i + 1))
  {
    unsigned int v7 = (*(uint64_t (**)(EshContainer *))(*(void *)v4 + 40))(v4);
    uint64_t v8 = *(void *)v4;
    if (i >= v7) {
      break;
    }
    int v9 = (*(uint64_t (**)(EshContainer *, uint64_t))(v8 + 48))(v4, i);
    uint64_t v10 = (*(uint64_t (**)(EshContainer *, uint64_t))(*(void *)v4 + 104))(v4, i);
    if (v9 <= 61724)
    {
      uint64_t v11 = (char *)a2 + 16;
      switch(v9)
      {
        case 61450:
          uint64_t v11 = (char *)a2 + 208;
          goto LABEL_9;
        case 61451:
          goto LABEL_9;
        case 61453:
          (*(void (**)(EshBinaryReader *, EshShape *, uint64_t))(*(void *)this + 184))(this, a2, v10);
          continue;
        case 61455:
          uint64_t v12 = (EshChildAnchor *)operator new(0x30uLL);
          EshChildAnchor::EshChildAnchor(v12);
          (*(void (**)(EshBinaryReader *, EshChildAnchor *, uint64_t))(*(void *)this + 104))(this, v12, v10);
          *((_DWORD *)a2 + 64) = *((_DWORD *)v12 + 7);
          *((_DWORD *)a2 + 65) = *((_DWORD *)v12 + 8);
          *((_DWORD *)a2 + 66) = *((_DWORD *)v12 + 9);
          *((_DWORD *)a2 + 67) = *((_DWORD *)v12 + 10);
          (*(void (**)(EshChildAnchor *))(*(void *)v12 + 8))(v12);
          continue;
        case 61456:
          uint64_t v13 = (void (**)(EshBinaryReader *, EshShape *, uint64_t))(*(void *)this + 168);
          goto LABEL_13;
        case 61457:
          uint64_t v13 = (void (**)(EshBinaryReader *, EshShape *, uint64_t))(*(void *)this + 176);
LABEL_13:
          (*v13)(this, a2, v10);
          continue;
        default:
          goto LABEL_19;
      }
    }
    if (v9 != 61725)
    {
      uint64_t v11 = (char *)a2 + 80;
      if (v9 != 61729)
      {
        uint64_t v11 = (char *)a2 + 144;
        if (v9 != 61730)
        {
LABEL_19:
          exception = __cxa_allocate_exception(4uLL);
          _DWORD *exception = 7013;
        }
      }
LABEL_9:
      (*(void (**)(EshBinaryReader *, char *, uint64_t))(*(void *)this + 104))(this, v11, v10);
    }
  }
  unsigned int v14 = *(uint64_t (**)(EshContainer *))(v8 + 8);
  return v14(v4);
}

void sub_238A9033C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  operator delete(v10);
  _Unwind_Resume(a1);
}

void PptEshReader::readClientAnchor(PptEshReader *this, EshContentBase *a2, const EshHeader *a3)
{
  if ((*(unsigned int (**)(EshContentBase *))(*(void *)a2 + 16))(a2) != 7
    && (*(unsigned int (**)(EshContentBase *))(*(void *)a2 + 16))(a2) != 6)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 7005;
  }
  if ((*(unsigned int (**)(EshContentBase *))(*(void *)a2 + 16))(a2) == 7)
  {
    int16x8_t v6 = (PptEshClientContainer *)(v5 + 576);
  }
  else
  {
    int16x8_t v6 = (PptEshClientContainer *)(v5 + 368);
  }
  if (v5) {
    unsigned int v7 = v6;
  }
  else {
    unsigned int v7 = 0;
  }
  PptEshClientContainer::addChild(v7, a3);
}

void PptEshClientContainer::addChild(PptEshClientContainer *this, const EshHeader *a2)
{
  uint64_t v4 = operator new(0x10uLL);
  EshHeader::operator=((uint64_t)v4, (uint64_t)a2);
  unint64_t v5 = *((void *)this + 3);
  int16x8_t v6 = (void *)*((void *)this + 2);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *((void *)this + 1);
    unint64_t v9 = (unint64_t)v6 - v8;
    unint64_t v10 = (v5 - v8) >> 3;
    unsigned int v11 = 2 * v10;
    if (2 * (int)v10 <= (v9 >> 3) + 1) {
      unsigned int v11 = (v9 >> 3) + 1;
    }
    if (v10 >= 0x7FFFFFFF) {
      unint64_t v12 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 24, v12);
      uint64_t v15 = v14;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v15 = 0;
    }
    unsigned __int16 v16 = &v13[v9 & 0x7FFFFFFF8];
    uint64_t v17 = &v13[8 * v15];
    *(void *)unsigned __int16 v16 = v4;
    unsigned int v7 = v16 + 8;
    uint64_t v19 = (char *)*((void *)this + 1);
    uint64_t v18 = (char *)*((void *)this + 2);
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*((void *)this + 1);
    }
    *((void *)this + 1) = v16;
    *((void *)this + 2) = v7;
    *((void *)this + 3) = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    void *v6 = v4;
    unsigned int v7 = v6 + 1;
  }
  *((void *)this + 2) = v7;
}

void sub_238A90610(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x23EC997B0](v1, 0x1000C408B6DE1C6);
  }
  _Unwind_Resume(exception_object);
}

void PptEshReader::readClientData(PptEshReader *this, EshContentBase *a2, const EshHeader *a3)
{
  if ((*(unsigned int (**)(EshContentBase *))(*(void *)a2 + 16))(a2) != 7
    && (*(unsigned int (**)(EshContentBase *))(*(void *)a2 + 16))(a2) != 6
    && (*(unsigned int (**)(EshContentBase *))(*(void *)a2 + 16))(a2) != 12)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 7005;
  }
  if ((*(unsigned int (**)(EshContentBase *))(*(void *)a2 + 16))(a2) == 7)
  {
    int16x8_t v6 = (PptEshClientContainer *)(v5 + 576);
  }
  else if ((*(unsigned int (**)(EshContentBase *))(*(void *)a2 + 16))(a2) == 6)
  {
    int16x8_t v6 = (PptEshClientContainer *)(v5 + 368);
  }
  else
  {
    int16x8_t v6 = (PptEshClientContainer *)(v5 + 328);
  }
  if (v5) {
    unsigned int v7 = v6;
  }
  else {
    unsigned int v7 = 0;
  }
  PptEshClientContainer::addChild(v7, a3);
}

void PptEshReader::readClientTextBox(PptEshReader *this, EshShape *lpsrc, const EshHeader *a3)
{
  if (v4) {
    unint64_t v5 = (PptEshClientContainer *)(v4 + 576);
  }
  else {
    unint64_t v5 = 0;
  }
  PptEshClientContainer::addChild(v5, a3);
}

uint64_t PptEshShape::getNumChildren(PptEshShape *this)
{
  return (*((void *)this + 74) - *((void *)this + 73)) >> 3;
}

uint64_t PptEshShape::getChildType(PptEshShape *this, unsigned int a2)
{
  return PptEshClientContainer::getChildType((PptEshShape *)((char *)this + 576), a2);
}

uint64_t PptEshClientContainer::getChildType(PptEshClientContainer *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (((unint64_t)(*((void *)this + 2) - v2) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  return *(unsigned __int16 *)(*(void *)(v2 + 8 * a2) + 10);
}

uint64_t PptEshShape::getChildVersion(PptEshShape *this, unsigned int a2)
{
  return PptEshClientContainer::getChildVersion((PptEshShape *)((char *)this + 576), a2);
}

uint64_t PptEshClientContainer::getChildVersion(PptEshClientContainer *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (((unint64_t)(*((void *)this + 2) - v2) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  return *(unsigned __int8 *)(*(void *)(v2 + 8 * a2) + 12);
}

void PptEshClientAnchor::PptEshClientAnchor(PptEshClientAnchor *this)
{
  EshRectAtom::EshRectAtom(this, 0xF010u, 0);
  void *v1 = &unk_26EBEA0B0;
}

void PptEshClientData::PptEshClientData(PptEshClientData *this)
{
  EshContainer::EshContainer(this, 0xF011u);
  void *v1 = &unk_26EBEA178;
}

void PptOEPlaceholderAtom::PptOEPlaceholderAtom(PptOEPlaceholderAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom((EshAtom *)this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEC760;
  *(void *)(v2 + 32) = &unk_26EBEC808;
  *(_DWORD *)(v2 + 48) = -1;
  *(_WORD *)(v2 + 52) = -256;
}

uint64_t PptOEPlaceholderAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptOEPlaceholderAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), a2->var2.var1 + 8, 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  a2->var6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4
    || (*((unsigned char *)a2 + 52) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 5)
    || (*((unsigned char *)a2 + 53) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 6))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  PptSkipVisitor::skipUnknownBytes(*((PptSkipVisitor **)this + 3), (const EshRecord *)a2, 2u);
  PptParserVisitor::endRead(this, (EshRecord *)a2);
  return 1;
}

void PptEshClientTextBox::PptEshClientTextBox(PptEshClientTextBox *this)
{
  EshContainer::EshContainer(this, 0xF00Du);
  void *v1 = &unk_26EBEA228;
}

void PptBaseTextPropertyAtom::PptBaseTextPropertyAtom(PptBaseTextPropertyAtom *this, const EshHeader *a2)
{
  PptTextBlockStylingAtom::PptTextBlockStylingAtom(this, a2);
  *uint64_t v2 = &unk_26EBE8D00;
  v2[4] = &unk_26EBE8DA8;
}

uint64_t PptBaseTextPropertyAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptBaseTextPropertyAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  unsigned int v4 = *((_DWORD *)this + 12);
  if (v4 >= 6)
  {
    unsigned int v5 = v4 / 6;
    do
    {
      int v6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
      unsigned int v7 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
      uint64_t v8 = (PptParaRun *)operator new(0x38uLL);
      PptParaRun::PptParaRun(v8);
      if (v7 <= 5) {
        __int16 v9 = v7;
      }
      else {
        __int16 v9 = 0;
      }
      *(_DWORD *)uint64_t v8 = v6;
      *((_WORD *)v8 + 2) = v9;
      EshDgg::addIdCluster(a2, (uint64_t)v8);
      --v5;
    }
    while (v5);
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void sub_238A90F50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void PptGenericDateMCAtom::PptGenericDateMCAtom(PptGenericDateMCAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEB7E0;
  *(void *)(v2 + 32) = &unk_26EBEB888;
}

uint64_t PptGenericDateMCAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptGenericDateMCAtom *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptFooterMCAtom::PptFooterMCAtom(PptFooterMCAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEB6E8;
  *(void *)(v2 + 32) = &unk_26EBEB790;
}

uint64_t PptFooterMCAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptFooterMCAtom *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptSlideNumberMCAtom::PptSlideNumberMCAtom(PptSlideNumberMCAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBED448;
  *(void *)(v2 + 32) = &unk_26EBED4F0;
}

uint64_t PptSlideNumberMCAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptSlideNumberMCAtom *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptEshBackground::PptEshBackground(PptEshBackground *this)
{
  EshBackground::EshBackground(this);
  PptEshClientContainer::PptEshClientContainer((PptEshClientContainer *)(v2 + 328));
  *(void *)this = &unk_26EBE9E10;
  *((void *)this + 41) = &unk_26EBE9E98;
}

void sub_238A914BC(_Unwind_Exception *a1)
{
  EshContentBase::~EshContentBase(v1);
  _Unwind_Resume(a1);
}

void EshBackground::EshBackground(EshBackground *this)
{
  EshContentBase::EshContentBase(this, 0xCu);
  v2->int var0 = (void **)&unk_26EBD8060;
  uint64_t v3 = v2 + 1;
  EshObject::EshObject(v2 + 17, 0xDu);
  *((void *)this + 34) = &unk_26EBD81A8;
  *((void *)this + 36) = v3;
  *((void *)this + 37) = &unk_26EBD8268;
  EshObject::EshObject((EshObject *)this + 19, 0x14u);
  *((void *)this + 40) = v3;
  *((void *)this + 38) = &unk_26EBD8118;
}

void sub_238A91590(_Unwind_Exception *a1)
{
  EshContentBase::~EshContentBase(v1);
  _Unwind_Resume(a1);
}

BOOL PptEshBackground::isAtom(PptEshBackground *this)
{
  return ((*((void *)this + 43) - *((void *)this + 42)) & 0x7FFFFFFF8) == 0;
}

uint64_t EshBinaryReader::readObject(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (EshContainer *)operator new(0x38uLL);
  EshContainer::EshContainer(v4, 0xF004u);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  (*(void (**)(uint64_t, EshContainer *, uint64_t))(*(void *)a1 + 104))(a1, v4, v5);
  for (uint64_t i = 0; ; uint64_t i = (i + 1))
  {
    unsigned int v7 = (*(uint64_t (**)(EshContainer *))(*(void *)v4 + 40))(v4);
    uint64_t v8 = *(void *)v4;
    if (i >= v7) {
      break;
    }
    int v9 = (*(uint64_t (**)(EshContainer *, uint64_t))(v8 + 48))(v4, i);
    uint64_t v10 = (*(uint64_t (**)(EshContainer *, uint64_t))(*(void *)v4 + 104))(v4, i);
    if (v9 > 61456)
    {
      if (v9 != 61457)
      {
        if (v9 != 61730) {
          continue;
        }
        uint64_t v11 = a2 + 144;
LABEL_10:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 104))(a1, v11, v10);
        continue;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 176))(a1, a2, v10);
    }
    else
    {
      uint64_t v11 = a2 + 208;
      if (v9 == 61450) {
        goto LABEL_10;
      }
      uint64_t v11 = a2 + 16;
      if (v9 == 61451) {
        goto LABEL_10;
      }
    }
  }
  unint64_t v12 = *(uint64_t (**)(EshContainer *))(v8 + 8);
  return v12(v4);
}

void sub_238A91808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t PptEshBackground::getNumChildren(PptEshBackground *this)
{
  return (*((void *)this + 43) - *((void *)this + 42)) >> 3;
}

void PptSlideTime10Atom::PptSlideTime10Atom(PptSlideTime10Atom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBF1DF0;
  *(void *)(v2 + 32) = &unk_26EBF1E98;
}

uint64_t PptSlideTime10Atom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptSlideTime10Atom *a2)
{
  return 1;
}

void PptOutlineTextRefAtom::PptOutlineTextRefAtom(PptOutlineTextRefAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBECA48;
  *(void *)(v2 + 32) = &unk_26EBECAF0;
  *(_DWORD *)(v2 + 48) = 0;
}

uint64_t PptOutlineTextRefAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptOutlineTextRefAtom *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptTextGenericRulerAtom::PptTextGenericRulerAtom(PptTextGenericRulerAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEE3E0;
  *(void *)(v2 + 32) = &unk_26EBEE488;
  *(void *)(v2 + 56) = -1;
  *(void *)(v2 + 64) = -1;
  *(void *)(v2 + 70) = -1;
  *(void *)(v2 + 48) = 0;
}

uint64_t PptTextGenericRulerAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextGenericRulerAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  Endint Offset = EshRecord::getEndOffset(a2);
  unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  if (v5) {
    *((_WORD *)a2 + 38) = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  }
  if ((v5 & 4) != 0)
  {
    int v6 = operator new(0x18uLL);
    v6[1] = 0;
    v6[2] = 0;
    void *v6 = 0;
    *((void *)a2 + 6) = v6;
    PptParserVisitor::parseTabs((uint64_t)this, v6, EndOffset);
  }
  for (int i = 0; i != 5; ++i)
  {
    if (((v5 >> i) & 8) != 0)
    {
      __int16 v8 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
      PptTextGenericRulerAtom::setIndent((uint64_t)a2, (__int16)i, v8);
    }
    if (((v5 >> i) & 0x100) != 0)
    {
      __int16 v9 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
      PptTextGenericRulerAtom::setFirstLine((uint64_t)a2, (__int16)i, v9);
    }
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptTextGenericRulerAtom::setIndent(uint64_t this, int a2, __int16 a3)
{
  if (a2 >= 5)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  *(_WORD *)(this + 2 * a2 + 56) = a3;
  return this;
}

uint64_t **EshOpt::takeStringProperty(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  int v6 = *(uint64_t **)(a1 + 40);
  if (!v6) {
    goto LABEL_9;
  }
  while (1)
  {
    unsigned int v7 = *((_DWORD *)v6 + 8);
    if (v7 <= a2) {
      break;
    }
LABEL_5:
    int v6 = (uint64_t *)*v6;
    if (!v6) {
      goto LABEL_9;
    }
  }
  if (v7 < a2)
  {
    ++v6;
    goto LABEL_5;
  }
  unsigned int v10 = a2;
  uint64_t v11 = &v10;
  __int16 v8 = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v10, (uint64_t)&std::piecewise_construct, &v11)[5];
  if (v8) {
    (*(void (**)(uint64_t *))(*v8 + 8))(v8);
  }
LABEL_9:
  unsigned int v10 = a2;
  uint64_t v11 = &v10;
  uint64_t result = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v10, (uint64_t)&std::piecewise_construct, &v11);
  result[5] = a3;
  result[6] = 0;
  return result;
}

void PptAnimHashCode10Atom::PptAnimHashCode10Atom(PptAnimHashCode10Atom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE8638;
  *(void *)(v2 + 32) = &unk_26EBE86E0;
  *(_DWORD *)(v2 + 48) = 0;
}

uint64_t PptAnimHashCode10Atom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimHashCode10Atom *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptAnimNodeAtom::PptAnimNodeAtom(PptAnimNodeAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBF1060;
  *(void *)(v2 + 32) = &unk_26EBF1108;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = 0;
}

uint64_t PptAnimNodeAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimNodeAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 15) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 20
    || ((*(void (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1)),
        *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1)),
        *((unsigned char *)a2 + 64) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 32))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptAnimVariantAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimVariantAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 1)
  {
LABEL_19:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  switch(*((_DWORD *)a2 + 12))
  {
    case 0:
      if (EshRecord::getDataLength(a2) != 2) {
        goto LABEL_19;
      }
      unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
      if (v5 >= 2) {
        goto LABEL_19;
      }
      PptAnimVariantAtom::setBoolean((uint64_t)a2, v5 != 0);
      break;
    case 1:
      if (EshRecord::getDataLength(a2) != 5) {
        goto LABEL_19;
      }
      int v13 = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
      PptAnimVariantAtom::setInteger((uint64_t)a2, v13);
      break;
    case 2:
      if (EshRecord::getDataLength(a2) != 5) {
        goto LABEL_19;
      }
      float v6 = (*(float (**)(void))(**((void **)this + 1) + 112))(*((void *)this + 1));
      PptAnimVariantAtom::setReal((uint64_t)a2, v6);
      break;
    case 3:
      if ((int)EshRecord::getDataLength(a2) <= 2 || (EshRecord::getDataLength(a2) & 0x80000001) != 1) {
        goto LABEL_19;
      }
      unsigned int v7 = (CsString *)operator new(0x18uLL);
      CsString::CsString(v7);
      int DataLength = EshRecord::getDataLength(a2);
      int v9 = DataLength - 1;
      if (DataLength < 1) {
        int v9 = DataLength;
      }
      int v17 = v9 >> 1;
      CsString::reserve(v7, v9 >> 1);
      v7->uint64_t var2 = 0;
      bzero(v7->var1, 2 * v7->var3);
      (*(void (**)(void, int *, unsigned __int16 *))(**((void **)this + 1) + 136))(*((void *)this + 1), &v17, v7->var1);
      int v10 = v17;
      int v11 = EshRecord::getDataLength(a2);
      int v12 = v11 - 1;
      if (v11 < 1) {
        int v12 = v11;
      }
      if (v10 > v12 >> 1)
      {
        unsigned __int16 v16 = __cxa_allocate_exception(4uLL);
        _DWORD *v16 = 4003;
      }
      CsString::setCount(v7, v17 - 1);
      PptAnimVariantAtom::setWString(a2, v7);
      (*((void (**)(CsString *))v7->var0 + 1))(v7);
      break;
    default:
      break;
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void sub_238A92960(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t PptAnimVariantAtom::setInteger(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = 1;
  *(_DWORD *)(this + 56) = a2;
  return this;
}

uint64_t PptBinaryReader::getDocumentRef(PptBinaryReader *this)
{
  return *(unsigned int *)(*((void *)this + 24) + 84);
}

void sub_238A92B14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A92C00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A92DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238A92EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238A92FC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A93174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238A933F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238A93980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A93AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238A93ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

char *PptParaProperty::copyValuesOfNonOverriddenPropertiesFromParent(char *this, const PptParaProperty *a2)
{
  uint64_t v3 = this;
  int v4 = *(unsigned __int16 *)this;
  int v5 = v4 | (this[2] << 16);
  if (v4)
  {
    if ((v4 & 2) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    *(_WORD *)(this + 3) = *(_WORD *)(this + 3) & 0xFFFE | *(_WORD *)((unsigned char *)a2 + 3) & 1;
    if ((v5 & 2) != 0)
    {
LABEL_3:
      if ((v5 & 4) != 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  *(_WORD *)(this + 3) = *(_WORD *)(this + 3) & 0xFFFD | *(_WORD *)((unsigned char *)a2 + 3) & 2;
  if ((v5 & 4) != 0)
  {
LABEL_4:
    if ((v5 & 8) != 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_25:
  *(_WORD *)(this + 3) = *(_WORD *)(this + 3) & 0xFFFB | *(_WORD *)((unsigned char *)a2 + 3) & 4;
  if ((v5 & 8) != 0)
  {
LABEL_5:
    if ((v5 & 0x10) != 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
LABEL_26:
  *(_WORD *)(this + 3) = *(_WORD *)(this + 3) & 0xFFF7 | *(_WORD *)((unsigned char *)a2 + 3) & 8;
  if ((v5 & 0x10) != 0)
  {
LABEL_6:
    if ((v5 & 0x20) != 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }
LABEL_27:
  *((_WORD *)this + 4) = *((_WORD *)a2 + 4);
  if ((v5 & 0x20) != 0)
  {
LABEL_7:
    if ((v5 & 0x40) != 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
LABEL_28:
  *(void *)(this + 12) = *(void *)((char *)a2 + 12);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  if ((v5 & 0x40) != 0)
  {
LABEL_8:
    if ((v5 & 0x80) != 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }
LABEL_29:
  *((_WORD *)this + 5) = *((_WORD *)a2 + 5);
  if ((v5 & 0x80) != 0)
  {
LABEL_9:
    if ((v5 & 0x100) != 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  *((_WORD *)this + 3) = *((_WORD *)a2 + 3);
  if ((v5 & 0x100) != 0)
  {
LABEL_10:
    if ((v5 & 0x200) != 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }
LABEL_31:
  *((_WORD *)this + 15) = *((_WORD *)a2 + 15);
  if ((v5 & 0x200) != 0)
  {
LABEL_11:
    if ((v5 & 0x400) != 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }
LABEL_32:
  *((_WORD *)this + 16) = *((_WORD *)a2 + 16);
  if ((v5 & 0x400) != 0)
  {
LABEL_12:
    if ((v5 & 0x800) != 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }
LABEL_33:
  *(_WORD *)(this + 3) = *(_WORD *)(this + 3) & 0xF0FF | *(_WORD *)((unsigned char *)a2 + 3) & 0xF00;
  if ((v5 & 0x800) != 0)
  {
LABEL_13:
    if ((v5 & 0x1000) != 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }
LABEL_34:
  *((_WORD *)this + 12) = *((_WORD *)a2 + 12);
  if ((v5 & 0x1000) != 0)
  {
LABEL_14:
    if ((v5 & 0x2000) != 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }
LABEL_35:
  *((_WORD *)this + 13) = *((_WORD *)a2 + 13);
  if ((v5 & 0x2000) != 0)
  {
LABEL_15:
    if ((v5 & 0x4000) != 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }
LABEL_36:
  *((_WORD *)this + 14) = *((_WORD *)a2 + 14);
  if ((v5 & 0x4000) != 0)
  {
LABEL_16:
    if ((v5 & 0x10000) != 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }
LABEL_37:
  *((_WORD *)this + 17) = *((_WORD *)a2 + 17);
  if ((v5 & 0x10000) != 0)
  {
LABEL_17:
    if ((v5 & 0x20000) != 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }
LABEL_38:
  *(_WORD *)(this + 3) = *(_WORD *)(this + 3) & 0xCFFF | *(_WORD *)((unsigned char *)a2 + 3) & 0x3000;
  if ((v5 & 0x20000) != 0)
  {
LABEL_18:
    if ((v5 & 0x40000) != 0) {
      goto LABEL_19;
    }
    goto LABEL_40;
  }
LABEL_39:
  *(_WORD *)(this + 3) = *(_WORD *)(this + 3) & 0xFFEF | *(_WORD *)((unsigned char *)a2 + 3) & 0x10;
  if ((v5 & 0x40000) != 0)
  {
LABEL_19:
    if ((v5 & 0x80000) != 0) {
      goto LABEL_20;
    }
    goto LABEL_41;
  }
LABEL_40:
  *(_WORD *)(this + 3) = *(_WORD *)(this + 3) & 0xFFDF | *(_WORD *)((unsigned char *)a2 + 3) & 0x20;
  if ((v5 & 0x80000) != 0)
  {
LABEL_20:
    if ((v5 & 0x100000) != 0) {
      goto LABEL_21;
    }
LABEL_42:
    *(_WORD *)(this + 3) = *(_WORD *)(this + 3) & 0xFF7F | *(_WORD *)((unsigned char *)a2 + 3) & 0x80;
    if ((v5 & 0x8000) != 0) {
      return this;
    }
    goto LABEL_43;
  }
LABEL_41:
  *(_WORD *)(this + 3) = *(_WORD *)(this + 3) & 0xFFBF | *(_WORD *)((unsigned char *)a2 + 3) & 0x40;
  if ((v5 & 0x100000) == 0) {
    goto LABEL_42;
  }
LABEL_21:
  if ((v5 & 0x8000) != 0) {
    return this;
  }
LABEL_43:
  if (!*((void *)this + 5))
  {
    if (*((void *)a2 + 5))
    {
      this = (char *)operator new(0x18uLL);
      *((void *)this + 1) = 0;
      *((void *)this + 2) = 0;
      *(void *)this = 0;
      *((void *)v3 + 5) = this;
      float v6 = (uint64_t **)*((void *)a2 + 5);
      if (this != (char *)v6)
      {
        unsigned int v7 = *v6;
        __int16 v8 = v6[1];
        uint64_t v9 = v8 - *v6;
        return std::vector<PptTab,ChAllocator<PptTab>>::__assign_with_size[abi:ne180100]<PptTab*,PptTab*>((uint64_t)this, v7, v8, v9);
      }
    }
  }
  return this;
}

PptCharProperty *PptCharProperty::copyValuesOfNonOverriddenPropertiesFromParent(PptCharProperty *this, const PptCharProperty *a2)
{
  $4A9E05CF4EB813CDA9C8B3A246960F55 var0 = this->var0;
  if (*(_DWORD *)&this->var0)
  {
    if ((*(unsigned char *)&var0 & 2) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    *((_WORD *)this + 2) = *((_WORD *)this + 2) & 0xFFFE | *((_WORD *)a2 + 2) & 1;
    if ((*(unsigned char *)&var0 & 2) != 0)
    {
LABEL_3:
      if ((*(unsigned char *)&var0 & 4) != 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  *((_WORD *)this + 2) = *((_WORD *)this + 2) & 0xFFFD | *((_WORD *)a2 + 2) & 2;
  if ((*(unsigned char *)&var0 & 4) != 0)
  {
LABEL_4:
    if ((*(unsigned char *)&var0 & 8) != 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  *((_WORD *)this + 2) = *((_WORD *)this + 2) & 0xFFFB | *((_WORD *)a2 + 2) & 4;
  if ((*(unsigned char *)&var0 & 8) != 0)
  {
LABEL_5:
    if ((*(unsigned char *)&var0 & 0x10) != 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  *((_WORD *)this + 2) = *((_WORD *)this + 2) & 0xFFF7 | *((_WORD *)a2 + 2) & 8;
  if ((*(unsigned char *)&var0 & 0x10) != 0)
  {
LABEL_6:
    if ((*(unsigned char *)&var0 & 0x20) != 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  *((_WORD *)this + 2) = *((_WORD *)this + 2) & 0xFFEF | *((_WORD *)a2 + 2) & 0x10;
  if ((*(unsigned char *)&var0 & 0x20) != 0)
  {
LABEL_7:
    if ((*(unsigned char *)&var0 & 0x40) != 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  *((_WORD *)this + 2) = *((_WORD *)this + 2) & 0xFFDF | *((_WORD *)a2 + 2) & 0x20;
  if ((*(unsigned char *)&var0 & 0x40) != 0)
  {
LABEL_8:
    if ((*(unsigned char *)&var0 & 0x80) != 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  *((_WORD *)this + 2) = *((_WORD *)this + 2) & 0xFFBF | *((_WORD *)a2 + 2) & 0x40;
  if ((*(unsigned char *)&var0 & 0x80) != 0)
  {
LABEL_9:
    if ((*(_WORD *)&var0 & 0x100) != 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  *((_WORD *)this + 2) = *((_WORD *)this + 2) & 0xFF7F | *((_WORD *)a2 + 2) & 0x80;
  if ((*(_WORD *)&var0 & 0x100) != 0)
  {
LABEL_10:
    if ((*(_WORD *)&var0 & 0x200) != 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  *((_WORD *)this + 2) = *((_WORD *)this + 2) & 0xFEFF | *((_WORD *)a2 + 2) & 0x100;
  if ((*(_WORD *)&var0 & 0x200) != 0)
  {
LABEL_11:
    if ((*(_WORD *)&var0 & 0x400) != 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  *((_WORD *)this + 2) = *((_WORD *)this + 2) & 0xFDFF | *((_WORD *)a2 + 2) & 0x200;
  if ((*(_WORD *)&var0 & 0x400) != 0)
  {
LABEL_12:
    if ((*(_WORD *)&var0 & 0x800) != 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  this->var13 = a2->var13;
  if ((*(_WORD *)&var0 & 0x800) != 0)
  {
LABEL_13:
    if ((*(_WORD *)&var0 & 0x1000) != 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  this->var14 = a2->var14;
  if ((*(_WORD *)&var0 & 0x1000) != 0)
  {
LABEL_14:
    if ((*(_WORD *)&var0 & 0x2000) != 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
LABEL_31:
  this->var15 = a2->var15;
  if ((*(_WORD *)&var0 & 0x2000) != 0)
  {
LABEL_15:
    if ((*(_WORD *)&var0 & 0x4000) != 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }
LABEL_32:
  this->var16 = a2->var16;
  if ((*(_WORD *)&var0 & 0x4000) != 0)
  {
LABEL_16:
    if ((*(_WORD *)&var0 & 0x8000) != 0) {
      goto LABEL_17;
    }
    goto LABEL_34;
  }
LABEL_33:
  this->var17 = a2->var17;
  if ((*(_WORD *)&var0 & 0x8000) != 0)
  {
LABEL_17:
    if ((*(_DWORD *)&var0 & 0x10000) != 0) {
      return this;
    }
LABEL_35:
    this->var19 = a2->var19;
    return this;
  }
LABEL_34:
  this->var18 = a2->var18;
  if ((*(_DWORD *)&var0 & 0x10000) == 0) {
    goto LABEL_35;
  }
  return this;
}

void sub_238A94700(_Unwind_Exception *a1, void *a2, void *a3, ...)
{
  va_start(va, a3);

  OcSummary::~OcSummary((OcSummary *)va);
  _Unwind_Resume(a1);
}

void OcSummary::OcSummary(OcSummary *this)
{
  *(void *)this = &unk_26EBD9FD0;
  uint64_t v2 = (OcText *)((char *)this + 56);
  OcText::OcText((OcText *)((char *)this + 8));
  OcText::OcText(v2);
  OcText::OcText((OcText *)((char *)this + 104));
  OcText::OcText((OcText *)((char *)this + 152));
  OcText::OcText((OcText *)((char *)this + 200));
  OcText::OcText((OcText *)((char *)this + 248));
  OcText::OcText((OcText *)((char *)this + 296));
  OcText::OcText((OcText *)((char *)this + 344));
  OcText::OcText((OcText *)((char *)this + 392));
  OcText::OcText((OcText *)((char *)this + 440));
  OcText::OcText((OcText *)((char *)this + 488));
  OcText::OcText((OcText *)((char *)this + 536));
  OcText::OcText((OcText *)((char *)this + 584));
  OcText::OcText((OcText *)((char *)this + 632));
  OcBinaryData::OcBinaryData((OcBinaryData *)((char *)this + 712));
  *((_WORD *)this + 380) = 0;
  *((void *)this + 96) = 0;
  *((void *)this + 98) = 0;
  *((void *)this + 97) = 0;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
}

void sub_238A948F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OcText *a10, OcText *a11, OcText *a12, OcText *a13, OcText *a14)
{
  OcText::~OcText(v19);
  OcText::~OcText(v18);
  OcText::~OcText(v17);
  OcText::~OcText(v16);
  OcText::~OcText(v14);
  OcText::~OcText(v22);
  OcText::~OcText(v21);
  OcText::~OcText(v20);
  OcText::~OcText(a10);
  OcText::~OcText(a11);
  OcText::~OcText(a12);
  OcText::~OcText(a13);
  OcText::~OcText(v15);
  OcText::~OcText(a14);
  _Unwind_Resume(a1);
}

void sub_238A94994()
{
}

void sub_238A9499C()
{
}

void sub_238A949A4()
{
}

void sub_238A949AC()
{
}

void sub_238A949B4()
{
}

void sub_238A949BC()
{
}

void sub_238A949C4()
{
}

void sub_238A949CC()
{
}

void sub_238A949D4()
{
}

void OcText::OcText(OcText *this)
{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBDA008;
  *(_OWORD *)&this->unsigned int var1 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  this->var7 = 1;
}

unsigned __int8 *OcBinaryReader::readSummary(OcBinaryReader *this, OcSummary *a2)
{
  int v4 = OcBinaryReader::parseChUINT2Prop((uint64_t)this, 1, 1);
  int v5 = OcBinaryReader::parseChUINT2Prop((uint64_t)this, 2, 1);
  if (v5 > 931)
  {
    if (v5 > 1360)
    {
      if (v5 > 10078)
      {
        if ((v5 - 65000) >= 2 && v5 != 10079 && v5 != 10081) {
          goto LABEL_41;
        }
      }
      else if (((v5 - 10000) > 0x1D || ((1 << (v5 - 16)) & 0x200000C3) == 0) && v5 != 1361)
      {
        goto LABEL_41;
      }
    }
    else if (((v5 - 1200) > 0x3A || ((1 << (v5 + 80)) & 0x7FC000000000001) == 0) {
           && ((v5 - 932) > 0x12 || ((1 << (v5 + 92)) & 0x60011) == 0)
    }
           && v5 != 1026)
    {
      goto LABEL_41;
    }
LABEL_32:
    if (v4) {
      int v6 = v4;
    }
    else {
      int v6 = 1252;
    }
    if (v5) {
      int v7 = v5;
    }
    else {
      int v7 = 1252;
    }
    goto LABEL_38;
  }
  if (v5 > 707)
  {
    if (((v5 - 850) > 0x19 || ((1 << (v5 - 82)) & 0x309FCA5) == 0)
      && (v5 - 708) >= 3
      && ((v5 - 720) > 0x37 || ((1 << (v5 + 48)) & 0x80000000020001) == 0))
    {
      goto LABEL_41;
    }
    goto LABEL_32;
  }
  if (v5 > 36)
  {
    if (((v5 - 37) > 0x3F || ((1 << (v5 - 37)) & 0x8000000000000021) == 0)
      && v5 != 437
      && v5 != 500)
    {
      goto LABEL_41;
    }
    goto LABEL_32;
  }
  if (v5 < 5) {
    goto LABEL_32;
  }
LABEL_41:
  int v7 = 1252;
  if (v4) {
    int v6 = v4;
  }
  else {
    int v6 = 1252;
  }
LABEL_38:
  *((_DWORD *)a2 + 4) = v6;
  *((_DWORD *)a2 + 16) = v6;
  *((_DWORD *)a2 + 28) = v6;
  *((_DWORD *)a2 + 40) = v6;
  *((_DWORD *)a2 + 52) = v6;
  *((_DWORD *)a2 + 64) = v6;
  *((_DWORD *)a2 + 76) = v6;
  *((_DWORD *)a2 + 88) = v6;
  *((_DWORD *)a2 + 100) = v6;
  *((_DWORD *)a2 + 124) = v7;
  *((_DWORD *)a2 + 136) = v7;
  *((_DWORD *)a2 + 148) = v7;
  *((_DWORD *)a2 + 160) = v7;
  OcBinaryReader::parseStringProp((uint64_t)this, 1, 2, (OcText *)((char *)a2 + 8));
  OcBinaryReader::parseStringProp((uint64_t)this, 1, 3, (OcText *)((char *)a2 + 56));
  OcBinaryReader::parseStringProp((uint64_t)this, 1, 4, (OcText *)((char *)a2 + 104));
  OcBinaryReader::parseStringProp((uint64_t)this, 1, 5, (OcText *)((char *)a2 + 152));
  OcBinaryReader::parseStringProp((uint64_t)this, 1, 6, (OcText *)((char *)a2 + 200));
  OcBinaryReader::parseStringProp((uint64_t)this, 1, 7, (OcText *)((char *)a2 + 248));
  OcBinaryReader::parseStringProp((uint64_t)this, 1, 8, (OcText *)((char *)a2 + 296));
  OcBinaryReader::parseStringProp((uint64_t)this, 1, 9, (OcText *)((char *)a2 + 344));
  OcBinaryReader::parseStringProp((uint64_t)this, 1, 18, (OcText *)((char *)a2 + 392));
  OcBinaryReader::parseStringProp((uint64_t)this, 2, 2, (OcText *)((char *)a2 + 488));
  OcBinaryReader::parseStringProp((uint64_t)this, 2, 3, (OcText *)((char *)a2 + 536));
  OcBinaryReader::parseStringProp((uint64_t)this, 2, 14, (OcText *)((char *)a2 + 584));
  OcBinaryReader::parseStringProp((uint64_t)this, 2, 15, (OcText *)((char *)a2 + 632));
  OcBinaryReader::parseDateTimeProp((uint64_t)this, 1, 10, (unsigned int *)a2 + 170);
  OcBinaryReader::parseDateTimeProp((uint64_t)this, 1, 11, (unsigned int *)a2 + 172);
  OcBinaryReader::parseDateTimeProp((uint64_t)this, 1, 12, (unsigned int *)a2 + 174);
  OcBinaryReader::parseDateTimeProp((uint64_t)this, 1, 13, (unsigned int *)a2 + 176);
  *((unsigned char *)a2 + 761) = OcBinaryReader::parseBoolProp((uint64_t)this, 2, 16);
  *((unsigned char *)a2 + 760) = OcBinaryReader::parseBoolProp((uint64_t)this, 2, 11);
  OcBinaryReader::parseBLOBProp((uint64_t)this, 3, 4096, (uint64_t)a2 + 440);
  OcBinaryReader::parseHyperlinksProp(this, a2);
  return OcBinaryReader::parseClipboardProp((uint64_t)this, 1, 17, (OcBinaryData *)((char *)a2 + 712));
}

uint64_t OcBinaryReader::parseChUINT2Prop(uint64_t a1, int a2, uint64_t a3)
{
  int v12 = 7;
  int v11 = 0;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  SsrwOORootStorage::getDocumentProperty(v6, a2, a3, &v12, (void **)&v11);
  if (v11) {
    BOOL v7 = v12 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *v11;
  uint64_t v9 = (SsrwOORootStorage *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  SsrwOORootStorage::freeDocumentProperty(v9, (void **)&v11);
  return v8;
}

uint64_t PptBinaryReader::getRootStorage(PptBinaryReader *this)
{
  return (uint64_t)this + 40;
}

uint64_t SsrwOORootStorage::getDocumentProperty(uint64_t a1, int a2, uint64_t a3, int *a4, void **a5)
{
  uint64_t result = getDocumentProperty(*(void *)(a1 + 80), a2, a3, a4, a5);
  if ((result & 0xFFFFFFFE) == 0xC)
  {
    if (*a5)
    {
      return SsrwOORootStorage::freeDocumentProperty((SsrwOORootStorage *)result, a5);
    }
  }
  else if (result)
  {
    int v7 = result;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v7;
  }
  return result;
}

uint64_t getDocumentProperty(uint64_t a1, int a2, uint64_t a3, int *a4, void **a5)
{
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  if (!a1) {
    return 6;
  }
  uint64_t StorageFromRoot = 6;
  if ((a2 - 4) < 0xFFFFFFFD || !a4 || !a5) {
    return StorageFromRoot;
  }
  uint64_t v9 = (a2 - 1) > 2 ? 0 : *(&off_264D67758 + a2 - 1);
  uint64_t v20 = 0;
  __s = 0;
  __src = 0;
  uint64_t StorageFromRoot = getStorageFromRoot(a1, &v23);
  if (StorageFromRoot) {
    return StorageFromRoot;
  }
  uint64_t StorageFromRoot = propertyStorageOpen(v23, v9, &v24);
  if (StorageFromRoot) {
    return StorageFromRoot;
  }
  int v10 = v24;
  if (!v24) {
    return 6;
  }
  if (*v24)
  {
    uint64_t StorageFromRoot = propertySetGet(*v24, a3, (uint64_t)&v20);
    if (!StorageFromRoot)
    {
      free(v10);
      if ((unsigned __int16)v20 <= 0x1Du)
      {
        unsigned int v11 = 2;
        switch((__int16)v20)
        {
          case 2:
          case 11:
            goto LABEL_32;
          case 3:
            unsigned int v11 = 4;
            goto LABEL_32;
          case 5:
            goto LABEL_23;
          default:
            goto LABEL_45;
        }
      }
      if ((unsigned __int16)v20 > 0x40u)
      {
        if ((unsigned __int16)v20 == 65)
        {
          unsigned int v13 = __s;
        }
        else
        {
          if ((unsigned __int16)v20 != 71) {
            goto LABEL_45;
          }
          unsigned int v13 = *(_DWORD *)__s;
        }
        if (v13 >= 0xFFFFFFFC) {
          goto LABEL_44;
        }
        unsigned int v11 = v13 + 4;
      }
      else if ((unsigned __int16)v20 == 30)
      {
        int v14 = strlen(__s);
        if (v14 == -1) {
          goto LABEL_44;
        }
        unsigned int v11 = v14 + 1;
      }
      else
      {
        if ((unsigned __int16)v20 != 64) {
          goto LABEL_45;
        }
LABEL_23:
        unsigned int v11 = 8;
      }
LABEL_32:
      size_t v15 = v11;
      unsigned __int16 v16 = malloc_type_malloc(v11, 0x39E88954uLL);
      *a5 = v16;
      if (v16)
      {
        bzero(v16, v15);
        if ((unsigned __int16)v20 <= 0x1Du)
        {
          switch((__int16)v20)
          {
            case 2:
              memcpy(*a5, &__s, v15);
              int v17 = 0;
              goto LABEL_53;
            case 3:
              memcpy(*a5, &__s, v15);
              int v17 = 1;
              goto LABEL_53;
            case 5:
              memcpy(*a5, &__s, v15);
              int v17 = 7;
              goto LABEL_53;
            case 11:
              memcpy(*a5, &__s, v15);
              int v17 = 5;
              goto LABEL_53;
            default:
              goto LABEL_45;
          }
        }
        if ((unsigned __int16)v20 <= 0x40u)
        {
          if ((unsigned __int16)v20 == 30)
          {
            memcpy(*a5, __s, v15);
            int v17 = 2;
            goto LABEL_53;
          }
          if ((unsigned __int16)v20 == 64)
          {
            uint64_t v18 = time_tFromWinFileTime((unsigned int *)&__s, *a5);
            if (v18)
            {
              uint64_t StorageFromRoot = v18;
              propVariantCleanup((uint64_t)&v20);
              return StorageFromRoot;
            }
            int v17 = 3;
LABEL_53:
            *a4 = v17;
            return propVariantCleanup((uint64_t)&v20);
          }
LABEL_45:
          propVariantCleanup((uint64_t)&v20);
          return 12;
        }
        if ((unsigned __int16)v20 == 65)
        {
          uint64_t v19 = *a5;
          *uint64_t v19 = __s;
          memcpy(v19 + 1, __src, __s);
          int v17 = 6;
          goto LABEL_53;
        }
        if ((unsigned __int16)v20 != 71) {
          goto LABEL_45;
        }
        CsLeWriteUInt32(*(unsigned int *)__s, *a5);
        CsLeWriteUInt32(*((unsigned int *)__s + 1), (_DWORD *)*a5 + 1);
        if (*(_DWORD *)__s > 3u)
        {
          memcpy((char *)*a5 + 8, *((const void **)__s + 1), (*(_DWORD *)__s - 4));
          int v17 = 4;
          goto LABEL_53;
        }
      }
LABEL_44:
      propVariantCleanup((uint64_t)&v20);
      return 5;
    }
  }
  else
  {
    uint64_t StorageFromRoot = 6;
  }
  free(v10);
  return StorageFromRoot;
}

uint64_t propertyStorageOpen(uint64_t *a1, void *a2, uint64_t **a3)
{
  uint64_t v6 = (uint64_t *)malloc_type_malloc(0x10uLL, 0x20040A4A59CD2uLL);
  *a3 = v6;
  if (v6)
  {
    uint64_t *v6 = 0;
    v6[1] = 0;
    uint64_t PropertySetFromStorage = getPropertySetFromStorage((uint64_t)a1, a2, *a3);
    if (PropertySetFromStorage)
    {
      free(*a3);
      *a3 = 0;
    }
    else
    {
      (*a3)[1] = storageGetRoot(a1);
    }
  }
  else
  {
    *a3 = 0;
    return 5;
  }
  return PropertySetFromStorage;
}

uint64_t getPropertySetFromStorage(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v6 = storageEnsureDocumentPropertiesExist(a1);
  if (!v6)
  {
    uint64_t TOC = rootStorageGetTOC(a1);
    uint64_t v8 = (uint64_t *)TOC;
    if (!areGUIDsEqual(a2, SSRW_FMTID_SummaryInformation))
    {
      if (areGUIDsEqual(a2, &SSRW_FMTID_DocumentSummaryInformation))
      {
        uint64_t v8 = (uint64_t *)(TOC + 8);
      }
      else
      {
        if (!areGUIDsEqual(a2, &SSRW_FMTID_UserDefinedProperties)) {
          return 12;
        }
        uint64_t v8 = (uint64_t *)(TOC + 16);
      }
    }
    BOOL v9 = areGUIDsEqual(a2, SSRW_FMTID_SummaryInformation);
    if (v9) {
      uint64_t v10 = 24;
    }
    else {
      uint64_t v10 = 32;
    }
    if (v9) {
      unsigned int v11 = (uint64_t *)(TOC + 24);
    }
    else {
      unsigned int v11 = (uint64_t *)(TOC + 32);
    }
    int Mode = storageGetMode(a1);
    if (*(void *)(TOC + v10))
    {
      uint64_t Stream = 0;
      int v14 = 1;
    }
    else
    {
      if (*v8)
      {
        uint64_t Stream = 0;
        goto LABEL_25;
      }
      if (areGUIDsEqual(a2, SSRW_FMTID_SummaryInformation)) {
        unsigned __int16 v16 = (unsigned __int16 *)&SUMMARY_INFO_NAME;
      }
      else {
        unsigned __int16 v16 = (unsigned __int16 *)&DOC_SUMMARY_INFO_NAME;
      }
      if ((Mode & 0xFFFFFFFD) != 0) {
        uint64_t Stream = 0;
      }
      else {
        uint64_t Stream = openStream(a1, v16, v11);
      }
      uint64_t v17 = *(void *)(TOC + v10);
      int v18 = 1;
      if (!v17 && (Mode - 1) <= 1)
      {
        uint64_t Stream = createStream(a1, v16, v11);
        int v18 = 0;
        uint64_t v17 = *(void *)(TOC + v10);
      }
      if (Stream) {
        int v14 = 0;
      }
      else {
        int v14 = v18;
      }
      if (!v17) {
        return 13;
      }
    }
    if (*v8)
    {
LABEL_25:
      *a3 = *v8;
      return Stream;
    }
    uint64_t v6 = propertySetConstruct(a2, Mode, v8);
    if (v6) {
      return v6;
    }
    if ((Mode & 0xFFFFFFFD) == 0 && v14)
    {
      uint64_t v6 = streamSeek(*(void *)(TOC + v10), 0, 0);
      if (v6) {
        return v6;
      }
      uint64_t v6 = propertySetRead(*v8, *(void *)(TOC + v10), a2);
      uint64_t Stream = 0;
      if (v6)
      {
        if (v6 != 15) {
          return v6;
        }
      }
      goto LABEL_25;
    }
    if (!areGUIDsEqual(a2, &SSRW_FMTID_DocumentSummaryInformation))
    {
      uint64_t Stream = areGUIDsEqual(a2, &SSRW_FMTID_UserDefinedProperties);
      if (!Stream) {
        goto LABEL_25;
      }
    }
    LOWORD(v19) = 2;
    LOWORD(v20) = 1252;
    uint64_t Stream = propertySetPut(*v8, 1, (unsigned __int16 *)&v19);
    uint64_t v6 = Stream;
    if (!Stream) {
      goto LABEL_25;
    }
  }
  return v6;
}

uint64_t storageEnsureDocumentPropertiesExist(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v1 = a1 + 40;
  if (v2) {
    return 0;
  }
  else {
    return documentPropertiesConstruct(v1);
  }
}

BOOL areGUIDsEqual(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t storageGetMode(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 32);
  }
  return result;
}

uint64_t propertySetConstruct(_OWORD *a1, int a2, uint64_t *a3)
{
  uint64_t v6 = malloc_type_malloc(0x990uLL, 0x1032040B935A2E1uLL);
  *a3 = (uint64_t)v6;
  if (!v6) {
    return 5;
  }
  bzero(v6, 0x990uLL);
  uint64_t result = 0;
  uint64_t v8 = *a3;
  *(_DWORD *)(v8 + 1600) = 0;
  *(void *)(v8 + 1624) = 0;
  *(_OWORD *)(*a3 + 1608) = *a1;
  *(_DWORD *)(*a3 + 1636) = a2;
  return result;
}

uint64_t propertySetRead(uint64_t a1, uint64_t a2, void *a3)
{
  v41[1] = *MEMORY[0x263EF8340];
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  LOWORD(v36) = 0;
  LOWORD(v35) = 0;
  HIDWORD(v36) = 0;
  LODWORD(v37) = 0;
  unint64_t v40 = 0;
  v41[0] = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t result = readSInt16(a2, &v36);
  if (!result)
  {
    uint64_t result = readSInt16(a2, &v35);
    if (!result)
    {
      uint64_t result = readSInt32(a2, &v37);
      if (!result)
      {
        uint64_t result = readSInt32(a2, &v40);
        if (!result)
        {
          uint64_t result = readUInt16(a2, (_WORD *)&v40 + 2);
          if (!result)
          {
            uint64_t result = readUInt16(a2, (_WORD *)&v40 + 3);
            if (!result)
            {
              HIDWORD(v37) = 8;
              uint64_t result = streamRead(a2, (uint64_t)v41, (unsigned int *)&v37 + 1);
              if (!result)
              {
                uint64_t result = readSInt32(a2, &v37);
                if (!result)
                {
                  char v7 = 1;
                  unsigned int v8 = v37;
                  while (1)
                  {
                    uint64_t result = readGUID(a2, (uint64_t)&v38);
                    if (result) {
                      goto LABEL_9;
                    }
                    uint64_t result = readSInt32(a2, (_DWORD *)&v36 + 1);
                    if (result) {
                      goto LABEL_9;
                    }
                    if (*a3 == v38 && a3[1] == v39) {
                      break;
                    }
                    char v10 = (v8 < 2) | ~v7;
                    char v7 = 0;
                    if (v10)
                    {
                      int v11 = *(_DWORD *)(a1 + 1632);
                      goto LABEL_21;
                    }
                  }
                  int v11 = HIDWORD(v36);
                  *(_DWORD *)(a1 + 1632) = HIDWORD(v36);
LABEL_21:
                  if (!v11) {
                    return 0;
                  }
                  *(void *)(a1 + 1624) = a2;
                  streamSeek(a2, v11, 0);
                  readSInt32(a2, (_DWORD *)&v32 + 1);
                  unsigned int v12 = HIDWORD(v32);
                  readSInt32(a2, (_DWORD *)&v32 + 1);
                  uint64_t v13 = HIDWORD(v32);
                  if (HIDWORD(v32) > 0x32) {
                    return 12;
                  }
                  *(_DWORD *)(a1 + 1600) = HIDWORD(v32);
                  if (!v13) {
                    return 0;
                  }
                  uint64_t v14 = 0;
                  while (1)
                  {
                    uint64_t result = readSInt32(a2, &v32);
                    if (result) {
                      return result;
                    }
                    size_t v15 = (_DWORD *)(a1 + 32 * v14);
                    *size_t v15 = v32;
                    uint64_t result = readSInt32(a2, (_DWORD *)&v32 + 1);
                    if (result) {
                      return result;
                    }
                    v15[1] = HIDWORD(v32);
                    uint64_t result = streamGetPos64(a2, &v31);
                    if (result) {
                      return result;
                    }
                    uint64_t result = streamSeek(*(void *)(a1 + 1624), v15[1] + *(_DWORD *)(a1 + 1632), 0);
                    if (result) {
                      return result;
                    }
                    if (!*v15)
                    {
                      if (propertySetLoadNameList(a1, a2, v12))
                      {
                        if (*(_DWORD *)(a1 + 2440))
                        {
                          unint64_t v21 = 0;
                          BOOL v22 = (void **)(a1 + 1640);
                          do
                          {
                            uint64_t v23 = *v22;
                            v22 += 2;
                            free(v23);
                            ++v21;
                          }
                          while (v21 < *(unsigned int *)(a1 + 2440));
                        }
                        *(_DWORD *)(a1 + 2440) = 0;
                      }
                      goto LABEL_61;
                    }
                    int v35 = 0;
                    __int16 v34 = 0;
                    uint64_t v33 = 0;
                    uint64_t v38 = 0;
                    uint64_t v16 = *(void *)(a1 + 1624);
                    if (v16)
                    {
                      readSInt32(v16, (_DWORD *)&v33 + 1);
                      int v17 = HIDWORD(v33);
                      uint64_t v18 = a1 + 32 * v14;
                      *(_WORD *)(v18 + 8) = WORD2(v33);
                      uint64_t v19 = (_WORD *)(v18 + 8);
                      if (v17 <= 29)
                      {
                        switch(v17)
                        {
                          case 2:
                          case 11:
                            int Float64 = readSInt16(*(void *)(a1 + 1624), &v34);
                            *(_WORD *)(a1 + 32 * v14 + 16) = v34;
                            goto LABEL_59;
                          case 3:
                            break;
                          case 4:
                          case 6:
                          case 7:
                          case 8:
                          case 9:
                          case 10:
                            goto LABEL_57;
                          case 5:
                            int Float64 = readFloat64(*(void *)(a1 + 1624), (double *)&v38);
                            *(void *)(a1 + 32 * v14 + 16) = v38;
                            goto LABEL_59;
                          default:
                            if (v17 != 22) {
                              goto LABEL_57;
                            }
                            break;
                        }
                        int Float64 = readSInt32(*(void *)(a1 + 1624), &v35);
                        *(_DWORD *)(a1 + 32 * v14 + 16) = v35;
                        goto LABEL_59;
                      }
                      if (v17 <= 64)
                      {
                        if (v17 == 30)
                        {
                          if (!propertySetReadSizePrefixedBlob(a1, &v33, (uint64_t *)(a1 + 32 * v14 + 16))
                            && !*(unsigned char *)(*(void *)(a1 + 32 * v14 + 16) + (v33 - 1)))
                          {
                            goto LABEL_61;
                          }
                        }
                        else
                        {
                          if (v17 == 64)
                          {
                            if (!readSInt32(*(void *)(a1 + 1624), (_DWORD *)&v33 + 1))
                            {
                              *(_DWORD *)(a1 + 32 * v14 + 16) = HIDWORD(v33);
                              if (!readSInt32(*(void *)(a1 + 1624), (_DWORD *)&v33 + 1))
                              {
                                v15[5] = HIDWORD(v33);
                                goto LABEL_61;
                              }
                            }
                            goto LABEL_60;
                          }
LABEL_57:
                          *uint64_t v19 = 0;
                        }
LABEL_60:
                        propVariantCleanup((uint64_t)v19);
                        goto LABEL_61;
                      }
                      if (v17 != 65)
                      {
                        if (v17 != 71) {
                          goto LABEL_57;
                        }
                        uint64_t v36 = 0;
                        uint64_t v37 = 0;
                        *uint64_t v19 = 0;
                        int Float64 = streamGetPos(*(void *)(a1 + 1624), &v37);
                        if (Float64) {
                          goto LABEL_59;
                        }
                        int Float64 = readSInt32(*(void *)(a1 + 1624), (_DWORD *)&v37 + 1);
                        if (Float64) {
                          goto LABEL_59;
                        }
                        int BytesAvailableToRead = streamGetBytesAvailableToRead(*(void *)(a1 + 1624), &v36);
                        int Float64 = 14;
                        if (v36 < HIDWORD(v37)) {
                          goto LABEL_59;
                        }
                        if (HIDWORD(v37) < 5) {
                          goto LABEL_59;
                        }
                        int Float64 = BytesAvailableToRead;
                        if (BytesAvailableToRead) {
                          goto LABEL_59;
                        }
                        unint64_t v40 = 0;
                        streamGetBytesAvailableToRead64(*(void *)(a1 + 1624), &v40);
                        if (v40 < HIDWORD(v37))
                        {
                          int Float64 = 14;
                          goto LABEL_59;
                        }
                        uint64_t v26 = malloc_type_calloc(1uLL, 0x10uLL, 0x1010040466105CCuLL);
                        uint64_t v27 = a1 + 32 * v14;
                        *(void *)(v27 + 16) = v26;
                        uint64_t v28 = (void **)(v27 + 16);
                        if (v26)
                        {
                          *((void *)*v28 + 1) = malloc_type_calloc(1uLL, (HIDWORD(v37) - 4), 0x50399FC8uLL);
                          uint64_t v29 = *v28;
                          if (*((void *)*v28 + 1))
                          {
                            *uint64_t v29 = HIDWORD(v37);
                            int SInt32 = readSInt32(*(void *)(a1 + 1624), (_DWORD *)&v36 + 1);
                            if (SInt32)
                            {
                              int Float64 = SInt32;
                              goto LABEL_76;
                            }
                            *((_DWORD *)*v28 + 1) = HIDWORD(v36);
                            HIDWORD(v37) -= 4;
                            int Float64 = streamRead(*(void *)(a1 + 1624), *((void *)*v28 + 1), (unsigned int *)&v37 + 1);
                            if (Float64)
                            {
LABEL_76:
                              free(*((void **)*v28 + 1));
                              free(*v28);
                            }
                            else
                            {
                              *uint64_t v19 = 71;
                            }
LABEL_59:
                            if (!Float64) {
                              goto LABEL_61;
                            }
                            goto LABEL_60;
                          }
                          free(v29);
                        }
                        int Float64 = 5;
                        goto LABEL_59;
                      }
                      uint64_t v25 = a1 + 32 * v14;
                      if (propertySetReadSizePrefixedBlob(a1, &v33, (uint64_t *)(v25 + 24))) {
                        goto LABEL_60;
                      }
                      *(_DWORD *)(v25 + 16) = v33;
                    }
LABEL_61:
                    uint64_t result = streamSeek64(a2, v31, 0);
                    if (!result && ++v14 != v13) {
                      continue;
                    }
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_9:
  *(void *)(a1 + 1624) = 0;
  return result;
}

uint64_t streamGetPos64(uint64_t a1, void *a2)
{
  if (!a1) {
    return 6;
  }
  uint64_t result = 0;
  *a2 = *(void *)(a1 + 24);
  return result;
}

uint64_t streamGetBytesAvailableToRead64(uint64_t a1, void *a2)
{
  uint64_t result = 6;
  if (a1 && a2 && (*(_DWORD *)(a1 + 48) | 2) == 2)
  {
    uint64_t result = 0;
    *a2 = **(void **)(a1 + 56) - *(void *)(a1 + 24);
  }
  return result;
}

uint64_t storageGetRoot(uint64_t *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t result = *a1;
  if (!result) {
    return 0;
  }
  return result;
}

uint64_t propertySetGet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int RealID = propertyGetRealID(a1, a2);
  if (RealID == -1) {
    return 13;
  }
  uint64_t v6 = *(unsigned int *)(a1 + 1600);
  if (!v6) {
    return 13;
  }
  for (int i = (unsigned __int16 *)(a1 + 8); *((_DWORD *)i - 2) != RealID; i += 16)
  {
    if (!--v6) {
      return 13;
    }
  }
  if (!*i || *i == 10) {
    return 13;
  }
  return propVariantCopyContents(i, a3);
}

uint64_t propertyGetRealID(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xFFFFFFFE) == 0x1000)
  {
    Info = propertyGetInfo((void *)(a1 + 1608), a2);
    uint64_t v4 = *(unsigned int *)(a1 + 2440);
    if (v4)
    {
      int v5 = Info;
      for (int i = (const char **)(a1 + 1648); !v5 || strcmp(*((const char **)v5 + 1), *(i - 1)); i += 2)
      {
        if (!--v4) {
          return 0xFFFFFFFFLL;
        }
      }
      return *(unsigned int *)i;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return a2;
}

uint64_t propVariantCopyContents(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t result = 6;
  if (a1 && a2)
  {
    *(_WORD *)a2 = 0;
    unsigned int v5 = *a1;
    uint64_t result = 12;
    if (v5 > 0x3F)
    {
      switch(v5)
      {
        case '@':
LABEL_6:
          long long v6 = *(_OWORD *)a1;
          *(void *)(a2 + 16) = *((void *)a1 + 2);
          *(_OWORD *)a2 = v6;
LABEL_7:
          uint64_t result = 0;
          *(_WORD *)a2 = *a1;
          return result;
        case 'A':
          size_t v12 = *((unsigned int *)a1 + 2);
          *(_DWORD *)(a2 + 8) = v12;
          uint64_t v13 = malloc_type_malloc(v12, 0xF02908FDuLL);
          *(void *)(a2 + 16) = v13;
          if (v13)
          {
            memcpy(v13, *((const void **)a1 + 2), v12);
            goto LABEL_7;
          }
          return 5;
        case 'G':
          char v7 = malloc_type_malloc(0x10uLL, 0x1010040466105CCuLL);
          *(void *)(a2 + 8) = v7;
          if (v7)
          {
            size_t v8 = (**((_DWORD **)a1 + 1) - 4);
            *(void *)(*(void *)(a2 + 8) + 8) = malloc_type_malloc(v8, 0x2D9BAF94uLL);
            BOOL v9 = *(void **)(*(void *)(a2 + 8) + 8);
            if (v9)
            {
              memcpy(v9, *(const void **)(*((void *)a1 + 1) + 8), v8);
              **(_DWORD **)(a2 + 8) = **((_DWORD **)a1 + 1);
              *(_DWORD *)(*(void *)(a2 + 8) + 4) = *(_DWORD *)(*((void *)a1 + 1) + 4);
              goto LABEL_7;
            }
            free(*(void **)(a2 + 8));
            *(void *)(a2 + 8) = 0;
          }
          return 5;
      }
    }
    else
    {
      if (v5 > 0x1E) {
        return result;
      }
      if (((1 << v5) & 0x10C2D) != 0) {
        goto LABEL_6;
      }
      if (v5 == 8)
      {
        size_t v14 = (2 * *(_DWORD *)(*((void *)a1 + 1) - 4) + 6);
        size_t v15 = (char *)malloc_type_malloc(v14, 0x6DE31CD3uLL);
        if (v15)
        {
          uint64_t v16 = v15;
          memcpy(v15, (const void *)(*((void *)a1 + 1) - 4), v14);
          *(void *)(a2 + 8) = v16 + 4;
          free(v16);
          goto LABEL_7;
        }
        return 5;
      }
      if (v5 == 30)
      {
        size_t v10 = strlen(*((const char **)a1 + 1)) + 1;
        int v11 = (char *)malloc_type_malloc(v10, 0x92CF2245uLL);
        *(void *)(a2 + 8) = v11;
        if (v11)
        {
          strncpy(v11, *((const char **)a1 + 1), v10);
          goto LABEL_7;
        }
        return 5;
      }
    }
  }
  return result;
}

uint64_t propVariantCleanup(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    int v2 = *(unsigned __int16 *)result;
    uint64_t result = 12;
    if (v2 > 63)
    {
      switch(v2)
      {
        case '@':
LABEL_16:
          uint64_t result = 0;
          *(_WORD *)uint64_t v1 = 0;
          return result;
        case 'A':
          uint64_t v3 = (void **)(v1 + 16);
          break;
        case 'G':
          uint64_t v3 = (void **)(v1 + 8);
          uint64_t v4 = *(void *)(v1 + 8);
          if (!v4)
          {
            unsigned int v5 = 0;
            goto LABEL_15;
          }
          free(*(void **)(v4 + 8));
          break;
        default:
          return result;
      }
LABEL_14:
      unsigned int v5 = *v3;
LABEL_15:
      free(v5);
      goto LABEL_16;
    }
    if (v2 > 0x1E) {
      return result;
    }
    if (((1 << v2) & 0x10C2D) != 0) {
      goto LABEL_16;
    }
    if (v2 == 8 || v2 == 30)
    {
      uint64_t v3 = (void **)(v1 + 8);
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t SsrwOORootStorage::freeDocumentProperty(SsrwOORootStorage *this, void **a2)
{
  uint64_t result = freeDocumentProperty(a2);
  if (result)
  {
    int v3 = result;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v3;
  }
  return result;
}

uint64_t freeDocumentProperty(void **a1)
{
  *a1 = 0;
  return 0;
}

uint64_t OcBinaryReader::parseStringProp(uint64_t a1, int a2, uint64_t a3, OcText *a4)
{
  int v14 = 0;
  __s = 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  uint64_t result = SsrwOORootStorage::getDocumentProperty(v8, a2, a3, &v14, (void **)&__s);
  if (__s) {
    BOOL v10 = v14 == 2;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    unsigned int v11 = strlen(__s);
    OcText::copyBuffer(a4, (const unsigned __int8 *)__s, v11 + 1);
    a4->int var3 = v11 >> (OcText::isSingleByteEncoding(a4->var1) ^ 1);
    size_t v12 = (SsrwOORootStorage *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
    return SsrwOORootStorage::freeDocumentProperty(v12, (void **)&__s);
  }
  return result;
}

void *OcText::copyBuffer(OcText *this, const unsigned __int8 *a2, unsigned int a3)
{
  if (!a2 || (OcText::allocBuffer(this, a3, 0), (var5 = this->var5) == 0))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  return memcpy(var5, a2, a3);
}

void OcText::allocBuffer(OcText *this, unsigned int a2, int a3)
{
  unsigned int var4 = this->var4;
  if (var4 >= a2)
  {
    if (this->var7) {
      goto LABEL_9;
    }
  }
  else if (this->var7)
  {
    var5 = this->var5;
    if (var5) {
      MEMORY[0x23EC99790](var5, 0x1000C8077774924);
    }
    this->var5 = 0;
    goto LABEL_8;
  }
  this->var7 = 1;
LABEL_8:
  uint64_t v8 = (char *)operator new[](a2);
  this->var5 = v8;
  this->unsigned int var4 = a2;
  unsigned int var4 = a2;
  if (!v8)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1001;
  }
LABEL_9:
  if (a3)
  {
    BOOL v9 = this->var5;
    if (v9)
    {
      bzero(v9, var4);
    }
  }
}

uint64_t OcText::isSingleByteEncoding(int a1)
{
  uint64_t result = 1;
  if (a1 > 949)
  {
    if (a1 > 9999)
    {
      if (a1 > 10078)
      {
        if (a1 == 10079 || a1 == 10081 || a1 == 65001) {
          return result;
        }
      }
      else
      {
        unsigned int v3 = a1 - 10000;
        if (v3 <= 0x1D && ((1 << v3) & 0x200000C1) != 0) {
          return result;
        }
      }
    }
    else if ((a1 - 1250) < 9 || a1 == 950)
    {
      return result;
    }
    return 0;
  }
  if (a1 <= 774)
  {
    if (a1 == 2 || a1 == 437 || a1 == 737) {
      return result;
    }
    return 0;
  }
  if (((a1 - 850) > 0x13 || ((1 << (a1 - 82)) & 0x9FCA5) == 0) && a1 != 775 && a1 != 932) {
    return 0;
  }
  return result;
}

uint64_t OcBinaryReader::parseDateTimeProp(uint64_t a1, int a2, uint64_t a3, unsigned int *a4)
{
  int v13 = 7;
  size_t v12 = 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  uint64_t result = SsrwOORootStorage::getDocumentProperty(v8, a2, a3, &v13, (void **)&v12);
  if (v12) {
    BOOL v10 = v13 == 3;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    ChWindowsTimeFromTime_t(*v12, a4);
    unsigned int v11 = (SsrwOORootStorage *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
    return SsrwOORootStorage::freeDocumentProperty(v11, (void **)&v12);
  }
  return result;
}

uint64_t ChWindowsTimeFromTime_t(uint64_t result, unsigned int *a2)
{
  unsigned int v2 = 10000 * WORD1(result) + ((10000 * (unsigned __int16)result) >> 16);
  unsigned int v3 = HIWORD(v2);
  unsigned int v4 = 1000 * (unsigned __int16)v2 + ((1000 * (unsigned __int16)(10000 * result)) >> 16);
  unsigned int v5 = (unsigned __int16)(-27008 * result) + 0x8000;
  unsigned int v6 = HIWORD(v5) + (unsigned __int16)v4 + 54590;
  *a2 = v5 & 0xFF80 | (v6 << 16);
  a2[1] = 1000 * v3 + HIWORD(v4) + HIWORD(v6) + 27111902;
  return result;
}

BOOL OcBinaryReader::parseBoolProp(uint64_t a1, int a2, uint64_t a3)
{
  int v12 = 7;
  unsigned int v11 = 0;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  SsrwOORootStorage::getDocumentProperty(v6, a2, a3, &v12, (void **)&v11);
  if (v11) {
    BOOL v7 = v12 == 5;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7) {
    return 0;
  }
  BOOL v8 = *v11 == 1;
  BOOL v9 = (SsrwOORootStorage *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  SsrwOORootStorage::freeDocumentProperty(v9, (void **)&v11);
  return v8;
}

uint64_t OcBinaryReader::parseBLOBProp(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v18 = 0;
  int v17 = 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  uint64_t result = SsrwOORootStorage::getDocumentProperty(v8, a2, a3, &v18, (void **)&v17);
  BOOL v10 = v17;
  if (v17) {
    BOOL v11 = v18 == 6;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    *(_DWORD *)(a4 + 8) = 1;
    int v12 = *v10;
    if (v12 >= 0) {
      int v13 = v12;
    }
    else {
      int v13 = v12 + 1;
    }
    char isSingleByteEncoding = OcText::isSingleByteEncoding(1);
    int v15 = v13 >> 1;
    OcText::setMinimumCapacity((OcText *)a4, v15 << (isSingleByteEncoding ^ 1));
    CsLeReadChars16((uint64_t)(v17 + 1), v15, *(_WORD **)(a4 + 24));
    *(_DWORD *)(a4 + 16) = v15;
    uint64_t v16 = (SsrwOORootStorage *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
    return SsrwOORootStorage::freeDocumentProperty(v16, (void **)&v17);
  }
  return result;
}

uint64_t propertySetLoadNameList(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v11 = 0;
  if (*(_DWORD *)(a1 + 2440)) {
    return 2;
  }
  uint64_t result = readSInt32(a2, (_DWORD *)&v11 + 1);
  if (!result)
  {
    if (HIDWORD(v11) >= 0x32) {
      uint64_t v7 = 50;
    }
    else {
      uint64_t v7 = HIDWORD(v11);
    }
    if (v7)
    {
      uint64_t v8 = a1 + 1640;
      while (1)
      {
        uint64_t result = readSInt32(a2, (_DWORD *)&v11 + 1);
        if (result) {
          break;
        }
        int v9 = HIDWORD(v11);
        uint64_t result = readSInt32(a2, (_DWORD *)&v11 + 1);
        if (result) {
          break;
        }
        LODWORD(v11) = HIDWORD(v11);
        if (HIDWORD(v11) >= a3) {
          return 14;
        }
        BOOL v10 = malloc_type_malloc(HIDWORD(v11) + 1, 0x2545C4F3uLL);
        *(void *)uint64_t v8 = v10;
        if (!v10) {
          return 5;
        }
        ++*(_DWORD *)(a1 + 2440);
        v10[v11] = 0;
        uint64_t result = streamRead(a2, *(void *)v8, (unsigned int *)&v11);
        if (!result)
        {
          *(_DWORD *)(v8 + 8) = v9;
          v8 += 16;
          if (--v7) {
            continue;
          }
        }
        return result;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

int *propertyGetInfo(void *a1, int a2)
{
  uint64_t v2 = 0;
  while (1)
  {
    if (!(v2 * 4)
      || ((unsigned int v3 = *(uint64_t **)&s_PropertyInfoTable[v2 + 4], v5 = *v3, v4 = v3[1], v5 == *a1)
        ? (BOOL v6 = v4 == a1[1])
        : (BOOL v6 = 0),
          v6))
    {
      if (s_PropertyInfoTable[v2] == a2) {
        break;
      }
    }
    v2 += 8;
    if (v2 == 272) {
      return 0;
    }
  }
  return &s_PropertyInfoTable[v2];
}

uint64_t OcBinaryReader::parseHyperlinksProp(OcBinaryReader *this, OcSummary *a2)
{
  uint64_t v4 = (SsrwOOPropVariant *)operator new(0x10uLL);
  SsrwOOPropVariant::SsrwOOPropVariant(v4);
  OcBinaryReader::getPropertyValue((uint64_t)this, 3, 4097, v4);
  if (SsrwOOPropVariant::getType(v4) == 65)
  {
    BlobValueData = (unsigned __int8 *)SsrwOOPropVariant::getBlobValueData(v4);
    unint64_t v21 = BlobValueData;
    BlobValueunsigned int Size = SsrwOOPropVariant::getBlobValueSize(v4);
    if (BlobValueSize >= 4)
    {
      unint64_t v21 = BlobValueData + 4;
      unsigned int v7 = CsLeReadSInt32((unsigned int *)BlobValueData) / 6;
    }
    else
    {
      unsigned int v7 = 0;
    }
    uint64_t v8 = (void *)((char *)a2 + 768);
    std::vector<EshHeader *,ChAllocator<EshHeader *>>::resize((uint64_t)v8, v7);
    if (v7)
    {
      uint64_t v9 = 0;
      BOOL v10 = (unsigned int *)&BlobValueData[BlobValueSize];
      uint64_t v11 = 8 * v7;
      do
      {
        int v12 = (OcHyperlink *)operator new(0x48uLL);
        int v13 = (OcBinaryReader *)OcHyperlink::OcHyperlink(v12);
        *(void *)(*v8 + v9) = v12;
        if (v21 + 16 <= (unsigned __int8 *)v10)
        {
          uint64_t v14 = *(void *)(*v8 + v9);
          int v15 = (OcBinaryReader *)OcBinaryReader::parseLongPropInsideHyperlink(v13, (unsigned int **)&v21, v10);
          *(_DWORD *)(v14 + 8) = v15;
          uint64_t v16 = (OcBinaryReader *)OcBinaryReader::parseLongPropInsideHyperlink(v15, (unsigned int **)&v21, v10);
          *(_DWORD *)(v14 + 12) = v16;
          int v17 = (OcBinaryReader *)OcBinaryReader::parseLongPropInsideHyperlink(v16, (unsigned int **)&v21, v10);
          *(_DWORD *)(v14 + 16) = v17;
          int v18 = (OcBinaryReader *)OcBinaryReader::parseLongPropInsideHyperlink(v17, (unsigned int **)&v21, v10);
          *(_DWORD *)(v14 + 20) = v18;
          OcBinaryReader::parseStringPropInsideHyperlink(v18, (unsigned __int16 **)&v21, (unsigned __int8 *)v10, (CsString *)(v14 + 24));
          OcBinaryReader::parseStringPropInsideHyperlink(v19, (unsigned __int16 **)&v21, (unsigned __int8 *)v10, (CsString *)(v14 + 48));
        }
        v9 += 8;
      }
      while (v11 != v9);
    }
  }
  return (*(uint64_t (**)(SsrwOOPropVariant *))(*(void *)v4 + 8))(v4);
}

void sub_238A96AE0(_Unwind_Exception *exception_object, int a2)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x238A96AC8);
  }
  _Unwind_Resume(exception_object);
}

void SsrwOOPropVariant::SsrwOOPropVariant(SsrwOOPropVariant *this)
{
  *(void *)this = &unk_26EBDA390;
  uint64_t v2 = operator new(0x18uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = 0;
  *((void *)this + 1) = v2;
}

SsrwOOStorage **OcBinaryReader::getPropertyValue(uint64_t a1, int a2, uint64_t a3, SsrwOOPropVariant *a4)
{
  uint64_t v8 = (SsrwOOStorage *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  uint64_t v14 = 0;
  uint64_t v9 = (const unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  if (v9 && SsrwOOStorage::hasChild(v8, v9))
  {
    BOOL v10 = (SsrwOOStorage *)SsrwOOStorage::openStorage(v8, v9);
    ChAutoPtr<SsrwOOStorage>::setValue(&v14, v10);
    uint64_t v8 = v14;
  }
  FMTIDForStreamint Type = (_SsrwOO_GUID *)SsrwOOPropertyStorage::getFMTIDForStreamType(a2);
  int v12 = (uint64_t **)SsrwOOStorage::openPropertyStorage(v8, FMTIDForStreamType);
  SsrwOOPropertyStorage::getPropertyValue(v12, a3, a4);
  SsrwOOPropertyStorage::close((uint64_t)v12);
  if (v14) {
    SsrwOOStorage::close(v14, 0);
  }
  if (v12) {
    ((void (*)(uint64_t **))(*v12)[1])(v12);
  }
  return ChAutoPtr<SsrwOOStorage>::~ChAutoPtr(&v14);
}

void sub_238A96D18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ChAutoPtr<SsrwOOStorage>::~ChAutoPtr((SsrwOOStorage **)va);
  _Unwind_Resume(a1);
}

const char *PptBinaryReader::getDualStorageName(PptBinaryReader *this)
{
  return "P";
}

uint64_t SsrwOOPropertyStorage::getFMTIDForStreamType(int a1)
{
  if ((a1 - 1) > 2) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_264D67730 + a1 - 1);
  }
}

void *SsrwOOStorage::openPropertyStorage(SsrwOOStorage *this, _SsrwOO_GUID *a2)
{
  unsigned int v7 = 0;
  int v2 = propertyStorageOpen((uint64_t *)this->var0, a2, &v7);
  if (v2)
  {
    int v5 = v2;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v5;
  }
  uint64_t result = operator new(0x10uLL);
  uint64_t v4 = v7;
  *uint64_t result = &unk_26EBDA358;
  result[1] = v4;
  return result;
}

BOOL SsrwOOPropertyStorage::getPropertyValue(uint64_t **this, uint64_t a2, SsrwOOPropVariant *a3)
{
  int PropertyValue = propertyStorageGetPropertyValue(this[1], a2, *((void *)a3 + 1));
  if (PropertyValue) {
    BOOL v4 = PropertyValue == 13;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    int v6 = PropertyValue;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v6;
  }
  return PropertyValue != 13;
}

uint64_t propertyStorageGetPropertyValue(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a3 && (uint64_t v3 = *a1) != 0) {
    return propertySetGet(v3, a2, a3);
  }
  else {
    return 6;
  }
}

uint64_t SsrwOOPropertyStorage::close(uint64_t this)
{
  uint64_t v1 = (void *)(this + 8);
  if (*(void *)(this + 8))
  {
    this = propertyStorageClose((void **)(this + 8));
    void *v1 = 0;
  }
  return this;
}

uint64_t propertyStorageClose(void **a1)
{
  if (!a1) {
    return 6;
  }
  int v2 = *a1;
  if (!v2) {
    return 6;
  }
  free(v2);
  uint64_t result = 0;
  *a1 = 0;
  return result;
}

void SsrwOOPropertyStorage::~SsrwOOPropertyStorage(void **this)
{
  SsrwOOPropertyStorage::~SsrwOOPropertyStorage(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v1;

  *this = &unk_26EBDA358;
  uint64_t v1 = this + 1;
  if (this[1])
  {
    propertyStorageClose(this + 1);
    void *v1 = 0;
  }
}

SsrwOOStorage **ChAutoPtr<SsrwOOStorage>::~ChAutoPtr(SsrwOOStorage **a1)
{
  int v2 = *a1;
  if (v2)
  {
    SsrwOOStorage::~SsrwOOStorage(v2);
    MEMORY[0x23EC997B0]();
  }
  *a1 = 0;
  return a1;
}

uint64_t SsrwOOPropVariant::getType(SsrwOOPropVariant *this)
{
  return **((unsigned __int16 **)this + 1);
}

void SsrwOOPropVariant::~SsrwOOPropVariant(SsrwOOPropVariant *this)
{
  SsrwOOPropVariant::~SsrwOOPropVariant(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBDA390;
  propVariantCleanup(*((void *)this + 1));
  int v2 = *((void *)this + 1);
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1032C40458B8274);
  }
  *((void *)this + 1) = 0;
}

unsigned __int8 *OcBinaryReader::parseClipboardProp(uint64_t a1, int a2, uint64_t a3, OcBinaryData *a4)
{
  int v13 = 0;
  int v12 = 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  SsrwOORootStorage::getDocumentProperty(v8, a2, a3, &v13, (void **)&v12);
  uint64_t result = v12;
  if (v12)
  {
    if (v13 == 6)
    {
      unsigned int v10 = CsLeReadSInt32((unsigned int *)v12) - 4;
      OcBinaryData::setMinimumCapacity(a4, v10);
      OcBinaryData::copyBuffer(a4, v12 + 4, v10);
    }
    uint64_t v11 = (SsrwOORootStorage *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
    return (unsigned __int8 *)SsrwOORootStorage::freeDocumentProperty(v11, (void **)&v12);
  }
  return result;
}

uint64_t CsLeWriteUInt32(uint64_t result, _DWORD *a2)
{
  *a2 = result;
  return result;
}

void OcSummary::~OcSummary(OcSummary *this)
{
  *(void *)this = &unk_26EBD9FD0;
  uint64_t v2 = *((void *)this + 97);
  uint64_t v3 = (void *)*((void *)this + 96);
  if (((v2 - (void)v3) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5)
      {
        (*(void (**)(void))(*(void *)v5 + 8))(v3[v4]);
        uint64_t v3 = (void *)*((void *)this + 96);
      }
      v3[v4++] = 0;
      uint64_t v3 = (void *)*((void *)this + 96);
    }
    while (v4 < ((*((void *)this + 97) - (void)v3) >> 3));
  }
  if (v3)
  {
    *((void *)this + 97) = v3;
    operator delete(v3);
  }
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 712));
  OcText::~OcText((OcText *)((char *)this + 632));
  OcText::~OcText((OcText *)((char *)this + 584));
  OcText::~OcText((OcText *)((char *)this + 536));
  OcText::~OcText((OcText *)((char *)this + 488));
  OcText::~OcText((OcText *)((char *)this + 440));
  OcText::~OcText((OcText *)((char *)this + 392));
  OcText::~OcText((OcText *)((char *)this + 344));
  OcText::~OcText((OcText *)((char *)this + 296));
  OcText::~OcText((OcText *)((char *)this + 248));
  OcText::~OcText((OcText *)((char *)this + 200));
  OcText::~OcText((OcText *)((char *)this + 152));
  OcText::~OcText((OcText *)((char *)this + 104));
  OcText::~OcText((OcText *)((char *)this + 56));
  OcText::~OcText((OcText *)((char *)this + 8));
}

{
  uint64_t vars8;

  OcSummary::~OcSummary(this);
  JUMPOUT(0x23EC997B0);
}

OcBinaryData *OcBinaryData::removeBuffer(OcBinaryData *this)
{
  uint64_t v1 = this;
  if (this->var6)
  {
    this = (OcBinaryData *)this->var5;
    if (this) {
      this = (OcBinaryData *)MEMORY[0x23EC99790](this, 0x1000C8077774924);
    }
  }
  *(void *)&v1->int var3 = 0;
  v1->var5 = 0;
  return this;
}

void OcText::~OcText(OcText *this)
{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBDA008;
  var6 = this->var6;
  if (var6) {
    MEMORY[0x23EC99790](var6, 0x1000C8077774924);
  }
  this->var6 = 0;
  if (this->var7)
  {
    var5 = this->var5;
    if (var5) {
      MEMORY[0x23EC99790](var5, 0x1000C8077774924);
    }
  }
  *(void *)&this->int var3 = 0;
  this->var5 = 0;
}

{
  uint64_t vars8;

  OcText::~OcText(this);
  JUMPOUT(0x23EC997B0);
}

OcText *OcText::removeBuffer(OcText *this)
{
  uint64_t v1 = this;
  if (this->var7)
  {
    this = (OcText *)this->var5;
    if (this) {
      this = (OcText *)MEMORY[0x23EC99790](this, 0x1000C8077774924);
    }
  }
  *(void *)&v1->int var3 = 0;
  v1->var5 = 0;
  return this;
}

void sub_238A97458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238A97548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

void sub_238A97604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A977B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL CsString::operator==(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = a2;
  unsigned int v4 = _ChWcslen(a2);
  if (*(_DWORD *)(a1 + 16) != v4) {
    return 0;
  }
  if (!v4) {
    return 1;
  }
  uint64_t v5 = *(unsigned __int16 **)(a1 + 8);
  uint64_t v6 = v4 - 1;
  do
  {
    int v8 = *v5++;
    int v7 = v8;
    int v10 = *v2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

void sub_238A978EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238A979E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

void sub_238A97C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238A97DAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A97ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238A98018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A9827C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A98378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A984B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A9857C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A9873C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_238A988D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A989A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A98A78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A98B2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A98BA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A98C74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A98D10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A98D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A98E48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A990C8(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_238A991A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A99540(_Unwind_Exception *a1)
{
  unsigned int v4 = v2;

  _Unwind_Resume(a1);
}

void sub_238A9969C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A99730(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A99904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A99A28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A99C84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A9A140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A9A390(_Unwind_Exception *a1)
{
  unsigned int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238A9AA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238A9AC78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v14 = v13;

  _Unwind_Resume(a1);
}

void sub_238A9ADCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshFill::isFillTypeSet(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x180u);
}

uint64_t EshOpt::isPropertySet(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 40);
  if (!v2) {
    return 0;
  }
  while (1)
  {
    unsigned int v3 = *((_DWORD *)v2 + 8);
    if (v3 <= a2) {
      break;
    }
LABEL_5:
    uint64_t v2 = (uint64_t *)*v2;
    if (!v2) {
      return 0;
    }
  }
  if (v3 < a2)
  {
    ++v2;
    goto LABEL_5;
  }
  return 1;
}

uint64_t EshContentProperties::getDefaultPositionHorizontal(EshContentProperties *this)
{
  return 0;
}

uint64_t EshFill::isOnSet(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1BBu);
}

uint64_t EshFill::getOn(EshFill *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty((uint64_t)this->var2, 0x1BBu);
}

uint64_t **EshOpt::getProperty(uint64_t a1, unsigned int a2)
{
  unsigned int v3 = a2;
  unsigned int v4 = &v3;
  return std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v3, (uint64_t)&std::piecewise_construct, &v4)+ 5;
}

uint64_t EshFill::isColorSet(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x181u);
}

uint64_t EshFill::getColor(EshFill *this)
{
  return EshOpt::getColorProperty((uint64_t)this->var2, 0x181u);
}

uint64_t EshOpt::getColorProperty(uint64_t a1, unsigned int a2)
{
  unsigned int v4 = a2;
  uint64_t v5 = &v4;
  *(void *)(a1 + 56) = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v4, (uint64_t)&std::piecewise_construct, &v5)[5];
  return a1 + 56;
}

uint64_t EshFill::isOpacitySet(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x182u);
}

uint64_t EshFill::getDefaultOpacity(EshFill *this)
{
  return 0x10000;
}

float EshFixedPointUtil::toFloat(EshFixedPointUtil *this)
{
  return (float)(int)this * 0.000015259;
}

uint64_t EshColor::getSchemeIndex(EshColor *this)
{
  return this->var0.var1.var1;
}

uint64_t EshStroke::isColorSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1C0u);
}

uint64_t EshStroke::getColor(EshStroke *this)
{
  return EshOpt::getColorProperty((uint64_t)this->var2, 0x1C0u);
}

uint64_t EshStroke::isOpacitySet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1C1u);
}

uint64_t EshStroke::isOnSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1FCu);
}

uint64_t EshStroke::getOn(EshStroke *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty((uint64_t)this->var2, 0x1FCu);
}

uint64_t EshStroke::isFillTypeSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1C4u);
}

uint64_t EshStroke::isDashStyleSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1CFu);
}

uint64_t EshFill::getDefaultBlipName(EshFill *this)
{
  return 0;
}

uint64_t EshStroke::isPredefDashStyleSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1CEu);
}

uint64_t EshStroke::isJoinStyleSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1D6u);
}

uint64_t EshContentProperties::getDefaultPositionHorizontalRelative(EshContentProperties *this)
{
  return 2;
}

uint64_t EshStroke::isStartArrowSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1D0u);
}

uint64_t EshStroke::isStartArrowWidthSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1D2u);
}

uint64_t EshContentProperties::getDefaultAllowOverlap(EshContentProperties *this)
{
  return 1;
}

uint64_t EshStroke::isStartArrowLengthSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1D3u);
}

uint64_t EshStroke::isEndArrowSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1D1u);
}

uint64_t EshStroke::isEndArrowWidthSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1D4u);
}

uint64_t EshStroke::isEndArrowLengthSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1D5u);
}

uint64_t EshStroke::isWeightSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1CBu);
}

uint64_t EshStroke::getDefaultWeight(EshStroke *this)
{
  return 9525;
}

uint64_t EshStroke::isCapStyleSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1D7u);
}

uint64_t EshStroke::isLineStyleSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1CDu);
}

uint64_t EshShadow::isOnSet(EshShadow *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x23Eu);
}

void sub_238A9BEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t EshTextBox::isInsetLeftSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x81u);
}

uint64_t EshTextBox::getDefaultInsetLeft(EshTextBox *this)
{
  return 91440;
}

uint64_t EshTextBox::isInsetRightSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x83u);
}

uint64_t EshTextBox::isInsetTopSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x82u);
}

uint64_t EshTextBox::getDefaultInsetTop(EshTextBox *this)
{
  return 45720;
}

uint64_t EshTextBox::isInsetBottomSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x84u);
}

uint64_t EshTextBox::isColumnCountSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2 + 128, 0x8Cu);
}

uint64_t EshTextBox::isColumnMarginSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2 + 128, 0x8Du);
}

uint64_t EshTextBox::isRotateSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x89u);
}

void sub_238A9BFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t EshTextBox::isFlowSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x88u);
}

void sub_238A9C084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t EshTextBox::isDirectionSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x8Bu);
}

void sub_238A9C108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t EshTextBox::isFitShapeToTextSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0xBEu);
}

void sub_238A9C194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t EshTextBox::isWrapStyleSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x85u);
}

uint64_t EshTextBox::isAnchorSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x87u);
}

void sub_238A9C244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238A9C2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238A9C334(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A9C6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  _Unwind_Resume(a1);
}

PptParaProperty *PptParaProperty::operator=(PptParaProperty *this, PptParaProperty *a2)
{
  if (a2 != this)
  {
    PptParaProperty::reset((uint64_t)this);
    __int16 v4 = *(_WORD *)a2;
    *((unsigned char *)this + 2) = *((unsigned char *)a2 + 2);
    *(_WORD *)this = v4;
    int v5 = *(_WORD *)((unsigned char *)this + 3) & 0xFFFE | *(_WORD *)((unsigned char *)a2 + 3) & 1;
    *(_WORD *)((char *)this + 3) = *(_WORD *)((unsigned char *)this + 3) & 0xFFFE | *(_WORD *)((unsigned char *)a2 + 3) & 1;
    unsigned int v6 = v5 & 0xFFFFFFFD | (2 * ((*(unsigned __int16 *)((char *)a2 + 3) >> 1) & 1));
    *(_WORD *)((char *)this + 3) = v6;
    unsigned int v7 = v6 & 0xFFFFFFFB | (4 * ((*(unsigned __int16 *)((char *)a2 + 3) >> 2) & 1));
    *(_WORD *)((char *)this + 3) = v7;
    unsigned int v8 = v7 & 0xFFFFFFF7 | (8 * ((*(unsigned __int16 *)((char *)a2 + 3) >> 3) & 1));
    *(_WORD *)((char *)this + 3) = v8;
    unsigned int v9 = v8 & 0xFFFFFFEF | (16 * ((*(unsigned __int16 *)((char *)a2 + 3) >> 4) & 1));
    *(_WORD *)((char *)this + 3) = v9;
    unsigned int v10 = v9 & 0xFFFFFFDF | (32 * ((*(unsigned __int16 *)((char *)a2 + 3) >> 5) & 1));
    *(_WORD *)((char *)this + 3) = v10;
    unsigned int v11 = v10 & 0xFFFFFFBF | (((*(unsigned __int16 *)((char *)a2 + 3) >> 6) & 1) << 6);
    *(_WORD *)((char *)this + 3) = v11;
    unsigned int v12 = v11 & 0xFFFFFF7F | (((*(unsigned __int16 *)((char *)a2 + 3) >> 7) & 1) << 7);
    *(_WORD *)((char *)this + 3) = v12;
    unsigned int v13 = v12 & 0xFFFFF0FF | ((HIBYTE(*(unsigned __int16 *)((char *)a2 + 3)) & 0xF) << 8);
    *(_WORD *)((char *)this + 3) = v13;
    *(_WORD *)((char *)this + 3) = v13 & 0xCFFF | *(_WORD *)((unsigned char *)a2 + 3) & 0x3000;
    *(void *)((char *)this + 6) = *(void *)((char *)a2 + 6);
    *(_DWORD *)((char *)this + 14) = *(_DWORD *)((char *)a2 + 14);
    *((_WORD *)this + 9) = *((_WORD *)a2 + 9);
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((void *)this + 3) = *((void *)a2 + 3);
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    if (*((void *)a2 + 5))
    {
      uint64_t v14 = *((void *)this + 5);
      if (v14)
      {
        int v15 = *(void **)v14;
        if (*(void *)v14)
        {
          *(void *)(v14 + 8) = v15;
          operator delete(v15);
        }
        MEMORY[0x23EC997B0](v14, 0x20C40960023A9);
      }
      *((void *)this + 5) = 0;
      uint64_t v16 = (uint64_t **)operator new(0x18uLL);
      v16[1] = 0;
      v16[2] = 0;
      OcBinaryReader *v16 = 0;
      *((void *)this + 5) = v16;
      int v17 = (uint64_t **)*((void *)a2 + 5);
      if (v16 != v17) {
        std::vector<PptTab,ChAllocator<PptTab>>::__assign_with_size[abi:ne180100]<PptTab*,PptTab*>((uint64_t)v16, *v17, v17[1], v17[1] - *v17);
      }
    }
    else
    {
      *((void *)this + 5) = 0;
    }
  }
  return this;
}

uint64_t PptParaProperty::reset(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 40);
  if (v2)
  {
    unsigned int v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    this = MEMORY[0x23EC997B0](v2, 0x20C40960023A9);
  }
  *(void *)(v1 + 40) = 0;
  return this;
}

void PptParaProperty::~PptParaProperty(PptParaProperty *this)
{
}

void sub_238A9CA7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A9CB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238A9CCC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238A9CF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238A9D04C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A9D0AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PptTextHeaderAtom::getBaseType(int a1)
{
  if ((a1 - 5) >= 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  return *((unsigned int *)&xmmword_238EDD360 + a1 - 5);
}

void sub_238A9D26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238A9D688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A9E1BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A9E560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238A9E610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A9E688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A9E7E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A9E92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238A9EAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238A9EB58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A9EC78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

CsColour *PptColorSchemeAtom::getSchemeColor(PptColorSchemeAtom *this, int a2)
{
  switch(a2)
  {
    case 0:
      BOOL result = &this->var7;
      break;
    case 1:
      BOOL result = &this->var8;
      break;
    case 2:
      BOOL result = &this->var9;
      break;
    case 3:
      BOOL result = &this->var10;
      break;
    case 4:
      BOOL result = &this->var11;
      break;
    case 5:
      BOOL result = &this->var12;
      break;
    case 6:
      BOOL result = &this->var13;
      break;
    case 7:
      BOOL result = &this->var14;
      break;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

void sub_238A9EE20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sfaxmlParseFile(uint64_t a1)
{
  return sfaxmlSAXParseFile(0, a1, 0, 1);
}

uint64_t sfaxmlSAXParseFile(uint64_t a1, uint64_t a2, int a3, char a4)
{
  if (sfaxmlSAXParseFile::once != -1) {
    dispatch_once(&sfaxmlSAXParseFile::once, &__block_literal_global_7);
  }
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2020000000;
  uint64_t v16 = 0;
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  v10[2] = __sfaxmlSAXParseFile_block_invoke_2;
  v10[3] = &unk_264D62410;
  char v12 = a4;
  v10[4] = &v13;
  v10[5] = a1;
  v10[6] = a2;
  int v11 = a3;
  dispatch_sync((dispatch_queue_t)sfaxmlSAXParseFile::parsingQueue, v10);
  uint64_t v8 = v14[3];
  _Block_object_dispose(&v13, 8);
  return v8;
}

uint64_t sfagzfileMatch_libxml(const char *a1)
{
  return 1;
}

gzFile sfagzfileOpen_libxml(const char *a1)
{
  if (!a1 || !xmlCheckFilename(a1)) {
    return 0;
  }
  return gzopen(a1, "rb");
}

uint64_t sfagzfileClose_libxml(gzFile_s *a1)
{
  if (gzclose(a1)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

_xmlNode *pCXFindChild(_xmlNode *a1, CXNamespace *a2, xmlChar *str1)
{
  if (!a1) {
    return 0;
  }
  for (int i = a1->children; i; int i = i->next)
  {
    if (i->type == XML_ELEMENT_NODE
      && xmlStrEqual(str1, i->name)
      && [(CXNamespace *)a2 containsNode:i])
    {
      break;
    }
  }
  return i;
}

void sub_238A9F3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

_xmlNode *CXFirstChild(_xmlNode *a1)
{
  if (a1)
  {
    for (BOOL result = a1->children; result; BOOL result = result->next)
    {
      if (result->type == XML_ELEMENT_NODE) {
        break;
      }
    }
  }
  else
  {
    uint64_t v2 = [NSString stringWithUTF8String:"xmlNodePtr CXFirstChild(xmlNodePtr)"];
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v2, [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/Utilities/TCXmlUtilities.mm"], 120, 0, "Bad node.");
    +[OITSUAssertionHandler logBacktraceThrottled];
    return 0;
  }
  return result;
}

void sub_238A9F71C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A9F7A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A9F854(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A9FA40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238A9FAEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_xmlAttr *CXRequiredStringAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  BOOL result = CXFindAttribute(a1, a2, a3);
  if (result)
  {
    __int16 v4 = objc_msgSend([NSString alloc], "tc_initWithValueOfXmlAttribute:", result);
    return (_xmlAttr *)v4;
  }
  return result;
}

_xmlAttr *CXFindAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *str2)
{
  if (!a1) {
    return 0;
  }
  for (int i = a1->properties; i; int i = i->next)
  {
    name = i->name;
    if (name && xmlStrEqual(name, str2) && [(CXNamespace *)a2 containsAttribute:i]) {
      break;
    }
  }
  return i;
}

void sub_238A9FE00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_xmlNode *CXNextSibling(_xmlNode *a1)
{
  uint64_t v1 = a1;
  if (!a1)
  {
    uint64_t v2 = [NSString stringWithUTF8String:"xmlNodePtr CXNextSibling(xmlNodePtr)"];
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v2, [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/Utilities/TCXmlUtilities.mm"], 133, 0, "Bad node.");
    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  do
    uint64_t v1 = v1->next;
  while (v1 && v1->type != XML_ELEMENT_NODE);
  return v1;
}

void sub_238AA00AC(_Unwind_Exception *a1)
{
  unsigned int v6 = v4;

  _Unwind_Resume(a1);
}

void sub_238AA0180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA0310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA0430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA0504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA05F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA06CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_xmlAttr *CXRequiredLongAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  BOOL result = CXFindAttribute(a1, a2, a3);
  if (result)
  {
    return (_xmlAttr *)CXLongValue((uint64_t)result, 0);
  }
  return result;
}

char *sfaxmlXmlCharToLong(char *a1, uint64_t *a2)
{
  __endptr = 0;
  uint64_t v4 = strtol(a1, &__endptr, 10);
  if (*__endptr || !*a1)
  {
    if (strchr(a1, 37))
    {
      v4 *= 1000;
    }
    else
    {
      int v5 = strchr(a1, 112);
      if (v5 && v5[1] == 116)
      {
        v4 *= 20;
      }
      else
      {
        BOOL result = strchr(a1, 46);
        if (!result) {
          return result;
        }
      }
    }
  }
  *a2 = v4;
  return (char *)1;
}

void sub_238AA0954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

_xmlNode *CXFindNextChild(_xmlNode *a1, CXNamespace *a2, xmlChar *str1)
{
  for (int i = a1->next; i; int i = i->next)
  {
    if (i->type == XML_ELEMENT_NODE
      && xmlStrEqual(str1, i->name)
      && [(CXNamespace *)a2 containsNode:i])
    {
      break;
    }
  }
  return i;
}

uint64_t CXBoolValue(_xmlAttr *a1)
{
  unsigned __int8 v5 = 0;
  children = a1->children;
  if (!children || children->next || children->type - 3 > 1)
  {
    String = xmlNodeListGetString(a1->doc, children, 1);
    char v3 = 0;
    if (!String) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  String = children->content;
  char v3 = 1;
  if (String) {
LABEL_7:
  }
    sfaxmlXmlCharToBool(String, &v5);
LABEL_8:
  if ((v3 & 1) == 0) {
    ((void (*)(xmlChar *))*MEMORY[0x263F8C880])(String);
  }
  return v5;
}

uint64_t sfaxmlXmlCharToBool(const xmlChar *a1, unsigned char *a2)
{
  if (!xmlStrcasecmp(a1, (const xmlChar *)"TRUE")) {
    goto LABEL_4;
  }
  if (!xmlStrcasecmp(a1, (const xmlChar *)"FALSE")) {
    goto LABEL_6;
  }
  if (xmlStrEqual(a1, (const xmlChar *)"1"))
  {
LABEL_4:
    LOBYTE(v4) = 1;
LABEL_7:
    *a2 = v4;
    return 1;
  }
  if (xmlStrEqual(a1, (const xmlChar *)"0")) {
    goto LABEL_6;
  }
  if (!xmlStrcasecmp(a1, (const xmlChar *)"y")) {
    goto LABEL_4;
  }
  if (!xmlStrcasecmp(a1, (const xmlChar *)"n")) {
    goto LABEL_6;
  }
  if (!xmlStrcasecmp(a1, (const xmlChar *)"t")) {
    goto LABEL_4;
  }
  if (!xmlStrcasecmp(a1, (const xmlChar *)"f")) {
    goto LABEL_6;
  }
  if (!xmlStrcasecmp(a1, (const xmlChar *)"yes")) {
    goto LABEL_4;
  }
  if (!xmlStrcasecmp(a1, (const xmlChar *)"no"))
  {
LABEL_6:
    LOBYTE(v4) = 0;
    goto LABEL_7;
  }
  if (!xmlStrcasecmp(a1, (const xmlChar *)"on")) {
    goto LABEL_4;
  }
  int v4 = xmlStrcasecmp(a1, (const xmlChar *)"off");
  uint64_t result = 0;
  if (!v4) {
    goto LABEL_7;
  }
  return result;
}

NSString *CXDefaultStringAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, NSString *a4)
{
  unsigned __int8 v5 = CXFindAttribute(a1, a2, a3);
  if (!v5) {
    return a4;
  }
  unsigned int v6 = objc_msgSend([NSString alloc], "tc_initWithValueOfXmlAttribute:", v5);
  return (NSString *)v6;
}

BOOL CXOptionalLongAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, uint64_t *a4)
{
  unsigned __int8 v5 = CXFindAttribute(a1, a2, a3);
  unsigned int v6 = v5;
  if (v5) {
    *a4 = CXLongValue((uint64_t)v5, 0);
  }
  return v6 != 0;
}

void sub_238AA1054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238AA12B0(_Unwind_Exception *a1)
{
  int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238AA1554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238AA17F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA18A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA19C4(_Unwind_Exception *a1)
{
  char v3 = v2;

  _Unwind_Resume(a1);
}

void sub_238AA1AE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CXDefaultLongAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, uint64_t a4)
{
  unsigned __int8 v5 = CXFindAttribute(a1, a2, a3);
  if (!v5) {
    return a4;
  }
  return CXLongValue((uint64_t)v5, 0);
}

void sub_238AA1FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238AA2194(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA22B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA2444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA252C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshShape::getContentProperties(EshShape *this)
{
  return (uint64_t)this + 424;
}

uint64_t EshShapeImageData::isBlipSet(EshShapeImageData *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x104u);
}

uint64_t EshShapeImageData::isBlipNameSet(EshShapeImageData *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x105u);
}

uint64_t EshShapeProperties::getShapeType(EshShapeProperties *this)
{
  return EshRecord::getInstance((EshRecord *)((char *)this->var2 + 192));
}

uint64_t EshShape::isConnector(EshShape *this)
{
  return *((unsigned __int8 *)this + 248);
}

void sub_238AA2674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA2700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA2798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshShapeProperties::isMasterIdSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x301u);
}

__n128 EshContentProperties::getBounds(uint64_t a1, __n128 *a2)
{
  int v4 = *(__n128 **)(a1 + 16);
  unsigned __int8 v5 = v4[14].n128_u8[6];
  unsigned __int8 v6 = v4[14].n128_u8[7];
  int isPropertySet = EshOpt::isPropertySet((uint64_t)v4, 4u);
  double v8 = 0.0;
  if (isPropertySet)
  {
    Property = EshOpt::getProperty(*(void *)(a1 + 16), 4u);
    float v10 = EshFixedPointUtil::toFloat((EshFixedPointUtil *)*(unsigned int *)Property);
    double v8 = v10;
    if (fabs(v10) > 365.0)
    {
      if (v10 >= 0.0) {
        double v8 = v8 + -365.0;
      }
      else {
        double v8 = v8 + 365.0;
      }
    }
  }
  __n128 result = v4[15];
  *a2 = result;
  a2[1].n128_f64[0] = v8;
  a2[1].n128_u8[8] = v5;
  a2[1].n128_u8[9] = v6;
  return result;
}

uint64_t EshContentLocks::isAspectRatioSet(EshContentLocks *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x78u);
}

uint64_t EshContentProperties::isWrdInlineSet(EshContentProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2 + 128, 0x53Fu);
}

uint64_t EshContentProperties::getShapeID(EshContentProperties *this)
{
  return *((unsigned int *)this->var2 + 55);
}

void sub_238AA29C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238AA2A80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshTextPath::isOnSet(EshTextPath *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0xF1u);
}

BOOL EshShapeLib::isWordArt(EshShapeLib *this)
{
  return ((unsigned __int16)this & 0xFFF8) == 0x18 || (this - 136) < 0x28;
}

void sub_238AA3020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshPath::isParamsSet(EshPath *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x145u);
}

uint64_t EshPath::isCommandsSet(EshPath *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x146u);
}

uint64_t EshPath::isPathTypeSet(EshPath *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x144u);
}

uint64_t EshPath::isFormulasSet(EshPath *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x156u);
}

uint64_t EshPath::isTextBoxRectsSet(EshPath *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x157u);
}

uint64_t EshPath::isLimoXSet(EshPath *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x153u);
}

uint64_t EshPath::isLimoYSet(EshPath *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x154u);
}

uint64_t EshShapeProperties::isCoordLeftSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x140u);
}

uint64_t EshShapeProperties::isCoordTopSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x141u);
}

uint64_t EshShapeProperties::isCoordRightSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x142u);
}

uint64_t EshShapeProperties::isCoordBottomSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x143u);
}

void sub_238AA3164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA3220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t EshShapeProperties::isAdjSet(EshShapeProperties *this, int a2)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, a2 + 327);
}

uint64_t EshContentProperties::isBehindTextSet(EshContentProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x3BAu);
}

void sub_238AA34B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238AA3678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_238AA3718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA3794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA3BA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA3D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238AA3FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238AA4118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238AA4514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238AA4950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238AA4BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238AA4C28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA4CEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA5150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_238AA52E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238AA5860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, id a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_238AA5A30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA5AC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA5B3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA5F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238AA6008()
{
}

void sub_238AA6010()
{
}

void sub_238AA6234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v17 = v14;

  _Unwind_Resume(a1);
}

void sub_238AA628C()
{
}

void sub_238AA6294()
{
}

void sub_238AA629C()
{
}

void sub_238AA6A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21)
{
  _Unwind_Resume(a1);
}

uint64_t EshTextBox::getAnchor(EshTextBox *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x87u);
}

uint64_t EshShapeProperties::isHiddenSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x3BEu);
}

void sub_238AA6DD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA6E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238AA6F20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA6FC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA70A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA71A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PptHeadersFootersAtom::PptHeadersFootersAtom(PptHeadersFootersAtom *this)
{
  EshAtom::EshAtom((EshAtom *)this, 0xFDAu, 0);
  *(_DWORD *)(v1 + 40) = -1;
  *(unsigned char *)(v1 + 44) = 0;
  *(void *)uint64_t v1 = &unk_26EBEC190;
  *(void *)(v1 + 32) = &unk_26EBEC238;
  *(unsigned char *)(v1 + 52) = 1;
  *(_DWORD *)(v1 + 53) = 0;
  *(unsigned char *)(v1 + 57) = 1;
}

BOOL PptHeadersFootersAtom::isRendered(unsigned __int8 *a1, int a2)
{
  switch(a2)
  {
    case 7:
      int v2 = a1[52];
      goto LABEL_7;
    case 8:
      int v2 = a1[55];
      goto LABEL_7;
    case 9:
      int v2 = a1[57];
      goto LABEL_7;
    case 10:
      int v2 = a1[56];
LABEL_7:
      BOOL result = v2 != 0;
      break;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

void sub_238AA74BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_238AA75D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA768C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA774C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA7804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238AA788C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238AA7978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238AA7AC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA8318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA8734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA8A80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AA95F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAA66C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAA874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAA8DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAA934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAA98C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAA9E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAAAB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAAB18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAABCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAAC5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAADB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAB45C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAB890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AABCE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AABE9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AABF84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAC168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAC220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAC2F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAC744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_238AAC9AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AACB68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AACD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238AACEDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AACF64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t pdSlideLayoutTypeForPptSlideHolder(ESDContainer *a1)
{
  uint64_t v1 = [(ESDContainer *)a1 firstChildOfType:1007];
  Atom = ESDAtomAccess<PptSlideAtom>::extractAtom(v1, 1);

  int v4 = Atom[13];
  int v3 = Atom[14];
  int v5 = Atom[15];
  uint64_t v6 = *((void *)Atom + 8);
  switch(Atom[12])
  {
    case 0:
      if ((v4 & 0xFFFFFFFD) != 0xD || v3 != 16 || v5 != 0) {
        goto LABEL_117;
      }
      return 1;
    case 1:
      if (v4 != 13 || v5 != 0) {
        goto LABEL_117;
      }
      unsigned int v11 = v3 - 14;
      if (v11 >= 0xA) {
        goto LABEL_117;
      }
      return dword_238EF01A0[v11];
    case 7:
      if (v4 != 13 || v3 != 0) {
        goto LABEL_117;
      }
      return 6;
    case 8:
      if (v4 != 13 || v6 != 0) {
        goto LABEL_117;
      }
      if (v3 == 14 && v5 == 14) {
        return 32;
      }
      if (v3 == 19 && v5 == 19) {
        return 4;
      }
      if (v3 == 14 && v5 == 19) {
        return 24;
      }
      if (v3 == 19 && v5 == 14) {
        return 22;
      }
      if (v3 == 22 && v5 == 18) {
        return 14;
      }
      if (v3 == 14 && v5 == 22) {
        return 15;
      }
      if (v3 == 22 && v5 == 14) {
        return 13;
      }
      if (v3 == 14 && v5 == 20) {
        return 19;
      }
      if (v3 == 20 && v5 == 14) {
        return 20;
      }
      if (v3 == 14 && v5 == 24) {
        return 33;
      }
      if (v3 != 24 || v5 != 14) {
        goto LABEL_117;
      }
      return 30;
    case 9:
      if (v4 != 13 || v6 != 0) {
        goto LABEL_117;
      }
      if (v3 == 14 && v5 == 19) {
        return 28;
      }
      if (v3 != 19 || v5 != 14) {
        goto LABEL_117;
      }
      return 26;
    case 0xA:
      v20.i32[0] = Atom[15];
      v20.i32[1] = Atom[13];
      v20.i64[1] = *((void *)Atom + 8);
      if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v20, (int32x4_t)xmmword_238EEFEE0))))) {
        goto LABEL_117;
      }
      if (v3 == 19) {
        unsigned int v21 = 29;
      }
      else {
        unsigned int v21 = 7;
      }
      BOOL v22 = v3 == 14;
      unsigned int v23 = 25;
      goto LABEL_79;
    case 0xB:
      if (v4 != 13 || v3 != 19 || v5 != 19 || HIDWORD(v6) != 0) {
        goto LABEL_117;
      }
      if (v6 == 19) {
        unsigned int v21 = 34;
      }
      else {
        unsigned int v21 = 7;
      }
      BOOL v22 = v6 == 14;
      unsigned int v23 = 23;
LABEL_79:
      if (v22) {
        uint64_t result = v23;
      }
      else {
        uint64_t result = v21;
      }
      break;
    case 0xD:
      v27.i64[1] = *((void *)Atom + 8);
      v27.i32[0] = Atom[13];
      v27.i32[1] = Atom[15];
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v27, (int32x4_t)xmmword_238EEFEC0)))) & 1) != 0
        || v3 != 19)
      {
        goto LABEL_117;
      }
      uint64_t result = 21;
      break;
    case 0xE:
      v28.i64[1] = *((void *)Atom + 8);
      v28.i32[0] = Atom[13];
      v28.i32[1] = Atom[15];
      if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v28, (int32x4_t)xmmword_238EEFED0))))) {
        goto LABEL_117;
      }
      if (v3 != 19 || Atom[18] != 0) {
        goto LABEL_117;
      }
      uint64_t result = 17;
      break;
    case 0xF:
      if (v4 != 19 || v3 != 0) {
        goto LABEL_117;
      }
      uint64_t result = 27;
      break;
    case 0x11:
      if (v4 != 17 || v3 != 18 || v5 != 0) {
        goto LABEL_117;
      }
      uint64_t result = 11;
      break;
    case 0x12:
      if (v4 != 17 || v3 != 18 || v5 != 20 || v6 != 0) {
        goto LABEL_117;
      }
      uint64_t result = 35;
      break;
    default:
LABEL_117:
      uint64_t result = 7;
      break;
  }
  return result;
}

void sub_238AAD2D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAD35C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238AAE38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  _Unwind_Resume(a1);
}

void sub_238AAE850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAE94C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAE9B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAEA24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAEAC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAEB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238AAEC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238AAEEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238AAEFF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAF134(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAF24C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAF338(_Unwind_Exception *a1)
{
  int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238AAF3E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAF48C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAF514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAF5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238AAF68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238AAF800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238AAF90C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAF9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238AAFAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id layoutMapForSlideMaster(PDSlideMaster *a1)
{
  uint64_t v1 = a1;
  int v2 = [MEMORY[0x263EFF9A0] dictionary];
  uint64_t v3 = [(PDSlideMaster *)v1 slideLayoutCount];
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      int v5 = [(PDSlideMaster *)v1 slideLayoutAtIndex:i];
      uint64_t v6 = [v5 slideLayoutType];
      unsigned int v7 = [NSNumber numberWithInt:v6];
      [v2 setObject:v5 forKey:v7];
    }
  }

  return v2;
}

void sub_238AAFC20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AAFF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238AB006C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AB00F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AB0208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AB02C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AB04F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  char v12 = v10;

  _Unwind_Resume(a1);
}

void sub_238AB05A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AB091C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238AB0AA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AB0C78(_Unwind_Exception *a1)
{
  int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238AB0D98(_Unwind_Exception *a1)
{
  int v5 = v4;

  _Unwind_Resume(a1);
}

void sub_238AB0E7C(_Unwind_Exception *a1)
{
  int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238AB1118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AB11D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238AB12B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238AB13B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238AB15DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_238AB16D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238AB1744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AB1908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238AB2290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238AB231C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AB246C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238AB26A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t EshShapeProperties::getMasterId(EshShapeProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x301u);
}

void sub_238AB27A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshShapeLib::isFillOn(EshShapeLib *this, uint64_t a2)
{
  Shapeint Type = (unsigned __int16 *)getShapeType((int)this);
  if (ShapeType) {
    return (*ShapeType >> 2) & 1;
  }
  return a2;
}

#error "238AB27E8: too big function (funcsize=0)"

uint64_t EshShapeLib::isStrokeOn(EshShapeLib *this, uint64_t a2)
{
  Shapeint Type = (unsigned __int16 *)getShapeType((int)this);
  if (ShapeType) {
    return (*ShapeType >> 3) & 1;
  }
  return a2;
}

void sub_238B03208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void EshContainer::addChild(EshContainer *this, EshObject *a2)
{
  if (EshObject::isEscher(a2))
  {
    int v5 = (EshHeader *)operator new(0x10uLL);
    EshHeader::operator=((uint64_t)v5, (uint64_t)v4 + 12);
  }
  else
  {
    int v5 = (EshHeader *)operator new(0x10uLL);
    unsigned __int16 v6 = (*((uint64_t (**)(EshObject *))a2->var0 + 2))(a2);
    EshHeader::EshHeader(v5, 0, 0, v6, 0, 0);
  }
  unint64_t v7 = *((void *)this + 6);
  double v8 = (EshHeader **)*((void *)this + 5);
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = *((void *)this + 4);
    unint64_t v11 = (unint64_t)v8 - v10;
    unint64_t v12 = (v7 - v10) >> 3;
    unsigned int v13 = 2 * v12;
    if (2 * (int)v12 <= (v11 >> 3) + 1) {
      unsigned int v13 = (v11 >> 3) + 1;
    }
    if (v12 >= 0x7FFFFFFF) {
      unint64_t v14 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 48, v14);
      uint64_t v17 = v16;
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v17 = 0;
    }
    int v18 = (EshHeader **)&v15[v11 & 0x7FFFFFFF8];
    uint64_t v19 = &v15[8 * v17];
    *int v18 = v5;
    unsigned int v9 = v18 + 1;
    unsigned int v21 = (char *)*((void *)this + 4);
    int32x4_t v20 = (char *)*((void *)this + 5);
    if (v20 != v21)
    {
      do
      {
        BOOL v22 = (EshHeader *)*((void *)v20 - 1);
        v20 -= 8;
        *--int v18 = v22;
      }
      while (v20 != v21);
      int32x4_t v20 = (char *)*((void *)this + 4);
    }
    *((void *)this + 4) = v18;
    *((void *)this + 5) = v9;
    *((void *)this + 6) = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    SsrwOOStorage *v8 = v5;
    unsigned int v9 = v8 + 1;
  }
  *((void *)this + 5) = v9;
}

void sub_238B03410(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x23EC997B0](v1, 0x1000C408B6DE1C6);
  }
  _Unwind_Resume(exception_object);
}

void sub_238B034E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B03578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PptEshClientTextBox::~PptEshClientTextBox(PptEshClientTextBox *this)
{
  EshContainer::~EshContainer(this);
  JUMPOUT(0x23EC997B0);
}

void sub_238B03788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B038B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B03A50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B03BF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B03D70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B03EE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B03FC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B04020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B0407C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B04140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B041B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B043D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B044D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B046C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v14 = v11;

  _Unwind_Resume(a1);
}

void sub_238B04864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B049B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B04B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B04C70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B04D0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B04F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B05028(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B051F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B05440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B055E4(_Unwind_Exception *a1)
{
  unsigned __int16 v6 = v5;

  _Unwind_Resume(a1);
}

void sub_238B05740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B05810(_Unwind_Exception *a1)
{
  int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238B05A64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B05B28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B05EF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B05FAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B06060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B06124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B06270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B06310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B063B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B06464(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B06560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B06668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B06ACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B06BD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B06DC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B070FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  unsigned int v16 = v14;

  _Unwind_Resume(a1);
}

void sub_238B071EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B07548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238B075F4()
{
  JUMPOUT(0x238B075D0);
}

void sub_238B07754(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B07964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B07E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238B07F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B080D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B08174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B081DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B08300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B08564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238B08834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B0897C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B08A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B08C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v14 = v13;

  _Unwind_Resume(a1);
}

void sub_238B08D58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B08DE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B08E3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B08EC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B09010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B09180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B09218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B092F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B093DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B096E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_238B097E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B09B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_238B0A154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238B0A340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B0A7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_238B0A9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CMDrawingContext;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_238B0AB38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B0ACAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B0AD8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B0AE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_238B0AFA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B0B148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B0B204(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B0B2BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

EshColor *EshColor::black(EshColor *this, EshColor *a2)
{
  *(int *)((char *)&this->var0.var0 + 3) = 0;
  this->var0.$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = 0;
  return this;
}

uint64_t EshColor::getRed(EshColor *this)
{
  return this->var0.var1.var0.var0;
}

uint64_t EshColor::getGreen(EshColor *this)
{
  return this->var0.var1.var0.var1;
}

uint64_t EshColor::getBlue(EshColor *this)
{
  return this->var0.var1.var0.var2;
}

void sub_238B0B84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_238B0BAC4(_Unwind_Exception *a1)
{
  int v5 = v4;

  _Unwind_Resume(a1);
}

void sub_238B0BC28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B0BD88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B0BF6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B0C058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B0C134(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshShapeImageData::getBlipId(EshShapeImageData *this)
{
  return *((unsigned __int16 *)EshOpt::getProperty(*((void *)this + 2), 0x104u) + 4);
}

uint64_t *EshShapeImageData::getBlipName(EshShapeImageData *this)
{
  return *EshOpt::getProperty(*((void *)this + 2), 0x105u);
}

void sub_238B0C2AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B0C3A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshShapeImageData::isCropTopSet(EshShapeImageData *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x100u);
}

uint64_t EshShapeImageData::isCropBottomSet(EshShapeImageData *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x101u);
}

uint64_t EshShapeImageData::isCropLeftSet(EshShapeImageData *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x102u);
}

uint64_t EshShapeImageData::isCropRightSet(EshShapeImageData *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x103u);
}

uint64_t EshShapeImageData::isGainSet(EshShapeImageData *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x108u);
}

uint64_t EshShapeImageData::isBlackLevelSet(EshShapeImageData *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x109u);
}

uint64_t EshShapeImageData::isGrayScaleSet(EshShapeImageData *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x13Du);
}

uint64_t EshShapeImageData::isBilevelSet(EshShapeImageData *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x13Eu);
}

uint64_t EshShapeImageData::isChromakeySet(EshShapeImageData *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x107u);
}

uint64_t EshShapeImageData::isQuicktimeDataSet(EshShapeImageData *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2) + 64, 0x112u);
}

void sub_238B0C568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B0C880(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B0CA28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B0CB6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B0CE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, id a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238B0CFDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B0D0EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B0D2F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B0D394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B0D468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B0D59C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B0D624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SsrwOOStgStream::seek(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a3, a4);
}

void sub_238B0DA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B0DB60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B0DC10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B0DCD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B0DDA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B0DE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B0E028(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v11 = v10;

  if (a2 == 3)
  {
    unint64_t v14 = (unsigned int *)__cxa_begin_catch(a1);
    OCConvertCsException(v14);
    __cxa_end_catch();
  }
  else
  {
    uint64_t v15 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      [v15 raise];
    }
    else {
      +[TCMessageException raise:TCUnknownProblemMessage];
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x238B0DFC4);
}

void sub_238B0E0E4(void *exc_buf)
{
  objc_begin_catch(exc_buf);
  if (!v1) {
    JUMPOUT(0x238B0DFF4);
  }
  JUMPOUT(0x238B0DFCCLL);
}

unsigned __int8 *non-virtual thunk to'PptBinaryReader::read(OcBinaryReader *this, OcSummary *a2)
{
  return OcBinaryReader::readSummary(this - 1, a2);
}

void sub_238B0E300(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v2, 0x1091C4095979E0DLL);

  _Unwind_Resume(a1);
}

unint64_t OCNsEncodingForOcEncoding(UInt32 a1)
{
  switch(a1)
  {
    case 0u:
      return 0;
    case 0xFDE9u:
      return 4;
    case 1u:
      return 10;
  }
  CFStringEncoding v2 = CFStringConvertWindowsCodepageToEncoding(a1);
  if (v2 == -1) {
    return 10;
  }
  return CFStringConvertEncodingToNSStringEncoding(v2);
}

void sub_238B0E568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B0E6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PBPresentationReaderState;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void PptContainer::~PptContainer(PptContainer *this)
{
  EshContainer::~EshContainer(this);
  JUMPOUT(0x23EC997B0);
}

void PptSlideAtom::~PptSlideAtom(PptSlideAtom *this)
{
}

void EshDg::~EshDg(EshDg *this)
{
}

void EshPatriarch::~EshPatriarch(EshPatriarch *this)
{
}

void PptEshClientAnchor::~PptEshClientAnchor(PptEshClientAnchor *this)
{
}

void PptOEPlaceholderAtom::~PptOEPlaceholderAtom(PptOEPlaceholderAtom *this)
{
}

void PptEshClientData::~PptEshClientData(PptEshClientData *this)
{
  EshContainer::~EshContainer(this);
  JUMPOUT(0x23EC997B0);
}

void PptOutlineTextRefAtom::~PptOutlineTextRefAtom(PptOutlineTextRefAtom *this)
{
}

void PptEshShape::~PptEshShape(PptEshShape *this)
{
  PptEshClientContainer::~PptEshClientContainer((PptEshShape *)((char *)this + 576));
  EshContentBase::~EshContentBase(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t vars8;

  PptEshClientContainer::~PptEshClientContainer((PptEshShape *)((char *)this + 576));
  EshContentBase::~EshContentBase(this);
}

void PptEshClientContainer::~PptEshClientContainer(PptEshClientContainer *this)
{
  *(void *)this = &unk_26EBEA140;
  PptEshClientContainer::removeChildren((uint64_t)this);
  CFStringEncoding v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  PptEshClientContainer::~PptEshClientContainer(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t PptEshClientContainer::removeChildren(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 8);
  uint64_t v3 = *(void *)(this + 16);
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void *)(v2 + 8 * v4);
      if (this)
      {
        this = MEMORY[0x23EC997B0](this, 0x1000C408B6DE1C6);
        uint64_t v2 = *(void *)(v1 + 8);
        uint64_t v3 = *(void *)(v1 + 16);
      }
      if (v4 >= ((unint64_t)(v3 - v2) >> 3)) {
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      }
      *(void *)(v2 + 8 * v4++) = 0;
      uint64_t v2 = *(void *)(v1 + 8);
      uint64_t v3 = *(void *)(v1 + 16);
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  *(void *)(v1 + 16) = v2;
  return this;
}

void EshContentBase::~EshContentBase(EshContentBase *this)
{
  *(void *)this = &unk_26EBD8318;
  EshContentData::~EshContentData((EshContentData *)((char *)this + 16));
}

{
  *(void *)this = &unk_26EBD8318;
  EshContentData::~EshContentData((EshContentData *)((char *)this + 16));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBD8318;
  EshContentData::~EshContentData((EshContentData *)((char *)this + 16));
  JUMPOUT(0x23EC997B0);
}

void EshContentData::~EshContentData(EshContentData *this)
{
  EshOpt::~EshOpt((EshOpt *)((char *)this + 128));
  EshOpt::~EshOpt((EshOpt *)((char *)this + 64));
  EshOpt::~EshOpt((EshOpt *)this);
}

void EshOpt::~EshOpt(EshOpt *this)
{
  *(void *)this = &unk_26EBD76D8;
  EshOpt::destroy(this);
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 32, *((void **)this + 5));
}

{
  uint64_t vars8;

  EshOpt::~EshOpt(this);
  JUMPOUT(0x23EC997B0);
}

void EshOpt::destroy(EshOpt *this)
{
  uint64_t v3 = (char *)this + 32;
  uint64_t v2 = (char *)*((void *)this + 4);
  unint64_t v4 = (char *)this + 40;
  if (v2 != (char *)this + 40)
  {
    do
    {
      int v5 = (char *)*((void *)v2 + 1);
      unsigned __int16 v6 = v2;
      if (v5)
      {
        do
        {
          unint64_t v7 = v5;
          int v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          unint64_t v7 = (char *)*((void *)v6 + 2);
          BOOL v8 = *(void *)v7 == (void)v6;
          unsigned __int16 v6 = v7;
        }
        while (!v8);
      }
      EshOpt::deleteComplexPropertyValue((uint64_t)this, *((_DWORD *)v2 + 8));
      uint64_t v2 = v7;
    }
    while (v7 != v4);
  }
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)v3, *((void **)this + 5));
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = v4;
}

uint64_t EshOpt::deleteComplexPropertyValue(uint64_t a1, unsigned int a2)
{
  uint64_t result = EshOpt::getPropertyType(a2);
  switch((int)result)
  {
    case 0:
      int v5 = (uint64_t **)(a1 + 32);
      unsigned int v14 = a2;
      uint64_t v15 = &v14;
      unsigned __int16 v6 = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v14, (uint64_t)&std::piecewise_construct, &v15)[5];
      if (v6)
      {
        v6[1] = (uint64_t)&unk_26EBD7780;
        uint64_t v7 = v6[2];
        if (v7) {
          MEMORY[0x23EC99790](v7, 0x1000C8077774924);
        }
        v6[2] = 0;
        *((_DWORD *)v6 + 6) = 0;
        MEMORY[0x23EC997B0](v6, 0x1090C40DF1FC404);
      }
      unsigned int v14 = a2;
      uint64_t v15 = &v14;
      goto LABEL_20;
    case 8:
      BOOL v8 = *(uint64_t **)(a1 + 40);
      if (!v8) {
        return result;
      }
      break;
    case 9:
      int v5 = (uint64_t **)(a1 + 32);
      unsigned int v14 = a2;
      uint64_t v15 = &v14;
      uint64_t v10 = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v14, (uint64_t)&std::piecewise_construct, &v15)[5];
      if (v10) {
        goto LABEL_14;
      }
      goto LABEL_19;
    case 10:
      int v5 = (uint64_t **)(a1 + 32);
      unsigned int v14 = a2;
      uint64_t v15 = &v14;
      uint64_t v10 = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v14, (uint64_t)&std::piecewise_construct, &v15)[5];
      if (v10) {
LABEL_14:
      }
        (*(void (**)(uint64_t *))(*v10 + 8))(v10);
      goto LABEL_19;
    case 11:
      int v5 = (uint64_t **)(a1 + 32);
      unsigned int v14 = a2;
      uint64_t v15 = &v14;
      unint64_t v11 = (CsData *)std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v14, (uint64_t)&std::piecewise_construct, &v15)[5];
      if (v11)
      {
        CsData::~CsData(v11);
        MEMORY[0x23EC997B0]();
      }
LABEL_19:
      unsigned int v14 = a2;
      uint64_t v15 = &v14;
LABEL_20:
      uint64_t result = (uint64_t)std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v14, (uint64_t)&std::piecewise_construct, &v15);
      *(void *)(result + 40) = 0;
      return result;
    default:
      return result;
  }
  while (1)
  {
    unsigned int v9 = *((_DWORD *)v8 + 8);
    if (v9 <= a2) {
      break;
    }
LABEL_11:
    BOOL v8 = (uint64_t *)*v8;
    if (!v8) {
      return result;
    }
  }
  if (v9 < a2)
  {
    ++v8;
    goto LABEL_11;
  }
  unint64_t v12 = (uint64_t **)(a1 + 32);
  unsigned int v14 = a2;
  uint64_t v15 = &v14;
  uint64_t result = (uint64_t)std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v12, &v14, (uint64_t)&std::piecewise_construct, &v15);
  if (!*(unsigned char *)(result + 40))
  {
    unsigned int v14 = a2;
    uint64_t v15 = &v14;
    unsigned int v13 = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v12, &v14, (uint64_t)&std::piecewise_construct, &v15)[6];
    if (v13) {
      (*(void (**)(uint64_t *))(*v13 + 8))(v13);
    }
    unsigned int v14 = a2;
    uint64_t v15 = &v14;
    uint64_t result = (uint64_t)std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v12, &v14, (uint64_t)&std::piecewise_construct, &v15);
    *(unsigned char *)(result + 40) = 0;
    *(void *)(result + 48) = 0;
  }
  return result;
}

void PptEshBackground::~PptEshBackground(PptEshBackground *this)
{
  PptEshClientContainer::~PptEshClientContainer((PptEshBackground *)((char *)this + 328));
  EshContentBase::~EshContentBase(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t vars8;

  PptEshClientContainer::~PptEshClientContainer((PptEshBackground *)((char *)this + 328));
  EshContentBase::~EshContentBase(this);
}

void PptColorSchemeAtom::~PptColorSchemeAtom(PptColorSchemeAtom *this)
{
}

void PptCString::~PptCString(CsString *this)
{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBE9830;
  this[1].unsigned int var1 = (unsigned __int16 *)&unk_26EBE98D8;
  CsString::~CsString(this + 2);
  JUMPOUT(0x23EC997B0);
}

{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBE9830;
  this[1].unsigned int var1 = (unsigned __int16 *)&unk_26EBE98D8;
  CsString::~CsString(this + 2);
}

void PptSlideTime10Atom::~PptSlideTime10Atom(PptSlideTime10Atom *this)
{
  *(void *)this = &unk_26EBF1DF0;
  *((void *)this + 4) = &unk_26EBF1E98;
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBF1DF0;
  *((void *)this + 4) = &unk_26EBF1E98;
}

void PptAnimHashCode10Atom::~PptAnimHashCode10Atom(PptAnimHashCode10Atom *this)
{
}

void PptAnimNodeAtom::~PptAnimNodeAtom(PptAnimNodeAtom *this)
{
}

void PptAnimVariantAtom::~PptAnimVariantAtom(PptAnimVariantAtom *this)
{
  *(void *)this = &unk_26EBF1348;
  *((void *)this + 4) = &unk_26EBF13F0;
  CsString::~CsString((CsString *)((char *)this + 64));
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBF1348;
  *((void *)this + 4) = &unk_26EBF13F0;
  CsString::~CsString((CsString *)((char *)this + 64));
}

void PptTextRulerAtom::~PptTextRulerAtom(PptTextRulerAtom *this)
{
  *(void *)this = &unk_26EBEE3E0;
  *((void *)this + 4) = &unk_26EBEE488;
  PptTextGenericRulerAtom::clearTabs((uint64_t)this);
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBEE3E0;
  *((void *)this + 4) = &unk_26EBEE488;
  PptTextGenericRulerAtom::clearTabs((uint64_t)this);
}

uint64_t PptTextGenericRulerAtom::clearTabs(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 48);
  if (v2)
  {
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    this = MEMORY[0x23EC997B0](v2, 0x20C40960023A9);
  }
  *(void *)(v1 + 48) = 0;
  return this;
}

void PptTextMasterStyleAtom::~PptTextMasterStyleAtom(PptTextMasterStyleAtom *this)
{
  PptTextMasterStyleAtom::~PptTextMasterStyleAtom(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBEE8C0;
  *((void *)this + 4) = &unk_26EBEE968;
  PptTextMasterStyleAtom::reset(this);
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
}

PptTextMasterStyleAtom *PptTextMasterStyleAtom::reset(PptTextMasterStyleAtom *this)
{
  uint64_t v1 = this;
  uint64_t v2 = *((void *)this + 6);
  if ((unsigned __int16)((*((_DWORD *)this + 14) - v2) >> 3))
  {
    uint64_t v3 = 0;
    uint64_t v4 = 8 * (unsigned __int16)((*((_DWORD *)this + 14) - v2) >> 3);
    do
    {
      uint64_t v5 = *((void *)v1 + 6);
      this = *(PptTextMasterStyleAtom **)(v5 + v3);
      if (this)
      {
        PptParaProperty::~PptParaProperty((PptParaProperty *)this);
        this = (PptTextMasterStyleAtom *)MEMORY[0x23EC997B0]();
        uint64_t v5 = *((void *)v1 + 6);
      }
      *(void *)(v5 + v3) = 0;
      *(void *)(*((void *)v1 + 6) + v3) = 0;
      v3 += 8;
    }
    while (v4 != v3);
    uint64_t v2 = *((void *)v1 + 6);
  }
  *((void *)v1 + 7) = v2;
  return this;
}

void PptTextHeaderAtom::~PptTextHeaderAtom(PptTextHeaderAtom *this)
{
}

void PptTextBytesAtom::~PptTextBytesAtom(PptTextBytesAtom *this)
{
  PptTextBytesAtom::~PptTextBytesAtom(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBEDFF8;
  *((void *)this + 4) = &unk_26EBEE0A8;
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 6) = 0;
}

void PptBaseTextPropertyAtom::~PptBaseTextPropertyAtom(PptBaseTextPropertyAtom *this)
{
  PptTextBlockStylingAtom::~PptTextBlockStylingAtom(this);
  JUMPOUT(0x23EC997B0);
}

void PptTextBlockStylingAtom::~PptTextBlockStylingAtom(PptTextBlockStylingAtom *this)
{
  *(void *)this = &unk_26EBEDE08;
  *((void *)this + 4) = &unk_26EBEDEB0;
  PptTextBlockStylingAtom::reset((uint64_t)this);
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
}

{
  uint64_t vars8;

  PptTextBlockStylingAtom::~PptTextBlockStylingAtom(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t PptTextBlockStylingAtom::reset(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 48);
  if (((*(void *)(this + 56) - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(v2 + 8 * v3);
      if (v4)
      {
        PptParaProperty::~PptParaProperty((PptParaProperty *)(v4 + 8));
        this = MEMORY[0x23EC997B0](v4, 0x1020C405935C4BCLL);
        uint64_t v2 = *(void *)(v1 + 48);
      }
      *(void *)(v2 + 8 * v3++) = 0;
      uint64_t v2 = *(void *)(v1 + 48);
    }
    while (v3 < ((unint64_t)(*(void *)(v1 + 56) - v2) >> 3));
  }
  *(void *)(v1 + 56) = v2;
  uint64_t v5 = *(void *)(v1 + 72);
  if (((*(void *)(v1 + 80) - v5) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v6 = 0;
    do
    {
      this = *(void *)(v5 + 8 * v6);
      if (this)
      {
        this = MEMORY[0x23EC997B0](this, 0x1000C40E65D7F0ALL);
        uint64_t v5 = *(void *)(v1 + 72);
      }
      *(void *)(v5 + 8 * v6++) = 0;
      uint64_t v5 = *(void *)(v1 + 72);
    }
    while (v6 < ((unint64_t)(*(void *)(v1 + 80) - v5) >> 3));
  }
  *(void *)(v1 + 80) = v5;
  *(_DWORD *)(v1 + 96) = 0;
  return this;
}

void PptTextBlockSpecialInfoAtom::~PptTextBlockSpecialInfoAtom(PptTextBlockSpecialInfoAtom *this)
{
  PptTextBlockSpecialInfoAtom::~PptTextBlockSpecialInfoAtom(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBEE4D8;
  *((void *)this + 4) = &unk_26EBEE580;
  PptTextBlockSpecialInfoAtom::reset((uint64_t)this);
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
}

uint64_t PptTextBlockSpecialInfoAtom::reset(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 48);
  if ((unsigned __int16)((*(_DWORD *)(this + 56) - v2) >> 3))
  {
    uint64_t v3 = 0;
    uint64_t v4 = 8 * (unsigned __int16)((*(_DWORD *)(this + 56) - v2) >> 3);
    do
    {
      uint64_t v5 = *(void *)(v1 + 48);
      uint64_t v6 = *(void *)(v5 + v3);
      if (v6)
      {
        PptSpecialInfo11::~PptSpecialInfo11((PptSpecialInfo11 *)(v6 + 24));
        this = MEMORY[0x23EC997B0](v6, 0x1020C4089842113);
        uint64_t v5 = *(void *)(v1 + 48);
      }
      *(void *)(v5 + v3) = 0;
      *(void *)(*(void *)(v1 + 48) + v3) = 0;
      v3 += 8;
    }
    while (v4 != v3);
    uint64_t v2 = *(void *)(v1 + 48);
  }
  *(void *)(v1 + 56) = v2;
  return this;
}

void PptSpecialInfo11::~PptSpecialInfo11(PptSpecialInfo11 *this)
{
}

uint64_t PptSpecialInfo11::reset(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 8);
  if (v2)
  {
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    this = MEMORY[0x23EC997B0](v2, 0x10C402FEFCB83);
  }
  *(void *)(v1 + 8) = 0;
  *(unsigned char *)uint64_t v1 = 0;
  return this;
}

void PptTextCharsAtom::~PptTextCharsAtom(CsString *this)
{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBEE0F8;
  this[1].unsigned int var1 = (unsigned __int16 *)&unk_26EBEE1A0;
  CsString::~CsString(this + 2);
  JUMPOUT(0x23EC997B0);
}

{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBEE0F8;
  this[1].unsigned int var1 = (unsigned __int16 *)&unk_26EBEE1A0;
  CsString::~CsString(this + 2);
}

void PptGenericDateMCAtom::~PptGenericDateMCAtom(PptGenericDateMCAtom *this)
{
}

void PptFooterMCAtom::~PptFooterMCAtom(PptFooterMCAtom *this)
{
}

void PptSlideNumberMCAtom::~PptSlideNumberMCAtom(PptSlideNumberMCAtom *this)
{
}

void PptDocumentAtom::~PptDocumentAtom(PptDocumentAtom *this)
{
}

void PptSrKinsokuAtom::~PptSrKinsokuAtom(PptSrKinsokuAtom *this)
{
}

void PptFontEntityAtom::~PptFontEntityAtom(CsString *this)
{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBEB5F0;
  this[1].unsigned int var1 = (unsigned __int16 *)&unk_26EBEB698;
  CsString::~CsString(this + 2);
  JUMPOUT(0x23EC997B0);
}

{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBEB5F0;
  this[1].unsigned int var1 = (unsigned __int16 *)&unk_26EBEB698;
  CsString::~CsString(this + 2);
}

void PptTextDefaultCharacterStyleAtom::~PptTextDefaultCharacterStyleAtom(PptTextDefaultCharacterStyleAtom *this)
{
}

void PptTextDefaultParagraphStyleAtom::~PptTextDefaultParagraphStyleAtom(PptTextDefaultParagraphStyleAtom *this)
{
  *(void *)this = &unk_26EBEE9B8;
  *((void *)this + 4) = &unk_26EBEEA60;
  PptParaProperty::~PptParaProperty((PptTextDefaultParagraphStyleAtom *)((char *)this + 48));
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBEE9B8;
  *((void *)this + 4) = &unk_26EBEEA60;
  PptParaProperty::~PptParaProperty((PptTextDefaultParagraphStyleAtom *)((char *)this + 48));
}

void PptTextDefaultSpecialInfoAtom::~PptTextDefaultSpecialInfoAtom(PptTextDefaultSpecialInfoAtom *this)
{
}

void EshDgg::~EshDgg(EshDgg *this)
{
  *(void *)this = &unk_26EBD7320;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBD7320;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
}

void EshBSE::~EshBSE(EshBSE *this)
{
  EshBSE::~EshBSE(this);
  JUMPOUT(0x23EC997B0);
}

{
  EshBlip *var3;
  unsigned __int16 *var4;

  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBD6CC8;
  int var3 = this->var3;
  if (var3) {
    (*((void (**)(EshBlip *))var3->var0 + 1))(var3);
  }
  this->int var3 = 0;
  unsigned int var4 = this->var4;
  if (var4) {
    MEMORY[0x23EC99790](var4, 0x1000C80BDFB0063);
  }
  this->unsigned int var4 = 0;
}

void EshBitmapBlip::~EshBitmapBlip(EshBitmapBlip *this)
{
  *(void *)this = &unk_26EBD6B90;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 160));
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 72));
  EshBlip::~EshBlip((EshBlip *)this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBD6B90;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 160));
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 72));
  EshBlip::~EshBlip((EshBlip *)this);
}

void EshBlip::~EshBlip(EshBlip *this)
{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBD6C20;
}

{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBD6C20;
}

{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBD6C20;
  JUMPOUT(0x23EC997B0);
}

void EshShapeDefaults::~EshShapeDefaults(EshShapeDefaults *this)
{
  EshContentBase::~EshContentBase(this);
  JUMPOUT(0x23EC997B0);
}

void EshSplitMenuColors::~EshSplitMenuColors(EshSplitMenuColors *this)
{
  *(void *)this = &unk_26EBD7FB8;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBD7FB8;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
}

void PptSlidePersistAtom::~PptSlidePersistAtom(PptSlidePersistAtom *this)
{
}

void PptViewSettingsAtom::~PptViewSettingsAtom(PptViewSettingsAtom *this)
{
}

void PptSlideViewInfoAtom::~PptSlideViewInfoAtom(PptSlideViewInfoAtom *this)
{
}

void PptViewInfoAtom::~PptViewInfoAtom(PptViewInfoAtom *this)
{
}

void PptGuideAtom::~PptGuideAtom(PptGuideAtom *this)
{
}

void PptGridSpacing10Atom::~PptGridSpacing10Atom(PptGridSpacing10Atom *this)
{
  *(void *)this = &unk_26EBF1728;
  *((void *)this + 4) = &unk_26EBF17D0;
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBF1728;
  *((void *)this + 4) = &unk_26EBF17D0;
}

void PptHeadersFootersAtom::~PptHeadersFootersAtom(PptHeadersFootersAtom *this)
{
}

void PptAtom::~PptAtom(PptAtom *this)
{
}

void PptObjectFactory::~PptObjectFactory(PptObjectFactory *this)
{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBEF2B0;
  unsigned int var1 = this->var1;
  if (var1) {
    (*(void (**)(PptEshObjectFactory *))(*(void *)var1 + 8))(var1);
  }
  this->unsigned int var1 = 0;
  JUMPOUT(0x23EC997B0);
}

{
  PptEshObjectFactory *var1;

  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBEF2B0;
  unsigned int var1 = this->var1;
  if (var1) {
    (*(void (**)(PptEshObjectFactory *))(*(void *)var1 + 8))(var1);
  }
  this->unsigned int var1 = 0;
}

void PptEshObjectFactory::~PptEshObjectFactory(PptEshObjectFactory *this)
{
}

void sub_238B0FEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)OCBReader;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void PptBinaryReader::~PptBinaryReader(PptBinaryReader *this)
{
  PptBinaryReader::~PptBinaryReader(this);
  JUMPOUT(0x23EC997B0);
}

{
  OcReader *v2;
  uint64_t v3;
  uint64_t v4;
  SsrwOOStorage *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  PptPersistDir *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  *(void *)this = &unk_26EBEFA88;
  uint64_t v2 = (OcReader *)((char *)this + 8);
  *((void *)this + 1) = &unk_26EBEFBA8;
  *((void *)this + 3) = &unk_26EBEFC88;
  uint64_t v3 = *((void *)this + 19);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 19) = 0;
  uint64_t v4 = *((void *)this + 18);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 18) = 0;
  uint64_t v5 = (SsrwOOStorage *)*((void *)this + 16);
  if (v5)
  {
    SsrwOOStorage::~SsrwOOStorage(v5);
    MEMORY[0x23EC997B0]();
  }
  *((void *)this + 16) = 0;
  uint64_t v6 = *((void *)this + 23);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 23) = 0;
  uint64_t v7 = *((void *)this + 21);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 21) = 0;
  BOOL v8 = *((void *)this + 22);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *((void *)this + 22) = 0;
  unsigned int v9 = (PptPersistDir *)*((void *)this + 24);
  if (v9)
  {
    PptPersistDir::~PptPersistDir(v9);
    MEMORY[0x23EC997B0]();
  }
  *((void *)this + 24) = 0;
  uint64_t v10 = *((void *)this + 25);
  if (v10) {
    MEMORY[0x23EC997B0](v10, 0x1000C408B6DE1C6);
  }
  *((void *)this + 25) = 0;
  unint64_t v11 = *((void *)this + 26);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  *((void *)this + 26) = 0;
  unint64_t v12 = (void *)*((void *)this + 36);
  *((void *)this + 37) = v12;
  if (*((void *)this + 34))
  {
    EshMark::~EshMark(*((EshMark **)this + 34));
    MEMORY[0x23EC997B0]();
    unint64_t v12 = (void *)*((void *)this + 36);
  }
  *((void *)this + 34) = 0;
  if (v12)
  {
    *((void *)this + 37) = v12;
    operator delete(v12);
  }
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 240, *((void **)this + 31));
  SsrwOORootStorage::~SsrwOORootStorage((PptBinaryReader *)((char *)this + 40));
  OcReader::~OcReader(v2);
}

void PptEshReader::~PptEshReader(PptEshReader *this)
{
  PptEshReader::~PptEshReader(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBEFD10;
  EshBinaryReader::finish(this);
  EshBinaryReader::~EshBinaryReader(this);
}

void EshBinaryReader::~EshBinaryReader(EshBinaryReader *this)
{
  *(void *)this = &unk_26EBD9840;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  if (*((_DWORD *)this + 14)) {
    *((_DWORD *)this + 14) = 0;
  }
  ChStack<EshHeader>::~ChStack((uint64_t)this + 40);
}

{
  uint64_t vars8;

  EshBinaryReader::~EshBinaryReader(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t ChStack<EshHeader>::~ChStack(uint64_t a1)
{
  if (*(void *)a1) {
    MEMORY[0x23EC99790](*(void *)a1 - 16, 0x1000C808B6DE1C6);
  }
  *(void *)a1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    MEMORY[0x23EC99790](v2 - 16, 0x1000C808B6DE1C6);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void PptPersistDir::~PptPersistDir(PptPersistDir *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 3) = 0;
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    do
    {
      uint64_t v4 = (void *)v3[1];
      if (*v3) {
        (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
      }
      *uint64_t v3 = 0;
      MEMORY[0x23EC997B0](v3, 0x20C40A4A59CD2);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 56, *((void **)this + 8));
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 32, *((void **)this + 5));
}

void PptPersistPtrIncrAtom::~PptPersistPtrIncrAtom(PptPersistPtrIncrAtom *this)
{
  *(void *)this = &unk_26EBECC38;
  *((void *)this + 4) = &unk_26EBECCE8;
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBECC38;
  *((void *)this + 4) = &unk_26EBECCE8;
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
}

void SsrwOORootStorage::~SsrwOORootStorage(SsrwOOStorage *this)
{
  $4A9E05CF4EB813CDA9C8B3A246960F55 var0 = this[1].var0;
  uint64_t v2 = (uint64_t **)&this[1];
  if (var0)
  {
    closeStructuredStorage(v2);
    this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = 0;
  }
  SsrwOOStorage::~SsrwOOStorage(this);
}

uint64_t closeStructuredStorage(uint64_t **a1)
{
  if (!a1) {
    return 6;
  }
  uint64_t v2 = *a1;
  if (!*a1) {
    return 6;
  }
  if (v2[13])
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    if (!v2[6] || (uint64_t FatSectors = closeStorageInternal((uint64_t)(v2 + 6)), !FatSectors))
    {
      uint64_t FatSectors = tocWrite(v2[5], (uint64_t)v2);
      if (!FatSectors)
      {
        uint64_t FatSectors = fatTrimFreeSectorsAtEnd(v2[3], (unsigned int *)&v5);
        if (!FatSectors)
        {
          uint64_t FatSectors = fatMarkFreeChain(v2[3]);
          if (!FatSectors)
          {
            uint64_t FatSectors = fatWriteMiniFat(v2[4]);
            if (!FatSectors)
            {
              uint64_t FatSectors = fatWriteFatAndXFat(v2[3]);
              if (!FatSectors)
              {
                uint64_t FatSectors = headerWrite(*v2, v2[2]);
                if (!FatSectors)
                {
                  uint64_t FatSectors = fatGetFatSectors(v2[3], &v6, (_DWORD *)&v5 + 1);
                  if (!FatSectors)
                  {
                    uint64_t FatSectors = headerWriteFatSectors(*v2, v6, HIDWORD(v5));
                    if (!FatSectors)
                    {
                      uint64_t FatSectors = headerWriteSectorFiller(v2[2], *v2);
                      if (!FatSectors)
                      {
                        headerGetSectorShift(v2[2]);
                        fatGetLength(v2[3]);
                        SsrwFtruncate(*v2);
                        uint64_t FatSectors = 0;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t v2 = *a1;
  }
  else
  {
    uint64_t FatSectors = 0;
  }
  closeStg((char *)v2);
  *a1 = 0;
  return FatSectors;
}

void closeStg(char *a1)
{
  if (a1)
  {
    uint64_t v3 = *((void *)a1 + 6);
    uint64_t v2 = a1 + 48;
    if (v3) {
      closeStorageInternal((uint64_t)v2);
    }
    uint64_t v4 = *(void **)a1;
    if (*(void *)a1)
    {
      if (a1[8]) {
        SsrwFclose(v4);
      }
      else {
        SsrwDisconnect(v4);
      }
    }
    uint64_t v5 = (void *)*((void *)a1 + 10);
    if (v5) {
      free(v5);
    }
    if (*((void *)a1 + 4)) {
      fatDestroy((void ***)a1 + 4);
    }
    uint64_t v6 = (void *)*((void *)a1 + 8);
    if (v6) {
      free(v6);
    }
    if (*((void *)a1 + 3)) {
      fatDestroy((void ***)a1 + 3);
    }
    uint64_t v7 = (void *)*((void *)a1 + 2);
    if (v7) {
      free(v7);
    }
    if (*((void *)a1 + 5)) {
      tocDestroy((uint64_t **)a1 + 5);
    }
    BOOL v8 = (void *)*((void *)a1 + 12);
    if (v8) {
      free(v8);
    }
    free(a1);
  }
}

uint64_t closeStorageInternal(uint64_t a1)
{
  int v13 = 2;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = 0;
  if (!a1) {
    return 6;
  }
  uint64_t v2 = *(void *)a1;
  if (!v2) {
    return 6;
  }
  uint64_t result = documentPropertiesWrite(v2);
  if (result) {
    return result;
  }
  int v4 = openListItemCount(*(void *)(*(void *)a1 + 24));
  if (!v4)
  {
LABEL_13:
    uint64_t v6 = *(uint64_t **)a1;
    if ((*(_DWORD *)(*(void *)a1 + 32) - 1) > 1)
    {
LABEL_17:
      uint64_t v9 = v6[2];
      if (!v9) {
        return storageDestroy(a1);
      }
      uint64_t result = storageRemoveOpenChild(v9, 1, (uint64_t)v6);
      if (!result) {
        return storageDestroy(a1);
      }
      return result;
    }
    uint64_t TOC = (uint64_t *)rootStorageGetTOC(*v6);
    uint64_t EntryAtIndex = tocGetEntryAtIndex(TOC, *(_DWORD *)(*(void *)a1 + 8));
    if (EntryAtIndex)
    {
      uint64_t result = directorySetCurrentModificationTime(EntryAtIndex);
      if (result) {
        return result;
      }
      uint64_t v6 = *(uint64_t **)a1;
      goto LABEL_17;
    }
    return 6;
  }
  unsigned int v5 = v4 - 1;
  while (1)
  {
    uint64_t result = openListGetItem(*(uint64_t **)(*(void *)a1 + 24), v5, &v13, &v12);
    if (result) {
      return result;
    }
    if (v13 == 1)
    {
      uint64_t v10 = v12;
      uint64_t result = closeStorageInternal(&v10);
      if (result) {
        return result;
      }
    }
    else if (v13 == 2)
    {
      uint64_t v11 = v12;
      uint64_t result = closeStream(&v11);
      if (result) {
        return result;
      }
    }
    if (--v5 == -1) {
      goto LABEL_13;
    }
  }
}

uint64_t documentPropertiesWrite(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t result = storageHasDocumentProperties(a1);
  if (!result) {
    return result;
  }
  if (storageGetMode(a1) - 1 > 1) {
    return 0;
  }
  uint64_t TOC = (void *)rootStorageGetTOC(a1);
  int v4 = TOC;
  if (*TOC)
  {
    uint64_t v12 = *TOC;
    uint64_t result = propertySetWrite(TOC[3], SSRW_FMTID_SummaryInformation, (uint64_t)&v12);
    if (result) {
      return result;
    }
  }
  uint64_t v6 = v4 + 1;
  uint64_t v5 = v4[1];
  BOOL v8 = v4 + 2;
  uint64_t v7 = v4[2];
  if (v5)
  {
    if (v7) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  if (!v7) {
    return 0;
  }
LABEL_10:
  uint64_t result = streamSeek(v4[4], 0, 0);
  if (result) {
    return result;
  }
  uint64_t v5 = *v6;
  if (*v6)
  {
    uint64_t v7 = *v8;
    if (*v8) {
      goto LABEL_7;
    }
    uint64_t v9 = &SSRW_FMTID_UserDefinedProperties;
    uint64_t v10 = a1;
    uint64_t v11 = v4 + 2;
  }
  else
  {
    uint64_t v9 = &SSRW_FMTID_DocumentSummaryInformation;
    uint64_t v10 = a1;
    uint64_t v11 = v4 + 1;
  }
  uint64_t result = getPropertySetFromStorage(v10, v9, v11);
  if (!result)
  {
    uint64_t v5 = *v6;
    uint64_t v7 = *v8;
LABEL_7:
    uint64_t v12 = v5;
    uint64_t v13 = v7;
    uint64_t result = propertySetWrite(v4[4], &SSRW_FMTID_DocumentSummaryInformation, (uint64_t)&v12);
    if (result) {
      return result;
    }
    return 0;
  }
  return result;
}

BOOL storageHasDocumentProperties(BOOL result)
{
  if (result) {
    return *(void *)(result + 40) != 0;
  }
  return result;
}

uint64_t openListItemCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t openListGetItem(uint64_t *a1, unsigned int a2, _DWORD *a3, void *a4)
{
  if (!a1 || *((_DWORD *)a1 + 2) <= a2) {
    return 6;
  }
  uint64_t v4 = *a1;
  if (a2)
  {
    while (1)
    {
      uint64_t v4 = *(void *)(v4 + 16);
      if (!v4) {
        return 11;
      }
      if (!--a2) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    uint64_t result = 0;
    *a3 = *(_DWORD *)v4;
    *a4 = *(void *)(v4 + 8);
  }
  return result;
}

uint64_t storageDestroy(uint64_t a1)
{
  uint64_t v2 = openListDestroy((void **)(*(void *)a1 + 24));
  uint64_t v3 = *(void **)a1;
  if (*(void *)(*(void *)a1 + 40))
  {
    documentPropertiesDestroy((unsigned int ***)(*(void *)a1 + 40));
    uint64_t v3 = *(void **)a1;
  }
  free(v3);
  *(void *)a1 = 0;
  return v2;
}

uint64_t openListDestroy(void **a1)
{
  if (!a1) {
    return 6;
  }
  uint64_t v2 = *a1;
  if (!*a1) {
    return 6;
  }
  uint64_t v3 = (void *)*v2;
  if (*v2)
  {
    do
    {
      uint64_t v4 = (void *)v3[2];
      free(v3);
      uint64_t v3 = v4;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  free(v2);
  uint64_t result = 0;
  *a1 = 0;
  return result;
}

uint64_t documentPropertiesDestroy(unsigned int ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    propertySetDestroy(v2);
    uint64_t v2 = *a1;
  }
  if (v2[1])
  {
    propertySetDestroy(v2 + 1);
    uint64_t v2 = *a1;
  }
  if (v2[2])
  {
    propertySetDestroy(v2 + 2);
    uint64_t v2 = *a1;
  }
  free(v2);
  *a1 = 0;
  return 0;
}

uint64_t propertySetDestroy(unsigned int **a1)
{
  uint64_t v2 = *a1;
  if ((*a1)[400])
  {
    unint64_t v3 = 0;
    uint64_t v4 = 2;
    do
    {
      propVariantCleanup((uint64_t)&v2[v4]);
      ++v3;
      uint64_t v2 = *a1;
      v4 += 8;
    }
    while (v3 < (*a1)[400]);
  }
  if (v2[610])
  {
    unint64_t v5 = 0;
    uint64_t v6 = 410;
    do
    {
      uint64_t v7 = *(void **)&v2[v6];
      if (v7)
      {
        free(v7);
        *(void *)&v2[v6] = 0;
        uint64_t v2 = *a1;
      }
      ++v5;
      v6 += 4;
    }
    while (v5 < v2[610]);
  }
  free(v2);
  *a1 = 0;
  return 0;
}

uint64_t SsrwFclose(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = (uint64_t (*)(void *))a1[8];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2(a1);
  free(a1);
  return v3;
}

uint64_t SsrwMemFclose(uint64_t a1)
{
  if (a1 && ((*(unsigned char *)(a1 + 40) & 2) == 0 || *(void *)(a1 + 32)) && *(void *)(a1 + 8) != *(void *)(a1 + 16))
  {
    uint64_t v2 = (*(uint64_t (**)(void))(a1 + 32))(**(void **)a1);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 8);
      **(void **)a1 = v2;
      *(void *)(a1 + 16) = v3;
    }
  }
  return 0;
}

uint64_t fatDestroy(void ***a1)
{
  uint64_t v2 = *a1;
  if (v2[1])
  {
    free(v2[1]);
    uint64_t v2 = *a1;
  }
  if (*v2)
  {
    free(*v2);
    uint64_t v2 = *a1;
  }
  free(v2);
  *a1 = 0;
  return 0;
}

uint64_t tocDestroy(uint64_t **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2)
    {
      uint64_t v3 = *v2;
      if (*v2)
      {
        int v4 = sizeOfDirectoryEntry();
        free((void *)(v3 - v4));
        uint64_t v2 = *a1;
      }
      free(v2);
      *a1 = 0;
    }
  }
  return 0;
}

uint64_t sizeOfDirectoryEntry()
{
  return 168;
}

void SsrwOOStorage::~SsrwOOStorage(SsrwOOStorage *this)
{
  if (this->var0)
  {
    closeStorage((uint64_t)this);
    this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = 0;
  }
}

void OcReader::~OcReader(OcReader *this)
{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBD9F18;
}

void sub_238B10F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v11 = v10;

  _Unwind_Resume(a1);
}

void sub_238B110C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v11 = v10;

  _Unwind_Resume(a1);
}

void WrdBinaryReader::WrdBinaryReader(WrdBinaryReader *this)
{
  *(void *)this = &unk_26EBE44E0;
  OcReader::OcReader((OcReader *)((char *)this + 8));
  *(void *)this = &unk_26EBE7240;
  *((void *)this + 1) = &unk_26EBE7428;
  *((void *)this + 3) = &unk_26EBE75E8;
  *((void *)this + 4) = 0;
  WrdEshReader::WrdEshReader((WrdBinaryReader *)((char *)this + 40));
  uint64_t v2 = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((_DWORD *)this + 40) = -1;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((_DWORD *)this + 46) = -1;
  *(_OWORD *)((char *)this + 188) = 0u;
  *(_OWORD *)((char *)this + 204) = 0u;
  *((_DWORD *)this + 55) = 0;
  do
  {
    uint64_t v3 = (char *)this + v2;
    *((void *)v3 + 29) = 0;
    *((void *)v3 + 30) = 0;
    *(void *)((char *)this + v2 + 224) = (char *)this + v2 + 232;
    v2 += 24;
  }
  while (v2 != 192);
  for (uint64_t i = 0; i != 192; i += 24)
  {
    unint64_t v5 = (void *)((char *)this + i);
    v5[53] = 0;
    v5[54] = 0;
    v5[52] = v5 + 53;
  }
  *((_OWORD *)this + 38) = xmmword_238EDF070;
  *((_DWORD *)this + 156) = 0;
  WrdText::WrdText((WrdBinaryReader *)((char *)this + 632));
  *((void *)this + 87) = 0;
}

void sub_238B11240(_Unwind_Exception *a1)
{
  WrdBinaryReader::WrdBinaryReader(v5, v4, v3, v2);
  OcReader::~OcReader(v1);
  _Unwind_Resume(a1);
}

void WrdEshReader::WrdEshReader(WrdEshReader *this)
{
  EshBinaryReader::EshBinaryReader(this);
  void *v1 = &unk_26EBE76D8;
}

void WrdText::WrdText(WrdText *this)
{
  *(void *)this = &unk_26EBE6E88;
  OcText::OcText((OcText *)((char *)this + 8));
  *((_DWORD *)this + 14) = 0;
}

void sub_238B11488(void *a1, int a2)
{
  if (a2 == 3)
  {
    uint64_t v5 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v5);
    __cxa_end_catch();
  }
  else
  {
    uint64_t v6 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      [v6 raise];
    }
    else {
      +[TCMessageException raise:TCUnknownProblemMessage];
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x238B1146CLL);
}

void sub_238B11514(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 2)
  {
    [v2 setStartErrorMessageFromException:objc_begin_catch(exception_object)];
    objc_end_catch();
    JUMPOUT(0x238B1146CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WrdBinaryReader::start(WrdBinaryReader *this, unsigned __int8 *a2, unsigned int a3)
{
  (*(void (**)(WrdBinaryReader *))(*(void *)this + 24))(this);
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  uint64_t v6 = (WrdParser *)operator new(0x138uLL);
  WrdParser::WrdParser(v6);
  *((void *)this + 4) = v6;
  return WrdParser::openInBuf(v6, a2, a3);
}

void sub_238B11638(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void WrdBinaryReader::finish(WrdBinaryReader *this)
{
  uint64_t v2 = (WrdParser *)*((void *)this + 4);
  if (v2)
  {
    WrdParser::closeDoc(v2);
    uint64_t v3 = *((void *)this + 4);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    *((void *)this + 4) = 0;
  }
  for (uint64_t i = 0; i != 192; i += 24)
  {
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + i + 224, *(void **)((char *)this + i + 232));
    *(void *)((char *)this + i + 224) = (char *)this + i + 232;
    *(void *)((char *)this + i + 232) = 0;
    *(void *)((char *)this + i + 240) = 0;
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + i + 416, *(void **)((char *)this + i + 424));
    *(void *)((char *)this + i + 424) = 0;
    *(void *)((char *)this + i + 432) = 0;
    *(void *)((char *)this + i + 416) = (char *)this + i + 424;
  }
  uint64_t v5 = *((void *)this + 17);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 17) = 0;
  uint64_t v6 = (WrdBinTable *)*((void *)this + 18);
  if (v6)
  {
    WrdBinTable::~WrdBinTable(v6);
    MEMORY[0x23EC997B0]();
  }
  *((void *)this + 18) = 0;
  uint64_t v7 = (WrdBinTable *)*((void *)this + 21);
  if (v7)
  {
    WrdBinTable::~WrdBinTable(v7);
    MEMORY[0x23EC997B0]();
  }
  *((void *)this + 21) = 0;
  uint64_t v8 = *((void *)this + 22);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *((void *)this + 22) = 0;
  uint64_t v9 = *((void *)this + 19);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *((void *)this + 19) = 0;
  uint64_t v10 = *((void *)this + 24);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  *((void *)this + 24) = 0;
  uint64_t v11 = *((void *)this + 25);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  *((void *)this + 25) = 0;
  uint64_t v12 = *((void *)this + 26);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  *((void *)this + 26) = 0;
  uint64_t v13 = *((void *)this + 27);
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  *((void *)this + 27) = 0;
  uint64_t v14 = *((void *)this + 87);
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  *((void *)this + 87) = 0;
  EshBinaryReader::finish((WrdBinaryReader *)((char *)this + 40));
}

void WrdParser::WrdParser(WrdParser *this)
{
  uint64_t v2 = (OcParser *)TSURectWithOriginAndSize(this);
  OcParser::OcParser(v2);
  *(void *)uint64_t v3 = &unk_26EBE77E0;
  *(_DWORD *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  SsrwOORootStorage::SsrwOORootStorage((SsrwOORootStorage *)(v3 + 24));
  *((void *)this + 18) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 38) = -1;
  WrdFileInformationBlock::WrdFileInformationBlock((WrdParser *)((char *)this + 160));
  *((unsigned char *)this + 248) = 0;
  WrdChpParser::WrdChpParser((WrdParser *)((char *)this + 252));
  WrdChpParser::WrdChpParser((WrdParser *)((char *)this + 256));
  WrdChpParser::WrdChpParser((WrdParser *)((char *)this + 260));
  WrdChpParser::WrdChpParser((WrdParser *)((char *)this + 264));
  WrdChpParser::WrdChpParser((WrdParser *)((char *)this + 268));
  *((_DWORD *)this + 76) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
}

void sub_238B11990(_Unwind_Exception *a1)
{
  SsrwOORootStorage::~SsrwOORootStorage(v2);
  OcParser::OcParser(v1);
  _Unwind_Resume(a1);
}

void OcParser::OcParser(OcParser *this)
{
  *(void *)this = &unk_26EBD9EE8;
}

void WrdFileInformationBlock::WrdFileInformationBlock(WrdFileInformationBlock *this)
{
  WrdFileInformationBlockHeader::WrdFileInformationBlockHeader(this);
  *(_WORD *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  *(_WORD *)(v1 + 56) = 0;
  *(void *)(v1 + 64) = 0;
  *(_WORD *)(v1 + 72) = 0;
  *(void *)(v1 + 80) = 0;
}

void WrdFileInformationBlockHeader::WrdFileInformationBlockHeader(WrdFileInformationBlockHeader *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = -1;
  *((void *)this + 2) = 0xFFFFFFFFLL;
  *(_DWORD *)((char *)this + 23) = 0;
  *(void *)((char *)this + 28) = 0;
  *((_WORD *)this + 18) = 0;
  *((_WORD *)this + 19) &= 0xFE00u;
}

void WrdPropertyParser::WrdPropertyParser(WrdPropertyParser *this)
{
  *(_DWORD *)TSURectWithOriginAndSize(this) = -1;
}

uint64_t WrdParser::openInBuf(WrdParser *this, unsigned __int8 *a2, unsigned int a3)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  WrdParser::createFactories((uint64_t)this);
  *((void *)this + 37) = a2;
  *((_DWORD *)this + 76) = a3;
  *((void *)this + 2) = 0;
  SsrwOORootStorage::openInBuf((WrdParser *)((char *)this + 24), (const void **)this + 37, a3);
  return WrdParser::initStreamsAndFibBase(this);
}

uint64_t WrdParser::createFactories(uint64_t this)
{
  if (!*(void *)(this + 280))
  {
    uint64_t v1 = this;
    uint64_t v2 = (WrdObjectFactory *)operator new(0x10uLL);
    WrdObjectFactory::WrdObjectFactory(v2);
    *(void *)(v1 + 280) = v2;
    uint64_t v3 = (WrdEshObjectFactory *)operator new(0x10uLL);
    v3->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBE5E40;
    *(void *)&v3->unsigned int var1 = 0;
    return WrdObjectFactory::takeEshObjectFactory(v2, v3);
  }
  return this;
}

void sub_238B11B78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void WrdObjectFactory::WrdObjectFactory(WrdObjectFactory *this)
{
  *(void *)this = &unk_26EBE6608;
  *((void *)this + 1) = 0;
}

uint64_t WrdObjectFactory::takeEshObjectFactory(WrdObjectFactory *this, WrdEshObjectFactory *a2)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 1) = a2;
  return result;
}

uint64_t WrdParser::initStreamsAndFibBase(WrdParser *this)
{
  *((void *)this + 18) = 0;
  uint64_t v2 = (SsrwOOStgInfo **)((char *)this + 144);
  uint64_t v3 = (SsrwOOStorage *)((char *)this + 24);
  *((void *)this + 14) = SsrwOOStorage::openStream((SsrwOOStorage *)((char *)this + 24), "WordDocument");
  *((void *)this + 15) = 0;
  *((void *)this + 17) = 0;
  SsrwOOStorage::getChildrenInfo(v3, v2, (int *)this + 2);
  if (*((int *)this + 2) < 1)
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
    char v8 = 1;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    char v8 = 1;
    do
    {
      if (!v6
        && (uint64_t v9 = (const char *)SsrwOOStgInfo::getName((SsrwOOStgInfo *)((char *)*v2 + v4)), !strcmp(v9, "0Table")))
      {
        Name = (const char *)SsrwOOStgInfo::getName((SsrwOOStgInfo *)((char *)*v2 + v4));
        uint64_t v6 = SsrwOOStorage::openStream(v3, Name);
      }
      else if (!v7 {
             && (uint64_t v10 = (const char *)SsrwOOStgInfo::getName((SsrwOOStgInfo *)((char *)*v2 + v4)), !strcmp(v10, "1Table")))
      }
      {
        uint64_t v15 = (const char *)SsrwOOStgInfo::getName((SsrwOOStgInfo *)((char *)*v2 + v4));
        uint64_t v7 = SsrwOOStorage::openStream(v3, v15);
        v8 &= v6 != 0;
      }
      else if (!*((void *)this + 15) {
             && (uint64_t v11 = (const char *)SsrwOOStgInfo::getName((SsrwOOStgInfo *)((char *)*v2 + v4)), !strcmp(v11, "Data")))
      }
      {
        unsigned int v16 = (const char *)SsrwOOStgInfo::getName((SsrwOOStgInfo *)((char *)*v2 + v4));
        *((void *)this + 15) = SsrwOOStorage::openStream(v3, v16);
      }
      else if (!*((void *)this + 17))
      {
        uint64_t v12 = (const char *)SsrwOOStgInfo::getName((SsrwOOStgInfo *)((char *)*v2 + v4));
        if (!strcmp(v12, "ObjectPool"))
        {
          uint64_t v13 = (const char *)SsrwOOStgInfo::getName((SsrwOOStgInfo *)((char *)*v2 + v4));
          *((void *)this + 17) = SsrwOOStorage::openStorage(v3, v13);
        }
      }
      ++v5;
      v4 += 184;
    }
    while (v5 < *((int *)this + 2));
  }
  uint64_t result = WrdParser::parse(this, (WrdParser *)((char *)this + 160));
  if (!v6)
  {
    if (!v7)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 11;
    }
    goto LABEL_29;
  }
  if (!v7)
  {
LABEL_27:
    *((void *)this + 16) = v6;
    return result;
  }
  if ((*((unsigned char *)this + 186) & 0x20) != 0)
  {
    if ((v8 & 1) == 0)
    {
      *((void *)this + 16) = v6;
      (*(void (**)(SsrwOOStgStream *, void))(*(void *)v7 + 152))(v7, 0);
      int v18 = *(uint64_t (**)(SsrwOOStgStream *))(*(void *)v7 + 8);
      uint64_t v19 = v7;
      goto LABEL_31;
    }
    (*(void (**)(SsrwOOStgStream *, void))(*(void *)v7 + 152))(v7, 0);
    uint64_t result = (*(uint64_t (**)(SsrwOOStgStream *))(*(void *)v7 + 8))(v7);
    goto LABEL_27;
  }
  if ((v8 & 1) == 0)
  {
    (*(void (**)(SsrwOOStgStream *, void))(*(void *)v6 + 152))(v6, 0);
    uint64_t result = (*(uint64_t (**)(SsrwOOStgStream *))(*(void *)v6 + 8))(v6);
LABEL_29:
    *((void *)this + 16) = v7;
    return result;
  }
  *((void *)this + 16) = v7;
  (*(void (**)(SsrwOOStgStream *, void))(*(void *)v6 + 152))(v6, 0);
  int v18 = *(uint64_t (**)(SsrwOOStgStream *))(*(void *)v6 + 8);
  uint64_t v19 = v6;
LABEL_31:
  return v18(v19);
}

void sub_238B12024()
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  if (v0) {
    (*(void (**)(uint64_t))(*(void *)v0 + 8))(v0);
  }
  _Unwind_Resume(v2);
}

void sub_238B12048()
{
}

SsrwOOStgStream *SsrwOOStorage::openStream(SsrwOOStorage *this, const char *__s)
{
  size_t v4 = 0;
  do
  {
    this->var1[v4] = __s[v4];
    ++v4;
  }
  while (v4 <= strlen(__s));
  return SsrwOOStorage::openStream(this, this->var1);
}

void SsrwOOStorage::getChildrenInfo(SsrwOOStorage *this, SsrwOOStgInfo **a2, int *a3)
{
  int v19 = 0;
  int v18 = 0;
  int ChildrenInfo = getChildrenInfo((uint64_t)this->var0, (void ***)&v18, (unsigned int *)&v19);
  if (ChildrenInfo)
  {
    int v16 = ChildrenInfo;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v16;
  }
  uint64_t v6 = v19;
  if (v19 < 1 || v18 == 0)
  {
    uint64_t v10 = 0;
  }
  else
  {
    char v8 = operator new[](184 * v19 + 16);
    unint64_t v9 = 0;
    void *v8 = 184;
    v8[1] = v6;
    uint64_t v10 = (SsrwOOStgInfo *)(v8 + 2);
    uint64_t v11 = 184 * v6;
    do
    {
      SsrwOOStgInfo::SsrwOOStgInfo((SsrwOOStgInfo *)&v8[v9 / 8 + 2]);
      v9 += 184;
    }
    while (v11 != v9);
    unsigned int v12 = v19;
    if (v19 >= 1)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = (uint64_t)(v8 + 2);
      do
      {
        SsrwOOStgInfo::operator=(v15, (long long *)((char *)v18 + v13));
        ++v14;
        unsigned int v12 = v19;
        v15 += 184;
        v13 += 64;
      }
      while (v14 < v19);
    }
    freeInfo((void **)v18, v12);
    free(v18);
    LODWORD(v6) = v19;
  }
  *a2 = v10;
  *a3 = v6;
}

void sub_238B1224C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, int a10, unsigned int a11)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    freeInfo(a9, a11);
    free(a9);
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 5;
  }
  _Unwind_Resume(exception_object);
}

void SsrwOOStgInfo::SsrwOOStgInfo(SsrwOOStgInfo *this)
{
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = this;
  *(void *)this = (char *)this + 108;
  *((unsigned char *)this + 72) = 0;
}

uint64_t SsrwOOStgInfo::operator=(uint64_t a1, long long *a2)
{
  if (*(void *)a2)
  {
    uint64_t v3 = *(_OWORD **)(a1 + 64);
    v3[2] = 0u;
    v3[3] = 0u;
    *uint64_t v3 = 0u;
    v3[1] = 0u;
    *(unsigned char *)(a1 + 72) = 0;
    size_t v4 = *(_OWORD **)(a1 + 64);
    long long v5 = *a2;
    long long v6 = a2[1];
    long long v7 = a2[3];
    v4[2] = a2[2];
    v4[3] = v7;
    *size_t v4 = v5;
    v4[1] = v6;
    **(void **)(a1 + 64) = a1 + 108;
    SsrwOOStgInfo::setNamePrivate<unsigned short>(a1, *(void *)a2);
  }
  return a1;
}

uint64_t SsrwOOStgInfo::getName(SsrwOOStgInfo *this)
{
  int v3 = *((unsigned __int8 *)this + 72);
  uint64_t result = (uint64_t)this + 72;
  if (!v3)
  {
    uint64_t v4 = 0;
    long long v5 = (void *)*((void *)this + 8);
    while (*(unsigned __int16 *)(*v5 + 2 * v4++))
      ;
    uint64_t v7 = 0;
    do
    {
      *(unsigned char *)(result + v7) = *(_WORD *)(*v5 + 2 * v7);
      ++v7;
    }
    while (v4 != v7);
  }
  return result;
}

void *SsrwOOStorage::openStorage(SsrwOOStorage *this, const char *__s)
{
  size_t v4 = 0;
  do
  {
    this->var1[v4] = __s[v4];
    ++v4;
  }
  while (v4 <= strlen(__s));
  return SsrwOOStorage::openStorage(this, this->var1);
}

void *SsrwOOStorage::openStorage(SsrwOOStorage *this, const unsigned __int16 *a2)
{
  uint64_t v6 = 0;
  int v2 = openStorage((uint64_t)this->var0, a2, &v6);
  if (v2)
  {
    int v4 = v2;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v4;
  }
  uint64_t result = operator new(0x50uLL);
  *uint64_t result = v6;
  return result;
}

uint64_t openStorage(uint64_t a1, const unsigned __int16 *a2, uint64_t *a3)
{
  uint64_t v10 = 0;
  if (!a1) {
    return 6;
  }
  uint64_t result = 6;
  if (a2 && *(void *)a1 && a3 && *a2 && (*(_DWORD *)(a1 + 32) | 2) == 2)
  {
    uint64_t TOC = (uint64_t *)rootStorageGetTOC(*(void *)a1);
    uint64_t EntryAtIndex = tocGetEntryAtIndex(TOC, *(_DWORD *)(a1 + 8));
    if (EntryAtIndex)
    {
      uint64_t result = tocFindChildEntry(TOC, EntryAtIndex, a2, &v10);
      if (!result)
      {
        uint64_t result = storageConstructFromDirEntry(v10, a3);
        if (!result)
        {
          *(void *)(*a3 + 16) = a1;
          *(void *)*a3 = *(void *)a1;
          uint64_t v9 = *a3;
          *(_DWORD *)(v9 + 32) = *(_DWORD *)(a1 + 32);
          return openListAppend(*(void *)(a1 + 24), 1, v9);
        }
      }
    }
    else
    {
      return 11;
    }
  }
  return result;
}

uint64_t WrdParser::parse(WrdParser *this, WrdFileInformationBlockHeader *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 14) + 16))(*((void *)this + 14), 0, 0);
  if ((*(unsigned int (**)(void))(**((void **)this + 14) + 80))(*((void *)this + 14)) != 42476)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 8003;
  }
  *((_WORD *)a2 + 8) = -23060;
  *((_WORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 14) + 80))(*((void *)this + 14));
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 14) + 80))(*((void *)this + 14));
  *((_WORD *)a2 + 9) = v4;
  if (v4 < 0x6000)
  {
    if (v4 < 0x4000)
    {
      if ((v4 & 0xF000) == 0x2000)
      {
        unsigned int v5 = 9;
      }
      else
      {
        if (v4 - 5 >= 0x9FB)
        {
          unsigned int v5 = *((_DWORD *)this + 38);
          goto LABEL_11;
        }
        unsigned int v5 = 8;
      }
    }
    else
    {
      unsigned int v5 = 10;
    }
  }
  else
  {
    unsigned int v5 = 11;
  }
  *((_DWORD *)this + 38) = v5;
LABEL_11:
  *(int32x4_t *)((char *)this + 252) = vdupq_n_s32(v5);
  *((_DWORD *)this + 67) = v5;
  *(_DWORD *)a2 = (*(uint64_t (**)(void))(**((void **)this + 14) + 80))(*((void *)this + 14));
  *((_WORD *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 14) + 72))(*((void *)this + 14));
  unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 14) + 80))(*((void *)this + 14));
  *((_WORD *)a2 + 17) = v6 >> 4;
  __int16 v7 = *((_WORD *)a2 + 19) & 0xFFF0 | (v6 >> 10) & 3 | (v6 >> 11) & 4;
  *((unsigned char *)a2 + 26) = ((v6 >> 4) & 0x30 | v6 & 0xF | (v6 >> 6) & 0x40 | (v6 >> 7) & 0x80) ^ 0x20;
  *((_WORD *)a2 + 19) = v7 | (v6 >> 12) & 8;
  *((_WORD *)a2 + 18) = (*(uint64_t (**)(void))(**((void **)this + 14) + 80))(*((void *)this + 14));
  *((_DWORD *)a2 + 7) = (*(uint64_t (**)(void))(**((void **)this + 14) + 96))(*((void *)this + 14));
  *((_DWORD *)a2 + 1) = (*(uint64_t (**)(void))(**((void **)this + 14) + 64))(*((void *)this + 14));
  __int16 v8 = (*(uint64_t (**)(void))(**((void **)this + 14) + 64))(*((void *)this + 14));
  *((_WORD *)a2 + 19) = *((_WORD *)a2 + 19) & 0xFE0F | (16 * v8) & 0x10 | (16 * v8) & 0x60 | (16 * v8) & 0x180;
  *((_WORD *)a2 + 10) = (*(uint64_t (**)(void))(**((void **)this + 14) + 80))(*((void *)this + 14));
  *((_WORD *)a2 + 11) = (*(uint64_t (**)(void))(**((void **)this + 14) + 80))(*((void *)this + 14));
  *((_DWORD *)a2 + 2) = (*(uint64_t (**)(void))(**((void **)this + 14) + 96))(*((void *)this + 14));
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 14) + 96))(*((void *)this + 14));
  *((_DWORD *)a2 + 3) = result;
  *((unsigned char *)this + 248) = 1;
  return result;
}

uint64_t non-virtual thunk to'WrdBinaryReader::readEncryptionInfo(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  return WrdBinaryReader::readEncryptionInfo(a1 - 24, a2, a3, a4);
}

uint64_t WrdBinaryReader::readEncryptionInfo(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4 || !*(void *)(v4 + 128))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 8000;
  }
  if ((*(unsigned char *)(v4 + 186) & 0x10) != 0)
  {
    if ((*(_WORD *)(v4 + 198) & 8) == 0)
    {
      *a3 = *(_DWORD *)(v4 + 188);
      operator new[]();
    }
    int v5 = 8003;
  }
  else
  {
    int v5 = 8011;
  }
  *a4 = v5;
  return 0;
}

void sub_238B12BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238B13610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double WrdBinaryReader::initForReading(WrdParser **this)
{
  WrdParser::parse(this[4], (WrdParser *)((char *)this[4] + 160));
  EshGroupProperties::init((uint64_t)(this + 5), *(void *)(*((void *)this[4] + 35) + 8));
  (*((void (**)(char *, void))this[1] + 18))((char *)this + 8, *(void *)(*((void *)this[4] + 35) + 8));
  *((_DWORD *)this + 40) = -1;
  this[23] = (WrdParser *)0xFFFFFFFFLL;
  int v2 = (WrdRdrText *)operator new(0x68uLL);
  WrdRdrText::WrdRdrText(v2, *((SsrwOOStream **)this[4] + 14));
  this[17] = v2;
  WrdParser::parse(this[4], v2);
  int v3 = (WrdBinTable *)operator new(0x40uLL);
  WrdBinTable::WrdBinTable(v3);
  this[18] = v3;
  WrdParser::parse(this[4], (uint64_t)v3, 0xDu);
  uint64_t v4 = (WrdBinTable *)operator new(0x40uLL);
  WrdBinTable::WrdBinTable(v4);
  this[21] = v4;
  WrdParser::parse(this[4], (uint64_t)v4, 0xCu);
  int v5 = (WrdPAPXFKP *)operator new(0x28uLL);
  WrdPAPXFKP::WrdPAPXFKP(v5);
  this[19] = v5;
  WrdFormattedDiskPage::init(v5);
  unsigned int v6 = (WrdCHPXFKP *)operator new(0x28uLL);
  WrdCHPXFKP::WrdCHPXFKP(v6);
  this[22] = v6;
  WrdFormattedDiskPage::init(v6);
  __int16 v7 = (WrdSectionDescriptorTable *)operator new(0x20uLL);
  WrdSectionDescriptorTable::WrdSectionDescriptorTable(v7);
  this[24] = v7;
  WrdParser::parse(this[4], v7);
  __int16 v8 = this[4];
  if ((*((unsigned char *)v8 + 186) & 4) != 0)
  {
    uint64_t v9 = (WrdStyleSheet *)(*(uint64_t (**)(void, uint64_t))(**((void **)v8 + 35) + 16))(*((void *)v8 + 35), 57);
    this[25] = v9;
    WrdParser::parse(this[4], v9);
  }
  uint64_t v10 = (WrdEmbeddedTTFRecordTable *)operator new(0x20uLL);
  WrdEmbeddedTTFRecordTable::WrdEmbeddedTTFRecordTable(v10);
  this[26] = v10;
  uint64_t v11 = (WrdDocumentFileRecord *)operator new(0x50uLL);
  WrdDocumentFileRecord::WrdDocumentFileRecord(v11);
  this[27] = v11;
  WrdParser::parse(this[4], v11);
  *((_DWORD *)this + 156) = 0;
  double result = NAN;
  *((_OWORD *)this + 38) = xmmword_238EDF070;
  return result;
}

void sub_238B13820(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void WrdParser::parse(WrdParser *this, WrdFileInformationBlock *a2)
{
  uint64_t v3 = *((void *)this + 14);
  if (!v3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
  if (*((unsigned char *)this + 248)) {
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v3 + 16))(v3, 32, 0);
  }
  else {
    WrdParser::parse(this, a2);
  }
  unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 14) + 80))(*((void *)this + 14));
  WrdFileInformationBlock::setCountOfShorts(a2, v5);
  if (*((_WORD *)a2 + 20))
  {
    int v6 = 0;
    do
    {
      __int16 v7 = (*(uint64_t (**)(void))(**((void **)this + 14) + 72))(*((void *)this + 14));
      WrdFileInformationBlock::setValueFromShortArray((uint64_t)a2, (unsigned __int16)v6++, v7);
    }
    while (*((unsigned __int16 *)a2 + 20) > (__int16)v6);
  }
  unsigned int v8 = (*(uint64_t (**)(void))(**((void **)this + 14) + 80))(*((void *)this + 14));
  WrdFileInformationBlock::setCountOfLongs(a2, v8);
  if (*((_WORD *)a2 + 28))
  {
    int v9 = 0;
    do
    {
      int v10 = (*(uint64_t (**)(void))(**((void **)this + 14) + 96))(*((void *)this + 14));
      WrdFileInformationBlock::setValueFromLongArray((uint64_t)a2, (unsigned __int16)v9++, v10);
    }
    while (*((unsigned __int16 *)a2 + 28) > (__int16)v9);
  }
  unsigned int v11 = (*(uint64_t (**)(void))(**((void **)this + 14) + 80))(*((void *)this + 14));
  WrdFileInformationBlock::setCountOfFCLCBs(a2, v11);
  if (*((_WORD *)a2 + 36))
  {
    int v12 = 0;
    do
    {
      int v13 = (*(uint64_t (**)(void))(**((void **)this + 14) + 96))(*((void *)this + 14));
      *(_DWORD *)WrdFileInformationBlock::getFCLCB(a2, (unsigned __int16)v12) = v13;
      int v14 = (*(uint64_t (**)(void))(**((void **)this + 14) + 104))(*((void *)this + 14));
      *(_DWORD *)(WrdFileInformationBlock::getFCLCB(a2, (unsigned __int16)v12++) + 4) = v14;
    }
    while (*((unsigned __int16 *)a2 + 36) > (__int16)v12);
  }
}

void WrdFileInformationBlock::setCountOfShorts(WrdFileInformationBlock *this, unsigned int a2)
{
  *((_WORD *)this + 20) = a2;
  uint64_t v3 = *((void *)this + 6);
  if (v3)
  {
    MEMORY[0x23EC99790](v3, 0x1000C80BDFB0063);
    a2 = *((unsigned __int16 *)this + 20);
  }
  *((void *)this + 6) = 0;
  uint64_t v4 = operator new[](2 * a2);
  *((void *)this + 6) = v4;
  size_t v5 = 2 * *((unsigned __int16 *)this + 20);
  bzero(v4, v5);
}

uint64_t WrdFileInformationBlock::setValueFromShortArray(uint64_t this, unsigned int a2, __int16 a3)
{
  uint64_t v3 = *(void *)(this + 48);
  if (!v3 || *(unsigned __int16 *)(this + 40) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  *(_WORD *)(v3 + 2 * a2) = a3;
  return this;
}

void WrdFileInformationBlock::setCountOfLongs(WrdFileInformationBlock *this, unsigned int a2)
{
  *((_WORD *)this + 28) = a2;
  uint64_t v3 = *((void *)this + 8);
  if (v3)
  {
    MEMORY[0x23EC99790](v3, 0x1000C8052888210);
    a2 = *((unsigned __int16 *)this + 28);
  }
  *((void *)this + 8) = 0;
  uint64_t v4 = operator new[](4 * a2);
  *((void *)this + 8) = v4;
  size_t v5 = 4 * *((unsigned __int16 *)this + 28);
  bzero(v4, v5);
}

uint64_t WrdFileInformationBlock::setValueFromLongArray(uint64_t this, unsigned int a2, int a3)
{
  uint64_t v3 = *(void *)(this + 64);
  if (v3)
  {
    if (*(unsigned __int16 *)(this + 56) > a2) {
      *(_DWORD *)(v3 + 4 * a2) = a3;
    }
  }
  return this;
}

void WrdFileInformationBlock::setCountOfFCLCBs(WrdFileInformationBlock *this, unsigned int a2)
{
  *((_WORD *)this + 36) = a2;
  uint64_t v3 = *((void *)this + 10);
  if (v3)
  {
    MEMORY[0x23EC99790](v3, 0x1000C8000313F17);
    a2 = *((unsigned __int16 *)this + 36);
  }
  *((void *)this + 10) = 0;
  uint64_t v4 = operator new[](8 * a2);
  *((void *)this + 10) = v4;
  size_t v5 = 8 * *((unsigned __int16 *)this + 36);
  bzero(v4, v5);
}

uint64_t WrdFileInformationBlock::getFCLCB(WrdFileInformationBlock *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 10);
  if (!v2 || *((unsigned __int16 *)this + 36) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  return v2 + 8 * a2;
}

void WrdRdrText::WrdRdrText(WrdRdrText *this, SsrwOOStream *a2)
{
  *(void *)this = &unk_26EBE7848;
  *((_DWORD *)this + 18) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = a2;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
}

uint64_t WrdParser::parse(WrdParser *this, WrdRdrText *a2)
{
  unsigned int started = WrdParser::startFCLCB(this, 0x21u);
  uint64_t v4 = (void *)*((void *)this + 34);
  if (v4)
  {
    if (*v4) {
      MEMORY[0x23EC99790](*v4, 0x1000C8052888210);
    }
    *uint64_t v4 = 0;
    MEMORY[0x23EC997B0](v4, 0x1010C40A1D9428BLL);
  }
  *((void *)this + 34) = 0;
  size_t v5 = (WrdClxGrpprls *)operator new(0x10uLL);
  *(void *)size_t v5 = 0;
  *((_DWORD *)v5 + 2) = 0;
  *((void *)this + 34) = v5;
  WrdParser::parse(this, v5, &started);
  uint64_t v6 = started;
  return WrdParser::parse(this, a2, v6);
}

uint64_t WrdFileInformationBlock::getFCLCB(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 80);
  if (!v2 || *(unsigned __int16 *)(a1 + 72) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  return v2 + 8 * (unsigned __int16)a2;
}

uint64_t WrdParser::parse(WrdParser *this, WrdClxGrpprls *a2, unsigned int *a3)
{
  (*(void (**)(void, void, void))(**((void **)this + 16) + 16))(*((void *)this + 16), *a3, 0);
  *((_WORD *)a2 + 5) = 0;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
  int v7 = 0;
  if (result == 1)
  {
    int v7 = 0;
    do
    {
      unsigned int v8 = *((unsigned __int16 *)a2 + 4);
      unsigned int v9 = *((unsigned __int16 *)a2 + 5);
      if (v8 <= v9)
      {
        WrdClxGrpprls::reallocGrpprls((const void **)a2, (unsigned __int16)(v8 + 8));
        unsigned int v9 = *((unsigned __int16 *)a2 + 5);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v9) = v7 + 1 + *a3;
      *((_WORD *)a2 + 5) = v9 + 1;
      uint64_t v10 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
      int v11 = v7 + v10;
      (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), v10, 1);
      int v7 = v11 + 3;
      uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
    }
    while (result == 1);
  }
  *a3 += v7;
  return result;
}

uint64_t WrdParser::parse(WrdParser *this, WrdRdrText *a2, uint64_t a3)
{
  (*(void (**)(void, uint64_t, void))(**((void **)this + 16) + 16))(*((void *)this + 16), a3, 0);
  if ((*(unsigned int (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16)) != 2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 2001;
  }
  WrdParser::parse(this, (WrdRdrText *)((char *)a2 + 72));
  unsigned int v5 = 0;
  int v6 = 0;
  int v7 = (char *)this + 160;
  do
  {
    unsigned int v8 = (char *)a2 + 4 * v5;
    *((_DWORD *)v8 + 2) = v6;
    *((_DWORD *)v8 + 10) = WrdFileInformationBlock::getNumberOfCharInText((uint64_t)v7, v5);
    uint64_t result = WrdFileInformationBlock::getNumberOfCharInText((uint64_t)v7, v5);
    v6 += result;
    int v10 = v5 << 16;
    unsigned int v5 = (__int16)v5 + 1;
  }
  while (v10 < 458752);
  return result;
}

uint64_t WrdParser::parse(WrdParser *this, WrdPieceTable *a2)
{
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
  WrdPieceTable::setCPCount(a2, (v5 + 8) / 0xCu);
  if (!*(_DWORD *)a2) {
    goto LABEL_6;
  }
  unint64_t v6 = 0;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
    if (v6 >= *(unsigned int *)a2) {
      goto LABEL_12;
    }
    *(_DWORD *)(*((void *)a2 + 1) + 4 * v6++) = result;
    unint64_t v8 = *(unsigned int *)a2;
  }
  while (v6 < v8);
  if (v8 != 1)
  {
LABEL_6:
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      char v11 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
      unsigned int v12 = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
      uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
      if (v10 >= (*(_DWORD *)a2 - 1)) {
        break;
      }
      int v13 = (v12 >> 1) ^ 0x20000000;
      if ((v12 & 0x40000000) == 0) {
        int v13 = v12;
      }
      unsigned int v2 = v2 & 0xFFFFFFFC | (2 * (v11 & 1)) | ((v12 & 0x40000000) == 0);
      uint64_t v14 = *((void *)a2 + 2) + v9;
      *(_DWORD *)uint64_t v14 = v13;
      *(_WORD *)(v14 + 4) = result;
      *(unsigned char *)(v14 + 6) = v2;
      ++v10;
      v9 += 8;
      if (v10 >= (*(_DWORD *)a2 - 1)) {
        return result;
      }
    }
LABEL_12:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  return result;
}

char *WrdPieceTable::setCPCount(WrdPieceTable *this, unsigned int a2)
{
  *(_DWORD *)this = a2;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    MEMORY[0x23EC99790](v3, 0x1000C8052888210);
    a2 = *(_DWORD *)this;
  }
  *((void *)this + 1) = 0;
  *((void *)this + 1) = operator new[](4 * a2);
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    MEMORY[0x23EC99790](v4, 0x1000C80C899CFE7);
  }
  *((void *)this + 2) = 0;
  uint64_t v5 = (*(_DWORD *)this - 1);
  uint64_t result = (char *)operator new[](8 * v5);
  if (v5)
  {
    uint64_t v7 = (uint64_t)result;
    do
    {
      *(_DWORD *)uint64_t v7 = 0;
      *(_WORD *)(v7 + 4) = 0;
      *(unsigned char *)(v7 + 6) &= 0xFCu;
      v7 += 8;
    }
    while ((char *)v7 != &result[8 * v5]);
  }
  *((void *)this + 2) = result;
  return result;
}

uint64_t WrdFileInformationBlock::getNumberOfCharInText(uint64_t a1, __int16 a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2 && *(unsigned __int16 *)(a1 + 56) > (unsigned __int16)(a2 + 3)) {
    return *(unsigned int *)(v2 + 4 * (unsigned __int16)(a2 + 3));
  }
  else {
    return 0;
  }
}

void WrdBinTable::WrdBinTable(WrdBinTable *this)
{
  *(void *)this = 0xFFFFFFFFLL;
  *((_DWORD *)this + 2) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
}

void WrdParser::parse(WrdParser *a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t started = WrdParser::startFCLCB(a1, a3);
  if (HIDWORD(started) > 3)
  {
    unsigned int v6 = HIDWORD(started) - 4;
    unsigned int v7 = (HIDWORD(started) - 4) >> 3;
    WrdBinTable::setNumberOfBTEs((WrdBinTable *)a2, v7);
    uint64_t v8 = 0;
    do
    {
      *(_DWORD *)(*(void *)(a2 + 16) + v8) = (*(uint64_t (**)(void *))(**((void **)a1 + 16) + 104))(*((void **)a1 + 16));
      v8 += 4;
    }
    while (((v6 >> 1) & 0x7FFFFFFC) + 4 != v8);
    if (v6 >= 8)
    {
      uint64_t v9 = 0;
      if (v7 <= 1) {
        unsigned int v10 = 1;
      }
      else {
        unsigned int v10 = v7;
      }
      uint64_t v11 = 4 * v10;
      do
      {
        unsigned int v12 = (*(unsigned __int16 (**)(void *))(**((void **)a1 + 16) + 104))(*((void **)a1 + 16));
        *(_DWORD *)(*(void *)(a2 + 40) + v9) = v12;
        if (v12 < *(_DWORD *)a2) {
          *(_DWORD *)a2 = v12;
        }
        if (v12 > *(_DWORD *)(a2 + 4)) {
          *(_DWORD *)(a2 + 4) = v12;
        }
        v9 += 4;
      }
      while (v11 != v9);
    }
  }
  else
  {
    WrdBinTable::setNumberOfBTEs((WrdBinTable *)a2, 0);
  }
}

void WrdBinTable::setNumberOfBTEs(WrdBinTable *this, unsigned int a2)
{
  *((_DWORD *)this + 2) = a2;
}

void WrdPAPXFKP::WrdPAPXFKP(WrdPAPXFKP *this)
{
  WrdFormattedDiskPage::WrdFormattedDiskPage(this);
  void *v1 = &unk_26EBE6690;
}

void WrdFormattedDiskPage::WrdFormattedDiskPage(WrdFormattedDiskPage *this)
{
  *(void *)this = &unk_26EBE61A0;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = 0;
  *((_WORD *)this + 12) = -1;
  *((void *)this + 4) = 0;
}

double WrdFormattedDiskPage::init(WrdFormattedDiskPage *this)
{
  if (!*((void *)this + 2))
  {
    uint64_t v2 = operator new[](0x200uLL);
    *((void *)this + 2) = v2;
    double result = 0.0;
    *uint64_t v2 = 0u;
    v2[1] = 0u;
    v2[2] = 0u;
    v2[3] = 0u;
    v2[4] = 0u;
    v2[5] = 0u;
    v2[6] = 0u;
    v2[7] = 0u;
    v2[8] = 0u;
    v2[9] = 0u;
    v2[10] = 0u;
    v2[11] = 0u;
    v2[12] = 0u;
    v2[13] = 0u;
    v2[14] = 0u;
    v2[15] = 0u;
    v2[16] = 0u;
    v2[17] = 0u;
    v2[18] = 0u;
    v2[19] = 0u;
    v2[20] = 0u;
    v2[21] = 0u;
    v2[22] = 0u;
    v2[23] = 0u;
    v2[24] = 0u;
    v2[25] = 0u;
    v2[26] = 0u;
    v2[27] = 0u;
    v2[28] = 0u;
    v2[29] = 0u;
    v2[30] = 0u;
    v2[31] = 0u;
  }
  return result;
}

void WrdCHPXFKP::WrdCHPXFKP(WrdCHPXFKP *this)
{
  WrdFormattedDiskPage::WrdFormattedDiskPage(this);
  void *v1 = &unk_26EBE56F0;
}

void WrdSectionDescriptorTable::WrdSectionDescriptorTable(WrdSectionDescriptorTable *this)
{
  *(void *)this = &unk_26EBE69D0;
  *((_WORD *)this + 4) = 0;
  *(void *)((char *)this + 20) = 0;
  *(void *)((char *)this + 12) = 0;
  *((_DWORD *)this + 7) = 0;
}

void WrdParser::parse(WrdParser *this, WrdSectionDescriptorTable *a2)
{
  uint64_t started = WrdParser::startFCLCB(this, 6u);
  if (HIDWORD(started) > 3)
  {
    unsigned int v5 = (unsigned __int16)((HIDWORD(started) + 1048572) >> 4);
    WrdSectionDescriptorTable::setNumberOfSections(a2, v5);
    if (v5)
    {
      for (int i = 0; i != v5; ++i)
      {
        int v7 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
        WrdSectionDescriptorTable::setCP((uint64_t)a2, (unsigned __int16)i, v7);
      }
    }
    int v8 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
    EshRecord::setDataLength((uint64_t)a2, v8);
    if (v5)
    {
      for (int j = 0; j != v5; ++j)
      {
        SectionDescriptorReference = (WrdSectionDescriptor *)WrdSectionDescriptorTable::getSectionDescriptorReference(a2, (unsigned __int16)j);
        WrdParser::parse(this, SectionDescriptorReference);
      }
    }
  }
  else
  {
    WrdSectionDescriptorTable::setNumberOfSections(a2, 0);
  }
}

void WrdSectionDescriptorTable::setNumberOfSections(WrdSectionDescriptorTable *this, unsigned int a2)
{
  WrdSectionDescriptorTable::cleanup(this);
  *((_WORD *)this + 4) = a2;
  if (a2)
  {
    uint64_t v4 = operator new[](4 * a2);
    *((void *)this + 2) = v4;
    bzero(v4, 4 * *((unsigned __int16 *)this + 4));
    uint64_t v5 = *((unsigned __int16 *)this + 4);
    uint64_t v6 = 8 * v5;
    int v7 = (char *)operator new[](8 * v5);
    if (v5)
    {
      uint64_t v8 = 0;
      do
      {
        WrdSectionDescriptor::WrdSectionDescriptor((WrdSectionDescriptor *)&v7[v8]);
        v8 += 8;
      }
      while (v6 != v8);
    }
    *((void *)this + 3) = v7;
  }
}

void sub_238B14820(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

uint64_t WrdSectionDescriptorTable::cleanup(WrdSectionDescriptorTable *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8052888210);
  }
  *((void *)this + 2) = 0;
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C8000313F17);
  }
  *((void *)this + 3) = 0;
  *((_WORD *)this + 4) = 0;
  return result;
}

void WrdSectionDescriptor::WrdSectionDescriptor(WrdSectionDescriptor *this)
{
  *(void *)this = -1;
}

uint64_t WrdSectionDescriptorTable::setCP(uint64_t this, unsigned int a2, int a3)
{
  uint64_t v3 = *(void *)(this + 16);
  if (v3 && *(unsigned __int16 *)(this + 8) > a2)
  {
    *(_DWORD *)(v3 + 4 * a2) = a3;
    if (*(_DWORD *)(this + 12) <= a3) {
      *(_DWORD *)(this + 12) = a3 + 1;
    }
  }
  return this;
}

uint64_t WrdSectionDescriptorTable::getSectionDescriptorReference(WrdSectionDescriptorTable *this, unsigned int a2)
{
  return *((void *)this + 3) + 8 * a2;
}

uint64_t WrdParser::parse(WrdParser *this, WrdSectionDescriptor *a2)
{
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 2, 1);
  *(_DWORD *)a2 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 2, 1);
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
  *((_DWORD *)a2 + 1) = result;
  return result;
}

void WrdEmbeddedTTFRecordTable::WrdEmbeddedTTFRecordTable(WrdEmbeddedTTFRecordTable *this)
{
  *(void *)this = &unk_26EBE5A50;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
}

uint64_t WrdParser::parse(WrdParser *this, WrdDocumentFileRecord *a2)
{
  uint64_t result = (uint64_t)WrdDocumentFileRecord::clear(a2);
  if (*((unsigned __int16 *)this + 116) >= 0x63u)
  {
    unint64_t started = WrdParser::startFCLCB(this, 0x63u);
    unint64_t v6 = HIDWORD(started);
    unsigned int v7 = HIDWORD(started) + started;
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16));
    if ((int)result + 4 <= v7)
    {
      if ((*(unsigned int (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16)) == 8)
      {
        unsigned int v14 = v6 - 4;
        *((_DWORD *)a2 + 10) = 0;
        OcBinaryData::setMinimumCapacity((OcBinaryData *)((char *)a2 + 32), v6 - 4);
        (*(void (**)(void, void, unsigned int *))(**((void **)this + 16) + 56))(*((void *)this + 16), *((void *)a2 + 7), &v14);
        unsigned int v8 = v14;
        *((_DWORD *)a2 + 10) = v14;
        uint64_t result = OcBinaryData::setMinimumCapacity((OcBinaryData *)((char *)a2 + 32), v8);
        *((_DWORD *)a2 + 12) = v8;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16));
        if ((int)result + 4 <= v7)
        {
          uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
          if (result == 6)
          {
            uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16));
            if ((int)result + 4 <= v7)
            {
              uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
              unsigned int v9 = 4 * result;
              if (result) {
                BOOL v10 = v9 > result;
              }
              else {
                BOOL v10 = 0;
              }
              if (v10)
              {
                int v11 = result;
                unsigned int v12 = (*(uint64_t (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16)) + v9;
                uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16));
                if (v12 >= result)
                {
                  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16));
                  if (result + v9 <= v7)
                  {
                    int v13 = operator new(4uLL);
                    *(_DWORD *)int v13 = 0;
                    do
                    {
                      *int v13 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
                      v13[1] = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
                      (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 1, 1);
                      WrdDocumentFileRecord::appendListToStyleIndex(a2, v13);
                      --v11;
                    }
                    while (v11);
                    JUMPOUT(0x23EC997B0);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_238B14D64(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

OcBinaryData *WrdDocumentFileRecord::clear(WrdDocumentFileRecord *this)
{
  *((void *)this + 2) = *((void *)this + 1);
  return OcBinaryData::removeBuffer((OcBinaryData *)((char *)this + 32));
}

void ***WrdObjectFactory::createObject(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t v3 = (WrdAnnotationReferenceDescriptor *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 1);
      uint64_t v4 = (WrdDateTime *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 14);
      uint64_t v5 = (char *)operator new(0x28uLL);
      WrdAnnotation::WrdAnnotation((WrdAnnotation *)v5, v3, v4);
      goto LABEL_133;
    case 1:
      uint64_t v5 = (char *)operator new(0x28uLL);
      WrdAnnotationReferenceDescriptor::WrdAnnotationReferenceDescriptor((WrdAnnotationReferenceDescriptor *)v5);
      goto LABEL_133;
    case 2:
      uint64_t v5 = (char *)operator new(0x20uLL);
      WrdAnnotationTable::WrdAnnotationTable((WrdAnnotationTable *)v5);
      goto LABEL_133;
    case 3:
      uint64_t v5 = (char *)operator new(0x38uLL);
      WrdAssociatedStrings::WrdAssociatedStrings((WrdAssociatedStrings *)v5);
      goto LABEL_133;
    case 4:
      uint64_t v5 = (char *)operator new(0x30uLL);
      WrdAutoNumberLevelDescriptor::WrdAutoNumberLevelDescriptor((WrdAutoNumberLevelDescriptor *)v5);
      goto LABEL_133;
    case 5:
      unint64_t v6 = (WrdAutoNumberLevelDescriptor *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 4);
      uint64_t v5 = (char *)operator new(0x30uLL);
      WrdAutoNumberListDescriptor::WrdAutoNumberListDescriptor((WrdAutoNumberListDescriptor *)v5, v6);
      goto LABEL_133;
    case 6:
      uint64_t v5 = (char *)operator new(0x18uLL);
      WrdAutoSummaryInfo::WrdAutoSummaryInfo((WrdAutoSummaryInfo *)v5);
      goto LABEL_133;
    case 7:
      uint64_t v5 = (char *)operator new(0x40uLL);
      WrdBookmark::WrdBookmark((WrdBookmark *)v5);
      goto LABEL_133;
    case 8:
      uint64_t v5 = (char *)operator new(0x28uLL);
      WrdBookmarkTable::WrdBookmarkTable((WrdBookmarkTable *)v5);
      goto LABEL_133;
    case 9:
      uint64_t v5 = (char *)operator new(0x20uLL);
      WrdBorder::WrdBorder((WrdBorder *)v5);
      goto LABEL_133;
    case 10:
      unsigned int v7 = (WrdShading *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 49);
      unsigned int v8 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      unsigned int v9 = (WrdDateTime *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 14);
      BOOL v10 = (WrdDateTime *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 14);
      int v11 = (WrdDateTime *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 14);
      unsigned int v12 = (WrdDateTime *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 14);
      int v13 = (WrdDateTime *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 14);
      unsigned int v14 = (WrdCharacterProperties *)operator new(0x160uLL);
      WrdCharacterProperties::WrdCharacterProperties(v14, v7, v8, v9, v10, v11, v12, v13);
      if (!v14) {
        goto LABEL_136;
      }
      return &v14->var1;
    case 11:
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 10);
      uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 10);
      uint64_t v17 = (char *)operator new(0x28uLL);
      uint64_t v5 = v17;
      if (v15) {
        uint64_t v18 = v15 - 8;
      }
      else {
        uint64_t v18 = 0;
      }
      if (v16) {
        uint64_t v19 = v16 - 8;
      }
      else {
        uint64_t v19 = 0;
      }
      WrdCharacterTextRun::WrdCharacterTextRun(v17, 0, 0, v18, v19);
      goto LABEL_133;
    case 12:
      uint64_t v5 = (char *)operator new(0x20uLL);
      WrdCPTable::WrdCPTable((WrdCPTable *)v5);
      goto LABEL_133;
    case 13:
      uint64_t v5 = (char *)operator new(0x20uLL);
      WrdCPTableHeaders::WrdCPTableHeaders((WrdCPTableHeaders *)v5);
      goto LABEL_133;
    case 14:
      uint64_t v5 = (char *)operator new(0x18uLL);
      WrdDateTime::WrdDateTime((WrdDateTime *)v5);
      goto LABEL_133;
    case 15:
      int32x4_t v20 = (WrdDOPTypography *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 16);
      unsigned int v21 = (WrdDrawingObjectGrid *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 17);
      BOOL v22 = (WrdAutoSummaryInfo *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 6);
      unsigned int v23 = (WrdDateTime *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 14);
      uint64_t v24 = (WrdDateTime *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 14);
      uint64_t v25 = (WrdDateTime *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 14);
      uint64_t v5 = (char *)operator new(0x108uLL);
      WrdDocumentProperties::WrdDocumentProperties((WrdDocumentProperties *)v5, v20, v21, v22, v23, v24, v25);
      goto LABEL_133;
    case 16:
      uint64_t v5 = (char *)operator new(0x48uLL);
      WrdDOPTypography::WrdDOPTypography((WrdDOPTypography *)v5);
      goto LABEL_133;
    case 17:
      uint64_t v5 = (char *)operator new(0x18uLL);
      WrdDrawingObjectGrid::WrdDrawingObjectGrid((WrdDrawingObjectGrid *)v5);
      goto LABEL_133;
    case 18:
      uint64_t v5 = (char *)operator new(0x10uLL);
      WrdDropCap::WrdDropCap((WrdDropCap *)v5);
      goto LABEL_133;
    case 19:
      uint64_t v5 = (char *)operator new(0x40uLL);
      *(void *)uint64_t v5 = &unk_26EBE59C8;
      OcBinaryData::OcBinaryData((OcBinaryData *)(v5 + 8));
      *((_WORD *)v5 + 28) = 0;
      return (void ***)v5;
    case 20:
      uint64_t v5 = (char *)operator new(0x28uLL);
      WrdEmbeddedTrueTypeFontTable::WrdEmbeddedTrueTypeFontTable((WrdEmbeddedTrueTypeFontTable *)v5);
      goto LABEL_133;
    case 21:
      uint64_t v5 = (char *)operator new(0x18uLL);
      WrdFieldDescriptor::WrdFieldDescriptor((WrdFieldDescriptor *)v5);
      goto LABEL_133;
    case 22:
      uint64_t v26 = (WrdFieldDescriptor *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 21);
      uint64_t v5 = (char *)operator new(0x18uLL);
      WrdFieldPosition::WrdFieldPosition((WrdFieldPosition *)v5, v26);
      goto LABEL_133;
    case 23:
      uint64_t v5 = (char *)operator new(0x28uLL);
      WrdFieldPositionTable::WrdFieldPositionTable((uint64_t)v5, 0);
      goto LABEL_133;
    case 24:
      uint64_t v5 = (char *)operator new(0x38uLL);
      WrdFileShapeAddress::WrdFileShapeAddress((WrdFileShapeAddress *)v5);
      goto LABEL_133;
    case 25:
      uint64_t v5 = (char *)operator new(0x28uLL);
      WrdFileShapeAddressTable::WrdFileShapeAddressTable((WrdFileShapeAddressTable *)v5);
      goto LABEL_133;
    case 26:
      uint64_t v5 = (char *)operator new(0x58uLL);
      WrdFontFamilyName::WrdFontFamilyName((WrdFontFamilyName *)v5);
      WrdFontFamilyName::init((WrdFontFamilyName *)v5);
      goto LABEL_133;
    case 27:
      uint64_t v5 = (char *)operator new(0x20uLL);
      WrdFontFamilyNameTable::WrdFontFamilyNameTable((WrdFontFamilyNameTable *)v5);
      goto LABEL_133;
    case 28:
      uint64_t v5 = (char *)operator new(0x168uLL);
      WrdFormFieldBinaryData::WrdFormFieldBinaryData((WrdFormFieldBinaryData *)v5);
      goto LABEL_133;
    case 29:
      uint64_t v5 = (char *)operator new(0x38uLL);
      *(void *)uint64_t v5 = &unk_26EBE6248;
      OcBinaryData::OcBinaryData((OcBinaryData *)(v5 + 8));
      return (void ***)v5;
    case 30:
      uint64_t v5 = (char *)operator new(0x10uLL);
      WrdLineSpaceDescriptor::WrdLineSpaceDescriptor((WrdLineSpaceDescriptor *)v5);
      goto LABEL_133;
    case 31:
      uint64_t v5 = (char *)operator new(0x38uLL);
      WrdListFormat::WrdListFormat((WrdListFormat *)v5);
      WrdListFormat::init(v5);
      goto LABEL_133;
    case 32:
      int32x4_t v27 = (WrdListLevelFormatOverride *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 36);
      uint64_t v5 = (char *)operator new(0x38uLL);
      WrdListFormatOverride::WrdListFormatOverride((WrdListFormatOverride *)v5, v27);
      goto LABEL_133;
    case 33:
      uint64_t v5 = (char *)operator new(0x20uLL);
      WrdListFormatOverrideTable::WrdListFormatOverrideTable((WrdListFormatOverrideTable *)v5);
      goto LABEL_133;
    case 34:
      uint64_t v5 = (char *)operator new(0x20uLL);
      WrdListFormatTable::WrdListFormatTable((WrdListFormatTable *)v5);
      goto LABEL_133;
    case 35:
      uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 41);
      uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 10);
      int v30 = (WrdListLevelFormat *)operator new(0x58uLL);
      uint64_t v5 = (char *)v30;
      if (v28) {
        uint64_t v31 = (WrdParagraphProperties *)(v28 - 8);
      }
      else {
        uint64_t v31 = 0;
      }
      if (v29) {
        uint64_t v32 = (WrdCharacterProperties *)(v29 - 8);
      }
      else {
        uint64_t v32 = 0;
      }
      WrdListLevelFormat::WrdListLevelFormat(v30, v31, v32);
      goto LABEL_133;
    case 36:
      uint64_t v33 = (WrdListLevelFormat *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 35);
      uint64_t v5 = (char *)operator new(0x18uLL);
      WrdListLevelFormatOverride::WrdListLevelFormatOverride((WrdListLevelFormatOverride *)v5, v33);
      goto LABEL_133;
    case 37:
      uint64_t v5 = (char *)operator new(0x18uLL);
      WrdNote::WrdNote((WrdNote *)v5);
      goto LABEL_133;
    case 38:
      uint64_t v5 = (char *)operator new(0x28uLL);
      WrdNoteTable::WrdNoteTable((uint64_t)v5, 0);
      goto LABEL_133;
    case 39:
      __int16 v34 = (WrdDateTime *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 14);
      uint64_t v5 = (char *)operator new(0x48uLL);
      WrdNumberRevisionMarkData::WrdNumberRevisionMarkData((WrdNumberRevisionMarkData *)v5, v34);
      WrdNumberRevisionMarkData::init((WrdNumberRevisionMarkData *)v5);
      goto LABEL_133;
    case 40:
      int v35 = (WrdAutoNumberLevelDescriptor *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 4);
      uint64_t v5 = (char *)operator new(0x48uLL);
      WrdOutlineListData::WrdOutlineListData((WrdOutlineListData *)v5, v35);
      (*(void (**)(char *))(*(void *)v5 + 32))(v5);
      return (void ***)v5;
    case 41:
      v118 = (WrdShading *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 49);
      uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 30);
      v116 = (WrdDropCap *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 18);
      v114 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      v113 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      uint64_t v37 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      uint64_t v38 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 5);
      v42 = (WrdLineSpaceDescriptor *)v36;
      uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 14);
      uint64_t v44 = (WrdNumberRevisionMarkData *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 39);
      v45 = (WrdTabDescriptor *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 58);
      int v46 = (WrdParagraphProperties *)operator new(0x130uLL);
      *(void *)&long long v111 = v41;
      *((void *)&v111 + 1) = v43;
      *(void *)&long long v109 = v39;
      *((void *)&v109 + 1) = v40;
      WrdParagraphProperties::WrdParagraphProperties(v46, v118, v42, v116, v114, v113, v37, v38, v109, v111, v44, v45);
      if (v46) {
        uint64_t v5 = (char *)v46 + 8;
      }
      else {
        uint64_t v5 = 0;
      }
      if (v46) {
        double v47 = v5 - 8;
      }
      else {
        double v47 = 0;
      }
      (*(void (**)(char *))(*(void *)v47 + 32))(v47);
      goto LABEL_133;
    case 42:
      uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 41);
      uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 41);
      uint64_t v50 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 61);
      uint64_t v51 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 61);
      v52 = (char *)operator new(0x38uLL);
      uint64_t v5 = v52;
      if (v48) {
        uint64_t v53 = v48 - 8;
      }
      else {
        uint64_t v53 = 0;
      }
      if (v49) {
        uint64_t v54 = v49 - 8;
      }
      else {
        uint64_t v54 = 0;
      }
      if (v50) {
        uint64_t v55 = v50 - 8;
      }
      else {
        uint64_t v55 = 0;
      }
      if (v51) {
        uint64_t v56 = v51 - 8;
      }
      else {
        uint64_t v56 = 0;
      }
      WrdParagraphTextRun::WrdParagraphTextRun((uint64_t)v52, 0, 0, v53, v54, v55, v56);
      goto LABEL_133;
    case 43:
      uint64_t v5 = (char *)operator new(0x38uLL);
      *(void *)uint64_t v5 = &unk_26EBE67E0;
      OcBinaryData::OcBinaryData((OcBinaryData *)(v5 + 8));
      return (void ***)v5;
    case 44:
      uint64_t v5 = (char *)operator new(0x20uLL);
      *(void *)uint64_t v5 = &unk_26EBE6820;
      CsString::CsString((CsString *)(v5 + 8));
      return (void ***)v5;
    case 45:
      v57 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      int v58 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      int v59 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      unsigned int v60 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      unsigned int v61 = (WrdPictureProperties *)operator new(0x70uLL);
      WrdPictureProperties::WrdPictureProperties(v61, v57, v58, v59, v60);
      if (!v61) {
        goto LABEL_136;
      }
      return (void ***)((char *)v61 + 8);
    case 46:
      uint64_t v5 = (char *)operator new(0x50uLL);
      WrdRoutingRecipient::WrdRoutingRecipient((WrdRoutingRecipient *)v5);
      goto LABEL_133;
    case 47:
      v62 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      __n128 v63 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      v64 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      v65 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      v66 = (WrdDateTime *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 14);
      v67 = (WrdOutlineListData *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 40);
      v68 = (WrdSectionProperties *)operator new(0x148uLL);
      WrdSectionProperties::WrdSectionProperties(v68, v62, v63, v64, v65, v66, v67);
      if (!v68) {
        goto LABEL_136;
      }
      return (void ***)((char *)v68 + 8);
    case 48:
      uint64_t v69 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 47);
      uint64_t v70 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 47);
      v71 = (char *)operator new(0x28uLL);
      uint64_t v5 = v71;
      if (v69) {
        uint64_t v72 = v69 - 8;
      }
      else {
        uint64_t v72 = 0;
      }
      if (v70) {
        uint64_t v73 = v70 - 8;
      }
      else {
        uint64_t v73 = 0;
      }
      WrdSectionTextRun::WrdSectionTextRun((uint64_t)v71, 0, 0, v72, v73);
      goto LABEL_133;
    case 49:
      uint64_t v5 = (char *)operator new(0x28uLL);
      WrdShading::WrdShading((WrdShading *)v5);
      goto LABEL_133;
    case 50:
      uint64_t v5 = (char *)operator new(0x28uLL);
      WrdStory::WrdStory((WrdStory *)v5);
      goto LABEL_133;
    case 51:
      uint64_t v5 = (char *)operator new(0x28uLL);
      WrdStoryTable::WrdStoryTable((uint64_t)v5, 0);
      goto LABEL_133;
    case 52:
      uint64_t v5 = (char *)operator new(0x20uLL);
      WrdStringTable::WrdStringTable((WrdStringTable *)v5);
      goto LABEL_133;
    case 53:
      uint64_t v74 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 52);
      uint64_t v5 = (char *)operator new(0x18uLL);
      WrdStringTypedTable::WrdStringTypedTable((uint64_t)v5, 36, v74);
      goto LABEL_133;
    case 54:
      uint64_t v5 = (char *)operator new(0x18uLL);
      WrdStringWithDataTable::WrdStringWithDataTable((WrdStringWithDataTable *)v5);
      goto LABEL_133;
    case 55:
      uint64_t v106 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 54);
      uint64_t v5 = (char *)operator new(0x18uLL);
      WrdStringWithDataTypedTable::WrdStringWithDataTypedTable((uint64_t)v5, 51, v106);
      goto LABEL_133;
    case 56:
      uint64_t v75 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 41);
      uint64_t v76 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 41);
      uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 10);
      uint64_t v78 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 10);
      uint64_t v79 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 61);
      v80 = (WrdDateTime *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 14);
      v81 = (WrdStyle *)operator new(0xA8uLL);
      uint64_t v5 = (char *)v81;
      if (v75) {
        v82 = (WrdParagraphProperties *)(v75 - 8);
      }
      else {
        v82 = 0;
      }
      if (v76) {
        v83 = (WrdParagraphProperties *)(v76 - 8);
      }
      else {
        v83 = 0;
      }
      if (v77) {
        v84 = (WrdCharacterProperties *)(v77 - 8);
      }
      else {
        v84 = 0;
      }
      if (v78) {
        v85 = (WrdCharacterProperties *)(v78 - 8);
      }
      else {
        v85 = 0;
      }
      if (v79) {
        v86 = (WrdTableProperties *)(v79 - 8);
      }
      else {
        v86 = 0;
      }
      WrdStyle::WrdStyle(v81, v82, v83, v84, v85, v86, v80);
      goto LABEL_133;
    case 57:
      v87 = (WrdStyle *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 56);
      uint64_t v5 = (char *)operator new(0x170uLL);
      WrdStyleSheet::WrdStyleSheet((WrdStyleSheet *)v5, v87);
      goto LABEL_133;
    case 58:
      uint64_t v5 = (char *)operator new(0x10uLL);
      WrdTabDescriptor::WrdTabDescriptor((WrdTabDescriptor *)v5);
      goto LABEL_133;
    case 59:
      uint64_t v5 = (char *)operator new(0x10uLL);
      WrdTableAutoformatLookSpecifier::WrdTableAutoformatLookSpecifier((WrdTableAutoformatLookSpecifier *)v5);
      goto LABEL_133;
    case 60:
      v88 = (WrdShading *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 49);
      v89 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      v90 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      v91 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      v92 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      v93 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      v94 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      uint64_t v5 = (char *)operator new(0x88uLL);
      WrdTableCellDescriptor::WrdTableCellDescriptor((WrdTableCellDescriptor *)v5, v88, v89, v90, v91, v92, v93, v94);
      goto LABEL_133;
    case 61:
      v119 = (WrdTableAutoformatLookSpecifier *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 59);
      uint64_t v95 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 60);
      v117 = (WrdShading *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 49);
      v115 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      v96 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      v97 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      v98 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      uint64_t v99 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      uint64_t v100 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      v101 = (WrdTableCellDescriptor *)v95;
      uint64_t v102 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      uint64_t v103 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 9);
      v104 = (WrdDateTime *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 14);
      v105 = (WrdTableProperties *)operator new(0x190uLL);
      *((void *)&v112 + 1) = v103;
      *((void *)&v110 + 1) = v100;
      *(void *)&long long v112 = v102;
      *(void *)&long long v110 = v99;
      WrdTableProperties::WrdTableProperties(v105, v119, v101, v117, v115, v96, v97, v98, v110, v112, v104);
      if (!v105) {
        goto LABEL_136;
      }
      return (void ***)((char *)v105 + 8);
    case 62:
      uint64_t v5 = (char *)operator new(0x40uLL);
      WrdText::WrdText((WrdText *)v5);
      goto LABEL_133;
    case 63:
      uint64_t v5 = (char *)operator new(0x18uLL);
      *(void *)uint64_t v5 = &unk_26EBE4AC0;
      return (void ***)v5;
    case 64:
      uint64_t v5 = (char *)operator new(0x28uLL);
      WrdUserRestrictionTable::WrdUserRestrictionTable((WrdUserRestrictionTable *)v5);
      goto LABEL_133;
    case 65:
      uint64_t v5 = (char *)operator new(0x18uLL);
      WrdWorkBook::WrdWorkBook((WrdWorkBook *)v5);
      goto LABEL_133;
    case 66:
      uint64_t v5 = (char *)operator new(0x40uLL);
      WrdWorkBookTable::WrdWorkBookTable((WrdWorkBookTable *)v5);
      goto LABEL_133;
    case 67:
      uint64_t v5 = (char *)operator new(0x40uLL);
      WrdVariable::WrdVariable((WrdVariable *)v5);
      goto LABEL_133;
    case 68:
      uint64_t v5 = (char *)operator new(0x20uLL);
      WrdVariableTable::WrdVariableTable((WrdVariableTable *)v5);
      goto LABEL_133;
    case 69:
      uint64_t v5 = (char *)operator new(0x20uLL);
      WrdVersionInfoTable::WrdVersionInfoTable((WrdVersionInfoTable *)v5);
      goto LABEL_133;
    case 70:
      uint64_t v5 = (char *)operator new(0xC8uLL);
      WrdCustomization::WrdCustomization((WrdCustomization *)v5);
      goto LABEL_133;
    case 71:
      uint64_t v5 = (char *)operator new(0x28uLL);
      WrdXmlAttribute::WrdXmlAttribute((WrdXmlAttribute *)v5);
      goto LABEL_133;
    case 72:
      uint64_t v5 = (char *)operator new(0x20uLL);
      WrdXmlElementTable::WrdXmlElementTable((WrdXmlElementTable *)v5);
      goto LABEL_133;
    case 73:
      uint64_t v5 = (char *)operator new(0x38uLL);
      WrdXmlElement::WrdXmlElement((WrdXmlElement *)v5);
      goto LABEL_133;
    case 74:
      uint64_t v5 = (char *)operator new(0x20uLL);
      WrdXmlSchemaTable::WrdXmlSchemaTable((WrdXmlSchemaTable *)v5);
      goto LABEL_133;
    case 75:
      uint64_t v5 = (char *)operator new(0x50uLL);
      WrdXmlSchema::WrdXmlSchema((WrdXmlSchema *)v5);
LABEL_133:
      if (!v5) {
        goto LABEL_136;
      }
      return (void ***)v5;
    default:
      ChLogFunction("Unknown object type passed to WrdObjectFactory\n", 1, 2, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Model/WrdObjectFactory.cpp", 547);
LABEL_136:
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 1001;
  }
}

void sub_238B16870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _Unwind_Exception *exception_object, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  operator delete(v20);
  _Unwind_Resume(a1);
}

uint64_t WrdNoteTable::WrdNoteTable(uint64_t result, int a2)
{
  *(void *)uint64_t result = &unk_26EBE6588;
  *(_DWORD *)(result + 8) = a2;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t WrdBinaryReader::read(WrdBinaryReader *this, WrdNoteTable *a2)
{
  uint64_t v4 = (WrdNoteReferencePositionTable *)operator new(0x28uLL);
  WrdNoteReferencePositionTable::WrdNoteReferencePositionTable(v4);
  uint64_t v5 = (WrdCPTable *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 4) + 280) + 16))(*(void *)(*((void *)this + 4) + 280), 12);
  WrdBookmarkTable::clear(a2);
  WrdParser::parse(*((WrdParser **)this + 4), v4, *((_DWORD *)a2 + 2));
  int v6 = *((_DWORD *)a2 + 2);
  if (!v6)
  {
    unsigned int v7 = 3;
    goto LABEL_5;
  }
  if (v6 == 1)
  {
    unsigned int v7 = 47;
LABEL_5:
    WrdParser::parse(*((WrdParser **)this + 4), v5, v7);
    goto LABEL_7;
  }
  ChLogFunction("Unknown note type \n", 1, 2, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdBinaryReader.cpp", 939);
LABEL_7:
  uint64_t v8 = *((unsigned __int16 *)v4 + 16);
  if (*((_WORD *)v4 + 16))
  {
    unint64_t v9 = 0;
    unint64_t v10 = *((unsigned __int16 *)v4 + 4);
    uint64_t v11 = (unsigned __int16)((*((_DWORD *)v5 + 4) - *((_DWORD *)v5 + 2)) >> 2) - 1;
    do
    {
      if ((uint64_t)v9 >= v11 || v9 >= v10) {
        break;
      }
      uint64_t v12 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 4) + 280) + 16))(*(void *)(*((void *)this + 4) + 280), 37);
      int v13 = (OcCustomProperty *)v12;
      *(_DWORD *)(v12 + 8) = *(_DWORD *)(*((void *)v4 + 2) + 4 * v9);
      unsigned int v14 = (_DWORD *)(*((void *)v5 + 1) + 4 * v9);
      *(_DWORD *)(v12 + 12) = *v14;
      uint64_t v16 = v14;
      LODWORD(v14) = *v14;
      int v15 = v16[1];
      BOOL v17 = __OFSUB__(v15, v14);
      int v18 = v15 - v14;
      if (v18 < 0 != v17) {
        int v18 = 0;
      }
      *(_DWORD *)(v12 + 16) = v18;
      *(_WORD *)(v12 + 20) = WrdNoteReferencePositionTable::getAuto(v4, (unsigned __int16)v9);
      OcCustomProperties::appendProperty(a2, v13);
      ++v9;
    }
    while (v8 != v9);
  }
  else if (!v5)
  {
    goto LABEL_17;
  }
  (*(void (**)(WrdCPTable *))(*(void *)v5 + 8))(v5);
LABEL_17:
  uint64_t v19 = *(uint64_t (**)(WrdNoteReferencePositionTable *))(*(void *)v4 + 8);
  return v19(v4);
}

void sub_238B17568(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void WrdNoteReferencePositionTable::WrdNoteReferencePositionTable(WrdNoteReferencePositionTable *this)
{
  *(void *)this = &unk_26EBE6550;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_WORD *)this + 16) = 0;
}

void WrdCPTable::WrdCPTable(WrdCPTable *this)
{
  *(void *)this = &unk_26EBE57A0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
}

void *WrdBookmarkTable::clear(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[2];
  if (((this[3] - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v3 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v3);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[2];
      }
      *(void *)(v2 + 8 * v3++) = 0;
      uint64_t v2 = v1[2];
    }
    while (v3 < ((unint64_t)(v1[3] - v2) >> 3));
  }
  v1[3] = v2;
  return this;
}

void *WrdParser::parse(WrdParser *a1, WrdNoteReferencePositionTable *a2, int a3)
{
  NoteReferencePositionFCLCBint Index = WrdFileInformationBlock::getNoteReferencePositionFCLCBIndex(a3);
  uint64_t started = WrdParser::startFCLCB(a1, NoteReferencePositionFCLCBIndex);
  if (HIDWORD(started) > 3)
  {
    unsigned int v8 = (unsigned __int16)((HIDWORD(started) - 4) / 6u);
    WrdNoteReferencePositionTable::setNumberOfNoteReferences(a2, v8);
    if (v8)
    {
      for (int i = 0; i != v8; ++i)
      {
        int v10 = (*(uint64_t (**)(void *))(**((void **)a1 + 16) + 96))(*((void **)a1 + 16));
        WrdNoteReferencePositionTable::setCP((uint64_t)a2, (unsigned __int16)i, v10);
      }
    }
    uint64_t result = (void *)(*(uint64_t (**)(void *))(**((void **)a1 + 16) + 96))(*((void **)a1 + 16));
    *((_DWORD *)a2 + 2) = result;
    if (v8)
    {
      for (int j = 0; j != v8; ++j)
      {
        __int16 v12 = (*(uint64_t (**)(void *))(**((void **)a1 + 16) + 72))(*((void **)a1 + 16));
        uint64_t result = (void *)WrdNoteReferencePositionTable::setAuto((uint64_t)a2, (unsigned __int16)j, v12);
      }
    }
  }
  else
  {
    return WrdNoteReferencePositionTable::setNumberOfNoteReferences(a2, 0);
  }
  return result;
}

uint64_t WrdFileInformationBlock::getNoteReferencePositionFCLCBIndex(int a1)
{
  if (a1 == 1) {
    return 46;
  }
  else {
    return 2;
  }
}

void *WrdNoteReferencePositionTable::setNumberOfNoteReferences(WrdNoteReferencePositionTable *this, unsigned int a2)
{
  uint64_t result = (void *)WrdNoteReferencePositionTable::cleanup(this);
  *((_WORD *)this + 16) = a2;
  if (a2)
  {
    *((void *)this + 2) = operator new[](4 * a2);
    uint64_t result = operator new[](2 * *((unsigned __int16 *)this + 16));
    *((void *)this + 3) = result;
  }
  return result;
}

uint64_t WrdNoteReferencePositionTable::cleanup(WrdNoteReferencePositionTable *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8052888210);
  }
  *((void *)this + 2) = 0;
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C80BDFB0063);
  }
  *((void *)this + 3) = 0;
  *((_WORD *)this + 16) = 0;
  return result;
}

void WrdParser::parse(WrdParser *a1, WrdCPTable *a2, unsigned int a3)
{
  unint64_t started = WrdParser::startFCLCB(a1, (unsigned __int16)a3);
  *((void *)a2 + 2) = *((void *)a2 + 1);
  unsigned int v7 = HIDWORD(started) - 4;
  if (HIDWORD(started) < 4) {
    return;
  }
  if (a3 <= 0x3B && ((1 << a3) & 0xA010000000F0000) != 0)
  {
    __int16 v8 = v7 / 6;
  }
  else if ((a3 & 0xFFFFFFFE) == 0x28)
  {
    __int16 v8 = v7 / 0x1E;
  }
  else if ((a3 & 0xFFFFFFFD) == 0x38)
  {
    __int16 v8 = v7 / 0x1A;
  }
  else
  {
    if (a3 != 4)
    {
      if (a3 == 42 || a3 == 22)
      {
        unsigned __int16 v9 = ((HIDWORD(started) + 524284) >> 3) + 1;
      }
      else if (a3 - 75 <= 1)
      {
        unsigned __int16 v9 = (unsigned __int16)(WORD2(started) - 4) / 0xAu + 1;
      }
      else
      {
        unsigned __int16 v9 = started >> 34;
      }
      goto LABEL_6;
    }
    __int16 v8 = v7 / 0x22;
  }
  unsigned __int16 v9 = v8 + 1;
LABEL_6:
  int v10 = v9;
  if (v9)
  {
    do
    {
      int v11 = (*(uint64_t (**)(void *))(**((void **)a1 + 16) + 96))(*((void **)a1 + 16));
      WrdCPTable::append(a2, v11);
      --v10;
    }
    while (v10);
  }
}

void WrdCPTable::~WrdCPTable(WrdCPTable *this)
{
  *(void *)this = &unk_26EBE57A0;
  uint64_t v2 = (void *)*((void *)this + 1);
  *((void *)this + 2) = v2;
  if (v2) {
    operator delete(v2);
  }
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBE57A0;
  uint64_t v2 = (void *)*((void *)this + 1);
  *((void *)this + 2) = v2;
  if (v2) {
    operator delete(v2);
  }
}

{
  void *v2;

  *(void *)this = &unk_26EBE57A0;
  uint64_t v2 = (void *)*((void *)this + 1);
  *((void *)this + 2) = v2;
  if (v2) {
    operator delete(v2);
  }
}

void WrdNoteReferencePositionTable::~WrdNoteReferencePositionTable(WrdNoteReferencePositionTable *this)
{
  *(void *)this = &unk_26EBE6550;
  WrdNoteReferencePositionTable::cleanup(this);
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBE6550;
  WrdNoteReferencePositionTable::cleanup(this);
}

void WrdAnnotationTable::WrdAnnotationTable(WrdAnnotationTable *this)
{
  *(void *)this = &unk_26EBE53C8;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
}

uint64_t WrdBinaryReader::read(WrdBinaryReader *this, WrdAnnotationTable *a2)
{
  uint64_t v4 = (unsigned __int16 *)operator new(0x18uLL);
  WrdAnnotationReferenceDescriptorTable::WrdAnnotationReferenceDescriptorTable((WrdAnnotationReferenceDescriptorTable *)v4);
  uint64_t v5 = (WrdAnnotationDateTimeTable *)operator new(0x20uLL);
  WrdAnnotationDateTimeTable::WrdAnnotationDateTimeTable(v5);
  int v6 = (WrdCPTable *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 4) + 280) + 16))(*(void *)(*((void *)this + 4) + 280), 12);
  unsigned int v7 = (WrdCPTable *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 4) + 280) + 16))(*(void *)(*((void *)this + 4) + 280), 12);
  WrdAnnotationDateTimeTable::clear(a2);
  WrdParser::parse(*((WrdParser **)this + 4), v6, 4u);
  uint64_t v8 = *((void *)this + 4);
  if (*(unsigned __int16 *)(v8 + 232) >= 0x70u)
  {
    int v9 = *(_DWORD *)(WrdFileInformationBlock::getFCLCB(v8 + 160, 112) + 4);
    uint64_t v8 = *((void *)this + 4);
    if (v9)
    {
      WrdParser::parse((SsrwOOStream **)v8, v5);
      uint64_t v8 = *((void *)this + 4);
    }
  }
  WrdParser::parse((WrdParser *)v8, (WrdAnnotationReferenceDescriptorTable *)v4);
  WrdParser::parse(*((WrdParser **)this + 4), v7, 5u);
  uint64_t v10 = v4[8];
  if (v4[8])
  {
    if (v10 >= (unsigned __int16)((*((_DWORD *)v7 + 4) - *((_DWORD *)v7 + 2)) >> 2))
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 1004;
    }
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = (*(uint64_t (**)(void, void))(**(void **)(*((void *)this + 4) + 280) + 16))(*(void *)(*((void *)this + 4) + 280), 0);
      *(_DWORD *)(v12 + 8) = *(_DWORD *)(*((void *)v6 + 1) + 4 * v11);
      int v13 = (_DWORD *)(*((void *)v7 + 1) + 4 * v11);
      *(_DWORD *)(v12 + 12) = *v13;
      *(_DWORD *)(v12 + 16) = v13[1] + ~*v13;
      uint64_t Descriptor = WrdAnnotationReferenceDescriptorTable::getDescriptor((WrdAnnotationReferenceDescriptorTable *)v4, (unsigned __int16)v11);
      WrdAnnotationReferenceDescriptor::operator=(*(void *)(v12 + 24), Descriptor);
      if (((*((_DWORD *)v5 + 4) - *((_DWORD *)v5 + 2)) & 0x7FFF8) != 0)
      {
        uint64_t DateTime = WrdAnnotationDateTimeTable::getDateTime(v5, v11);
        WrdDateTime::operator=(*(void *)(v12 + 32), DateTime);
      }
      XlFormatInfo::takeSection(a2, (XlFormatSection *)v12);
      ++v11;
    }
    while (v10 != v11);
  }
  (*(void (**)(WrdCPTable *))(*(void *)v7 + 8))(v7);
  (*(void (**)(WrdCPTable *))(*(void *)v6 + 8))(v6);
  if (v5) {
    (*(void (**)(WrdAnnotationDateTimeTable *))(*(void *)v5 + 8))(v5);
  }
  uint64_t v16 = *(uint64_t (**)(unsigned __int16 *))(*(void *)v4 + 8);
  return v16(v4);
}

void sub_238B17E68(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    if (v2)
    {
LABEL_8:
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
      if (!v1) {
LABEL_5:
      }
        _Unwind_Resume(a1);
LABEL_4:
      (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
      goto LABEL_5;
    }
  }
  else if (v2)
  {
    goto LABEL_8;
  }
  if (!v1) {
    goto LABEL_5;
  }
  goto LABEL_4;
}

void WrdAnnotationReferenceDescriptorTable::WrdAnnotationReferenceDescriptorTable(WrdAnnotationReferenceDescriptorTable *this)
{
  *(void *)this = &unk_26EBE5390;
  *((void *)this + 1) = 0;
  *((_WORD *)this + 8) = 0;
}

void WrdAnnotationDateTimeTable::WrdAnnotationDateTimeTable(WrdAnnotationDateTimeTable *this)
{
  *(void *)this = &unk_26EBE5318;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
}

void *WrdAnnotationDateTimeTable::clear(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[1];
  if (((this[2] - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v3 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v3);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[1];
      }
      *(void *)(v2 + 8 * v3++) = 0;
      uint64_t v2 = v1[1];
    }
    while (v3 < ((unint64_t)(v1[2] - v2) >> 3));
  }
  v1[2] = v2;
  return this;
}

void WrdParser::parse(WrdParser *this, WrdAnnotationReferenceDescriptorTable *a2)
{
  uint64_t started = WrdParser::startFCLCB(this, 4u);
  if (HIDWORD(started) > 3)
  {
    int v5 = started;
    unsigned int v6 = (HIDWORD(started) - 4) / 0x22u;
    WrdAnnotationReferenceDescriptorTable::setNumberOfAnnotationReferences(a2, (unsigned __int16)v6);
    (*(void (**)(void, void, void))(**((void **)this + 16) + 16))(*((void *)this + 16), v5 + 4 * (unsigned __int16)v6 + 4, 0);
    if ((_WORD)v6)
    {
      int v7 = 0;
      do
      {
        uint64_t Descriptor = (WrdAnnotationReferenceDescriptor *)WrdAnnotationReferenceDescriptorTable::getDescriptor(a2, (unsigned __int16)v7);
        WrdParser::parse(this, Descriptor);
        ++v7;
      }
      while ((unsigned __int16)v6 != v7);
    }
  }
  else
  {
    WrdAnnotationReferenceDescriptorTable::setNumberOfAnnotationReferences(a2, 0);
  }
}

void WrdAnnotationReferenceDescriptorTable::setNumberOfAnnotationReferences(WrdAnnotationReferenceDescriptorTable *this, unsigned int a2)
{
  WrdAnnotationReferenceDescriptorTable::cleanup((uint64_t)this);
  *((_WORD *)this + 8) = a2;
  if (a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = 40 * a2;
    unsigned int v6 = operator new[](v5 + 16);
    unint64_t v7 = 0;
    void *v6 = 40;
    v6[1] = v4;
    do
    {
      WrdAnnotationReferenceDescriptor::WrdAnnotationReferenceDescriptor((WrdAnnotationReferenceDescriptor *)&v6[v7 / 8 + 2]);
      v7 += 40;
    }
    while (v5 != v7);
    *((void *)this + 1) = v6 + 2;
  }
}

void sub_238B18210(_Unwind_Exception *a1)
{
  for (; v2; v2 -= 40)
  {
    *(void *)&v1[v2 - 24] = &unk_26EBE5350;
    CsString::~CsString((CsString *)&v1[v2 - 16]);
  }
  operator delete[](v1);
  _Unwind_Resume(a1);
}

uint64_t WrdAnnotationReferenceDescriptorTable::cleanup(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 - 8);
    if (v3)
    {
      uint64_t v4 = 40 * v3;
      do
      {
        *(void *)(v2 + v4 - 40) = &unk_26EBE5350;
        CsString::~CsString((CsString *)(v2 + v4 - 32));
        v4 -= 40;
      }
      while (v4);
    }
    this = MEMORY[0x23EC99790](v2 - 16, 0x1091C8016F80D2CLL);
  }
  *(void *)(v1 + 8) = 0;
  *(_WORD *)(v1 + 16) = 0;
  return this;
}

void WrdAnnotationDateTimeTable::~WrdAnnotationDateTimeTable(WrdAnnotationDateTimeTable *this)
{
  WrdAnnotationDateTimeTable::~WrdAnnotationDateTimeTable(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBE5318;
  WrdAnnotationDateTimeTable::clear(this);
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

void WrdAnnotationReferenceDescriptorTable::~WrdAnnotationReferenceDescriptorTable(WrdAnnotationReferenceDescriptorTable *this)
{
  *(void *)this = &unk_26EBE5390;
  WrdAnnotationReferenceDescriptorTable::cleanup((uint64_t)this);
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBE5390;
  WrdAnnotationReferenceDescriptorTable::cleanup((uint64_t)this);
}

void WrdStringTable::WrdStringTable(WrdStringTable *this)
{
  *(void *)this = &unk_26EBE6B90;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
}

uint64_t WrdStringTypedTable::WrdStringTypedTable(uint64_t result, int a2, uint64_t a3)
{
  *(void *)uint64_t result = &unk_26EBE6BD0;
  *(_DWORD *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  return result;
}

unint64_t WrdBinaryReader::read(WrdBinaryReader *this, WrdStringTypedTable *a2)
{
  if (*((_DWORD *)a2 + 2) != 36)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  uint64_t v2 = *((void *)this + 4);
  uint64_t v3 = (WrdStringTable *)*((void *)a2 + 2);
  return WrdParser::parse(v2, v3, 0x24u);
}

unint64_t WrdParser::parse(uint64_t a1, WrdStringTable *a2, unsigned __int16 a3)
{
  unint64_t result = WrdParser::startFCLCB((WrdParser *)a1, a3);
  unint64_t v6 = HIDWORD(result);
  if (HIDWORD(result))
  {
    unsigned int v7 = 0;
    do
    {
      LODWORD(v8) = (*(uint64_t (**)(void))(**(void **)(a1 + 128) + 80))(*(void *)(a1 + 128));
      unsigned __int16 v9 = v8 + 1;
      uint64_t v10 = (const unsigned __int16 *)operator new[]((2 * (v8 + 1)));
      uint64_t v11 = v10;
      *(void *)(a1 + 288) = v10;
      if (v8)
      {
        uint64_t v12 = v8;
        v7 += 2 * v8 + 2;
        uint64_t v8 = v8;
        int v13 = (unsigned __int16 *)v10;
        do
        {
          *v13++ = (*(uint64_t (**)(void))(**(void **)(a1 + 128) + 80))(*(void *)(a1 + 128));
          --v8;
        }
        while (v8);
      }
      else
      {
        uint64_t v12 = 0;
        v7 += 2;
      }
      v11[v12] = 0;
      WrdStringTable::appendString(a2, v11, v9);
      unint64_t result = *(void *)(a1 + 288);
      if (result) {
        unint64_t result = MEMORY[0x23EC99790](result, 0x1000C8077774924);
      }
      *(void *)(a1 + 288) = 0;
    }
    while (v7 < v6);
  }
  return result;
}

void WrdStringTypedTable::~WrdStringTypedTable(WrdStringTypedTable *this)
{
  *(void *)this = &unk_26EBE6BD0;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBE6BD0;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
}

void WrdStringTable::~WrdStringTable(WrdStringTable *this)
{
  WrdStringTable::~WrdStringTable(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBE6B90;
  WrdStringTable::cleanup(this);
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

void *WrdStringTable::cleanup(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[1];
  if (((this[2] - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v3 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v3);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[1];
      }
      *(void *)(v2 + 8 * v3++) = 0;
      uint64_t v2 = v1[1];
    }
    while (v3 < ((unint64_t)(v1[2] - v2) >> 3));
  }
  v1[2] = v2;
  return this;
}

void WrdCPTableHeaders::WrdCPTableHeaders(WrdCPTableHeaders *this)
{
  WrdCPTable::WrdCPTable(this);
  void *v1 = &unk_26EBE57E0;
}

void WrdBinaryReader::read(WrdParser **this, WrdCPTableHeaders *a2)
{
}

void WrdBookmarkTable::WrdBookmarkTable(WrdBookmarkTable *this)
{
  *(void *)this = &unk_26EBE5590;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
}

uint64_t WrdBinaryReader::read(WrdBinaryReader *this, WrdBookmarkTable *a2)
{
  unint64_t v3 = (unsigned __int16 *)operator new(0x18uLL);
  WrdStringWithDataTable::WrdStringWithDataTable((WrdStringWithDataTable *)v3);
  uint64_t v4 = (WrdCPTable *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 4) + 280) + 16))(*(void *)(*((void *)this + 4) + 280), 12);
  uint64_t v5 = (unsigned __int16 *)operator new(0x18uLL);
  WrdBookmarkFirstDescriptorTable::WrdBookmarkFirstDescriptorTable((uint64_t)v5, *((_DWORD *)a2 + 2));
  unint64_t v6 = (WrdCPTable *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 4) + 280) + 16))(*(void *)(*((void *)this + 4) + 280), 12);
  WrdBookmarkTable::clear(a2);
  uint64_t v7 = *((void *)this + 4);
  if (*((_DWORD *)a2 + 2))
  {
    WrdParser::parse(v7, v3, 37);
    WrdParser::parse(*((WrdParser **)this + 4), v4, 0x2Au);
    WrdParser::parse(*((WrdParser **)this + 4), (WrdBookmarkFirstDescriptorTable *)v5);
    unsigned int v8 = 43;
  }
  else
  {
    WrdParser::parse(v7, v3, 21);
    WrdParser::parse(*((WrdParser **)this + 4), v4, 0x16u);
    WrdParser::parse(*((WrdParser **)this + 4), (WrdBookmarkFirstDescriptorTable *)v5);
    unsigned int v8 = 23;
  }
  WrdParser::parse(*((WrdParser **)this + 4), v6, v8);
  uint64_t v26 = v5[4];
  if (v5[4])
  {
    if ((unsigned __int16)((*((_DWORD *)v6 + 4) - *((_DWORD *)v6 + 2)) >> 2) - 1 != v26
      || v26 != v3[4])
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 2001;
    }
    uint64_t v9 = 0;
    uint64_t v25 = this;
    do
    {
      uint64_t v10 = *(unsigned __int16 *)WrdBookmarkFirstDescriptorTable::getBookmarkFirstDescriptorReference((WrdBookmarkFirstDescriptorTable *)v5, (unsigned __int16)v9);
      uint64_t v11 = *((void *)v6 + 1);
      if (v10 >= (unsigned __int16)((*((_DWORD *)v6 + 4) - v11) >> 2))
      {
        unsigned int v23 = __cxa_allocate_exception(4uLL);
        *unsigned int v23 = 2001;
      }
      int v12 = *(_DWORD *)(*((void *)v4 + 1) + 4 * v9);
      int v13 = *(_DWORD *)(v11 + 4 * v10);
      int v14 = 7;
      while (1)
      {
        int CPOffsetOfText = WrdFileInformationBlock::getCPOffsetOfText(*((void *)this + 4) + 160, v14);
        if (v12 >= CPOffsetOfText) {
          break;
        }
        if (--v14 == -1)
        {
          int v28 = v13;
          goto LABEL_14;
        }
      }
      int v28 = v13 - CPOffsetOfText;
      v12 -= CPOffsetOfText;
LABEL_14:
      uint64_t v16 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 4) + 280) + 16))(*(void *)(*((void *)this + 4) + 280), 7);
      BOOL v17 = (const CsString *)(WrdStringWithDataTable::getStringDataReference((WrdStringWithDataTable *)v3, (unsigned __int16)v9)+ 8);
      *(_DWORD *)(v16 + 24) = 0;
      bzero(*(void **)(v16 + 16), 2 * *(unsigned int *)(v16 + 28));
      CsString::append((CsString *)(v16 + 8), v17);
      uint64_t StringDataReference = WrdStringWithDataTable::getStringDataReference((WrdStringWithDataTable *)v3, (unsigned __int16)v9);
      WrdBookmark::setExtraDataLength((WrdBookmark *)v16, *(unsigned __int16 *)(StringDataReference + 40));
      if (*(_WORD *)(v16 + 40))
      {
        unint64_t v19 = 0;
        do
        {
          uint64_t v20 = WrdStringWithDataTable::getStringDataReference((WrdStringWithDataTable *)v3, (unsigned __int16)v9);
          WrdBookmark::setExtraData(v16, (unsigned __int16)v19, *(unsigned char *)(*(void *)(v20 + 32) + v19));
          ++v19;
        }
        while (v19 < *(unsigned __int16 *)(v16 + 40));
      }
      *(_DWORD *)(v16 + 44) = v12;
      *(_DWORD *)(v16 + 48) = v28;
      *(_DWORD *)(v16 + 52) = v14;
      *(unsigned char *)(v16 + 58) = *(unsigned char *)(WrdBookmarkFirstDescriptorTable::getBookmarkFirstDescriptorReference((WrdBookmarkFirstDescriptorTable *)v5, (unsigned __int16)v9)+ 4);
      *(unsigned char *)(v16 + 59) = *(unsigned char *)(WrdBookmarkFirstDescriptorTable::getBookmarkFirstDescriptorReference((WrdBookmarkFirstDescriptorTable *)v5, (unsigned __int16)v9)+ 5);
      *(unsigned char *)(v16 + 56) = *(unsigned char *)(WrdBookmarkFirstDescriptorTable::getBookmarkFirstDescriptorReference((WrdBookmarkFirstDescriptorTable *)v5, (unsigned __int16)v9)+ 2);
      *(unsigned char *)(v16 + 57) = *(unsigned char *)(WrdBookmarkFirstDescriptorTable::getBookmarkFirstDescriptorReference((WrdBookmarkFirstDescriptorTable *)v5, (unsigned __int16)v9)+ 3);
      WrdBookmarkTable::append(a2, (WrdBookmark *)v16);
      ++v9;
      this = v25;
    }
    while (v9 != v26);
  }
  uint64_t result = (*(uint64_t (**)(WrdCPTable *))(*(void *)v6 + 8))(v6);
  if (v5) {
    uint64_t result = (*(uint64_t (**)(unsigned __int16 *))(*(void *)v5 + 8))(v5);
  }
  if (v4) {
    uint64_t result = (*(uint64_t (**)(WrdCPTable *))(*(void *)v4 + 8))(v4);
  }
  if (v3)
  {
    BOOL v22 = *(uint64_t (**)(unsigned __int16 *))(*(void *)v3 + 8);
    return v22(v3);
  }
  return result;
}

void sub_238B18C54(_Unwind_Exception *a1)
{
  if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
    if (v3) {
      goto LABEL_3;
    }
  }
  else if (v3)
  {
LABEL_3:
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    if (!v2) {
LABEL_8:
    }
      _Unwind_Resume(a1);
LABEL_7:
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    goto LABEL_8;
  }
  if (!v2) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void WrdStringWithDataTable::WrdStringWithDataTable(WrdStringWithDataTable *this)
{
  *(void *)this = &unk_26EBE6C10;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = 0;
}

uint64_t WrdBookmarkFirstDescriptorTable::WrdBookmarkFirstDescriptorTable(uint64_t result, int a2)
{
  *(void *)uint64_t result = &unk_26EBE5558;
  *(_WORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a2;
  *(void *)(result + 16) = 0;
  return result;
}

void WrdParser::parse(uint64_t a1, unsigned __int16 *a2, int a3)
{
  if (!((unint64_t)WrdParser::startFCLCB((WrdParser *)a1, (unsigned __int16)a3) >> 32)
    || *(_WORD *)(a1 + 178) == 71 && a3 == 32 && *(_DWORD *)(a1 + 160) == 1031 && (*(_WORD *)(a1 + 198) & 0x100) == 0)
  {
    WrdStringWithDataTable::setNumberOfStrings((WrdStringWithDataTable *)a2, 0);
  }
  else
  {
    int v20 = 0;
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 128) + 80))(*(void *)(a1 + 128));
    int v7 = v6;
    unsigned int v8 = v6;
    if (v6 == 0xFFFF) {
      unsigned int v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 128) + 80))(*(void *)(a1 + 128), v6);
    }
    WrdStringWithDataTable::setNumberOfStrings((WrdStringWithDataTable *)a2, v8);
    a2[5] = (*(uint64_t (**)(void))(**(void **)(a1 + 128) + 80))(*(void *)(a1 + 128));
    if (a2[4])
    {
      unsigned __int16 v9 = 0;
      do
      {
        uint64_t StringDataReference = WrdStringWithDataTable::getStringDataReference((WrdStringWithDataTable *)a2, v9);
        unsigned int v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 128) + 80))(*(void *)(a1 + 128));
        CsString::reserve((CsString *)(StringDataReference + 8), v11);
        CsString::setCount((CsString *)(StringDataReference + 8), v11);
        int v12 = *(_WORD **)(StringDataReference + 16);
        if (!v12)
        {
          exception = __cxa_allocate_exception(4uLL);
          _DWORD *exception = 2001;
        }
        if (v11)
        {
          uint64_t v13 = v11;
          int v14 = *(_WORD **)(StringDataReference + 16);
          do
          {
            uint64_t v15 = **(void **)(a1 + 128);
            if (v7 == 0xFFFF) {
              __int16 v16 = (*(uint64_t (**)(void))(v15 + 80))();
            }
            else {
              __int16 v16 = (*(uint64_t (**)(void))(v15 + 64))();
            }
            *v14++ = v16;
            --v13;
          }
          while (v13);
        }
        if (v7 != 0xFFFF) {
          ChConvertANSICharactersToUnicode(v12, v11);
        }
        size_t v17 = a2[5];
        if (a2[5])
        {
          int v20 = a2[5];
          int v18 = operator new[](v17);
          *(void *)(StringDataReference + 32) = v18;
          *(_WORD *)(StringDataReference + 40) = v20;
          (*(void (**)(void, void *, int *))(**(void **)(a1 + 128) + 56))(*(void *)(a1 + 128), v18, &v20);
        }
        ++v9;
      }
      while (a2[4] > v9);
    }
  }
}

void WrdStringWithDataTable::setNumberOfStrings(WrdStringWithDataTable *this, unsigned int a2)
{
  WrdStringWithDataTable::cleanup((uint64_t)this);
  *((_WORD *)this + 4) = a2;
  if (a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = 48 * a2;
    uint64_t v6 = operator new[](v5 + 16);
    unint64_t v7 = 0;
    void *v6 = 48;
    v6[1] = v4;
    do
    {
      unsigned int v8 = &v6[v7 / 8];
      v6[v7 / 8 + 2] = &unk_26EBE6C38;
      CsString::CsString((CsString *)&v6[v7 / 8 + 3]);
      v8[6] = 0;
      *((_WORD *)v8 + 28) = 0;
      v7 += 48;
    }
    while (v5 != v7);
    *((void *)this + 2) = v6 + 2;
  }
}

void sub_238B191A8(_Unwind_Exception *a1)
{
  for (; v2; v2 -= 48)
    WrdStringWithDataTable::StringData::~StringData((WrdStringWithDataTable::StringData *)&v1[v2 - 32]);
  operator delete[](v1);
  _Unwind_Resume(a1);
}

uint64_t WrdStringWithDataTable::cleanup(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 16);
  if (v2)
  {
    uint64_t v3 = v2 - 16;
    uint64_t v4 = *(void *)(v2 - 8);
    if (v4)
    {
      uint64_t v5 = v2 - 48;
      uint64_t v6 = 48 * v4;
      do
      {
        WrdStringWithDataTable::StringData::~StringData((WrdStringWithDataTable::StringData *)(v5 + v6));
        v6 -= 48;
      }
      while (v6);
    }
    this = MEMORY[0x23EC99790](v3, 0x1091C8072689AA3);
  }
  *(void *)(v1 + 16) = 0;
  *(_WORD *)(v1 + 8) = 0;
  return this;
}

uint64_t WrdStringWithDataTable::getStringDataReference(WrdStringWithDataTable *this, unsigned int a2)
{
  return *((void *)this + 2) + 48 * a2;
}

void WrdParser::parse(WrdParser *this, WrdBookmarkFirstDescriptorTable *a2)
{
  if (*((_DWORD *)a2 + 3)) {
    unsigned int v4 = 42;
  }
  else {
    unsigned int v4 = 22;
  }
  uint64_t started = WrdParser::startFCLCB(this, v4);
  if (HIDWORD(started) > 3)
  {
    int v6 = started;
    unsigned int v7 = (unsigned __int16)((HIDWORD(started) + 524284) >> 3);
    WrdBookmarkFirstDescriptorTable::setNumberOfBookmarks(a2, v7);
    (*(void (**)(void, void, void))(**((void **)this + 16) + 16))(*((void *)this + 16), v6 + 4 * v7 + 4, 0);
    if (v7)
    {
      for (int i = 0; i != v7; ++i)
      {
        uint64_t BookmarkFirstDescriptorReference = WrdBookmarkFirstDescriptorTable::getBookmarkFirstDescriptorReference(a2, (unsigned __int16)i);
        *(_WORD *)uint64_t BookmarkFirstDescriptorReference = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
        unsigned int v10 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
        *(unsigned char *)(BookmarkFirstDescriptorReference + 2) = v10 & 0x7F;
        *(unsigned char *)(BookmarkFirstDescriptorReference + 4) = (v10 & 0x80) != 0;
        *(unsigned char *)(BookmarkFirstDescriptorReference + 3) = BYTE1(v10) & 0x7F;
        *(unsigned char *)(BookmarkFirstDescriptorReference + 5) = v10 >> 15;
      }
    }
  }
  else
  {
    WrdBookmarkFirstDescriptorTable::setNumberOfBookmarks(a2, 0);
  }
}

void WrdBookmarkFirstDescriptorTable::setNumberOfBookmarks(WrdBookmarkFirstDescriptorTable *this, unsigned int a2)
{
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    MEMORY[0x23EC99790](v4, 0x1000C80274DC3F3);
  }
  *((void *)this + 2) = 0;
  *((_WORD *)this + 4) = a2;
  if (a2)
  {
    size_t v5 = 6 * a2;
    int v6 = (char *)operator new[](v5);
    uint64_t v7 = 0;
    do
    {
      WrdBookmarkFirstDescriptor::WrdBookmarkFirstDescriptor((WrdBookmarkFirstDescriptor *)&v6[v7]);
      v7 += 6;
    }
    while (v5 != v7);
    *((void *)this + 2) = v6;
  }
}

void sub_238B19458(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void WrdBookmarkFirstDescriptor::WrdBookmarkFirstDescriptor(WrdBookmarkFirstDescriptor *this)
{
  *((_WORD *)this + 2) = 0;
  *(_DWORD *)this = 0;
}

uint64_t WrdBookmarkFirstDescriptorTable::getBookmarkFirstDescriptorReference(WrdBookmarkFirstDescriptorTable *this, unsigned int a2)
{
  return *((void *)this + 2) + 6 * a2;
}

uint64_t WrdFileInformationBlock::getCPOffsetOfText(uint64_t a1, int a2)
{
  if (a2 < 0) {
    return 0;
  }
  int v2 = 0;
  int v3 = 0;
  __int16 v4 = 0;
  LODWORD(v5) = 0;
  do
  {
    if (v3)
    {
      uint64_t v6 = *(void *)(a1 + 64);
      if (v6 && (unsigned __int16 v7 = v4 + 2, *(unsigned __int16 *)(a1 + 56) > v7)) {
        int v8 = *(_DWORD *)(v6 + 4 * v7);
      }
      else {
        int v8 = 0;
      }
      uint64_t v5 = (v8 + v5);
    }
    else
    {
      uint64_t v5 = 0;
    }
    __int16 v4 = v2 + 1;
    int v3 = (v2 + 1) << 16;
    int v2 = (__int16)(v2 + 1);
  }
  while (v2 <= a2);
  return v5;
}

void WrdBookmark::WrdBookmark(WrdBookmark *this)
{
  *(void *)this = &unk_26EBE5518;
  CsString::CsString((CsString *)((char *)this + 8));
  *((void *)this + 4) = 0;
  *((_WORD *)this + 20) = 0;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 11) = 0;
  *((_WORD *)this + 29) = 0;
}

CsString *CsString::append(CsString *this, const CsString *a2)
{
  unsigned int var1 = a2->var1;
  if (!var1) {
    unsigned int var1 = (unsigned __int16 *)&unk_238EDE710;
  }
  return CsString::append(this, var1, a2->var2);
}

CsString *CsString::append(CsString *this, const unsigned __int16 *a2, unsigned int a3)
{
  if (a2)
  {
    uint64_t v5 = this;
    unsigned int v6 = this->var2 + a3;
    this = CsString::reserve(this, v6);
    if (a3) {
      this = (CsString *)_ChWcsncpy(&v5->var1[v5->var2], a2, a3);
    }
    v5->uint64_t var2 = v6;
    v5->var1[v6] = 0;
  }
  return this;
}

void *WrdBookmark::setExtraDataLength(WrdBookmark *this, unsigned int a2)
{
  uint64_t result = (void *)*((void *)this + 4);
  if (result) {
    uint64_t result = (void *)MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  *((void *)this + 4) = 0;
  *((_WORD *)this + 20) = a2;
  if (a2)
  {
    uint64_t result = operator new[](a2);
    *((void *)this + 4) = result;
  }
  return result;
}

void WrdBookmarkTable::append(WrdBookmarkTable *this, WrdBookmark *a2)
{
  if (a2)
  {
    unint64_t v6 = *((void *)this + 4);
    __int16 v4 = (char *)this + 32;
    unint64_t v5 = v6;
    unsigned __int16 v7 = (void *)*((void *)v4 - 1);
    if ((unint64_t)v7 >= v6)
    {
      uint64_t v9 = *((void *)this + 2);
      unint64_t v10 = (unint64_t)v7 - v9;
      unint64_t v11 = (v5 - v9) >> 3;
      unsigned int v12 = 2 * v11;
      if (2 * (int)v11 <= (v10 >> 3) + 1) {
        unsigned int v12 = (v10 >> 3) + 1;
      }
      if (v11 >= 0x7FFFFFFF) {
        unint64_t v13 = 0xFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13)
      {
        int v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
        uint64_t v16 = v15;
      }
      else
      {
        int v14 = 0;
        uint64_t v16 = 0;
      }
      size_t v17 = &v14[v10 & 0x7FFFFFFF8];
      int v18 = &v14[8 * v16];
      *(void *)size_t v17 = a2;
      int v8 = v17 + 8;
      int v20 = (char *)*((void *)this + 2);
      unint64_t v19 = (char *)*((void *)this + 3);
      if (v19 != v20)
      {
        do
        {
          uint64_t v21 = *((void *)v19 - 1);
          v19 -= 8;
          *((void *)v17 - 1) = v21;
          v17 -= 8;
        }
        while (v19 != v20);
        unint64_t v19 = (char *)*((void *)this + 2);
      }
      *((void *)this + 2) = v17;
      *((void *)this + 3) = v8;
      *((void *)this + 4) = v18;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *unsigned __int16 v7 = a2;
      int v8 = v7 + 1;
    }
    *((void *)this + 3) = v8;
  }
}

void WrdBookmarkFirstDescriptorTable::~WrdBookmarkFirstDescriptorTable(WrdBookmarkFirstDescriptorTable *this)
{
  *(void *)this = &unk_26EBE5558;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C80274DC3F3);
  }
  *((void *)this + 2) = 0;
  *((_WORD *)this + 4) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBE5558;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C80274DC3F3);
  }
  *((void *)this + 2) = 0;
  *((_WORD *)this + 4) = 0;
}

void WrdStringWithDataTable::~WrdStringWithDataTable(WrdStringWithDataTable *this)
{
  *(void *)this = &unk_26EBE6C10;
  WrdStringWithDataTable::cleanup((uint64_t)this);
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBE6C10;
  WrdStringWithDataTable::cleanup((uint64_t)this);
}

void WrdStringWithDataTable::StringData::~StringData(WrdStringWithDataTable::StringData *this)
{
  *(void *)this = &unk_26EBE6C38;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 4) = 0;
  CsString::~CsString((CsString *)((char *)this + 8));
}

{
  uint64_t vars8;

  WrdStringWithDataTable::StringData::~StringData(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t WrdFieldPositionTable::WrdFieldPositionTable(uint64_t result, int a2)
{
  *(void *)uint64_t result = &unk_26EBE6060;
  *(_DWORD *)(result + 8) = a2;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t WrdBinaryReader::read(WrdBinaryReader *this, WrdFieldPositionTable *a2)
{
  if (*((_DWORD *)a2 + 2) == 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  __int16 v4 = (WrdCPTable *)operator new(0x20uLL);
  WrdCPTable::WrdCPTable(v4);
  unint64_t v5 = (WrdFieldDescriptorTable *)operator new(0x18uLL);
  WrdFieldDescriptorTable::WrdFieldDescriptorTable(v5);
  WrdBookmarkTable::clear(a2);
  unint64_t v6 = (WrdParser *)*((void *)this + 4);
  FieldPositionFCLCBint Index = WrdFileInformationBlock::getFieldPositionFCLCBIndex(*((_DWORD *)a2 + 2));
  WrdParser::parse(v6, v4, FieldPositionFCLCBIndex);
  WrdParser::parse(*((WrdParser **)this + 4), v5, *((_DWORD *)a2 + 2));
  if (*((_WORD *)v5 + 4))
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 4) + 280) + 16))(*(void *)(*((void *)this + 4) + 280), 22);
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(*((void *)v4 + 1) + 4 * v9);
      WrdFieldDescriptor::operator=(*(void *)(v10 + 16), *((void *)v5 + 2) + v8);
      OcCustomProperties::appendProperty((OcCustomProperties *)a2, (OcCustomProperty *)v10);
      ++v9;
      v8 += 24;
    }
    while (v9 < *((unsigned __int16 *)v5 + 4));
  }
  (*(void (**)(WrdFieldDescriptorTable *))(*(void *)v5 + 8))(v5);
  unint64_t v11 = *(uint64_t (**)(WrdCPTable *))(*(void *)v4 + 8);
  return v11(v4);
}

void sub_238B19A38(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(a1);
}

void WrdFieldDescriptorTable::WrdFieldDescriptorTable(WrdFieldDescriptorTable *this)
{
  *(void *)this = &unk_26EBE5FE8;
  *((_WORD *)this + 4) = 0;
  *((void *)this + 2) = 0;
}

uint64_t WrdFileInformationBlock::getFieldPositionFCLCBIndex(int a1)
{
  if ((a1 - 1) > 6) {
    return 16;
  }
  else {
    return dword_238EEF21C[a1 - 1];
  }
}

void WrdParser::parse(WrdParser *a1, WrdFieldDescriptorTable *a2, int a3)
{
  FieldPositionFCLCBint Index = WrdFileInformationBlock::getFieldPositionFCLCBIndex(a3);
  uint64_t started = WrdParser::startFCLCB(a1, FieldPositionFCLCBIndex);
  if (HIDWORD(started) > 3)
  {
    int v7 = started;
    unsigned int v8 = (HIDWORD(started) - 4) / 6u;
    WrdFieldDescriptorTable::setNumberOfFieldDescriptors(a2, (unsigned __int16)v8);
    (*(void (**)(void *, void, void))(**((void **)a1 + 16) + 16))(*((void **)a1 + 16), v7 + 4 * (unsigned __int16)v8 + 4, 0);
    if ((_WORD)v8)
    {
      uint64_t v9 = 0;
      do
      {
        WrdParser::parse(a1, (WrdFieldDescriptor *)(*((void *)a2 + 2) + v9));
        v9 += 24;
      }
      while (24 * (unsigned __int16)v8 != v9);
    }
  }
  else
  {
    WrdFieldDescriptorTable::setNumberOfFieldDescriptors(a2, 0);
  }
}

void WrdFieldDescriptorTable::setNumberOfFieldDescriptors(WrdFieldDescriptorTable *this, unsigned int a2)
{
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    MEMORY[0x23EC99790](v4 - 16, 0x1081C807FDEFFD3);
  }
  *((void *)this + 2) = 0;
  *((_WORD *)this + 4) = a2;
  if (a2)
  {
    uint64_t v5 = a2;
    uint64_t v6 = 24 * a2;
    int v7 = operator new[](v6 + 16);
    unint64_t v8 = 0;
    *int v7 = 24;
    v7[1] = v5;
    do
    {
      WrdFieldDescriptor::WrdFieldDescriptor((WrdFieldDescriptor *)&v7[v8 / 8 + 2]);
      v8 += 24;
    }
    while (v6 != v8);
    *((void *)this + 2) = v7 + 2;
  }
}

void sub_238B19D04(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void WrdFieldDescriptor::WrdFieldDescriptor(WrdFieldDescriptor *this)
{
  *(void *)this = &unk_26EBE5FA8;
  *((void *)this + 1) = 0xFF00000013;
  *((unsigned char *)this + 16) &= 0x80u;
}

WrdFieldDescriptor *WrdParser::parse(WrdParser *this, WrdFieldDescriptor *a2)
{
  char v4 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
  *((_DWORD *)a2 + 2) = v4 & 0x1F;
  unsigned int v5 = (v4 & 0x1F) - 19;
  int v6 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
  unsigned int v7 = v6;
  if (v5 > 1)
  {
    WrdFieldDescriptor::setZombieEmbed(a2, (v6 & 2) != 0);
    WrdFieldDescriptor::setResultDirty(a2, (v7 & 4) != 0);
    WrdFieldDescriptor::setResultEdited(a2, (v7 & 8) != 0);
    WrdFieldDescriptor::setLocked(a2, (v7 & 0x10) != 0);
    WrdFieldDescriptor::setPrivateResult(a2, (v7 & 0x20) != 0);
    WrdFieldDescriptor::setNested(a2, (v7 & 0x40) != 0);
    return WrdFieldDescriptor::setHasSeparator(a2, v7 >> 7);
  }
  else
  {
    return (WrdFieldDescriptor *)EshRecord::setDataLength((uint64_t)a2, v6);
  }
}

WrdFieldDescriptor *WrdFieldDescriptor::setZombieEmbed(WrdFieldDescriptor *this, char a2)
{
  *((unsigned char *)this + 16) = *((unsigned char *)this + 16) & 0xFE | a2 & 1;
  return this;
}

WrdFieldDescriptor *WrdFieldDescriptor::setResultDirty(WrdFieldDescriptor *this, char a2)
{
  *((unsigned char *)this + 16) = *((unsigned char *)this + 16) & 0xFD | (2 * (a2 & 1));
  return this;
}

WrdFieldDescriptor *WrdFieldDescriptor::setResultEdited(WrdFieldDescriptor *this, char a2)
{
  *((unsigned char *)this + 16) = *((unsigned char *)this + 16) & 0xFB | (4 * (a2 & 1));
  return this;
}

WrdFieldDescriptor *WrdFieldDescriptor::setLocked(WrdFieldDescriptor *this, char a2)
{
  *((unsigned char *)this + 16) = *((unsigned char *)this + 16) & 0xF7 | (8 * (a2 & 1));
  return this;
}

WrdFieldDescriptor *WrdFieldDescriptor::setPrivateResult(WrdFieldDescriptor *this, char a2)
{
  *((unsigned char *)this + 16) = *((unsigned char *)this + 16) & 0xEF | (16 * (a2 & 1));
  return this;
}

WrdFieldDescriptor *WrdFieldDescriptor::setNested(WrdFieldDescriptor *this, char a2)
{
  *((unsigned char *)this + 16) = *((unsigned char *)this + 16) & 0xDF | (32 * (a2 & 1));
  return this;
}

WrdFieldDescriptor *WrdFieldDescriptor::setHasSeparator(WrdFieldDescriptor *this, char a2)
{
  *((unsigned char *)this + 16) = *((unsigned char *)this + 16) & 0xBF | ((a2 & 1) << 6);
  return this;
}

void WrdFieldPosition::WrdFieldPosition(WrdFieldPosition *this, WrdFieldDescriptor *a2)
{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBE6020;
  this->unsigned int var1 = 0;
  this->uint64_t var2 = a2;
}

double WrdFieldDescriptor::operator=(uint64_t a1, uint64_t a2)
{
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  int v3 = *(unsigned char *)(a1 + 16) & 0xFE | *(unsigned char *)(a2 + 16) & 1;
  *(unsigned char *)(a1 + 16) = v3;
  unsigned int v4 = v3 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(a2 + 16) >> 1) & 1));
  *(unsigned char *)(a1 + 16) = v4;
  unsigned int v5 = v4 & 0xFFFFFFFB | (4 * ((*(unsigned __int8 *)(a2 + 16) >> 2) & 1));
  *(unsigned char *)(a1 + 16) = v5;
  unsigned int v6 = v5 & 0xFFFFFFF7 | (8 * ((*(unsigned __int8 *)(a2 + 16) >> 3) & 1));
  *(unsigned char *)(a1 + 16) = v6;
  unsigned int v7 = v6 & 0xFFFFFFEF | (16 * ((*(unsigned __int8 *)(a2 + 16) >> 4) & 1));
  *(unsigned char *)(a1 + 16) = v7;
  unsigned int v8 = v7 & 0xFFFFFFDF | (32 * ((*(unsigned __int8 *)(a2 + 16) >> 5) & 1));
  *(unsigned char *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 16) = v8 & 0xBF | *(unsigned char *)(a2 + 16) & 0x40;
  return result;
}

void OcCustomProperties::appendProperty(OcCustomProperties *this, OcCustomProperty *a2)
{
  unint64_t v6 = *((void *)this + 4);
  unsigned int v4 = (char *)this + 32;
  unint64_t v5 = v6;
  unsigned int v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *((void *)this + 2);
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      int v14 = 0;
      uint64_t v16 = 0;
    }
    size_t v17 = &v14[v10 & 0x7FFFFFFF8];
    int v18 = &v14[8 * v16];
    *(void *)size_t v17 = a2;
    unsigned int v8 = v17 + 8;
    int v20 = (char *)*((void *)this + 2);
    unint64_t v19 = (char *)*((void *)this + 3);
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      unint64_t v19 = (char *)*((void *)this + 2);
    }
    *((void *)this + 2) = v17;
    *((void *)this + 3) = v8;
    *((void *)this + 4) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *unsigned int v7 = a2;
    unsigned int v8 = v7 + 1;
  }
  *((void *)this + 3) = v8;
}

void WrdFieldDescriptorTable::~WrdFieldDescriptorTable(WrdFieldDescriptorTable *this)
{
  *(void *)this = &unk_26EBE5FE8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2 - 16, 0x1081C807FDEFFD3);
  }
  *((void *)this + 2) = 0;
  *((_WORD *)this + 4) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBE5FE8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2 - 16, 0x1081C807FDEFFD3);
  }
  *((void *)this + 2) = 0;
  *((_WORD *)this + 4) = 0;
}

uint64_t WrdStoryTable::WrdStoryTable(uint64_t result, int a2)
{
  *(void *)double result = &unk_26EBE6B50;
  *(_DWORD *)(result + 8) = a2;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t WrdBinaryReader::read(WrdBinaryReader *this, WrdStoryTable *a2)
{
  if ((*((_DWORD *)a2 + 2) & 0xFFFFFFFE) != 6)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  unsigned int v4 = (WrdCPTable *)operator new(0x20uLL);
  WrdCPTable::WrdCPTable(v4);
  unint64_t v5 = (WrdTextBoxStoryTable *)operator new(0x18uLL);
  WrdTextBoxStoryTable::WrdTextBoxStoryTable(v5);
  WrdBookmarkTable::clear(a2);
  unint64_t v6 = (WrdParser *)*((void *)this + 4);
  TextBoxStoryFCLCBint Index = WrdFileInformationBlock::getTextBoxStoryFCLCBIndex(*((_DWORD *)a2 + 2));
  WrdParser::parse(v6, v4, TextBoxStoryFCLCBIndex);
  WrdParser::parse(*((WrdParser **)this + 4), v5, *((_DWORD *)a2 + 2));
  if (*((_WORD *)v5 + 4))
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = *((void *)v5 + 2);
      uint64_t v11 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 4) + 280) + 16))(*(void *)(*((void *)this + 4) + 280), 50);
      unsigned int v12 = (unsigned __int8 *)(v10 + v8);
      int v13 = v12[16];
      *(unsigned char *)(v11 + 32) = v13 ^ 1;
      int v14 = (_DWORD *)(*((void *)v4 + 1) + 4 * v9);
      *(_DWORD *)(v11 + 8) = *v14;
      *(_DWORD *)(v11 + 12) = v14[1] + ~*v14;
      if (v13)
      {
        *(_DWORD *)(v11 + 24) = openListItemCount((uint64_t)v12);
        *(_DWORD *)(v11 + 28) = EshRecord::getDataLength((EshRecord *)v12);
      }
      else
      {
        *(_DWORD *)(v11 + 16) = CsLeReadSInt32((unsigned int *)v12);
        *(_DWORD *)(v11 + 20) = WrdTextBoxStory::getOfficeArtShapeIDForFirstShapeInStoryChain((WrdTextBoxStory *)v12);
      }
      WrdBookmarkTable::append(a2, (WrdBookmark *)v11);
      ++v9;
      v8 += 20;
    }
    while (v9 < *((unsigned __int16 *)v5 + 4));
  }
  (*(void (**)(WrdTextBoxStoryTable *))(*(void *)v5 + 8))(v5);
  unsigned int v15 = *(uint64_t (**)(WrdCPTable *))(*(void *)v4 + 8);
  return v15(v4);
}

void sub_238B1A334(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(a1);
}

void WrdTextBoxStoryTable::WrdTextBoxStoryTable(WrdTextBoxStoryTable *this)
{
  *(void *)this = &unk_26EBE6EC8;
  *((_WORD *)this + 4) = 0;
  *((void *)this + 2) = 0;
}

uint64_t WrdFileInformationBlock::getTextBoxStoryFCLCBIndex(int a1)
{
  if (a1 == 7) {
    return 58;
  }
  else {
    return 56;
  }
}

void WrdParser::parse(WrdParser *a1, WrdTextBoxStoryTable *a2, int a3)
{
  TextBoxStoryFCLCBint Index = WrdFileInformationBlock::getTextBoxStoryFCLCBIndex(a3);
  uint64_t started = WrdParser::startFCLCB(a1, TextBoxStoryFCLCBIndex);
  if (HIDWORD(started) > 3)
  {
    int v7 = started;
    unsigned int v8 = (HIDWORD(started) - 4) / 0x1Au;
    WrdTextBoxStoryTable::setNumberOfTextBoxStories(a2, (unsigned __int16)v8);
    (*(void (**)(void *, void, void))(**((void **)a1 + 16) + 16))(*((void **)a1 + 16), v7 + 4 * (unsigned __int16)v8 + 4, 0);
    if ((_WORD)v8)
    {
      uint64_t v9 = 0;
      do
      {
        WrdParser::parse(a1, (WrdTextBoxStory *)(*((void *)a2 + 2) + v9));
        v9 += 20;
      }
      while (20 * (unsigned __int16)v8 != v9);
    }
  }
  else
  {
    WrdTextBoxStoryTable::setNumberOfTextBoxStories(a2, 0);
  }
}

void WrdTextBoxStoryTable::setNumberOfTextBoxStories(WrdTextBoxStoryTable *this, unsigned int a2)
{
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    MEMORY[0x23EC99790](v4, 0x1000C80C46099A0);
  }
  *((void *)this + 2) = 0;
  *((_WORD *)this + 4) = a2;
  if (a2)
  {
    size_t v5 = 20 * a2;
    unint64_t v6 = (char *)operator new[](v5);
    uint64_t v7 = 0;
    do
    {
      WrdTextBoxStory::WrdTextBoxStory((WrdTextBoxStory *)&v6[v7]);
      v7 += 20;
    }
    while (v5 != v7);
    *((void *)this + 2) = v6;
  }
}

void sub_238B1A5CC(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void WrdTextBoxStoryTable::~WrdTextBoxStoryTable(WrdTextBoxStoryTable *this)
{
  *(void *)this = &unk_26EBE6EC8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C80C46099A0);
  }
  *((void *)this + 2) = 0;
  *((_WORD *)this + 4) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBE6EC8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C80C46099A0);
  }
  *((void *)this + 2) = 0;
  *((_WORD *)this + 4) = 0;
}

void WrdFileShapeAddressTable::WrdFileShapeAddressTable(WrdFileShapeAddressTable *this)
{
  *(void *)this = &unk_26EBE60E0;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
}

uint64_t WrdBinaryReader::read(WrdParser **this, WrdFileShapeAddressTable *a2)
{
  if ((*((_DWORD *)a2 + 2) | 2) != 2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  uint64_t v4 = (WrdCPTable *)operator new(0x20uLL);
  WrdCPTable::WrdCPTable(v4);
  if (*((_DWORD *)a2 + 2)) {
    unsigned int v5 = 41;
  }
  else {
    unsigned int v5 = 40;
  }
  WrdParser::parse(this[4], v4, v5);
  WrdParser::parse(this[4], a2);
  unint64_t v6 = (_DWORD *)*((void *)v4 + 1);
  unsigned int v7 = (unsigned __int16)((*((_DWORD *)v4 + 4) - v6) >> 2);
  if (v7 >= 2)
  {
    uint64_t v8 = v7 - 1;
    uint64_t v9 = (uint64_t *)*((void *)a2 + 2);
    do
    {
      uint64_t v11 = *v9++;
      uint64_t v10 = v11;
      LODWORD(v11) = *v6++;
      *(_DWORD *)(v10 + 8) = v11;
      --v8;
    }
    while (v8);
  }
  unsigned int v12 = *(uint64_t (**)(WrdCPTable *))(*(void *)v4 + 8);
  return v12(v4);
}

void sub_238B1A794(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void WrdParser::parse(WrdParser *this, WrdFileShapeAddressTable *a2)
{
  FileShapeAddressFCLCBint Index = WrdFileInformationBlock::getFileShapeAddressFCLCBIndex(*((_DWORD *)a2 + 2));
  unint64_t started = WrdParser::startFCLCB(this, FileShapeAddressFCLCBIndex);
  int v6 = started;
  unint64_t v7 = HIDWORD(started);
  WrdBookmarkTable::clear(a2);
  if (v7 >= 4)
  {
    int v8 = (unsigned __int16)(((int)v7 - 4) / 0x1Eu);
    (*(void (**)(void, void, void))(**((void **)this + 16) + 16))(*((void *)this + 16), (v6 + 4 * v8 + 4), 0);
    if (v8)
    {
      int v9 = -v8;
      do
      {
        uint64_t v10 = (WrdFileShapeAddress *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 35) + 16))(*((void *)this + 35), 24);
        WrdParser::parse(this, v10);
        OcCustomProperties::appendProperty(a2, (OcCustomProperty *)v10);
      }
      while (!__CFADD__(v9++, 1));
    }
  }
}

void sub_238B1A8B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    WrdAnnotation::clone(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WrdFileInformationBlock::getFileShapeAddressFCLCBIndex(int a1)
{
  if (a1 == 2) {
    return 41;
  }
  else {
    return 40;
  }
}

void sub_238B1B068(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  MEMORY[0x23EC997B0](a11, 0x1000C4000313F17);
  if (a2 == 3)
  {
    uint64_t v16 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v16);
    __cxa_end_catch();
  }
  else
  {
    size_t v17 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      [v17 raise];
    }
    else {
      +[TCMessageException raise:TCUnknownProblemMessage];
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x238B1B024);
}

void sub_238B1B27C(void *exc_buf, int a2)
{
  if (a2 == 2)
  {
    [objc_begin_catch(exc_buf) raise];
    objc_end_catch();
    JUMPOUT(0x238B1B024);
  }
  JUMPOUT(0x238B1B0F0);
}

void sub_238B1B2D8()
{
}

void sub_238B1B6E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1B88C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1B940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1BA18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1BAD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1BBD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1C168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B1C2E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1C7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B1CAA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1CB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B1CD40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1CDD0(_Unwind_Exception *a1)
{
}

void sub_238B1CE68(_Unwind_Exception *a1)
{
}

void sub_238B1D47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B1D558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B1D634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B1D710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B1DB3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1DCBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1DE0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1DF5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1E0AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1E1FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1E34C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1E49C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1E5EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1E73C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1E88C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1E9DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1EB2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1EC7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1EDCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1EF1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1F0C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1F264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1F408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1F5BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1F770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1F914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1FAC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1FC18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1FD68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B1FEB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B20008(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B20158(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B202A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B203F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B20548(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B20698(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B207E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B20938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B20A88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B20BD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B20E68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B20FE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B21084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B21128(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B21200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B212D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WrdFontFamilyNameTable::~WrdFontFamilyNameTable((WrdFontFamilyNameTable *)&a9);

  _Unwind_Resume(a1);
}

void WrdFontFamilyNameTable::WrdFontFamilyNameTable(WrdFontFamilyNameTable *this)
{
  *(void *)this = &unk_26EBE6160;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
}

unint64_t WrdBinaryReader::read(WrdParser **this, WrdFontFamilyNameTable *a2)
{
  return WrdParser::parse(this[4], a2);
}

unint64_t WrdParser::parse(WrdParser *this, WrdFontFamilyNameTable *a2)
{
  WrdAnnotationDateTimeTable::clear(a2);
  unint64_t result = WrdParser::startFCLCB(this, 0xFu);
  unint64_t v5 = HIDWORD(result);
  if (HIDWORD(result) >= 4)
  {
    int v6 = result;
    unint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
    if (result)
    {
      int v7 = result;
      unsigned int v8 = v5 + v6;
      while ((*(unsigned int (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16)) != v8)
      {
        int v9 = (WrdFontFamilyName *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 35) + 16))(*((void *)this + 35), 26);
        WrdParser::parse(this, v9);
        WrdEmbeddedTrueTypeFontTable::append(a2, (WrdEmbeddedTrueTypeFont *)v9);
        unint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16));
        if (result > v8) {
          break;
        }
        if (!--v7) {
          return result;
        }
      }
      return (unint64_t)WrdAnnotationDateTimeTable::clear(a2);
    }
  }
  return result;
}

void sub_238B21544(_Unwind_Exception *exception_object)
{
  if (v1) {
    WrdAnnotation::clone(v1);
  }
  _Unwind_Resume(exception_object);
}

void WrdFontFamilyName::WrdFontFamilyName(WrdFontFamilyName *this)
{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBE6120;
  p_uint64_t var2 = &this->var2;
  CsString::CsString(&this->var1);
  CsString::CsString(p_var2);
  this->int var3 = 0;
  this->unsigned int var4 = 0;
  this->var5 = 0;
  *(char **)((char *)&this->var5 + 6) = 0;
}

void sub_238B215CC(_Unwind_Exception *a1)
{
  CsString::~CsString(v1);
  _Unwind_Resume(a1);
}

WrdFontFamilyName *WrdFontFamilyName::init(WrdFontFamilyName *this)
{
  uint64_t v1 = this;
  if (!this->var4)
  {
    this = (WrdFontFamilyName *)operator new[](0xAuLL);
    v1->unsigned int var4 = (char *)this;
    this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = 0;
    LOWORD(this->var1.var0) = 0;
  }
  if (!v1->var5)
  {
    this = (WrdFontFamilyName *)operator new[](0x18uLL);
    v1->var5 = (char *)this;
    this->var1.$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = 0;
    this->var1.unsigned int var1 = 0;
    this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = 0;
  }
  return this;
}

CsString *WrdParser::parse(WrdParser *this, WrdFontFamilyName *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
  unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
  a2->var8 = v5 & 3;
  a2->var7 = (v5 & 4) != 0;
  a2->var9 = (v5 >> 4) & 7;
  a2->var6 = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
  a2->int var3 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
  a2->var10 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
  if (WrdFontFamilyName::s_bPanoseSize)
  {
    int v6 = 0;
    do
    {
      char v7 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
      WrdFontFamilyName::setPanose(a2, v6++, v7);
    }
    while (WrdFontFamilyName::s_bPanoseSize > v6);
  }
  if (WrdFontFamilyName::s_bFontSignatureSize)
  {
    int v8 = 0;
    do
    {
      char v9 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
      WrdFontFamilyName::setFontSignature(a2, v8++, v9);
    }
    while (WrdFontFamilyName::s_bFontSignatureSize > v8);
  }
  unsigned int v10 = v4
      - (WrdFontFamilyName::s_bPanoseSize
       + WrdFontFamilyName::s_bFontSignatureSize)
      + 507;
  p_unsigned int var1 = &a2->var1;
  uint64_t v12 = (v10 >> 1);
  CsString::reserve(&a2->var1, (v10 >> 1));
  CsString::setCount(&a2->var1, v12);
  unsigned int var1 = a2->var1.var1;
  if (!var1)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 2001;
  }
  if (v12)
  {
    uint64_t v14 = v12;
    unsigned int v15 = a2->var1.var1;
    do
    {
      *v15++ = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
      --v14;
    }
    while (v14);
  }
  unsigned __int16 v16 = _ChWcslen(var1);
  unsigned int v17 = v16;
  if (v16 + 1 < v12)
  {
    p_uint64_t var2 = &a2->var2;
    unint64_t v19 = &var1[v16 + 1];
    CsString::append(p_var2, v19);
    unsigned int v20 = _ChWcslen(v19);
    CsString::setCount(p_var2, v20);
  }
  return CsString::setCount(p_var1, v17);
}

WrdFontFamilyName *WrdFontFamilyName::setPanose(WrdFontFamilyName *this, unsigned int a2, char a3)
{
  if (a2 <= 9)
  {
    unsigned int var4 = this->var4;
    if (var4) {
      var4[a2] = a3;
    }
  }
  return this;
}

WrdFontFamilyName *WrdFontFamilyName::setFontSignature(WrdFontFamilyName *this, unsigned int a2, char a3)
{
  if (a2 <= 0x17)
  {
    var5 = this->var5;
    if (var5) {
      var5[a2] = a3;
    }
  }
  return this;
}

void WrdEmbeddedTrueTypeFontTable::append(WrdEmbeddedTrueTypeFontTable *this, WrdEmbeddedTrueTypeFont *a2)
{
  unint64_t v6 = *((void *)this + 3);
  int v4 = (char *)this + 24;
  unint64_t v5 = v6;
  char v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *((void *)this + 1);
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v16 = 0;
    }
    unsigned int v17 = &v14[v10 & 0x7FFFFFFF8];
    int v18 = &v14[8 * v16];
    *(void *)unsigned int v17 = a2;
    int v8 = v17 + 8;
    unsigned int v20 = (char *)*((void *)this + 1);
    unint64_t v19 = (char *)*((void *)this + 2);
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      unint64_t v19 = (char *)*((void *)this + 1);
    }
    *((void *)this + 1) = v17;
    *((void *)this + 2) = v8;
    *((void *)this + 3) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *char v7 = a2;
    int v8 = v7 + 1;
  }
  *((void *)this + 2) = v8;
}

void sub_238B21AE0(void *a1, int a2)
{
  if (a2 == 3)
  {
    int v3 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v3);
    __cxa_end_catch();
  }
  else
  {
    int v4 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      [v4 raise];
    }
    else {
      +[TCMessageException raise:TCUnknownProblemMessage];
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x238B21AB0);
}

void sub_238B21B50(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (a2 == 2)
  {
    [objc_begin_catch(exc_buf) raise];
    objc_end_catch();
    JUMPOUT(0x238B21AB0);
  }

  _Unwind_Resume(exc_buf);
}

uint64_t WrdEmbeddedTTFRecordTable::getEmbeddedFontReference(WrdEmbeddedTTFRecordTable *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 1) + 8 * a2);
}

void sub_238B21D48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B21E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WrdFontFamilyNameTable::~WrdFontFamilyNameTable(WrdFontFamilyNameTable *this)
{
  *(void *)this = &unk_26EBE6160;
  WrdAnnotationDateTimeTable::clear(this);
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  WrdFontFamilyNameTable::~WrdFontFamilyNameTable(this);
  JUMPOUT(0x23EC997B0);
}

void WrdFontFamilyName::~WrdFontFamilyName(WrdFontFamilyName *this)
{
  WrdFontFamilyName::~WrdFontFamilyName(this);
  JUMPOUT(0x23EC997B0);
}

{
  char *var4;
  char *var5;

  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBE6120;
  unsigned int var4 = this->var4;
  if (var4) {
    MEMORY[0x23EC99790](var4, 0x1000C8077774924);
  }
  this->unsigned int var4 = 0;
  var5 = this->var5;
  if (var5) {
    MEMORY[0x23EC99790](var5, 0x1000C8077774924);
  }
  this->var5 = 0;
  CsString::~CsString(&this->var2);
  CsString::~CsString(&this->var1);
}

void sub_238B22368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WrdDOPTypography::~WrdDOPTypography((WrdDOPTypography *)va);

  _Unwind_Resume(a1);
}

void WrdDOPTypography::WrdDOPTypography(WrdDOPTypography *this)
{
  *(void *)this = &unk_26EBE4B00;
  *((void *)this + 1) = 0;
  CsString::CsString((CsString *)((char *)this + 16));
  CsString::CsString((CsString *)((char *)this + 40));
  *((_WORD *)this + 32) = 0;
  *((unsigned char *)this + 66) &= 0xF0u;
}

void sub_238B2243C(_Unwind_Exception *a1)
{
  CsString::~CsString(v1);
  _Unwind_Resume(a1);
}

void WrdDrawingObjectGrid::WrdDrawingObjectGrid(WrdDrawingObjectGrid *this)
{
  *(void *)this = &unk_26EBE5948;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((unsigned char *)this + 20) = *((unsigned char *)this + 20) & 0xFC | 1;
}

void WrdAutoSummaryInfo::WrdAutoSummaryInfo(WrdAutoSummaryInfo *this)
{
  *(void *)this = &unk_26EBE54D8;
  *((void *)this + 1) = 0;
  *(void *)((char *)this + 14) = 0;
  *((unsigned char *)this + 22) &= 0xF8u;
}

void WrdDateTime::WrdDateTime(WrdDateTime *this)
{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBE5888;
  *(void *)&this->unsigned int var1 = 0;
  *(void *)&this->int var3 = 0;
}

void WrdDocumentProperties::WrdDocumentProperties(WrdDocumentProperties *this, WrdDOPTypography *a2, WrdDrawingObjectGrid *a3, WrdAutoSummaryInfo *a4, WrdDateTime *a5, WrdDateTime *a6, WrdDateTime *a7)
{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBE5908;
  WrdDocumentProperties::simpleDefaults(this);
  this->uint64_t var2 = a2;
  this->int var3 = a3;
  this->unsigned int var4 = a4;
  this->var5 = a5;
  this->var6 = a6;
  this->var7 = a7;
}

double WrdDocumentProperties::simpleDefaults(WrdDocumentProperties *this)
{
  this->unsigned int var1 = 1;
  *(_OWORD *)&this->var8 = xmmword_238EEF040;
  *(_OWORD *)&this->var12 = xmmword_238EEF050;
  *(_OWORD *)&this->var16 = xmmword_238EEF060;
  *(void *)&this->var20 = 0x300000001;
  *(void *)&this->var22 = 0;
  *(_DWORD *)&this->var24 = 0;
  *(_OWORD *)&this->var26 = xmmword_238EEF070;
  unint64_t v1 = *(void *)((char *)this + 156) & 0xFC00000018000000 | 0x20000000000;
  *(void *)((char *)this + 148) = 0x3900189012;
  *(void *)((char *)this + 156) = v1;
  this->var175 = 0;
  this->var177 = 0;
  this->var178 = 0;
  double result = 0.0;
  *(_OWORD *)&this->var156 = 0u;
  *(_OWORD *)&this->var160 = 0u;
  *(_OWORD *)&this->var164 = 0u;
  *(_OWORD *)((char *)&this->var167 + 1) = 0u;
  return result;
}

uint64_t WrdBinaryReader::read(WrdParser **this, WrdDocumentProperties *a2)
{
  return WrdParser::parse(this[4], a2);
}

uint64_t WrdParser::parse(WrdParser *this, WrdDocumentProperties *a2)
{
  unint64_t started = WrdParser::startFCLCB(this, 0x1Fu);
  int v5 = started;
  unint64_t v6 = HIDWORD(started);
  WrdDocumentProperties::setDefaultBasedOnVersion((uint64_t)a2, *((_DWORD *)this + 38), *((unsigned char *)this + 186) >> 7);
  unsigned int v7 = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
  int v8 = (unint64_t *)((char *)a2 + 148);
  *(void *)((char *)a2 + 148) = *(void *)((char *)a2 + 148) & 0xFFFFFFFFFFFFFFF8 | v7 & 1 | v7 & 2 | v7 & 4;
  a2->var8 = (v7 >> 5) & 3;
  unsigned __int16 v9 = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
  a2->var9 = v9 & 3;
  a2->var33 = v9 >> 2;
  unsigned int v10 = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
  unint64_t v11 = *(void *)((char *)a2 + 156) & 0xFFFFFFFE1FFFFFFFLL | ((unint64_t)(v10 & 1) << 29) | ((unint64_t)((v10 >> 1) & 1) << 30) | ((unint64_t)((v10 >> 8) & 1) << 31) | ((unint64_t)((v10 >> 9) & 1) << 32);
  *(void *)((char *)a2 + 148) = *(void *)((char *)a2 + 148) & 0xFFFFFFFFFFFFFE07 | ((unsigned __int16)v10 >> 7) & 8 | ((unsigned __int16)v10 >> 7) & 0x10 | (unint64_t)(((unsigned __int16)v10 >> 7) & 0x1E0);
  *(void *)((char *)a2 + 156) = v11;
  unsigned int v12 = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
  uint64_t v13 = *(void *)((char *)a2 + 156);
  uint64_t v14 = (v12 >> 15) & 1;
  unint64_t v15 = *(void *)((char *)a2 + 148) & 0xFFFFFFFFFF8001FFLL | (v12 << 9) & 0x200 | (v12 << 9) & 0xC00 | (v12 << 9) & 0x7000 | (v12 << 8) & 0x8000 | ((unint64_t)((unsigned __int16)v12 >> 14) << 21) & 0xFFFFFFFFFFBFFFFFLL | ((unint64_t)((v12 >> 8) & 1) << 16) | ((unint64_t)((v12 >> 9) & 1) << 17) | ((unint64_t)((v12 >> 10) & 1) << 18) | ((unint64_t)((v12 >> 11) & 1) << 19) | ((unint64_t)((v12 >> 12) & 1) << 20);
  BOOL v16 = __CFADD__(v15, v14 << 22);
  unint64_t v17 = v15 + (v14 << 22);
  if (v16) {
    ++v13;
  }
  unint64_t *v8 = v17;
  *(void *)((char *)a2 + 156) = v13;
  if (*((unsigned __int16 *)this + 92) < 0x67u) {
    goto LABEL_8;
  }
  unsigned int v18 = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
  if (*((int *)this + 38) <= 7)
  {
    uint16x4_t v19 = (uint16x4_t)vdup_n_s16(v18);
    int8x8_t v20 = (int8x8_t)vshl_u16(v19, (uint16x4_t)0xFFF7FFFDFFFEFFFFLL);
    uint32x4_t v21 = vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vshl_u16(v19, (uint16x4_t)0xFFF9FFFAFFFBFFFCLL), (int8x8_t)0x1000100010001));
    uint64_t v22 = v21.u32[3];
    uint64_t v23 = v21.u32[2];
    uint64_t v24 = v21.u32[1];
    unint64_t v25 = (unint64_t)v21.u32[0] << 45;
    uint32x4_t v26 = vmovl_u16((uint16x4_t)vand_s8(v20, (int8x8_t)0x1000100010001));
    unint64_t v27 = *(void *)((char *)a2 + 156) | ((unint64_t)v26.u32[3] >> 14);
    unint64_t *v8 = v25 | (v24 << 46) | (v23 << 47) | (v22 << 48) | ((unint64_t)v26.u32[0] << 42) | ((unint64_t)v26.u32[1] << 43) | ((unint64_t)v26.u32[2] << 44) | ((unint64_t)v26.u32[3] << 50) | ((unint64_t)((v18 >> 8) & 1) << 49) | ((unint64_t)((v18 >> 10) & 1) << 51) | ((unint64_t)(v18 & 1) << 41) | *v8 & 0xFFE001FFFFFFFFFFLL | ((unint64_t)((v18 >> 11) & 1) << 52);
    *(void *)((char *)a2 + 156) = v27;
  }
  if (*((unsigned __int16 *)this + 92) < 0x6Au)
  {
LABEL_8:
    int v31 = 0;
  }
  else
  {
    a2->var30 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
    (*(void (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
    a2->var31 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
    a2->var32 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
    (*(void (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
    WrdBaseParser::parseStream(this, a2->var5, *((SsrwOOStream **)this + 16));
    WrdBaseParser::parseStream(this, a2->var6, *((SsrwOOStream **)this + 16));
    WrdBaseParser::parseStream(this, a2->var7, *((SsrwOOStream **)this + 16));
    a2->var169 = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
    a2->var156 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
    a2->var157 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
    a2->var158 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
    a2->var170 = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
    a2->var159 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
    unsigned __int16 v28 = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
    a2->var10 = v28 & 3;
    a2->unsigned int var1 = v28 >> 2;
    unsigned int v29 = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
    a2->var11 = v29 & 3;
    *(int8x8_t *)&a2->var12 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v29), (uint32x2_t)0xFFFFFFFAFFFFFFFELL), (int8x8_t)0xF0000000FLL);
    *(void *)((char *)a2 + 148) = *(void *)((char *)a2 + 148) & 0xFFFFFFFFF87FFFFFLL | ((unint64_t)((v29 >> 10) & 1) << 23) | ((unint64_t)((v29 >> 11) & 1) << 24) | ((unint64_t)((v29 >> 12) & 1) << 25) | v29 & 0x4000000;
    a2->var160 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
    a2->var161 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
    a2->var162 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
    a2->var171 = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
    a2->var163 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
    a2->var164 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
    a2->var23 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
    unsigned int v30 = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
    a2->var26 = (v30 >> 3) & 0x1FF;
    a2->var14 = v30 & 7;
    a2->var15 = (v30 >> 12) & 3;
    *(void *)((char *)a2 + 148) = *(void *)((char *)a2 + 148) & 0xFFFFFFFF7FFFFFFFLL | ((unint64_t)((v30 & 0x4000) != 0) << 31);
    a2->var17 = (v30 >> 15) & 1;
    int v31 = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
  }
  int v32 = *((_DWORD *)this + 38);
  if (v32 == 8 || v32 == -1)
  {
    if (v31)
    {
      *v8 |= 0x20000000000uLL;
      if ((v31 & 2) == 0)
      {
LABEL_13:
        if ((v31 & 4) == 0) {
          goto LABEL_14;
        }
        goto LABEL_111;
      }
    }
    else if ((v31 & 2) == 0)
    {
      goto LABEL_13;
    }
    *v8 |= 0x40000000000uLL;
    if ((v31 & 4) == 0)
    {
LABEL_14:
      if ((v31 & 8) == 0) {
        goto LABEL_15;
      }
      goto LABEL_112;
    }
LABEL_111:
    *v8 |= 0x80000000000uLL;
    if ((v31 & 8) == 0)
    {
LABEL_15:
      if ((v31 & 0x10) == 0) {
        goto LABEL_16;
      }
      goto LABEL_113;
    }
LABEL_112:
    *v8 |= 0x100000000000uLL;
    if ((v31 & 0x10) == 0)
    {
LABEL_16:
      if ((v31 & 0x20) == 0) {
        goto LABEL_17;
      }
      goto LABEL_114;
    }
LABEL_113:
    *v8 |= 0x200000000000uLL;
    if ((v31 & 0x20) == 0)
    {
LABEL_17:
      if ((v31 & 0x40) == 0) {
        goto LABEL_18;
      }
      goto LABEL_115;
    }
LABEL_114:
    *v8 |= 0x400000000000uLL;
    if ((v31 & 0x40) == 0)
    {
LABEL_18:
      if ((v31 & 0x80) == 0) {
        goto LABEL_19;
      }
      goto LABEL_116;
    }
LABEL_115:
    *v8 |= 0x800000000000uLL;
    if ((v31 & 0x80) == 0)
    {
LABEL_19:
      if ((v31 & 0x100) == 0) {
        goto LABEL_20;
      }
      goto LABEL_117;
    }
LABEL_116:
    *v8 |= 0x1000000000000uLL;
    if ((v31 & 0x100) == 0)
    {
LABEL_20:
      if ((v31 & 0x200) == 0) {
        goto LABEL_21;
      }
      goto LABEL_118;
    }
LABEL_117:
    *v8 |= 0x2000000000000uLL;
    if ((v31 & 0x200) == 0)
    {
LABEL_21:
      if ((v31 & 0x400) == 0) {
        goto LABEL_22;
      }
      goto LABEL_119;
    }
LABEL_118:
    *v8 |= 0x4000000000000uLL;
    if ((v31 & 0x400) == 0)
    {
LABEL_22:
      if ((v31 & 0x800) == 0) {
        goto LABEL_23;
      }
      goto LABEL_120;
    }
LABEL_119:
    *v8 |= 0x8000000000000uLL;
    if ((v31 & 0x800) == 0)
    {
LABEL_23:
      if ((v31 & 0x1000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_121;
    }
LABEL_120:
    *v8 |= 0x10000000000000uLL;
    if ((v31 & 0x1000) == 0)
    {
LABEL_24:
      if ((v31 & 0x2000) == 0) {
        goto LABEL_25;
      }
      goto LABEL_122;
    }
LABEL_121:
    *v8 |= 0x20000000000000uLL;
    if ((v31 & 0x2000) == 0)
    {
LABEL_25:
      if ((v31 & 0x4000) == 0) {
        goto LABEL_26;
      }
      goto LABEL_123;
    }
LABEL_122:
    *v8 |= 0x40000000000000uLL;
    if ((v31 & 0x4000) == 0)
    {
LABEL_26:
      if ((v31 & 0x8000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_124;
    }
LABEL_123:
    *v8 |= 0x80000000000000uLL;
    if ((v31 & 0x8000) == 0)
    {
LABEL_27:
      if ((v31 & 0x10000) == 0) {
        goto LABEL_28;
      }
      goto LABEL_125;
    }
LABEL_124:
    *v8 |= 0x100000000000000uLL;
    if ((v31 & 0x10000) == 0)
    {
LABEL_28:
      if ((v31 & 0x20000) == 0) {
        goto LABEL_29;
      }
      goto LABEL_126;
    }
LABEL_125:
    *v8 |= 0x200000000000000uLL;
    if ((v31 & 0x20000) == 0)
    {
LABEL_29:
      if ((v31 & 0x40000) == 0) {
        goto LABEL_30;
      }
      goto LABEL_127;
    }
LABEL_126:
    *v8 |= 0x400000000000000uLL;
    if ((v31 & 0x40000) == 0)
    {
LABEL_30:
      if ((v31 & 0x80000) == 0) {
        goto LABEL_31;
      }
      goto LABEL_128;
    }
LABEL_127:
    *v8 |= 0x800000000000000uLL;
    if ((v31 & 0x80000) == 0)
    {
LABEL_31:
      if ((v31 & 0x100000) == 0) {
        goto LABEL_32;
      }
      goto LABEL_129;
    }
LABEL_128:
    *v8 |= 0x1000000000000000uLL;
    if ((v31 & 0x100000) == 0)
    {
LABEL_32:
      if ((v31 & 0x200000) == 0) {
        goto LABEL_33;
      }
      goto LABEL_130;
    }
LABEL_129:
    *v8 |= 0x2000000000000000uLL;
    if ((v31 & 0x200000) == 0)
    {
LABEL_33:
      if ((v31 & 0x400000) == 0) {
        goto LABEL_34;
      }
      goto LABEL_131;
    }
LABEL_130:
    *v8 |= 0x4000000000000000uLL;
    if ((v31 & 0x400000) == 0)
    {
LABEL_34:
      if ((v31 & 0x800000) == 0) {
        goto LABEL_35;
      }
      goto LABEL_132;
    }
LABEL_131:
    *v8 |= 0x8000000000000000;
    if ((v31 & 0x800000) == 0)
    {
LABEL_35:
      if ((v31 & 0x1000000) == 0) {
        goto LABEL_36;
      }
      goto LABEL_133;
    }
LABEL_132:
    *(void *)((char *)a2 + 156) |= 1uLL;
    if ((v31 & 0x1000000) == 0)
    {
LABEL_36:
      if ((v31 & 0x2000000) == 0) {
        goto LABEL_37;
      }
      goto LABEL_134;
    }
LABEL_133:
    *(void *)((char *)a2 + 156) |= 2uLL;
    if ((v31 & 0x2000000) == 0)
    {
LABEL_37:
      if ((v31 & 0x4000000) == 0) {
        goto LABEL_38;
      }
      goto LABEL_135;
    }
LABEL_134:
    *(void *)((char *)a2 + 156) |= 4uLL;
    if ((v31 & 0x4000000) == 0)
    {
LABEL_38:
      if ((v31 & 0x8000000) == 0) {
        goto LABEL_39;
      }
      goto LABEL_136;
    }
LABEL_135:
    *(void *)((char *)a2 + 156) |= 8uLL;
    if ((v31 & 0x8000000) == 0)
    {
LABEL_39:
      if ((v31 & 0x10000000) == 0) {
        goto LABEL_40;
      }
      goto LABEL_137;
    }
LABEL_136:
    *(void *)((char *)a2 + 156) |= 0x10uLL;
    if ((v31 & 0x10000000) == 0)
    {
LABEL_40:
      if ((v31 & 0x20000000) == 0) {
        goto LABEL_41;
      }
      goto LABEL_138;
    }
LABEL_137:
    *(void *)((char *)a2 + 156) |= 0x20uLL;
    if ((v31 & 0x20000000) == 0)
    {
LABEL_41:
      if ((v31 & 0x40000000) == 0) {
        goto LABEL_42;
      }
      goto LABEL_139;
    }
LABEL_138:
    *(void *)((char *)a2 + 156) |= 0x40uLL;
    if ((v31 & 0x40000000) == 0)
    {
LABEL_42:
      if ((v31 & 0x80000000) == 0) {
        goto LABEL_43;
      }
LABEL_140:
      *(void *)((char *)a2 + 156) |= 0x100uLL;
      goto LABEL_43;
    }
LABEL_139:
    *(void *)((char *)a2 + 156) |= 0x80uLL;
    if ((v31 & 0x80000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_140;
  }
LABEL_43:
  if ((*(unsigned int (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16)) - v5 < v6)
  {
    a2->var16 = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
    WrdParser::parse(this, a2->var2);
    WrdParser::parse(this, a2->var3);
    unint64_t v33 = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
    a2->var18 = (v33 >> 1) & 0xF;
    *(void *)((char *)a2 + 156) = ((((v33 >> 14) & 1) << 25) | ((unint64_t)((v33 >> 13) & 1) << 24)) & 0xFFFFFFFFFBFFFFFFLL | *(void *)((char *)a2 + 156) & 0xFFFFFFF9F80FFFFFLL | ((unint64_t)((v33 >> 5) & 1) << 33) | ((unint64_t)((v33 >> 6) & 1) << 34) | ((unint64_t)((v33 >> 7) & 1) << 20) & 0xFFFFFFFFFBFFFFFFLL | ((unint64_t)((v33 >> 9) & 1) << 21) & 0xFFFFFFFFFBFFFFFFLL | ((unint64_t)((v33 >> 11) & 1) << 22) & 0xFFFFFFFFFBFFFFFFLL | ((unint64_t)((v33 >> 12) & 1) << 23) & 0xFFFFFFFFFBFFFFFFLL | ((((unint64_t)((unsigned __int16)v33 & 0x8000) >> 15) & 1) << 26);
    unsigned int v34 = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
    *(void *)((char *)a2 + 156) = *(void *)((char *)a2 + 156) & 0xFFFFFFFFE7FFFFFFLL | ((unint64_t)(v34 & 1) << 27) | ((unint64_t)((v34 >> 1) & 1) << 28);
    WrdParser::parse(this, a2->var4);
    a2->var165 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
    a2->var166 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
    a2->var22 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
    unsigned int v35 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
    *(void *)((char *)a2 + 156) = *(void *)((char *)a2 + 156) & 0xFFFFFFE7FFFFFFFFLL | ((unint64_t)(v35 & 1) << 35) | ((unint64_t)((v35 >> 1) & 1) << 36);
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 30, 1);
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 8, 1);
    a2->var167 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
    a2->var168 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 4, 1);
    a2->var12 = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
    a2->var13 = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
    a2->var24 = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
    a2->var25 = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
  }
  if ((*(unsigned int (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16)) - v5 < v6)
  {
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 2, 1);
    a2->var27 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
    unsigned int v36 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
    *(void *)((char *)a2 + 148) = ((unint64_t)((v36 >> 9) & 1) << 32) | ((unint64_t)((v36 >> 10) & 1) << 33) | ((unint64_t)((v36 >> 11) & 1) << 34) | *(void *)((char *)a2 + 148) & 0xFFFFFFF887FFFFFFLL | ((unint64_t)(v36 & 1) << 27) | ((unint64_t)((v36 >> 1) & 1) << 28) | ((unint64_t)((v36 >> 2) & 1) << 29) | ((unint64_t)((v36 >> 3) & 1) << 30);
    a2->var174 = v36 >> 12;
    uint64_t v37 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
    unint64_t v38 = *(void *)((char *)a2 + 148) & 0xFFFFFE07FFFFFFFFLL | ((unint64_t)(v37 & 1) << 35) | ((unint64_t)((v37 >> 1) & 1) << 36);
    a2->var29 = (v37 >> 2) & 0x3FF;
    *(void *)((char *)a2 + 148) = v38 | ((unint64_t)((v37 >> 12) & 1) << 37) | ((unint64_t)((v37 >> 13) & 1) << 38) | (v37 << 25) & 0x8000000000 | ((unint64_t)(v37 >> 15) << 40);
    int v39 = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
    if (v39)
    {
      *v8 |= 0x20000000000uLL;
      if ((v39 & 2) == 0)
      {
LABEL_48:
        if ((v39 & 4) == 0) {
          goto LABEL_49;
        }
        goto LABEL_143;
      }
    }
    else if ((v39 & 2) == 0)
    {
      goto LABEL_48;
    }
    *v8 |= 0x40000000000uLL;
    if ((v39 & 4) == 0)
    {
LABEL_49:
      if ((v39 & 8) == 0) {
        goto LABEL_50;
      }
      goto LABEL_144;
    }
LABEL_143:
    *v8 |= 0x80000000000uLL;
    if ((v39 & 8) == 0)
    {
LABEL_50:
      if ((v39 & 0x10) == 0) {
        goto LABEL_51;
      }
      goto LABEL_145;
    }
LABEL_144:
    *v8 |= 0x100000000000uLL;
    if ((v39 & 0x10) == 0)
    {
LABEL_51:
      if ((v39 & 0x20) == 0) {
        goto LABEL_52;
      }
      goto LABEL_146;
    }
LABEL_145:
    *v8 |= 0x200000000000uLL;
    if ((v39 & 0x20) == 0)
    {
LABEL_52:
      if ((v39 & 0x40) == 0) {
        goto LABEL_53;
      }
      goto LABEL_147;
    }
LABEL_146:
    *v8 |= 0x400000000000uLL;
    if ((v39 & 0x40) == 0)
    {
LABEL_53:
      if ((v39 & 0x80) == 0) {
        goto LABEL_54;
      }
      goto LABEL_148;
    }
LABEL_147:
    *v8 |= 0x800000000000uLL;
    if ((v39 & 0x80) == 0)
    {
LABEL_54:
      if ((v39 & 0x100) == 0) {
        goto LABEL_55;
      }
      goto LABEL_149;
    }
LABEL_148:
    *v8 |= 0x1000000000000uLL;
    if ((v39 & 0x100) == 0)
    {
LABEL_55:
      if ((v39 & 0x200) == 0) {
        goto LABEL_56;
      }
      goto LABEL_150;
    }
LABEL_149:
    *v8 |= 0x2000000000000uLL;
    if ((v39 & 0x200) == 0)
    {
LABEL_56:
      if ((v39 & 0x400) == 0) {
        goto LABEL_57;
      }
      goto LABEL_151;
    }
LABEL_150:
    *v8 |= 0x4000000000000uLL;
    if ((v39 & 0x400) == 0)
    {
LABEL_57:
      if ((v39 & 0x800) == 0) {
        goto LABEL_58;
      }
      goto LABEL_152;
    }
LABEL_151:
    *v8 |= 0x8000000000000uLL;
    if ((v39 & 0x800) == 0)
    {
LABEL_58:
      if ((v39 & 0x1000) != 0) {
        goto LABEL_59;
      }
      goto LABEL_153;
    }
LABEL_152:
    *v8 |= 0x10000000000000uLL;
    if ((v39 & 0x1000) != 0)
    {
LABEL_59:
      if ((v39 & 0x2000) == 0) {
        goto LABEL_60;
      }
      goto LABEL_154;
    }
LABEL_153:
    *v8 &= ~0x20000000000000uLL;
    if ((v39 & 0x2000) == 0)
    {
LABEL_60:
      if ((v39 & 0x4000) == 0) {
        goto LABEL_61;
      }
      goto LABEL_155;
    }
LABEL_154:
    *v8 |= 0x40000000000000uLL;
    if ((v39 & 0x4000) == 0)
    {
LABEL_61:
      if ((v39 & 0x8000) == 0) {
        goto LABEL_62;
      }
      goto LABEL_156;
    }
LABEL_155:
    *v8 |= 0x80000000000000uLL;
    if ((v39 & 0x8000) == 0)
    {
LABEL_62:
      if ((v39 & 0x10000) == 0) {
        goto LABEL_63;
      }
      goto LABEL_157;
    }
LABEL_156:
    *v8 |= 0x100000000000000uLL;
    if ((v39 & 0x10000) == 0)
    {
LABEL_63:
      if ((v39 & 0x20000) == 0) {
        goto LABEL_64;
      }
      goto LABEL_158;
    }
LABEL_157:
    *v8 |= 0x200000000000000uLL;
    if ((v39 & 0x20000) == 0)
    {
LABEL_64:
      if ((v39 & 0x40000) == 0) {
        goto LABEL_65;
      }
      goto LABEL_159;
    }
LABEL_158:
    *v8 |= 0x400000000000000uLL;
    if ((v39 & 0x40000) == 0)
    {
LABEL_65:
      if ((v39 & 0x80000) == 0) {
        goto LABEL_66;
      }
      goto LABEL_160;
    }
LABEL_159:
    *v8 |= 0x800000000000000uLL;
    if ((v39 & 0x80000) == 0)
    {
LABEL_66:
      if ((v39 & 0x100000) == 0) {
        goto LABEL_67;
      }
      goto LABEL_161;
    }
LABEL_160:
    *v8 |= 0x1000000000000000uLL;
    if ((v39 & 0x100000) == 0)
    {
LABEL_67:
      if ((v39 & 0x200000) == 0) {
        goto LABEL_68;
      }
      goto LABEL_162;
    }
LABEL_161:
    *v8 |= 0x2000000000000000uLL;
    if ((v39 & 0x200000) == 0)
    {
LABEL_68:
      if ((v39 & 0x400000) == 0) {
        goto LABEL_69;
      }
      goto LABEL_163;
    }
LABEL_162:
    *v8 |= 0x4000000000000000uLL;
    if ((v39 & 0x400000) == 0)
    {
LABEL_69:
      if ((v39 & 0x800000) == 0) {
        goto LABEL_70;
      }
      goto LABEL_164;
    }
LABEL_163:
    *v8 |= 0x8000000000000000;
    if ((v39 & 0x800000) == 0)
    {
LABEL_70:
      if ((v39 & 0x1000000) == 0) {
        goto LABEL_71;
      }
      goto LABEL_165;
    }
LABEL_164:
    *(void *)((char *)a2 + 156) |= 1uLL;
    if ((v39 & 0x1000000) == 0)
    {
LABEL_71:
      if ((v39 & 0x2000000) == 0) {
        goto LABEL_72;
      }
      goto LABEL_166;
    }
LABEL_165:
    *(void *)((char *)a2 + 156) |= 2uLL;
    if ((v39 & 0x2000000) == 0)
    {
LABEL_72:
      if ((v39 & 0x4000000) == 0) {
        goto LABEL_73;
      }
      goto LABEL_167;
    }
LABEL_166:
    *(void *)((char *)a2 + 156) |= 4uLL;
    if ((v39 & 0x4000000) == 0)
    {
LABEL_73:
      if ((v39 & 0x8000000) == 0) {
        goto LABEL_74;
      }
      goto LABEL_168;
    }
LABEL_167:
    *(void *)((char *)a2 + 156) |= 8uLL;
    if ((v39 & 0x8000000) == 0)
    {
LABEL_74:
      if ((v39 & 0x10000000) == 0) {
        goto LABEL_75;
      }
      goto LABEL_169;
    }
LABEL_168:
    *(void *)((char *)a2 + 156) |= 0x10uLL;
    if ((v39 & 0x10000000) == 0)
    {
LABEL_75:
      if ((v39 & 0x20000000) == 0) {
        goto LABEL_76;
      }
      goto LABEL_170;
    }
LABEL_169:
    *(void *)((char *)a2 + 156) |= 0x20uLL;
    if ((v39 & 0x20000000) == 0)
    {
LABEL_76:
      if ((v39 & 0x40000000) == 0) {
        goto LABEL_77;
      }
      goto LABEL_171;
    }
LABEL_170:
    *(void *)((char *)a2 + 156) |= 0x40uLL;
    if ((v39 & 0x40000000) == 0)
    {
LABEL_77:
      if ((v39 & 0x80000000) == 0) {
        goto LABEL_78;
      }
LABEL_172:
      *(void *)((char *)a2 + 156) |= 0x100uLL;
LABEL_78:
      __int16 v40 = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
      if (v40)
      {
        *(void *)((char *)a2 + 156) |= 0x200uLL;
        if ((v40 & 2) == 0)
        {
LABEL_80:
          if ((v40 & 4) == 0) {
            goto LABEL_81;
          }
          goto LABEL_175;
        }
      }
      else if ((v40 & 2) == 0)
      {
        goto LABEL_80;
      }
      *(void *)((char *)a2 + 156) |= 0x400uLL;
      if ((v40 & 4) == 0)
      {
LABEL_81:
        if ((v40 & 8) != 0) {
          goto LABEL_82;
        }
        goto LABEL_176;
      }
LABEL_175:
      *(void *)((char *)a2 + 156) |= 0x800uLL;
      if ((v40 & 8) != 0)
      {
LABEL_82:
        if ((v40 & 0x10) == 0) {
          goto LABEL_83;
        }
        goto LABEL_177;
      }
LABEL_176:
      *(void *)((char *)a2 + 156) &= ~0x1000uLL;
      if ((v40 & 0x10) == 0)
      {
LABEL_83:
        if ((v40 & 0x20) == 0) {
          goto LABEL_84;
        }
        goto LABEL_178;
      }
LABEL_177:
      *(void *)((char *)a2 + 156) |= 0x2000uLL;
      if ((v40 & 0x20) == 0)
      {
LABEL_84:
        if ((v40 & 0x40) == 0) {
          goto LABEL_85;
        }
        goto LABEL_179;
      }
LABEL_178:
      *(void *)((char *)a2 + 156) |= 0x4000uLL;
      if ((v40 & 0x40) == 0)
      {
LABEL_85:
        if ((v40 & 0x80) == 0) {
          goto LABEL_86;
        }
        goto LABEL_180;
      }
LABEL_179:
      *(void *)((char *)a2 + 156) |= 0x8000uLL;
      if ((v40 & 0x80) == 0)
      {
LABEL_86:
        if ((v40 & 0x100) == 0) {
          goto LABEL_87;
        }
        goto LABEL_181;
      }
LABEL_180:
      *(void *)((char *)a2 + 156) |= 0x10000uLL;
      if ((v40 & 0x100) == 0)
      {
LABEL_87:
        if ((v40 & 0x200) == 0) {
          goto LABEL_88;
        }
        goto LABEL_182;
      }
LABEL_181:
      *(void *)((char *)a2 + 156) |= 0x20000uLL;
      if ((v40 & 0x200) == 0)
      {
LABEL_88:
        if ((v40 & 0x400) == 0) {
          goto LABEL_89;
        }
        goto LABEL_183;
      }
LABEL_182:
      *(void *)((char *)a2 + 156) |= 0x40000uLL;
      if ((v40 & 0x400) == 0)
      {
LABEL_89:
        if ((v40 & 0x800) == 0) {
          goto LABEL_90;
        }
        goto LABEL_184;
      }
LABEL_183:
      *(void *)((char *)a2 + 156) |= 0x80000uLL;
      if ((v40 & 0x800) == 0)
      {
LABEL_90:
        if ((v40 & 0x1000) == 0) {
          goto LABEL_91;
        }
        goto LABEL_185;
      }
LABEL_184:
      *(void *)((char *)a2 + 156) |= 0x1000000000000uLL;
      if ((v40 & 0x1000) == 0)
      {
LABEL_91:
        if ((v40 & 0x2000) == 0) {
          goto LABEL_92;
        }
        goto LABEL_186;
      }
LABEL_185:
      *(void *)((char *)a2 + 156) |= 0x4000000000000uLL;
      if ((v40 & 0x2000) == 0)
      {
LABEL_92:
        if ((v40 & 0x4000) == 0) {
          goto LABEL_93;
        }
        goto LABEL_187;
      }
LABEL_186:
      *(void *)((char *)a2 + 156) |= 0x8000000000000uLL;
      if ((v40 & 0x4000) == 0)
      {
LABEL_93:
        if ((v40 & 0x8000) == 0)
        {
LABEL_95:
          (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 24, 1);
          unsigned int v41 = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
          a2->var28 = v41;
          *(void *)((char *)a2 + 156) = *(void *)((char *)a2 + 156) & 0xFFBFBFFFFFFFFFFFLL | ((unint64_t)(HIWORD(v41) & 1) << 46) | ((unint64_t)((v41 >> 23) & 1) << 54);
          goto LABEL_96;
        }
LABEL_94:
        *(void *)((char *)a2 + 156) |= 0x800000000000uLL;
        goto LABEL_95;
      }
LABEL_187:
      *(void *)((char *)a2 + 156) |= 0x2000000000000uLL;
      if ((v40 & 0x8000) == 0) {
        goto LABEL_95;
      }
      goto LABEL_94;
    }
LABEL_171:
    *(void *)((char *)a2 + 156) |= 0x80uLL;
    if ((v39 & 0x80000000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_172;
  }
LABEL_96:
  if ((*(unsigned int (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16)) - v5 < v6)
  {
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 4, 1);
    unint64_t v42 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
    *(void *)((char *)a2 + 156) = *(void *)((char *)a2 + 156) & 0xFFCFFFFFFFFFFFFFLL | (((v42 >> 6) & 1) << 52) | ((unint64_t)(v42 >> 7) << 53);
    unint64_t v43 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
    *(void *)((char *)a2 + 156) = *(void *)((char *)a2 + 156) & 0xFFFFFE1FFFFFFFFFLL | ((unint64_t)((v43 >> 4) & 1) << 37) & 0xFFFFFF7FFFFFFFFFLL | ((unint64_t)((v43 >> 5) & 1) << 38) & 0xFFFFFF7FFFFFFFFFLL | (((v43 >> 6) & 1) << 39) | ((unint64_t)(v43 >> 7) << 40);
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 4, 1);
    a2->var20 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
    unsigned int v44 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
    *(void *)((char *)a2 + 156) = *(void *)((char *)a2 + 156) & 0xFFFFC1FFFFFFFFFFLL | ((unint64_t)(v44 & 1) << 43) | ((unint64_t)((v44 >> 1) & 1) << 44) | ((unint64_t)((v44 >> 2) & 1) << 45) | ((unint64_t)((v44 >> 4) & 1) << 42) | ((unint64_t)((v44 >> 5) & 1) << 41);
    a2->var19 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 36, 1);
  }
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16));
  if ((int)result - v5 < v6)
  {
    unsigned int v46 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
    *(void *)((char *)a2 + 156) = *(void *)((char *)a2 + 156) & 0xFE7FFFFFFFFFFFFFLL | ((unint64_t)((v46 >> 1) & 1) << 55) | ((unint64_t)((v46 >> 2) & 1) << 56);
    (*(void (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
    (*(void (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
    (*(void (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
    *(void *)((char *)a2 + 156) = *(void *)((char *)a2 + 156) & 0xFDFFFFFFFFFFFFFFLL | ((unint64_t)((result & 8) != 0) << 57);
    a2->var21 = result >> 4;
  }
  if (v6 <= 0x220) {
    *(void *)((char *)a2 + 156) |= (*v8 << 18) & 0x2000000000 | 0x3DC000000000;
  }
  if (*((unsigned __int16 *)this + 116) >= 0xB5u)
  {
    uint64_t result = (unint64_t)WrdParser::startFCLCB(this, 0xB5u) >> 32;
    if (result)
    {
      unsigned int v50 = result;
      double v47 = (char *)operator new[](result);
      (*(void (**)(void, char *, unsigned int *))(**((void **)this + 16) + 56))(*((void *)this + 16), v47, &v50);
      uint64_t result = (uint64_t)WrdDocumentProperties::takeThemeData(a2, v47, v50);
    }
    if (*((unsigned __int16 *)this + 116) >= 0xB6u)
    {
      uint64_t result = (unint64_t)WrdParser::startFCLCB(this, 0xB6u) >> 32;
      if (result)
      {
        unsigned int v49 = result;
        uint64_t v48 = (char *)operator new[](result);
        (*(void (**)(void, char *, unsigned int *))(**((void **)this + 16) + 56))(*((void *)this + 16), v48, &v49);
        return (uint64_t)WrdDocumentProperties::takeColorSchemeMapXmlStream(a2, v48, v49);
      }
    }
  }
  return result;
}

uint64_t WrdDocumentProperties::setDefaultBasedOnVersion(uint64_t result, int a2, char a3)
{
  if (a2 > 9)
  {
    if ((a2 - 10) >= 2) {
      return result;
    }
    goto LABEL_7;
  }
  if (a2 == -1)
  {
LABEL_7:
    uint64_t v3 = *(void *)(result + 148);
    uint64_t v4 = *(void *)(result + 156) | 0x1000;
LABEL_8:
    *(void *)(result + 156) = v4;
    if (a3) {
      return result;
    }
    uint64_t v5 = v3 | 0x20000000000000;
    goto LABEL_12;
  }
  if (a2 != 8)
  {
    if (a2 != 9) {
      return result;
    }
    uint64_t v3 = *(void *)(result + 148);
    uint64_t v4 = *(void *)(result + 156) | 0x7800000081000;
    goto LABEL_8;
  }
  uint64_t v6 = *(void *)(result + 148);
  uint64_t v4 = *(void *)(result + 156) | 0x78000000FBE00;
  *(void *)(result + 156) = v4;
  if (a3) {
    return result;
  }
  uint64_t v5 = v6 | 0x21E0000000000000;
LABEL_12:
  *(void *)(result + 148) = v5;
  *(void *)(result + 156) = v4;
  return result;
}

uint64_t WrdBaseParser::parseStream(WrdBaseParser *this, WrdDateTime *a2, SsrwOOStream *a3)
{
  unsigned int v5 = (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 9))(a3);
  a2->uint64_t var2 = v5 & 0x3F;
  a2->int var3 = (v5 >> 6) & 0x1F;
  a2->unsigned int var4 = (unsigned __int16)v5 >> 11;
  uint64_t result = (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 9))(a3);
  int v7 = (unsigned __int16)result >> 13;
  a2->unsigned int var1 = v7;
  a2->var5 = result & 0xF;
  a2->var6 = (result >> 4) & 0x1FF;
  if (a2->var2 > 0x3Bu
    || a2->var3 > 0x17u
    || a2->var4 > 0x1Fu
    || ((result & 0xFu) <= 0xC ? (BOOL v8 = v7 == 7) : (BOOL v8 = 1), v8))
  {
    *(void *)&a2->int var3 = 0;
    *(void *)&a2->unsigned int var1 = 0;
  }
  return result;
}

uint64_t WrdParser::parse(WrdParser *this, WrdDOPTypography *a2)
{
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
  char v5 = *((unsigned char *)a2 + 66) & 0xF0 | v4 & 1;
  *((int8x8_t *)a2 + 1) = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32((unsigned __int16)v4), (uint32x2_t)0xFFFFFFFDFFFFFFFFLL), (int8x8_t)0x300000003);
  *((_WORD *)a2 + 32) = ((unsigned __int16)v4 >> 7) & 7;
  *((unsigned char *)a2 + 66) = (v4 >> 4) & 6 | v5 | ((unsigned __int16)v4 >> 7) & 8;
  unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
  if ((v6 & 0x80000000) == 0)
  {
    int v8 = result;
    if ((result & 0x80000000) == 0)
    {
      CsString::reserve((CsString *)((char *)a2 + 16), v6);
      CsString::setCount((CsString *)((char *)a2 + 16), v6);
      CsString::reserve((CsString *)((char *)a2 + 40), v8);
      CsString::setCount((CsString *)((char *)a2 + 40), v8);
      unsigned __int16 v9 = (_WORD *)*((void *)a2 + 3);
      if (!v9) {
        goto LABEL_15;
      }
      if (v6)
      {
        uint64_t v10 = (unsigned __int16)v6;
        do
        {
          *v9++ = (*(uint64_t (**)(void))(**((void **)this + 16) + 128))(*((void *)this + 16));
          --v10;
        }
        while (v10);
      }
      (*(void (**)(void, void, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 2 * (WrdDOPTypography::s_bMaximumNumberOfCharactersThatShouldNeverAppearAtFront - v6), 1);
      unint64_t v11 = (_WORD *)*((void *)a2 + 6);
      if (!v11)
      {
LABEL_15:
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = 2001;
      }
      if (v8 >= 1)
      {
        uint64_t v12 = (unsigned __int16)v8;
        do
        {
          *v11++ = (*(uint64_t (**)(void))(**((void **)this + 16) + 128))(*((void *)this + 16));
          --v12;
        }
        while (v12);
      }
      uint64_t v13 = *(uint64_t (**)(void))(**((void **)this + 16) + 16);
      return v13();
    }
  }
  return result;
}

uint64_t WrdParser::parse(WrdParser *this, WrdDrawingObjectGrid *a2)
{
  *((_WORD *)a2 + 4) = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
  *((_WORD *)a2 + 5) = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
  *((_WORD *)a2 + 6) = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
  *((_WORD *)a2 + 7) = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
  *((_WORD *)a2 + 8) = result & 0x7F;
  unsigned int v5 = *((unsigned char *)a2 + 20) & 0xFC | (result >> 7) & 1;
  *((_WORD *)a2 + 9) = (result >> 8) & 0x7F;
  *((unsigned char *)a2 + 20) = v5 | (result >> 14) & 2;
  return result;
}

uint64_t WrdParser::parse(WrdParser *this, WrdAutoSummaryInfo *a2)
{
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
  char v5 = *((unsigned char *)a2 + 22) & 0xF8 | v4 & 3;
  *((_DWORD *)a2 + 2) = (v4 >> 2) & 3;
  *((unsigned char *)a2 + 22) = v5 | (v4 >> 2) & 4;
  *((_WORD *)a2 + 10) = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
  *((_DWORD *)a2 + 3) = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
  *((_DWORD *)a2 + 4) = result;
  return result;
}

void WrdDOPTypography::WrdDOPTypography(WrdDOPTypography *this, const WrdDOPTypography *a2)
{
  *(void *)this = &unk_26EBE4B00;
  unsigned int v4 = (CsString *)((char *)this + 40);
  CsString::CsString((CsString *)((char *)this + 16));
  CsString::CsString(v4);
  WrdDOPTypography::operator=((uint64_t)this, (uint64_t)a2);
}

void sub_238B2473C(_Unwind_Exception *a1)
{
  CsString::~CsString(v2);
  CsString::~CsString(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdDOPTypography::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  int v4 = *(unsigned char *)(a1 + 66) & 0xFE | *(unsigned char *)(a2 + 66) & 1;
  *(unsigned char *)(a1 + 66) = v4;
  unsigned int v5 = v4 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(a2 + 66) >> 1) & 1));
  *(unsigned char *)(a1 + 66) = v5;
  unsigned int v6 = v5 & 0xFFFFFFFB | (4 * ((*(unsigned __int8 *)(a2 + 66) >> 2) & 1));
  *(unsigned char *)(a1 + 66) = v6;
  *(unsigned char *)(a1 + 66) = v6 & 0xF7 | *(unsigned char *)(a2 + 66) & 8;
  int v7 = (const CsString *)(a2 + 16);
  int v8 = (CsString *)(a1 + 16);
  *(_DWORD *)(a1 + 32) = 0;
  bzero(*(void **)(a1 + 24), 2 * *(unsigned int *)(a1 + 36));
  CsString::append(v8, v7);
  *(_DWORD *)(a1 + 56) = 0;
  bzero(*(void **)(a1 + 48), 2 * *(unsigned int *)(a1 + 60));
  CsString::append((CsString *)(a1 + 40), (const CsString *)(a2 + 40));
  return a1;
}

void WrdDocumentProperties::~WrdDocumentProperties(WrdDocumentProperties *this)
{
  WrdDocumentProperties::~WrdDocumentProperties(this);
  JUMPOUT(0x23EC997B0);
}

{
  WrdDOPTypography *var2;
  WrdDrawingObjectGrid *var3;
  WrdAutoSummaryInfo *var4;
  WrdDateTime *var5;
  WrdDateTime *var6;
  WrdDateTime *var7;
  char *var175;
  char *var177;

  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBE5908;
  uint64_t var2 = this->var2;
  if (var2) {
    (*(void (**)(WrdDOPTypography *))(*(void *)var2 + 8))(var2);
  }
  this->uint64_t var2 = 0;
  int var3 = this->var3;
  if (var3) {
    (*(void (**)(WrdDrawingObjectGrid *))(*(void *)var3 + 8))(var3);
  }
  this->int var3 = 0;
  unsigned int var4 = this->var4;
  if (var4) {
    (*(void (**)(WrdAutoSummaryInfo *))(*(void *)var4 + 8))(var4);
  }
  this->unsigned int var4 = 0;
  var5 = this->var5;
  if (var5) {
    (*((void (**)(WrdDateTime *))var5->var0 + 1))(var5);
  }
  this->var5 = 0;
  var6 = this->var6;
  if (var6) {
    (*((void (**)(WrdDateTime *))var6->var0 + 1))(var6);
  }
  this->var6 = 0;
  var7 = this->var7;
  if (var7) {
    (*((void (**)(WrdDateTime *))var7->var0 + 1))(var7);
  }
  this->var7 = 0;
  var175 = this->var175;
  if (var175) {
    MEMORY[0x23EC99790](var175, 0x1000C8077774924);
  }
  this->var175 = 0;
  var177 = this->var177;
  if (var177) {
    MEMORY[0x23EC99790](var177, 0x1000C8077774924);
  }
  this->var177 = 0;
}

void WrdDOPTypography::~WrdDOPTypography(WrdDOPTypography *this)
{
  *(void *)this = &unk_26EBE4B00;
  unint64_t v1 = (CsString *)((char *)this + 16);
  CsString::~CsString((CsString *)((char *)this + 40));
  CsString::~CsString(v1);
  JUMPOUT(0x23EC997B0);
}

{
  CsString *v1;

  *(void *)this = &unk_26EBE4B00;
  unint64_t v1 = (CsString *)((char *)this + 16);
  CsString::~CsString((CsString *)((char *)this + 40));
  CsString::~CsString(v1);
}

void WrdDrawingObjectGrid::~WrdDrawingObjectGrid(WrdDrawingObjectGrid *this)
{
}

void WrdAutoSummaryInfo::~WrdAutoSummaryInfo(WrdAutoSummaryInfo *this)
{
}

void WrdDateTime::~WrdDateTime(WrdDateTime *this)
{
}

uint64_t WrdBinaryReader::read(uint64_t result, _DWORD *a2)
{
  uint64_t v2 = *(void *)(result + 32);
  int v3 = *(_DWORD *)(v2 + 152);
  LODWORD(v2) = *(_DWORD *)(v2 + 160);
  *a2 = v3;
  a2[1] = v2;
  return result;
}

unsigned __int8 *non-virtual thunk to'WrdBinaryReader::read(OcBinaryReader *this, OcSummary *a2)
{
  return OcBinaryReader::readSummary(this - 1, a2);
}

uint64_t WrdBinaryReader::getRootStorage(WrdBinaryReader *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (!v1)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1006;
  }
  return v1 + 24;
}

uint64_t OcBinaryReader::getDualStorageName(OcBinaryReader *this)
{
  return 0;
}

uint64_t SsrwOOPropVariant::getBlobValueData(SsrwOOPropVariant *this)
{
  return *(void *)(*((void *)this + 1) + 16);
}

uint64_t SsrwOOPropVariant::getBlobValueSize(SsrwOOPropVariant *this)
{
  return *(unsigned int *)(*((void *)this + 1) + 8);
}

void OcHyperlink::OcHyperlink(OcHyperlink *this)
{
  *(void *)this = &unk_26EBD9C20;
  uint64_t v1 = (CsString *)((char *)this + 48);
  CsString::CsString((CsString *)this + 1);
  CsString::CsString(v1);
}

void sub_238B24BD8(_Unwind_Exception *a1)
{
  CsString::~CsString(v1);
  _Unwind_Resume(a1);
}

void OcHyperlink::~OcHyperlink(CsString *this)
{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBD9C20;
  uint64_t v1 = this + 1;
  CsString::~CsString(this + 2);
  CsString::~CsString(v1);
  JUMPOUT(0x23EC997B0);
}

{
  CsString *v1;

  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBD9C20;
  uint64_t v1 = this + 1;
  CsString::~CsString(this + 2);
  CsString::~CsString(v1);
}

void sub_238B24E60(void *a1, int a2)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (a2 == 3)
  {
    unsigned int v6 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v6);
    __cxa_end_catch();
  }
  else
  {
    int v7 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      [v7 raise];
    }
    else {
      +[TCMessageException raise:TCUnknownProblemMessage];
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x238B24E30);
}

void sub_238B24F20(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (a2 == 2)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x238B24E30);
  }

  _Unwind_Resume(exc_buf);
}

void WrdShading::WrdShading(WrdShading *this)
{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBE6AD0;
  *(void *)&long long v2 = 255;
  *((void *)&v2 + 1) = 255;
  *(_OWORD *)&this->var3.$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = v2;
  p_unsigned int var4 = &this->var4;
  this->unsigned int var1 = 0;
  this->uint64_t var2 = 0;
  WrdProperty::convertWord97ColorEnumToColor(0, (uint64_t)&this->var3);
  WrdProperty::convertWord97ColorEnumToColor(0, (uint64_t)p_var4);
  this->var5 = 0;
  *(void *)&this->var6 = 0;
}

uint64_t WrdProperty::convertWord97ColorEnumToColor(uint64_t result, uint64_t a2)
{
  if ((int)result <= 16) {
    int v2 = result;
  }
  else {
    int v2 = 31;
  }
  if (v2)
  {
    if (v2 == 31)
    {
      *(void *)a2 = 0xFF00FF00FF0000;
    }
    else
    {
      int v3 = (char *)&WrdProperty::s_word97Colors + 16 * v2;
      int v4 = *((_DWORD *)v3 - 3);
      int v5 = *((_DWORD *)v3 - 2);
      LODWORD(v3) = *((_DWORD *)v3 - 1);
      *(_WORD *)a2 = 255;
      *(_WORD *)(a2 + 2) = v4;
      *(_WORD *)(a2 + 4) = v5;
      *(_WORD *)(a2 + 6) = (_WORD)v3;
    }
  }
  else
  {
    *(void *)a2 = 0;
  }
  return result;
}

void WrdLineSpaceDescriptor::WrdLineSpaceDescriptor(WrdLineSpaceDescriptor *this)
{
  *(void *)this = &unk_26EBE62D0;
  *((_DWORD *)this + 2) = 65776;
}

void WrdDropCap::WrdDropCap(WrdDropCap *this)
{
  *(void *)this = &unk_26EBE5988;
  *((_DWORD *)this + 2) = 0;
  *((unsigned char *)this + 12) = 0;
}

void WrdBorder::WrdBorder(WrdBorder *this)
{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBE55D0;
  this->var1.$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = 255;
  *(_WORD *)&this->var6 = 0;
  *(void *)&this->var1.unsigned int var1 = 0;
  HIWORD(this->var2) = 0;
  *((unsigned char *)this + 24) &= 0xFCu;
  WrdProperty::convertWord97ColorEnumToColor(0, (uint64_t)&this->var1);
  this->int var3 = 0;
}

void WrdAutoNumberLevelDescriptor::WrdAutoNumberLevelDescriptor(WrdAutoNumberLevelDescriptor *this)
{
  *(void *)this = &unk_26EBE5448;
  *((_WORD *)this + 22) = 0;
  *((_WORD *)this + 21) &= 0x8000u;
  *((_WORD *)this + 20) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 1) = 255;
}

void WrdAutoNumberListDescriptor::WrdAutoNumberListDescriptor(WrdAutoNumberListDescriptor *this, WrdAutoNumberLevelDescriptor *a2)
{
  *(void *)this = &unk_26EBE5490;
  CsString::CsString((CsString *)((char *)this + 16));
  *((void *)this + 1) = a2;
  (*(void (**)(WrdAutoNumberListDescriptor *))(*(void *)this + 24))(this);
}

void sub_238B251EC(_Unwind_Exception *a1)
{
  CsString::~CsString(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdAutoNumberListDescriptor::reset(WrdAutoNumberListDescriptor *this)
{
  *(_WORD *)((char *)this + 41) = 0;
  *((unsigned char *)this + 40) &= ~1u;
  *((_DWORD *)this + 8) = 0;
  bzero(*((void **)this + 3), 2 * *((unsigned int *)this + 9));
  int v2 = *(uint64_t (**)(void))(**((void **)this + 1) + 24);
  return v2();
}

double WrdAutoNumberLevelDescriptor::reset(WrdAutoNumberLevelDescriptor *this)
{
  *((_WORD *)this + 22) = 0;
  *((_WORD *)this + 21) &= 0x8000u;
  *((_WORD *)this + 20) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *(void *)&double result = 255;
  *((void *)this + 1) = 255;
  return result;
}

void WrdNumberRevisionMarkData::WrdNumberRevisionMarkData(WrdNumberRevisionMarkData *this, WrdDateTime *a2)
{
  *(void *)this = &unk_26EBE65C8;
  CsString::CsString((CsString *)((char *)this + 8));
  *((_WORD *)this + 32) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((unsigned char *)this + 66) &= ~1u;
  *((void *)this + 4) = a2;
  *((void *)this + 5) = 0;
}

void WrdNumberRevisionMarkData::init(WrdNumberRevisionMarkData *this)
{
  if (!*((void *)this + 4))
  {
    int v2 = (WrdDateTime *)operator new(0x18uLL);
    WrdDateTime::WrdDateTime(v2);
    *((void *)this + 4) = v2;
  }
  if (!*((void *)this + 6) && !*((void *)this + 7) && !*((void *)this + 5))
  {
    *((void *)this + 6) = operator new[](0x24uLL);
    *((void *)this + 7) = operator new[](9uLL);
    int v3 = operator new[](0x24uLL);
    uint64_t v4 = 0;
    *((void *)this + 5) = v3;
    do
    {
      *(unsigned char *)(*((void *)this + 7) + v4) = 0;
      uint64_t v5 = *((void *)this + 6);
      *(_DWORD *)(*((void *)this + 5) + 4 * v4) = 0;
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    }
    while (v4 != 9);
  }
}

void sub_238B253AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void WrdTabDescriptor::WrdTabDescriptor(WrdTabDescriptor *this)
{
  *(void *)this = &unk_26EBE6D40;
  *((void *)this + 1) = 0;
}

uint64_t WrdParagraphProperties::reset(WrdParagraphProperties *this)
{
  *((_WORD *)this + 12) = 0;
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 300) = 9;
  int v2 = (unsigned int *)((char *)this + 294);
  unsigned int v3 = *(_DWORD *)((char *)this + 294) & 0xFFFFFFFC;
  *(_DWORD *)((char *)this + 294) = v3;
  *((void *)this + 21) = 0;
  *((void *)this + 17) = 0;
  uint64_t v4 = *((void *)this + 25);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 26);
    if (v5)
    {
      uint64_t v6 = *((void *)this + 27);
      if (v6)
      {
        for (uint64_t i = 0; i != 128; i += 2)
        {
          *(_WORD *)(v4 + i) = 0;
          *(_WORD *)(v5 + i) = 0;
          *(_WORD *)(v6 + i) = 0;
        }
        unsigned int v3 = *v2;
      }
    }
  }
  *((void *)this + 34) = 0;
  *((_OWORD *)this + 9) = xmmword_238EEF490;
  *((_WORD *)this + 149) = 2304;
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 30) = 0;
  *((void *)this + 35) = 0;
  *((_DWORD *)this + 72) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 31) = 0;
  *int v2 = v3 & 0xC0000003 | 0x200;
  *((_WORD *)this + 146) = 0;
  WrdShading::reset(*((WrdShading **)this + 4));
  WrdLineSpaceDescriptor::reset(*((void *)this + 5));
  WrdDropCap::reset(*((void *)this + 6));
  (*(void (**)(void))(**((void **)this + 7) + 24))(*((void *)this + 7));
  (*(void (**)(void))(**((void **)this + 8) + 24))(*((void *)this + 8));
  (*(void (**)(void))(**((void **)this + 9) + 24))(*((void *)this + 9));
  (*(void (**)(void))(**((void **)this + 10) + 24))(*((void *)this + 10));
  (*(void (**)(void))(**((void **)this + 11) + 24))(*((void *)this + 11));
  (*(void (**)(void))(**((void **)this + 12) + 24))(*((void *)this + 12));
  (*(void (**)(void))(**((void **)this + 13) + 24))(*((void *)this + 13));
  (*(void (**)(void))(**((void **)this + 14) + 24))(*((void *)this + 14));
  int v8 = (WrdNumberRevisionMarkData *)*((void *)this + 15);
  return WrdNumberRevisionMarkData::reset(v8);
}

uint64_t WrdShading::reset(WrdShading *this)
{
  this->unsigned int var1 = 0;
  this->uint64_t var2 = 0;
  WrdProperty::convertWord97ColorEnumToColor(0, (uint64_t)&this->var3);
  uint64_t result = WrdProperty::convertWord97ColorEnumToColor(0, (uint64_t)&this->var4);
  this->var5 = 0;
  *(void *)&this->var6 = 0;
  return result;
}

uint64_t WrdLineSpaceDescriptor::reset(uint64_t this)
{
  *(_DWORD *)(this + 8) = 65776;
  return this;
}

uint64_t WrdDropCap::reset(uint64_t this)
{
  *(_DWORD *)(this + 8) = 0;
  *(unsigned char *)(this + 12) = 0;
  return this;
}

uint64_t WrdBorder::reset(WrdBorder *this)
{
  *(_WORD *)&this->var6 = 0;
  this->uint64_t var2 = 0;
  *((unsigned char *)this + 24) &= 0xFCu;
  uint64_t result = WrdProperty::convertWord97ColorEnumToColor(0, (uint64_t)&this->var1);
  this->int var3 = 0;
  return result;
}

WrdDateTime *WrdDateTime::reset(WrdDateTime *this)
{
  *(void *)&this->int var3 = 0;
  *(void *)&this->unsigned int var1 = 0;
  return this;
}

uint64_t WrdNumberRevisionMarkData::reset(WrdNumberRevisionMarkData *this)
{
  uint64_t result = *((void *)this + 4);
  if (result && *((void *)this + 7) && *((void *)this + 5) && *((void *)this + 6))
  {
    *((_WORD *)this + 32) = 0;
    *((unsigned char *)this + 66) &= ~1u;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
    for (uint64_t i = 0; i != 9; ++i)
    {
      *(unsigned char *)(*((void *)this + 7) + i) = 0;
      uint64_t v4 = *((void *)this + 6);
      *(_DWORD *)(*((void *)this + 5) + 4 * i) = 0;
      *(_DWORD *)(v4 + 4 * i) = 0;
    }
  }
  return result;
}

char *WrdParagraphProperties::init(WrdParagraphProperties *this)
{
  int v2 = (void *)((char *)this + 176);
  if (((*((void *)this + 23) - *((void *)this + 22)) & 0x7FFFFFFF8) == 0)
  {
    std::vector<EshHeader *,ChAllocator<EshHeader *>>::resize((uint64_t)this + 176, 0x40u);
    for (uint64_t i = 0; i != 512; i += 8)
      *(void *)(*v2 + i) = 0;
    for (uint64_t j = 0; j != 512; j += 8)
      *(void *)(*((void *)this + 22) + j) = (*(uint64_t (**)(void))(**((void **)this + 16) + 16))(*((void *)this + 16));
  }
  if (!*((void *)this + 25)) {
    *((void *)this + 25) = operator new[](0x80uLL);
  }
  uint64_t result = (char *)*((void *)this + 26);
  if (!result)
  {
    uint64_t result = (char *)operator new[](0x80uLL);
    *((void *)this + 26) = result;
  }
  uint64_t v6 = (char *)*((void *)this + 27);
  if (!v6)
  {
    uint64_t v6 = (char *)operator new[](0x80uLL);
    *((void *)this + 27) = v6;
    uint64_t result = (char *)*((void *)this + 26);
  }
  uint64_t v7 = 0;
  uint64_t v8 = *((void *)this + 25);
  do
  {
    *(_WORD *)(v8 + v7) = 0;
    *(_WORD *)&result[v7] = 0;
    *(_WORD *)&v6[v7] = 0;
    v7 += 2;
  }
  while (v7 != 128);
  return result;
}

double WrdTabDescriptor::clone(WrdTabDescriptor *this)
{
  int v2 = (double *)operator new(0x10uLL);
  *(void *)int v2 = &unk_26EBE6D40;
  double result = *((double *)this + 1);
  v2[1] = result;
  return result;
}

void WrdCharacterProperties::WrdCharacterProperties(WrdCharacterProperties *this, WrdShading *a2, WrdBorder *a3, WrdDateTime *a4, WrdDateTime *a5, WrdDateTime *a6, WrdDateTime *a7, WrdDateTime *a8)
{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBE5618;
  this->unsigned int var1 = (void **)&unk_26EBE5648;
  *(void *)&WrdCharacterPropertiesOverridden v16 = 255;
  *((void *)&v16 + 1) = 255;
  *(WrdCharacterPropertiesOverridden *)((char *)&this->var2 + 14) = v16;
  CsString::CsString(&this->var5);
  this->var6 = a2;
  this->var7 = a3;
  this->var8 = a4;
  this->var9 = a5;
  this->var10 = a6;
  this->var11 = a7;
  this->var12 = a8;
  (*((void (**)(WrdCharacterProperties *))this->var0 + 2))(this);
}

void sub_238B259AC(_Unwind_Exception *a1)
{
  CsString::~CsString(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdCharacterProperties::reset(WrdCharacterProperties *this)
{
  p_var64 = &this->var64;
  *(void *)((char *)&this->var2 + 6) = 0;
  *(void *)&this->uint64_t var2 = 0;
  int v3 = *((_DWORD *)this + 85);
  *(_OWORD *)&this->var23 = 0u;
  *(_OWORD *)&this->var27 = 0u;
  *(_OWORD *)&this->var31 = 0u;
  *(_OWORD *)&this->var35 = 0u;
  *((_DWORD *)this + 85) = v3 & 0xEFFFFC00;
  this->var62 = 20;
  this->var49 = 0;
  *(void *)&this->var43 = 0;
  WrdProperty::convertWord97ColorEnumToColor(0, (uint64_t)&this->var2 + 14);
  this->var60 = 100;
  *(void *)&this->var39 = 0x40000000400;
  this->var41 = 0;
  *((_DWORD *)this + 85) &= ~0x8000000u;
  *(_WORD *)&this->var107 = 0;
  *(_OWORD *)&this->var13 = 0u;
  this->var17 = 0;
  this->var63 = 0;
  this->var105 = 0;
  WrdProperty::convertWord97ColorEnumToColor(0, (uint64_t)&this->var3.var3);
  this->var61 = 0;
  int v4 = *((_DWORD *)this + 85);
  *(_WORD *)&this->var109 = 0;
  this->var47 = 0;
  this->var50 = 0;
  this->var59 = 0;
  this->var22 = 0;
  this->var106 = 0;
  this->var42 = 0;
  *((void *)p_var64 + 2) = 10;
  *((_DWORD *)this + 85) = v4 & 0xF80003FF;
  *(_OWORD *)p_var64 = 0u;
  this->var48 = 0;
  *(_OWORD *)&this->var18 = 0u;
  *(_OWORD *)&this->var51 = xmmword_238EDE970;
  *(_OWORD *)&this->var55 = xmmword_238EEEF70;
  this->var5.uint64_t var2 = 0;
  bzero(this->var5.var1, 2 * this->var5.var3);
  WrdShading::reset(this->var6);
  (*((void (**)(WrdBorder *))this->var7->var0 + 3))(this->var7);
  (*((void (**)(WrdDateTime *))this->var8->var0 + 3))(this->var8);
  (*((void (**)(WrdDateTime *))this->var9->var0 + 3))(this->var9);
  (*((void (**)(WrdDateTime *))this->var10->var0 + 3))(this->var10);
  (*((void (**)(WrdDateTime *))this->var11->var0 + 3))(this->var11);
  uint64_t v5 = (uint64_t (*)(void))*((void *)this->var12->var0 + 3);
  return v5();
}

void WrdTableAutoformatLookSpecifier::WrdTableAutoformatLookSpecifier(WrdTableAutoformatLookSpecifier *this)
{
  *(void *)this = &unk_26EBE6D80;
  *((_DWORD *)this + 2) = 0;
  *((_WORD *)this + 6) &= 0xFE00u;
}

void WrdTableCellDescriptor::WrdTableCellDescriptor(WrdTableCellDescriptor *this, WrdShading *a2, WrdBorder *a3, WrdBorder *a4, WrdBorder *a5, WrdBorder *a6, WrdBorder *a7, WrdBorder *a8)
{
  *(void *)this = &unk_26EBE6DC0;
  *((void *)this + 2) = a2;
  *((void *)this + 3) = a3;
  *((void *)this + 4) = a4;
  *((void *)this + 5) = a5;
  *((void *)this + 6) = a6;
  *((void *)this + 7) = a7;
  *((void *)this + 8) = a8;
  WrdTableCellDescriptor::reset(this);
}

uint64_t WrdTableCellDescriptor::reset(WrdTableCellDescriptor *this)
{
  *((_WORD *)this + 6) = 0;
  *((_DWORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 114) = 0u;
  *((_WORD *)this + 65) &= 0xFE00u;
  WrdShading::reset(*((WrdShading **)this + 2));
  (*(void (**)(void))(**((void **)this + 3) + 24))(*((void *)this + 3));
  (*(void (**)(void))(**((void **)this + 4) + 24))(*((void *)this + 4));
  (*(void (**)(void))(**((void **)this + 5) + 24))(*((void *)this + 5));
  (*(void (**)(void))(**((void **)this + 6) + 24))(*((void *)this + 6));
  (*(void (**)(void))(**((void **)this + 7) + 24))(*((void *)this + 7));
  int v2 = *(uint64_t (**)(void))(**((void **)this + 8) + 24);
  return v2();
}

uint64_t WrdTableProperties::reset(WrdTableProperties *this)
{
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((_DWORD *)this + 36) = 0;
  *(_OWORD *)((char *)this + 148) = xmmword_238EEF8D0;
  *(_OWORD *)((char *)this + 164) = 0u;
  *(_OWORD *)((char *)this + 180) = 0u;
  *(_OWORD *)((char *)this + 196) = 0u;
  *(_OWORD *)((char *)this + 212) = 0u;
  *(_OWORD *)((char *)this + 228) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(void *)((char *)this + 326) = 0;
  *((unsigned char *)this + 334) &= 0xC0u;
  *((_WORD *)this + 172) = 0;
  *((void *)this + 42) = 0;
  *((void *)this + 32) = *((void *)this + 31);
  WrdTableProperties::resetTableCellDescriptors(this);
  *(void *)((char *)this + 346) = 0x6C0000006C0000;
  *(_OWORD *)((char *)this + 354) = 0u;
  *(_OWORD *)((char *)this + 370) = 0u;
  *(void *)((char *)this + 386) = 0;
  WrdTableAutoformatLookSpecifier::reset(*((void *)this + 4));
  WrdShading::reset(*((WrdShading **)this + 6));
  (*(void (**)(void))(**((void **)this + 7) + 24))(*((void *)this + 7));
  (*(void (**)(void))(**((void **)this + 8) + 24))(*((void *)this + 8));
  (*(void (**)(void))(**((void **)this + 9) + 24))(*((void *)this + 9));
  (*(void (**)(void))(**((void **)this + 10) + 24))(*((void *)this + 10));
  (*(void (**)(void))(**((void **)this + 11) + 24))(*((void *)this + 11));
  (*(void (**)(void))(**((void **)this + 12) + 24))(*((void *)this + 12));
  (*(void (**)(void))(**((void **)this + 13) + 24))(*((void *)this + 13));
  (*(void (**)(void))(**((void **)this + 14) + 24))(*((void *)this + 14));
  int v2 = *(uint64_t (**)(void))(**((void **)this + 15) + 24);
  return v2();
}

WrdTableProperties *WrdTableProperties::resetTableCellDescriptors(WrdTableProperties *this)
{
  uint64_t v1 = this;
  uint64_t v2 = *((void *)this + 34);
  if (((*((void *)this + 35) - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v3 = 0;
    do
    {
      this = *(WrdTableProperties **)(v2 + 8 * v3);
      if (this)
      {
        this = (WrdTableProperties *)(*(uint64_t (**)(WrdTableProperties *))(*(void *)this + 8))(this);
        uint64_t v2 = *((void *)v1 + 34);
      }
      *(void *)(v2 + 8 * v3++) = 0;
      uint64_t v2 = *((void *)v1 + 34);
    }
    while (v3 < ((unint64_t)(*((void *)v1 + 35) - v2) >> 3));
  }
  *((void *)v1 + 35) = v2;
  return this;
}

uint64_t WrdTableAutoformatLookSpecifier::reset(uint64_t this)
{
  *(_DWORD *)(this + 8) = 0;
  *(_WORD *)(this + 12) &= 0xFE00u;
  return this;
}

void WrdStyle::WrdStyle(WrdStyle *this, WrdParagraphProperties *a2, WrdParagraphProperties *a3, WrdCharacterProperties *a4, WrdCharacterProperties *a5, WrdTableProperties *a6, WrdDateTime *a7)
{
  *(void *)this = &unk_26EBE6CC0;
  CsString::CsString((CsString *)((char *)this + 8));
  *((void *)this + 11) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 10) = (char *)this + 88;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = (char *)this + 112;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = (char *)this + 136;
  *((_DWORD *)this + 38) = 1;
  *(void *)((char *)this + 156) = 0xFFF0FFF0FFFLL;
  *((unsigned char *)this + 164) &= 0xE1u;
  *((void *)this + 4) = a2;
  *((void *)this + 5) = a3;
  *((void *)this + 6) = a4;
  *((void *)this + 7) = a5;
  *((void *)this + 8) = a6;
  *((void *)this + 9) = a7;
}

void WrdStyleSheet::WrdStyleSheet(WrdStyleSheet *this, WrdStyle *a2)
{
  *(void *)this = &unk_26EBE6D00;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = a2;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  for (uint64_t i = 48; i != 360; i += 2)
    *((unsigned char *)this + i) |= 1u;
  *((_WORD *)this + 180) = 0;
}

WrdStyleSheet *WrdBinaryReader::read(WrdBinaryReader *this, WrdStyleSheet *a2)
{
  uint64_t v2 = *((void *)this + 25);
  if (v2) {
    return WrdStyleSheet::operator=(a2, v2);
  }
  else {
    return (WrdStyleSheet *)WrdParser::parse(*((WrdParser **)this + 4), a2);
  }
}

uint64_t WrdParser::parse(WrdParser *this, WrdStyleSheet *a2)
{
  WrdParser::startFCLCB(this, 1u);
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
  unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
  *((_WORD *)a2 + 180) = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 8, 1);
  if (v4 >= 0xF)
  {
    *((_WORD *)a2 + 4) = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
    *((_WORD *)a2 + 5) = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
    *((_WORD *)a2 + 6) = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
    uint64_t v6 = v4 - 18;
    if (v6 >= 2)
    {
      *((_WORD *)a2 + 7) = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
      uint64_t v6 = v4 - 20;
      if (v6 >= 2)
      {
        (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 2, 1);
        uint64_t v6 = v4 - 22;
        if (v6 >= 0x270)
        {
          for (unsigned int i = 0; i != 156; ++i)
          {
            char v8 = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
            PredefinedStyleInfoReference = (unsigned char *)WrdStyleSheet::getPredefinedStyleInfoReference((uint64_t)a2, i);
            unsigned char *PredefinedStyleInfoReference = *PredefinedStyleInfoReference & 0xFE | v8 & 1;
          }
          uint64_t v6 = v4 - 646;
        }
      }
    }
    if (v6) {
      (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), v6, 1);
    }
  }
  if (v5)
  {
    for (unsigned int j = 0; j < v5; ++j)
    {
      unint64_t v11 = (WrdStyle *)WrdStyleSheet::addStyle(a2);
      WrdParser::parse(this, v11, *((unsigned __int16 *)a2 + 180));
    }
  }
  uint64_t result = *(void *)(WrdStyleSheet::getStyleReference(a2, 0) + 48);
  if ((*(void *)(result + 16) & 0x400000000000) == 0)
  {
    return WrdCharacterProperties::setLanguageIDForFarEastAsianText(result, 1041);
  }
  return result;
}

void WrdStyleSheet::setNumberOfStyles(WrdStyleSheet *this, unsigned int a2)
{
  unsigned int v4 = (uint64_t *)((char *)this + 24);
  unint64_t v5 = *((void *)this + 4) - *((void *)this + 3);
  if ((v5 & 0x7FFFFFFF8) != 0)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (v5 >> 3);
    do
    {
      uint64_t v8 = *v4;
      uint64_t v9 = *(void *)(*v4 + 8 * v6);
      if (v9)
      {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        uint64_t v8 = *v4;
      }
      *(void *)(v8 + 8 * v6++) = 0;
    }
    while (v7 != v6);
  }
  std::vector<EshHeader *,ChAllocator<EshHeader *>>::resize((uint64_t)v4, a2);
  if (a2)
  {
    uint64_t v10 = 0;
    do
    {
      *(void *)(*v4 + v10) = 0;
      v10 += 8;
    }
    while (8 * a2 != v10);
    uint64_t v11 = 0;
    uint64_t v12 = 8 * a2;
    do
    {
      *(void *)(*((void *)this + 3) + v11) = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
      v11 += 8;
    }
    while (v12 != v11);
  }
}

WrdStyle *WrdStyle::clone(WrdStyle *this)
{
  uint64_t v2 = (WrdParagraphProperties *)(*(uint64_t (**)(void))(**((void **)this + 4) + 24))(*((void *)this + 4));
  unint64_t v3 = (WrdParagraphProperties *)(*(uint64_t (**)(void))(**((void **)this + 5) + 24))(*((void *)this + 5));
  unsigned int v4 = (WrdCharacterProperties *)(*(uint64_t (**)(void))(**((void **)this + 6) + 24))(*((void *)this + 6));
  unint64_t v5 = (WrdCharacterProperties *)(*(uint64_t (**)(void))(**((void **)this + 7) + 24))(*((void *)this + 7));
  uint64_t v6 = (WrdTableProperties *)(*(uint64_t (**)(void))(**((void **)this + 8) + 24))(*((void *)this + 8));
  uint64_t v7 = (WrdDateTime *)(*(uint64_t (**)(void))(**((void **)this + 9) + 16))(*((void *)this + 9));
  uint64_t v8 = (WrdStyle *)operator new(0xA8uLL);
  WrdStyle::WrdStyle(v8, v2, v3, v4, v5, v6, v7);
  WrdStyle::operator=((uint64_t)v8, (uint64_t)this);
  return v8;
}

void sub_238B26718(_Unwind_Exception *exception_object)
{
  if (v1) {
    WrdAnnotation::clone(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_238B267BC()
{
  if (v0) {
    JUMPOUT(0x238B267C4);
  }
  JUMPOUT(0x238B2674CLL);
}

void sub_238B267F4()
{
  if (v0) {
    JUMPOUT(0x238B267FCLL);
  }
  JUMPOUT(0x238B26750);
}

void sub_238B2682C()
{
  if (v0) {
    JUMPOUT(0x238B26834);
  }
  JUMPOUT(0x238B26754);
}

void sub_238B26864()
{
  if (v0) {
    JUMPOUT(0x238B2686CLL);
  }
  JUMPOUT(0x238B26758);
}

void sub_238B2689C()
{
  if (!v0) {
    JUMPOUT(0x238B26784);
  }
  JUMPOUT(0x238B2675CLL);
}

WrdParagraphProperties *WrdParagraphProperties::clone(WrdParagraphProperties *this)
{
  unsigned int v18 = (WrdShading *)(*(uint64_t (**)(void))(**((void **)this + 4) + 16))(*((void *)this + 4));
  unint64_t v17 = (WrdLineSpaceDescriptor *)(*(uint64_t (**)(void))(**((void **)this + 5) + 16))(*((void *)this + 5));
  WrdCharacterPropertiesOverridden v16 = (WrdDropCap *)(*(uint64_t (**)(void))(**((void **)this + 6) + 16))(*((void *)this + 6));
  unint64_t v15 = (WrdBorder *)(*(uint64_t (**)(void))(**((void **)this + 7) + 16))(*((void *)this + 7));
  uint64_t v14 = (WrdBorder *)(*(uint64_t (**)(void))(**((void **)this + 8) + 16))(*((void *)this + 8));
  uint64_t v2 = (WrdBorder *)(*(uint64_t (**)(void))(**((void **)this + 9) + 16))(*((void *)this + 9));
  unint64_t v3 = (WrdBorder *)(*(uint64_t (**)(void))(**((void **)this + 10) + 16))(*((void *)this + 10));
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 11) + 16))(*((void *)this + 11));
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 12) + 16))(*((void *)this + 12));
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 13) + 16))(*((void *)this + 13));
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 14) + 16))(*((void *)this + 14));
  uint64_t v8 = (WrdNumberRevisionMarkData *)(*(uint64_t (**)(void))(**((void **)this + 15) + 16))(*((void *)this + 15));
  uint64_t v9 = (WrdTabDescriptor *)(*(uint64_t (**)(void))(**((void **)this + 16) + 16))(*((void *)this + 16));
  uint64_t v10 = (WrdParagraphProperties *)operator new(0x130uLL);
  *(void *)&long long v13 = v6;
  *((void *)&v13 + 1) = v7;
  *(void *)&long long v12 = v4;
  *((void *)&v12 + 1) = v5;
  WrdParagraphProperties::WrdParagraphProperties(v10, v18, v17, v16, v15, v14, v2, v3, v12, v13, v8, v9);
  (*(void (**)(WrdParagraphProperties *))(*(void *)v10 + 32))(v10);
  WrdParagraphProperties::operator=((uint64_t)v10, (uint64_t)this);
  return v10;
}

void sub_238B26BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  operator delete(v24);
  if (v23)
  {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
    if (!v22)
    {
LABEL_3:
      if (!v21) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if (!v22)
  {
    goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  if (!v21)
  {
LABEL_4:
    if (!v20) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  if (!v20)
  {
LABEL_5:
    if (!v28) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  if (!v28)
  {
LABEL_6:
    if (!v27) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  if (!v27)
  {
LABEL_7:
    if (!v26) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_15:
  (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  if (!v26)
  {
LABEL_8:
    if (!v25)
    {
LABEL_18:
      if (a16) {
        (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
      }
      if (a17) {
        (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
      }
      if (a18) {
        (*(void (**)(uint64_t))(*(void *)a18 + 8))(a18);
      }
      if (a19) {
        (*(void (**)(uint64_t))(*(void *)a19 + 8))(a19);
      }
      if (a20) {
        (*(void (**)(uint64_t))(*(void *)a20 + 8))(a20);
      }
      _Unwind_Resume(a1);
    }
LABEL_17:
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
    goto LABEL_18;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  if (!v25) {
    goto LABEL_18;
  }
  goto LABEL_17;
}

double WrdShading::clone(WrdShading *this)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26EBE6AD0;
  *(void *)&long long v3 = 255;
  *((void *)&v3 + 1) = 255;
  *(_OWORD *)(v2 + 14) = v3;
  return WrdShading::operator=((uint64_t)v2, (uint64_t)this);
}

double WrdShading::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(void *)(a1 + 14) = *(void *)(a2 + 14);
  *(void *)(a1 + 22) = *(void *)(a2 + 22);
  *(unsigned char *)(a1 + 30) = *(unsigned char *)(a2 + 30);
  double result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

_DWORD *WrdLineSpaceDescriptor::clone(WrdLineSpaceDescriptor *this)
{
  double result = operator new(0x10uLL);
  *(void *)double result = &unk_26EBE62D0;
  result[2] = *((_DWORD *)this + 2);
  return result;
}

_DWORD *WrdDropCap::clone(WrdDropCap *this)
{
  double result = operator new(0x10uLL);
  *(void *)double result = &unk_26EBE5988;
  result[2] = *((_DWORD *)this + 2);
  *((unsigned char *)result + 12) = *((unsigned char *)this + 12);
  return result;
}

double WrdBorder::clone(WrdBorder *this)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = &unk_26EBE55D0;
  v2[1] = 255;
  return WrdBorder::operator=((uint64_t)v2, (uint64_t)this);
}

double WrdBorder::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  char v3 = *(unsigned char *)(a1 + 24) & 0xFE | *(unsigned char *)(a2 + 24) & 1;
  *(unsigned char *)(a1 + 24) = v3;
  *(unsigned char *)(a1 + 24) = v3 & 0xFD | *(unsigned char *)(a2 + 24) & 2;
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  return result;
}

WrdAutoNumberListDescriptor *WrdAutoNumberListDescriptor::clone(WrdAutoNumberListDescriptor *this)
{
  uint64_t v2 = (WrdAutoNumberLevelDescriptor *)(*(uint64_t (**)(void))(**((void **)this + 1) + 16))(*((void *)this + 1));
  char v3 = (WrdAutoNumberListDescriptor *)operator new(0x30uLL);
  WrdAutoNumberListDescriptor::WrdAutoNumberListDescriptor(v3, v2);
  WrdAutoNumberListDescriptor::operator=((uint64_t)v3, (uint64_t)this);
  return v3;
}

void sub_238B27144(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

double WrdAutoNumberLevelDescriptor::clone(WrdAutoNumberLevelDescriptor *this)
{
  uint64_t v2 = operator new(0x30uLL);
  *uint64_t v2 = &unk_26EBE5448;
  v2[1] = 255;
  *(void *)&double result = WrdAutoNumberLevelDescriptor::operator=((uint64_t)v2, (uint64_t)this).n128_u64[0];
  return result;
}

__n128 WrdAutoNumberLevelDescriptor::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  __n128 result = *(__n128 *)(a2 + 16);
  *(__n128 *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  *(_DWORD *)(a1 + 38) = *(_DWORD *)(a2 + 38);
  int v3 = *(_WORD *)(a1 + 42) & 0xFFFE | *(_WORD *)(a2 + 42) & 1;
  *(_WORD *)(a1 + 42) = *(_WORD *)(a1 + 42) & 0xFFFE | *(_WORD *)(a2 + 42) & 1;
  unsigned int v4 = v3 & 0xFFFFFFFD | (2 * ((*(unsigned __int16 *)(a2 + 42) >> 1) & 1));
  *(_WORD *)(a1 + 42) = v4;
  unsigned int v5 = v4 & 0xFFFFFFFB | (4 * ((*(unsigned __int16 *)(a2 + 42) >> 2) & 1));
  *(_WORD *)(a1 + 42) = v5;
  unsigned int v6 = v5 & 0xFFFFFFF7 | (8 * ((*(unsigned __int16 *)(a2 + 42) >> 3) & 1));
  *(_WORD *)(a1 + 42) = v6;
  unsigned int v7 = v6 & 0xFFFFFFEF | (16 * ((*(unsigned __int16 *)(a2 + 42) >> 4) & 1));
  *(_WORD *)(a1 + 42) = v7;
  unsigned int v8 = v7 & 0xFFFFFFDF | (32 * ((*(unsigned __int16 *)(a2 + 42) >> 5) & 1));
  *(_WORD *)(a1 + 42) = v8;
  unsigned int v9 = v8 & 0xFFFFFFBF | (((*(unsigned __int16 *)(a2 + 42) >> 6) & 1) << 6);
  *(_WORD *)(a1 + 42) = v9;
  unsigned int v10 = v9 & 0xFFFFFF7F | (((*(unsigned __int16 *)(a2 + 42) >> 7) & 1) << 7);
  *(_WORD *)(a1 + 42) = v10;
  unsigned int v11 = v10 & 0xFFFFFEFF | ((HIBYTE(*(unsigned __int16 *)(a2 + 42)) & 1) << 8);
  *(_WORD *)(a1 + 42) = v11;
  unsigned int v12 = v11 & 0xFFFFFDFF | (((*(unsigned __int16 *)(a2 + 42) >> 9) & 1) << 9);
  *(_WORD *)(a1 + 42) = v12;
  unsigned int v13 = v12 & 0xFFFFFBFF | (((*(unsigned __int16 *)(a2 + 42) >> 10) & 1) << 10);
  *(_WORD *)(a1 + 42) = v13;
  unsigned int v14 = v13 & 0xFFFFF7FF | (((*(unsigned __int16 *)(a2 + 42) >> 11) & 1) << 11);
  *(_WORD *)(a1 + 42) = v14;
  unsigned int v15 = v14 & 0xFFFFEFFF | (((*(unsigned __int16 *)(a2 + 42) >> 12) & 1) << 12);
  *(_WORD *)(a1 + 42) = v15;
  LOWORD(v15) = v15 & 0xDFFF | (((*(_WORD *)(a2 + 42) >> 13) & 1) << 13);
  *(_WORD *)(a1 + 42) = v15;
  *(_WORD *)(a1 + 42) = v15 & 0xBFFF | *(_WORD *)(a2 + 42) & 0x4000;
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
  return result;
}

uint64_t WrdAutoNumberListDescriptor::operator=(uint64_t a1, uint64_t a2)
{
  WrdAutoNumberLevelDescriptor::operator=(*(void *)(a1 + 8), *(void *)(a2 + 8));
  *(_DWORD *)(a1 + 32) = 0;
  bzero(*(void **)(a1 + 24), 2 * *(unsigned int *)(a1 + 36));
  CsString::append((CsString *)(a1 + 16), (const CsString *)(a2 + 16));
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a1 + 40) & 0xFE | *(unsigned char *)(a2 + 40) & 1;
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  return a1;
}

double WrdDateTime::clone(WrdDateTime *this)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EBE5888;
  *((_DWORD *)v2 + 2) = this->var1;
  double result = *(double *)&this->var2;
  *(double *)(v2 + 12) = result;
  *((_WORD *)v2 + 10) = this->var6;
  return result;
}

char *WrdNumberRevisionMarkData::clone(WrdNumberRevisionMarkData *this)
{
  uint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v2 = &unk_26EBE65C8;
  CsString::CsString((CsString *)(v2 + 8));
  *((_WORD *)v2 + 32) = 0;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  v2[66] &= ~1u;
  WrdNumberRevisionMarkData::init((WrdNumberRevisionMarkData *)v2);
  WrdNumberRevisionMarkData::operator=((uint64_t)v2, (uint64_t)this);
  return v2;
}

void sub_238B27490(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdNumberRevisionMarkData::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3 && *(void *)(a1 + 56) && *(void *)(a1 + 40) && *(void *)(a1 + 48))
  {
    WrdDateTime::operator=(v3, *(void *)(a2 + 32));
    for (uint64_t i = 0; i != 9; ++i)
    {
      *(unsigned char *)(*(void *)(a1 + 56) + i) = *(unsigned char *)(*(void *)(a2 + 56) + i);
      uint64_t v6 = *(void *)(a2 + 48);
      uint64_t v7 = *(void *)(a1 + 48);
      *(_DWORD *)(*(void *)(a1 + 40) + 4 * i) = *(_DWORD *)(*(void *)(a2 + 40) + 4 * i);
      *(_DWORD *)(v7 + 4 * i) = *(_DWORD *)(v6 + 4 * i);
    }
    *(_DWORD *)(a1 + 24) = 0;
    bzero(*(void **)(a1 + 16), 2 * *(unsigned int *)(a1 + 28));
    CsString::append((CsString *)(a1 + 8), (const CsString *)(a2 + 8));
    CsString::erase((CsString *)(a1 + 8), 0x20u);
    *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
    *(unsigned char *)(a1 + 66) = *(unsigned char *)(a1 + 66) & 0xFE | *(unsigned char *)(a2 + 66) & 1;
  }
  return a1;
}

double WrdDateTime::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  double result = *(double *)(a2 + 12);
  *(double *)(a1 + 12) = result;
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  return result;
}

CsString *CsString::erase(CsString *this, unsigned int a2)
{
  if (this->var2 >= a2)
  {
    uint64_t v3 = this;
    this = CsString::reserve(this, a2 + 1);
    v3->uint64_t var2 = a2;
    v3->var1[a2] = 0;
  }
  return this;
}

uint64_t WrdParagraphProperties::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  WrdShading::operator=(*(void *)(a1 + 32), *(void *)(a2 + 32));
  uint64_t v5 = 0;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  *(_DWORD *)(a1 + 138) = *(_DWORD *)(a2 + 138);
  uint64_t v6 = (_DWORD *)(a2 + 294);
  uint64_t v7 = (unsigned int *)(a1 + 294);
  unsigned int v8 = *(_DWORD *)(a1 + 294) & 0xFFFFFFFE | *(_DWORD *)(a2 + 294) & 1;
  *(_DWORD *)(a1 + 294) = v8;
  *(_DWORD *)(a1 + 294) = v8 & 0xFFFFFFFD | (2 * ((*(_DWORD *)(a2 + 294) >> 1) & 1));
  *(unsigned char *)(a1 + 300) = *(unsigned char *)(a2 + 300);
  *(_WORD *)(a1 + 142) = *(_WORD *)(a2 + 142);
  do
  {
    uint64_t v9 = *(void *)(a2 + 208);
    uint64_t v10 = *(void *)(a1 + 208);
    *(_WORD *)(*(void *)(a1 + 200) + 2 * v5) = *(_WORD *)(*(void *)(a2 + 200) + 2 * v5);
    *(_WORD *)(v10 + 2 * v5) = *(_WORD *)(v9 + 2 * v5);
    *(_WORD *)(*(void *)(a1 + 216) + 2 * v5) = *(_WORD *)(*(void *)(a2 + 216) + 2 * v5);
    WrdTabDescriptor::operator=(*(void *)(*(void *)(a1 + 176) + 8 * v5), *(void *)(*(void *)(a2 + 176) + 8 * v5));
    ++v5;
  }
  while (v5 != 64);
  WrdLineSpaceDescriptor::operator=(*(void *)(a1 + 40), *(void *)(a2 + 40));
  WrdDropCap::operator=(*(void *)(a1 + 48), *(void *)(a2 + 48));
  WrdBorder::operator=(*(void *)(a1 + 56), *(void *)(a2 + 56));
  WrdBorder::operator=(*(void *)(a1 + 64), *(void *)(a2 + 64));
  WrdBorder::operator=(*(void *)(a1 + 72), *(void *)(a2 + 72));
  WrdBorder::operator=(*(void *)(a1 + 80), *(void *)(a2 + 80));
  WrdBorder::operator=(*(void *)(a1 + 88), *(void *)(a2 + 88));
  WrdBorder::operator=(*(void *)(a1 + 96), *(void *)(a2 + 96));
  WrdAutoNumberListDescriptor::operator=(*(void *)(a1 + 104), *(void *)(a2 + 104));
  WrdDateTime::operator=(*(void *)(a1 + 112), *(void *)(a2 + 112));
  WrdNumberRevisionMarkData::operator=(*(void *)(a1 + 120), *(void *)(a2 + 120));
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  uint64_t v11 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v11;
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(_WORD *)(a1 + 292) = *(_WORD *)(a2 + 292);
  unsigned int v12 = *v7 & 0xFFFFFFFB | (4 * ((*v6 >> 2) & 1));
  *uint64_t v7 = v12;
  unsigned int v13 = v12 & 0xFFFFFFF7 | (8 * ((*v6 >> 3) & 1));
  *uint64_t v7 = v13;
  unsigned int v14 = v13 & 0xFFFFFFEF | (16 * ((*v6 >> 4) & 1));
  *uint64_t v7 = v14;
  unsigned int v15 = v14 & 0xFFFFFFDF | (32 * ((*v6 >> 5) & 1));
  *uint64_t v7 = v15;
  unsigned int v16 = v15 & 0xFFFFFFBF | (((*v6 >> 6) & 1) << 6);
  *uint64_t v7 = v16;
  unsigned int v17 = v16 & 0xFFFFFF7F | (((*v6 >> 7) & 1) << 7);
  *uint64_t v7 = v17;
  unsigned int v18 = v17 & 0xFFFFFEFF | (((*v6 >> 8) & 1) << 8);
  *uint64_t v7 = v18;
  unsigned int v19 = v18 & 0xFFFFFDFF | (((*v6 >> 9) & 1) << 9);
  *uint64_t v7 = v19;
  unsigned int v20 = v19 & 0xFFFFFBFF | (((*v6 >> 10) & 1) << 10);
  *uint64_t v7 = v20;
  unsigned int v21 = v20 & 0xFFFFF7FF | (((*v6 >> 11) & 1) << 11);
  *uint64_t v7 = v21;
  unsigned int v22 = v21 & 0xFFFFEFFF | (((*v6 >> 12) & 1) << 12);
  *uint64_t v7 = v22;
  unsigned int v23 = v22 & 0xFFFFDFFF | (((*v6 >> 13) & 1) << 13);
  *uint64_t v7 = v23;
  unsigned int v24 = v23 & 0xFFFFBFFF | (((*v6 >> 14) & 1) << 14);
  *uint64_t v7 = v24;
  unsigned int v25 = v24 & 0xFFFF7FFF | (((*v6 >> 15) & 1) << 15);
  *uint64_t v7 = v25;
  unsigned int v26 = v25 & 0xFFFEFFFF | ((HIWORD(*v6) & 1) << 16);
  *uint64_t v7 = v26;
  unsigned int v27 = v26 & 0xFFFDFFFF | (((*v6 >> 17) & 1) << 17);
  *uint64_t v7 = v27;
  unsigned int v28 = v27 & 0xFFFBFFFF | (((*v6 >> 18) & 1) << 18);
  *uint64_t v7 = v28;
  unsigned int v29 = v28 & 0xFFF7FFFF | (((*v6 >> 19) & 1) << 19);
  *uint64_t v7 = v29;
  unsigned int v30 = v29 & 0xFFEFFFFF | (((*v6 >> 20) & 1) << 20);
  *uint64_t v7 = v30;
  unsigned int v31 = v30 & 0xFFDFFFFF | (((*v6 >> 21) & 1) << 21);
  *uint64_t v7 = v31;
  unsigned int v32 = v31 & 0xFFBFFFFF | (((*v6 >> 22) & 1) << 22);
  *uint64_t v7 = v32;
  unsigned int v33 = v32 & 0xFF7FFFFF | (((*v6 >> 23) & 1) << 23);
  *uint64_t v7 = v33;
  unsigned int v34 = v33 & 0xFEFFFFFF | ((HIBYTE(*v6) & 1) << 24);
  *uint64_t v7 = v34;
  unsigned int v35 = v34 & 0xFDFFFFFF | (((*v6 >> 25) & 1) << 25);
  *uint64_t v7 = v35;
  unsigned int v36 = v35 & 0xFBFFFFFF | (((*v6 >> 26) & 1) << 26);
  *uint64_t v7 = v36;
  unsigned int v37 = v36 & 0xF7FFFFFF | (((*v6 >> 27) & 1) << 27);
  *uint64_t v7 = v37;
  unsigned int v38 = v37 & 0xEFFFFFFF | (((*v6 >> 28) & 1) << 28);
  *uint64_t v7 = v38;
  *uint64_t v7 = v38 & 0xDFFFFFFF | (((*v6 >> 29) & 1) << 29);
  *(_WORD *)(a1 + 298) = *(_WORD *)(a2 + 298);
  return a1;
}

double WrdTabDescriptor::operator=(uint64_t a1, uint64_t a2)
{
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t WrdLineSpaceDescriptor::operator=(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t WrdDropCap::operator=(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(result + 12) = *(unsigned char *)(a2 + 12);
  return result;
}

WrdCharacterProperties *WrdCharacterProperties::clone(WrdCharacterProperties *this)
{
  uint64_t v2 = (WrdShading *)(*((uint64_t (**)(WrdShading *))this->var6->var0 + 2))(this->var6);
  uint64_t v3 = (WrdBorder *)(*((uint64_t (**)(WrdBorder *))this->var7->var0 + 2))(this->var7);
  uint64_t v4 = (WrdDateTime *)(*((uint64_t (**)(WrdDateTime *))this->var8->var0 + 2))(this->var8);
  uint64_t v5 = (WrdDateTime *)(*((uint64_t (**)(WrdDateTime *))this->var9->var0 + 2))(this->var9);
  uint64_t v6 = (WrdDateTime *)(*((uint64_t (**)(WrdDateTime *))this->var10->var0 + 2))(this->var10);
  uint64_t v7 = (WrdDateTime *)(*((uint64_t (**)(WrdDateTime *))this->var11->var0 + 2))(this->var11);
  unsigned int v8 = (WrdDateTime *)(*((uint64_t (**)(WrdDateTime *))this->var12->var0 + 2))(this->var12);
  uint64_t v9 = (WrdCharacterProperties *)operator new(0x160uLL);
  WrdCharacterProperties::WrdCharacterProperties(v9, v2, v3, v4, v5, v6, v7, v8);
  WrdCharacterProperties::operator=((uint64_t)v9, (uint64_t)this);
  return v9;
}

void sub_238B27B74(_Unwind_Exception *exception_object)
{
  if (v1) {
    WrdCharacterProperties::clone(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_238B27C1C()
{
  if (v0) {
    JUMPOUT(0x238B27C24);
  }
  JUMPOUT(0x238B27BA8);
}

void sub_238B27C54()
{
  if (v0) {
    JUMPOUT(0x238B27C5CLL);
  }
  JUMPOUT(0x238B27BACLL);
}

void sub_238B27C8C()
{
  if (v0) {
    JUMPOUT(0x238B27C94);
  }
  JUMPOUT(0x238B27BB0);
}

void sub_238B27CC4()
{
  if (v0) {
    JUMPOUT(0x238B27CCCLL);
  }
  JUMPOUT(0x238B27BB4);
}

void sub_238B27CFC()
{
  if (v0) {
    JUMPOUT(0x238B27D04);
  }
  JUMPOUT(0x238B27BB8);
}

void sub_238B27D34()
{
  if (!v0) {
    JUMPOUT(0x238B27BE4);
  }
  JUMPOUT(0x238B27BBCLL);
}

uint64_t WrdCharacterProperties::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_OWORD *)(a1 + 292);
  uint64_t v5 = (_OWORD *)(a2 + 292);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 22) = *(void *)(a2 + 22);
  *(void *)(a1 + 16) = v6;
  WrdShading::operator=(*(void *)(a1 + 72), *(void *)(a2 + 72));
  WrdBorder::operator=(*(void *)(a1 + 80), *(void *)(a2 + 80));
  WrdDateTime::operator=(*(void *)(a1 + 88), *(void *)(a2 + 88));
  WrdDateTime::operator=(*(void *)(a1 + 96), *(void *)(a2 + 96));
  WrdDateTime::operator=(*(void *)(a1 + 104), *(void *)(a2 + 104));
  WrdDateTime::operator=(*(void *)(a1 + 112), *(void *)(a2 + 112));
  WrdDateTime::operator=(*(void *)(a1 + 120), *(void *)(a2 + 120));
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 30) = *(void *)(a2 + 30);
  *(void *)(a1 + 38) = *(void *)(a2 + 38);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(_WORD *)(a1 + 256) = *(_WORD *)(a2 + 256);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(_WORD *)(a1 + 268) = *(_WORD *)(a2 + 268);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  long long v7 = v5[1];
  *uint64_t v4 = *v5;
  v4[1] = v7;
  int v8 = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 244) = v8;
  v4[2] = v5[2];
  *(void *)(a1 + 220) = *(void *)(a2 + 220);
  unsigned int v9 = *(_DWORD *)(a1 + 340) & 0xFFFFFFFD | (2 * ((*(_DWORD *)(a2 + 340) >> 1) & 1));
  *(_DWORD *)(a1 + 340) = v9;
  unsigned int v10 = v9 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(a2 + 340) >> 2) & 1));
  *(_DWORD *)(a1 + 340) = v10;
  unsigned int v11 = v10 & 0xFFFFFFF7 | (8 * ((*(_DWORD *)(a2 + 340) >> 3) & 1));
  *(_DWORD *)(a1 + 340) = v11;
  unsigned int v12 = v11 & 0xFFFFFFEF | (16 * ((*(_DWORD *)(a2 + 340) >> 4) & 1));
  *(_DWORD *)(a1 + 340) = v12;
  unsigned int v13 = v12 & 0xFFFFFFDF | (32 * ((*(_DWORD *)(a2 + 340) >> 5) & 1));
  *(_DWORD *)(a1 + 340) = v13;
  unsigned int v14 = v13 & 0xFFFFFFBF | (((*(_DWORD *)(a2 + 340) >> 6) & 1) << 6);
  *(_DWORD *)(a1 + 340) = v14;
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  unsigned int v15 = v14 & 0xFFFFFF7F | (((*(_DWORD *)(a2 + 340) >> 7) & 1) << 7);
  *(_DWORD *)(a1 + 340) = v15;
  unsigned int v16 = v15 & 0xFFFFFEFF | (((*(_DWORD *)(a2 + 340) >> 8) & 1) << 8);
  *(_DWORD *)(a1 + 340) = v16;
  unsigned int v17 = v16 & 0xFFFFFDFF | (((*(_DWORD *)(a2 + 340) >> 9) & 1) << 9);
  *(_DWORD *)(a1 + 340) = v17;
  unsigned int v18 = v17 & 0xFFFFFBFF | (((*(_DWORD *)(a2 + 340) >> 10) & 1) << 10);
  *(_DWORD *)(a1 + 340) = v18;
  unsigned int v19 = v18 & 0xFFFFF7FF | (((*(_DWORD *)(a2 + 340) >> 11) & 1) << 11);
  *(_DWORD *)(a1 + 340) = v19;
  *(unsigned char *)(a1 + 349) = *(unsigned char *)(a2 + 349);
  unsigned int v20 = v19 & 0xFFFFEFFF | (((*(_DWORD *)(a2 + 340) >> 12) & 1) << 12);
  *(_DWORD *)(a1 + 340) = v20;
  unsigned int v21 = v20 & 0xFFFFDFFF | (((*(_DWORD *)(a2 + 340) >> 13) & 1) << 13);
  *(_DWORD *)(a1 + 340) = v21;
  unsigned int v22 = v21 & 0xFFFFBFFF | (((*(_DWORD *)(a2 + 340) >> 14) & 1) << 14);
  *(_DWORD *)(a1 + 340) = v22;
  unsigned int v23 = v22 & 0xFFFF7FFF | (((*(_DWORD *)(a2 + 340) >> 15) & 1) << 15);
  *(_DWORD *)(a1 + 340) = v23;
  unsigned int v24 = v23 & 0xFFFEFFFF | ((HIWORD(*(_DWORD *)(a2 + 340)) & 1) << 16);
  *(_DWORD *)(a1 + 340) = v24;
  unsigned int v25 = v24 & 0xFFFDFFFF | (((*(_DWORD *)(a2 + 340) >> 17) & 1) << 17);
  *(_DWORD *)(a1 + 340) = v25;
  unsigned int v26 = v25 & 0xFFFBFFFF | (((*(_DWORD *)(a2 + 340) >> 18) & 1) << 18);
  *(_DWORD *)(a1 + 340) = v26;
  unsigned int v27 = v26 & 0xFFF7FFFF | (((*(_DWORD *)(a2 + 340) >> 19) & 1) << 19);
  *(_DWORD *)(a1 + 340) = v27;
  unsigned int v28 = v27 & 0xFFEFFFFF | (((*(_DWORD *)(a2 + 340) >> 20) & 1) << 20);
  *(_DWORD *)(a1 + 340) = v28;
  unsigned int v29 = v28 & 0xFFDFFFFF | (((*(_DWORD *)(a2 + 340) >> 21) & 1) << 21);
  *(_DWORD *)(a1 + 340) = v29;
  unsigned int v30 = v29 & 0xFFBFFFFF | (((*(_DWORD *)(a2 + 340) >> 22) & 1) << 22);
  *(_DWORD *)(a1 + 340) = v30;
  unsigned int v31 = v30 & 0xFF7FFFFF | (((*(_DWORD *)(a2 + 340) >> 23) & 1) << 23);
  *(_DWORD *)(a1 + 340) = v31;
  unsigned int v32 = v31 & 0xFEFFFFFF | ((HIBYTE(*(_DWORD *)(a2 + 340)) & 1) << 24);
  *(_DWORD *)(a1 + 340) = v32;
  unsigned int v33 = v32 & 0xFDFFFFFF | (((*(_DWORD *)(a2 + 340) >> 25) & 1) << 25);
  *(_DWORD *)(a1 + 340) = v33;
  unsigned int v34 = v33 & 0xFBFFFFFF | (((*(_DWORD *)(a2 + 340) >> 26) & 1) << 26);
  *(_DWORD *)(a1 + 340) = v34;
  unsigned int v35 = v34 & 0xF7FFFFFF | (((*(_DWORD *)(a2 + 340) >> 27) & 1) << 27);
  *(_DWORD *)(a1 + 340) = v35;
  *(_WORD *)(a1 + 344) = *(_WORD *)(a2 + 344);
  *(unsigned char *)(a1 + 346) = *(unsigned char *)(a2 + 346);
  *(_WORD *)(a1 + 347) = *(_WORD *)(a2 + 347);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 196) = *(_OWORD *)(a2 + 196);
  *(void *)(a1 + 212) = *(void *)(a2 + 212);
  unsigned int v36 = v35 & 0xEFFFFFFF | (((*(_DWORD *)(a2 + 340) >> 28) & 1) << 28);
  *(_DWORD *)(a1 + 340) = v36;
  *(_DWORD *)(a1 + 340) = v36 & 0xFFFFFFFE | *(_DWORD *)(a2 + 340) & 1;
  *(_DWORD *)(a1 + 64) = 0;
  bzero(*(void **)(a1 + 56), 2 * *(unsigned int *)(a1 + 68));
  CsString::append((CsString *)(a1 + 48), (const CsString *)(a2 + 48));
  *(unsigned char *)(a1 + 350) = *(unsigned char *)(a2 + 350);
  return a1;
}

WrdTableProperties *WrdTableProperties::clone(WrdTableProperties *this)
{
  unsigned int v17 = (WrdTableAutoformatLookSpecifier *)(*(uint64_t (**)(void))(**((void **)this + 4) + 16))(*((void *)this + 4));
  unsigned int v16 = (WrdTableCellDescriptor *)(*(uint64_t (**)(void))(**((void **)this + 5) + 16))(*((void *)this + 5));
  unsigned int v15 = (WrdShading *)(*(uint64_t (**)(void))(**((void **)this + 6) + 16))(*((void *)this + 6));
  unsigned int v14 = (WrdBorder *)(*(uint64_t (**)(void))(**((void **)this + 7) + 16))(*((void *)this + 7));
  uint64_t v2 = (WrdBorder *)(*(uint64_t (**)(void))(**((void **)this + 8) + 16))(*((void *)this + 8));
  uint64_t v3 = (WrdBorder *)(*(uint64_t (**)(void))(**((void **)this + 9) + 16))(*((void *)this + 9));
  uint64_t v4 = (WrdBorder *)(*(uint64_t (**)(void))(**((void **)this + 10) + 16))(*((void *)this + 10));
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 11) + 16))(*((void *)this + 11));
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 12) + 16))(*((void *)this + 12));
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 13) + 16))(*((void *)this + 13));
  uint64_t v8 = (*(uint64_t (**)(void))(**((void **)this + 14) + 16))(*((void *)this + 14));
  unsigned int v9 = (WrdDateTime *)(*(uint64_t (**)(void))(**((void **)this + 15) + 16))(*((void *)this + 15));
  unsigned int v10 = (WrdTableProperties *)operator new(0x190uLL);
  *((void *)&v13 + 1) = v8;
  *((void *)&v12 + 1) = v6;
  *(void *)&long long v13 = v7;
  *(void *)&long long v12 = v5;
  WrdTableProperties::WrdTableProperties(v10, v17, v16, v15, v14, v2, v3, v4, v12, v13, v9);
  WrdTableProperties::operator=((uint64_t)v10, (uint64_t)this);
  return v10;
}

void sub_238B28368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (v18) {
    WrdCharacterProperties::clone(v18);
  }
  _Unwind_Resume(exception_object);
}

void sub_238B28630()
{
}

void sub_238B28638()
{
}

void sub_238B28640()
{
}

void sub_238B28648()
{
}

uint64_t WrdTableAutoformatLookSpecifier::clone(WrdTableAutoformatLookSpecifier *this)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = &unk_26EBE6D80;
  return WrdTableAutoformatLookSpecifier::operator=((uint64_t)v2, (uint64_t)this);
}

uint64_t WrdTableAutoformatLookSpecifier::operator=(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  int v2 = *(_WORD *)(result + 12) & 0xFFFE | *(_WORD *)(a2 + 12) & 1;
  *(_WORD *)(result + 12) = *(_WORD *)(result + 12) & 0xFFFE | *(_WORD *)(a2 + 12) & 1;
  unsigned int v3 = v2 & 0xFFFFFFFD | (2 * ((*(unsigned __int16 *)(a2 + 12) >> 1) & 1));
  *(_WORD *)(result + 12) = v3;
  unsigned int v4 = v3 & 0xFFFFFFFB | (4 * ((*(unsigned __int16 *)(a2 + 12) >> 2) & 1));
  *(_WORD *)(result + 12) = v4;
  unsigned int v5 = v4 & 0xFFFFFFF7 | (8 * ((*(unsigned __int16 *)(a2 + 12) >> 3) & 1));
  *(_WORD *)(result + 12) = v5;
  unsigned int v6 = v5 & 0xFFFFFFEF | (16 * ((*(unsigned __int16 *)(a2 + 12) >> 4) & 1));
  *(_WORD *)(result + 12) = v6;
  unsigned int v7 = v6 & 0xFFFFFFDF | (32 * ((*(unsigned __int16 *)(a2 + 12) >> 5) & 1));
  *(_WORD *)(result + 12) = v7;
  unsigned int v8 = v7 & 0xFFFFFFBF | (((*(unsigned __int16 *)(a2 + 12) >> 6) & 1) << 6);
  *(_WORD *)(result + 12) = v8;
  unsigned int v9 = v8 & 0xFFFFFF7F | (((*(unsigned __int16 *)(a2 + 12) >> 7) & 1) << 7);
  *(_WORD *)(result + 12) = v9;
  *(_WORD *)(result + 12) = v9 & 0xFEFF | *(_WORD *)(a2 + 12) & 0x100;
  return result;
}

WrdTableCellDescriptor *WrdTableCellDescriptor::clone(WrdTableCellDescriptor *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 3) + 16))(*((void *)this + 3));
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 4) + 16))(*((void *)this + 4));
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 5) + 16))(*((void *)this + 5));
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 6) + 16))(*((void *)this + 6));
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 7) + 16))(*((void *)this + 7));
  uint64_t v8 = (*(uint64_t (**)(void))(**((void **)this + 8) + 16))(*((void *)this + 8));
  unsigned int v9 = (WrdTableCellDescriptor *)operator new(0x88uLL);
  *(void *)unsigned int v9 = &unk_26EBE6DC0;
  *((void *)v9 + 2) = v2;
  *((void *)v9 + 3) = v3;
  *((void *)v9 + 4) = v4;
  *((void *)v9 + 5) = v5;
  *((void *)v9 + 6) = v6;
  *((void *)v9 + 7) = v7;
  *((void *)v9 + 8) = v8;
  WrdTableCellDescriptor::reset(v9);
  WrdTableCellDescriptor::operator=((uint64_t)v9, (uint64_t)this);
  return v9;
}

void sub_238B28918(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdTableCellDescriptor::operator=(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  WrdShading::operator=(*(void *)(a1 + 16), *(void *)(a2 + 16));
  WrdBorder::operator=(*(void *)(a1 + 24), *(void *)(a2 + 24));
  WrdBorder::operator=(*(void *)(a1 + 32), *(void *)(a2 + 32));
  WrdBorder::operator=(*(void *)(a1 + 40), *(void *)(a2 + 40));
  WrdBorder::operator=(*(void *)(a1 + 48), *(void *)(a2 + 48));
  WrdBorder::operator=(*(void *)(a1 + 56), *(void *)(a2 + 56));
  WrdBorder::operator=(*(void *)(a1 + 64), *(void *)(a2 + 64));
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  int v5 = *(_WORD *)(a1 + 130) & 0xFFFE | *(_WORD *)(a2 + 130) & 1;
  *(_WORD *)(a1 + 130) = *(_WORD *)(a1 + 130) & 0xFFFE | *(_WORD *)(a2 + 130) & 1;
  unsigned int v6 = v5 & 0xFFFFFFFD | (2 * ((*(unsigned __int16 *)(a2 + 130) >> 1) & 1));
  *(_WORD *)(a1 + 130) = v6;
  unsigned int v7 = v6 & 0xFFFFFFFB | (4 * ((*(unsigned __int16 *)(a2 + 130) >> 2) & 1));
  *(_WORD *)(a1 + 130) = v7;
  unsigned int v8 = v7 & 0xFFFFFFF7 | (8 * ((*(unsigned __int16 *)(a2 + 130) >> 3) & 1));
  *(_WORD *)(a1 + 130) = v8;
  unsigned int v9 = v8 & 0xFFFFFFEF | (16 * ((*(unsigned __int16 *)(a2 + 130) >> 4) & 1));
  *(_WORD *)(a1 + 130) = v9;
  unsigned int v10 = v9 & 0xFFFFFFDF | (32 * ((*(unsigned __int16 *)(a2 + 130) >> 5) & 1));
  *(_WORD *)(a1 + 130) = v10;
  unsigned int v11 = v10 & 0xFFFFFFBF | (((*(unsigned __int16 *)(a2 + 130) >> 6) & 1) << 6);
  *(_WORD *)(a1 + 130) = v11;
  unsigned int v12 = v11 & 0xFFFFFF7F | (((*(unsigned __int16 *)(a2 + 130) >> 7) & 1) << 7);
  *(_WORD *)(a1 + 130) = v12;
  *(_WORD *)(a1 + 130) = v12 & 0xFEFF | *(_WORD *)(a2 + 130) & 0x100;
  return a1;
}

uint64_t WrdTableProperties::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 296;
  uint64_t v5 = a2 + 296;
  uint64_t v6 = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  WrdTableAutoformatLookSpecifier::operator=(*(void *)(a1 + 32), *(void *)(a2 + 32));
  WrdShading::operator=(*(void *)(a1 + 48), *(void *)(a2 + 48));
  WrdBorder::operator=(*(void *)(a1 + 56), *(void *)(a2 + 56));
  WrdBorder::operator=(*(void *)(a1 + 64), *(void *)(a2 + 64));
  WrdBorder::operator=(*(void *)(a1 + 72), *(void *)(a2 + 72));
  WrdBorder::operator=(*(void *)(a1 + 80), *(void *)(a2 + 80));
  WrdBorder::operator=(*(void *)(a1 + 88), *(void *)(a2 + 88));
  WrdBorder::operator=(*(void *)(a1 + 96), *(void *)(a2 + 96));
  WrdBorder::operator=(*(void *)(a1 + 104), *(void *)(a2 + 104));
  WrdBorder::operator=(*(void *)(a1 + 112), *(void *)(a2 + 112));
  WrdDateTime::operator=(*(void *)(a1 + 120), *(void *)(a2 + 120));
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 180) = *(_OWORD *)(a2 + 180);
  *(_OWORD *)(a1 + 196) = *(_OWORD *)(a2 + 196);
  *(_OWORD *)(a1 + 212) = *(_OWORD *)(a2 + 212);
  *(_OWORD *)(a1 + 228) = *(_OWORD *)(a2 + 228);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v5 + 16);
  *(_WORD *)(a1 + 328) = *(_WORD *)(a2 + 328);
  *(_DWORD *)(a1 + 330) = *(_DWORD *)(a2 + 330);
  int v7 = *(unsigned char *)(a1 + 334) & 0xFE | *(unsigned char *)(a2 + 334) & 1;
  *(unsigned char *)(a1 + 334) = v7;
  unsigned int v8 = v7 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(a2 + 334) >> 1) & 1));
  *(unsigned char *)(a1 + 334) = v8;
  unsigned int v9 = v8 & 0xFFFFFFFB | (4 * ((*(unsigned __int8 *)(a2 + 334) >> 2) & 1));
  *(unsigned char *)(a1 + 334) = v9;
  unsigned int v10 = v9 & 0xFFFFFFF7 | (8 * ((*(unsigned __int8 *)(a2 + 334) >> 3) & 1));
  *(unsigned char *)(a1 + 334) = v10;
  unsigned int v11 = v10 & 0xFFFFFFEF | (16 * ((*(unsigned __int8 *)(a2 + 334) >> 4) & 1));
  *(unsigned char *)(a1 + 334) = v11;
  *(unsigned char *)(a1 + 334) = v11 & 0xDF | *(unsigned char *)(a2 + 334) & 0x20;
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_WORD *)(a1 + 352) = *(_WORD *)(a2 + 352);
  *(_OWORD *)(v4 + 66) = *(_OWORD *)(v5 + 66);
  *(void *)(v4 + 82) = *(void *)(v5 + 82);
  *(void *)(v4 + 90) = *(void *)(v5 + 90);
  *(void *)(a1 + 256) = *(void *)(a1 + 248);
  WrdTableProperties::resetTableCellDescriptors((WrdTableProperties *)a1);
  if (*(__int16 *)(a1 + 344) >= 1)
  {
    uint64_t v12 = 0;
    long long v13 = (void *)(a1 + 264);
    do
    {
      uint64_t v14 = *(void *)(*(void *)(a2 + 272) + 8 * v12);
      uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
      uint64_t v16 = v15;
      uint64_t v18 = *(uint64_t **)(a1 + 280);
      unint64_t v17 = *(void *)(a1 + 288);
      if ((unint64_t)v18 >= v17)
      {
        uint64_t v20 = *(void *)(a1 + 272);
        unint64_t v21 = (unint64_t)v18 - v20;
        unint64_t v22 = (v17 - v20) >> 3;
        unsigned int v23 = 2 * v22;
        if (2 * (int)v22 <= (v21 >> 3) + 1) {
          unsigned int v23 = (v21 >> 3) + 1;
        }
        if (v22 >= 0x7FFFFFFF) {
          unint64_t v24 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24)
        {
          unsigned int v25 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(a1 + 288, v24);
          uint64_t v27 = v26;
        }
        else
        {
          unsigned int v25 = 0;
          uint64_t v27 = 0;
        }
        unsigned int v28 = (uint64_t *)&v25[v21 & 0x7FFFFFFF8];
        *unsigned int v28 = v16;
        unsigned int v19 = v28 + 1;
        unsigned int v30 = *(char **)(a1 + 272);
        unsigned int v29 = *(char **)(a1 + 280);
        if (v29 != v30)
        {
          do
          {
            uint64_t v31 = *((void *)v29 - 1);
            v29 -= 8;
            *--unsigned int v28 = v31;
          }
          while (v29 != v30);
          unsigned int v29 = *(char **)(a1 + 272);
        }
        *(void *)(a1 + 272) = v28;
        *(void *)(a1 + 280) = v19;
        *(void *)(a1 + 288) = &v25[8 * v27];
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        *uint64_t v18 = v15;
        unsigned int v19 = v18 + 1;
      }
      *(void *)(a1 + 280) = v19;
      uint64_t v32 = *(void *)(a2 + 248);
      unsigned int v34 = *(char **)(a1 + 256);
      unint64_t v33 = *(void *)(a1 + 264);
      if ((unint64_t)v34 >= v33)
      {
        unsigned int v36 = *(unsigned char **)(a1 + 248);
        int64_t v37 = v34 - v36;
        unint64_t v38 = (unint64_t)(v34 - v36) >> 1;
        unint64_t v39 = (v33 - (unint64_t)v36) >> 1;
        if (2 * (int)v39 <= (v38 + 1)) {
          unsigned int v40 = v38 + 1;
        }
        else {
          unsigned int v40 = 2 * v39;
        }
        if (v39 >= 0x7FFFFFFF) {
          uint64_t v41 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v41 = v40;
        }
        if (v41)
        {
          unint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(a1 + 264, v41);
          uint64_t v44 = v43;
          unsigned int v36 = *(unsigned char **)(a1 + 248);
          unsigned int v34 = *(char **)(a1 + 256);
        }
        else
        {
          unint64_t v42 = 0;
          uint64_t v44 = 0;
        }
        v45 = &v42[v37 & 0x1FFFFFFFELL];
        *(_WORD *)v45 = *(_WORD *)(v32 + 2 * v12);
        unsigned int v35 = v45 + 2;
        while (v34 != v36)
        {
          __int16 v46 = *((_WORD *)v34 - 1);
          v34 -= 2;
          *((_WORD *)v45 - 1) = v46;
          v45 -= 2;
        }
        *(void *)(a1 + 248) = v45;
        *(void *)(a1 + 256) = v35;
        *(void *)(a1 + 264) = &v42[2 * v44];
        if (v36) {
          operator delete(v36);
        }
      }
      else
      {
        *(_WORD *)unsigned int v34 = *(_WORD *)(v32 + 2 * v12);
        unsigned int v35 = v34 + 2;
      }
      *(void *)(a1 + 256) = v35;
      ++v12;
      uint64_t v47 = *(__int16 *)(a1 + 344);
    }
    while (v12 < v47);
    uint64_t v48 = *(void *)(a2 + 248);
    uint64_t v49 = v47;
    if ((unint64_t)v35 >= *v13)
    {
      uint64_t v51 = *(char **)(a1 + 248);
      int64_t v52 = v35 - v51;
      unint64_t v53 = (unint64_t)(v35 - v51) >> 1;
      uint64_t v54 = (*v13 - (void)v51) >> 1;
      if (2 * (int)v54 <= (v53 + 1)) {
        unsigned int v55 = v53 + 1;
      }
      else {
        unsigned int v55 = 2 * v54;
      }
      if (v54 >= 0x7FFFFFFF) {
        uint64_t v56 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v56 = v55;
      }
      if (v56)
      {
        v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(a1 + 264, v56);
        uint64_t v59 = v58;
        uint64_t v51 = *(char **)(a1 + 248);
        unsigned int v35 = *(char **)(a1 + 256);
      }
      else
      {
        v57 = 0;
        uint64_t v59 = 0;
      }
      unsigned int v60 = &v57[v52 & 0x1FFFFFFFELL];
      unsigned int v61 = &v57[2 * v59];
      *(_WORD *)unsigned int v60 = *(_WORD *)(v48 + 2 * v49);
      unsigned int v50 = v60 + 2;
      while (v35 != v51)
      {
        __int16 v62 = *((_WORD *)v35 - 1);
        v35 -= 2;
        *((_WORD *)v60 - 1) = v62;
        v60 -= 2;
      }
      *(void *)(a1 + 248) = v60;
      *(void *)(a1 + 256) = v50;
      *(void *)(a1 + 264) = v61;
      if (v51) {
        operator delete(v51);
      }
    }
    else
    {
      *(_WORD *)unsigned int v35 = *(_WORD *)(v48 + 2 * v47);
      unsigned int v50 = v35 + 2;
    }
    *(void *)(a1 + 256) = v50;
  }
  return a1;
}

uint64_t WrdStyle::operator=(uint64_t a1, uint64_t a2)
{
  WrdStyle::reset((WrdStyle *)a1);
  *(_DWORD *)(a1 + 24) = 0;
  bzero(*(void **)(a1 + 16), 2 * *(unsigned int *)(a1 + 28));
  CsString::append((CsString *)(a1 + 8), (const CsString *)(a2 + 8));
  *(void *)(a1 + 32) = (*(uint64_t (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
  *(void *)(a1 + 40) = (*(uint64_t (**)(void))(**(void **)(a2 + 40) + 24))(*(void *)(a2 + 40));
  *(void *)(a1 + 48) = (*(uint64_t (**)(void))(**(void **)(a2 + 48) + 24))(*(void *)(a2 + 48));
  *(void *)(a1 + 56) = (*(uint64_t (**)(void))(**(void **)(a2 + 56) + 24))(*(void *)(a2 + 56));
  *(void *)(a1 + 64) = (*(uint64_t (**)(void))(**(void **)(a2 + 64) + 24))(*(void *)(a2 + 64));
  unsigned int v4 = 0;
  *(void *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a2 + 72) + 16))(*(void *)(a2 + 72));
  uint64_t v5 = (uint64_t *)(a2 + 88);
  uint64_t v6 = (uint64_t *)(a2 + 112);
  int v7 = (uint64_t *)(a2 + 136);
  do
  {
    uint64_t v8 = *v5;
    if (!*v5) {
      goto LABEL_20;
    }
    unsigned int v9 = (uint64_t *)*v5;
    while (1)
    {
      unsigned int v10 = *((_DWORD *)v9 + 8);
      if (v10 <= v4) {
        break;
      }
LABEL_7:
      unsigned int v9 = (uint64_t *)*v9;
      if (!v9) {
        goto LABEL_20;
      }
    }
    if (v10 < v4)
    {
      ++v9;
      goto LABEL_7;
    }
    uint64_t v11 = a2 + 88;
    do
    {
      unsigned int v12 = *(_DWORD *)(v8 + 32);
      BOOL v13 = v12 >= v4;
      if (v12 >= v4) {
        uint64_t v14 = (uint64_t *)v8;
      }
      else {
        uint64_t v14 = (uint64_t *)(v8 + 8);
      }
      if (v13) {
        uint64_t v11 = v8;
      }
      uint64_t v8 = *v14;
    }
    while (*v14);
    if ((uint64_t *)v11 == v5 || *(_DWORD *)(v11 + 32) > v4) {
      goto LABEL_58;
    }
    uint64_t v15 = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(v11 + 40) + 24))(*(void *)(v11 + 40));
    unsigned int v37 = v4;
    unint64_t v38 = &v37;
    std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 80), &v37, (uint64_t)&std::piecewise_construct, &v38)[5] = v15;
LABEL_20:
    uint64_t v16 = *v6;
    if (!*v6) {
      goto LABEL_38;
    }
    unint64_t v17 = (uint64_t *)*v6;
    while (2)
    {
      unsigned int v18 = *((_DWORD *)v17 + 8);
      if (v18 > v4)
      {
LABEL_25:
        unint64_t v17 = (uint64_t *)*v17;
        if (!v17) {
          goto LABEL_38;
        }
        continue;
      }
      break;
    }
    if (v18 < v4)
    {
      ++v17;
      goto LABEL_25;
    }
    uint64_t v19 = a2 + 112;
    do
    {
      unsigned int v20 = *(_DWORD *)(v16 + 32);
      BOOL v21 = v20 >= v4;
      if (v20 >= v4) {
        unint64_t v22 = (uint64_t *)v16;
      }
      else {
        unint64_t v22 = (uint64_t *)(v16 + 8);
      }
      if (v21) {
        uint64_t v19 = v16;
      }
      uint64_t v16 = *v22;
    }
    while (*v22);
    if ((uint64_t *)v19 == v6 || *(_DWORD *)(v19 + 32) > v4) {
      goto LABEL_58;
    }
    unsigned int v23 = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(v19 + 40) + 24))(*(void *)(v19 + 40));
    unsigned int v37 = v4;
    unint64_t v38 = &v37;
    std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 104), &v37, (uint64_t)&std::piecewise_construct, &v38)[5] = v23;
LABEL_38:
    uint64_t v24 = *v7;
    if (!*v7) {
      goto LABEL_56;
    }
    unsigned int v25 = (uint64_t *)*v7;
    while (2)
    {
      unsigned int v26 = *((_DWORD *)v25 + 8);
      if (v26 > v4)
      {
LABEL_43:
        unsigned int v25 = (uint64_t *)*v25;
        if (!v25) {
          goto LABEL_56;
        }
        continue;
      }
      break;
    }
    if (v26 < v4)
    {
      ++v25;
      goto LABEL_43;
    }
    uint64_t v27 = a2 + 136;
    do
    {
      unsigned int v28 = *(_DWORD *)(v24 + 32);
      BOOL v29 = v28 >= v4;
      if (v28 >= v4) {
        unsigned int v30 = (uint64_t *)v24;
      }
      else {
        unsigned int v30 = (uint64_t *)(v24 + 8);
      }
      if (v29) {
        uint64_t v27 = v24;
      }
      uint64_t v24 = *v30;
    }
    while (*v30);
    if ((uint64_t *)v27 == v7 || *(_DWORD *)(v27 + 32) > v4)
    {
LABEL_58:
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 1004;
    }
    uint64_t v31 = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(v27 + 40) + 24))(*(void *)(v27 + 40));
    unsigned int v37 = v4;
    unint64_t v38 = &v37;
    std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 128), &v37, (uint64_t)&std::piecewise_construct, &v38)[5] = v31;
LABEL_56:
    ++v4;
  }
  while (v4 != 11);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(void *)(a1 + 156) = *(void *)(a2 + 156);
  int v32 = *(unsigned char *)(a1 + 164) & 0xFD | (2 * ((*(unsigned __int8 *)(a2 + 164) >> 1) & 1));
  *(unsigned char *)(a1 + 164) = v32;
  unsigned int v33 = v32 & 0xFFFFFFEF | (16 * ((*(unsigned __int8 *)(a2 + 164) >> 4) & 1));
  *(unsigned char *)(a1 + 164) = v33;
  unsigned int v34 = v33 & 0xFFFFFFFB | (4 * ((*(unsigned __int8 *)(a2 + 164) >> 2) & 1));
  *(unsigned char *)(a1 + 164) = v34;
  *(unsigned char *)(a1 + 164) = v34 & 0xF7 | *(unsigned char *)(a2 + 164) & 8;
  return a1;
}

uint64_t WrdStyle::reset(WrdStyle *this)
{
  unsigned int v2 = 0;
  uint64_t v3 = (uint64_t **)((char *)this + 80);
  unsigned int v4 = (uint64_t **)((char *)this + 88);
  uint64_t v5 = (uint64_t **)((char *)this + 104);
  uint64_t v6 = (uint64_t **)((char *)this + 112);
  int v7 = (uint64_t **)((char *)this + 128);
  uint64_t v8 = (uint64_t **)((char *)this + 136);
  do
  {
    unsigned int v9 = *v4;
    if (!*v4) {
      goto LABEL_11;
    }
    while (1)
    {
      unsigned int v10 = *((_DWORD *)v9 + 8);
      if (v10 <= v2) {
        break;
      }
LABEL_6:
      unsigned int v9 = (uint64_t *)*v9;
      if (!v9) {
        goto LABEL_11;
      }
    }
    if (v10 < v2)
    {
      ++v9;
      goto LABEL_6;
    }
    unsigned int v24 = v2;
    unsigned int v25 = &v24;
    uint64_t v11 = std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v3, &v24, (uint64_t)&std::piecewise_construct, &v25)[5];
    if (v11) {
      (*(void (**)(uint64_t *))(*v11 + 8))(v11);
    }
    unsigned int v24 = v2;
    unsigned int v25 = &v24;
    std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v3, &v24, (uint64_t)&std::piecewise_construct, &v25)[5] = 0;
LABEL_11:
    for (uint64_t i = *v6; i; uint64_t i = (uint64_t *)*i)
    {
      unsigned int v13 = *((_DWORD *)i + 8);
      if (v13 <= v2)
      {
        if (v13 >= v2)
        {
          unsigned int v24 = v2;
          unsigned int v25 = &v24;
          uint64_t v14 = std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v24, (uint64_t)&std::piecewise_construct, &v25)[5];
          if (v14) {
            (*(void (**)(uint64_t *))(*v14 + 8))(v14);
          }
          unsigned int v24 = v2;
          unsigned int v25 = &v24;
          std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v24, (uint64_t)&std::piecewise_construct, &v25)[5] = 0;
          break;
        }
        ++i;
      }
    }
    uint64_t v15 = *v8;
    if (!*v8) {
      goto LABEL_29;
    }
    while (2)
    {
      unsigned int v16 = *((_DWORD *)v15 + 8);
      if (v16 > v2)
      {
LABEL_24:
        uint64_t v15 = (uint64_t *)*v15;
        if (!v15) {
          goto LABEL_29;
        }
        continue;
      }
      break;
    }
    if (v16 < v2)
    {
      ++v15;
      goto LABEL_24;
    }
    unsigned int v24 = v2;
    unsigned int v25 = &v24;
    unint64_t v17 = std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v7, &v24, (uint64_t)&std::piecewise_construct, &v25)[5];
    if (v17) {
      (*(void (**)(uint64_t *))(*v17 + 8))(v17);
    }
    unsigned int v24 = v2;
    unsigned int v25 = &v24;
    std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v7, &v24, (uint64_t)&std::piecewise_construct, &v25)[5] = 0;
LABEL_29:
    ++v2;
  }
  while (v2 != 12);
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)v3, *((void **)this + 11));
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = v4;
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)v5, *((void **)this + 14));
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 13) = v6;
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)v7, *((void **)this + 17));
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 16) = v8;
  uint64_t v18 = *((void *)this + 4);
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  *((void *)this + 4) = 0;
  uint64_t v19 = *((void *)this + 5);
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  *((void *)this + 5) = 0;
  uint64_t v20 = *((void *)this + 6);
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  *((void *)this + 6) = 0;
  uint64_t v21 = *((void *)this + 7);
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  *((void *)this + 7) = 0;
  uint64_t v22 = *((void *)this + 8);
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  *((void *)this + 8) = 0;
  uint64_t result = *((void *)this + 9);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 9) = 0;
  return result;
}

void WrdParagraphProperties::~WrdParagraphProperties(WrdParagraphProperties *this)
{
  WrdParagraphProperties::~WrdParagraphProperties(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;

  unsigned int v2 = 0;
  *(void *)this = &unk_26EBE6700;
  *((void *)this + 1) = &unk_26EBE6748;
  do
  {
    uint64_t v3 = *((void *)this + 22);
    unsigned int v4 = *(void *)(v3 + v2);
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      uint64_t v3 = *((void *)this + 22);
    }
    *(void *)(v3 + v2) = 0;
    v2 += 8;
  }
  while (v2 != 512);
  *((void *)this + 23) = *((void *)this + 22);
  uint64_t v5 = *((void *)this + 25);
  if (v5) {
    MEMORY[0x23EC99790](v5, 0x1000C80BDFB0063);
  }
  *((void *)this + 25) = 0;
  uint64_t v6 = *((void *)this + 26);
  if (v6) {
    MEMORY[0x23EC99790](v6, 0x1000C80BDFB0063);
  }
  *((void *)this + 26) = 0;
  int v7 = *((void *)this + 27);
  if (v7) {
    MEMORY[0x23EC99790](v7, 0x1000C80BDFB0063);
  }
  *((void *)this + 27) = 0;
  uint64_t v8 = *((void *)this + 4);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *((void *)this + 4) = 0;
  unsigned int v9 = *((void *)this + 5);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *((void *)this + 5) = 0;
  unsigned int v10 = *((void *)this + 6);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  *((void *)this + 6) = 0;
  uint64_t v11 = *((void *)this + 7);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  *((void *)this + 7) = 0;
  unsigned int v12 = *((void *)this + 8);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  *((void *)this + 8) = 0;
  unsigned int v13 = *((void *)this + 9);
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  *((void *)this + 9) = 0;
  uint64_t v14 = *((void *)this + 10);
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  *((void *)this + 10) = 0;
  uint64_t v15 = *((void *)this + 11);
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  *((void *)this + 11) = 0;
  unsigned int v16 = *((void *)this + 12);
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  *((void *)this + 12) = 0;
  unint64_t v17 = *((void *)this + 13);
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  *((void *)this + 13) = 0;
  uint64_t v18 = *((void *)this + 14);
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  *((void *)this + 14) = 0;
  uint64_t v19 = *((void *)this + 15);
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  *((void *)this + 15) = 0;
  uint64_t v20 = *((void *)this + 16);
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  *((void *)this + 16) = 0;
  uint64_t v21 = (void *)*((void *)this + 22);
  if (v21)
  {
    *((void *)this + 23) = v21;
    operator delete(v21);
  }
}

void WrdTabDescriptor::~WrdTabDescriptor(WrdTabDescriptor *this)
{
}

void WrdShading::~WrdShading(WrdShading *this)
{
}

void WrdLineSpaceDescriptor::~WrdLineSpaceDescriptor(WrdLineSpaceDescriptor *this)
{
}

void WrdDropCap::~WrdDropCap(WrdDropCap *this)
{
}

void WrdBorder::~WrdBorder(WrdBorder *this)
{
}

void WrdAutoNumberListDescriptor::~WrdAutoNumberListDescriptor(WrdAutoNumberListDescriptor *this)
{
  WrdAutoNumberListDescriptor::~WrdAutoNumberListDescriptor(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBE5490;
  unsigned int v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 1) = 0;
  CsString::~CsString((CsString *)((char *)this + 16));
}

void WrdAutoNumberLevelDescriptor::~WrdAutoNumberLevelDescriptor(WrdAutoNumberLevelDescriptor *this)
{
}

void WrdNumberRevisionMarkData::~WrdNumberRevisionMarkData(WrdNumberRevisionMarkData *this)
{
  WrdNumberRevisionMarkData::~WrdNumberRevisionMarkData(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(void *)this = &unk_26EBE65C8;
  unsigned int v2 = *((void *)this + 6);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8052888210);
  }
  *((void *)this + 6) = 0;
  uint64_t v3 = *((void *)this + 7);
  if (v3) {
    MEMORY[0x23EC99790](v3, 0x1000C8077774924);
  }
  *((void *)this + 7) = 0;
  unsigned int v4 = *((void *)this + 5);
  if (v4) {
    MEMORY[0x23EC99790](v4, 0x1000C8052888210);
  }
  *((void *)this + 5) = 0;
  uint64_t v5 = *((void *)this + 4);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 4) = 0;
  CsString::~CsString((CsString *)((char *)this + 8));
}

void WrdCharacterProperties::~WrdCharacterProperties(WrdCharacterProperties *this)
{
  WrdCharacterProperties::~WrdCharacterProperties(this);
  JUMPOUT(0x23EC997B0);
}

{
  WrdShading *var6;
  WrdBorder *var7;
  WrdDateTime *var8;
  WrdDateTime *var9;
  WrdDateTime *var10;
  WrdDateTime *var11;
  WrdDateTime *var12;

  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBE5618;
  this->unsigned int var1 = (void **)&unk_26EBE5648;
  var6 = this->var6;
  if (var6) {
    (*((void (**)(WrdShading *))var6->var0 + 1))(var6);
  }
  this->var6 = 0;
  var7 = this->var7;
  if (var7) {
    (*((void (**)(WrdBorder *))var7->var0 + 1))(var7);
  }
  this->var7 = 0;
  var8 = this->var8;
  if (var8) {
    (*((void (**)(WrdDateTime *))var8->var0 + 1))(var8);
  }
  this->var8 = 0;
  var9 = this->var9;
  if (var9) {
    (*((void (**)(WrdDateTime *))var9->var0 + 1))(var9);
  }
  this->var9 = 0;
  var10 = this->var10;
  if (var10) {
    (*((void (**)(WrdDateTime *))var10->var0 + 1))(var10);
  }
  this->var10 = 0;
  var11 = this->var11;
  if (var11) {
    (*((void (**)(WrdDateTime *))var11->var0 + 1))(var11);
  }
  this->var11 = 0;
  var12 = this->var12;
  if (var12) {
    (*((void (**)(WrdDateTime *))var12->var0 + 1))(var12);
  }
  this->var12 = 0;
  CsString::~CsString(&this->var5);
}

void WrdTableProperties::~WrdTableProperties(WrdTableProperties *this)
{
  WrdTableProperties::~WrdTableProperties(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;

  *(void *)this = &unk_26EBE6E00;
  *((void *)this + 1) = &unk_26EBE6E30;
  *((void *)this + 32) = *((void *)this + 31);
  WrdTableProperties::resetTableCellDescriptors(this);
  unsigned int v2 = *((void *)this + 4);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 4) = 0;
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 5) = 0;
  unsigned int v4 = *((void *)this + 6);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 6) = 0;
  uint64_t v5 = *((void *)this + 7);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 7) = 0;
  uint64_t v6 = *((void *)this + 8);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 8) = 0;
  int v7 = *((void *)this + 9);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 9) = 0;
  uint64_t v8 = *((void *)this + 10);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *((void *)this + 10) = 0;
  unsigned int v9 = *((void *)this + 11);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *((void *)this + 11) = 0;
  unsigned int v10 = *((void *)this + 12);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  *((void *)this + 12) = 0;
  uint64_t v11 = *((void *)this + 13);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  *((void *)this + 13) = 0;
  unsigned int v12 = *((void *)this + 14);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  *((void *)this + 14) = 0;
  unsigned int v13 = *((void *)this + 15);
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  *((void *)this + 15) = 0;
  uint64_t v14 = (void *)*((void *)this + 34);
  if (v14)
  {
    *((void *)this + 35) = v14;
    operator delete(v14);
  }
  uint64_t v15 = (void *)*((void *)this + 31);
  if (v15)
  {
    *((void *)this + 32) = v15;
    operator delete(v15);
  }
}

void WrdTableAutoformatLookSpecifier::~WrdTableAutoformatLookSpecifier(WrdTableAutoformatLookSpecifier *this)
{
}

void WrdTableCellDescriptor::~WrdTableCellDescriptor(WrdTableCellDescriptor *this)
{
  WrdTableCellDescriptor::~WrdTableCellDescriptor(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(void *)this = &unk_26EBE6DC0;
  unsigned int v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 3) = 0;
  unsigned int v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 4) = 0;
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 5) = 0;
  uint64_t v6 = *((void *)this + 6);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 6) = 0;
  int v7 = *((void *)this + 7);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 7) = 0;
  uint64_t v8 = *((void *)this + 8);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *((void *)this + 8) = 0;
}

uint64_t WrdStyleSheet::getStyleReference(WrdStyleSheet *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (((unint64_t)(*((void *)this + 4) - v2) >> 3) <= a2) {
    return *((void *)this + 2);
  }
  uint64_t v3 = *(void *)(v2 + 8 * a2);
  if (!v3) {
    return *((void *)this + 2);
  }
  return v3;
}

uint64_t WrdParser::parse(WrdParser *this, WrdStyle *a2, unsigned int a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
  char v7 = *((unsigned char *)a2 + 164);
  if (!result)
  {
    *((unsigned char *)a2 + 164) = v7 & 0xFB;
    return result;
  }
  int v8 = result;
  *((unsigned char *)a2 + 164) = v7 | 4;
  *((_WORD *)a2 + 78) = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16)) & 0xFFF;
  unsigned int v9 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
  *((_DWORD *)a2 + 38) = v9 & 0xF;
  *((_WORD *)a2 + 79) = v9 >> 4;
  unsigned int v10 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
  char v11 = v10;
  *((_WORD *)a2 + 80) = v10 >> 4;
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 2, 1);
  unsigned int v12 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
  *((unsigned char *)a2 + 164) = *((unsigned char *)a2 + 164) & 0xEC | v12 & 1 | (v12 >> 7) & 2 | (v12 >> 5) & 0x10;
  if (a3 < 0xB)
  {
    if (a3 != 10) {
      goto LABEL_43;
    }
    int v14 = 12;
  }
  else
  {
    uint64_t v13 = *((void *)this + 16);
    if (*((int *)this + 38) < 10)
    {
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)v13 + 16))(v13, a3 - 10, 1);
      int v14 = (unsigned __int16)(a3 + 2);
    }
    else
    {
      *((unsigned char *)a2 + 164) = ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 80))(v13) >> 9) & 8 | *((unsigned char *)a2 + 164) & 0xF7;
      (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 6, 1);
      int v14 = 20;
    }
  }
  unsigned int v15 = v8 - v14;
  unsigned int v51 = v15 + 2;
  if (v15 >= 0xFFFFFFFE) {
    goto LABEL_43;
  }
  unsigned int v16 = operator new[](v15 + 2);
  *((void *)this + 36) = v16;
  (*(void (**)(void, void *, unsigned int *))(**((void **)this + 16) + 56))(*((void *)this + 16), v16, &v51);
  unint64_t v17 = (unsigned __int16 *)*((void *)this + 36);
  uint64_t v18 = v51;
  unsigned int UInt16 = CsLeReadUInt16(v17);
  CsString::reserve((CsString *)((char *)a2 + 8), UInt16);
  CsString::setCount((CsString *)((char *)a2 + 8), UInt16);
  uint64_t v20 = *((void *)a2 + 2);
  if (!v20) {
    goto LABEL_43;
  }
  uint64_t v21 = (unsigned __int8 *)v17 + v18;
  uint64_t v22 = 2 * UInt16 + 2;
  if ((char *)v17 + v22 + 2 > (char *)v17 + v18) {
    goto LABEL_43;
  }
  unint64_t v23 = 0;
  int v24 = v11 & 0xF;
  do
  {
    *(_WORD *)(v20 + v23) = CsLeReadUInt16(&v17[v23 / 2 + 1]);
    v23 += 2;
  }
  while (v22 != v23);
  unsigned __int16 v50 = 0;
  unsigned int v25 = &v17[v23 / 2 + 1];
  switch(v24)
  {
    case 1:
      int v30 = *((_DWORD *)a2 + 38);
      if (v30 == 4)
      {
        uint64_t v31 = this;
        int v32 = a2;
        unsigned int v33 = (unsigned __int16 *)((char *)v17 + v18);
        int v34 = 1;
        goto LABEL_30;
      }
      if (v30 == 2)
      {
LABEL_26:
        uint64_t v31 = this;
        int v32 = a2;
        unsigned int v33 = (unsigned __int16 *)((char *)v17 + v18);
        int v34 = 0;
LABEL_30:
        WrdParser::parseUPX(v31, v32, v25, v33, v34, &v50);
        break;
      }
      unsigned int v35 = "Number of UPXs is 1, but style type does NOT correspond";
      int v36 = 590;
LABEL_34:
      ChLogFunction(v35, 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdParser.cpp", v36);
      break;
    case 2:
      int v29 = *((_DWORD *)a2 + 38);
      if (v29 != 2)
      {
        if (v29 == 1)
        {
          WrdParser::parseUPX(this, a2, v25, (unsigned __int16 *)((char *)v17 + v18), 1, &v50);
          unsigned int v28 = (char *)&v17[v23 / 2] + (v50 & 1) + v50;
          goto LABEL_23;
        }
        goto LABEL_28;
      }
      if ((*((unsigned char *)a2 + 164) & 8) == 0)
      {
LABEL_28:
        unsigned int v35 = "Number of UPXs is 2, but style type does NOT correspond";
        int v36 = 640;
        goto LABEL_34;
      }
      WrdParser::parseUPX(this, a2, v25, (unsigned __int16 *)((char *)v17 + v18), 0, &v50);
      uint64_t v37 = (v50 & 1) + v50;
      unint64_t v38 = (char *)&v17[v23 / 2] + v37;
      WrdBaseParser::parseBuffer(this, *((WrdDateTime **)a2 + 9), (unsigned __int8 *)v38 + 6, v21);
      unint64_t v39 = (unsigned __int16 *)(v38 + 12);
      if (v39 <= (unsigned __int16 *)v21)
      {
        *((_WORD *)a2 + 81) = CsLeReadUInt16((unsigned __int16 *)((char *)v17 + v37 + v23 + 10));
        *((unsigned char *)a2 + 164) &= ~8u;
        unsigned int v40 = this;
        uint64_t v41 = a2;
        unint64_t v42 = v39;
LABEL_42:
        WrdParser::parseUPX(v40, v41, v42, (unsigned __int16 *)v21, 0, &v50);
        *((unsigned char *)a2 + 164) |= 8u;
        break;
      }
LABEL_43:
      exception = __cxa_allocate_exception(4uLL);
      int v49 = 2001;
      goto LABEL_44;
    case 3:
      int v26 = *((_DWORD *)a2 + 38);
      if (v26 != 1)
      {
        if (v26 == 3)
        {
          WrdParser::parseUPX(this, a2, v25, (unsigned __int16 *)((char *)v17 + v18), 0, &v50);
          uint64_t v27 = v50;
          WrdParser::parseUPX(this, a2, (unsigned __int16 *)((char *)&v17[v23 / 2 + 1] + (v50 & 1) + v50), (unsigned __int16 *)((char *)v17 + v18), 1, &v50);
          unsigned int v28 = (char *)v17 + (v50 & 1) + v27 + v50 + (v27 & 1) + v23;
LABEL_23:
          unsigned int v25 = (unsigned __int16 *)(v28 + 2);
          goto LABEL_26;
        }
        goto LABEL_32;
      }
      if ((*((unsigned char *)a2 + 164) & 8) == 0)
      {
LABEL_32:
        unsigned int v35 = "Number of UPXs is 3, but style type does NOT correspond";
        int v36 = 707;
        goto LABEL_34;
      }
      WrdParser::parseUPX(this, a2, v25, (unsigned __int16 *)((char *)v17 + v18), 1, &v50);
      uint64_t v43 = v50;
      WrdParser::parseUPX(this, a2, (unsigned __int16 *)((char *)&v17[v23 / 2 + 1] + (v50 & 1) + v50), (unsigned __int16 *)((char *)v17 + v18), 0, &v50);
      uint64_t v44 = v43 + v50;
      uint64_t v45 = v43 & 1;
      uint64_t v46 = v50 & 1;
      if ((uint64_t)(v18 - v46 - (v44 + v45) - v23 - 2) > 9)
      {
        uint64_t v47 = (char *)v17 + v46 + v44 + v45 + v23;
        WrdBaseParser::parseBuffer(this, *((WrdDateTime **)a2 + 9), (unsigned __int8 *)v47 + 6, v21);
        *((_WORD *)a2 + 81) = CsLeReadUInt16((unsigned __int16 *)v47 + 5);
        *((unsigned char *)a2 + 164) &= ~8u;
        WrdParser::parseUPX(this, a2, (unsigned __int16 *)v47 + 6, (unsigned __int16 *)v21, 1, &v50);
        unint64_t v42 = (unsigned __int16 *)((char *)v17 + (v50 & 1) + v23 + v44 + v50 + v45 + v46 + 12);
        unsigned int v40 = this;
        uint64_t v41 = a2;
        goto LABEL_42;
      }
      exception = __cxa_allocate_exception(4uLL);
      int v49 = 1004;
LABEL_44:
      _DWORD *exception = v49;
  }
  uint64_t result = *((void *)this + 36);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  *((void *)this + 36) = 0;
  return result;
}

uint64_t WrdParser::parseUPX(WrdParser *this, WrdStyle *a2, unsigned __int16 *a3, unsigned __int16 *a4, int a5, unsigned __int16 *a6)
{
  if (!a3 || a3 >= a4 || (char *)a4 - (char *)a3 <= 1) {
    goto LABEL_20;
  }
  uint64_t result = CsLeReadUInt16(a3);
  *a6 = result;
  if (!result) {
    return result;
  }
  uint64_t v13 = (char *)(a3 + 1);
  if (!a5)
  {
    unsigned int v16 = 0;
    goto LABEL_9;
  }
  if ((char *)a4 - v13 <= 1)
  {
LABEL_20:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  ResolvedParaPropsReference = (WrdParagraphProperties *)WrdStyle::getResolvedParaPropsReference(a2);
  __int16 UInt16 = CsLeReadUInt16(a3 + 1);
  WrdParagraphProperties::setParagraphStyleIndex(ResolvedParaPropsReference, UInt16);
  uint64_t v13 = (char *)(a3 + 2);
  unsigned int v16 = 2;
LABEL_9:
  unint64_t v17 = operator new(0x10uLL);
  void *v17 = 0;
  v17[1] = 0;
  unsigned __int16 SizeOfSPRMParameter = 0;
  unsigned int v18 = *a6;
  if (v16 < v18)
  {
    do
    {
      WrdPropertyParser::parseSPRM((unsigned __int16 *)v13, (unint64_t)a4, &SizeOfSPRMParameter, (uint64_t)v17);
      unsigned __int16 v19 = SizeOfSPRMParameter;
      uint64_t v20 = (unsigned __int16 *)&v13[SizeOfSPRMParameter];
      int v21 = *(_DWORD *)v17;
      if (*(_DWORD *)v17 == 1)
      {
        WrdPapParser::applySprm((WrdParser *)((char *)this + 256), a2, (uint64_t)v17, v20, a4, &SizeOfSPRMParameter, (uint64_t)this);
      }
      else if (v21 == 2)
      {
        WrdChpParser::applySprm((WrdParser *)((char *)this + 252), a2, (uint64_t)v17, v20, a4, &SizeOfSPRMParameter, (uint64_t)this);
      }
      else if (v21 == 5)
      {
        WrdTapParser::applySprm((WrdParser *)((char *)this + 264), (uint64_t)a2, (uint64_t)v17, v20, a4, &SizeOfSPRMParameter, (uint64_t)this);
      }
      else
      {
        unsigned __int16 SizeOfSPRMParameter = WrdProperty::getSizeOfSPRMParameter((uint64_t)v17);
      }
      uint64_t v13 = (char *)v20 + SizeOfSPRMParameter;
      LOWORD(v16) = SizeOfSPRMParameter + v19 + v16;
      unsigned int v18 = *a6;
    }
    while (v18 > (unsigned __int16)v16);
  }
  *a6 = v18 + 2;
  return MEMORY[0x23EC997B0](v17, 0x1000C4099076E91);
}

uint64_t WrdStyle::getResolvedParaPropsReference(WrdStyle *this)
{
  uint64_t v1 = 40;
  if ((*((unsigned char *)this + 164) & 8) == 0) {
    uint64_t v1 = 32;
  }
  return *(void *)((char *)this + v1);
}

WrdParagraphProperties *WrdParagraphProperties::setParagraphStyleIndex(WrdParagraphProperties *this, __int16 a2)
{
  *((void *)this + 2) |= 1uLL;
  *((_WORD *)this + 70) = a2;
  return this;
}

unsigned __int16 *WrdPropertyParser::parseSPRM(unsigned __int16 *result, unint64_t a2, _WORD *a3, uint64_t a4)
{
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v5 = result;
  if ((unint64_t)result >= a2) {
    goto LABEL_12;
  }
  if (a2 - (unint64_t)result <= 2)
  {
    *(_DWORD *)(a4 + 8) = 0;
    *(_WORD *)(a4 + 12) = 0;
    *(void *)a4 = 0x100000000;
    *a3 = a2 - (_WORD)result;
    return result;
  }
  uint64_t result = (unsigned __int16 *)CsLeReadUInt16(result);
  *(_WORD *)(a4 + 8) = (_WORD)result;
  *a3 = 2;
  unsigned int v8 = *(unsigned __int16 *)(a4 + 8);
  *(_WORD *)(a4 + 10) = v8 & 0x1FF;
  *(unsigned char *)(a4 + 12) = (v8 & 0x200) != 0;
  *(_DWORD *)a4 = (v8 >> 10) & 7;
  *(_DWORD *)(a4 + 4) = v8 >> 13;
  if (v8 >> 13 == 6)
  {
    if ((unint64_t)(v5 + 1) < a2)
    {
      int v9 = *((unsigned __int8 *)v5 + 2);
      *(unsigned char *)(a4 + 13) = v9;
      if (v9 || v8 == 50709 || v8 == 54792)
      {
        ++*a3;
        return result;
      }
    }
LABEL_12:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 2001;
  }
  *(unsigned char *)(a4 + 13) = 0;
  return result;
}

WrdBaseParser *WrdChpParser::applySprm(WrdBaseParser *result, WrdStyle *this, uint64_t a3, unsigned __int16 *a4, unsigned __int16 *a5, unsigned __int16 *a6, uint64_t a7)
{
  unsigned int v12 = result;
  if (*(unsigned __int16 *)(a3 + 8) == 51845)
  {
    if (*((_DWORD *)this + 38) == 3)
    {
      *a6 = WrdProperty::getSizeOfSPRMParameter(a3);
      unsigned int v25 = a4 + 1;
      if (a4 + 1 > a5)
      {
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = 1004;
      }
      uint64_t result = (WrdBaseParser *)CsLeReadUInt16(a4);
      unsigned int v28 = result;
      for (unsigned int i = 0; i != 12; ++i)
      {
        if ((v28 >> i))
        {
          unsigned __int16 v29 = 0;
          int v14 = operator new(0x10uLL);
          uint64_t v15 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a7 + 280) + 16))(*(void *)(a7 + 280), 10);
          if (v15) {
            unsigned int v16 = (WrdCharacterProperties *)(v15 - 8);
          }
          else {
            unsigned int v16 = 0;
          }
          if (*a6 >= 3u)
          {
            unsigned __int16 v17 = 2;
            unsigned int v18 = v25;
            do
            {
              WrdPropertyParser::parseSPRM(v18, (unint64_t)a5, &v29, (uint64_t)v14);
              unsigned __int16 v19 = v29;
              uint64_t v20 = (unsigned __int8 *)v18 + v29;
              if (*v14 == 2)
              {
                WrdChpParser::applySprm(v12, (uint64_t)v16, 0, (uint64_t)v14, v20, a5, &v29);
                int SizeOfSPRMParameter = v29;
              }
              else
              {
                int SizeOfSPRMParameter = WrdProperty::getSizeOfSPRMParameter((uint64_t)v14);
                unsigned __int16 v29 = SizeOfSPRMParameter;
              }
              unsigned int v18 = (unsigned __int16 *)&v20[SizeOfSPRMParameter];
              v17 += SizeOfSPRMParameter + v19;
            }
            while (*a6 > v17);
          }
          WrdCharacterProperties::clearAllRevisionAttributes(v16);
          uint64_t result = (WrdBaseParser *)WrdStyle::takeCharProps((uint64_t)this, i, (uint64_t *)v16);
          if (v14) {
            uint64_t result = (WrdBaseParser *)MEMORY[0x23EC997B0](v14, 0x1000C4099076E91);
          }
        }
      }
    }
  }
  else
  {
    uint64_t ResolvedCharProps = WrdStyle::getResolvedCharProps(this);
    WrdChpParser::applySprm(v12, ResolvedCharProps, 0, a3, (unsigned __int8 *)a4, a5, a6);
    unint64_t v23 = (WrdCharacterProperties *)WrdStyle::getResolvedCharProps(this);
    return (WrdBaseParser *)WrdCharacterProperties::clearAllRevisionAttributes(v23);
  }
  return result;
}

void sub_238B2B204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (v11) {
    MEMORY[0x23EC997B0](v11, 0x1000C4099076E91);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WrdStyle::getResolvedCharProps(WrdStyle *this)
{
  uint64_t v1 = 56;
  if ((*((unsigned char *)this + 164) & 8) == 0) {
    uint64_t v1 = 48;
  }
  return *(void *)((char *)this + v1);
}

void WrdChpParser::applySprm(WrdBaseParser *a1, uint64_t a2, WrdCharacterProperties *a3, uint64_t a4, unsigned __int8 *a5, unsigned __int16 *a6, _WORD *a7)
{
  if (*(_DWORD *)a4 != 2)
  {
    exception = __cxa_allocate_exception(4uLL);
    int v119 = 2002;
LABEL_479:
    _DWORD *exception = v119;
  }
  char v7 = a5;
  if (!a5) {
    goto LABEL_477;
  }
  unsigned int SizeOfSPRMParameter = WrdProperty::getSizeOfSPRMParameter(a4);
  *a7 = SizeOfSPRMParameter;
  unsigned int v15 = *(unsigned __int16 *)(a4 + 8);
  if (v15 <= 0x484D)
  {
    if (*(unsigned __int16 *)(a4 + 8) <= 0x2858u)
    {
      if (*(unsigned __int16 *)(a4 + 8) > 0x853u)
      {
        switch(*(_WORD *)(a4 + 8))
        {
          case 0x854:
            if (v7 >= (unsigned __int8 *)a6) {
              goto LABEL_477;
            }
            int v24 = *v7;
            WrdCharacterProperties::setEngraved(a2, v24);
            return;
          case 0x855:
            if (v7 >= (unsigned __int8 *)a6) {
              goto LABEL_477;
            }
            char v27 = *v7 == 1;
            int v26 = (WrdCharacterProperties *)a2;
            goto LABEL_239;
          case 0x856:
            if (v7 >= (unsigned __int8 *)a6) {
              goto LABEL_477;
            }
            char v67 = *v7 == 1;
            WrdCharacterProperties::setEmbeddedObject((WrdCharacterProperties *)a2, v67);
            return;
          case 0x857:
          case 0x859:
          case 0x85E:
          case 0x85F:
          case 0x860:
          case 0x861:
          case 0x862:
          case 0x863:
          case 0x864:
          case 0x865:
          case 0x866:
          case 0x867:
            return;
          case 0x858:
            if (v7 >= (unsigned __int8 *)a6) {
              goto LABEL_477;
            }
            int v68 = *v7;
            WrdCharacterProperties::setEmbossed(a2, v68);
            return;
          case 0x85A:
            if (v7 >= (unsigned __int8 *)a6) {
              goto LABEL_477;
            }
            int v69 = *v7;
            WrdCharacterProperties::setRightToLeft(a2, v69);
            return;
          case 0x85B:
            uint64_t v20 = "Unimplemented sprm code 0x085B\n";
            int v21 = 668;
            goto LABEL_469;
          case 0x85C:
            if (v7 >= (unsigned __int8 *)a6) {
              goto LABEL_477;
            }
            int v70 = *v7;
            WrdCharacterProperties::setBoldBi(a2, v70);
            return;
          case 0x85D:
            if (v7 >= (unsigned __int8 *)a6) {
              goto LABEL_477;
            }
            int v71 = *v7;
            WrdCharacterProperties::setItalicBi(a2, v71);
            return;
          case 0x868:
            if (v7 >= (unsigned __int8 *)a6) {
              goto LABEL_477;
            }
            char v72 = *v7;
            WrdCharacterProperties::setUsePageSetupLinePitch((WrdCharacterProperties *)a2, v72);
            return;
          default:
            if (v15 != 2165) {
              return;
            }
            if (v7 >= (unsigned __int8 *)a6) {
              goto LABEL_477;
            }
            char v51 = *v7 == 1;
            WrdCharacterProperties::setNoProof((WrdCharacterProperties *)a2, v51);
            break;
        }
      }
      else
      {
        switch(*(_WORD *)(a4 + 8))
        {
          case 0x835:
            if (v7 >= (unsigned __int8 *)a6) {
              goto LABEL_477;
            }
            WrdCharacterProperties::setBold(a2, *v7);
            if (a3)
            {
              int v16 = WrdCharacterProperties::resolveToAbsolute(a3->var23, *(_DWORD *)(a2 + 168));
              WrdCharacterProperties::setBold((uint64_t)a3, v16);
            }
            break;
          case 0x836:
            if (v7 >= (unsigned __int8 *)a6) {
              goto LABEL_477;
            }
            WrdCharacterProperties::setItalic(a2, *v7);
            if (a3)
            {
              int v87 = WrdCharacterProperties::resolveToAbsolute(a3->var24, *(_DWORD *)(a2 + 172));
              WrdCharacterProperties::setItalic((uint64_t)a3, v87);
            }
            break;
          case 0x837:
            if (v7 >= (unsigned __int8 *)a6) {
              goto LABEL_477;
            }
            WrdCharacterProperties::setStrikethrough(a2, *v7);
            if (a3)
            {
              int v88 = WrdCharacterProperties::resolveToAbsolute(a3->var26, *(_DWORD *)(a2 + 180));
              WrdCharacterProperties::setStrikethrough((uint64_t)a3, v88);
            }
            break;
          case 0x838:
            if (v7 >= (unsigned __int8 *)a6) {
              goto LABEL_477;
            }
            WrdCharacterProperties::setOutline(a2, *v7);
            if (a3)
            {
              int v89 = WrdCharacterProperties::resolveToAbsolute(a3->var25, *(_DWORD *)(a2 + 176));
              WrdCharacterProperties::setOutline((uint64_t)a3, v89);
            }
            break;
          case 0x839:
            if (v7 >= (unsigned __int8 *)a6) {
              goto LABEL_477;
            }
            WrdCharacterProperties::setShadow(a2, *v7);
            if (a3)
            {
              int v90 = WrdCharacterProperties::resolveToAbsolute(a3->var30, *(_DWORD *)(a2 + 196));
              WrdCharacterProperties::setShadow((uint64_t)a3, v90);
            }
            break;
          case 0x83A:
            if (v7 >= (unsigned __int8 *)a6) {
              goto LABEL_477;
            }
            WrdCharacterProperties::setSmallCaps(a2, *v7);
            if (a3)
            {
              int v91 = WrdCharacterProperties::resolveToAbsolute(a3->var27, *(_DWORD *)(a2 + 184));
              WrdCharacterProperties::setSmallCaps((uint64_t)a3, v91);
            }
            break;
          case 0x83B:
            if (v7 >= (unsigned __int8 *)a6) {
              goto LABEL_477;
            }
            WrdCharacterProperties::setCaps(a2, *v7);
            if (a3)
            {
              int v92 = WrdCharacterProperties::resolveToAbsolute(a3->var28, *(_DWORD *)(a2 + 188));
              WrdCharacterProperties::setCaps((uint64_t)a3, v92);
            }
            break;
          case 0x83C:
            if (v7 >= (unsigned __int8 *)a6) {
              goto LABEL_477;
            }
            if (*v7 == 255) {
              int v93 = 1;
            }
            else {
              int v93 = *v7;
            }
            WrdCharacterProperties::setHidden(a2, v93);
            break;
          default:
            switch(*(_WORD *)(a4 + 8))
            {
              case 0x800:
                if (v7 >= (unsigned __int8 *)a6) {
                  goto LABEL_477;
                }
                int v28 = *v7;
                WrdCharacterProperties::setRevisionMarkDelete(a2, v28);
                return;
              case 0x801:
                if (v7 >= (unsigned __int8 *)a6) {
                  goto LABEL_477;
                }
                int v55 = *v7;
                WrdCharacterProperties::setRevisionMark(a2, v55);
                return;
              case 0x802:
                if (v7 >= (unsigned __int8 *)a6) {
                  goto LABEL_477;
                }
                int v56 = *v7;
                WrdCharacterProperties::setFieldVanish(a2, v56);
                return;
              case 0x803:
              case 0x804:
              case 0x805:
              case 0x807:
              case 0x808:
              case 0x809:
                return;
              case 0x806:
                if (v7 >= (unsigned __int8 *)a6) {
                  goto LABEL_477;
                }
                char v57 = *v7 == 1;
                WrdCharacterProperties::setData((WrdCharacterProperties *)a2, v57);
                return;
              case 0x80A:
                if (v7 >= (unsigned __int8 *)a6) {
                  goto LABEL_477;
                }
                char v58 = *v7 == 1;
                WrdCharacterProperties::setOle2((WrdCharacterProperties *)a2, v58);
                return;
              default:
                if (v15 != 2065) {
                  return;
                }
                if (v7 >= (unsigned __int8 *)a6) {
                  goto LABEL_477;
                }
                char v52 = *v7 == 1;
                WrdCharacterProperties::setHiddenInWebView((WrdCharacterProperties *)a2, v52);
                break;
            }
            return;
        }
      }
      return;
    }
    if (*(unsigned __int16 *)(a4 + 8) <= 0x2A3Du)
    {
      if (*(unsigned __int16 *)(a4 + 8) > 0x2A0Bu)
      {
        if (*(unsigned __int16 *)(a4 + 8) > 0x2A32u)
        {
          if (v15 == 10803)
          {
            if (v7 >= (unsigned __int8 *)a6) {
              goto LABEL_477;
            }
            char v112 = *v7 == 1;
            WrdCharacterProperties::setUseParagraphStylesProperties((WrdCharacterProperties *)a2, v112);
          }
          else
          {
            if (v15 != 10804) {
              return;
            }
            if (v7 >= (unsigned __int8 *)a6) {
              goto LABEL_477;
            }
            int v49 = *v7;
            WrdCharacterProperties::setEmphasisMark(a2, v49);
          }
        }
        else if (v15 == 10764)
        {
          if (v7 >= (unsigned __int8 *)a6) {
            goto LABEL_477;
          }
          WrdCharacterProperties::setHighlightColor97(a2, *v7);
          char v100 = *(_DWORD *)(a2 + 156) != 0;
          WrdCharacterProperties::setHighlighted((WrdCharacterProperties *)a2, v100);
        }
        else if (v15 == 10802)
        {
          WrdCharacterProperties::setBold(a2, 0);
          WrdCharacterProperties::setItalic(a2, 0);
          WrdCharacterProperties::setOutline(a2, 0);
          WrdCharacterProperties::setStrikethrough(a2, 0);
          WrdCharacterProperties::setShadow(a2, 0);
          WrdCharacterProperties::setSmallCaps(a2, 0);
          WrdCharacterProperties::setCaps(a2, 0);
          WrdCharacterProperties::setHidden(a2, 0);
          WrdCharacterProperties::setUnderline(a2, 0);
          uint64_t v37 = a2;
          int v38 = 0;
LABEL_271:
          WrdCharacterProperties::setColor97(v37, v38);
        }
      }
      else
      {
        switch(*(_WORD *)(a4 + 8))
        {
          case 0x2879:
            if (v7 >= (unsigned __int8 *)a6) {
              goto LABEL_477;
            }
            int v74 = *v7;
            WrdCharacterProperties::setLineBreak(a2, v74);
            return;
          case 0x287A:
          case 0x287B:
          case 0x287C:
            return;
          case 0x287D:
            uint64_t v20 = "Unimplemented sprm code 0x287D\n";
            int v21 = 841;
            goto LABEL_469;
          case 0x287E:
            uint64_t v20 = "Unimplemented sprm code 0x287E\n";
            int v21 = 878;
            goto LABEL_469;
          case 0x287F:
          case 0x2880:
            uint64_t v20 = "Unimplemented sprm code 0x287F or 0x2880\n";
            int v21 = 930;
            goto LABEL_469;
          default:
            if (v15 == 10329)
            {
              if (v7 >= (unsigned __int8 *)a6) {
                goto LABEL_477;
              }
              int v113 = *v7;
              WrdCharacterProperties::setTextAnimation(a2, v113);
            }
            else
            {
              if (v15 != 10351) {
                return;
              }
              if (v7 >= (unsigned __int8 *)a6) {
                goto LABEL_477;
              }
              unsigned __int8 v41 = *v7;
              WrdCharacterProperties::setCharacterTypeIDHint((WrdCharacterProperties *)a2, v41);
            }
            break;
        }
      }
    }
    else
    {
      if (*(unsigned __int16 *)(a4 + 8) <= 0x2A82u)
      {
        switch(*(_WORD *)(a4 + 8))
        {
          case 0x2A3E:
            if (v7 >= (unsigned __int8 *)a6) {
              goto LABEL_477;
            }
            if (a3) {
              WrdCharacterProperties::setUnderline((uint64_t)a3, *v7);
            }
            int v18 = *v7;
            WrdCharacterProperties::setUnderline(a2, v18);
            return;
          case 0x2A3F:
          case 0x2A40:
          case 0x2A41:
          case 0x2A43:
          case 0x2A45:
          case 0x2A47:
            return;
          case 0x2A42:
            if (v7 >= (unsigned __int8 *)a6) {
              goto LABEL_477;
            }
            if (a3) {
              WrdCharacterProperties::setColor97((uint64_t)a3, *v7);
            }
            int v38 = *v7;
            uint64_t v37 = a2;
            goto LABEL_271;
          case 0x2A44:
            uint64_t v20 = "Unimplemented sprm code 0x2A44\n";
            int v21 = 466;
            goto LABEL_469;
          case 0x2A46:
            uint64_t v20 = "Unimplemented sprm code 0x2A46\n";
            int v21 = 478;
            goto LABEL_469;
          case 0x2A48:
            if (v7 >= (unsigned __int8 *)a6) {
              goto LABEL_477;
            }
            int v73 = *v7;
            WrdCharacterProperties::setSuperSubscript(a2, v73);
            return;
          default:
            if (v15 != 10835) {
              return;
            }
            if (v7 >= (unsigned __int8 *)a6) {
              goto LABEL_477;
            }
            char v53 = *v7 == 1;
            WrdCharacterProperties::setDoubleStrikethrough((WrdCharacterProperties *)a2, v53);
            break;
        }
        return;
      }
      if (*(unsigned __int16 *)(a4 + 8) > 0x4806u)
      {
        switch(v15)
        {
          case 0x4807u:
            if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1) {
              goto LABEL_477;
            }
            __int16 UInt16 = CsLeReadUInt16((unsigned __int16 *)v7);
            WrdCharacterProperties::setIndexToStringsForReasons((WrdCharacterProperties *)a2, UInt16);
            break;
          case 0x4845u:
            if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1) {
              goto LABEL_477;
            }
            signed __int16 SInt16 = CsLeReadSInt16((__int16 *)v7);
            WrdCharacterProperties::setCharacterPosition((WrdCharacterProperties *)a2, SInt16);
            break;
          case 0x484Bu:
            if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1) {
              goto LABEL_477;
            }
            unsigned __int16 v39 = CsLeReadUInt16((unsigned __int16 *)v7);
            WrdCharacterProperties::setKerning((WrdCharacterProperties *)a2, v39);
            break;
          default:
            return;
        }
      }
      else
      {
        if (v15 != 10883)
        {
          if (v15 != 10896)
          {
            if (v15 != 18436) {
              return;
            }
            if (a6 > (unsigned __int16 *)v7 && (unint64_t)((char *)a6 - (char *)v7) > 1)
            {
              unsigned __int16 v29 = CsLeReadUInt16((unsigned __int16 *)v7);
              WrdCharacterProperties::setIndexToAuthorIDOfRevisionEdit((WrdCharacterProperties *)a2, v29);
              return;
            }
            goto LABEL_477;
          }
          if (v7 < (unsigned __int8 *)a6)
          {
            char v96 = *v7;
            WrdCharacterProperties::setXmlTag((WrdCharacterProperties *)a2, v96);
            return;
          }
          goto LABEL_477;
        }
        if (v7 >= (unsigned __int8 *)a6) {
          goto LABEL_477;
        }
        char v95 = *v7;
LABEL_451:
        WrdCharacterProperties::setRevisionProperties((WrdCharacterProperties *)a2, v95);
      }
    }
    return;
  }
  if (*(unsigned __int16 *)(a4 + 8) <= 0x6864u)
  {
    if (*(unsigned __int16 *)(a4 + 8) <= 0x4A2Fu)
    {
      if (*(unsigned __int16 *)(a4 + 8) <= 0x485Eu)
      {
        if (v15 == 18510)
        {
          if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1) {
            goto LABEL_477;
          }
          WrdCharacterProperties::setHyphenationRule(a2, *v7);
          unsigned __int8 v107 = v7[1];
          WrdCharacterProperties::setHyphenationChangeCharacter((WrdCharacterProperties *)a2, v107);
        }
        else
        {
          if (v15 != 18514) {
            return;
          }
          if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1) {
            goto LABEL_477;
          }
          unsigned __int16 v40 = CsLeReadUInt16((unsigned __int16 *)v7);
          WrdCharacterProperties::setCharacterScale((WrdCharacterProperties *)a2, v40);
        }
      }
      else
      {
        switch(*(_WORD *)(a4 + 8))
        {
          case 0x485F:
            if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1) {
              goto LABEL_477;
            }
            int v75 = CsLeReadUInt16((unsigned __int16 *)v7);
            WrdCharacterProperties::setLanguageIDForBiText(a2, v75);
            return;
          case 0x4860:
          case 0x4861:
          case 0x4862:
          case 0x4864:
          case 0x4865:
          case 0x4868:
          case 0x4869:
          case 0x486A:
          case 0x486C:
          case 0x486F:
          case 0x4870:
          case 0x4871:
          case 0x4872:
            return;
          case 0x4863:
            if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1) {
              goto LABEL_477;
            }
            int v76 = CsLeReadUInt16((unsigned __int16 *)v7);
            if (v76 != 0xFFFF)
            {
              WrdCharacterProperties::setIndexToAuthorIDOfRevisionDelete((WrdCharacterProperties *)a2, v76);
            }
            return;
          case 0x4866:
            ShadingReference = WrdCharacterProperties::getShadingReference((WrdCharacterProperties *)a2);
            WrdBaseParser::parseSHD80(a1, ShadingReference, (unsigned __int16 *)v7, a6);
            return;
          case 0x4867:
            if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1) {
              goto LABEL_477;
            }
            __int16 v78 = CsLeReadUInt16((unsigned __int16 *)v7);
            WrdCharacterProperties::setIndexToStringsForReasonsOfDeletion((WrdCharacterProperties *)a2, v78);
            return;
          case 0x486B:
            if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1) {
              goto LABEL_477;
            }
            int v79 = CsLeReadUInt16((unsigned __int16 *)v7);
            WrdCharacterProperties::setCodePageForPreUnicodeFiles(a2, v79);
            return;
          case 0x486D:
          case 0x4873:
            if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1) {
              goto LABEL_477;
            }
            int v19 = CsLeReadUInt16((unsigned __int16 *)v7);
            WrdCharacterProperties::setLanguageIDForDefaultText(a2, v19);
            return;
          case 0x486E:
          case 0x4874:
            if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1) {
              goto LABEL_477;
            }
            int v50 = CsLeReadUInt16((unsigned __int16 *)v7);
            WrdCharacterProperties::setLanguageIDForFarEastAsianText(a2, v50);
            return;
          default:
            if (v15 != 18568) {
              return;
            }
            if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1) {
              goto LABEL_477;
            }
            __int16 v54 = CsLeReadUInt16((unsigned __int16 *)v7) != 0;
            WrdCharacterProperties::setListCharacterPictureBullet((WrdCharacterProperties *)a2, v54);
            break;
        }
      }
      return;
    }
    if (*(unsigned __int16 *)(a4 + 8) <= 0x4A5Du)
    {
      switch(*(_WORD *)(a4 + 8))
      {
        case 0x4A4D:
          if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1) {
            goto LABEL_477;
          }
          int v22 = CsLeReadSInt16((__int16 *)v7);
          ChLogFunction("Do not understand how percentage number is stored yet for CHP SPRM 0x4A4D which applies to font size", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdChpParser.cpp", 528);
          int v23 = (int)((double)v22 / 100.0);
          goto LABEL_229;
        case 0x4A4E:
          return;
        case 0x4A4F:
          if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1) {
            goto LABEL_477;
          }
          if (a3)
          {
            unsigned __int16 v59 = CsLeReadUInt16((unsigned __int16 *)v7);
            WrdCharacterProperties::setFontIndexForASCIIText(a3, v59);
          }
          unsigned __int16 v60 = CsLeReadUInt16((unsigned __int16 *)v7);
          WrdCharacterProperties::setFontIndexForASCIIText((WrdCharacterProperties *)a2, v60);
          return;
        case 0x4A50:
          if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1) {
            goto LABEL_477;
          }
          unsigned __int16 v61 = CsLeReadUInt16((unsigned __int16 *)v7);
          WrdCharacterProperties::setFontIndexForFarEastAsianText((WrdCharacterProperties *)a2, v61);
          return;
        case 0x4A51:
          if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1) {
            goto LABEL_477;
          }
          if (a3)
          {
            unsigned __int16 v62 = CsLeReadUInt16((unsigned __int16 *)v7);
            WrdCharacterProperties::setFontIndexForOtherText(a3, v62);
          }
          unsigned __int16 v63 = CsLeReadUInt16((unsigned __int16 *)v7);
          WrdCharacterProperties::setFontIndexForOtherText((WrdCharacterProperties *)a2, v63);
          return;
        default:
          if (v15 == 18992)
          {
            if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1) {
              goto LABEL_477;
            }
            unsigned __int16 v114 = CsLeReadUInt16((unsigned __int16 *)v7);
            WrdCharacterProperties::setStyleIndex((WrdCharacterProperties *)a2, v114);
          }
          else
          {
            if (v15 != 19011) {
              return;
            }
            if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1) {
              goto LABEL_477;
            }
            if (a3)
            {
              unsigned __int16 v42 = CsLeReadUInt16((unsigned __int16 *)v7);
              WrdCharacterProperties::setFontSize(a3, v42);
            }
LABEL_228:
            LOWORD(v23) = CsLeReadUInt16((unsigned __int16 *)v7);
LABEL_229:
            v64 = (WrdCharacterProperties *)a2;
LABEL_230:
            WrdCharacterProperties::setFontSize(v64, v23);
          }
          break;
      }
      return;
    }
    if (*(unsigned __int16 *)(a4 + 8) <= 0x6804u)
    {
      if (v15 == 19038)
      {
        if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1) {
          goto LABEL_477;
        }
        unsigned __int16 v109 = CsLeReadUInt16((unsigned __int16 *)v7);
        WrdCharacterProperties::setFontIndexForBiText((WrdCharacterProperties *)a2, v109);
      }
      else
      {
        if (v15 != 19041) {
          return;
        }
        if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1) {
          goto LABEL_477;
        }
        unsigned __int16 v48 = CsLeReadUInt16((unsigned __int16 *)v7);
        WrdCharacterProperties::setFontSizeForBiText((WrdCharacterProperties *)a2, v48);
      }
      return;
    }
    switch(v15)
    {
      case 0x6805u:
        uint64_t RevisionEditReference = WrdCharacterProperties::getRevisionEditReference((WrdCharacterProperties *)a2);
        break;
      case 0x680Eu:
        if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 3) {
          goto LABEL_477;
        }
        int v97 = *(_DWORD *)a1;
        int SInt32 = CsLeReadSInt32((unsigned int *)v7);
        if (v97 < 10)
        {
          WrdCharacterProperties::setOffsetToOLE1Object((WrdCharacterProperties *)a2, SInt32);
        }
        else
        {
          WrdCharacterProperties::setOffsetToOLEObjectData((WrdCharacterProperties *)a2, SInt32);
        }
        return;
      case 0x6864u:
        uint64_t RevisionEditReference = WrdCharacterProperties::getRevisionDeleteReference((WrdCharacterProperties *)a2);
        break;
      default:
        return;
    }
    goto LABEL_473;
  }
  if (*(unsigned __int16 *)(a4 + 8) > 0xCA46u)
  {
    if (*(unsigned __int16 *)(a4 + 8) > 0xCA70u)
    {
      if (*(unsigned __int16 *)(a4 + 8) <= 0xCA88u)
      {
        switch(*(_WORD *)(a4 + 8))
        {
          case 0xCA71:
            unsigned __int16 v17 = WrdCharacterProperties::getShadingReference((WrdCharacterProperties *)a2);
            WrdBaseParser::parseBuffer((uint64_t)a1, v17, v7, (const unsigned __int8 *)a6);
            return;
          case 0xCA72:
            BorderReference = WrdCharacterProperties::getBorderReference((WrdCharacterProperties *)a2);
            WrdBaseParser::parseBuffer(a1, BorderReference, v7, (const unsigned __int8 *)a6);
            return;
          case 0xCA76:
            if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 7) {
              goto LABEL_477;
            }
            int v81 = CsLeReadSInt32((unsigned int *)v7);
            WrdCharacterProperties::setFitTextWidth((WrdCharacterProperties *)a2, v81);
            int v82 = CsLeReadSInt32((unsigned int *)v7 + 1);
            WrdCharacterProperties::setFitTextID((WrdCharacterProperties *)a2, v82);
            return;
          case 0xCA78:
            if (v7 + 1 >= (unsigned __int8 *)a6) {
              goto LABEL_477;
            }
            int v83 = v7[1];
            v84 = (unsigned __int16 *)(v7 + 2);
            if (v83 == 1)
            {
              if (a6 <= v84 || (unint64_t)((char *)a6 - (char *)v84) <= 2) {
                goto LABEL_477;
              }
              WrdCharacterProperties::setTatenakayoko((WrdCharacterProperties *)a2, 1);
              WrdCharacterProperties::setFitTextFE((WrdCharacterProperties *)a2, v7[2] == 16);
              WrdCharacterProperties::setTatenakayokoNewLineState((WrdCharacterProperties *)a2, v7[3]);
              unsigned __int8 v116 = v7[4];
              WrdCharacterProperties::setTatenakayokoID((WrdCharacterProperties *)a2, v116);
              return;
            }
            if (v83 == 2)
            {
              if (v84 >= a6) {
                goto LABEL_477;
              }
              WrdCharacterProperties::setWarichu((WrdCharacterProperties *)a2, 1);
              int v85 = *(unsigned __int8 *)v84;
              WrdCharacterProperties::setWarichuBracket(a2, v85);
              return;
            }
            uint64_t v20 = "Unknown type in SPRM 0xCA78 relating to Far East layout";
            int v21 = 872;
            break;
          case 0xCA7C:
            CsColour v120 = (CsColour)255;
            CsColour v121 = (CsColour)255;
            WrdBaseParser::parseBuffer(a1, &v121, v7, (const unsigned __int8 *)a6);
            WrdBaseParser::parseBuffer(a1, &v120, v7 + 4, (const unsigned __int8 *)a6);
            if (*(unsigned __int16 *)(a2 + 30) == v121.var0
              && *(unsigned __int16 *)(a2 + 32) == v121.var1
              && *(unsigned __int16 *)(a2 + 34) == v121.var2
              && *(unsigned __int16 *)(a2 + 36) == v121.var3)
            {
              ColorReference = (CsColour *)WrdCharacterProperties::getColorReference((WrdCharacterProperties *)a2);
              CsColour *ColorReference = v120;
            }
            return;
          default:
            return;
        }
LABEL_469:
        ChLogFunction(v20, 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdChpParser.cpp", v21);
        return;
      }
      if (v15 != 51849)
      {
        if (v15 == 59912)
        {
          uint64_t v20 = "Unimplemented sprm code 0xEA08\n";
          int v21 = 198;
        }
        else
        {
          if (v15 != 59967) {
            return;
          }
          if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1) {
            goto LABEL_477;
          }
          if (*v7)
          {
            if (a3) {
              WrdCharacterProperties::setFontSize(a3, 0);
            }
            WrdCharacterProperties::setFontSize((WrdCharacterProperties *)a2, 0);
          }
          if (v7[1] >= 2u) {
            ChLogFunction("Incomplete implementation of 0xEA3F CHP SPRM!", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdChpParser.cpp", 426);
          }
          uint64_t v20 = "Incomplete implementation of 0xEA3F CHP SPRM!";
          int v21 = 430;
        }
        goto LABEL_469;
      }
      if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 2) {
        goto LABEL_477;
      }
      WrdCharacterProperties::setRevisionProperties((WrdCharacterProperties *)a2, *v7);
      __int16 v101 = CsLeReadUInt16((unsigned __int16 *)(v7 + 1));
      WrdCharacterProperties::setIndexToAuthorIDOfRevisionProperties((WrdCharacterProperties *)a2, v101);
      RevisionPropertiesDateTimeReference = (WrdDateTime *)WrdCharacterProperties::getRevisionPropertiesDateTimeReference((WrdCharacterProperties *)a2);
      uint64_t v103 = a1;
      v104 = v7 + 3;
LABEL_474:
      WrdBaseParser::parseBuffer(v103, RevisionPropertiesDateTimeReference, v104, (unsigned __int8 *)a6);
      return;
    }
    switch(*(_WORD *)(a4 + 8))
    {
      case 0xCA47:
      case 0xCA4C:
        WrdChpParser::applyCMajoritySPRM(a1, (WrdCharacterProperties *)a2, a3, (unsigned __int16 *)v7, (const unsigned __int8 *)a6, SizeOfSPRMParameter);
        return;
      case 0xCA48:
      case 0xCA4B:
        return;
      case 0xCA49:
        if (a6 > (unsigned __int16 *)v7 && (unint64_t)((char *)a6 - (char *)v7) > 1) {
          goto LABEL_228;
        }
        goto LABEL_477;
      case 0xCA4A:
        if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1) {
          goto LABEL_477;
        }
        unsigned __int16 v65 = CsLeReadSInt16((__int16 *)v7);
        WrdCharacterProperties::setFontSize((WrdCharacterProperties *)a2, v65);
        unsigned int v66 = *(unsigned __int16 *)(a2 + 312);
        if (v66 <= 7)
        {
          v64 = (WrdCharacterProperties *)a2;
          LOWORD(v23) = 8;
          goto LABEL_230;
        }
        if (v66 < 0x7FFF) {
          return;
        }
        v64 = (WrdCharacterProperties *)a2;
        LOWORD(v23) = 32766;
        goto LABEL_230;
      default:
        if (v15 != 51799)
        {
          if (v15 != 51810) {
            return;
          }
          if (v7 >= (unsigned __int8 *)a6) {
            goto LABEL_477;
          }
          if (*v7)
          {
            WrdCharacterProperties::setRevisionListNumber((WrdCharacterProperties *)a2, 1);
            if (a6 <= (unsigned __int16 *)(v7 + 1) || (unint64_t)((char *)a6 - (char *)(v7 + 1)) <= 0x25) {
              goto LABEL_477;
            }
            __int16 v44 = CsLeReadUInt16((unsigned __int16 *)(v7 + 1));
            WrdCharacterProperties::setIndexToAuthorIDOfRevisionListNumber((WrdCharacterProperties *)a2, v44);
            RevisionListNumberDateTimeReference = (WrdDateTime *)WrdCharacterProperties::getRevisionListNumberDateTimeReference((WrdCharacterProperties *)a2);
            WrdBaseParser::parseBuffer(a1, RevisionListNumberDateTimeReference, v7 + 3, (unsigned __int8 *)a6);
            uint64_t v46 = *(void *)(a2 + 56);
            if (v46)
            {
              for (uint64_t i = 0; i != 32; ++i)
                *(_WORD *)(v46 + 2 * i) = v7[i + 7];
            }
          }
          else
          {
            WrdCharacterProperties::clearListNumberRevisionAttributes((WrdCharacterProperties *)a2);
          }
          return;
        }
        if (v7 >= (unsigned __int8 *)a6) {
          goto LABEL_477;
        }
        char v95 = *v7;
        if (!*v7) {
          goto LABEL_451;
        }
        if ((unint64_t)((char *)a6 - (char *)v7) < 7) {
          goto LABEL_477;
        }
        uint64_t v115 = 0;
        while (v7[v115] == 255)
        {
          if (++v115 == 7) {
            return;
          }
        }
        WrdCharacterProperties::setRevisionProperties((WrdCharacterProperties *)a2, v95);
        __int16 v117 = CsLeReadUInt16((unsigned __int16 *)(v7 + 1));
        WrdCharacterProperties::setIndexToAuthorIDOfRevisionProperties((WrdCharacterProperties *)a2, v117);
        v7 += 3;
        uint64_t RevisionEditReference = WrdCharacterProperties::getRevisionPropertiesDateTimeReference((WrdCharacterProperties *)a2);
        break;
    }
LABEL_473:
    RevisionPropertiesDateTimeReference = (WrdDateTime *)RevisionEditReference;
    uint64_t v103 = a1;
    v104 = v7;
    goto LABEL_474;
  }
  if (*(unsigned __int16 *)(a4 + 8) > 0x6A08u)
  {
    if (*(unsigned __int16 *)(a4 + 8) <= 0x883Fu)
    {
      if (v15 == 27145)
      {
        if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 3) {
          goto LABEL_477;
        }
        __int16 v110 = CsLeReadUInt16((unsigned __int16 *)v7);
        WrdCharacterProperties::setFontIndexForSymbol((WrdCharacterProperties *)a2, v110);
        __int16 v111 = CsLeReadUInt16((unsigned __int16 *)v7 + 1);
        WrdCharacterProperties::setSymbolCharacter((WrdCharacterProperties *)a2, v111);
        return;
      }
      if (v15 != 27154) {
        return;
      }
      uint64_t v20 = "Unimplemented sprm code 0x6A12\n";
      int v21 = 911;
    }
    else
    {
      if (v15 == 34880)
      {
        if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1) {
          goto LABEL_477;
        }
        int v99 = CsLeReadUInt16((unsigned __int16 *)v7);
        WrdCharacterProperties::setSpaceAfterEachChar((WrdCharacterProperties *)a2, v99);
        return;
      }
      if (v15 == 51731)
      {
        uint64_t v20 = "Unimplemented sprm code 0xCA13 relating to threading authors\n";
        int v21 = 923;
      }
      else
      {
        if (v15 != 51761 || *(unsigned __int8 *)(a4 + 13) < 7u) {
          return;
        }
        if (v7 >= (unsigned __int8 *)a6 || (unint64_t)((char *)a6 - (char *)v7) <= 5) {
          goto LABEL_477;
        }
        uint64_t v31 = (unsigned __int16 *)(v7 + 2);
        unsigned int v32 = CsLeReadUInt16(v31);
        unsigned int v33 = CsLeReadUInt16(v31);
        uint64_t v34 = *(unsigned __int16 *)(a2 + 332);
        if (v34 <= v32 || v34 > v33) {
          return;
        }
        unsigned int v35 = &v31[v34 - v32];
        if (a6 <= v35 || (unint64_t)((char *)a6 - (char *)v35) <= 1) {
          goto LABEL_477;
        }
        unsigned __int16 v36 = CsLeReadUInt16(v35);
        WrdCharacterProperties::setStyleIndex((WrdCharacterProperties *)a2, v36);
        uint64_t v20 = "Need to apply CHPXs in rgstd entries.";
        int v21 = 274;
      }
    }
    goto LABEL_469;
  }
  if (*(unsigned __int16 *)(a4 + 8) <= 0x6876u)
  {
    if (v15 == 26725)
    {
      v108 = WrdCharacterProperties::getBorderReference((WrdCharacterProperties *)a2);
      WrdBaseParser::parseBRC80(a1, v108, (unsigned __int16 *)v7, a6);
      return;
    }
    if (v15 != 26736) {
      return;
    }
    UnderlineColorReference = (CsColour *)WrdCharacterProperties::getColorReference((WrdCharacterProperties *)a2);
LABEL_368:
    WrdBaseParser::parseBuffer(a1, UnderlineColorReference, v7, (const unsigned __int8 *)a6);
    return;
  }
  if (v15 == 26743)
  {
    UnderlineColorReference = (CsColour *)WrdCharacterProperties::getUnderlineColorReference((WrdCharacterProperties *)a2);
    goto LABEL_368;
  }
  if (v15 != 26759)
  {
    if (v15 != 27139) {
      return;
    }
    if (a6 > (unsigned __int16 *)v7 && (unint64_t)((char *)a6 - (char *)v7) > 3)
    {
      int v25 = CsLeReadSInt32((unsigned int *)v7);
      WrdCharacterProperties::setOffsetToPictureData((WrdCharacterProperties *)a2, v25);
      WrdCharacterProperties::setOffsetToFormFieldData((WrdCharacterProperties *)a2, v25);
      WrdCharacterProperties::setObjectIDForOLE2((WrdCharacterProperties *)a2, v25);
      WrdCharacterProperties::setOffsetToOLEObjectData((WrdCharacterProperties *)a2, v25);
      int v26 = (WrdCharacterProperties *)a2;
      char v27 = 1;
LABEL_239:
      WrdCharacterProperties::setSpecialCharacter(v26, v27);
      return;
    }
    goto LABEL_477;
  }
  if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 3)
  {
LABEL_477:
    exception = __cxa_allocate_exception(4uLL);
    int v119 = 1004;
    goto LABEL_479;
  }
  int v94 = CsLeReadSInt32((unsigned int *)v7);
  WrdCharacterProperties::setCharPositionOfPictureBulletInBookmark((WrdCharacterProperties *)a2, v94);
}

uint64_t WrdProperty::getSizeOfSPRMParameter(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 4);
  if v1 < 8 && ((0xBFu >> v1))
  {
    LOWORD(v1) = word_238EEF630[v1];
  }
  else
  {
    LODWORD(v1) = *(unsigned __int8 *)(a1 + 13);
    if (v1 == 255) {
      LOWORD(v1) = -1;
    }
  }
  return (unsigned __int16)v1;
}

WrdCharacterProperties *WrdCharacterProperties::setFontSize(WrdCharacterProperties *this, unsigned __int16 a2)
{
  *(void *)&this->var2 |= 0x1000uLL;
  this->var62 = a2;
  return this;
}

uint64_t WrdCharacterProperties::clearAllRevisionAttributes(WrdCharacterProperties *this)
{
  uint64_t v1 = (unsigned int *)&this->var2 + 2;
  unint64_t v2 = *((unsigned int *)&this->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&this->var2 + 6) << 32);
  uint64_t var2 = (uint64_t)this->var2;
  this->var36 = 0;
  v2 &= ~0x4000000000uLL;
  *(void *)&this->uint64_t var2 = var2 & 0xFFFFFFFFFFFFFFF7;
  *((_DWORD *)&this->var2 + 2) = v2;
  *((_WORD *)&this->var2 + 6) = WORD2(v2);
  (*((void (**)(WrdDateTime *))this->var12->var0 + 3))(this->var12);
  unint64_t v4 = *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32);
  uint64_t v5 = *((void *)v1 - 1);
  *((_WORD *)v1 + 153) = 0;
  v1[50] = 0;
  v4 &= 0xFFDFFFFFBFFFuLL;
  *((void *)v1 - 1) = v5 & 0xFFFFFFFFFFFFFFBFLL;
  unsigned int *v1 = v4;
  *((_WORD *)v1 + 2) = WORD2(v4);
  (*(void (**)(void))(**((void **)v1 + 11) + 24))(*((void *)v1 + 11));
  unint64_t v6 = *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32);
  uint64_t v7 = *((void *)v1 - 1);
  *((_WORD *)v1 + 143) = 0;
  v1[79] &= ~0x1000000u;
  v6 &= 0xFFFD7FFFFFFFuLL;
  *((void *)v1 - 1) = v7 & 0xFF7FFFFFFFFFFFFFLL;
  unsigned int *v1 = v6;
  *((_WORD *)v1 + 2) = WORD2(v6);
  (*(void (**)(void))(**((void **)v1 + 10) + 24))(*((void *)v1 + 10));
  uint64_t v8 = *v1;
  unint64_t v9 = (v8 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32)) & 0xFFFFFFFEFFFFFFFFLL;
  unsigned int *v1 = v8;
  *((_WORD *)v1 + 2) = WORD2(v9);
  *((_WORD *)v1 + 152) = 0;
  v1[10] = 0;
  bzero(*((void **)v1 + 4), 2 * v1[11]);
  unsigned int v10 = *v1;
  v1[79] &= ~0x800000u;
  unsigned int *v1 = v10 & 0xFD7FFFFF;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)v1 + 8) + 24))(*((void *)v1 + 8));
  uint64_t v12 = *v1;
  unint64_t v13 = v12 & 0xFFFFFFFFFEFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32);
  unsigned int *v1 = v12 & 0xFEFFFFFF;
  *((_WORD *)v1 + 2) = WORD2(v13);
  *((_WORD *)v1 + 151) = 0;
  return result;
}

uint64_t WrdCharacterProperties::setLanguageIDForBiText(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x800000000000uLL;
  *(_DWORD *)(result + 240) = a2;
  return result;
}

uint64_t WrdCharacterProperties::setLanguageIDForDefaultText(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x200000000000uLL;
  *(_DWORD *)(result + 232) = a2;
  return result;
}

uint64_t WrdCharacterProperties::setLanguageIDForFarEastAsianText(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x400000000000uLL;
  *(_DWORD *)(result + 236) = a2;
  return result;
}

WrdBaseParser *WrdPapParser::applySprm(WrdBaseParser *result, WrdStyle *this, uint64_t a3, unsigned __int16 *a4, unsigned __int16 *a5, unsigned __int16 *a6, uint64_t a7)
{
  uint64_t v12 = result;
  if (*(unsigned __int16 *)(a3 + 8) == 50790)
  {
    if (*((_DWORD *)this + 38) == 3)
    {
      *a6 = WrdProperty::getSizeOfSPRMParameter(a3);
      char v27 = a4 + 1;
      if (a4 + 1 > a5)
      {
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = 1004;
      }
      uint64_t result = (WrdBaseParser *)CsLeReadUInt16(a4);
      unsigned int v30 = result;
      for (unsigned int i = 0; i != 12; ++i)
      {
        if ((v30 >> i))
        {
          LOWORD(v34) = 0;
          LODWORD(__p) = 0;
          int v14 = operator new(0x10uLL);
          void *v14 = 0;
          v14[1] = 0;
          uint64_t v15 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a7 + 280) + 16))(*(void *)(a7 + 280), 41);
          if (v15) {
            int v16 = (WrdParagraphProperties *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          if (*a6 >= 3u)
          {
            unsigned __int16 v17 = 2;
            int v18 = v27;
            do
            {
              WrdPropertyParser::parseSPRM(v18, (unint64_t)a5, &v34, (uint64_t)v14);
              __int16 v19 = v34;
              uint64_t v20 = (unsigned __int8 *)v18 + (unsigned __int16)v34;
              if (*(_DWORD *)v14 == 1)
              {
                WrdPapParser::applySprm(v12, (uint64_t)v16, (uint64_t)v14, v20, a5, &v34, &__p);
                int SizeOfSPRMParameter = (unsigned __int16)v34;
              }
              else
              {
                int SizeOfSPRMParameter = WrdProperty::getSizeOfSPRMParameter((uint64_t)v14);
                LOWORD(v34) = SizeOfSPRMParameter;
              }
              int v18 = (unsigned __int16 *)&v20[SizeOfSPRMParameter];
              v17 += SizeOfSPRMParameter + v19;
            }
            while (*a6 > v17);
          }
          WrdParagraphProperties::clearAllRevisionAttributes(v16);
          WrdStyle::takeParaProps((uint64_t)this, i, (uint64_t *)v16);
          uint64_t result = (WrdBaseParser *)MEMORY[0x23EC997B0](v14, 0x1000C4099076E91);
        }
      }
    }
  }
  else
  {
    unsigned int v34 = 0;
    uint64_t ResolvedParaPropsReference = WrdStyle::getResolvedParaPropsReference(this);
    WrdPapParser::applySprm(v12, ResolvedParaPropsReference, a3, (unsigned __int8 *)a4, a5, a6, &v34);
    uint64_t v23 = v34;
    if ((v34 & 0x80000000) == 0)
    {
      __p = 0;
      unsigned int v32 = 0;
      uint64_t v33 = 0;
      int v24 = (WrdParagraphProperties *)WrdStyle::getResolvedParaPropsReference(this);
      WrdParser::applyHugePapx((void *)a7, (char **)&__p, v23, v24, 0, *((WrdTableProperties **)this + 8), 0);
      if (__p)
      {
        unsigned int v32 = __p;
        operator delete(__p);
      }
    }
    int v25 = (WrdParagraphProperties *)WrdStyle::getResolvedParaPropsReference(this);
    return (WrdBaseParser *)WrdParagraphProperties::clearAllRevisionAttributes(v25);
  }
  return result;
}

void sub_238B2D6D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void WrdPapParser::applySprm(WrdBaseParser *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned __int16 *a5, _WORD *a6, _DWORD *a7)
{
  *a7 = -1;
  if (*(_DWORD *)a3 != 1)
  {
    exception = __cxa_allocate_exception(4uLL);
    int v96 = 2002;
    goto LABEL_330;
  }
  if (!a4
    || (unsigned int SizeOfSPRMParameter = WrdProperty::getSizeOfSPRMParameter(a3), *a6 = SizeOfSPRMParameter, SizeOfSPRMParameter)
    && SizeOfSPRMParameter != 0xFFFF
    && (a5 <= (unsigned __int16 *)a4 || (char *)a5 - (char *)a4 < (unint64_t)SizeOfSPRMParameter))
  {
LABEL_328:
    exception = __cxa_allocate_exception(4uLL);
    int v96 = 1004;
    goto LABEL_330;
  }
  unsigned int v15 = *(unsigned __int16 *)(a3 + 8);
  if (v15 <= 0x460F)
  {
    if (*(unsigned __int16 *)(a3 + 8) > 0x245Au)
    {
      if (*(unsigned __int16 *)(a3 + 8) <= 0x4423u)
      {
        if (*(unsigned __int16 *)(a3 + 8) > 0x2609u)
        {
          if (*(unsigned __int16 *)(a3 + 8) > 0x263Fu)
          {
            if (v15 == 9792)
            {
              char v45 = *a4;
LABEL_290:
              WrdParagraphProperties::setOutlineLevel((WrdParagraphProperties *)a2, v45);
            }
            else if (v15 == 9828)
            {
              char v34 = *a4 == 1;
              WrdParagraphProperties::setRevisionMark((WrdParagraphProperties *)a2, v34);
            }
          }
          else if (v15 == 9738)
          {
            char v80 = *a4;
            WrdParagraphProperties::setListLevel((WrdParagraphProperties *)a2, v80);
          }
          else if (v15 == 9755)
          {
            unsigned int v26 = *a4;
            if ((v26 & 0x30) != 0x30) {
              WrdCharacterProperties::setTextAnimation(a2, (v26 & 0x30) >> 4);
            }
            if ((~v26 & 0xC0) != 0)
            {
              WrdParagraphProperties::setHorizontalPosition(a2, v26 >> 6);
            }
          }
        }
        else
        {
          switch(*(_WORD *)(a3 + 8))
          {
            case 0x245B:
              char v23 = *a4 == 1;
              WrdParagraphProperties::setVerticalSpacingBeforeAutomatic((WrdParagraphProperties *)a2, v23);
              break;
            case 0x245C:
              char v46 = *a4 == 1;
              WrdParagraphProperties::setVerticalSpacingAfterAutomatic((WrdParagraphProperties *)a2, v46);
              break;
            case 0x245D:
            case 0x245E:
            case 0x245F:
            case 0x2460:
              return;
            case 0x2461:
              int v47 = *a4;
              WrdParagraphProperties::setJustification(a2, v47);
              break;
            case 0x2462:
              char v48 = *a4 == 1;
              WrdParagraphProperties::setNoOverlapAllowed((WrdParagraphProperties *)a2, v48);
              break;
            default:
              if (v15 == 9730)
              {
                int v43 = *(unsigned __int16 *)(a2 + 140);
                if ((v43 - 1) <= 8)
                {
                  if ((*a4 & 0x50) != 0) {
                    __int16 v44 = *a4 | 0xFF00;
                  }
                  else {
                    __int16 v44 = *a4;
                  }
                  WrdParagraphProperties::setParagraphStyleIndex((WrdParagraphProperties *)a2, v43 + v44);
                  char v45 = *(unsigned char *)(a2 + 299) + v44;
                  goto LABEL_290;
                }
              }
              break;
          }
        }
      }
      else if (*(unsigned __int16 *)(a3 + 8) > 0x4454u)
      {
        switch(*(_WORD *)(a3 + 8))
        {
          case 0x4455:
            __int16 SInt16 = CsLeReadSInt16((__int16 *)a4);
            WrdParagraphProperties::setRightIndentCharacterUnits((WrdParagraphProperties *)a2, SInt16);
            break;
          case 0x4456:
            __int16 v76 = CsLeReadSInt16((__int16 *)a4);
            WrdParagraphProperties::setLeftIndentCharacterUnits((WrdParagraphProperties *)a2, v76);
            break;
          case 0x4457:
            __int16 v77 = CsLeReadSInt16((__int16 *)a4);
            WrdParagraphProperties::setFirstLineIndentCharacterUnits((WrdParagraphProperties *)a2, v77);
            break;
          case 0x4458:
            __int16 v78 = CsLeReadSInt16((__int16 *)a4);
            WrdParagraphProperties::setLineSpaceBefore((WrdParagraphProperties *)a2, v78);
            break;
          case 0x4459:
            __int16 v79 = CsLeReadSInt16((__int16 *)a4);
            WrdParagraphProperties::setLineSpaceAfter((WrdParagraphProperties *)a2, v79);
            break;
          default:
            if (v15 == 17920)
            {
              __int16 UInt16 = CsLeReadUInt16((unsigned __int16 *)a4);
              WrdParagraphProperties::setParagraphStyleIndex((WrdParagraphProperties *)a2, UInt16);
            }
            else if (v15 == 17931)
            {
              __int16 v33 = CsLeReadUInt16((unsigned __int16 *)a4);
              WrdParagraphProperties::setIndexToList((WrdParagraphProperties *)a2, v33);
            }
            break;
        }
      }
      else
      {
        switch(*(_WORD *)(a3 + 8))
        {
          case 0x4424:
            BorderTopReference = (WrdBorder *)WrdParagraphProperties::getBorderTopReference((WrdParagraphProperties *)a2);
            goto LABEL_216;
          case 0x4425:
            BorderTopReference = (WrdBorder *)WrdParagraphProperties::getBorderLeftReference((WrdParagraphProperties *)a2);
            goto LABEL_216;
          case 0x4426:
            BorderTopReference = (WrdBorder *)WrdParagraphProperties::getBorderBottomReference((WrdParagraphProperties *)a2);
            goto LABEL_216;
          case 0x4427:
            BorderTopReference = (WrdBorder *)WrdParagraphProperties::getBorderRightReference((WrdParagraphProperties *)a2);
            goto LABEL_216;
          case 0x4428:
            BorderTopReference = (WrdBorder *)WrdParagraphProperties::getBorderBetweenReference((WrdParagraphProperties *)a2);
            goto LABEL_216;
          case 0x442B:
            __int16 v67 = CsLeReadUInt16((unsigned __int16 *)a4);
            WrdParagraphProperties::setAbsoluteHeight((WrdParagraphProperties *)a2, v67);
            break;
          case 0x442C:
            DropCapReference = (WrdDropCap *)WrdParagraphProperties::getDropCapReference((WrdParagraphProperties *)a2);
            WrdBaseParser::parseBuffer(a1, DropCapReference, (unsigned __int16 *)a4, a5);
            break;
          case 0x442D:
            ShadingReference = (WrdShading *)WrdParagraphProperties::getShadingReference((WrdParagraphProperties *)a2);
            WrdBaseParser::parseSHD80(a1, ShadingReference, (unsigned __int16 *)a4, a5);
            break;
          case 0x4439:
            int v70 = CsLeReadUInt16((unsigned __int16 *)a4);
            WrdParagraphProperties::setFontAlignment(a2, v70);
            break;
          case 0x443A:
            char v71 = CsLeReadUInt16((unsigned __int16 *)a4);
            WrdParagraphProperties::setVertical((WrdParagraphProperties *)a2, v71 & 1);
            WrdParagraphProperties::setBackward((WrdParagraphProperties *)a2, (v71 & 2) != 0);
            WrdParagraphProperties::setRotateFont((WrdParagraphProperties *)a2, (v71 & 4) != 0);
            break;
          default:
            return;
        }
      }
    }
    else
    {
      switch(*(_WORD *)(a3 + 8))
      {
        case 0x242A:
          char v16 = *a4 == 1;
          WrdParagraphProperties::setNoAutoHyphenate((WrdParagraphProperties *)a2, v16);
          break;
        case 0x242B:
        case 0x242C:
        case 0x242D:
        case 0x242E:
        case 0x242F:
        case 0x2432:
        case 0x2439:
        case 0x243A:
        case 0x243B:
        case 0x243C:
        case 0x243D:
        case 0x243E:
        case 0x243F:
        case 0x2440:
        case 0x2442:
        case 0x2444:
        case 0x2445:
        case 0x2446:
        case 0x2449:
        case 0x244A:
          return;
        case 0x2430:
          char v49 = *a4 == 1;
          WrdParagraphProperties::setLocked((WrdParagraphProperties *)a2, v49);
          break;
        case 0x2431:
          char v50 = *a4 == 1;
          WrdParagraphProperties::setWidowed((WrdParagraphProperties *)a2, v50);
          break;
        case 0x2433:
          char v51 = *a4 == 1;
          WrdParagraphProperties::setKinsoku((WrdParagraphProperties *)a2, v51);
          break;
        case 0x2434:
          char v52 = *a4 == 1;
          WrdParagraphProperties::setWordWrap((WrdParagraphProperties *)a2, v52);
          break;
        case 0x2435:
          char v53 = *a4 == 1;
          WrdParagraphProperties::setOverflowPunctuation((WrdParagraphProperties *)a2, v53);
          break;
        case 0x2436:
          char v54 = *a4 == 1;
          WrdParagraphProperties::setTopLinePunctuationProcessing((WrdParagraphProperties *)a2, v54);
          break;
        case 0x2437:
          char v55 = *a4 == 1;
          WrdParagraphProperties::setAutoSpaceEastAsianAndAlphabeticCharacters((WrdParagraphProperties *)a2, v55);
          break;
        case 0x2438:
          char v56 = *a4 == 1;
          WrdParagraphProperties::setAutoSpaceEastAsianAndNumericCharacters((WrdParagraphProperties *)a2, v56);
          break;
        case 0x2441:
          char v57 = *a4 == 1;
          WrdParagraphProperties::setBiDi((WrdParagraphProperties *)a2, v57);
          break;
        case 0x2443:
          char v58 = *a4 == 1;
          WrdParagraphProperties::setParagraphNumberInserted((WrdParagraphProperties *)a2, v58);
          break;
        case 0x2447:
          char v59 = *a4 == 1;
          WrdParagraphProperties::setPageSetupLinePitch((WrdParagraphProperties *)a2, v59);
          break;
        case 0x2448:
          char v60 = *a4 == 1;
          WrdParagraphProperties::setAdjustRightMargin((WrdParagraphProperties *)a2, v60);
          break;
        case 0x244B:
          char v61 = *a4 == 1;
          WrdParagraphProperties::setInnerTableCell((WrdParagraphProperties *)a2, v61);
          break;
        case 0x244C:
          char v62 = *a4 == 1;
          WrdParagraphProperties::setInnerTableTrailerParagraph((WrdParagraphProperties *)a2, v62);
          break;
        default:
          switch(*(_WORD *)(a3 + 8))
          {
            case 0x2403:
              int v21 = *a4;
              WrdParagraphProperties::setJustificationV8(a2, v21);
              break;
            case 0x2404:
              char v87 = *a4 == 1;
              WrdParagraphProperties::setSideBySide((WrdParagraphProperties *)a2, v87);
              break;
            case 0x2405:
              char v88 = *a4 == 1;
              WrdParagraphProperties::setKeepOnOnePage((WrdParagraphProperties *)a2, v88);
              break;
            case 0x2406:
              char v89 = *a4 != 0;
              WrdParagraphProperties::setKeepFollowingParagraph((WrdParagraphProperties *)a2, v89);
              break;
            case 0x2407:
              char v90 = *a4 == 1;
              WrdParagraphProperties::setPageBreakBefore((WrdParagraphProperties *)a2, v90);
              break;
            case 0x2408:
              int v91 = *a4;
              WrdParagraphProperties::setBorderLineStyle(a2, v91);
              break;
            case 0x2409:
              int v92 = *a4;
              WrdParagraphProperties::setBorderCode(a2, v92);
              break;
            case 0x240A:
            case 0x240B:
            case 0x240D:
            case 0x240E:
            case 0x240F:
            case 0x2410:
            case 0x2411:
            case 0x2412:
            case 0x2413:
            case 0x2414:
            case 0x2415:
              return;
            case 0x240C:
              char v93 = *a4 == 1;
              WrdParagraphProperties::setNoLineNumbering((WrdParagraphProperties *)a2, v93);
              break;
            case 0x2416:
              char v83 = *a4 == 1;
              goto LABEL_318;
            case 0x2417:
              char v94 = *a4 == 1;
              WrdParagraphProperties::setTableTrailerParagraph((WrdParagraphProperties *)a2, v94);
              break;
            default:
              if (v15 == 9251)
              {
                char v36 = *a4;
                WrdParagraphProperties::setWrapCode((WrdParagraphProperties *)a2, v36);
              }
              break;
          }
          break;
      }
    }
    return;
  }
  if (*(unsigned __int16 *)(a3 + 8) > 0x840Du)
  {
    if (*(unsigned __int16 *)(a3 + 8) <= 0xC60Cu)
    {
      if (*(unsigned __int16 *)(a3 + 8) <= 0x842Eu)
      {
        switch(*(_WORD *)(a3 + 8))
        {
          case 0x840E:
            int v17 = CsLeReadSInt16((__int16 *)a4);
            WrdParagraphProperties::setRightIndent((WrdParagraphProperties *)a2, v17);
            break;
          case 0x840F:
            int v42 = CsLeReadSInt16((__int16 *)a4);
            unsigned __int8 v41 = (WrdParagraphProperties *)a2;
            goto LABEL_189;
          case 0x8410:
          case 0x8412:
          case 0x8413:
          case 0x8414:
          case 0x8415:
          case 0x8416:
          case 0x8417:
            return;
          case 0x8411:
            int v63 = CsLeReadSInt16((__int16 *)a4);
            WrdParagraphProperties::setFirstLineLeftIndent((WrdParagraphProperties *)a2, v63);
            break;
          case 0x8418:
            int v64 = CsLeReadSInt16((__int16 *)a4);
            WrdParagraphProperties::setHorizontalPlacement((WrdParagraphProperties *)a2, v64);
            break;
          case 0x8419:
            int v65 = CsLeReadSInt16((__int16 *)a4);
            WrdParagraphProperties::setVerticalPlacement((WrdParagraphProperties *)a2, v65);
            break;
          case 0x841A:
            int v66 = CsLeReadUInt16((unsigned __int16 *)a4);
            WrdParagraphProperties::setWidth((WrdParagraphProperties *)a2, v66);
            break;
          default:
            if (v15 == 33838)
            {
              int v37 = CsLeReadUInt16((unsigned __int16 *)a4);
              WrdParagraphProperties::setVerticalDistanceFromText((WrdParagraphProperties *)a2, v37);
            }
            break;
        }
        return;
      }
      if (*(unsigned __int16 *)(a3 + 8) > 0x845Fu)
      {
        if (*(unsigned __int16 *)(a3 + 8) > 0xA413u)
        {
          if (v15 == 42004)
          {
            int v86 = CsLeReadUInt16((unsigned __int16 *)a4);
            WrdParagraphProperties::setSpaceAfter((WrdParagraphProperties *)a2, v86);
          }
          else if (v15 == 50689)
          {
            handleCase0xC601(a2, a3, (unint64_t)a4, a5);
          }
        }
        else if (v15 == 33888)
        {
          int v75 = CsLeReadSInt16((__int16 *)a4);
          WrdParagraphProperties::setFirstLineLeadingIndent((WrdParagraphProperties *)a2, v75);
        }
        else if (v15 == 42003)
        {
          int v24 = CsLeReadUInt16((unsigned __int16 *)a4);
          WrdParagraphProperties::setSpaceBefore((WrdParagraphProperties *)a2, v24);
        }
        return;
      }
      switch(v15)
      {
        case 0x842Fu:
LABEL_104:
          int v35 = CsLeReadUInt16((unsigned __int16 *)a4);
          WrdParagraphProperties::setHorizontalDistanceFromText((WrdParagraphProperties *)a2, v35);
          break;
        case 0x845Du:
          int v81 = CsLeReadSInt16((__int16 *)a4);
          WrdParagraphProperties::setTrailingIndent((WrdParagraphProperties *)a2, v81);
          break;
        case 0x845Eu:
          int v29 = CsLeReadSInt16((__int16 *)a4);
          unsigned int v30 = (WrdParagraphProperties *)a2;
LABEL_283:
          WrdParagraphProperties::setLeadingIndent(v30, v29);
          return;
        default:
          return;
      }
      return;
    }
    if (*(unsigned __int16 *)(a3 + 8) <= 0xC63Du)
    {
      if (v15 == 50701 || v15 == 50709)
      {
        WrdPapParser::applyTabSPRM(SizeOfSPRMParameter, (WrdParagraphProperties *)a2, a3, (unint64_t)a4, (unsigned __int8 *)a5, a6);
      }
      else if (v15 == 50738)
      {
        char v27 = "Unimplemented sprm code 0xC632\n";
        int v28 = 497;
LABEL_325:
        ChLogFunction(v27, 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdPapParser.cpp", v28);
      }
      return;
    }
    switch(*(_WORD *)(a3 + 8))
    {
      case 0xC63E:
        if (*(unsigned char *)(a3 + 13) != 84)
        {
          char v27 = "Unimplemented length for sprm code 0xC63E\n";
          int v28 = 538;
          goto LABEL_325;
        }
        AutoNumberListDescriptorReference = (WrdAutoNumberLevelDescriptor **)WrdParagraphProperties::getAutoNumberListDescriptorReference((WrdParagraphProperties *)a2);
        WrdPapParser::parseANLD80(a1, AutoNumberListDescriptorReference, a4, (const unsigned __int8 *)a5);
        return;
      case 0xC63F:
        goto LABEL_122;
      case 0xC640:
      case 0xC641:
      case 0xC642:
      case 0xC643:
      case 0xC644:
      case 0xC646:
      case 0xC647:
      case 0xC648:
      case 0xC649:
      case 0xC64A:
      case 0xC64B:
      case 0xC64C:
        return;
      case 0xC645:
        NumberRevisionMarkDataReference = (WrdNumberRevisionMarkData *)WrdParagraphProperties::getNumberRevisionMarkDataReference((WrdParagraphProperties *)a2);
        WrdBaseParser::parseBuffer(a1, NumberRevisionMarkDataReference, a4, (unsigned __int8 *)a5);
        return;
      case 0xC64D:
        if (*(unsigned char *)(a3 + 13) == 10)
        {
          int v74 = (WrdShading *)WrdParagraphProperties::getShadingReference((WrdParagraphProperties *)a2);
          WrdBaseParser::parseBuffer((uint64_t)a1, v74, a4, (const unsigned __int8 *)a5);
          return;
        }
        exception = __cxa_allocate_exception(4uLL);
        int v96 = 2001;
        break;
      case 0xC64E:
        BorderLeftReference = (WrdBorder *)WrdParagraphProperties::getBorderTopReference((WrdParagraphProperties *)a2);
        goto LABEL_247;
      case 0xC64F:
        BorderLeftReference = (WrdBorder *)WrdParagraphProperties::getBorderLeftReference((WrdParagraphProperties *)a2);
        goto LABEL_247;
      case 0xC650:
        BorderLeftReference = (WrdBorder *)WrdParagraphProperties::getBorderBottomReference((WrdParagraphProperties *)a2);
        goto LABEL_247;
      case 0xC651:
        BorderLeftReference = (WrdBorder *)WrdParagraphProperties::getBorderRightReference((WrdParagraphProperties *)a2);
        goto LABEL_247;
      case 0xC652:
        BorderLeftReference = (WrdBorder *)WrdParagraphProperties::getBorderBetweenReference((WrdParagraphProperties *)a2);
        goto LABEL_247;
      case 0xC653:
        BorderLeftReference = (WrdBorder *)WrdParagraphProperties::getBorderBarReference((WrdParagraphProperties *)a2);
LABEL_247:
        WrdBaseParser::parseBuffer(a1, BorderLeftReference, a4, (const unsigned __int8 *)a5);
        return;
      default:
        if (v15 != 50799) {
          return;
        }
LABEL_122:
        WrdParagraphProperties::setRevisionMark((WrdParagraphProperties *)a2, *a4 == 1);
        if (a5 <= (unsigned __int16 *)(a4 + 1) || (unint64_t)((char *)a5 - (char *)(a4 + 1)) <= 3) {
          goto LABEL_328;
        }
        __int16 v38 = CsLeReadUInt16((unsigned __int16 *)(a4 + 1));
        WrdParagraphProperties::setAuthorIDForRevision((WrdParagraphProperties *)a2, v38);
        DttmRevisionMarkReference = (WrdDateTime *)WrdParagraphProperties::getDttmRevisionMarkReference((WrdParagraphProperties *)a2);
        WrdBaseParser::parseBuffer(a1, DttmRevisionMarkReference, a4 + 3, (unsigned __int8 *)a5);
        return;
    }
LABEL_330:
    _DWORD *exception = v96;
  }
  if (*(unsigned __int16 *)(a3 + 8) <= 0x6423u)
  {
    if (*(unsigned __int16 *)(a3 + 8) > 0x465Eu)
    {
      if (v15 == 18015)
      {
        int v84 = CsLeReadSInt16((__int16 *)a4);
        WrdParagraphProperties::setLeadingIndent((WrdParagraphProperties *)a2, *(_DWORD *)(a2 + 252) + v84);
        if ((*(_DWORD *)(a2 + 252) & 0x80000000) == 0) {
          return;
        }
        unsigned int v30 = (WrdParagraphProperties *)a2;
        int v29 = 0;
        goto LABEL_283;
      }
      if (v15 == 25618)
      {
        LineSpaceReference = (WrdLineSpaceDescriptor *)WrdParagraphProperties::getLineSpaceReference((WrdParagraphProperties *)a2);
        WrdBaseParser::parseBuffer(a1, LineSpaceReference, a4, (unsigned __int8 *)a5);
      }
    }
    else
    {
      switch(*(_WORD *)(a3 + 8))
      {
        case 0x461C:
          BorderBottomReference = (WrdBorder *)WrdParagraphProperties::getBorderTopReference((WrdParagraphProperties *)a2);
          goto LABEL_209;
        case 0x461D:
          BorderBottomReference = (WrdBorder *)WrdParagraphProperties::getBorderLeftReference((WrdParagraphProperties *)a2);
          goto LABEL_209;
        case 0x461E:
          BorderBottomReference = (WrdBorder *)WrdParagraphProperties::getBorderBottomReference((WrdParagraphProperties *)a2);
          goto LABEL_209;
        case 0x461F:
          BorderBottomReference = (WrdBorder *)WrdParagraphProperties::getBorderRightReference((WrdParagraphProperties *)a2);
          goto LABEL_209;
        case 0x4620:
          BorderBottomReference = (WrdBorder *)WrdParagraphProperties::getBorderBetweenReference((WrdParagraphProperties *)a2);
          goto LABEL_209;
        case 0x4621:
          BorderBottomReference = (WrdBorder *)WrdParagraphProperties::getBorderBarReference((WrdParagraphProperties *)a2);
LABEL_209:
          WrdBaseParser::parseBRC10(a1, BorderBottomReference, (unsigned __int16 *)a4, a5);
          break;
        case 0x4622:
          goto LABEL_104;
        case 0x4623:
        case 0x4624:
        case 0x4625:
        case 0x4626:
        case 0x4627:
        case 0x4628:
          return;
        case 0x4629:
          goto LABEL_60;
        default:
          if (v15 == 17936)
          {
            int v40 = CsLeReadSInt16((__int16 *)a4);
            if (v40)
            {
              WrdParagraphProperties::setLeftIndent((WrdParagraphProperties *)a2, *(_DWORD *)(a2 + 268) + v40);
              if ((*(_DWORD *)(a2 + 268) & 0x80000000) != 0)
              {
                unsigned __int8 v41 = (WrdParagraphProperties *)a2;
                int v42 = 0;
LABEL_189:
                WrdParagraphProperties::setLeftIndent(v41, v42);
              }
            }
          }
          break;
      }
    }
  }
  else
  {
    if (*(unsigned __int16 *)(a3 + 8) <= 0x6628u)
    {
      switch(*(_WORD *)(a3 + 8))
      {
        case 0x6424:
          BorderRightReference = (WrdBorder *)WrdParagraphProperties::getBorderTopReference((WrdParagraphProperties *)a2);
          goto LABEL_254;
        case 0x6425:
          BorderRightReference = (WrdBorder *)WrdParagraphProperties::getBorderLeftReference((WrdParagraphProperties *)a2);
          goto LABEL_254;
        case 0x6426:
          BorderRightReference = (WrdBorder *)WrdParagraphProperties::getBorderBottomReference((WrdParagraphProperties *)a2);
          goto LABEL_254;
        case 0x6427:
          BorderRightReference = (WrdBorder *)WrdParagraphProperties::getBorderRightReference((WrdParagraphProperties *)a2);
          goto LABEL_254;
        case 0x6428:
          BorderRightReference = (WrdBorder *)WrdParagraphProperties::getBorderBetweenReference((WrdParagraphProperties *)a2);
LABEL_254:
          WrdBaseParser::parseBRC80(a1, BorderRightReference, (unsigned __int16 *)a4, a5);
          break;
        default:
          if (v15 == 25707) {
            goto LABEL_115;
          }
          break;
      }
      return;
    }
    if (*(unsigned __int16 *)(a3 + 8) > 0x6648u)
    {
      if (v15 == 26185)
      {
        int SInt32 = CsLeReadSInt32((unsigned int *)a4);
      }
      else
      {
        if (v15 != 26186)
        {
          if (v15 == 26196)
          {
            uint64_t v31 = (CsColour *)(*(void *)(WrdParagraphProperties::getAutoNumberListDescriptorReference((WrdParagraphProperties *)a2)
                                         + 8)
                             + 8);
            WrdBaseParser::parseBuffer(a1, v31, a4, (const unsigned __int8 *)a5);
          }
          return;
        }
        int SInt32 = *(_DWORD *)(a2 + 244) + CsLeReadSInt32((unsigned int *)a4);
      }
      WrdParagraphProperties::setTableNestingLevel((WrdParagraphProperties *)a2, SInt32);
      char v83 = SInt32 > 0;
LABEL_318:
      WrdParagraphProperties::setParagraphInTable((WrdParagraphProperties *)a2, v83);
      return;
    }
    if (v15 - 26181 < 2)
    {
LABEL_115:
      *a7 = CsLeReadSInt32((unsigned int *)a4);
    }
    else if (v15 == 26153)
    {
LABEL_60:
      BorderTopReference = (WrdBorder *)WrdParagraphProperties::getBorderBarReference((WrdParagraphProperties *)a2);
LABEL_216:
      WrdBaseParser::parseBRC70(a1, BorderTopReference, a4, (unsigned __int8 *)a5);
    }
  }
}

WrdParagraphProperties *WrdParagraphProperties::setKeepFollowingParagraph(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 0x1000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFFFFEF | (16 * (a2 & 1));
  return this;
}

uint64_t WrdParagraphProperties::clearAllRevisionAttributes(WrdParagraphProperties *this)
{
  __int16 v2 = *((_WORD *)this + 12);
  *(_DWORD *)((char *)this + 294) &= ~0x4000000u;
  *((_WORD *)this + 146) = 0;
  *((_WORD *)this + 12) = v2 & 0xF1FF;
  (*(void (**)(void))(**((void **)this + 14) + 24))(*((void *)this + 14));
  *((_WORD *)this + 12) &= ~0x1000u;
  uint64_t v3 = (WrdNumberRevisionMarkData *)*((void *)this + 15);
  return WrdNumberRevisionMarkData::reset(v3);
}

WrdParagraphProperties *WrdParagraphProperties::setListLevel(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 8uLL;
  *((unsigned char *)this + 300) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setIndexToList(WrdParagraphProperties *this, __int16 a2)
{
  *((void *)this + 2) |= 0x10uLL;
  *((_WORD *)this + 71) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setSpaceBefore(WrdParagraphProperties *this, int a2)
{
  *((void *)this + 2) |= 0x40000uLL;
  *((_DWORD *)this + 68) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setSpaceAfter(WrdParagraphProperties *this, int a2)
{
  *((void *)this + 2) |= 0x80000uLL;
  *((_DWORD *)this + 69) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setOutlineLevel(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 0x80000000000uLL;
  *((unsigned char *)this + 299) = a2;
  return this;
}

uint64_t WrdCharacterProperties::setBold(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 2uLL;
  *(_DWORD *)(result + 168) = a2;
  return result;
}

uint64_t WrdCharacterProperties::setCaps(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x20000000uLL;
  *(_DWORD *)(result + 188) = a2;
  return result;
}

WrdCharacterProperties *WrdCharacterProperties::setKerning(WrdCharacterProperties *this, unsigned __int16 a2)
{
  *(void *)&this->var2 |= 0x10000000000000uLL;
  this->var63 = a2;
  return this;
}

uint64_t WrdCharacterProperties::setBoldBi(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x800000000uLL;
  *(_DWORD *)(result + 208) = a2;
  return result;
}

WrdCharacterProperties *WrdCharacterProperties::setFontIndexForBiText(WrdCharacterProperties *this, unsigned __int16 a2)
{
  *(void *)&this->var2 |= 0x40000000000uLL;
  this->var46 = a2;
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::setFontSizeForBiText(WrdCharacterProperties *this, unsigned __int16 a2)
{
  *(void *)&this->var2 |= 0x4000000uLL;
  this->var66 = a2;
  return this;
}

uint64_t WrdCharacterProperties::setItalic(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 4uLL;
  *(_DWORD *)(result + 172) = a2;
  return result;
}

uint64_t WrdCharacterProperties::setItalicBi(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x1000000000uLL;
  *(_DWORD *)(result + 212) = a2;
  return result;
}

uint64_t WrdCharacterProperties::setSuperSubscript(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x80000uLL;
  *(_DWORD *)(result + 136) = a2;
  return result;
}

uint64_t WrdCharacterProperties::setUnderline(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x100000uLL;
  *(_DWORD *)(result + 140) = a2;
  return result;
}

uint64_t WrdCharacterProperties::setColor97(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x20000uLL;
  *(_DWORD *)(result + 128) = a2;
  return result;
}

uint64_t WrdCharacterProperties::getColorReference(WrdCharacterProperties *this)
{
  *(void *)&this->var2 |= 0x10000uLL;
  return (uint64_t)&this->var2 + 14;
}

uint64_t WrdParagraphProperties::setJustificationV8(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x40uLL;
  *(_DWORD *)(result + 172) = a2;
  return result;
}

uint64_t WrdParagraphProperties::setJustification(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x20uLL;
  *(_DWORD *)(result + 168) = a2;
  return result;
}

uint64_t WrdCharacterProperties::setUsePageSetupLinePitch(WrdCharacterProperties *this, char a2)
{
  int v3 = *((_DWORD *)&this->var2 + 2);
  uint64_t result = (uint64_t)&this->var2 + 8;
  __int16 v4 = *(_WORD *)(result + 4);
  *(_DWORD *)uint64_t result = v3;
  *(_WORD *)(result + 4) = v4 | 0x400;
  *(_DWORD *)(result + 316) = *(_DWORD *)(result + 316) & 0xEFFFFFFF | ((a2 & 1) << 28);
  return result;
}

void WrdPapParser::applyTabSPRM(int a1, WrdParagraphProperties *a2, uint64_t a3, unint64_t a4, unsigned __int8 *a5, _WORD *a6)
{
  if (a4)
  {
    int v7 = *(unsigned __int16 *)(a3 + 8);
    BOOL v8 = v7 == 50709 || v7 == 50701;
    if (v8 && a4 < (unint64_t)a5 && (uint64_t)&a5[-a4] >= 1)
    {
      uint64_t v10 = *(unsigned __int8 *)a4;
      unsigned int v11 = WrdParagraphProperties::s_bMaximumNumberOfTabStops;
      if (v10 <= WrdParagraphProperties::s_bMaximumNumberOfTabStops)
      {
        uint64_t v12 = a6;
        Short = (unsigned __int8 *)(a4 + 1);
        uint64_t v31 = a3;
        if (*(unsigned char *)a4)
        {
          __int16 v15 = 0;
          __int16 v16 = 0;
          *(_DWORD *)unsigned int v32 = 0;
          __int16 InsertionIndexForTabsToBeDeleted = -1;
          int v18 = &Short[2 * v10];
          do
          {
            Short = (unsigned __int8 *)readShort(Short, a5, &v32[1]);
            if (*(unsigned __int16 *)(v31 + 8) == 50709)
            {
              int v18 = (unsigned __int8 *)readShort(v18, a5, v32);
              __int16 v15 = v32[0];
            }
            __int16 v19 = v32[1];
            if (!WrdParagraphProperties::deleteTabStopFromTabsToBeAdded(a2, v32[1], v15))
            {
              if (v16) {
                ++InsertionIndexForTabsToBeDeleted;
              }
              else {
                __int16 InsertionIndexForTabsToBeDeleted = WrdParagraphProperties::findInsertionIndexForTabsToBeDeleted(a2, v19);
              }
              WrdParagraphProperties::insertTabStopInTabsToBeDeleted(a2, InsertionIndexForTabsToBeDeleted, v19, v15);
            }
            ++v16;
          }
          while ((int)v10 > v16);
          uint64_t v12 = a6;
          a3 = v31;
          unsigned int v11 = WrdParagraphProperties::s_bMaximumNumberOfTabStops;
        }
        else
        {
          int v18 = (unsigned __int8 *)(a4 + 1);
        }
        LOWORD(v20) = 0;
        if (a5 <= v18 || a5 - v18 < 1) {
          goto LABEL_40;
        }
        uint64_t v20 = *v18;
        if (v20 > v11) {
          return;
        }
        if (!*v18) {
          goto LABEL_40;
        }
        __int16 v30 = v10;
        int v21 = (WrdTabDescriptor *)operator new(0x10uLL);
        WrdTabDescriptor::WrdTabDescriptor(v21);
        int v22 = (__int16 *)(v18 + 1);
        uint64_t v23 = (uint64_t)&v18[2 * v20 + 1];
        if (v23 + v20 <= (unint64_t)a5)
        {
          __int16 v24 = 0;
          __int16 InsertionIndexForTabsToBeAdded = -1;
          do
          {
            int SInt16 = CsLeReadSInt16(v22);
            unsigned int v27 = *(unsigned __int8 *)(v23 + v24);
            *((_DWORD *)v21 + 2) = v27 & 7;
            *((_DWORD *)v21 + 3) = (v27 >> 3) & 7;
            if (v24) {
              ++InsertionIndexForTabsToBeAdded;
            }
            else {
              __int16 InsertionIndexForTabsToBeAdded = WrdParagraphProperties::findInsertionIndexForTabsToBeAdded(a2, SInt16);
            }
            WrdParagraphProperties::insertTabStopInTabsToBeAdded(a2, InsertionIndexForTabsToBeAdded, SInt16, v21);
            ++v22;
            ++v24;
          }
          while ((int)v20 > v24);
        }
        else
        {
          LOWORD(v20) = 0;
          if (!v21)
          {
            LOWORD(v20) = 0;
LABEL_39:
            LOWORD(v10) = v30;
            a3 = v31;
LABEL_40:
            if (*(unsigned __int16 *)(a3 + 8) == 50709) {
              __int16 v28 = (4 * v10) | 2;
            }
            else {
              __int16 v28 = 2 * v10 + 2;
            }
            _WORD *v12 = v28 + 3 * v20;
            return;
          }
        }
        (*(void (**)(WrdTabDescriptor *))(*(void *)v21 + 8))(v21);
        goto LABEL_39;
      }
    }
  }
}

void sub_238B2F34C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdParagraphProperties::findInsertionIndexForTabsToBeAdded(WrdParagraphProperties *this, int a2)
{
  int v2 = *((__int16 *)this + 68);
  if (v2 <= 63)
  {
    if ((__int16)v2 < 1)
    {
      LOWORD(v3) = 0;
    }
    else
    {
      uint64_t v3 = 0;
      while (*(__int16 *)(*((void *)this + 25) + 2 * v3) <= a2)
      {
        if ((__int16)++v3 >= *((__int16 *)this + 68))
        {
          LOWORD(v3) = *((_WORD *)this + 68);
          return (__int16)v3;
        }
      }
    }
  }
  else
  {
    LOWORD(v3) = -1;
  }
  return (__int16)v3;
}

void WrdParagraphProperties::insertTabStopInTabsToBeAdded(WrdParagraphProperties *this, int a2, __int16 a3, const WrdTabDescriptor *a4)
{
  if (a2 != -1)
  {
    int v6 = *((__int16 *)this + 68);
    if (v6 >= a2 && v6 <= 63)
    {
      if (v6 > a2)
      {
        LOWORD(v9) = v6 - 1;
        do
        {
          uint64_t v10 = (__int16)v9 + 1;
          *(_WORD *)(*((void *)this + 25) + 2 * v10) = *(_WORD *)(*((void *)this + 25) + 2 * (__int16)v9);
          WrdTabDescriptor::operator=(*(void *)(*((void *)this + 22) + 8 * v10), *(void *)(*((void *)this + 22) + 8 * (__int16)v9));
          int v9 = (__int16)(v9 - 1);
        }
        while (v9 >= a2 && v9 < 63);
      }
      *(_WORD *)(*((void *)this + 25) + 2 * a2) = a3;
      WrdTabDescriptor::operator=(*(void *)(*((void *)this + 22) + 8 * a2), (uint64_t)a4);
      ++*((_WORD *)this + 68);
      *((void *)this + 2) |= 0x100uLL;
    }
  }
}

WrdParagraphProperties *WrdParagraphProperties::setLeftIndent(WrdParagraphProperties *this, int a2)
{
  *((void *)this + 2) |= 0x4000000000000000uLL;
  *((_DWORD *)this + 67) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setFirstLineLeftIndent(WrdParagraphProperties *this, int a2)
{
  *((_WORD *)this + 12) |= 1u;
  *((_DWORD *)this + 65) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setLeadingIndent(WrdParagraphProperties *this, int a2)
{
  *((void *)this + 2) |= 0x1000000000000000uLL;
  *((_DWORD *)this + 63) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setFirstLineLeadingIndent(WrdParagraphProperties *this, int a2)
{
  *((void *)this + 2) |= 0x8000000000000000;
  *((_DWORD *)this + 64) = a2;
  return this;
}

void sub_238B2F9A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B2FA84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B2FB4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B2FD2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B2FDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B2FE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B2FF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B2FFC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B301E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B302F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B30408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B30BF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B30D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B30E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B3184C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B31B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B31CB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B31E00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WrdTabDescriptor::WrdTabDescriptor(WrdTabDescriptor *this, const WrdTabDescriptor *a2)
{
  *(void *)this = &unk_26EBE6D40;
  *((void *)this + 1) = *((void *)a2 + 1);
}

void sub_238B320EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B32244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B32394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B32420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WrdStyleSheet::~WrdStyleSheet(WrdStyleSheet *this)
{
  WrdStyleSheet::~WrdStyleSheet(this);
  JUMPOUT(0x23EC997B0);
}

{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  *(void *)this = &unk_26EBE6D00;
  int v2 = *((void *)this + 4) - *((void *)this + 3);
  if ((v2 & 0x7FFFFFFF8) != 0)
  {
    uint64_t v3 = 0;
    __int16 v4 = (v2 >> 3);
    do
    {
      uint64_t v5 = *((void *)this + 3);
      int v6 = *(void *)(v5 + 8 * v3);
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        uint64_t v5 = *((void *)this + 3);
      }
      *(void *)(v5 + 8 * v3++) = 0;
    }
    while (v4 != v3);
  }
  int v7 = *((void *)this + 2);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 2) = 0;
  BOOL v8 = (void *)*((void *)this + 3);
  if (v8)
  {
    *((void *)this + 4) = v8;
    operator delete(v8);
  }
}

void WrdStyle::~WrdStyle(WrdStyle *this)
{
  WrdStyle::~WrdStyle(this);
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBE6CC0;
  WrdStyle::reset(this);
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 128, *((void **)this + 17));
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 104, *((void **)this + 14));
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 80, *((void **)this + 11));
  CsString::~CsString((CsString *)((char *)this + 8));
}

void sub_238B326C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B327BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WrdBinaryReader::read(uint64_t a1, int *a2)
{
  int v2 = *a2;
  *(_DWORD *)(a1 + 188) = *a2;
  if ((v2 & 0xFFFFFFFE) != 4)
  {
    *a2 = 0;
    FCLCB = (unsigned int *)WrdFileInformationBlock::getFCLCB(*(void *)(a1 + 32) + 160, 50);
    if (FCLCB[1])
    {
      int v6 = (int *)FCLCB;
      int v7 = *(SsrwOOStream **)(*(void *)(a1 + 32) + 128);
      if (*(_DWORD *)(a1 + 624) != 24)
      {
        (*((void (**)(void, void, void))v7->var0 + 2))(*(void *)(*(void *)(a1 + 32) + 128), *FCLCB, 0);
        int v12 = 1;
LABEL_14:
        *a2 = v12;
LABEL_15:
        WrdEshReader::start((EshDataModelVisitor **)(a1 + 40), v7);
        *(_DWORD *)(a1 + 624) = 24;
        return;
      }
      uint64_t v8 = *(void *)(a1 + 48);
      if (!v8)
      {
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = 1004;
      }
      int v9 = *v6;
      if (v9 == (*(unsigned int (**)(uint64_t))(*(void *)v8 + 40))(v8)) {
        goto LABEL_15;
      }
      int v10 = (*((uint64_t (**)(SsrwOOStream *))v7->var0 + 8))(v7);
      unsigned int v11 = v6[1] + *v6;
      if (v11 > (*((unsigned int (**)(SsrwOOStream *))v7->var0 + 5))(v7))
      {
        if (v10 == 1) {
          int v12 = 3;
        }
        else {
          int v12 = 0;
        }
        if (!v10) {
          int v12 = 2;
        }
        goto LABEL_14;
      }
      EshBinaryReader::finish((EshBinaryReader *)(a1 + 40));
      *(_DWORD *)(a1 + 624) = 0;
    }
    *a2 = 0;
  }
}

uint64_t WrdBookmarkTable::getBookmark(WrdBookmarkTable *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 2) + 8 * a2);
}

void sub_238B32BD8(void *a1, int a2)
{
  if (a2 == 3)
  {
    uint64_t v3 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v3);
    __cxa_end_catch();
  }
  else
  {
    __int16 v4 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      [v4 raise];
    }
    else {
      +[TCMessageException raise:TCUnknownProblemMessage];
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x238B32B94);
}

void sub_238B32C7C(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (a2 == 2)
  {
    [objc_begin_catch(exc_buf) raise];
    objc_end_catch();
    JUMPOUT(0x238B32B94);
  }

  _Unwind_Resume(exc_buf);
}

void WrdListFormatTable::WrdListFormatTable(WrdListFormatTable *this)
{
  *(void *)this = &unk_26EBE63D0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
}

WrdDocumentFileRecord *WrdBinaryReader::read(WrdParser **this, WrdListFormatTable *a2)
{
  WrdParser::parse(this[4], a2);
  uint64_t result = this[27];
  if (((*((void *)result + 2) - *((void *)result + 1)) & 0x3FFFFFFFCLL) != 0)
  {
    unsigned int v5 = 0;
    do
    {
      ListToStyleint Index = (unsigned __int16 *)WrdDocumentFileRecord::getListToStyleIndex(result, v5);
      uint64_t v7 = *ListToStyleIndex;
      uint64_t v8 = *((void *)a2 + 1);
      if (((unint64_t)(*((void *)a2 + 2) - v8) >> 3) <= v7) {
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      }
      *(_WORD *)(*(void *)(v8 + 8 * v7) + 48) = ListToStyleIndex[1];
      ++v5;
      uint64_t result = this[27];
    }
    while (v5 < ((*((void *)result + 2) - *((void *)result + 1)) >> 2));
  }
  return result;
}

void WrdParser::parse(WrdParser *this, WrdListFormatTable *a2)
{
  unint64_t started = WrdParser::startFCLCB(this, 0x49u);
  CsSimpleHeapVector<WrdListFormat>::clear((void *)a2 + 1);
  if (HIDWORD(started))
  {
    int v5 = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
    if (v5 >= 1)
    {
      int v6 = v5;
      do
      {
        uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 35) + 16))(*((void *)this + 35), 31);
        WrdParser::parse(this, (WrdListFormat *)v7);
        if (*(_WORD *)(v7 + 50)) {
          char v8 = 1;
        }
        else {
          char v8 = WrdListFormat::s_bMaxNumberOfLevels;
        }
        *(unsigned char *)(v7 + 52) = v8;
        WrdListFormatTable::append((void **)a2, (WrdListFormat *)v7);
        --v6;
      }
      while (v6);
      unsigned int v9 = *((_DWORD *)a2 + 4) - *((_DWORD *)a2 + 2);
      unsigned int v10 = (unsigned __int16)(v9 >> 3);
      if ((unsigned __int16)(v9 >> 3))
      {
        uint64_t v11 = *((void *)a2 + 1);
        if (((*((void *)a2 + 2) - v11) & 0x7FFFFFFF8) == 0) {
          goto LABEL_24;
        }
        uint64_t v12 = 0;
LABEL_11:
        unint64_t v13 = *(WrdEmbeddedTrueTypeFontTable **)(v11 + 8 * v12);
        if (!*((unsigned char *)v13 + 52))
        {
          if (v10 <= ++v12) {
            return;
          }
          goto LABEL_23;
        }
        int v14 = 0;
        while (1)
        {
          BOOL v15 = WrdParser::checkForValidListLevels(this);
          if (!v15) {
            break;
          }
          BOOL v16 = v15;
          int v17 = (WrdListLevelFormat *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 35) + 16))(*((void *)this + 35), 35);
          WrdParser::parse(this, v17);
          WrdEmbeddedTrueTypeFontTable::append(v13, (WrdEmbeddedTrueTypeFont *)v17);
          if (++v14 >= *((unsigned __int8 *)v13 + 52) || !v16)
          {
            ++v12;
            char v19 = !v16;
            if (v10 <= v12) {
              char v19 = 1;
            }
            if (v19) {
              return;
            }
LABEL_23:
            uint64_t v11 = *((void *)a2 + 1);
            if (v12 >= ((unint64_t)(*((void *)a2 + 2) - v11) >> 3)) {
LABEL_24:
            }
              std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
            goto LABEL_11;
          }
        }
        if (v10 > (unsigned __int16)v12)
        {
          uint64_t v20 = *((void *)a2 + 2);
          do
          {
            uint64_t v21 = *(void *)(v20 - 8);
            if (v21)
            {
              (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
              uint64_t v20 = *((void *)a2 + 2);
            }
            *(void *)(v20 - 8) = 0;
            uint64_t v20 = *((void *)a2 + 2) - 8;
            *((void *)a2 + 2) = v20;
            LODWORD(v12) = v12 + 1;
          }
          while (v10 > (unsigned __int16)v12);
        }
      }
    }
  }
}

void sub_238B32FF8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *CsSimpleHeapVector<WrdListFormat>::clear(void *result)
{
  uint64_t v1 = result[1];
  unint64_t v2 = (unint64_t)(v1 - *result) >> 3;
  if (v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t result = *(void **)(v1 - 8);
      if (result)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
        uint64_t v1 = v3[1];
      }
      *(void *)(v1 - 8) = 0;
      uint64_t v1 = v3[1] - 8;
      v3[1] = v1;
      LODWORD(v2) = v2 - 1;
    }
    while (v2);
  }
  return result;
}

void WrdListFormat::WrdListFormat(WrdListFormat *this)
{
  *(void *)this = &unk_26EBE6310;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  *((_WORD *)this + 24) = 12;
  *((_WORD *)this + 25) &= 0xE000u;
  *((unsigned char *)this + 52) = 0;
}

void *WrdListFormat::init(void *this)
{
  if (!this[4])
  {
    uint64_t v1 = this;
    this = operator new[](0x12uLL);
    v1[4] = this;
    *this = 0;
    this[1] = 0;
    *((_WORD *)this + 8) = 0;
  }
  return this;
}

int8x8_t WrdParser::parse(WrdParser *this, WrdListFormat *a2)
{
  *((_DWORD *)a2 + 10) = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
  *((_DWORD *)a2 + 11) = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
  if (WrdListFormat::s_bMaxNumberOfLevels)
  {
    int v4 = 0;
    do
      *(_WORD *)(*((void *)a2 + 4) + 2 * (__int16)v4++) = (*(uint64_t (**)(void))(**((void **)this + 16)
                                                                                                + 72))(*((void *)this + 16));
    while (WrdListFormat::s_bMaxNumberOfLevels > (__int16)v4);
  }
  unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
  int8x8_t v6 = vand_s8((int8x8_t)vdup_n_s16(v5), (int8x8_t)0x8000400020001);
  *((_WORD *)a2 + 25) = v6.i16[0] | v6.i16[2] | ((v6.i32[0] | v6.i32[1]) >> 16) | v5 & 0x10 | *((_WORD *)a2 + 25) & 0xFFE0;
  int v7 = *((_DWORD *)this + 38);
  unsigned int v8 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
  if (v7 >= 9)
  {
    int8x8_t result = vand_s8((int8x8_t)vshl_n_s16(vdup_n_s16(v8), 5uLL), (int8x8_t)0x400020001000800);
    *((_WORD *)a2 + 25) = (result.i16[0] | result.i16[2] | ((result.i32[0] | result.i32[1]) >> 16) | *((_WORD *)a2 + 25) & 0xE01F | (32 * v8) & 0x60 | (32 * v8) & 0x80)
                        + ((32 * v8) & 0x1000);
  }
  return result;
}

WrdListFormat *WrdListFormatTable::append(void **this, WrdListFormat *a2)
{
  uint64_t v3 = a2;
  CsSimpleHeapVector<XlRecord>::pushBack(this + 1, (uint64_t *)&v3);
  int8x8_t result = v3;
  if (v3) {
    return (WrdListFormat *)(*(uint64_t (**)(WrdListFormat *))(*(void *)v3 + 8))(v3);
  }
  return result;
}

void sub_238B33358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    WrdListFormatTable::append(a10);
  }
  _Unwind_Resume(exception_object);
}

void CsSimpleHeapVector<XlRecord>::pushBack(void **a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  unint64_t v7 = (unint64_t)a1[2];
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v6 = v7;
  unsigned int v8 = *(void **)(v5 - 8);
  if ((unint64_t)v8 >= v7)
  {
    unint64_t v10 = (char *)v8 - (unsigned char *)*a1;
    unint64_t v11 = (v6 - (unint64_t)*a1) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v5, v13);
      uint64_t v16 = v15;
    }
    else
    {
      int v14 = 0;
      uint64_t v16 = 0;
    }
    int v17 = &v14[v10 & 0x7FFFFFFF8];
    int v18 = &v14[8 * v16];
    *(void *)int v17 = v2;
    unsigned int v9 = v17 + 8;
    uint64_t v20 = (char *)*a1;
    char v19 = (char *)a1[1];
    if (v19 != *a1)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      char v19 = (char *)*a1;
    }
    *a1 = v17;
    a1[1] = v9;
    a1[2] = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    void *v8 = v2;
    unsigned int v9 = v8 + 1;
  }
  a1[1] = v9;
  *a2 = 0;
}

BOOL WrdParser::checkForValidListLevels(WrdParser *this)
{
  *(void *)&__n_6[10] = *MEMORY[0x263EF8340];
  unsigned int __n = 10;
  (*(void (**)(void, unsigned char *, unsigned int *))(**((void **)this + 16) + 56))(*((void *)this + 16), __n_6, &__n);
  unsigned int v2 = __n;
  int v3 = memcmp(__n_6, "          ", __n);
  if (v3) {
    (*(void (**)(void, void, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), -v2, 1);
  }
  else {
    ChLogFunction("Spaces appearing where the list level should!", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdParser.cpp", 1461);
  }
  return v3 != 0;
}

void WrdListLevelFormat::WrdListLevelFormat(WrdListLevelFormat *this, WrdParagraphProperties *a2, WrdCharacterProperties *a3)
{
  this->var12 = 0;
  this->int var3 = 0;
  this->unsigned int var4 = 0;
  *(void *)&this->var5 = 0;
  this->var7 = 0;
  *(void *)&this->var9 = 0;
  this->var11 = 0;
  *((unsigned char *)this + 80) &= 0xE0u;
  *(_WORD *)&this->var18 = 0;
  *(void *)this->var8 = 0;
  this->var8[8] = 0;
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBE6410;
  this->unsigned int var1 = a2;
  this->uint64_t var2 = a3;
}

unsigned __int16 *WrdParser::parse(WrdParser *this, WrdListLevelFormat *a2)
{
  (*(void (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16));
  a2->int var3 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
  a2->var5 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
  a2->var6 = v4 & 3;
  *((unsigned char *)a2 + 80) = *((unsigned char *)a2 + 80) & 0xE0 | (v4 >> 2) & 0x1F;
  for (uint64_t i = 44; i != 53; ++i)
    *((unsigned char *)&a2->var0 + i) = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
  a2->var7 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
  a2->var9 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
  a2->var10 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
  unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
  unsigned int v7 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
  uint64_t v8 = **((void **)this + 16);
  if (*((int *)this + 38) < 9)
  {
    (*(void (**)(void))(v8 + 16))();
  }
  else
  {
    a2->var18 = (*(uint64_t (**)(void))(v8 + 64))();
    *((unsigned char *)a2 + 82) = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
  }
  WrdParser::parseGrpprl(this, *((void *)this + 16), v7, 0, 0, 0, a2->var1, 0, 0, 0, 0, 0, 0, 0, 0);
  WrdParser::parseGrpprl(this, *((void *)this + 16), v6, 0, 0, 0, 0, a2->var2, 0, 0, 0, 0, 0, 0, 0);
  unsigned int v9 = (*(uint64_t (**)(void))(**((void **)this + 16) + 128))(*((void *)this + 16));
  int8x8_t result = WrdListLevelFormat::setNumberTextLength(a2, v9);
  if (a2->var11)
  {
    unint64_t v11 = 0;
    do
    {
      int8x8_t result = (unsigned __int16 *)(*(uint64_t (**)(void))(**((void **)this + 16) + 128))(*((void *)this + 16));
      a2->var12[v11++] = (unsigned __int16)result;
    }
    while (v11 < a2->var11);
  }
  return result;
}

WrdCharacterProperties *WrdCharacterProperties::setFontIndexForASCIIText(WrdCharacterProperties *this, unsigned __int16 a2)
{
  *(void *)&this->var2 |= 0x2000uLL;
  this->var43 = a2;
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::setFontIndexForOtherText(WrdCharacterProperties *this, unsigned __int16 a2)
{
  *(void *)&this->var2 |= 0x8000uLL;
  this->var45 = a2;
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::setCharacterTypeIDHint(WrdCharacterProperties *this, unsigned __int8 a2)
{
  *(void *)&this->var2 |= 0x2000000000000uLL;
  this->var107 = a2;
  return this;
}

unsigned __int16 *WrdListLevelFormat::setNumberTextLength(WrdListLevelFormat *this, unsigned int a2)
{
  int8x8_t result = this->var12;
  if (result) {
    int8x8_t result = (unsigned __int16 *)MEMORY[0x23EC99790](result, 0x1000C80BDFB0063);
  }
  this->var12 = 0;
  if (a2)
  {
    int8x8_t result = (unsigned __int16 *)operator new[](2 * a2);
    this->var12 = result;
  }
  this->var11 = a2;
  return result;
}

void sub_238B33AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B33BB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B33CD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B33FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, void *a12)
{
  _Unwind_Resume(a1);
}

void WrdListFormatTable::~WrdListFormatTable(void **this)
{
  *this = &unk_26EBE63D0;
  CsSimpleHeapVector<WrdListFormat>::~CsSimpleHeapVector(this + 1);
  JUMPOUT(0x23EC997B0);
}

{
  *this = &unk_26EBE63D0;
  CsSimpleHeapVector<WrdListFormat>::~CsSimpleHeapVector(this + 1);
}

void **CsSimpleHeapVector<WrdListFormat>::~CsSimpleHeapVector(void **a1)
{
  CsSimpleHeapVector<WrdListFormat>::clear(a1);
  unsigned int v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    operator delete(v2);
  }
  return a1;
}

void WrdListFormat::~WrdListFormat(WrdListFormat *this)
{
  WrdListFormat::~WrdListFormat(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBE6310;
  WrdListFormat::cleanup(this);
  unsigned int v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

uint64_t WrdListFormat::cleanup(WrdListFormat *this)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C80BDFB0063);
  }
  *((void *)this + 4) = 0;
  uint64_t v3 = *((void *)this + 1);
  if (((*((void *)this + 2) - v3) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t result = *(void *)(v3 + 8 * v4);
      if (result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        uint64_t v3 = *((void *)this + 1);
      }
      *(void *)(v3 + 8 * v4++) = 0;
      uint64_t v3 = *((void *)this + 1);
    }
    while (v4 < ((unint64_t)(*((void *)this + 2) - v3) >> 3));
  }
  *((void *)this + 2) = v3;
  return result;
}

void WrdListLevelFormat::~WrdListLevelFormat(WrdListLevelFormat *this)
{
  WrdListLevelFormat::~WrdListLevelFormat(this);
  JUMPOUT(0x23EC997B0);
}

{
  unsigned __int16 *var12;
  WrdParagraphProperties *var1;
  WrdCharacterProperties *var2;

  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBE6410;
  var12 = this->var12;
  if (var12) {
    MEMORY[0x23EC99790](var12, 0x1000C80BDFB0063);
  }
  this->var12 = 0;
  unsigned int var1 = this->var1;
  if (var1) {
    (*(void (**)(WrdParagraphProperties *))(*(void *)var1 + 8))(var1);
  }
  this->unsigned int var1 = 0;
  uint64_t var2 = this->var2;
  if (var2) {
    (*((void (**)(WrdCharacterProperties *))var2->var0 + 1))(var2);
  }
  this->uint64_t var2 = 0;
}

void sub_238B34578(void *a1, int a2)
{
  if (a2 == 3)
  {
    uint64_t v3 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v3);
    __cxa_end_catch();
  }
  else
  {
    unint64_t v4 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      [v4 raise];
    }
    else {
      +[TCMessageException raise:TCUnknownProblemMessage];
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x238B34544);
}

void sub_238B345EC(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (a2 == 2)
  {
    [objc_begin_catch(exc_buf) raise];
    objc_end_catch();
    JUMPOUT(0x238B34544);
  }

  _Unwind_Resume(exc_buf);
}

void WrdListFormatOverrideTable::WrdListFormatOverrideTable(WrdListFormatOverrideTable *this)
{
  *(void *)this = &unk_26EBE6390;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
}

const char *WrdBinaryReader::read(WrdParser **this, WrdListFormatOverrideTable *a2)
{
  return WrdParser::parse(this[4], a2);
}

const char *WrdParser::parse(WrdParser *this, WrdListFormatOverrideTable *a2)
{
  unint64_t started = WrdParser::startFCLCB(this, 0x4Au);
  int v5 = started;
  unint64_t v6 = HIDWORD(started);
  uint64_t result = (const char *)WrdAnnotationDateTimeTable::clear(a2);
  if (v6)
  {
    int v8 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
    if (v8 >= 1)
    {
      int v9 = v8;
      if ((*(unsigned int (**)(void))(**((void **)this + 16) + 48))(*((void *)this + 16)) < 16 * v8) {
        goto LABEL_23;
      }
      WrdParser::parseListFormatOverrides(this, a2, v9);
      if ((*(unsigned int (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16)) > (int)v6 + v5) {
        goto LABEL_23;
      }
    }
    unsigned int v10 = v6 + v5;
    if ((int)((*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3) >= 1)
    {
      unsigned int v11 = 0;
      while (1)
      {
        EmbeddedFontReference = (XlChartDataSeries *)WrdEmbeddedTTFRecordTable::getEmbeddedFontReference(a2, v11);
        if ((*(unsigned int (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16)) > v10) {
          goto LABEL_23;
        }
        (*(void (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
        if (((*((_DWORD *)EmbeddedFontReference + 8) - *((_DWORD *)EmbeddedFontReference + 6)) & 0x7F8) != 0) {
          break;
        }
LABEL_16:
        if ((int)++v11 >= (int)((*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3)) {
          goto LABEL_17;
        }
      }
      unsigned __int8 v13 = 0;
      while (1)
      {
        DefaultFormat = (WrdListLevelFormatOverride *)XlChartDataSeries::getDefaultFormat(EmbeddedFontReference, v13);
        if ((*(unsigned int (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16)) > v10) {
          break;
        }
        WrdParser::parse(this, DefaultFormat);
        if (WrdListLevelFormatOverride::needsListLevel(DefaultFormat))
        {
          if ((*(unsigned int (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16)) > v10) {
            break;
          }
          ClientVisitor = (WrdListLevelFormat *)EshDataModelVisitor::getClientVisitor((EshDataModelVisitor *)DefaultFormat);
          WrdParser::parse(this, ClientVisitor);
        }
        if ((*(unsigned int (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16)) > v10) {
          break;
        }
        if (++v13 >= ((*((_DWORD *)EmbeddedFontReference + 8)
                                                                   - *((_DWORD *)EmbeddedFontReference + 6)) >> 3))
          goto LABEL_16;
      }
LABEL_23:
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 2001;
    }
LABEL_17:
    if ((*(unsigned int (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16)) > v10) {
      goto LABEL_23;
    }
    uint64_t result = (const char *)(*(uint64_t (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16));
    if (result != v10)
    {
      return ChLogFunction("Wrong number of bytes reading WrdListFormatOverrideTable\n", 1, 2, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdParser.cpp", 1532);
    }
  }
  return result;
}

void WrdParser::parseListFormatOverrides(WrdParser *this, WrdListFormatOverrideTable *a2, int a3)
{
  if (a3 >= 1)
  {
    int v3 = a3;
    do
    {
      unint64_t v6 = (WrdListFormatOverride *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 35) + 16))(*((void *)this + 35), 32);
      WrdParser::parse(this, v6);
      WrdEmbeddedTrueTypeFontTable::append(a2, v6);
      --v3;
    }
    while (v3);
  }
}

void sub_238B34A7C(_Unwind_Exception *exception_object)
{
  if (v1) {
    WrdAnnotation::clone(v1);
  }
  _Unwind_Resume(exception_object);
}

void WrdListLevelFormatOverride::WrdListLevelFormatOverride(WrdListLevelFormatOverride *this, WrdListLevelFormat *a2)
{
  this->uint64_t var2 = 0;
  this->int var3 = 0;
  *(_WORD *)((char *)this + 21) &= 0xFC00u;
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBE6450;
  this->unsigned int var1 = a2;
}

void WrdListFormatOverride::WrdListFormatOverride(WrdListFormatOverride *this, WrdListLevelFormatOverride *a2)
{
  *((_DWORD *)this + 4) = -1;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *(_DWORD *)((char *)this + 47) = 0;
  *(void *)this = &unk_26EBE6350;
  *((void *)this + 1) = a2;
}

uint64_t WrdParser::parse(WrdParser *this, WrdListFormatOverride *a2)
{
  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 8, 1);
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
  WrdListFormatOverride::setNumberOfLevelsOverridden(a2, v4);
  uint64_t v5 = **((void **)this + 16);
  if (*((int *)this + 38) < 9)
  {
    (*(void (**)(void))(v5 + 16))();
  }
  else
  {
    *((unsigned char *)a2 + 48) = (*(uint64_t (**)(void))(v5 + 64))();
    *((unsigned char *)a2 + 50) = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
  }
  unint64_t v6 = *(uint64_t (**)(void))(**((void **)this + 16) + 64);
  return v6();
}

void WrdListFormatOverride::setNumberOfLevelsOverridden(WrdListFormatOverride *this, unsigned int a2)
{
  WrdListFormatOverride::cleanup(this);
  *((unsigned char *)this + 49) = a2;
  if (a2)
  {
    unsigned int v4 = 0;
    do
    {
      uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 16))(*((void *)this + 1));
      uint64_t v6 = v5;
      int v8 = (uint64_t *)*((void *)this + 4);
      unint64_t v7 = *((void *)this + 5);
      if ((unint64_t)v8 >= v7)
      {
        uint64_t v10 = *((void *)this + 3);
        unint64_t v11 = (unint64_t)v8 - v10;
        unint64_t v12 = (v7 - v10) >> 3;
        unsigned int v13 = 2 * v12;
        if (2 * (int)v12 <= (v11 >> 3) + 1) {
          unsigned int v13 = (v11 >> 3) + 1;
        }
        if (v12 >= 0x7FFFFFFF) {
          unint64_t v14 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unsigned int v15 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 40, v14);
          uint64_t v17 = v16;
        }
        else
        {
          unsigned int v15 = 0;
          uint64_t v17 = 0;
        }
        int v18 = (uint64_t *)&v15[v11 & 0x7FFFFFFF8];
        *int v18 = v6;
        int v9 = v18 + 1;
        uint64_t v20 = (char *)*((void *)this + 3);
        char v19 = (char *)*((void *)this + 4);
        if (v19 != v20)
        {
          do
          {
            uint64_t v21 = *((void *)v19 - 1);
            v19 -= 8;
            *--int v18 = v21;
          }
          while (v19 != v20);
          char v19 = (char *)*((void *)this + 3);
        }
        *((void *)this + 3) = v18;
        *((void *)this + 4) = v9;
        *((void *)this + 5) = &v15[8 * v17];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        uint64_t *v8 = v5;
        int v9 = v8 + 1;
      }
      *((void *)this + 4) = v9;
      ++v4;
    }
    while (v4 < a2);
  }
}

void sub_238B34DAC(_Unwind_Exception *exception_object)
{
  if (v1) {
    WrdAnnotation::clone(v1);
  }
  _Unwind_Resume(exception_object);
}

void *WrdListFormatOverride::cleanup(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[3];
  if (((this[4] - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v3 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v3);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[3];
      }
      *(void *)(v2 + 8 * v3++) = 0;
      uint64_t v2 = v1[3];
    }
    while (v3 < ((unint64_t)(v1[4] - v2) >> 3));
  }
  v1[4] = v2;
  return this;
}

void sub_238B34F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WrdListFormatOverrideTable::~WrdListFormatOverrideTable(WrdListFormatOverrideTable *this)
{
  WrdListFormatOverrideTable::~WrdListFormatOverrideTable(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBE6390;
  WrdAnnotationDateTimeTable::clear(this);
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

void WrdListFormatOverride::~WrdListFormatOverride(WrdListFormatOverride *this)
{
  WrdListFormatOverride::~WrdListFormatOverride(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;
  void *v3;

  *(void *)this = &unk_26EBE6350;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 1) = 0;
  WrdListFormatOverride::cleanup(this);
  unint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
}

void WrdListLevelFormatOverride::~WrdListLevelFormatOverride(WrdListLevelFormatOverride *this)
{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBE6450;
  unsigned int var1 = this->var1;
  if (var1) {
    (*((void (**)(WrdListLevelFormat *))var1->var0 + 1))(var1);
  }
  this->unsigned int var1 = 0;
  JUMPOUT(0x23EC997B0);
}

{
  WrdListLevelFormat *var1;

  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBE6450;
  unsigned int var1 = this->var1;
  if (var1) {
    (*((void (**)(WrdListLevelFormat *))var1->var0 + 1))(var1);
  }
  this->unsigned int var1 = 0;
}

void sub_238B352F8(void *a1, int a2)
{
  if (a2 == 3)
  {
    unint64_t v3 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v3);
    __cxa_end_catch();
  }
  else
  {
    unsigned int v4 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      [v4 raise];
    }
    else {
      +[TCMessageException raise:TCUnknownProblemMessage];
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x238B352C4);
}

void sub_238B3537C(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (a2 == 2)
  {
    [objc_begin_catch(exc_buf) raise];
    objc_end_catch();
    JUMPOUT(0x238B352C4);
  }

  _Unwind_Resume(exc_buf);
}

uint64_t WrdStringWithDataTypedTable::WrdStringWithDataTypedTable(uint64_t result, int a2, uint64_t a3)
{
  *(void *)uint64_t result = &unk_26EBE6C80;
  *(_DWORD *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  return result;
}

void WrdBinaryReader::read(WrdBinaryReader *this, WrdStringWithDataTypedTable *a2)
{
  int v2 = *((_DWORD *)a2 + 2);
  if (v2 <= 90)
  {
    if (v2 == 51)
    {
      uint64_t v3 = *((void *)this + 4);
      unsigned int v4 = (unsigned __int16 *)*((void *)a2 + 2);
      int v5 = 51;
      goto LABEL_12;
    }
    if (v2 == 72)
    {
      uint64_t v3 = *((void *)this + 4);
      unsigned int v4 = (unsigned __int16 *)*((void *)a2 + 2);
      int v5 = 72;
      goto LABEL_12;
    }
LABEL_15:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  if (v2 == 91)
  {
    uint64_t v3 = *((void *)this + 4);
    unsigned int v4 = (unsigned __int16 *)*((void *)a2 + 2);
    int v5 = 91;
    goto LABEL_12;
  }
  if (v2 != 123) {
    goto LABEL_15;
  }
  uint64_t v3 = *((void *)this + 4);
  if (*(unsigned __int16 *)(v3 + 232) < 0x90u) {
    return;
  }
  unsigned int v4 = (unsigned __int16 *)*((void *)a2 + 2);
  int v5 = 144;
LABEL_12:
  WrdParser::parse(v3, v4, v5);
}

void WrdStringWithDataTypedTable::~WrdStringWithDataTypedTable(WrdStringWithDataTypedTable *this)
{
  *(void *)this = &unk_26EBE6C80;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBE6C80;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
}

void sub_238B35890()
{
}

void sub_238B35968()
{
  objc_end_catch();
  JUMPOUT(0x238B35938);
}

void WrdOutlineListData::init(WrdOutlineListData *this)
{
  if (((*((void *)this + 2) - *((void *)this + 1)) & 0x7FFFFFFF8) == 0)
  {
    unsigned int v2 = 0;
    uint64_t v3 = (char *)this + 24;
    do
    {
      uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 4) + 16))(*((void *)this + 4));
      uint64_t v5 = v4;
      unint64_t v7 = (uint64_t *)*((void *)this + 2);
      unint64_t v6 = *((void *)this + 3);
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v9 = *((void *)this + 1);
        unint64_t v10 = (unint64_t)v7 - v9;
        unint64_t v11 = (v6 - v9) >> 3;
        unsigned int v12 = 2 * v11;
        if (2 * (int)v11 <= (v10 >> 3) + 1) {
          unsigned int v12 = (v10 >> 3) + 1;
        }
        if (v11 >= 0x7FFFFFFF) {
          unint64_t v13 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13)
        {
          unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v3, v13);
          uint64_t v16 = v15;
        }
        else
        {
          unint64_t v14 = 0;
          uint64_t v16 = 0;
        }
        uint64_t v17 = (uint64_t *)&v14[v10 & 0x7FFFFFFF8];
        uint64_t *v17 = v5;
        int v8 = v17 + 1;
        char v19 = (char *)*((void *)this + 1);
        int v18 = (char *)*((void *)this + 2);
        if (v18 != v19)
        {
          do
          {
            uint64_t v20 = *((void *)v18 - 1);
            v18 -= 8;
            *--uint64_t v17 = v20;
          }
          while (v18 != v19);
          int v18 = (char *)*((void *)this + 1);
        }
        *((void *)this + 1) = v17;
        *((void *)this + 2) = v8;
        *((void *)this + 3) = &v14[8 * v16];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *unint64_t v7 = v4;
        int v8 = v7 + 1;
      }
      *((void *)this + 2) = v8;
    }
    while (v2++ < 8);
  }
}

uint64_t WrdSectionProperties::WrdSectionProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)a1 = &unk_26EBE6A08;
  *(void *)(a1 + 8) = &unk_26EBE6A38;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 168) = a1 + 176;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = a1 + 200;
  *(void *)(a1 + 208) = 0;
  OcBinaryData::OcBinaryData((OcBinaryData *)(a1 + 280));
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(void *)(a1 + 48) = a5;
  *(void *)(a1 + 56) = a6;
  *(void *)(a1 + 64) = a7;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  return a1;
}

void sub_238B35BBC(_Unwind_Exception *a1)
{
  OcBinaryData::~OcBinaryData(v5);
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy(v2, *v4);
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy(v1, *v3);
  _Unwind_Resume(a1);
}

uint64_t WrdSectionProperties::reset(WrdSectionProperties *this)
{
  uint64_t v1 = this;
  *((void *)this + 2) = 0;
  *(void *)((char *)this + 242) = 0x1000000;
  *(_OWORD *)((char *)this + 72) = xmmword_238EEF700;
  *((_WORD *)this + 116) = 0;
  *(_OWORD *)((char *)this + 216) = xmmword_238EEF710;
  *(void *)((char *)this + 234) = 0;
  *(_OWORD *)((char *)this + 104) = xmmword_238EDD5C0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *(_OWORD *)((char *)this + 136) = xmmword_238EEF720;
  *((void *)this + 19) = 0x2D000000000;
  *((_DWORD *)this + 40) = 720;
  *(_OWORD *)((char *)this + 120) = xmmword_238EEF730;
  *(_OWORD *)((char *)this + 252) = xmmword_238EEF740;
  *(void *)((char *)this + 268) = 0;
  *((_DWORD *)this + 69) = 65537;
  uint64_t v2 = (void *)((char *)this + 200);
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 192, *((void **)this + 25));
  *((void *)v1 + 24) = v2;
  *uint64_t v2 = 0;
  uint64_t v3 = (void *)*((void *)v1 + 22);
  uint64_t v1 = (WrdSectionProperties *)((char *)v1 + 176);
  *((void *)v1 + 4) = 0;
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)v1 - 8, v3);
  *((void *)v1 - 1) = v1;
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0;
  (*(void (**)(void))(**((void **)v1 - 19) + 24))(*((void *)v1 - 19));
  (*(void (**)(void))(**((void **)v1 - 18) + 24))(*((void *)v1 - 18));
  (*(void (**)(void))(**((void **)v1 - 17) + 24))(*((void *)v1 - 17));
  (*(void (**)(void))(**((void **)v1 - 16) + 24))(*((void *)v1 - 16));
  (*(void (**)(void))(**((void **)v1 - 15) + 24))(*((void *)v1 - 15));
  uint64_t v4 = *(uint64_t (**)(void))(**((void **)v1 - 14) + 24);
  return v4();
}

uint64_t WrdOutlineListData::reset(WrdOutlineListData *this)
{
  *((unsigned char *)this + 64) = 0;
  *((_DWORD *)this + 14) = 0;
  bzero(*((void **)this + 6), 2 * *((unsigned int *)this + 15));
  for (uint64_t i = 0; i != 72; i += 8)
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + i) + 24))(*(void *)(*((void *)this + 1) + i));
  return result;
}

void *WrdSectionTextRun::WrdSectionTextRun(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = (void *)WrdTextRun::WrdTextRun(a1, a2, a3);
  *uint64_t result = &unk_26EBE6A90;
  result[3] = a4;
  result[4] = a5;
  return result;
}

uint64_t WrdTextRun::WrdTextRun(uint64_t result, int a2, int a3)
{
  *(void *)uint64_t result = &unk_26EBE4AC0;
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

WrdSectionProperties *WrdBinaryReader::read(WrdBinaryReader *this, WrdSectionTextRun *a2)
{
  unsigned int v18 = 0;
  unsigned int var4 = a2->var4;
  var5 = a2->var5;
  (*(void (**)(WrdSectionProperties *))(*(void *)var4 + 16))(var4);
  uint64_t result = (WrdSectionProperties *)(*(uint64_t (**)(WrdSectionProperties *))(*(void *)var5 + 16))(var5);
  a2->int var3 = 0;
  if (a2->var1)
  {
    exception = __cxa_allocate_exception(4uLL);
    int v17 = 1004;
    goto LABEL_19;
  }
  signed int v7 = *(_DWORD *)(*((void *)this + 17) + 40);
  if (!v7) {
    return result;
  }
  signed int var2 = a2->var2;
  if (v7 <= var2) {
    return result;
  }
  uint64_t v9 = (const WrdSectionDescriptorTable *)*((void *)this + 24);
  if (!v9)
  {
    exception = __cxa_allocate_exception(4uLL);
    int v17 = 1003;
    goto LABEL_19;
  }
  uint64_t result = (WrdSectionProperties *)WrdParser::applyExceptionsForCP(*((WrdParser **)this + 4), v9, a2->var2, var4, var5, &v18);
  unsigned int v10 = v18;
  if (!v18)
  {
LABEL_11:
    uint64_t v11 = *((void *)this + 4);
    goto LABEL_12;
  }
  a2->int var3 = v18;
  uint64_t v11 = *((void *)this + 4);
  if ((*(unsigned char *)(v11 + 186) & 4) != 0)
  {
    unsigned int v12 = var2 + v10 - 1;
    if ((v12 & 0x80000000) == 0)
    {
      unsigned int PcdIdxFromCP = WrdPieceTable::getPcdIdxFromCP((WrdPieceTable *)(*((void *)this + 17) + 72), v12);
      uint64_t v14 = *((void *)this + 17);
      if (*(_DWORD *)(v14 + 72) - 1 > PcdIdxFromCP)
      {
        uint64_t v15 = *(void *)(v14 + 88);
        if (v15)
        {
          uint64_t result = (WrdSectionProperties *)WrdParser::applyPiece(*((int **)this + 4), v15 + 8 * PcdIdxFromCP, 0, 0, 0, 0, 0, 0, 0, var4, var5, 0);
          goto LABEL_11;
        }
      }
      exception = __cxa_allocate_exception(4uLL);
      int v17 = 1005;
LABEL_19:
      _DWORD *exception = v17;
    }
  }
LABEL_12:
  if (!*(_DWORD *)(v11 + 164) && *(_DWORD *)(v11 + 152) == 10) {
    return WrdSectionProperties::applyVersion10Defaults(a2->var4);
  }
  return result;
}

uint64_t WrdParser::applyExceptionsForCP(WrdParser *this, const WrdSectionDescriptorTable *a2, int a3, WrdSectionProperties *a4, WrdSectionProperties *a5, unsigned int *a6)
{
  *a6 = 0;
  uint64_t result = WrdSectionDescriptorTable::getIndexForCP(a2, a3);
  if ((result & 0x80000000) == 0)
  {
    unint64_t v13 = result == *((unsigned __int16 *)a2 + 4) - 1
        ? (const WrdSectionDescriptorTable *)((char *)a2 + 12)
        : (const WrdSectionDescriptorTable *)(*((void *)a2 + 2) + 4 * (unsigned __int16)(result + 1));
    unsigned int v14 = *(_DWORD *)v13 - a3;
    if (v14)
    {
      uint64_t result = WrdSectionDescriptorTable::getSectionDescriptorReference(a2, (unsigned __int16)result);
      if ((*(_DWORD *)result + 1) >= 2)
      {
        uint64_t v15 = result;
        (*(void (**)(void))(**((void **)this + 14) + 16))(*((void *)this + 14));
        unsigned int v16 = (*(uint64_t (**)(void))(**((void **)this + 14) + 80))(*((void *)this + 14));
        uint64_t result = (uint64_t)WrdParser::parseGrpprl(this, *((void *)this + 14), v16, 0, 0, 0, 0, 0, 0, 0, 0, 0, a4, a5, 0);
        unsigned int v17 = *(_DWORD *)(v15 + 4);
        if (v17 + 1 >= 2)
        {
          int v18 = (*(uint64_t (**)(void))(**((void **)this + 14) + 176))(*((void *)this + 14));
          uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 14) + 40))(*((void *)this + 14));
          if (v17 < (int)result + v18)
          {
            (*(void (**)(void, void, void))(**((void **)this + 14) + 16))(*((void *)this + 14), *(unsigned int *)(v15 + 4), 0);
            int v19 = (*(uint64_t (**)(void))(**((void **)this + 14) + 80))(*((void *)this + 14));
            unsigned int v21 = v19 - 2;
            *((_DWORD *)a4 + 72) = 0;
            OcBinaryData::setMinimumCapacity((OcBinaryData *)((char *)a4 + 280), v19 - 2);
            (*(void (**)(void, void, unsigned int *))(**((void **)this + 14) + 56))(*((void *)this + 14), *((void *)a4 + 38), &v21);
            unsigned int v20 = v21;
            *((_DWORD *)a4 + 72) = v21;
            uint64_t result = OcBinaryData::setMinimumCapacity((OcBinaryData *)((char *)a4 + 280), v20);
            *((_DWORD *)a4 + 74) = v20;
          }
        }
      }
      *a6 = v14;
    }
  }
  return result;
}

uint64_t WrdSectionDescriptorTable::getIndexForCP(WrdSectionDescriptorTable *this, int a2)
{
  if (a2 < 0 && *((_DWORD *)this + 3) <= a2) {
    return 0xFFFFFFFFLL;
  }
  __int16 v2 = *((_WORD *)this + 4);
  while ((--v2 & 0x8000) == 0)
  {
    if (*(_DWORD *)(*((void *)this + 2) + 4 * (unsigned __int16)v2) <= a2) {
      return v2;
    }
  }
  return -1;
}

uint64_t WrdSectionProperties::doRevisionsExist(WrdSectionProperties *this)
{
  return (*((unsigned __int8 *)this + 20) >> 6) & 1;
}

void WrdSectionTextRun::~WrdSectionTextRun(WrdSectionTextRun *this)
{
  WrdSectionTextRun::~WrdSectionTextRun(this);
  JUMPOUT(0x23EC997B0);
}

{
  WrdSectionProperties *var4;
  WrdSectionProperties *var5;

  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBE6A90;
  unsigned int var4 = this->var4;
  if (var4) {
    (*(void (**)(WrdSectionProperties *))(*(void *)var4 + 8))(var4);
  }
  this->unsigned int var4 = 0;
  var5 = this->var5;
  if (var5) {
    (*(void (**)(WrdSectionProperties *))(*(void *)var5 + 8))(var5);
  }
  this->var5 = 0;
}

void WrdSectionProperties::~WrdSectionProperties(WrdSectionProperties *this)
{
  WrdSectionProperties::~WrdSectionProperties(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(void *)this = &unk_26EBE6A08;
  *((void *)this + 1) = &unk_26EBE6A38;
  __int16 v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 3) = 0;
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 4) = 0;
  uint64_t v4 = *((void *)this + 5);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 5) = 0;
  uint64_t v5 = *((void *)this + 6);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 6) = 0;
  unint64_t v6 = *((void *)this + 7);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 7) = 0;
  signed int v7 = *((void *)this + 8);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 8) = 0;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 280));
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 192, *((void **)this + 25));
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 168, *((void **)this + 22));
}

void WrdOutlineListData::~WrdOutlineListData(WrdOutlineListData *this)
{
  WrdOutlineListData::~WrdOutlineListData(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;
  void *v3;

  *(void *)this = &unk_26EBE6640;
  __int16 v2 = *((void *)this + 4);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 4) = 0;
  WrdAnnotationDateTimeTable::clear(this);
  CsString::~CsString((CsString *)((char *)this + 40));
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

void sub_238B366F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B368C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B36B14(void *a1, int a2)
{
  if (a2 == 3)
  {
    uint64_t v5 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v5);
    __cxa_end_catch();
  }
  else
  {
    unint64_t v6 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      [v6 raise];
    }
    else {
      +[TCMessageException raise:TCUnknownProblemMessage];
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x238B36AD8);
}

void sub_238B36BA4(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (a2 == 2)
  {
    [objc_begin_catch(exc_buf) raise];
    objc_end_catch();
    JUMPOUT(0x238B36AD8);
  }

  _Unwind_Resume(exc_buf);
}

void sub_238B37174(void *a1, int a2)
{
  WrdParagraphTextRun::~WrdParagraphTextRun(&v6);
  if (a2 != 2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x238B37108);
  }
  id v5 = objc_begin_catch(a1);
  objc_exception_rethrow();
}

void sub_238B37248()
{
  objc_end_catch();
  JUMPOUT(0x238B37218);
}

void sub_238B3731C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WrdParagraphTextRun::WrdParagraphTextRun(WrdParagraphTextRun *this)
{
  *(void *)WrdTextRun::WrdTextRun((uint64_t)this, 0, 0) = &unk_26EBE67A0;
  __int16 v2 = (WrdParagraphProperties *)operator new(0x130uLL);
  WrdParagraphProperties::WrdParagraphProperties(v2);
  this->unsigned int var4 = v2;
  uint64_t v3 = (WrdParagraphProperties *)operator new(0x130uLL);
  WrdParagraphProperties::WrdParagraphProperties(v3);
  this->var5 = v3;
  uint64_t v4 = (WrdTableProperties *)operator new(0x190uLL);
  WrdTableProperties::WrdTableProperties(v4);
  this->var6 = v4;
  id v5 = (WrdTableProperties *)operator new(0x190uLL);
  WrdTableProperties::WrdTableProperties(v5);
  this->var7 = v5;
}

void sub_238B37404(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void WrdParagraphProperties::WrdParagraphProperties(WrdParagraphProperties *this)
{
  *(void *)this = &unk_26EBE6700;
  *((void *)this + 1) = &unk_26EBE6748;
  *((void *)this + 16) = 0;
  *((_OWORD *)this + 11) = 0u;
  __int16 v2 = (void *)((char *)this + 176);
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  std::vector<EshHeader *,ChAllocator<EshHeader *>>::resize((uint64_t)this + 176, 0x40u);
  for (uint64_t i = 0; i != 512; i += 8)
  {
    uint64_t v4 = (WrdTabDescriptor *)operator new(0x10uLL);
    WrdTabDescriptor::WrdTabDescriptor(v4);
    *(void *)(*v2 + i) = v4;
  }
  *((void *)this + 25) = operator new[](0x80uLL);
  *((void *)this + 26) = operator new[](0x80uLL);
  *((void *)this + 27) = operator new[](0x80uLL);
  id v5 = (WrdShading *)operator new(0x28uLL);
  WrdShading::WrdShading(v5);
  *((void *)this + 4) = v5;
  WrdParagraphTextRun v6 = (WrdLineSpaceDescriptor *)operator new(0x10uLL);
  WrdLineSpaceDescriptor::WrdLineSpaceDescriptor(v6);
  *((void *)this + 5) = v6;
  signed int v7 = (WrdDropCap *)operator new(0x10uLL);
  WrdDropCap::WrdDropCap(v7);
  *((void *)this + 6) = v7;
  int v8 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v8);
  *((void *)this + 7) = v8;
  uint64_t v9 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v9);
  *((void *)this + 8) = v9;
  unsigned int v10 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v10);
  *((void *)this + 9) = v10;
  uint64_t v11 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v11);
  *((void *)this + 10) = v11;
  unsigned int v12 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v12);
  *((void *)this + 11) = v12;
  unint64_t v13 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v13);
  *((void *)this + 12) = v13;
  unsigned int v14 = (WrdAutoNumberListDescriptor *)operator new(0x30uLL);
  WrdAutoNumberListDescriptor::WrdAutoNumberListDescriptor(v14);
  *((void *)this + 13) = v14;
  uint64_t v15 = (WrdDateTime *)operator new(0x18uLL);
  WrdDateTime::WrdDateTime(v15);
  *((void *)this + 14) = v15;
  unsigned int v16 = (WrdNumberRevisionMarkData *)operator new(0x48uLL);
  WrdNumberRevisionMarkData::WrdNumberRevisionMarkData(v16);
  *((void *)this + 15) = v16;
  WrdNumberRevisionMarkData::init(v16);
  unsigned int v17 = (WrdTabDescriptor *)operator new(0x10uLL);
  WrdTabDescriptor::WrdTabDescriptor(v17);
  *((void *)this + 16) = v17;
  (*(void (**)(WrdParagraphProperties *))(*(void *)this + 16))(this);
}

void sub_238B37678(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  operator delete(v4);
  WrdParagraphTextRun v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 184) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void WrdAutoNumberListDescriptor::WrdAutoNumberListDescriptor(WrdAutoNumberListDescriptor *this)
{
  *(void *)this = &unk_26EBE5490;
  CsString::CsString((CsString *)((char *)this + 16));
  __int16 v2 = (WrdAutoNumberLevelDescriptor *)operator new(0x30uLL);
  WrdAutoNumberLevelDescriptor::WrdAutoNumberLevelDescriptor(v2);
  *((void *)this + 1) = v2;
  (*(void (**)(WrdAutoNumberListDescriptor *))(*(void *)this + 24))(this);
}

void sub_238B3777C(_Unwind_Exception *a1)
{
  operator delete(v2);
  CsString::~CsString(v1);
  _Unwind_Resume(a1);
}

void WrdNumberRevisionMarkData::WrdNumberRevisionMarkData(WrdNumberRevisionMarkData *this)
{
  *(void *)this = &unk_26EBE65C8;
  CsString::CsString((CsString *)((char *)this + 8));
  *((_WORD *)this + 32) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((unsigned char *)this + 66) &= ~1u;
}

void WrdTableProperties::WrdTableProperties(WrdTableProperties *this)
{
  *(void *)this = &unk_26EBE6E00;
  *((void *)this + 1) = &unk_26EBE6E30;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  __int16 v2 = (WrdTableAutoformatLookSpecifier *)operator new(0x10uLL);
  WrdTableAutoformatLookSpecifier::WrdTableAutoformatLookSpecifier(v2);
  *((void *)this + 4) = v2;
  uint64_t v3 = (WrdTableCellDescriptor *)operator new(0x88uLL);
  WrdTableCellDescriptor::WrdTableCellDescriptor(v3);
  *((void *)this + 5) = v3;
  uint64_t v4 = (WrdShading *)operator new(0x28uLL);
  WrdShading::WrdShading(v4);
  *((void *)this + 6) = v4;
  id v5 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v5);
  *((void *)this + 7) = v5;
  WrdParagraphTextRun v6 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v6);
  *((void *)this + 8) = v6;
  signed int v7 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v7);
  *((void *)this + 9) = v7;
  int v8 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v8);
  *((void *)this + 10) = v8;
  uint64_t v9 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v9);
  *((void *)this + 11) = v9;
  unsigned int v10 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v10);
  *((void *)this + 12) = v10;
  uint64_t v11 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v11);
  *((void *)this + 13) = v11;
  unsigned int v12 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v12);
  *((void *)this + 14) = v12;
  unint64_t v13 = (WrdDateTime *)operator new(0x18uLL);
  WrdDateTime::WrdDateTime(v13);
  *((void *)this + 15) = v13;
  (*(void (**)(WrdTableProperties *))(*(void *)this + 16))(this);
}

void sub_238B379C4(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;
  operator delete(v4);
  WrdParagraphTextRun v6 = (void *)v1[34];
  if (v6)
  {
    v1[35] = v6;
    operator delete(v6);
  }
  signed int v7 = *v3;
  if (*v3)
  {
    v1[32] = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void WrdTableCellDescriptor::WrdTableCellDescriptor(WrdTableCellDescriptor *this)
{
  *(void *)this = &unk_26EBE6DC0;
  __int16 v2 = (WrdShading *)operator new(0x28uLL);
  WrdShading::WrdShading(v2);
  *((void *)this + 2) = v2;
  uint64_t v3 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v3);
  *((void *)this + 3) = v3;
  uint64_t v4 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v4);
  *((void *)this + 4) = v4;
  id v5 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v5);
  *((void *)this + 5) = v5;
  WrdParagraphTextRun v6 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v6);
  *((void *)this + 6) = v6;
  signed int v7 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v7);
  *((void *)this + 7) = v7;
  int v8 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v8);
  *((void *)this + 8) = v8;
  WrdTableCellDescriptor::reset(this);
}

void sub_238B37B28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

int *WrdBinaryReader::read(WrdBinaryReader *this, WrdParagraphTextRun *a2)
{
  a2->int var3 = 0;
  unsigned int var4 = a2->var4;
  (*(void (**)(WrdParagraphProperties *))(*(void *)var4 + 16))(var4);
  var5 = a2->var5;
  (*(void (**)(WrdParagraphProperties *))(*(void *)var5 + 16))(var5);
  var6 = a2->var6;
  (*(void (**)(WrdTableProperties *))(*(void *)var6 + 16))(var6);
  var7 = a2->var7;
  uint64_t result = (int *)(*(uint64_t (**)(WrdTableProperties *))(*(void *)var7 + 16))(var7);
  uint64_t v9 = *((void *)this + 17);
  unsigned int var2 = a2->var2;
  uint64_t v11 = v9 + 4 * a2->var1;
  unsigned int v12 = *(_DWORD *)(v11 + 40);
  if (v12 > var2)
  {
    BOOL v24 = 0;
    int v13 = *(_DWORD *)(v11 + 8);
    int v14 = v13 + var2;
    uint64_t v15 = (WrdPieceTable *)(v9 + 72);
    unsigned int v16 = v12 + v13 - 1;
    unsigned int NextParagraphEndCP = WrdBinaryReader::findNextParagraphEndCP(this, v13 + var2, v16);
    a2->int var3 = NextParagraphEndCP - v14 + 1;
    unsigned int NumberOfCharInText = WrdFileInformationBlock::getNumberOfCharInText(*((void *)this + 4) + 160);
    if (NextParagraphEndCP == v16 && a2->var1 == 0)
    {
      unsigned int v20 = NumberOfCharInText;
      if (WrdFileInformationBlock::getNumberOfCharInText(*((void *)this + 4) + 160, 0) >= NumberOfCharInText) {
        unsigned int NextParagraphEndCP = v16;
      }
      else {
        unsigned int NextParagraphEndCP = v20;
      }
    }
    unsigned int FCfromCP = WrdPieceTable::getFCfromCP(v15, NextParagraphEndCP, &v24);
    uint64_t result = (int *)WrdBinaryReader::loadFKPPAPX((WrdBinTable **)this, FCfromCP);
    if (result != -1) {
      uint64_t result = (int *)WrdParser::applyExceptionsForFC(*((WrdParser **)this + 4), *((SsrwOOStream **)this + 19), FCfromCP, var4, var5, var6, var7);
    }
    if ((*(unsigned char *)(*((void *)this + 4) + 186) & 4) != 0)
    {
      uint64_t result = (int *)WrdPieceTable::getPcdIdxFromCP((WrdPieceTable *)(*((void *)this + 17) + 72), NextParagraphEndCP);
      uint64_t v22 = *((void *)this + 17);
      if (*(_DWORD *)(v22 + 72) - 1 > result)
      {
        uint64_t v23 = *(void *)(v22 + 88);
        if (v23) {
          return WrdParser::applyPiece(*((int **)this + 4), v23 + 8 * result, 0, var4, 0, var5, 0, var6, var7, 0, 0, 0);
        }
      }
    }
  }
  return result;
}

uint64_t WrdBinaryReader::findNextParagraphEndCP(WrdBinaryReader *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  unsigned int PcdIdxFromCP = WrdPieceTable::getPcdIdxFromCP((WrdPieceTable *)(*((void *)this + 17) + 72), a2);
  unsigned int v7 = PcdIdxFromCP;
  uint64_t v8 = *((void *)this + 17);
  unsigned int v9 = *(_DWORD *)(v8 + 72);
  if (v9 - 1 <= PcdIdxFromCP) {
    unsigned int v10 = 0;
  }
  else {
    unsigned int v10 = (unsigned int *)(*(void *)(v8 + 88) + 8 * PcdIdxFromCP);
  }
  if (v9 <= PcdIdxFromCP) {
    int v11 = -1;
  }
  else {
    int v11 = *(_DWORD *)(*(void *)(v8 + 80) + 4 * PcdIdxFromCP);
  }
  uint64_t v12 = v4 - v11 + (v4 - v11) * (*((unsigned char *)v10 + 6) & 1) + *v10;
  BOOL v37 = 0;
  int v13 = *(uint64_t **)(*((void *)this + 4) + 112);
  (*(void (**)(uint64_t *, uint64_t, void))(*v13 + 16))(v13, v12, 0);
  while (2)
  {
    uint64_t v14 = v7 + 1;
    while (1)
    {
      uint64_t v15 = *((void *)this + 17);
      unsigned int v16 = *(_DWORD *)(v15 + 72) <= v14 ? -1 : *(_DWORD *)(*(void *)(v15 + 80) + 4 * v14);
      if (v4 > a3 || v4 >= v16) {
        break;
      }
      uint64_t v17 = *v13;
      if (*((unsigned char *)v10 + 6)) {
        unsigned int v18 = (*(uint64_t (**)(uint64_t *))(v17 + 80))(v13);
      }
      else {
        unsigned int v18 = (*(uint64_t (**)(uint64_t *))(v17 + 64))(v13);
      }
      if ((*((unsigned char *)v10 + 6) & 2) == 0 && v18 <= 0xD && ((1 << v18) & 0x3080) != 0)
      {
        uint64_t v20 = *v13;
        if (*((unsigned char *)v10 + 6)) {
          unsigned int v21 = (*(uint64_t (**)(uint64_t *))(v20 + 80))(v13);
        }
        else {
          unsigned int v21 = (*(uint64_t (**)(uint64_t *))(v20 + 64))(v13);
        }
        if (v21 == 10)
        {
          uint64_t v4 = (v4 + 1);
          uint64_t v22 = *v13;
          if (*((unsigned char *)v10 + 6)) {
            unsigned int v21 = (*(uint64_t (**)(uint64_t *))(v22 + 80))(v13);
          }
          else {
            unsigned int v21 = (*(uint64_t (**)(uint64_t *))(v22 + 64))(v13);
          }
        }
        if (v4 < a3)
        {
          do
          {
            uint64_t v23 = (v4 + 1);
            if (v23 >= a3)
            {
              BOOL v24 = 0;
            }
            else
            {
              BOOL v24 = 1;
              while (v21 > 0xD || ((1 << v21) & 0x3080) == 0)
              {
                uint64_t v23 = (v23 + 1);
                uint64_t FCfromCP = WrdPieceTable::getFCfromCP((WrdPieceTable *)(*((void *)this + 17) + 72), v23, &v37);
                (*(void (**)(uint64_t *, uint64_t, void))(*v13 + 16))(v13, FCfromCP, 0);
                unsigned int v7 = WrdPieceTable::getPcdIdxFromCP((WrdPieceTable *)(*((void *)this + 17) + 72), v23);
                uint64_t v26 = *v13;
                if (*(unsigned char *)(*(void *)(*((void *)this + 17) + 88) + 8 * v7 + 6)) {
                  unsigned int v21 = (*(uint64_t (**)(uint64_t *))(v26 + 80))(v13);
                }
                else {
                  unsigned int v21 = (*(uint64_t (**)(uint64_t *))(v26 + 64))(v13);
                }
                BOOL v24 = v23 < a3;
                if (a3 == v23)
                {
                  uint64_t v23 = a3;
                  break;
                }
              }
            }
            unsigned int v27 = WrdPieceTable::getFCfromCP((WrdPieceTable *)(*((void *)this + 17) + 72), v4, &v37);
            unsigned int v28 = WrdPieceTable::getFCfromCP((WrdPieceTable *)(*((void *)this + 17) + 72), v23, &v37);
            int BTEForFC = WrdBinTable::getBTEForFC(*((WrdBinTable **)this + 18), v27);
            int v30 = WrdBinTable::getBTEForFC(*((WrdBinTable **)this + 18), v28);
            if (BTEForFC != -1
              && (BTEForFC != v30
               || WrdBinaryReader::loadFKPPAPX((WrdBinTable **)this, v27) == -1
               || (v24 & WrdParser::areFCsInSameRun(*((WrdParser **)this + 4), *((SsrwOOStream **)this + 19), v27, v28)) != 1))
            {
              break;
            }
            uint64_t v31 = WrdPieceTable::getFCfromCP((WrdPieceTable *)(*((void *)this + 17) + 72), (int)v23 + 1, &v37);
            (*(void (**)(uint64_t *, uint64_t, void))(*v13 + 16))(v13, v31, 0);
            unsigned int v7 = WrdPieceTable::getPcdIdxFromCP((WrdPieceTable *)(*((void *)this + 17) + 72), v23);
            uint64_t v32 = *v13;
            unsigned int v21 = (*(unsigned char *)(*(void *)(*((void *)this + 17) + 88) + 8 * v7 + 6) & 1) != 0
                ? (*(uint64_t (**)(uint64_t *))(v32 + 80))(v13)
                : (*(uint64_t (**)(uint64_t *))(v32 + 64))(v13);
            uint64_t v4 = v23;
          }
          while (v23 < a3);
        }
        break;
      }
      uint64_t v4 = (v4 + 1);
    }
    uint64_t v33 = *((void *)this + 17);
    unsigned int v34 = *(_DWORD *)(v33 + 72);
    if (v7 < v34 - 2)
    {
      int v35 = v34 <= ++v7 ? -1 : *(_DWORD *)(*(void *)(v33 + 80) + 4 * v7);
      if (v35 == v4)
      {
        if (v34 - 1 <= v7) {
          unsigned int v10 = 0;
        }
        else {
          unsigned int v10 = (unsigned int *)(*(void *)(v33 + 88) + 8 * v7);
        }
        if (v34 <= v7) {
          uint64_t v4 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v4 = *(unsigned int *)(*(void *)(v33 + 80) + 4 * v7);
        }
        (*(void (**)(void, void, void))(**(void **)(*((void *)this + 4) + 112) + 16))(*(void *)(*((void *)this + 4) + 112), *v10, 0);
        continue;
      }
    }
    break;
  }
  return v4;
}

uint64_t WrdPieceTable::getPcdIdxFromCP(WrdPieceTable *this, unsigned int a2)
{
  uint64_t v2 = *(unsigned int *)this;
  if (v2 < 2)
  {
    LODWORD(v3) = 1;
  }
  else
  {
    uint64_t v3 = 1;
    while (*(_DWORD *)(*((void *)this + 1) + 4 * v3) <= a2)
    {
      if (v2 == ++v3) {
        goto LABEL_5;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_5:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  return (v3 - 1);
}

uint64_t WrdPieceTable::getFCfromCP(WrdPieceTable *this, unsigned int a2, BOOL *a3)
{
  uint64_t v3 = *(unsigned int *)this;
  if (v3 < 2)
  {
    LODWORD(v4) = 1;
  }
  else
  {
    uint64_t v4 = 1;
    while (*(_DWORD *)(*((void *)this + 1) + 4 * v4) < a2)
    {
      if (v3 == ++v4) {
        goto LABEL_5;
      }
    }
  }
  if (v3 == v4) {
    goto LABEL_5;
  }
  uint64_t v6 = *((void *)this + 1);
  if (*(_DWORD *)(v6 + 4 * v4) == a2)
  {
    if (v4 < (int)v3 - 1)
    {
      unsigned int v7 = (unsigned char *)(*((void *)this + 2) + 8 * v4);
      *a3 = v7[6] & 1;
      return *(unsigned int *)v7;
    }
LABEL_5:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  unsigned int v9 = v4 - 1;
  uint64_t v10 = *((void *)this + 2) + 8 * v9;
  *a3 = *(unsigned char *)(v10 + 6) & 1;
  return a2
       - *(_DWORD *)(v6 + 4 * v9)
       + (a2 - *(_DWORD *)(v6 + 4 * v9)) * (*(unsigned char *)(v10 + 6) & 1)
       + *(_DWORD *)v10;
}

uint64_t WrdBinTable::getBTEForFC(WrdBinTable *this, unsigned int a2)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if (v2)
  {
    uint64_t v3 = (unsigned int *)*((void *)this + 2);
    if (*v3 <= a2)
    {
      unint64_t v5 = 0;
      uint64_t v6 = 4 * v2;
      unsigned int v7 = v3 + 1;
      while (v6 != v5)
      {
        unsigned int v8 = v7[v5 / 4];
        v5 += 4;
        if (v8 > a2) {
          return *(unsigned int *)(*((void *)this + 5) + v5 - 4);
        }
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t WrdBinaryReader::loadFKPPAPX(WrdBinTable **this, unsigned int a2)
{
  uint64_t BTEForFC = WrdBinTable::getBTEForFC(this[18], a2);
  uint64_t v4 = BTEForFC;
  if (BTEForFC != -1 && BTEForFC - *(_DWORD *)this[18] != *((_DWORD *)this + 40))
  {
    (*(void (**)(void, void, void))(**((void **)this[4] + 14) + 16))(*((void *)this[4] + 14), (BTEForFC << 9), 0);
    WrdParser::parse(this[4], this[19]);
    *((_DWORD *)this + 40) = v4 - *(_DWORD *)this[18];
  }
  return v4;
}

uint64_t WrdParser::parse(WrdParser *this, WrdFormattedDiskPage *a2)
{
  int v8 = (unsigned __int16)WrdFormattedDiskPage::s_unPageBufferSize;
  *((_WORD *)a2 + 12) = WrdFormattedDiskPage::s_unUndefinedOffset;
  uint64_t v4 = *((void *)a2 + 2);
  *((_DWORD *)a2 + 2) = (*(uint64_t (**)(void))(**((void **)this + 14) + 40))(*((void *)this + 14));
  (*(void (**)(void, uint64_t, int *))(**((void **)this + 14) + 56))(*((void *)this + 14), v4, &v8);
  if (v8 != (unsigned __int16)WrdFormattedDiskPage::s_unPageBufferSize)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 2001;
  }
  StreamInterface = WrdFormattedDiskPage::getStreamInterface((SsrwOOStream *)a2);
  return (*(uint64_t (**)(SsrwOOMemStream *, void, void))(*(void *)StreamInterface + 16))(StreamInterface, 0, 0);
}

SsrwOOMemStream *WrdFormattedDiskPage::getStreamInterface(SsrwOOStream *this)
{
  uint64_t result = (SsrwOOMemStream *)this[4].var0;
  if (!result)
  {
    uint64_t result = SsrwOOStream::openMemStreamForReading(this + 2, (void **)0x200);
    this[4].$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)result;
  }
  return result;
}

SsrwOOMemStream *SsrwOOStream::openMemStreamForReading(SsrwOOStream *this, void **a2)
{
  int v2 = (int)a2;
  uint64_t v4 = (SsrwOOMemStream *)operator new(0x28uLL);
  SsrwOOMemStream::SsrwOOMemStream(v4, (void **)&this->var0, v2);
  return v4;
}

void sub_238B386F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void SsrwOOMemStream::SsrwOOMemStream(SsrwOOMemStream *this, void **a2, int a3)
{
  *(void *)this = &unk_26EBDA218;
  *((void *)this + 1) = a2;
  *((_DWORD *)this + 4) = a3;
  *(void *)((char *)this + 28) = 0;
  *(void *)((char *)this + 20) = 0;
  *((_DWORD *)this + 9) = 0;
}

uint64_t SsrwOOMemStream::seek(uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if (a3 == 2)
    {
      int v3 = *(_DWORD *)(result + 16);
      goto LABEL_6;
    }
    if (a3 == 1)
    {
      int v3 = *(_DWORD *)(result + 20);
LABEL_6:
      a2 += v3;
      goto LABEL_8;
    }
    a2 = *(_DWORD *)(result + 20);
  }
LABEL_8:
  int v4 = *(_DWORD *)(result + 16);
  if (a2 < v4) {
    int v4 = a2;
  }
  *(_DWORD *)(result + 20) = v4;
  return result;
}

BOOL WrdParser::areFCsInSameRun(WrdParser *this, SsrwOOStream *a2, unsigned int a3, unsigned int a4)
{
  if (a3 > a4) {
    return 0;
  }
  StreamInterface = WrdFormattedDiskPage::getStreamInterface(a2);
  (*(void (**)(SsrwOOMemStream *, void, void))(*(void *)StreamInterface + 16))(StreamInterface, 0, 0);
  unsigned __int8 v9 = 0;
  unsigned int v10 = 0;
  do
  {
    unsigned int FC = WrdFormattedDiskPage::getFC((WrdFormattedDiskPage *)a2, v9);
    unsigned int v12 = FC;
    BOOL result = v10 <= a3 && FC > a4;
    if (result) {
      break;
    }
    ++v9;
    unsigned int v10 = v12;
  }
  while (*((unsigned __int8 *)a2[2].var0 + (unsigned __int16)WrdFormattedDiskPage::s_unPageBufferSize - 1) >= v9);
  return result;
}

uint64_t WrdFormattedDiskPage::getFC(WrdFormattedDiskPage *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (*(unsigned __int8 *)(v2 + 511) < a2 || a2 >= 0x7F)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  return CsLeReadSInt32((unsigned int *)(v2 + 4 * a2));
}

uint64_t WrdFileInformationBlock::getNumberOfCharInText(uint64_t this)
{
  uint64_t v1 = this;
  LODWORD(this) = 0;
  uint64_t v2 = *(void *)(v1 + 64);
  for (unint64_t i = 3; i != 11; ++i)
  {
    if (v2 && i < *(unsigned __int16 *)(v1 + 56)) {
      int v4 = *(_DWORD *)(v2 + 4 * i);
    }
    else {
      int v4 = 0;
    }
    this = (v4 + this);
  }
  return this;
}

uint64_t WrdParser::applyExceptionsForFC(WrdParser *this, SsrwOOStream *a2, unsigned int a3, WrdParagraphProperties *a4, WrdParagraphProperties *a5, WrdTableProperties *a6, WrdTableProperties *a7)
{
  uint64_t result = WrdParser::seekToExceptionForFC(this, a2, a3, &v18);
  if (result)
  {
    StreamInterface = WrdFormattedDiskPage::getStreamInterface(a2);
    int v15 = (*(uint64_t (**)(SsrwOOMemStream *))(*(void *)StreamInterface + 64))(StreamInterface);
    unsigned int v16 = v15
        ? 2 * v15 - 1
        : 2 * (*(uint64_t (**)(SsrwOOMemStream *))(*(void *)StreamInterface + 64))(StreamInterface);
    __int16 v17 = (*(uint64_t (**)(SsrwOOMemStream *))(*(void *)StreamInterface + 80))(StreamInterface);
    uint64_t result = (uint64_t)WrdParagraphProperties::setParagraphStyleIndex(a4, v17);
    if (v16 >= 3) {
      uint64_t result = (uint64_t)WrdParser::parseGrpprl(this, (uint64_t)StreamInterface, v16 - 2, 0, 0, 0, a4, 0, a5, 0, a6, a7, 0, 0, 0);
    }
  }
  if (*((int *)this + 38) <= 9)
  {
    uint64_t result = WrdTableProperties::WrdTablePropertiesOverridden::isAnythingOverridden((WrdTableProperties::WrdTablePropertiesOverridden *)((char *)a6 + 16));
    if (result)
    {
      WrdFileInformationBlockHeader::isBiDiLanguage((WrdParser *)((char *)this + 160));
      uint64_t result = (uint64_t)WrdTableProperties::upgradeToVersion10(a6);
    }
    if (*((int *)this + 38) <= 9)
    {
      uint64_t result = WrdTableProperties::WrdTablePropertiesOverridden::isAnythingOverridden((WrdTableProperties::WrdTablePropertiesOverridden *)((char *)a7 + 16));
      if (result)
      {
        WrdFileInformationBlockHeader::isBiDiLanguage((WrdParser *)((char *)this + 160));
        return (uint64_t)WrdTableProperties::upgradeToVersion10(a7);
      }
    }
  }
  return result;
}

uint64_t WrdParser::seekToExceptionForFC(WrdParser *this, SsrwOOStream *a2, unsigned int a3, unsigned int *a4)
{
  StreamInterface = WrdFormattedDiskPage::getStreamInterface(a2);
  (*(void (**)(SsrwOOMemStream *, void, void))(*(void *)StreamInterface + 16))(StreamInterface, 0, 0);
  unsigned __int8 v8 = 0;
  while (1)
  {
    unsigned int FC = WrdFormattedDiskPage::getFC((WrdFormattedDiskPage *)a2, v8);
    if (v8)
    {
      if (FC > a3) {
        break;
      }
    }
    if (*((unsigned __int8 *)a2[2].var0 + (unsigned __int16)WrdFormattedDiskPage::s_unPageBufferSize - 1) < ++v8)
    {
      uint64_t result = 0;
      *a4 = 0;
      return result;
    }
  }
  *a4 = FC - a3;
  uint64_t result = (*((uint64_t (**)(SsrwOOStream *, void))a2->var0 + 4))(a2, (v8 - 1));
  if (result)
  {
    (*(void (**)(SsrwOOMemStream *, uint64_t, void))(*(void *)StreamInterface + 16))(StreamInterface, result, 0);
    return 1;
  }
  return result;
}

uint64_t WrdPAPXFKP::getGrpprlOffset(WrdPAPXFKP *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (!v2
    || (unsigned int v3 = *(unsigned __int8 *)((unsigned __int16)WrdFormattedDiskPage::s_unPageBufferSize + v2 - 1), v3 <= a2)
    || (unsigned int v4 = 13 * a2 + 4 * v3 + 4, v4 >= (unsigned __int16)WrdFormattedDiskPage::s_unPageBufferSize))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  return 2 * *(unsigned __int8 *)(v2 + v4);
}

uint64_t SsrwOOMemStream::readByte(SsrwOOMemStream *this)
{
  uint64_t v1 = *((unsigned int *)this + 5);
  if ((v1 & 0x80000000) != 0 || *((_DWORD *)this + 4) <= (int)v1)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 15;
  }
  uint64_t v2 = *(unsigned __int8 *)(**((void **)this + 1) + v1);
  *((_DWORD *)this + 5) = v1 + 1;
  return v2;
}

uint64_t SsrwOOMemStream::readUInt16(SsrwOOMemStream *this)
{
  uint64_t v1 = *((unsigned int *)this + 5);
  if ((v1 & 0x80000000) != 0 || *((_DWORD *)this + 4) - (int)v1 <= 1)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 15;
  }
  uint64_t result = CsLeReadUInt16((unsigned __int16 *)(**((void **)this + 1) + v1));
  *((_DWORD *)this + 5) += 2;
  return result;
}

BOOL WrdTableProperties::WrdTablePropertiesOverridden::isAnythingOverridden(WrdTableProperties::WrdTablePropertiesOverridden *this)
{
  return (*(void *)this & 0xFFFFFFFFF87FFFFFLL | *((_DWORD *)this + 2) & 0x3FFFFF87) != 0;
}

void sub_238B38DB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B38EB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B39024(void *a1, int a2)
{
  if (a2 == 3)
  {
    uint64_t v6 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v6);
    __cxa_end_catch();
  }
  else
  {
    unsigned int v7 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      [v7 raise];
    }
    else {
      +[TCMessageException raise:TCUnknownProblemMessage];
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x238B38FF0);
}

void sub_238B390A0(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (a2 == 2)
  {
    [objc_begin_catch(exc_buf) raise];
    objc_end_catch();
    JUMPOUT(0x238B38FF0);
  }

  _Unwind_Resume(exc_buf);
}

void sub_238B39308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unsigned int v7 = v5;

  WBParagraphReadState::~WBParagraphReadState((WBParagraphReadState *)va);
  _Unwind_Resume(a1);
}

void sub_238B395B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WrdCharacterTextRun::~WrdCharacterTextRun((WrdCharacterTextRun *)&a9);
  _Unwind_Resume(a1);
}

void sub_238B396AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t WrdNoteTable::getCPOfNextNote(WrdNoteTable *this, int a2)
{
  uint64_t v2 = *((void *)this + 2);
  unint64_t v3 = (unint64_t)(*((void *)this + 3) - v2) >> 3;
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  unsigned __int16 v4 = 0;
  while (1)
  {
    uint64_t result = *(unsigned int *)(*(void *)(v2 + 8 * v4) + 8);
    if ((int)result > a2) {
      break;
    }
    if (v3 <= ++v4) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

void sub_238B39810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t WrdAnnotationTable::getCPOfNextAnnotation(WrdAnnotationTable *this, int a2)
{
  uint64_t v2 = *((void *)this + 1);
  unint64_t v3 = (unint64_t)(*((void *)this + 2) - v2) >> 3;
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  unsigned __int16 v4 = 0;
  while (1)
  {
    uint64_t result = *(unsigned int *)(*(void *)(v2 + 8 * v4) + 8);
    if ((int)result > a2) {
      break;
    }
    if (v3 <= ++v4) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

void sub_238B39B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B39BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B39EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WrdCharacterTextRun::WrdCharacterTextRun(WrdCharacterTextRun *this)
{
  *(void *)WrdTextRun::WrdTextRun((uint64_t)this, 0, 0) = &unk_26EBE56B0;
  uint64_t v2 = (WrdCharacterProperties *)operator new(0x160uLL);
  WrdCharacterProperties::WrdCharacterProperties(v2);
  this->unsigned int var4 = v2;
  unint64_t v3 = (WrdCharacterProperties *)operator new(0x160uLL);
  WrdCharacterProperties::WrdCharacterProperties(v3);
  this->var5 = v3;
  if (!v3 || !this->var4)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1001;
  }
}

void sub_238B39F8C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void WrdCharacterProperties::WrdCharacterProperties(WrdCharacterProperties *this)
{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBE5618;
  this->unsigned int var1 = (void **)&unk_26EBE5648;
  *(void *)&WrdCharacterPropertiesOverridden v2 = 255;
  *((void *)&v2 + 1) = 255;
  *(WrdCharacterPropertiesOverridden *)((char *)&this->var2 + 14) = v2;
  CsString::CsString(&this->var5);
  unint64_t v3 = (WrdShading *)operator new(0x28uLL);
  WrdShading::WrdShading(v3);
  this->var6 = v3;
  unsigned __int16 v4 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v4);
  this->var7 = v4;
  unint64_t v5 = (WrdDateTime *)operator new(0x18uLL);
  WrdDateTime::WrdDateTime(v5);
  this->var8 = v5;
  uint64_t v6 = (WrdDateTime *)operator new(0x18uLL);
  WrdDateTime::WrdDateTime(v6);
  this->var9 = v6;
  unsigned int v7 = (WrdDateTime *)operator new(0x18uLL);
  WrdDateTime::WrdDateTime(v7);
  this->var10 = v7;
  unsigned __int8 v8 = (WrdDateTime *)operator new(0x18uLL);
  WrdDateTime::WrdDateTime(v8);
  this->var11 = v8;
  unsigned __int8 v9 = (WrdDateTime *)operator new(0x18uLL);
  WrdDateTime::WrdDateTime(v9);
  this->var12 = v9;
  (*((void (**)(WrdCharacterProperties *))this->var0 + 2))(this);
}

void sub_238B3A0F8(_Unwind_Exception *a1)
{
  operator delete(v2);
  CsString::~CsString(v1);
  _Unwind_Resume(a1);
}

uint64_t *WrdBinaryReader::read(uint64_t *this, WrdCharacterTextRun *a2)
{
  a2->int var3 = 0;
  if (*(_DWORD *)(this[17] + 4 * a2->var1 + 40) > a2->var2)
  {
    unint64_t v3 = this;
    WrdBinaryReader::readTextRunCHP((WrdBinaryReader *)this, a2);
    if (WrdCharacterTextRun::isPicture(a2)
      || WrdCharacterTextRun::isFormFieldData(a2)
      || (this = (uint64_t *)WrdCharacterTextRun::isOle1Object(a2), this))
    {
      *((_DWORD *)v3 + 163) = a2->var2;
      *((_DWORD *)v3 + 172) = a2->var1;
      *((_DWORD *)v3 + 164) = 1;
      OcText::setMinimumCapacity((OcText *)(v3 + 80), 2u);
      WrdRdrText::getText((WrdRdrText *)v3[17], (WrdText *)(v3 + 79));
      this = (uint64_t *)OcText::getCharacter((OcText *)(v3 + 80), 0);
      if (this == 1)
      {
        unsigned int var1 = a2->var1;
        unsigned int var2 = a2->var2;
        if (!WrdCharacterTextRun::isPicture(a2)
          || (this = (uint64_t *)WrdCharacterTextRun::isFormFieldData(a2), (this & 1) == 0))
        {
          p_unsigned int var4 = &a2->var4;
          if (!WrdCharacterProperties::isPicture(a2->var4)
            && !WrdCharacterProperties::isFormFieldData(*p_var4)
            && !WrdCharacterProperties::isOle1Object(a2->var4))
          {
            p_unsigned int var4 = &a2->var5;
          }
          uint64_t v6 = *p_var4;
          if (WrdCharacterTextRun::isPicture(a2))
          {
            uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v3[4] + 280) + 16))(*(void *)(v3[4] + 280), 45);
            if (v7) {
              unsigned __int8 v8 = (WrdPictureProperties *)(v7 - 8);
            }
            else {
              unsigned __int8 v8 = 0;
            }
            WrdParser::parse((WrdParser *)v3[4], v8, v6->var51);
            if (!*((_WORD *)v8 + 12)) {
              WrdCharacterProperties::setData(v6, 1);
            }
            (*(void (**)(WrdPictureProperties *))(*(void *)v8 + 8))(v8);
          }
          if (WrdCharacterTextRun::isPicture(a2))
          {
            int var51 = v6->var51;
          }
          else
          {
            if (!WrdCharacterTextRun::isOle1Object(a2))
            {
              int var51 = v6->var51;
              unsigned int v10 = (uint64_t **)&v3[3 * var1 + 52];
              goto LABEL_25;
            }
            int var51 = v6->var56;
          }
          unsigned int v10 = (uint64_t **)&v3[3 * var1 + 28];
LABEL_25:
          p_unsigned int var2 = &var2;
          this = std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v10, &var2, (uint64_t)&std::piecewise_construct, &p_var2);
          *((_DWORD *)this + 8) = var51;
        }
      }
    }
  }
  return this;
}

void sub_238B3A360(_Unwind_Exception *exception_object)
{
  if (v2) {
    WrdCharacterProperties::clone(v1);
  }
  _Unwind_Resume(exception_object);
}

int *WrdBinaryReader::readTextRunCHP(WrdBinaryReader *this, WrdCharacterTextRun *a2)
{
  BOOL v38 = 0;
  unsigned int v37 = 0;
  unsigned int v4 = *(_DWORD *)(*((void *)this + 17) + 4 * a2->var1 + 8) + a2->var2;
  unsigned int var4 = a2->var4;
  var5 = a2->var5;
  (*((void (**)(WrdCharacterProperties *))var4->var0 + 2))(var4);
  (*((void (**)(WrdCharacterProperties *))var5->var0 + 2))(var5);
  unsigned int FCfromCP = WrdPieceTable::getFCfromCP((WrdPieceTable *)(*((void *)this + 17) + 72), v4, &v38);
  uint64_t result = (int *)WrdBinTable::getBTEForFC(*((WrdBinTable **)this + 21), FCfromCP);
  if (result == -1) {
    return result;
  }
  int v9 = (int)result;
  if (result - **((_DWORD **)this + 21) != *((_DWORD *)this + 46))
  {
    (*(void (**)(void, void, void))(**(void **)(*((void *)this + 4) + 112) + 16))(*(void *)(*((void *)this + 4) + 112), (result << 9), 0);
    WrdParser::parse(*((WrdParser **)this + 4), *((WrdFormattedDiskPage **)this + 22));
    *((_DWORD *)this + 46) = v9 - **((_DWORD **)this + 21);
  }
  WrdParser::applyExceptionsForFC(*((WrdParser **)this + 4), *((SsrwOOStream **)this + 22), FCfromCP, var4, var5, &v37);
  if (v38) {
    v37 >>= 1;
  }
  unsigned int PcdIdxFromCP = WrdPieceTable::getPcdIdxFromCP((WrdPieceTable *)(*((void *)this + 17) + 72), v4);
  uint64_t result = (int *)*((void *)this + 4);
  if ((*((unsigned char *)result + 186) & 4) != 0)
  {
    uint64_t v11 = *((void *)this + 17);
    if (*(_DWORD *)(v11 + 72) - 1 > PcdIdxFromCP)
    {
      uint64_t v12 = *(void *)(v11 + 88);
      if (v12)
      {
        if (*(_WORD *)(v12 + 8 * PcdIdxFromCP + 4))
        {
          uint64_t v14 = (WrdCharacterProperties *)(*((uint64_t (**)(WrdCharacterProperties *))var5->var0 + 3))(var5);
          WrdCharacterProperties::applyBaseProperties(v14, var4);
          char v36 = v14;
          uint64_t v15 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 4) + 280) + 16))(*(void *)(*((void *)this + 4) + 280), 41);
          if (v15) {
            uint64_t v16 = v15 - 8;
          }
          else {
            uint64_t v16 = 0;
          }
          uint64_t v17 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 4) + 280) + 16))(*(void *)(*((void *)this + 4) + 280), 41);
          if (v17) {
            uint64_t v18 = v17 - 8;
          }
          else {
            uint64_t v18 = 0;
          }
          uint64_t v19 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 4) + 280) + 16))(*(void *)(*((void *)this + 4) + 280), 61);
          uint64_t v34 = v18;
          uint64_t v35 = v16;
          uint64_t v20 = v19 - 8;
          if (!v19) {
            uint64_t v20 = 0;
          }
          uint64_t v33 = v20;
          uint64_t v21 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 4) + 280) + 16))(*(void *)(*((void *)this + 4) + 280), 61);
          uint64_t v22 = v21 - 8;
          uint64_t v23 = v21;
          BOOL v24 = operator new(0x38uLL);
          int v25 = v24;
          if (v23) {
            uint64_t v26 = v22;
          }
          else {
            uint64_t v26 = 0;
          }
          WrdParagraphTextRun::WrdParagraphTextRun((uint64_t)v24, a2->var1, a2->var2, v35, v34, v33, v26);
          if (!v25)
          {
            exception = __cxa_allocate_exception(4uLL);
            _DWORD *exception = 1001;
          }
          (*(void (**)(WrdBinaryReader *, void *))(*(void *)this + 184))(this, v25);
          uint64_t v27 = v25[4];
          if ((*(void *)(v27 + 16) & 1) == 0) {
            uint64_t v27 = v25[3];
          }
          WrdStyleSheet::resolve(*((WrdStyleSheet **)this + 25), v36, *(unsigned __int16 *)(v27 + 140));
          (*(void (**)(void *))(*v25 + 8))(v25);
          uint64_t result = (int *)*((void *)this + 4);
          int v13 = v36;
        }
        else
        {
          int v13 = 0;
        }
        uint64_t result = WrdParser::applyPiece(result, v12 + 8 * PcdIdxFromCP, v13, 0, var4, 0, var5, 0, 0, 0, 0, 0);
        if (v13) {
          uint64_t result = (int *)(*((uint64_t (**)(WrdCharacterProperties *))v13->var0 + 1))(v13);
        }
      }
    }
  }
  unsigned int v28 = v37;
  uint64_t v29 = *((void *)this + 17);
  if (*(_DWORD *)(v29 + 72) > PcdIdxFromCP + 1)
  {
    int v30 = *(_DWORD *)(*(void *)(v29 + 80) + 4 * (PcdIdxFromCP + 1));
    if (v37 < v30 - v4) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v37 >= ~v4)
  {
    int v30 = -1;
LABEL_33:
    unsigned int v28 = v30 - v4;
  }
LABEL_34:
  unsigned int v37 = v28;
  unsigned int v31 = *(_DWORD *)(v29 + 4 * (a2->var1 + 1) + 8) - v4;
  if (v28 < v31) {
    unsigned int v31 = v28;
  }
  a2->int var3 = v31;
  return result;
}

void sub_238B3A830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  operator delete(v21);
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  if (a18) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  if (a20) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a19 + 8))(a19);
  }
  if (*(void *)(v22 - 96)) {
    (*(void (**)(void))(**(void **)(v22 - 96) + 8))(*(void *)(v22 - 96));
  }
  _Unwind_Resume(a1);
}

void *WrdParser::applyExceptionsForFC(WrdParser *this, SsrwOOStream *a2, unsigned int a3, WrdCharacterProperties *a4, WrdCharacterProperties *a5, unsigned int *a6)
{
  uint64_t result = (void *)WrdParser::seekToExceptionForFC(this, a2, a3, a6);
  if (result)
  {
    StreamInterface = WrdFormattedDiskPage::getStreamInterface(a2);
    uint64_t result = (void *)(*(uint64_t (**)(SsrwOOMemStream *))(*(void *)StreamInterface + 64))(StreamInterface);
    if (result) {
      return WrdParser::parseGrpprl(this, (uint64_t)StreamInterface, result, 0, 0, 0, 0, a4, 0, a5, 0, 0, 0, 0, 0);
    }
  }
  return result;
}

uint64_t WrdCHPXFKP::getGrpprlOffset(WrdCHPXFKP *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)((unsigned __int16)WrdFormattedDiskPage::s_unPageBufferSize + v2 - 1);
  if (v3 <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  uint64_t v4 = a2 + 4 + 4 * v3;
  if (v4 >= (unsigned __int16)WrdFormattedDiskPage::s_unPageBufferSize) {
    return 0;
  }
  else {
    return 2 * *(unsigned __int8 *)(v2 + v4);
  }
}

BOOL WrdCharacterProperties::doRevisionsExist(WrdCharacterProperties *this)
{
  return (*(void *)&this->var2 & 0x48 | (*((unsigned int *)&this->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&this->var2 + 6) << 32)) & 0x2080800000) != 0;
}

void *SsrwOOMemStream::readBytes(SsrwOOMemStream *this, void *__dst, unsigned int *a3)
{
  if ((*a3 & 0x80000000) != 0 || (uint64_t v4 = *((unsigned int *)this + 5), (v4 & 0x80000000) != 0))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 15;
  }
  if ((int)*a3 >= *((_DWORD *)this + 4) - (int)v4) {
    int v6 = *((_DWORD *)this + 4) - v4;
  }
  else {
    int v6 = *a3;
  }
  uint64_t result = memcpy(__dst, (const void *)(**((void **)this + 1) + v4), v6);
  *((_DWORD *)this + 5) += v6;
  *a3 = v6;
  return result;
}

BOOL WrdCharacterTextRun::isPicture(WrdCharacterTextRun *this)
{
  if (!this->var3) {
    return 0;
  }
  unsigned int var4 = this->var4;
  int var51 = var4->var51;
  if ((var51 & 0x80000000) == 0)
  {
    int v4 = this->var5->var51;
    if ((v4 & 0x80000000) == 0 && var51 != v4) {
      return 0;
    }
  }
  __int16 v5 = *((_WORD *)var4 + 170);
  if ((v5 & 2) != 0)
  {
    if ((v5 & 0x10) != 0) {
      return 0;
    }
    var5 = this->var5;
    int v8 = *((_DWORD *)var5 + 85);
  }
  else
  {
    BOOL result = 0;
    if ((v5 & 0x10) != 0) {
      return result;
    }
    var5 = this->var5;
    int v8 = *((_DWORD *)var5 + 85);
    if ((v8 & 2) == 0) {
      return result;
    }
  }
  if (v5 & 0x24 | v8 & 0x14) {
    return 0;
  }
  BOOL result = (v8 & 0x20) == 0;
  if (var51 < 0 && (v8 & 0x20) == 0) {
    return var5->var51 >= 0;
  }
  return result;
}

BOOL WrdCharacterTextRun::isFormFieldData(WrdCharacterTextRun *this)
{
  if (!this->var3) {
    return 0;
  }
  unsigned int var4 = this->var4;
  int var51 = var4->var51;
  if ((var51 & 0x80000000) == 0)
  {
    int v3 = this->var5->var51;
    if ((v3 & 0x80000000) == 0 && var51 != v3) {
      return 0;
    }
  }
  __int16 v4 = *((_WORD *)var4 + 170);
  if ((v4 & 2) == 0 && (*((unsigned char *)this->var5 + 340) & 2) == 0) {
    return 0;
  }
  if ((v4 & 0x10) == 0 && (*((unsigned char *)this->var5 + 340) & 0x10) == 0) {
    return 0;
  }
  if (var4->var52 < 0) {
    return this->var5->var52 >= 0;
  }
  return 1;
}

BOOL WrdCharacterTextRun::isOle1Object(WrdCharacterTextRun *this)
{
  if (!this->var3) {
    return 0;
  }
  unsigned int var4 = this->var4;
  int var56 = var4->var56;
  if ((var56 & 0x80000000) == 0)
  {
    int v5 = this->var5->var56;
    if ((v5 & 0x80000000) == 0)
    {
      BOOL v1 = __OFSUB__(var56, v5);
      if (var56 != v5) {
        return 0;
      }
    }
  }
  int var53 = var4->var53;
  if ((var53 & 0x80000000) == 0)
  {
    int v7 = this->var5->var53;
    if ((v7 & 0x80000000) == 0)
    {
      BOOL v1 = __OFSUB__(var53, v7);
      if (var53 != v7) {
        return 0;
      }
    }
  }
  __int16 v8 = *((_WORD *)var4 + 170);
  if ((v8 & 2) != 0)
  {
    if ((v8 & 0x10) != 0) {
      return 0;
    }
    var5 = this->var5;
    int v11 = *((_DWORD *)var5 + 85);
    if ((v11 & 0x10) != 0) {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    if ((v8 & 0x10) != 0) {
      return result;
    }
    var5 = this->var5;
    int v11 = *((_DWORD *)var5 + 85);
    if ((v11 & 2) == 0) {
      return result;
    }
    if ((v11 & 0x10) != 0) {
      return 0;
    }
  }
  BOOL result = 0;
  if ((v8 & 0x20) == 0)
  {
    if (v8 & 4 | v11 & 4)
    {
      BOOL result = (v11 & 0x20) == 0;
      if (var56 < 0 && (v11 & 0x20) == 0) {
        return (var5->var56 & var53) < 0 == v1 || var5->var53 >= 0;
      }
    }
  }
  return result;
}

uint64_t WrdCharacterTextRun::isSpecialCharacter(WrdCharacterTextRun *this)
{
  if (!this->var3) {
    return 0;
  }
  if (WrdCharacterProperties::isSpecialCharacter(this->var4)) {
    return 1;
  }
  var5 = this->var5;
  return WrdCharacterProperties::isSpecialCharacter(var5);
}

uint64_t WrdCharacterProperties::isSpecialCharacter(WrdCharacterProperties *this)
{
  return (*((unsigned __int8 *)this + 340) >> 1) & 1;
}

void sub_238B3AE38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B3AF38(_Unwind_Exception *a1)
{
  int v5 = v4;

  _Unwind_Resume(a1);
}

void sub_238B3AFD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B3B0D0(void *a1, int a2)
{
  if (a2 == 3)
  {
    int v5 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v5);
    __cxa_end_catch();
  }
  else
  {
    int v6 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      [v6 raise];
    }
    else {
      +[TCMessageException raise:TCUnknownProblemMessage];
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x238B3B098);
}

void sub_238B3B150(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (a2 == 2)
  {
    [objc_begin_catch(exc_buf) raise];
    objc_end_catch();
    JUMPOUT(0x238B3B098);
  }

  _Unwind_Resume(exc_buf);
}

void sub_238B3B310(_Unwind_Exception *a1)
{
  OcText::~OcText(v2);
  _Unwind_Resume(a1);
}

uint64_t WrdText::WrdText(uint64_t a1, int a2, int a3, int a4)
{
  *(void *)a1 = &unk_26EBE6E88;
  OcText::OcText((OcText *)(a1 + 8));
  *(_DWORD *)(a1 + 56) = a2;
  *(_DWORD *)(a1 + 20) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  return a1;
}

WrdRdrText *WrdBinaryReader::read(WrdBinaryReader *this, WrdText *a2)
{
  BOOL result = (WrdRdrText *)*((void *)this + 17);
  unsigned int v3 = *((_DWORD *)result + *((unsigned int *)a2 + 14) + 10);
  unsigned int v4 = *((_DWORD *)a2 + 5);
  BOOL v5 = v3 >= v4;
  unsigned int v6 = v3 - v4;
  if (v6 != 0 && v5)
  {
    if (*((_DWORD *)a2 + 6) > v6) {
      *((_DWORD *)a2 + 6) = v6;
    }
    return (WrdRdrText *)WrdRdrText::getText(result, a2);
  }
  else
  {
    *((_DWORD *)a2 + 5) = v3;
    *((_DWORD *)a2 + 6) = 0;
    *((_DWORD *)a2 + 4) = 0;
  }
  return result;
}

uint64_t WrdRdrText::getText(WrdRdrText *this, WrdText *a2)
{
  uint64_t v2 = *((unsigned int *)a2 + 14);
  if ((int)v2 >= 8)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  unsigned int v4 = (char *)this + 4 * v2;
  if (!*((_DWORD *)v4 + 10)) {
    return 0;
  }
  unsigned int v42 = 0;
  unsigned int v6 = *((_DWORD *)a2 + 5) + *((_DWORD *)v4 + 2);
  int v7 = (unsigned int *)((char *)this + 72);
  unsigned int PcdIdxFromCP = WrdPieceTable::getPcdIdxFromCP((WrdRdrText *)((char *)this + 72), v6);
  uint64_t v9 = 0;
  unsigned int v10 = *((_DWORD *)this + 18);
  if (v10 - 1 <= PcdIdxFromCP) {
    return v9;
  }
  uint64_t v11 = *((void *)this + 11);
  if (!v11) {
    return 0;
  }
  unint64_t v12 = PcdIdxFromCP;
  if (v10 <= PcdIdxFromCP + 1) {
    int v13 = -1;
  }
  else {
    int v13 = *(_DWORD *)(*((void *)this + 10) + 4 * (PcdIdxFromCP + 1));
  }
  uint64_t v14 = v11 + 8 * PcdIdxFromCP;
  uint64_t v15 = (unsigned char *)(v14 + 6);
  char v16 = *(unsigned char *)(v14 + 6) & 1;
  if (v16) {
    int v17 = 1;
  }
  else {
    int v17 = 1252;
  }
  *((_DWORD *)a2 + 4) = v17;
  unsigned int v18 = *((_DWORD *)a2 + 6);
  if (*((_DWORD *)a2 + 7))
  {
    if (!v18)
    {
LABEL_14:
      unsigned int v18 = *((_DWORD *)a2 + 7);
      *((_DWORD *)a2 + 6) = v18 >> (*v15 & 1);
      goto LABEL_24;
    }
  }
  else if (!v18)
  {
    unsigned int v19 = (v13 - v6) << v16;
    OcText::setMinimumCapacity((OcText *)((char *)a2 + 8), 0x200u);
    unsigned int v18 = v19 >> (*v15 & 1);
    int v7 = (unsigned int *)((char *)this + 72);
    *((_DWORD *)a2 + 6) = v18;
    if (!v18) {
      goto LABEL_14;
    }
  }
  if ((*v15 & 1) == 0)
  {
    unsigned int v20 = *((_DWORD *)a2 + 7);
    if (v20) {
      goto LABEL_19;
    }
LABEL_23:
    OcText::setMinimumCapacity((OcText *)((char *)a2 + 8), v18);
    goto LABEL_24;
  }
  v18 *= 2;
  unsigned int v20 = *((_DWORD *)a2 + 7);
  if (v20 <= 1) {
    goto LABEL_23;
  }
LABEL_19:
  if (v20 < v18) {
    unsigned int v18 = v20;
  }
LABEL_24:
  unsigned int v21 = 0;
  do
  {
    char v22 = *(unsigned char *)(v14 + 6);
    int v23 = *((_DWORD *)a2 + 4);
    if (v22)
    {
      if (v23 == 1252) {
        break;
      }
    }
    else if (v23 == 1)
    {
      break;
    }
    unint64_t v24 = v12 + 1;
    unint64_t v25 = *v7;
    if (v12 + 1 >= v25) {
      int v26 = -1;
    }
    else {
      int v26 = *(_DWORD *)(*((void *)this + 10) + 4 * v24);
    }
    char v27 = v22 & 1;
    int v28 = (v22 & 1) + 1;
    unsigned int v29 = (v26 - v6) * v28;
    if (v29 >= v18) {
      unsigned int v30 = v18;
    }
    else {
      unsigned int v30 = v29;
    }
    unsigned int v42 = v30 >> v27;
    if (v12 >= v25) {
      int v31 = -1;
    }
    else {
      int v31 = *(_DWORD *)(*((void *)this + 10) + 4 * v12);
    }
    (*(void (**)(void, void, void))(**((void **)this + 12) + 16))(*((void *)this + 12), *(_DWORD *)v14 + (v6 - v31) * v28, 0);
    if (*(unsigned char *)(v14 + 6))
    {
      if (v42)
      {
        unint64_t v32 = 0;
        uint64_t v33 = *((void *)a2 + 4) + v21;
        do
          *(_WORD *)(v33 + 2 * v32++) = (*(uint64_t (**)(void))(**((void **)this + 12) + 80))(*((void *)this + 12));
        while (v32 < v42);
      }
    }
    else
    {
      (*(void (**)(void, void, unsigned int *))(**((void **)this + 12) + 56))(*((void *)this + 12), *((void *)a2 + 4) + v21, &v42);
    }
    v21 += v30;
    int v7 = (unsigned int *)((char *)this + 72);
    unint64_t v34 = (*((_DWORD *)this + 18) - 1);
    if (v12 < v34 || v24 >= v34) {
      break;
    }
    v6 += v42;
    uint64_t v14 = *((void *)this + 11) + 8 * v24;
    ++v12;
    v18 -= v30;
  }
  while (v18);
  LODWORD(v9) = v21 >> (OcText::isSingleByteEncoding(*((_DWORD *)a2 + 4)) ^ 1);
  int v36 = *((_DWORD *)a2 + 5);
  unsigned int v37 = v9 + v36;
  unsigned int v38 = *((_DWORD *)this + *((unsigned int *)a2 + 14) + 10);
  unsigned int v39 = v38 - v36;
  if (v37 <= v38) {
    uint64_t v9 = v9;
  }
  else {
    uint64_t v9 = v39;
  }
  *((_DWORD *)a2 + 6) = v9;
  return v9;
}

void OcText::setMinimumCapacity(OcText *this, unsigned int a2)
{
  if (this->var4 < a2) {
    OcText::allocBuffer(this, a2, 1);
  }
}

void WrdCharacterTextRun::~WrdCharacterTextRun(WrdCharacterTextRun *this)
{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBE56B0;
  unsigned int var4 = this->var4;
  if (var4) {
    (*((void (**)(WrdCharacterProperties *))var4->var0 + 1))(var4);
  }
  this->unsigned int var4 = 0;
  var5 = this->var5;
  if (var5) {
    (*((void (**)(WrdCharacterProperties *))var5->var0 + 1))(var5);
  }
  this->var5 = 0;
}

{
  uint64_t vars8;

  WrdCharacterTextRun::~WrdCharacterTextRun(this);
  JUMPOUT(0x23EC997B0);
}

void sub_238B3B964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B3BA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

int *WrdCharacterProperties::setOffsetToPictureData(WrdCharacterProperties *this, int a2)
{
  int v3 = *((_DWORD *)&this->var2 + 2);
  BOOL result = (int *)&this->var2 + 2;
  *BOOL result = v3 | 0x40;
  result[62] = a2;
  return result;
}

int *WrdCharacterProperties::setOffsetToFormFieldData(WrdCharacterProperties *this, int a2)
{
  int v3 = *((_DWORD *)&this->var2 + 2);
  BOOL result = (int *)&this->var2 + 2;
  *BOOL result = v3 | 0x80;
  result[63] = a2;
  return result;
}

int *WrdCharacterProperties::setObjectIDForOLE2(WrdCharacterProperties *this, int a2)
{
  int v3 = *((_DWORD *)&this->var2 + 2);
  BOOL result = (int *)&this->var2 + 2;
  *BOOL result = v3 | 0x200;
  result[70] = a2;
  return result;
}

uint64_t WrdCharacterProperties::setOffsetToOLEObjectData(WrdCharacterProperties *this, int a2)
{
  int v3 = *((_DWORD *)&this->var2 + 2);
  uint64_t result = (uint64_t)&this->var2 + 8;
  __int16 v4 = *(_WORD *)(result + 4);
  *(_DWORD *)uint64_t result = v3;
  *(_WORD *)(result + 4) = v4 | 8;
  *(_DWORD *)(result + 268) = a2;
  return result;
}

WrdCharacterProperties *WrdCharacterProperties::setSpecialCharacter(WrdCharacterProperties *this, char a2)
{
  *(void *)&this->var2 |= 0x40000000uLL;
  *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFFFD | (2 * (a2 & 1));
  return this;
}

uint64_t OcText::getCharacter(OcText *this, unsigned int a2)
{
  var5 = this->var5;
  if (!var5 || this->var3 <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  if (OcText::isSingleByteEncoding(this->var1)) {
    return var5[a2];
  }
  else {
    return *(unsigned __int16 *)&var5[2 * a2];
  }
}

BOOL WrdCharacterProperties::isPicture(WrdCharacterProperties *this)
{
  return (*((_DWORD *)this + 85) & 0x36) == 2 && this->var51 >= 0;
}

void WrdPictureProperties::WrdPictureProperties(WrdPictureProperties *this, WrdBorder *a2, WrdBorder *a3, WrdBorder *a4, WrdBorder *a5)
{
  *(void *)this = &unk_26EBE6860;
  *((void *)this + 1) = &unk_26EBE6890;
  *((void *)this + 4) = a2;
  *((void *)this + 5) = a3;
  *((void *)this + 6) = a4;
  *((void *)this + 7) = a5;
  *((_OWORD *)this + 1) = xmmword_238EEF500;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((_DWORD *)this + 26) = 0;
}

double WrdPictureProperties::reset(WrdPictureProperties *this)
{
  *(void *)&double result = 0xFFFFFFFFLL;
  *((_OWORD *)this + 1) = xmmword_238EEF500;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((_DWORD *)this + 26) = 0;
  return result;
}

uint64_t WrdParser::parse(WrdParser *this, WrdPictureProperties *a2, uint64_t a3)
{
  uint64_t result = *((void *)this + 15);
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)result + 16))(result, a3, 0);
    unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 15) + 96))(*((void *)this + 15));
    signed int v7 = (*(uint64_t (**)(void))(**((void **)this + 15) + 72))(*((void *)this + 15));
    if ((v6 & 0x80000000) != 0
      || (__int16 v8 = v7, v7 < 0)
      || (int)v6 < v7
      || v6 > (*(unsigned int (**)(void))(**((void **)this + 15) + 48))(*((void *)this + 15)))
    {
      __int16 v8 = 0;
      unsigned int v6 = 0;
    }
    *((_DWORD *)a2 + 19) = v6;
    *((_WORD *)a2 + 45) = v8;
    *((_DWORD *)a2 + 6) = (*(uint64_t (**)(void))(**((void **)this + 15) + 72))(*((void *)this + 15));
    *((_WORD *)a2 + 34) = (*(uint64_t (**)(void))(**((void **)this + 15) + 72))(*((void *)this + 15));
    *((_WORD *)a2 + 35) = (*(uint64_t (**)(void))(**((void **)this + 15) + 72))(*((void *)this + 15));
    *((_WORD *)a2 + 44) = (*(uint64_t (**)(void))(**((void **)this + 15) + 72))(*((void *)this + 15));
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 15) + 16))(*((void *)this + 15), 14, 1);
    *((_WORD *)a2 + 36) = (*(uint64_t (**)(void))(**((void **)this + 15) + 72))(*((void *)this + 15));
    *((_WORD *)a2 + 37) = (*(uint64_t (**)(void))(**((void **)this + 15) + 72))(*((void *)this + 15));
    *((_WORD *)a2 + 46) = (*(uint64_t (**)(void))(**((void **)this + 15) + 72))(*((void *)this + 15));
    *((_WORD *)a2 + 47) = (*(uint64_t (**)(void))(**((void **)this + 15) + 72))(*((void *)this + 15));
    *((_WORD *)a2 + 40) = (*(uint64_t (**)(void))(**((void **)this + 15) + 72))(*((void *)this + 15));
    *((_WORD *)a2 + 41) = (*(uint64_t (**)(void))(**((void **)this + 15) + 72))(*((void *)this + 15));
    *((_WORD *)a2 + 42) = (*(uint64_t (**)(void))(**((void **)this + 15) + 72))(*((void *)this + 15));
    *((_WORD *)a2 + 43) = (*(uint64_t (**)(void))(**((void **)this + 15) + 72))(*((void *)this + 15));
    __int16 v9 = (*(uint64_t (**)(void))(**((void **)this + 15) + 72))(*((void *)this + 15));
    *((unsigned char *)a2 + 104) = (v9 & 0x10) != 0;
    *((unsigned char *)a2 + 105) = (v9 & 0x20) != 0;
    *((unsigned char *)a2 + 106) = (v9 & 0x40) != 0;
    *((unsigned char *)a2 + 107) = (v9 & 0x80) != 0;
    *((_DWORD *)a2 + 7) = HIBYTE(v9);
    BorderReference = (WrdBorder *)WrdPictureProperties::getBorderReference((uint64_t *)a2, 1);
    WrdBaseParser::parseBRC80(this, BorderReference, *((SsrwOOStream **)this + 15));
    uint64_t v11 = (WrdBorder *)WrdPictureProperties::getBorderReference((uint64_t *)a2, 0);
    WrdBaseParser::parseBRC80(this, v11, *((SsrwOOStream **)this + 15));
    unint64_t v12 = (WrdBorder *)WrdPictureProperties::getBorderReference((uint64_t *)a2, 3);
    WrdBaseParser::parseBRC80(this, v12, *((SsrwOOStream **)this + 15));
    int v13 = (WrdBorder *)WrdPictureProperties::getBorderReference((uint64_t *)a2, 2);
    WrdBaseParser::parseBRC80(this, v13, *((SsrwOOStream **)this + 15));
    *((_WORD *)a2 + 32) = (*(uint64_t (**)(void))(**((void **)this + 15) + 72))(*((void *)this + 15));
    *((_WORD *)a2 + 33) = (*(uint64_t (**)(void))(**((void **)this + 15) + 72))(*((void *)this + 15));
    uint64_t v14 = *(uint64_t (**)(void))(**((void **)this + 15) + 16);
    return v14();
  }
  return result;
}

uint64_t WrdPictureProperties::getBorderReference(uint64_t *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t v2 = a1 + 5;
      goto LABEL_7;
    case 1:
      uint64_t v2 = a1 + 4;
      goto LABEL_7;
    case 2:
      uint64_t v2 = a1 + 7;
      goto LABEL_7;
    case 3:
      uint64_t v2 = a1 + 6;
LABEL_7:
      uint64_t result = *v2;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t WrdBaseParser::parseBRC80(WrdBaseParser *this, WrdBorder *a2, SsrwOOStream *a3)
{
  int v3 = a3;
  unsigned int v5 = (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 10))(a3);
  LODWORD(v3) = (*((uint64_t (**)(SsrwOOStream *))v3->var0 + 10))(v3);
  a2->var6 = v5;
  a2->unsigned int var2 = v5 >> 8;
  uint64_t result = WrdProperty::convertWord97ColorEnumToColor(v3, (uint64_t)&a2->var1);
  a2->int var3 = v3;
  a2->var7 = BYTE1(v3) & 0x1F;
  *((unsigned char *)a2 + 24) = *((unsigned char *)a2 + 24) & 0xFC | (v3 >> 13) & 3;
  return result;
}

void WrdPictureProperties::~WrdPictureProperties(WrdPictureProperties *this)
{
  WrdPictureProperties::~WrdPictureProperties(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(void *)this = &unk_26EBE6860;
  *((void *)this + 1) = &unk_26EBE6890;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 4) = 0;
  int v3 = *((void *)this + 5);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 5) = 0;
  __int16 v4 = *((void *)this + 6);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 6) = 0;
  unsigned int v5 = *((void *)this + 7);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 7) = 0;
}

void sub_238B3C410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B3C610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, WrdCharacterProperties *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  WrdCharacterProperties::~WrdCharacterProperties((WrdCharacterProperties *)&a14);
  WrdCharacterTextRun::~WrdCharacterTextRun((WrdCharacterTextRun *)&a9);

  _Unwind_Resume(a1);
}

void WrdCharacterProperties::WrdCharacterProperties(WrdCharacterProperties *this, const WrdCharacterProperties *a2)
{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBE5618;
  this->unsigned int var1 = (void **)&unk_26EBE5648;
  *(void *)&WrdCharacterPropertiesOverridden v4 = 255;
  *((void *)&v4 + 1) = 255;
  *(WrdCharacterPropertiesOverridden *)((char *)&this->var2 + 14) = v4;
  CsString::CsString(&this->var5);
  this->var6 = (WrdShading *)(*((uint64_t (**)(WrdShading *))a2->var6->var0 + 2))(a2->var6);
  this->var7 = (WrdBorder *)(*((uint64_t (**)(WrdBorder *))a2->var7->var0 + 2))(a2->var7);
  this->var8 = (WrdDateTime *)(*((uint64_t (**)(WrdDateTime *))a2->var12->var0 + 2))(a2->var12);
  this->var9 = (WrdDateTime *)(*((uint64_t (**)(WrdDateTime *))a2->var9->var0 + 2))(a2->var9);
  this->var10 = (WrdDateTime *)(*((uint64_t (**)(WrdDateTime *))a2->var10->var0 + 2))(a2->var10);
  this->var11 = (WrdDateTime *)(*((uint64_t (**)(WrdDateTime *))a2->var11->var0 + 2))(a2->var11);
  this->var12 = (WrdDateTime *)(*((uint64_t (**)(WrdDateTime *))a2->var12->var0 + 2))(a2->var12);
  WrdCharacterProperties::operator=((uint64_t)this, (uint64_t)a2);
}

void sub_238B3C838(_Unwind_Exception *a1)
{
  CsString::~CsString(v1);
  _Unwind_Resume(a1);
}

BOOL WrdCharacterProperties::isOle2Object(WrdCharacterProperties *this)
{
  return (*((_DWORD *)this + 85) & 0x36) == 0x26 && this->var59 != 0;
}

void sub_238B3CFF8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  WrdPictureProperties::~WrdPictureProperties((WrdPictureProperties *)&a24);
  if (a2 == 3)
  {
    int v28 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v28);
    __cxa_end_catch();
  }
  else
  {
    unsigned int v29 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      [v29 raise];
    }
    else {
      +[TCMessageException raise:TCUnknownProblemMessage];
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x238B3CFBCLL);
}

void sub_238B3D1EC(void *exc_buf, int a2)
{
  if (a2 == 2)
  {
    [objc_begin_catch(exc_buf) raise];
    objc_end_catch();
    JUMPOUT(0x238B3D1C0);
  }
  JUMPOUT(0x238B3D260);
}

void sub_238B3D248()
{
}

void WrdPictureProperties::WrdPictureProperties(WrdPictureProperties *this)
{
  *(void *)this = &unk_26EBE6860;
  *((void *)this + 1) = &unk_26EBE6890;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  uint64_t v2 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v2);
  *((void *)this + 4) = v2;
  int v3 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v3);
  *((void *)this + 5) = v3;
  WrdCharacterPropertiesOverridden v4 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v4);
  *((void *)this + 6) = v4;
  unsigned int v5 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v5);
  *((void *)this + 7) = v5;
  (*(void (**)(WrdPictureProperties *))(*(void *)this + 16))(this);
}

void sub_238B3D410(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void WrdBinaryReader::read(WrdBinaryReader *this, WrdPictureProperties *a2)
{
  unsigned int v2 = *((_DWORD *)a2 + 4);
  if ((v2 & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    int v20 = 1004;
    goto LABEL_22;
  }
  unsigned int v5 = *((_DWORD *)a2 + 5);
  unsigned int v21 = *((_DWORD *)a2 + 4);
  unsigned int v6 = (char *)this + 24 * v5;
  signed int v7 = v6 + 224;
  for (unint64_t i = (uint64_t *)*((void *)v6 + 29); i; unint64_t i = (uint64_t *)*i)
  {
    unsigned int v9 = *((_DWORD *)i + 7);
    if (v2 >= v9)
    {
      if (v9 >= v2) {
        goto LABEL_15;
      }
      ++i;
    }
  }
  unsigned int v10 = (_DWORD *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 4) + 280) + 16))(*(void *)(*((void *)this + 4) + 280), 11);
  v10[2] = v5;
  v10[3] = v2;
  (*(void (**)(WrdBinaryReader *, _DWORD *))(*(void *)this + 192))(this, v10);
  uint64_t v11 = (uint64_t *)*((void *)v7 + 1);
  if (!v11)
  {
LABEL_12:
    int v13 = __cxa_allocate_exception(4uLL);
    *int v13 = 1004;
  }
  while (1)
  {
    unsigned int v12 = *((_DWORD *)v11 + 7);
    if (v2 >= v12) {
      break;
    }
LABEL_11:
    uint64_t v11 = (uint64_t *)*v11;
    if (!v11) {
      goto LABEL_12;
    }
  }
  if (v12 < v2)
  {
    ++v11;
    goto LABEL_11;
  }
  if (v10) {
    (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
  }
LABEL_15:
  char v22 = &v21;
  uint64_t v14 = *((unsigned int *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)v7, &v21, (uint64_t)&std::piecewise_construct, &v22)+ 8);
  *((_DWORD *)this + 152) = v14;
  WrdParser::parse(*((WrdParser **)this + 4), a2, v14);
  int v15 = *((unsigned __int16 *)a2 + 45);
  *((_DWORD *)this + 153) = *((_DWORD *)this + 152) + v15;
  *((_DWORD *)this + 154) = *((_DWORD *)a2 + 19) - v15;
  if ((*(unsigned char *)(*((void *)this + 4) + 186) & 4) != 0)
  {
    unsigned int PcdIdxFromCP = WrdPieceTable::getPcdIdxFromCP((WrdPieceTable *)(*((void *)this + 17) + 72), *((_DWORD *)a2 + 4));
    uint64_t v17 = *((void *)this + 17);
    if (*(_DWORD *)(v17 + 72) - 1 > PcdIdxFromCP)
    {
      uint64_t v18 = *(void *)(v17 + 88);
      if (v18)
      {
        WrdParser::applyPiece(*((int **)this + 4), v18 + 8 * PcdIdxFromCP, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t *)a2);
        goto LABEL_19;
      }
    }
    exception = __cxa_allocate_exception(4uLL);
    int v20 = 1005;
LABEL_22:
    _DWORD *exception = v20;
  }
LABEL_19:
  EshBinaryReader::finish((WrdBinaryReader *)((char *)this + 40));
}

void sub_238B3D680(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_238B3DB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_238B3DD7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

EshAtom *WrdEshObjectFactory::createObject(WrdEshObjectFactory *this, EshObject *a2, int a3)
{
  if ((int)a2 > 61452)
  {
    switch(a2)
    {
      case 0xF00D:
        Object = (EshAtom *)operator new(0x20uLL);
        EshAtom::EshAtom(Object, 0xF00Du, 0);
        unsigned int v6 = &unk_26EBE5C90;
        break;
      case 0xF010:
        Object = (EshAtom *)operator new(0x20uLL);
        EshAtom::EshAtom(Object, 0xF010u, 0);
        unsigned int v6 = &unk_26EBE5B28;
        break;
      case 0xF011:
        Object = (EshAtom *)operator new(0x20uLL);
        EshAtom::EshAtom(Object, 0xF011u, 0);
        unsigned int v6 = &unk_26EBE5BE8;
        break;
      default:
        goto LABEL_15;
    }
    *(void *)Object = v6;
    *((_DWORD *)Object + 7) = 0;
    goto LABEL_17;
  }
  switch(a2)
  {
    case 6:
      Object = (EshAtom *)operator new(0x180uLL);
      WrdEshGroup::WrdEshGroup(Object);
      (*(void (**)(EshAtom *))(*(void *)Object + 120))(Object);
      goto LABEL_17;
    case 7:
      Object = (EshAtom *)operator new(0x258uLL);
      WrdEshShape::WrdEshShape(Object);
      goto LABEL_16;
    case 0xC:
      Object = (EshAtom *)operator new(0x150uLL);
      WrdEshBackground::WrdEshBackground(Object);
      goto LABEL_16;
  }
LABEL_15:
  Object = EshObjectFactory::createObject((EshObjectFactory *)this, (int)a2, a3);
LABEL_16:
  if (!Object)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1001;
  }
LABEL_17:
  EshObjectFactory::verifyTypeAndVersionOfObject((EshObjectFactory *)Object, a2, a3);
  return Object;
}

void sub_238B3E034(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'WrdBinaryReader::read(WrdBinaryReader *this, EshRoot *a2)
{
}

void WrdBinaryReader::read(WrdBinaryReader *this, EshRoot *a2)
{
  if ((*((_DWORD *)this + 47) & 0xFFFFFFFE) == 4) {
    WrdBinaryReader::readPicture(this, a2);
  }
  else {
    EshBinaryReader::read((WrdBinaryReader *)((char *)this + 40), a2);
  }
}

void WrdBinaryReader::readPicture(WrdBinaryReader *this, EshRoot *a2)
{
  (*(void (**)(EshRoot *, void))(*(void *)a2 + 104))(a2, 0);
  int v4 = *((_DWORD *)this + 154);
  if (v4)
  {
    *((_DWORD *)this + 156) = 4;
    unsigned int v5 = *(SsrwOOStream **)(*((void *)this + 4) + 120);
    uint64_t v6 = *((unsigned int *)this + 153);
    if (*((_DWORD *)this + 47) == 4)
    {
      (*((void (**)(void, uint64_t, void))v5->var0 + 2))(*(void *)(*((void *)this + 4) + 120), v6, 0);
    }
    else if ((int)v6 + v4 <= (*((unsigned int (**)(void))v5->var0 + 5))(*(void *)(*((void *)this + 4) {
                                                                                                + 120)))
    }
    {
      return;
    }
    WrdEshReader::start((EshDataModelVisitor **)this + 5, v5);
    *((_DWORD *)this + 156) = 4;
    EshBinaryReader::read((WrdBinaryReader *)((char *)this + 40), a2);
  }
}

uint64_t WrdEshReader::start(EshDataModelVisitor **this, SsrwOOStream *a2)
{
  EshBinaryReader::start((EshBinaryReader *)this, a2);
  int v4 = (EshClientDataModelVisitor *)operator new(0x10uLL);
  EshClientDataModelVisitor::EshClientDataModelVisitor(v4);
  *(void *)int v4 = &unk_26EBE7688;
  *((void *)v4 + 1) = a2;
  unsigned int v5 = this[2];
  return EshDataModelVisitor::takeClientVisitor(v5, v4);
}

void sub_238B3E250(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void EshClientDataModelVisitor::EshClientDataModelVisitor(EshClientDataModelVisitor *this)
{
  *(void *)this = &unk_26EBD6EC0;
}

uint64_t EshDataModelVisitor::takeClientVisitor(EshDataModelVisitor *this, EshClientDataModelVisitor *a2)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 1) = a2;
  return result;
}

void sub_238B3E4A0()
{
}

void sub_238B3E5A0(void *a1, int a2)
{
  int v4 = v2;

  if (a2 == 3)
  {
    uint64_t v6 = (unsigned int *)__cxa_begin_catch(a1);
    OAConvertCsException(v6);
    __cxa_end_catch();
  }
  else
  {
    signed int v7 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      [v7 raise];
    }
    else {
      +[TCMessageException raise:TCUnknownProblemMessage];
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x238B3E56CLL);
}

void sub_238B3E62C(void *exc_buf, int a2)
{
  if (a2 == 4)
  {
    objc_begin_catch(exc_buf);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    objc_end_catch();
    JUMPOUT(0x238B3E584);
  }
  JUMPOUT(0x238B3E5C0);
}

void WrdEshShape::WrdEshShape(WrdEshShape *this)
{
  EshShape::EshShape((EshShape *)this);
  void *v1 = &unk_26EBE5E80;
  v1[52] = &unk_26EBE5F50;
  v1[72] = 0;
  v1[74] = 0;
  v1[73] = 0;
}

void non-virtual thunk to'WrdBinaryReader::read(OcBinaryReader *this, EshObject *a2)
{
}

void WrdBinaryReader::read(OcBinaryReader *this, EshObject *a2)
{
  EshBinaryReader::read((EshBinaryReader *)&this[5], a2);
  if (LODWORD(this[78].var0) == 24 && (*((unsigned int (**)(EshObject *))a2->var0 + 2))(a2) == 61447)
  {
    if (v4)
    {
      unsigned int v5 = (SsrwOOStream *)*((void *)this[4].var0 + 14);
      OcBinaryReader::loadBlip(this, v4, v5);
    }
  }
}

uint64_t EshColor::systemIndex(uint64_t result, uint64_t a2, char a3, char a4, int a5, int a6, int a7)
{
  *(_DWORD *)a2 = 34;
  *(unsigned char *)(a2 + 4) = result;
  char v7 = *(unsigned char *)(a2 + 6) & 0x80;
  *(unsigned char *)(a2 + 5) = a4;
  if (a5) {
    char v8 = 16;
  }
  else {
    char v8 = 0;
  }
  if (a6) {
    char v9 = 32;
  }
  else {
    char v9 = 0;
  }
  if (a7) {
    char v10 = 64;
  }
  else {
    char v10 = 0;
  }
  *(unsigned char *)(a2 + 6) = v8 & 0xF0 | a3 & 0xF | v9 | v10 | v7;
  return result;
}

char *WrdEshReader::readClientAnchor(WrdEshReader *this, EshContentBase *a2, const EshHeader *a3)
{
  uint64_t v6 = (EshAtom *)operator new(0x20uLL);
  EshAtom::EshAtom(v6, 0xF010u, 0);
  *(void *)uint64_t v6 = &unk_26EBE5B28;
  *((_DWORD *)v6 + 7) = 0;
  (*(void (**)(WrdEshReader *, EshAtom *, const EshHeader *))(*(void *)this + 104))(this, v6, a3);
  if ((*(unsigned int (**)(EshContentBase *))(*(void *)a2 + 16))(a2) == 7)
  {
    char v8 = (EshAtom **)(result + 576);
  }
  else
  {
    if ((*(unsigned int (**)(EshContentBase *))(*(void *)a2 + 16))(a2) != 6)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 0;
    }
    char v8 = (EshAtom **)(result + 368);
  }
  WrdPictureProperties *v8 = v6;
  return result;
}

void sub_238B3E9F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdEshClientAnchor::accept(int a1, void *lpsrc)
{
  ClientVisitor = (const void *)EshDataModelVisitor::getClientVisitor(v2);
  return v4();
}

uint64_t EshDataModelVisitor::getClientVisitor(EshDataModelVisitor *this)
{
  return *((void *)this + 1);
}

uint64_t WrdEshParserVisitor::visit(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8));
  return 1;
}

{
  *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8));
  return 1;
}

{
  *(_WORD *)(a2 + 28) = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8));
  *(_WORD *)(a2 + 30) = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8));
  return 1;
}

uint64_t EshShapeImageData::getGrayScale(EshShapeImageData *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty(*((void *)this + 2), 0x13Du);
}

void sub_238B3EC68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t EshShapeImageData::getBilevel(EshShapeImageData *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty(*((void *)this + 2), 0x13Eu);
}

void sub_238B3EE10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B3F280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

uint64_t EshTextBox::isTextIDSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x80u);
}

uint64_t EshShapeImageData::isOLEIDSet(EshShapeImageData *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x10Bu);
}

void WrdEshParserVisitor::~WrdEshParserVisitor(WrdEshParserVisitor *this)
{
  EshClientDataModelVisitor::EshClientDataModelVisitor(this);
  JUMPOUT(0x23EC997B0);
}

unint64_t WrdParagraphProperties::doRevisionsExist(WrdParagraphProperties *this)
{
  return ((unint64_t)*((unsigned __int16 *)this + 12) >> 9) & 1;
}

uint64_t WrdTableProperties::doRevisionsExist(WrdTableProperties *this)
{
  return *((_DWORD *)this + 4) & 1;
}

void sub_238B3F4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B3F57C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B3F65C(_Unwind_Exception *a1)
{
  int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238B3F7E4(_Unwind_Exception *a1, WrdCharacterTextRun *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  WrdCharacterTextRun::~WrdCharacterTextRun((WrdCharacterTextRun *)&a10);
  _Unwind_Resume(a1);
}

uint64_t WrdCharacterProperties::setFieldVanish(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x2000000000uLL;
  *(_DWORD *)(result + 216) = a2;
  return result;
}

WrdCharacterProperties *WrdCharacterProperties::setData(WrdCharacterProperties *this, char a2)
{
  *(void *)&this->var2 |= 0x200000000uLL;
  *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFFEF | (16 * (a2 & 1));
  return this;
}

BOOL WrdCharacterProperties::isFormFieldData(WrdCharacterProperties *this)
{
  return (~*((_DWORD *)this + 85) & 0x12) == 0 && this->var52 >= 0;
}

BOOL WrdCharacterProperties::isOle1Object(WrdCharacterProperties *this)
{
  if ((*((_DWORD *)this + 85) & 0x36) != 6) {
    return 0;
  }
  if (this->var56 < 0) {
    return this->var53 >= 0;
  }
  return 1;
}

WrdCharacterProperties *WrdCharacterProperties::setStyleIndex(WrdCharacterProperties *this, unsigned __int16 a2)
{
  *(void *)&this->var2 |= 0x8000000uLL;
  this->var72 = a2;
  return this;
}

void sub_238B3F9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B3FAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B3FBEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B3FC94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B3FD4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WrdCharacterProperties *WrdCharacterProperties::setOle2(WrdCharacterProperties *this, char a2)
{
  *(void *)&this->var2 |= 0x400000000uLL;
  *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFFDF | (32 * (a2 & 1));
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::setEmbeddedObject(WrdCharacterProperties *this, char a2)
{
  *(void *)&this->var2 |= 0x80000000uLL;
  *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFFFB | (4 * (a2 & 1));
  return this;
}

void sub_238B3FF04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void EshMetafileBlip::EshMetafileBlip(EshMetafileBlip *this, unsigned __int16 a2)
{
  *(void *)EshBlipT<EshMetafileBlipInfo>::EshBlipT((uint64_t)this, a2) = &unk_26EBD7588;
}

uint64_t EshBlipT<EshMetafileBlipInfo>::EshBlipT(uint64_t a1, unsigned __int16 a2)
{
  EshBlip::EshBlip((EshBlip *)a1, a2);
  *(void *)uint64_t v3 = &unk_26EBD7648;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 48) = v3 + 20;
  OcBinaryData::OcBinaryData((OcBinaryData *)(v3 + 72));
  *(_WORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_WORD *)(a1 + 152) = -258;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = a1 + 160;
  OcBinaryData::OcBinaryData((OcBinaryData *)(a1 + 192));
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_WORD *)(a1 + 272) = -258;
  return a1;
}

void sub_238B40024(_Unwind_Exception *a1)
{
  OcBinaryData::~OcBinaryData(v2);
  EshBlip::~EshBlip(v1);
  _Unwind_Resume(a1);
}

uint64_t EshMetafileBlip::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshMetafileBlip *a2)
{
  uint64_t v4 = *((void *)this + 3);
  int Offset = EshRecord::getOffset(a2);
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, (Offset + 8), 0);
  EshParserVisitor::parseBlipUid(this, (UID *)((char *)a2 + 28));
  if (**((_WORD **)a2 + 6)) {
    EshParserVisitor::parseBlipUid(this, (UID *)((char *)a2 + 56));
  }
  EshParserVisitor::parseMetafileInfo(this, (uint64_t)a2 + 48);
  unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
  unsigned int v7 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3) + 8;
  if (v6 < v7)
  {
    __int16 v8 = (*(uint64_t (**)(void))(**((void **)this + 3) + 80))(*((void *)this + 3));
    **((_WORD **)a2 + 21) = v8;
    if (v8) {
      EshParserVisitor::parseBlipUid(this, (UID *)a2 + 11);
    }
    EshParserVisitor::parseMetafileInfo(this, (uint64_t)a2 + 168);
    if ((*(unsigned int (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3)) != v7)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 7005;
    }
  }
  EshParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t EshParserVisitor::parseMetafileInfo(EshParserVisitor *a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 72) = (*(uint64_t (**)(void *))(**((void **)a1 + 3) + 104))(*((void **)a1 + 3));
  int v4 = (*(uint64_t (**)(void *))(**((void **)a1 + 3) + 96))(*((void **)a1 + 3));
  int v5 = (*(uint64_t (**)(void *))(**((void **)a1 + 3) + 96))(*((void **)a1 + 3));
  int v6 = (*(uint64_t (**)(void *))(**((void **)a1 + 3) + 96))(*((void **)a1 + 3));
  int v7 = (*(uint64_t (**)(void *))(**((void **)a1 + 3) + 96))(*((void **)a1 + 3));
  *(_DWORD *)(a2 + 76) = v4;
  *(_DWORD *)(a2 + 80) = v5;
  *(_DWORD *)(a2 + 84) = v6;
  *(_DWORD *)(a2 + 88) = v7;
  int v8 = (*(uint64_t (**)(void *))(**((void **)a1 + 3) + 96))(*((void **)a1 + 3));
  int v9 = (*(uint64_t (**)(void *))(**((void **)a1 + 3) + 96))(*((void **)a1 + 3));
  *(_DWORD *)(a2 + 92) = v8;
  *(_DWORD *)(a2 + 96) = v9;
  *(_DWORD *)(a2 + 100) = (*(uint64_t (**)(void *))(**((void **)a1 + 3) + 104))(*((void **)a1 + 3));
  *(unsigned char *)(a2 + 104) = (*(uint64_t (**)(void *))(**((void **)a1 + 3) + 64))(*((void **)a1 + 3));
  *(unsigned char *)(a2 + 105) = (*(uint64_t (**)(void *))(**((void **)a1 + 3) + 64))(*((void **)a1 + 3));
  unsigned int v10 = *(_DWORD *)(a2 + 100);
  return EshParserVisitor::delayReadData(a1, (OcBinaryData *)(a2 + 24), v10);
}

void sub_238B40584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WrdBinaryReader::getObjectPoolStorage(WrdBinaryReader *this)
{
  return *(void *)(*((void *)this + 4) + 136);
}

void sub_238B4088C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  SsrwOORootStorage::~SsrwOORootStorage((SsrwOORootStorage *)&a9);
  objc_begin_catch(a1);
  if (!v9) {
    JUMPOUT(0x238B40844);
  }
  JUMPOUT(0x238B4081CLL);
}

uint64_t SsrwOORootStorage::createInBuf(SsrwOORootStorage *this, void **a2, unsigned int a3, void *(*a4)(void *, unint64_t), int8x8_t a5)
{
  LODWORD(result) = createStructuredStorageInBuf(a2, a3, (uint64_t)a4, 1, (uint64_t *)this + 10, a5);
  if (result || (uint64_t result = getStorageFromRoot(*((void *)this + 10), this), result))
  {
    int v7 = result;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v7;
  }
  return result;
}

uint64_t createStructuredStorageInBuf(void *a1, unsigned int a2, uint64_t a3, int a4, uint64_t *a5, int8x8_t a6)
{
  return createStructuredStorageInBufEx(a1, a2, a3, a4, a5, 0, a6);
}

uint64_t createStructuredStorageInBufEx(void *a1, unsigned int a2, uint64_t a3, int a4, uint64_t *a5, unsigned int a6, int8x8_t a7)
{
  if (!a1) {
    return 6;
  }
  uint64_t StructuredStorageInternal = 6;
  if (a5)
  {
    if (a3)
    {
      if (*a1)
      {
        a7.i32[0] = a6;
        uint8x8_t v10 = (uint8x8_t)vcnt_s8(a7);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.i32[0] <= 1u)
        {
          if ((a4 - 1) > 1)
          {
            return 2;
          }
          else
          {
            unsigned int v12 = SsrwOpenMemForReadWrite((uint64_t)a1, a2, a3);
            if (v12)
            {
              int v13 = v12;
              uint64_t StructuredStorageInternal = createStructuredStorageInternal((uint64_t)v12, a4, a5, 1, a6);
              if (StructuredStorageInternal) {
                SsrwFclose(v13);
              }
            }
            else
            {
              return 4;
            }
          }
        }
      }
    }
  }
  return StructuredStorageInternal;
}

_DWORD *SsrwOpenMemForReadWrite(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t result = malloc_type_malloc(0x60uLL, 0x10A2040658F7E63uLL);
  if (result)
  {
    result[11] = 0;
    *(_DWORD *)((char *)result + 41) = 0;
    *((void *)result + 6) = SsrwMemFread;
    *((void *)result + 7) = SsrwMemFwrite;
    *((void *)result + 8) = SsrwMemFclose;
    *((void *)result + 9) = SsrwMemFseek;
    *((void *)result + 10) = SsrwMemFtell;
    *((void *)result + 11) = SsrwMemFtruncate;
    *(void *)uint64_t result = a1;
    *((void *)result + 1) = 0;
    *((void *)result + 2) = a2;
    *((void *)result + 3) = 0;
    *((void *)result + 4) = a3;
    *((unsigned char *)result + 40) = 3;
  }
  return result;
}

uint64_t createStructuredStorageInternal(uint64_t a1, int a2, uint64_t *a3, char a4, unsigned int a5)
{
  if ((a5 & (a5 - 1)) != 0) {
    return 6;
  }
  if ((a2 - 1) > 1) {
    return 2;
  }
  uint8x8_t v10 = malloc_type_malloc(0x70uLL, 0x10300407518E08AuLL);
  if (!v10) {
    return 5;
  }
  uint64_t v11 = (uint64_t)v10;
  v10[5] = 0u;
  v10[6] = 0u;
  v10[3] = 0u;
  v10[4] = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  if (a5) {
    unsigned int v12 = a5;
  }
  else {
    unsigned int v12 = 512;
  }
  _OWORD *v10 = 0uLL;
  rootStorageInit((uint64_t)v10, 1, v12);
  size_t v13 = 1 << headerGetSectorShift(*(void *)(v11 + 16));
  uint64_t v14 = malloc_type_malloc(v13, 0xAAE849AFuLL);
  *(void *)(v11 + 80) = v14;
  if (!v14)
  {
    closeStg((char *)v11);
    return 5;
  }
  bzero(v14, v13);
  char SectorShift = headerGetSectorShift(*(void *)(v11 + 16));
  uint64_t v16 = fatConstruct(v11, (void *)(v11 + 24), 1 << SectorShift);
  if (v16)
  {
    uint64_t v17 = v16;
  }
  else
  {
    *(void *)uint64_t v11 = a1;
    *(_DWORD *)(v11 + 56) = a2;
    char SmallSectorShift = headerGetSmallSectorShift(*(void *)(v11 + 16));
    uint64_t v19 = fatConstruct(v11, (void *)(v11 + 32), 1 << SmallSectorShift);
    if (v19)
    {
      uint64_t v17 = v19;
    }
    else
    {
      storageCreateAtRoot(v11, (uint64_t *)(v11 + 48));
      uint64_t v17 = rootStorageInitWrite((uint64_t *)v11);
      if (!v17)
      {
        *(unsigned char *)(v11 + 8) = a4;
        *a3 = v11;
        return v17;
      }
    }
    *(void *)uint64_t v11 = 0;
  }
  closeStg((char *)v11);
  return v17;
}

uint64_t storageCreateAtRoot(uint64_t a1, uint64_t *a2)
{
  *(void *)uint8x8_t v10 = 0;
  uint64_t inited = 6;
  if (a1)
  {
    if (a2)
    {
      uint64_t inited = storageConstruct(a2);
      if (!inited)
      {
        uint64_t v5 = *a2;
        *(void *)uint64_t v5 = a1;
        *(void *)(v5 + 16) = 0;
        uint64_t TOC = rootStorageGetTOC(a1);
        uint64_t v7 = tocAddEntry(TOC, (uint64_t *)v10);
        if (v7)
        {
          uint64_t inited = v7;
        }
        else
        {
          uint64_t inited = directoryInitEntry(*(uint64_t *)v10, (unsigned __int16 *)"R", 5, a1);
          unsigned int Index = directoryGetIndex(*(uint64_t *)v10);
          if (!inited)
          {
            *(_DWORD *)(v5 + 8) = Index;
            *(_DWORD *)(v5 + 32) = headerGetSmallStreamCutoff(a1);
            return inited;
          }
          tocInvalidateEntry(TOC, Index);
        }
        storageDestroy((uint64_t)a2);
      }
    }
  }
  return inited;
}

uint64_t tocAddEntry(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = *(unsigned int *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8))
  {
    unsigned int v5 = 1;
    do
    {
      unsigned int v6 = v5 - 1;
      uint64_t v7 = directoryGetAtIndex(*(void *)a1, v5 - 1);
      if (directoryGetType(v7)) {
        unsigned int v6 = -1;
      }
    }
    while (v6 == -1 && v5++ < *(_DWORD *)(a1 + 8));
    if (v6 != -1) {
      goto LABEL_18;
    }
    unsigned int v6 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    unsigned int v6 = 0;
  }
  unint64_t v9 = v4 >> 7;
  if (v6 % v9)
  {
LABEL_17:
    *(_DWORD *)(a1 + 8) = v6 + 1;
LABEL_18:
    uint64_t v16 = directoryGetAtIndex(*(void *)a1, v6);
    *a2 = v16;
    directoryConstructEntry(v6, v16);
    return 0;
  }
  uint64_t v10 = *(void *)a1;
  int v11 = sizeOfDirectoryEntry();
  if (v10)
  {
    unsigned int v12 = (void *)(v10 - v11);
    int v13 = v9 + *(_DWORD *)(a1 + 8);
    int v14 = sizeOfDirectoryEntry();
    int v15 = (char *)malloc_type_realloc(v12, (v14 + v14 * v13), 0x98484FA3uLL);
    if (v15)
    {
LABEL_16:
      *(void *)a1 = &v15[(int)sizeOfDirectoryEntry()];
      unsigned int v6 = *(_DWORD *)(a1 + 8);
      goto LABEL_17;
    }
  }
  else if (v11)
  {
    size_t v18 = v11;
    size_t v19 = ((int)v9 + 1) * (uint64_t)v11;
    if (v19 >= v9 + 1 && v19 >= v18)
    {
      unsigned int v21 = (char *)malloc_type_malloc(v19, 0xBF89B1ADuLL);
      if (v21)
      {
        int v15 = v21;
        directoryConstructNilEntry((uint64_t)v21);
        goto LABEL_16;
      }
    }
  }
  return 5;
}

uint64_t directoryConstructNilEntry(uint64_t a1)
{
  *(unsigned char *)(a1 + 88) = 1;
  return 0;
}

uint64_t directoryInitEntry(uint64_t a1, unsigned __int16 *a2, int a3, uint64_t a4)
{
  unsigned int v8 = _ChWcslen(a2) + 1;
  if (v8 > 0x20) {
    return 6;
  }
  *(_WORD *)(a1 + 80) = 2 * v8;
  _ChWcscpy((_WORD *)(a1 + 16), a2);
  uint64_t result = 0;
  *(_DWORD *)(a1 + 84) = a3;
  *(void *)a1 = a4;
  return result;
}

uint64_t headerWrite(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (char *)malloc_type_malloc(0x4CuLL, 0x3C3384A1uLL);
  if (!v4) {
    return 5;
  }
  uint64_t v5 = (uint64_t)v4;
  *(void *)unint64_t v4 = 0xE11AB1A1E011CFD0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a2 + 8);
  CsLeWriteUInt16(*(unsigned __int16 *)(a2 + 24), (_WORD *)v4 + 12);
  CsLeWriteUInt16(*(unsigned __int16 *)(a2 + 26), (_WORD *)(v5 + 26));
  CsLeWriteUInt16(*(unsigned __int16 *)(a2 + 28), (_WORD *)(v5 + 28));
  CsLeWriteUInt16(*(unsigned __int16 *)(a2 + 30), (_WORD *)(v5 + 30));
  CsLeWriteUInt16(*(unsigned __int16 *)(a2 + 32), (_WORD *)(v5 + 32));
  int v6 = *(_DWORD *)(a2 + 34);
  *(_WORD *)(v5 + 38) = *(_WORD *)(a2 + 38);
  *(_DWORD *)(v5 + 34) = v6;
  CsLeWriteUInt32(*(unsigned int *)(a2 + 40), (_DWORD *)(v5 + 40));
  CsLeWriteUInt32(*(unsigned int *)(a2 + 44), (_DWORD *)(v5 + 44));
  CsLeWriteUInt32(*(unsigned int *)(a2 + 48), (_DWORD *)(v5 + 48));
  CsLeWriteUInt32(*(unsigned int *)(a2 + 52), (_DWORD *)(v5 + 52));
  CsLeWriteUInt32(*(unsigned int *)(a2 + 56), (_DWORD *)(v5 + 56));
  CsLeWriteUInt32(*(unsigned int *)(a2 + 60), (_DWORD *)(v5 + 60));
  CsLeWriteUInt32(*(unsigned int *)(a2 + 64), (_DWORD *)(v5 + 64));
  CsLeWriteUInt32(*(unsigned int *)(a2 + 68), (_DWORD *)(v5 + 68));
  CsLeWriteUInt32(*(unsigned int *)(a2 + 72), (_DWORD *)(v5 + 72));
  if (SsrwFseek(a1))
  {
    free((void *)v5);
    return 4;
  }
  else
  {
    BOOL v8 = SsrwFwrite(v5, 76, 1, a1) != 1;
    free((void *)v5);
    return (4 * v8);
  }
}

uint64_t CsLeWriteUInt16(uint64_t result, _WORD *a2)
{
  *a2 = result;
  return result;
}

uint64_t SsrwFwrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 && a1 && (unint64_t v4 = *(uint64_t (**)(void))(a4 + 56)) != 0) {
    return v4();
  }
  else {
    return 0;
  }
}

uint64_t SsrwMemFwrite(void *__src, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0;
  if (__src && a4)
  {
    if ((*(unsigned char *)(a4 + 40) & 2) != 0)
    {
      uint64_t v7 = a3;
      size_t v9 = a3 * a2;
      uint64_t v10 = *(void *)(a4 + 16);
      int v11 = *(_DWORD *)(a4 + 8) + a3 * a2;
      if ((int)v10 >= v11)
      {
        uint64_t v12 = *(void *)(a4 + 16);
      }
      else
      {
        uint64_t v12 = *(void *)(a4 + 16);
        do
        {
          LODWORD(v12) = 2 * v12;
          if ((int)v12 <= 1024) {
            LODWORD(v12) = 1024;
          }
        }
        while ((int)v12 < v11);
      }
      if (v10 != (int)v12)
      {
        uint64_t v10 = (int)v12;
        uint64_t v13 = (*(uint64_t (**)(void, void))(a4 + 32))(**(void **)a4, (int)v12);
        if (v13)
        {
          **(void **)a4 = v13;
          *(void *)(a4 + 16) = v10;
        }
        else
        {
          uint64_t v10 = *(void *)(a4 + 16);
        }
      }
      uint64_t v14 = *(void *)(a4 + 24);
      uint64_t v15 = v10 - v14;
      uint64_t v16 = (int)v9;
      if ((int)v9 > v15)
      {
        uint64_t v7 = (int)(v15 / (int)a2);
        size_t v9 = v7 * a2;
        uint64_t v16 = (int)v7 * (int)a2;
      }
      memcpy((void *)(**(void **)a4 + v14), __src, v9);
      uint64_t v17 = *(void *)(a4 + 24) + v16;
      *(void *)(a4 + 24) = v17;
      if (v17 > *(void *)(a4 + 8)) {
        *(void *)(a4 + 8) = v17;
      }
      return v7;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void copyStorageToStorage(SsrwOOStorage *a1, SsrwOOStorage *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  Info = SsrwOOStorage::getInfo(a1);
  SsrwOOStgInfo::getCLSID(Info, &v28);
  SsrwOOStorage::setClass(a2, &v28);
  if (Info)
  {
    uint64_t v5 = TSURectWithOriginAndSize(Info);
    MEMORY[0x23EC997B0](v5, 0x1020C40285AA8CALL);
  }
  char v27 = 0;
  int v26 = 0;
  SsrwOOStorage::getChildrenInfo(a1, &v27, &v26);
  if (v26 >= 1)
  {
    uint64_t v6 = 0;
    for (uint64_t i = 0; i < v26; ++i)
    {
      BOOL v8 = (SsrwOOStgInfo *)((char *)v27 + v6);
      int Type = SsrwOOStgInfo::getType((SsrwOOStgInfo *)((char *)v27 + v6));
      if (Type == 1)
      {
        WcsName = (const unsigned __int16 *)SsrwOOStgInfo::getWcsName(v8);
        size_t v18 = (SsrwOOStorage *)SsrwOOStorage::openStorage(a1, WcsName);
        size_t v19 = (unsigned __int16 *)SsrwOOStgInfo::getWcsName(v8);
        Storage = (SsrwOOStorage *)SsrwOOStorage::createStorage(a2, v19);
        copyStorageToStorage(v18, Storage);
        SsrwOOStorage::close(v18, 0);
        if (v18)
        {
          SsrwOOStorage::~SsrwOOStorage(v18);
          MEMORY[0x23EC997B0]();
        }
        SsrwOOStorage::close(Storage, 0);
        if (Storage)
        {
          SsrwOOStorage::~SsrwOOStorage(Storage);
          MEMORY[0x23EC997B0]();
        }
      }
      else if (Type == 2)
      {
        uint64_t v10 = (const unsigned __int16 *)SsrwOOStgInfo::getWcsName(v8);
        int v11 = SsrwOOStorage::openStream(a1, v10);
        uint64_t v12 = (unsigned __int16 *)SsrwOOStgInfo::getWcsName(v8);
        uint64_t Stream = SsrwOOStorage::createStream(a2, v12);
        unsigned int Size = 0;
        unsigned int Size = SsrwOOStgInfo::getSize(v8);
        uint64_t v14 = malloc_type_malloc(Size, 0x3FCE536EuLL);
        if (v14)
        {
          uint64_t v15 = v14;
          (*(void (**)(SsrwOOStgStream *, void *, unsigned int *))(*(void *)v11 + 56))(v11, v14, &Size);
          (*(void (**)(SsrwOOStgStream *, void *, unsigned int *))(*(void *)Stream + 184))(Stream, v15, &Size);
          free(v15);
        }
        __n128 CLSID = SsrwOOStgInfo::getCLSID(v8, &v28);
        (*(void (**)(SsrwOOStgStream *, _SsrwOO_GUID *, __n128))(*(void *)Stream + 160))(Stream, &v28, CLSID);
        (*(void (**)(SsrwOOStgStream *, void))(*(void *)Stream + 152))(Stream, 0);
        (*(void (**)(SsrwOOStgStream *))(*(void *)Stream + 8))(Stream);
        (*(void (**)(SsrwOOStgStream *, void))(*(void *)v11 + 152))(v11, 0);
        (*(void (**)(SsrwOOStgStream *))(*(void *)v11 + 8))(v11);
      }
      v6 += 184;
    }
  }
  if (v27)
  {
    unsigned int v21 = (char *)v27 - 16;
    uint64_t v22 = *((void *)v27 - 1);
    if (v22)
    {
      uint64_t v23 = 184 * v22;
      unint64_t v24 = (char *)v27 - 184;
      do
      {
        TSURectWithOriginAndSize(&v24[v23]);
        v23 -= 184;
      }
      while (v23);
    }
    MEMORY[0x23EC99790](v21, 0x1020C80285AA8CALL);
  }
}

SsrwOOStgInfo *SsrwOOStorage::getInfo(SsrwOOStorage *this)
{
  uint64_t v6 = 0;
  getStorageInfo((uint64_t)this->var0, (uint64_t **)&v6);
  if (v1)
  {
    int v4 = v1;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v4;
  }
  uint64_t v2 = (SsrwOOStgInfo *)operator new(0xB8uLL);
  SsrwOOStgInfo::SsrwOOStgInfo(v2, v6);
  freeInfo((void **)&v6->var0, 1u);
  free(v6);
  return v2;
}

void sub_238B41634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v12 = v10;
  operator delete(v12);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    freeInfo(a10, 1u);
    free(a10);
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 5;
  }
  _Unwind_Resume(a1);
}

void getStorageInfo(uint64_t a1, uint64_t **a2)
{
  if (a1)
  {
    if (a2)
    {
      if (*(void *)a1)
      {
        uint64_t TOC = (uint64_t *)rootStorageGetTOC(*(void *)a1);
        uint64_t EntryAtIndex = tocGetEntryAtIndex(TOC, *(_DWORD *)(a1 + 8));
        if (EntryAtIndex)
        {
          uint64_t v6 = EntryAtIndex;
          uint64_t v7 = (uint64_t *)malloc_type_malloc(0x40uLL, 0x1010040657E6F79uLL);
          *a2 = v7;
          if (v7)
          {
            *((_OWORD *)v7 + 2) = 0u;
            *((_OWORD *)v7 + 3) = 0u;
            *(_OWORD *)uint64_t v7 = 0u;
            *((_OWORD *)v7 + 1) = 0u;
            BOOL v8 = *a2;
            directoryFillStgInfo(v6, v8);
          }
        }
      }
    }
  }
}

uint64_t SsrwOOStorage::setClass(SsrwOOStorage *this, _SsrwOO_GUID *a2)
{
  uint64_t result = (uint64_t)this->var0;
  if (result)
  {
    uint64_t result = storageSetClass(result, a2);
    if (result)
    {
      int v3 = result;
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = v3;
    }
  }
  return result;
}

uint64_t storageSetClass(uint64_t a1, _OWORD *a2)
{
  if (!a1 || (*(_DWORD *)(a1 + 32) - 1) > 1) {
    return 6;
  }
  uint64_t result = rootStorageSetDirty(*(void *)a1);
  if (!result)
  {
    uint64_t TOC = (uint64_t *)rootStorageGetTOC(*(void *)a1);
    uint64_t EntryAtIndex = tocGetEntryAtIndex(TOC, *(_DWORD *)(a1 + 8));
    return directorySetClass(EntryAtIndex, a2);
  }
  return result;
}

uint64_t rootStorageSetDirty(uint64_t a1)
{
  if (!a1) {
    return 6;
  }
  if ((*(_DWORD *)(a1 + 56) - 1) > 1) {
    return 2;
  }
  if (*(void *)(a1 + 104)) {
    return 0;
  }
  Xunsigned int FatSize = headerGetXFatSize(*(void *)(a1 + 16));
  uint64_t result = fatAddFreeSectors(*(void *)(a1 + 24), (void **)(a1 + 96), &XFatSize);
  if (!result)
  {
    uint64_t result = fatAddFatToFreeSectors(*(void *)(a1 + 24), *(void *)(a1 + 24));
    if (!result)
    {
      uint64_t v3 = *(void *)(a1 + 32);
      if (v3) {
        fatAddFatToFreeSectors(*(void *)(a1 + 24), v3);
      }
      uint64_t result = fatAddFreeSectors(*(void *)(a1 + 24), (void **)(a1 + 64), (unsigned int *)(a1 + 72));
      if (!result) {
        *(void *)(a1 + 104) = 1;
      }
    }
  }
  return result;
}

uint64_t directorySetClass(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)(a1 + 108) = *a2;
  return 0;
}

SsrwOOStgStream *SsrwOOStorage::createStream(SsrwOOStorage *this, unsigned __int16 *a2)
{
  uint64_t v7 = 0;
  int Stream = createStream((uint64_t)this->var0, a2, (uint64_t *)&v7);
  if (Stream)
  {
    int v5 = Stream;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v5;
  }
  uint64_t v3 = (SsrwOOStgStream *)operator new(0xC8uLL);
  SsrwOOStgStream::SsrwOOStgStream(v3, v7);
  return v3;
}

void sub_238B4196C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = v10;
  operator delete(v12);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    closeStream(&a10);
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 5;
  }
  _Unwind_Resume(a1);
}

uint64_t createStream(uint64_t a1, unsigned __int16 *a2, uint64_t *a3)
{
  *(void *)uint64_t v15 = 0;
  uint64_t v3 = 6;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (*a2)
        {
          if ((*(_DWORD *)(a1 + 32) - 1) <= 1)
          {
            *a3 = 0;
            uint64_t v3 = rootStorageSetDirty(*(void *)a1);
            if (!v3)
            {
              uint64_t TOC = (uint64_t *)rootStorageGetTOC(*(void *)a1);
              uint64_t v8 = tocAddEntry((uint64_t)TOC, (uint64_t *)v15);
              if (v8)
              {
                uint64_t v3 = v8;
              }
              else
              {
                uint64_t inited = directoryInitEntry(*(uint64_t *)v15, a2, 2, *(void *)a1);
                if (inited
                  || (uint64_t EntryAtIndex = tocGetEntryAtIndex(TOC, *(_DWORD *)(a1 + 8)),
                      uint64_t inited = tocInsertChild(TOC, EntryAtIndex, *(uint64_t *)v15),
                      inited))
                {
                  uint64_t v3 = inited;
                  unsigned int Index = directoryGetIndex(*(uint64_t *)v15);
                  tocInvalidateEntry((uint64_t)TOC, Index);
                  return v3;
                }
                uint64_t v3 = streamConstruct(*(void *)a1, a1, *(uint64_t *)v15, *(unsigned int *)(a1 + 32), a3);
                if (v3) {
                  return v3;
                }
                if (*(_DWORD *)(a1 + 32) == 2 && (uint64_t v13 = streamUpgradeMiniToRegular((uint64_t *)*a3), v13))
                {
                  uint64_t v3 = v13;
                }
                else
                {
                  uint64_t v3 = openListAppend(*(void *)(a1 + 24), 2, *a3);
                  if (!v3) {
                    return v3;
                  }
                }
                unsigned int v14 = directoryGetIndex(*(uint64_t *)v15);
                tocInvalidateEntry((uint64_t)TOC, v14);
              }
              streamDestroy((void **)a3);
            }
          }
        }
      }
    }
  }
  return v3;
}

uint64_t tocInsertChild(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return directoryInsertChild(a2, a3, *a1);
}

uint64_t directoryInsertChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(a1 + 100);
  if (v4 != -1)
  {
    while (1)
    {
      int v6 = v4;
      int v7 = compareNames((const unsigned __int16 *)(a3 + 168 * v4 + 16), (const unsigned __int16 *)(a2 + 16));
      if (v7 <= 0)
      {
        if ((v7 & 0x80000000) == 0) {
          return 2;
        }
        uint64_t v11 = a3 + 168 * v6;
        int v12 = *(_DWORD *)(v11 + 96);
        size_t v9 = (_DWORD *)(v11 + 96);
        int v4 = v12;
      }
      else
      {
        uint64_t v8 = a3 + 168 * v6;
        int v10 = *(_DWORD *)(v8 + 92);
        size_t v9 = (_DWORD *)(v8 + 92);
        int v4 = v10;
      }
      if (v4 == -1)
      {
        char v13 = 0;
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 168 * v6 + 12);
        *size_t v9 = *(_DWORD *)(a2 + 12);
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 12);
  char v13 = 1;
LABEL_9:
  uint64_t result = 0;
  *(unsigned char *)(a2 + 88) = v13;
  return result;
}

uint64_t SsrwOOStgStream::writeBytes(SsrwOOStgStream *this, uint64_t a2, unsigned int *a3)
{
  uint64_t result = streamWrite(*((void *)this + 24), a2, a3);
  if (result)
  {
    int v4 = result;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v4;
  }
  return result;
}

uint64_t streamWrite(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result = 6;
  if (!a1) {
    return result;
  }
  if (!a2) {
    return result;
  }
  if (!a3) {
    return result;
  }
  if ((*(_DWORD *)(a1 + 48) - 1) > 1) {
    return result;
  }
  int v7 = *(void **)(a1 + 56);
  if (*(void *)(a1 + 24) < *v7)
  {
    if (v7[3]) {
      return result;
    }
  }
  uint64_t result = rootStorageSetDirty(*(void *)a1);
  if (result) {
    return result;
  }
  unint64_t v8 = *(void *)(a1 + 24);
  if (v8 > **(void **)(a1 + 56))
  {
    uint64_t result = streamResize(a1, v8);
    if (result) {
      return result;
    }
  }
  uint64_t Header = rootStorageGetHeader(*(void *)a1);
  char SectorShift = headerGetSectorShift(Header);
  size_t v11 = (1 << SectorShift);
  unint64_t v12 = *(void *)(a1 + 24);
  int v13 = (v11 - 1) & v12;
  *(_DWORD *)(a1 + 40) = v13;
  unsigned int v14 = v11 - v13;
  unsigned int v15 = 0;
  if ((int)v11 - v13 >= *a3) {
    unsigned int v16 = *a3;
  }
  else {
    unsigned int v16 = v11 - v13;
  }
  if (!v16)
  {
LABEL_29:
    uint64_t result = 0;
    *a3 = v15;
    return result;
  }
  char v17 = SectorShift;
  while (1)
  {
    unint64_t v18 = v12 >> v17;
    if (*(_DWORD *)(a1 + 44) != (v12 >> v17))
    {
      uint64_t v19 = *(void *)(a1 + 56);
      if (*(_DWORD *)(v19 + 16) > v18) {
        break;
      }
    }
LABEL_19:
    *(_DWORD *)(a1 + 44) = v18;
    memcpy((void *)(*(void *)(a1 + 32) + *(unsigned int *)(a1 + 40)), (const void *)(a2 + v15), v16);
    unsigned int v21 = *(_DWORD *)(a1 + 40) + v16;
    *(_DWORD *)(a1 + 40) = v21;
    if (v21 == v11)
    {
      uint64_t result = streamFlushToDisk(a1);
      unsigned int v14 = v11;
      if (result)
      {
        *a3 = v15;
        unint64_t v24 = *(uint64_t **)(a1 + 56);
        uint64_t v25 = *v24;
        if ((unint64_t)*v24 <= *(void *)(a1 + 24)) {
          uint64_t v25 = *(void *)(a1 + 24);
        }
        *unint64_t v24 = v25;
        return result;
      }
    }
    else
    {
      v14 -= v16;
    }
    v15 += v16;
    unint64_t v12 = *(void *)(a1 + 24) + v16;
    *(void *)(a1 + 24) = v12;
    uint64_t v22 = *(unint64_t **)(a1 + 56);
    unint64_t v23 = *v22;
    if (*v22 <= v12) {
      unint64_t v23 = v12;
    }
    *uint64_t v22 = v23;
    if (v14 >= *a3 - v15) {
      unsigned int v16 = *a3 - v15;
    }
    else {
      unsigned int v16 = v14;
    }
    if (!v16) {
      goto LABEL_29;
    }
  }
  uint64_t Sector = (const void *)rootStorageReadSector(*(void *)a1, *(_DWORD *)(*(void *)(v19 + 8) + 4 * v18));
  if (Sector)
  {
    memcpy(*(void **)(a1 + 32), Sector, v11);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 24) & (v11 - 1);
    goto LABEL_19;
  }
  uint64_t v26 = *(void *)a1;
  return rootStorageGetStatus(v26);
}

uint64_t SsrwOOStgStream::setClass(SsrwOOStgStream *this, _SsrwOO_GUID *a2)
{
  uint64_t result = *((void *)this + 24);
  if (result)
  {
    uint64_t result = streamSetClass(result, a2);
    if (result)
    {
      int v3 = result;
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = v3;
    }
  }
  return result;
}

uint64_t streamSetClass(uint64_t a1, _OWORD *a2)
{
  if (!a1 || (*(_DWORD *)(a1 + 48) - 1) > 1) {
    return 6;
  }
  uint64_t result = rootStorageSetDirty(*(void *)a1);
  if (!result)
  {
    uint64_t TOC = (uint64_t *)rootStorageGetTOC(*(void *)a1);
    uint64_t EntryAtIndex = tocGetEntryAtIndex(TOC, *(_DWORD *)(a1 + 8));
    return directorySetClass(EntryAtIndex, a2);
  }
  return result;
}

uint64_t streamFlushToDisk(uint64_t a1)
{
  unsigned int v19 = 0;
  if (!a1) {
    return 6;
  }
  if (!*(_DWORD *)(a1 + 40)) {
    return 0;
  }
  uint64_t Header = rootStorageGetHeader(*(void *)a1);
  uint64_t v3 = *(void *)(a1 + 24) >> headerGetSectorShift(Header);
  uint64_t v4 = *(void *)(a1 + 56);
  if (*(_DWORD *)(v4 + 16) <= v3)
  {
    uint64_t result = rootStorageWriteSector(*(void *)a1, *(const void **)(a1 + 32), &v19, 0);
    if (result) {
      return result;
    }
    uint64_t TOC = (uint64_t *)rootStorageGetTOC(*(void *)a1);
    uint64_t EntryAtIndex = tocGetEntryAtIndex(TOC, *(_DWORD *)(a1 + 8));
    uint64_t Fat = rootStorageGetFat(*(void *)a1);
    uint64_t v9 = Fat;
    uint64_t v10 = *(void *)(a1 + 56);
    int v11 = *(_DWORD *)(v10 + 16);
    if (v11)
    {
      uint64_t result = fatUpdate(Fat, *(_DWORD *)(*(void *)(v10 + 8) + 4 * (v11 - 1)), v19);
      if (result) {
        return result;
      }
    }
    else
    {
      uint64_t result = directorySetStartSector(EntryAtIndex, v19);
      if (result) {
        return result;
      }
      uint64_t result = fatTerminateChain(v9, v19);
      if (result) {
        return result;
      }
    }
    unsigned int v12 = v19;
    uint64_t v13 = *(void *)(a1 + 56);
    int v14 = *(_DWORD *)(v13 + 20);
    if (v14 <= v3)
    {
      uint64_t v15 = 0xFFFFFFFFLL;
      if (v14 >= 0) {
        uint64_t v15 = (8 * v14);
      }
      if (v14) {
        size_t v16 = v15;
      }
      else {
        size_t v16 = 512;
      }
      char v17 = *(void **)(v13 + 8);
      if (v17) {
        unint64_t v18 = malloc_type_realloc(v17, v16, 0x36121049uLL);
      }
      else {
        unint64_t v18 = malloc_type_malloc(v16, 0xE1F9A27BuLL);
      }
      uint64_t v13 = *(void *)(a1 + 56);
      if (!v18)
      {
        free(*(void **)(v13 + 8));
        *(void *)(*(void *)(a1 + 56) + 8) = 0;
        return 5;
      }
      *(void *)(v13 + 8) = v18;
      *(_DWORD *)(v13 + 20) = v16 >> 2;
    }
    if (*(_DWORD *)(v13 + 16) <= v3) {
      *(_DWORD *)(v13 + 16) = v3 + 1;
    }
    *(_DWORD *)(*(void *)(v13 + 8) + 4 * v3) = v12;
    goto LABEL_5;
  }
  uint64_t result = rootStorageRewriteSector(*(void *)a1, *(unsigned char **)(a1 + 32), *(_DWORD *)(*(void *)(v4 + 8) + 4 * v3));
  if (!result)
  {
LABEL_5:
    uint64_t result = 0;
    *(void *)(a1 + 40) = 0xFFFFFFFF00000000;
  }
  return result;
}

uint64_t rootStorageWriteSector(uint64_t a1, const void *a2, _DWORD *a3, int a4)
{
  int v12 = 0;
  char SectorShift = headerGetSectorShift(*(void *)(a1 + 16));
  uint64_t result = fatNextFreeSector(*(void *)(a1 + 24), &v12, a4);
  if (!result)
  {
    int v10 = v12;
    if (v12 == *(_DWORD *)(a1 + 76))
    {
      memcpy(*(void **)(a1 + 80), a2, 1 << SectorShift);
      int v10 = v12;
    }
    unint64_t v11 = (unint64_t)(v10 + 1) << SectorShift;
    if (SsrwFseek(*(void *)a1) || SsrwFwrite((uint64_t)a2, 1 << SectorShift, 1, *(void *)a1) != 1)
    {
      return 4;
    }
    else
    {
      *a3 = v12;
      if (v11 < 0x7FFF0001) {
        return 0;
      }
      else {
        return headerEnsureV4(*(void *)(a1 + 16));
      }
    }
  }
  return result;
}

uint64_t fatNextFreeSector(uint64_t a1, _DWORD *a2, int a3)
{
  if (a1)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 40);
    if (v3 == -2)
    {
      *a2 = -1;
      LODWORD(v3) = *(_DWORD *)(a1 + 16);
    }
    else
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)(a1 + 8) + 4 * v3);
    }
    uint64_t result = 0;
    *a2 = v3;
    if (!a3 && v3 > 0xFF000000) {
      goto LABEL_10;
    }
  }
  else
  {
    *a2 = -1;
    if (!a3)
    {
LABEL_10:
      *a2 = -1;
      return 2;
    }
    return 6;
  }
  return result;
}

uint64_t directorySetStartSector(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 144) = a2;
  return 0;
}

uint64_t fatTerminateChain(uint64_t a1, unsigned int a2)
{
  return fatSetEntry(a1, a2, -2);
}

uint64_t fatSetEntry(uint64_t a1, unsigned int a2, int a3)
{
  if (!a1) {
    return 6;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4 || !rootStorageGetHeader(v4)) {
    return 6;
  }
  uint64_t result = fatEnsureMinSize(a1, a2 + 1);
  if (!result)
  {
    uint64_t v8 = *(void *)(a1 + 8);
    *(_DWORD *)(v8 + 4 * a2) = a3;
    uint64_t v9 = *(unsigned int *)(a1 + 16);
    if (v9 <= a2)
    {
      if (v9 < a2) {
        memset((void *)(v8 + 4 * v9), 255, 4 * (~v9 + a2) + 4);
      }
      uint64_t result = 0;
      *(_DWORD *)(a1 + 16) = a2 + 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t fatEnsureMinSize(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 20) >= a2) {
    return 0;
  }
  uint64_t Header = rootStorageGetHeader(*(void *)(a1 + 32));
  char SectorShift = headerGetSectorShift(Header);
  uint64_t v6 = (~(-1 << SectorShift) + 4 * a2) & (-1 << SectorShift);
  int v7 = malloc_type_realloc(*(void **)(a1 + 8), (~(-1 << SectorShift) + 4 * a2) & (-1 << SectorShift), 0x615D6492uLL);
  if (!v7) {
    return 5;
  }
  uint64_t v8 = v7;
  uint64_t result = 0;
  *(void *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 20) = v6 >> 2;
  *(_DWORD *)(a1 + 48) = v6;
  return result;
}

uint64_t streamResize(uint64_t a1, unint64_t a2)
{
  if (!a1) {
    return 6;
  }
  uint64_t v4 = streamFlushToDisk(a1);
  if (!v4)
  {
    if (**(void **)(a1 + 56) == a2) {
      return 0;
    }
    uint64_t v4 = rootStorageSetDirty(*(void *)a1);
    if (v4) {
      return v4;
    }
    uint64_t Header = rootStorageGetHeader(*(void *)a1);
    uint64_t TOC = (uint64_t *)rootStorageGetTOC(*(void *)a1);
    uint64_t EntryAtIndex = tocGetEntryAtIndex(TOC, *(_DWORD *)(a1 + 8));
    uint64_t Fat = rootStorageGetFat(*(void *)a1);
    char SectorShift = headerGetSectorShift(Header);
    size_t v10 = (1 << SectorShift);
    unsigned int v11 = calcReqdSectors(a2, v10);
    unsigned int v12 = v11;
    uint64_t v13 = *(void *)(a1 + 24);
    uint64_t v14 = *(void *)(a1 + 56);
    if (*(void *)v14 < a2)
    {
      bzero(*(void **)(a1 + 32), v10);
      uint64_t v15 = *(unsigned int *)(*(void *)(a1 + 56) + 16);
      if (v15 < v12)
      {
        uint64_t v16 = *(unsigned int *)(*(void *)(a1 + 56) + 16);
        while (1)
        {
          *(_DWORD *)(a1 + 40) = v10;
          *(void *)(a1 + 24) = v16 << SectorShift;
          uint64_t v17 = streamFlushToDisk(a1);
          if (v17) {
            break;
          }
          if (v12 == ++v16) {
            goto LABEL_23;
          }
        }
        uint64_t v4 = v17;
        if (v15) {
          fatTerminateChain(Fat, *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 4 * (v15 - 1)));
        }
        fatFreeChain(Fat, *(unsigned int *)(*(void *)(*(void *)(a1 + 56) + 8) + 4 * v15));
        *(_DWORD *)(*(void *)(a1 + 56) + 16) = v15;
        *(_DWORD *)(a1 + 40) = 0;
        goto LABEL_24;
      }
LABEL_23:
      uint64_t v4 = 0;
      uint64_t v19 = *(void *)(a1 + 56);
      *(_DWORD *)(v19 + 16) = v12;
      *(void *)uint64_t v19 = a2;
LABEL_24:
      *(void *)(a1 + 24) = v13;
      return v4;
    }
    if (v11 >= *(_DWORD *)(v14 + 16)) {
      goto LABEL_23;
    }
    uint64_t v18 = v11
        ? fatTerminateChain(Fat, *(_DWORD *)(*(void *)(v14 + 8) + 4 * (v11 - 1)))
        : directorySetStartSector(EntryAtIndex, -1);
    uint64_t v4 = v18;
    if (!v18)
    {
      uint64_t v4 = fatFreeChain(Fat, *(unsigned int *)(*(void *)(*(void *)(a1 + 56) + 8) + 4 * v12));
      if (!v4) {
        goto LABEL_23;
      }
    }
  }
  return v4;
}

uint64_t directorySetSize(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 152) = a2;
  return 0;
}

uint64_t directorySetCurrentCreationTime(uint64_t a1)
{
  return 0;
}

time_t SsrwTime(time_t *a1)
{
  time_t result = time(0);
  if (a1) {
    *a1 = result;
  }
  return result;
}

uint64_t directorySetCurrentModificationTime(uint64_t a1)
{
  return 0;
}

uint64_t rootStorageWriteMiniSector(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  unsigned int v21 = 0;
  char SectorShift = headerGetSectorShift(*(void *)(a1 + 16));
  char SmallSectorShift = headerGetSmallSectorShift(*(void *)(a1 + 16));
  uint64_t EntryAtIndex = tocGetEntryAtIndex(*(uint64_t **)(a1 + 40), 0);
  uint64_t StreamLength = directoryGetStreamLength(EntryAtIndex);
  uint64_t result = fatNextFreeSector(*(void *)(a1 + 32), &v23, 0);
  if (!result)
  {
    uint64_t v11 = (1 << SmallSectorShift);
    int v19 = 1 << (SectorShift - SmallSectorShift);
    int v12 = v23;
    uint64_t v13 = v23 >> (SectorShift - SmallSectorShift);
    char v20 = SectorShift;
    if ((unint64_t)v23 * (int)v11 >= ((StreamLength + ~(-1 << SectorShift)) & (unint64_t)(-1 << SectorShift)))
    {
      uint64_t result = fatNextFreeSector(*(void *)(a1 + 24), (_DWORD *)&v23 + 1, 0);
      if (result) {
        return result;
      }
      unsigned int v15 = *(_DWORD *)(a1 + 92);
      if (v15 == -1)
      {
        uint64_t result = directorySetStartSector(EntryAtIndex, SHIDWORD(v23));
        if (result) {
          return result;
        }
        uint64_t result = fatTerminateChain(*(void *)(a1 + 24), HIDWORD(v23));
        if (result) {
          return result;
        }
      }
      else
      {
        uint64_t result = fatUpdate(*(void *)(a1 + 24), v15, HIDWORD(v23));
        if (result) {
          return result;
        }
      }
      *(_DWORD *)(a1 + 92) = HIDWORD(v23);
      uint64_t result = directorySetSize(EntryAtIndex, (v13 << SectorShift) + v11);
      if (result) {
        return result;
      }
      int v14 = HIDWORD(v23);
    }
    else if (v12 == fatGetLength(*(void *)(a1 + 32)))
    {
      int v14 = *(_DWORD *)(a1 + 92);
      HIDWORD(v23) = v14;
      uint64_t result = directorySetSize(EntryAtIndex, ((unint64_t)((v23 & (v19 - 1)) + 1) << SmallSectorShift) + (v13 << v20));
      if (result) {
        return result;
      }
    }
    else
    {
      unsigned int v21 = -1;
      uint64_t v16 = *(void *)(a1 + 24);
      unsigned int StartSector = directoryGetStartSector(EntryAtIndex);
      uint64_t result = fatGetChain(v16, StartSector, &v21, &v22);
      if (result) {
        return result;
      }
      int v14 = *((_DWORD *)v22 + v13);
      HIDWORD(v23) = v14;
      free(v22);
    }
    unint64_t v18 = ((unint64_t)(v14 + 1) << v20) + ((v23 & (v19 - 1)) << SmallSectorShift);
    if (SsrwFseek(*(void *)a1) || SsrwFwrite(a2, v11, 1, *(void *)a1) != 1)
    {
      return 4;
    }
    else
    {
      *a3 = v23;
      if (v18 < 0x7FFF0001) {
        return 0;
      }
      else {
        return headerEnsureV4(*(void *)(a1 + 16));
      }
    }
  }
  return result;
}

uint64_t fatGetLength(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 16);
  }
  return result;
}

uint64_t fatUpdate(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result = fatSetEntry(a1, a2, a3);
  if (!result)
  {
    if (a3 > 0xFFFFFFFB) {
      return 0;
    }
    uint64_t result = fatSetEntry(a1, a3, -2);
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t fatFreeChain(uint64_t a1, uint64_t a2)
{
  if (a2 <= 0xFFFFFFFD) {
    fatOrderedMergeChain(a1, *(unsigned int *)(a1 + 40), a2, (_DWORD *)(a1 + 40));
  }
  return 0;
}

uint64_t fatOrderedMergeChain(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  if (a3 == -2)
  {
    LODWORD(v4) = a2;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 8);
    unsigned int v6 = -2;
    uint64_t v7 = a2;
    do
    {
      unsigned int v8 = v6;
      unsigned int v6 = a3;
      if (a3 >= v8) {
        int v9 = a2;
      }
      else {
        int v9 = v7;
      }
      if (a3 < v8 || v8 == -2) {
        unsigned int v11 = -2;
      }
      else {
        unsigned int v11 = v8;
      }
      if (v8 != -2) {
        LODWORD(a2) = v9;
      }
      for (; a3 > a2; LODWORD(a2) = *(_DWORD *)(v5 + 4 * a2))
        unsigned int v11 = a2;
      uint64_t v4 = a3;
      if (v11 != -2)
      {
        *(_DWORD *)(v5 + 4 * v11) = a3;
        uint64_t v4 = v7;
      }
      a3 = *(unsigned int *)(v5 + 4 * a3);
      *(_DWORD *)(v5 + 4 * v6) = a2;
      uint64_t v7 = v4;
    }
    while (a3 != -2);
  }
  *a4 = v4;
  return 0;
}

void *SsrwOOStorage::createStorage(SsrwOOStorage *this, unsigned __int16 *a2)
{
  uint64_t v6 = 0;
  int v2 = createStorage((uint64_t)this->var0, a2, &v6);
  if (v2)
  {
    int v4 = v2;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v4;
  }
  uint64_t result = operator new(0x50uLL);
  *uint64_t result = v6;
  return result;
}

uint64_t createStorage(uint64_t a1, unsigned __int16 *a2, uint64_t *a3)
{
  *(void *)unsigned int v15 = 0;
  uint64_t inited = 6;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (*a2)
        {
          if ((*(_DWORD *)(a1 + 32) - 1) <= 1)
          {
            uint64_t inited = rootStorageSetDirty(*(void *)a1);
            if (!inited)
            {
              uint64_t inited = storageConstruct(a3);
              if (!inited)
              {
                uint64_t v7 = *a3;
                *(void *)uint64_t v7 = *(void *)a1;
                *(void *)(v7 + 16) = a1;
                uint64_t TOC = (uint64_t *)rootStorageGetTOC(*(void *)a1);
                uint64_t inited = tocAddEntry((uint64_t)TOC, (uint64_t *)v15);
                if (inited)
                {
LABEL_15:
                  storageDestroy((uint64_t)a3);
                  return inited;
                }
                uint64_t inited = directoryInitEntry(*(uint64_t *)v15, a2, 1, *(void *)a1);
                uint64_t v9 = *(void *)v15;
                if (!inited)
                {
                  uint64_t v10 = directorySetCurrentCreationTime(*(uint64_t *)v15);
                  if (v10)
                  {
                    uint64_t inited = v10;
                  }
                  else
                  {
                    uint64_t EntryAtIndex = tocGetEntryAtIndex(TOC, *(_DWORD *)(a1 + 8));
                    uint64_t inited = tocInsertChild(TOC, EntryAtIndex, *(uint64_t *)v15);
                    unsigned int Index = directoryGetIndex(*(uint64_t *)v15);
                    unsigned int v11 = Index;
                    if (inited) {
                      goto LABEL_14;
                    }
                    *(_DWORD *)(v7 + 8) = Index;
                    *(_DWORD *)(v7 + 32) = *(_DWORD *)(a1 + 32);
                    uint64_t inited = openListAppend(*(void *)(a1 + 24), 1, *a3);
                    if (!inited) {
                      return inited;
                    }
                  }
                  uint64_t v9 = *(void *)v15;
                }
                unsigned int v11 = directoryGetIndex(v9);
LABEL_14:
                tocInvalidateEntry((uint64_t)TOC, v11);
                goto LABEL_15;
              }
            }
          }
        }
      }
    }
  }
  return inited;
}

SsrwOOStorage *SsrwOOStorage::close(SsrwOOStorage *this, char a2)
{
  if (this->var0)
  {
    uint64_t v3 = this;
    this = (SsrwOOStorage *)closeStorage((uint64_t)this);
    if ((a2 & 1) == 0)
    {
      if (this)
      {
        int v4 = (int)this;
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = v4;
      }
    }
    v3->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = 0;
  }
  return this;
}

uint64_t closeStorage(uint64_t a1)
{
  if (*(void *)(*(void *)a1 + 16)) {
    return closeStorageInternal(a1);
  }
  else {
    return 6;
  }
}

uint64_t SsrwOORootStorage::allocedSize(SsrwOORootStorage *this)
{
  return documentPropertiesGetAllocedSize(*((void *)this + 10));
}

uint64_t rootStorageAllocedSize(EshDataModelVisitor **a1)
{
  return EshDataModelVisitor::getClientVisitor(*a1);
}

uint64_t **SsrwOORootStorage::close(SsrwOORootStorage *this, char a2)
{
  uint64_t v4 = *((void *)this + 10);
  uint64_t result = (uint64_t **)((char *)this + 80);
  if (v4)
  {
    uint64_t result = (uint64_t **)closeStructuredStorage(result);
    if ((a2 & 1) == 0)
    {
      if (result)
      {
        int v6 = (int)result;
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = v6;
      }
    }
    *(void *)this = 0;
  }
  return result;
}

uint64_t tocWrite(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = 0;
  uint64_t Fat = rootStorageGetFat(a2);
  uint64_t Header = rootStorageGetHeader(a2);
  int SectorShift = headerGetSectorShift(Header);
  unsigned int v7 = 0;
  size_t v8 = (1 << SectorShift);
  unsigned int v9 = v8 >> 7;
  if (SectorShift != 9) {
    unsigned int v7 = (v9 + *(_DWORD *)(a1 + 8) - 1) / v9;
  }
  uint64_t v10 = headerSetNumDirSectors(Header, v7);
  if (v10) {
    return v10;
  }
  unsigned int v11 = malloc_type_malloc(v8, 0x1553D629uLL);
  if (!v11) {
    return 5;
  }
  int v12 = v11;
  bzero(v11, v8);
  if (!*(_DWORD *)(a1 + 8))
  {
LABEL_20:
    uint64_t v10 = 0;
    goto LABEL_23;
  }
  int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  unsigned int v16 = v9 - 1;
  while (1)
  {
    uint64_t v17 = directoryGetAtIndex(*(void *)a1, v15);
    directoryEntryWrite(v17, (uint64_t)v12, (int *)&v22 + 1);
    if (++v15 == *(_DWORD *)(a1 + 8) && (v15 & v16) != 0)
    {
      do
      {
        uint64_t v19 = directoryGetAtIndex(*(void *)a1, v15);
        directoryConstructEntry(v15, v19);
        directoryEntryWrite(v19, (uint64_t)v12, (int *)&v22 + 1);
        ++v15;
      }
      while ((v15 & v16) != 0);
    }
    if ((v15 & v16) != 0) {
      goto LABEL_19;
    }
    uint64_t v20 = rootStorageWriteSector(a2, v12, &v22, 1);
    if (v20) {
      break;
    }
    if (v13)
    {
      uint64_t v20 = fatUpdate(Fat, v14, v22);
      if (v20) {
        break;
      }
      goto LABEL_18;
    }
    headerSetDirectoryStartSector(Header, v22);
    uint64_t v20 = fatTerminateChain(Fat, v22);
    if (v20) {
      break;
    }
LABEL_18:
    unsigned int v14 = v22;
    HIDWORD(v22) = 0;
    int v13 = 1;
LABEL_19:
    if (v15 >= *(_DWORD *)(a1 + 8)) {
      goto LABEL_20;
    }
  }
  uint64_t v10 = v20;
LABEL_23:
  free(v12);
  return v10;
}

uint64_t headerSetNumDirSectors(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 40) = a2;
  return 0;
}

uint64_t directoryEntryWrite(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a2 + *a3;
  uint64_t v7 = a1 + 16;
  do
  {
    CsLeWriteUInt16(*(unsigned __int16 *)(v7 + v5), (_WORD *)(v6 + v5));
    v5 += 2;
  }
  while (v5 != 64);
  CsLeWriteUInt16(*(unsigned __int16 *)(a1 + 80), (_WORD *)(v6 + 64));
  *(unsigned char *)(v6 + 66) = *(_DWORD *)(a1 + 84);
  *(unsigned char *)(v6 + 67) = *(unsigned char *)(a1 + 88);
  CsLeWriteUInt32(*(unsigned int *)(a1 + 92), (_DWORD *)(v6 + 68));
  CsLeWriteUInt32(*(unsigned int *)(a1 + 96), (_DWORD *)(v6 + 72));
  CsLeWriteUInt32(*(unsigned int *)(a1 + 100), (_DWORD *)(v6 + 76));
  CsLeWriteUInt32(*(unsigned int *)(a1 + 108), (_DWORD *)(v6 + 80));
  CsLeWriteUInt16(*(unsigned __int16 *)(a1 + 112), (_WORD *)(v6 + 84));
  CsLeWriteUInt16(*(unsigned __int16 *)(a1 + 114), (_WORD *)(v6 + 86));
  *(void *)(v6 + 88) = *(void *)(a1 + 116);
  CsLeWriteUInt32(*(unsigned int *)(a1 + 104), (_DWORD *)(v6 + 96));
  leWriteTime(*(void *)(a1 + 128), (_DWORD *)(v6 + 100));
  leWriteTime(*(void *)(a1 + 136), (_DWORD *)(v6 + 108));
  CsLeWriteUInt32(*(unsigned int *)(a1 + 144), (_DWORD *)(v6 + 116));
  leWriteUInt64(*(void *)(a1 + 152), (void *)(v6 + 120));
  *a3 += 128;
  return 0;
}

uint64_t leWriteTime(int a1, _DWORD *a2)
{
  uint64_t v5 = 0;
  uint64_t result = WinFileTimeFromTime_t(a1, (unsigned int *)&v5);
  int v4 = HIDWORD(v5);
  *a2 = v5;
  a2[1] = v4;
  return result;
}

uint64_t WinFileTimeFromTime_t(int a1, unsigned int *a2)
{
  unsigned int v2 = 10000 * HIWORD(a1) + ((10000 * (unsigned __int16)a1) >> 16);
  unsigned int v3 = HIWORD(v2);
  unsigned int v4 = 1000 * (unsigned __int16)v2 + ((1000 * (unsigned __int16)(10000 * a1)) >> 16);
  unsigned int v5 = (unsigned __int16)(-27008 * a1) + 0x8000;
  unsigned int v6 = HIWORD(v5) + (unsigned __int16)v4 + 54590;
  *a2 = v5 & 0xFF80 | (v6 << 16);
  a2[1] = 1000 * v3 + HIWORD(v4) + HIWORD(v6) + 27111902;
  return 0;
}

uint64_t leWriteUInt64(uint64_t result, void *a2)
{
  *a2 = result;
  return result;
}

uint64_t headerSetDirectoryStartSector(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 48) = a2;
  }
  return result;
}

uint64_t fatTrimFreeSectorsAtEnd(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 40);
  if (v2 == -2)
  {
    unsigned int v3 = (_DWORD *)(a1 + 16);
    unsigned int v4 = *(_DWORD *)(a1 + 16);
    if (v4 == -1)
    {
      unsigned int v5 = -3;
      goto LABEL_13;
    }
  }
  else
  {
    unsigned int v5 = v2 - 1;
    unsigned int v6 = -2;
    do
    {
      unsigned int v7 = v2;
      unsigned int v2 = *(_DWORD *)(*(void *)(a1 + 8) + 4 * v2);
      if (v2 != -2 && v2 > v7 + 1)
      {
        unsigned int v6 = v7;
        unsigned int v5 = v2 - 1;
      }
    }
    while (v2 != -2);
    unsigned int v3 = (_DWORD *)(a1 + 16);
    unsigned int v4 = *(_DWORD *)(a1 + 16);
    if (v7 == v4 - 1 && v5 < v4 - 1)
    {
      if (v6 != -2)
      {
        *(_DWORD *)(*(void *)(a1 + 8) + 4 * v6) = -2;
        goto LABEL_15;
      }
LABEL_13:
      *(_DWORD *)(a1 + 40) = -2;
LABEL_15:
      unsigned int v4 = v5 + 1;
      *unsigned int v3 = v5 + 1;
    }
  }
  *a2 = v4;
  return 0;
}

uint64_t fatMarkFreeChain(uint64_t a1)
{
  if (!a1) {
    return 6;
  }
  unint64_t v1 = *(unsigned int *)(a1 + 40);
  if (v1 != -2)
  {
    do
    {
      if (v1 >= *(unsigned int *)(a1 + 16)) {
        break;
      }
      uint64_t v2 = *(void *)(a1 + 8);
      unint64_t v3 = *(unsigned int *)(v2 + 4 * v1);
      *(_DWORD *)(v2 + 4 * v1) = -1;
      unint64_t v1 = v3;
    }
    while (v3 != -2);
  }
  uint64_t v4 = 0;
  *(_DWORD *)(a1 + 40) = -2;
  return v4;
}

uint64_t fatWriteMiniFat(uint64_t a1)
{
  if (!a1) {
    return 6;
  }
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    return 6;
  }
  if (!*(_DWORD *)(a1 + 16)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return 6;
  }
  unint64_t v4 = *(unsigned int *)(a1 + 40);
  if (v4 != -2)
  {
    do
    {
      if (v4 >= *(unsigned int *)(a1 + 16)) {
        break;
      }
      unint64_t v5 = *(unsigned int *)(v3 + 4 * v4);
      *(_DWORD *)(v3 + 4 * v4) = -1;
      unint64_t v4 = v5;
    }
    while (v5 != -2);
  }
  *(_DWORD *)(a1 + 40) = -2;
  int v6 = *(_DWORD *)(rootStorageGetFat(v2) + 16);
  uint64_t Header = rootStorageGetHeader(*(void *)(a1 + 32));
  char SectorShift = headerGetSectorShift(Header);
  uint64_t v9 = *(unsigned int *)(a1 + 16);
  uint64_t result = fatWriteFat(a1, v6);
  if (result) {
    return result;
  }
  unint64_t v11 = ((unint64_t)~(-1 << SectorShift) + 4 * v9) >> SectorShift;
  if (v11 < 2)
  {
LABEL_13:
    uint64_t Fat = rootStorageGetFat(*(void *)(a1 + 32));
    uint64_t result = fatSetEntry(Fat, v6 + (int)v11 - 1, -2);
    if (result) {
      return result;
    }
    headerSetSmallFatStartSector(Header, v6);
    headerSetSmallFatSize(Header, v11);
    return 0;
  }
  int v12 = v11 - 1;
  unsigned int v13 = v6;
  while (1)
  {
    uint64_t v14 = rootStorageGetFat(*(void *)(a1 + 32));
    uint64_t result = fatUpdate(v14, v13, v13 + 1);
    if (result) {
      return result;
    }
    ++v13;
    if (!--v12) {
      goto LABEL_13;
    }
  }
}

uint64_t fatWriteFat(uint64_t a1, int a2)
{
  if (!*(_DWORD *)(a1 + 16)) {
    return 0;
  }
  uint64_t Header = rootStorageGetHeader(*(void *)(a1 + 32));
  unsigned int SectorShift = headerGetSectorShift(Header);
  size_t v6 = (1 << SectorShift);
  unsigned int v7 = malloc_type_malloc(v6, 0x71A3E856uLL);
  if (!v7) {
    return 5;
  }
  size_t v8 = v7;
  bzero(v7, v6);
  if (*(_DWORD *)(a1 + 16))
  {
    unsigned int v9 = 0;
    uint64_t v10 = v6 >> 2;
    if (v10 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v10;
    }
    while (1)
    {
      if (SectorShift >= 2)
      {
        uint64_t v12 = 0;
        unint64_t v13 = v9;
        v9 += v11;
        uint64_t v14 = v8;
        while (v13 < *(unsigned int *)(a1 + 16))
        {
          CsLeWriteUInt32(*(unsigned int *)(*(void *)(a1 + 8) + 4 * v13), v14);
          ++v12;
          ++v13;
          ++v14;
          if (v11 == v12) {
            goto LABEL_17;
          }
        }
        unsigned int v9 = v13;
      }
      else
      {
        LODWORD(v12) = 0;
      }
      if (v12 < v10)
      {
        unsigned int v15 = &v8[4 * v12];
        uint64_t v16 = v10 - v12;
        do
        {
          CsLeWriteUInt32(0xFFFFFFFFLL, v15++);
          --v16;
        }
        while (v16);
      }
LABEL_17:
      uint64_t v17 = rootStorageRewriteSector(*(void *)(a1 + 32), v8, a2);
      if (v17) {
        break;
      }
      ++a2;
      if (v9 >= *(_DWORD *)(a1 + 16)) {
        goto LABEL_19;
      }
    }
    uint64_t v18 = v17;
  }
  else
  {
LABEL_19:
    uint64_t v18 = 0;
  }
  free(v8);
  return v18;
}

uint64_t rootStorageRewriteSector(uint64_t a1, unsigned char *a2, int a3)
{
  if (*(_DWORD *)(a1 + 76) == a3) {
    **(unsigned char **)(a1 + 80) = *a2;
  }
  char SectorShift = headerGetSectorShift(*(void *)(a1 + 16));
  unint64_t v7 = (unint64_t)(a3 + 1) << SectorShift;
  SsrwFseek(*(void *)a1);
  if (SsrwFtell(*(void *)a1) != v7 || SsrwFwrite((uint64_t)a2, 1 << SectorShift, 1, *(void *)a1) != 1) {
    return 4;
  }
  *(_DWORD *)(a1 + 76) = -1;
  if (v7 < 0x7FFF0001) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  return headerEnsureV4(v8);
}

uint64_t headerSetSmallFatStartSector(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 60) = a2;
  }
  return result;
}

uint64_t fatWriteFatAndXFat(uint64_t a1)
{
  if (!a1) {
    return 6;
  }
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    return 6;
  }
  if (!*(_DWORD *)(a1 + 16)) {
    return 0;
  }
  if (!*(void *)(a1 + 8)) {
    return 6;
  }
  uint64_t Header = rootStorageGetHeader(v2);
  char SectorShift = headerGetSectorShift(Header);
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  uint64_t v6 = ((1 << SectorShift) - 1);
  unint64_t v7 = (unint64_t)(v6 + 4 * v5) >> SectorShift;
  unint64_t v8 = ((1 << SectorShift) - 4);
  uint64_t v9 = ((1 << SectorShift) - 5);
  if (v7) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = v8 > v9;
  }
  if (v10) {
    goto LABEL_41;
  }
  int v11 = 0;
  LODWORD(v12) = 0;
  unsigned int v13 = v9 / v8;
  do
  {
    int v14 = v12;
    int v15 = v11;
    int v16 = v7;
    unsigned int v17 = v13;
    int v18 = v5;
    unint64_t v12 = (v7 + v12);
    v11 += v13;
    LODWORD(v5) = v13 + v7 + v5;
    LODWORD(v7) = ((v6 + 4 * (unint64_t)v5) >> SectorShift) - v12;
    if (v12 <= 0x6D) {
      int v19 = 109;
    }
    else {
      int v19 = v12;
    }
    unsigned int v13 = (v9 + 4 * (unint64_t)(v19 - 109)) / v8 - v11;
  }
  while (v7 | v13);
  *(_DWORD *)(a1 + 16) = v5;
  if (!v12)
  {
LABEL_41:
    *(void *)a1 = 0;
    return 5;
  }
  unsigned int v41 = (1 << SectorShift) >> 2;
  size_t size = (1 << SectorShift);
  uint64_t v20 = malloc_type_malloc(4 * v12, 0xBF89B1ADuLL);
  *(void *)a1 = v20;
  if (!v20) {
    return 5;
  }
  uint64_t v43 = Header;
  bzero(v20, 4 * v12);
  if (v11)
  {
    unsigned int v21 = v17 + v15;
    unsigned int v22 = v16 + v18 + v17 - 1;
    while (1)
    {
      uint64_t v23 = fatSetEntry(a1, v22, -4);
      if (v23) {
        break;
      }
      --v22;
      if (!--v21) {
        goto LABEL_20;
      }
    }
  }
  else
  {
LABEL_20:
    uint64_t v24 = 0;
    if (v12 <= 1) {
      uint64_t v25 = 1;
    }
    else {
      uint64_t v25 = v12;
    }
    int v26 = v18 - (v15 + v14);
    while (1)
    {
      *(_DWORD *)(*(void *)a1 + 4 * v24) = v26 + v24;
      uint64_t v23 = fatSetEntry(a1, v26 + (int)v24, -3);
      if (v23) {
        break;
      }
      if (v25 == ++v24)
      {
        *(_DWORD *)(a1 + 24) = v12;
        int v27 = v5 - v11;
        uint64_t v28 = fatWriteFat(a1, (int)v5 - v11 - (int)v12);
        uint64_t v29 = v43;
        if (v28) {
          return v28;
        }
        unsigned int v30 = malloc_type_malloc(size, 0x71A2FAFBuLL);
        if (!v30) {
          return 5;
        }
        int v31 = v30;
        bzero(v30, size);
        if (v12 < 0x6E)
        {
LABEL_37:
          free(v31);
          headerSetFatSize(v29, v12);
          headerSetXFatSize(v29, v11);
          if (v11) {
            int v38 = v27;
          }
          else {
            int v38 = -1;
          }
          headerSetXFatStartSector(v29, v38);
          return 0;
        }
        int v32 = 0;
        unint64_t v33 = v41 - 1;
        unsigned int v34 = 109;
        int v40 = v27;
        while (1)
        {
          if (v41 != 1)
          {
            uint64_t v35 = v31;
            unint64_t v36 = 0;
            do
            {
              CsLeWriteUInt32(*(unsigned int *)(*(void *)a1 + 4 * v34 + 4 * v36++), v35);
              if (v36 >= v33) {
                break;
              }
              ++v35;
            }
            while (v36 + v34 < v12);
            v34 += v36;
            uint64_t v29 = v43;
            int v27 = v40;
          }
          CsLeWriteUInt32((v32 + v27 + 1), &v31[4 * v33]);
          uint64_t v37 = rootStorageRewriteSector(*(void *)(a1 + 32), v31, v32 + v27);
          if (v37) {
            break;
          }
          ++v32;
          if (v34 >= v12) {
            goto LABEL_37;
          }
        }
        uint64_t v28 = v37;
        free(v31);
        return v28;
      }
    }
  }
  return v23;
}

uint64_t headerSetFatSize(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 44) = a2;
  }
  return result;
}

uint64_t headerSetXFatSize(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 72) = a2;
  }
  return result;
}

uint64_t headerSetXFatStartSector(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 68) = a2;
  }
  return result;
}

uint64_t fatGetFatSectors(uint64_t a1, void *a2, _DWORD *a3)
{
  if (a2) {
    *a2 = *(void *)a1;
  }
  if (a3) {
    *a3 = *(_DWORD *)(a1 + 24);
  }
  return 0;
}

uint64_t headerWriteFatSectors(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 >= 0x6D) {
    int v3 = 109;
  }
  else {
    int v3 = a3;
  }
  if (!v3) {
    return 0;
  }
  size_t v7 = (4 * v3);
  unint64_t v8 = (char *)malloc_type_malloc(v7, 0xBF89B1ADuLL);
  if (!v8) {
    return 5;
  }
  uint64_t v9 = v8;
  bzero(v8, v7);
  uint64_t v10 = 0;
  int v11 = a3;
  if (a3 >= 0x6DuLL) {
    int v11 = 109;
  }
  int v12 = 4 * v11;
  do
  {
    CsLeWriteUInt32(*(unsigned int *)(a2 + v10), &v9[v10]);
    v10 += 4;
  }
  while (v12 != v10);
  if (SsrwFseek(a1))
  {
    free(v9);
    return 4;
  }
  else
  {
    BOOL v14 = SsrwFwrite((uint64_t)v9, v7, 1, a1) != 1;
    free(v9);
    return (4 * v14);
  }
}

uint64_t headerWriteSectorFiller(uint64_t a1, uint64_t a2)
{
  int v9 = -1;
  int v10 = 0;
  unsigned int v3 = *(_DWORD *)(a1 + 44);
  if (v3 <= 0x6D) {
    unsigned int v4 = 4 * v3 + 76;
  }
  else {
    unsigned int v4 = 512;
  }
  unsigned int v5 = *(unsigned __int16 *)(a1 + 30);
  if ((1 << v5) >= 0x200) {
    unsigned int v6 = 512;
  }
  else {
    unsigned int v6 = 1 << v5;
  }
  while (v4 < v6)
  {
    uint64_t v7 = 4;
    if (SsrwFwrite((uint64_t)&v9, 4, 1, a2) != 1) {
      return v7;
    }
    v4 += 4;
  }
  if (v5 < 0xA) {
    return 0;
  }
  while (1)
  {
    uint64_t v7 = 4;
    if (SsrwFwrite((uint64_t)&v10, 4, 1, a2) != 1) {
      break;
    }
    v6 += 4;
    if (v6 >= 1 << v5) {
      return 0;
    }
  }
  return v7;
}

uint64_t SsrwFtruncate(uint64_t a1)
{
  if (a1 && (unint64_t v1 = *(uint64_t (**)(void))(a1 + 88)) != 0) {
    return v1();
  }
  else {
    return 0;
  }
}

uint64_t SsrwMemFtruncate(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  return 0;
}

void sub_238B43CF8(void *exc_buf, int a2)
{
  if (a2 == 4)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x238B43C98);
  }

  JUMPOUT(0x238B43D7CLL);
}

void sub_238B43D64(void *a1, int a2)
{
  if (a2 == 3)
  {
    unsigned int v3 = (unsigned int *)__cxa_begin_catch(a1);
    OCConvertCsException(v3);
    __cxa_end_catch();
  }
  else
  {
    unsigned int v4 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      [v4 raise];
    }
    else {
      +[TCMessageException raise:TCUnknownProblemMessage];
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x238B43C9CLL);
}

void sub_238B43D74()
{
}

void sub_238B43D8C(uint64_t a1, ...)
{
  va_start(va, a1);
  SsrwOORootStorage::~SsrwOORootStorage((SsrwOORootStorage *)va);
  JUMPOUT(0x238B43D9CLL);
}

void sub_238B43DF8(void *exc_buf, int a2)
{
  if (a2 == 4)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x238B43C9CLL);
  }

  JUMPOUT(0x238B43D7CLL);
}

uint64_t rootStorageGetStatus(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 88);
  }
  return result;
}

uint64_t OCConvertCsException(unsigned int *a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = &TCInvalidFileFormatMessage;
  if ((int)*a1 > 1003)
  {
    if (v1 - 1004 < 2 || v1 == 8004) {
      goto LABEL_16;
    }
    if (v1 == 1011)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = *a1;
    }
  }
  else
  {
    if (v1 <= 0x11)
    {
      if (((1 << v1) & 0x1EF40) != 0) {
        goto LABEL_16;
      }
      if (((1 << v1) & 0x20008) != 0)
      {
        +[TCMessageContext setIsFileStructuredStorage:0];
        uint64_t v2 = &TCInvalidFileFormatMessage;
        goto LABEL_16;
      }
      if (v1 == 5) {
        goto LABEL_14;
      }
    }
    if (v1 == 1001)
    {
LABEL_14:
      uint64_t v2 = &TCOutOfMemoryMessage;
      goto LABEL_16;
    }
  }
  uint64_t v2 = &TCUnknownProblemMessage;
LABEL_16:
  uint64_t v6 = *v2;
  return +[TCMessageException raise:v6];
}

BOOL WrdParagraphProperties::deleteTabStopFromTabsToBeAdded(WrdParagraphProperties *this, int a2, int a3)
{
  if (*((__int16 *)this + 68) < 1) {
    return 0;
  }
  unint64_t v4 = *((unsigned __int16 *)this + 68);
  unsigned int v5 = (__int16 *)*((void *)this + 25);
  int v6 = a3 + a2;
  int v7 = *v5;
  unint64_t v8 = 0;
  if (a2 - a3 > v7 || v6 < v7)
  {
    while (v4 - 1 != v8)
    {
      int v10 = v5[++v8];
      if (a2 - a3 <= v10 && v6 >= v10)
      {
        BOOL v12 = v8 < v4;
        goto LABEL_14;
      }
    }
    return 0;
  }
  BOOL v12 = 1;
LABEL_14:
  __int16 v13 = v4 - 1;
  *((_WORD *)this + 68) = v13;
  if (v13 > (__int16)v8)
  {
    do
    {
      BOOL v14 = (_WORD *)(*((void *)this + 25) + 2 * v8);
      int v15 = (uint64_t *)(*((void *)this + 22) + 8 * v8++);
      _WORD *v14 = v14[1];
      WrdTabDescriptor::operator=(*v15, v15[1]);
    }
    while ((uint64_t)v8 < *((__int16 *)this + 68));
    unsigned int v5 = (__int16 *)*((void *)this + 25);
  }
  v5[(unsigned __int16)v8] = 0;
  *((void *)this + 2) |= 0x100uLL;
  return v12;
}

uint64_t WrdParagraphProperties::findInsertionIndexForTabsToBeDeleted(WrdParagraphProperties *this, int a2)
{
  int v2 = *((__int16 *)this + 69);
  if (v2 <= 63)
  {
    if ((__int16)v2 < 1)
    {
      LOWORD(v3) = 0;
    }
    else
    {
      uint64_t v3 = 0;
      while (*(__int16 *)(*((void *)this + 26) + 2 * v3) <= a2)
      {
        if ((__int16)++v3 >= *((__int16 *)this + 69))
        {
          LOWORD(v3) = *((_WORD *)this + 69);
          return (__int16)v3;
        }
      }
    }
  }
  else
  {
    LOWORD(v3) = -1;
  }
  return (__int16)v3;
}

WrdParagraphProperties *WrdParagraphProperties::insertTabStopInTabsToBeDeleted(WrdParagraphProperties *this, int a2, __int16 a3, __int16 a4)
{
  int v4 = *((__int16 *)this + 69);
  if (v4 < a2 || v4 >= 64)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  if (v4 > a2)
  {
    LOWORD(v4) = v4 - 1;
    uint64_t v5 = *((void *)this + 26);
    uint64_t v6 = *((void *)this + 27);
    do
    {
      uint64_t v7 = 2 * (__int16)v4 + 2;
      *(_WORD *)(v5 + v7) = *(_WORD *)(v5 + 2 * (__int16)v4);
      *(_WORD *)(v6 + v7) = *(_WORD *)(v6 + 2 * (__int16)v4);
      int v4 = (__int16)(v4 - 1);
    }
    while (v4 >= a2);
  }
  uint64_t v8 = *((void *)this + 27);
  *(_WORD *)(*((void *)this + 26) + 2 * a2) = a3;
  *(_WORD *)(v8 + 2 * a2) = a4;
  ++*((_WORD *)this + 69);
  *((void *)this + 2) |= 0x100uLL;
  return this;
}

void sub_238B44320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WrdParagraphProperties::getLineSpaceReference(WrdParagraphProperties *this)
{
  *((void *)this + 2) |= 0x20000uLL;
  return *((void *)this + 5);
}

WrdParagraphProperties *WrdParagraphProperties::setParagraphInTable(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 2uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFFFFFE | a2 & 1;
  return this;
}

void *WrdParagraphTextRun::clone(WrdParagraphTextRun *this)
{
  uint64_t v2 = (*(uint64_t (**)(WrdParagraphProperties *))(*(void *)this->var4 + 24))(this->var4);
  uint64_t v3 = (*(uint64_t (**)(WrdParagraphProperties *))(*(void *)this->var5 + 24))(this->var5);
  uint64_t v4 = (*(uint64_t (**)(WrdTableProperties *))(*(void *)this->var6 + 24))(this->var6);
  uint64_t v5 = (*(uint64_t (**)(WrdTableProperties *))(*(void *)this->var7 + 24))(this->var7);
  uint64_t v6 = operator new(0x38uLL);
  WrdTextRun::WrdTextRun((uint64_t)v6, this->var1, this->var2);
  void *v6 = &unk_26EBE67A0;
  v6[3] = v2;
  v6[4] = v3;
  v6[5] = v4;
  v6[6] = v5;
  WrdParagraphTextRun::operator=((uint64_t)v6, (uint64_t)this);
  return v6;
}

void sub_238B444A4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_238B4455C()
{
  if (v0) {
    JUMPOUT(0x238B44564);
  }
  JUMPOUT(0x238B444F4);
}

void sub_238B44594()
{
  if (v0) {
    JUMPOUT(0x238B4459CLL);
  }
  JUMPOUT(0x238B444F8);
}

void sub_238B445CC()
{
  if (!v0) {
    JUMPOUT(0x238B44524);
  }
  JUMPOUT(0x238B444FCLL);
}

uint64_t WrdParagraphTextRun::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  WrdParagraphProperties::operator=(*(void *)(a1 + 24), *(void *)(a2 + 24));
  WrdParagraphProperties::operator=(*(void *)(a1 + 32), *(void *)(a2 + 32));
  WrdTableProperties::operator=(*(void *)(a1 + 40), *(void *)(a2 + 40));
  WrdTableProperties::operator=(*(void *)(a1 + 48), *(void *)(a2 + 48));
  return a1;
}

WrdParagraphProperties *WrdParagraphProperties::setTableTrailerParagraph(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 4uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFFFFFD | (2 * (a2 & 1));
  return this;
}

void WrdTapParser::applySprm(WrdBaseParser *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned __int16 *a5, _WORD *a6)
{
  if (*(_DWORD *)a3 != 5)
  {
    exception = __cxa_allocate_exception(4uLL);
    int v238 = 2002;
    goto LABEL_524;
  }
  uint64_t v7 = a4;
  if (a4 >= (unsigned __int8 *)a5
    || (unsigned int SizeOfSPRMParameter = (WrdTapParser *)WrdProperty::getSizeOfSPRMParameter(a3),
        *a6 = (_WORD)SizeOfSPRMParameter,
        SizeOfSPRMParameter)
    && SizeOfSPRMParameter != 0xFFFF
    && (!v7 || (char *)a5 - (char *)v7 < (unint64_t)SizeOfSPRMParameter))
  {
LABEL_523:
    exception = __cxa_allocate_exception(4uLL);
    int v238 = 1004;
LABEL_524:
    _DWORD *exception = v238;
  }
  unsigned __int16 v241 = 0;
  unsigned int v13 = *(unsigned __int16 *)(a3 + 8);
  if (v13 <= 0xD604)
  {
    if (*(unsigned __int16 *)(a3 + 8) > 0x5663u)
    {
      if (*(unsigned __int16 *)(a3 + 8) <= 0x9406u)
      {
        if (*(unsigned __int16 *)(a3 + 8) <= 0x7478u)
        {
          if (v13 == 22116)
          {
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
            {
              char v39 = CsLeReadUInt16((unsigned __int16 *)v7) != 0;
              WrdTableProperties::setRightToLeft((WrdTableProperties *)a2, v39);
              return;
            }
            v239 = "applySprm with bad TFBiDi data size\n";
            int v240 = 346;
          }
          else
          {
            if (v13 != 29706)
            {
              if (v13 == 29708)
              {
                uint64_t v28 = "Unimplemented sprm code 0x740C\n";
                int v29 = 375;
LABEL_453:
                ChLogFunction(v28, 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdTapParser.cpp", v29);
              }
              return;
            }
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 3)
            {
              TableAutoformatLookSpecifierReference = (WrdTapParser *)WrdTableProperties::getTableAutoformatLookSpecifierReference((WrdTableProperties *)a2);
              WrdTapParser::parseTableAutoformatLookSpecifier(TableAutoformatLookSpecifierReference, TableAutoformatLookSpecifierReference, v7);
              return;
            }
            v239 = "applySprm with bad TTlp data size\n";
            int v240 = 650;
          }
        }
        else
        {
          switch(*(_WORD *)(a3 + 8))
          {
            case 0x7621:
              if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 3)
              {
                signed int v21 = *v7;
                int v22 = v7[1];
                int SInt16 = CsLeReadSInt16((__int16 *)v7 + 1);
                WrdTableProperties::insertCells((WrdTableProperties *)a2, v21, v22, SInt16);
                return;
              }
              v239 = "applySprm with bad TInsert data size\n";
              int v240 = 381;
              goto LABEL_522;
            case 0x7622:
            case 0x7624:
            case 0x7625:
            case 0x7626:
              return;
            case 0x7623:
              if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 3)
              {
                unsigned int v201 = *v7;
                unsigned int v202 = v7[1];
                if (*(__int16 *)(a2 + 344) < (int)v202) {
                  WrdTableProperties::setNumberOfCellsForRow((WrdTableProperties *)a2, v7[1]);
                }
                __int16 v203 = CsLeReadSInt16((__int16 *)v7 + 1);
                __int16 PositionOfCell = WrdTableProperties::getPositionOfCell((WrdTableProperties *)a2, v202);
                __int16 v205 = WrdTableProperties::getPositionOfCell((WrdTableProperties *)a2, v201);
                if (v201 < v202)
                {
                  unsigned int v206 = v201;
                  do
                  {
                    unsigned int v207 = v206 + 1;
                    unsigned int v208 = v206;
                    __int16 v209 = WrdTableProperties::getPositionOfCell((WrdTableProperties *)a2, v206);
                    WrdTableProperties::setPositionOfCell((WrdTableProperties *)a2, v207, v209 + v203);
                    TableCellDescriptorReference = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v208);
                    WrdTableCellDescriptor::setWidth(TableCellDescriptorReference, v203);
                    uint64_t v211 = WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v208);
                    WrdTableCellDescriptor::setWidthUnit(v211, 3);
                    unsigned int v206 = v207;
                  }
                  while (v207 < v202);
                }
                unsigned int v212 = v202 + 1;
                if (*(__int16 *)(a2 + 344) >= (int)(v202 + 1))
                {
                  __int16 v213 = v203 * (v202 - v201) - PositionOfCell + v205;
                  do
                  {
                    __int16 v214 = WrdTableProperties::getPositionOfCell((WrdTableProperties *)a2, v212);
                    WrdTableProperties::setPositionOfCell((WrdTableProperties *)a2, v212++, v213 + v214);
                  }
                  while (*(__int16 *)(a2 + 344) >= (int)v212);
                }
                return;
              }
              v239 = "applySprm with bad TDxaCol data size\n";
              int v240 = 271;
              goto LABEL_522;
            case 0x7627:
              if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
              {
                unsigned int v215 = *v7;
                unsigned int v216 = v7[1];
                v156 = (WrdShading *)operator new(0x28uLL);
                WrdShading::WrdShading(v156);
                WrdBaseParser::parseSHD80(a1, v156, (unsigned __int16 *)v7 + 1, a5);
                if (v215 < v216)
                {
                  do
                  {
                    v217 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v215);
                    uint64_t ShadingReference = WrdTableCellDescriptor::getShadingReference(v217);
                    v157.n128_f64[0] = WrdShading::operator=(ShadingReference, (uint64_t)v156);
                    ++v215;
                  }
                  while (v216 > v215);
                }
                goto LABEL_443;
              }
              v239 = "applySprm with bad TSetShd80 data size\n";
              int v240 = 485;
              goto LABEL_522;
            case 0x7628:
              if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
              {
                int v219 = *v7;
                unsigned int v220 = v7[1];
                v156 = (WrdShading *)operator new(0x28uLL);
                WrdShading::WrdShading(v156);
                WrdBaseParser::parseSHD80(a1, v156, (unsigned __int16 *)v7 + 1, a5);
                unsigned __int8 v221 = v219 | 1;
                if ((v219 | 1u) < v220)
                {
                  do
                  {
                    if ((*(_DWORD *)(WrdTableProperties::getTableCellDescriptor((WrdTableProperties *)a2, v221) + 8) & 1) == 0)
                    {
                      v222 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v221);
                      uint64_t v223 = WrdTableCellDescriptor::getShadingReference(v222);
                      v157.n128_f64[0] = WrdShading::operator=(v223, (uint64_t)v156);
                    }
                    v221 += 2;
                  }
                  while (v220 > v221);
                }
                goto LABEL_443;
              }
              v239 = "applySprm with bad TSetShdOdd80 data size\n";
              int v240 = 501;
              goto LABEL_522;
            case 0x7629:
              if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 3)
              {
                unsigned int v225 = *v7;
                unsigned int v226 = v7[1];
                unsigned int UInt16 = CsLeReadUInt16((unsigned __int16 *)v7 + 1);
                if (v225 < v226)
                {
                  char v228 = UInt16 & 1;
                  int v229 = (UInt16 >> 4) & 1;
                  int v230 = (UInt16 >> 8) & 1;
                  do
                  {
                    v231 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v225);
                    WrdTableCellDescriptor::setVerticalTextFlow(v231, v228);
                    v232 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v225);
                    WrdTableCellDescriptor::setBottomToTopTextFlow(v232, v229);
                    v233 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v225);
                    WrdTableCellDescriptor::setRotateFont(v233, v230);
                    ++v225;
                  }
                  while (v226 > v225);
                }
                return;
              }
              v239 = "applySprm with bad TTextFlow data size\n";
              int v240 = 631;
              goto LABEL_522;
            default:
              if (v13 != 29817) {
                return;
              }
              if (v7)
              {
                __int16 v200 = *v7;
                WrdTableProperties::setTableRevisionSaveID((WrdTableProperties *)a2, v200);
                return;
              }
              v239 = "applySprm with bad 0x7479 data size\n";
              int v240 = 1114;
              break;
          }
        }
      }
      else if (*(unsigned __int16 *)(a3 + 8) > 0x941Du)
      {
        if (*(unsigned __int16 *)(a3 + 8) <= 0x9600u)
        {
          if (v13 == 37918)
          {
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
            {
              int v89 = CsLeReadUInt16((unsigned __int16 *)v7);
              WrdTableProperties::setRightDistanceFromText((WrdTableProperties *)a2, v89);
              return;
            }
            v239 = "applySprm with bad TDxaFromTextRight data size\n";
            int v240 = 869;
          }
          else
          {
            if (v13 != 37919) {
              return;
            }
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
            {
              int v37 = CsLeReadUInt16((unsigned __int16 *)v7);
              WrdTableProperties::setBottomDistanceFromText((WrdTableProperties *)a2, v37);
              return;
            }
            v239 = "applySprm with bad TDyaFromTextBottom data size\n";
            int v240 = 893;
          }
        }
        else if (v13 == 38401)
        {
          if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
          {
            __int16 v79 = CsLeReadUInt16((unsigned __int16 *)v7);
            __int16 v80 = WrdTableProperties::getPositionOfCell((WrdTableProperties *)a2, 0);
            if (*(__int16 *)(a2 + 344) >= 1)
            {
              int v81 = 0;
              __int16 v82 = v79 - v80 - *(_WORD *)(a2 + 296);
              do
              {
                __int16 v83 = WrdTableProperties::getPositionOfCell((WrdTableProperties *)a2, v81);
                WrdTableProperties::setPositionOfCell((WrdTableProperties *)a2, v81++, v82 + v83);
              }
              while (*(__int16 *)(a2 + 344) > (int)v81);
            }
            return;
          }
          v239 = "applySprm with bad TDxaLeft data size\n";
          int v240 = 321;
        }
        else
        {
          if (v13 != 38402)
          {
            if (v13 == 54399)
            {
              TopBorderReference = (WrdBorder *)WrdTableProperties::getTopBorderReference((WrdTableProperties *)a2);
LABEL_393:
              WrdBaseParser::parseBuffer(a1, TopBorderReference, v7, (const unsigned __int8 *)a5);
            }
            return;
          }
          if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
          {
            int v84 = CsLeReadUInt16((unsigned __int16 *)v7);
            __int16 v85 = WrdTableProperties::getPositionOfCell((WrdTableProperties *)a2, 0);
            WrdTableProperties::setPositionOfCell((WrdTableProperties *)a2, 0, v85 - v84 + *(_WORD *)(a2 + 296));
            WrdTableProperties::setHalfOfGapBetweenTextInAdjColOfTableRow((WrdTableProperties *)a2, v84);
            return;
          }
          v239 = "applySprm with bad TDxaGapHalf data size\n";
          int v240 = 301;
        }
      }
      else
      {
        switch(*(_WORD *)(a3 + 8))
        {
          case 0x9407:
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
            {
              int v15 = CsLeReadSInt16((__int16 *)v7);
              WrdTableProperties::setRowHeight((WrdTableProperties *)a2, v15);
              return;
            }
            v239 = "applySprm with bad TDyaRowHeight data size\n";
            int v240 = 338;
            goto LABEL_522;
          case 0x940E:
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
            {
              int v63 = CsLeReadSInt16((__int16 *)v7);
              WrdTableProperties::setAbsoluteHorizontalPosition((WrdTableProperties *)a2, v63);
              return;
            }
            v239 = "applySprm with bad TDxaAbs data size\n";
            int v240 = 853;
            goto LABEL_522;
          case 0x940F:
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
            {
              int v64 = CsLeReadSInt16((__int16 *)v7);
              WrdTableProperties::setAbsoluteVerticalPosition((WrdTableProperties *)a2, v64);
              return;
            }
            v239 = "applySprm with bad TDyaAbs data size\n";
            int v240 = 877;
            goto LABEL_522;
          case 0x9410:
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
            {
              int v65 = CsLeReadUInt16((unsigned __int16 *)v7);
              WrdTableProperties::setLeftDistanceFromText((WrdTableProperties *)a2, v65);
              return;
            }
            v239 = "applySprm with bad TDxaFromText data size\n";
            int v240 = 861;
            goto LABEL_522;
          case 0x9411:
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
            {
              int v66 = CsLeReadUInt16((unsigned __int16 *)v7);
              WrdTableProperties::setTopDistanceFromText((WrdTableProperties *)a2, v66);
              return;
            }
            v239 = "applySprm with bad TDyaFromText data size\n";
            int v240 = 885;
            break;
          default:
            return;
        }
      }
      goto LABEL_522;
    }
    if (*(unsigned __int16 *)(a3 + 8) <= 0x3614u)
    {
      if (*(unsigned __int16 *)(a3 + 8) <= 0x347Bu)
      {
        if (*(unsigned __int16 *)(a3 + 8) > 0x3464u)
        {
          if (v13 == 13413)
          {
            if (v7)
            {
              char v90 = *v7;
              WrdTableProperties::setDoNotAllowOverlap((WrdTableProperties *)a2, v90);
              return;
            }
            v239 = "applySprm with bad TFNoAllowOverlap data size\n";
            int v240 = 740;
            goto LABEL_522;
          }
          if (v13 != 13414) {
            return;
          }
        }
        else if (v13 != 13315)
        {
          if (v13 != 13316) {
            return;
          }
          if (v7)
          {
            char v27 = *v7;
            WrdTableProperties::setTableHeader((WrdTableProperties *)a2, v27);
            return;
          }
          v239 = "applySprm with bad TTableHeader data size\n";
          int v240 = 623;
          goto LABEL_522;
        }
        if (v7)
        {
          char v38 = *v7;
          WrdTableProperties::setCantSplit((WrdTableProperties *)a2, v38);
          return;
        }
        v239 = "applySprm with bad TFCantSplit data size\n";
        int v240 = 365;
        goto LABEL_522;
      }
      if (*(unsigned __int16 *)(a3 + 8) <= 0x3487u)
      {
        if (v13 == 13436)
        {
          if (v7)
          {
            int v87 = *v7;
            WrdTableProperties::setVerticalCellAlignment(a2, v87);
            return;
          }
          v239 = "applySprm with bad 0x347C data size\n";
          int v240 = 966;
        }
        else
        {
          if (v13 != 13437) {
            return;
          }
          if (v7)
          {
            char v34 = *v7;
            WrdTableProperties::setDoNotWrapText((WrdTableProperties *)a2, v34);
            return;
          }
          v239 = "applySprm with bad 0x347D data size\n";
          int v240 = 1032;
        }
      }
      else
      {
        switch(v13)
        {
          case 0x3488u:
            if (v7)
            {
              char v69 = *v7;
              WrdTableProperties::setNumberOfRowsInRowBand((WrdTableProperties *)a2, v69);
              return;
            }
            v239 = "applySprm with bad 0x3488 data size\n";
            int v240 = 1072;
            break;
          case 0x3489u:
            if (v7)
            {
              char v70 = *v7;
              WrdTableProperties::setNumberOfColumnsInColumnBand((WrdTableProperties *)a2, v70);
              return;
            }
            v239 = "applySprm with bad 0x3489 data size\n";
            int v240 = 1080;
            break;
          case 0x360Du:
            if (v7)
            {
              unsigned int v20 = *v7;
              if ((v20 & 0x30) != 0x30) {
                WrdTableProperties::setVerticalPosition(a2, (v20 & 0x30) >> 4);
              }
              if ((~v20 & 0xC0) != 0)
              {
                WrdTableProperties::setHorizontalPosition(a2, v20 >> 6);
              }
              return;
            }
            v239 = "applySprm with bad TPc data size\n";
            int v240 = 748;
            break;
          default:
            return;
        }
      }
    }
    else if (*(unsigned __int16 *)(a3 + 8) > 0x560Au)
    {
      if (*(unsigned __int16 *)(a3 + 8) <= 0x5623u)
      {
        if (v13 == 22027)
        {
          if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
          {
            char v88 = CsLeReadUInt16((unsigned __int16 *)v7) != 0;
            WrdTableProperties::setBiDirectional((WrdTableProperties *)a2, v88);
            return;
          }
          v239 = "applySprm with bad TFBiDi80 data size\n";
          int v240 = 355;
        }
        else
        {
          if (v13 != 22050) {
            return;
          }
          if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
          {
            unsigned int v35 = *v7;
            int v36 = v7[1] - v35;
            WrdTableProperties::deleteCells((WrdTableProperties *)a2, v35, v36);
            return;
          }
          v239 = "applySprm with bad TDelete data size\n";
          int v240 = 245;
        }
      }
      else
      {
        switch(v13)
        {
          case 0x5624u:
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
            {
              unsigned int v71 = *v7;
              unsigned int v72 = v7[1];
              int v73 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v71);
              WrdTableCellDescriptor::setIsFirstInRangeOfMergedCells(v73, 1);
              while (1)
              {
                LOBYTE(v71) = v71 + 1;
                if (v72 <= v71) {
                  break;
                }
                int v74 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v71);
                WrdTableCellDescriptor::setIsMergedWithPrecedingCell(v74, 1);
              }
              return;
            }
            v239 = "applySprm with bad TMerge data size\n";
            int v240 = 405;
            break;
          case 0x5625u:
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
            {
              unsigned int v75 = *v7;
              unsigned int v76 = v7[1];
              if (v75 < v76)
              {
                do
                {
                  __int16 v77 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v75);
                  WrdTableCellDescriptor::setIsFirstInRangeOfMergedCells(v77, 0);
                  __int16 v78 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v75);
                  WrdTableCellDescriptor::setIsMergedWithPrecedingCell(v78, 0);
                  ++v75;
                }
                while (v76 > v75);
              }
              return;
            }
            v239 = "applySprm with bad TSplit data size\n";
            int v240 = 567;
            break;
          case 0x563Au:
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
            {
              __int16 v25 = CsLeReadUInt16((unsigned __int16 *)v7);
              WrdTableProperties::setTableStyleIndex((WrdTableProperties *)a2, v25);
              return;
            }
            v239 = "applySprm with bad 0x563A data size\n";
            int v240 = 958;
            break;
          default:
            return;
        }
      }
    }
    else if (*(unsigned __int16 *)(a3 + 8) <= 0x3662u)
    {
      if (v13 == 13845)
      {
        if (v7)
        {
          char v86 = *v7;
          WrdTableProperties::setAutoFit((WrdTableProperties *)a2, v86);
          return;
        }
        v239 = "applySprm with bad TFAutoFit data size\n";
        int v240 = 901;
      }
      else
      {
        if (v13 != 13849) {
          return;
        }
        if (v7)
        {
          char v33 = *v7;
          WrdTableProperties::setKeepWithFollowing((WrdTableProperties *)a2, v33);
          return;
        }
        v239 = "applySprm with bad TFKeepFollow data size\n";
        int v240 = 724;
      }
    }
    else
    {
      switch(v13)
      {
        case 0x3663u:
          if (v7)
          {
            char v67 = *v7;
            WrdTableProperties::setNeverBeenAutoFit((WrdTableProperties *)a2, v67);
            return;
          }
          v239 = "applySprm with bad TFNeverBeenAutofit data size\n";
          int v240 = 732;
          break;
        case 0x5400u:
          if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
          {
            int v68 = CsLeReadUInt16((unsigned __int16 *)v7);
            WrdTableProperties::setJustification(a2, v68);
            return;
          }
          v239 = "applySprm with bad TJc data size\n";
          int v240 = 396;
          break;
        case 0x548Au:
          if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
          {
            int v14 = CsLeReadUInt16((unsigned __int16 *)v7);
            WrdTableProperties::setTableAlignment(a2, v14);
            return;
          }
          v239 = "applySprm with bad 0x548A data size\n";
          int v240 = 978;
          break;
        default:
          return;
      }
    }
LABEL_522:
    ChLogFunction(v239, 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdTapParser.cpp", v240);
    goto LABEL_523;
  }
  if (*(unsigned __int16 *)(a3 + 8) > 0xD661u)
  {
    if (*(unsigned __int16 *)(a3 + 8) > 0xF613u)
    {
      if (*(unsigned __int16 *)(a3 + 8) <= 0xF617u)
      {
        if (v13 == 62996)
        {
          if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 2)
          {
            WrdTableProperties::setPreferredTableWidthUnit(a2, *v7);
            __int16 v54 = CsLeReadSInt16((__int16 *)(v7 + 1));
            WrdTableProperties::setPreferredTableWidth((WrdTableProperties *)a2, v54);
            return;
          }
          v239 = "applySprm with bad TTableWidth data size\n";
          int v240 = 909;
        }
        else
        {
          if (v13 != 62999) {
            return;
          }
          if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 2)
          {
            WrdTableProperties::setWidthOfInvisibleCellBeforeUnit(a2, *v7);
            __int16 v32 = CsLeReadSInt16((__int16 *)(v7 + 1));
            WrdTableProperties::setWidthOfInvisibleCellBefore((WrdTableProperties *)a2, v32);
            return;
          }
          v239 = "applySprm with bad TWidthBefore data size\n";
          int v240 = 933;
        }
      }
      else
      {
        switch(v13)
        {
          case 0xF618u:
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 2)
            {
              WrdTableProperties::setWidthOfInvisibleCellAfterUnit(a2, *v7);
              __int16 v50 = CsLeReadSInt16((__int16 *)(v7 + 1));
              WrdTableProperties::setWidthOfInvisibleCellAfter((WrdTableProperties *)a2, v50);
              return;
            }
            v239 = "applySprm with bad TWidthAfter data size\n";
            int v240 = 921;
            break;
          case 0xF636u:
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 2)
            {
              unsigned int v51 = *v7;
              unsigned int v52 = v7[1];
              if (v51 < v52)
              {
                do
                {
                  char v53 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v51);
                  WrdTableCellDescriptor::setFitText(v53, v7[2]);
                  ++v51;
                }
                while (v52 > v51);
              }
              return;
            }
            v239 = "applySprm with bad TFitText data size\n";
            int v240 = 711;
            break;
          case 0xF661u:
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 2)
            {
              WrdTableProperties::setWidthIndentUnit(a2, *v7);
              __int16 v24 = CsLeReadSInt16((__int16 *)(v7 + 1));
              WrdTableProperties::setWidthIndent((WrdTableProperties *)a2, v24);
              return;
            }
            v239 = "applySprm with bad TWidthIndent data size\n";
            int v240 = 945;
            break;
          default:
            return;
        }
      }
    }
    else
    {
      switch(*(_WORD *)(a3 + 8))
      {
        case 0xD670:
          if (*(__int16 *)(a2 + 344) >= 1)
          {
            uint64_t v16 = 0;
            unsigned int v17 = 0;
            do
            {
              if (v16 >= *(unsigned __int8 *)(a3 + 13)) {
                break;
              }
              int v18 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v17);
              int v19 = (WrdShading *)WrdTableCellDescriptor::getShadingReference(v18);
              WrdBaseParser::parseBuffer((uint64_t)a1, v19, &v7[v16], (const unsigned __int8 *)a5);
              if (v17 > 0x14) {
                break;
              }
              ++v17;
              v16 += 10;
            }
            while (*(__int16 *)(a2 + 344) > (__int16)v17);
          }
          return;
        case 0xD671:
          if (*(__int16 *)(a2 + 344) >= 23)
          {
            uint64_t v42 = 0;
            unsigned int v43 = 22;
            do
            {
              if (v42 >= *(unsigned __int8 *)(a3 + 13)) {
                break;
              }
              __int16 v44 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v43);
              char v45 = (WrdShading *)WrdTableCellDescriptor::getShadingReference(v44);
              WrdBaseParser::parseBuffer((uint64_t)a1, v45, &v7[v42], (const unsigned __int8 *)a5);
              if (v43 > 0x2A) {
                break;
              }
              ++v43;
              v42 += 10;
            }
            while (*(__int16 *)(a2 + 344) > (__int16)v43);
          }
          return;
        case 0xD672:
          if (*(__int16 *)(a2 + 344) >= 45)
          {
            int v46 = 44;
            int v47 = 44;
            do
            {
              if (10 * v46 - 440 >= *(unsigned __int8 *)(a3 + 13)) {
                break;
              }
              char v48 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v47);
              char v49 = (WrdShading *)WrdTableCellDescriptor::getShadingReference(v48);
              WrdBaseParser::parseBuffer((uint64_t)a1, v49, v7, (const unsigned __int8 *)a5);
              v7 += 10;
              int v46 = ++v47;
            }
            while (v47 < *(__int16 *)(a2 + 344));
          }
          return;
        case 0xD673:
        case 0xD674:
        case 0xD675:
        case 0xD676:
        case 0xD677:
        case 0xD678:
        case 0xD679:
        case 0xD67A:
        case 0xD67B:
        case 0xD67C:
        case 0xD67D:
        case 0xD67E:
        case 0xD67F:
          return;
        case 0xD680:
          TopBorderReference = (WrdBorder *)WrdTableProperties::getBottomBorderReference((WrdTableProperties *)a2);
          goto LABEL_393;
        case 0xD681:
          TopBorderReference = (WrdBorder *)WrdTableProperties::getLeftBorderReference((WrdTableProperties *)a2);
          goto LABEL_393;
        case 0xD682:
          TopBorderReference = (WrdBorder *)WrdTableProperties::getRightBorderReference((WrdTableProperties *)a2);
          goto LABEL_393;
        case 0xD683:
          TopBorderReference = (WrdBorder *)WrdTableProperties::getInnerHorizontalBorderReference((WrdTableProperties *)a2);
          goto LABEL_393;
        case 0xD684:
LABEL_313:
          TopBorderReference = (WrdBorder *)WrdTableProperties::getInnerVerticalBorderReference((WrdTableProperties *)a2);
          goto LABEL_393;
        case 0xD685:
          TopBorderReference = (WrdBorder *)WrdTableProperties::getDiagonalDownBorderReference((WrdTableProperties *)a2);
          goto LABEL_393;
        case 0xD686:
LABEL_392:
          TopBorderReference = (WrdBorder *)WrdTableProperties::getDiagonalUpBorderReference((WrdTableProperties *)a2);
          goto LABEL_393;
        case 0xD687:
LABEL_151:
          unsigned int v41 = (WrdShading *)WrdTableProperties::getShadingReference((WrdTableProperties *)a2);
          WrdBaseParser::parseBuffer((uint64_t)a1, v41, v7, (const unsigned __int8 *)a5);
          return;
        default:
          if (v13 == 54882)
          {
            int v55 = *(__int16 *)(a2 + 344);
            if (v55 >= *(unsigned __int8 *)(a3 + 13) >> 2) {
              int v55 = *(unsigned __int8 *)(a3 + 13) >> 2;
            }
            if (!v55) {
              return;
            }
            if (v7 && (char *)a5 - (char *)v7 >= (unint64_t)(4 * (__int16)v55))
            {
              int v56 = (__int16)v55;
              if ((__int16)v55 >= 1)
              {
                int v57 = 0;
                do
                {
                  uint64_t v58 = WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v57);
                  *(_DWORD *)(v58 + 8) |= 0x800u;
                  char v59 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v57);
                  *(_DWORD *)(WrdTableCellDescriptor::getTopBorderReference(v59) + 16) = *v7;
                  char v60 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v57);
                  *(_DWORD *)(WrdTableCellDescriptor::getLeftBorderReference(v60) + 16) = v7[1];
                  char v61 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v57);
                  *(_DWORD *)(WrdTableCellDescriptor::getBottomBorderReference(v61) + 16) = v7[2];
                  char v62 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v57);
                  *(_DWORD *)(WrdTableCellDescriptor::getRightBorderReference(v62) + 16) = v7[3];
                  v7 += 4;
                  ++v57;
                }
                while (v56 != v57);
              }
              return;
            }
            v239 = "applySprm with bad TCellBrcType data size\n";
            int v240 = 804;
          }
          else
          {
            if (v13 != 54887) {
              return;
            }
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 2)
            {
              WrdTableProperties::setRevisionMark((WrdTableProperties *)a2, *v7 == 1);
              __int16 v30 = CsLeReadUInt16((unsigned __int16 *)(v7 + 1));
              WrdTableProperties::setAuthorIDForRevision((WrdTableProperties *)a2, v30);
              DttmRevisionMarkReference = (WrdDateTime *)WrdTableProperties::getDttmRevisionMarkReference((WrdTableProperties *)a2);
              WrdBaseParser::parseBuffer(a1, DttmRevisionMarkReference, v7 + 3, (unsigned __int8 *)a5);
              return;
            }
            v239 = "applySprm with bad 0xD667 data size\n";
            int v240 = 1088;
          }
          break;
      }
    }
    goto LABEL_522;
  }
  switch(*(_WORD *)(a3 + 8))
  {
    case 0xD605:
      *(_DWORD *)(a2 + 24) |= 0x8000000u;
      int v91 = (WrdBorder *)WrdTableProperties::getTopBorderReference((WrdTableProperties *)a2);
      WrdBaseParser::parseBRC80(a1, v91, (unsigned __int16 *)v7, a5);
      LeftBorderReference = (WrdBorder *)WrdTableProperties::getLeftBorderReference((WrdTableProperties *)a2);
      WrdBaseParser::parseBRC80(a1, LeftBorderReference, (unsigned __int16 *)v7 + 2, a5);
      BottomBorderReference = (WrdBorder *)WrdTableProperties::getBottomBorderReference((WrdTableProperties *)a2);
      WrdBaseParser::parseBRC80(a1, BottomBorderReference, (unsigned __int16 *)v7 + 4, a5);
      RightBorderReference = (WrdBorder *)WrdTableProperties::getRightBorderReference((WrdTableProperties *)a2);
      WrdBaseParser::parseBRC80(a1, RightBorderReference, (unsigned __int16 *)v7 + 6, a5);
      InnerHorizontalBorderReference = (WrdBorder *)WrdTableProperties::getInnerHorizontalBorderReference((WrdTableProperties *)a2);
      WrdBaseParser::parseBRC80(a1, InnerHorizontalBorderReference, (unsigned __int16 *)v7 + 8, a5);
      int v96 = (unsigned __int16 *)(v7 + 20);
      InnerVerticalBorderReference = (WrdBorder *)WrdTableProperties::getInnerVerticalBorderReference((WrdTableProperties *)a2);
      goto LABEL_361;
    case 0xD606:
      uint64_t v28 = "Unimplemented sprm code 0xD606\n";
      int v29 = 157;
      goto LABEL_453;
    case 0xD607:
    case 0xD60A:
    case 0xD60B:
    case 0xD60D:
    case 0xD60E:
    case 0xD60F:
    case 0xD610:
    case 0xD611:
    case 0xD614:
    case 0xD615:
    case 0xD617:
    case 0xD618:
    case 0xD619:
    case 0xD61E:
    case 0xD61F:
    case 0xD621:
    case 0xD622:
    case 0xD623:
    case 0xD624:
    case 0xD625:
    case 0xD627:
    case 0xD628:
    case 0xD629:
    case 0xD636:
    case 0xD63A:
    case 0xD63B:
    case 0xD63C:
    case 0xD63D:
      return;
    case 0xD608:
      *a6 = *(unsigned __int8 *)(a3 + 13) | (*v7 << 8);
      if (v7 + 1 >= (unsigned __int8 *)a5)
      {
        uint64_t v28 = "applySprm with bad data size-- skipping\n";
        int v29 = 123;
        goto LABEL_453;
      }
      WrdTableProperties::setNumberOfCellsForRow((WrdTableProperties *)a2, v7[1]);
      v98 = (unsigned __int16 *)(v7 + 2);
      int v99 = *(__int16 *)(a2 + 344);
      if ((v99 & 0x80000000) == 0 && v7 + 4 <= (unsigned __int8 *)a5)
      {
        int v100 = 0;
        __int16 v101 = v7 + 6;
        do
        {
          __int16 v102 = CsLeReadUInt16((unsigned __int16 *)v101 - 2);
          WrdTableProperties::setPositionOfCell((WrdTableProperties *)a2, v100++, v102);
          uint64_t v103 = v101 + 2;
          BOOL v104 = *(__int16 *)(a2 + 344) < (int)v100 || v101 > (unsigned __int8 *)a5;
          v101 += 2;
        }
        while (!v104);
        int v99 = *(unsigned __int16 *)(a2 + 344);
        v98 = (unsigned __int16 *)(v103 - 4);
      }
      int v105 = (unsigned __int16)*a6;
      int v106 = v105 - 2 * v99 - 4;
      if ((unsigned __int16)(v105 - 2 * v99 - 4) >= 0x14u)
      {
        unsigned __int8 v107 = 0;
        do
        {
          if (*(__int16 *)(a2 + 344) <= (int)v107) {
            break;
          }
          v108 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v107);
          WrdTapParser::parsePartOfTableCellDescriptor(a1, v108, v98, a5);
          v98 += 10;
          v106 -= 20;
          ++v107;
        }
        while ((unsigned __int16)v106 > 0x13u);
      }
      return;
    case 0xD609:
      if (*(__int16 *)(a2 + 344) >= 1)
      {
        unsigned __int8 v109 = 0;
        unsigned __int8 v110 = 0;
        do
        {
          unsigned __int8 v111 = v110;
          if (v110 >= *(unsigned __int8 *)(a3 + 13)) {
            break;
          }
          if ((*(_DWORD *)(WrdTableProperties::getTableCellDescriptor((WrdTableProperties *)a2, v109) + 8) & 1) == 0)
          {
            char v112 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v109);
            int v113 = (WrdShading *)WrdTableCellDescriptor::getShadingReference(v112);
            WrdBaseParser::parseSHD80(a1, v113, (unsigned __int16 *)v7, a5);
          }
          v7 += 2;
          unsigned __int8 v110 = v111 + 2;
          ++v109;
        }
        while (*(__int16 *)(a2 + 344) > (int)v109);
      }
      return;
    case 0xD60C:
      int v114 = *(__int16 *)(a2 + 344);
      if (v114 >= 45)
      {
        int v115 = 44;
        do
        {
          if (10 * v115 - 440 >= *(unsigned __int8 *)(a3 + 13)) {
            break;
          }
          int v116 = (__int16)v114;
          unsigned __int8 v117 = 44;
          if ((__int16)v114 >= 45)
          {
            do
            {
              v118 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v117);
              int v119 = (WrdShading *)WrdTableCellDescriptor::getShadingReference(v118);
              WrdBaseParser::parseBuffer((uint64_t)a1, v119, v7, (const unsigned __int8 *)a5);
              v7 += 10;
              ++v117;
              int v116 = *(__int16 *)(a2 + 344);
            }
            while (v116 > v117);
            LOWORD(v114) = *(_WORD *)(a2 + 344);
          }
          int v115 = (v117 + 1);
        }
        while (v116 > v115);
      }
      return;
    case 0xD612:
      if (*(__int16 *)(a2 + 344) >= 1)
      {
        uint64_t v120 = 0;
        unsigned int v121 = 0;
        do
        {
          if (v120 >= *(unsigned __int8 *)(a3 + 13)) {
            break;
          }
          v122 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v121);
          v123 = (WrdShading *)WrdTableCellDescriptor::getShadingReference(v122);
          WrdBaseParser::parseBuffer((uint64_t)a1, v123, &v7[v120], (const unsigned __int8 *)a5);
          if (v121 > 0x14) {
            break;
          }
          ++v121;
          v120 += 10;
        }
        while (*(__int16 *)(a2 + 344) > (__int16)v121);
      }
      return;
    case 0xD613:
      *(_DWORD *)(a2 + 24) |= 0x8000000u;
      v124 = (WrdBorder *)WrdTableProperties::getTopBorderReference((WrdTableProperties *)a2);
      WrdBaseParser::parseBuffer(a1, v124, v7, (const unsigned __int8 *)a5);
      v125 = (WrdBorder *)WrdTableProperties::getLeftBorderReference((WrdTableProperties *)a2);
      WrdBaseParser::parseBuffer(a1, v125, v7 + 8, (const unsigned __int8 *)a5);
      v126 = (WrdBorder *)WrdTableProperties::getBottomBorderReference((WrdTableProperties *)a2);
      WrdBaseParser::parseBuffer(a1, v126, v7 + 16, (const unsigned __int8 *)a5);
      v127 = (WrdBorder *)WrdTableProperties::getRightBorderReference((WrdTableProperties *)a2);
      WrdBaseParser::parseBuffer(a1, v127, v7 + 24, (const unsigned __int8 *)a5);
      v128 = (WrdBorder *)WrdTableProperties::getInnerHorizontalBorderReference((WrdTableProperties *)a2);
      WrdBaseParser::parseBuffer(a1, v128, v7 + 32, (const unsigned __int8 *)a5);
      v7 += 40;
      goto LABEL_313;
    case 0xD616:
      if (*(__int16 *)(a2 + 344) >= 23)
      {
        uint64_t v129 = 0;
        unsigned int v130 = 22;
        do
        {
          if (v129 >= *(unsigned __int8 *)(a3 + 13)) {
            break;
          }
          v131 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v130);
          v132 = (WrdShading *)WrdTableCellDescriptor::getShadingReference(v131);
          WrdBaseParser::parseBuffer((uint64_t)a1, v132, &v7[v129], (const unsigned __int8 *)a5);
          if (v130 > 0x2A) {
            break;
          }
          ++v130;
          v129 += 10;
        }
        while (*(__int16 *)(a2 + 344) > (__int16)v130);
      }
      return;
    case 0xD61A:
      if (*(__int16 *)(a2 + 344) >= *(unsigned __int8 *)(a3 + 13) >> 2) {
        int v133 = *(unsigned __int8 *)(a3 + 13) >> 2;
      }
      else {
        int v133 = *(__int16 *)(a2 + 344);
      }
      if (v133 >= 1)
      {
        for (int i = 0; i != v133; ++i)
        {
          uint64_t v135 = WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, i);
          *(_DWORD *)(v135 + 8) |= 0x80u;
          v136 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, i);
          v137 = (CsColour *)WrdTableCellDescriptor::getTopBorderReference(v136);
          WrdBaseParser::parseBuffer(a1, v137 + 1, v7, (const unsigned __int8 *)a5);
          v7 += 4;
        }
      }
      return;
    case 0xD61B:
      if (*(__int16 *)(a2 + 344) >= *(unsigned __int8 *)(a3 + 13) >> 2) {
        int v138 = *(unsigned __int8 *)(a3 + 13) >> 2;
      }
      else {
        int v138 = *(__int16 *)(a2 + 344);
      }
      if (v138 >= 1)
      {
        for (int j = 0; j != v138; ++j)
        {
          uint64_t v140 = WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, j);
          *(_DWORD *)(v140 + 8) |= 0x100u;
          v141 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, j);
          v142 = (CsColour *)WrdTableCellDescriptor::getLeftBorderReference(v141);
          WrdBaseParser::parseBuffer(a1, v142 + 1, v7, (const unsigned __int8 *)a5);
          v7 += 4;
        }
      }
      return;
    case 0xD61C:
      if (*(__int16 *)(a2 + 344) >= *(unsigned __int8 *)(a3 + 13) >> 2) {
        int v143 = *(unsigned __int8 *)(a3 + 13) >> 2;
      }
      else {
        int v143 = *(__int16 *)(a2 + 344);
      }
      if (v143 >= 1)
      {
        for (int k = 0; k != v143; ++k)
        {
          uint64_t v145 = WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, k);
          *(_DWORD *)(v145 + 8) |= 0x200u;
          v146 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, k);
          v147 = (CsColour *)WrdTableCellDescriptor::getBottomBorderReference(v146);
          WrdBaseParser::parseBuffer(a1, v147 + 1, v7, (const unsigned __int8 *)a5);
          v7 += 4;
        }
      }
      return;
    case 0xD61D:
      if (*(__int16 *)(a2 + 344) >= *(unsigned __int8 *)(a3 + 13) >> 2) {
        int v148 = *(unsigned __int8 *)(a3 + 13) >> 2;
      }
      else {
        int v148 = *(__int16 *)(a2 + 344);
      }
      if (v148 >= 1)
      {
        for (int m = 0; m != v148; ++m)
        {
          uint64_t v150 = WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, m);
          *(_DWORD *)(v150 + 8) |= 0x400u;
          v151 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, m);
          v152 = (CsColour *)WrdTableCellDescriptor::getRightBorderReference(v151);
          WrdBaseParser::parseBuffer(a1, v152 + 1, v7, (const unsigned __int8 *)a5);
          v7 += 4;
        }
      }
      return;
    case 0xD620:
      if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 2)
      {
        unsigned int v153 = *v7;
        unsigned int v154 = v7[1];
        char v155 = v7[2];
        v156 = (WrdShading *)operator new(0x20uLL);
        WrdBorder::WrdBorder((WrdBorder *)v156);
        WrdBaseParser::parseBRC80(a1, (WrdBorder *)v156, (unsigned __int16 *)(v7 + 3), a5);
        if (v153 < v154)
        {
          do
          {
            v158 = (WrdTapParser *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v153);
            v157.n128_f64[0] = WrdTapParser::setBorderBasedOnFlags(v158, v155, (const WrdBorder *)v156, v158);
            ++v153;
          }
          while (v154 > v153);
        }
LABEL_443:
        v224 = (void (*)(WrdShading *, __n128))*((void *)v156->var0 + 1);
        v224(v156, v157);
        return;
      }
      v239 = "applySprm with bad TSetBrc80 data size\n";
      int v240 = 420;
      goto LABEL_522;
    case 0xD626:
      if (!v7 || (unint64_t)((char *)a5 - (char *)v7) <= 2)
      {
        v239 = "applySprm with bad TSetBrc10 data size\n";
        int v240 = 442;
        goto LABEL_522;
      }
      unsigned int v159 = *v7;
      unsigned int v160 = v7[1];
      char v161 = v7[2];
      v156 = (WrdShading *)operator new(0x20uLL);
      WrdBorder::WrdBorder((WrdBorder *)v156);
      if (v159 < v160)
      {
        v162 = (unsigned __int16 *)(v7 + 3);
        do
        {
          WrdBaseParser::parseBRC10(a1, (WrdBorder *)v156, v162, a5);
          v163 = (WrdTapParser *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v159);
          v157.n128_f64[0] = WrdTapParser::setBorderBasedOnFlags(v163, v161, (const WrdBorder *)v156, v163);
          ++v162;
          ++v159;
        }
        while (v160 > v159);
      }
      if (v156) {
        goto LABEL_443;
      }
      return;
    case 0xD62A:
      DiagonalDownBorderReference = (WrdBorder *)WrdTableProperties::getDiagonalDownBorderReference((WrdTableProperties *)a2);
      WrdBaseParser::parseBRC80(a1, DiagonalDownBorderReference, (unsigned __int16 *)v7, a5);
      int v96 = (unsigned __int16 *)(v7 + 4);
      InnerVerticalBorderReference = (WrdBorder *)WrdTableProperties::getDiagonalUpBorderReference((WrdTableProperties *)a2);
LABEL_361:
      WrdBaseParser::parseBRC80(a1, InnerVerticalBorderReference, v96, a5);
      return;
    case 0xD62B:
      if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
      {
        unsigned int v165 = *v7;
        int v166 = v7[1];
        if (v166 == 3)
        {
          v234 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, *v7);
          WrdTableCellDescriptor::setIsVerticallyMergedCell(v234, 1);
          v235 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v165);
          char v236 = 1;
        }
        else
        {
          if (v166 == 1)
          {
            v167 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, *v7);
            char v168 = 1;
          }
          else
          {
            if (v7[1]) {
              return;
            }
            v167 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, *v7);
            char v168 = 0;
          }
          WrdTableCellDescriptor::setIsVerticallyMergedCell(v167, v168);
          v235 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v165);
          char v236 = 0;
        }
        WrdTableCellDescriptor::setIsFirstInSetOfVerticallyMergedCells(v235, v236);
        return;
      }
      v239 = "applySprm with bad TVertMerge data size\n";
      int v240 = 675;
      goto LABEL_522;
    case 0xD62C:
      if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 2)
      {
        unsigned int v169 = *v7;
        unsigned int v170 = v7[1];
        if (v169 < v170)
        {
          int v171 = v7[2];
          do
          {
            uint64_t v172 = WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v169);
            WrdTableCellDescriptor::setVerticalCellAlignment(v172, v171);
            ++v169;
          }
          while (v170 > v169);
        }
        return;
      }
      v239 = "applySprm with bad TVertAlign data size\n";
      int v240 = 659;
      goto LABEL_522;
    case 0xD62D:
      if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
      {
        unsigned int v173 = *v7;
        unsigned int v174 = v7[1];
        v156 = (WrdShading *)operator new(0x28uLL);
        WrdShading::WrdShading(v156);
        WrdBaseParser::parseBuffer((uint64_t)a1, v156, v7 + 2, (const unsigned __int8 *)a5);
        if (v173 < v174)
        {
          do
          {
            v175 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v173);
            uint64_t v176 = WrdTableCellDescriptor::getShadingReference(v175);
            v157.n128_f64[0] = WrdShading::operator=(v176, (uint64_t)v156);
            ++v173;
          }
          while (v174 > v173);
        }
        goto LABEL_443;
      }
      v239 = "applySprm with bad TSetShd data size\n";
      int v240 = 526;
      goto LABEL_522;
    case 0xD62E:
      if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
      {
        int v177 = *v7;
        unsigned int v178 = v7[1];
        v156 = (WrdShading *)operator new(0x28uLL);
        WrdShading::WrdShading(v156);
        WrdBaseParser::parseSHD80(a1, v156, (unsigned __int16 *)v7 + 1, a5);
        int v179 = v177 | 1;
        if ((v177 | 1u) < v178)
        {
          do
          {
            v180 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v179);
            uint64_t v181 = WrdTableCellDescriptor::getShadingReference(v180);
            v157.n128_f64[0] = WrdShading::operator=(v181, (uint64_t)v156);
            v179 += 2;
          }
          while (v178 > v179);
        }
        goto LABEL_443;
      }
      v239 = "applySprm with bad TSetShdOdd data size\n";
      int v240 = 543;
      goto LABEL_522;
    case 0xD62F:
      if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 2)
      {
        unsigned int v182 = *v7;
        unsigned int v183 = v7[1];
        char v184 = v7[2];
        v156 = (WrdShading *)operator new(0x20uLL);
        WrdBorder::WrdBorder((WrdBorder *)v156);
        WrdBaseParser::parseBuffer(a1, (WrdBorder *)v156, v7 + 3, (const unsigned __int8 *)a5);
        if (v182 < v183)
        {
          do
          {
            v185 = (WrdTapParser *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v182);
            v157.n128_f64[0] = WrdTapParser::setBorderBasedOnFlags(v185, v184, (const WrdBorder *)v156, v185);
            ++v182;
          }
          while (v183 > v182);
        }
        goto LABEL_443;
      }
      v239 = "applySprm with bad TSetBrc data size\n";
      int v240 = 464;
      goto LABEL_522;
    case 0xD630:
      v186 = (WrdBorder *)WrdTableProperties::getDiagonalDownBorderReference((WrdTableProperties *)a2);
      WrdBaseParser::parseBuffer(a1, v186, v7, (const unsigned __int8 *)a5);
      v7 += 8;
      goto LABEL_392;
    case 0xD631:
    case 0xD632:
    case 0xD633:
    case 0xD634:
    case 0xD637:
    case 0xD638:
      if ((char *)a5 - (char *)v7 > 5)
      {
        WrdTapParser::parseSpacingAndPadding(SizeOfSPRMParameter, v13, (WrdTableProperties *)a2, v7, &v241);
        return;
      }
      ChLogFunction("applySprm with bad TCellPadding or TCellSpacing data size\n", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdTapParser.cpp", 824);
      exception = __cxa_allocate_exception(4uLL);
      int v238 = 1005;
      goto LABEL_524;
    case 0xD635:
      if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 4)
      {
        unsigned int v187 = *v7;
        unsigned int v188 = v7[1];
        v189 = (__int16 *)(v7 + 3);
        int v190 = v7[2];
        __int16 v191 = CsLeReadSInt16(v189);
        if (v187 < v188)
        {
          __int16 v192 = v191;
          do
          {
            v193 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v187);
            WrdTableCellDescriptor::setWidthUnit((uint64_t)v193, v190);
            WrdTableCellDescriptor::setWidth(v193, v192);
            ++v187;
          }
          while (v188 > v187);
        }
        return;
      }
      v239 = "applySprm with bad TCellWidth data size\n";
      int v240 = 833;
      goto LABEL_522;
    case 0xD639:
      if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 2)
      {
        unsigned int v194 = *v7;
        unsigned int v195 = v7[1];
        if (v194 < v195)
        {
          do
          {
            v196 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v194);
            WrdTableCellDescriptor::setNoWrap(v196, v7[2]);
            ++v194;
          }
          while (v195 > v194);
        }
        return;
      }
      v239 = "applySprm with bad TFCellNoWrap data size\n";
      int v240 = 698;
      goto LABEL_522;
    case 0xD63E:
      if (!v7 || (unint64_t)((char *)a5 - (char *)v7) <= 5)
      {
        v239 = "applySprm with bad 0xD63E data size\n";
        int v240 = 989;
        goto LABEL_522;
      }
      if (a5 <= (unsigned __int16 *)v7 + 1 || (unint64_t)((char *)a5 - (char *)(v7 + 2)) <= 3) {
        goto LABEL_523;
      }
      unsigned __int8 v197 = v7[2];
      int v198 = v7[3];
      __int16 v199 = CsLeReadSInt16((__int16 *)v7 + 2);
      if (v197)
      {
        WrdTableProperties::setDefaultCellTopCellPaddingUnit(a2, v198);
        WrdTableProperties::setDefaultCellTopCellPadding((WrdTableProperties *)a2, v199);
        if ((v197 & 2) == 0)
        {
LABEL_413:
          if ((v197 & 4) == 0) {
            goto LABEL_414;
          }
          goto LABEL_458;
        }
      }
      else if ((v197 & 2) == 0)
      {
        goto LABEL_413;
      }
      WrdTableProperties::setDefaultCellLeftCellPaddingUnit(a2, v198);
      WrdTableProperties::setDefaultCellLeftCellPadding((WrdTableProperties *)a2, v199);
      if ((v197 & 4) == 0)
      {
LABEL_414:
        if ((v197 & 8) == 0) {
          return;
        }
LABEL_459:
        WrdTableProperties::setDefaultCellRightCellPaddingUnit(a2, v198);
        WrdTableProperties::setDefaultCellRightCellPadding((WrdTableProperties *)a2, v199);
        return;
      }
LABEL_458:
      WrdTableProperties::setDefaultCellBottomCellPaddingUnit(a2, v198);
      WrdTableProperties::setDefaultCellBottomCellPadding((WrdTableProperties *)a2, v199);
      if ((v197 & 8) == 0) {
        return;
      }
      goto LABEL_459;
    default:
      if (v13 == 54880) {
        goto LABEL_151;
      }
      return;
  }
}

void sub_238B46EB4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WrdTableProperties::getPositionOfCell(WrdTableProperties *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 31);
  if (((unint64_t)(*((void *)this + 32) - v2) >> 1) <= a2) {
    return 0;
  }
  else {
    return *(__int16 *)(v2 + 2 * a2);
  }
}

WrdTableProperties *WrdTableProperties::setPositionOfCell(WrdTableProperties *this, unsigned int a2, __int16 a3)
{
  uint64_t v3 = *((void *)this + 31);
  if (((*((void *)this + 32) - v3) & 0x1FFFFFFFELL) != 0)
  {
    *((void *)this + 2) |= 0x4000000000000000uLL;
    *(_WORD *)(v3 + 2 * a2) = a3;
  }
  return this;
}

WrdTableProperties *WrdTableProperties::setHalfOfGapBetweenTextInAdjColOfTableRow(WrdTableProperties *this, int a2)
{
  *((void *)this + 2) |= 0x80000000000uLL;
  *((_DWORD *)this + 74) = a2;
  return this;
}

uint64_t WrdTableProperties::getTopBorderReference(WrdTableProperties *this)
{
  *((void *)this + 2) |= 0x20uLL;
  return *((void *)this + 7);
}

uint64_t WrdTableProperties::getLeftBorderReference(WrdTableProperties *this)
{
  *((void *)this + 2) |= 0x40uLL;
  return *((void *)this + 8);
}

uint64_t WrdTableProperties::getBottomBorderReference(WrdTableProperties *this)
{
  *((void *)this + 2) |= 0x80uLL;
  return *((void *)this + 9);
}

uint64_t WrdTableProperties::getRightBorderReference(WrdTableProperties *this)
{
  *((void *)this + 2) |= 0x100uLL;
  return *((void *)this + 10);
}

uint64_t WrdTableProperties::getInnerHorizontalBorderReference(WrdTableProperties *this)
{
  *((void *)this + 2) |= 0x200uLL;
  return *((void *)this + 11);
}

uint64_t WrdTableProperties::getInnerVerticalBorderReference(WrdTableProperties *this)
{
  *((void *)this + 2) |= 0x400uLL;
  return *((void *)this + 12);
}

void WrdTableProperties::setNumberOfCellsForRow(WrdTableProperties *this, int a2)
{
  *((void *)this + 2) |= 0x2000000000000000uLL;
  *((_WORD *)this + 172) = a2;
  *((void *)this + 32) = *((void *)this + 31);
  WrdTableProperties::resetTableCellDescriptors(this);
  if (a2 >= 1)
  {
    if (*((__int16 *)this + 172) <= 0)
    {
      __int16 v24 = (char *)*((void *)this + 32);
    }
    else
    {
      LOWORD(v4) = 0;
      do
      {
        uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 5) + 16))(*((void *)this + 5));
        uint64_t v6 = v5;
        uint64_t v8 = (uint64_t *)*((void *)this + 35);
        unint64_t v7 = *((void *)this + 36);
        if ((unint64_t)v8 >= v7)
        {
          uint64_t v10 = *((void *)this + 34);
          unint64_t v11 = (unint64_t)v8 - v10;
          unint64_t v12 = (v7 - v10) >> 3;
          unsigned int v13 = 2 * v12;
          if (2 * (int)v12 <= (v11 >> 3) + 1) {
            unsigned int v13 = (v11 >> 3) + 1;
          }
          if (v12 >= 0x7FFFFFFF) {
            unint64_t v14 = 0xFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v13;
          }
          if (v14)
          {
            int v15 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 288, v14);
            uint64_t v17 = v16;
          }
          else
          {
            int v15 = 0;
            uint64_t v17 = 0;
          }
          int v18 = (uint64_t *)&v15[v11 & 0x7FFFFFFF8];
          *int v18 = v6;
          int v9 = v18 + 1;
          unsigned int v20 = (char *)*((void *)this + 34);
          int v19 = (char *)*((void *)this + 35);
          if (v19 != v20)
          {
            do
            {
              uint64_t v21 = *((void *)v19 - 1);
              v19 -= 8;
              *--int v18 = v21;
            }
            while (v19 != v20);
            int v19 = (char *)*((void *)this + 34);
          }
          *((void *)this + 34) = v18;
          *((void *)this + 35) = v9;
          *((void *)this + 36) = &v15[8 * v17];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          uint64_t *v8 = v5;
          int v9 = v8 + 1;
        }
        *((void *)this + 35) = v9;
        uint64_t v23 = (char *)*((void *)this + 32);
        unint64_t v22 = *((void *)this + 33);
        if ((unint64_t)v23 >= v22)
        {
          __int16 v25 = (unsigned char *)*((void *)this + 31);
          int64_t v26 = v23 - v25;
          unint64_t v27 = (unint64_t)(v23 - v25) >> 1;
          unint64_t v28 = (v22 - (unint64_t)v25) >> 1;
          if (2 * (int)v28 <= (v27 + 1)) {
            unsigned int v29 = v27 + 1;
          }
          else {
            unsigned int v29 = 2 * v28;
          }
          if (v28 >= 0x7FFFFFFF) {
            uint64_t v30 = 0xFFFFFFFFLL;
          }
          else {
            uint64_t v30 = v29;
          }
          if (v30)
          {
            int v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)this + 264, v30);
            uint64_t v33 = v32;
            __int16 v25 = (unsigned char *)*((void *)this + 31);
            uint64_t v23 = (char *)*((void *)this + 32);
          }
          else
          {
            int v31 = 0;
            uint64_t v33 = 0;
          }
          char v34 = &v31[v26 & 0x1FFFFFFFELL];
          *(_WORD *)char v34 = 0;
          __int16 v24 = v34 + 2;
          while (v23 != v25)
          {
            __int16 v35 = *((_WORD *)v23 - 1);
            v23 -= 2;
            *((_WORD *)v34 - 1) = v35;
            v34 -= 2;
          }
          *((void *)this + 31) = v34;
          *((void *)this + 32) = v24;
          *((void *)this + 33) = &v31[2 * v33];
          if (v25) {
            operator delete(v25);
          }
        }
        else
        {
          *(_WORD *)uint64_t v23 = 0;
          __int16 v24 = v23 + 2;
        }
        *((void *)this + 32) = v24;
        int v4 = (__int16)(v4 + 1);
      }
      while (v4 < *((__int16 *)this + 172));
    }
    unint64_t v36 = *((void *)this + 33);
    if ((unint64_t)v24 >= v36)
    {
      char v38 = (char *)*((void *)this + 31);
      int64_t v39 = v24 - v38;
      unint64_t v40 = (unint64_t)(v24 - v38) >> 1;
      unint64_t v41 = (v36 - (unint64_t)v38) >> 1;
      if (2 * (int)v41 <= (v40 + 1)) {
        unsigned int v42 = v40 + 1;
      }
      else {
        unsigned int v42 = 2 * v41;
      }
      if (v41 >= 0x7FFFFFFF) {
        uint64_t v43 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v43 = v42;
      }
      if (v43)
      {
        __int16 v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)this + 264, v43);
        uint64_t v46 = v45;
        char v38 = (char *)*((void *)this + 31);
        __int16 v24 = (char *)*((void *)this + 32);
      }
      else
      {
        __int16 v44 = 0;
        uint64_t v46 = 0;
      }
      int v47 = &v44[v39 & 0x1FFFFFFFELL];
      char v48 = &v44[2 * v46];
      *(_WORD *)int v47 = 0;
      int v37 = v47 + 2;
      while (v24 != v38)
      {
        __int16 v49 = *((_WORD *)v24 - 1);
        v24 -= 2;
        *((_WORD *)v47 - 1) = v49;
        v47 -= 2;
      }
      *((void *)this + 31) = v47;
      *((void *)this + 32) = v37;
      *((void *)this + 33) = v48;
      if (v38) {
        operator delete(v38);
      }
    }
    else
    {
      *(_WORD *)__int16 v24 = 0;
      int v37 = v24 + 2;
    }
    *((void *)this + 32) = v37;
  }
}

uint64_t WrdTableProperties::getTableCellDescriptorReference(WrdTableProperties *this, unsigned int a2)
{
  int v4 = *((__int16 *)this + 172);
  if (v4 <= (int)a2) {
    WrdTableProperties::insertCells(this, (__int16)v4, (__int16)(a2 - v4 + 1), 0);
  }
  *((void *)this + 2) |= 0x2000uLL;
  return *(void *)(*((void *)this + 34) + 8 * a2);
}

uint64_t WrdTableCellDescriptor::setIsFirstInRangeOfMergedCells(WrdTableCellDescriptor *this, char a2)
{
  int v3 = *((_DWORD *)this + 2);
  uint64_t result = (uint64_t)this + 8;
  *(_DWORD *)uint64_t result = v3 | 0x80000000;
  *(_WORD *)(result + 122) = *(_WORD *)(result + 122) & 0xFFFE | a2 & 1;
  return result;
}

uint64_t WrdTableCellDescriptor::setIsMergedWithPrecedingCell(WrdTableCellDescriptor *this, char a2)
{
  int v3 = *((_DWORD *)this + 2);
  uint64_t result = (uint64_t)this + 8;
  char v4 = *(unsigned char *)(result + 4);
  *(_DWORD *)uint64_t result = v3;
  *(unsigned char *)(result + 4) = v4 | 1;
  *(_WORD *)(result + 122) = *(_WORD *)(result + 122) & 0xFFFD | (2 * (a2 & 1));
  return result;
}

uint64_t WrdTableCellDescriptor::setVerticalTextFlow(WrdTableCellDescriptor *this, char a2)
{
  int v3 = *((_DWORD *)this + 2);
  uint64_t result = (uint64_t)this + 8;
  char v4 = *(unsigned char *)(result + 4);
  *(_DWORD *)uint64_t result = v3;
  *(unsigned char *)(result + 4) = v4 | 2;
  *(_WORD *)(result + 122) = *(_WORD *)(result + 122) & 0xFFFB | (4 * (a2 & 1));
  return result;
}

uint64_t WrdTableCellDescriptor::setBottomToTopTextFlow(WrdTableCellDescriptor *this, char a2)
{
  int v3 = *((_DWORD *)this + 2);
  uint64_t result = (uint64_t)this + 8;
  char v4 = *(unsigned char *)(result + 4);
  *(_DWORD *)uint64_t result = v3;
  *(unsigned char *)(result + 4) = v4 | 4;
  *(_WORD *)(result + 122) = *(_WORD *)(result + 122) & 0xFFF7 | (8 * (a2 & 1));
  return result;
}

uint64_t WrdTableCellDescriptor::setRotateFont(WrdTableCellDescriptor *this, char a2)
{
  int v3 = *((_DWORD *)this + 2);
  uint64_t result = (uint64_t)this + 8;
  char v4 = *(unsigned char *)(result + 4);
  *(_DWORD *)uint64_t result = v3;
  *(unsigned char *)(result + 4) = v4 | 8;
  *(_WORD *)(result + 122) = *(_WORD *)(result + 122) & 0xFFEF | (16 * (a2 & 1));
  return result;
}

uint64_t WrdTableCellDescriptor::setIsVerticallyMergedCell(WrdTableCellDescriptor *this, char a2)
{
  int v3 = *((_DWORD *)this + 2);
  uint64_t result = (uint64_t)this + 8;
  char v4 = *(unsigned char *)(result + 4);
  *(_DWORD *)uint64_t result = v3;
  *(unsigned char *)(result + 4) = v4 | 0x10;
  *(_WORD *)(result + 122) = *(_WORD *)(result + 122) & 0xFFDF | (32 * (a2 & 1));
  return result;
}

uint64_t WrdTableCellDescriptor::setIsFirstInSetOfVerticallyMergedCells(WrdTableCellDescriptor *this, char a2)
{
  int v3 = *((_DWORD *)this + 2);
  uint64_t result = (uint64_t)this + 8;
  char v4 = *(unsigned char *)(result + 4);
  *(_DWORD *)uint64_t result = v3;
  *(unsigned char *)(result + 4) = v4 | 0x20;
  *(_WORD *)(result + 122) = *(_WORD *)(result + 122) & 0xFFBF | ((a2 & 1) << 6);
  return result;
}

int *WrdTableCellDescriptor::setVerticalCellAlignment(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t result = (int *)(a1 + 8);
  *uint64_t result = v3 | 0x1000;
  result[16] = a2;
  return result;
}

uint64_t WrdTableCellDescriptor::setWidth(WrdTableCellDescriptor *this, __int16 a2)
{
  int v3 = *((_DWORD *)this + 2);
  uint64_t result = (uint64_t)this + 8;
  *(_DWORD *)uint64_t result = v3 | 0x400000;
  *(_WORD *)(result + 104) = a2;
  return result;
}

uint64_t WrdTableCellDescriptor::getTopBorderReference(WrdTableCellDescriptor *this)
{
  int v2 = *((_DWORD *)this + 2);
  uint64_t v1 = (char *)this + 8;
  *(_DWORD *)uint64_t v1 = v2 | 2;
  return *((void *)v1 + 2);
}

uint64_t WrdTableCellDescriptor::getLeftBorderReference(WrdTableCellDescriptor *this)
{
  int v2 = *((_DWORD *)this + 2);
  uint64_t v1 = (char *)this + 8;
  *(_DWORD *)uint64_t v1 = v2 | 4;
  return *((void *)v1 + 3);
}

uint64_t WrdTableCellDescriptor::getBottomBorderReference(WrdTableCellDescriptor *this)
{
  int v2 = *((_DWORD *)this + 2);
  uint64_t v1 = (char *)this + 8;
  *(_DWORD *)uint64_t v1 = v2 | 8;
  return *((void *)v1 + 4);
}

uint64_t WrdTableCellDescriptor::getRightBorderReference(WrdTableCellDescriptor *this)
{
  int v2 = *((_DWORD *)this + 2);
  uint64_t v1 = (char *)this + 8;
  *(_DWORD *)uint64_t v1 = v2 | 0x10;
  return *((void *)v1 + 5);
}

uint64_t WrdFileInformationBlockHeader::isBiDiLanguage(WrdFileInformationBlockHeader *this)
{
  int v1 = *(_DWORD *)this;
  uint64_t result = 1;
  if (v1 > 7168)
  {
    if (v1 > 12288)
    {
      if (v1 <= 14336)
      {
        BOOL v3 = v1 == 12289;
        int v4 = 13313;
      }
      else
      {
        BOOL v3 = v1 == 14337 || v1 == 15361;
        int v4 = 16385;
      }
    }
    else if (v1 <= 9216)
    {
      BOOL v3 = v1 == 7169;
      int v4 = 8193;
    }
    else
    {
      BOOL v3 = v1 == 9217 || v1 == 10241;
      int v4 = 11265;
    }
    goto LABEL_31;
  }
  if (v1 <= 2048)
  {
    if (v1 <= 1024)
    {
      if (v1 != 1 && v1 != 13) {
        return 0;
      }
      return result;
    }
    if (v1 == 1025 || v1 == 1037) {
      return result;
    }
    return 0;
  }
  if (v1 <= 4096)
  {
    if (v1 == 2049 || v1 == 3073) {
      return result;
    }
    return 0;
  }
  BOOL v3 = v1 == 4097 || v1 == 5121;
  int v4 = 6145;
LABEL_31:
  if (!v3 && v1 != v4) {
    return 0;
  }
  return result;
}

WrdTableProperties *WrdTableProperties::upgradeToVersion10(WrdTableProperties *this)
{
  uint64_t v1 = *((void *)this + 2);
  int v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    if ((v1 & 0x100000) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    int v3 = *((_DWORD *)this + 74);
    v2 |= 1u;
    *((void *)this + 2) = v1;
    *((_DWORD *)this + 6) = v2;
    *((_WORD *)this + 174) = v3;
    if ((v1 & 0x100000) != 0)
    {
LABEL_3:
      if ((v2 & 4) != 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  v1 |= 0x100000uLL;
  *((void *)this + 2) = v1;
  *((_DWORD *)this + 6) = v2;
  *((_DWORD *)this + 38) = 3;
  if ((v2 & 4) != 0)
  {
LABEL_4:
    if ((v1 & 0x400000) != 0) {
      return this;
    }
LABEL_9:
    *((void *)this + 2) = v1 | 0x400000;
    *((_DWORD *)this + 6) = v2;
    *((_DWORD *)this + 40) = 3;
    return this;
  }
LABEL_8:
  int v4 = *((_DWORD *)this + 74);
  v2 |= 4u;
  *((void *)this + 2) = v1;
  *((_DWORD *)this + 6) = v2;
  *((_WORD *)this + 176) = v4;
  if ((v1 & 0x400000) == 0) {
    goto LABEL_9;
  }
  return this;
}

void sub_238B476A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B4779C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B47878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B47B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v14 = v13;

  _Unwind_Resume(a1);
}

void sub_238B47C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B48158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B48344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B4896C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B48A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B48B1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B48C40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B48E40(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, WrdCharacterTextRun *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  WrdCharacterTextRun::~WrdCharacterTextRun((WrdCharacterTextRun *)&a14);
  if (a2 == 3)
  {
    unsigned int v16 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v16);
    __cxa_end_catch();
  }
  else
  {
    uint64_t v17 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      [v17 raise];
    }
    else {
      +[TCMessageException raise:TCUnknownProblemMessage];
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x238B48E08);
}

void sub_238B48F20(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  if (a2 == 2)
  {
    [objc_begin_catch(exc_buf) raise];
    objc_end_catch();
    JUMPOUT(0x238B48EF4);
  }

  _Unwind_Resume(exc_buf);
}

void sub_238B490B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B49200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B49404(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B49500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B49640(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_238B49730(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B49860(void *a1, int a2)
{
  if (a2 == 3)
  {
    uint64_t v6 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v6);
    __cxa_end_catch();
  }
  else
  {
    unint64_t v7 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      [v7 raise];
    }
    else {
      +[TCMessageException raise:TCUnknownProblemMessage];
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x238B49828);
}

void sub_238B498F4(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (a2 == 2)
  {
    [objc_begin_catch(exc_buf) raise];
    objc_end_catch();
    JUMPOUT(0x238B49828);
  }

  _Unwind_Resume(exc_buf);
}

void sub_238B49A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238B49FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WrdTableProperties::insertCells(WrdTableProperties *this, signed int a2, int a3, int a4)
{
  if ((a3 | a2 | a4) < 0 || (unsigned int v4 = a2, v6 = *((__int16 *)this + 172), v6 < a2))
  {
    ChLogFunction("WrdTableProperties::insertCells with bad arguments-- skipping\n", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Model/WrdTableProperties.cpp", 1256);
  }
  else
  {
    __int16 v7 = a4;
    __int16 v8 = a3;
    *((void *)this + 2) |= 0x2000000000000000uLL;
    signed int v9 = (__int16)(v6 + a3);
    uint64_t v10 = (void *)((char *)this + 248);
    std::vector<short,ChAllocator<short>>::resize((uint64_t)this + 248, v9 + 1);
    unint64_t v11 = (void *)((char *)this + 272);
    uint64_t v13 = *((void *)this + 34);
    uint64_t v12 = *((void *)this + 35);
    uint64_t v14 = v12 - v13;
    unsigned int v15 = (v12 - v13) >> 3;
    std::vector<EshHeader *,ChAllocator<EshHeader *>>::resize((uint64_t)this + 272, v9);
    if (v9 > (__int16)v15)
    {
      uint64_t v16 = v14 << 45 >> 48;
      do
        *(void *)(*v11 + 8 * v16++) = 0;
      while (v9 != v16);
    }
    signed int v17 = (__int16)(v8 + v4);
    for (signed int i = (__int16)(v9 - 1); i >= v17; signed int i = (__int16)(i - 1))
    {
      unsigned int v19 = (__int16)(i - v8);
      *(_WORD *)(*v10 + 2 * ((__int16)i + 1)) = *(_WORD *)(*v10 + 2 * (v19 + 1)) + v7 * v8;
      *(void *)(*v11 + 8 * (__int16)i) = *(void *)(*v11 + 8 * v19);
    }
    if (v17 > (int)v4)
    {
      do
      {
        unsigned int v20 = (_WORD *)*v10;
        if ((int)v4 < 1)
        {
          _WORD *v20 = 0;
          v20[1] = v7;
          **((void **)this + 34) = (*(uint64_t (**)(void))(**((void **)this + 5) + 16))(*((void *)this + 5));
          uint64_t v22 = v4++;
        }
        else
        {
          v20[v4 + 1] = v20[v4] + v7;
          uint64_t v21 = *(void *)(*v11 + 8 * (v4 - 1));
          if (!v21)
          {
            exception = __cxa_allocate_exception(4uLL);
            _DWORD *exception = 1004;
          }
          uint64_t v22 = v4;
          *(void *)(*v11 + 8 * v4++) = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 16))(v21);
        }
        WrdTableCellDescriptor::setWidth(*(WrdTableCellDescriptor **)(*v11 + 8 * v22), v7);
        WrdTableCellDescriptor::setWidthUnit(*(void *)(*v11 + 8 * v22), 3);
      }
      while ((unsigned __int16)v17 != (unsigned __int16)v4);
    }
    *((_WORD *)this + 172) = v9;
  }
}

int *WrdTableCellDescriptor::setWidthUnit(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t result = (int *)(a1 + 8);
  *uint64_t result = v3 | 0x2000;
  result[17] = a2;
  return result;
}

void sub_238B4A704(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WrdParagraphTextRun::~WrdParagraphTextRun(WrdParagraphTextRun *this)
{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBE67A0;
  unsigned int var4 = this->var4;
  if (var4) {
    (*(void (**)(WrdParagraphProperties *))(*(void *)var4 + 8))(var4);
  }
  this->unsigned int var4 = 0;
  var5 = this->var5;
  if (var5) {
    (*(void (**)(WrdParagraphProperties *))(*(void *)var5 + 8))(var5);
  }
  this->var5 = 0;
  var6 = this->var6;
  if (var6) {
    (*(void (**)(WrdTableProperties *))(*(void *)var6 + 8))(var6);
  }
  this->var6 = 0;
  var7 = this->var7;
  if (var7) {
    (*(void (**)(WrdTableProperties *))(*(void *)var7 + 8))(var7);
  }
  this->var7 = 0;
}

{
  uint64_t vars8;

  WrdParagraphTextRun::~WrdParagraphTextRun(this);
  JUMPOUT(0x23EC997B0);
}

void purgeTextRuns(NSMutableArray *a1)
{
  uint64_t v5 = a1;
  uint64_t v1 = [(NSMutableArray *)v5 count];
  if (v1)
  {
    for (uint64_t i = 0; i != v1; ++i)
    {
      int v3 = [(NSMutableArray *)v5 objectAtIndex:i];
      uint64_t v4 = [v3 pointerValue];
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
  }
  [(NSMutableArray *)v5 removeAllObjects];
}

void sub_238B4A910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B4A9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B4ADEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B4B2C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B4B400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B4B9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B4BCB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B4BDC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void EshMetafileBlip::~EshMetafileBlip(EshMetafileBlip *this)
{
  *(void *)this = &unk_26EBD7648;
  OcBinaryData::~OcBinaryData((OcBinaryData *)this + 4);
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 72));
  EshBlip::~EshBlip((EshBlip *)this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBD7648;
  OcBinaryData::~OcBinaryData((OcBinaryData *)this + 4);
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 72));
  EshBlip::~EshBlip((EshBlip *)this);
}

void WrdEshShape::~WrdEshShape(WrdEshShape *this)
{
  *(void *)this = &unk_26EBE5E80;
  *((void *)this + 52) = &unk_26EBE5F50;
  XlEshShape::cleanup(this);
  EshContentBase::~EshContentBase(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBE5E80;
  *((void *)this + 52) = &unk_26EBE5F50;
  XlEshShape::cleanup(this);
  EshContentBase::~EshContentBase(this);
}

uint64_t XlEshShape::cleanup(XlEshShape *this)
{
  uint64_t v2 = *((void *)this + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 72) = 0;
  uint64_t v3 = *((void *)this + 73);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 73) = 0;
  uint64_t result = *((void *)this + 74);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 74) = 0;
  return result;
}

void WrdEshClientAnchor::~WrdEshClientAnchor(WrdEshClientAnchor *this)
{
}

void sub_238B4C0BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B4C6D4()
{
  objc_end_catch();
  JUMPOUT(0x238B4C6E0);
}

void sub_238B4C6E8()
{
}

void sub_238B4C91C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_238B4CC34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B4CE5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B4CF94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B4D0CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B4D254(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_238B4D344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B4D530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B4D6B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B4D788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B4D944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B4DB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B4DC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B4DDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B4E11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  signed int v17 = v12;

  _Unwind_Resume(a1);
}

void sub_238B4E26C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B4E320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B4E4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B4E634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B4E6F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B4E7A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B4EAAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B4ED78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B4EE94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B4EFF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B4F1C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B4F6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B4FD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B4FFC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B50070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B501E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B50464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B506C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B5081C(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_238B50948(_Unwind_Exception *a1)
{
  __int16 v7 = v5;

  _Unwind_Resume(a1);
}

void sub_238B50B3C(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_238B5103C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B51C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B51ED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B51F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B5200C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B520A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B521C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B52264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B52500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B526B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B527C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B5285C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B52A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B52C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v14 = v13;

  _Unwind_Resume(a1);
}

void sub_238B52D50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B52E5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B5312C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B532DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B53454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B53540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B5366C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B53718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B53924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B53A34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B53CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238B53E7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B53EE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B541BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B54310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B543C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B54424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B54508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B54798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B54A0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B54B18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B54C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B54FA8(void *a1)
{
}

void sub_238B54FB8(void *a1)
{
  objc_begin_catch(a1);
  objc_end_catch();
  if (!v1) {
    JUMPOUT(0x238B54F24);
  }
  JUMPOUT(0x238B54F1CLL);
}

void sub_238B54FCC(void *a1)
{
}

void sub_238B54FDC(_Unwind_Exception *a1)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_238B5500C(void *a1, int a2)
{
  objc_begin_catch(a1);
  if (a2 == 2)
  {

    objc_end_catch();
  }
  JUMPOUT(0x238B54F48);
}

void sub_238B551C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v14 = v13;

  _Unwind_Resume(a1);
}

void sub_238B55390(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B55490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B556D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B557B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B55AE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B55BB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B55C50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B55CE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B55DB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B55E8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B55F20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B5606C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B560FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B561E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B562FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B5661C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B566C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B56780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B56820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B56C30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B56E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B56EE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B56FB4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x238B56F98);
  }
  _Unwind_Resume(a1);
}

void sub_238B5706C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x238B57054);
  }
  _Unwind_Resume(exception_object);
}

void sub_238B573AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B575B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B57700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B5779C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B57988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B57A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238B57D18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B57DE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B58038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B584C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B58BB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B58CB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B58E60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B59000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B59094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B59384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238B594D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B59568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B5977C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B59990(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_238B59BEC(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_238B59EB8(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_238B59FC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B5A0B4(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_238B5A144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B5A348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238B5A51C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B5A5EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B5A8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B5AAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B5ADEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B5B574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B5B638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B5B838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B5B8E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B5B940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)WMState;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_238B5BCD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)WBReader;
  [(_Unwind_Exception *)&a10 dealloc];
  _Unwind_Resume(a1);
}

uint64_t **WrdParser::closeDoc(WrdParser *this)
{
  uint64_t v2 = (WrdParser *)((char *)this + 24);
  uint64_t result = (uint64_t **)SsrwOORootStorage::isOpen((WrdParser *)((char *)this + 24));
  if (result)
  {
    uint64_t v4 = *((void *)this + 18);
    if (v4)
    {
      uint64_t v5 = v4 - 16;
      uint64_t v6 = *(void *)(v4 - 8);
      if (v6)
      {
        uint64_t v7 = 184 * v6;
        uint64_t v8 = v4 - 184;
        do
        {
          TSURectWithOriginAndSize(v8 + v7);
          v7 -= 184;
        }
        while (v7);
      }
      MEMORY[0x23EC99790](v5, 0x1020C80285AA8CALL);
    }
    *((void *)this + 18) = 0;
    *((_DWORD *)this + 2) = 0;
    signed int v9 = (void *)*((void *)this + 34);
    if (v9)
    {
      if (*v9) {
        MEMORY[0x23EC99790](*v9, 0x1000C8052888210);
      }
      *signed int v9 = 0;
      MEMORY[0x23EC997B0](v9, 0x1010C40A1D9428BLL);
    }
    *((void *)this + 34) = 0;
    uint64_t v10 = *((void *)this + 16);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    *((void *)this + 16) = 0;
    uint64_t v11 = *((void *)this + 14);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    *((void *)this + 14) = 0;
    uint64_t v12 = *((void *)this + 15);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    *((void *)this + 15) = 0;
    uint64_t v13 = (SsrwOOStorage *)*((void *)this + 17);
    if (v13)
    {
      SsrwOOStorage::~SsrwOOStorage(v13);
      MEMORY[0x23EC997B0]();
    }
    *((void *)this + 17) = 0;
    uint64_t result = SsrwOORootStorage::close(v2, 0);
  }
  *((void *)this + 2) = 0;
  return result;
}

void WrdParser::~WrdParser(WrdParser *this)
{
  WrdParser::~WrdParser(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_26EBE77E0;
  WrdParser::closeDoc(this);
  uint64_t v2 = *((void *)this + 35);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 35) = 0;
  uint64_t v3 = *((void *)this + 36);
  if (v3) {
    MEMORY[0x23EC99790](v3, 0x1000C8077774924);
  }
  *((void *)this + 36) = 0;
  WrdFileInformationBlock::~WrdFileInformationBlock((WrdParser *)((char *)this + 160));
  SsrwOORootStorage::~SsrwOORootStorage((WrdParser *)((char *)this + 24));
  OcParser::OcParser(this);
}

void WrdObjectFactory::~WrdObjectFactory(WrdObjectFactory *this)
{
  *(void *)this = &unk_26EBE6608;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 1) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBE6608;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 1) = 0;
}

void WrdEshObjectFactory::~WrdEshObjectFactory(WrdEshObjectFactory *this)
{
}

void WrdFileInformationBlock::~WrdFileInformationBlock(WrdFileInformationBlock *this)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C80BDFB0063);
  }
  *((void *)this + 6) = 0;
  uint64_t v3 = *((void *)this + 8);
  if (v3) {
    MEMORY[0x23EC99790](v3, 0x1000C8052888210);
  }
  *((void *)this + 8) = 0;
  uint64_t v4 = *((void *)this + 10);
  if (v4) {
    MEMORY[0x23EC99790](v4, 0x1000C8000313F17);
  }
  *((void *)this + 10) = 0;
  TSURectWithOriginAndSize(this);
}

void WrdRdrText::~WrdRdrText(WrdRdrText *this)
{
  *(void *)this = &unk_26EBE7848;
  WrdPieceTable::~WrdPieceTable((WrdRdrText *)((char *)this + 72));
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBE7848;
  WrdPieceTable::~WrdPieceTable((WrdRdrText *)((char *)this + 72));
}

void WrdPieceTable::~WrdPieceTable(WrdPieceTable *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8052888210);
  }
  *((void *)this + 1) = 0;
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    MEMORY[0x23EC99790](v3, 0x1000C80C899CFE7);
  }
  *((void *)this + 2) = 0;
}

void WrdCHPXFKP::~WrdCHPXFKP(WrdCHPXFKP *this)
{
  WrdFormattedDiskPage::~WrdFormattedDiskPage(this);
  JUMPOUT(0x23EC997B0);
}

void WrdFormattedDiskPage::~WrdFormattedDiskPage(WrdFormattedDiskPage *this)
{
  *(void *)this = &unk_26EBE61A0;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 152))(v3, 0);
    uint64_t v4 = *((void *)this + 4);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    *((void *)this + 4) = 0;
  }
}

void SsrwOOMemStream::~SsrwOOMemStream(SsrwOOMemStream *this)
{
  *(void *)this = &unk_26EBDA218;
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBDA218;
}

void WrdPAPXFKP::~WrdPAPXFKP(WrdPAPXFKP *this)
{
  WrdFormattedDiskPage::~WrdFormattedDiskPage(this);
  JUMPOUT(0x23EC997B0);
}

void WrdSectionDescriptorTable::~WrdSectionDescriptorTable(WrdSectionDescriptorTable *this)
{
  *(void *)this = &unk_26EBE69D0;
  WrdSectionDescriptorTable::cleanup(this);
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBE69D0;
  WrdSectionDescriptorTable::cleanup(this);
}

void WrdEmbeddedTTFRecordTable::~WrdEmbeddedTTFRecordTable(WrdEmbeddedTTFRecordTable *this)
{
  WrdEmbeddedTTFRecordTable::~WrdEmbeddedTTFRecordTable(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBE5A50;
  WrdEmbeddedTTFRecordTable::clear((uint64_t)this);
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

uint64_t WrdEmbeddedTTFRecordTable::clear(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 8);
  if (((*(void *)(this + 16) - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v3 = 0;
    do
    {
      this = *(void *)(v2 + 8 * v3);
      if (this)
      {
        this = MEMORY[0x23EC997B0](this, 0x1000C40CE7E837CLL);
        uint64_t v2 = *(void *)(v1 + 8);
      }
      *(void *)(v2 + 8 * v3++) = 0;
      uint64_t v2 = *(void *)(v1 + 8);
    }
    while (v3 < ((unint64_t)(*(void *)(v1 + 16) - v2) >> 3));
  }
  *(void *)(v1 + 16) = v2;
  return this;
}

void WrdDocumentFileRecord::~WrdDocumentFileRecord(WrdDocumentFileRecord *this)
{
  WrdDocumentFileRecord::~WrdDocumentFileRecord(this);
  JUMPOUT(0x23EC997B0);
}

{
  OcBinaryData *v2;
  void *v3;

  *(void *)this = &unk_26EBE58D0;
  *((void *)this + 2) = *((void *)this + 1);
  uint64_t v2 = (OcBinaryData *)((char *)this + 32);
  OcBinaryData::removeBuffer((OcBinaryData *)((char *)this + 32));
  OcBinaryData::~OcBinaryData(v2);
  unint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

void WrdNoteTable::~WrdNoteTable(WrdNoteTable *this)
{
  WrdNoteTable::~WrdNoteTable(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBE6588;
  WrdBookmarkTable::clear(this);
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

void WrdAnnotationTable::~WrdAnnotationTable(WrdAnnotationTable *this)
{
  WrdAnnotationTable::~WrdAnnotationTable(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBE53C8;
  WrdAnnotationDateTimeTable::clear(this);
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

void WrdCPTableHeaders::~WrdCPTableHeaders(WrdCPTableHeaders *this)
{
  WrdCPTable::~WrdCPTable(this);
  JUMPOUT(0x23EC997B0);
}

void WrdBookmarkTable::~WrdBookmarkTable(WrdBookmarkTable *this)
{
  WrdBookmarkTable::~WrdBookmarkTable(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBE5590;
  WrdBookmarkTable::clear(this);
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

void WrdBookmark::~WrdBookmark(WrdBookmark *this)
{
  WrdBookmark::~WrdBookmark(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBE5518;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 4) = 0;
  CsString::~CsString((CsString *)((char *)this + 8));
}

void WrdStoryTable::~WrdStoryTable(WrdStoryTable *this)
{
  WrdStoryTable::~WrdStoryTable(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBE6B50;
  WrdBookmarkTable::clear(this);
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

void WrdFileShapeAddressTable::~WrdFileShapeAddressTable(WrdFileShapeAddressTable *this)
{
  WrdFileShapeAddressTable::~WrdFileShapeAddressTable(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBE60E0;
  WrdBookmarkTable::clear(this);
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

void WrdFieldPositionTable::~WrdFieldPositionTable(WrdFieldPositionTable *this)
{
  WrdFieldPositionTable::~WrdFieldPositionTable(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBE6060;
  WrdBookmarkTable::clear(this);
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

void WrdFieldPosition::~WrdFieldPosition(WrdFieldPosition *this)
{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBE6020;
  unsigned int var2 = this->var2;
  if (var2) {
    (*(void (**)(WrdFieldDescriptor *))(*(void *)var2 + 8))(var2);
  }
  this->unsigned int var2 = 0;
  JUMPOUT(0x23EC997B0);
}

{
  WrdFieldDescriptor *var2;

  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBE6020;
  unsigned int var2 = this->var2;
  if (var2) {
    (*(void (**)(WrdFieldDescriptor *))(*(void *)var2 + 8))(var2);
  }
  this->unsigned int var2 = 0;
}

void WrdFieldDescriptor::~WrdFieldDescriptor(WrdFieldDescriptor *this)
{
}

void WrdBinaryReader::~WrdBinaryReader(WrdBinaryReader *this)
{
  WrdBinaryReader::~WrdBinaryReader(this);
  JUMPOUT(0x23EC997B0);
}

{
  OcReader *v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  WrdBinTable *v6;
  WrdBinTable *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t k;

  *(void *)this = &unk_26EBE7240;
  uint64_t v2 = (OcReader *)((char *)this + 8);
  *((void *)this + 1) = &unk_26EBE7428;
  *((void *)this + 3) = &unk_26EBE75E8;
  unint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    *((void *)this + 4) = 0;
  }
  for (uint64_t i = 0; i != 192; i += 24)
  {
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + i + 224, *(void **)((char *)this + i + 232));
    *(void *)((char *)this + i + 224) = (char *)this + i + 232;
    *(void *)((char *)this + i + 232) = 0;
    *(void *)((char *)this + i + 240) = 0;
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + i + 416, *(void **)((char *)this + i + 424));
    *(void *)((char *)this + i + 424) = 0;
    *(void *)((char *)this + i + 432) = 0;
    *(void *)((char *)this + i + 416) = (char *)this + i + 424;
  }
  uint64_t v5 = *((void *)this + 17);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 17) = 0;
  uint64_t v6 = (WrdBinTable *)*((void *)this + 18);
  if (v6)
  {
    WrdBinTable::~WrdBinTable(v6);
    MEMORY[0x23EC997B0]();
  }
  *((void *)this + 18) = 0;
  uint64_t v7 = (WrdBinTable *)*((void *)this + 21);
  if (v7)
  {
    WrdBinTable::~WrdBinTable(v7);
    MEMORY[0x23EC997B0]();
  }
  *((void *)this + 21) = 0;
  uint64_t v8 = *((void *)this + 22);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *((void *)this + 22) = 0;
  signed int v9 = *((void *)this + 19);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *((void *)this + 19) = 0;
  uint64_t v10 = *((void *)this + 24);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  *((void *)this + 24) = 0;
  uint64_t v11 = *((void *)this + 25);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  *((void *)this + 25) = 0;
  uint64_t v12 = *((void *)this + 26);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  *((void *)this + 26) = 0;
  uint64_t v13 = *((void *)this + 27);
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  *((void *)this + 27) = 0;
  uint64_t v14 = *((void *)this + 87);
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  *((void *)this + 87) = 0;
  *((void *)this + 79) = &unk_26EBE6E88;
  OcText::~OcText((OcText *)((char *)this + 640));
  for (int j = 0; j != -192; j -= 24)
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + j + 584, *(void **)((char *)this + j + 592));
  for (int k = 0; k != -192; k -= 24)
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + k + 392, *(void **)((char *)this + k + 400));
  EshBinaryReader::~EshBinaryReader((WrdBinaryReader *)((char *)this + 40));
  OcReader::~OcReader(v2);
}

void *WrdClxGrpprls::reallocGrpprls(const void **this, unsigned int a2)
{
  __int16 v2 = a2;
  uint64_t v4 = *this;
  uint64_t result = operator new[](4 * a2);
  uint64_t v6 = result;
  if (v4)
  {
    memcpy(result, *this, 4 * *((unsigned __int16 *)this + 4));
    uint64_t result = (void *)*this;
    if (*this) {
      uint64_t result = (void *)MEMORY[0x23EC99790](result, 0x1000C8052888210);
    }
  }
  *this = v6;
  *((_WORD *)this + 4) = v2;
  return result;
}

WrdStyleSheet *WrdStyleSheet::operator=(WrdStyleSheet *this, uint64_t a2)
{
  *((void *)this + 1) = *(void *)(a2 + 8);
  uint64_t v4 = *((void *)this + 3);
  unint64_t v5 = *((void *)this + 4) - v4;
  if ((v5 & 0x7FFFFFFF8) != 0)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (v5 >> 3);
    do
    {
      uint64_t v8 = *((void *)this + 3);
      uint64_t v9 = *(void *)(v8 + 8 * v6);
      if (v9)
      {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        uint64_t v8 = *((void *)this + 3);
      }
      *(void *)(v8 + 8 * v6++) = 0;
    }
    while (v7 != v6);
    uint64_t v4 = *((void *)this + 3);
  }
  *((void *)this + 4) = v4;
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  unint64_t v12 = v10 - v11;
  WrdStyleSheet::setNumberOfStyles(this, (unsigned __int16)((v10 - v11) >> 3));
  if ((v12 & 0x7FFFFFFF8) != 0)
  {
    uint64_t v13 = 0;
    uint64_t v14 = (v12 >> 3);
    do
    {
      WrdStyle::operator=(*(void *)(*((void *)this + 3) + 8 * v13), *(void *)(*(void *)(a2 + 24) + 8 * v13));
      ++v13;
    }
    while (v14 != v13);
  }
  *((_WORD *)this + 180) = *(_WORD *)(a2 + 360);
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::setFontIndexForFarEastAsianText(WrdCharacterProperties *this, unsigned __int16 a2)
{
  *(void *)&this->var2 |= 0x4000uLL;
  this->var44 = a2;
  return this;
}

void WrdCharacterProperties::applyBaseProperties(WrdCharacterProperties *this, const WrdCharacterProperties *a2)
{
  WrdCharacterProperties::applyImplictProperties(this, a2);
  unint64_t v4 = *((unsigned int *)&this->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&this->var2 + 6) << 32);
  uint64_t var2 = (uint64_t)this->var2;
  if ((var2 & 2) == 0 && (*(void *)&a2->var2 & 2) != 0)
  {
    var2 |= 2uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var23 = a2->var23;
  }
  if ((var2 & 4) == 0 && (*(void *)&a2->var2 & 4) != 0)
  {
    var2 |= 4uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var24 = a2->var24;
  }
  if ((var2 & 0x10) == 0 && (*(void *)&a2->var2 & 0x10) != 0)
  {
    var2 |= 0x10uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var25 = a2->var25;
  }
  if ((var2 & 0x10000000) == 0 && (*(void *)&a2->var2 & 0x10000000) != 0)
  {
    var2 |= 0x10000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var27 = a2->var27;
  }
  if ((var2 & 0x20000000) == 0 && (*(void *)&a2->var2 & 0x20000000) != 0)
  {
    var2 |= 0x20000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var28 = a2->var28;
  }
  if ((var2 & 0x20) == 0 && (*(void *)&a2->var2 & 0x20) != 0)
  {
    var2 |= 0x20uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var29 = a2->var29;
  }
  if ((var2 & 0x40000000) == 0 && (*(void *)&a2->var2 & 0x40000000) != 0)
  {
    var2 |= 0x40000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 85) >> 1) & 1));
  }
  if ((var2 & 0x80) == 0 && (*(void *)&a2->var2 & 0x80) != 0)
  {
    var2 |= 0x80uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var26 = a2->var26;
  }
  if ((var2 & 0x80000000) == 0 && (*(_DWORD *)&a2->var2 & 0x80000000) != 0)
  {
    var2 |= 0x80000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 85) >> 2) & 1));
  }
  if ((var2 & 0x100) == 0 && (*(void *)&a2->var2 & 0x100) != 0)
  {
    var2 |= 0x100uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var30 = a2->var30;
  }
  if ((var2 & 0x100000000) == 0 && (*(void *)&a2->var2 & 0x100000000) != 0)
  {
    var2 |= 0x100000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFFF7 | (8 * ((*((_DWORD *)a2 + 85) >> 3) & 1));
  }
  if ((var2 & 0x200000000) == 0 && (*(void *)&a2->var2 & 0x200000000) != 0)
  {
    var2 |= 0x200000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFFEF | (16 * ((*((_DWORD *)a2 + 85) >> 4) & 1));
  }
  if ((var2 & 0x400000000) == 0 && (*(void *)&a2->var2 & 0x400000000) != 0)
  {
    var2 |= 0x400000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFFDF | (32 * ((*((_DWORD *)a2 + 85) >> 5) & 1));
  }
  if ((var2 & 0x200) == 0 && (*(void *)&a2->var2 & 0x200) != 0)
  {
    var2 |= 0x200uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var31 = a2->var31;
  }
  if ((var2 & 0x400) == 0 && (*(void *)&a2->var2 & 0x400) != 0)
  {
    var2 |= 0x400uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var32 = a2->var32;
  }
  if (var2 & 1) == 0 && (*(void *)&a2->var2)
  {
    var2 |= 1uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFFFE | *((_DWORD *)a2 + 85) & 1;
  }
  if ((var2 & 0x800) == 0 && (*(void *)&a2->var2 & 0x800) != 0)
  {
    var2 |= 0x800uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFFBF | (((*((_DWORD *)a2 + 85) >> 6) & 1) << 6);
  }
  if ((var2 & 0x800000000) == 0 && (*(void *)&a2->var2 & 0x800000000) != 0)
  {
    var2 |= 0x800000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var33 = a2->var33;
  }
  if ((var2 & 0x1000000000) == 0 && (*(void *)&a2->var2 & 0x1000000000) != 0)
  {
    var2 |= 0x1000000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var34 = a2->var34;
  }
  if ((var2 & 0x2000000000) == 0 && (*(void *)&a2->var2 & 0x2000000000) != 0)
  {
    var2 |= 0x2000000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var35 = a2->var35;
  }
  if ((var2 & 0x4000000000) == 0 && (*(void *)&a2->var2 & 0x4000000000) != 0)
  {
    var2 |= 0x4000000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var38 = a2->var38;
  }
  if ((var2 & 0x8000000000) == 0 && (*(void *)&a2->var2 & 0x8000000000) != 0)
  {
    var2 |= 0x8000000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFF7F | (((*((_DWORD *)a2 + 85) >> 7) & 1) << 7);
  }
  if ((var2 & 0x10000000000) == 0 && (*(void *)&a2->var2 & 0x10000000000) != 0)
  {
    var2 |= 0x10000000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFEFF | (((*((_DWORD *)a2 + 85) >> 8) & 1) << 8);
  }
  if ((var2 & 0x20000000000) == 0 && (*(void *)&a2->var2 & 0x20000000000) != 0)
  {
    var2 |= 0x20000000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFDFF | (((*((_DWORD *)a2 + 85) >> 9) & 1) << 9);
  }
  if ((var2 & 0x1000) == 0 && (*(void *)&a2->var2 & 0x1000) != 0)
  {
    var2 |= 0x1000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var62 = a2->var62;
  }
  if ((var2 & 0x2000) == 0 && (*(void *)&a2->var2 & 0x2000) != 0)
  {
    var2 |= 0x2000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var43 = a2->var43;
  }
  if ((var2 & 0x4000) == 0 && (*(void *)&a2->var2 & 0x4000) != 0)
  {
    var2 |= 0x4000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var44 = a2->var44;
  }
  if ((var2 & 0x8000) == 0 && (*(void *)&a2->var2 & 0x8000) != 0)
  {
    var2 |= 0x8000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var45 = a2->var45;
  }
  if ((var2 & 0x40000000000) == 0 && (*(void *)&a2->var2 & 0x40000000000) != 0)
  {
    var2 |= 0x40000000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var46 = a2->var46;
  }
  if ((var2 & 0x80000000000) == 0 && (*(void *)&a2->var2 & 0x80000000000) != 0)
  {
    var2 |= 0x80000000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var49 = a2->var49;
  }
  if ((var2 & 0x10000) == 0 && (*(void *)&a2->var2 & 0x10000) != 0)
  {
    var2 |= 0x10000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *(void *)((char *)&this->var2 + 14) = *(void *)((char *)&a2->var2 + 14);
  }
  if ((var2 & 0x20000) == 0 && (*(void *)&a2->var2 & 0x20000) != 0)
  {
    var2 |= 0x20000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var13 = a2->var13;
  }
  if ((var2 & 0x100000000000) == 0 && (*(void *)&a2->var2 & 0x100000000000) != 0)
  {
    var2 |= 0x100000000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var60 = a2->var60;
  }
  if ((var2 & 0x200000000000) == 0 && (*(void *)&a2->var2 & 0x200000000000) != 0)
  {
    var2 |= 0x200000000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var39 = a2->var39;
  }
  if ((var2 & 0x400000000000) == 0 && (*(void *)&a2->var2 & 0x400000000000) != 0)
  {
    var2 |= 0x400000000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var40 = a2->var40;
  }
  if ((var2 & 0x800000000000) == 0 && (*(void *)&a2->var2 & 0x800000000000) != 0)
  {
    var2 |= 0x800000000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var41 = a2->var41;
  }
  if ((var2 & 0x40000) == 0 && (*(void *)&a2->var2 & 0x40000) != 0)
  {
    var2 |= 0x40000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var14 = a2->var14;
  }
  if ((var2 & 0x1000000000000) == 0 && (*(void *)&a2->var2 & 0x1000000000000) != 0)
  {
    var2 |= 0x1000000000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xF7FFFFFF | (((*((_DWORD *)a2 + 85) >> 27) & 1) << 27);
  }
  if ((var2 & 0x80000) == 0 && (*(void *)&a2->var2 & 0x80000) != 0)
  {
    var2 |= 0x80000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var15 = a2->var15;
  }
  if ((var2 & 0x2000000000000) == 0 && (*(void *)&a2->var2 & 0x2000000000000) != 0)
  {
    var2 |= 0x2000000000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var107 = a2->var107;
  }
  if ((var2 & 0x100000) == 0 && (*(void *)&a2->var2 & 0x100000) != 0)
  {
    var2 |= 0x100000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var16 = a2->var16;
  }
  if ((var2 & 0x4000000000000) == 0 && (*(void *)&a2->var2 & 0x4000000000000) != 0)
  {
    var2 |= 0x4000000000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var17 = a2->var17;
  }
  if ((var2 & 0x8000000000000) == 0 && (*(void *)&a2->var2 & 0x8000000000000) != 0)
  {
    var2 |= 0x8000000000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var108 = a2->var108;
  }
  if ((var2 & 0x10000000000000) == 0 && (*(void *)&a2->var2 & 0x10000000000000) != 0)
  {
    var2 |= 0x10000000000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var63 = a2->var63;
  }
  if ((var2 & 0x200000) == 0 && (*(void *)&a2->var2 & 0x200000) != 0)
  {
    var2 |= 0x200000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var105 = a2->var105;
  }
  if ((var2 & 0x20000000000000) == 0 && (*(void *)&a2->var2 & 0x20000000000000) != 0)
  {
    var2 |= 0x20000000000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *(void *)&this->var3.int var3 = *(void *)&a2->var3.var3;
  }
  if ((var2 & 0x400000) == 0 && (*(void *)&a2->var2 & 0x400000) != 0)
  {
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *(void *)&this->uint64_t var2 = var2 | 0x400000;
    WrdShading::operator=((uint64_t)this->var6, (uint64_t)a2->var6);
    unint64_t v4 = *((unsigned int *)&this->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&this->var2 + 6) << 32);
    uint64_t var2 = (uint64_t)this->var2;
  }
  if ((var2 & 0x40000000000000) == 0 && (*(void *)&a2->var2 & 0x40000000000000) != 0)
  {
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *(void *)&this->uint64_t var2 = var2 | 0x40000000000000;
    WrdBorder::operator=((uint64_t)this->var7, (uint64_t)a2->var7);
    unint64_t v4 = *((unsigned int *)&this->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&this->var2 + 6) << 32);
    uint64_t var2 = (uint64_t)this->var2;
  }
  if ((var2 & 0x80000000000000) == 0 && (*(void *)&a2->var2 & 0x80000000000000) != 0)
  {
    var2 |= 0x80000000000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var61 = a2->var61;
  }
  if ((var2 & 0x800000) == 0 && (*(void *)&a2->var2 & 0x800000) != 0)
  {
    var2 |= 0x800000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var19 = a2->var19;
  }
  if ((var2 & 0x100000000000000) == 0 && (*(void *)&a2->var2 & 0x100000000000000) != 0)
  {
    var2 |= 0x100000000000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFBFF | (((*((_DWORD *)a2 + 85) >> 10) & 1) << 10);
  }
  if ((var2 & 0x200000000000000) == 0 && (*(void *)&a2->var2 & 0x200000000000000) != 0)
  {
    var2 |= 0x200000000000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFF7FF | (((*((_DWORD *)a2 + 85) >> 11) & 1) << 11);
  }
  if ((var2 & 0x400000000000000) == 0 && (*(void *)&a2->var2 & 0x400000000000000) != 0)
  {
    var2 |= 0x400000000000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var109 = a2->var109;
  }
  if ((var2 & 0x800000000000000) == 0 && (*(void *)&a2->var2 & 0x800000000000000) != 0)
  {
    var2 |= 0x800000000000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFEFFF | (((*((_DWORD *)a2 + 85) >> 12) & 1) << 12);
  }
  if ((var2 & 0x1000000000000000) == 0 && (*(void *)&a2->var2 & 0x1000000000000000) != 0)
  {
    var2 |= 0x1000000000000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFDFFF | (((*((_DWORD *)a2 + 85) >> 13) & 1) << 13);
  }
  if ((var2 & 0x2000000000000000) == 0 && (*(void *)&a2->var2 & 0x2000000000000000) != 0)
  {
    var2 |= 0x2000000000000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFBFFF | (((*((_DWORD *)a2 + 85) >> 14) & 1) << 14);
  }
  if ((var2 & 0x4000000000000000) == 0 && (*(void *)&a2->var2 & 0x4000000000000000) != 0)
  {
    var2 |= 0x4000000000000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFF7FFF | (((*((_DWORD *)a2 + 85) >> 15) & 1) << 15);
  }
  if ((var2 & 0x8000000000000000) == 0 && (*(void *)&a2->var2 & 0x8000000000000000) != 0)
  {
    var2 |= 0x8000000000000000;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var18 = a2->var18;
  }
  if (v4 & 1) == 0 && (*((_DWORD *)&a2->var2 + 2))
  {
    unint64_t v6 = HIDWORD(v4);
    v4 |= 1uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_WORD *)&this->var2 + 6) = v6;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFEFFFF | ((HIWORD(*((_DWORD *)a2 + 85)) & 1) << 16);
  }
  if ((v4 & 2) == 0 && (*((_DWORD *)&a2->var2 + 2) & 2) != 0)
  {
    unint64_t v7 = HIDWORD(v4);
    v4 |= 2uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_WORD *)&this->var2 + 6) = v7;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFDFFFF | (((*((_DWORD *)a2 + 85) >> 17) & 1) << 17);
  }
  if ((v4 & 4) == 0 && (*((_DWORD *)&a2->var2 + 2) & 4) != 0)
  {
    unint64_t v8 = HIDWORD(v4);
    v4 |= 4uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_WORD *)&this->var2 + 6) = v8;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFBFFFF | (((*((_DWORD *)a2 + 85) >> 18) & 1) << 18);
  }
  if ((v4 & 8) == 0 && (*((_DWORD *)&a2->var2 + 2) & 8) != 0)
  {
    unint64_t v9 = HIDWORD(v4);
    v4 |= 8uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_WORD *)&this->var2 + 6) = v9;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFF7FFFF | (((*((_DWORD *)a2 + 85) >> 19) & 1) << 19);
  }
  if ((var2 & 0x1000000) == 0 && (*(void *)&a2->var2 & 0x1000000) != 0)
  {
    var2 |= 0x1000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var64 = a2->var64;
  }
  if ((var2 & 0x2000000) == 0 && (*(void *)&a2->var2 & 0x2000000) != 0)
  {
    var2 |= 0x2000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var65 = a2->var65;
  }
  if ((var2 & 0x4000000) == 0 && (*(void *)&a2->var2 & 0x4000000) != 0)
  {
    var2 |= 0x4000000uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var66 = a2->var66;
  }
  if ((v4 & 0x10) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x10) != 0)
  {
    unint64_t v10 = HIDWORD(v4);
    v4 |= 0x10uLL;
    *(void *)&this->uint64_t var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = v10;
    this->var47 = a2->var47;
  }
  if ((v4 & 0x20) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x20) != 0)
  {
    *(void *)&this->uint64_t var2 = var2;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)&this->var2 + 2) = v4 | 0x20;
    this->var50 = a2->var50;
  }
  unint64_t v11 = *((unsigned int *)&this->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&this->var2 + 6) << 32);
  uint64_t v12 = (uint64_t)this->var2;
  if ((*((_DWORD *)&this->var2 + 2) & 0x40) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x40) != 0)
  {
    unint64_t v13 = HIDWORD(v11);
    v11 |= 0x40uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = v13;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->int var51 = a2->var51;
  }
  if ((v11 & 0x80) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x80) != 0)
  {
    unint64_t v14 = HIDWORD(v11);
    v11 |= 0x80uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = v14;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var52 = a2->var52;
  }
  if ((v11 & 0x100) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x100) != 0)
  {
    unint64_t v15 = HIDWORD(v11);
    v11 |= 0x100uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = v15;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->int var53 = a2->var53;
  }
  if ((v11 & 0x200) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x200) != 0)
  {
    unint64_t v16 = HIDWORD(v11);
    v11 |= 0x200uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = v16;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var59 = a2->var59;
  }
  if ((v11 & 0x400) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x400) != 0)
  {
    unint64_t v17 = HIDWORD(v11);
    v11 |= 0x400uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = v17;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var57 = a2->var57;
  }
  if ((v11 & 0x800) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x800) != 0)
  {
    unint64_t v18 = HIDWORD(v11);
    v11 |= 0x800uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = v18;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var58 = a2->var58;
  }
  if ((v11 & 0x1000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x1000) != 0)
  {
    unint64_t v19 = HIDWORD(v11);
    v11 |= 0x1000uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = v19;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var22 = a2->var22;
  }
  if ((v11 & 0x2000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x2000) != 0)
  {
    unint64_t v20 = HIDWORD(v11);
    v11 |= 0x2000uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = v20;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var106 = a2->var106;
  }
  if ((v11 & 0x4000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x4000) != 0)
  {
    unint64_t v21 = HIDWORD(v11);
    v11 |= 0x4000uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = v21;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var71 = a2->var71;
  }
  if ((v11 & 0x2000000000) == 0
    && ((*((unsigned int *)&a2->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&a2->var2 + 6) << 32)) & 0x2000000000) != 0)
  {
    *((_DWORD *)&this->var2 + 2) = v11;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = WORD2(v11) | 0x20;
    WrdDateTime::operator=((uint64_t)this->var11, (uint64_t)a2->var11);
    unint64_t v11 = *((unsigned int *)&this->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&this->var2 + 6) << 32);
    uint64_t v12 = (uint64_t)this->var2;
  }
  if ((v11 & 0x4000000000) == 0
    && ((*((unsigned int *)&a2->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&a2->var2 + 6) << 32)) & 0x4000000000) != 0)
  {
    *((_DWORD *)&this->var2 + 2) = v11;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = WORD2(v11) | 0x40;
    WrdDateTime::operator=((uint64_t)this->var12, (uint64_t)a2->var12);
    unint64_t v11 = *((unsigned int *)&this->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&this->var2 + 6) << 32);
    uint64_t v12 = (uint64_t)this->var2;
  }
  if ((v12 & 0x8000000) == 0 && (*(void *)&a2->var2 & 0x8000000) != 0)
  {
    v12 |= 0x8000000uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_DWORD *)&this->var2 + 2) = v11;
    *((_WORD *)&this->var2 + 6) = WORD2(v11);
    this->var72 = a2->var72;
  }
  if ((v11 & 0x8000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x8000) != 0)
  {
    unint64_t v22 = HIDWORD(v11);
    v11 |= 0x8000uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = v22;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var73 = a2->var73;
  }
  if ((v11 & 0x10000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x10000) != 0)
  {
    unint64_t v23 = HIDWORD(v11);
    v11 |= 0x10000uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_DWORD *)&this->var2 + 2) = v11;
    *((_WORD *)&this->var2 + 6) = v23;
    this->var74 = a2->var74;
  }
  if ((v11 & 0x20000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x20000) != 0)
  {
    unint64_t v24 = HIDWORD(v11);
    v11 |= 0x20000uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = v24;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var42 = a2->var42;
  }
  if ((v11 & 0x40000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x40000) != 0)
  {
    unint64_t v25 = HIDWORD(v11);
    v11 |= 0x40000uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = v25;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var75 = a2->var75;
  }
  if ((v11 & 0x80000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x80000) != 0)
  {
    unint64_t v26 = HIDWORD(v11);
    v11 |= 0x80000uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = v26;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var20 = a2->var20;
  }
  if ((v11 & 0x100000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x100000) != 0)
  {
    unint64_t v27 = HIDWORD(v11);
    v11 |= 0x100000uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = v27;
    *((_DWORD *)&this->var2 + 2) = v11;
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFEFFFFF | (((*((_DWORD *)a2 + 85) >> 20) & 1) << 20);
  }
  if ((v11 & 0x200000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x200000) != 0)
  {
    unint64_t v28 = HIDWORD(v11);
    v11 |= 0x200000uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = v28;
    *((_DWORD *)&this->var2 + 2) = v11;
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFDFFFFF | (((*((_DWORD *)a2 + 85) >> 21) & 1) << 21);
  }
  if ((v11 & 0x400000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x400000) != 0)
  {
    unint64_t v29 = HIDWORD(v11);
    v11 |= 0x400000uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = v29;
    *((_DWORD *)&this->var2 + 2) = v11;
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFBFFFFF | (((*((_DWORD *)a2 + 85) >> 22) & 1) << 22);
  }
  if ((v11 & 0x800000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x800000) != 0)
  {
    unint64_t v30 = HIDWORD(v11);
    v11 |= 0x800000uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = v30;
    *((_DWORD *)&this->var2 + 2) = v11;
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFF7FFFFF | (((*((_DWORD *)a2 + 85) >> 23) & 1) << 23);
  }
  if ((v11 & 0x1000000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x1000000) != 0)
  {
    unint64_t v31 = HIDWORD(v11);
    v11 |= 0x1000000uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = v31;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var69 = a2->var69;
  }
  if ((v11 & 0x2000000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x2000000) != 0)
  {
    *((_DWORD *)&this->var2 + 2) = v11 | 0x2000000;
    *((_WORD *)&this->var2 + 6) = WORD2(v11);
    *(void *)&this->uint64_t var2 = v12;
    WrdDateTime::operator=((uint64_t)this->var8, (uint64_t)a2->var8);
    unint64_t v11 = *((unsigned int *)&this->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&this->var2 + 6) << 32);
    uint64_t v12 = (uint64_t)this->var2;
  }
  if ((v11 & 0x4000000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x4000000) != 0)
  {
    unint64_t v32 = HIDWORD(v11);
    v11 |= 0x4000000uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = v32;
    *((_DWORD *)&this->var2 + 2) = v11;
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFDFFFFFF | (((*((_DWORD *)a2 + 85) >> 25) & 1) << 25);
  }
  if ((v11 & 0x8000000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x8000000) != 0)
  {
    unint64_t v33 = HIDWORD(v11);
    v11 |= 0x8000000uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = v33;
    *((_DWORD *)&this->var2 + 2) = v11;
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFBFFFFFF | (((*((_DWORD *)a2 + 85) >> 26) & 1) << 26);
  }
  if ((v11 & 0x10000000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x10000000) != 0)
  {
    unint64_t v34 = HIDWORD(v11);
    v11 |= 0x10000000uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = v34;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var67 = a2->var67;
  }
  if ((v11 & 0x20000000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x20000000) != 0)
  {
    unint64_t v35 = HIDWORD(v11);
    v11 |= 0x20000000uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = v35;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var68 = a2->var68;
  }
  if ((v11 & 0x10000000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x10000000) != 0)
  {
    *((_DWORD *)&this->var2 + 2) = v11 | 0x10000000;
    *((_WORD *)&this->var2 + 6) = WORD2(v11);
    *(void *)&this->uint64_t var2 = v12;
    WrdDateTime::operator=((uint64_t)this->var9, (uint64_t)a2->var9);
    unint64_t v11 = *((unsigned int *)&this->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&this->var2 + 6) << 32);
    uint64_t v12 = (uint64_t)this->var2;
  }
  if ((v11 & 0x80000000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x80000000) != 0)
  {
    unint64_t v36 = HIDWORD(v11);
    v11 |= 0x80000000uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = v36;
    *((_DWORD *)&this->var2 + 2) = v11;
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFEFFFFFF | ((HIBYTE(*((_DWORD *)a2 + 85)) & 1) << 24);
  }
  if ((v11 & 0x100000000) == 0
    && ((*((unsigned int *)&a2->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&a2->var2 + 6) << 32)) & 0x100000000) != 0)
  {
    *((_DWORD *)&this->var2 + 2) = v11;
    v11 |= 0x100000000uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = WORD2(v11);
    this->var70 = a2->var70;
  }
  if ((v11 & 0x200000000) == 0
    && ((*((unsigned int *)&a2->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&a2->var2 + 6) << 32)) & 0x200000000) != 0)
  {
    *((_DWORD *)&this->var2 + 2) = v11;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = WORD2(v11) | 2;
    WrdDateTime::operator=((uint64_t)this->var10, (uint64_t)a2->var10);
    unint64_t v11 = *((unsigned int *)&this->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&this->var2 + 6) << 32);
    uint64_t v12 = (uint64_t)this->var2;
  }
  if ((v11 & 0x800000000) == 0
    && ((*((unsigned int *)&a2->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&a2->var2 + 6) << 32)) & 0x800000000) != 0)
  {
    *((_DWORD *)&this->var2 + 2) = v11;
    v11 |= 0x800000000uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = WORD2(v11);
    this->int var56 = a2->var56;
  }
  if ((v11 & 0x1000000000) == 0
    && ((*((unsigned int *)&a2->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&a2->var2 + 6) << 32)) & 0x1000000000) != 0)
  {
    *((_DWORD *)&this->var2 + 2) = v11;
    v11 |= 0x1000000000uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = WORD2(v11);
    this->var48 = a2->var48;
  }
  if ((v11 & 0x8000000000) == 0
    && ((*((unsigned int *)&a2->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&a2->var2 + 6) << 32)) & 0x8000000000) != 0)
  {
    *((_DWORD *)&this->var2 + 2) = v11;
    v11 |= 0x8000000000uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = WORD2(v11);
    this->var54 = a2->var54;
  }
  if ((v11 & 0x10000000000) == 0
    && ((*((unsigned int *)&a2->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&a2->var2 + 6) << 32)) & 0x10000000000) != 0)
  {
    *((_DWORD *)&this->var2 + 2) = v11;
    v11 |= 0x10000000000uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = WORD2(v11);
    this->var21 = a2->var21;
  }
  if ((v11 & 0x20000000000) == 0
    && ((*((unsigned int *)&a2->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&a2->var2 + 6) << 32)) & 0x20000000000) != 0)
  {
    *((_DWORD *)&this->var2 + 2) = v11;
    v11 |= 0x20000000000uLL;
    *(void *)&this->uint64_t var2 = v12;
    *((_WORD *)&this->var2 + 6) = WORD2(v11);
    this->var55 = a2->var55;
  }
  if ((v11 & 0x80000000000) == 0
    && ((*((unsigned int *)&a2->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&a2->var2 + 6) << 32)) & 0x80000000000) != 0)
  {
    *(void *)&this->uint64_t var2 = v12;
    *((_DWORD *)&this->var2 + 2) = v11;
    *((_WORD *)&this->var2 + 6) = (v11 | 0x80000000000) >> 32;
    this->var110 = a2->var110;
  }
}

WrdCharacterProperties *WrdCharacterProperties::applyImplictProperties(WrdCharacterProperties *this, const WrdCharacterProperties *a2)
{
  uint64_t var2 = (uint64_t)this->var2;
  if ((var2 & 2) != 0)
  {
    int var23 = this->var23;
    if ((var23 & 0xFFFFFFFE) == 0x80)
    {
      int v4 = a2->var23;
      if (var23 == 128)
      {
LABEL_10:
        this->int var23 = v4;
        goto LABEL_11;
      }
      switch(v4)
      {
        case 0:
          int v4 = 1;
          goto LABEL_10;
        case 129:
          int v4 = 128;
          goto LABEL_10;
        case 1:
          int v4 = 0;
          goto LABEL_10;
      }
    }
  }
LABEL_11:
  if ((var2 & 4) != 0)
  {
    int var24 = this->var24;
    if ((var24 & 0xFFFFFFFE) == 0x80)
    {
      int v6 = a2->var24;
      if (var24 == 128)
      {
LABEL_20:
        this->int var24 = v6;
        goto LABEL_21;
      }
      switch(v6)
      {
        case 0:
          int v6 = 1;
          goto LABEL_20;
        case 129:
          int v6 = 128;
          goto LABEL_20;
        case 1:
          int v6 = 0;
          goto LABEL_20;
      }
    }
  }
LABEL_21:
  if ((var2 & 0x10) != 0)
  {
    int var25 = this->var25;
    if ((var25 & 0xFFFFFFFE) == 0x80)
    {
      int v8 = a2->var25;
      if (var25 == 128)
      {
LABEL_30:
        this->int var25 = v8;
        goto LABEL_31;
      }
      switch(v8)
      {
        case 0:
          int v8 = 1;
          goto LABEL_30;
        case 129:
          int v8 = 128;
          goto LABEL_30;
        case 1:
          int v8 = 0;
          goto LABEL_30;
      }
    }
  }
LABEL_31:
  if ((var2 & 0x200) != 0)
  {
    int var31 = this->var31;
    if ((var31 & 0xFFFFFFFE) == 0x80)
    {
      int v10 = a2->var31;
      if (var31 == 128)
      {
LABEL_40:
        this->int var31 = v10;
        goto LABEL_41;
      }
      switch(v10)
      {
        case 0:
          int v10 = 1;
          goto LABEL_40;
        case 129:
          int v10 = 128;
          goto LABEL_40;
        case 1:
          int v10 = 0;
          goto LABEL_40;
      }
    }
  }
LABEL_41:
  if ((var2 & 0x400) != 0)
  {
    int var32 = this->var32;
    if ((var32 & 0xFFFFFFFE) == 0x80)
    {
      int v12 = a2->var32;
      if (var32 == 128)
      {
LABEL_50:
        this->int var32 = v12;
        goto LABEL_51;
      }
      switch(v12)
      {
        case 0:
          int v12 = 1;
          goto LABEL_50;
        case 129:
          int v12 = 128;
          goto LABEL_50;
        case 1:
          int v12 = 0;
          goto LABEL_50;
      }
    }
  }
LABEL_51:
  if ((var2 & 0x80) != 0)
  {
    int var26 = this->var26;
    if ((var26 & 0xFFFFFFFE) == 0x80)
    {
      int v14 = a2->var26;
      if (var26 == 128)
      {
LABEL_60:
        this->int var26 = v14;
        goto LABEL_61;
      }
      switch(v14)
      {
        case 0:
          int v14 = 1;
          goto LABEL_60;
        case 129:
          int v14 = 128;
          goto LABEL_60;
        case 1:
          int v14 = 0;
          goto LABEL_60;
      }
    }
  }
LABEL_61:
  if ((var2 & 0x10000000) != 0)
  {
    int var27 = this->var27;
    if ((var27 & 0xFFFFFFFE) == 0x80)
    {
      int v16 = a2->var27;
      if (var27 == 128)
      {
LABEL_70:
        this->int var27 = v16;
        goto LABEL_71;
      }
      switch(v16)
      {
        case 0:
          int v16 = 1;
          goto LABEL_70;
        case 129:
          int v16 = 128;
          goto LABEL_70;
        case 1:
          int v16 = 0;
          goto LABEL_70;
      }
    }
  }
LABEL_71:
  if ((var2 & 0x20000000) != 0)
  {
    int var28 = this->var28;
    if ((var28 & 0xFFFFFFFE) == 0x80)
    {
      int v18 = a2->var28;
      if (var28 == 128)
      {
LABEL_80:
        this->int var28 = v18;
        goto LABEL_81;
      }
      switch(v18)
      {
        case 0:
          int v18 = 1;
          goto LABEL_80;
        case 129:
          int v18 = 128;
          goto LABEL_80;
        case 1:
          int v18 = 0;
          goto LABEL_80;
      }
    }
  }
LABEL_81:
  if ((var2 & 0x20) != 0)
  {
    int var29 = this->var29;
    if ((var29 & 0xFFFFFFFE) == 0x80)
    {
      int v20 = a2->var29;
      if (var29 == 128)
      {
LABEL_90:
        this->int var29 = v20;
        goto LABEL_91;
      }
      switch(v20)
      {
        case 0:
          int v20 = 1;
          goto LABEL_90;
        case 129:
          int v20 = 128;
          goto LABEL_90;
        case 1:
          int v20 = 0;
          goto LABEL_90;
      }
    }
  }
LABEL_91:
  if ((var2 & 0x100) != 0)
  {
    int var30 = this->var30;
    if ((var30 & 0xFFFFFFFE) == 0x80)
    {
      int v22 = a2->var30;
      if (var30 == 128)
      {
LABEL_100:
        this->int var30 = v22;
        goto LABEL_101;
      }
      switch(v22)
      {
        case 0:
          int v22 = 1;
          goto LABEL_100;
        case 129:
          int v22 = 128;
          goto LABEL_100;
        case 1:
          int v22 = 0;
          goto LABEL_100;
      }
    }
  }
LABEL_101:
  if ((var2 & 0x800000000) != 0)
  {
    int var33 = this->var33;
    if ((var33 & 0xFFFFFFFE) == 0x80)
    {
      int v24 = a2->var33;
      if (var33 == 128)
      {
LABEL_110:
        this->int var33 = v24;
        goto LABEL_111;
      }
      switch(v24)
      {
        case 0:
          int v24 = 1;
          goto LABEL_110;
        case 129:
          int v24 = 128;
          goto LABEL_110;
        case 1:
          int v24 = 0;
          goto LABEL_110;
      }
    }
  }
LABEL_111:
  if ((var2 & 0x1000000000) != 0)
  {
    int var34 = this->var34;
    if ((var34 & 0xFFFFFFFE) == 0x80)
    {
      int v26 = a2->var34;
      if (var34 == 128)
      {
LABEL_120:
        this->int var34 = v26;
        goto LABEL_121;
      }
      switch(v26)
      {
        case 0:
          int v26 = 1;
          goto LABEL_120;
        case 129:
          int v26 = 128;
          goto LABEL_120;
        case 1:
          int v26 = 0;
          goto LABEL_120;
      }
    }
  }
LABEL_121:
  if ((var2 & 0x2000000000) != 0)
  {
    int var35 = this->var35;
    if ((var35 & 0xFFFFFFFE) == 0x80)
    {
      int v28 = a2->var35;
      if (var35 == 128)
      {
LABEL_130:
        this->int var35 = v28;
        goto LABEL_131;
      }
      switch(v28)
      {
        case 0:
          int v28 = 1;
          goto LABEL_130;
        case 129:
          int v28 = 128;
          goto LABEL_130;
        case 1:
          int v28 = 0;
          goto LABEL_130;
      }
    }
  }
LABEL_131:
  if ((var2 & 8) != 0)
  {
    int var36 = this->var36;
    if ((var36 & 0xFFFFFFFE) == 0x80)
    {
      int v30 = a2->var36;
      if (var36 == 128)
      {
LABEL_140:
        this->int var36 = v30;
        goto LABEL_141;
      }
      switch(v30)
      {
        case 0:
          int v30 = 1;
          goto LABEL_140;
        case 129:
          int v30 = 128;
          goto LABEL_140;
        case 1:
          int v30 = 0;
          goto LABEL_140;
      }
    }
  }
LABEL_141:
  if ((var2 & 0x40) != 0)
  {
    int var37 = this->var37;
    if ((var37 & 0xFFFFFFFE) == 0x80)
    {
      int v32 = a2->var37;
      if (var37 != 128)
      {
        if (v32)
        {
          if (v32 == 129)
          {
            int v32 = 128;
          }
          else
          {
            if (v32 != 1) {
              return this;
            }
            int v32 = 0;
          }
        }
        else
        {
          int v32 = 1;
        }
      }
      this->int var37 = v32;
    }
  }
  return this;
}

void *WrdParagraphTextRun::WrdParagraphTextRun(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = (void *)WrdTextRun::WrdTextRun(a1, a2, a3);
  *uint64_t result = &unk_26EBE67A0;
  result[3] = a4;
  result[4] = a5;
  result[5] = a6;
  result[6] = a7;
  return result;
}

void WrdStyleSheet::resolve(WrdStyleSheet *this, WrdCharacterProperties *a2, unsigned int a3)
{
  if ((*(void *)&a2->var2 & 0x8000000) != 0)
  {
    unsigned int var72 = a2->var72;
    do
    {
      uint64_t v7 = *((void *)this + 3);
      if (((unint64_t)(*((void *)this + 4) - v7) >> 3) <= var72
        || (int v8 = *(unsigned __int16 **)(v7 + 8 * var72)) == 0)
      {
        int v8 = (unsigned __int16 *)*((void *)this + 2);
      }
      uint64_t ResolvedCharProps = WrdStyle::getResolvedCharProps((WrdStyle *)v8);
      int v10 = (const WrdCharacterProperties *)ResolvedCharProps;
      unsigned int v11 = *((_DWORD *)a2 + 85);
      if (v11)
      {
        int v12 = (v11 >> 1) & 1;
        WrdCharacterProperties::operator=((uint64_t)a2, ResolvedCharProps);
        WrdCharacterProperties::setSpecialCharacter(a2, v12);
      }
      else if (WrdCharacterProperties::WrdCharacterPropertiesOverridden::isAnythingOverridden((WrdCharacterProperties::WrdCharacterPropertiesOverridden *)(ResolvedCharProps + 16)))
      {
        WrdCharacterProperties::applyBaseProperties(a2, v10);
      }
      unsigned int var72 = v8[79];
    }
    while (var72 != 4095);
  }
  do
  {
    uint64_t v13 = *((void *)this + 3);
    if (((unint64_t)(*((void *)this + 4) - v13) >> 3) <= a3
      || (uint64_t v14 = *(void *)(v13 + 8 * a3)) == 0)
    {
      uint64_t v14 = *((void *)this + 2);
    }
    unint64_t v15 = *(const WrdCharacterProperties **)(v14 + 48);
    if (WrdCharacterProperties::WrdCharacterPropertiesOverridden::isAnythingOverridden((WrdCharacterProperties::WrdCharacterPropertiesOverridden *)&v15->var2)) {
      WrdCharacterProperties::applyBaseProperties(a2, v15);
    }
    a3 = *(unsigned __int16 *)(v14 + 158);
  }
  while (a3 != 4095);
  int v16 = (uint64_t *)*((void *)this + 3);
  if (((*((void *)this + 4) - (void)v16) & 0x7FFFFFFF8) == 0 || (uint64_t v17 = *v16) == 0) {
    uint64_t v17 = *((void *)this + 2);
  }
  WrdCharacterProperties::applyBaseProperties(a2, *(const WrdCharacterProperties **)(v17 + 48));
  int v18 = *(const WrdCharacterProperties **)(*((void *)this + 2) + 48);
  WrdCharacterProperties::applyBaseProperties(a2, v18);
}

BOOL WrdCharacterProperties::WrdCharacterPropertiesOverridden::isAnythingOverridden(WrdCharacterProperties::WrdCharacterPropertiesOverridden *this)
{
  return (*(void *)this | (*((unsigned int *)this + 2) | ((unint64_t)*((unsigned __int16 *)this + 6) << 32)) & 0xFFFBFFFFFFFLL) != 0;
}

uint64_t WrdCPTableHeaders::getTextRun(uint64_t a1, _DWORD *a2, unsigned int a3, int a4)
{
  a2[2] = 2;
  a2[3] = WrdCPTableHeaders::getStartCP(a1, a3, a4);
  uint64_t result = WrdCPTableHeaders::getNumberOfCharacters(a1, a3, a4);
  a2[4] = result;
  return result;
}

uint64_t WrdCPTableHeaders::getStartCP(uint64_t a1, unsigned int a2, int a3)
{
  if ((int)a2 > 5)
  {
    a2 += 6 * a3;
    uint64_t v3 = *(void *)(a1 + 8);
    if (a2 < ((unint64_t)(*(void *)(a1 + 16) - v3) >> 2)) {
      return *(unsigned int *)(v3 + 4 * a2);
    }
LABEL_5:
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (((unint64_t)(*(void *)(a1 + 16) - v3) >> 2) <= a2) {
    goto LABEL_5;
  }
  return *(unsigned int *)(v3 + 4 * a2);
}

uint64_t WrdCPTableHeaders::getNumberOfCharacters(uint64_t a1, int a2, int a3)
{
  if (a2 > 5)
  {
    a2 += 6 * a3;
    unsigned int v3 = a2 + 1;
    uint64_t v4 = *(void *)(a1 + 8);
    if (a2 + 1 >= ((unint64_t)(*(void *)(a1 + 16) - v4) >> 2)) {
      goto LABEL_4;
    }
  }
  else
  {
    unsigned int v3 = a2 + 1;
    uint64_t v4 = *(void *)(a1 + 8);
    unint64_t v5 = (unint64_t)(*(void *)(a1 + 16) - v4) >> 2;
    if (a2 + 1 >= v5 || v5 <= a2) {
LABEL_4:
    }
      std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  return (*(_DWORD *)(v4 + 4 * v3) - *(_DWORD *)(v4 + 4 * a2));
}

uint64_t WrdCharacterProperties::setTextAnimation(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x800000uLL;
  *(_DWORD *)(result + 152) = a2;
  return result;
}

uint64_t WrdParagraphProperties::setHorizontalPosition(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x1000000uLL;
  *(_DWORD *)(result + 156) = a2;
  return result;
}

WrdParagraphProperties *WrdParagraphProperties::setWrapCode(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 0x2000000uLL;
  *((unsigned char *)this + 298) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setHorizontalPlacement(WrdParagraphProperties *this, int a2)
{
  *((void *)this + 2) |= 0x100000uLL;
  *((_DWORD *)this + 56) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setVerticalPlacement(WrdParagraphProperties *this, int a2)
{
  *((void *)this + 2) |= 0x200000uLL;
  *((_DWORD *)this + 57) = a2;
  return this;
}

void sub_238B5EBE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B5EF78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B5F160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B5F2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

WrdCharacterProperties *WrdCharacterProperties::setNoProof(WrdCharacterProperties *this, char a2)
{
  *(void *)&this->var2 |= 0x8000000000uLL;
  *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFF7F | ((a2 & 1) << 7);
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setTableNestingLevel(WrdParagraphProperties *this, int a2)
{
  *((void *)this + 2) |= 0x1000000000000uLL;
  *((_DWORD *)this + 61) = a2;
  return this;
}

uint64_t WrdTableCellDescriptor::setFitText(WrdTableCellDescriptor *this, char a2)
{
  int v3 = *((_DWORD *)this + 2);
  uint64_t result = (uint64_t)this + 8;
  char v4 = *(unsigned char *)(result + 4);
  *(_DWORD *)uint64_t result = v3;
  *(unsigned char *)(result + 4) = v4 | 0x40;
  *(_WORD *)(result + 122) = *(_WORD *)(result + 122) & 0xFF7F | ((a2 & 1) << 7);
  return result;
}

uint64_t WrdTableCellDescriptor::setNoWrap(WrdTableCellDescriptor *this, char a2)
{
  int v3 = *((_DWORD *)this + 2);
  uint64_t result = (uint64_t)this + 8;
  char v4 = *(unsigned char *)(result + 4);
  *(_DWORD *)uint64_t result = v3;
  *(unsigned char *)(result + 4) = v4 | 0x80;
  *(_WORD *)(result + 122) = *(_WORD *)(result + 122) & 0xFEFF | ((a2 & 1) << 8);
  return result;
}

uint64_t WrdTableProperties::setPreferredTableWidthUnit(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x8000uLL;
  *(_DWORD *)(result + 132) = a2;
  return result;
}

WrdTableProperties *WrdTableProperties::setPreferredTableWidth(WrdTableProperties *this, __int16 a2)
{
  *((void *)this + 2) |= 0x200000000000000uLL;
  *((_WORD *)this + 168) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setAutoFit(WrdTableProperties *this, char a2)
{
  *((void *)this + 2) |= 0x10000000000000uLL;
  *((unsigned char *)this + 334) = *((unsigned char *)this + 334) & 0xFE | a2 & 1;
  return this;
}

WrdTableCellDescriptor *WrdTapParser::parseSpacingAndPadding(WrdTapParser *this, int a2, WrdTableProperties *a3, const unsigned __int8 *a4, unsigned __int16 *a5)
{
  unsigned int v8 = *a4;
  unsigned int v9 = a4[1];
  __int16 v10 = *a5;
  *a5 += 2;
  unsigned int v11 = &a4[(unsigned __int16)(v10 + 2)];
  unsigned __int8 v12 = *v11;
  *a5 = v10 + 3;
  int v13 = v11[1];
  *a5 = v10 + 4;
  uint64_t result = (WrdTableCellDescriptor *)CsLeReadSInt16((__int16 *)v11 + 1);
  __int16 v15 = (__int16)result;
  *a5 += 2;
  switch(a2)
  {
    case 54835:
      if (v12)
      {
        WrdTableProperties::setDefaultTableTopCellSpacing(a3, (__int16)result);
        uint64_t result = (WrdTableCellDescriptor *)WrdTableProperties::setDefaultTableTopCellSpacingUnit((uint64_t)a3, v13);
        if ((v12 & 2) == 0)
        {
LABEL_4:
          if ((v12 & 4) == 0) {
            goto LABEL_5;
          }
          goto LABEL_47;
        }
      }
      else if ((v12 & 2) == 0)
      {
        goto LABEL_4;
      }
      WrdTableProperties::setDefaultTableLeftCellSpacing(a3, v15);
      uint64_t result = (WrdTableCellDescriptor *)WrdCharacterProperties::setSmallCaps((uint64_t)a3, v13);
      if ((v12 & 4) == 0)
      {
LABEL_5:
        if ((v12 & 8) == 0) {
          return result;
        }
        goto LABEL_48;
      }
LABEL_47:
      WrdTableProperties::setDefaultTableBottomCellSpacing(a3, v15);
      uint64_t result = (WrdTableCellDescriptor *)WrdCharacterProperties::setCaps((uint64_t)a3, v13);
      if ((v12 & 8) == 0) {
        return result;
      }
LABEL_48:
      WrdTableProperties::setDefaultTableRightCellSpacing(a3, v15);
      return (WrdTableCellDescriptor *)WrdTableProperties::setDefaultTableRightCellSpacingUnit((uint64_t)a3, v13);
    case 54836:
      if (v12)
      {
        WrdTableProperties::setDefaultTableTopCellPadding(a3, (__int16)result);
        uint64_t result = (WrdTableCellDescriptor *)WrdTableProperties::setDefaultTableTopCellPaddingUnit((uint64_t)a3, v13);
        if ((v12 & 2) == 0)
        {
LABEL_9:
          if ((v12 & 4) == 0) {
            goto LABEL_10;
          }
          goto LABEL_53;
        }
      }
      else if ((v12 & 2) == 0)
      {
        goto LABEL_9;
      }
      WrdTableProperties::setDefaultTableLeftCellPadding(a3, v15);
      uint64_t result = (WrdTableCellDescriptor *)WrdTableProperties::setDefaultTableLeftCellPaddingUnit((uint64_t)a3, v13);
      if ((v12 & 4) == 0)
      {
LABEL_10:
        if ((v12 & 8) == 0) {
          return result;
        }
        goto LABEL_54;
      }
LABEL_53:
      WrdTableProperties::setDefaultTableBottomCellPadding(a3, v15);
      uint64_t result = (WrdTableCellDescriptor *)WrdTableProperties::setDefaultTableBottomCellPaddingUnit((uint64_t)a3, v13);
      if ((v12 & 8) == 0) {
        return result;
      }
LABEL_54:
      WrdTableProperties::setDefaultTableRightCellPadding(a3, v15);
      return (WrdTableCellDescriptor *)WrdTableProperties::setDefaultTableRightCellPaddingUnit((uint64_t)a3, v13);
    case 54839:
      if (v12)
      {
        WrdTableProperties::setDefaultTableOuterTopCellSpacing(a3, (__int16)result);
        uint64_t result = (WrdTableCellDescriptor *)WrdTableProperties::setDefaultTableOuterTopCellSpacingUnit((uint64_t)a3, v13);
        if ((v12 & 2) == 0)
        {
LABEL_14:
          if ((v12 & 4) == 0) {
            goto LABEL_15;
          }
          goto LABEL_59;
        }
      }
      else if ((v12 & 2) == 0)
      {
        goto LABEL_14;
      }
      WrdTableProperties::setDefaultTableOuterLeftCellSpacing(a3, v15);
      uint64_t result = (WrdTableCellDescriptor *)WrdTableProperties::setDefaultTableOuterLeftCellSpacingUnit((uint64_t)a3, v13);
      if ((v12 & 4) == 0)
      {
LABEL_15:
        if ((v12 & 8) == 0) {
          return result;
        }
        goto LABEL_60;
      }
LABEL_59:
      WrdTableProperties::setDefaultTableOuterBottomCellSpacing(a3, v15);
      uint64_t result = (WrdTableCellDescriptor *)WrdTableProperties::setDefaultTableOuterBottomCellSpacingUnit((uint64_t)a3, v13);
      if ((v12 & 8) == 0) {
        return result;
      }
LABEL_60:
      WrdTableProperties::setDefaultTableOuterRightCellSpacing(a3, v15);
      return (WrdTableCellDescriptor *)WrdTableProperties::setDefaultTableOuterRightCellSpacingUnit((uint64_t)a3, v13);
    case 54840:
      if (v12)
      {
        WrdTableProperties::setDefaultTableOuterTopCellPadding(a3, (__int16)result);
        uint64_t result = (WrdTableCellDescriptor *)WrdTableProperties::setDefaultTableOuterTopCellPaddingUnit((uint64_t)a3, v13);
        if ((v12 & 2) == 0)
        {
LABEL_19:
          if ((v12 & 4) == 0) {
            goto LABEL_20;
          }
          goto LABEL_65;
        }
      }
      else if ((v12 & 2) == 0)
      {
        goto LABEL_19;
      }
      WrdTableProperties::setDefaultTableOuterLeftCellPadding(a3, v15);
      uint64_t result = (WrdTableCellDescriptor *)WrdTableProperties::setDefaultTableOuterLeftCellPaddingUnit((uint64_t)a3, v13);
      if ((v12 & 4) == 0)
      {
LABEL_20:
        if ((v12 & 8) == 0) {
          return result;
        }
        goto LABEL_67;
      }
LABEL_65:
      WrdTableProperties::setDefaultTableOuterBottomCellPadding(a3, v15);
      uint64_t result = (WrdTableCellDescriptor *)WrdTableProperties::setDefaultTableOuterBottomCellPaddingUnit((uint64_t)a3, v13);
      if ((v12 & 8) == 0) {
        return result;
      }
LABEL_67:
      WrdTableProperties::setDefaultTableOuterRightCellPadding(a3, v15);
      return (WrdTableCellDescriptor *)WrdTableProperties::setDefaultTableOuterRightCellPaddingUnit((uint64_t)a3, v13);
    default:
      if (v8 >= v9) {
        return result;
      }
      break;
  }
  while (1)
  {
    uint64_t result = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference(a3, v8);
    int v16 = result;
    if (a2 == 54833)
    {
      if (v12)
      {
        WrdTableCellDescriptor::setTopSpacing(result, v15);
        uint64_t result = (WrdTableCellDescriptor *)WrdTableCellDescriptor::setTopSpacingUnit((uint64_t)v16, v13);
        if ((v12 & 2) == 0) {
          goto LABEL_32;
        }
      }
      else if ((v12 & 2) == 0)
      {
LABEL_32:
        if ((v12 & 4) == 0) {
          goto LABEL_33;
        }
LABEL_41:
        WrdTableCellDescriptor::setBottomSpacing(v16, v15);
        uint64_t result = (WrdTableCellDescriptor *)WrdTableCellDescriptor::setBottomSpacingUnit((uint64_t)v16, v13);
        if ((v12 & 8) != 0) {
          goto LABEL_42;
        }
        goto LABEL_43;
      }
      WrdTableCellDescriptor::setLeftSpacing(v16, v15);
      uint64_t result = (WrdTableCellDescriptor *)WrdTableCellDescriptor::setLeftSpacingUnit((uint64_t)v16, v13);
      if ((v12 & 4) == 0)
      {
LABEL_33:
        if ((v12 & 8) == 0) {
          goto LABEL_43;
        }
LABEL_42:
        WrdTableCellDescriptor::setRightSpacing(v16, v15);
        uint64_t result = (WrdTableCellDescriptor *)WrdTableCellDescriptor::setRightSpacingUnit((uint64_t)v16, v13);
        goto LABEL_43;
      }
      goto LABEL_41;
    }
    if (a2 != 54834) {
      goto LABEL_43;
    }
    if (v12)
    {
      WrdTableCellDescriptor::setTopPadding(result, v15);
      uint64_t result = (WrdTableCellDescriptor *)WrdTableCellDescriptor::setTopPaddingUnit((uint64_t)v16, v13);
      if ((v12 & 2) != 0)
      {
LABEL_36:
        WrdTableCellDescriptor::setLeftPadding(v16, v15);
        uint64_t result = (WrdTableCellDescriptor *)WrdTableCellDescriptor::setLeftPaddingUnit((uint64_t)v16, v13);
        if ((v12 & 4) == 0)
        {
LABEL_28:
          if ((v12 & 8) == 0) {
            goto LABEL_43;
          }
LABEL_38:
          WrdTableCellDescriptor::setRightPadding(v16, v15);
          uint64_t result = (WrdTableCellDescriptor *)WrdTableCellDescriptor::setRightPaddingUnit((uint64_t)v16, v13);
          goto LABEL_43;
        }
        goto LABEL_37;
      }
    }
    else if ((v12 & 2) != 0)
    {
      goto LABEL_36;
    }
    if ((v12 & 4) == 0) {
      goto LABEL_28;
    }
LABEL_37:
    WrdTableCellDescriptor::setBottomPadding(v16, v15);
    uint64_t result = (WrdTableCellDescriptor *)WrdTableCellDescriptor::setBottomPaddingUnit((uint64_t)v16, v13);
    if ((v12 & 8) != 0) {
      goto LABEL_38;
    }
LABEL_43:
    LOBYTE(v8) = v8 + 1;
    if (v9 <= v8) {
      return result;
    }
  }
}

WrdTableProperties *WrdTableProperties::setDefaultTableLeftCellPadding(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 1u;
  *((_WORD *)this + 174) = a2;
  return this;
}

uint64_t WrdTableProperties::setDefaultTableLeftCellPaddingUnit(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x100000uLL;
  *(_DWORD *)(result + 152) = a2;
  return result;
}

WrdTableProperties *WrdTableProperties::setDefaultTableRightCellPadding(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 4u;
  *((_WORD *)this + 176) = a2;
  return this;
}

uint64_t WrdTableProperties::setDefaultTableRightCellPaddingUnit(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x400000uLL;
  *(_DWORD *)(result + 160) = a2;
  return result;
}

uint64_t WrdTableProperties::setWidthIndentUnit(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x10000uLL;
  *(_DWORD *)(result + 136) = a2;
  return result;
}

WrdTableProperties *WrdTableProperties::setWidthIndent(WrdTableProperties *this, __int16 a2)
{
  *((void *)this + 2) |= 0x400000000000000uLL;
  *((_WORD *)this + 169) = a2;
  return this;
}

void PptExObjListAtom::PptExObjListAtom(PptExObjListAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEAE20;
  *(void *)(v2 + 32) = &unk_26EBEAEC8;
}

uint64_t PptExObjListAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptExObjListAtom *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptExHyperlinkAtom::PptExHyperlinkAtom(PptExHyperlinkAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEA850;
  *(void *)(v2 + 32) = &unk_26EBEA8F8;
  *(_DWORD *)(v2 + 48) = 0;
}

uint64_t PptExHyperlinkAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptExHyperlinkAtom *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptExEmbedAtom::PptExEmbedAtom(PptExEmbedAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEA758;
  *(void *)(v2 + 32) = &unk_26EBEA800;
  *(_WORD *)(v2 + 52) = 0;
  *(unsigned char *)(v2 + 54) = 0;
}

uint64_t PptExEmbedAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptExEmbedAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4
    || (*((unsigned char *)a2 + 52) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) & 1,
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 5)
    || (*((unsigned char *)a2 + 53) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) & 1,
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 6)
    || (*((unsigned char *)a2 + 54) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) & 1,
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 7))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  PptSkipVisitor::skipKnownBytes(*((unsigned char **)this + 3), a2, 1u);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptExOleObjAtom::PptExOleObjAtom(PptExOleObjAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEB108;
  *(void *)(v2 + 32) = &unk_26EBEB1B0;
}

uint64_t PptExOleObjAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptExOleObjAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4
    || (*((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 8)
    || (*((_DWORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 12)
    || (*((_DWORD *)a2 + 15) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 13)
    || (PptSkipVisitor::skipKnownBytes(*((unsigned char **)this + 3), a2, 3u),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 16)
    || (*((_DWORD *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 20))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  PptSkipVisitor::skipKnownBytes(*((unsigned char **)this + 3), a2, 4u);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

EshColor *EshColor::noModification(EshColor *this, EshColor *a2)
{
  this->var0.$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = 32;
  return this;
}

uint64_t EshColor::rgb(uint64_t result, char a2, char a3, uint64_t a4)
{
  *(_DWORD *)a4 = 0;
  *(unsigned char *)(a4 + 4) = result;
  *(unsigned char *)(a4 + 5) = a2;
  *(unsigned char *)(a4 + 6) = a3;
  return result;
}

uint64_t **EshOpt::takeComplexProperty(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  int v6 = *(uint64_t **)(a1 + 40);
  if (!v6) {
    goto LABEL_9;
  }
  while (1)
  {
    unsigned int v7 = *((_DWORD *)v6 + 8);
    if (v7 <= a2) {
      break;
    }
LABEL_5:
    int v6 = (uint64_t *)*v6;
    if (!v6) {
      goto LABEL_9;
    }
  }
  if (v7 < a2)
  {
    ++v6;
    goto LABEL_5;
  }
  unsigned int v10 = a2;
  unsigned int v11 = &v10;
  unsigned int v8 = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v10, (uint64_t)&std::piecewise_construct, &v11)[5];
  if (v8) {
    (*(void (**)(uint64_t *))(*v8 + 8))(v8);
  }
LABEL_9:
  unsigned int v10 = a2;
  unsigned int v11 = &v10;
  uint64_t result = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v10, (uint64_t)&std::piecewise_construct, &v11);
  result[5] = a3;
  result[6] = 0;
  return result;
}

uint64_t **EshOpt::takeGenericProperty(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  unsigned int v5 = a2;
  int v6 = &v5;
  uint64_t result = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v5, (uint64_t)&std::piecewise_construct, &v6);
  result[5] = a3;
  result[6] = 0;
  return result;
}

uint64_t *ChAutoPtr<EshOpt::GenericValue>::~ChAutoPtr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    *(void *)(v2 + 8) = &unk_26EBD7780;
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3) {
      MEMORY[0x23EC99790](v3, 0x1000C8077774924);
    }
    *(void *)(v2 + 16) = 0;
    *(_DWORD *)(v2 + 24) = 0;
    MEMORY[0x23EC997B0](v2, 0x1090C40DF1FC404);
  }
  *a1 = 0;
  return a1;
}

void EshColorMRU::EshColorMRU(EshColorMRU *this)
{
  EshAtom::EshAtom(this, 0xF11Au, 0);
  void *v1 = &unk_26EBD6EF0;
  v1[5] = 0;
  v1[6] = 0;
  v1[4] = 0;
}

uint64_t EshColorMRU::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshColorMRU *a2)
{
  uint64_t v4 = *((void *)this + 3);
  int Offset = EshRecord::getOffset(a2);
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, (Offset + 8), 0);
  int Instance = EshRecord::getInstance(a2);
  if (EshRecord::getDataLength(a2) != 4 * (unsigned __int16)Instance)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 7005;
  }
  if (Instance)
  {
    int v7 = 0;
    do
    {
      unsigned int v8 = (EshColor *)(*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3));
      unsigned int v9 = EshParserVisitor::decodeColor((EshColor *)this, v8);
      EshColorMRU::addColor(a2, v9);
      ++v7;
    }
    while ((unsigned __int16)v7 < (unsigned __int16)Instance);
  }
  EshParserVisitor::endRead(this, a2);
  return 1;
}

void PptVBAInfoAtom::PptVBAInfoAtom(PptVBAInfoAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEECA0;
  *(void *)(v2 + 32) = &unk_26EBEED48;
  *(void *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 56) = 0;
}

uint64_t PptVBAInfoAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptVBAInfoAtom *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptCommentIndex10Atom::PptCommentIndex10Atom(PptCommentIndex10Atom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBF1918;
  *(void *)(v2 + 32) = &unk_26EBF19C0;
  *(void *)(v2 + 48) = 0;
}

uint64_t PptCommentIndex10Atom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptCommentIndex10Atom *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptReviewAtom::PptReviewAtom(PptReviewAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_WORD *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBECF70;
  *(void *)(v2 + 32) = &unk_26EBED018;
}

uint64_t PptReviewAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptReviewAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  if (v4 >= 2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  *((unsigned char *)a2 + 45) = v4 == 1;
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptExObjRefAtom::PptExObjRefAtom(PptExObjRefAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEAF18;
  *(void *)(v2 + 32) = &unk_26EBEAFC0;
}

uint64_t PptExObjRefAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptExObjRefAtom *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptNotesAtom::PptNotesAtom(PptNotesAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEC668;
  *(void *)(v2 + 32) = &unk_26EBEC710;
  *(_DWORD *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 51) = 0;
}

uint64_t PptNotesAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptNotesAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  char v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((unsigned char *)a2 + 52) = v4 & 1;
  *((unsigned char *)a2 + 53) = (v4 & 2) != 0;
  *((unsigned char *)a2 + 54) = (v4 & 4) != 0;
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptHeaderMCAtom::PptHeaderMCAtom(PptHeaderMCAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEC098;
  *(void *)(v2 + 32) = &unk_26EBEC140;
}

uint64_t PptHeaderMCAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptHeaderMCAtom *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptTextGenericRulerAtom::setFirstLine(uint64_t this, int a2, __int16 a3)
{
  if (a2 >= 5)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  *(_WORD *)(this + 2 * a2 + 66) = a3;
  return this;
}

void PptEshGroup::PptEshGroup(PptEshGroup *this)
{
  EshGroup::EshGroup(this);
  PptEshClientContainer::PptEshClientContainer((PptEshClientContainer *)(v2 + 368));
  *(void *)this = &unk_26EBEA2D8;
  *((void *)this + 34) = &unk_26EBEA388;
  *((void *)this + 46) = &unk_26EBEA3C8;
}

void sub_238B6156C(_Unwind_Exception *a1)
{
  EshGroup::~EshGroup(v1);
  _Unwind_Resume(a1);
}

void EshGroup::EshGroup(EshGroup *this)
{
  EshContentBase::EshContentBase(this, 6u);
  *(void *)uint64_t v2 = &unk_26EBD83B8;
  *(void *)(v2 + 272) = &unk_26EBD8468;
  *(void *)(v2 + 280) = 0;
  EshObject::EshObject((EshObject *)(v2 + 288), 0x1Au);
  *((void *)this + 38) = (char *)this + 16;
  *((void *)this + 39) = 0;
  *((void *)this + 36) = &unk_26EBD84E0;
  EshObject::EshObject((EshObject *)this + 20, 0x1Bu);
  *((void *)this + 42) = (char *)this + 16;
  *((void *)this + 40) = &unk_26EBD8588;
  EshObject::EshObject((EshObject *)((char *)this + 344), 0x1Cu);
  *((void *)this + 45) = (char *)this + 16;
  *((void *)this + 43) = &unk_26EBD8630;
}

void sub_238B61670(_Unwind_Exception *a1)
{
  EshContentBase::~EshContentBase(v1);
  _Unwind_Resume(a1);
}

uint64_t EshGroup::init(EshGroup *this)
{
  uint64_t v2 = (EshSpgr *)operator new(0x30uLL);
  EshSpgr::EshSpgr(v2);
  *((void *)this + 35) = v2;
  return EshGroupProperties::init((uint64_t)this + 288, (uint64_t)v2);
}

void sub_238B616DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL PptEshGroup::isAtom(PptEshGroup *this)
{
  return ((*((void *)this + 48) - *((void *)this + 47)) & 0x7FFFFFFF8) == 0;
}

uint64_t EshBinaryReader::readObject(EshBinaryReader *this, EshGroup *a2)
{
  char v4 = (EshContainer *)operator new(0x38uLL);
  EshContainer::EshContainer(v4, 0xF004u);
  uint64_t v5 = (*(uint64_t (**)(EshBinaryReader *))(*(void *)this + 96))(this);
  (*(void (**)(EshBinaryReader *, EshContainer *, uint64_t))(*(void *)this + 104))(this, v4, v5);
  for (uint64_t i = 0; ; uint64_t i = (i + 1))
  {
    unsigned int v7 = (*(uint64_t (**)(EshContainer *))(*(void *)v4 + 40))(v4);
    uint64_t v8 = *(void *)v4;
    if (i >= v7) {
      break;
    }
    int v9 = (*(uint64_t (**)(EshContainer *, uint64_t))(v8 + 48))(v4, i);
    uint64_t v10 = (*(uint64_t (**)(EshContainer *, uint64_t))(*(void *)v4 + 104))(v4, i);
    unsigned int v11 = (char *)a2 + 208;
    switch(v9)
    {
      case 61449:
        unsigned int v11 = (char *)*((void *)a2 + 35);
        goto LABEL_8;
      case 61450:
        goto LABEL_8;
      case 61451:
        unsigned int v11 = (char *)a2 + 16;
        goto LABEL_8;
      case 61452:
      case 61453:
      case 61454:
        continue;
      case 61455:
        unsigned __int8 v12 = (EshChildAnchor *)operator new(0x30uLL);
        EshChildAnchor::EshChildAnchor(v12);
        (*(void (**)(EshBinaryReader *, EshChildAnchor *, uint64_t))(*(void *)this + 104))(this, v12, v10);
        *((_DWORD *)a2 + 64) = *((_DWORD *)v12 + 7);
        *((_DWORD *)a2 + 65) = *((_DWORD *)v12 + 8);
        *((_DWORD *)a2 + 66) = *((_DWORD *)v12 + 9);
        *((_DWORD *)a2 + 67) = *((_DWORD *)v12 + 10);
        (*(void (**)(EshChildAnchor *))(*(void *)v12 + 8))(v12);
        continue;
      case 61456:
        int v13 = (void (**)(EshBinaryReader *, EshGroup *, uint64_t))(*(void *)this + 168);
        goto LABEL_12;
      case 61457:
        int v13 = (void (**)(EshBinaryReader *, EshGroup *, uint64_t))(*(void *)this + 176);
LABEL_12:
        (*v13)(this, a2, v10);
        break;
      default:
        if (v9 == 61730)
        {
          unsigned int v11 = (char *)a2 + 144;
LABEL_8:
          (*(void (**)(EshBinaryReader *, char *, uint64_t))(*(void *)this + 104))(this, v11, v10);
        }
        break;
    }
  }
  uint64_t v14 = *(uint64_t (**)(EshContainer *))(v8 + 8);
  return v14(v4);
}

void sub_238B61A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t PptEshGroup::getNumChildren(PptEshGroup *this)
{
  return (*((void *)this + 48) - *((void *)this + 47)) >> 3;
}

uint64_t PptEshGroup::getChildType(PptEshGroup *this, unsigned int a2)
{
  return PptEshClientContainer::getChildType((PptEshGroup *)((char *)this + 368), a2);
}

uint64_t PptEshGroup::getChildVersion(PptEshGroup *this, unsigned int a2)
{
  return PptEshClientContainer::getChildVersion((PptEshGroup *)((char *)this + 368), a2);
}

void EshChildAnchor::EshChildAnchor(EshChildAnchor *this)
{
  EshRectAtom::EshRectAtom(this, 0xF00Fu, 0);
  void *v1 = &unk_26EBD6E18;
}

void EshChildAnchor::~EshChildAnchor(EshChildAnchor *this)
{
}

void PptInteractiveInfoAtom::PptInteractiveInfoAtom(PptInteractiveInfoAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEC380;
  *(void *)(v2 + 32) = &unk_26EBEC428;
  *(_DWORD *)(v2 + 68) = 0;
}

uint64_t PptInteractiveInfoAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptInteractiveInfoAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4) {
    goto LABEL_9;
  }
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 8) {
    goto LABEL_9;
  }
  *((_DWORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 9) {
    goto LABEL_9;
  }
  *((unsigned char *)a2 + 60) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 10
    || (*((_DWORD *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 11)
    || (char v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        *((unsigned char *)a2 + 68) = v5 & 1,
        *((unsigned char *)a2 + 69) = (v5 & 2) != 0,
        *((unsigned char *)a2 + 70) = (v5 & 4) != 0,
        *((unsigned char *)a2 + 71) = (v5 & 8) != 0,
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 12)
    || (*((_DWORD *)a2 + 18) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 13))
  {
LABEL_9:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  PptSkipVisitor::skipKnownToEnd(*((PptSkipVisitor **)this + 3), a2);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

unsigned char *PptSkipVisitor::skipKnownToEnd(PptSkipVisitor *this, const EshRecord *a2)
{
  unsigned int v4 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3) + 8;
  if (v4 < (*(unsigned int (**)(void))(**(void **)this + 40))(*(void *)this))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  int v5 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3);
  unsigned int v6 = v5 - (*(uint64_t (**)(void))(**(void **)this + 40))() + 8;
  return PptSkipVisitor::skipKnownBytes(this, a2, v6);
}

uint64_t PptTab::PptTab(uint64_t result, int a2, __int16 a3)
{
  *(_DWORD *)uint64_t result = a2;
  *(_WORD *)(result + 4) = a3;
  return result;
}

uint64_t PptExOleObjStg::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptExOleObjStg *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  uint64_t v4 = *((unsigned int *)a2 + 3);
  if (*((_WORD *)a2 + 10) == 1)
  {
    int v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
    if ((int)v4 <= 2080898 && v5 > 1032 * ((int)v4 - 4))
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 4003;
    }
    uint64_t v4 = (v4 - 4);
  }
  else
  {
    int v5 = 0;
  }
  *((_DWORD *)a2 + 12) = v5;
  unsigned int v7 = (SsrwOOStream *)*((void *)this + 1);
  unsigned int v8 = (*((uint64_t (**)(SsrwOOStream *))v7->var0 + 4))(v7);
  unsigned int v9 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  OcBinaryData::setDataInfo((OcBinaryData *)((char *)a2 + 56), v7, v8, v9, v4);
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 1) + 16))(*((void *)this + 1), v4, 1);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t non-virtual thunk to'PptAtom::setId(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) = a2;
  *(unsigned char *)(this + 12) = 1;
  return this;
}

uint64_t CsLeReadChars16(uint64_t result, int a2, _WORD *a3)
{
  uint64_t v3 = a2 & ~(a2 >> 31);
  uint64_t v4 = result + 1;
  do
  {
    if (!v3) {
      break;
    }
    int v5 = *(unsigned __int16 *)(v4 - 1);
    *a3++ = v5;
    --v3;
    v4 += 2;
  }
  while (v5);
  return result;
}

void sub_238B623CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshFill::getFillType(EshFill *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x180u);
}

uint64_t EshStroke::getOpacity(EshStroke *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x1C1u);
}

uint64_t EshStroke::getFillType(EshStroke *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x1C4u);
}

uint64_t *EshStroke::getDashStyle(EshStroke *this)
{
  return *EshOpt::getProperty((uint64_t)this->var2, 0x1CFu);
}

uint64_t EshStroke::getPredefDashStyle(EshStroke *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x1CEu);
}

uint64_t EshStroke::getWeight(EshStroke *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x1CBu);
}

uint64_t EshStroke::getCapStyle(EshStroke *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x1D7u);
}

uint64_t EshStroke::getLineStyle(EshStroke *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x1CDu);
}

uint64_t EshShadow::getOn(EshShadow *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty(*((void *)this + 2), 0x23Eu);
}

uint64_t EshTextBox::getInsetLeft(EshTextBox *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x81u);
}

uint64_t EshTextBox::getInsetRight(EshTextBox *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x83u);
}

uint64_t EshTextBox::getInsetTop(EshTextBox *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x82u);
}

uint64_t EshTextBox::getInsetBottom(EshTextBox *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x84u);
}

uint64_t EshTextBox::getColumnCount(EshTextBox *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2 + 128, 0x8Cu);
}

uint64_t EshTextBox::getColumnMargin(EshTextBox *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2 + 128, 0x8Du);
}

uint64_t EshTextBox::getRotate(EshTextBox *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x89u);
}

uint64_t EshTextBox::getFlow(EshTextBox *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x88u);
}

uint64_t EshTextBox::getFitShapeToText(EshTextBox *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty((uint64_t)this->var2, 0xBEu);
}

uint64_t EshTextBox::getWrapStyle(EshTextBox *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x85u);
}

uint64_t EshContentLocks::getAspectRatio(EshContentLocks *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty(*((void *)this + 2), 0x78u);
}

uint64_t EshShapeProperties::getHidden(EshShapeProperties *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty((uint64_t)this->var2, 0x3BEu);
}

void sub_238B6282C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B628FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B62984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B62A68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B62B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B62BE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshPath::isStrokeOKSet(EshPath *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x17Cu);
}

uint64_t EshShapeLib::isStrokeOK(EshShapeLib *this, uint64_t a2)
{
  Shapeint Type = (unsigned __int16 *)getShapeType((int)this);
  if (ShapeType) {
    return (*ShapeType >> 5) & 1;
  }
  return a2;
}

uint64_t TSUDynamicCast(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (objc_opt_isKindOfClass()) {
    return a2;
  }
  return 0;
}

uint64_t EshShapeImageData::getCropLeft(EshShapeImageData *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this + 2), 0x102u);
}

uint64_t EshShapeImageData::getCropRight(EshShapeImageData *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this + 2), 0x103u);
}

uint64_t EshShapeImageData::getGain(EshShapeImageData *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this + 2), 0x108u);
}

uint64_t EshShapeImageData::getBlackLevel(EshShapeImageData *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this + 2), 0x109u);
}

void sub_238B63308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshPath::isFillOKSet(EshPath *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x17Fu);
}

uint64_t EshShapeLib::isFillOK(EshShapeLib *this, uint64_t a2)
{
  Shapeint Type = (unsigned __int16 *)getShapeType((int)this);
  if (ShapeType) {
    return (*ShapeType >> 4) & 1;
  }
  return a2;
}

uint64_t EshFill::isBlipSet(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x186u);
}

uint64_t EshFill::isBlipId(EshFill *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty((uint64_t)this->var2, 0x186u);
}

uint64_t EshFill::getBlipId(EshFill *this)
{
  return *((unsigned __int16 *)EshOpt::getProperty((uint64_t)this->var2, 0x186u) + 4);
}

uint64_t EshFill::isBlipNameSet(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x187u);
}

uint64_t *EshFill::getBlipName(EshFill *this)
{
  return *EshOpt::getProperty((uint64_t)this->var2, 0x187u);
}

EshColor *EshColor::white(EshColor *this, EshColor *a2)
{
  this->var0.var1.unsigned int var1 = -1;
  this->var0.var1.var0.uint64_t var2 = -1;
  this->var0.$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = 0;
  return this;
}

void sub_238B637E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B63988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B63E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t OADTextCachedSpacingWithSpacing(OADTextSpacing *a1)
{
  uint64_t v2 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [(OADTextSpacing *)v2 percent];
    uint64_t v1 = (int)v3;
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      LODWORD(v1) = vcvts_n_s32_f32((float)-(int)[(OADTextSpacing *)v2 points], 3uLL);
    }
    else {
      uint64_t v1 = 0;
    }
  }

  return v1;
}

void sub_238B64004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TSUHash(char *a1, uint64_t a2)
{
  for (uint64_t result = 0xCBF29CE484222325; a2; --a2)
  {
    uint64_t v4 = *a1++;
    uint64_t result = 0x100000001B3 * (result ^ v4);
  }
  return result;
}

void sub_238B641A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B64274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B64518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B647BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B64850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B648E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B64944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B64C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238B64E48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B651E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B65AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B65BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B65DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

CGColorRef CMShapeRendererCreateGenericRGBA(float a1, float a2, float a3, float a4)
{
  components[4] = *(CGFloat *)MEMORY[0x263EF8340];
  components[0] = a1;
  components[1] = a2;
  components[2] = a3;
  components[3] = a4;
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  CGColorRef v5 = CGColorCreate(DeviceRGB, components);
  CGColorSpaceRelease(DeviceRGB);
  return v5;
}

void sub_238B65EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B65F8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B66008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B66110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B66224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B662C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B66594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B666C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B66848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);

  EshGeometryProperties::~EshGeometryProperties((EshGeometryProperties *)va);
  _Unwind_Resume(a1);
}

void EshGeometryProperties::EshGeometryProperties(EshGeometryProperties *this)
{
  *((_WORD *)this + 4) = 5;
  *(void *)this = &unk_26EBD7518;
  *(void *)((char *)this + 12) = 0;
  *(int32x2_t *)((char *)this + 20) = vdup_n_s32(0x5460u);
  *((void *)this + 16) = 0x8000000080000000;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 34) = 1;
  *((_DWORD *)this + 35) = 65793;
  *((_WORD *)this + 72) = 256;
  *((unsigned char *)this + 146) = 0;
}

double EshGeometryProperties::init(EshGeometryProperties *this)
{
  *(_OWORD *)((char *)this + 12) = xmmword_238EDC870;
  *((void *)this + 16) = 0x8000000080000000;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 34) = 1;
  *(void *)&double result = 65793;
  *((_DWORD *)this + 35) = 65793;
  *((_WORD *)this + 72) = 256;
  *((unsigned char *)this + 146) = 0;
  return result;
}

BOOL EshShapeLib::cloneShapeProperties(EshShapeLib *this, int32x2_t *a2, EshGeometryProperties *a3)
{
  Shapeint Type = getShapeType((int)this);
  uint64_t v5 = ShapeType;
  if (ShapeType)
  {
    a2[4] = (int32x2_t)EshShapeLib::cloneVertices(*(EshShapeLib **)(ShapeType + 24), (const EshComputedValue *)*(unsigned int *)(ShapeType + 32));
    a2[5] = (int32x2_t)EshShapeLib::cloneSegments(*(void *)(v5 + 8), *(_DWORD *)(v5 + 16));
    a2[14] = (int32x2_t)EshShapeLib::cloneFormulas(*(void *)(v5 + 56), *(_DWORD *)(v5 + 64));
    a2[15] = (int32x2_t)EshShapeLib::cloneInscribe(*(void *)(v5 + 72), *(_DWORD *)(v5 + 80));
    uint64_t v6 = *(unsigned int *)(v5 + 48);
    if ((int)v6 >= 1)
    {
      unsigned int v7 = *(__int32 **)(v5 + 40);
      unsigned int v8 = a2 + 6;
      do
      {
        __int32 v9 = *v7++;
        v8->i32[0] = v9;
        unsigned int v8 = (int32x2_t *)((char *)v8 + 4);
        --v6;
      }
      while (v6);
    }
    if (*(_WORD *)v5) {
      a2[16] = vdup_n_s32(0x2A30u);
    }
  }
  return v5 != 0;
}

void *EshShapeLib::cloneVertices(EshShapeLib *this, const EshComputedValue *a2)
{
  unsigned int v2 = a2;
  uint64_t v4 = operator new(0x20uLL);
  v4[2] = 0;
  v4[3] = 0;
  *uint64_t v4 = &unk_26EBD6120;
  v4[1] = 0;
  EshBasicTablePropVal<EshComputedValue>::init(v4, v2, (uint64_t)this);
  return v4;
}

void sub_238B66A58(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void EshBasicTablePropVal<EshComputedValue>::init(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = (char **)(a1 + 1);
  std::vector<EshComputedValue,ChAllocator<EshComputedValue>>::reserve((void **)a1 + 1, a2);
  if (a2)
  {
    uint64_t v7 = 0;
    unsigned int v8 = a1 + 3;
    __int32 v9 = (char *)a1[2];
    do
    {
      if ((unint64_t)v9 >= *v8)
      {
        unint64_t v10 = v9 - *v6;
        uint64_t v11 = (*v8 - (void)*v6) >> 3;
        unsigned int v12 = 2 * v11;
        if (2 * (int)v11 <= (v10 >> 3) + 1) {
          unsigned int v12 = (v10 >> 3) + 1;
        }
        if (v11 >= 0x7FFFFFFF) {
          unint64_t v13 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13)
        {
          uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)(a1 + 3), v13);
          uint64_t v16 = v15;
        }
        else
        {
          uint64_t v14 = 0;
          uint64_t v16 = 0;
        }
        uint64_t v17 = &v14[v10 & 0x7FFFFFFF8];
        *(void *)uint64_t v17 = *(void *)(a3 + 8 * v7);
        __int32 v9 = v17 + 8;
        unint64_t v19 = (char *)a1[1];
        int v18 = (char *)a1[2];
        if (v18 != v19)
        {
          do
          {
            uint64_t v20 = *((void *)v18 - 1);
            v18 -= 8;
            *((void *)v17 - 1) = v20;
            v17 -= 8;
          }
          while (v18 != v19);
          int v18 = *v6;
        }
        a1[1] = v17;
        a1[2] = v9;
        a1[3] = &v14[8 * v16];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *(void *)__int32 v9 = *(void *)(a3 + 8 * v7);
        v9 += 8;
      }
      a1[2] = v9;
      ++v7;
    }
    while (v7 != a2);
  }
}

void *EshShapeLib::cloneSegments(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = operator new(0x20uLL);
  v4[2] = 0;
  v4[3] = 0;
  *uint64_t v4 = &unk_26EBD6288;
  v4[1] = 0;
  EshBasicTablePropVal<EshComputedValue>::init(v4, a2, a1);
  return v4;
}

void sub_238B66C18(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t *EshShapeLib::cloneFormulas(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = (uint64_t *)operator new(0x20uLL);
  v4[2] = 0;
  v4[3] = 0;
  *uint64_t v4 = (uint64_t)&unk_26EBD6328;
  v4[1] = 0;
  EshBasicTablePropVal<EshFormula>::init(v4, a2, a1);
  return v4;
}

void sub_238B66CB8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void EshBasicTablePropVal<EshFormula>::init(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  std::vector<EshFormula,ChAllocator<EshFormula>>::reserve(a1 + 1, a2);
  if (a2)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a2;
    __int32 v9 = (_DWORD *)a1[2];
    do
    {
      unint64_t v10 = (_DWORD *)(a3 + 28 * v7);
      if ((unint64_t)v9 >= a1[3])
      {
        uint64_t v11 = std::vector<EshFormula,ChAllocator<EshFormula>>::__push_back_slow_path<EshFormula const&>(v6, v10);
      }
      else
      {
        uint64_t v11 = (uint64_t)(v9 + 7);
        uint64_t v12 = 1;
        do
        {
          unint64_t v13 = &v9[v12];
          *unint64_t v13 = 0;
          *((_WORD *)v13 + 2) = 0;
          v12 += 2;
        }
        while (v13 + 2 != (_DWORD *)v11);
        EshFormula::operator=(v9, v10);
        a1[2] = v11;
      }
      a1[2] = v11;
      ++v7;
      __int32 v9 = (_DWORD *)v11;
    }
    while (v7 != v8);
  }
}

void sub_238B66DB0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t *EshShapeLib::cloneInscribe(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = (uint64_t *)operator new(0x20uLL);
  v4[2] = 0;
  v4[3] = 0;
  *uint64_t v4 = (uint64_t)&unk_26EBD63C8;
  v4[1] = 0;
  EshBasicTablePropVal<EshComputedRect>::init(v4, a2, a1);
  return v4;
}

void sub_238B66E24(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void EshBasicTablePropVal<EshComputedRect>::init(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::reserve(a1 + 1, a2);
  if (a2)
  {
    uint64_t v7 = 0;
    unint64_t v8 = a1[2];
    uint64_t v9 = a3;
    do
    {
      if (v8 >= a1[3])
      {
        unint64_t v8 = std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::__push_back_slow_path<EshComputedRect const&>(v6, a3 + 32 * v7);
      }
      else
      {
        for (uint64_t i = 0; i != 32; i += 8)
        {
          uint64_t v11 = v8 + i;
          *(unsigned char *)uint64_t v11 = 0;
          *(_DWORD *)(v11 + 4) = 0;
        }
        for (uint64_t j = 0; j != 32; j += 8)
          *(void *)(v8 + j) = *(void *)(v9 + j);
        v8 += 32;
      }
      a1[2] = v8;
      ++v7;
      v9 += 32;
    }
    while (v7 != a2);
  }
}

void *EshGeometryProperties::addImpliedSegments(void *this)
{
  if (!this[5])
  {
    uint64_t v1 = this;
    if (this[4])
    {
      if (*((_DWORD *)this + 34) == 4)
      {
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = 7007;
      }
      uint64_t v2 = operator new(0x20uLL);
      v2[2] = 0;
      v2[3] = 0;
      *uint64_t v2 = &unk_26EBD6288;
      v2[1] = 0;
      v1[5] = v2;
      int v3 = *((__int16 *)v1 + 68);
      int v4 = (unsigned __int16)((*(_DWORD *)(v1[4] + 16) - *(_DWORD *)(v1[4] + 8)) >> 3);
      return EshGeometryProperties::generateImpliedPath(v4, v3, (uint64_t)v2);
    }
  }
  return this;
}

void sub_238B670F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshGeometryProperties::getVertices(EshGeometryProperties *this)
{
  return *((void *)this + 4);
}

uint64_t EshGeometryProperties::getSegments(EshGeometryProperties *this)
{
  return *((void *)this + 5);
}

void sub_238B677D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Block_object_dispose((const void *)(v14 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_238B6780C(void *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);

    objc_end_catch();
    JUMPOUT(0x238B67778);
  }
  JUMPOUT(0x238B677E0);
}

uint64_t EshBasicTablePropVal<EshComputedValue>::operator[](uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (((unint64_t)(*(void *)(a1 + 16) - v2) >> 3) < a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  return v2 + 8 * a2;
}

void sub_238B67A04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshGeometryProperties::getFormulas(EshGeometryProperties *this)
{
  return *((void *)this + 14);
}

void sub_238B67C7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL EshGeometryProperties::isInscribesSet(EshGeometryProperties *this)
{
  return *((void *)this + 15) != 0;
}

uint64_t EshGeometryProperties::getInscribes(EshGeometryProperties *this)
{
  return *((void *)this + 15);
}

void sub_238B67E08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B67F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void EshGeometryProperties::~EshGeometryProperties(EshGeometryProperties *this)
{
  *(void *)this = &unk_26EBD7518;
  EshGeometryProperties::cleanup(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBD7518;
  EshGeometryProperties::cleanup(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t EshGeometryProperties::cleanup(EshGeometryProperties *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 4) = 0;
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 5) = 0;
  uint64_t v4 = *((void *)this + 11);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 11) = 0;
  uint64_t v5 = *((void *)this + 12);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 12) = 0;
  uint64_t v6 = *((void *)this + 13);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 13) = 0;
  uint64_t v7 = *((void *)this + 14);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 14) = 0;
  uint64_t result = *((void *)this + 15);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 15) = 0;
  return result;
}

void EshPathParamTable::~EshPathParamTable(EshPathParamTable *this)
{
  *(void *)this = &unk_26EBD61B0;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBD61B0;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

void EshTablePropVal<EshPathCommand>::~EshTablePropVal(void *a1)
{
  *a1 = &unk_26EBD62F0;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23EC997B0);
}

void EshTablePropVal<EshFormula>::~EshTablePropVal(void *a1)
{
  *a1 = &unk_26EBD6390;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23EC997B0);
}

void EshTablePropVal<EshComputedRect>::~EshTablePropVal(void *a1)
{
  *a1 = &unk_26EBD6430;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23EC997B0);
}

void sub_238B684D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B687B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B689E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CMDrawingAction;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

uint64_t EshFill::isAngleSet(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x18Bu);
}

uint64_t EshFill::getAngle(EshFill *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x18Bu);
}

uint64_t EshFill::isFocusSet(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x18Cu);
}

uint64_t EshFill::getFocus(EshFill *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x18Cu);
}

uint64_t EshFill::isColor2Set(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x183u);
}

uint64_t EshFill::getColor2(EshFill *this)
{
  return EshOpt::getColorProperty((uint64_t)this->var2, 0x183u);
}

void sub_238B68CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t EshColor::getAdjustmentType(EshColor *this)
{
  return this->var0.var1.var0.var2 & 0xF;
}

uint64_t EshColor::isInvert(EshColor *this)
{
  return (this->var0.var1.var0.var2 >> 4) & 1;
}

uint64_t EshColor::isInvert128(EshColor *this)
{
  return (this->var0.var1.var0.var2 >> 5) & 1;
}

uint64_t EshColor::isGray(EshColor *this)
{
  return (this->var0.var1.var0.var2 >> 6) & 1;
}

void sub_238B68E0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshFill::isColorsSet(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x197u);
}

uint64_t EshFill::isOpacity2Set(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x184u);
}

void sub_238B68FD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshGroupProperties::isTablePropertiesSet(EshGroupProperties *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2) + 128, 0x39Fu);
}

void sub_238B691E0(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;

  _Unwind_Resume(a1);
}

void sub_238B692CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B69428(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_238B6995C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_238B69B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B69BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B69D54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B6A344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B6A690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B6AA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B6ADF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double TSUCenterOfRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double MidX = CGRectGetMidX(*(CGRect *)&a1);
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  CGRectGetMidY(v10);
  return MidX;
}

void sub_238B6AF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B6AFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B6B050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B6B118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshShapeImageData::getCropTop(EshShapeImageData *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this + 2), 0x100u);
}

uint64_t EshShapeImageData::getCropBottom(EshShapeImageData *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this + 2), 0x101u);
}

uint64_t EshFill::getOpacity(EshFill *this)
{
  int v1 = *(_DWORD *)EshOpt::getProperty((uint64_t)this->var2, 0x182u);
  if (v1 >= 0x10000) {
    return 0x10000;
  }
  else {
    return v1;
  }
}

void sub_238B6B234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t EshShapeProperties::getAdj(EshShapeProperties *this, int a2)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, a2 + 327);
}

double NSTransposedRectWithSameCenter(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double MidX = CGRectGetMidX(*(CGRect *)&a1);
  v11.origin.x = a1;
  v11.origin.y = a2;
  v11.size.width = a3;
  v11.size.height = a4;
  CGRectGetMidY(v11);
  v12.origin.x = a1;
  v12.origin.y = a2;
  v12.size.width = a3;
  v12.size.height = a4;
  double Height = CGRectGetHeight(v12);
  v13.origin.x = a1;
  v13.origin.y = a2;
  v13.size.width = a3;
  v13.size.height = a4;
  CGRectGetWidth(v13);
  return MidX - Height * 0.5;
}

void sub_238B6B3A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B6B46C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B6B520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B6B758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B6B904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B6B998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B6BC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B6BD9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B6BFC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PptNotesAtom::~PptNotesAtom(PptNotesAtom *this)
{
}

void PptHeaderMCAtom::~PptHeaderMCAtom(PptHeaderMCAtom *this)
{
}

void PptExOleObjStg::~PptExOleObjStg(PptExOleObjStg *this)
{
  *(void *)this = &unk_26EBEB200;
  *((void *)this + 4) = &unk_26EBEB2A8;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 56));
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBEB200;
  *((void *)this + 4) = &unk_26EBEB2A8;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 56));
}

void PptEshGroup::~PptEshGroup(PptEshGroup *this)
{
  PptEshClientContainer::~PptEshClientContainer((PptEshGroup *)((char *)this + 368));
  EshGroup::~EshGroup(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t vars8;

  PptEshClientContainer::~PptEshClientContainer((PptEshGroup *)((char *)this + 368));
  EshGroup::~EshGroup(this);
}

void EshGroup::~EshGroup(EshGroup *this)
{
  *(void *)this = &unk_26EBD83B8;
  *((void *)this + 34) = &unk_26EBD8468;
  uint64_t v2 = *((void *)this + 35);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 35) = 0;
  EshContentBase::~EshContentBase(this);
}

{
  uint64_t vars8;

  EshGroup::~EshGroup(this);
  JUMPOUT(0x23EC997B0);
}

void PptInteractiveInfoAtom::~PptInteractiveInfoAtom(PptInteractiveInfoAtom *this)
{
}

void PptExObjRefAtom::~PptExObjRefAtom(PptExObjRefAtom *this)
{
}

void PptExObjListAtom::~PptExObjListAtom(PptExObjListAtom *this)
{
}

void PptExHyperlinkAtom::~PptExHyperlinkAtom(PptExHyperlinkAtom *this)
{
}

void PptExEmbedAtom::~PptExEmbedAtom(PptExEmbedAtom *this)
{
}

void PptExOleObjAtom::~PptExOleObjAtom(PptExOleObjAtom *this)
{
}

void EshColorMRU::~EshColorMRU(EshColorMRU *this)
{
  *(void *)this = &unk_26EBD6EF0;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBD6EF0;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
}

void PptVBAInfoAtom::~PptVBAInfoAtom(PptVBAInfoAtom *this)
{
  *(void *)this = &unk_26EBEECA0;
  *((void *)this + 4) = &unk_26EBEED48;
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBEECA0;
  *((void *)this + 4) = &unk_26EBEED48;
}

void PptCommentIndex10Atom::~PptCommentIndex10Atom(PptCommentIndex10Atom *this)
{
  *(void *)this = &unk_26EBF1918;
  *((void *)this + 4) = &unk_26EBF19C0;
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBF1918;
  *((void *)this + 4) = &unk_26EBF19C0;
}

void PptReviewAtom::~PptReviewAtom(PptReviewAtom *this)
{
}

void XlObjectFactory::XlObjectFactory(XlObjectFactory *this)
{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBE2BE0;
  this->unsigned int var1 = 0;
}

void XlChartBinaryReader::XlChartBinaryReader(XlChartBinaryReader *this, XlObjectFactory *a2)
{
  *(void *)this = &unk_26EBDD7F0;
  *((void *)this + 1) = &unk_26EBDDB10;
  *((void *)this + 2) = &unk_26EBDDB40;
  *((void *)this + 250) = &unk_26EBDDDB0;
  *((void *)this + 169) = 0;
  *((void *)this + 171) = 0;
  *((void *)this + 170) = 0;
  XlSubstreamProperties::XlSubstreamProperties((XlChartBinaryReader *)((char *)this + 1376));
  *((void *)this + 204) = 0;
  *((_OWORD *)this + 101) = 0u;
  *((void *)this + 210) = 0;
  *(_OWORD *)((char *)this + 1688) = 0u;
  *((void *)this + 217) = 0;
  *(_OWORD *)((char *)this + 1832) = 0u;
  *((_OWORD *)this + 109) = 0u;
  *(_OWORD *)((char *)this + 1556) = 0u;
  *((_OWORD *)this + 111) = 0u;
  *((_OWORD *)this + 112) = 0u;
  *((_OWORD *)this + 113) = 0u;
  *((void *)this + 228) = (char *)this + 1832;
  *((void *)this + 232) = 0;
  *((void *)this + 233) = 0;
  *((void *)this + 231) = (char *)this + 1856;
  *((void *)this + 236) = 0;
  *((void *)this + 237) = 0;
  *((void *)this + 235) = (char *)this + 1888;
  *((void *)this + 240) = 0;
  *((void *)this + 239) = 0;
  *((void *)this + 238) = (char *)this + 1912;
  __asm { FMOV            V1.2S, #1.0 }
  *((void *)this + 241) = _D1;
  *(_OWORD *)((char *)this + 1944) = 0u;
  *(_OWORD *)((char *)this + 1960) = 0u;
  *(_OWORD *)((char *)this + 1976) = 0u;
  XlChartBinaryReader::reset(this);
}

void sub_238B6C5A0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v4;
  if (*v4)
  {
    *((void *)v1 + 170) = v6;
    operator delete(v6);
  }
  XlBinaryReader::~XlBinaryReader(v1, (uint64_t *)&off_26EBDDE50);
  OcReader::~OcReader(v2);
  _Unwind_Resume(a1);
}

void XlBinaryReader::XlBinaryReader(XlBinaryReader *this, XlObjectFactory *a2, XlObjectFactory *a3)
{
  *(void *)this = &unk_26EBE44E0;
  *((void *)this + 1) = &unk_26EBE4568;
  unsigned int var1 = a2->var1;
  *((void *)this + 2) = var1;
  *(void *)((char *)this + *(void *)&var1[-2].var1 + 16) = a2[1].var0;
  $4A9E05CF4EB813CDA9C8B3A246960F55 var0 = a2->var0;
  *(void *)this = a2->var0;
  *((void *)this + 1) = &unk_26EBE3DE8;
  *((void *)this + 2) = a2[1].var1;
  *(void *)((char *)*(var0 - 3) + (void)this) = a2[2].var0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  XlEshBinaryReader::XlEshBinaryReader((XlBinaryReader *)((char *)this + 40));
  *(void *)&long long v7 = -1;
  *((void *)&v7 + 1) = -1;
  *(_OWORD *)((char *)this + 168) = v7;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *(_OWORD *)((char *)this + 184) = v7;
  *(_OWORD *)((char *)this + 200) = v7;
  *(_OWORD *)((char *)this + 216) = v7;
  *(_OWORD *)((char *)this + 232) = v7;
  *(_OWORD *)((char *)this + 248) = v7;
  *(_OWORD *)((char *)this + 264) = v7;
  *((_DWORD *)this + 70) = -1;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *((void *)this + 49) = -1;
  *((_WORD *)this + 200) = -1;
  *(void *)((char *)this + 404) = 0xFFFFFFFFLL;
  *((void *)this + 52) = 0;
  *((void *)this + 53) = 0;
  *((void *)this + 54) = 0;
  *((_DWORD *)this + 110) = -1;
  *((unsigned char *)this + 444) = 9;
  *((_DWORD *)this + 112) = 0;
  XlWorksheetProperties::XlWorksheetProperties((XlBinaryReader *)((char *)this + 456));
  XlWorksheetProtection::XlWorksheetProtection((XlBinaryReader *)((char *)this + 600));
  XlCalculationProperties::XlCalculationProperties((XlBinaryReader *)((char *)this + 632));
  XlSortInfo::XlSortInfo((XlBinaryReader *)((char *)this + 664));
  XlDocumentInfo::XlDocumentInfo((XlBinaryReader *)((char *)this + 824));
  XlDocumentProtection::XlDocumentProtection((XlBinaryReader *)((char *)this + 848));
  XlFileProtection::XlFileProtection((XlBinaryReader *)((char *)this + 864));
  *((void *)this + 126) = -1;
  XlDocumentProperties::XlDocumentProperties((XlBinaryReader *)((char *)this + 1016));
  XlSubstreamProperties::XlSubstreamProperties((XlBinaryReader *)((char *)this + 1136));
  *(_OWORD *)((char *)this + 1304) = 0u;
  *((unsigned char *)this + 1320) = 9;
  *((void *)this + 166) = a3;
  *((void *)this + 167) = 0;
  *((unsigned char *)this + 1344) = 0;
  *(_WORD *)((char *)this + 289) = 0;
  uint64_t v8 = *(void *)(*(void *)this - 24);
  EshObjectFactory = XlObjectFactory::getEshObjectFactory(a3);
  (*(void (**)(char *, XlEshObjectFactory *))(*(void *)((char *)this + v8) + 144))((char *)this + v8, EshObjectFactory);
  CGRect v10 = XlObjectFactory::getEshObjectFactory(*((XlObjectFactory **)this + 166));
  EshGroupProperties::init((uint64_t)this + 40, (uint64_t)v10);
}

void sub_238B6C920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, XlWorksheetProperties *a10)
{
  XlDocumentProperties::~XlDocumentProperties(v15);
  XlFileProtection::~XlFileProtection(v14);
  XlSortInfo::~XlSortInfo(v13);
  XlCalculationProperties::~XlCalculationProperties(v12);
  XlWorksheetProperties::~XlWorksheetProperties(a10);
  int v18 = *(void **)(v16 + 248);
  if (v18)
  {
    v10[53] = v18;
    operator delete(v18);
  }
  unint64_t v19 = (void *)v10[43];
  if (v19)
  {
    v10[44] = v19;
    operator delete(v19);
  }
  uint64_t v20 = (void **)(v16 + 128);
  unint64_t v21 = (void *)v10[40];
  if (v21)
  {
    v10[41] = v21;
    operator delete(v21);
  }
  int v22 = *v20;
  if (*v20)
  {
    v10[38] = v22;
    operator delete(v22);
  }
  XlEshBinaryReader::~XlEshBinaryReader(v11);
  _Unwind_Resume(a1);
}

void XlEshBinaryReader::XlEshBinaryReader(XlEshBinaryReader *this)
{
  EshBinaryReader::EshBinaryReader(this);
  *(void *)uint64_t v1 = &unk_26EBE4600;
  *(unsigned char *)(v1 + 93) = 0;
  *(_DWORD *)(v1 + 96) = 0;
  *(void *)(v1 + 104) = 0;
}

void XlWorksheetProperties::XlWorksheetProperties(XlWorksheetProperties *this)
{
  *(void *)this = &unk_26EBE3050;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  OcText::OcText((OcText *)this + 2);
  XlWorksheetProperties::setDefault(this);
}

void sub_238B6CA98(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;
  OcText::~OcText(v4);
  uint64_t v6 = (void *)v1[9];
  if (v6)
  {
    v1[10] = v6;
    operator delete(v6);
  }
  long long v7 = *v3;
  if (*v3)
  {
    v1[7] = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void XlWorksheetProperties::setDefault(XlWorksheetProperties *this)
{
  *((_WORD *)this + 4) = 8;
  *((_DWORD *)this + 3) = -1;
  *((unsigned char *)this + 18) = 1;
  *(void *)((char *)this + 20) = 0;
  *((_WORD *)this + 8) = 255;
  *((_DWORD *)this + 7) = 0;
  *((_DWORD *)this + 8) = 1;
  *(void *)((char *)this + 36) = 16843009;
  *((_WORD *)this + 22) = -1;
  XlWorksheetProperties::clearVertPageBreaks(this);
  XlWorksheetProperties::clearHorizPageBreaks(this);
  OcText::clearBuffer((OcText *)this + 2);
  *((_DWORD *)this + 28) = 0;
}

void *XlWorksheetProperties::clearVertPageBreaks(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[9];
  uint64_t v3 = this[10];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v4);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 16))(this);
        uint64_t v2 = v1[9];
        uint64_t v3 = v1[10];
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[10] = v2;
  return this;
}

void *XlWorksheetProperties::clearHorizPageBreaks(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[6];
  uint64_t v3 = this[7];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v4);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 16))(this);
        uint64_t v2 = v1[6];
        uint64_t v3 = v1[7];
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[7] = v2;
  return this;
}

void OcText::clearBuffer(OcText *this)
{
  var5 = this->var5;
  if (var5) {
    bzero(var5, this->var4);
  }
}

void XlWorksheetProtection::XlWorksheetProtection(XlWorksheetProtection *this)
{
  *((_WORD *)this + 13) = 0;
  *(void *)this = &unk_26EBE3090;
  *((void *)this + 1) = 0;
  *(void *)((char *)this + 13) = 0;
  *(_DWORD *)((char *)this + 21) = 1;
  *((unsigned char *)this + 25) = 1;
}

void XlCalculationProperties::XlCalculationProperties(XlCalculationProperties *this)
{
  *(void *)this = &unk_26EBE22B0;
  *((void *)this + 1) = 0x3F50624DD2F1A9FCLL;
  *((_DWORD *)this + 4) = 0;
  *((_WORD *)this + 10) = 100;
  *((unsigned char *)this + 22) = 0;
  *((_DWORD *)this + 6) = 0;
  *((unsigned char *)this + 28) = 1;
}

void XlSortInfo::XlSortInfo(XlSortInfo *this)
{
  *(void *)this = &unk_26EBE2FE0;
  uint64_t v2 = (OcText *)((char *)this + 64);
  OcText::OcText((OcText *)((char *)this + 16));
  OcText::OcText(v2);
  OcText::OcText((OcText *)((char *)this + 112));
  XlSortInfo::setDefault(this);
}

void sub_238B6CD5C(_Unwind_Exception *a1)
{
  OcText::~OcText(v3);
  OcText::~OcText(v2);
  OcText::~OcText(v1);
  _Unwind_Resume(a1);
}

void XlSortInfo::setDefault(XlSortInfo *this)
{
  *(_DWORD *)((char *)this + 11) = 0;
  *((_DWORD *)this + 2) = 0;
  OcText::clearBuffer((OcText *)((char *)this + 16));
  *((_DWORD *)this + 8) = 0;
  OcText::clearBuffer((OcText *)((char *)this + 64));
  *((_DWORD *)this + 20) = 0;
  OcText::clearBuffer((OcText *)((char *)this + 112));
  *((_DWORD *)this + 32) = 0;
}

void XlDocumentInfo::XlDocumentInfo(XlDocumentInfo *this)
{
  *(void *)this = &unk_26EBE2528;
  *((void *)this + 1) = 0x607CC10D3;
  *((void *)this + 2) = 0;
}

void XlDocumentProtection::XlDocumentProtection(XlDocumentProtection *this)
{
  *(void *)this = &unk_26EBE2610;
  *((_DWORD *)this + 3) = 0;
  *((_WORD *)this + 4) = 0;
  *((unsigned char *)this + 10) = 0;
}

void XlFileProtection::XlFileProtection(XlFileProtection *this)
{
  *(void *)this = &unk_26EBE29E0;
  uint64_t v2 = (OcText *)((char *)this + 64);
  uint64_t v3 = (OcText *)((char *)this + 16);
  OcText::OcText((OcText *)((char *)this + 16));
  OcText::OcText(v2);
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 17) = 0;
  OcText::clearBuffer(v3);
  *((_DWORD *)this + 8) = 0;
  OcText::clearBuffer(v2);
  *((_DWORD *)this + 20) = 0;
  *((_WORD *)this + 56) = 0;
  *((void *)this + 15) = 0;
  *((_DWORD *)this + 32) = 0;
}

void sub_238B6CEC8(_Unwind_Exception *a1)
{
  OcText::~OcText(v1);
  _Unwind_Resume(a1);
}

void XlDocumentProperties::XlDocumentProperties(XlDocumentProperties *this)
{
  *(void *)this = &unk_26EBE25D8;
  uint64_t v2 = (XlRef *)((char *)this + 92);
  uint64_t v3 = (OcText *)((char *)this + 40);
  OcText::OcText((OcText *)((char *)this + 40));
  XlRef::XlRef(v2);
  *((void *)this + 1) = 0x104B0076CLL;
  *((void *)this + 2) = 0x10000;
  *((_DWORD *)this + 22) = 0;
  *((_WORD *)this + 14) = 0;
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 6) = -1;
  OcText::clearBuffer(v3);
  *((_DWORD *)this + 14) = 0;
  *((unsigned char *)this + 102) = 0;
  *((void *)this + 13) = 0;
  *((_DWORD *)this + 28) = 0;
}

void sub_238B6CF98(_Unwind_Exception *a1)
{
  OcText::~OcText(v1);
  _Unwind_Resume(a1);
}

void XlRef::XlRef(XlRef *this)
{
  *(void *)&this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = -1;
  this->unsigned int var4 = 0;
}

void XlSubstreamProperties::XlSubstreamProperties(XlSubstreamProperties *this)
{
  *(void *)this = &unk_26EBDE7E8;
  uint64_t v2 = (XlSubstreamProperties *)((char *)this + 136);
  XlSheetInfo::XlSheetInfo((XlSubstreamProperties *)((char *)this + 8));
  XlPageProperties::XlPageProperties((XlSubstreamProperties *)((char *)this + 24));
  XlCellTableInfo::XlCellTableInfo(v2);
  XlSubstreamProperties::setDefault(this);
}

void sub_238B6D034(_Unwind_Exception *a1)
{
  XlCellTableInfo::~XlCellTableInfo(v2);
  XlPageProperties::~XlPageProperties(v1);
  _Unwind_Resume(a1);
}

void XlSheetInfo::XlSheetInfo(XlSheetInfo *this)
{
  *(void *)this = &unk_26EBE2F00;
  *((void *)this + 1) = 0xFFFFFFFF00000010;
}

void XlPageProperties::XlPageProperties(XlPageProperties *this)
{
  *(void *)this = &unk_26EBE2DA8;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  XlPageProperties::setDefault(this);
}

__n128 XlPageProperties::setDefault(XlPageProperties *this)
{
  uint64_t v2 = (OcText *)*((void *)this + 5);
  if (v2)
  {
    OcText::clearBuffer(v2);
    *(_DWORD *)(*((void *)this + 5) + 16) = 0;
  }
  uint64_t v3 = (OcText *)*((void *)this + 6);
  if (v3)
  {
    OcText::clearBuffer(v3);
    *(_DWORD *)(*((void *)this + 6) + 16) = 0;
  }
  *((_WORD *)this + 28) = 0;
  *(void *)((char *)this + 58) = 0x1000100640000;
  *((_WORD *)this + 33) = 1;
  *((unsigned char *)this + 68) = 0;
  *((_DWORD *)this + 18) = 0;
  *((unsigned char *)this + 76) = 1;
  *(void *)((char *)this + 77) = 0;
  *((unsigned char *)this + 85) = 0;
  *((_WORD *)this + 43) = 1;
  __asm { FMOV            V0.2D, #0.5 }
  *(_OWORD *)((char *)this + 88) = _Q0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)((char *)this + 8) = _Q0;
  __asm { FMOV            V0.2D, #0.75 }
  *(__n128 *)((char *)this + 24) = result;
  *((_WORD *)this + 52) = 0;
  return result;
}

void XlCellTableInfo::XlCellTableInfo(XlCellTableInfo *this)
{
  *(void *)this = &unk_26EBE2360;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
}

double XlSubstreamProperties::setDefault(XlSubstreamProperties *this)
{
  XlSheetInfo::setDefault((XlSubstreamProperties *)((char *)this + 8));
  *((_DWORD *)this + 4) = 32;
  XlPageProperties::setDefault((XlSubstreamProperties *)((char *)this + 24));
  XlCellTableInfo::setDefault((uint64_t)this + 136);
  double result = NAN;
  *((void *)this + 20) = -1;
  return result;
}

double XlSheetInfo::setDefault(XlSheetInfo *this)
{
  double result = NAN;
  *((void *)this + 1) = 0xFFFFFFFF00000010;
  return result;
}

uint64_t XlCellTableInfo::setDefault(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(void *)(this + 8) = 0;
  return this;
}

XlEshObjectFactory *XlObjectFactory::getEshObjectFactory(XlObjectFactory *this)
{
  unsigned int var1 = this->var1;
  if (!var1)
  {
    unsigned int var1 = (XlEshObjectFactory *)operator new(0x10uLL);
    XlEshObjectFactory::XlEshObjectFactory(var1);
    this->unsigned int var1 = var1;
  }
  return var1;
}

void sub_238B6D22C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlEshObjectFactory::XlEshObjectFactory(XlEshObjectFactory *this)
{
  this->unsigned int var1 = 0;
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = (void **)&unk_26EBE27F0;
}

void XlChartBinaryReader::reset(XlChartBinaryReader *this)
{
  *(void *)&_Q0 = -1;
  *((void *)&_Q0 + 1) = -1;
  *((void *)this + 193) = -1;
  *((_DWORD *)this + 388) = -1;
  *(void *)((char *)this + 1572) = -1;
  *(void *)((char *)this + 1580) = -1;
  *(void *)((char *)this + 1588) = -1;
  *(_OWORD *)((char *)this + 1556) = 0u;
  *(void *)((char *)this + 1596) = -1;
  *(void *)((char *)this + 1604) = -1;
  *((_DWORD *)this + 403) = -1;
  *((void *)this + 209) = -1;
  *(_OWORD *)((char *)this + 1640) = _Q0;
  *(_OWORD *)((char *)this + 1656) = _Q0;
  *((void *)this + 211) = *((void *)this + 210);
  *((void *)this + 213) = -1;
  *((_DWORD *)this + 428) = -1;
  *((void *)this + 216) = -1;
  *((void *)this + 215) = -1;
  *((void *)this + 218) = *((void *)this + 217);
  *((void *)this + 220) = -1;
  *((_DWORD *)this + 442) = -1;
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)this + 241) = _Q0;
  *((void *)this + 242) = -4294901759;
  *((_DWORD *)this + 498) = -1;
  *((_WORD *)this + 998) = 0;
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 1824, *((void **)this + 229));
  *((void *)this + 228) = (char *)this + 1832;
  *((void *)this + 230) = 0;
  *((void *)this + 229) = 0;
  *((void *)this + 244) = *((void *)this + 243);
  *((void *)this + 247) = *((void *)this + 246);
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 1848, *((void **)this + 232));
  *((void *)this + 231) = (char *)this + 1856;
  *((void *)this + 233) = 0;
  *((void *)this + 232) = 0;
  *((_WORD *)this + 936) = 0;
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 1904, *((void **)this + 239));
  *((void *)this + 238) = (char *)this + 1912;
  *((void *)this + 240) = 0;
  *((void *)this + 239) = 0;
}

void sub_238B6D518(void *a1, int a2)
{
  if (a2 == 3)
  {
    uint64_t v5 = (unsigned int *)__cxa_begin_catch(a1);
    EBConvertCsException(v5);
    __cxa_end_catch();
  }
  else
  {
    uint64_t v6 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      [v6 raise];
    }
    else {
      +[TCMessageException raise:TCUnknownProblemMessage];
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x238B6D3B4);
}

void sub_238B6D5A4(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 2)
  {
    id v3 = objc_begin_catch(exception_object);
    [v2 setStartErrorMessageFromException:v3];
    objc_msgSend(v2, "setIsFileStructuredStorage:", +[TCMessageContext isFileStructuredStorage](TCMessageContext, "isFileStructuredStorage"));

    objc_end_catch();
    JUMPOUT(0x238B6D3B4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XlBinaryReader::start(XlBinaryReader *this, const void **a2, unsigned int a3)
{
  if (*((void *)this + 4))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 8007;
  }
  XlDocumentProperties::setDefault((XlBinaryReader *)((char *)this + 1016));
  XlDocumentInfo::setDefault((uint64_t)this + 824);
  XlDocumentProtection::setDefault((uint64_t)this + 848);
  XlFileProtection::setDefault((XlBinaryReader *)((char *)this + 864));
  XlWorksheetProperties::setDefault((XlBinaryReader *)((char *)this + 456));
  XlWorksheetProtection::setDefault((XlBinaryReader *)((char *)this + 600));
  XlSortInfo::setDefault((XlBinaryReader *)((char *)this + 664));
  XlCalculationProperties::setDefault((uint64_t)this + 632);
  XlSubstreamProperties::setDefault((XlBinaryReader *)((char *)this + 1136));
  uint64_t v6 = (SsrwOORootStorage *)operator new(0x58uLL);
  SsrwOORootStorage::SsrwOORootStorage(v6);
  *((void *)this + 3) = v6;
  SsrwOORootStorage::openInBuf(v6, a2, a3);
  *((void *)this + 4) = *((void *)this + 3);
  return XlBinaryReader::start((SsrwOOStorage **)this);
}

void sub_238B6D738(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlDocumentProperties::setDefault(XlDocumentProperties *this)
{
  *((void *)this + 1) = 0x104B0076CLL;
  *((void *)this + 2) = 0x10000;
  *((_DWORD *)this + 22) = 0;
  *((_WORD *)this + 14) = 1;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C80BDFB0063);
  }
  *((void *)this + 4) = 0;
  id v3 = operator new[](2uLL);
  *((void *)this + 4) = v3;
  *id v3 = 1;
  *((_DWORD *)this + 6) = -1;
  OcText::clearBuffer((OcText *)((char *)this + 40));
  *((_DWORD *)this + 14) = 0;
  *((unsigned char *)this + 102) = 0;
  *((void *)this + 13) = 0;
  *((_DWORD *)this + 28) = 0;
}

uint64_t XlDocumentInfo::setDefault(uint64_t this)
{
  *(void *)(this + 8) = 0x607CC10D3;
  *(void *)(this + 16) = 0;
  return this;
}

uint64_t XlDocumentProtection::setDefault(uint64_t this)
{
  *(_DWORD *)(this + 12) = 0;
  *(_WORD *)(this + 8) = 0;
  *(unsigned char *)(this + 10) = 0;
  return this;
}

void XlFileProtection::setDefault(XlFileProtection *this)
{
  *((_DWORD *)this + 32) = 0;
  *((_DWORD *)this + 2) = 0;
  OcText::clearBuffer((OcText *)((char *)this + 16));
  *((_DWORD *)this + 8) = 0;
  OcText::clearBuffer((OcText *)((char *)this + 64));
  *((_DWORD *)this + 20) = 0;
}

double XlWorksheetProtection::setDefault(XlWorksheetProtection *this)
{
  *((_WORD *)this + 13) = 0;
  *((void *)this + 1) = 0;
  *(void *)((char *)this + 13) = 0;
  *(void *)&double result = 0x100000001;
  *(_DWORD *)((char *)this + 21) = 1;
  *((unsigned char *)this + 25) = 1;
  return result;
}

uint64_t XlCalculationProperties::setDefault(uint64_t this)
{
  *(void *)(this + 8) = 0x3F50624DD2F1A9FCLL;
  *(_DWORD *)(this + 16) = 0;
  *(_WORD *)(this + 20) = 100;
  *(unsigned char *)(this + 22) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(unsigned char *)(this + 28) = 1;
  return this;
}

uint64_t XlBinaryReader::start(SsrwOOStorage **this)
{
  int hasChild = SsrwOOStorage::hasChild(this[4], L"Workbook");
  id v3 = this[4];
  if (hasChild)
  {
    unint64_t v4 = L"Workbook";
  }
  else
  {
    int v5 = SsrwOOStorage::hasChild(v3, (const unsigned __int16 *)"W");
    id v3 = this[4];
    if (!v5)
    {
      if (SsrwOOStorage::hasChild(v3, L"Book"))
      {
        exception = __cxa_allocate_exception(4uLL);
        int v9 = 8003;
LABEL_11:
        _DWORD *exception = v9;
      }
      if (this[164]) {
        goto LABEL_6;
      }
LABEL_9:
      exception = __cxa_allocate_exception(4uLL);
      int v9 = 8004;
      goto LABEL_11;
    }
    unint64_t v4 = (const unsigned __int16 *)"W";
  }
  uint64_t v6 = SsrwOOStorage::openStream(v3, v4);
  this[164] = (SsrwOOStorage *)v6;
  if (!v6) {
    goto LABEL_9;
  }
LABEL_6:
  uint64_t result = (*(uint64_t (**)(SsrwOOStorage **))&(*this)[7].var1[32])(this);
  this[167] = (SsrwOOStorage *)result;
  *(unsigned char *)(result + 76) = 0;
  return result;
}

XlChartParserVisitor *XlChartBinaryReader::instantiateParser(XlChartBinaryReader *this, SsrwOOStream *a2)
{
  id v3 = (XlChartParserVisitor *)operator new(0x68uLL);
  XlChartParserVisitor::XlChartParserVisitor(v3, a2);
  return v3;
}

void sub_238B6D9D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlChartParserVisitor::XlChartParserVisitor(XlChartParserVisitor *this, SsrwOOStream *a2)
{
  XlParserVisitor::XlParserVisitor(this, a2);
  *uint64_t v2 = &unk_26EBDCE60;
}

void XlParserVisitor::XlParserVisitor(XlParserVisitor *this, SsrwOOStream *a2)
{
  *(void *)this = &unk_26EBE3118;
  XlStringParser::XlStringParser((XlParserVisitor *)((char *)this + 8));
  *((void *)this + 2) = a2;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 0;
  *((unsigned char *)this + 76) = 1;
  *((void *)this + 10) = -1;
  *((void *)this + 11) = 0;
  *(void *)((char *)this + 93) = 0;
  if (!a2) {
    ChLogFunction("NULL stream", 2, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/Parser/XlParserVisitor.cpp", 61);
  }
}

void sub_238B6DAD0(_Unwind_Exception *a1)
{
  TSURectWithOriginAndSize(v1);
  _Unwind_Resume(a1);
}

void XlStringParser::XlStringParser(XlStringParser *this)
{
  *(_WORD *)this = 257;
  *((unsigned char *)this + 2) = 1;
}

BOOL non-virtual thunk to'XlBinaryReader::readEncryptionInfo(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  return XlBinaryReader::readEncryptionInfo(a1 - 8, a2, a3, a4);
}

BOOL XlBinaryReader::readEncryptionInfo(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  long long v7 = *(SsrwOOStream **)(a1 + 1312);
  uint64_t v8 = 20;
  SsrwOOStream::seekFromStart(v7, 20);
  int v9 = (*((uint64_t (**)(SsrwOOStream *))v7->var0 + 10))(v7);
  if (v9 == 134)
  {
    uint64_t v8 = 24;
    SsrwOOStream::seekFromStart(v7, 24);
    int v9 = (*((uint64_t (**)(SsrwOOStream *))v7->var0 + 10))(v7);
  }
  int v10 = v9;
  if (v9 == 47)
  {
    SsrwOOStream::seekFromStart(v7, v8);
    XlHeader::XlHeader(&v13);
    XlParserVisitor::getHeader(*(XlParserVisitor **)(a1 + 1336), &v13, 0);
    XlFilePass::XlFilePass((XlFilePass *)v12, &v13);
    (*(void (**)(void, _DWORD *))(**(void **)(a1 + 1336) + 72))(*(void *)(a1 + 1336), v12);
    *a3 = v12[2] - 2;
    operator new[]();
  }
  *a4 = 8011;
  SsrwOOStream::seekFromStart(v7, 0);
  return v10 == 47;
}

void sub_238B6DCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t SsrwOOStream::seekFromStart(SsrwOOStream *this, uint64_t a2)
{
  uint64_t v2 = a2;
  if ((a2 & 0x80000000) != 0)
  {
    (*((void (**)(SsrwOOStream *, uint64_t, void))this->var0 + 2))(this, 0x7FFFFFFFLL, 0);
    uint64_t v2 = (v2 - 0x7FFFFFFF);
    uint64_t v4 = 1;
  }
  else
  {
    uint64_t v4 = 0;
  }
  int v5 = (uint64_t (*)(SsrwOOStream *, uint64_t, uint64_t))*((void *)this->var0 + 2);
  return v5(this, v2, v4);
}

void sub_238B6DEB8(void *a1, int a2)
{
  if (a2 == 3)
  {
    int v5 = (unsigned int *)__cxa_begin_catch(a1);
    EBConvertCsException(v5);
    __cxa_end_catch();
  }
  else
  {
    uint64_t v6 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      [v6 raise];
    }
    else {
      +[TCMessageException raise:TCUnknownProblemMessage];
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x238B6DE64);
}

void sub_238B6DF50(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a2 == 2)
  {
    objc_begin_catch(exc_buf);
    [v9 pauseReading];

    objc_end_catch();
    JUMPOUT(0x238B6DE64);
  }

  JUMPOUT(0x238B6DEDCLL);
}

uint64_t XlBinaryReader::startGlobals(XlBinaryReader *this)
{
  if (!*((void *)this + 4) || !*((void *)this + 164) || !*((void *)this + 167))
  {
    exception = __cxa_allocate_exception(4uLL);
    int v7 = 1003;
    goto LABEL_9;
  }
  XlHeader::XlHeader(&v9);
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v9, 0);
  if (v9.var1 != 2057)
  {
    exception = __cxa_allocate_exception(4uLL);
    int v7 = 8004;
LABEL_9:
    _DWORD *exception = v7;
  }
  uint64_t v2 = (XlBof *)operator new(0x28uLL);
  XlBof::XlBof(v2, &v9);
  (*(void (**)(void, XlBof *))(**((void **)this + 167) + 192))(*((void *)this + 167), v2);
  *((unsigned char *)this + 1320) = XlBof::verifyExcelVersion(v2);
  *((_DWORD *)this + 208) = *((_DWORD *)v2 + 8);
  unsigned int v3 = *((_DWORD *)v2 + 5);
  *((_DWORD *)this + 209) = *((_DWORD *)v2 + 4);
  *((unsigned char *)this + 840) = v3 & 1;
  v4.i64[0] = *(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(v3) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)((char *)this + 841) = vmovn_s16(v4).u32[0];
  *((unsigned char *)this + 845) = (v3 & 0x20) != 0;
  *((unsigned char *)this + 846) = BYTE1(v3) & 1;
  *((unsigned char *)this + 847) = (v3 & 0x40) != 0;
  (*(void (**)(XlBinaryReader *))(*(void *)this + 688))(this);
  (*(void (**)(void, void, void))(**((void **)this + 164) + 16))(*((void *)this + 164), 0, 0);
  if (*((unsigned char *)this + 1320) != 9)
  {
    uint64_t v8 = __cxa_allocate_exception(4uLL);
    _DWORD *v8 = 8003;
  }
  return (*(uint64_t (**)(XlBof *))(*(void *)v2 + 8))(v2);
}

void sub_238B6E1D8(void *a1)
{
}

void sub_238B6E1E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlHeader::XlHeader(XlHeader *this)
{
  this->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = 0;
  this->unsigned int var1 = 0;
  this->uint64_t var2 = 0;
}

uint64_t XlParserVisitor::getHeader(XlParserVisitor *this, XlHeader *a2, unsigned __int8 a3)
{
  *((_DWORD *)this + 21) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  unsigned int v7 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_DWORD *)this + 22) = 4;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)this + 20) = result + v7;
  *((unsigned char *)this + 100) = v6 == 2129;
  if (v6 == 2132)
  {
    (*(void (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
    *((_DWORD *)this + 23) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
    *((_DWORD *)this + 24) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
    uint64_t result = (*(uint64_t (**)(void, void, void))(**((void **)this + 2) + 16))(*((void *)this + 2), (*((_DWORD *)this + 22) + *((_DWORD *)this + 21)), 0);
LABEL_6:
    a2->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = v7;
    a2->unsigned int var1 = v6;
    a2->uint64_t var2 = a3;
    return result;
  }
  if (v6 == 2129)
  {
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4, 1);
    LOWORD(v6) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
    unsigned int v7 = result;
    *((_DWORD *)this + 22) += 8;
    goto LABEL_6;
  }
  if (v6) {
    goto LABEL_6;
  }
  a2->unsigned int var1 = 0;
  a2->$4A9E05CF4EB813CDA9C8B3A246960F55 var0 = 0;
  return result;
}

void XlBof::XlBof(XlBof *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDEC68;
  *(void *)(v2 + 16) = 6;
  *(_WORD *)(v2 + 24) = 1536;
  *(void *)(v2 + 28) = 0x7CC0DBB00000005;
}

void XlRecord::XlRecord(XlRecord *this, XlHeader *a2)
{
  *(void *)this = &unk_26EBE0998;
  XlHeader::XlHeader((XlHeader *)this + 1, a2);
}

void XlHeader::XlHeader(XlHeader *this, const XlHeader *a2)
{
  *this = *a2;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlBof *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  XlBof::verifyExcelVersion(a2);
  *((_WORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_DWORD *)a2 + 7) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  if (!*((unsigned char *)a2 + 14))
  {
    int v4 = 0;
    *((_DWORD *)a2 + 8) = 0;
    goto LABEL_7;
  }
  *((_WORD *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  if (*((unsigned __int8 *)a2 + 14) <= 4u)
  {
    int v4 = 0;
    *((_WORD *)a2 + 17) = 0;
LABEL_7:
    *((_DWORD *)a2 + 5) = 0;
    goto LABEL_8;
  }
  *((_WORD *)a2 + 17) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  if (*((unsigned char *)a2 + 14) == 8)
  {
    int v4 = 0;
    goto LABEL_7;
  }
  *((_DWORD *)a2 + 5) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
LABEL_8:
  *((_DWORD *)a2 + 4) = v4;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlBof::verifyExcelVersion(XlBof *this)
{
  *((unsigned char *)this + 14) = 0;
  int v1 = (unsigned __int16)(((unsigned __int16)(*((_WORD *)this + 6) - 9) >> 9) | ((*((_WORD *)this + 6) - 9) << 7));
  if (v1 == 4)
  {
    uint64_t v2 = *((unsigned int *)this + 2);
    if (v2 == 8) {
      goto LABEL_12;
    }
    if (v2 == 16)
    {
      uint64_t v2 = 9;
      goto LABEL_12;
    }
    return 0;
  }
  if (v1 == 2)
  {
    if (*((_DWORD *)this + 2) != 6)
    {
      uint64_t v2 = 4;
      goto LABEL_12;
    }
    return 0;
  }
  uint64_t v2 = 0;
  if (v1 == 1)
  {
    if (*((_DWORD *)this + 2) == 6)
    {
      uint64_t v2 = 2;
LABEL_12:
      *((unsigned char *)this + 14) = v2;
      return v2;
    }
    return 0;
  }
  return v2;
}

uint64_t XlParserVisitor::endRead(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  if (*(unsigned char *)(result + 100))
  {
    uint64_t v3 = *(unsigned int *)(result + 80);
    if ((v3 & 0x80000000) != 0) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v3 = (*(_DWORD *)(a2 + 8) + *(_DWORD *)(result + 72));
  }
  uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(result + 16) + 16))(*(void *)(result + 16), v3, 0);
LABEL_6:
  *(_DWORD *)(v2 + 72) = 0;
  return result;
}

void sub_238B6E844(void *a1)
{
  __cxa_begin_catch(a1);
  *(_DWORD *)(v1 + 72) = 0;
  __cxa_rethrow();
}

void sub_238B6E854(_Unwind_Exception *a1)
{
}

uint64_t XlChartBinaryReader::scanGlobals(XlChartBinaryReader *this)
{
  XlBinaryReader::scanGlobals(this);
  XlHeader::XlHeader(&v6);
  v6.unsigned int var1 = 10;
  v6.uint64_t var2 = *((unsigned char *)this + 1320);
  uint64_t result = XlParserVisitor::getNextUniqueHeader(*((XlParserVisitor **)this + 167), &v6);
  for (signed __int16 i = v6.var1; v6.var1 != 10; signed __int16 i = v6.var1)
  {
    if (i <= 2056)
    {
      if (i == 140)
      {
        XlCountry::XlCountry((XlCountry *)v5, &v6);
        XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
        (*(void (**)(void, _DWORD *))(**((void **)this + 167) + 224))(*((void *)this + 167), v5);
        *((_DWORD *)this + 257) = v5[4];
      }
      else if (i == 146)
      {
        *((_DWORD *)this + 252) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
      }
    }
    else
    {
      switch(i)
      {
        case 2057:
          int v4 = (XlBof *)operator new(0x28uLL);
          XlBof::XlBof(v4, &v6);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(void, XlBof *))(**((void **)this + 167) + 192))(*((void *)this + 167), v4);
          if (*((_DWORD *)v4 + 7) != 0x8000) {
            return (*(uint64_t (**)(XlBof *))(*(void *)v4 + 8))(v4);
          }
          *((unsigned char *)this + 1344) = 1;
          (*(void (**)(XlBof *))(*(void *)v4 + 8))(v4);
          break;
        case 4188:
          if (!*((unsigned char *)this + 1344)) {
            *((_DWORD *)this + 253) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
          }
          break;
        case 4098:
          return result;
      }
    }
    uint64_t result = XlParserVisitor::getNextUniqueHeader(*((XlParserVisitor **)this + 167), &v6);
  }
  return result;
}

void sub_238B6EA94(_Unwind_Exception *exception_object)
{
}

void XlBinaryReader::scanGlobals(XlBinaryReader *this)
{
  XlHeader::XlHeader(&v56);
  v56.signed __int16 var1 = 2057;
  v56.uint64_t var2 = *((unsigned char *)this + 1320);
  XlParserVisitor::getNextUniqueHeader(*((XlParserVisitor **)this + 167), &v56);
  signed __int16 var1 = v56.var1;
  while (v56.var1 != 10)
  {
    if (var1 > 234)
    {
      if (var1 > 535)
      {
        if (var1 > 2056)
        {
          if (var1 > 2197)
          {
            if (var1 == 2198)
            {
              XlTheme::XlTheme((XlTheme *)&v52, &v56);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(void, uint64_t *))(**((void **)this + 167) + 1600))(*((void *)this + 167), &v52);
              int v33 = (int)v55;
              if (v55)
              {
                unint64_t v34 = (unsigned __int8 *)XlChartRichTextPropsStream::giveXmlStream((XlChartRichTextPropsStream *)&v52);
                XlDocumentProperties::takeThemeData((uint64_t)this + 1016, v34, v33);
              }
              XlTheme::~XlTheme((XlTheme *)&v52);
LABEL_141:
              if (v56.var1 == 10) {
                return;
              }
              goto LABEL_142;
            }
            if (var1 == 4188)
            {
              *((_DWORD *)this + 253) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
              goto LABEL_141;
            }
          }
          else
          {
            if (var1 == 2057)
            {
              CGRect v11 = (__int16 *)operator new(0x28uLL);
              XlBof::XlBof((XlBof *)v11, &v56);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              int16x8_t v31 = (int16x8_t)((__n128 (*)(void, __int16 *))*(void *)(**((void **)this + 167) + 192))(*((void *)this + 167), v11);
              *((_DWORD *)this + 208) = *((_DWORD *)v11 + 8);
              *((_DWORD *)this + 209) = *((_DWORD *)v11 + 4);
              unsigned int v32 = *((_DWORD *)v11 + 5);
              *((unsigned char *)this + 840) = v32 & 1;
              v31.i64[0] = *(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(v32) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
              *(_DWORD *)((char *)this + 841) = vmovn_s16(v31).u32[0];
              *((unsigned char *)this + 845) = (v32 & 0x20) != 0;
              *((unsigned char *)this + 846) = BYTE1(v32) & 1;
              *((unsigned char *)this + 847) = (v32 & 0x40) != 0;
              goto LABEL_113;
            }
            if (var1 == 2150)
            {
              if ((*((_DWORD *)this + 51) & 0x80000000) != 0) {
                *((_DWORD *)this + 51) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
              }
              goto LABEL_141;
            }
          }
        }
        else if (var1 > 1053)
        {
          if (var1 == 1054)
          {
LABEL_76:
            *((_DWORD *)this + 42) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
            goto LABEL_141;
          }
          if (var1 == 1091)
          {
LABEL_57:
            int v15 = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
            int v16 = v15;
            int v18 = (char *)*((void *)this + 41);
            unint64_t v17 = *((void *)this + 42);
            if ((unint64_t)v18 >= v17)
            {
              int v22 = (char *)*((void *)this + 40);
              int64_t v23 = v18 - v22;
              unint64_t v24 = (unint64_t)(v18 - v22) >> 2;
              unint64_t v25 = (v17 - (unint64_t)v22) >> 2;
              if (2 * (int)v25 <= (v24 + 1)) {
                unsigned int v26 = v24 + 1;
              }
              else {
                unsigned int v26 = 2 * v25;
              }
              if (v25 >= 0x7FFFFFFF) {
                unint64_t v27 = 0xFFFFFFFFLL;
              }
              else {
                unint64_t v27 = v26;
              }
              if (v27)
              {
                int v28 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)this + 336, v27);
                uint64_t v30 = v29;
                int v22 = (char *)*((void *)this + 40);
                int v18 = (char *)*((void *)this + 41);
              }
              else
              {
                int v28 = 0;
                uint64_t v30 = 0;
              }
              char v48 = &v28[v23 & 0x3FFFFFFFCLL];
              *(_DWORD *)char v48 = v16;
              unint64_t v19 = v48 + 4;
              while (v18 != v22)
              {
                int v49 = *((_DWORD *)v18 - 1);
                v18 -= 4;
                *((_DWORD *)v48 - 1) = v49;
                v48 -= 4;
              }
              *((void *)this + 40) = v48;
              *((void *)this + 41) = v19;
              *((void *)this + 42) = &v28[4 * v30];
              if (v22) {
                operator delete(v22);
              }
            }
            else
            {
              *(_DWORD *)int v18 = v15;
              unint64_t v19 = v18 + 4;
            }
            *((void *)this + 41) = v19;
            goto LABEL_141;
          }
        }
        else
        {
          if (var1 == 536)
          {
LABEL_65:
            *((_DWORD *)this + 46) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
            goto LABEL_141;
          }
          if (var1 == 659)
          {
            *((_DWORD *)this + 47) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
            goto LABEL_141;
          }
        }
      }
      else
      {
        if (var1 > 429)
        {
          switch(var1)
          {
            case 439:
              XlRefreshAll::XlRefreshAll((XlRefreshAll *)&v52, &v56);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(void, uint64_t *))(**((void **)this + 167) + 960))(*((void *)this + 167), &v52);
              *((unsigned char *)this + 1035) = v54[0];
              goto LABEL_141;
            case 440:
            case 441:
            case 443:
            case 445:
            case 446:
            case 447:
              goto LABEL_142;
            case 442:
              CGRect v11 = (__int16 *)operator new(0x18uLL);
              XlCodeName::XlCodeName((XlCodeName *)v11, &v56);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(void, __int16 *))(**((void **)this + 167) + 1472))(*((void *)this + 167), v11);
              uint64_t v37 = *((void *)v11 + 2);
              if (v37) {
                OcText::operator=((uint64_t)this + 1056, v37 + 8);
              }
              goto LABEL_113;
            case 444:
              XlProt4RevPass::XlProt4RevPass((XlProt4RevPass *)&v52, &v56);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(void, uint64_t *))(**((void **)this + 167) + 912))(*((void *)this + 167), &v52);
              *((_WORD *)this + 431) = v54[0];
              goto LABEL_141;
            case 448:
              *((unsigned char *)this + 1032) = 1;
              goto LABEL_141;
            case 449:
              XlRecalcID::XlRecalcID((XlRecalcID *)&v52, &v56);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(void, uint64_t *))(**((void **)this + 167) + 1432))(*((void *)this + 167), &v52);
              *((_DWORD *)this + 260) = *(_DWORD *)v54;
              goto LABEL_141;
            default:
              if (var1 == 430)
              {
                if ((*((_DWORD *)this + 43) & 0x80000000) != 0)
                {
                  int v38 = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
                  *((_DWORD *)this + 43) = v38;
                  *((_DWORD *)this + 45) = v38;
                }
              }
              else
              {
                if (var1 != 431) {
                  goto LABEL_142;
                }
                XlProt4Rev::XlProt4Rev((XlProt4Rev *)&v52, &v56);
                XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
                (*(void (**)(void, uint64_t *))(**((void **)this + 167) + 904))(*((void *)this + 167), &v52);
                *((unsigned char *)this + 858) = v54[0];
              }
              break;
          }
          goto LABEL_141;
        }
        if (var1 <= 316)
        {
          if (var1 == 235)
          {
            if ((*((_DWORD *)this + 50) & 0x80000000) != 0) {
              *((_DWORD *)this + 50) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
            }
            goto LABEL_141;
          }
          if (var1 == 252)
          {
            if (*((void *)this + 19)) {
              ChLogFunction("string table not NULL", 2, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/Reader/XlBinaryReader.cpp", 3782);
            }
            XlHeader v13 = (XlStringExtractor *)operator new(0xA8uLL);
            XlStringExtractor::XlStringExtractor(v13);
            *((void *)this + 19) = v13;
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            CGRect v11 = (__int16 *)operator new(0x40uLL);
            XlSst::XlSst((XlSst *)v11, &v56);
            (*(void (**)(void, __int16 *))(**((void **)this + 167) + 400))(*((void *)this + 167), v11);
            XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v56, *((unsigned char *)this + 1320));
            uint64_t v14 = (XlExtSst *)operator new(0x20uLL);
            XlExtSst::XlExtSst(v14, &v56);
            if (v56.var1 == 255) {
              (*(void (**)(void, XlExtSst *))(**((void **)this + 167) + 264))(*((void *)this + 167), v14);
            }
            XlStringExtractor::setStringExtractor(*((XlStringExtractor **)this + 19), *((SsrwOOStream **)this + 164), (XlSst *)v11, v14);
            (*(void (**)(XlExtSst *))(*(void *)v14 + 8))(v14);
            goto LABEL_113;
          }
        }
        else
        {
          switch(var1)
          {
            case 317:
              CGRect v11 = (__int16 *)operator new(0x20uLL);
              XlTabId::XlTabId((XlTabId *)v11, &v56);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(void, __int16 *))(**((void **)this + 167) + 1272))(*((void *)this + 167), v11);
              XlDocumentProperties::takeTabIdTable((uint64_t)this + 1016, *((__int16 **)v11 + 3), v11[9]);
              *((unsigned char *)v11 + 16) = 0;
              goto LABEL_113;
            case 352:
              XlUsesElfs::XlUsesElfs((XlUsesElfs *)&v52, &v56);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(void, uint64_t *))(**((void **)this + 167) + 1344))(*((void *)this + 167), &v52);
              *((unsigned char *)this + 1033) = v54[0];
              goto LABEL_141;
            case 425:
              *((_DWORD *)this + 54) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
              goto LABEL_141;
          }
        }
      }
    }
    else
    {
      if (var1 > 91)
      {
        if (var1 <= 183)
        {
          switch(var1)
          {
            case 133:
              if (!*((void *)this + 20))
              {
                uint64_t v3 = operator new(0x28uLL);
                v3[1] = 0;
                v3[2] = 0;
                v3[3] = 0;
                v3[4] = 0;
                *uint64_t v3 = &unk_26EBE2F38;
                *((void *)this + 20) = v3;
              }
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              while (v56.var1 == 133)
              {
                int v4 = (XlBoundSheet *)operator new(0x28uLL);
                XlBoundSheet::XlBoundSheet(v4, &v56);
                *((void *)this + 163) = v4;
                (*(void (**)(void, XlBoundSheet *))(**((void **)this + 167) + 208))(*((void *)this + 167), v4);
                uint64_t v5 = *((void *)this + 20);
                uint64_t v52 = *((void *)this + 163);
                CsSimpleHeapVector<XlRecord>::pushBack((void **)(v5 + 8), &v52);
                if (v52) {
                  (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
                }
                *((void *)this + 163) = 0;
                XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v56, *((unsigned char *)this + 1320));
              }
              uint64_t v20 = *((void *)this + 164);
              RecordDataint Offset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
              (*(void (**)(uint64_t, void, uint64_t))(*(void *)v20 + 16))(v20, -RecordDataOffset, 1);
              v56.signed __int16 var1 = 133;
              goto LABEL_142;
            case 134:
              *((unsigned char *)this + 872) = 1;
              goto LABEL_141;
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
              goto LABEL_142;
            case 140:
              XlCountry::XlCountry((XlCountry *)&v52, &v56);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(void, uint64_t *))(**((void **)this + 167) + 224))(*((void *)this + 167), &v52);
              *((_DWORD *)this + 257) = *(_DWORD *)v54;
              goto LABEL_141;
            case 141:
              XlHideObj::XlHideObj((XlHideObj *)&v52, &v56);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(void, uint64_t *))(**((void **)this + 167) + 736))(*((void *)this + 167), &v52);
              *((_DWORD *)this + 276) = *(_DWORD *)v54;
              goto LABEL_141;
            default:
              if (var1 == 92)
              {
                CGRect v11 = (__int16 *)operator new(0x18uLL);
                XlWriteAccess::XlWriteAccess((XlWriteAccess *)v11, &v56);
                XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
                (*(void (**)(void, __int16 *))(**((void **)this + 167) + 1376))(*((void *)this + 167), v11);
                uint64_t v36 = *((void *)v11 + 2);
                if (v36) {
                  OcText::operator=((uint64_t)this + 928, v36 + 8);
                }
                goto LABEL_113;
              }
              if (var1 != 146) {
                goto LABEL_142;
              }
              *((_DWORD *)this + 252) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
              break;
          }
        }
        else
        {
          switch(var1)
          {
            case 211:
              *((unsigned char *)this + 1039) = 1;
              goto LABEL_141;
            case 212:
            case 214:
            case 215:
            case 216:
            case 217:
            case 219:
            case 220:
            case 221:
            case 223:
              goto LABEL_142;
            case 213:
              goto LABEL_86;
            case 218:
              XlBookBool::XlBookBool((XlBookBool *)&v52, &v56);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(void, uint64_t *))(**((void **)this + 167) + 480))(*((void *)this + 167), &v52);
              *((unsigned char *)this + 1036) = v54[0];
              *(_WORD *)((char *)this + 1037) = *(__int16 *)((char *)v54 + 1);
              goto LABEL_141;
            case 222:
              XlOleSize::XlOleSize((XlOleSize *)&v52, &v56);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(void, uint64_t *))(**((void **)this + 167) + 840))(*((void *)this + 167), &v52);
              XlDocumentProperties::setOleSize((uint64_t)this + 1016, (uint64_t)&v52);
              XlOleSize::~XlOleSize((XlOleSize *)&v52);
LABEL_86:
              if ((*((_DWORD *)this + 49) & 0x80000000) != 0) {
                *((_DWORD *)this + 49) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
              }
              break;
            case 224:
              goto LABEL_57;
            case 225:
              *((_DWORD *)this + 52) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
              goto LABEL_141;
            default:
              if (var1 != 184) {
                goto LABEL_142;
              }
              *((_DWORD *)this + 48) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
              break;
          }
        }
        goto LABEL_141;
      }
      if (var1 <= 33)
      {
        switch(var1)
        {
          case 14:
            XlPrecision::XlPrecision((XlPrecision *)&v52, &v56);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(void, uint64_t *))(**((void **)this + 167) + 872))(*((void *)this + 167), &v52);
            *((unsigned char *)this + 1034) = v54[0];
            goto LABEL_141;
          case 15:
          case 16:
          case 17:
          case 20:
          case 21:
          case 22:
          case 23:
            goto LABEL_142;
          case 18:
            XlProtect::XlProtect((XlProtect *)&v52, &v56);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(void, uint64_t *))(**((void **)this + 167) + 920))(*((void *)this + 167), &v52);
            *((unsigned char *)this + 856) = v54[0];
            goto LABEL_141;
          case 19:
            XlPassword::XlPassword((XlPassword *)&v52, &v56);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(void, uint64_t *))(**((void **)this + 167) + 856))(*((void *)this + 167), &v52);
            *((_WORD *)this + 430) = v54[0];
            goto LABEL_141;
          case 24:
            goto LABEL_65;
          case 25:
            XlWindowProtect::XlWindowProtect((XlWindowProtect *)&v52, &v56);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(void, uint64_t *))(**((void **)this + 167) + 1368))(*((void *)this + 167), &v52);
            *((unsigned char *)this + 857) = v54[0];
            goto LABEL_141;
          default:
            if (var1 == 30) {
              goto LABEL_76;
            }
            goto LABEL_142;
        }
      }
      if (var1 > 60)
      {
        switch(var1)
        {
          case '=':
            if ((*((_DWORD *)this + 53) & 0x80000000) != 0) {
              *((_DWORD *)this + 53) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
            }
            goto LABEL_141;
          case 'B':
            XlCodePage::XlCodePage((XlCodePage *)&v52, &v56);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(void, uint64_t *))(**((void **)this + 167) + 32))(*((void *)this + 167), &v52);
            XlDocumentProperties::setCodePage((uint64_t)this + 1016, v54[0]);
            goto LABEL_141;
          case '[':
            CGRect v11 = (__int16 *)operator new(0x20uLL);
            XlFileSharing::XlFileSharing((XlFileSharing *)v11, &v56);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(void, __int16 *))(**((void **)this + 167) + 656))(*((void *)this + 167), v11);
            *((unsigned char *)this + 873) = *((unsigned char *)v11 + 16);
            *((_WORD *)this + 437) = v11[9];
            uint64_t v12 = *((void *)v11 + 3);
            if (v12) {
              OcText::operator=((uint64_t)this + 880, v12 + 8);
            }
LABEL_113:
            (*(void (**)(__int16 *))(*(void *)v11 + 8))(v11);
            goto LABEL_141;
        }
      }
      else
      {
        switch(var1)
        {
          case '""':
            Xl1904::Xl1904((Xl1904 *)&v52, &v56);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(void, uint64_t *))(**((void **)this + 167) + 16))(*((void *)this + 167), &v52);
            if (LOBYTE(v54[0])) {
              int v35 = 1904;
            }
            else {
              int v35 = 1900;
            }
            XlDocumentProperties::setDateBase((uint64_t)this + 1016, v35);
            goto LABEL_141;
          case '/':
            XlFilePass::XlFilePass((XlFilePass *)&v52, &v56);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(void, uint64_t *))(**((void **)this + 167) + 72))(*((void *)this + 167), &v52);
            *((_WORD *)this + 488) = v54[0];
            XlFileProtection::setEncryptionInfo((XlBinaryReader *)((char *)this + 864), v55, v53 - 2);
            XlFilePass::~XlFilePass((XlFilePass *)&v52);
            goto LABEL_141;
          case '1':
            int v6 = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
            int v7 = v6;
            XlHeader v9 = (char *)*((void *)this + 44);
            unint64_t v8 = *((void *)this + 45);
            if ((unint64_t)v9 >= v8)
            {
              int64_t v39 = (char *)*((void *)this + 43);
              int64_t v40 = v9 - v39;
              unint64_t v41 = (unint64_t)(v9 - v39) >> 2;
              unint64_t v42 = (v8 - (unint64_t)v39) >> 2;
              if (2 * (int)v42 <= (v41 + 1)) {
                unsigned int v43 = v41 + 1;
              }
              else {
                unsigned int v43 = 2 * v42;
              }
              if (v42 >= 0x7FFFFFFF) {
                unint64_t v44 = 0xFFFFFFFFLL;
              }
              else {
                unint64_t v44 = v43;
              }
              if (v44)
              {
                unsigned int v45 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)this + 360, v44);
                uint64_t v47 = v46;
                int64_t v39 = (char *)*((void *)this + 43);
                XlHeader v9 = (char *)*((void *)this + 44);
              }
              else
              {
                unsigned int v45 = 0;
                uint64_t v47 = 0;
              }
              __int16 v50 = &v45[v40 & 0x3FFFFFFFCLL];
              *(_DWORD *)__int16 v50 = v7;
              int v10 = v50 + 4;
              while (v9 != v39)
              {
                int v51 = *((_DWORD *)v9 - 1);
                v9 -= 4;
                *((_DWORD *)v50 - 1) = v51;
                v50 -= 4;
              }
              *((void *)this + 43) = v50;
              *((void *)this + 44) = v10;
              *((void *)this + 45) = &v45[4 * v47];
              if (v39) {
                operator delete(v39);
              }
            }
            else
            {
              *(_DWORD *)XlHeader v9 = v6;
              int v10 = v9 + 4;
            }
            *((void *)this + 44) = v10;
            goto LABEL_141;
        }
      }
    }
LABEL_142:
    XlParserVisitor::getNextUniqueHeader(*((XlParserVisitor **)this + 167), &v56);
    signed __int16 var1 = v56.var1;
  }
}

void sub_238B6FCB8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::getNextUniqueHeader(XlParserVisitor *this, XlHeader *a2)
{
  int var1 = (unsigned __int16)a2->var1;
  do
  {
    XlParserVisitor::getHeader(this, a2, a2->var2);
    if (*((unsigned char *)this + 100))
    {
      if ((*((_DWORD *)this + 20) & 0x80000000) != 0) {
        continue;
      }
      uint64_t v5 = *(void (**)(void))(**((void **)this + 2) + 16);
    }
    else
    {
      uint64_t v5 = *(void (**)(void))(**((void **)this + 2) + 16);
    }
    v5();
  }
  while ((unsigned __int16)a2->var1 == var1);
  if (*((unsigned char *)this + 100))
  {
    return XlParserVisitor::seekCurrentRecord((uint64_t)this);
  }
  else
  {
    int v7 = *(uint64_t (**)(void))(**((void **)this + 2) + 16);
    return v7();
  }
}

void XlWriteAccess::XlWriteAccess(XlWriteAccess *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *uint64_t v2 = &unk_26EBE20F8;
  v2[2] = 0;
}

uint64_t XlParserVisitor::skipHeader(XlParserVisitor *this)
{
  int v2 = *((unsigned __int8 *)this + 100);
  uint64_t v3 = *((void *)this + 2);
  if (v2) {
    uint64_t v4 = *((unsigned int *)this + 22);
  }
  else {
    uint64_t v4 = 4;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 16))(v3, v4, 1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlWriteAccess *a2)
{
  uint64_t v4 = *((_DWORD *)a2 + 2)
     + (*(unsigned int (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  if (v5)
  {
    unsigned int v6 = v5;
    if (*((unsigned __int8 *)a2 + 14) < 9u) {
      char v7 = 0;
    }
    else {
      char v7 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    }
    int v8 = XlStringParser::estimateSize((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v6, v7);
    if ((*(unsigned int (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2)) + v8 > v4
      && *((_DWORD *)a2 + 2) != 8228)
    {
      ChLogFunction("Failure to parse XlWriteAccess", 2, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/Parser/XlParserVisitor.cpp", 7054);
      goto LABEL_12;
    }
    int v10 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v10);
    *((void *)this + 4) = v10;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v6, v7, v4, v10);
    XlBoundSheet::setName(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  (*(void (**)(void, uint64_t, void))(**((void **)this + 2) + 16))(*((void *)this + 2), v4, 0);
LABEL_12:
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238B70204(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlStringParser::estimateSize(XlStringParser *this, SsrwOOStream *a2, int a3, char a4)
{
  uint64_t v7 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 5))(a2);
  if ((a4 & 8) == 0)
  {
    int v8 = 0;
    if ((a4 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v8 = (4 * (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 10))(a2)) | 2;
  if ((a4 & 4) != 0) {
LABEL_5:
  }
    v8 += (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 13))(a2) + 4;
LABEL_6:
  (*((void (**)(SsrwOOStream *, uint64_t, void))a2->var0 + 2))(a2, v7, 0);
  return (v8 + (a3 << (a4 & 1)));
}

void XlString::XlString(XlString *this)
{
  *(void *)this = &unk_26EBE1540;
  OcText::OcText((OcText *)((char *)this + 8));
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 22) = -1;
  *((void *)this + 12) = 0;
}

uint64_t XlStringParser::parse(XlStringParser *this, SsrwOOStream *a2, unsigned int a3, char a4, int a5, XlString *a6)
{
  XlString::reset(a6);
  uint64_t v11 = a5 - (*((unsigned int (**)(SsrwOOStream *))a2->var0 + 5))(a2);
  if ((a4 & 8) != 0)
  {
    unsigned int v12 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 10))(a2);
    uint64_t v11 = (v11 - 2);
    uint64_t v13 = (4 * v12) | 2;
    if ((a4 & 4) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    unsigned int v12 = 0;
    uint64_t v13 = 0;
    if ((a4 & 4) != 0)
    {
LABEL_3:
      unsigned int v139 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 13))(a2);
      uint64_t v11 = (v11 - 4);
      uint64_t v13 = v13 + v139 + 4;
      goto LABEL_6;
    }
  }
  unsigned int v139 = 0;
LABEL_6:
  unsigned int v141 = v12;
  unsigned int v156 = 0;
  if (*(unsigned char *)this)
  {
    uint64_t v14 = v13;
    if (a4)
    {
      unsigned int v15 = 2 * a3 + 2;
      *((_DWORD *)a6 + 4) = 1;
      unint64_t v17 = (char *)operator new[](v15);
      *(_WORD *)&v17[2 * a3] = 0;
      int v16 = v17;
    }
    else
    {
      unsigned int v15 = a3 + 1;
      *((_DWORD *)a6 + 4) = 2;
      int v16 = (char *)operator new[](a3 + 1);
      unint64_t v17 = 0;
      v16[a3] = 0;
    }
    OcText::takeBuffer((OcText *)((char *)a6 + 8), v16, v15);
    uint64_t v13 = v14;
    if (a3) {
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v17 = 0;
    int v16 = 0;
    if (a3)
    {
LABEL_13:
      LODWORD(v19) = 0;
      size_t v143 = 2 * a3 + 2;
      uint64_t v140 = (int)a3;
      unsigned int v142 = a3;
      char v144 = a4;
      unsigned int v18 = a3;
      unsigned int v145 = a3;
      while (1)
      {
        if (a4)
        {
          if (v11 >= 2 * v18)
          {
            int v24 = 2 * v18;
            if (*(unsigned char *)this)
            {
              unsigned int v155 = v18;
              (*((void (**)(SsrwOOStream *, unsigned int *, char *))a2->var0 + 17))(a2, &v155, &v16[2 * v19]);
              unsigned int v25 = v18;
              BOOL v20 = v18 >= v155;
              unsigned int v26 = v18 - v155;
              if (v26 != 0 && v20)
              {
                (*((void (**)(SsrwOOStream *, void, uint64_t))a2->var0 + 2))(a2, 2 * v26, 1);
                LODWORD(v11) = v11 - 2 * v26;
                v142 -= v26;
              }
              unsigned int v18 = v25;
              a3 = v145;
            }
            else
            {
              (*((void (**)(SsrwOOStream *, void, uint64_t))a2->var0 + 2))(a2, 2 * v18, 1);
            }
            uint64_t v13 = (v13 + v24);
            uint64_t v11 = (v11 - v24);
            LODWORD(v19) = v19 + v18;
            unint64_t v17 = v16;
            unsigned int v18 = 0;
            goto LABEL_60;
          }
          if (*(unsigned char *)this)
          {
            if ((int)v11 >= 0) {
              int v22 = v11;
            }
            else {
              int v22 = v11 + 1;
            }
            unsigned int v155 = v22 >> 1;
            (*((void (**)(SsrwOOStream *, unsigned int *, char *))a2->var0 + 17))(a2, &v155, &v16[2 * v19]);
          }
          else
          {
            (*((void (**)(SsrwOOStream *, uint64_t, uint64_t))a2->var0 + 2))(a2, v11, 1);
          }
          int v27 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
          int v28 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 10))(a2);
          if (v27 != 60) {
            goto LABEL_174;
          }
          int v29 = v28;
          LODWORD(v19) = v19 + (v11 >> 1);
          v18 -= v11 >> 1;
          a4 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 8))(a2);
          int v30 = v13 + v11;
          uint64_t v11 = (v29 - 1);
          uint64_t v13 = (v30 + 5);
          unint64_t v17 = v16;
        }
        else
        {
          unsigned int v153 = v18;
          BOOL v20 = v11 >= v18;
          uint64_t v21 = v11 - v18;
          if (v20)
          {
            int v23 = v13;
            if (*(unsigned char *)this)
            {
              if (v144)
              {
                if (v153)
                {
                  uint64_t v43 = v153;
                  int v44 = v19;
                  do
                  {
                    *(_WORD *)&v17[2 * v44++] = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 8))(a2);
                    --v43;
                  }
                  while (v43);
                }
              }
              else
              {
                unsigned int v156 = v153;
                (*((void (**)(SsrwOOStream *, char *, unsigned int *))a2->var0 + 7))(a2, &v16[v19], &v156);
              }
            }
            else
            {
              (*((void (**)(SsrwOOStream *, void, uint64_t))a2->var0 + 2))(a2, v153, 1);
            }
            uint64_t v13 = v23 + v153;
            LODWORD(v19) = v19 + v153;
            uint64_t v11 = v21;
            unsigned int v18 = 0;
          }
          else
          {
            int v147 = v13;
            if (*(unsigned char *)this)
            {
              if (v144)
              {
                if (v11)
                {
                  uint64_t v31 = v11;
                  int v32 = v19;
                  do
                  {
                    *(_WORD *)&v17[2 * v32++] = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 8))(a2);
                    --v31;
                  }
                  while (v31);
                }
              }
              else
              {
                unsigned int v156 = v11;
                (*((void (**)(SsrwOOStream *, char *, unsigned int *))a2->var0 + 7))(a2, &v16[v19], &v156);
              }
            }
            else
            {
              (*((void (**)(SsrwOOStream *, uint64_t, uint64_t))a2->var0 + 2))(a2, v11, 1);
            }
            int v33 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
            int v34 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 10))(a2);
            if (v33 != 60) {
              goto LABEL_174;
            }
            int v35 = v34;
            uint64_t v19 = (v11 + v19);
            char v36 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 8))(a2);
            a4 = v36;
            if (*(unsigned char *)this)
            {
              if ((v36 & 1) != 0 && (v144 & 1) == 0)
              {
                int v38 = (char *)operator new[](v143);
                unint64_t v17 = v38;
                *(_WORD *)&v38[2 * v140] = 0;
                if (v19)
                {
                  uint64_t v39 = v19;
                  int64_t v40 = v38;
                  do
                  {
                    __int16 v41 = *v16++;
                    *(_WORD *)int64_t v40 = v41;
                    v40 += 2;
                    --v39;
                  }
                  while (v39);
                }
                char v144 = 1;
                *((_DWORD *)a6 + 4) = 1;
                OcText::takeBuffer((OcText *)((char *)a6 + 8), v38, v143);
                int v16 = v17;
              }
            }
            int v42 = v147 + v11;
            unsigned int v18 = v153 - v11;
            uint64_t v11 = (v35 - 1);
            uint64_t v13 = (v42 + 5);
          }
        }
        a3 = v145;
LABEL_60:
        if (v19 >= a3) {
          goto LABEL_61;
        }
      }
    }
  }
  unsigned int v18 = 0;
  unsigned int v142 = 0;
LABEL_61:
  unsigned int v154 = v18;
  unsigned int v45 = v141;
  *((_DWORD *)a6 + 6) = v142;
  if (v141)
  {
    XlString::clearRichText(a6);
    int v46 = 0;
    while (v11 < 4 * v45)
    {
      int v47 = v46 + (v11 >> 2);
      if ((unsigned __int16)v46 < (unsigned __int16)(v46 + (v11 >> 2)))
      {
        int v148 = v13;
        do
        {
          char v48 = operator new[](4uLL);
          *char v48 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
          v48[1] = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
          __int16 v50 = (void *)*((void *)a6 + 8);
          unint64_t v49 = *((void *)a6 + 9);
          if ((unint64_t)v50 >= v49)
          {
            uint64_t v52 = *((void *)a6 + 7);
            unint64_t v53 = (unint64_t)v50 - v52;
            unint64_t v54 = (v49 - v52) >> 3;
            unsigned int v55 = 2 * v54;
            if (2 * (int)v54 <= (v53 >> 3) + 1) {
              unsigned int v55 = (v53 >> 3) + 1;
            }
            if (v54 >= 0x7FFFFFFF) {
              unint64_t v56 = 0xFFFFFFFFLL;
            }
            else {
              unint64_t v56 = v55;
            }
            if (v56)
            {
              int v57 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)a6 + 72, v56);
              uint64_t v59 = v58;
            }
            else
            {
              int v57 = 0;
              uint64_t v59 = 0;
            }
            char v60 = &v57[v53 & 0x7FFFFFFF8];
            *(void *)char v60 = v48;
            int v51 = v60 + 8;
            char v62 = (char *)*((void *)a6 + 7);
            char v61 = (char *)*((void *)a6 + 8);
            if (v61 != v62)
            {
              do
              {
                uint64_t v63 = *((void *)v61 - 1);
                v61 -= 8;
                *((void *)v60 - 1) = v63;
                v60 -= 8;
              }
              while (v61 != v62);
              char v61 = (char *)*((void *)a6 + 7);
            }
            *((void *)a6 + 7) = v60;
            *((void *)a6 + 8) = v51;
            *((void *)a6 + 9) = &v57[8 * v59];
            if (v61) {
              operator delete(v61);
            }
          }
          else
          {
            void *v50 = v48;
            int v51 = v50 + 1;
          }
          *((void *)a6 + 8) = v51;
          ++v46;
        }
        while ((unsigned __int16)v46 < (unsigned __int16)v47);
        int v46 = v47;
        LODWORD(v13) = v148;
      }
      int v64 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
      uint64_t v65 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
      if (v64 != 60) {
        goto LABEL_174;
      }
      uint64_t v66 = v65;
      int v67 = (unsigned __int16)(v11 >> 2);
      uint64_t v13 = (v13 + 4);
      LODWORD(v11) = v65;
      v45 -= v67;
      if (!v45) {
        goto LABEL_105;
      }
    }
    int v151 = 4 * v45;
    for (unsigned int i = v141; i > (unsigned __int16)v46; ++v46)
    {
      char v69 = operator new[](4uLL);
      *char v69 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
      v69[1] = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
      unsigned int v71 = (void *)*((void *)a6 + 8);
      unint64_t v70 = *((void *)a6 + 9);
      if ((unint64_t)v71 >= v70)
      {
        uint64_t v73 = v13;
        uint64_t v74 = *((void *)a6 + 7);
        unint64_t v75 = (unint64_t)v71 - v74;
        unint64_t v76 = ((unint64_t)v71 - v74) >> 3;
        unint64_t v77 = (v70 - v74) >> 3;
        unsigned int v78 = 2 * v77;
        if (2 * (int)v77 <= (v76 + 1)) {
          unsigned int v78 = v76 + 1;
        }
        if (v77 >= 0x7FFFFFFF) {
          unint64_t v79 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v79 = v78;
        }
        if (v79)
        {
          __int16 v80 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)a6 + 72, v79);
          uint64_t v82 = v81;
        }
        else
        {
          __int16 v80 = 0;
          uint64_t v82 = 0;
        }
        __int16 v83 = &v80[v75 & 0x7FFFFFFF8];
        *(void *)__int16 v83 = v69;
        unsigned int v72 = v83 + 8;
        __int16 v85 = (char *)*((void *)a6 + 7);
        int v84 = (char *)*((void *)a6 + 8);
        uint64_t v13 = v73;
        if (v84 != v85)
        {
          do
          {
            uint64_t v86 = *((void *)v84 - 1);
            v84 -= 8;
            *((void *)v83 - 1) = v86;
            v83 -= 8;
          }
          while (v84 != v85);
          int v84 = (char *)*((void *)a6 + 7);
        }
        unsigned int i = v141;
        *((void *)a6 + 7) = v83;
        *((void *)a6 + 8) = v72;
        *((void *)a6 + 9) = &v80[8 * v82];
        if (v84) {
          operator delete(v84);
        }
      }
      else
      {
        void *v71 = v69;
        unsigned int v72 = v71 + 1;
      }
      *((void *)a6 + 8) = v72;
    }
    uint64_t v66 = (v11 - v151);
  }
  else
  {
    uint64_t v66 = v11;
  }
LABEL_105:
  uint64_t v87 = v139 - 14;
  if (v139 >= 0xE)
  {
    char v88 = (char *)operator new(0x60uLL);
    XlPhoneticInfo::XlPhoneticInfo((XlPhoneticInfo *)v88);
    uint64_t v89 = (v66 - 14);
    if (v66 < 0xE)
    {
      $4A9E05CF4EB813CDA9C8B3A246960F55 var0 = a2->var0;
      if (v66 <= 1)
      {
        (*((void (**)(SsrwOOStream *, uint64_t, uint64_t))a2->var0 + 2))(a2, v66, 1);
        int v98 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        int v99 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        if (v98 != 60) {
          goto LABEL_174;
        }
        LODWORD(v66) = v99;
        uint64_t v13 = (v13 + 4);
        $4A9E05CF4EB813CDA9C8B3A246960F55 var0 = a2->var0;
      }
      ((void (*)(SsrwOOStream *))var0[9])(a2);
      int v100 = v66 - 2;
      if ((v66 - 2) <= 1)
      {
        (*((void (**)(SsrwOOStream *, void, uint64_t))a2->var0 + 2))(a2, (v66 - 2), 1);
        int v101 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        int v102 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        if (v101 != 60) {
          goto LABEL_174;
        }
        int v100 = v102;
        uint64_t v13 = (v13 + 4);
      }
      (*((void (**)(SsrwOOStream *))a2->var0 + 9))(a2);
      uint64_t v103 = (v100 - 2);
      if (v103 <= 1)
      {
        (*((void (**)(SsrwOOStream *, uint64_t, uint64_t))a2->var0 + 2))(a2, v103, 1);
        int v104 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        int v105 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        if (v104 != 60) {
          goto LABEL_174;
        }
        LODWORD(v103) = v105;
        uint64_t v13 = (v13 + 4);
      }
      *((_WORD *)v88 + 4) = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
      uint64_t v106 = (v103 - 2);
      unsigned __int8 v107 = a2->var0;
      if (v106 <= 1)
      {
        (*((void (**)(SsrwOOStream *, uint64_t, uint64_t))a2->var0 + 2))(a2, v106, 1);
        int v108 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        int v109 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        if (v108 != 60) {
          goto LABEL_174;
        }
        LODWORD(v106) = v109;
        uint64_t v13 = (v13 + 4);
        unsigned __int8 v107 = a2->var0;
      }
      unsigned int v110 = ((uint64_t (*)(SsrwOOStream *))v107[9])(a2);
      *((_DWORD *)v88 + 3) = v110 & 3;
      *((_DWORD *)v88 + 4) = (v110 >> 2) & 3;
      uint64_t v111 = (v106 - 2);
      if (v111 <= 1)
      {
        (*((void (**)(SsrwOOStream *, uint64_t, uint64_t))a2->var0 + 2))(a2, v111, 1);
        int v112 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        int v113 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        if (v112 != 60) {
          goto LABEL_174;
        }
        LODWORD(v111) = v113;
        uint64_t v13 = (v13 + 4);
      }
      (*((void (**)(SsrwOOStream *))a2->var0 + 9))(a2);
      uint64_t v114 = (v111 - 2);
      if (v114 <= 1)
      {
        (*((void (**)(SsrwOOStream *, uint64_t, uint64_t))a2->var0 + 2))(a2, v114, 1);
        int v115 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        int v116 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        if (v115 != 60) {
          goto LABEL_174;
        }
        LODWORD(v114) = v116;
        uint64_t v13 = (v13 + 4);
      }
      unsigned int v91 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 10))(a2);
      uint64_t v117 = (v114 - 2);
      if (v117 <= 1)
      {
        (*((void (**)(SsrwOOStream *, uint64_t, uint64_t))a2->var0 + 2))(a2, v117, 1);
        int v118 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        int v119 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        if (v118 != 60) {
          goto LABEL_174;
        }
        LODWORD(v117) = v119;
        uint64_t v13 = (v13 + 4);
      }
      (*((void (**)(SsrwOOStream *))a2->var0 + 9))(a2);
      uint64_t v89 = (v117 - 2);
      if (v91)
      {
LABEL_108:
        unsigned int v92 = 2 * v91;
        *((_DWORD *)v88 + 8) = 1;
        char v93 = (char *)operator new[](2 * v91 + 2);
        unsigned int v152 = 2 * v91 + 2;
        if (v154 < v152) {
          *(_WORD *)&v93[2 * v154] = 0;
        }
        LODWORD(v94) = v89 - v92;
        if (v89 >= v92)
        {
          unsigned int v155 = v91;
          uint64_t v120 = v93;
          (*((void (**)(SsrwOOStream *, unsigned int *, char *))a2->var0 + 17))(a2, &v155, v93);
          unsigned int v121 = 2 * v91 + 2;
          if (v91 > v155) {
            (*((void (**)(SsrwOOStream *, void, uint64_t))a2->var0 + 2))(a2, 2 * (v91 - v155), 1);
          }
          goto LABEL_148;
        }
        unsigned int v155 = v91;
        int v149 = v13;
        v146 = v93;
        if (v89 >= 2)
        {
          unsigned int v122 = v89 >> 1;
          unsigned int v155 = v89 >> 1;
          (*((void (**)(SsrwOOStream *, unsigned int *, char *))a2->var0 + 17))(a2, &v155, v93);
          unsigned int v95 = v155;
          if (v89 >> 1 > v155)
          {
            (*((void (**)(SsrwOOStream *, void, uint64_t))a2->var0 + 2))(a2, 2 * ((v89 >> 1) - v155), 1);
            unsigned int v95 = v155;
          }
          v89 &= 1u;
          unsigned int v96 = v91 - v122;
        }
        else
        {
          unsigned int v95 = 0;
          unsigned int v96 = 0;
        }
        (*((void (**)(SsrwOOStream *, uint64_t, uint64_t))a2->var0 + 2))(a2, v89, 1);
        int v123 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        unsigned int v124 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        if (v123 == 60)
        {
          LODWORD(v94) = v124;
          if (v124 >= 2 * v96)
          {
            uint64_t v13 = (v149 + 4);
            v125 = v146;
            if (!v96)
            {
              unsigned int v121 = v152;
              goto LABEL_149;
            }
            unsigned int v155 = v96;
            uint64_t v120 = v146;
            (*((void (**)(SsrwOOStream *, unsigned int *, char *))a2->var0 + 17))(a2, &v155, &v146[2 * v95]);
            if (v96 > v155) {
              (*((void (**)(SsrwOOStream *, void, uint64_t))a2->var0 + 2))(a2, 2 * (v96 - v155), 1);
            }
            LODWORD(v94) = v94 - 2 * v96;
            uint64_t v13 = v13;
            unsigned int v121 = v152;
LABEL_148:
            v125 = v120;
LABEL_149:
            if (v87 >= v92) {
              uint64_t v87 = v87 - v92;
            }
            else {
              uint64_t v87 = 0;
            }
            OcText::takeBuffer((OcText *)(v88 + 24), v125, v121);
            goto LABEL_153;
          }
        }
LABEL_174:
        XlString::reset(a6);
        goto LABEL_175;
      }
    }
    else
    {
      (*((void (**)(SsrwOOStream *))a2->var0 + 9))(a2);
      (*((void (**)(SsrwOOStream *))a2->var0 + 9))(a2);
      *((_WORD *)v88 + 4) = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
      unsigned int v90 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
      *((_DWORD *)v88 + 3) = v90 & 3;
      *((_DWORD *)v88 + 4) = (v90 >> 2) & 3;
      (*((void (**)(SsrwOOStream *))a2->var0 + 9))(a2);
      unsigned int v91 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 10))(a2);
      (*((void (**)(SsrwOOStream *))a2->var0 + 9))(a2);
      if (v91) {
        goto LABEL_108;
      }
    }
    if (v87 < 2)
    {
LABEL_169:
      if (v87) {
        (*((void (**)(SsrwOOStream *, uint64_t, uint64_t))a2->var0 + 2))(a2, v87, 1);
      }
      XlString::takeExtendedText(a6, (XlPhoneticInfo *)v88);
      return v13;
    }
    (*((void (**)(SsrwOOStream *))a2->var0 + 9))(a2);
    uint64_t v87 = v139 - 16;
    LODWORD(v94) = v89 - 2;
LABEL_153:
    if (v87 >= 6)
    {
      while (1)
      {
        int v126 = v94 - 6;
        if (v94 < 6)
        {
          int v127 = v13;
          if (v94)
          {
            v128 = (__int16 *)operator new[](7uLL);
            uint64_t v129 = 0;
            do
              *((unsigned char *)v128 + v129++) = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 8))(a2);
            while (v94 != v129);
            int v130 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
            int v131 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
            if (v130 != 60)
            {
              XlString::reset(a6);
              MEMORY[0x23EC997B0](v128, 0x1000C4077774924);
LABEL_175:
              exception = __cxa_allocate_exception(4uLL);
              _DWORD *exception = 3003;
            }
            int v132 = v131;
            unsigned int v133 = 6 - v94;
            char v94 = (_WORD *)(int)v94;
            if (6 - (int)v94 <= 1) {
              uint64_t v134 = 1;
            }
            else {
              uint64_t v134 = v133;
            }
            do
            {
              *((unsigned char *)v94 + (void)v128) = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 8))(a2);
              char v94 = (_WORD *)((char *)v94 + 1);
              --v134;
            }
            while (v134);
            char v94 = operator new(0x10uLL);
            XlPhoneticRun::XlPhoneticRun((XlPhoneticRun *)v94);
            v94[4] = CsLeReadSInt16(v128);
            v94[5] = CsLeReadSInt16(v128 + 1);
            v94[6] = CsLeReadSInt16(v128 + 2);
            XlPhoneticInfo::appendRun((XlPhoneticInfo *)v88, (XlPhoneticRun *)v94);
            uint64_t v87 = (v87 - 6);
            LODWORD(v94) = v132 - v133;
            MEMORY[0x23EC997B0](v128, 0x1000C4077774924);
          }
          else
          {
            int v135 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
            int v136 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
            if (v135 != 60) {
              goto LABEL_174;
            }
            LODWORD(v94) = v136;
          }
          uint64_t v13 = (v127 + 4);
        }
        else
        {
          char v94 = operator new(0x10uLL);
          XlPhoneticRun::XlPhoneticRun((XlPhoneticRun *)v94);
          v94[4] = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
          v94[5] = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
          v94[6] = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
          XlPhoneticInfo::appendRun((XlPhoneticInfo *)v88, (XlPhoneticRun *)v94);
          uint64_t v87 = (v87 - 6);
          LODWORD(v94) = v126;
        }
        if (v87 <= 5) {
          goto LABEL_169;
        }
      }
    }
    goto LABEL_169;
  }
  return v13;
}

void sub_238B71AF8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlString::reset(XlString *this)
{
  OcText::clearBuffer((OcText *)((char *)this + 8));
  uint64_t v2 = *((void *)this + 10);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 10) = 0;
  XlString::clearRichText(this);
  *((_DWORD *)this + 22) = -1;
  uint64_t result = *((void *)this + 12);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C80BDFB0063);
  }
  *((void *)this + 12) = 0;
  return result;
}

XlString *XlString::clearRichText(XlString *this)
{
  uint64_t v1 = this;
  uint64_t v2 = *((void *)this + 7);
  if (((*((void *)this + 8) - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v3 = 0;
    do
    {
      this = *(XlString **)(v2 + 8 * v3);
      if (this)
      {
        this = (XlString *)MEMORY[0x23EC99790](this, 0x1000C80BDFB0063);
        uint64_t v2 = *((void *)v1 + 7);
      }
      *(void *)(v2 + 8 * v3++) = 0;
      uint64_t v2 = *((void *)v1 + 7);
    }
    while (v3 < ((unint64_t)(*((void *)v1 + 8) - v2) >> 3));
  }
  *((void *)v1 + 8) = v2;
  return this;
}

OcText *OcText::takeBuffer(OcText *this, char *a2, unsigned int a3)
{
  uint64_t result = OcText::setBuffer(this, a2, a3);
  this->var7 = 1;
  return result;
}

OcText *OcText::setBuffer(OcText *this, char *a2, unsigned int a3)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  unsigned int v5 = this;
  if (this->var7)
  {
    this = (OcText *)this->var5;
    if (this) {
      this = (OcText *)MEMORY[0x23EC99790](this, 0x1000C8077774924);
    }
  }
  v5->var5 = a2;
  v5->var7 = 0;
  v5->unsigned int var4 = a3;
  return this;
}

uint64_t XlBoundSheet::setName(XlBoundSheet *this, XlString *a2)
{
  uint64_t result = *((void *)this + 2);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 2) = a2;
  return result;
}

uint64_t OcText::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    int v4 = *(_DWORD *)(a2 + 16) + 1;
    char isSingleByteEncoding = OcText::isSingleByteEncoding(*(_DWORD *)(a2 + 8));
    OcText::allocBuffer((OcText *)a1, v4 << (isSingleByteEncoding ^ 1), 1);
    int v6 = *(_DWORD *)(a2 + 16);
    unsigned int v7 = *(_DWORD *)(a2 + 20);
    unsigned int v8 = v6 << (OcText::isSingleByteEncoding(*(_DWORD *)(a2 + 8)) ^ 1);
    if (v7 < v8)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 1004;
    }
    if (v6) {
      OcText::copyBuffer((OcText *)a1, *(const unsigned __int8 **)(a2 + 24), v8);
    }
  }
  return a1;
}

void XlWriteAccess::~XlWriteAccess(XlWriteAccess *this)
{
  *(void *)this = &unk_26EBE20F8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBE20F8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
}

void XlString::~XlString(XlString *this)
{
  XlString::~XlString(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBE1540;
  XlString::reset(this);
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  OcText::~OcText((OcText *)((char *)this + 8));
}

void XlCodePage::XlCodePage(XlCodePage *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDEEE8;
  *(_WORD *)(v2 + 16) = 1200;
}

uint64_t XlParserVisitor::visit(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(unsigned char *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(unsigned char *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(unsigned char *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(unsigned char *)(a2 + 16) = (*(unsigned int (**)(void))(**(void **)(a1 + 16) + 64))(*(void *)(a1 + 16)) == 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(unsigned char *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(unsigned char *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(unsigned char *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 96))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  int16x8_t v4;
  unsigned int v5;
  __int16 v6;
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 18) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 20) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 22) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 24) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  int v4 = (int16x8_t)((__n128 (*)(void))*(void *)(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(unsigned char *)(a2 + 26) = v5 & 1;
  v4.i64[0] = *(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(v5) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFBFFFCFFFDFFFFLL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)(a2 + 27) = vmovn_s16(v4).u32[0];
  if (*(_DWORD *)(a2 + 8) == 18)
  {
    *(_WORD *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
    *(_WORD *)(a2 + 32) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
    *(_WORD *)(a2 + 34) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
    int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  }
  else
  {
    int v6 = 0;
    *(_WORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 32) = 0;
  }
  *(_WORD *)(a2 + 36) = v6;
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(unsigned char *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(double *)(a2 + 16) = (*(double (**)(void))(**(void **)(a1 + 16) + 120))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(unsigned char *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(unsigned char *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(unsigned char *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(unsigned char *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  char v4;
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  if (*(unsigned char *)(a2 + 14))
  {
    int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
    *(unsigned char *)(a2 + 16) = v4 & 1;
    *(unsigned char *)(a2 + 17) = (v4 & 2) != 0;
    *(unsigned char *)(a2 + 18) = (v4 & 4) != 0;
    *(unsigned char *)(a2 + 19) = (v4 & 8) != 0;
  }
  *(_WORD *)(a2 + 20) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(unsigned char *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(unsigned char *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  int16x8_t v4;
  unsigned int v5;
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 18) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 20) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 22) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 24) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  int v4 = (int16x8_t)((__n128 (*)(void))*(void *)(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(unsigned char *)(a2 + 26) = v5 & 1;
  *(_DWORD *)(a2 + 28) = (v5 >> 1) & 1;
  v4.i64[0] = *(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(v5) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFBFFFCFFFDFFFELL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)(a2 + 32) = vmovn_s16(v4).u32[0];
  *(unsigned char *)(a2 + 36) = (v5 & 0x40) != 0;
  *(unsigned char *)(a2 + 37) = (v5 & 0x80) != 0;
  *(_WORD *)(a2 + 38) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 40) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(double *)(a2 + 48) = (*(double (**)(void))(**(void **)(a1 + 16) + 120))(*(void *)(a1 + 16));
  *(double *)(a2 + 56) = (*(double (**)(void))(**(void **)(a1 + 16) + 120))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 42) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  __int16 v10;
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  int v4 = **(void **)(a1 + 16);
  if (*(unsigned __int8 *)(a2 + 14) < 9u)
  {
    unsigned int v5 = (*(uint64_t (**)(void))(v4 + 80))();
    int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  }
  else
  {
    unsigned int v5 = (*(uint64_t (**)(void))(v4 + 96))();
    int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 96))(*(void *)(a1 + 16));
  }
  if (v6 <= v5) {
    unsigned int v7 = v5 + 1;
  }
  else {
    unsigned int v7 = v6;
  }
  *(_DWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 20) = v7;
  unsigned int v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  XlHeader v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  if (v9 <= v8) {
    int v10 = v8 + 1;
  }
  else {
    int v10 = v9;
  }
  *(_WORD *)(a2 + 24) = v8;
  *(_WORD *)(a2 + 26) = v10;
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), 2, 1);
  return XlParserVisitor::endRead(a1, a2);
}

{
  __int16 v4;
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 18) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 20) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 22) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(unsigned char *)(a2 + 24) = v4 & 1;
  *(unsigned char *)(a2 + 25) = (v4 & 2) != 0;
  *(unsigned char *)(a2 + 26) = (v4 & 4) != 0;
  *(unsigned char *)(a2 + 27) = (v4 & 0x1000) != 0;
  *(unsigned char *)(a2 + 28) = HIBYTE(v4) & 7;
  return XlParserVisitor::endRead(a1, a2);
}

{
  __int16 v4;
  __int16 v5;
  __int16 v6;
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 18) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 20) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 22) = v4 & 0x7FFF;
  *(unsigned char *)(a2 + 29) = v4 < 0;
  *(_WORD *)(a2 + 24) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), 2, 1);
  unsigned int v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(unsigned char *)(a2 + 28) = v5 & 7;
  *(unsigned char *)(a2 + 30) = (v5 & 0x10) != 0;
  *(unsigned char *)(a2 + 31) = (v5 & 0x20) != 0;
  *(unsigned char *)(a2 + 32) = (v5 & 0x40) != 0;
  *(unsigned char *)(a2 + 33) = (v5 & 0x80) != 0;
  *(unsigned char *)(a2 + 37) = HIBYTE(v5) & 1;
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 26) = v6 & 0xFFF;
  *(unsigned char *)(a2 + 34) = (v6 & 0x1000) != 0;
  *(unsigned char *)(a2 + 35) = (v6 & 0x2000) != 0;
  *(unsigned char *)(a2 + 36) = (v6 & 0x4000) != 0;
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 20) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 22) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 24) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 96))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 20) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 22) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 24) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 96))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(double *)(a2 + 16) = (*(double (**)(void))(**(void **)(a1 + 16) + 120))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(unsigned char *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(double *)(a2 + 16) = (*(double (**)(void))(**(void **)(a1 + 16) + 120))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(double *)(a2 + 16) = (*(double (**)(void))(**(void **)(a1 + 16) + 120))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(double *)(a2 + 16) = (*(double (**)(void))(**(void **)(a1 + 16) + 120))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 18) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 20) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(unsigned char *)(a2 + 22) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 64))(*(void *)(a1 + 16));
  *(unsigned char *)(a2 + 23) = (*(unsigned int (**)(void))(**(void **)(a1 + 16) + 64))(*(void *)(a1 + 16)) == 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 24) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 26) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  if (*(_WORD *)(a2 + 12) == 3) {
    (*(void (**)(void))(**(void **)(a1 + 16) + 64))(*(void *)(a1 + 16));
  }
  *(_WORD *)(a2 + 28) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(double *)(a2 + 16) = (*(double (**)(void))(**(void **)(a1 + 16) + 120))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  unsigned int v4;
  __int16 v5;
  size_t v6;
  unint64_t v7;
  int v8;
  int *v9;
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  unsigned int v5 = v4;
  if (v4)
  {
    int v6 = 4 * v4;
    unsigned int v7 = 0;
    *(void *)(a1 + 64) = operator new[](v6);
    do
    {
      unsigned int v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 96))(*(void *)(a1 + 16));
      XlHeader v9 = *(int **)(a1 + 64);
      v9[v7 / 4] = v8;
      v7 += 4;
    }
    while (v6 != v7);
  }
  else
  {
    XlHeader v9 = *(int **)(a1 + 64);
  }
  XlPalette::takeColors(a2, v9, v5);
  *(void *)(a1 + 64) = 0;
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  char v4;
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(unsigned char *)(a2 + 16) = v4 & 1;
  *(unsigned char *)(a2 + 17) = (v4 & 2) != 0;
  *(unsigned char *)(a2 + 18) = (v4 & 4) != 0;
  *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 96))(*(void *)(a1 + 16));
  *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 96))(*(void *)(a1 + 16));
  *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 96))(*(void *)(a1 + 16));
  *(_DWORD *)(a2 + 32) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 104))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 20) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(unsigned char *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(unsigned char *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  int16x8_t v4;
  unsigned int v5;
  int16x8_t v6;
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 16) + 64))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  int v4 = (int16x8_t)((__n128 (*)(void))*(void *)(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(unsigned char *)(a2 + 16) = v5 & 1;
  *(int16x4_t *)v4.i8 = vdup_n_s16(v5);
  *(uint16x4_t *)v6.i8 = vshl_u16(*(uint16x4_t *)v4.i8, (uint16x4_t)0xFFF5FFF6FFF7FFF8);
  v4.i64[0] = *(void *)&vshl_u16((uint16x4_t)(v4.i64[0] & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)(a2 + 17) = vmovn_s16(v4).u32[0];
  *(unsigned char *)(a2 + 21) = (v5 & 0x20) != 0;
  *(unsigned char *)(a2 + 22) = (v5 & 0x40) != 0;
  *(unsigned char *)(a2 + 23) = (v5 & 0x80) != 0;
  v6.i64[0] &= 0xFF01FF01FF01FF01;
  *(_DWORD *)(a2 + 24) = vmovn_s16(v6).u32[0];
  *(unsigned char *)(a2 + 28) = (v5 & 0x1000) != 0;
  *(unsigned char *)(a2 + 29) = (v5 & 0x2000) != 0;
  *(unsigned char *)(a2 + 30) = (v5 & 0x4000) != 0;
  (*(void (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  unsigned int v5;
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(_DWORD *)(a2 + 32) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 104))(*(void *)(a1 + 16));
  if (!*(unsigned char *)(a2 + 36))
  {
    unsigned int v5 = *(_DWORD *)(a2 + 8) - 8;
    *(_DWORD *)(a2 + 8) = XlParserVisitor::getDataAndContinues((XlParserVisitor *)a1, &v5, -1) - *(_DWORD *)(a1 + 72);
    XlChartGelFrame::setBinaryData((XlChartGelFrame *)a2, *(unsigned __int8 **)(a1 + 24), *(_DWORD *)(a2 + 24));
    *(void *)(a1 + 24) = 0;
  }
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t result;

  *(_DWORD *)a2 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 96))(*(void *)(a1 + 16));
  *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 96))(*(void *)(a1 + 16));
  *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 12) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 14) = result;
  return result;
}

uint64_t XlDocumentProperties::setCodePage(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 10) = a2;
  return this;
}

void XlTabId::XlTabId(XlTabId *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1CF8;
  *(unsigned char *)(v2 + 16) = 1;
  *(_WORD *)(v2 + 18) = 0;
  *(void *)(v2 + 24) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlTabId *a2)
{
  int v4 = *((_DWORD *)a2 + 2);
  unsigned int v5 = v4 >> 1;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  if ((int)(v4 >> 1 << 16) >= 1)
  {
    int v6 = (__int16)(v4 >> 1);
    if (v6 < 0) {
      size_t v7 = -1;
    }
    else {
      size_t v7 = 2 * (__int16)v5;
    }
    int v8 = 0;
    *((void *)this + 5) = operator new[](v7);
    do
    {
      __int16 v9 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
      int v10 = (__int16 *)*((void *)this + 5);
      v10[(__int16)v8++] = v9;
    }
    while (v6 > (__int16)v8);
    XlTabId::setTabIdTable(a2, v10, v6);
    *((void *)this + 5) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlTabId::setTabIdTable(XlTabId *this, __int16 *a2, __int16 a3)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C80BDFB0063);
  }
  *((void *)this + 3) = a2;
  *((_WORD *)this + 9) = a3;
  *((unsigned char *)this + 16) = 1;
  return result;
}

uint64_t XlDocumentProperties::takeTabIdTable(uint64_t this, __int16 *a2, int a3)
{
  __int16 v3 = a3;
  uint64_t v5 = this;
  if (a2 || a3 <= 0)
  {
    this = *(void *)(this + 32);
    if (this) {
      this = MEMORY[0x23EC99790](this, 0x1000C80BDFB0063);
    }
    *(_WORD *)(v5 + 28) = v3;
    *(void *)(v5 + 32) = a2;
  }
  return this;
}

void XlTabId::~XlTabId(XlTabId *this)
{
  XlTabId::~XlTabId(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBE1CF8;
  if (*((unsigned char *)this + 16))
  {
    uint64_t v2 = *((void *)this + 3);
    if (v2) {
      MEMORY[0x23EC99790](v2, 0x1000C80BDFB0063);
    }
    *((void *)this + 3) = 0;
    *((_WORD *)this + 9) = 0;
    *((unsigned char *)this + 16) = 1;
  }
}

void XlWindowProtect::XlWindowProtect(XlWindowProtect *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE20B8;
  *(unsigned char *)(v2 + 16) = 0;
}

void XlProtect::XlProtect(XlProtect *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0818;
  *(unsigned char *)(v2 + 16) = 0;
}

void XlPassword::XlPassword(XlPassword *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE05A8;
  *(_WORD *)(v2 + 16) = 0;
}

void XlProt4Rev::XlProt4Rev(XlProt4Rev *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0798;
  *(unsigned char *)(v2 + 16) = 0;
}

void XlProt4RevPass::XlProt4RevPass(XlProt4RevPass *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE07D8;
  *(_WORD *)(v2 + 16) = 0;
}

void XlHideObj::XlHideObj(XlHideObj *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDFCE8;
  *(_DWORD *)(v2 + 16) = 0;
}

void Xl1904::Xl1904(Xl1904 *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDE9F8;
  *(unsigned char *)(v2 + 16) = 0;
}

uint64_t XlDocumentProperties::setDateBase(uint64_t this, int a2)
{
  if (a2 != 1900 && a2 != 1904)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  *(_WORD *)(this + 8) = a2;
  return this;
}

void XlPrecision::XlPrecision(XlPrecision *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0698;
  *(unsigned char *)(v2 + 16) = 1;
}

void XlRefreshAll::XlRefreshAll(XlRefreshAll *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0A00;
  *(unsigned char *)(v2 + 16) = 0;
}

void XlBookBool::XlBookBool(XlBookBool *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDECA8;
  *(_WORD *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 18) = 0;
}

uint64_t XlParserVisitor::visit(uint64_t a1, unsigned char *a2)
{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  char v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  a2[16] = v4 & 1;
  a2[17] = (v4 & 4) != 0;
  a2[18] = (v4 & 8) != 0;
  return XlParserVisitor::endRead(a1, (uint64_t)a2);
}

{
  __int16 v4;
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  char v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  a2[16] = v4 & 1;
  a2[17] = (v4 & 0x10) != 0;
  a2[18] = (v4 & 0x20) != 0;
  a2[19] = (v4 & 0x40) != 0;
  a2[20] = (v4 & 0x80) != 0;
  a2[21] = HIBYTE(v4) & 1;
  a2[22] = (v4 & 0x400) != 0;
  a2[23] = (v4 & 0x4000) != 0;
  a2[24] = v4 < 0;
  return XlParserVisitor::endRead(a1, (uint64_t)a2);
}

void XlUsesElfs::XlUsesElfs(XlUsesElfs *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1F78;
  *(unsigned char *)(v2 + 16) = 0;
}

void XlBoundSheet::XlBoundSheet(XlBoundSheet *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDED68;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlBoundSheet *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  if (*((unsigned __int8 *)a2 + 14) < 5u)
  {
    int v4 = 0;
    *((_DWORD *)a2 + 6) = 0;
    *((_DWORD *)a2 + 8) = 0;
    int v5 = 1;
  }
  else
  {
    *((_DWORD *)a2 + 6) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
    *((_DWORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2)) & 3;
    int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    int v5 = 7;
  }
  *((_DWORD *)a2 + 7) = v4;
  unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  if (v6)
  {
    unsigned int v7 = v6;
    unsigned int v8 = *((unsigned __int8 *)a2 + 14);
    if (v8 < 9)
    {
      if (v8 != 8)
      {
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = 8003;
      }
      unsigned int v17 = *((_DWORD *)a2 + 2) - v5;
      unsigned int v28 = v17;
      if (!v17) {
        return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
      }
      unsigned int v18 = operator new[](v17 + 1);
      *((void *)this + 3) = v18;
      v18[v17] = 0;
      (*(void (**)(void, void, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), *((void *)this + 3), &v28);
      uint64_t v19 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v19);
      *((void *)this + 4) = v19;
      BOOL v20 = (char *)*((void *)this + 3);
      unsigned int v21 = v28 + 1;
      uint64_t v22 = (uint64_t)v19;
      int v23 = v7;
      int v24 = 0;
    }
    else
    {
      char v9 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
      int v10 = *((_DWORD *)a2 + 2);
      unsigned int v11 = v10 - (v5 + 1);
      if (v10 <= v5 + 1) {
        return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
      }
      unsigned int v30 = v10 - (v5 + 1);
      if (v9)
      {
        unsigned int v13 = v11 + 2;
        unsigned int v25 = operator new[](v11 + 2);
        *((void *)this + 3) = v25;
        v25[v11 + 1] = 0;
        *(unsigned char *)(*((void *)this + 3) + v11) = 0;
        if (v11 >> 1 < v7) {
          LOBYTE(v7) = v11 >> 1;
        }
        int v29 = v7;
        (*(void (**)(void, int *, void))(**((void **)this + 2) + 136))(*((void *)this + 2), &v29, *((void *)this + 3));
        int v14 = 1;
      }
      else
      {
        unsigned int v12 = operator new[]((v10 - v5));
        *((void *)this + 3) = v12;
        v12[v11] = 0;
        (*(void (**)(void, void, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), *((void *)this + 3), &v30);
        unsigned int v13 = v30 + 1;
        int v14 = 2;
      }
      unsigned int v30 = v13;
      unsigned int v26 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v26);
      *((void *)this + 4) = v26;
      BOOL v20 = (char *)*((void *)this + 3);
      int v23 = v7;
      unsigned int v21 = v30;
      uint64_t v22 = (uint64_t)v26;
      int v24 = v14;
    }
    XlString::takeString(v22, v20, v21, v23, v24);
    *((void *)this + 3) = 0;
    XlBoundSheet::setName(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
    return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
  }
  unsigned int v15 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v15);
  *((void *)this + 4) = v15;
  XlBoundSheet::setName(a2, v15);
  *((void *)this + 4) = 0;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238B73074(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

OcText *XlString::takeString(uint64_t a1, char *a2, unsigned int a3, int a4, int a5)
{
  if (!a2 || !a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  uint64_t result = OcText::takeBuffer((OcText *)(a1 + 8), a2, a3);
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 16) = a5;
  return result;
}

uint64_t XlParserVisitor::getRecordDataOffset(XlParserVisitor *this)
{
  return *((unsigned int *)this + 22);
}

void XlCountry::XlCountry(XlCountry *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *uint64_t v2 = &unk_26EBDF028;
  v2[2] = 0x100000001;
}

void XlRecalcID::XlRecalcID(XlRecalcID *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0918;
  *(_DWORD *)(v2 + 16) = -1;
}

void XlStringExtractor::XlStringExtractor(XlStringExtractor *this)
{
  *(void *)this = &unk_26EBE4818;
  XlStringParser::XlStringParser((XlStringExtractor *)((char *)this + 8));
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  XlString::XlString((XlString *)((char *)this + 32));
  *((void *)this + 17) = 0;
  *(void *)((char *)this + 156) = 0;
  *(void *)((char *)this + 148) = 0;
}

void sub_238B73394(_Unwind_Exception *a1)
{
  TSURectWithOriginAndSize(v1);
  _Unwind_Resume(a1);
}

void XlSst::XlSst(XlSst *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE14C0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 42) = 0u;
  *(unsigned char *)(v2 + 58) = 1;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSst *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_DWORD *)a2 + 5) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  uint64_t v4 = (*((_DWORD *)a2 + 2) - 8);
  do
  {
    int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
    XlSst::registerTablePart(a2, v5, v4);
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), v4, 1);
    int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  }
  while (v6 == 60);
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4294967292, 1);
  *((_DWORD *)a2 + 2) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2))
                      - *((_DWORD *)this + 18);
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void XlSst::registerTablePart(XlSst *this, int a2, int a3)
{
  unsigned int v7 = (char **)((char *)this + 40);
  int v6 = (char *)*((void *)this + 5);
  unsigned int v8 = (char *)*((void *)this + 4);
  if (v8 >= v6)
  {
    int v10 = (unsigned char *)*((void *)this + 3);
    int64_t v11 = v8 - v10;
    unint64_t v12 = (unint64_t)(v8 - v10) >> 2;
    unint64_t v13 = (unint64_t)(v6 - v10) >> 2;
    if (2 * (int)v13 <= (v12 + 1)) {
      unsigned int v14 = v12 + 1;
    }
    else {
      unsigned int v14 = 2 * v13;
    }
    if (v13 >= 0x7FFFFFFF) {
      unint64_t v15 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15)
    {
      int v16 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)v7, v15);
      uint64_t v18 = v17;
      int v10 = (unsigned char *)*((void *)this + 3);
      unsigned int v8 = (char *)*((void *)this + 4);
    }
    else
    {
      int v16 = 0;
      uint64_t v18 = 0;
    }
    uint64_t v19 = &v16[v11 & 0x3FFFFFFFCLL];
    int v6 = &v16[4 * v18];
    *(_DWORD *)uint64_t v19 = a2;
    char v9 = v19 + 4;
    while (v8 != v10)
    {
      int v20 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v19 - 1) = v20;
      v19 -= 4;
    }
    *((void *)this + 3) = v19;
    *((void *)this + 4) = v9;
    *((void *)this + 5) = v6;
    if (v10)
    {
      operator delete(v10);
      int v6 = *v7;
    }
  }
  else
  {
    *(_DWORD *)unsigned int v8 = a2;
    char v9 = v8 + 4;
  }
  *((void *)this + 4) = v9;
  int v21 = a3 + a2;
  if (v9 >= v6)
  {
    int v23 = (char *)*((void *)this + 3);
    int64_t v24 = v9 - v23;
    unint64_t v25 = (unint64_t)(v9 - v23) >> 2;
    unint64_t v26 = (unint64_t)(v6 - v23) >> 2;
    if (2 * (int)v26 <= (v25 + 1)) {
      unsigned int v27 = v25 + 1;
    }
    else {
      unsigned int v27 = 2 * v26;
    }
    if (v26 >= 0x7FFFFFFF) {
      unint64_t v28 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v28 = v27;
    }
    if (v28)
    {
      int v29 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)v7, v28);
      uint64_t v31 = v30;
      int v23 = (char *)*((void *)this + 3);
      char v9 = (char *)*((void *)this + 4);
    }
    else
    {
      int v29 = 0;
      uint64_t v31 = 0;
    }
    int v32 = &v29[v24 & 0x3FFFFFFFCLL];
    int v33 = &v29[4 * v31];
    *(_DWORD *)int v32 = v21;
    uint64_t v22 = v32 + 4;
    while (v9 != v23)
    {
      int v34 = *((_DWORD *)v9 - 1);
      v9 -= 4;
      *((_DWORD *)v32 - 1) = v34;
      v32 -= 4;
    }
    *((void *)this + 3) = v32;
    *((void *)this + 4) = v22;
    *((void *)this + 5) = v33;
    if (v23) {
      operator delete(v23);
    }
  }
  else
  {
    *(_DWORD *)char v9 = v21;
    uint64_t v22 = v9 + 4;
  }
  *((void *)this + 4) = v22;
}

void XlExtSst::XlExtSst(XlExtSst *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDF828;
  *(void *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlExtSst *a2)
{
  unsigned int v4 = *((_DWORD *)a2 + 2) + 524286;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  unsigned int v5 = (unsigned __int16)(v4 >> 3);
  XlExtSst::setBucketCount(a2, v5);
  *((_WORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  if (v5)
  {
    for (int i = 0; i != v5; ++i)
    {
      uint64_t Bucket = XlExtSst::getBucket(a2, (unsigned __int16)i);
      *(_DWORD *)uint64_t Bucket = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
      *(_WORD *)(Bucket + 4) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
      (*(void (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    }
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

char *XlExtSst::setBucketCount(XlExtSst *this, unsigned int a2)
{
  uint64_t result = (char *)*((void *)this + 2);
  if (result) {
    uint64_t result = (char *)MEMORY[0x23EC99790](result, 0x1000C80789AEA99);
  }
  *((void *)this + 2) = 0;
  *((_WORD *)this + 12) = a2;
  if (a2)
  {
    uint64_t result = (char *)operator new[](8 * a2);
    uint64_t v5 = (uint64_t)result;
    do
    {
      *(_DWORD *)uint64_t v5 = 0;
      *(_WORD *)(v5 + 4) = 0;
      v5 += 8;
    }
    while ((char *)v5 != &result[8 * a2]);
    *((void *)this + 2) = result;
  }
  return result;
}

uint64_t XlExtSst::getBucket(XlExtSst *this, unsigned int a2)
{
  if (*((unsigned __int16 *)this + 12) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  return *((void *)this + 2) + 8 * a2;
}

_DWORD *XlStringExtractor::setStringExtractor(XlStringExtractor *this, SsrwOOStream *a2, XlSst *a3, XlExtSst *a4)
{
  *((void *)this + 2) = a2;
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    int v40 = 1004;
LABEL_47:
    _DWORD *exception = v40;
  }
  *(void *)((char *)this + 156) = *((void *)a3 + 2);
  uint64_t v7 = *((void *)this + 17);
  if (v7) {
    MEMORY[0x23EC99790](v7, 0x1000C8052888210);
  }
  *((void *)this + 17) = 0;
  unint64_t v8 = *((void *)a3 + 4) - *((void *)a3 + 3);
  unint64_t v9 = v8 >> 2;
  *((_DWORD *)this + 36) = v8 >> 2;
  if (!(v8 >> 2) || (*((_DWORD *)this + 40) & 0x80000000) != 0)
  {
    *((_DWORD *)this + 40) = 0;
    exception = __cxa_allocate_exception(4uLL);
    int v40 = 3002;
    goto LABEL_47;
  }
  unint64_t v10 = ((uint64_t)(v8 << 30) >> 30) & 0xFFFFFFFFFFFFFFFCLL;
  if ((v9 & 0x80000000) != 0) {
    size_t v11 = -1;
  }
  else {
    size_t v11 = v10;
  }
  unint64_t v12 = operator new[](v11);
  *((void *)this + 17) = v12;
  if (*((int *)this + 36) >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *((void *)a3 + 3);
    uint64_t v15 = ((unint64_t)(*((void *)a3 + 4) - v14) >> 2);
    do
    {
      if (v15 == v13) {
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      }
      v12[v13] = *(_DWORD *)(v14 + 4 * v13);
      ++v13;
    }
    while (v13 < *((int *)this + 36));
  }
  int v16 = *((unsigned __int16 *)a4 + 13);
  *((_DWORD *)this + 37) = *((unsigned __int16 *)a4 + 12);
  *((_DWORD *)this + 38) = v16;
  int v17 = 1;
  while (1)
  {
    int v18 = *((_DWORD *)this + 37);
    if (v17 - 1 >= v18 - 1) {
      break;
    }
    unsigned int v19 = *(_DWORD *)XlExtSst::getBucket(a4, (unsigned __int16)(v17 - 1));
    uint64_t Bucket = (unsigned int *)XlExtSst::getBucket(a4, (unsigned __int16)v17++);
    if (v19 >= *Bucket)
    {
      int v18 = *((_DWORD *)this + 37);
      int v21 = *((_DWORD *)this + 38);
      int v22 = *((_DWORD *)this + 40);
      BOOL v23 = v21 * v17 < v22;
      goto LABEL_18;
    }
  }
  BOOL v23 = 0;
  int v21 = *((_DWORD *)this + 38);
  int v22 = *((_DWORD *)this + 40);
LABEL_18:
  int v24 = v21 * v18;
  if (v18) {
    BOOL v25 = v24 < v22;
  }
  else {
    BOOL v25 = 1;
  }
  if (!v25 && !v23)
  {
    BOOL v28 = v18 < 0;
    if ((unint64_t)(16 * v18) >= 0xFFFFFFFFFFFFFFF0) {
      BOOL v28 = 1;
    }
    if (v28) {
      size_t v29 = -1;
    }
    else {
      size_t v29 = 16 * v18 + 16;
    }
    uint64_t result = operator new[](v29);
    *(void *)uint64_t result = 16;
    *((void *)result + 1) = v18;
    unsigned int v30 = result + 4;
    uint64_t v31 = result + 4;
    do
    {
      *uint64_t v31 = 0;
      *((_WORD *)v31 + 2) = 0;
      *((void *)v31 + 1) = 0;
      v31 += 4;
    }
    while (v31 != &result[4 * v18 + 4]);
    *((void *)this + 3) = v30;
    LODWORD(v32) = *((_DWORD *)this + 37);
    if ((int)v32 >= 1)
    {
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      do
      {
        uint64_t result = (_DWORD *)XlExtSst::getBucket(a4, (unsigned __int16)v34);
        uint64_t v35 = *((void *)this + 3) + v33;
        int v36 = *result;
        *(_WORD *)(v35 + 4) = *((_WORD *)result + 2);
        *(_DWORD *)uint64_t v35 = v36;
        ++v34;
        uint64_t v32 = *((int *)this + 37);
        v33 += 16;
      }
      while (v34 < v32);
      unsigned int v30 = (_DWORD *)*((void *)this + 3);
    }
    int v37 = **((_DWORD **)this + 17);
    int v38 = v37 - *v30;
    if (v37 != *v30 && (int)v32 >= 1)
    {
      uint64_t v32 = v32;
      do
      {
        *v30 += v38;
        v30 += 4;
        --v32;
      }
      while (v32);
    }
  }
  else
  {
    return XlStringExtractor::markHashTableAsCorrupted(this);
  }
  return result;
}

void XlExtSst::~XlExtSst(XlExtSst *this)
{
  *(void *)this = &unk_26EBDF828;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C80789AEA99);
  }
  *((void *)this + 2) = 0;
  *((_WORD *)this + 12) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBDF828;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C80789AEA99);
  }
  *((void *)this + 2) = 0;
  *((_WORD *)this + 12) = 0;
}

void XlSst::~XlSst(XlSst *this)
{
  XlSst::~XlSst(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBE14C0;
  uint64_t v2 = (void *)*((void *)this + 3);
  *((void *)this + 4) = v2;
  if (*((unsigned char *)this + 58) && *((void *)this + 6))
  {
    MEMORY[0x23EC99790](*((void *)this + 6), 0x1000C8077774924);
    uint64_t v2 = (void *)*((void *)this + 3);
  }
  *((void *)this + 6) = 0;
  *((_WORD *)this + 28) = 0;
  *((unsigned char *)this + 58) = 0;
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

void XlBof::~XlBof(XlBof *this)
{
}

void sub_238B73DCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B743AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, ...)
{
  va_start(va, a5);

  XlPivotInfoTable::~XlPivotInfoTable((XlPivotInfoTable *)va);
  _Unwind_Resume(a1);
}

void sub_238B74500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B746A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B748B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7492C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B749A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B74DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B74E40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B74EA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B74F14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B75064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B75178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7520C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B75290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B75324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B7541C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7558C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7564C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B756EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B757E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B75880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238B75950(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B75B44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  XlDocumentProperties::~XlDocumentProperties((XlDocumentProperties *)va);
  _Unwind_Resume(a1);
}

uint64_t XlBinaryReader::read(XlBinaryReader *this, XlDocumentProperties *a2)
{
  return XlDocumentProperties::operator=((uint64_t)a2, (uint64_t)this + 1016);
}

uint64_t XlDocumentProperties::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      MEMORY[0x23EC99790](v4, 0x1000C80BDFB0063);
    }
    *(void *)(a1 + 32) = 0;
    int v5 = *(__int16 *)(a2 + 28);
    if (v5 >= 1)
    {
      int v6 = operator new[](2 * *(unsigned __int16 *)(a2 + 28));
      *(void *)(a1 + 32) = v6;
      int v5 = *(__int16 *)(a2 + 28);
      if (v5 >= 1)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a2 + 32);
        do
        {
          v6[v7] = *(_WORD *)(v8 + 2 * v7);
          ++v7;
        }
        while (v7 < *(__int16 *)(a2 + 28));
        LOWORD(v5) = *(_WORD *)(a2 + 28);
      }
    }
    *(_WORD *)(a1 + 28) = v5;
    OcText::clearBuffer((OcText *)(a1 + 40));
    OcText::operator=(a1 + 40, a2 + 40);
    double v9 = XlRef::operator=(a1 + 92, a2 + 92);
    *(unsigned char *)(a1 + 102) = *(unsigned char *)(a2 + 102);
    uint64_t v10 = *(void *)(a1 + 104);
    if (v10) {
      MEMORY[0x23EC99790](v10, 0x1000C8077774924, v9);
    }
    *(void *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    size_t v11 = *(unsigned int *)(a2 + 112);
    if (v11 && *(void *)(a2 + 104))
    {
      *(_DWORD *)(a1 + 112) = v11;
      unint64_t v12 = operator new[](v11);
      *(void *)(a1 + 104) = v12;
      memcpy(v12, *(const void **)(a2 + 104), *(unsigned int *)(a1 + 112));
    }
  }
  return a1;
}

double XlRef::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    double result = *(double *)a2;
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  }
  return result;
}

void XlDocumentProperties::~XlDocumentProperties(XlDocumentProperties *this)
{
  *(void *)this = &unk_26EBE25D8;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C80BDFB0063);
  }
  *((void *)this + 4) = 0;
  uint64_t v3 = *((void *)this + 13);
  if (v3) {
    MEMORY[0x23EC99790](v3, 0x1000C8077774924);
  }
  *((void *)this + 13) = 0;
  OcText::~OcText((OcText *)((char *)this + 40));
}

{
  uint64_t vars8;

  XlDocumentProperties::~XlDocumentProperties(this);
  JUMPOUT(0x23EC997B0);
}

void sub_238B75EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  XlDocumentPresentationTable::~XlDocumentPresentationTable((XlDocumentPresentationTable *)&a9);

  _Unwind_Resume(a1);
}

void XlBinaryReader::read(XlBinaryReader *this, XlDocumentPresentationTable *a2)
{
  XlHeader::XlHeader(&v10);
  if ((*((_DWORD *)this + 53) & 0x80000000) != 0) {
    goto LABEL_12;
  }
  XlDocumentPresentationTable::clear(a2);
  (*(void (**)(void, void, void))(**((void **)this + 164) + 16))(*((void *)this + 164), *((unsigned int *)this + 53), 0);
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v10, *((unsigned char *)this + 1320));
  if (v10.var1 != 61)
  {
    *((_DWORD *)this + 53) = -1;
LABEL_12:
    XlDocumentPresentationTable::setDefault(a2);
    return;
  }
  do
  {
    uint64_t v4 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 20);
    if (v4)
    {
      uint64_t v5 = v4;
      int v6 = (char *)operator new(0x28uLL);
      XlWindow1::XlWindow1((XlWindow1 *)v6, &v10);
      *((void *)this + 163) = v6;
      if (v6) {
      (*(void (**)(void, char *))(**((void **)this + 167) + 416))(*((void *)this + 167), v6);
      }
      XlDocumentPresentation::setTabSelectInfo(v5, *((_WORD *)v6 + 8), *((_WORD *)v6 + 17));
      *(_WORD *)(v5 + 14) = *((_WORD *)v6 + 16);
      *(_WORD *)(v5 + 16) = *((_WORD *)v6 + 18);
      *(unsigned char *)(v5 + 12) = v6[30];
      *(void *)(v5 + 18) = *(void *)(v6 + 18);
      *(_DWORD *)(v5 + 26) = *(_DWORD *)(v6 + 26);
      XlChangeHistory::appendChangeLogEntry(a2, (XlRecord *)v5);
      uint64_t v7 = *((void *)this + 163);
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
      *((void *)this + 163) = 0;
    }
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v10, *((unsigned char *)this + 1320));
  }
  while (v10.var1 == 61);
  uint64_t v8 = *((void *)this + 164);
  RecordDataint Offset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)v8 + 16))(v8, -RecordDataOffset, 1);
}

void sub_238B7612C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *XlDocumentPresentationTable::clear(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[1];
  uint64_t v3 = this[2];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v4);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[1];
        uint64_t v3 = v1[2];
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[2] = v2;
  return this;
}

XlAutoFilterTable *XlChartObjectFactory::createObject(uint64_t a1, int a2)
{
  switch(a2)
  {
    case ':':
      uint64_t v2 = (char *)operator new(0xA8uLL);
      XlChartAreaPlot::XlChartAreaPlot((XlChartAreaPlot *)v2);
      goto LABEL_35;
    case ';':
      uint64_t v2 = (char *)operator new(0xA8uLL);
      XlChartBarPlot::XlChartBarPlot((XlChartBarPlot *)v2);
      goto LABEL_35;
    case '<':
      uint64_t v2 = (char *)operator new(0xB0uLL);
      XlChartCategoryAxis::XlChartCategoryAxis((XlChartCategoryAxis *)v2);
      goto LABEL_35;
    case '=':
      uint64_t v2 = (char *)operator new(0xE0uLL);
      XlChartTextFrame::XlChartTextFrame((XlChartTextFrame *)v2);
      *(void *)uint64_t v2 = &unk_26EBDC748;
      *((_DWORD *)v2 + 54) = 0;
      *((_WORD *)v2 + 110) = 0;
      goto LABEL_35;
    case '>':
      uint64_t v2 = (char *)operator new(0xC8uLL);
      XlChartDataSeries::XlChartDataSeries((XlChartDataSeries *)v2);
      goto LABEL_35;
    case '?':
      uint64_t v2 = (char *)operator new(0xB8uLL);
      XlChartDateAxis::XlChartDateAxis((XlChartDateAxis *)v2);
      goto LABEL_35;
    case '@':
      uint64_t v2 = (char *)operator new(0xE0uLL);
      XlChartTextFrame::XlChartTextFrame((XlChartTextFrame *)v2);
      *(void *)uint64_t v2 = &unk_26EBDADE0;
      *((_DWORD *)v2 + 54) = 0;
      goto LABEL_35;
    case 'A':
      uint64_t v2 = (char *)operator new(0xF8uLL);
      XlChartErrorBar::XlChartErrorBar((XlChartErrorBar *)v2);
      goto LABEL_35;
    case 'B':
      uint64_t v2 = (char *)operator new(0x28uLL);
      *(void *)uint64_t v2 = &unk_26EBDC7F0;
      *((void *)v2 + 1) = 255;
      *((_WORD *)v2 + 8) = 255;
      *(void *)(v2 + 18) = 0;
      *(void *)(v2 + 23) = 0;
      *(_WORD *)(v2 + 31) = 1;
      goto LABEL_35;
    case 'C':
      uint64_t v2 = (char *)operator new(0xF0uLL);
      XlChartTextFrame::XlChartTextFrame((XlChartTextFrame *)v2);
      *(void *)uint64_t v2 = &unk_26EBDAE50;
      *((void *)v2 + 27) = 0x100000004;
      *(void *)(v2 + 228) = 0x101010100000000;
      v2[236] = 1;
      goto LABEL_35;
    case 'D':
      uint64_t v2 = (char *)operator new(0xA8uLL);
      XlChartLinePlot::XlChartLinePlot((XlChartLinePlot *)v2);
      goto LABEL_35;
    case 'E':
      uint64_t v2 = (char *)operator new(0x28uLL);
      *(void *)uint64_t v2 = &unk_26EBDC8B0;
      *((_WORD *)v2 + 4) = 255;
      *(void *)(v2 + 10) = 0;
      *((_WORD *)v2 + 9) = 0;
      *(void *)(v2 + 20) = 0x100000000FFFFLL;
      v2[28] = 0;
      *((void *)v2 + 4) = -3229614080;
      goto LABEL_35;
    case 'F':
      uint64_t v2 = (char *)operator new(0x38uLL);
      XlChartLinkedData::XlChartLinkedData((XlChartLinkedData *)v2);
      goto LABEL_35;
    case 'G':
      uint64_t v2 = (char *)operator new(0x28uLL);
      *(void *)uint64_t v2 = &unk_26EBDC8E8;
      *((_DWORD *)v2 + 2) = 0;
      *(void *)(v2 + 12) = 255;
      *((_WORD *)v2 + 10) = 255;
      *(void *)(v2 + 30) = 0;
      *(void *)(v2 + 22) = 0;
      v2[38] = 1;
      goto LABEL_35;
    case 'H':
      uint64_t v2 = (char *)operator new(0x110uLL);
      XlChartParent::XlChartParent((XlChartParent *)v2);
      goto LABEL_35;
    case 'I':
      uint64_t v2 = (char *)operator new(0xA8uLL);
      XlChartPiePlot::XlChartPiePlot((XlChartPiePlot *)v2);
      goto LABEL_35;
    case 'J':
      uint64_t v2 = (char *)operator new(0xB8uLL);
      XlChartPieSubPlot::XlChartPieSubPlot((XlChartPieSubPlot *)v2);
      goto LABEL_35;
    case 'K':
      uint64_t v2 = (char *)operator new(0x58uLL);
      XlChartFrameType::XlChartFrameType((XlChartFrameType *)v2);
      *(void *)uint64_t v2 = &unk_26EBDAE18;
      *((_DWORD *)v2 + 21) = 0;
      goto LABEL_35;
    case 'L':
      uint64_t v2 = (char *)operator new(0xA8uLL);
      XlChartRadarAreaPlot::XlChartRadarAreaPlot((XlChartRadarAreaPlot *)v2);
      goto LABEL_35;
    case 'M':
      uint64_t v2 = (char *)operator new(0xA8uLL);
      XlChartRadarPlot::XlChartRadarPlot((XlChartRadarPlot *)v2);
      goto LABEL_35;
    case 'N':
      uint64_t v2 = (char *)operator new(0xA8uLL);
      XlChartScatterPlot::XlChartScatterPlot((XlChartScatterPlot *)v2);
      goto LABEL_35;
    case 'O':
      uint64_t v2 = (char *)operator new(0x60uLL);
      XlChartSeriesFormat::XlChartSeriesFormat((XlChartSeriesFormat *)v2);
      goto LABEL_35;
    case 'P':
      uint64_t v2 = (char *)operator new(0xA8uLL);
      XlChartSurfacePlot::XlChartSurfacePlot((XlChartSurfacePlot *)v2);
      goto LABEL_35;
    case 'Q':
      uint64_t v2 = (char *)operator new(0xD8uLL);
      XlChartTextFrame::XlChartTextFrame((XlChartTextFrame *)v2);
      goto LABEL_35;
    case 'R':
      uint64_t v2 = (char *)operator new(0xD8uLL);
      XlChartTextFrame::XlChartTextFrame((XlChartTextFrame *)v2);
      *(void *)uint64_t v2 = &unk_26EBDAD50;
      goto LABEL_35;
    case 'S':
      uint64_t v2 = (char *)operator new(0xF8uLL);
      XlChartTrendLine::XlChartTrendLine((XlChartTrendLine *)v2);
      goto LABEL_35;
    case 'T':
      uint64_t v2 = (char *)operator new(0xB0uLL);
      XlChartValueAxis::XlChartValueAxis((XlChartValueAxis *)v2);
      goto LABEL_35;
    case 'U':
      uint64_t v2 = (char *)operator new(0xF0uLL);
      XlChartTextFrame::XlChartTextFrame((XlChartTextFrame *)v2);
      *((void *)v2 + 27) = 0x100000004;
      v2[236] = 1;
      *(void *)uint64_t v2 = &unk_26EBDCC60;
      *((_WORD *)v2 + 119) = 0;
      *(void *)(v2 + 228) = 0x101010100000001;
      goto LABEL_35;
    case 'V':
      uint64_t v2 = (char *)operator new(0x38uLL);
      XlChartDropBarFormat::XlChartDropBarFormat((XlChartDropBarFormat *)v2);
      goto LABEL_35;
    case 'W':
      uint64_t v2 = (char *)operator new(0xE0uLL);
      XlChartTextFrame::XlChartTextFrame((XlChartTextFrame *)v2);
      *(void *)uint64_t v2 = &unk_26EBDCC98;
      *((_DWORD *)v2 + 54) = 0xFFFF;
LABEL_35:
      double result = (XlAutoFilterTable *)v2;
      break;
    default:
      double result = XlObjectFactory::createObject(a1, a2);
      break;
  }
  return result;
}

void sub_238B76700(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

XlAutoFilterTable *XlObjectFactory::createObject(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x28uLL);
      XlAutoFilterTable::XlAutoFilterTable(v2);
      goto LABEL_62;
    case 1:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x48uLL);
      XlBinaryData::XlBinaryData(v2);
      goto LABEL_62;
    case 2:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x20uLL);
      XlCalculationProperties::XlCalculationProperties(v2);
      goto LABEL_62;
    case 3:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x40uLL);
      XlCell::XlCell((XlCell *)v2);
      goto LABEL_62;
    case 4:
      uint64_t v3 = (XlAutoFilterTable *)operator new(0x20uLL);
      uint64_t v2 = v3;
      unint64_t v4 = &unk_26EBDAEE8;
      goto LABEL_36;
    case 5:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x30uLL);
      XlCellRow::XlCellRow(v2);
      XlCellRow::init(v2);
      goto LABEL_62;
    case 6:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x18uLL);
      XlCellTableInfo::XlCellTableInfo(v2);
      goto LABEL_62;
    case 7:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x20uLL);
      XlChangeHistory::XlChangeHistory(v2);
      goto LABEL_62;
    case 8:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x30uLL);
      XlColorTable::XlColorTable(v2);
      XlColorTable::init(v2);
      goto LABEL_62;
    case 9:
      uint64_t v5 = (XlAutoFilterTable *)operator new(0x20uLL);
      uint64_t v2 = v5;
      *((void *)v5 + 2) = 0;
      *((void *)v5 + 3) = 0;
      int v6 = &unk_26EBDAFA8;
      goto LABEL_57;
    case 10:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x28uLL);
      XlConditionalFormat::XlConditionalFormat(v2);
      goto LABEL_62;
    case 11:
      uint64_t v3 = (XlAutoFilterTable *)operator new(0x20uLL);
      uint64_t v2 = v3;
      unint64_t v4 = &unk_26EBE2448;
      goto LABEL_36;
    case 12:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x6E0uLL);
      XlContentFormatTable::XlContentFormatTable(v2);
      goto LABEL_62;
    case 13:
      uint64_t v5 = (XlAutoFilterTable *)operator new(0x20uLL);
      uint64_t v2 = v5;
      *((void *)v5 + 2) = 0;
      *((void *)v5 + 3) = 0;
      int v6 = &unk_26EBE2C20;
      goto LABEL_57;
    case 14:
      uint64_t v3 = (XlAutoFilterTable *)operator new(0x20uLL);
      uint64_t v2 = v3;
      unint64_t v4 = &unk_26EBE2480;
      goto LABEL_36;
    case 15:
      uint64_t v5 = (XlAutoFilterTable *)operator new(0x20uLL);
      uint64_t v2 = v5;
      *((void *)v5 + 2) = 0;
      *((void *)v5 + 3) = 0;
      int v6 = &unk_26EBE2C58;
      goto LABEL_57;
    case 16:
      uint64_t v5 = (XlAutoFilterTable *)operator new(0x20uLL);
      uint64_t v2 = v5;
      *((void *)v5 + 2) = 0;
      *((void *)v5 + 3) = 0;
      int v6 = &unk_26EBE24B8;
      goto LABEL_57;
    case 17:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x30uLL);
      XlDataValidityTable::XlDataValidityTable(v2);
      goto LABEL_62;
    case 18:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x18uLL);
      XlDocumentInfo::XlDocumentInfo(v2);
      goto LABEL_62;
    case 19:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x78uLL);
      XlDocumentProperties::XlDocumentProperties(v2);
      goto LABEL_62;
    case 20:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x20uLL);
      XlDocumentPresentation::XlDocumentPresentation(v2);
      goto LABEL_62;
    case 21:
      uint64_t v3 = (XlAutoFilterTable *)operator new(0x20uLL);
      uint64_t v2 = v3;
      unint64_t v4 = &unk_26EBE25A0;
      goto LABEL_36;
    case 22:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x10uLL);
      XlDocumentProtection::XlDocumentProtection(v2);
      goto LABEL_62;
    case 23:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x90uLL);
      XlFileProtection::XlFileProtection(v2);
      goto LABEL_62;
    case 24:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x58uLL);
      XlFontTable::XlFontTable(v2);
      goto LABEL_62;
    case 25:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x48uLL);
      XlFormulaInfo::XlFormulaInfo((XlFormulaInfo *)v2);
      goto LABEL_62;
    case 26:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x88uLL);
      XlGraphicsInfo::XlGraphicsInfo(v2);
      goto LABEL_62;
    case 27:
      uint64_t v5 = (XlAutoFilterTable *)operator new(0x20uLL);
      uint64_t v2 = v5;
      *((void *)v5 + 2) = 0;
      *((void *)v5 + 3) = 0;
      int v6 = &unk_26EBDB1B8;
      goto LABEL_57;
    case 28:
      uint64_t v5 = (XlAutoFilterTable *)operator new(0x20uLL);
      uint64_t v2 = v5;
      *((void *)v5 + 2) = 0;
      *((void *)v5 + 3) = 0;
      int v6 = &unk_26EBE2C90;
      goto LABEL_57;
    case 29:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x80uLL);
      XlLink::XlLink(v2);
      goto LABEL_62;
    case 30:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x28uLL);
      *(void *)uint64_t v2 = &unk_26EBE2B00;
      *((void *)v2 + 3) = 0;
      *((void *)v2 + 4) = 0;
      *((void *)v2 + 2) = 0;
      *((unsigned char *)v2 + 8) = 1;
      return v2;
    case 31:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x30uLL);
      XlLinkOperandTable::XlLinkOperandTable(v2);
      goto LABEL_62;
    case 32:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x48uLL);
      *(void *)uint64_t v2 = &unk_26EBE2B70;
      *((void *)v2 + 1) = &unk_26EBE2B00;
      *((void *)v2 + 3) = 0;
      *((void *)v2 + 4) = 0;
      *((void *)v2 + 5) = 0;
      *((void *)v2 + 6) = 0;
      *((unsigned char *)v2 + 16) = 1;
      *((void *)v2 + 7) = 0;
      *((void *)v2 + 8) = 0;
      return v2;
    case 33:
      uint64_t v3 = (XlAutoFilterTable *)operator new(0x20uLL);
      uint64_t v2 = v3;
      unint64_t v4 = &unk_26EBE2BA8;
      goto LABEL_36;
    case 34:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x2C0uLL);
      XlNameTable::XlNameTable(v2);
      goto LABEL_62;
    case 35:
      uint64_t v5 = (XlAutoFilterTable *)operator new(0x20uLL);
      uint64_t v2 = v5;
      *((void *)v5 + 2) = 0;
      *((void *)v5 + 3) = 0;
      int v6 = &unk_26EBDB180;
      goto LABEL_57;
    case 36:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x70uLL);
      XlPageProperties::XlPageProperties(v2);
      goto LABEL_62;
    case 37:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x30uLL);
      XlPhoneticTable::XlPhoneticTable(v2);
      goto LABEL_62;
    case 38:
      uint64_t v5 = (XlAutoFilterTable *)operator new(0x20uLL);
      uint64_t v2 = v5;
      *((void *)v5 + 2) = 0;
      *((void *)v5 + 3) = 0;
      int v6 = &unk_26EBE2D00;
      goto LABEL_57;
    case 39:
      uint64_t v5 = (XlAutoFilterTable *)operator new(0x20uLL);
      uint64_t v2 = v5;
      *((void *)v5 + 2) = 0;
      *((void *)v5 + 3) = 0;
      int v6 = &unk_26EBE2CC8;
      goto LABEL_57;
    case 40:
      uint64_t v3 = (XlAutoFilterTable *)operator new(0x20uLL);
      uint64_t v2 = v3;
      unint64_t v4 = &unk_26EBE2E20;
LABEL_36:
      *(void *)uint64_t v3 = v4;
      *((void *)v3 + 1) = 0;
      *((void *)v3 + 2) = 0;
      *((void *)v3 + 3) = 0;
      return v2;
    case 41:
      uint64_t v5 = (XlAutoFilterTable *)operator new(0x20uLL);
      uint64_t v2 = v5;
      *((void *)v5 + 2) = 0;
      *((void *)v5 + 3) = 0;
      int v6 = &unk_26EBE2D38;
      goto LABEL_57;
    case 42:
      uint64_t v5 = (XlAutoFilterTable *)operator new(0x20uLL);
      uint64_t v2 = v5;
      *((void *)v5 + 2) = 0;
      *((void *)v5 + 3) = 0;
      int v6 = &unk_26EBE2D70;
LABEL_57:
      *(void *)uint64_t v5 = v6;
      *((void *)v5 + 1) = 0;
      return v2;
    case 43:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x28uLL);
      XlRowBlock::XlRowBlock(v2);
      goto LABEL_62;
    case 44:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x20uLL);
      XlRowProperties::XlRowProperties(v2);
      goto LABEL_62;
    case 45:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x20uLL);
      XlScenarioTable::XlScenarioTable(v2);
      goto LABEL_62;
    case 46:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x18uLL);
      XlSheetBackgroundInfo::XlSheetBackgroundInfo(v2);
      goto LABEL_62;
    case 47:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x10uLL);
      XlSheetInfo::XlSheetInfo(v2);
      goto LABEL_62;
    case 48:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x28uLL);
      *((void *)v2 + 1) = 0;
      *((void *)v2 + 2) = 0;
      *((void *)v2 + 3) = 0;
      *((void *)v2 + 4) = 0;
      *(void *)uint64_t v2 = &unk_26EBE2F38;
      return v2;
    case 49:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x40uLL);
      XlSheetPresentation::XlSheetPresentation((XlSheetPresentation *)v2);
      goto LABEL_62;
    case 50:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x28uLL);
      XlSheetPresentationTable::XlSheetPresentationTable(v2);
      goto LABEL_62;
    case 52:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0xA0uLL);
      XlSortInfo::XlSortInfo(v2);
      goto LABEL_62;
    case 53:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x30uLL);
      XlStringTable::XlStringTable(v2);
      goto LABEL_62;
    case 54:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x200uLL);
      XlStyleTable::XlStyleTable(v2);
      goto LABEL_62;
    case 55:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0xA8uLL);
      XlSubstreamProperties::XlSubstreamProperties(v2);
      goto LABEL_62;
    case 56:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x90uLL);
      XlWorksheetProperties::XlWorksheetProperties(v2);
      goto LABEL_62;
    case 57:
      uint64_t v2 = (XlAutoFilterTable *)operator new(0x20uLL);
      XlWorksheetProtection::XlWorksheetProtection(v2);
LABEL_62:
      if (!v2) {
        goto LABEL_63;
      }
      return v2;
    default:
      ChLogFunction("Unknown object type passed to XlObjectFactory\n", 1, 2, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/ObjectModel/XlObjectFactory.cpp", 149);
LABEL_63:
      ChLogFunction("invalid object type", 2, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/ObjectModel/XlObjectFactory.cpp", 153);
      return 0;
  }
}

void sub_238B76F9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlDocumentPresentation::XlDocumentPresentation(XlDocumentPresentation *this)
{
  *(void *)this = &unk_26EBE2560;
  *((_DWORD *)this + 2) = 0x10000;
  *((unsigned char *)this + 12) = 1;
  *(void *)((char *)this + 14) = 0x2D000002580000;
  *(_DWORD *)((char *)this + 22) = 937836120;
  *(_DWORD *)((char *)this + 26) = 16842752;
}

uint64_t XlDocumentPresentation::setTabSelectInfo(uint64_t this, __int16 a2, __int16 a3)
{
  if (*(__int16 *)(this + 8) < 0 || *(__int16 *)(this + 10) <= 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  *(_WORD *)(this + 8) = a2;
  *(_WORD *)(this + 10) = a3;
  return this;
}

void XlChangeHistory::appendChangeLogEntry(XlChangeHistory *this, XlRecord *a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
  unint64_t v6 = *((void *)this + 3);
  unint64_t v4 = (char *)this + 24;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *((void *)this + 1);
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v16 = 0;
    }
    int v17 = &v14[v10 & 0x7FFFFFFF8];
    int v18 = &v14[8 * v16];
    *(void *)int v17 = a2;
    uint64_t v8 = v17 + 8;
    int v20 = (char *)*((void *)this + 1);
    unsigned int v19 = (char *)*((void *)this + 2);
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      unsigned int v19 = (char *)*((void *)this + 1);
    }
    *((void *)this + 1) = v17;
    *((void *)this + 2) = v8;
    *((void *)this + 3) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *uint64_t v7 = a2;
    uint64_t v8 = v7 + 1;
  }
  *((void *)this + 2) = v8;
}

void XlWindow1::~XlWindow1(XlWindow1 *this)
{
}

uint64_t XlConditionalFormatTable::at(XlConditionalFormatTable *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (((unint64_t)(*((void *)this + 2) - v2) >> 3) <= a2
    || (uint64_t result = *(void *)(v2 + 8 * a2)) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  return result;
}

void XlDocumentPresentationTable::~XlDocumentPresentationTable(XlDocumentPresentationTable *this)
{
  *(void *)this = &unk_26EBE25A0;
  XlDocumentPresentationTable::clear(this);
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  XlDocumentPresentationTable::~XlDocumentPresentationTable(this);
  JUMPOUT(0x23EC997B0);
}

void XlDocumentPresentation::~XlDocumentPresentation(XlDocumentPresentation *this)
{
}

void sub_238B77658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  XlFontTable::~XlFontTable((void **)va);

  _Unwind_Resume(a1);
}

void XlFontTable::XlFontTable(XlFontTable *this)
{
  *(void *)this = &unk_26EBDB030;
  OcText::OcText((OcText *)((char *)this + 8));
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((_WORD *)this + 28) = 320;
  OcText::setBuffer(v2, "V", 8, 1);
  *((_DWORD *)this + 6) = 7;
}

void sub_238B7773C(_Unwind_Exception *a1)
{
  CsSimpleHeapVector<XlFont>::~CsSimpleHeapVector(v2);
  OcText::~OcText(v1);
  _Unwind_Resume(a1);
}

OcText *OcText::setBuffer(OcText *a1, char *a2, int a3, int a4)
{
  uint64_t result = OcText::setBuffer(a1, a2, 2 * a3);
  a1->int var1 = a4;
  return result;
}

XlFont *XlBinaryReader::read(XlBinaryReader *this, XlFontTable *a2)
{
  XlHeader::XlHeader(&v12);
  CsSimpleHeapVector<XlRecord>::clear((void *)a2 + 8);
  uint64_t v5 = *((void *)this + 43);
  uint64_t v4 = *((void *)this + 44);
  if (((v4 - v5) & 0x3FFFFFFFCLL) != 0)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(unsigned int *)(v5 + 4 * v6);
      if (v7 != -1)
      {
        (*(void (**)(void, uint64_t, void))(**((void **)this + 164) + 16))(*((void *)this + 164), v7, 0);
        while (1)
        {
          XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v12, *((unsigned char *)this + 1320));
          if (((unsigned __int16)v12.var1 | 0x200) != 0x231) {
            break;
          }
          uint64_t v8 = (XlFont *)operator new(0x38uLL);
          XlFont::XlFont(v8, &v12);
          *((void *)this + 163) = v8;
          (*(void (**)(void, XlFont *))(**((void **)this + 167) + 280))(*((void *)this + 167), v8);
          unint64_t v13 = v8;
          CsSimpleHeapVector<XlRecord>::pushBack((void **)a2 + 8, (uint64_t *)&v13);
          if (v13) {
            (*((void (**)(XlFont *))v13->var0 + 1))(v13);
          }
          *((void *)this + 163) = 0;
        }
        uint64_t v9 = *((void *)this + 164);
        RecordDataint Offset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)v9 + 16))(v9, -RecordDataOffset, 1);
        uint64_t v5 = *((void *)this + 43);
        uint64_t v4 = *((void *)this + 44);
      }
      ++v6;
    }
    while (v6 < ((unint64_t)(v4 - v5) >> 2));
  }
  uint64_t result = (XlFont *)XlFontTable::size(a2);
  if (!result) {
    return XlFontTable::setDefault(a2);
  }
  return result;
}

void sub_238B77940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    XlChartBinaryReader::scanChartProperties();
  }
  _Unwind_Resume(exception_object);
}

void *CsSimpleHeapVector<XlRecord>::clear(void *result)
{
  uint64_t v1 = result[1];
  unint64_t v2 = (unint64_t)(v1 - *result) >> 3;
  if (v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t result = *(void **)(v1 - 8);
      if (result)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
        uint64_t v1 = v3[1];
      }
      *(void *)(v1 - 8) = 0;
      uint64_t v1 = v3[1] - 8;
      v3[1] = v1;
      LODWORD(v2) = v2 - 1;
    }
    while (v2);
  }
  return result;
}

void XlFont::XlFont(XlFont *this, XlHeader *a2)
{
  XlRecord::XlRecord((XlRecord *)this, a2);
  *(void *)uint64_t v2 = &unk_26EBDFA28;
  *(void *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 2147418112;
  *(_WORD *)(v2 + 28) = 400;
  *(_DWORD *)(v2 + 44) = 0;
  *(_WORD *)(v2 + 48) = 0;
  *(void *)(v2 + 32) = 0;
  *(_WORD *)(v2 + 40) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlFont *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  unsigned int var0 = a2->var1.var0;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  a2->int var3 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  int16x8_t v6 = (int16x8_t)((__n128 (*)(void))*(void *)(**((void **)this + 2) + 72))(*((void *)this + 2));
  a2->var7 = v7 & 1;
  a2->var12 = (v7 & 0x20) != 0;
  v6.i64[0] = *(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(v7) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)&a2->var8 = vmovn_s16(v6).u32[0];
  if (!a2->var1.var2)
  {
    a2->unsigned int var4 = -1;
    goto LABEL_8;
  }
  a2->unsigned int var4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  if (a2->var1.var2 < 5u)
  {
LABEL_8:
    a2->var5 = 400;
    a2->var6 = 0;
    a2->var13 = 0;
    *(_WORD *)&a2->var14 = 0;
    goto LABEL_9;
  }
  signed __int16 v8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  int v9 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  int v10 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  if (v10 == 35) {
    int v11 = 1;
  }
  else {
    int v11 = v10;
  }
  a2->var5 = v8;
  a2->var6 = v9;
  a2->var13 = v11;
  a2->var14 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  a2->var15 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 1, 1);
LABEL_9:
  unsigned int v12 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  if (v12)
  {
    unsigned int v13 = v12;
    if (a2->var1.var2 < 9u) {
      char v14 = 0;
    }
    else {
      char v14 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    }
    unsigned int v15 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v15);
    *((void *)this + 4) = v15;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v13, v14, var0 + v4, v15);
    XlBoundSheet::setName((XlBoundSheet *)a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238B77DA4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlFontTable::size(XlFontTable *this)
{
  uint64_t v1 = (*((void *)this + 9) - *((void *)this + 8)) >> 3;
  if (v1 <= 4) {
    return v1;
  }
  else {
    return (v1 + 1);
  }
}

uint64_t XlFontTable::at(XlFontTable *this, unsigned int a2)
{
  if (a2 > 3)
  {
    --a2;
    uint64_t v2 = *((void *)this + 8);
    if (a2 < ((unint64_t)(*((void *)this + 9) - v2) >> 3)) {
      return *(void *)(v2 + 8 * a2);
    }
LABEL_5:
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v2 = *((void *)this + 8);
  if (((unint64_t)(*((void *)this + 9) - v2) >> 3) <= a2) {
    goto LABEL_5;
  }
  return *(void *)(v2 + 8 * a2);
}

void sub_238B77FBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B78090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B78254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7834C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B783D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void **CsSimpleHeapVector<XlFont>::~CsSimpleHeapVector(void **a1)
{
  CsSimpleHeapVector<XlRecord>::clear(a1);
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    operator delete(v2);
  }
  return a1;
}

void XlFont::~XlFont(XlFont *this)
{
  this->unsigned int var0 = (void **)&unk_26EBDFA28;
  uint64_t var2 = this->var2;
  if (var2) {
    (*(void (**)(XlString *))(*(void *)var2 + 8))(var2);
  }
  this->uint64_t var2 = 0;
  JUMPOUT(0x23EC997B0);
}

{
  XlString *var2;

  this->unsigned int var0 = (void **)&unk_26EBDFA28;
  uint64_t var2 = this->var2;
  if (var2) {
    (*(void (**)(XlString *))(*(void *)var2 + 8))(var2);
  }
  this->uint64_t var2 = 0;
}

void sub_238B7874C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlContentFormatTable::XlContentFormatTable(XlContentFormatTable *this)
{
  uint64_t v2 = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = &unk_26EBDAFE0;
  uint64_t v3 = (OcText *)((char *)this + 32);
  do
  {
    OcText::OcText((OcText *)((char *)this + v2 + 32));
    v2 += 48;
  }
  while (v2 != 1728);
  for (unint64_t i = 0; i != 36; ++i)
  {
    if (i >= 0x17) {
      unsigned int v6 = i + 14;
    }
    else {
      unsigned int v6 = i;
    }
    BuiltInFmtString = XlContentFormatTable::getBuiltInFmtString((uint64_t)v4, v6);
    unsigned int v8 = strlen(BuiltInFmtString);
    int v4 = OcText::setBuffer(v3, BuiltInFmtString, v8 + 1);
    v3->int var3 = v8;
    v3->int var1 = 1252;
    ++v3;
  }
}

void sub_238B78880(_Unwind_Exception *a1)
{
  for (uint64_t i = 214; i != -2; i -= 6)
    OcText::~OcText((OcText *)&v1[i]);
  void *v1 = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(v2);
  _Unwind_Resume(a1);
}

void *XlBinaryReader::read(XlBinaryReader *this, XlContentFormatTable *a2)
{
  XlHeader::XlHeader(&v11);
  int v4 = (void **)((char *)a2 + 8);
  uint64_t result = CsSimpleHeapVector<XlRecord>::clear(v4);
  if ((*((_DWORD *)this + 42) & 0x80000000) == 0)
  {
    (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v11, *((unsigned char *)this + 1320));
    while (((unsigned __int16)v11.var1 | 0x400) == 0x41E)
    {
      unsigned int v6 = (XlFormat *)operator new(0x20uLL);
      XlFormat::XlFormat(v6, &v11);
      *((void *)this + 163) = v6;
      uint64_t v7 = *((void *)this + 167);
      if (v6) {
      else
      }
        unsigned int v8 = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v7 + 288))(v7, v8);
      uint64_t v12 = *((void *)this + 163);
      CsSimpleHeapVector<XlRecord>::pushBack(v4, &v12);
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
      *((void *)this + 163) = 0;
      XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v11, *((unsigned char *)this + 1320));
    }
    uint64_t v9 = *((void *)this + 164);
    RecordDataint Offset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
    return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v9 + 16))(v9, -RecordDataOffset, 1);
  }
  return result;
}

void sub_238B78ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    XlChartBinaryReader::scanChartProperties();
  }
  _Unwind_Resume(exception_object);
}

void XlFormat::XlFormat(XlFormat *this, XlHeader *a2)
{
  XlRecord::XlRecord((XlRecord *)this, a2);
  *(void *)uint64_t v2 = &unk_26EBDFAA8;
  *(void *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlFormat *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  if (a2->var1.var2 < 3u)
  {
    int v7 = -1;
  }
  else
  {
    a2->int var3 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    if (a2->var1.var2 >= 9u)
    {
      int v4 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v4);
      *((void *)this + 4) = v4;
      uint64_t v5 = (SsrwOOStream *)*((void *)this + 2);
      int v6 = (*((uint64_t (**)(SsrwOOStream *))v5->var0 + 5))(v5);
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), v5, a2->var1.var0 + v6, *((XlString **)this + 4));
      goto LABEL_9;
    }
    int v7 = -3;
  }
  int v8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  unsigned int v9 = a2->var1.var0 + v7;
  unsigned int v13 = v9;
  if (v9)
  {
    int v10 = operator new[](v9 + 1);
    *((void *)this + 3) = v10;
    v10[v9] = 0;
    (*(void (**)(void, void, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), *((void *)this + 3), &v13);
  }
  XlHeader v11 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v11);
  *((void *)this + 4) = v11;
  XlString::takeString((uint64_t)v11, *((char **)this + 3), v13 + 1, v8, 0);
  *((void *)this + 3) = 0;
LABEL_9:
  XlBoundSheet::setName((XlBoundSheet *)a2, *((XlString **)this + 4));
  *((void *)this + 4) = 0;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238B78D1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlStringParser::parse(XlStringParser *this, SsrwOOStream *a2, int a3, XlString *a4)
{
  XlString::reset(a4);
  unsigned int v8 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 10))(a2);
  char v9 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 8))(a2);
  return XlStringParser::parse(this, a2, v8, v9, a3, a4) + 3;
}

void sub_238B78EC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B79074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t OcText::OcText(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = &unk_26EBDA008;
  int v4 = *(_DWORD *)(a2 + 12);
  int v5 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 28) = 0;
  *(void *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  if (!a3 || (int v6 = *(_DWORD *)(a2 + 8), v6 == a3))
  {
    unsigned int v8 = *(const unsigned __int8 **)(a2 + 24);
    char isSingleByteEncoding = OcText::isSingleByteEncoding(a3);
    OcText::copyBuffer((OcText *)a1, v8, v5 << (isSingleByteEncoding ^ 1));
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(a2 + 16);
    if (v7) {
      OcText::convert((unsigned __int16 **)(a1 + 24), *(char **)(a2 + 24), a3, v6, v7);
    }
  }
  return a1;
}

size_t OcText::convert(unsigned __int16 **a1, char *__s, int a3, int a4, uint64_t a5)
{
  size_t v5 = 0xFFFFFFFFLL;
  if (a1 && __s)
  {
    unsigned int v7 = a5;
    if (a4 == a3)
    {
      *a1 = (unsigned __int16 *)__s;
      return a5;
    }
    else if (a3 == 1 {
           && (uint64_t v10 = 2 * ChMapTextByCharacterEncoding2(a4, __s, a5, 0, 0, 1), v10)
    }
           && (size_t v5 = (v10 + 2), (v11 = (unsigned __int16 *)operator new[](v5)) != 0))
    {
      ChMapTextByCharacterEncoding2(a4, __s, v7, v11, v5 >> 1, 1);
      *((unsigned char *)v11 + v10) = 0;
      *((unsigned char *)v11 + (v10 | 1)) = 0;
      *a1 = v11;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return v5;
}

uint64_t ChMapTextByCharacterEncoding2(int a1, char *__s, unsigned int a3, unsigned __int16 *a4, uint64_t a5, int a6)
{
  if (__s)
  {
    int v6 = a4;
    unsigned int v7 = a3;
    if (!a4) {
      return v7;
    }
    char v9 = __s;
    if (a3 == -1) {
      unsigned int v7 = strlen(__s);
    }
    if (v7)
    {
      uint64_t v11 = v7;
      uint64_t v12 = v6;
      do
      {
        unsigned __int16 v13 = *v9++;
        *v12++ = v13;
        --v11;
      }
      while (v11);
    }
    if (a1 == 1252 || a1 == 3) {
      ChConvertANSICharactersToUnicode(v6, v7);
    }
    if (a6) {
      unsigned int v14 = v7;
    }
    else {
      unsigned int v14 = 0;
    }
    if (v7 && (a6 & 1) == 0)
    {
      uint64_t v15 = v7;
      do
      {
        unsigned int v16 = *v6;
        if (v16 < 0x20 || v16 == 127)
        {
          BOOL v17 = v16 > 0xD;
          int v18 = (1 << v16) & 0x2E00;
          if (v17 || v18 == 0) {
            unsigned __int16 *v6 = -3;
          }
        }
        ++v6;
        --v15;
      }
      while (v15);
      return v7;
    }
  }
  else
  {
    return 0;
  }
  return v14;
}

void sub_238B79440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B794B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7955C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B795E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B79690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B79728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlContentFormatTable::~XlContentFormatTable(void **this)
{
  *this = &unk_26EBDAFE0;
  for (uint64_t i = 214; i != -2; i -= 6)
    OcText::~OcText((OcText *)&this[i]);
  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
}

{
  uint64_t vars8;

  XlContentFormatTable::~XlContentFormatTable(this);
  JUMPOUT(0x23EC997B0);
}

void **CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(void **a1)
{
  CsSimpleHeapVector<XlRecord>::clear(a1);
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    operator delete(v2);
  }
  return a1;
}

void XlFormat::~XlFormat(XlFormat *this)
{
  this->unsigned int var0 = (void **)&unk_26EBDFAA8;
  uint64_t var2 = this->var2;
  if (var2) {
    (*(void (**)(XlString *))(*(void *)var2 + 8))(var2);
  }
  this->uint64_t var2 = 0;
  JUMPOUT(0x23EC997B0);
}

{
  XlString *var2;

  this->unsigned int var0 = (void **)&unk_26EBDFAA8;
  uint64_t var2 = this->var2;
  if (var2) {
    (*(void (**)(XlString *))(*(void *)var2 + 8))(var2);
  }
  this->uint64_t var2 = 0;
}

void sub_238B79CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void *a11, uint64_t a12, void *a13)
{
  *(void *)(v14 - 120) = a9;
  CsSimpleHeapVector<XlXf>::~CsSimpleHeapVector(a10);

  _Unwind_Resume(a1);
}

void *XlBinaryReader::read(XlBinaryReader *this, XlCellFormatTable *a2)
{
  XlHeader::XlHeader(&v11);
  int v4 = (void **)((char *)a2 + 8);
  uint64_t result = CsSimpleHeapVector<XlRecord>::clear(v4);
  uint64_t v6 = *((void *)this + 40);
  if (((*((void *)this + 41) - v6) & 0x3FFFFFFFCLL) != 0)
  {
    unint64_t v7 = 0;
    do
    {
      (*(void (**)(void, void, void))(**((void **)this + 164) + 16))(*((void *)this + 164), *(unsigned int *)(v6 + 4 * v7), 0);
      while (1)
      {
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v11, *((unsigned char *)this + 1320));
        if (v11.var1 != 1091 && v11.var1 != 224) {
          break;
        }
        unsigned int v8 = (XlXf *)operator new(0x60uLL);
        XlXf::XlXf(v8, &v11);
        *((void *)this + 163) = v8;
        (*(void (**)(void, XlXf *))(**((void **)this + 167) + 432))(*((void *)this + 167), v8);
        uint64_t v12 = v8;
        CsSimpleHeapVector<XlRecord>::pushBack(v4, (uint64_t *)&v12);
        if (v12) {
          (*((void (**)(XlXf *))v12->var0 + 1))(v12);
        }
        *((void *)this + 163) = 0;
      }
      uint64_t v9 = *((void *)this + 164);
      RecordDataint Offset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v9 + 16))(v9, -RecordDataOffset, 1);
      ++v7;
      uint64_t v6 = *((void *)this + 40);
    }
    while (v7 < ((unint64_t)(*((void *)this + 41) - v6) >> 2));
  }
  return result;
}

void sub_238B79F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    XlChartBinaryReader::scanChartProperties();
  }
  _Unwind_Resume(exception_object);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlXf *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  if (a2->var1.var2 <= 7u)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 8003;
  }
  a2->unsigned int var2 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  a2->int var3 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  unsigned __int16 v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  a2->int var24 = v4 & 1;
  a2->int var25 = (v4 & 2) != 0;
  a2->int var26 = (v4 & 4) != 0;
  a2->int var27 = (v4 & 8) != 0;
  a2->unsigned int var4 = v4 >> 4;
  unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  a2->int var28 = (v5 & 8) != 0;
  a2->var5 = v5 & 7;
  a2->var6 = (v5 >> 4) & 7;
  a2->int var29 = (v5 & 0x80) != 0;
  unsigned int var2 = a2->var1.var2;
  if (var2 < 9)
  {
    if (var2 >= 5)
    {
      int v11 = (v5 >> 8) & 3;
      if (v11 == 1) {
        int v11 = 255;
      }
      if (v11 == 2) {
        int v11 = 90;
      }
      if (v11 == 3) {
        LOBYTE(v11) = -76;
      }
      a2->var7 = v11;
      a2->var8 = 0;
      *(_WORD *)&a2->int var30 = 0;
      a2->var9 = 0;
    }
  }
  else
  {
    a2->var7 = BYTE1(v5);
    unsigned __int16 v7 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    a2->var8 = v7 & 0xF;
    a2->int var30 = (v7 & 0x10) != 0;
    a2->int var31 = (v7 & 0x20) != 0;
    a2->var9 = v7 >> 6;
    if (a2->var26)
    {
      int16x8_t v9 = (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(v7), (int8x16_t)xmmword_238EE0FD0));
      *(int8x8_t *)v9.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v9), (int8x8_t)0x1000100010001);
      *(_DWORD *)&a2->int var32 = vmovn_s16(v9).u32[0];
      a2->int var36 = (v7 & 0x4000) == 0;
      int v10 = (v7 >> 15) ^ 1;
    }
    else
    {
      v8.i64[0] = *(void *)&vshl_u16((uint16x4_t)vdup_n_s16(v7), (uint16x4_t)0xFFF3FFF4FFF5FFF6) & 0xFFC1FFC1FFC1FFC1;
      *(_DWORD *)&a2->int var32 = vmovn_s16(v8).u32[0];
      a2->int var36 = (v7 & 0x4000) != 0;
      int v10 = v7 >> 15;
    }
    a2->int var37 = v10;
  }
  unsigned int v12 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  unsigned int v13 = a2->var1.var2;
  if (v13 < 9)
  {
    if (v13 >= 5)
    {
      a2->var22 = v12 & 0x7F;
      a2->int var23 = (v12 >> 7) & 0x7F;
      a2->var38 = (v12 & 0x4000) != 0;
      unsigned int v17 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
      a2->var11 = v17 & 0x3F;
      a2->var14 = (v17 >> 6) & 7;
      a2->var19 = (unsigned __int16)v17 >> 9;
      unsigned __int16 v18 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
      a2->var15 = v18 & 7;
      *(int8x8_t *)&a2->var12 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v18), (uint32x2_t)0xFFFFFFFAFFFFFFFDLL), (int8x8_t)0x700000007);
      a2->var20 = v18 >> 9;
      unsigned int v19 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
      a2->var17 = v19 & 0x7F;
      a2->var18 = (v19 >> 7) & 0x7F;
    }
  }
  else
  {
    a2->var12 = v12 & 0xF;
    a2->var13 = v12 >> 4;
    a2->var14 = (unsigned __int16)v12 >> 12;
    a2->var15 = (v12 >> 8) & 0xF;
    unsigned int v14 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    a2->var17 = v14 & 0x7F;
    a2->var18 = (v14 >> 7) & 0x7F;
    a2->var10 = (unsigned __int16)v14 >> 14;
    unsigned int v15 = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
    a2->var20 = v15 & 0x7F;
    a2->var19 = (v15 >> 7) & 0x7F;
    a2->var21 = (v15 >> 14) & 0x7F;
    a2->var16 = (v15 >> 21) & 0xF;
    a2->var11 = v15 >> 26;
    unsigned int v16 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    a2->var22 = v16 & 0x7F;
    a2->int var23 = (v16 >> 7) & 0x7F;
    a2->var38 = (v16 & 0x4000) != 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void XlStyleTable::XlStyleTable(XlStyleTable *this)
{
  uint64_t v2 = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = &unk_26EBDAF20;
  uint64_t v3 = (OcText *)((char *)this + 32);
  do
  {
    OcText::OcText((OcText *)((char *)this + v2 + 32));
    v2 += 48;
  }
  while (v2 != 480);
  OcText::setBuffer(v3, "Normal", 7u);
  *((_DWORD *)this + 12) = 6;
  *((_DWORD *)this + 10) = 1252;
  OcText::setBuffer((OcText *)((char *)this + 80), "RowLevel_n", 0xBu);
  *((_DWORD *)this + 24) = 10;
  *((_DWORD *)this + 22) = 1252;
  OcText::setBuffer((OcText *)((char *)this + 128), "ColLevel_n", 0xBu);
  *((_DWORD *)this + 36) = 10;
  *((_DWORD *)this + 34) = 1252;
  OcText::setBuffer((OcText *)((char *)this + 176), "Comma", 6u);
  *((_DWORD *)this + 48) = 5;
  *((_DWORD *)this + 46) = 1252;
  OcText::setBuffer((OcText *)((char *)this + 224), "Currency", 9u);
  *((_DWORD *)this + 60) = 8;
  *((_DWORD *)this + 58) = 1252;
  OcText::setBuffer((OcText *)((char *)this + 272), "Percent", 8u);
  *((_DWORD *)this + 72) = 7;
  *((_DWORD *)this + 70) = 1252;
  OcText::setBuffer((OcText *)((char *)this + 320), "Comma[0]", 9u);
  *((_DWORD *)this + 84) = 8;
  *((_DWORD *)this + 82) = 1252;
  OcText::setBuffer((OcText *)((char *)this + 368), "Currency[0]", 0xCu);
  *((_DWORD *)this + 96) = 11;
  *((_DWORD *)this + 94) = 1252;
  OcText::setBuffer((OcText *)((char *)this + 416), "Hyperlink", 0xAu);
  *((_DWORD *)this + 108) = 9;
  *((_DWORD *)this + 106) = 1252;
  OcText::setBuffer((OcText *)((char *)this + 464), "Followed Hyperlink", 0x13u);
  *((_DWORD *)this + 120) = 18;
  *((_DWORD *)this + 118) = 1252;
}

void sub_238B7A5C8(_Unwind_Exception *a1)
{
  for (uint64_t i = 58; i != -2; i -= 6)
    OcText::~OcText((OcText *)&v1[i]);
  void *v1 = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(v2);
  _Unwind_Resume(a1);
}

void *XlBinaryReader::read(XlBinaryReader *this, XlStyleTable *a2)
{
  XlHeader::XlHeader(&v11);
  unsigned __int16 v4 = (void **)((char *)a2 + 8);
  uint64_t result = CsSimpleHeapVector<XlRecord>::clear(v4);
  if ((*((_DWORD *)this + 47) & 0x80000000) == 0)
  {
    (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v11, *((unsigned char *)this + 1320));
    while (v11.var1 == 659)
    {
      uint64_t v6 = (XlStyle *)operator new(0x28uLL);
      XlStyle::XlStyle(v6, &v11);
      *((void *)this + 163) = v6;
      uint64_t v7 = *((void *)this + 167);
      if (v6) {
      else
      }
        int16x8_t v8 = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v7 + 168))(v7, v8);
      uint64_t v12 = *((void *)this + 163);
      CsSimpleHeapVector<XlRecord>::pushBack(v4, &v12);
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
      *((void *)this + 163) = 0;
      XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v11, *((unsigned char *)this + 1320));
    }
    uint64_t v9 = *((void *)this + 164);
    RecordDataint Offset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
    return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v9 + 16))(v9, -RecordDataOffset, 1);
  }
  return result;
}

void sub_238B7A810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    XlChartBinaryReader::scanChartProperties();
  }
  _Unwind_Resume(exception_object);
}

void XlStyle::XlStyle(XlStyle *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1578;
  *(void *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = -1;
  *(_DWORD *)(v2 + 28) = 0;
  *(_WORD *)(v2 + 32) = 256;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlStyle *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v5 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((unsigned char *)a2 + 33) = (v6 & 0x8000) != 0;
  *((_WORD *)a2 + 12) = v6 & 0xFFF;
  if (v6 < 0)
  {
    uint64_t v9 = (XlStyleTable *)(*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    int v10 = (int)v9;
    if (!XlStyleTable::isValidBuiltInStyleID(v9))
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 3002;
    }
    *((_DWORD *)a2 + 7) = v10;
    *((unsigned char *)a2 + 32) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  }
  else
  {
    uint64_t v7 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v7);
    unsigned int v8 = v5 + v4;
    *((void *)this + 4) = v7;
    if ((*(unsigned int (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2)) + 3 < v8) {
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v8, *((XlString **)this + 4));
    }
    XlBoundSheet::setName(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238B7AA6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlCellFormatTable::isStyle(XlCellFormatTable *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (((unint64_t)(*((void *)this + 2) - v2) >> 3) <= a2) {
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  return *(unsigned __int8 *)(*(void *)(v2 + 8 * a2) + 77);
}

void sub_238B7AB50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7AC3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t XlStyleTable::getName(XlStyleTable *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (((unint64_t)(*((void *)this + 2) - v2) >> 3) <= a2) {
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v3 = *(void *)(v2 + 8 * a2);
  if (*(unsigned char *)(v3 + 33)) {
    return (uint64_t)this + 48 * *(unsigned int *)(v3 + 28) + 32;
  }
  uint64_t v5 = *(void *)(v3 + 16);
  if (!v5)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
  return v5 + 8;
}

uint64_t XlCellFormatTable::getParentCellFormat(XlCellFormatTable *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (((unint64_t)(*((void *)this + 2) - v2) >> 3) <= a2) {
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  return *(__int16 *)(*(void *)(v2 + 8 * a2) + 20);
}

uint64_t XlRecord::XlRecord(uint64_t a1, const XlHeader *a2)
{
  *(void *)a1 = &unk_26EBE0998;
  XlHeader::XlHeader((XlHeader *)(a1 + 8), a2 + 1);
  return a1;
}

void sub_238B7AEA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7B06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B7B2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238B7B370()
{
}

void sub_238B7B378()
{
}

void sub_238B7B414(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7B48C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7B50C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7B654(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7B6D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7B764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7B804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B7B8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B7B958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7B9E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7BA64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7BB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B7BC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B7BCD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B7BD80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B7BE90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7BF14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7BFD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7C174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B7C430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7C4D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7C618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7C740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7C7E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlStyleTable::~XlStyleTable(void **this)
{
  *this = &unk_26EBDAF20;
  for (uint64_t i = 58; i != -2; i -= 6)
    OcText::~OcText((OcText *)&this[i]);
  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
}

{
  uint64_t vars8;

  XlStyleTable::~XlStyleTable(this);
  JUMPOUT(0x23EC997B0);
}

void XlStyle::~XlStyle(XlStyle *this)
{
  *(void *)this = &unk_26EBE1578;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBE1578;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
}

void **CsSimpleHeapVector<XlXf>::~CsSimpleHeapVector(void **a1)
{
  CsSimpleHeapVector<XlRecord>::clear(a1);
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    operator delete(v2);
  }
  return a1;
}

void XlXf::~XlXf(XlXf *this)
{
}

void *XlBinaryReader::read(XlBinaryReader *this, XlPivotInfoTable *a2)
{
  uint64_t result = XlConditionalFormatTable::clear(a2);
  if ((*((_DWORD *)this + 49) & 0x80000000) == 0)
  {
    (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
    XlHeader::XlHeader(&v12);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v12, *((unsigned char *)this + 1320));
    uint64_t result = (void *)*((void *)this + 163);
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    *((void *)this + 163) = 0;
    if (v12.var1 == 213)
    {
      do
      {
        uint64_t v5 = (void **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 39);
        uint64_t v7 = XlRecordFactory::createRecord(&v12, v6);
        *((void *)this + 163) = v7;
        (*(void (**)(XlEof *, void))(*(void *)v7 + 16))(v7, *((void *)this + 167));
        uint64_t v13 = *((void *)this + 163);
        CsSimpleHeapVector<XlRecord>::pushBack(v5 + 1, &v13);
        while (1)
        {
          if (v13) {
            (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
          }
          *((void *)this + 163) = 0;
          XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v12, *((unsigned char *)this + 1320));
          if (v12.var1 == 133 || v12.var1 == 213 || v12.var1 == 352) {
            break;
          }
          uint64_t v9 = XlRecordFactory::createRecord(&v12, v8);
          *((void *)this + 163) = v9;
          (*(void (**)(XlEof *, void))(*(void *)v9 + 16))(v9, *((void *)this + 167));
          uint64_t v13 = *((void *)this + 163);
          CsSimpleHeapVector<XlRecord>::pushBack(v5 + 1, &v13);
        }
        XlChangeHistory::appendChangeLogEntry(a2, (XlRecord *)v5);
      }
      while (v12.var1 == 213);
      uint64_t v10 = *((void *)this + 164);
      RecordDataint Offset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
      return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v10 + 16))(v10, -RecordDataOffset, 1);
    }
    else
    {
      *((_DWORD *)this + 49) = -1;
    }
  }
  return result;
}

void sub_238B7CB94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *XlConditionalFormatTable::clear(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[1];
  uint64_t v3 = this[2];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v4);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[1];
        uint64_t v3 = v1[2];
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[2] = v2;
  return this;
}

void sub_238B7CD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  XlHeader v12 = v11;

  XlColorTable::~XlColorTable((XlColorTable *)&a9);
  _Unwind_Resume(a1);
}

void XlColorTable::XlColorTable(XlColorTable *this)
{
  *((unsigned char *)this + 40) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_26EBE23D8;
  *((_DWORD *)this + 6) = 0;
}

double XlColorTable::init(XlColorTable *this)
{
  uint64_t v2 = operator new[](0x20uLL);
  *((void *)this + 4) = v2;
  double result = 7.29111854e-304;
  *uint64_t v2 = xmmword_238EE0AD0;
  v2[1] = xmmword_238EE0AE0;
  return result;
}

void XlBinaryReader::read(XlBinaryReader *this, XlColorTable *a2)
{
  if (*((int *)this + 252) < 1)
  {
    XlColorTable::setDefault(a2);
  }
  else
  {
    XlHeader::XlHeader(&v9);
    (*(void (**)(void, void, void))(**((void **)this + 164) + 16))(*((void *)this + 164), *((unsigned int *)this + 252), 0);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v9, *((unsigned char *)this + 1320));
    unint64_t v4 = operator new(0x20uLL);
    XlPalette::XlPalette((XlPalette *)v4, &v9);
    *((void *)this + 163) = v4;
    if (v4) {
    (*(void (**)(void, void *))(**((void **)this + 167) + 144))(*((void *)this + 167), v4);
    }
    double v5 = XlColorTable::setColors(a2, *((int **)v4 + 2), *((_WORD *)v4 + 12));
    *((unsigned char *)v4 + 26) = 0;
    uint64_t v6 = *((void *)this + 163);
    if (v6) {
      (*(void (**)(uint64_t, double))(*(void *)v6 + 8))(v6, v5);
    }
    *((void *)this + 163) = 0;
  }
  if (*((int *)this + 253) >= 1)
  {
    XlHeader::XlHeader(&v9);
    (*(void (**)(void, void, void))(**((void **)this + 164) + 16))(*((void *)this + 164), *((unsigned int *)this + 253), 0);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v9, *((unsigned char *)this + 1320));
    uint64_t v7 = operator new(0x20uLL);
    XlPaletteX::XlPaletteX((XlPaletteX *)v7, &v9);
    *((void *)this + 163) = v7;
    if (v7) {
    (*(void (**)(void, void *))(**((void **)this + 167) + 152))(*((void *)this + 167), v7);
    }
    XlColorTable::setXColors(a2, *((int **)v7 + 2), *((_WORD *)v7 + 12));
    *((unsigned char *)v7 + 26) = 0;
    uint64_t v8 = *((void *)this + 163);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    *((void *)this + 163) = 0;
  }
}

void sub_238B7D084(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double XlColorTable::setDefault(XlColorTable *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8052888210);
  }
  *((void *)this + 1) = 0;
  *((_WORD *)this + 12) = 56;
  uint64_t v3 = operator new[](0xE0uLL);
  *((void *)this + 1) = v3;
  *uint64_t v3 = xmmword_238EE0AF0;
  v3[1] = xmmword_238EE0B00;
  v3[2] = xmmword_238EE0B10;
  v3[3] = xmmword_238EE0B20;
  v3[4] = xmmword_238EE0B30;
  v3[5] = xmmword_238EE0B40;
  v3[6] = xmmword_238EE0B50;
  v3[7] = xmmword_238EE0B60;
  v3[8] = xmmword_238EE0B70;
  v3[9] = xmmword_238EE0B80;
  v3[10] = xmmword_238EE0B90;
  v3[11] = xmmword_238EE0BA0;
  double result = 1.00566372e-306;
  v3[12] = xmmword_238EE0BB0;
  v3[13] = xmmword_238EE0BC0;
  *((unsigned char *)this + 40) = 1;
  return result;
}

void sub_238B7D2A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7D388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlColorTable::~XlColorTable(XlColorTable *this)
{
  *(void *)this = &unk_26EBE23D8;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8052888210);
  }
  *((void *)this + 1) = 0;
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    MEMORY[0x23EC99790](v3, 0x1000C8052888210);
  }
  *((void *)this + 2) = 0;
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    MEMORY[0x23EC99790](v4, 0x1000C8052888210);
  }
  *((void *)this + 4) = 0;
}

{
  uint64_t vars8;

  XlColorTable::~XlColorTable(this);
  JUMPOUT(0x23EC997B0);
}

void sub_238B7D730(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x10B1C409D6E66E7);
  _Unwind_Resume(a1);
}

void *XlBinaryReader::read(XlBinaryReader *this, XlSheetInfoTable *a2)
{
  uint64_t v3 = (void **)((char *)a2 + 8);
  double result = CsSimpleHeapVector<XlRecord>::clear((void *)a2 + 1);
  uint64_t v5 = *((void *)this + 20);
  if (v5)
  {
    uint64_t v7 = v5 + 8;
    uint64_t v6 = *(void *)(v5 + 8);
    if (((*(void *)(v7 + 8) - v6) & 0x7FFFFFFF8) != 0)
    {
      unint64_t v8 = 0;
      do
      {
        uint64_t v9 = *(void *)(v6 + 8 * v8);
        uint64_t v10 = (XlBoundSheet *)operator new(0x28uLL);
        XlBoundSheet::XlBoundSheet(v10);
        XlHeader v11 = (XlString *)operator new(0x68uLL);
        XlString::XlString(v11);
        *((_DWORD *)v10 + 8) = *(_DWORD *)(v9 + 32);
        *((void *)v10 + 3) = *(void *)(v9 + 24);
        uint64_t v12 = *(void *)(v9 + 16);
        if (v12) {
          XlString::operator=(v11, v12);
        }
        XlBoundSheet::setName(v10, v11);
        uint64_t v13 = v10;
        CsSimpleHeapVector<XlRecord>::pushBack(v3, (uint64_t *)&v13);
        double result = v13;
        if (v13) {
          double result = (void *)(*(uint64_t (**)(XlBoundSheet *))(*(void *)v13 + 8))(v13);
        }
        ++v8;
        uint64_t v6 = *(void *)(*((void *)this + 20) + 8);
      }
      while (v8 < ((unint64_t)(*(void *)(*((void *)this + 20) + 16) - v6) >> 3));
    }
  }
  return result;
}

void sub_238B7D890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    XlChartBinaryReader::scanChartProperties();
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

void XlBoundSheet::XlBoundSheet(XlBoundSheet *this)
{
  XlRecord::XlRecord(this, 133, 7, 9);
  *(void *)uint64_t v1 = &unk_26EBDED68;
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 32) = 0;
}

void XlRecord::XlRecord(XlRecord *this, __int16 a2, int a3, char a4)
{
  *(void *)this = &unk_26EBE0998;
  XlHeader::XlHeader((XlHeader *)this + 1);
  *((_WORD *)this + 6) = a2;
  *((_DWORD *)this + 2) = a3;
  *((unsigned char *)this + 14) = a4;
}

XlString *XlString::operator=(XlString *this, uint64_t a2)
{
  if ((XlString *)a2 != this)
  {
    XlString::reset(this);
    OcText::operator=((uint64_t)this + 8, a2 + 8);
    *((_DWORD *)this + 22) = *(_DWORD *)(a2 + 88);
    XlString::clearRichText(this);
    if (((*(void *)(a2 + 64) - *(void *)(a2 + 56)) & 0x7FFFFFFF8) != 0)
    {
      unint64_t v4 = 0;
      do
      {
        uint64_t v5 = operator new[](4uLL);
        uint64_t v6 = v5;
        *((void *)this + 12) = v5;
        uint64_t v7 = *(_WORD **)(*(void *)(a2 + 56) + 8 * v4);
        _WORD *v5 = *v7;
        v5[1] = v7[1];
        uint64_t v9 = (void *)*((void *)this + 8);
        unint64_t v8 = *((void *)this + 9);
        if ((unint64_t)v9 >= v8)
        {
          uint64_t v11 = *((void *)this + 7);
          unint64_t v12 = (unint64_t)v9 - v11;
          unint64_t v13 = (v8 - v11) >> 3;
          unsigned int v14 = 2 * v13;
          if (2 * (int)v13 <= (v12 >> 3) + 1) {
            unsigned int v14 = (v12 >> 3) + 1;
          }
          if (v13 >= 0x7FFFFFFF) {
            unint64_t v15 = 0xFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v14;
          }
          if (v15)
          {
            unsigned int v16 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 72, v15);
            uint64_t v18 = v17;
            uint64_t v6 = (_WORD *)*((void *)this + 12);
          }
          else
          {
            unsigned int v16 = 0;
            uint64_t v18 = 0;
          }
          unsigned int v19 = &v16[v12 & 0x7FFFFFFF8];
          *(void *)unsigned int v19 = v6;
          uint64_t v10 = v19 + 8;
          uint64_t v21 = (char *)*((void *)this + 7);
          int v20 = (char *)*((void *)this + 8);
          if (v20 != v21)
          {
            do
            {
              uint64_t v22 = *((void *)v20 - 1);
              v20 -= 8;
              *((void *)v19 - 1) = v22;
              v19 -= 8;
            }
            while (v20 != v21);
            int v20 = (char *)*((void *)this + 7);
          }
          *((void *)this + 7) = v19;
          *((void *)this + 8) = v10;
          *((void *)this + 9) = &v16[8 * v18];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          *uint64_t v9 = v5;
          uint64_t v10 = v9 + 1;
        }
        *((void *)this + 8) = v10;
        *((void *)this + 12) = 0;
        ++v4;
      }
      while (v4 < ((*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3));
    }
    if (*(void *)(a2 + 80))
    {
      BOOL v23 = (XlPhoneticInfo *)operator new(0x60uLL);
      XlPhoneticInfo::XlPhoneticInfo(v23);
      *((void *)this + 10) = v23;
      XlPhoneticInfo::operator=((uint64_t)v23, *(void *)(a2 + 80));
    }
  }
  return this;
}

void sub_238B7DB68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *XlBinaryReader::read(XlBinaryReader *this, XlLinkTable *a2)
{
  XlHeader::XlHeader(&v12);
  double result = XlLinkTable::clear(a2);
  int v5 = *((_DWORD *)this + 43);
  if ((v5 & 0x80000000) == 0)
  {
    *((_DWORD *)this + 45) = v5;
    if (v5)
    {
      do
      {
        uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 29);
        if (v6)
        {
          uint64_t v7 = (XlLink *)v6;
          *(unsigned char *)(v6 + 28) = 0;
          (*(void (**)(XlBinaryReader *, uint64_t))(*(void *)this + 208))(this, v6);
          XlLinkTable::appendLink(a2, v7);
        }
      }
      while (*((int *)this + 45) > 0);
    }
    double result = (void *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v12, *((unsigned char *)this + 1320));
    if (v12.var1 == 23)
    {
      unint64_t v8 = (XlExternSheet *)operator new(0x30uLL);
      XlExternSheet::XlExternSheet(v8, &v12);
      *((void *)this + 163) = v8;
      if (v8) {
      (*(void (**)(void, XlExternSheet *))(**((void **)this + 167) + 256))(*((void *)this + 167), v8);
      }
      if (((*((_DWORD *)v8 + 8) - *((_DWORD *)v8 + 6)) & 0x7FFF8) != 0)
      {
        unsigned int v9 = 0;
        uint64_t v10 = (XlLinkTable *)((char *)a2 + 8);
        do
        {
          ExternRef = (XlVertex *)XlExternSheet::getExternRef(v8, v9);
          XlCoordList::appendVertex(v10, ExternRef);
          ++v9;
        }
        while (v9 < (unsigned __int16)((*((_DWORD *)v8 + 8) - *((_DWORD *)v8 + 6)) >> 3));
      }
      *((unsigned char *)v8 + 16) = 0;
      double result = (void *)*((void *)this + 163);
      if (result) {
        double result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      *((void *)this + 163) = 0;
    }
  }
  return result;
}

void sub_238B7DD8C(_Unwind_Exception *exception_object)
{
}

void *XlLinkTable::clear(XlLinkTable *this)
{
  XlLinkLookupTable::clearLookupTable((uint64_t)this + 8);
  return XlLinkTable::clearLinkTable(this);
}

uint64_t XlLinkLookupTable::clearLookupTable(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 8))
  {
    uint64_t v2 = *(void *)(this + 16);
    uint64_t v3 = *(void *)(this + 24);
    if (((v3 - v2) & 0x7FFFFFFF8) != 0)
    {
      unint64_t v4 = 0;
      do
      {
        this = *(void *)(v2 + 8 * v4);
        if (this)
        {
          this = MEMORY[0x23EC997B0](this, 0x1000C40274DC3F3);
          uint64_t v2 = *(void *)(v1 + 16);
          uint64_t v3 = *(void *)(v1 + 24);
        }
        ++v4;
      }
      while (v4 < ((unint64_t)(v3 - v2) >> 3));
    }
  }
  else
  {
    uint64_t v2 = *(void *)(this + 16);
  }
  *(void *)(v1 + 24) = v2;
  return this;
}

void *XlLinkTable::clearLinkTable(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[6];
  uint64_t v3 = this[7];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v4);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[6];
        uint64_t v3 = v1[7];
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[7] = v2;
  return this;
}

void XlNameTable::XlNameTable(XlNameTable *this)
{
  uint64_t v2 = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = &unk_26EBDB1F0;
  do
  {
    OcText::OcText((OcText *)((char *)this + v2 + 32));
    v2 += 48;
  }
  while (v2 != 672);
}

void sub_238B7DF94(_Unwind_Exception *a1)
{
  for (; v3; v3 -= 48)
    OcText::~OcText((OcText *)((char *)v1 + v3 - 16));
  void *v1 = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(v2);
  _Unwind_Resume(a1);
}

void *XlBinaryReader::read(XlBinaryReader *this, XlNameTable *a2)
{
  XlHeader::XlHeader(&v11);
  unint64_t v4 = (void **)((char *)a2 + 8);
  double result = CsSimpleHeapVector<XlRecord>::clear(v4);
  if ((*((_DWORD *)this + 46) & 0x80000000) == 0)
  {
    (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v11, *((unsigned char *)this + 1320));
    while (((unsigned __int16)v11.var1 | 0x200) == 0x218)
    {
      uint64_t v6 = (XlName *)operator new(0x58uLL);
      XlName::XlName(v6, &v11);
      *((void *)this + 163) = v6;
      uint64_t v7 = *((void *)this + 167);
      if (v6) {
      else
      }
        unint64_t v8 = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v7 + 336))(v7, v8);
      uint64_t v12 = *((void *)this + 163);
      CsSimpleHeapVector<XlRecord>::pushBack(v4, &v12);
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
      *((void *)this + 163) = 0;
      XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v11, *((unsigned char *)this + 1320));
    }
    uint64_t v9 = *((void *)this + 164);
    RecordDataint Offset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
    return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v9 + 16))(v9, -RecordDataOffset, 1);
  }
  return result;
}

void sub_238B7E1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    XlChartBinaryReader::scanChartProperties();
  }
  _Unwind_Resume(exception_object);
}

uint64_t XlBinaryReader::getSheetNames(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 160);
  if (!v2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 8008;
  }
  return XlSheetInfoTable::getSheetNames(v2, a2);
}

uint64_t XlSheetInfoTable::getSheetNames(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = (XlSheetInfoTable *)result;
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4 != *a2)
  {
    uint64_t v6 = v4 - 48;
    uint64_t v7 = (uint64_t (***)(void))(v4 - 48);
    unint64_t v8 = (uint64_t (***)(void))(v4 - 48);
    do
    {
      uint64_t v9 = *v8;
      v8 -= 6;
      double result = (*v9)(v7);
      v6 -= 48;
      BOOL v10 = v7 == (uint64_t (***)(void))v5;
      uint64_t v7 = v8;
    }
    while (!v10);
  }
  a2[1] = v5;
  if (((*((void *)v3 + 2) - *((void *)v3 + 1)) & 0x7FFFFFFF8) != 0)
  {
    unsigned int v11 = 0;
    uint64_t v12 = 0;
    do
    {
      unint64_t v13 = (OcText *)operator new(0x30uLL);
      OcText::OcText(v13);
      if (v12 != v13)
      {
        if (v12) {
          (*((void (**)(const OcText *))v12->var0 + 1))(v12);
        }
        uint64_t v12 = v13;
      }
      uint64_t SheetName = XlSheetInfoTable::getSheetName(v3, v11);
      OcText::operator=((uint64_t)v12, SheetName);
      unint64_t v15 = a2[1];
      if (v15 >= a2[2])
      {
        double result = std::vector<OcText,ChAllocator<OcText>>::__push_back_slow_path<OcText const&>(a2, v12);
      }
      else
      {
        OcText::OcText((OcText *)a2[1], v12);
        double result = v15 + 48;
        a2[1] = v15 + 48;
      }
      a2[1] = result;
      ++v11;
    }
    while (v11 < ((*((void *)v3 + 2) - *((void *)v3 + 1)) >> 3));
    if (v12)
    {
      unsigned int v16 = (uint64_t (*)(const OcText *))*((void *)v12->var0 + 1);
      return v16(v12);
    }
  }
  return result;
}

void sub_238B7E3D4(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v3;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XlSheetInfoTable::getSheetName(XlSheetInfoTable *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (((unint64_t)(*((void *)this + 2) - v2) >> 3) <= a2) {
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v3 = *(void *)(*(void *)(v2 + 8 * a2) + 16);
  if (!v3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
  return v3 + 8;
}

double XlFormulaProcessor::XlFormulaProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_26EBE3AE0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 56) = a3;
  *(void *)(a1 + 64) = a4;
  *(void *)&double result = 16;
  *(void *)(a1 + 72) = 16;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  return result;
}

void XlFormulaProcessor::init(XlFormulaProcessor *this, char a2)
{
  uint64_t v4 = (XlFormulaParser *)operator new(0x58uLL);
  XlFormulaParser::XlFormulaParser(v4, a2);
  *((void *)this + 1) = v4;
  if (*((_DWORD *)this + 18))
  {
    unsigned int v5 = 0;
    do
    {
      uint64_t v6 = (CsString *)operator new(0x18uLL);
      CsString::CsString(v6);
      unint64_t v8 = (CsString **)*((void *)this + 4);
      unint64_t v7 = *((void *)this + 5);
      if ((unint64_t)v8 >= v7)
      {
        uint64_t v10 = *((void *)this + 3);
        unint64_t v11 = (unint64_t)v8 - v10;
        unint64_t v12 = (v7 - v10) >> 3;
        unsigned int v13 = 2 * v12;
        if (2 * (int)v12 <= (v11 >> 3) + 1) {
          unsigned int v13 = (v11 >> 3) + 1;
        }
        if (v12 >= 0x7FFFFFFF) {
          unint64_t v14 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 40, v14);
          uint64_t v17 = v16;
        }
        else
        {
          unint64_t v15 = 0;
          uint64_t v17 = 0;
        }
        uint64_t v18 = (CsString **)&v15[v11 & 0x7FFFFFFF8];
        *uint64_t v18 = v6;
        uint64_t v9 = v18 + 1;
        int v20 = (char *)*((void *)this + 3);
        unsigned int v19 = (char *)*((void *)this + 4);
        if (v19 != v20)
        {
          do
          {
            uint64_t v21 = (CsString *)*((void *)v19 - 1);
            v19 -= 8;
            *--uint64_t v18 = v21;
          }
          while (v19 != v20);
          unsigned int v19 = (char *)*((void *)this + 3);
        }
        *((void *)this + 3) = v18;
        *((void *)this + 4) = v9;
        *((void *)this + 5) = &v15[8 * v17];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        void *v8 = v6;
        uint64_t v9 = v8 + 1;
      }
      *((void *)this + 4) = v9;
      ++v5;
    }
    while (v5 < *((_DWORD *)this + 18));
    uint64_t v4 = (XlFormulaParser *)*((void *)this + 1);
  }
  if (!v4)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1001;
  }
}

void sub_238B7E628(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlFormulaParser::XlFormulaParser(XlFormulaParser *this, char a2)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 10;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *(void *)((char *)this + 60) = -1;
  *((_DWORD *)this + 17) = 0;
  *((unsigned char *)this + 72) = a2;
  *((unsigned char *)this + 73) = 0;
  *((_DWORD *)this + 19) = 0;
  *((unsigned char *)this + 80) = 0;
  *((unsigned char *)this + 82) = 0;
}

void sub_238B7E8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_238B7EA64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7EBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  XlStringTable::~XlStringTable((XlStringTable *)&a9);

  _Unwind_Resume(a1);
}

void XlStringTable::XlStringTable(XlStringTable *this)
{
  *(void *)this = &unk_26EBE3018;
  *((_DWORD *)this + 2) = 0;
  *((unsigned char *)this + 12) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
}

void XlBinaryReader::read(XlBinaryReader *this, XlStringTable *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 12);
  XlStringTable::clear(a2);
  uint64_t v5 = *((void *)this + 19);
  if (v5)
  {
    if (v4)
    {
      if (!*((_DWORD *)a2 + 4)) {
        return;
      }
      int v6 = *((_DWORD *)a2 + 5);
      int v7 = *(_DWORD *)(v5 + 160);
      if (v6 > v7) {
        return;
      }
    }
    else
    {
      int v6 = 0;
      int v7 = *(_DWORD *)(v5 + 160);
    }
    if (v6 < v7)
    {
      do
      {
        unint64_t v8 = (XlString *)operator new(0x68uLL);
        XlString::XlString(v8);
        XlString::setIndex(v8, v6);
        (*(void (**)(XlBinaryReader *, XlString *))(*(void *)this + 256))(this, v8);
        XlCrn::appendOperand(a2, (XlOper *)v8);
        if (v4 && *((_DWORD *)a2 + 4) == ((*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3)) {
          break;
        }
        ++v6;
      }
      while (v6 < *(_DWORD *)(*((void *)this + 19) + 160));
    }
  }
}

void sub_238B7EE84(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(a1);
}

void sub_238B7EEB4()
{
}

void sub_238B7EEBC()
{
  operator delete(v0);
  JUMPOUT(0x238B7EF04);
}

void sub_238B7EED0()
{
}

void *XlStringTable::clear(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[3];
  uint64_t v3 = this[4];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v4);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[3];
        uint64_t v3 = v1[4];
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[4] = v2;
  return this;
}

XlString *XlString::setIndex(XlString *this, int a2)
{
  *((_DWORD *)this + 22) = a2;
  return this;
}

XlStringExtractor *XlBinaryReader::read(XlBinaryReader *this, XlString *a2)
{
  int v2 = *((_DWORD *)a2 + 22);
  if (v2 < 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  XlString::reset(a2);
  double result = (XlStringExtractor *)*((void *)this + 19);
  if (result)
  {
    return (XlStringExtractor *)XlStringExtractor::getString(result, v2, a2);
  }
  return result;
}

uint64_t XlStringExtractor::getString(XlStringExtractor *this, int a2, XlString *a3)
{
  uint64_t v4 = *((void *)this + 2);
  if (!v4)
  {
    exception = __cxa_allocate_exception(4uLL);
    int v23 = 1003;
    goto LABEL_23;
  }
  if (a2 < 0 || *((_DWORD *)this + 40) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    int v23 = 1005;
    goto LABEL_23;
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
  uint64_t v8 = *((unsigned int *)this + 38);
  int v9 = a2 / (int)v8;
  uint64_t v10 = a2 / (int)v8;
  unint64_t v11 = *(_DWORD **)(*((void *)this + 3) + 16 * v10 + 8);
  if (v11) {
    goto LABEL_10;
  }
  if (v8 >> 30)
  {
    exception = __cxa_allocate_exception(4uLL);
    int v23 = 1001;
LABEL_23:
    _DWORD *exception = v23;
  }
  unint64_t v11 = operator new[](4 * v8);
  uint64_t v12 = *((void *)this + 3);
  *(void *)(v12 + 16 * v9 + 8) = v11;
  if (*((int *)this + 38) >= 2)
  {
    uint64_t v13 = 1;
    do
      v11[v13++] = -1;
    while (v13 < *((int *)this + 38));
  }
  _DWORD *v11 = *(_DWORD *)(v12 + 16 * v9);
LABEL_10:
  int v14 = a2 % (int)v8;
  uint64_t v15 = v11[v14];
  if (v15 == -1)
  {
    XlStringExtractor::setStringLocation((uint64_t)this, v9, v14);
    uint64_t v15 = *(unsigned int *)(*(void *)(*((void *)this + 3) + 16 * v9 + 8) + 4 * v14);
  }
  int v16 = XlStringExtractor::tableChunkBoundary(this, v15);
  if (v16 < 0)
  {
    uint64_t v15 = (v15 + 4);
    int v16 = XlStringExtractor::tableChunkBoundary(this, v15);
  }
  int v17 = v16;
  (*(void (**)(void, uint64_t, void))(**((void **)this + 2) + 16))(*((void *)this + 2), v15, 0);
  int v18 = XlStringParser::parse((XlStringExtractor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v17, a3);
  uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(**((void **)this + 2) + 16))(*((void *)this + 2), v7, 0);
  if (v14 < *((_DWORD *)this + 38) - 1)
  {
    uint64_t v20 = *(void *)(*((void *)this + 3) + 16 * v10 + 8);
    if (*(_DWORD *)(v20 + 4 * (v14 + 1)) == -1)
    {
      int v21 = v18 + v15;
      if (v18 + v15 == v17) {
        int v21 = v18 + v15 + 4;
      }
      *(_DWORD *)(v20 + 4 * (v14 + 1)) = v21;
    }
  }
  return result;
}

uint64_t XlStringExtractor::tableChunkBoundary(XlStringExtractor *this, int a2)
{
  int v2 = (int *)*((void *)this + 17);
  if (!v2)
  {
    exception = __cxa_allocate_exception(4uLL);
    int v7 = 1003;
LABEL_16:
    _DWORD *exception = v7;
  }
  if (*v2 > a2) {
    goto LABEL_14;
  }
  int v3 = *((_DWORD *)this + 36);
  if (v2[v3 - 1] < a2) {
    goto LABEL_14;
  }
  if (v3 >= 1)
  {
    uint64_t v4 = 0;
    while (v2[v4] <= a2)
    {
      uint64_t result = v2[v4 + 1];
      if ((int)result > a2) {
        return result;
      }
      v4 += 2;
      if (v3 <= (int)v4) {
        goto LABEL_11;
      }
    }
    return 0xFFFFFFFFLL;
  }
  LODWORD(v4) = 0;
LABEL_11:
  if (v4 == v3)
  {
LABEL_14:
    exception = __cxa_allocate_exception(4uLL);
    int v7 = 1005;
    goto LABEL_16;
  }
  return 0xFFFFFFFFLL;
}

void XlCrn::appendOperand(XlCrn *this, XlOper *a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
  unint64_t v6 = *((void *)this + 5);
  uint64_t v4 = (char *)this + 40;
  unint64_t v5 = v6;
  int v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *((void *)this + 3);
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      int v14 = 0;
      uint64_t v16 = 0;
    }
    int v17 = &v14[v10 & 0x7FFFFFFF8];
    int v18 = &v14[8 * v16];
    *(void *)int v17 = a2;
    uint64_t v8 = v17 + 8;
    uint64_t v20 = (char *)*((void *)this + 3);
    unsigned int v19 = (char *)*((void *)this + 4);
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      unsigned int v19 = (char *)*((void *)this + 3);
    }
    *((void *)this + 3) = v17;
    *((void *)this + 4) = v8;
    *((void *)this + 5) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *int v7 = a2;
    uint64_t v8 = v7 + 1;
  }
  *((void *)this + 4) = v8;
}

uint64_t XlStringTable::getDocumentStringCount(XlStringTable *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((unsigned int *)this + 2);
  }
  else {
    return (*((void *)this + 4) - *((void *)this + 3)) >> 3;
  }
}

uint64_t XlExternSheet::getExternRef(XlExternSheet *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (((unint64_t)(*((void *)this + 4) - v2) >> 3) <= a2
    || (uint64_t result = *(void *)(v2 + 8 * a2)) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  return result;
}

void XlStringTable::~XlStringTable(XlStringTable *this)
{
  *(void *)this = &unk_26EBE3018;
  XlStringTable::clear(this);
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  XlStringTable::~XlStringTable(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlBinaryReader::getSheetCount(XlBinaryReader *this)
{
  uint64_t v1 = *((void *)this + 20);
  if (!v1)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 8008;
  }
  return (*(void *)(v1 + 16) - *(void *)(v1 + 8)) >> 3;
}

void sub_238B7F6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t XlSheetInfoTable::getSheetType(XlSheetInfoTable *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (((unint64_t)(*((void *)this + 2) - v2) >> 3) <= a2) {
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  return *(unsigned int *)(*(void *)(v2 + 8 * a2) + 28);
}

void sub_238B7F81C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7F974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7FA2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7FBB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t XlSheetInfoTable::getSheetHiddenState(XlSheetInfoTable *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (((unint64_t)(*((void *)this + 2) - v2) >> 3) <= a2) {
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  return *(unsigned int *)(*(void *)(v2 + 8 * a2) + 32);
}

void sub_238B7FE20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7FEF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B7FF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t XlBinaryReader::getRootStorage(XlBinaryReader *this)
{
  return *((void *)this + 3);
}

unsigned __int8 *virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, OcSummary *a2)
{
  return OcBinaryReader::readSummary((OcBinaryReader *)((char *)this + *(void *)(*(void *)this - 48)), a2);
}

void XlPivotInfoTable::~XlPivotInfoTable(XlPivotInfoTable *this)
{
  *(void *)this = &unk_26EBE2E20;
  XlConditionalFormatTable::clear(this);
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  XlPivotInfoTable::~XlPivotInfoTable(this);
  JUMPOUT(0x23EC997B0);
}

void sub_238B80044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B80104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B80220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B80424(void *a1)
{
  objc_begin_catch(a1);
  objc_exception_rethrow();
}

void sub_238B80524()
{
}

void sub_238B805B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B806F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_DWORD *XlBinaryReader::setSheet(_DWORD *this, unsigned int a2)
{
  if (this[110] != a2)
  {
    int v3 = this;
    (*(void (**)(_DWORD *))(*(void *)this + 664))(this);
    uint64_t v4 = *((void *)v3 + 164);
    uint64_t SheetLocation = XlSheetInfoTable::getSheetLocation(*((XlSheetInfoTable **)v3 + 20), a2);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 16))(v4, SheetLocation, 0);
    XlHeader::XlHeader(&v11);
    XlParserVisitor::getHeader(*((XlParserVisitor **)v3 + 167), &v11, *((unsigned char *)v3 + 1320));
    unint64_t v6 = (XlBof *)operator new(0x28uLL);
    XlBof::XlBof(v6, &v11);
    (*(void (**)(void, XlBof *))(**((void **)v3 + 167) + 192))(*((void *)v3 + 167), v6);
    v3[288] = *((_DWORD *)v6 + 7);
    int v7 = XlBof::verifyExcelVersion(v6);
    *((unsigned char *)v3 + 444) = v7;
    if (v7 == 9)
    {
      Sheetint Type = XlSheetInfoTable::getSheetType(*((XlSheetInfoTable **)v3 + 20), a2);
      v3[112] = SheetType;
      if (SheetType < 2) {
        goto LABEL_6;
      }
      if (SheetType == 2)
      {
        (*(void (**)(_DWORD *))(*(void *)v3 + 672))(v3);
        goto LABEL_8;
      }
      if (SheetType == 6)
      {
LABEL_6:
        XlBinaryReader::scanWorksheet((XlBinaryReader *)v3);
LABEL_8:
        v3[110] = a2;
        return (_DWORD *)(*(uint64_t (**)(XlBof *))(*(void *)v6 + 8))(v6);
      }
      exception = __cxa_allocate_exception(4uLL);
      int v10 = 1009;
    }
    else
    {
      exception = __cxa_allocate_exception(4uLL);
      int v10 = 8003;
    }
    _DWORD *exception = v10;
  }
  return this;
}

void sub_238B80914(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void XlChartBinaryReader::resetWorksheet(XlChartBinaryReader *this)
{
  *((void *)this + 170) = *((void *)this + 169);
  XlSubstreamProperties::setDefault((XlChartBinaryReader *)((char *)this + 1376));
  XlBinaryReader::resetWorksheet(this);
}

void XlBinaryReader::resetWorksheet(XlBinaryReader *this)
{
  uint64_t v2 = *((void *)this + 46);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 46) = 0;
  uint64_t v3 = *((void *)this + 47);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 47) = 0;
  uint64_t v4 = *((void *)this + 48);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 48) = 0;
  XlWorksheetProperties::setDefault((XlBinaryReader *)((char *)this + 456));
  XlWorksheetProtection::setDefault((XlBinaryReader *)((char *)this + 600));
  XlSortInfo::setDefault((XlBinaryReader *)((char *)this + 664));
  XlCalculationProperties::setDefault((uint64_t)this + 632);
  XlSubstreamProperties::setDefault((XlBinaryReader *)((char *)this + 1136));
  *(void *)&long long v5 = -1;
  *((void *)&v5 + 1) = -1;
  *(_OWORD *)((char *)this + 220) = v5;
  *((_DWORD *)this + 110) = -1;
  *((_DWORD *)this + 53) = -1;
  *((void *)this + 49) = -1;
  *((_DWORD *)this + 101) = -1;
  *((_WORD *)this + 200) = -1;
  *(_OWORD *)((char *)this + 236) = v5;
  *(_OWORD *)((char *)this + 252) = v5;
  *(_OWORD *)((char *)this + 268) = v5;
  *((_DWORD *)this + 71) = -1;
  *((_WORD *)this + 144) = 0;
  *((unsigned char *)this + 290) = 0;
  if (((*((void *)this + 53) - *((void *)this + 52)) & 0x7FFFFFFF8) != 0) {
    XlBinaryReader::clearWaitingCells(this);
  }
  uint64_t v6 = *((void *)this + 37);
  if (((*((void *)this + 38) - v6) & 0x3FFFFFFFCLL) != 0) {
    *((void *)this + 38) = v6;
  }
}

uint64_t XlSheetInfoTable::getSheetLocation(XlSheetInfoTable *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (((unint64_t)(*((void *)this + 2) - v2) >> 3) <= a2) {
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  return *(unsigned int *)(*(void *)(v2 + 8 * a2) + 24);
}

XlBinaryReader *XlBinaryReader::scanWorksheet(XlBinaryReader *this)
{
  XlHeader::XlHeader(&v40);
  v40.unsigned int var2 = *((unsigned char *)this + 444);
  v40.signed __int16 var1 = 2057;
  uint64_t result = (XlBinaryReader *)XlParserVisitor::getNextUniqueHeader(*((XlParserVisitor **)this + 167), &v40);
  signed __int16 var1 = v40.var1;
  while (var1 != 10)
  {
    if (var1 > 143)
    {
      if (var1 <= 433)
      {
        if (var1 > 228)
        {
          switch(var1)
          {
            case 229:
              int v6 = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
              int v7 = v6;
              uint64_t v9 = (char *)*((void *)this + 38);
              unint64_t v8 = *((void *)this + 39);
              if ((unint64_t)v9 >= v8)
              {
                uint64_t v21 = (char *)*((void *)this + 37);
                int64_t v22 = v9 - v21;
                unint64_t v23 = (unint64_t)(v9 - v21) >> 2;
                unint64_t v24 = (v8 - (unint64_t)v21) >> 2;
                if (2 * (int)v24 <= (v23 + 1)) {
                  unsigned int v25 = v23 + 1;
                }
                else {
                  unsigned int v25 = 2 * v24;
                }
                if (v24 >= 0x7FFFFFFF) {
                  unint64_t v26 = 0xFFFFFFFFLL;
                }
                else {
                  unint64_t v26 = v25;
                }
                if (v26)
                {
                  unsigned int v27 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)this + 312, v26);
                  uint64_t v29 = v28;
                  uint64_t v21 = (char *)*((void *)this + 37);
                  uint64_t v9 = (char *)*((void *)this + 38);
                }
                else
                {
                  unsigned int v27 = 0;
                  uint64_t v29 = 0;
                }
                unsigned int v30 = &v27[v22 & 0x3FFFFFFFCLL];
                *(_DWORD *)unsigned int v30 = v7;
                int v10 = v30 + 4;
                while (v9 != v21)
                {
                  int v31 = *((_DWORD *)v9 - 1);
                  v9 -= 4;
                  *((_DWORD *)v30 - 1) = v31;
                  v30 -= 4;
                }
                *((void *)this + 37) = v30;
                *((void *)this + 38) = v10;
                *((void *)this + 39) = &v27[4 * v29];
                if (v21) {
                  operator delete(v21);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v9 = v6;
                int v10 = v9 + 4;
              }
              *((void *)this + 38) = v10;
              goto LABEL_147;
            case 230:
            case 231:
            case 232:
            case 234:
            case 235:
            case 238:
              goto LABEL_93;
            case 233:
              *((_DWORD *)this + 59) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
              goto LABEL_147;
            case 236:
              if ((*((_DWORD *)this + 324) & 0x80000000) != 0) {
                *((_DWORD *)this + 324) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
              }
              goto LABEL_147;
            case 237:
              if ((*((_DWORD *)this + 69) & 0x80000000) != 0) {
                *((_DWORD *)this + 69) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
              }
              goto LABEL_147;
            case 239:
              *((_DWORD *)this + 67) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
              goto LABEL_147;
            default:
              if (var1 == 426)
              {
                uint64_t result = (XlBinaryReader *)(*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
                *((_DWORD *)this + 66) = result;
                signed __int16 v15 = v40.var1;
                do
                {
                  signed __int16 var1 = v15;
                  if (v15 != 426) {
                    break;
                  }
                  do
                    XlParserVisitor::getNextUniqueHeader(*((XlParserVisitor **)this + 167), &v40);
                  while (v40.var1 != 427);
                  uint64_t result = (XlBinaryReader *)XlParserVisitor::getNextUniqueHeader(*((XlParserVisitor **)this + 167), &v40);
                  signed __int16 var1 = v40.var1;
                  signed __int16 v15 = 426;
                }
                while (v40.var1 == 426);
                continue;
              }
              if (var1 != 432) {
                goto LABEL_93;
              }
              if ((*((_DWORD *)this + 65) & 0x80000000) != 0) {
                *((_DWORD *)this + 65) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
              }
              break;
          }
          goto LABEL_147;
        }
        if (var1 > 173)
        {
          switch(var1)
          {
            case 174:
              if ((*((_DWORD *)this + 63) & 0x80000000) != 0) {
                *((_DWORD *)this + 63) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
              }
              break;
            case 176:
              if ((*((_DWORD *)this + 58) & 0x80000000) != 0) {
                *((_DWORD *)this + 58) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
              }
              break;
            case 221:
              XlScenProtect::XlScenProtect((XlScenProtect *)v32, &v40);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 1000))(*((void *)this + 167), v32);
              *((unsigned char *)this + 609) = v33;
              break;
            default:
              goto LABEL_93;
          }
        }
        else
        {
          switch(var1)
          {
            case 153:
              XlStandardWidth::XlStandardWidth((XlStandardWidth *)v32, &v40);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 160))(*((void *)this + 167), v32);
              *((_DWORD *)this + 117) = (unsigned __int16)v33;
              break;
            case 154:
            case 156:
            case 158:
            case 159:
            case 160:
              goto LABEL_93;
            case 155:
            case 157:
              if ((*((_DWORD *)this + 68) & 0x80000000) != 0) {
                *((_DWORD *)this + 68) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
              }
              break;
            case 161:
              unsigned int v12 = (char *)operator new(0x40uLL);
              XlSetup::XlSetup((XlSetup *)v12, &v40);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(void, char *))(**((void **)this + 167) + 1016))(*((void *)this + 167), v12);
              *(void *)((char *)this + 1218) = *((void *)v12 + 2);
              *((_WORD *)this + 613) = *((_WORD *)v12 + 12);
              *((unsigned char *)this + 1228) = v12[26];
              *((_DWORD *)this + 308) = *((_DWORD *)v12 + 7);
              *((_DWORD *)this + 309) = *((_DWORD *)v12 + 8);
              *((_WORD *)this + 620) = *((_WORD *)v12 + 18);
              *(_DWORD *)((char *)this + 1242) = *(_DWORD *)(v12 + 38);
              *((_OWORD *)this + 78) = *((_OWORD *)v12 + 3);
              *((_WORD *)this + 623) = *((_WORD *)v12 + 21);
              goto LABEL_146;
            default:
              if (var1 != 144) {
                goto LABEL_93;
              }
              XlSort::XlSort((XlSort *)v32, &v40);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 1024))(*((void *)this + 167), v32);
              *((_DWORD *)this + 168) = v33;
              *((unsigned char *)this + 676) = BYTE4(v33);
              *((unsigned char *)this + 678) = BYTE5(v33);
              *((unsigned char *)this + 677) = BYTE6(v33);
              if (v37) {
                OcText::operator=((uint64_t)this + 680, v37 + 8);
              }
              if (v38) {
                OcText::operator=((uint64_t)this + 728, v38 + 8);
              }
              if (v39) {
                OcText::operator=((uint64_t)this + 776, v39 + 8);
              }
              XlSort::~XlSort((XlSort *)v32);
              break;
          }
        }
      }
      else if (var1 > 2056)
      {
        if (var1 <= 2161)
        {
          switch(var1)
          {
            case 2146:
              XlSheetTab::XlSheetTab((XlSheetTab *)v32, &v40);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 1440))(*((void *)this + 167), v32);
              *((_WORD *)this + 250) = WORD2(v33);
              goto LABEL_147;
            case 2147:
            case 2148:
            case 2149:
              goto LABEL_93;
            case 2150:
              if ((*((_DWORD *)this + 70) & 0x80000000) != 0) {
                *((_DWORD *)this + 70) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
              }
              goto LABEL_147;
            case 2151:
              XlSheetProtection::XlSheetProtection((XlSheetProtection *)v32, &v40);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 1448))(*((void *)this + 167), v32);
              *(void *)((char *)this + 611) = v33;
              *(_DWORD *)((char *)this + 619) = v34;
              *((unsigned char *)this + 623) = v35;
              *((_WORD *)this + 312) = v36;
              goto LABEL_147;
            case 2152:
              if ((*((_DWORD *)this + 62) & 0x80000000) != 0) {
                *((_DWORD *)this + 62) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
              }
              goto LABEL_147;
            default:
              if (var1 != 2057) {
                goto LABEL_93;
              }
              uint64_t v13 = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              unsigned int v12 = (char *)operator new(0x28uLL);
              XlBof::XlBof((XlBof *)v12, &v40);
              (*(void (**)(void, char *))(**((void **)this + 167) + 192))(*((void *)this + 167), v12);
              if (*((_DWORD *)v12 + 7) == 32
                && ((*(uint64_t (**)(XlBinaryReader *, uint64_t))(*(void *)this + 656))(this, v13) & 1) != 0)
              {
                goto LABEL_146;
              }
              while (v40.var1 != 10)
                XlParserVisitor::getNextUniqueHeader(*((XlParserVisitor **)this + 167), &v40);
              if (v12) {
                goto LABEL_146;
              }
              goto LABEL_147;
          }
        }
        if (var1 != 2162)
        {
          if (var1 == 2241 || var1 == 2242)
          {
            *((unsigned char *)this + 288) = 1;
            goto LABEL_147;
          }
          goto LABEL_93;
        }
        if ((*((_DWORD *)this + 71) & 0x80000000) != 0) {
          *((_DWORD *)this + 71) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
        }
      }
      else if (var1 > 519)
      {
        if (var1 > 548)
        {
          if (var1 == 549)
          {
LABEL_59:
            XlDefaultRowHeight::XlDefaultRowHeight((XlDefaultRowHeight *)v32, &v40);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 56))(*((void *)this + 167), v32);
            *((_WORD *)this + 236) = WORD2(v33);
            *((_DWORD *)this + 121) = v33;
            goto LABEL_147;
          }
          if (var1 != 574) {
            goto LABEL_93;
          }
LABEL_57:
          if ((*((_DWORD *)this + 56) & 0x80000000) != 0) {
            *((_DWORD *)this + 56) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
          }
        }
        else
        {
          if (var1 != 520)
          {
            if (var1 == 523)
            {
              XlHeader v11 = (XlIndex *)operator new(0x28uLL);
              XlIndex::XlIndex(v11, &v40);
              *((void *)this + 46) = v11;
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(void, void))(**((void **)this + 167) + 304))(*((void *)this + 167), *((void *)this + 46));
              *((_DWORD *)this + 289) = *(_DWORD *)(*((void *)this + 46) + 32);
              goto LABEL_147;
            }
LABEL_93:
            if (XlBinaryReader::isCell(result, &v40))
            {
              if ((*((_DWORD *)this + 98) & 0x80000000) != 0) {
                *((_DWORD *)this + 98) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
              }
            }
            goto LABEL_147;
          }
          if ((*((_DWORD *)this + 101) & 0x80000000) != 0) {
            *((_DWORD *)this + 101) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
          }
        }
      }
      else
      {
        if (var1 > 441)
        {
          if (var1 == 442)
          {
            unsigned int v12 = (char *)operator new(0x18uLL);
            XlCodeName::XlCodeName((XlCodeName *)v12, &v40);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(void, char *))(**((void **)this + 167) + 1472))(*((void *)this + 167), v12);
            uint64_t v14 = *((void *)v12 + 2);
            if (v14) {
              OcText::operator=((uint64_t)this + 552, v14 + 8);
            }
            goto LABEL_146;
          }
          if (var1 == 512)
          {
            unsigned int v12 = (char *)operator new(0x20uLL);
            XlDimensions::XlDimensions((XlDimensions *)v12, &v40);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(void, char *))(**((void **)this + 167) + 248))(*((void *)this + 167), v12);
            XlCellTableInfo::setDimensions((uint64_t)this + 1272, *((_DWORD *)v12 + 4), *((_DWORD *)v12 + 5), *((unsigned __int16 *)v12 + 12), *((unsigned __int16 *)v12 + 13));
LABEL_146:
            (*(void (**)(char *))(*(void *)v12 + 8))(v12);
            goto LABEL_147;
          }
          goto LABEL_93;
        }
        if (var1 == 434)
        {
          if ((*((_DWORD *)this + 60) & 0x80000000) != 0) {
            *((_DWORD *)this + 60) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
          }
        }
        else
        {
          if (var1 != 440) {
            goto LABEL_93;
          }
          if ((*((_DWORD *)this + 64) & 0x80000000) != 0) {
            *((_DWORD *)this + 64) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
          }
        }
      }
    }
    else if (var1 > 84)
    {
      if (var1 <= 98)
      {
        switch(var1)
        {
          case 'U':
            XlDefColWidth::XlDefColWidth((XlDefColWidth *)v32, &v40);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 240))(*((void *)this + 167), v32);
            *((_WORD *)this + 232) = v33;
            goto LABEL_147;
          case '_':
            XlSaveRecalc::XlSaveRecalc((XlSaveRecalc *)v32, &v40);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 976))(*((void *)this + 167), v32);
            *((unsigned char *)this + 660) = v33;
            goto LABEL_147;
          case 'a':
            *((unsigned char *)this + 489) = 1;
            goto LABEL_147;
        }
        goto LABEL_93;
      }
      switch(var1)
      {
        case 125:
          *((_DWORD *)this + 55) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
          break;
        case 126:
        case 127:
          goto LABEL_93;
        case 128:
          unsigned int v12 = (char *)operator new(0x18uLL);
          XlGuts::XlGuts((XlGuts *)v12, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(void, char *))(**((void **)this + 167) + 712))(*((void *)this + 167), v12);
          *(void *)((char *)this + 476) = *((void *)v12 + 2);
          goto LABEL_146;
        case 129:
          unsigned int v12 = (char *)operator new(0x20uLL);
          XlWsBool::XlWsBool((XlWsBool *)v12, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(void, char *))(**((void **)this + 167) + 1392))(*((void *)this + 167), v12);
          *((unsigned char *)this + 488) = v12[16];
          *(void *)((char *)this + 490) = *(void *)(v12 + 17);
          goto LABEL_146;
        case 130:
          XlGridSet::XlGridSet((XlGridSet *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 704))(*((void *)this + 167), v32);
          *((unsigned char *)this + 474) = v33;
          break;
        case 131:
          XlHCenter::XlHCenter((XlHCenter *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 720))(*((void *)this + 167), v32);
          *((unsigned char *)this + 1216) = v33;
          break;
        case 132:
          XlVCenter::XlVCenter((XlVCenter *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 1352))(*((void *)this + 167), v32);
          *((unsigned char *)this + 1217) = v33;
          break;
        default:
          if (var1 != 99) {
            goto LABEL_93;
          }
          XlObjProtect::XlObjProtect((XlObjProtect *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 832))(*((void *)this + 167), v32);
          *((unsigned char *)this + 610) = v33;
          break;
      }
    }
    else
    {
      switch(var1)
      {
        case 12:
          XlCalcCount::XlCalcCount((XlCalcCount *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 496))(*((void *)this + 167), v32);
          *((_WORD *)this + 326) = v33;
          break;
        case 13:
          XlCalcMode::XlCalcMode((XlCalcMode *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 504))(*((void *)this + 167), v32);
          *((_DWORD *)this + 162) = v33;
          break;
        case 14:
        case 22:
        case 23:
        case 24:
        case 25:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
          goto LABEL_93;
        case 15:
          XlRefMode::XlRefMode((XlRefMode *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 952))(*((void *)this + 167), v32);
          *((_DWORD *)this + 164) = v33;
          break;
        case 16:
          XlDelta::XlDelta((XlDelta *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 584))(*((void *)this + 167), v32);
          *((void *)this + 80) = v33;
          break;
        case 17:
          XlIteration::XlIteration((XlIteration *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 776))(*((void *)this + 167), v32);
          *((unsigned char *)this + 654) = v33;
          break;
        case 18:
          XlProtect::XlProtect((XlProtect *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 920))(*((void *)this + 167), v32);
          *((unsigned char *)this + 608) = v33;
          break;
        case 19:
          XlPassword::XlPassword((XlPassword *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 856))(*((void *)this + 167), v32);
          *((_WORD *)this + 313) = v33;
          break;
        case 20:
          XlHdr::XlHdr((XlHdr *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 728))(*((void *)this + 167), v32);
          if (v33) {
            XlPageProperties::setHeaderString((XlBinaryReader *)((char *)this + 1160), (OcText *)(v33 + 8));
          }
          XlHdr::~XlHdr((XlHdr *)v32);
          break;
        case 21:
          unsigned int v12 = (char *)operator new(0x18uLL);
          XlFooter::XlFooter((XlFooter *)v12, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(void, char *))(**((void **)this + 167) + 688))(*((void *)this + 167), v12);
          uint64_t v16 = *((void *)v12 + 2);
          if (v16) {
            XlPageProperties::setFooterString((XlBinaryReader *)((char *)this + 1160), (OcText *)(v16 + 8));
          }
          goto LABEL_146;
        case 26:
          XlVerticalPageBreaks::XlVerticalPageBreaks((XlVerticalPageBreaks *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 1360))(*((void *)this + 167), v32);
          if (((int)v37 - v34) << 13 >= 0x10000)
          {
            unsigned int v17 = 0;
            do
            {
              ExternRef = (XlPhoneticRun *)XlExternSheet::getExternRef((XlExternSheet *)v32, v17);
              XlPhoneticInfo::appendRun((XlBinaryReader *)((char *)this + 456), ExternRef);
              ++v17;
            }
            while ((__int16)(((int)v37 - v34) >> 3) > (int)(unsigned __int16)v17);
          }
          LOBYTE(v33) = 0;
          XlVerticalPageBreaks::~XlVerticalPageBreaks((XlVerticalPageBreaks *)v32);
          break;
        case 27:
          XlHorizPageBreaks::XlHorizPageBreaks((XlHorizPageBreaks *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 752))(*((void *)this + 167), v32);
          if (((v37 - v34) & 0x7FFF8) != 0)
          {
            unsigned int v19 = 0;
            do
            {
              uint64_t v20 = (XlLink *)XlExternSheet::getExternRef((XlExternSheet *)v32, v19);
              XlLinkTable::appendLink((XlBinaryReader *)((char *)this + 456), v20);
              ++v19;
            }
            while (v19 < (unsigned __int16)((v37 - v34) >> 3));
          }
          LOBYTE(v33) = 0;
          XlHorizPageBreaks::~XlHorizPageBreaks((XlHorizPageBreaks *)v32);
          break;
        case 28:
          *((_DWORD *)this + 57) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
          break;
        case 37:
          goto LABEL_59;
        case 38:
          XlLeftMargin::XlLeftMargin((XlLeftMargin *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 784))(*((void *)this + 167), v32);
          *((void *)this + 148) = v33;
          break;
        case 39:
          XlRightMargin::XlRightMargin((XlRightMargin *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 968))(*((void *)this + 167), v32);
          *((void *)this + 149) = v33;
          break;
        case 40:
          XlTopMargin::XlTopMargin((XlTopMargin *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 1304))(*((void *)this + 167), v32);
          *((void *)this + 147) = v33;
          break;
        case 41:
          XlBottomMargin::XlBottomMargin((XlBottomMargin *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 488))(*((void *)this + 167), v32);
          *((void *)this + 146) = v33;
          break;
        case 42:
          XlPrintHeaders::XlPrintHeaders((XlPrintHeaders *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 888))(*((void *)this + 167), v32);
          *((unsigned char *)this + 498) = v33;
          break;
        case 43:
          XlPrintGridlines::XlPrintGridlines((XlPrintGridlines *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 880))(*((void *)this + 167), v32);
          *((unsigned char *)this + 499) = v33;
          break;
        case 51:
          unsigned int v12 = (char *)operator new(0x18uLL);
          XlPrintSize::XlPrintSize((XlPrintSize *)v12, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(void, char *))(**((void **)this + 167) + 896))(*((void *)this + 167), v12);
          *((_WORD *)this + 632) = *((_WORD *)v12 + 8);
          goto LABEL_146;
        case 62:
          goto LABEL_57;
        default:
          if (var1 != 80) {
            goto LABEL_93;
          }
          if ((*((_DWORD *)this + 61) & 0x80000000) != 0) {
            *((_DWORD *)this + 61) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
          }
          break;
      }
    }
LABEL_147:
    uint64_t result = (XlBinaryReader *)XlParserVisitor::getNextUniqueHeader(*((XlParserVisitor **)this + 167), &v40);
    signed __int16 var1 = v40.var1;
  }
  int v4 = *((_DWORD *)this + 98);
  if (v4 < 1) {
    return result;
  }
  unsigned int v5 = *((_DWORD *)this + 101);
  if ((v5 & 0x80000000) != 0)
  {
    *((_DWORD *)this + 101) = v4 + 1;
    *((unsigned char *)this + 290) = 1;
    goto LABEL_166;
  }
  if (v4 < v5) {
LABEL_166:
  }
    *((unsigned char *)this + 289) = 1;
  return result;
}

void sub_238B82250(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void XlIndex::XlIndex(XlIndex *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDFE28;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlIndex *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4, 1);
  uint64_t v4 = **((void **)this + 2);
  if (*((unsigned __int8 *)a2 + 14) < 9u)
  {
    *((_DWORD *)a2 + 6) = (*(uint64_t (**)(void))(v4 + 80))();
    int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
    int v6 = -12;
  }
  else
  {
    *((_DWORD *)a2 + 6) = (*(uint64_t (**)(void))(v4 + 96))();
    int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
    int v6 = -16;
  }
  unsigned int v7 = *((_DWORD *)a2 + 2) + v6;
  *((_DWORD *)a2 + 7) = v5;
  unsigned int v8 = v7 >> 2;
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4, 1);
  if (*((void *)this + 7)) {
    ChLogFunction("data isn't NULL", 2, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/Parser/XlParserVisitor.cpp", 847);
  }
  if (v7 > 3)
  {
    int v10 = operator new[](v7 & 0xFFFFFFFC);
    unint64_t v11 = 0;
    *((void *)this + 7) = v10;
    if (v8 <= 1) {
      unsigned int v12 = 1;
    }
    else {
      unsigned int v12 = v8;
    }
    uint64_t v13 = 4 * v12;
    do
    {
      unsigned int v14 = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
      uint64_t v9 = (unsigned int *)*((void *)this + 7);
      v9[v11 / 4] = v14;
      v11 += 4;
    }
    while (v13 != v11);
  }
  else
  {
    uint64_t v9 = (unsigned int *)*((void *)this + 7);
  }
  XlIndex::setDbCellOffsets(a2, v9, v8);
  *((void *)this + 7) = 0;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlIndex::setDbCellOffsets(XlIndex *this, unsigned int *a2, int a3)
{
  uint64_t result = *((void *)this + 2);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C8052888210);
  }
  *((void *)this + 2) = a2;
  *((_DWORD *)this + 8) = a3;
  return result;
}

void XlCalcMode::XlCalcMode(XlCalcMode *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDEE28;
  *(_DWORD *)(v2 + 16) = 0;
}

void XlCalcCount::XlCalcCount(XlCalcCount *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDEDE8;
  *(_WORD *)(v2 + 16) = 100;
}

void XlRefMode::XlRefMode(XlRefMode *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE09C0;
  *(_DWORD *)(v2 + 16) = 0;
}

void XlIteration::XlIteration(XlIteration *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDFEE8;
  *(unsigned char *)(v2 + 16) = 0;
}

void XlDelta::XlDelta(XlDelta *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *uint64_t v2 = &unk_26EBDF2A8;
  v2[2] = 0x3F50624DD2F1A9FCLL;
}

double SsrwOOStgStream::readFloat64(SsrwOOStgStream *this)
{
  double v5 = 0.0;
  int v1 = readFloat64(*((void *)this + 24), &v5);
  if (v1)
  {
    int v3 = v1;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v3;
  }
  return v5;
}

uint64_t readFloat64(uint64_t a1, double *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  unsigned int v5 = 8;
  uint64_t v2 = 6;
  if (a1 && a2)
  {
    uint64_t v2 = streamRead(a1, (uint64_t)v6, &v5);
    *a2 = CsLeReadFloat64((uint64_t)v6);
  }
  return v2;
}

double CsLeReadFloat64(uint64_t a1)
{
  return *(double *)a1;
}

void XlSaveRecalc::XlSaveRecalc(XlSaveRecalc *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE11C0;
  *(unsigned char *)(v2 + 16) = 1;
}

void XlPrintHeaders::XlPrintHeaders(XlPrintHeaders *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0718;
  *(unsigned char *)(v2 + 16) = 0;
}

void XlPrintGridlines::XlPrintGridlines(XlPrintGridlines *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE06D8;
  *(unsigned char *)(v2 + 16) = 0;
}

void XlGridSet::XlGridSet(XlGridSet *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDFBA8;
  *(unsigned char *)(v2 + 16) = 0;
}

void XlGuts::XlGuts(XlGuts *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *uint64_t v2 = &unk_26EBDFBE8;
  v2[2] = 0;
}

uint64_t XlParserVisitor::visit(uint64_t a1, _WORD *a2)
{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  a2[8] = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  a2[9] = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  a2[10] = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  a2[11] = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, (uint64_t)a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  a2[8] = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  a2[9] = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  a2[10] = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, (uint64_t)a2);
}

{
  uint64_t vars8;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  a2[8] = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  a2[9] = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  a2[10] = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  return XlParserVisitor::endRead(a1, (uint64_t)a2);
}

void XlGuts::~XlGuts(XlGuts *this)
{
}

void XlDefaultRowHeight::XlDefaultRowHeight(XlDefaultRowHeight *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDF1E8;
  *(_DWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 20) = 255;
}

void XlWsBool::XlWsBool(XlWsBool *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE2178;
  *(void *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 24) = 0;
}

void XlWsBool::~XlWsBool(XlWsBool *this)
{
}

void XlHorizPageBreaks::XlHorizPageBreaks(XlHorizPageBreaks *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDFDA8;
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 24) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlHorizPageBreaks *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  if (v4)
  {
    unsigned int v5 = v4;
    for (unsigned int i = 0; i < v5; ++i)
    {
      uint64_t v7 = (XlBrk *)operator new(0x10uLL);
      XlBrk::XlBrk(v7);
      (*(void (**)(XlParserVisitor *, XlBrk *))(*(void *)this + 1576))(this, v7);
      XlCrn::appendOperand(a2, v7);
    }
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238B834A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlBrk::XlBrk(XlBrk *this)
{
  *(void *)this = &unk_26EBDEDA8;
  *((_DWORD *)this + 2) = -1;
  *((_WORD *)this + 6) = -1;
  *((unsigned char *)this + 14) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlBrk *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 4) = result;
  if (!*((unsigned char *)a2 + 14))
  {
    *((_WORD *)a2 + 5) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    *((_WORD *)a2 + 6) = result;
  }
  return result;
}

void XlLinkTable::appendLink(XlLinkTable *this, XlLink *a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
  unint64_t v6 = *((void *)this + 8);
  unsigned int v4 = (char *)this + 64;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *((void *)this + 6);
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      unsigned int v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      unsigned int v14 = 0;
      uint64_t v16 = 0;
    }
    unsigned int v17 = &v14[v10 & 0x7FFFFFFF8];
    int v18 = &v14[8 * v16];
    *(void *)unsigned int v17 = a2;
    unsigned int v8 = v17 + 8;
    uint64_t v20 = (char *)*((void *)this + 6);
    unsigned int v19 = (char *)*((void *)this + 7);
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      unsigned int v19 = (char *)*((void *)this + 6);
    }
    *((void *)this + 6) = v17;
    *((void *)this + 7) = v8;
    *((void *)this + 8) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *uint64_t v7 = a2;
    unsigned int v8 = v7 + 1;
  }
  *((void *)this + 7) = v8;
}

void XlHorizPageBreaks::~XlHorizPageBreaks(XlHorizPageBreaks *this)
{
  *(void *)this = &unk_26EBDFDA8;
  XlHorizPageBreaks::clearPageBreaks((uint64_t)this);
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  XlHorizPageBreaks::~XlHorizPageBreaks(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlHorizPageBreaks::clearPageBreaks(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 16))
  {
    uint64_t v2 = *(void *)(this + 24);
    uint64_t v3 = *(void *)(this + 32);
    if (((v3 - v2) & 0x7FFFFFFF8) != 0)
    {
      unint64_t v4 = 0;
      do
      {
        this = *(void *)(v2 + 8 * v4);
        if (this)
        {
          this = (*(uint64_t (**)(uint64_t))(*(void *)this + 16))(this);
          uint64_t v2 = *(void *)(v1 + 24);
          uint64_t v3 = *(void *)(v1 + 32);
        }
        ++v4;
      }
      while (v4 < ((unint64_t)(v3 - v2) >> 3));
    }
  }
  else
  {
    uint64_t v2 = *(void *)(this + 24);
  }
  *(void *)(v1 + 32) = v2;
  return this;
}

void XlHdr::XlHdr(XlHdr *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *uint64_t v2 = &unk_26EBDFC68;
  v2[2] = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlHdr *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v5 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  if (*((_DWORD *)a2 + 2))
  {
    int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    if (v6)
    {
      unsigned __int16 v7 = v6;
      char v8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
      uint64_t v9 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v9);
      *((void *)this + 4) = v9;
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v8, v5 + v4, v9);
      XlBoundSheet::setName(a2, *((XlString **)this + 4));
      *((void *)this + 4) = 0;
    }
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238B83930(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlHdr::~XlHdr(XlHdr *this)
{
  *(void *)this = &unk_26EBDFC68;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBDFC68;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  JUMPOUT(0x23EC997B0);
}

void XlFooter::XlFooter(XlFooter *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *uint64_t v2 = &unk_26EBDFA68;
  v2[2] = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlFooter *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v5 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  if (*((_DWORD *)a2 + 2))
  {
    int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    if (v6)
    {
      unsigned __int16 v7 = v6;
      char v8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
      uint64_t v9 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v9);
      *((void *)this + 4) = v9;
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v8, v5 + v4, v9);
      XlBoundSheet::setName(a2, *((XlString **)this + 4));
      *((void *)this + 4) = 0;
    }
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238B83B4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlFooter::~XlFooter(XlFooter *this)
{
  *(void *)this = &unk_26EBDFA68;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBDFA68;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
}

void XlHCenter::XlHCenter(XlHCenter *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDFC28;
  *(unsigned char *)(v2 + 16) = 0;
}

void XlVCenter::XlVCenter(XlVCenter *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1FB8;
  *(unsigned char *)(v2 + 16) = 0;
}

void XlSetup::XlSetup(XlSetup *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1340;
  *(void *)(v2 + 16) = 0x10001013B0000;
  *(_WORD *)(v2 + 24) = 1;
  *(unsigned char *)(v2 + 26) = 0;
  *(_DWORD *)(v2 + 28) = 0;
  *(unsigned char *)(v2 + 32) = 1;
  *(void *)(v2 + 33) = 0;
  *(_DWORD *)(v2 + 40) = 0;
  __asm { FMOV            V0.2D, #0.5 }
  *(_OWORD *)(v2 + 48) = _Q0;
}

void XlSetup::~XlSetup(XlSetup *this)
{
}

void XlDefColWidth::XlDefColWidth(XlDefColWidth *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDF228;
  *(_WORD *)(v2 + 16) = 8;
}

void XlDimensions::XlDimensions(XlDimensions *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDF2E8;
  *(void *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 0;
}

uint64_t XlCellTableInfo::setDimensions(uint64_t this, int a2, int a3, unsigned int a4, unsigned int a5)
{
  if (a3 < a2 || a5 < a4)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 12) = a3;
  *(_WORD *)(this + 16) = a4;
  *(_WORD *)(this + 18) = a5;
  return this;
}

void XlDimensions::~XlDimensions(XlDimensions *this)
{
}

XlBaseFormulaTable *XlFormulaProcessor::clearBaseFormulas(XlFormulaProcessor *this)
{
  uint64_t result = (XlBaseFormulaTable *)*((void *)this + 2);
  if (result) {
    return (XlBaseFormulaTable *)XlBaseFormulaTable::clear(result);
  }
  return result;
}

void sub_238B8449C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B84630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  XlWorksheetProperties::~XlWorksheetProperties((XlWorksheetProperties *)&a9);
  _Unwind_Resume(a1);
}

void sub_238B84808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t XlBinaryReader::read(XlBinaryReader *this, XlWorksheetProperties *a2)
{
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0) {
    XlBinaryReader::setSheet(this, 0);
  }
  int v4 = *(uint64_t (**)(XlWorksheetProperties *, char *))(*(void *)a2 + 16);
  return v4(a2, (char *)this + 456);
}

XlWorksheetProperties *XlWorksheetProperties::operator=(XlWorksheetProperties *this, uint64_t a2)
{
  if ((XlWorksheetProperties *)a2 != this)
  {
    *((_WORD *)this + 4) = *(_WORD *)(a2 + 8);
    *((_DWORD *)this + 3) = *(_DWORD *)(a2 + 12);
    *((unsigned char *)this + 18) = *(unsigned char *)(a2 + 18);
    *(void *)((char *)this + 20) = *(void *)(a2 + 20);
    *((_WORD *)this + 8) = *(_WORD *)(a2 + 16);
    *((_WORD *)this + 22) = *(_WORD *)(a2 + 44);
    *(_OWORD *)((char *)this + 28) = *(_OWORD *)(a2 + 28);
    XlWorksheetProperties::clearVertPageBreaks(this);
    XlWorksheetProperties::clearHorizPageBreaks(this);
    if (((*(void *)(a2 + 80) - *(void *)(a2 + 72)) & 0x7FFFFFFF8) != 0)
    {
      unsigned int v4 = 0;
      int v5 = 0;
      while (1)
      {
        int v6 = (XlBrk *)operator new(0x10uLL);
        XlBrk::XlBrk(v6);
        uint64_t v7 = *(void *)(a2 + 72);
        if (v4 >= ((unint64_t)(*(void *)(a2 + 80) - v7) >> 3)) {
          break;
        }
        (**(void (***)(XlBrk *, void))v6)(v6, *(void *)(v7 + 8 * (unsigned __int16)v5));
        XlPhoneticInfo::appendRun(this, v6);
        unsigned int v4 = (unsigned __int16)++v5;
        if (((*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3) <= (unsigned __int16)v5) {
          goto LABEL_6;
        }
      }
LABEL_12:
      std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
    }
LABEL_6:
    if (((*(void *)(a2 + 56) - *(void *)(a2 + 48)) & 0x7FFFFFFF8) != 0)
    {
      unsigned int v8 = 0;
      int v9 = 0;
      do
      {
        unint64_t v10 = (XlBrk *)operator new(0x10uLL);
        XlBrk::XlBrk(v10);
        uint64_t v11 = *(void *)(a2 + 48);
        if (v8 >= ((unint64_t)(*(void *)(a2 + 56) - v11) >> 3)) {
          goto LABEL_12;
        }
        (**(void (***)(XlBrk *, void))v10)(v10, *(void *)(v11 + 8 * (unsigned __int16)v9));
        XlLinkTable::appendLink(this, v10);
        unsigned int v8 = (unsigned __int16)++v9;
      }
      while (((*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3) > (unsigned __int16)v9);
    }
    OcText::clearBuffer((OcText *)this + 2);
    OcText::operator=((uint64_t)this + 96, a2 + 96);
  }
  return this;
}

void sub_238B84A6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlBrk::operator=(uint64_t result, uint64_t a2)
{
  if (a2 != result)
  {
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
    *(_WORD *)(result + 12) = *(_WORD *)(a2 + 12);
    *(unsigned char *)(result + 14) = *(unsigned char *)(a2 + 14);
  }
  return result;
}

void sub_238B84B6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B84C70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B84D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B84EC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlWorksheetProperties::~XlWorksheetProperties(OcText *this)
{
  this->unsigned int var0 = (void **)&unk_26EBE3050;
  XlWorksheetProperties::clearVertPageBreaks(this);
  XlWorksheetProperties::clearHorizPageBreaks(this);
  OcText::~OcText(this + 2);
  var5 = this[1].var5;
  if (var5)
  {
    this[1].var6 = var5;
    operator delete(var5);
  }
  unsigned int var0 = this[1].var0;
  if (var0)
  {
    *(void *)&this[1].signed __int16 var1 = var0;
    operator delete(var0);
  }
}

{
  uint64_t vars8;

  XlWorksheetProperties::~XlWorksheetProperties(this);
  JUMPOUT(0x23EC997B0);
}

void XlBrk::~XlBrk(XlBrk *this)
{
}

void sub_238B8524C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v15 = v14;

  XlPageProperties::~XlPageProperties((XlPageProperties *)&a9);
  _Unwind_Resume(a1);
}

uint64_t XlBinaryReader::read(XlBinaryReader *this, XlPageProperties *a2)
{
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0) {
    XlBinaryReader::setSheet(this, 0);
  }
  unsigned int v4 = *(uint64_t (**)(XlPageProperties *, char *))(*(void *)a2 + 16);
  return v4(a2, (char *)this + 1160);
}

uint64_t XlPageProperties::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    unsigned int v4 = *(OcText **)(a1 + 40);
    if (!v4)
    {
      unsigned int v4 = (OcText *)operator new(0x30uLL);
      OcText::OcText(v4);
      *(void *)(a1 + 40) = v4;
    }
    uint64_t v5 = *(void *)(a2 + 40);
    if (v5) {
      OcText::operator=((uint64_t)v4, v5);
    }
    int v6 = *(OcText **)(a1 + 48);
    if (!v6)
    {
      int v6 = (OcText *)operator new(0x30uLL);
      OcText::OcText(v6);
      *(void *)(a1 + 48) = v6;
    }
    uint64_t v7 = *(void *)(a2 + 48);
    if (v7) {
      OcText::operator=((uint64_t)v6, v7);
    }
    *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
    *(void *)(a1 + 58) = *(void *)(a2 + 58);
    *(_WORD *)(a1 + 66) = *(_WORD *)(a2 + 66);
    *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
    *(_WORD *)(a1 + 82) = *(_WORD *)(a2 + 82);
    *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  }
  return a1;
}

void sub_238B8542C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

OcText *XlPageProperties::getHeaderString(XlPageProperties *this)
{
  uint64_t v1 = (OcText *)*((void *)this + 5);
  if (!v1)
  {
    uint64_t v1 = (OcText *)operator new(0x30uLL);
    OcText::OcText(v1);
    *((void *)this + 5) = v1;
  }
  return v1;
}

void sub_238B8548C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

OcText *XlPageProperties::getFooterString(XlPageProperties *this)
{
  uint64_t v1 = (OcText *)*((void *)this + 6);
  if (!v1)
  {
    uint64_t v1 = (OcText *)operator new(0x30uLL);
    OcText::OcText(v1);
    *((void *)this + 6) = v1;
  }
  return v1;
}

void sub_238B854E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlPageProperties::~XlPageProperties(XlPageProperties *this)
{
  *(void *)this = &unk_26EBE2DA8;
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 5) = 0;
  uint64_t v3 = *((void *)this + 6);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 6) = 0;
}

{
  uint64_t vars8;

  XlPageProperties::~XlPageProperties(this);
  JUMPOUT(0x23EC997B0);
}

void sub_238B85838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B85A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(a10);
  _Unwind_Resume(a1);
}

void *XlBinaryReader::read(XlBinaryReader *this, XlColumnTable *a2)
{
  uint64_t v3 = (void **)((char *)a2 + 8);
  uint64_t result = CsSimpleHeapVector<XlRecord>::clear((void *)a2 + 1);
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0) {
    uint64_t result = XlBinaryReader::setSheet(this, 0);
  }
  if ((*((_DWORD *)this + 55) & 0x80000000) == 0)
  {
    (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
    XlHeader::XlHeader(&v11);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v11, *((unsigned char *)this + 1320));
    uint64_t v5 = *((void *)this + 163);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    *((void *)this + 163) = 0;
    while (v11.var1 == 125)
    {
      int v6 = (XlColInfo *)operator new(0x20uLL);
      XlColInfo::XlColInfo(v6, &v11);
      *((void *)this + 163) = v6;
      uint64_t v7 = *((void *)this + 167);
      if (v6) {
      else
      }
        unsigned int v8 = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v7 + 216))(v7, v8);
      uint64_t v12 = *((void *)this + 163);
      CsSimpleHeapVector<XlRecord>::pushBack(v3, &v12);
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
      *((void *)this + 163) = 0;
      XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v11, *((unsigned char *)this + 1320));
    }
    uint64_t v9 = *((void *)this + 164);
    RecordDataint Offset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
    return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v9 + 16))(v9, -RecordDataOffset, 1);
  }
  return result;
}

void sub_238B85D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    XlChartBinaryReader::scanChartProperties();
  }
  _Unwind_Resume(exception_object);
}

void XlColInfo::XlColInfo(XlColInfo *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *uint64_t v2 = &unk_26EBDEF28;
  v2[2] = 0;
  *(void *)((char *)v2 + 21) = 0;
}

uint64_t XlColumnTable::getColumnFirst(XlColumnTable *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (((unint64_t)(*((void *)this + 2) - v2) >> 3) <= a2) {
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  int v3 = *(__int16 *)(*(void *)(v2 + 8 * a2) + 16);
  if (v3 >= 255) {
    return 255;
  }
  else {
    return v3;
  }
}

uint64_t XlColumnTable::getColumnLast(XlColumnTable *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (((unint64_t)(*((void *)this + 2) - v2) >> 3) <= a2) {
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  int v3 = *(__int16 *)(*(void *)(v2 + 8 * a2) + 18);
  if (v3 >= 255) {
    return 255;
  }
  else {
    return v3;
  }
}

void sub_238B86024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t XlColumnTable::getWidth(XlColumnTable *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (((unint64_t)(*((void *)this + 2) - v2) >> 3) <= a2) {
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  return *(unsigned __int16 *)(*(void *)(v2 + 8 * a2) + 20);
}

uint64_t XlColumnTable::isHidden(XlColumnTable *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (((unint64_t)(*((void *)this + 2) - v2) >> 3) <= a2) {
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  return *(unsigned __int8 *)(*(void *)(v2 + 8 * a2) + 24);
}

void sub_238B8611C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t XlColumnTable::getCellFormat(XlColumnTable *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (((unint64_t)(*((void *)this + 2) - v2) >> 3) <= a2) {
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  return *(__int16 *)(*(void *)(v2 + 8 * a2) + 22);
}

void sub_238B862F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B86440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B86510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B86588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void XlColInfo::~XlColInfo(XlColInfo *this)
{
}

void sub_238B868B0()
{
}

void sub_238B8697C()
{
  objc_end_catch();
  JUMPOUT(0x238B86950);
}

double XlBinaryReader::read(XlBinaryReader *this, XlSheetInfo *a2)
{
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0) {
    XlBinaryReader::setSheet(this, 0);
  }
  return XlSheetInfo::operator=((uint64_t)a2, (uint64_t)this + 1144);
}

double XlSheetInfo::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    double result = *(double *)(a2 + 8);
    *(double *)(a1 + 8) = result;
  }
  return result;
}

void sub_238B86B64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B86C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B86CC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B86D50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B86F34(void *exc_buf)
{
}

BOOL XlBinaryReader::hasMoreRows(XlBinaryReader *this)
{
  return *((_DWORD *)this + 101) > 0;
}

void XlRowBlock::XlRowBlock(XlRowBlock *this)
{
  *(void *)this = &unk_26EBE2E58;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(void *)((char *)this + 30) = 0;
}

void XlBinaryReader::read(XlBinaryReader *this, XlRowBlock *a2)
{
  XlHeader::XlHeader(&v113);
  XlRowBlock::reset(a2);
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0) {
    XlBinaryReader::setSheet(this, 0);
  }
  int v4 = *((_DWORD *)this + 101);
  if ((v4 & 0x80000000) == 0)
  {
    ++*((_DWORD *)this + 102);
    if (*((_DWORD *)this + 98) < v4 && *((unsigned char *)this + 289))
    {
      (*(void (**)(void, void, void))(**((void **)this + 164) + 16))(*((void *)this + 164), *((unsigned int *)this + 98), 0);
    }
    else
    {
      *((_DWORD *)this + 98) = v4;
      (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
      *((_DWORD *)this + 101) = -1;
    }
    uint64_t Header = (XlBinaryReader *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v113, *((unsigned char *)this + 1320));
    if (*((unsigned char *)this + 289))
    {
      int v6 = -1;
      while (v113.var1 != 10)
      {
        uint64_t Header = (XlBinaryReader *)XlBinaryReader::isCell(Header, &v113);
        if (Header)
        {
          uint64_t v7 = (XlCell *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 3);
          uint64_t v8 = *((void *)this + 164);
          RecordDataint Offset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)v8 + 16))(v8, -RecordDataOffset, 1);
          XlBinaryReader::readCell(this, v7);
          XlHeader v11 = (XlCell **)*((void *)this + 53);
          unint64_t v10 = *((void *)this + 54);
          if ((unint64_t)v11 >= v10)
          {
            uint64_t v12 = *((void *)this + 52);
            unint64_t v13 = (unint64_t)v11 - v12;
            unint64_t v14 = (v10 - v12) >> 3;
            unsigned int v15 = 2 * v14;
            if (2 * (int)v14 <= (v13 >> 3) + 1) {
              unsigned int v15 = (v13 >> 3) + 1;
            }
            if (v14 >= 0x7FFFFFFF) {
              unint64_t v16 = 0xFFFFFFFFLL;
            }
            else {
              unint64_t v16 = v15;
            }
            if (v16)
            {
              unsigned int v17 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 432, v16);
              uint64_t v19 = v18;
            }
            else
            {
              unsigned int v17 = 0;
              uint64_t v19 = 0;
            }
            uint64_t v20 = (XlCell **)&v17[v13 & 0x7FFFFFFF8];
            char *v20 = v7;
            uint64_t v21 = v20 + 1;
            unint64_t v23 = (char *)*((void *)this + 52);
            int64_t v22 = (char *)*((void *)this + 53);
            if (v22 != v23)
            {
              do
              {
                unint64_t v24 = (XlCell *)*((void *)v22 - 1);
                v22 -= 8;
                *--uint64_t v20 = v24;
              }
              while (v22 != v23);
LABEL_28:
              int64_t v22 = (char *)*((void *)this + 52);
            }
            goto LABEL_29;
          }
          while (1)
          {
            void *v11 = v7;
            uint64_t v21 = v11 + 1;
LABEL_32:
            *((void *)this + 53) = v21;
            if (!*((void *)this + 48)) {
              break;
            }
            uint64_t v7 = (XlCell *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 3);
            XlBinaryReader::processCompressed(this, v7);
            XlHeader v11 = (XlCell **)*((void *)this + 53);
            unint64_t v25 = *((void *)this + 54);
            if ((unint64_t)v11 >= v25)
            {
              uint64_t v26 = *((void *)this + 52);
              unint64_t v27 = (unint64_t)v11 - v26;
              unint64_t v28 = (v25 - v26) >> 3;
              unsigned int v29 = 2 * v28;
              if (2 * (int)v28 <= (v27 >> 3) + 1) {
                unsigned int v29 = (v27 >> 3) + 1;
              }
              if (v28 >= 0x7FFFFFFF) {
                unint64_t v30 = 0xFFFFFFFFLL;
              }
              else {
                unint64_t v30 = v29;
              }
              if (v30)
              {
                unsigned int v17 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 432, v30);
                uint64_t v19 = v31;
              }
              else
              {
                unsigned int v17 = 0;
                uint64_t v19 = 0;
              }
              uint64_t v20 = (XlCell **)&v17[v27 & 0x7FFFFFFF8];
              char *v20 = v7;
              uint64_t v21 = v20 + 1;
              uint64_t v32 = (char *)*((void *)this + 52);
              int64_t v22 = (char *)*((void *)this + 53);
              if (v22 != v32)
              {
                do
                {
                  uint64_t v33 = (XlCell *)*((void *)v22 - 1);
                  v22 -= 8;
                  *--uint64_t v20 = v33;
                }
                while (v22 != v32);
                goto LABEL_28;
              }
LABEL_29:
              *((void *)this + 52) = v20;
              *((void *)this + 53) = v21;
              *((void *)this + 54) = &v17[8 * v19];
              if (v22) {
                operator delete(v22);
              }
              goto LABEL_32;
            }
          }
          uint64_t Header = (XlBinaryReader *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v113, *((unsigned char *)this + 1320));
        }
        else
        {
          if (!*((unsigned char *)this + 290)) {
            goto LABEL_48;
          }
          if (v6 == -1) {
            int v6 = XlParserVisitor::currentRecordLocation(*((XlParserVisitor **)this + 167));
          }
          uint64_t Header = (XlBinaryReader *)XlParserVisitor::skipAhead(*((XlParserVisitor **)this + 167), &v113, *((unsigned char *)this + 1320));
        }
      }
      if (*((unsigned char *)this + 290))
      {
        *((unsigned char *)this + 290) = 0;
        *((_DWORD *)this + 101) = v6;
      }
LABEL_48:
      if (*((unsigned char *)this + 289))
      {
        if (((*((void *)this + 53) - *((void *)this + 52)) & 0x7FFFFFFF8) != 0) {
          XlBinaryReader::findCellAHome(this, a2, 1);
        }
        *((unsigned char *)this + 289) = 0;
        uint64_t v34 = *((unsigned int *)this + 101);
        if (v34 != -1)
        {
          (*(void (**)(void, uint64_t, void))(**((void **)this + 164) + 16))(*((void *)this + 164), v34, 0);
          *((_DWORD *)this + 101) = -1;
        }
        uint64_t Header = (XlBinaryReader *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v113, *((unsigned char *)this + 1320));
      }
    }
    uint64_t v35 = 0;
    unsigned __int16 v36 = 0;
    char v37 = 1;
    while (v113.var1 == 520)
    {
      uint64_t v38 = (*(uint64_t (**)(void))(**((void **)this + 164) + 80))(*((void *)this + 164));
      (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 164) + 16))(*((void *)this + 164), 4294967294, 1);
      uint64_t v39 = v38;
      if ((v37 & 1) == 0)
      {
        if (v38 <= v36 || (int)(v38 - (unsigned __int16)v35) >= 32)
        {
          int v43 = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
          uint64_t Header = (XlBinaryReader *)XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
          *((_DWORD *)this + 101) = v43 - Header;
          break;
        }
        uint64_t v39 = v35;
      }
      XlHeader v40 = (XlRowProperties **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 5);
      uint64_t v41 = *((void *)this + 164);
      int v42 = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)v41 + 16))(v41, -v42, 1);
      XlBinaryReader::readRowInfo(this, v40[1]);
      XlRowBlock::takeRow(a2, (XlCellRow *)v40);
      uint64_t Header = (XlBinaryReader *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v113, *((unsigned char *)this + 1320));
      char v37 = 0;
      uint64_t v35 = v39;
      unsigned __int16 v36 = v38;
    }
    if (((*((void *)a2 + 2) - *((void *)a2 + 1)) & 0x7FFFFFFF8) != 0) {
      goto LABEL_65;
    }
    if (((*((void *)this + 53) - *((void *)this + 52)) & 0x7FFFFFFF8) != 0)
    {
      XlBinaryReader::findCellAHome(this, a2, *((_DWORD *)this + 101) >> 31);
      while (1)
      {
LABEL_65:
        int var1 = (unsigned __int16)v113.var1;
        if (v113.var1 != 215 && v113.var1 != 520)
        {
          int isCell = XlBinaryReader::isCell(Header, &v113);
          if (var1 != 229 && isCell == 0)
          {
LABEL_130:
            if (((*((void *)this + 53) - *((void *)this + 52)) & 0x7FFFFFFF8) != 0) {
              XlBinaryReader::findCellAHome(this, a2, *((_DWORD *)this + 101) >> 31);
            }
            if (!*((_DWORD *)this + 289)) {
              *((_DWORD *)this + 289) = *((_DWORD *)this + 102);
            }
            return;
          }
        }
        unsigned int v47 = (*(uint64_t (**)(void))(**((void **)this + 164) + 80))(*((void *)this + 164));
        char v48 = (XlBinaryReader *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 164) + 16))(*((void *)this + 164), 4294967294, 1);
        int v49 = (unsigned __int16)v113.var1;
        if (v113.var1 == 229) {
          break;
        }
        if (v113.var1 == 520)
        {
          if ((unsigned __int16)v35 + 32 <= v47 || v47 <= v36)
          {
            if ((*((_DWORD *)this + 101) & 0x80000000) != 0)
            {
              int v54 = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
              *((_DWORD *)this + 101) = v54 - XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
            }
            goto LABEL_103;
          }
          unsigned int v71 = (XlRowProperties **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 5);
          uint64_t v72 = *((void *)this + 164);
          int v73 = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)v72 + 16))(v72, -v73, 1);
          XlBinaryReader::readRowInfo(this, v71[1]);
          XlRowBlock::takeRow(a2, (XlCellRow *)v71);
          uint64_t Header = (XlBinaryReader *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v113, *((unsigned char *)this + 1320));
          unsigned __int16 v36 = v47;
        }
        else
        {
          if (v113.var1 == 215)
          {
            if ((*((_DWORD *)this + 101) & 0x80000000) != 0)
            {
              for (int i = 215; i != 10 && i != 236; int i = (unsigned __int16)v113.var1)
              {
                if (XlBinaryReader::isCell(v48, &v113))
                {
                  unint64_t v75 = (XlCell *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 3);
                  uint64_t v76 = *((void *)this + 164);
                  int v77 = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
                  (*(void (**)(uint64_t, void, uint64_t))(*(void *)v76 + 16))(v76, -v77, 1);
                  XlBinaryReader::readCell(this, v75);
                  unint64_t v79 = (XlCell **)*((void *)this + 53);
                  unint64_t v78 = *((void *)this + 54);
                  if ((unint64_t)v79 >= v78)
                  {
                    uint64_t v81 = *((void *)this + 52);
                    unint64_t v82 = (unint64_t)v79 - v81;
                    unint64_t v83 = (v78 - v81) >> 3;
                    unsigned int v84 = 2 * v83;
                    if (2 * (int)v83 <= (v82 >> 3) + 1) {
                      unsigned int v84 = (v82 >> 3) + 1;
                    }
                    if (v83 >= 0x7FFFFFFF) {
                      unint64_t v85 = 0xFFFFFFFFLL;
                    }
                    else {
                      unint64_t v85 = v84;
                    }
                    if (v85)
                    {
                      uint64_t v86 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 432, v85);
                      uint64_t v88 = v87;
                    }
                    else
                    {
                      uint64_t v86 = 0;
                      uint64_t v88 = 0;
                    }
                    uint64_t v89 = (XlCell **)&v86[v82 & 0x7FFFFFFF8];
                    WrdBorder *v89 = v75;
                    __int16 v80 = v89 + 1;
                    unsigned int v91 = (char *)*((void *)this + 52);
                    unsigned int v90 = (char *)*((void *)this + 53);
                    if (v90 != v91)
                    {
                      do
                      {
                        unsigned int v92 = (XlCell *)*((void *)v90 - 1);
                        v90 -= 8;
                        *--uint64_t v89 = v92;
                      }
                      while (v90 != v91);
                      unsigned int v90 = (char *)*((void *)this + 52);
                    }
                    *((void *)this + 52) = v89;
                    *((void *)this + 53) = v80;
                    *((void *)this + 54) = &v86[8 * v88];
                    if (v90) {
                      operator delete(v90);
                    }
                  }
                  else
                  {
                    *unint64_t v79 = v75;
                    __int16 v80 = v79 + 1;
                  }
                  *((void *)this + 53) = v80;
                  char v48 = (XlBinaryReader *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v113, *((unsigned char *)this + 1320));
                }
                else
                {
                  if (i == 520)
                  {
LABEL_159:
                    int v111 = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
                    *((_DWORD *)this + 101) = v111
                                            - XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
                    goto LABEL_130;
                  }
                  char v48 = (XlBinaryReader *)XlParserVisitor::skipAhead(*((XlParserVisitor **)this + 167), &v113, *((unsigned char *)this + 1320));
                }
              }
            }
            goto LABEL_130;
          }
          if (v47 > v36)
          {
            if ((*((_DWORD *)this + 101) & 0x80000000) != 0)
            {
              while (v49 != 10 && v49 != 236)
              {
                if (XlBinaryReader::isCell(v48, &v113))
                {
                  char v93 = (XlCell *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 3);
                  if (v93)
                  {
                    uint64_t v94 = *((void *)this + 164);
                    int v95 = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
                    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v94 + 16))(v94, -v95, 1);
                    XlBinaryReader::readCell(this, v93);
                    int v97 = (XlCell **)*((void *)this + 53);
                    unint64_t v96 = *((void *)this + 54);
                    if ((unint64_t)v97 >= v96)
                    {
                      uint64_t v99 = *((void *)this + 52);
                      unint64_t v100 = (unint64_t)v97 - v99;
                      unint64_t v101 = (v96 - v99) >> 3;
                      unsigned int v102 = 2 * v101;
                      if (2 * (int)v101 <= (v100 >> 3) + 1) {
                        unsigned int v102 = (v100 >> 3) + 1;
                      }
                      if (v101 >= 0x7FFFFFFF) {
                        unint64_t v103 = 0xFFFFFFFFLL;
                      }
                      else {
                        unint64_t v103 = v102;
                      }
                      if (v103)
                      {
                        int v104 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 432, v103);
                        uint64_t v106 = v105;
                      }
                      else
                      {
                        int v104 = 0;
                        uint64_t v106 = 0;
                      }
                      unsigned __int8 v107 = (XlCell **)&v104[v100 & 0x7FFFFFFF8];
                      *unsigned __int8 v107 = v93;
                      int v98 = v107 + 1;
                      int v109 = (char *)*((void *)this + 52);
                      int v108 = (char *)*((void *)this + 53);
                      if (v108 != v109)
                      {
                        do
                        {
                          unsigned int v110 = (XlCell *)*((void *)v108 - 1);
                          v108 -= 8;
                          *--unsigned __int8 v107 = v110;
                        }
                        while (v108 != v109);
                        int v108 = (char *)*((void *)this + 52);
                      }
                      *((void *)this + 52) = v107;
                      *((void *)this + 53) = v98;
                      *((void *)this + 54) = &v104[8 * v106];
                      if (v108) {
                        operator delete(v108);
                      }
                    }
                    else
                    {
                      WrdBorder *v97 = v93;
                      int v98 = v97 + 1;
                    }
                    *((void *)this + 53) = v98;
                  }
                  char v48 = (XlBinaryReader *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v113, *((unsigned char *)this + 1320));
                }
                else
                {
                  if (v49 == 520) {
                    goto LABEL_159;
                  }
                  char v48 = (XlBinaryReader *)XlParserVisitor::skipAhead(*((XlParserVisitor **)this + 167), &v113, *((unsigned char *)this + 1320));
                }
                int v49 = (unsigned __int16)v113.var1;
              }
            }
            goto LABEL_130;
          }
          if (v47 < (unsigned __int16)v35)
          {
LABEL_103:
            uint64_t Header = (XlBinaryReader *)XlParserVisitor::skipAhead(*((XlParserVisitor **)this + 167), &v113, *((unsigned char *)this + 1320));
          }
          else
          {
            __int16 v50 = (XlCell *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 3);
            if (v50)
            {
              uint64_t v51 = *((void *)this + 164);
              int v52 = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
              (*(void (**)(uint64_t, void, uint64_t))(*(void *)v51 + 16))(v51, -v52, 1);
              XlBinaryReader::readCell(this, v50);
              XlRowBlock::takeCell(a2, v50);
            }
            while (*((void *)this + 48))
            {
              unint64_t v53 = (XlCell *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 3);
              if (!v53)
              {
                exception = __cxa_allocate_exception(4uLL);
                _DWORD *exception = 1001;
              }
              XlBinaryReader::processCompressed(this, v53);
              XlRowBlock::takeCell(a2, v53);
            }
            uint64_t Header = (XlBinaryReader *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v113, *((unsigned char *)this + 1320));
          }
        }
      }
      int v55 = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
      int v56 = v55;
      unsigned int v58 = (char *)*((void *)this + 38);
      unint64_t v57 = *((void *)this + 39);
      if ((unint64_t)v58 >= v57)
      {
        char v60 = (char *)*((void *)this + 37);
        int64_t v61 = v58 - v60;
        unint64_t v62 = (unint64_t)(v58 - v60) >> 2;
        unint64_t v63 = (v57 - (unint64_t)v60) >> 2;
        if (2 * (int)v63 <= (v62 + 1)) {
          unsigned int v64 = v62 + 1;
        }
        else {
          unsigned int v64 = 2 * v63;
        }
        if (v63 >= 0x7FFFFFFF) {
          unint64_t v65 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v65 = v64;
        }
        if (v65)
        {
          uint64_t v66 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)this + 312, v65);
          uint64_t v68 = v67;
          char v60 = (char *)*((void *)this + 37);
          unsigned int v58 = (char *)*((void *)this + 38);
        }
        else
        {
          uint64_t v66 = 0;
          uint64_t v68 = 0;
        }
        char v69 = &v66[v61 & 0x3FFFFFFFCLL];
        *(_DWORD *)char v69 = v56;
        uint64_t v59 = v69 + 4;
        while (v58 != v60)
        {
          int v70 = *((_DWORD *)v58 - 1);
          v58 -= 4;
          *((_DWORD *)v69 - 1) = v70;
          v69 -= 4;
        }
        *((void *)this + 37) = v69;
        *((void *)this + 38) = v59;
        *((void *)this + 39) = &v66[4 * v68];
        if (v60) {
          operator delete(v60);
        }
      }
      else
      {
        *(_DWORD *)unsigned int v58 = v55;
        uint64_t v59 = v58 + 4;
      }
      *((void *)this + 38) = v59;
      goto LABEL_103;
    }
  }
}

void sub_238B87DA4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void *XlRowBlock::reset(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[1];
  uint64_t v3 = this[2];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v4);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[1];
        uint64_t v3 = v1[2];
      }
      if (v4 >= ((unint64_t)(v3 - v2) >> 3)) {
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      }
      *(void *)(v2 + 8 * v4++) = 0;
      uint64_t v2 = v1[1];
      uint64_t v3 = v1[2];
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[2] = v2;
  *((_DWORD *)v1 + 8) = 0;
  *((_WORD *)v1 + 18) = 0;
  return this;
}

void XlCellRow::XlCellRow(XlCellRow *this)
{
  *(void *)this = &unk_26EBE2328;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
}

void XlCellRow::init(XlCellRow *this)
{
  if (*((void *)this + 1))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
  uint64_t v2 = (XlRowProperties *)operator new(0x20uLL);
  XlRowProperties::XlRowProperties(v2);
  *((void *)this + 1) = v2;
}

void sub_238B87FAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlRowProperties::XlRowProperties(XlRowProperties *this)
{
  *(void *)this = &unk_26EBDB228;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((unsigned char *)this + 20) = 1;
  *(void *)((char *)this + 21) = 0;
}

uint64_t XlBinaryReader::readRowInfo(XlBinaryReader *this, XlRowProperties *a2)
{
  XlHeader::XlHeader(&v11);
  *((unsigned char *)a2 + 19) = 0;
  uint64_t result = XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v11, *((unsigned char *)this + 1320));
  if (v11.var1 == 520)
  {
    uint64_t v5 = (XlRow *)operator new(0x28uLL);
    XlRow::XlRow(v5, &v11);
    *((void *)this + 47) = v5;
    (*(void (**)(void, XlRow *))(**((void **)this + 167) + 368))(*((void *)this + 167), v5);
    uint64_t v6 = *((void *)this + 47);
    *((_WORD *)a2 + 4) = *(_WORD *)(v6 + 16);
    char v7 = *(unsigned char *)(v6 + 33);
    *((_WORD *)a2 + 6) = *(_WORD *)(v6 + 26);
    *((_WORD *)a2 + 5) = *(_WORD *)(v6 + 22);
    LODWORD(v8) = *(_DWORD *)(v6 + 29);
    *((unsigned char *)a2 + 28) = *(unsigned char *)(v6 + 37);
    LOBYTE(v9) = *(unsigned char *)(v6 + 35);
    char v10 = *(unsigned char *)(v6 + 36);
    BYTE4(v8) = v7;
    BYTE5(v8) = *(unsigned char *)(v6 + 34);
    *((unsigned char *)a2 + 18) = *(unsigned char *)(v6 + 28);
    HIBYTE(v9) = v10;
    HIWORD(v8) = v9;
    *(void *)((char *)a2 + 20) = v8;
    *((unsigned char *)a2 + 19) = 1;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *((void *)this + 47) = 0;
  }
  return result;
}

void sub_238B88130(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlRow::XlRow(XlRow *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1100;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 21) = 0;
  *(unsigned char *)(v2 + 29) = 1;
  *(void *)(v2 + 30) = 0;
}

void XlRow::~XlRow(XlRow *this)
{
}

void XlRowBlock::takeRow(XlRowBlock *this, XlCellRow *a2)
{
  unint64_t v30 = a2;
  if (!a2)
  {
LABEL_32:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
  uint64_t v5 = (void *)*((void *)this + 2);
  unint64_t v4 = (char **)((char *)this + 8);
  if ((((unint64_t)v5 - *((void *)this + 1)) & 0x7FFFFFFF8) != 0
    && (unsigned int v6 = *(unsigned __int16 *)(*((void *)a2 + 1) + 8),
        unsigned int MaxRow = XlRowBlock::getMaxRow(this),
        uint64_t v5 = (void *)*((void *)this + 2),
        v6 <= MaxRow))
  {
    unsigned int v17 = *v4;
    unint64_t v18 = (char *)v5 - *v4;
    if ((v18 & 0x7FFFFFFF8) != 0)
    {
      uint64_t v19 = (v18 >> 3);
      for (int i = *v4; ; i += 8)
      {
        if (!*(void *)v17) {
          goto LABEL_32;
        }
        unsigned int v21 = *(unsigned __int16 *)(*((void *)a2 + 1) + 8);
        unsigned int v22 = *(unsigned __int16 *)(*(void *)(*(void *)v17 + 8) + 8);
        if (v21 < v22)
        {
          std::vector<XlCellRow *,ChAllocator<XlCellRow *>>::insert((uint64_t)v4, i, (uint64_t *)&v30);
          return;
        }
        if (v21 == v22) {
          break;
        }
        v17 += 8;
        if (!--v19) {
          return;
        }
      }
      unint64_t v28 = *(void (**)(XlCellRow *))(*(void *)a2 + 8);
      v28(a2);
    }
  }
  else
  {
    unint64_t v8 = *((void *)this + 3);
    if ((unint64_t)v5 >= v8)
    {
      unint64_t v10 = (char *)v5 - *v4;
      unint64_t v11 = (v8 - (unint64_t)*v4) >> 3;
      unsigned int v12 = 2 * v11;
      if (2 * (int)v11 <= (v10 >> 3) + 1) {
        unsigned int v12 = (v10 >> 3) + 1;
      }
      if (v11 >= 0x7FFFFFFF) {
        unint64_t v13 = 0xFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13)
      {
        unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 24, v13);
        uint64_t v16 = v15;
      }
      else
      {
        unint64_t v14 = 0;
        uint64_t v16 = 0;
      }
      unint64_t v23 = &v14[v10 & 0x7FFFFFFF8];
      unint64_t v24 = &v14[8 * v16];
      *(void *)unint64_t v23 = a2;
      __int16 v9 = v23 + 8;
      uint64_t v26 = (char *)*((void *)this + 1);
      unint64_t v25 = (char *)*((void *)this + 2);
      if (v25 != v26)
      {
        do
        {
          uint64_t v27 = *((void *)v25 - 1);
          v25 -= 8;
          *((void *)v23 - 1) = v27;
          v23 -= 8;
        }
        while (v25 != v26);
        unint64_t v25 = *v4;
      }
      *((void *)this + 1) = v23;
      *((void *)this + 2) = v9;
      *((void *)this + 3) = v24;
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      void *v5 = a2;
      __int16 v9 = v5 + 1;
    }
    *((void *)this + 2) = v9;
  }
}

uint64_t XlRowBlock::getMaxRow(XlRowBlock *this)
{
  uint64_t v1 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2) - v1;
  if ((v2 & 0x7FFFFFFF8) == 0 || (uint64_t v3 = *(void *)(v1 + 8 * ((v2 >> 3) - 1))) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
  return *(unsigned __int16 *)(*(void *)(v3 + 8) + 8);
}

void XlCell::XlCell(XlCell *this)
{
  this->unsigned int var0 = (void **)&unk_26EBE22F0;
  *(_DWORD *)&this->int var1 = -65281;
  this->int var3 = -1;
  this->unsigned int var4 = 0;
  this->var5 = 0.0;
  this->var6 = 0;
  this->var7 = 255;
  this->var8 = 0;
  *(_DWORD *)((char *)&this->var8 + 7) = 0;
}

XlCell *XlBinaryReader::readCell(XlBinaryReader *this, XlCell *a2)
{
  XlHeader::XlHeader(&v19);
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v19, *((unsigned char *)this + 1320));
  if (v19.var1 > 512)
  {
    switch(v19.var1)
    {
      case 0x201:
        XlBlank::XlBlank((XlBlank *)v15, &v19);
        XlBlank::accept((uint64_t)v15, *((void *)this + 167));
        uint64_t result = XlCell::setBlank(a2);
        goto LABEL_33;
      case 0x202:
        return (XlCell *)(*(uint64_t (**)(void, void, uint64_t))(**((void **)this + 164) + 16))(*((void *)this + 164), v19.var0, 1);
      case 0x203:
        unint64_t v10 = (unsigned int *)operator new(0x20uLL);
        XlNumberFP::XlNumberFP((XlNumberFP *)v10, &v19);
        (*(void (**)(unsigned int *, void))(*(void *)v10 + 16))(v10, *((void *)this + 167));
        XlCell::setNumber(a2, *((double *)v10 + 2));
        goto LABEL_29;
      case 0x204:
        goto LABEL_18;
      case 0x205:
        XlBoolErr::XlBoolErr((XlBoolErr *)v15, &v19);
        XlBoolErr::accept((uint64_t)v15, *((void *)this + 167));
        if (HIBYTE(v17)) {
          uint64_t result = XlCell::setError(a2, BYTE2(v17));
        }
        else {
          uint64_t result = XlCell::setBoolean(a2, BYTE2(v17) != 0);
        }
LABEL_33:
        a2->int var3 = v17;
        int v9 = v16;
        goto LABEL_34;
      case 0x206:
        return (XlCell *)XlBinaryReader::processFormula(this, a2, &v19);
      default:
        if (v19.var1 == 638)
        {
          unint64_t v10 = (unsigned int *)operator new(0x20uLL);
          XlRk::XlRk((XlRk *)v10, &v19);
          (*(void (**)(unsigned int *, void))(*(void *)v10 + 16))(v10, *((void *)this + 167));
          double v14 = XlRk::decode((XlRk *)v10[4]);
          XlCell::setNumber(a2, v14);
          a2->int var3 = *((_WORD *)v10 + 12);
          unsigned int v13 = v10[5];
          goto LABEL_30;
        }
        if (v19.var1 != 1030) {
          return (XlCell *)(*(uint64_t (**)(void, void, uint64_t))(**((void **)this + 164) + 16))(*((void *)this + 164), v19.var0, 1);
        }
        break;
    }
    return (XlCell *)XlBinaryReader::processFormula(this, a2, &v19);
  }
  if (v19.var1 <= 189)
  {
    if (v19.var1 != 4)
    {
      if (v19.var1 == 6) {
        return (XlCell *)XlBinaryReader::processFormula(this, a2, &v19);
      }
      if (v19.var1 == 189)
      {
        uint64_t v5 = *((void *)this + 48);
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
        *((void *)this + 48) = 0;
        unsigned int v6 = (XlMulRk *)operator new(0x30uLL);
        XlMulRk::XlMulRk(v6, &v19);
        *((void *)this + 48) = v6;
        (*(void (**)(XlMulRk *, void))(*(void *)v6 + 16))(v6, *((void *)this + 167));
        __int16 v7 = *(_WORD *)(*((void *)this + 48) + 38);
LABEL_26:
        *((_WORD *)this + 200) = v7;
        return XlBinaryReader::processCompressed(this, a2);
      }
      return (XlCell *)(*(uint64_t (**)(void, void, uint64_t))(**((void **)this + 164) + 16))(*((void *)this + 164), v19.var0, 1);
    }
LABEL_18:
    unint64_t v10 = (unsigned int *)operator new(0x20uLL);
    XlLabel::XlLabel((XlLabel *)v10, &v19);
    (*(void (**)(unsigned int *, void))(*(void *)v10 + 16))(v10, *((void *)this + 167));
    XlCell::takeString(a2, *((XlString **)v10 + 2));
    goto LABEL_28;
  }
  if (v19.var1 == 190)
  {
    uint64_t v11 = *((void *)this + 48);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    *((void *)this + 48) = 0;
    unsigned int v12 = (XlMulBlank *)operator new(0x28uLL);
    XlMulBlank::XlMulBlank(v12, &v19);
    *((void *)this + 48) = v12;
    (*(void (**)(XlMulBlank *, void))(*(void *)v12 + 16))(v12, *((void *)this + 167));
    __int16 v7 = *(_WORD *)(*((void *)this + 48) + 30);
    goto LABEL_26;
  }
  if (v19.var1 == 214)
  {
    unint64_t v10 = (unsigned int *)operator new(0x38uLL);
    XlRString::XlRString((XlRString *)v10, &v19);
    (*(void (**)(unsigned int *, void))(*(void *)v10 + 16))(v10, *((void *)this + 167));
    XlCell::takeString(a2, *((XlString **)v10 + 2));
LABEL_28:
    *((void *)v10 + 2) = 0;
LABEL_29:
    a2->int var3 = *((_WORD *)v10 + 14);
    unsigned int v13 = v10[6];
LABEL_30:
    *(_DWORD *)&a2->int var1 = v13;
    return (XlCell *)(*(uint64_t (**)(unsigned int *))(*(void *)v10 + 8))(v10);
  }
  if (v19.var1 != 253) {
    return (XlCell *)(*(uint64_t (**)(void, void, uint64_t))(**((void **)this + 164) + 16))(*((void *)this + 164), v19.var0, 1);
  }
  XlLabelSst::XlLabelSst((XlLabelSst *)v15, &v19);
  XlLabelSst::accept((uint64_t)v15, *((void *)this + 167));
  unint64_t v8 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v8);
  XlString::setIndex(v8, v16);
  uint64_t result = XlCell::takeString(a2, v8);
  a2->int var3 = v18;
  int v9 = v17;
LABEL_34:
  *(_DWORD *)&a2->int var1 = v9;
  return result;
}

void sub_238B88AE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlLabelSst::XlLabelSst(XlLabelSst *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDFFA8;
  *(void *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
}

uint64_t XlLabelSst::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 320))(a2, a1);
}

XlCell *XlCell::takeString(XlCell *this, XlString *a2)
{
  uint64_t result = XlCell::resetContent(this);
  this->var6 = a2;
  this->var10 = 1;
  this->unsigned int var4 = 16;
  return result;
}

XlCell *XlCell::resetContent(XlCell *this)
{
  uint64_t v1 = this;
  this->var9 = 0;
  this->var7 = 255;
  this->var5 = 0.0;
  if (this->var10)
  {
    this = (XlCell *)this->var6;
    if (this) {
      this = (XlCell *)(*((uint64_t (**)(XlCell *))this->var0 + 1))(this);
    }
  }
  v1->var6 = 0;
  v1->var10 = 0;
  v1->unsigned int var4 = 0;
  return this;
}

void XlRowBlock::takeCell(XlRowBlock *this, XlCell *a2)
{
  if (!a2) {
    return;
  }
  if (((*((void *)this + 2) - *((void *)this + 1)) & 0x7FFFFFFF8) == 0) {
    return;
  }
  unsigned int var1 = a2->var1;
  if (var1 < XlRowBlock::getMinRow(this)) {
    return;
  }
  unsigned int v5 = a2->var1;
  if (v5 > XlRowBlock::getMaxRow(this)) {
    return;
  }
  unsigned int v6 = a2->var1;
  unsigned int v7 = *((unsigned __int16 *)this + 18);
  if (v6 == v7)
  {
    uint64_t v8 = *((unsigned __int16 *)this + 17);
    uint64_t v9 = *((void *)this + 1);
    if (((unint64_t)(*((void *)this + 2) - v9) >> 3) > v8)
    {
      unint64_t v10 = *(XlCellRow **)(v9 + 8 * v8);
LABEL_9:
      XlCellRow::takeCell(v10, a2);
      return;
    }
LABEL_31:
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v11 = *((void *)this + 1);
  uint64_t v12 = *((void *)this + 2);
  if (v6 <= v7)
  {
    unint64_t v14 = (unint64_t)(v12 - v11) >> 3;
  }
  else
  {
    uint64_t v13 = *((unsigned __int16 *)this + 17);
    unint64_t v14 = (unint64_t)(v12 - v11) >> 3;
    if ((int)v14 - 1 > v13)
    {
      if ((int)v13 + 1 >= v14) {
        goto LABEL_31;
      }
      unint64_t v10 = *(XlCellRow **)(v11 + 8 * (v13 + 1));
      *((_WORD *)this + 17) = v13 + 1;
      int v15 = *(unsigned __int16 *)(*((void *)v10 + 1) + 8);
      *((_WORD *)this + 18) = v15;
      if (v6 == v15) {
        goto LABEL_9;
      }
      *(_DWORD *)((char *)this + 34) = 0;
      goto LABEL_19;
    }
  }
  *(_DWORD *)((char *)this + 34) = 0;
  if (v14)
  {
LABEL_19:
    uint64_t v16 = 0;
    while (1)
    {
      uint64_t v17 = *(void *)(v11 + 8 * v16);
      if (!v17)
      {
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = 1003;
      }
      if (v6 == *(unsigned __int16 *)(*(void *)(v17 + 8) + 8)) {
        break;
      }
      if (v14 == ++v16) {
        goto LABEL_27;
      }
    }
    XlCellRow::takeCell(*(XlCellRow **)(v11 + 8 * v16), a2);
    *((_WORD *)this + 17) = v16;
    *((_WORD *)this + 18) = *(_WORD *)(*(void *)(v17 + 8) + 8);
    uint64_t v18 = (*((void *)this + 2) - *((void *)this + 1)) >> 3;
    goto LABEL_26;
  }
  LODWORD(v18) = 0;
  LODWORD(v16) = 0;
LABEL_26:
  if (v16 == v18)
  {
LABEL_27:
    XlHeader v19 = (void (*)(XlCell *))*((void *)a2->var0 + 1);
    v19(a2);
  }
}

uint64_t XlRowBlock::getMinRow(XlRowBlock *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 1);
  if (((*((void *)this + 2) - (void)v1) & 0x7FFFFFFF8) == 0 || (uint64_t v2 = *v1) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
  return *(unsigned __int16 *)(*(void *)(v2 + 8) + 8);
}

void XlCellRow::takeCell(XlCellRow *this, XlCell *a2)
{
  uint64_t v34 = a2;
  uint64_t v2 = *((void *)this + 1);
  if (!*(unsigned char *)(v2 + 19))
  {
    exception = __cxa_allocate_exception(4uLL);
    int v33 = 1003;
LABEL_44:
    _DWORD *exception = v33;
  }
  if (!a2 || a2->var1 != *(unsigned __int16 *)(v2 + 8) || (int var2 = a2->var2, var2 >= 256))
  {
    exception = __cxa_allocate_exception(4uLL);
    int v33 = 1004;
    goto LABEL_44;
  }
  int MaxColumn = XlCellRow::getMaxColumn(this);
  uint64_t v7 = *((void *)this + 2);
  uint64_t v8 = (void *)*((void *)this + 3);
  unint64_t v9 = (unint64_t)v8 - v7;
  if (var2 > MaxColumn)
  {
    unint64_t v10 = v9 >> 3;
    int v11 = a2->var2;
    uint64_t v12 = *((void *)this + 1);
    if (!(v9 >> 3)) {
      *(_WORD *)(v12 + 14) = v11;
    }
    if (v11 >= *(__int16 *)(v12 + 16))
    {
      int v13 = (__int16)(v11 + 1);
      if (v13 >= 255) {
        LOWORD(v13) = 255;
      }
      *(_WORD *)(v12 + 16) = v13;
    }
    unint64_t v14 = *((void *)this + 4);
    if ((unint64_t)v8 >= v14)
    {
      unint64_t v20 = (v14 - v7) >> 3;
      if (2 * (int)v20 <= (v10 + 1)) {
        unsigned int v21 = v10 + 1;
      }
      else {
        unsigned int v21 = 2 * v20;
      }
      if (v20 >= 0x7FFFFFFF) {
        unint64_t v22 = 0xFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v21;
      }
      if (v22)
      {
        unint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 32, v22);
        uint64_t v25 = v24;
      }
      else
      {
        unint64_t v23 = 0;
        uint64_t v25 = 0;
      }
      uint64_t v27 = &v23[v9 & 0x7FFFFFFF8];
      unint64_t v28 = &v23[8 * v25];
      *(void *)uint64_t v27 = a2;
      int v15 = v27 + 8;
      unint64_t v30 = (char *)*((void *)this + 2);
      unsigned int v29 = (char *)*((void *)this + 3);
      if (v29 != v30)
      {
        do
        {
          uint64_t v31 = *((void *)v29 - 1);
          v29 -= 8;
          *((void *)v27 - 1) = v31;
          v27 -= 8;
        }
        while (v29 != v30);
        unsigned int v29 = (char *)*((void *)this + 2);
      }
      *((void *)this + 2) = v27;
      *((void *)this + 3) = v15;
      *((void *)this + 4) = v28;
      if (v29) {
        operator delete(v29);
      }
    }
    else
    {
      void *v8 = a2;
      int v15 = v8 + 1;
    }
    *((void *)this + 3) = v15;
    return;
  }
  if ((v9 & 0x7FFFFFFF8) == 0) {
    return;
  }
  uint64_t v16 = (v9 >> 3);
  for (int i = (char *)*((void *)this + 2); ; i += 8)
  {
    if (!*(void *)v7)
    {
      exception = __cxa_allocate_exception(4uLL);
      int v33 = 1005;
      goto LABEL_44;
    }
    int v18 = *(__int16 *)(*(void *)v7 + 10);
    int v19 = a2->var2;
    if (v18 > v19)
    {
      std::vector<XlCell *,ChAllocator<XlCell *>>::insert((uint64_t)this + 16, i, (uint64_t *)&v34);
      return;
    }
    if (v18 == v19) {
      break;
    }
    v7 += 8;
    if (!--v16) {
      return;
    }
  }
  uint64_t v26 = (void (*)(XlCell *))*((void *)a2->var0 + 1);
  v26(a2);
}

uint64_t XlCellRow::getMaxColumn(XlCellRow *this)
{
  if (!*(unsigned char *)(*((void *)this + 1) + 19))
  {
    exception = __cxa_allocate_exception(4uLL);
    int v7 = 1003;
    goto LABEL_9;
  }
  uint64_t v1 = *((void *)this + 2);
  unint64_t v2 = *((void *)this + 3) - v1;
  if ((v2 & 0x7FFFFFFF8) == 0) {
    return -1;
  }
  uint64_t v3 = *(void *)(v1 + 8 * ((v2 >> 3) - 1));
  if (!v3)
  {
    exception = __cxa_allocate_exception(4uLL);
    int v7 = 1005;
LABEL_9:
    _DWORD *exception = v7;
  }
  return *(__int16 *)(v3 + 10);
}

void XlBlank::XlBlank(XlBlank *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDEC28;
  *(_DWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 20) = 0;
}

uint64_t XlBlank::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, a1);
}

XlCell *XlCell::setBlank(XlCell *this)
{
  uint64_t result = XlCell::resetContent(this);
  this->unsigned int var4 = 1;
  return result;
}

void XlMulBlank::XlMulBlank(XlMulBlank *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0228;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = 0;
}

uint64_t XlMulBlank::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 120))(a2, a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlMulBlank *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_WORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 15) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  unsigned int v4 = *((_DWORD *)a2 + 2) - 6;
  unsigned int v5 = v4 >> 1;
  if (v4 > 1)
  {
    unint64_t v7 = 0;
    *((void *)this + 5) = operator new[](v4 & 0xFFFFFFFE);
    if (v5 <= 1) {
      unsigned int v8 = 1;
    }
    else {
      unsigned int v8 = v5;
    }
    uint64_t v9 = 2 * v8;
    do
    {
      __int16 v10 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
      unsigned int v6 = (__int16 *)*((void *)this + 5);
      v6[v7 / 2] = v10;
      v7 += 2;
    }
    while (v9 != v7);
  }
  else
  {
    unsigned int v6 = (__int16 *)*((void *)this + 5);
  }
  XlMulBlank::setCellFormats(a2, v6, v5);
  *((void *)this + 5) = 0;
  *((_WORD *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlMulBlank::setCellFormats(XlMulBlank *this, __int16 *a2, int a3)
{
  uint64_t result = *((void *)this + 2);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C80BDFB0063);
  }
  *((void *)this + 2) = a2;
  *((_DWORD *)this + 6) = a3;
  return result;
}

XlCell *XlBinaryReader::processCompressed(XlBinaryReader *this, XlCell *a2)
{
  unsigned int v4 = (__int16 *)*((void *)this + 48);
  int v5 = v4[6];
  if (v5 == 189)
  {
    uint64_t v13 = *((void *)v12 + 2);
    if (!v13) {
      goto LABEL_22;
    }
    unint64_t v14 = v12;
    int v15 = v12[19];
    int v16 = *((__int16 *)this + 200);
    if (v15 < 1)
    {
      if (v15 + 0x7FFF < v16) {
        goto LABEL_22;
      }
    }
    else if (v16 < v15)
    {
      goto LABEL_22;
    }
    __int16 v17 = v16 - v15;
    if (*((_DWORD *)v12 + 8) > v17)
    {
      double v18 = XlRk::decode((XlRk *)*(unsigned int *)(v13 + 4 * v17));
      uint64_t result = XlCell::setNumber(a2, v18);
      int v19 = *((__int16 *)this + 200);
      int v10 = *((unsigned __int16 *)this + 200);
      a2->int var3 = *(_WORD *)(*((void *)v14 + 3) + 2 * (v19 - v15));
      a2->unsigned int var1 = v14[18];
      a2->int var2 = v19;
      int v11 = (unsigned __int16)v14[20];
      goto LABEL_16;
    }
LABEL_22:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 8001;
  }
  if (v5 == 190)
  {
    int v7 = v6[15];
    uint64_t result = XlCell::setBlank(a2);
    int v9 = *((__int16 *)this + 200) - v7;
    if (v9 >= 0 && v9 < *((_DWORD *)v6 + 6))
    {
      int v10 = *((unsigned __int16 *)this + 200);
      a2->int var3 = *(_WORD *)(*((void *)v6 + 2) + 2 * v9);
      a2->unsigned int var1 = v6[14];
      a2->int var2 = v10;
      int v11 = (unsigned __int16)v6[16];
LABEL_16:
      if (v10 == v11)
      {
        uint64_t result = (XlCell *)*((void *)this + 48);
        if (result) {
          uint64_t result = (XlCell *)(*((uint64_t (**)(XlCell *))result->var0 + 1))(result);
        }
        *((void *)this + 48) = 0;
        __int16 v20 = -1;
      }
      else
      {
        __int16 v20 = v10 + 1;
      }
      *((_WORD *)this + 200) = v20;
      return result;
    }
    goto LABEL_22;
  }
  return (XlCell *)ChLogFunction("wrong compress type", 2, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/Reader/XlBinaryReader.cpp", 4045);
}

void XlMulBlank::~XlMulBlank(XlMulBlank *this)
{
  *(void *)this = &unk_26EBE0228;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C80BDFB0063);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBE0228;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C80BDFB0063);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
}

void XlRk::XlRk(XlRk *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE10C0;
  *(void *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
}

uint64_t XlRk::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 360))(a2, a1);
}

double XlRk::decode(XlRk *this)
{
  *(void *)&double result = (unint64_t)(this & 0xFFFFFFFC) << 32;
  if ((this & 2) != 0) {
    double result = (double)((int)this >> 2);
  }
  if (this) {
    return result / 100.0;
  }
  return result;
}

XlCell *XlCell::setNumber(XlCell *this, double a2)
{
  double result = XlCell::resetContent(this);
  this->unsigned int var4 = 8;
  this->var5 = a2;
  return result;
}

void XlRk::~XlRk(XlRk *this)
{
}

uint64_t XlParserVisitor::skipAhead(XlParserVisitor *this, XlHeader *a2, unsigned __int8 a3)
{
  if ((*((_DWORD *)this + 20) & 0x80000000) == 0) {
    (*(void (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
  }
  return XlParserVisitor::getHeader(this, a2, a3);
}

void sub_238B89DFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B89F4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B8A090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B8A25C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B8A740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t initEDRowInfo(uint64_t result, int a2)
{
  *(_DWORD *)double result = -1;
  *(_DWORD *)(result + 4) = a2;
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 8) = 0;
  *(unsigned char *)(result + 22) = 0;
  *(_WORD *)(result + 20) = -1;
  *(unsigned char *)(result + 23) &= 0xFCu;
  return result;
}

void sub_238B8A9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B8AF24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t maximumAllowedColumnNumber(void)
{
  return 0xFFFFLL;
}

uint64_t sizeofEDCellType(int a1, int a2)
{
  switch(a1)
  {
    case 0:
    case 4:
      goto LABEL_4;
    case 1:
      BOOL v3 = a2 == 0;
      unsigned int v4 = 10;
      unsigned int v5 = 14;
      break;
    case 2:
      BOOL v3 = a2 == 0;
      unsigned int v4 = 16;
      unsigned int v5 = 20;
      break;
    case 3:
    case 5:
      BOOL v3 = a2 == 0;
      unsigned int v4 = 12;
      unsigned int v5 = 16;
      break;
    default:
      unsigned int v6 = objc_msgSend(NSString, "stringWithUTF8String:", "unsigned int sizeofEDCellType(EDCellType, BOOL)");
      int v7 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/DOM/EDCell.mm"];
      +[OITSUAssertionHandler handleFailureInFunction:v6 file:v7 lineNumber:353 isFatal:0 description:"Invalid cell type!"];

      +[OITSUAssertionHandler logBacktraceThrottled];
LABEL_4:
      BOOL v3 = a2 == 0;
      unsigned int v4 = 8;
      unsigned int v5 = 12;
      break;
  }
  if (v3) {
    return v4;
  }
  else {
    return v5;
  }
}

void sub_238B8B07C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned int *updateRowInfoOffsetsInPackedDataForNewCell(unsigned int *result, unsigned int *a2, int a3, int a4, int a5)
{
  unsigned int v8 = result;
  unsigned int v9 = *result;
  unsigned int v10 = a3 + 1;
  if (*result > a3 + 1 && &result[6 * *result + 6] > a2) {
    double result = (unsigned int *)+[TCMessageException raise:TCUnknownProblemMessage];
  }
  if (v9 > v10)
  {
    uint64_t v12 = &v8[6 * v10 + 10];
    unsigned int v13 = ~a3 + v9;
    do
    {
      *(v12 - 1) += a4;
      *v12 += a5;
      v12 += 6;
      --v13;
    }
    while (v13);
  }
  return result;
}

void initEDCell(int *a1, int a2, int a3, int a4)
{
  if (a1)
  {
    unsigned int v8 = sizeofEDCellType(a3, a4);
    bzero(a1, v8);
    if (a4) {
      int v9 = 0x10000000;
    }
    else {
      int v9 = 0;
    }
    int v10 = v9 | (a3 << 29) | a2;
    *a1 = v10;
    a1[1] = -1;
    if ((v10 & 0x10000000) != 0 && a4) {
      a1[2] = -1;
    }
    if (a3 == 3)
    {
      setStringIndexValueForEDCell(a1, -1);
    }
  }
}

_DWORD *setStringIndexValueForEDCell(_DWORD *result, int a2)
{
  if (result)
  {
    if (*result >> 29 == 3)
    {
      if ((*result & 0x10000000) != 0) {
        result[3] = a2;
      }
      else {
        result[2] = a2;
      }
    }
    else
    {
      uint64_t v2 = objc_msgSend(NSString, "stringWithUTF8String:", "void setStringIndexValueForEDCell(EDCellHeader *, NSUInteger)");
      BOOL v3 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/DOM/EDCell.mm"];
      +[OITSUAssertionHandler handleFailureInFunction:v2 file:v3 lineNumber:246 isFatal:0 description:"Invalid Cell Type!"];

      return (_DWORD *)+[OITSUAssertionHandler logBacktraceThrottled];
    }
  }
  return result;
}

void sub_238B8B368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t setStyleIndexForEDCell(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 4) = a2;
  }
  return result;
}

void sub_238B8B490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sizeofEDCell(const EDCellHeader *a1)
{
  return sizeofEDCellType(a1->var0 >> 29, (a1->var0 >> 28) & 1);
}

uint64_t columnNumberForEDCell(const EDCellHeader *a1)
{
  if (a1) {
    return LOWORD(a1->var0);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t setNumberValueForEDCell(uint64_t result, double a2)
{
  if (result)
  {
    if (*(_DWORD *)result >> 29 == 2)
    {
      if ((*(_DWORD *)result & 0x10000000) != 0) {
        *(double *)(result + 12) = a2;
      }
      else {
        *(double *)(result + 8) = a2;
      }
    }
    else
    {
      uint64_t v2 = objc_msgSend(NSString, "stringWithUTF8String:", "void setNumberValueForEDCell(EDCellHeader *, double)", a2);
      BOOL v3 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/DOM/EDCell.mm"];
      +[OITSUAssertionHandler handleFailureInFunction:v2 file:v3 lineNumber:218 isFatal:0 description:"Invalid Cell Type!"];

      return +[OITSUAssertionHandler logBacktraceThrottled];
    }
  }
  return result;
}

void sub_238B8B594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlRowBlock::~XlRowBlock(XlRowBlock *this)
{
  *(void *)this = &unk_26EBE2E58;
  XlRowBlock::reset(this);
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  XlRowBlock::~XlRowBlock(this);
  JUMPOUT(0x23EC997B0);
}

void XlCellRow::~XlCellRow(XlCellRow *this)
{
  XlCellRow::~XlCellRow(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;
  void *v3;

  *(void *)this = &unk_26EBE2328;
  XlCellRow::reset(this);
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 1) = 0;
  BOOL v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 3) = v3;
    operator delete(v3);
  }
}

void *XlCellRow::reset(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[2];
  *(unsigned char *)(this[1] + 19) = 0;
  uint64_t v3 = this[3];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v4);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[2];
        uint64_t v3 = v1[3];
      }
      if (v4 >= ((unint64_t)(v3 - v2) >> 3)) {
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      }
      *(void *)(v2 + 8 * v4++) = 0;
      uint64_t v2 = v1[2];
      uint64_t v3 = v1[3];
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[3] = v2;
  *((_DWORD *)v1 + 10) = 0;
  return this;
}

void XlCell::~XlCell(XlCell *this)
{
  XlCell::~XlCell(this);
  JUMPOUT(0x23EC997B0);
}

{
  this->unsigned int var0 = (void **)&unk_26EBE22F0;
  XlCell::reset(this);
}

void *XlCell::reset(XlCell *this)
{
  double result = XlCell::resetContent(this);
  if (this->var11)
  {
    double result = this->var8;
    if (result) {
      double result = (void *)(*(uint64_t (**)(void *))(*(void *)result + 8))(result);
    }
  }
  this->var8 = 0;
  return result;
}

void XlRowProperties::~XlRowProperties(XlRowProperties *this)
{
}

void XlMulRk::XlMulRk(XlMulRk *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0268;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 40) = 0;
}

uint64_t XlMulRk::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 328))(a2, a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlMulRk *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_WORD *)a2 + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 19) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  unsigned int v4 = *((_DWORD *)a2 + 2) - 6;
  unsigned int v5 = v4 / 6;
  if (v4 > 5)
  {
    *((void *)this + 5) = operator new[](2 * (v4 / 6));
    uint64_t v7 = 0;
    *((void *)this + 8) = operator new[](4 * v5);
    if (v5 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = v5;
    }
    do
    {
      *(_WORD *)(*((void *)this + 5) + 2 * v7) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
      int v9 = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
      unsigned int v6 = (int *)*((void *)this + 8);
      v6[v7++] = v9;
    }
    while (v8 != v7);
  }
  else
  {
    unsigned int v6 = (int *)*((void *)this + 8);
  }
  XlMulRk::setNumbers(a2, v6, *((__int16 **)this + 5), v5);
  *((void *)this + 8) = 0;
  *((void *)this + 5) = 0;
  *((_WORD *)a2 + 20) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlMulRk::setNumbers(XlMulRk *this, int *a2, __int16 *a3, int a4)
{
  uint64_t v8 = *((void *)this + 3);
  if (v8) {
    MEMORY[0x23EC99790](v8, 0x1000C80BDFB0063);
  }
  *((void *)this + 3) = 0;
  uint64_t result = *((void *)this + 2);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C8052888210);
  }
  *((void *)this + 2) = a2;
  *((void *)this + 3) = a3;
  *((_DWORD *)this + 8) = a4;
  return result;
}

void XlMulRk::~XlMulRk(XlMulRk *this)
{
  *(void *)this = &unk_26EBE0268;
  XlMulRk::setNumbers(this, 0, 0, 0);
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBE0268;
  XlMulRk::setNumbers(this, 0, 0, 0);
}

_DWORD *setStyleIndexForEDRowInfo(_DWORD *result, int a2)
{
  if (result) {
    *uint64_t result = a2;
  }
  return result;
}

void sub_238B8BC38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B8BD34(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  id v11 = objc_begin_catch(exc_buf);
  if (a2 != 2)
  {
    +[TCMessageContext reportWarning:OABadFormat];
    objc_end_catch();
    JUMPOUT(0x238B8BD04);
  }
  id v12 = v11;
  objc_exception_rethrow();
}

void sub_238B8BDB4()
{
}

void sub_238B8BDE8()
{
  objc_end_catch();

  JUMPOUT(0x238B8BD48);
}

BOOL XlBinaryReader::hasMoreGraphics(XlBinaryReader *this)
{
  return *((_DWORD *)this + 324) > 0;
}

void sub_238B8C000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(a10);

  _Unwind_Resume(a1);
}

void *XlBinaryReader::read(XlBinaryReader *this, XlNoteTable *a2)
{
  uint64_t v3 = (void **)((char *)a2 + 8);
  uint64_t result = CsSimpleHeapVector<XlRecord>::clear((void *)a2 + 1);
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0) {
    uint64_t result = XlBinaryReader::setSheet(this, 0);
  }
  if ((*((_DWORD *)this + 57) & 0x80000000) == 0)
  {
    (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
    XlHeader::XlHeader(&v11);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v11, *((unsigned char *)this + 1320));
    uint64_t v5 = *((void *)this + 163);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    *((void *)this + 163) = 0;
    while (v11.var1 == 28)
    {
      unsigned int v6 = (XlNote *)operator new(0x28uLL);
      XlNote::XlNote(v6, &v11);
      *((void *)this + 163) = v6;
      uint64_t v7 = *((void *)this + 167);
      if (v6) {
      else
      }
        uint64_t v8 = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v7 + 128))(v7, v8);
      uint64_t v12 = *((void *)this + 163);
      CsSimpleHeapVector<XlRecord>::pushBack(v3, &v12);
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
      *((void *)this + 163) = 0;
      XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v11, *((unsigned char *)this + 1320));
    }
    uint64_t v9 = *((void *)this + 164);
    RecordDataint Offset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
    return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v9 + 16))(v9, -RecordDataOffset, 1);
  }
  return result;
}

void sub_238B8C2AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    XlChartBinaryReader::scanChartProperties();
  }
  _Unwind_Resume(exception_object);
}

void sub_238B8C444(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unsigned int v6 = v4;

  XlSheetPresentationTable::~XlSheetPresentationTable((XlSheetPresentationTable *)va);
  _Unwind_Resume(a1);
}

void XlSheetPresentationTable::XlSheetPresentationTable(XlSheetPresentationTable *this)
{
  *(void *)this = &unk_26EBE2FA8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
}

void XlBinaryReader::read(XlBinaryReader *this, XlSheetPresentationTable *a2)
{
  XlHeader::XlHeader(&v10);
  if ((*((_DWORD *)this + 56) & 0x80000000) != 0)
  {
    XlSheetPresentationTable::setDefault(a2);
  }
  else
  {
    XlSheetPresentationTable::reset(a2);
    if (*((int *)this + 69) >= 1)
    {
      (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
      XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v10, *((unsigned char *)this + 1320));
      if (v10.var1 == 237)
      {
        unsigned int v4 = (XlMsoDrawingSelection *)operator new(0x20uLL);
        XlMsoDrawingSelection::XlMsoDrawingSelection(v4, &v10);
        *((void *)this + 163) = v4;
        if (v4) {
        (*(void (**)(void, XlMsoDrawingSelection *))(**((void **)this + 167) + 816))(*((void *)this + 167), v4);
        }
        XlChartSeriesFormat::takePictureFormat((XlChartSeriesFormat *)a2, (XlChartPicF *)v4);
        *((void *)this + 163) = 0;
      }
      else
      {
        *((_DWORD *)this + 69) = -1;
      }
    }
    (*(void (**)(void, void, void))(**((void **)this + 164) + 16))(*((void *)this + 164), *((unsigned int *)this + 56), 0);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v10, *((unsigned char *)this + 1320));
LABEL_11:
    while (2)
    {
      if (((unsigned __int16)v10.var1 | 0x200) == 0x23E)
      {
        uint64_t v5 = (XlChartPlot *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 49);
        if (!v5) {
          continue;
        }
        unsigned int v6 = (XlWindow2 *)operator new(0x28uLL);
        XlWindow2::XlWindow2(v6, &v10);
        *((void *)this + 163) = v6;
        if (v6) {
        (*(void (**)(void, XlWindow2 *))(**((void **)this + 167) + 424))(*((void *)this + 167), v6);
        }
        XlChartPlot::take3D(v5, (XlChart3D *)v6);
        *((void *)this + 163) = 0;
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v10, *((unsigned char *)this + 1320));
        while (1)
        {
          if ((unsigned __int16)v10.var1 > 0x1A9u)
          {
            if (v10.var1 == 426 || v10.var1 == 574)
            {
LABEL_37:
              XlChangeHistory::appendChangeLogEntry(a2, v5);
              goto LABEL_11;
            }
          }
          else if (v10.var1 == 10 || v10.var1 == 62)
          {
            goto LABEL_37;
          }
          if (v10.var1 == 29)
          {
            uint64_t v9 = (XlSelection *)operator new(0x38uLL);
            XlSelection::XlSelection(v9, &v10);
            *((void *)this + 163) = v9;
            if (v9) {
            (*(void (**)(void, XlSelection *))(**((void **)this + 167) + 384))(*((void *)this + 167), v9);
            }
            XlSheetPresentation::takeSelection((XlSheetPresentation *)v5, v9);
            goto LABEL_34;
          }
          if (v10.var1 == 65) {
            break;
          }
          if (v10.var1 == 160)
          {
            uint64_t v7 = (XlScl *)operator new(0x18uLL);
            XlScl::XlScl(v7, &v10);
            *((void *)this + 163) = v7;
            if (v7) {
            (*(void (**)(void, XlScl *))(**((void **)this + 167) + 1008))(*((void *)this + 167), v7);
            }
            XlChartPlot::takeChartFormat((uint64_t)v5, (uint64_t)v7);
LABEL_34:
            *((void *)this + 163) = 0;
            goto LABEL_36;
          }
          (*(void (**)(void, void, uint64_t))(**((void **)this + 164) + 16))(*((void *)this + 164), v10.var0, 1);
LABEL_36:
          XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v10, *((unsigned char *)this + 1320));
        }
        uint64_t v8 = (XlPane *)operator new(0x20uLL);
        XlPane::XlPane(v8, &v10);
        *((void *)this + 163) = v8;
        if (v8) {
        (*(void (**)(void, XlPane *))(**((void **)this + 167) + 352))(*((void *)this + 167), v8);
        }
        XlSheetPresentation::takePaneInfo((XlSheetPresentation *)v5, v8);
        goto LABEL_34;
      }
      break;
    }
  }
}

void sub_238B8CA34(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlSheetPresentationTable::reset(XlSheetPresentationTable *this)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = *((void *)this + 2);
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v2 + 8 * v4);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        uint64_t v2 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  uint64_t result = *((void *)this + 4);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    uint64_t v2 = *((void *)this + 1);
  }
  *((void *)this + 4) = 0;
  *((void *)this + 2) = v2;
  return result;
}

void XlSheetPresentation::XlSheetPresentation(XlSheetPresentation *this)
{
  this->unsigned int var0 = (void **)&unk_26EBE2F70;
  *(_OWORD *)&this->unsigned int var1 = 0u;
  *(_OWORD *)&this->int var3 = 0u;
  *(_OWORD *)&this->var4[1] = 0u;
  this->var4[3] = 0;
}

void XlWindow2::XlWindow2(XlWindow2 *this, XlHeader *a2)
{
  XlRecord::XlRecord((XlRecord *)this, a2);
  *uint64_t v2 = &unk_26EBE2078;
  v2[2] = 64;
  v2[3] = 0x100010100010100;
  v2[4] = 65792;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlWindow2 *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  XlWindow2::verifyVersion(a2);
  if (a2->var1.var2)
  {
    int16x8_t v4 = (int16x8_t)((__n128 (*)(void))*(void *)(**((void **)this + 2) + 72))(*((void *)this + 2));
    a2->var5 = v5 & 1;
    *(int16x4_t *)v4.i8 = vdup_n_s16(v5);
    *(uint16x4_t *)v6.i8 = vshl_u16(*(uint16x4_t *)v4.i8, (uint16x4_t)0xFFF5FFF6FFF7FFF8);
    v4.i64[0] = *(void *)&vshl_u16((uint16x4_t)(v4.i64[0] & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
    *(_DWORD *)&a2->var6 = vmovn_s16(v4).u32[0];
    a2->var10 = (v5 & 0x20) != 0;
    a2->var11 = (v5 & 0x40) != 0;
    a2->var12 = (v5 & 0x80) != 0;
    v6.i64[0] &= 0xFF01FF01FF01FF01;
    *(_DWORD *)&a2->var13 = vmovn_s16(v6).u32[0];
    a2->var17 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    a2->var18 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    a2->int var2 = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
    if (a2->var1.var0 == 18)
    {
      a2->int var3 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
      a2->unsigned int var4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
      (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4, 1);
    }
    else
    {
      *(_DWORD *)&a2->int var3 = 6553700;
    }
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

XlWindow2 *XlWindow2::verifyVersion(XlWindow2 *this)
{
  switch(this->var1.var2)
  {
    case 0u:
      if (this->var1.var0 != 14) {
        goto LABEL_3;
      }
      return this;
    case 2u:
    case 4u:
    case 8u:
      if (this->var1.var0 != 10) {
        goto LABEL_3;
      }
      return this;
    case 9u:
      unsigned int var0 = this->var1.var0;
      switch(var0)
      {
        case 0xAu:
          unsigned __int8 v3 = 8;
          break;
        case 0x12u:
          return this;
        case 0xEu:
          unsigned __int8 v3 = 0;
          break;
        default:
LABEL_3:
          exception = __cxa_allocate_exception(4uLL);
          _DWORD *exception = 8003;
      }
      this->var1.int var2 = v3;
      return this;
    default:
      return this;
  }
}

uint64_t XlChartPlot::take3D(XlChartPlot *this, XlChart3D *a2)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 1) = a2;
  return result;
}

void XlSelection::XlSelection(XlSelection *this, XlHeader *a2)
{
  XlRecord::XlRecord((XlRecord *)this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1300;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 38) = 0;
  *(_DWORD *)(v2 + 48) = 3;
  *(unsigned char *)(v2 + 52) = 1;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSelection *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((_WORD *)a2 + 20) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 21) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 22) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  if (v4 >= 1)
  {
    int v5 = v4;
    LOWORD(v6) = 0;
    do
    {
      uint64_t v7 = (XlRef *)operator new(0xAuLL);
      XlRef::XlRef(v7, 1);
      (*(void (**)(XlParserVisitor *, XlRef *))(*(void *)this + 1504))(this, v7);
      XlCoordList::appendVertex((XlCoordList *)a2, (XlVertex *)v7);
      int v6 = (__int16)(v6 + 1);
    }
    while (v6 < v5);
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238B8D148(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlRef::XlRef(XlRef *this, BOOL a2)
{
  *(void *)&this->unsigned int var0 = -1;
  this->unsigned int var4 = a2;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlRef *a2)
{
  a2->unsigned int var0 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  a2->unsigned int var1 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  uint64_t v4 = **((void **)this + 2);
  if (a2->var4)
  {
    a2->int var2 = (*(uint64_t (**)(void))(v4 + 64))();
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  }
  else
  {
    a2->int var2 = (*(uint64_t (**)(void))(v4 + 72))();
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  }
  a2->int var3 = result;
  return result;
}

void XlCoordList::appendVertex(XlCoordList *this, XlVertex *a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
  unint64_t v6 = *((void *)this + 4);
  uint64_t v4 = (char *)this + 32;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *((void *)this + 2);
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      unint64_t v14 = 0;
      uint64_t v16 = 0;
    }
    __int16 v17 = &v14[v10 & 0x7FFFFFFF8];
    double v18 = &v14[8 * v16];
    *(void *)__int16 v17 = a2;
    uint64_t v8 = v17 + 8;
    __int16 v20 = (char *)*((void *)this + 2);
    int v19 = (char *)*((void *)this + 3);
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      int v19 = (char *)*((void *)this + 2);
    }
    *((void *)this + 2) = v17;
    *((void *)this + 3) = v8;
    *((void *)this + 4) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *uint64_t v7 = a2;
    uint64_t v8 = v7 + 1;
  }
  *((void *)this + 3) = v8;
}

XlSheetPresentation *XlSheetPresentation::takeSelection(XlSheetPresentation *this, XlSelection *a2)
{
  if (a2)
  {
    int v3 = *((_DWORD *)a2 + 12);
    uint64_t v4 = (XlCoordList **)&this->var4[2];
    unint64_t v5 = &this->var4[1];
    unsigned int var4 = &this->var4[3];
    if (!v3) {
      unsigned int var4 = this->var4;
    }
    if (v3 != 1) {
      unint64_t v5 = var4;
    }
    if (v3 != 2) {
      uint64_t v4 = (XlCoordList **)v5;
    }
    uint64_t v7 = *v4;
    if (*v4)
    {
      if ((__int16)((*((_DWORD *)a2 + 6) - *((_DWORD *)a2 + 4)) >> 3) >= 1)
      {
        signed int v8 = 0;
        do
        {
          MergeRegion = (XlVertex *)XlMerge::getMergeRegion((XlMerge *)a2, v8);
          XlCoordList::appendVertex(v7, MergeRegion);
          ++v8;
        }
        while (v8 < (__int16)((*((_DWORD *)a2 + 6) - *((_DWORD *)a2 + 4)) >> 3));
      }
      *((unsigned char *)a2 + 52) = 0;
      unint64_t v10 = *(uint64_t (**)(XlSelection *))(*(void *)a2 + 8);
      return (XlSheetPresentation *)v10(a2);
    }
    else if (v3 == 2)
    {
      this->var4[2] = a2;
    }
    else if (v3 == 1)
    {
      this->var4[1] = a2;
    }
    else if (v3)
    {
      this->var4[3] = a2;
    }
    else
    {
      this->var4[0] = a2;
    }
  }
  return this;
}

void sub_238B8D5C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unsigned int v12 = v11;

  _Unwind_Resume(a1);
}

void XlSheetPresentationTable::~XlSheetPresentationTable(XlSheetPresentationTable *this)
{
  *(void *)this = &unk_26EBE2FA8;
  XlSheetPresentationTable::reset(this);
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  XlSheetPresentationTable::~XlSheetPresentationTable(this);
  JUMPOUT(0x23EC997B0);
}

void XlSheetPresentation::~XlSheetPresentation(XlSheetPresentation *this)
{
  this->unsigned int var0 = (void **)&unk_26EBE2F70;
  XlSheetPresentation::reset(this);
  JUMPOUT(0x23EC997B0);
}

{
  this->unsigned int var0 = (void **)&unk_26EBE2F70;
  XlSheetPresentation::reset(this);
}

XlSelection *XlSheetPresentation::reset(XlSheetPresentation *this)
{
  unsigned int var1 = this->var1;
  if (var1) {
    (*((void (**)(XlWindow2 *))var1->var0 + 1))(var1);
  }
  this->unsigned int var1 = 0;
  int var3 = this->var3;
  if (var3) {
    (*(void (**)(XlPane *))(*(void *)var3 + 8))(var3);
  }
  this->int var3 = 0;
  int var2 = this->var2;
  if (var2) {
    (*(void (**)(XlScl *))(*(void *)var2 + 8))(var2);
  }
  uint64_t v5 = 0;
  this->int var2 = 0;
  unsigned int var4 = this->var4;
  do
  {
    uint64_t result = var4[v5];
    if (result) {
      uint64_t result = (XlSelection *)(*(uint64_t (**)(XlSelection *))(*(void *)result + 8))(result);
    }
    var4[v5++] = 0;
  }
  while (v5 != 4);
  return result;
}

void XlWindow2::~XlWindow2(XlWindow2 *this)
{
}

void XlSelection::~XlSelection(XlSelection *this)
{
  XlSelection::~XlSelection(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBE1300;
  if (*((unsigned char *)this + 52))
  {
    XlSelection::clearSelectionAreas(this);
    uint64_t v2 = (void *)*((void *)this + 2);
    if (!v2) {
      return;
    }
  }
  else
  {
    uint64_t v2 = (void *)*((void *)this + 2);
    *((void *)this + 3) = v2;
    if (!v2) {
      return;
    }
  }
  *((void *)this + 3) = v2;
  operator delete(v2);
}

XlSelection *XlSelection::clearSelectionAreas(XlSelection *this)
{
  uint64_t v1 = this;
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *((void *)this + 3);
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(XlSelection **)(v2 + 8 * v4);
      if (this)
      {
        this = (XlSelection *)MEMORY[0x23EC997B0](this, 0x1000C400EA6A39BLL);
        uint64_t v2 = *((void *)v1 + 2);
        uint64_t v3 = *((void *)v1 + 3);
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  *((void *)v1 + 3) = v2;
  return this;
}

void sub_238B8DA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v11 = v10;

  XlMergeTable::~XlMergeTable((XlMergeTable *)&a9);
  _Unwind_Resume(a1);
}

uint64_t XlBinaryReader::read(XlBinaryReader *this, XlMergeTable *a2)
{
  uint64_t result = XlMergeTable::setDefault(a2);
  uint64_t v5 = *((void *)this + 37);
  if (((*((void *)this + 38) - v5) & 0x3FFFFFFFCLL) != 0)
  {
    unint64_t v6 = 0;
    do
    {
      (*(void (**)(void, void, void))(**((void **)this + 164) + 16))(*((void *)this + 164), *(unsigned int *)(v5 + 4 * v6), 0);
      XlHeader::XlHeader(&v11);
      XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v11, *((unsigned char *)this + 1320));
      uint64_t result = *((void *)this + 163);
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      *((void *)this + 163) = 0;
      if (v11.var1 != 229) {
        break;
      }
      do
      {
        uint64_t v7 = (XlMerge *)operator new(0x30uLL);
        XlMerge::XlMerge(v7, &v11);
        *((void *)this + 163) = v7;
        if (v7) {
        (*(void (**)(void, XlMerge *))(**((void **)this + 167) + 96))(*((void *)this + 167), v7);
        }
        if ((*((_DWORD *)v7 + 6) - *((_DWORD *)v7 + 4)) << 13 >= 0x10000)
        {
          signed int v8 = 0;
          do
          {
            MergeRegion = (XlRecord *)XlMerge::getMergeRegion(v7, v8);
            XlChangeHistory::appendChangeLogEntry(a2, MergeRegion);
            ++v8;
          }
          while (v8 < (__int16)((*((_DWORD *)v7 + 6) - *((_DWORD *)v7 + 4)) >> 3));
        }
        *((unsigned char *)v7 + 40) = 0;
        uint64_t v10 = *((void *)this + 163);
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        }
        *((void *)this + 163) = 0;
        uint64_t result = XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v11, *((unsigned char *)this + 1320));
      }
      while (v11.var1 == 229);
      ++v6;
      uint64_t v5 = *((void *)this + 37);
    }
    while (v6 < ((unint64_t)(*((void *)this + 38) - v5) >> 2));
  }
  return result;
}

void sub_238B8DC90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlMergeTable::clear(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 8);
  uint64_t v3 = *(void *)(this + 16);
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void *)(v2 + 8 * v4);
      if (this)
      {
        this = MEMORY[0x23EC997B0](this, 0x1000C400EA6A39BLL);
        uint64_t v2 = *(void *)(v1 + 8);
        uint64_t v3 = *(void *)(v1 + 16);
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  *(void *)(v1 + 16) = v2;
  return this;
}

void XlMergeTable::~XlMergeTable(XlMergeTable *this)
{
  *(void *)this = &unk_26EBE2BA8;
  XlMergeTable::clear((uint64_t)this);
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  XlMergeTable::~XlMergeTable(this);
  JUMPOUT(0x23EC997B0);
}

void sub_238B8DEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  XlConditionalFormatTable::~XlConditionalFormatTable((XlConditionalFormatTable *)&a9);
  _Unwind_Resume(a1);
}

void *XlBinaryReader::read(XlBinaryReader *this, XlConditionalFormatTable *a2)
{
  uint64_t result = XlConditionalFormatTable::clear(a2);
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0) {
    uint64_t result = XlBinaryReader::setSheet(this, 0);
  }
  if ((*((_DWORD *)this + 65) & 0x80000000) == 0)
  {
    (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
    XlHeader::XlHeader(&v14);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v14, *((unsigned char *)this + 1320));
    uint64_t result = (void *)*((void *)this + 163);
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*(void *)result + 8))(result);
    }
    *((void *)this + 163) = 0;
    if (v14.var1 == 432)
    {
      do
      {
        uint64_t v5 = (XlCondFmt *)operator new(0x38uLL);
        XlCondFmt::XlCondFmt(v5, &v14);
        *((void *)this + 163) = v5;
        if (v5) {
        else
        }
          unint64_t v6 = 0;
        (*(void (**)(void, XlChartPicF *))(**((void **)this + 167) + 520))(*((void *)this + 167), v6);
        uint64_t v7 = (XlChartSeriesFormat *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 10);
        p_unsigned int var0 = (void **)&v7->var0;
        if (v7)
        {
          XlChartSeriesFormat::takePictureFormat(v7, v6);
          *((void *)this + 163) = 0;
          XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v14, *((unsigned char *)this + 1320));
          while (v14.var1 == 433)
          {
            uint64_t v9 = (XlCf *)operator new(0x38uLL);
            XlCf::XlCf(v9, &v14);
            *((void *)this + 163) = v9;
            uint64_t v10 = *((void *)this + 167);
            if (v9) {
            else
            }
              XlHeader v11 = 0;
            (*(void (**)(uint64_t, void *))(*(void *)v10 + 512))(v10, v11);
            uint64_t v15 = *((void *)this + 163);
            CsSimpleHeapVector<XlRecord>::pushBack(p_var0 + 1, &v15);
            if (v15) {
              (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
            }
            *((void *)this + 163) = 0;
            XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v14, *((unsigned char *)this + 1320));
          }
          XlChangeHistory::appendChangeLogEntry(a2, (XlRecord *)p_var0);
        }
      }
      while (v14.var1 == 432);
      uint64_t v12 = *((void *)this + 164);
      RecordDataint Offset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
      return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v12 + 16))(v12, -RecordDataOffset, 1);
    }
    else
    {
      *((_DWORD *)this + 65) = -1;
    }
  }
  return result;
}

void sub_238B8E254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  operator delete(v10);
  _Unwind_Resume(a1);
}

void XlConditionalFormatTable::~XlConditionalFormatTable(XlConditionalFormatTable *this)
{
  *(void *)this = &unk_26EBE2448;
  XlConditionalFormatTable::clear(this);
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  XlConditionalFormatTable::~XlConditionalFormatTable(this);
  JUMPOUT(0x23EC997B0);
}

void sub_238B8E544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(a10);
  _Unwind_Resume(a1);
}

void *XlBinaryReader::read(XlBinaryReader *this, XlHyperlinkTable *a2)
{
  uint64_t v3 = (void **)((char *)a2 + 8);
  uint64_t result = CsSimpleHeapVector<XlRecord>::clear((void *)a2 + 1);
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0) {
    uint64_t result = XlBinaryReader::setSheet(this, 0);
  }
  if ((*((_DWORD *)this + 64) & 0x80000000) == 0)
  {
    (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
    XlHeader::XlHeader(&v14);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v14, *((unsigned char *)this + 1320));
    uint64_t result = (void *)*((void *)this + 163);
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*(void *)result + 8))(result);
    }
    *((void *)this + 163) = 0;
    if (v14.var1 == 440)
    {
      do
      {
        uint64_t v5 = (XlHLink *)operator new(0x50uLL);
        XlHLink::XlHLink(v5, &v14);
        *((void *)this + 163) = v5;
        uint64_t v6 = *((void *)this + 167);
        if (v5) {
        else
        }
          uint64_t v7 = 0;
        (*(void (**)(uint64_t, void *))(*(void *)v6 + 744))(v6, v7);
        uint64_t v15 = *((void *)this + 163);
        CsSimpleHeapVector<XlRecord>::pushBack(v3, &v15);
        if (v15) {
          (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        }
        *((void *)this + 163) = 0;
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v14, *((unsigned char *)this + 1320));
        int var1 = (unsigned __int16)v14.var1;
        if (v14.var1 == 2048)
        {
          uint64_t v9 = (XlHLinkToolTip *)operator new(0x20uLL);
          XlHLinkToolTip::XlHLinkToolTip(v9, &v14);
          *((void *)this + 163) = v9;
          uint64_t v10 = *((void *)this + 167);
          if (v9) {
          else
          }
            XlHeader v11 = 0;
          (*(void (**)(uint64_t, void *))(*(void *)v10 + 1456))(v10, v11);
          uint64_t v15 = *((void *)this + 163);
          CsSimpleHeapVector<XlRecord>::pushBack(v3, &v15);
          if (v15) {
            (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
          }
          *((void *)this + 163) = 0;
          XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v14, *((unsigned char *)this + 1320));
          int var1 = (unsigned __int16)v14.var1;
        }
      }
      while (var1 == 440);
      uint64_t v12 = *((void *)this + 164);
      RecordDataint Offset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
      return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v12 + 16))(v12, -RecordDataOffset, 1);
    }
    else
    {
      *((_DWORD *)this + 64) = -1;
    }
  }
  return result;
}

void sub_238B8E908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    XlChartBinaryReader::scanChartProperties();
  }
  _Unwind_Resume(exception_object);
}

void *XlBinaryReader::read(XlBinaryReader *this, XlCustomViewTable *a2)
{
  uint64_t result = XlConditionalFormatTable::clear(a2);
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0) {
    uint64_t result = XlBinaryReader::setSheet(this, 0);
  }
  if ((*((_DWORD *)this + 66) & 0x80000000) == 0)
  {
    (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
    XlHeader::XlHeader(&v13);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v13, *((unsigned char *)this + 1320));
    uint64_t result = (void *)*((void *)this + 163);
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*(void *)result + 8))(result);
    }
    *((void *)this + 163) = 0;
    if (v13.var1 == 426)
    {
      do
      {
        uint64_t v5 = (void **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 15);
        uint64_t v7 = XlRecordFactory::createRecord(&v13, v6);
        *((void *)this + 163) = v7;
        (*(void (**)(XlEof *, void))(*(void *)v7 + 16))(v7, *((void *)this + 167));
        uint64_t v14 = *((void *)this + 163);
        CsSimpleHeapVector<XlRecord>::pushBack(v5 + 1, &v14);
        while (1)
        {
          if (v14) {
            (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
          }
          *((void *)this + 163) = 0;
          XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v13, *((unsigned char *)this + 1320));
          if (v13.var1 == 427) {
            break;
          }
          uint64_t v9 = XlRecordFactory::createRecord(&v13, v8);
          *((void *)this + 163) = v9;
          (*(void (**)(XlEof *, void))(*(void *)v9 + 16))(v9, *((void *)this + 167));
          uint64_t v14 = *((void *)this + 163);
          CsSimpleHeapVector<XlRecord>::pushBack(v5 + 1, &v14);
        }
        uint64_t v10 = XlRecordFactory::createRecord(&v13, v8);
        *((void *)this + 163) = v10;
        (*(void (**)(XlEof *, void))(*(void *)v10 + 16))(v10, *((void *)this + 167));
        uint64_t v14 = *((void *)this + 163);
        CsSimpleHeapVector<XlRecord>::pushBack(v5 + 1, &v14);
        if (v14) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
        *((void *)this + 163) = 0;
        XlChangeHistory::appendChangeLogEntry(a2, (XlRecord *)v5);
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v13, *((unsigned char *)this + 1320));
      }
      while (v13.var1 == 426);
      uint64_t v11 = *((void *)this + 164);
      RecordDataint Offset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
      return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v11 + 16))(v11, -RecordDataOffset, 1);
    }
    else
    {
      *((_DWORD *)this + 66) = -1;
    }
  }
  return result;
}

void sub_238B8EC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void XlScenarioTable::XlScenarioTable(XlScenarioTable *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = &unk_26EBE2E90;
}

void *XlBinaryReader::read(XlBinaryReader *this, XlScenarioTable *a2)
{
  uint64_t v3 = (void **)((char *)a2 + 8);
  uint64_t result = CsSimpleHeapVector<XlRecord>::clear((void *)a2 + 1);
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0) {
    uint64_t result = XlBinaryReader::setSheet(this, 0);
  }
  if ((*((_DWORD *)this + 63) & 0x80000000) == 0)
  {
    (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
    XlHeader::XlHeader(&v13);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v13, *((unsigned char *)this + 1320));
    uint64_t result = (void *)*((void *)this + 163);
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*(void *)result + 8))(result);
    }
    *((void *)this + 163) = 0;
    if (v13.var1 == 174)
    {
      uint64_t v5 = (XlScenMan *)operator new(0x30uLL);
      XlScenMan::XlScenMan(v5, &v13);
      *((void *)this + 163) = v5;
      uint64_t v6 = *((void *)this + 167);
      if (v5) {
      else
      }
        uint64_t v7 = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v6 + 992))(v6, v7);
      uint64_t v14 = *((void *)this + 163);
      CsSimpleHeapVector<XlRecord>::pushBack(v3, &v14);
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
      *((void *)this + 163) = 0;
      XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v13, *((unsigned char *)this + 1320));
      while (v13.var1 == 175)
      {
        signed int v8 = (XlScenario *)operator new(0x78uLL);
        XlScenario::XlScenario(v8, &v13);
        *((void *)this + 163) = v8;
        uint64_t v9 = *((void *)this + 167);
        if (v8) {
        else
        }
          uint64_t v10 = 0;
        (*(void (**)(uint64_t, void *))(*(void *)v9 + 984))(v9, v10);
        uint64_t v14 = *((void *)this + 163);
        CsSimpleHeapVector<XlRecord>::pushBack(v3, &v14);
        if (v14) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
        *((void *)this + 163) = 0;
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v13, *((unsigned char *)this + 1320));
      }
      uint64_t v11 = *((void *)this + 164);
      RecordDataint Offset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
      return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v11 + 16))(v11, -RecordDataOffset, 1);
    }
    else
    {
      *((_DWORD *)this + 63) = -1;
    }
  }
  return result;
}

void sub_238B8EFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    XlChartBinaryReader::scanChartProperties();
  }
  _Unwind_Resume(exception_object);
}

void XlDataValidityTable::XlDataValidityTable(XlDataValidityTable *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(void *)this = &unk_26EBE24F0;
}

void *XlBinaryReader::read(XlBinaryReader *this, XlChartSeriesFormat *a2)
{
  p_int var1 = (void **)&a2->var1;
  uint64_t result = CsSimpleHeapVector<XlRecord>::clear(&a2->var1);
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0) {
    uint64_t result = XlBinaryReader::setSheet(this, 0);
  }
  if ((*((_DWORD *)this + 60) & 0x80000000) == 0)
  {
    (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
    XlHeader::XlHeader(&v12);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v12, *((unsigned char *)this + 1320));
    uint64_t result = (void *)*((void *)this + 163);
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*(void *)result + 8))(result);
    }
    *((void *)this + 163) = 0;
    if (v12.var1 == 434)
    {
      uint64_t v6 = (XlDVal *)operator new(0x28uLL);
      XlDVal::XlDVal(v6, &v12);
      *((void *)this + 163) = v6;
      if (v6) {
      (*(void (**)(void, XlDVal *))(**((void **)this + 167) + 616))(*((void *)this + 167), v6);
      }
      XlChartSeriesFormat::takePictureFormat(a2, (XlChartPicF *)v6);
      *((void *)this + 163) = 0;
      XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v12, *((unsigned char *)this + 1320));
      while (v12.var1 == 446)
      {
        uint64_t v7 = (XlDV *)operator new(0x70uLL);
        XlDV::XlDV(v7, &v12);
        *((void *)this + 163) = v7;
        uint64_t v8 = *((void *)this + 167);
        if (v7) {
        else
        }
          uint64_t v9 = 0;
        (*(void (**)(uint64_t, void *))(*(void *)v8 + 608))(v8, v9);
        if (*((_DWORD *)v7 + 4) == 3) {
          LOBYTE(a2->var5) = 1;
        }
        uint64_t v13 = *((void *)this + 163);
        CsSimpleHeapVector<XlRecord>::pushBack(p_var1, &v13);
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        }
        *((void *)this + 163) = 0;
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v12, *((unsigned char *)this + 1320));
      }
      uint64_t v10 = *((void *)this + 164);
      RecordDataint Offset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
      return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v10 + 16))(v10, -RecordDataOffset, 1);
    }
    else
    {
      *((_DWORD *)this + 60) = -1;
    }
  }
  return result;
}

void sub_238B8F350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t XlBinaryReader::read(XlBinaryReader *this, XlSortInfo *a2)
{
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0) {
    XlBinaryReader::setSheet(this, 0);
  }
  return XlSortInfo::operator=((uint64_t)a2, (uint64_t)this + 664);
}

uint64_t XlSortInfo::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
    *(unsigned char *)(a1 + 14) = *(unsigned char *)(a2 + 14);
    OcText::operator=(a1 + 16, a2 + 16);
    OcText::operator=(a1 + 64, a2 + 64);
    OcText::operator=(a1 + 112, a2 + 112);
  }
  return a1;
}

void XlSortInfo::~XlSortInfo(XlSortInfo *this)
{
  *(void *)this = &unk_26EBE2FE0;
  uint64_t v2 = (OcText *)((char *)this + 16);
  OcText::~OcText((OcText *)((char *)this + 112));
  OcText::~OcText((OcText *)((char *)this + 64));
  OcText::~OcText(v2);
}

{
  uint64_t vars8;

  XlSortInfo::~XlSortInfo(this);
  JUMPOUT(0x23EC997B0);
}

void XlDataValidityTable::~XlDataValidityTable(void **this)
{
  *this = &unk_26EBE24F0;
  XlConditionalFormat::reset((XlConditionalFormat *)this);
  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
}

{
  uint64_t vars8;

  XlDataValidityTable::~XlDataValidityTable(this);
  JUMPOUT(0x23EC997B0);
}

void *XlConditionalFormat::reset(XlConditionalFormat *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 4) = 0;
  return CsSimpleHeapVector<XlRecord>::clear((void *)this + 1);
}

void XlScenarioTable::~XlScenarioTable(XlScenarioTable *this)
{
  *(void *)this = &unk_26EBE2E90;
  uint64_t v2 = (void **)((char *)this + 8);
  CsSimpleHeapVector<XlRecord>::clear((void *)this + 1);
  *(void *)this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(v2);
}

{
  uint64_t vars8;

  XlScenarioTable::~XlScenarioTable(this);
  JUMPOUT(0x23EC997B0);
}

void XlCustomViewTable::~XlCustomViewTable(XlCustomViewTable *this)
{
  *(void *)this = &unk_26EBE2480;
  XlConditionalFormatTable::clear(this);
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  XlCustomViewTable::~XlCustomViewTable(this);
  JUMPOUT(0x23EC997B0);
}

void XlSheetBackgroundInfo::XlSheetBackgroundInfo(XlSheetBackgroundInfo *this)
{
  *(void *)this = &unk_26EBE2EC8;
  *(_OWORD *)((char *)this + 8) = xmmword_238EE0D60;
}

void XlBinaryReader::read(XlBinaryReader *this, XlSheetBackgroundInfo *a2)
{
  v4.n128_f64[0] = XlSheetBackgroundInfo::clear(a2);
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0) {
    XlBinaryReader::setSheet(this, 0);
  }
  if ((*((_DWORD *)this + 59) & 0x80000000) == 0)
  {
    (*(void (**)(void, __n128))(**((void **)this + 164) + 16))(*((void *)this + 164), v4);
    XlHeader::XlHeader(&v8);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v8, *((unsigned char *)this + 1320));
    uint64_t v5 = *((void *)this + 163);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    *((void *)this + 163) = 0;
    if (v8.var1 == 233)
    {
      uint64_t v6 = (XlImData *)operator new(0x28uLL);
      XlImData::XlImData(v6, &v8);
      *((void *)this + 163) = v6;
      if (v6) {
      (*(void (**)(void, XlImData *))(**((void **)this + 167) + 88))(*((void *)this + 167), v6);
      }
      *((_DWORD *)a2 + 5) = *((_DWORD *)v6 + 8);
      *(void *)((char *)a2 + 12) = *((void *)v6 + 3);
      *((_DWORD *)a2 + 2) = *((_DWORD *)this + 59);
      uint64_t v7 = *((void *)this + 163);
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
      *((void *)this + 163) = 0;
    }
    else
    {
      *((_DWORD *)this + 59) = -1;
    }
  }
}

void sub_238B8F834(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double XlSheetBackgroundInfo::clear(XlSheetBackgroundInfo *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = xmmword_238EE0D60;
  return result;
}

double XlBinaryReader::read(XlBinaryReader *this, XlWorksheetProtection *a2)
{
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0) {
    XlBinaryReader::setSheet(this, 0);
  }
  *(void *)&double result = XlWorksheetProtection::operator=((uint64_t)a2, (uint64_t)this + 600).n128_u64[0];
  return result;
}

__n128 XlWorksheetProtection::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    *(_WORD *)(a1 + 26) = *(_WORD *)(a2 + 26);
    __n128 result = *(__n128 *)(a2 + 8);
    *(__n128 *)(a1 + 8) = result;
    *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  }
  return result;
}

void XlSheetInfoTable::~XlSheetInfoTable(XlSheetInfoTable *this)
{
  XlSheetInfoTable::~XlSheetInfoTable(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBE2F38;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 4) = 0;
  *(void *)this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector((void **)this + 1);
}

void XlBoundSheet::~XlBoundSheet(XlBoundSheet *this)
{
  *(void *)this = &unk_26EBDED68;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBDED68;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
}

void XlEshObjectFactory::~XlEshObjectFactory(XlEshObjectFactory *this)
{
}

void XlLinkTable::~XlLinkTable(XlLinkTable *this)
{
  XlLinkTable::~XlLinkTable(this);
  JUMPOUT(0x23EC997B0);
}

{
  XlLinkLookupTable *v2;
  void *v3;

  *(void *)this = &unk_26EBE2B70;
  uint64_t v2 = (XlLinkTable *)((char *)this + 8);
  XlLinkLookupTable::clearLookupTable((uint64_t)this + 8);
  XlLinkTable::clearLinkTable(this);
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
  XlLinkLookupTable::~XlLinkLookupTable(v2);
}

void XlLinkLookupTable::~XlLinkLookupTable(XlLinkLookupTable *this)
{
  *(void *)this = &unk_26EBE2B00;
  XlLinkLookupTable::clearLookupTable((uint64_t)this);
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  XlLinkLookupTable::~XlLinkLookupTable(this);
  JUMPOUT(0x23EC997B0);
}

void XlNameTable::~XlNameTable(void **this)
{
  XlNameTable::~XlNameTable(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t i;

  *this = &unk_26EBDB1F0;
  for (int i = 82; i != -2; i -= 6)
    OcText::~OcText((OcText *)&this[i]);
  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
}

void XlFormulaProcessor::~XlFormulaProcessor(XlFormulaProcessor *this)
{
  XlFormulaProcessor::~XlFormulaProcessor(this);
  JUMPOUT(0x23EC997B0);
}

{
  XlFormulaParser *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t i;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  *(void *)this = &unk_26EBE3AE0;
  uint64_t v2 = (XlFormulaParser *)*((void *)this + 1);
  if (v2)
  {
    XlFormulaParser::~XlFormulaParser(v2);
    MEMORY[0x23EC997B0]();
  }
  *((void *)this + 1) = 0;
  uint64_t v3 = *((void *)this + 18);
  if (v3) {
    MEMORY[0x23EC99790](v3, 0x1000C80BDFB0063);
  }
  *((void *)this + 18) = 0;
  __n128 v4 = *((void *)this + 2);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 2) = 0;
  uint64_t v5 = *((void *)this + 19);
  if (v5) {
    MEMORY[0x23EC99790](v5, 0x1000C8077774924);
  }
  *((void *)this + 19) = 0;
  uint64_t v6 = *((unsigned int *)this + 18);
  if (v6)
  {
    for (int i = 0; i < v6; ++i)
    {
      XlHeader v8 = *((void *)this + 3);
      uint64_t v9 = *(void *)(v8 + 8 * i);
      if (v9)
      {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        XlHeader v8 = *((void *)this + 3);
        uint64_t v6 = *((unsigned int *)this + 18);
      }
      *(void *)(v8 + 8 * i) = 0;
    }
  }
  uint64_t v10 = (void *)*((void *)this + 3);
  *((void *)this + 4) = v10;
  if (v10) {
    operator delete(v10);
  }
}

void XlFormulaParser::~XlFormulaParser(XlPtg **this)
{
  uint64_t v2 = *this;
  if (v2)
  {
    (*((void (**)(XlPtg *, void))v2->var0 + 19))(v2, 0);
    if (*this) {
      (*((void (**)(XlPtg *))(*this)->var0 + 1))(*this);
    }
    *this = 0;
  }
  uint64_t v3 = this[5];
  if (v3)
  {
    XlPtg::~XlPtg(v3);
    MEMORY[0x23EC997B0]();
  }
  this[5] = 0;
  ChStack<XlPtg *>::~ChStack((uint64_t *)this + 1);
}

uint64_t *ChStack<XlPtg *>::~ChStack(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x20C8093837F09);
  }
  *a1 = 0;
  uint64_t v3 = a1[1];
  if (v3) {
    MEMORY[0x23EC99790](v3, 0x20C8093837F09);
  }
  *a1 = 0;
  a1[1] = 0;
  *((_DWORD *)a1 + 6) = 0;
  a1[2] = 0;
  return a1;
}

void sub_238B901A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B90274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B903B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B9083C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238B909B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B90AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B90BE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B90E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238B90FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B91250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _Unwind_Resume(a1);
}

void sub_238B91384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B9152C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_DWORD *typeForEDCell(_DWORD *result)
{
  if (result) {
    return (_DWORD *)(*result >> 29);
  }
  return result;
}

id stringValueForEDCell(const EDCellHeader *a1, EDResources *a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = stringIndexValueForEDCell(a1);
  if (v4 == -1)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = [(EDResources *)v3 strings];
    uint64_t v6 = [v5 objectAtIndex:v4];
  }
  return v6;
}

void sub_238B915D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t stringIndexValueForEDCell(const EDCellHeader *a1)
{
  if (!a1) {
    return -1;
  }
  if (a1->var0 >> 29 != 3)
  {
    uint64_t v4 = [NSString stringWithUTF8String:"NSUInteger stringIndexValueForEDCell(const EDCellHeader *)"];
    uint64_t v5 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/DOM/EDCell.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v4 file:v5 lineNumber:233 isFatal:0 description:"Invalid Cell Type!"];

    +[OITSUAssertionHandler logBacktraceThrottled];
    return -1;
  }
  uint64_t v1 = 12;
  if ((a1->var0 & 0x10000000) == 0) {
    uint64_t v1 = 8;
  }
  uint64_t v2 = *(unsigned int *)((char *)&a1->var0 + v1);
  if (v2 == -1) {
    return -1;
  }
  else {
    return v2;
  }
}

void sub_238B916B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B91844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B919B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B91AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B91B0C()
{
}

void sub_238B91C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B91D60(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_238B91EDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B91FD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B921C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B92310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B92618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, void *a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_238B9274C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B92AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238B92CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238B92E60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B9330C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_238B93508(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_238B9379C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const EDCellHeader *styleForEDCell(EDCellHeader *a1, EDResources *a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    uint64_t v5 = [(EDResources *)v3 styles];
    uint64_t v6 = v5;
    if (a1->var1 == -1) {
      uint64_t var1 = -1;
    }
    else {
      uint64_t var1 = a1->var1;
    }
    a1 = [v5 objectAtIndex:var1];
  }
  return a1;
}

void sub_238B93860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B939F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B93B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B93C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B93DC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B93E88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B93FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B9407C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B942C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B94434(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B948B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B94A00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B94AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B94D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B95054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B9518C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B95248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B953BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B95480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B95510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B958DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B95974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B95B18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B95BA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B95C28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double numberValueForEDCell(const EDCellHeader *a1)
{
  double v1 = 0.0;
  if (a1)
  {
    if (a1->var0 >> 29 == 2)
    {
      if ((a1->var0 & 0x10000000) != 0) {
        return *(double *)&a1[1].var1;
      }
      else {
        return *(double *)&a1[1];
      }
    }
    else
    {
      uint64_t v2 = [NSString stringWithUTF8String:"double numberValueForEDCell(const EDCellHeader *)"];
      uint64_t v3 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/DOM/EDCell.mm"];
      +[OITSUAssertionHandler handleFailureInFunction:v2 file:v3 lineNumber:205 isFatal:0 description:"Invalid Cell Type!"];

      +[OITSUAssertionHandler logBacktraceThrottled];
    }
  }
  return v1;
}

void sub_238B95D9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B95FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B960C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B96228(_Unwind_Exception *a1)
{
  objc_sync_exit(v3);

  _Unwind_Resume(a1);
}

void sub_238B962EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B963B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B96450(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_238B9653C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238B965E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_238B96720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B968B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B969B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  XlHeader v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238B96AD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B96D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B96DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)EDWorkbook;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_238B96FA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B97000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)EDRowBlocks;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_238B97078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)EDRowBlock;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_238B97254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B972AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)EDSheet;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void XlChartObjectFactory::~XlChartObjectFactory(XlObjectFactory *this)
{
  XlObjectFactory::~XlObjectFactory(this);
  JUMPOUT(0x23EC997B0);
}

void XlObjectFactory::~XlObjectFactory(XlObjectFactory *this)
{
  this->unsigned int var0 = (void **)&unk_26EBE2BE0;
  uint64_t var1 = this->var1;
  if (var1) {
    (*((void (**)(XlEshObjectFactory *))var1->var0 + 1))(var1);
  }
  this->uint64_t var1 = 0;
}

{
  XlEshObjectFactory *var1;

  this->unsigned int var0 = (void **)&unk_26EBE2BE0;
  uint64_t var1 = this->var1;
  if (var1) {
    (*((void (**)(XlEshObjectFactory *))var1->var0 + 1))(var1);
  }
  this->uint64_t var1 = 0;
}

{
  XlEshObjectFactory *var1;
  uint64_t vars8;

  this->unsigned int var0 = (void **)&unk_26EBE2BE0;
  uint64_t var1 = this->var1;
  if (var1) {
    (*((void (**)(XlEshObjectFactory *))var1->var0 + 1))(var1);
  }
  this->uint64_t var1 = 0;
  JUMPOUT(0x23EC997B0);
}

void XlChartBinaryReader::~XlChartBinaryReader(XlChartBinaryReader *this)
{
  OcReader::~OcReader(v1 + 125);
  JUMPOUT(0x23EC997B0);
}

{
  OcReader *v1;

  OcReader::~OcReader(v1 + 125);
}

void XlChartBinaryReader::~XlChartBinaryReader(XlChartBinaryReader *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *((void *)this + 1) = &unk_26EBDDB10;
  *((void *)this + 2) = a2[6];
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[7];
  uint64_t v5 = (void *)*((void *)this + 246);
  if (v5)
  {
    *((void *)this + 247) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 243);
  if (v6)
  {
    *((void *)this + 244) = v6;
    operator delete(v6);
  }
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 1904, *((void **)this + 239));
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 1880, *((void **)this + 236));
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 1848, *((void **)this + 232));
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 1824, *((void **)this + 229));
  uint64_t v7 = (void *)*((void *)this + 225);
  if (v7)
  {
    *((void *)this + 226) = v7;
    operator delete(v7);
  }
  XlHeader v8 = (void *)*((void *)this + 222);
  if (v8)
  {
    *((void *)this + 223) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 217);
  if (v9)
  {
    *((void *)this + 218) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 210);
  if (v10)
  {
    *((void *)this + 211) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 202);
  if (v11)
  {
    *((void *)this + 203) = v11;
    operator delete(v11);
  }
  *((void *)this + 172) = &unk_26EBDE7E8;
  XlCellTableInfo::~XlCellTableInfo((XlChartBinaryReader *)((char *)this + 1512));
  XlPageProperties::~XlPageProperties((XlChartBinaryReader *)((char *)this + 1400));
  XlHeader v12 = (void *)*((void *)this + 169);
  if (v12)
  {
    *((void *)this + 170) = v12;
    operator delete(v12);
  }
  XlBinaryReader::~XlBinaryReader(this, a2 + 1);
}

void XlBinaryReader::~XlBinaryReader(XlBinaryReader *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *((void *)this + 1) = &unk_26EBE3DE8;
  *((void *)this + 2) = a2[3];
  *(void *)((char *)this + *(void *)(v3 - 24)) = a2[4];
  uint64_t v4 = *((void *)this + 164);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (SsrwOORootStorage *)*((void *)this + 3);
  *((void *)this + 164) = 0;
  if (v5)
  {
    SsrwOORootStorage::~SsrwOORootStorage(v5);
    MEMORY[0x23EC997B0]();
    *((void *)this + 3) = 0;
    *((void *)this + 4) = 0;
  }
  uint64_t v6 = *((void *)this + 167);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 167) = 0;
  uint64_t v7 = *((void *)this + 163);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 163) = 0;
  uint64_t v8 = *((void *)this + 19);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *((void *)this + 19) = 0;
  uint64_t v9 = *((void *)this + 20);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *((void *)this + 20) = 0;
  uint64_t v10 = *((void *)this + 46);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  *((void *)this + 46) = 0;
  uint64_t v11 = *((void *)this + 47);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  *((void *)this + 47) = 0;
  uint64_t v12 = *((void *)this + 48);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  *((void *)this + 48) = 0;
  uint64_t v13 = *((void *)this + 52);
  uint64_t v14 = *((void *)this + 53);
  if (((v14 - v13) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(v13 + 8 * v15);
      if (v16)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        uint64_t v13 = *((void *)this + 52);
        uint64_t v14 = *((void *)this + 53);
      }
      ++v15;
    }
    while (v15 < ((unint64_t)(v14 - v13) >> 3));
  }
  *((void *)this + 53) = v13;
  *((void *)this + 38) = *((void *)this + 37);
  *((void *)this + 41) = *((void *)this + 40);
  *((void *)this + 44) = *((void *)this + 43);
  *((void *)this + 142) = &unk_26EBDE7E8;
  XlCellTableInfo::~XlCellTableInfo((XlBinaryReader *)((char *)this + 1272));
  XlPageProperties::~XlPageProperties((XlBinaryReader *)((char *)this + 1160));
  XlDocumentProperties::~XlDocumentProperties((XlBinaryReader *)((char *)this + 1016));
  XlFileProtection::~XlFileProtection((XlBinaryReader *)((char *)this + 864));
  XlSortInfo::~XlSortInfo((XlBinaryReader *)((char *)this + 664));
  XlCalculationProperties::~XlCalculationProperties((XlBinaryReader *)((char *)this + 632));
  XlWorksheetProperties::~XlWorksheetProperties((XlBinaryReader *)((char *)this + 456));
  __int16 v17 = (void *)*((void *)this + 52);
  if (v17)
  {
    *((void *)this + 53) = v17;
    operator delete(v17);
  }
  double v18 = (void *)*((void *)this + 43);
  if (v18)
  {
    *((void *)this + 44) = v18;
    operator delete(v18);
  }
  int v19 = (void *)*((void *)this + 40);
  if (v19)
  {
    *((void *)this + 41) = v19;
    operator delete(v19);
  }
  __int16 v20 = (void *)*((void *)this + 37);
  if (v20)
  {
    *((void *)this + 38) = v20;
    operator delete(v20);
  }
  XlEshBinaryReader::~XlEshBinaryReader((XlBinaryReader *)((char *)this + 40));
}

void XlChartParserVisitor::~XlChartParserVisitor(XlChartParserVisitor *this)
{
  XlParserVisitor::~XlParserVisitor(this);
  JUMPOUT(0x23EC997B0);
}

void XlParserVisitor::~XlParserVisitor(XlParserVisitor *this)
{
  *(void *)this = &unk_26EBE3118;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 3) = 0;
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    MEMORY[0x23EC99790](v3, 0x1000C80BDFB0063);
  }
  *((void *)this + 5) = 0;
  uint64_t v4 = *((void *)this + 6);
  if (v4) {
    MEMORY[0x23EC99790](v4, 0x1000C80BDFB0063);
  }
  *((void *)this + 6) = 0;
  uint64_t v5 = *((void *)this + 7);
  if (v5) {
    MEMORY[0x23EC99790](v5, 0x1000C8052888210);
  }
  *((void *)this + 7) = 0;
  uint64_t v6 = *((void *)this + 8);
  if (v6) {
    MEMORY[0x23EC99790](v6, 0x1000C8052888210);
  }
  *((void *)this + 8) = 0;
  uint64_t v7 = *((void *)this + 4);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 4) = 0;
  TSURectWithOriginAndSize((char *)this + 8);
}

{
  uint64_t vars8;

  XlParserVisitor::~XlParserVisitor(this);
  JUMPOUT(0x23EC997B0);
}

void XlStringExtractor::~XlStringExtractor(XlStringExtractor *this)
{
  XlStringExtractor::~XlStringExtractor(this);
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBE4818;
  XlStringExtractor::reset(this);
  XlString::~XlString((XlString *)((char *)this + 32));
  TSURectWithOriginAndSize((char *)this + 8);
}

uint64_t XlStringExtractor::reset(XlStringExtractor *this)
{
  uint64_t v2 = *((void *)this + 17);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8052888210);
  }
  *((void *)this + 17) = 0;
  uint64_t v3 = *((void *)this + 3);
  if (v3)
  {
    uint64_t v6 = *(void *)(v3 - 8);
    uint64_t v5 = v3 - 8;
    uint64_t v4 = v6;
    if (v6)
    {
      uint64_t v7 = 16 * v4;
      do
      {
        uint64_t v8 = *(void *)(v5 + v7);
        if (v8) {
          MEMORY[0x23EC99790](v8, 0x1000C8052888210);
        }
        *(void *)(v5 + v7) = 0;
        v7 -= 16;
      }
      while (v7);
    }
    MEMORY[0x23EC99790](v5 - 8, 0x1010C8057418832);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(void *)((char *)this + 156) = 0;
  *(void *)((char *)this + 148) = 0;
  return XlString::reset((XlString *)((char *)this + 32));
}

void XlIndex::~XlIndex(XlIndex *this)
{
  *(void *)this = &unk_26EBDFE28;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8052888210);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBDFE28;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8052888210);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
}

void XlFileProtection::~XlFileProtection(XlFileProtection *this)
{
  *(void *)this = &unk_26EBE29E0;
  uint64_t v2 = *((void *)this + 15);
  if (v2)
  {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
    *((void *)this + 15) = 0;
  }
  uint64_t v3 = *((void *)this + 17);
  if (v3) {
    MEMORY[0x23EC99790](v3, 0x1000C8077774924);
  }
  *((void *)this + 17) = 0;
  OcText::~OcText((OcText *)((char *)this + 64));
  OcText::~OcText((OcText *)((char *)this + 16));
}

{
  uint64_t vars8;

  XlFileProtection::~XlFileProtection(this);
  JUMPOUT(0x23EC997B0);
}

void XlEshBinaryReader::~XlEshBinaryReader(XlEshBinaryReader *this)
{
  uint64_t v2 = (void (**)(XlEshBinaryReader *))&unk_26EBE4600;
  *(void *)this = &unk_26EBE4600;
  uint64_t v3 = *((void *)this + 13);
  if (v3)
  {
    XlReadStgStream::finish(v3);
    uint64_t v2 = *(void (***)(XlEshBinaryReader *))this;
  }
  *((_DWORD *)this + 24) = 0;
  v2[3](this);
  uint64_t v4 = *((void *)this + 13);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 13) = 0;
  EshBinaryReader::~EshBinaryReader(this);
}

{
  uint64_t vars8;

  XlEshBinaryReader::~XlEshBinaryReader(this);
  JUMPOUT(0x23EC997B0);
}

void sub_238B97F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)EMNumberFormatter;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void XlCodeName::XlCodeName(XlCodeName *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *uint64_t v2 = &unk_26EBDEEA8;
  v2[2] = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlCodeName *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v5 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  if (v6 >= 1)
  {
    unsigned int v7 = v6;
    uint64_t v8 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v8);
    *((void *)this + 4) = v8;
    char v9 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v9, v5 + v4, *((XlString **)this + 4));
    XlBoundSheet::setName(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238B980F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlCodeName::~XlCodeName(XlCodeName *this)
{
  *(void *)this = &unk_26EBDEEA8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBDEEA8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
}

void XlLink::XlLink(XlLink *this)
{
  *(void *)this = &unk_26EBE2AC8;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_WORD *)this + 10) = 0;
  *((_DWORD *)this + 6) = 0;
  *((unsigned char *)this + 28) = 1;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  XlLinkOperandTable::XlLinkOperandTable((XlLink *)((char *)this + 80));
}

void sub_238B98218(_Unwind_Exception *exception_object)
{
  int v4 = (void *)v1[7];
  if (v4)
  {
    v1[8] = v4;
    operator delete(v4);
  }
  int v5 = *v2;
  if (*v2)
  {
    v1[5] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void XlLinkOperandTable::XlLinkOperandTable(XlLinkOperandTable *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = &unk_26EBE2B38;
  *((unsigned char *)this + 32) = 0;
  *((_DWORD *)this + 9) = 0;
  *((_DWORD *)this + 10) = 0;
}

void *XlBinaryReader::read(XlBinaryReader *this, XlLink *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 28);
  XlHeader::XlHeader(&v16);
  __n128 result = XlLink::clear(a2);
  if ((*((_DWORD *)this + 45) & 0x80000000) == 0)
  {
    (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v16, *((unsigned char *)this + 1320));
    *((void *)this + 22) = -1;
    if (v16.var1 == 430)
    {
      int v6 = (XlSupBook *)operator new(0x38uLL);
      XlSupBook::XlSupBook(v6, &v16);
      *((void *)this + 163) = v6;
      if (v6) {
      else
      }
        unsigned int v7 = 0;
      (*(void (**)(void, void *))(**((void **)this + 167) + 408))(*((void *)this + 167), v7);
      *((_DWORD *)a2 + 4) = *((_DWORD *)v7 + 12);
      *((_WORD *)a2 + 10) = *((_WORD *)v7 + 26);
      XlDXfFont::setName((XlDXfFont *)a2, *((XlString **)v7 + 2));
      if (((*((void *)v7 + 4) - *((void *)v7 + 3)) & 0x7FFFFFFF8) != 0)
      {
        unsigned int v8 = 0;
        int v9 = 0;
        do
        {
          ExternRef = (XlRef *)XlExternSheet::getExternRef((XlExternSheet *)v7, v8);
          XlCondFmt::appendCellRange(a2, ExternRef);
          unsigned int v8 = (unsigned __int16)++v9;
        }
        while (((*((void *)v7 + 4) - *((void *)v7 + 3)) >> 3) > (unsigned __int16)v9);
      }
      *((_WORD *)v7 + 27) = 0;
      uint64_t v11 = *((void *)this + 163);
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
      while (1)
      {
        *((void *)this + 163) = 0;
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v16, *((unsigned char *)this + 1320));
        int var1 = (unsigned __int16)v16.var1;
        if (v16.var1 != 35) {
          break;
        }
        uint64_t v14 = (XlExternName *)operator new(0x58uLL);
        XlExternName::XlExternName(v14, &v16);
        *((void *)this + 163) = v14;
        if (v14) {
        (*(void (**)(void, XlExternName *))(**((void **)this + 167) + 640))(*((void *)this + 167), v14);
        }
        XlSxExt::appendODBC(a2, v14);
      }
      if ((unsigned __int16)v16.var1 - 89 < 2)
      {
        *((_DWORD *)this + 44) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164))
                               - 4;
        int var1 = (unsigned __int16)v16.var1;
      }
      if ((var1 - 89) <= 1)
      {
        do
        {
          if (v4)
          {
            unint64_t v15 = XlRecordFactory::createRecord(&v16, v12);
            *((void *)this + 163) = v15;
            (*(void (**)(XlEof *, void))(*(void *)v15 + 16))(v15, *((void *)this + 167));
            XlLink::appendOperand((void **)a2, *((XlRecord **)this + 163));
            *((void *)this + 163) = 0;
            XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v16, *((unsigned char *)this + 1320));
          }
          else
          {
            *((_DWORD *)a2 + 6) = XlLink::getTotalOperandCount(a2) + 1;
            XlParserVisitor::skipAhead(*((XlParserVisitor **)this + 167), &v16, *((unsigned char *)this + 1320));
          }
        }
        while ((unsigned __int16)v16.var1 - 89 < 2);
      }
    }
    __n128 result = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 164) + 16))(*((void *)this + 164), 4294967292, 1);
    if (v16.var1 == 430)
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
      *((_DWORD *)this + 45) = result;
    }
  }
  return result;
}

void sub_238B98668(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *XlLink::clear(XlLink *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 1) = 0;
  XlLink::clearTabNames(this);
  XlLink::clearExternNames(this);
  __n128 result = CsSimpleHeapVector<XlRecord>::clear((void *)this + 11);
  *((_DWORD *)this + 6) = 0;
  return result;
}

void *XlLink::clearTabNames(void *this)
{
  double v1 = this;
  uint64_t v2 = this[4];
  if (((this[5] - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v3 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v3);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[4];
      }
      *(void *)(v2 + 8 * v3++) = 0;
      uint64_t v2 = v1[4];
    }
    while (v3 < ((unint64_t)(v1[5] - v2) >> 3));
  }
  v1[5] = v2;
  return this;
}

void *XlLink::clearExternNames(void *this)
{
  double v1 = this;
  uint64_t v2 = this[7];
  if (((this[8] - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v3 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v3);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[7];
      }
      *(void *)(v2 + 8 * v3++) = 0;
      uint64_t v2 = v1[7];
    }
    while (v3 < ((unint64_t)(v1[8] - v2) >> 3));
  }
  v1[8] = v2;
  return this;
}

void XlSupBook::XlSupBook(XlSupBook *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE15F8;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(void *)(v2 + 46) = 0;
  *(_WORD *)(v2 + 54) = 257;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSupBook *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v5 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  if (*((unsigned __int8 *)a2 + 14) <= 8u)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 8003;
  }
  *((_WORD *)a2 + 26) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  int v6 = *((_DWORD *)a2 + 2);
  unsigned int v7 = v6 - 2;
  if (v6 == 4)
  {
    if ((*(unsigned int (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2)) == 1025) {
      int v8 = 2;
    }
    else {
      int v8 = 4;
    }
    goto LABEL_9;
  }
  if (v7 < 4) {
    goto LABEL_10;
  }
  int v9 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v9);
  int v10 = v5 + v4;
  *((void *)this + 4) = v9;
  LODWORD(v9) = XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v10, v9);
  XlSupBook::setEncodedName((uint64_t)a2, *((XlString **)this + 4));
  *((void *)this + 4) = 0;
  unsigned int v11 = v7 - v9;
  unsigned int v12 = *((unsigned __int16 *)a2 + 26);
  if (!((v7 - v9) | v12))
  {
    int v8 = 3;
LABEL_9:
    *((_DWORD *)a2 + 12) = v8;
    goto LABEL_10;
  }
  *((_DWORD *)a2 + 12) = 1;
  XlSupBook::clearTabNames((uint64_t)a2);
  if (v11 >= 4 && v12 != 0)
  {
    unsigned int v15 = 0;
    do
    {
      if (v11 >= 4)
      {
        XlHeader v16 = (XlString *)operator new(0x68uLL);
        XlString::XlString(v16);
        int v17 = XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v10, v16);
        XlCrn::appendOperand(a2, (XlOper *)v16);
        v11 -= v17;
      }
      ++v15;
    }
    while (v15 < v12);
  }
LABEL_10:
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238B98A80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

XlString *XlDXfFont::setName(XlDXfFont *this, XlString *a2)
{
  __n128 result = this->var1;
  if (result) {
    __n128 result = (XlString *)(*(uint64_t (**)(XlString *))(*(void *)result + 8))(result);
  }
  this->int var1 = a2;
  return result;
}

void XlSupBook::~XlSupBook(XlSupBook *this)
{
  XlSupBook::~XlSupBook(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;
  void *v3;

  *(void *)this = &unk_26EBE15F8;
  XlSupBook::clearTabNames((uint64_t)this);
  if (*((unsigned char *)this + 55))
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  *((void *)this + 2) = 0;
  unint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
}

uint64_t XlSupBook::clearTabNames(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 54))
  {
    uint64_t v2 = *(void *)(this + 24);
    if (((*(void *)(this + 32) - v2) & 0x7FFFFFFF8) != 0)
    {
      unint64_t v3 = 0;
      do
      {
        this = *(void *)(v2 + 8 * v3);
        if (this)
        {
          this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
          uint64_t v2 = *(void *)(v1 + 24);
        }
        *(void *)(v2 + 8 * v3++) = 0;
        uint64_t v2 = *(void *)(v1 + 24);
      }
      while (v3 < ((unint64_t)(*(void *)(v1 + 32) - v2) >> 3));
    }
  }
  else
  {
    uint64_t v2 = *(void *)(this + 24);
  }
  *(void *)(v1 + 32) = v2;
  return this;
}

void XlExternSheet::XlExternSheet(XlExternSheet *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDF7E8;
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 24) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlExternSheet *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  if (*((unsigned __int8 *)a2 + 14) <= 8u)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 8003;
  }
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  if (v4)
  {
    unsigned int v5 = v4;
    for (unsigned int i = 0; i < v5; ++i)
    {
      unsigned int v7 = (XlOper *)operator new(6uLL);
      *(_DWORD *)unsigned int v7 = 0;
      *((_WORD *)v7 + 2) = 0;
      *(_WORD *)unsigned int v7 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
      *((_WORD *)v7 + 1) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
      *((_WORD *)v7 + 2) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
      XlCrn::appendOperand(a2, v7);
    }
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238B98E30(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C40274DC3F3);
  _Unwind_Resume(a1);
}

void XlExternSheet::~XlExternSheet(XlExternSheet *this)
{
  XlExternSheet::~XlExternSheet(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBDF7E8;
  XlExternSheet::clearExternRefTable((uint64_t)this);
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

uint64_t XlExternSheet::clearExternRefTable(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 16))
  {
    uint64_t v2 = *(void *)(this + 24);
    uint64_t v3 = *(void *)(this + 32);
    if (((v3 - v2) & 0x7FFFFFFF8) != 0)
    {
      unint64_t v4 = 0;
      do
      {
        this = *(void *)(v2 + 8 * v4);
        if (this)
        {
          this = MEMORY[0x23EC997B0](this, 0x1000C40274DC3F3);
          uint64_t v2 = *(void *)(v1 + 24);
          uint64_t v3 = *(void *)(v1 + 32);
        }
        ++v4;
      }
      while (v4 < ((unint64_t)(v3 - v2) >> 3));
    }
  }
  else
  {
    uint64_t v2 = *(void *)(this + 24);
  }
  *(void *)(v1 + 32) = v2;
  return this;
}

void XlName::XlName(XlName *this, XlHeader *a2)
{
  XlRecord::XlRecord((XlRecord *)this, a2);
  *(void *)uint64_t v2 = &unk_26EBE02A8;
  *(_DWORD *)(v2 + 84) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(unsigned char *)(v2 + 80) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlName *a2)
{
  *(_DWORD *)uint64_t v39 = 0;
  int v4 = a2->var1.var0 + (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int16x8_t v5 = (int16x8_t)((__n128 (*)(void))*(void *)(**((void **)this + 2) + 72))(*((void *)this + 2));
  a2->var14 = v6 & 1;
  v5.i64[0] = *(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(v6) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)&a2->var15 = vmovn_s16(v5).u32[0];
  a2->var20 = (v6 & 0x1000) != 0;
  a2->var19 = (v6 & 0x20) != 0;
  a2->var13 = (v6 >> 6) & 0x3F;
  a2->var12 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  unsigned int v7 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  unsigned int v8 = 0;
  unsigned int v9 = 0;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  a2->unsigned int var9 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  if (a2->var1.var2 >= 5u)
  {
    a2->var10 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    a2->var11 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    unsigned int v8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    unsigned int v9 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    unsigned int v10 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    unsigned int v11 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  }
  if (a2->var19)
  {
    if (a2->var1.var2 >= 9u) {
      (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 1, 1);
    }
    a2->var21 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    (*(void (**)(void, void, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), v7 - 1, 1);
  }
  else if (v7)
  {
    if (a2->var1.var2 < 9u)
    {
      *(_DWORD *)uint64_t v39 = v7;
      uint64_t v14 = operator new[](v7 + 1);
      *((void *)this + 3) = v14;
      v14[v7] = 0;
      (*(void (**)(void, void, __int16 *))(**((void **)this + 2) + 56))(*((void *)this + 2), *((void *)this + 3), v39);
      unsigned int v15 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v15);
      *((void *)this + 4) = v15;
      XlString::takeString((uint64_t)v15, *((char **)this + 3), *(unsigned int *)v39, v7, 0);
      *((void *)this + 3) = 0;
    }
    else
    {
      char v12 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
      uint64_t v13 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v13);
      *((void *)this + 4) = v13;
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v12, v4, v13);
    }
    XlBoundSheet::setName((XlBoundSheet *)a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  if (a2->var1.var2 >= 5u)
  {
    unsigned int var9 = a2->var9;
    *(_DWORD *)uint64_t v39 = var9;
    if (var9)
    {
      if (!v8 && !v9 && !v10 && !v11)
      {
        unsigned int var9 = v4 - (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
        *(_DWORD *)uint64_t v39 = var9;
      }
      int v17 = operator new[](var9);
      *((void *)this + 3) = v17;
      (*(void (**)(void, void *, __int16 *))(**((void **)this + 2) + 56))(*((void *)this + 2), v17, v39);
      XlName::setFormula(a2, *((char **)this + 3), v39[0]);
      *((void *)this + 3) = 0;
    }
    if (v8)
    {
      if (a2->var1.var2 < 9u)
      {
        *(_DWORD *)uint64_t v39 = v8;
        uint64_t v21 = operator new[](v8 + 1);
        *((void *)this + 3) = v21;
        v21[*(unsigned int *)v39] = 0;
        (*(void (**)(void, void, __int16 *))(**((void **)this + 2) + 56))(*((void *)this + 2), *((void *)this + 3), v39);
        unint64_t v22 = (XlString *)operator new(0x68uLL);
        XlString::XlString(v22);
        *((void *)this + 4) = v22;
        __int16 v20 = (XlString **)((char *)this + 32);
        XlString::takeString((uint64_t)v22, *((char **)this + 3), *(_DWORD *)v39 + 1, v8, 0);
        *((void *)this + 3) = 0;
      }
      else
      {
        char v18 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
        int v19 = (XlString *)operator new(0x68uLL);
        XlString::XlString(v19);
        *((void *)this + 4) = v19;
        __int16 v20 = (XlString **)((char *)this + 32);
        XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v8, v18, v4, v19);
      }
      XlAddMenu::setMenuItem((XlAddMenu *)a2, *v20);
      void *v20 = 0;
    }
    if (v9)
    {
      if (a2->var1.var2 < 9u)
      {
        *(_DWORD *)uint64_t v39 = v9;
        uint64_t v26 = operator new[](v9 + 1);
        *((void *)this + 3) = v26;
        v26[*(unsigned int *)v39] = 0;
        (*(void (**)(void, void, __int16 *))(**((void **)this + 2) + 56))(*((void *)this + 2), *((void *)this + 3), v39);
        uint64_t v27 = (XlString *)operator new(0x68uLL);
        XlString::XlString(v27);
        *((void *)this + 4) = v27;
        uint64_t v25 = (XlString **)((char *)this + 32);
        XlString::takeString((uint64_t)v27, *((char **)this + 3), *(_DWORD *)v39 + 1, v9, 0);
      }
      else
      {
        char v23 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
        unsigned int v24 = (XlString *)operator new(0x68uLL);
        XlString::XlString(v24);
        *((void *)this + 4) = v24;
        uint64_t v25 = (XlString **)((char *)this + 32);
        XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v9, v23, v4, v24);
      }
      XlAddMenu::setMenuItem((XlAddMenu *)a2, *v25);
      *uint64_t v25 = 0;
    }
    if (v10)
    {
      if (a2->var1.var2 < 9u)
      {
        *(_DWORD *)uint64_t v39 = v10;
        uint64_t v31 = operator new[](v10 + 1);
        *((void *)this + 3) = v31;
        v31[*(unsigned int *)v39] = 0;
        (*(void (**)(void, void, __int16 *))(**((void **)this + 2) + 56))(*((void *)this + 2), *((void *)this + 3), v39);
        uint64_t v32 = (XlString *)operator new(0x68uLL);
        XlString::XlString(v32);
        *((void *)this + 4) = v32;
        unint64_t v30 = (XlString **)((char *)this + 32);
        XlString::takeString((uint64_t)v32, *((char **)this + 3), *(_DWORD *)v39 + 1, v10, 0);
        *((void *)this + 3) = 0;
      }
      else
      {
        char v28 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
        unsigned int v29 = (XlString *)operator new(0x68uLL);
        XlString::XlString(v29);
        *((void *)this + 4) = v29;
        unint64_t v30 = (XlString **)((char *)this + 32);
        XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v10, v28, v4, v29);
      }
      XlAddMenu::setMenuItem((XlAddMenu *)a2, *v30);
      *unint64_t v30 = 0;
    }
    if (v11)
    {
      if (a2->var1.var2 < 9u)
      {
        *(_DWORD *)uint64_t v39 = v11;
        unsigned __int16 v36 = operator new[](v11 + 1);
        *((void *)this + 3) = v36;
        v36[*(unsigned int *)v39] = 0;
        (*(void (**)(void, void, __int16 *))(**((void **)this + 2) + 56))(*((void *)this + 2), *((void *)this + 3), v39);
        char v37 = (XlString *)operator new(0x68uLL);
        XlString::XlString(v37);
        *((void *)this + 4) = v37;
        uint64_t v35 = (XlString **)((char *)this + 32);
        XlString::takeString((uint64_t)v37, *((char **)this + 3), *(_DWORD *)v39 + 1, v11, 0);
        *((void *)this + 3) = 0;
      }
      else
      {
        char v33 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
        uint64_t v34 = (XlString *)operator new(0x68uLL);
        XlString::XlString(v34);
        *((void *)this + 4) = v34;
        uint64_t v35 = (XlString **)((char *)this + 32);
        XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v11, v33, v4, v34);
      }
      XlAddMenu::setMenuItem((XlAddMenu *)a2, *v35);
      *uint64_t v35 = 0;
    }
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238B998E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *XlName::setFormula(XlName *this, char *a2, signed __int16 a3)
{
  __n128 result = this->var7;
  if (result) {
    __n128 result = (char *)MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  this->var7 = a2;
  this->var8 = a3;
  return result;
}

uint64_t XlMerge::getMergeRegion(XlMerge *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (((unint64_t)(*((void *)this + 3) - v2) >> 3) <= a2
    || (uint64_t result = *(void *)(v2 + 8 * a2)) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  return result;
}

void sub_238B99AFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t XlLinkTable::getLink(XlLinkTable *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 6);
  if (((unint64_t)(*((void *)this + 7) - v2) >> 3) <= a2
    || (uint64_t result = *(void *)(v2 + 8 * a2)) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  return result;
}

void sub_238B99C60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlNameTable::getName(XlNameTable *this@<X0>, unsigned int a2@<W1>, OcText *a3@<X8>)
{
  uint64_t v4 = *((void *)this + 1);
  if (((unint64_t)(*((void *)this + 2) - v4) >> 3) <= a2) {
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v5 = *(void *)(v4 + 8 * a2);
  if (*(unsigned char *)(v5 + 79))
  {
    unsigned int v6 = *(unsigned __int8 *)(v5 + 84);
    if (v6 >= 0xE)
    {
      ChLogFunction("built in name index does not exist", 2, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/ObjectModel/XlNameTable.cpp", 20);
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 1003;
    }
    unsigned int v7 = (char *)this + 32;
    unsigned int v8 = (char *)this + 48 * *(unsigned __int8 *)(v5 + 84) + 32;
    int v10 = *((_DWORD *)v8 + 2);
    unsigned int v9 = v8 + 8;
    if (!v10)
    {
      unsigned int v11 = (char *)this + 48 * *(unsigned __int8 *)(v5 + 84);
      BuiltIn = XlNameTable::getBuiltIn(this, v6);
      int v13 = strlen(BuiltIn);
      OcText::setBuffer((OcText *)(v11 + 32), BuiltIn, v13 + 1);
      *((_DWORD *)v11 + 12) = v13;
      *unsigned int v9 = 1252;
    }
    uint64_t v14 = (const OcText *)&v7[48 * v6];
    goto LABEL_9;
  }
  uint64_t v15 = *(void *)(v5 + 16);
  if (v15)
  {
    uint64_t v14 = (const OcText *)(v15 + 8);
LABEL_9:
    OcText::OcText(a3, v14);
    return;
  }
  OcText::OcText(a3);
}

void OcText::OcText(OcText *this, const OcText *a2)
{
  this->unsigned int var0 = (void **)&unk_26EBDA008;
  *(void *)&this->int var1 = *(void *)&a2->var1;
  this->unsigned int var3 = a2->var3;
  HIDWORD(this->var6) = 0;
  *(void *)&this->unsigned int var4 = 0;
  *(char **)((char *)&this->var5 + 4) = 0;
  this->var7 = 1;
  unsigned int var3 = a2->var3;
  if (var3)
  {
    var5 = a2->var5;
    char isSingleByteEncoding = OcText::isSingleByteEncoding(a2->var1);
    OcText::copyBuffer(this, (const unsigned __int8 *)var5, var3 << (isSingleByteEncoding ^ 1));
  }
}

void sub_238B99FF4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t XlFormulaProcessor::setFormula(SsrwOOStream **this, void **a2, int a3, void **a4)
{
  return XlFormulaParser::setFormula(this[1], a2, a3, a4);
}

uint64_t XlFormulaParser::setFormula(SsrwOOStream *this, void **a2, int a3, void **a4)
{
  unsigned int var0 = this->var0;
  if (var0)
  {
    (*((void (**)(void **, void))*var0 + 19))(var0, 0);
    if (this->var0) {
      (*((void (**)(void **))*this->var0 + 1))(this->var0);
    }
    this->unsigned int var0 = 0;
  }
  this[6].unsigned int var0 = a2;
  LOBYTE(this[10].var0) = 0;
  if (!a2)
  {
    this[7].unsigned int var0 = (void **)0xFFFFFFFF00000000;
    XlFormulaParser::reset((XlFormulaParser *)this);
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  LODWORD(this[7].var0) = a4;
  HIDWORD(this[7].var0) = a3;
  this->unsigned int var0 = (void **)SsrwOOStream::openMemStreamForReading(this + 6, a4);
  return XlFormulaParser::reset((XlFormulaParser *)this);
}

uint64_t XlFormulaParser::reset(XlFormulaParser *this)
{
  if (*((_DWORD *)this + 6))
  {
    do
    {
      uint64_t v2 = *(XlPtg **)ChStack<XlPtg *>::top((uint64_t)this + 8);
      if (v2)
      {
        XlPtg::~XlPtg(v2);
        MEMORY[0x23EC997B0]();
      }
      *(void *)ChStack<XlPtg *>::top((uint64_t)this + 8) = 0;
      int v3 = *((_DWORD *)this + 6) - 1;
      *((_DWORD *)this + 6) = v3;
    }
    while (v3);
  }
  uint64_t v4 = (XlPtg *)*((void *)this + 5);
  if (v4)
  {
    XlPtg::~XlPtg(v4);
    MEMORY[0x23EC997B0]();
  }
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 16) = *((_DWORD *)this + 15);
  uint64_t result = (*(uint64_t (**)(void, void, void))(**(void **)this + 16))(*(void *)this, 0, 0);
  *((_DWORD *)this + 19) = 0;
  *((unsigned char *)this + 82) = 0;
  return result;
}

void sub_238B9A308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B9A504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t XlFormulaProcessor::startTokenEnum(XlFormulaParser **this)
{
  uint64_t result = XlFormulaParser::reset(this[1]);
  *((unsigned char *)this[1] + 81) = 0;
  return result;
}

XlPtg *XlFormulaProcessor::nextToken(XlFormulaParser **this)
{
  return XlFormulaParser::nextToken(this[1]);
}

XlPtg *XlFormulaParser::nextToken(XlFormulaParser *this)
{
  unsigned int v2 = *((_DWORD *)this + 6);
  if (!v2)
  {
    if (XlFormulaParser::processNextPtg((uint64_t **)this)) {
      return 0;
    }
    unsigned int v2 = *((_DWORD *)this + 6);
  }
  uint64_t v14 = 0;
  if (v2 < 2)
  {
    int v10 = (XlPtg **)ChStack<XlPtg *>::top((uint64_t)this + 8);
    ChAutoPtr<XlPtg>::setValue(&v14, *v10);
    --*((_DWORD *)this + 6);
  }
  else
  {
    int v3 = (uint64_t *)operator new(0x20uLL);
    *int v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    *((_DWORD *)v3 + 6) = 10;
    int v13 = v3;
    if (*((_DWORD *)this + 6))
    {
      do
      {
        uint64_t v4 = (void *)ChStack<XlPtg *>::top((uint64_t)this + 8);
        ChStack<XlPtg *>::push((uint64_t)v13, v4);
        int v5 = *((_DWORD *)this + 6) - 1;
        *((_DWORD *)this + 6) = v5;
      }
      while (v5);
      int v3 = v13;
    }
    unsigned int v6 = (XlPtg **)ChStack<XlPtg *>::top((uint64_t)v3);
    ChAutoPtr<XlPtg>::setValue(&v14, *v6);
    while (1)
    {
      unsigned int v7 = v13;
      int v8 = *((_DWORD *)v13 + 4) - 1;
      *((_DWORD *)v13 + 4) = v8;
      if (!v8) {
        break;
      }
      unsigned int v9 = (void *)ChStack<XlPtg *>::top((uint64_t)v7);
      ChStack<XlPtg *>::push((uint64_t)this + 8, v9);
    }
    ChAutoPtr<ChStack<XlPtg *>>::~ChAutoPtr(&v13);
  }
  unsigned int v11 = v14;
  uint64_t v14 = 0;
  ChAutoPtr<XlPtg>::~ChAutoPtr(&v14);
  return v11;
}

void sub_238B9A6E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ChAutoPtr<XlPtg>::~ChAutoPtr((XlPtg **)va);
  _Unwind_Resume(a1);
}

uint64_t XlFormulaParser::processNextPtg(uint64_t **this)
{
  char v3 = 0;
  while (2)
  {
    this[5] = 0;
    uint64_t v4 = (XlPtg **)(this + 5);
    *((_DWORD *)this + 19) = (*(uint64_t (**)(void))(**this + 40))();
    if (*this
      && (*(unsigned int (**)(uint64_t *))(**this + 176))(*this)
      && (unsigned int v5 = *((_DWORD *)this + 19), v5 < *((_DWORD *)this + 15))
      && v5 <= *((_DWORD *)this + 16))
    {
      unsigned int v6 = *this;
LABEL_7:
      if ((*(unsigned int (**)(uint64_t *))(*v6 + 176))(v6))
      {
        int v7 = (*(uint64_t (**)(void))(**this + 64))();
        switch(v7)
        {
          case 0:
            goto LABEL_23;
          case 1:
          case 2:
            uint64_t v74 = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v74, v7, 4);
            this[5] = (uint64_t *)v74;
            LastExtendedData = (unsigned __int16 *)XlPtg::getLastExtendedData(v74);
            unsigned __int16 *LastExtendedData = (*(uint64_t (**)(void))(**this + 80))();
            unsigned __int16 v64 = (*(uint64_t (**)(void))(**this + 80))();
            goto LABEL_89;
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
            PtgArea = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)PtgArea, v7);
            goto LABEL_22;
          case 21:
            PtgArea = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)PtgArea, 21);
            goto LABEL_22;
          case 22:
            PtgArea = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)PtgArea, 22);
LABEL_22:
            *uint64_t v4 = PtgArea;
            goto LABEL_162;
          case 23:
            int v95 = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v95, 23);
            this[5] = (uint64_t *)v95;
            XlFormulaParser::addPtgString((char *)this, v95, 0);
            goto LABEL_161;
          case 24:
            int v96 = (*(uint64_t (**)(void))(**this + 64))();
            unsigned int v125 = 4;
            unsigned __int16 v13 = 3001;
            char v97 = v96;
            int v98 = 0;
            switch(v96)
            {
              case 1:
              case 2:
              case 3:
              case 6:
              case 7:
              case 16:
                goto LABEL_132;
              case 10:
                int v98 = 0;
                unsigned int v125 = 13;
                goto LABEL_132;
              case 11:
                unsigned int v125 = 13;
                goto LABEL_131;
              case 12:
              case 13:
              case 14:
              case 15:
              case 29:
LABEL_131:
                int v98 = 1;
LABEL_132:
                uint64_t v99 = (XlPtg *)operator new(0x18uLL);
                XlPtg::XlPtg((uint64_t)v99, 24, (unsigned __int16)(v125 + 1));
                this[5] = (uint64_t *)v99;
                unint64_t v100 = XlPtg::getLastExtendedData(v99);
                *unint64_t v100 = v97;
                (*(void (**)(uint64_t *, char *, unsigned int *))(**this + 56))(*this, v100 + 1, &v125);
                if (!v98) {
                  goto LABEL_161;
                }
                (*(void (**)(void))(**this + 40))();
                (*(void (**)(uint64_t *, void, void))(**this + 16))(*this, *((unsigned int *)this + 16), 0);
                if ((*(unsigned int (**)(void))(**this + 176))() >= 5)
                {
                  unsigned int v125 = 4 * ((*(uint64_t (**)(void))(**this + 104))() & 0x3FFF) + 4;
                  (*(void (**)(uint64_t *, uint64_t, uint64_t))(**this + 16))(*this, 4294967292, 1);
                  unint64_t v101 = *this;
                  unsigned int v102 = XlPtg::addDataItem((XlPtg *)this[5], v125);
                  (*(void (**)(uint64_t *, char *, unsigned int *))(*v101 + 56))(v101, v102, &v125);
                  goto LABEL_135;
                }
                if (*v4)
                {
                  XlPtg::~XlPtg(*v4);
                  MEMORY[0x23EC997B0]();
                }
                *uint64_t v4 = 0;
                break;
              default:
                goto LABEL_165;
            }
            goto LABEL_179;
          case 25:
            unsigned int v9 = (uint64_t *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v9, 25);
            this[5] = v9;
            __int16 v10 = (*(uint64_t (**)(void))(**this + 64))();
            if (*((unsigned char *)this + 72) == 4 && (v10 & 0x40) != 0) {
              goto LABEL_9;
            }
            __int16 v111 = v10;
            if ((v10 & 4) == 0)
            {
              int v112 = XlPtg::addDataItem((XlPtg *)this[5], 4u);
              *(_WORD *)int v112 = v111;
              *((_WORD *)v112 + 1) = (*(uint64_t (**)(void))(**this + 80))();
              goto LABEL_161;
            }
            int v120 = (*(uint64_t (**)(void))(**this + 72))();
            if (v120 < -1
              || (int v121 = v120, (((_WORD)v120 + 3) & 0x8000) != 0)
              || (unsigned int v122 = XlPtg::addDataItem(*v4, 2 * (((_WORD)v120 + 3) & 0x7FFFu))) == 0)
            {
LABEL_179:
              unsigned __int16 v13 = 3002;
              goto LABEL_165;
            }
            *(_WORD *)unsigned int v122 = v111;
            *((_WORD *)v122 + 1) = v121;
            if ((v121 & 0x80000000) == 0)
            {
              uint64_t v123 = (v121 + 1);
              unsigned int v124 = v122 + 4;
              do
              {
                *v124++ = (*(uint64_t (**)(void))(**this + 80))();
                --v123;
              }
              while (v123);
            }
            goto LABEL_161;
          case 26:
            unint64_t v103 = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v103, 26, 2);
            this[5] = (uint64_t *)v103;
            int v104 = XlPtg::getLastExtendedData(v103);
            (*(void (**)(uint64_t *, uint64_t, uint64_t))(**this + 16))(*this, 6, 1);
            *(_WORD *)int v104 = (*(uint64_t (**)(void))(**this + 80))();
            char v28 = *(void (**)(void))(**this + 16);
            goto LABEL_138;
          case 27:
            char v93 = (uint64_t *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v93, 27);
            this[5] = v93;
            char v28 = *(void (**)(void))(**this + 16);
            goto LABEL_138;
          case 28:
            uint64_t v94 = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v94, 28, 1);
            goto LABEL_140;
          case 29:
            uint64_t v94 = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v94, 29, 1);
LABEL_140:
            this[5] = (uint64_t *)v94;
            unsigned int v105 = XlPtg::getLastExtendedData(v94);
            char *v105 = (*(uint64_t (**)(void))(**this + 64))();
            goto LABEL_161;
          case 30:
            uint64_t v106 = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v106, 30, 2);
            this[5] = (uint64_t *)v106;
            int v55 = v106;
            goto LABEL_142;
          case 31:
            int v108 = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v108, 31, 8);
            this[5] = (uint64_t *)v108;
            int v109 = (double *)XlPtg::getLastExtendedData(v108);
            double v110 = (*(double (**)(void))(**this + 120))();
            CsCopyFloat64ToPackedLocation(v109, v110);
            goto LABEL_161;
          case 32:
          case 64:
          case 96:
            int v42 = (uint64_t *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v42, v7);
            this[5] = v42;
            (*(void (**)(uint64_t *, uint64_t, uint64_t))(**this + 16))(*this, 7, 1);
            (*(void (**)(void))(**this + 40))();
            (*(void (**)(uint64_t *, void, void))(**this + 16))(*this, *((unsigned int *)this + 16), 0);
            if ((*(unsigned int (**)(void))(**this + 176))() < 4) {
              goto LABEL_136;
            }
            unsigned int v43 = (*(uint64_t (**)(void))(**this + 64))();
            unsigned int v44 = (*(uint64_t (**)(void))(**this + 72))();
            int v45 = (__PAIR64__(v43, *((unsigned __int8 *)this + 72)) - 9) >> 32;
            int v46 = (__PAIR64__(v44, *((unsigned __int8 *)this + 72)) - 9) >> 32;
            int v47 = v46 + 1 + (v46 + 1) * v45;
            *(_DWORD *)XlPtg::addDataItem((XlPtg *)this[5], 4u) = v45;
            *(_DWORD *)XlPtg::addDataItem((XlPtg *)this[5], 4u) = v46;
            if (v47 < 1) {
              goto LABEL_135;
            }
            int v48 = v47 + 1;
            break;
          case 33:
          case 65:
          case 97:
            int v54 = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v54, v7, 2);
            this[5] = (uint64_t *)v54;
            int v55 = v54;
LABEL_142:
            unsigned __int8 v107 = XlPtg::getLastExtendedData(v55);
            *(_WORD *)unsigned __int8 v107 = (*(uint64_t (**)(void))(**this + 80))();
            goto LABEL_161;
          case 34:
          case 66:
          case 98:
            int v56 = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v56, v7, 8);
            this[5] = (uint64_t *)v56;
            unint64_t v57 = XlPtg::getLastExtendedData(v56);
            unsigned __int8 v58 = (*(uint64_t (**)(void))(**this + 64))();
            unsigned __int8 v59 = v58;
            *((_WORD *)v57 + 1) = 0;
            if ((v58 & 0x80) != 0)
            {
              *((_WORD *)v57 + 1) = 1;
              unsigned __int8 v59 = v58 & 0x7F;
            }
            *(_WORD *)unint64_t v57 = v59;
            int v60 = (*(uint64_t (**)(void))(**this + 72))();
            *((_WORD *)v57 + 3) = 0;
            if (v60 < 0)
            {
              *((_WORD *)v57 + 3) = 1;
              LOWORD(v60) = v60 & 0x7FFF;
            }
            *((_WORD *)v57 + 2) = v60;
            goto LABEL_161;
          case 35:
          case 67:
          case 99:
            unsigned int v24 = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v24, v7, 4);
            this[5] = (uint64_t *)v24;
            uint64_t v25 = XlPtg::getLastExtendedData(v24);
            uint64_t v26 = **this;
            if (*((unsigned __int8 *)this + 72) >= 9u)
            {
              *(_DWORD *)uint64_t v25 = (*(uint64_t (**)(void))(v26 + 96))() - 1;
              goto LABEL_161;
            }
            *(_DWORD *)uint64_t v25 = (*(uint64_t (**)(void))(v26 + 72))() - 1;
            char v28 = *(void (**)(void))(**this + 16);
            goto LABEL_138;
          case 36:
          case 68:
          case 100:
            int64_t v61 = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v61, v7, 4);
            this[5] = (uint64_t *)v61;
            LastExtendedData = (unsigned __int16 *)XlPtg::getLastExtendedData(v61);
            unsigned __int16 *LastExtendedData = (*(uint64_t (**)(void))(**this + 80))();
            uint64_t v63 = **this;
            if (*((unsigned __int8 *)this + 72) < 9u)
            {
              LastExtendedData[1] = (*(uint64_t (**)(void))(v63 + 64))();
              XlFormulaParser::normalizeCellRefs((uint64_t)this, LastExtendedData, 0, 1);
            }
            else
            {
              unsigned __int16 v64 = (*(uint64_t (**)(void))(v63 + 80))();
LABEL_89:
              LastExtendedData[1] = v64;
            }
            goto LABEL_161;
          case 37:
          case 69:
          case 101:
            PtgArea = XlFormulaParser::readPtgArea(this, v7, 0);
            this[5] = (uint64_t *)PtgArea;
            goto LABEL_162;
          case 38:
          case 70:
          case 102:
            if (*((unsigned char *)this + 82)) {
              goto LABEL_161;
            }
            unint64_t v65 = (uint64_t *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v65, v7);
            this[5] = v65;
            (*(void (**)(uint64_t *, uint64_t, uint64_t))(**this + 16))(*this, 4, 1);
            int v66 = (*(uint64_t (**)(void))(**this + 80))();
            ChStack<XlPtg *>::push((uint64_t)(this + 1), this + 5);
            int v67 = *((_DWORD *)this + 6);
            uint64_t v68 = (XlPtg *)this[5];
            this[5] = 0;
            unsigned int v69 = (*(uint64_t (**)(void))(**this + 176))() - v66;
            *((unsigned char *)this + 82) = 1;
            while ((*(unsigned int (**)(void))(**this + 176))() > v69)
              XlFormulaParser::processNextPtg((XlFormulaParser *)this);
            *((unsigned char *)this + 82) = 0;
            int v84 = *((_DWORD *)this + 6);
            XlFormulaParser::processNextPtg((XlFormulaParser *)this);
            uint64_t v85 = (*(uint64_t (**)(void))(**this + 40))();
            (*(void (**)(uint64_t *, void, void))(**this + 16))(*this, *((unsigned int *)this + 16), 0);
            if ((*(unsigned int (**)(void))(**this + 176))() < 3) {
              goto LABEL_179;
            }
            __int16 v86 = v84 - v67;
            unsigned int v87 = (*(uint64_t (**)(void))(**this + 80))();
            uint64_t v88 = XlPtg::addDataItem(v68, (8 * v87) | 4);
            *(_WORD *)uint64_t v88 = v86;
            *((_WORD *)v88 + 1) = v87;
            if (v87)
            {
              uint64_t v89 = v87;
              unsigned int v90 = v88 + 10;
              do
              {
                *(v90 - 3) = (*(uint64_t (**)(void))(**this + 80))();
                *(v90 - 2) = (*(uint64_t (**)(void))(**this + 80))();
                uint64_t v91 = **this;
                if (*((unsigned __int8 *)this + 72) < 9u)
                {
                  *(v90 - 1) = (*(uint64_t (**)(void))(v91 + 64))();
                  __int16 v92 = (*(uint64_t (**)(void))(**this + 64))();
                }
                else
                {
                  *(v90 - 1) = (*(uint64_t (**)(void))(v91 + 80))();
                  __int16 v92 = (*(uint64_t (**)(void))(**this + 80))();
                }
                _WORD *v90 = v92;
                v90 += 4;
                --v89;
              }
              while (v89);
            }
            *((_DWORD *)this + 16) = (*(uint64_t (**)(void))(**this + 40))();
            (*(void (**)(uint64_t *, uint64_t, void))(**this + 16))(*this, v85, 0);
            goto LABEL_164;
          case 39:
          case 71:
          case 103:
            (*(void (**)(uint64_t *, uint64_t, uint64_t))(**this + 16))(*this, 6, 1);
            if ((v3 & 1) == 0) {
              unsigned __int16 v1 = 0;
            }
            char v3 = 1;
            continue;
          case 40:
          case 72:
          case 104:
            int v8 = *(void (**)(void))(**this + 16);
            goto LABEL_11;
          case 41:
          case 46:
          case 47:
          case 73:
          case 78:
          case 79:
          case 105:
          case 110:
          case 111:
LABEL_9:
            int v8 = *(void (**)(void))(**this + 16);
LABEL_11:
            v8();
            unsigned int v6 = *this;
            goto LABEL_7;
          case 42:
          case 43:
          case 74:
          case 75:
          case 106:
          case 107:
            uint64_t v27 = (uint64_t *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v27, v7);
            this[5] = v27;
            char v28 = *(void (**)(void))(**this + 16);
            goto LABEL_138;
          case 44:
          case 76:
          case 108:
            int v70 = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v70, v7, 4);
            this[5] = (uint64_t *)v70;
            unsigned int v71 = (unsigned __int16 *)XlPtg::getLastExtendedData(v70);
            unsigned __int16 *v71 = (*(uint64_t (**)(void))(**this + 80))();
            uint64_t v72 = **this;
            if (*((unsigned __int8 *)this + 72) < 9u) {
              unsigned __int16 v73 = (*(uint64_t (**)(void))(v72 + 64))();
            }
            else {
              unsigned __int16 v73 = (*(uint64_t (**)(void))(v72 + 80))();
            }
            v71[1] = v73;
            if (*((unsigned __int8 *)this + 72) <= 8u) {
              XlFormulaParser::normalizeCellRefs((uint64_t)this, v71, 0, 1);
            }
            if (!*((unsigned char *)this + 81) && !*((unsigned char *)this + 80)) {
              goto LABEL_161;
            }
            int var1 = (*v4)->var1;
            if (var1 == 108) {
              int v76 = 100;
            }
            else {
              int v76 = 68;
            }
            if (var1 == 44) {
              int v77 = 36;
            }
            else {
              int v77 = v76;
            }
            (*v4)->int var1 = v77;
            int v78 = (__int16)v71[1];
            if (v78 < 0) {
              *v71 += *((_WORD *)this + 34);
            }
            if ((v78 & 0x4000) != 0) {
              v71[1] = v78 & 0xC000 | (*((_WORD *)this + 35) + v78);
            }
            if (!*((unsigned char *)this + 80)) {
              goto LABEL_161;
            }
            int v79 = *((_DWORD *)this[5] + 2);
            if (v79 == 100) {
              char v80 = 100;
            }
            else {
              char v80 = 68;
            }
            if (v79 == 36) {
              char v81 = 36;
            }
            else {
              char v81 = v80;
            }
            *((unsigned char *)this[6] + *((unsigned int *)this + 19)) = v81;
            CsLeWriteUInt16(*v71, (uint64_t *)((char *)this[6] + *((unsigned int *)this + 19) + 1));
            uint64_t v82 = v71[1];
            if (*((unsigned __int8 *)this + 72) >= 9u)
            {
              unint64_t v83 = (_WORD *)((char *)this[6] + *((unsigned int *)this + 19) + 3);
              goto LABEL_158;
            }
            *((unsigned char *)this[6] + (*((_DWORD *)this + 19) + PptSkipVisitor::beginRead(*((void *)this + 3)) = v82;
            goto LABEL_161;
          case 45:
          case 77:
          case 109:
            if (*((unsigned char *)this + 81) || *((unsigned char *)this + 80))
            {
              unsigned int v29 = XlFormulaParser::readPtgArea(this, v7, 1);
              this[5] = (uint64_t *)v29;
              int v30 = v29->var1;
              if (v30 == 109)
              {
                int v31 = 101;
              }
              else if (v30 == 45)
              {
                int v31 = 37;
              }
              else
              {
                int v31 = 69;
              }
              v29->int var1 = v31;
            }
            else
            {
              unsigned int v29 = XlFormulaParser::readPtgArea(this, v7, 0);
              this[5] = (uint64_t *)v29;
            }
            if (!*((unsigned char *)this + 80)) {
              goto LABEL_161;
            }
            XlHeader v113 = XlPtg::getLastExtendedData(v29);
            uint64_t v114 = v113;
            int v115 = *((_DWORD *)this[5] + 2);
            if (v115 == 101) {
              char v116 = 101;
            }
            else {
              char v116 = 69;
            }
            if (v115 == 37) {
              char v117 = 37;
            }
            else {
              char v117 = v116;
            }
            *((unsigned char *)this[6] + *((unsigned int *)this + 19)) = v117;
            CsLeWriteUInt16(*(unsigned __int16 *)v113, (uint64_t *)((char *)this[6] + *((unsigned int *)this + 19) + 1));
            CsLeWriteUInt16(*((unsigned __int16 *)v114 + 1), (uint64_t *)((char *)this[6] + *((unsigned int *)this + 19) + 3));
            uint64_t v118 = *((unsigned __int16 *)v114 + 2);
            if (*((unsigned __int8 *)this + 72) < 9u)
            {
              *((unsigned char *)this[6] + (*((_DWORD *)this + 19) + 5)) = v118;
              *((unsigned char *)this[6] + (*((_DWORD *)this + 19) + 7)) = v114[6];
            }
            else
            {
              CsLeWriteUInt16(v118, (uint64_t *)((char *)this[6] + *((unsigned int *)this + 19) + 5));
              uint64_t v82 = *((unsigned __int16 *)v114 + 3);
              unint64_t v83 = (_WORD *)((char *)this[6] + *((unsigned int *)this + 19) + 7);
LABEL_158:
              CsLeWriteUInt16(v82, v83);
            }
            goto LABEL_161;
          case 57:
          case 89:
          case 121:
            uint64_t v32 = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v32, v7, 4);
            this[5] = (uint64_t *)v32;
            char v33 = XlPtg::getLastExtendedData(v32);
            LODWORD(v32) = *((unsigned __int8 *)this + 72);
            *(_WORD *)char v33 = (*(uint64_t (**)(void))(**this + 80))();
            uint64_t v34 = **this;
            if (v32 < 9)
            {
              (*(void (**)(void))(v34 + 16))();
              *((_WORD *)v33 + 1) = (*(uint64_t (**)(void))(**this + 80))() - 1;
            }
            else
            {
              *((_WORD *)v33 + 1) = (*(uint64_t (**)(void))(v34 + 80))() - 1;
            }
            char v28 = *(void (**)(void))(**this + 16);
            goto LABEL_138;
          case 58:
          case 60:
          case 90:
          case 92:
          case 122:
          case 124:
            unsigned int v14 = *((unsigned __int8 *)this + 72);
            uint64_t v15 = (XlPtg *)operator new(0x18uLL);
            XlHeader v16 = v15;
            if (v14 >= 9)
            {
              XlPtg::XlPtg((uint64_t)v15, v7, 6);
              this[5] = (uint64_t *)v16;
              int v17 = XlPtg::getLastExtendedData(v16);
              *(_WORD *)int v17 = (*(uint64_t (**)(void))(**this + 80))();
              *((_WORD *)v17 + 1) = (*(uint64_t (**)(void))(**this + 80))();
              LOWORD(v18) = (*(uint64_t (**)(void))(**this + 80))() & 0xC0FF;
              goto LABEL_58;
            }
            XlPtg::XlPtg((uint64_t)v15, v7, 10);
            this[5] = (uint64_t *)v16;
            uint64_t v35 = XlPtg::getLastExtendedData(v16);
            *(_WORD *)uint64_t v35 = (*(uint64_t (**)(void))(**this + 80))();
            (*(void (**)(uint64_t *, uint64_t, uint64_t))(**this + 16))(*this, 8, 1);
            *((_WORD *)v35 + 3) = (*(uint64_t (**)(void))(**this + 80))();
            *((_WORD *)v35 + 4) = (*(uint64_t (**)(void))(**this + 80))();
            *((_WORD *)v35 + 1) = (*(uint64_t (**)(void))(**this + 80))();
            __int16 v36 = (*(uint64_t (**)(void))(**this + 64))();
            *((_WORD *)v35 + 2) = v36;
            if (*((unsigned __int8 *)this + 72) <= 8u)
            {
              unsigned int v37 = *((unsigned __int16 *)v35 + 1);
              if (v37 >= 0x4000)
              {
                if ((v37 & 0x8000u) == 0) {
                  __int16 v38 = v36;
                }
                else {
                  __int16 v38 = v36 | 0x8000;
                }
                *((_WORD *)v35 + 2) = v37 & 0x4000 | v38;
              }
              *((_WORD *)v35 + 1) = v37;
            }
            goto LABEL_161;
          case 59:
          case 61:
          case 91:
          case 93:
          case 123:
          case 125:
            unsigned int v19 = *((unsigned __int8 *)this + 72);
            __int16 v20 = (XlPtg *)operator new(0x18uLL);
            uint64_t v21 = v20;
            if (v19 < 9)
            {
              XlPtg::XlPtg((uint64_t)v20, v7, 14);
              this[5] = (uint64_t *)v21;
              int v17 = XlPtg::getLastExtendedData(v21);
              *(_WORD *)int v17 = (*(uint64_t (**)(void))(**this + 80))();
              (*(void (**)(uint64_t *, uint64_t, uint64_t))(**this + 16))(*this, 8, 1);
              *((_WORD *)v17 + 5) = (*(uint64_t (**)(void))(**this + 80))();
              *((_WORD *)v17 + 6) = (*(uint64_t (**)(void))(**this + 80))();
              *((_WORD *)v17 + 1) = (*(uint64_t (**)(void))(**this + 80))();
              *((_WORD *)v17 + 2) = (*(uint64_t (**)(void))(**this + 80))();
              *((_WORD *)v17 + 3) = (*(uint64_t (**)(void))(**this + 64))();
              __int16 v39 = (*(uint64_t (**)(void))(**this + 64))();
              *((_WORD *)v17 + 4) = v39;
              if (*((unsigned __int8 *)this + 72) <= 8u)
              {
                __int16 v40 = *((_WORD *)v17 + 1);
                if (v40 < 0) {
                  *((_WORD *)v17 + 3) |= 0x8000u;
                }
                if ((v40 & 0x4000) != 0) {
                  *((_WORD *)v17 + 3) |= 0x4000u;
                }
                *((_WORD *)v17 + 1) = v40;
                unsigned int v18 = *((unsigned __int16 *)v17 + 2);
                if (v18 >= 0x4000)
                {
                  if ((v18 & 0x8000u) == 0) {
                    __int16 v41 = v39;
                  }
                  else {
                    __int16 v41 = v39 | 0x8000;
                  }
                  *((_WORD *)v17 + 4) = v18 & 0x4000 | v41;
                }
                LOWORD(v18) = v18;
LABEL_58:
                *((_WORD *)v17 + 2) = v18;
              }
            }
            else
            {
              XlPtg::XlPtg((uint64_t)v20, v7, 10);
              this[5] = (uint64_t *)v21;
              unint64_t v22 = XlPtg::getLastExtendedData(v21);
              *(_WORD *)unint64_t v22 = (*(uint64_t (**)(void))(**this + 80))();
              *((_WORD *)v22 + 1) = (*(uint64_t (**)(void))(**this + 80))();
              *((_WORD *)v22 + 2) = (*(uint64_t (**)(void))(**this + 80))();
              *((_WORD *)v22 + 3) = (*(uint64_t (**)(void))(**this + 80))();
              __int16 v23 = (*(uint64_t (**)(void))(**this + 80))();
              *((_WORD *)v22 + 3) &= 0xC0FFu;
              *((_WORD *)v22 + 4) = v23 & 0xC0FF;
            }
            goto LABEL_161;
          case 88:
          case 120:
            goto LABEL_161;
          default:
            goto LABEL_183;
        }
        do
        {
          int v49 = (*(uint64_t (**)(void))(**this + 64))();
          if (v49 > 3)
          {
            if (v49 == 4)
            {
              __int16 v50 = XlPtg::addDataItem((XlPtg *)this[5], 2u);
              char *v50 = 4;
            }
            else
            {
              if (v49 != 16)
              {
LABEL_180:
                if (*v4)
                {
                  XlPtg::~XlPtg(*v4);
                  MEMORY[0x23EC997B0]();
                }
                *uint64_t v4 = 0;
LABEL_183:
                unsigned __int16 v13 = 3001;
                goto LABEL_165;
              }
              __int16 v50 = XlPtg::addDataItem((XlPtg *)this[5], 2u);
              char *v50 = 16;
            }
            v50[1] = (*(uint64_t (**)(void))(**this + 64))();
            (*(void (**)(uint64_t *, uint64_t, uint64_t))(**this + 16))(*this, 7, 1);
          }
          else if (v49 == 1)
          {
            uint64_t v51 = XlPtg::addDataItem((XlPtg *)this[5], 0xAu);
            *uint64_t v51 = 1;
            int v52 = (double *)(v51 + 2);
            double v53 = (*(double (**)(void))(**this + 120))();
            CsCopyFloat64ToPackedLocation(v52, v53);
          }
          else
          {
            if (v49 != 2) {
              goto LABEL_180;
            }
            XlFormulaParser::addPtgString((char *)this, (XlPtg *)this[5], 1);
          }
          --v48;
        }
        while (v48 > 1);
LABEL_135:
        *((_DWORD *)this + 16) = (*(uint64_t (**)(void))(**this + 40))();
LABEL_136:
        char v28 = *(void (**)(void))(**this + 16);
LABEL_138:
        v28();
      }
LABEL_161:
      PtgArea = *v4;
LABEL_162:
      if (PtgArea)
      {
        ChStack<XlPtg *>::push((uint64_t)(this + 1), this + 5);
        unsigned __int16 v13 = 0;
        *uint64_t v4 = 0;
      }
      else
      {
LABEL_164:
        unsigned __int16 v13 = 0;
      }
    }
    else
    {
LABEL_23:
      unsigned __int16 v13 = 1;
    }
    break;
  }
LABEL_165:
  if (v3) {
    return v1;
  }
  return v13;
}

void sub_238B9C36C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t SsrwOOMemStream::getPos(SsrwOOMemStream *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t SsrwOOMemStream::getBytesAvailableToRead(SsrwOOMemStream *this)
{
  return (*((_DWORD *)this + 4) - *((_DWORD *)this + 5));
}

char *XlPtg::getLastExtendedData(XlPtg *this)
{
  unsigned int var0 = this->var0;
  if (!this->var0) {
    return 0;
  }
  int var3 = this->var3;
  if (!this->var3) {
    return 0;
  }
  while (--var3)
    var0 += *(unsigned __int16 *)var0 + 2;
  return var0 + 2;
}

char *XlPtg::getExtendedData(XlPtg *this, unsigned int a2, unsigned int *a3)
{
  *a3 = 0;
  unsigned int var0 = this->var0;
  if (!this->var0 || this->var3 <= a2) {
    return 0;
  }
  for (uint64_t i = *(unsigned __int16 *)var0; a2; --a2)
  {
    unsigned int v5 = &var0[i];
    unsigned int v6 = *((unsigned __int16 *)v5 + 1);
    unsigned int var0 = v5 + 2;
    uint64_t i = v6;
  }
  uint64_t result = var0 + 2;
  *a3 = i;
  return result;
}

uint64_t ChStack<XlPtg *>::push(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  LODWORD(v4) = *(_DWORD *)(result + 16);
  unsigned int v5 = *(_DWORD *)(result + 20);
  int v6 = v4 + 1;
  if ((int)v4 + 1 <= v5)
  {
    uint64_t v9 = *(void *)result;
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(result + 24) + v5;
    *(_DWORD *)(result + 20) = v7;
    *(void *)(result + 8) = operator new[](8 * v7);
    uint64_t v4 = *(unsigned int *)(v3 + 16);
    if (v4)
    {
      uint64_t v8 = 0;
      do
      {
        *(void *)(*(void *)(v3 + 8) + v8) = *(void *)(*(void *)v3 + v8);
        v8 += 8;
      }
      while (8 * v4 != v8);
    }
    uint64_t result = *(void *)v3;
    if (*(void *)v3)
    {
      uint64_t result = MEMORY[0x23EC99790](result, 0x20C8093837F09);
      LODWORD(v4) = *(_DWORD *)(v3 + 16);
    }
    uint64_t v9 = *(void *)(v3 + 8);
    *(void *)uint64_t v3 = v9;
    *(void *)(v3 + 8) = 0;
    int v6 = v4 + 1;
  }
  *(void *)(v9 + 8 * v4) = *a2;
  *(_DWORD *)(v3 + 16) = v6;
  return result;
}

uint64_t ChStack<XlPtg *>::top(uint64_t a1)
{
  if (!*(void *)a1 || (int v1 = *(_DWORD *)(a1 + 16)) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1000;
  }
  return *(void *)a1 + 8 * (v1 - 1);
}

XlPtg *ChAutoPtr<XlPtg>::setValue(XlPtg **a1, XlPtg *a2)
{
  uint64_t result = *a1;
  if (result != a2)
  {
    if (result)
    {
      XlPtg::~XlPtg(result);
      uint64_t result = (XlPtg *)MEMORY[0x23EC997B0]();
    }
    *a1 = a2;
  }
  return result;
}

XlPtg **ChAutoPtr<XlPtg>::~ChAutoPtr(XlPtg **a1)
{
  unsigned int v2 = *a1;
  if (v2)
  {
    XlPtg::~XlPtg(v2);
    MEMORY[0x23EC997B0]();
  }
  *a1 = 0;
  return a1;
}

uint64_t XlPtg::getNumberOfExtendedDataEntries(XlPtg *this)
{
  return this->var3;
}

uint64_t XlPtg::getTotalSizeOfExtendedData(XlPtg *this)
{
  unsigned int var0 = this->var0;
  if (!this->var0) {
    return 0;
  }
  int var3 = this->var3;
  if (!this->var3) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    uint64_t v4 = *(unsigned __int16 *)var0;
    var0 += v4 + 2;
    uint64_t result = (result + v4);
    --var3;
  }
  while (var3);
  return result;
}

void XlPtg::~XlPtg(XlPtg *this)
{
  unsigned int var0 = this->var0;
  if (var0)
  {
    MEMORY[0x23EC99790](var0, 0x1000C8077774924);
    this->unsigned int var0 = 0;
    this->int var2 = 0;
    this->int var3 = 0;
  }
}

uint64_t XlFormulaProcessor::releaseFormula(XlFormulaParser **this)
{
  return XlFormulaParser::releaseFormula(this[1]);
}

uint64_t XlFormulaParser::releaseFormula(XlFormulaParser *this)
{
  uint64_t result = *(void *)this;
  if (result)
  {
    (*(void (**)(uint64_t, void))(*(void *)result + 152))(result, 0);
    uint64_t result = *(void *)this;
    if (*(void *)this) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    *(void *)this = 0;
  }
  *((void *)this + 6) = 0;
  return result;
}

void sub_238B9CD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238B9CE04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B9CEB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B9CF6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B9D170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238B9D180(void *a1, int a2)
{
  if (a2 == 2)
  {
    objc_end_catch();
    JUMPOUT(0x238B9D128);
  }
  objc_exception_rethrow();
}

void sub_238B9D1A0()
{
  objc_end_catch();

  JUMPOUT(0x238B9D174);
}

EshAtom *XlEshObjectFactory::createObject(XlEshObjectFactory *this, EshObject *a2, int a3)
{
  if ((int)a2 > 61452)
  {
    if ((int)a2 > 61456)
    {
      if (a2 == 61457)
      {
        Object = (EshAtom *)operator new(0x20uLL);
        EshAtom::EshAtom(Object, 0xF011u, 0);
        int v6 = &unk_26EBDF5D8;
        goto LABEL_19;
      }
      if (a2 == 62271)
      {
        Object = (EshAtom *)operator new(0x30uLL);
        XlEshGhost::XlEshGhost(Object, a3);
        goto LABEL_21;
      }
    }
    else
    {
      if (a2 == 61453)
      {
LABEL_12:
        Object = (EshAtom *)operator new(0x20uLL);
        EshAtom::EshAtom(Object, 0xF00Du, 0);
        int v6 = &unk_26EBDF680;
LABEL_19:
        *(void *)Object = v6;
        goto LABEL_21;
      }
      if (a2 == 61456)
      {
        Object = (EshAtom *)operator new(0x40uLL);
        EshAtom::EshAtom(Object, 0xF010u, 0);
        *(void *)Object = &unk_26EBDF518;
        *((_WORD *)Object + 14) = 0;
        *((_OWORD *)Object + 2) = 0u;
        *((_OWORD *)Object + 3) = 0u;
        goto LABEL_21;
      }
    }
LABEL_20:
    Object = EshObjectFactory::createObject((EshObjectFactory *)this, (int)a2, a3);
    goto LABEL_21;
  }
  if ((int)a2 > 6)
  {
    if (a2 == 7)
    {
      Object = (EshAtom *)operator new(0x258uLL);
      XlEshShape::XlEshShape(Object);
      goto LABEL_21;
    }
    if (a2 != 12) {
      goto LABEL_20;
    }
    goto LABEL_12;
  }
  if (a2 == 1)
  {
    Object = (EshAtom *)operator new(0x38uLL);
    EshRoot::EshRoot(Object);
    *(void *)Object = &unk_26EBE2830;
    *((void *)Object + 5) = 0;
    *((_DWORD *)Object + 12) = 0;
    goto LABEL_21;
  }
  if (a2 != 6) {
    goto LABEL_20;
  }
  Object = (EshAtom *)operator new(0x180uLL);
  XlEshGroup::XlEshGroup(Object);
  (*(void (**)(EshAtom *))(*(void *)Object + 120))(Object);
LABEL_21:
  EshObjectFactory::verifyTypeAndVersionOfObject((EshObjectFactory *)Object, a2, a3);
  return Object;
}

void sub_238B9D3E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlChartBinaryReader::read(XlChartBinaryReader *this, XlEshRoot *a2)
{
  *((_DWORD *)a2 + 11) = 0;
  if (*((_DWORD *)a2 + 10) == 6)
  {
    if ((*((_DWORD *)this + 485) & 0x80000000) == 0)
    {
      (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
      XlHeader::XlHeader(&v10);
      XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v10, *((unsigned char *)this + 1320));
      uint64_t v4 = *((void *)this + 163);
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      *((void *)this + 163) = 0;
      XlChartGelFrame::XlChartGelFrame((XlChartGelFrame *)v8, &v10);
      (*(void (**)(void))(**((void **)this + 167) + 2024))();
      *((_DWORD *)a2 + 11) = v9;
      *((_DWORD *)a2 + 12) = *((_DWORD *)this + 485);
      (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
      uint64_t v5 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 112))(this);
      (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, *((void *)this + 164));
      int v6 = (EshHeader *)operator new(0x10uLL);
      EshHeader::makeDefault(v6);
      int v7 = v9;
      v6->unsigned int var0 = v9;
      v6->int var1 = *((_DWORD *)this + 485) + 4;
      v6->int var3 = 4;
      if (v7) {
        EshRoot::appendChild(a2, v6);
      }
      MEMORY[0x23EC997B0](v6, 0x1000C408B6DE1C6);
      XlChartGelFrame::~XlChartGelFrame((XlChartGelFrame *)v8);
    }
  }
  else
  {
    XlBinaryReader::read(this, a2);
  }
}

void sub_238B9D668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x23EC997B0](v2, 0x1000C408B6DE1C6);
  XlChartGelFrame::~XlChartGelFrame((XlChartGelFrame *)va);
  _Unwind_Resume(a1);
}

void XlBinaryReader::read(XlBinaryReader *this, XlEshRoot *a2)
{
  *((_DWORD *)a2 + 11) = 0;
  switch(*((_DWORD *)a2 + 10))
  {
    case 1:
      if ((*((_DWORD *)this + 50) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      break;
    case 2:
      if ((*((_DWORD *)this + 51) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      break;
    case 3:
      if ((*((_DWORD *)this + 325) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      break;
    case 4:
      if ((*((_DWORD *)this + 70) & 0x80000000) == 0)
      {
LABEL_7:
        (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
        XlEshBinaryReader::start((XlBinaryReader *)((char *)this + 40), *((SsrwOOStream **)this + 164));
        XlEshBinaryReader::read((uint64_t)this + 40, a2);
      }
      break;
    default:
      return;
  }
}

uint64_t XlEshBinaryReader::start(XlEshBinaryReader *this, SsrwOOStream *a2)
{
  uint64_t v4 = (XlReadStgStream *)*((void *)this + 13);
  if (!v4)
  {
    uint64_t v4 = (XlReadStgStream *)operator new(0x60uLL);
    XlReadStgStream::XlReadStgStream(v4);
    *((void *)this + 13) = v4;
  }
  XlReadStgStream::start(v4, a2);
  uint64_t v5 = *((void *)this + 13);
  *((_DWORD *)this + 24) = *(_DWORD *)(v5 + 20);
  EshBinaryReader::start(this, (SsrwOOStream *)v5);
  int v6 = (EshClientDataModelVisitor *)operator new(0x10uLL);
  uint64_t v7 = *((void *)this + 13);
  EshClientDataModelVisitor::EshClientDataModelVisitor(v6);
  *(void *)int v6 = &unk_26EBE30C8;
  *((void *)v6 + 1) = v7;
  uint64_t v8 = (EshDataModelVisitor *)*((void *)this + 2);
  return EshDataModelVisitor::takeClientVisitor(v8, v6);
}

void sub_238B9D858(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlReadStgStream::XlReadStgStream(XlReadStgStream *this)
{
  *(void *)this = &unk_26EBE46E8;
  *((_WORD *)this + 6) = 0;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((void *)this + 11) = 0;
}

uint64_t XlReadStgStream::start(XlReadStgStream *this, SsrwOOStream *a2)
{
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 32) = 0;
  *((_WORD *)this + 6) = 0;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 7) = *((void *)this + 6);
  *((void *)this + 10) = *((void *)this + 9);
  if (!a2) {
    goto LABEL_5;
  }
  *((void *)this + 5) = a2;
  if (!*((void *)this + 3))
  {
    *((void *)this + 3) = operator new[](0xAuLL);
    a2 = (SsrwOOStream *)*((void *)this + 5);
  }
  uint64_t v3 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 5))(a2);
  uint64_t result = XlReadStgStream::mapStreamChunk(this, v3);
  if ((result & 1) == 0)
  {
LABEL_5:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 3002;
  }
  return result;
}

uint64_t XlReadStgStream::mapStreamChunk(XlReadStgStream *this, uint64_t a2)
{
  uint64_t result = *((void *)this + 5);
  if (!result) {
    return result;
  }
  unsigned int v4 = a2;
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)result + 16))(result, a2, 0);
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 5) + 72))(*((void *)this + 5));
  LODWORD(v6) = (*(uint64_t (**)(void))(**((void **)this + 5) + 80))(*((void *)this + 5));
  uint64_t result = 0;
  if (v6 > 0x2020) {
    return result;
  }
  uint64_t result = 0;
  if (v5 <= 236)
  {
    if (v5 != 60)
    {
      if (v5 == 235)
      {
LABEL_11:
        int v7 = 4;
        goto LABEL_12;
      }
      if (v5 != 236) {
        return result;
      }
    }
    int v5 = 236;
    goto LABEL_11;
  }
  if (v5 == 237) {
    goto LABEL_11;
  }
  if (v5 != 2150)
  {
    if (v5 != 4198) {
      return result;
    }
    goto LABEL_11;
  }
  int v7 = 18;
LABEL_12:
  unsigned int v8 = v7 + v4;
  uint64_t v9 = *((void *)this + 6);
  XlHeader v10 = (void **)((char *)this + 48);
  unint64_t v11 = (unint64_t)(*((void *)this + 7) - v9) >> 2;
  if (v11)
  {
    if (*(_DWORD *)(v9 + 4 * (v11 - 1)) >= v4)
    {
      unsigned __int16 v12 = 0;
      do
      {
        int v13 = *(_DWORD *)(v9 + 4 * v12);
        uint64_t result = v13 == v4;
        if (v13 == v4) {
          break;
        }
        ++v12;
      }
      while (v11 > v12);
      return result;
    }
  }
  else
  {
    *((_DWORD *)this + 2) = v5;
    *((_DWORD *)this + 4) = v8;
    *((_DWORD *)this + 5) = v8;
  }
  if (!v6) {
    return 0;
  }
  int v14 = *((_DWORD *)this + 2);
  unsigned int v53 = v8;
  if (v14 != 235 && v14 != 2150 && v14 != 4198) {
    int v14 = -1;
  }
  int v15 = 0;
  int v16 = *((_DWORD *)this + 5);
  int v17 = (void **)((char *)this + 72);
  __int16 v52 = v6;
  do
  {
    int v18 = (*(uint64_t (**)(void))(**((void **)this + 5) + 40))(*((void *)this + 5)) - 4;
    __int16 v20 = (char *)*((void *)this + 7);
    unint64_t v19 = *((void *)this + 8);
    if ((unint64_t)v20 >= v19)
    {
      unint64_t v22 = (char *)*v10;
      unint64_t v23 = v20 - (unsigned char *)*v10;
      unint64_t v24 = (v19 - (unint64_t)*v10) >> 2;
      if (2 * (int)v24 <= (v23 >> 2) + 1) {
        unsigned int v25 = (v23 >> 2) + 1;
      }
      else {
        unsigned int v25 = 2 * v24;
      }
      if (v24 >= 0x7FFFFFFF) {
        unint64_t v26 = 0xFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v25;
      }
      if (v26)
      {
        uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)this + 64, v26);
        uint64_t v29 = v28;
        unint64_t v22 = (char *)*((void *)this + 6);
        __int16 v20 = (char *)*((void *)this + 7);
      }
      else
      {
        uint64_t v27 = 0;
        uint64_t v29 = 0;
      }
      int v30 = &v27[v23 & 0x3FFFFFFFCLL];
      *(_DWORD *)int v30 = v18;
      uint64_t v21 = v30 + 4;
      while (v20 != v22)
      {
        int v31 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *((_DWORD *)v30 - 1) = v31;
        v30 -= 4;
      }
      *((void *)this + 6) = v30;
      *((void *)this + 7) = v21;
      *((void *)this + 8) = &v27[4 * v29];
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      *(_DWORD *)__int16 v20 = v18;
      uint64_t v21 = v20 + 4;
    }
    *((void *)this + 7) = v21;
    int v32 = v15 + v16;
    uint64_t v34 = (char *)*((void *)this + 10);
    unint64_t v33 = *((void *)this + 11);
    if ((unint64_t)v34 >= v33)
    {
      __int16 v36 = (char *)*v17;
      unint64_t v37 = v34 - (unsigned char *)*v17;
      unint64_t v38 = (v33 - (unint64_t)*v17) >> 2;
      if (2 * (int)v38 <= (v37 >> 2) + 1) {
        unsigned int v39 = (v37 >> 2) + 1;
      }
      else {
        unsigned int v39 = 2 * v38;
      }
      if (v38 >= 0x7FFFFFFF) {
        unint64_t v40 = 0xFFFFFFFFLL;
      }
      else {
        unint64_t v40 = v39;
      }
      if (v40)
      {
        __int16 v41 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)this + 88, v40);
        uint64_t v43 = v42;
        __int16 v36 = (char *)*((void *)this + 9);
        uint64_t v34 = (char *)*((void *)this + 10);
      }
      else
      {
        __int16 v41 = 0;
        uint64_t v43 = 0;
      }
      unsigned int v44 = &v41[v37 & 0x3FFFFFFFCLL];
      *(_DWORD *)unsigned int v44 = v32;
      uint64_t v35 = v44 + 4;
      while (v34 != v36)
      {
        int v45 = *((_DWORD *)v34 - 1);
        v34 -= 4;
        *((_DWORD *)v44 - 1) = v45;
        v44 -= 4;
      }
      *((void *)this + 9) = v44;
      *((void *)this + 10) = v35;
      *((void *)this + 11) = &v41[4 * v43];
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v34 = v32;
      uint64_t v35 = v34 + 4;
    }
    *((void *)this + 10) = v35;
    (*(void (**)(void, void, uint64_t))(**((void **)this + 5) + 16))(*((void *)this + 5), (unsigned __int16)v6, 1);
    if (*((_DWORD *)this + 2) == 2150) {
      unsigned __int16 v46 = v6 - 14;
    }
    else {
      unsigned __int16 v46 = v6;
    }
    v15 += v46;
    int v47 = (*(uint64_t (**)(void))(**((void **)this + 5) + 72))(*((void *)this + 5));
    uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 5) + 80))(*((void *)this + 5));
  }
  while (v47 == 60 || v14 == v47);
  if (v47 == 93
    && (((*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 5) + 16))(*((void *)this + 5), v6, 1), int v49 = (*(uint64_t (**)(void))(**((void **)this + 5) + 72))(*((void *)this + 5)), v50 = (*(uint64_t (**)(void))(**((void **)this + 5) + 80))(*((void *)this + 5)), v49 == 236)|| (unsigned __int16)v49 == 60))
  {
    int v55 = (*(uint64_t (**)(void))(**((void **)this + 5) + 40))(*((void *)this + 5)) - 4;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 5) + 16))(*((void *)this + 5), v50, 1);
    __int16 v51 = v52;
    if ((*(unsigned int (**)(void))(**((void **)this + 5) + 72))(*((void *)this + 5)) == 438)
    {
      std::vector<unsigned int,ChAllocator<unsigned int>>::push_back[abi:ne180100]((uint64_t)this + 48, &v55);
      int v54 = v15 + v16;
      std::vector<unsigned int,ChAllocator<unsigned int>>::push_back[abi:ne180100]((uint64_t)this + 72, &v54);
      v15 += v50;
      *((unsigned char *)this + 32) = 1;
    }
  }
  else
  {
    __int16 v51 = v52;
  }
  *((_DWORD *)this + 5) = v15 + v16;
  (*(void (**)(void, void, void))(**((void **)this + 5) + 16))(*((void *)this + 5), v53, 0);
  *((_WORD *)this + 6) = v51;
  if (*((_DWORD *)this + 2) == 2150) {
    *((_WORD *)this + 6) = v51 - 14;
  }
  return 1;
}

uint64_t XlReadStgStream::getBytesAvailableToRead(XlReadStgStream *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 176))();
}

uint64_t XlReadStgStream::getPos(XlReadStgStream *this)
{
  unsigned int v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 40))(*((void *)this + 5));
  return XlReadStgStream::translateStreamFileLocation(this, v2);
}

uint64_t XlReadStgStream::translateStreamFileLocation(XlReadStgStream *this, unsigned int a2)
{
  if (((*((void *)this + 7) - *((void *)this + 6)) & 0x3FFFFFFFCLL) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 3002;
  }
  uint64_t result = *((unsigned int *)this + 4);
  if (result < a2)
  {
    if (XlReadStgStream::getStreamMaxFileOffset(this) <= a2) {
      return *((unsigned int *)this + 5);
    }
    int v5 = *((_DWORD *)this + 2);
    if (v5 == 2150) {
      int v6 = 18;
    }
    else {
      int v6 = 4;
    }
    uint64_t v7 = *((void *)this + 6);
    unint64_t v8 = *((void *)this + 7) - v7;
    if ((v8 & 0x3FFFFFFFCLL) == 0) {
      return 0;
    }
    unint64_t v9 = 0;
    if (v5 == 2150) {
      int v10 = -18;
    }
    else {
      int v10 = -4;
    }
    uint64_t v11 = *((void *)this + 9);
    unint64_t v12 = (v8 >> 2) - 1;
    unsigned int v13 = v10 + a2;
    uint64_t v14 = (v8 >> 2);
    do
    {
      uint64_t result = *(unsigned int *)(v11 + 4 * v9);
      unsigned int v15 = *(_DWORD *)(v7 + 4 * v9);
      if (v9 >= v12)
      {
        uint64_t result = v13 + result - v15;
      }
      else if (v15 <= a2 && *(_DWORD *)(v7 + 4 * v9 + 4) >= a2)
      {
        unsigned int v16 = *(_DWORD *)(v11 + 4 * v9 + 4);
        unsigned int v17 = v15 + v6;
        unsigned int v18 = v17 + (unsigned __int16)(v16 - result);
        if (v17 < a2) {
          unsigned int v19 = result + a2 - v17;
        }
        else {
          unsigned int v19 = result;
        }
        if (v18 >= a2) {
          return v19;
        }
        else {
          return v16;
        }
      }
      ++v9;
    }
    while (v14 != v9);
  }
  return result;
}

uint64_t XlReadStgStream::seek(XlReadStgStream *this, unsigned int a2, int a3)
{
  unsigned int v3 = a2;
  if (a3)
  {
    if (a3 == 1) {
      unsigned int v3 = (*(uint64_t (**)(XlReadStgStream *))(*(void *)this + 40))(this) + a2;
    }
    else {
      unsigned int v3 = *((_DWORD *)this + 5) - a2;
    }
  }
  XlReadStgStream::translateStreamLocation(this, v3, (unsigned __int16 *)this + 6);
  int v5 = *(uint64_t (**)(void))(**((void **)this + 5) + 16);
  return v5();
}

uint64_t XlReadStgStream::translateStreamLocation(XlReadStgStream *this, unsigned int a2, unsigned __int16 *a3)
{
  uint64_t v4 = *((void *)this + 6);
  uint64_t v3 = *((void *)this + 7);
  if (((v3 - v4) & 0x3FFFFFFFCLL) == 0 || *((_DWORD *)this + 4) > a2 || *((_DWORD *)this + 5) < a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 3002;
  }
  unint64_t v8 = 0;
  unint64_t v9 = (unint64_t)(v3 - v4) >> 2;
  while (1)
  {
    int v10 = *((_DWORD *)this + 2) == 2150 ? 18 : 4;
    uint64_t v11 = (v10 + *(_DWORD *)(v4 + 4 * v8));
    unint64_t v12 = (v9 - 1);
    uint64_t v13 = *((void *)this + 9);
    unsigned int v14 = *(_DWORD *)(v13 + 4 * v8);
    if (v8 < v12) {
      break;
    }
    uint64_t v11 = a2 - v14 + v11;
    *a3 = XlReadStgStream::getStreamMaxFileOffset(this) - v11;
    uint64_t v4 = *((void *)this + 6);
    uint64_t v3 = *((void *)this + 7);
LABEL_14:
    ++v8;
    unint64_t v9 = (unint64_t)(v3 - v4) >> 2;
    if (v8 >= v9) {
      return v11;
    }
  }
  if (a2 < v14) {
    goto LABEL_14;
  }
  unsigned int v15 = *(_DWORD *)(v13 + 4 * v8 + 4);
  BOOL v16 = v15 >= a2;
  unsigned __int16 v17 = v15 - a2;
  if (!v16) {
    goto LABEL_14;
  }
  uint64_t v11 = v11 + a2 - v14;
  *a3 = v17;
  return v11;
}

uint64_t XlReadStgStream::readUInt16(XlReadStgStream *this)
{
  unsigned int v2 = *((unsigned __int16 *)this + 6);
  BOOL v3 = v2 >= 2;
  __int16 v4 = v2 - 2;
  if (v3)
  {
    *((_WORD *)this + 6) = v4;
    int v5 = *(uint64_t (**)(void))(**((void **)this + 5) + 80);
    return v5();
  }
  else
  {
    int v7 = 2;
    (*(void (**)(XlReadStgStream *, void, int *))(*(void *)this + 56))(this, *((void *)this + 3), &v7);
    return CsLeReadUInt16(*((unsigned __int16 **)this + 3));
  }
}

uint64_t XlReadStgStream::readSInt32(XlReadStgStream *this)
{
  unsigned int v2 = *((unsigned __int16 *)this + 6);
  BOOL v3 = v2 >= 4;
  __int16 v4 = v2 - 4;
  if (v3)
  {
    *((_WORD *)this + 6) = v4;
    int v5 = *(uint64_t (**)(void))(**((void **)this + 5) + 96);
    return v5();
  }
  else
  {
    int v7 = 4;
    (*(void (**)(XlReadStgStream *, void, int *))(*(void *)this + 56))(this, *((void *)this + 3), &v7);
    return CsLeReadSInt32(*((unsigned int **)this + 3));
  }
}

void XlEshBinaryReader::read(uint64_t a1, EshRoot *a2)
{
  if (*((_DWORD *)a2 + 10) && (BOOL v3 = *(unsigned int **)(a1 + 104)) != 0)
  {
    (*(void (**)(unsigned int *, void, void))(*(void *)v3 + 16))(v3, v3[4], 0);
    EshBinaryReader::checkStarted(a1);
    if (*(_DWORD *)(a1 + 72) == *(_DWORD *)(a1 + 32))
    {
      (*(void (**)(EshRoot *, void))(*(void *)a2 + 104))(a2, 0);
      int v5 = (EshHeader *)operator new(0x10uLL);
      EshHeader::makeDefault(v5);
      (*(void (**)(uint64_t, void, EshHeader *))(*(void *)a1 + 88))(a1, *(unsigned int *)(a1 + 32), v5);
      if ((__int16)v5->var3 == -3806)
      {
        int var0 = v5->var0;
        int v7 = v5->var0 + v5->var1 + 8;
        *(_DWORD *)(a1 + 72) = v7;
        *(_DWORD *)(a1 + 32) = v7;
        *(_DWORD *)(a1 + 36) = v7;
        if (XlReadStgStream::getStreamSize(*(XlReadStgStream **)(a1 + 104)) - var0 - 17 > 0xFFFFFFF6) {
          goto LABEL_10;
        }
        (*(void (**)(uint64_t, void, EshHeader *))(*(void *)a1 + 88))(a1, v5->var1 + v5->var0 + 8, v5);
        if (v5->var3 != 7) {
          goto LABEL_10;
        }
        *(_DWORD *)(a1 + 36) = v5->var1 + v5->var0 + 8;
        EshRoot::appendChild(a2, v5);
        *((_DWORD *)a2 + 11) = v5->var0 + 8;
        int StreamLocation = *(_DWORD *)(a1 + 32);
      }
      else
      {
        EshRoot::appendChild(a2, v5);
        *((_DWORD *)a2 + 11) = XlReadStgStream::getStreamSize(*(XlReadStgStream **)(a1 + 104));
        int StreamLocation = XlReadStgStream::getStreamLocation(*(XlReadStgStream **)(a1 + 104));
      }
      *((_DWORD *)a2 + 12) = StreamLocation;
LABEL_10:
      JUMPOUT(0x23EC997B0);
    }
    exception = __cxa_allocate_exception(4uLL);
    int v10 = 7010;
  }
  else
  {
    exception = __cxa_allocate_exception(4uLL);
    int v10 = 7012;
  }
  _DWORD *exception = v10;
}

void sub_238B9E660(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C408B6DE1C6);
  _Unwind_Resume(a1);
}

uint64_t XlEshBinaryReader::getObjectHeader(EshParserVisitor **this, uint64_t a2, EshHeader *a3)
{
  uint64_t result = EshParserVisitor::visit(this[2], a3, a2);
  if (!*((unsigned char *)this + 92))
  {
    if (*((_DWORD *)this + 14))
    {
      uint64_t result = ChStack<EshHeader>::top((uint64_t)(this + 5));
      unsigned int v6 = *(_DWORD *)(result + 4) + *(_DWORD *)result + 8;
      unsigned int v7 = a3->var1 + a3->var0 + 8;
      BOOL v8 = v6 >= v7;
      unsigned int v9 = v6 - v7;
      if (!v8 || (v9 ? (BOOL v10 = v9 > 7) : (BOOL v10 = 1), !v10))
      {
LABEL_40:
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = 7013;
      }
      int var3 = a3->var3;
      if (*((_DWORD *)this + 14))
      {
        uint64_t result = ChStack<EshHeader>::top((uint64_t)(this + 5));
        int v12 = *(unsigned __int16 *)(result + 10);
LABEL_14:
        if (var3 != 61444)
        {
          if (var3 != 61451) {
            return result;
          }
          if (a3->var1 + a3->var0 + 8 < *((_DWORD *)this + 24))
          {
            uint64_t v13 = (EshHeader *)operator new(0x10uLL);
            EshHeader::makeDefault(v13);
            EshParserVisitor::visit(this[2], v13, a3->var1 + a3->var0 + 8);
            if ((__int16)v13->var3 == -3806) {
              a3->var0 += v13->var0 + 8;
            }
            uint64_t result = MEMORY[0x23EC997B0](v13, 0x1000C408B6DE1C6);
          }
          unsigned __int16 v14 = 4;
          goto LABEL_38;
        }
        if (v12 == 2) {
          goto LABEL_32;
        }
        if (v12 != 61443)
        {
          if (v12 != 61442) {
            goto LABEL_40;
          }
          unsigned int v15 = (EshContainer *)operator new(0x38uLL);
          EshContainer::EshContainer(v15, 0xF004u);
          (*((void (**)(EshParserVisitor **, EshContainer *, EshHeader *))*this + 13))(this, v15, a3);
          HeaderOfint Type = EshContainer::getHeaderOfType(v15, 61450);
          if (!HeaderOfType)
          {
            __int16 v20 = __cxa_allocate_exception(4uLL);
            _DWORD *v20 = 7013;
          }
          unsigned __int16 v17 = (EshSp *)operator new(0x30uLL);
          EshSp::EshSp(v17);
          (*((void (**)(EshParserVisitor **, EshSp *, uint64_t))*this + 13))(this, v17, HeaderOfType);
          if (*((unsigned char *)v17 + 42))
          {
            unsigned __int16 v14 = 12;
          }
          else
          {
            if (!*((unsigned char *)v17 + 35))
            {
              uint64_t v21 = __cxa_allocate_exception(4uLL);
              *uint64_t v21 = 7013;
            }
            unsigned __int16 v14 = 7;
          }
          uint64_t result = (*(uint64_t (**)(EshSp *))(*(void *)v17 + 8))(v17);
          if (v15) {
            uint64_t result = (*(uint64_t (**)(EshContainer *))(*(void *)v15 + 8))(v15);
          }
          goto LABEL_38;
        }
        unsigned int var1 = a3->var1;
        uint64_t result = ChStack<EshHeader>::top((uint64_t)(this + 5));
        if (var1 != *(_DWORD *)(result + 4) + 8)
        {
LABEL_32:
          unsigned __int16 v14 = 7;
        }
        else if (*((_DWORD *)this + 14) > 2u || *((unsigned char *)this + 93) && *((_DWORD *)this[13] + 2) == 236)
        {
          unsigned __int16 v14 = 6;
        }
        else
        {
          unsigned __int16 v14 = 5;
        }
LABEL_38:
        a3->int var3 = v14;
        a3->unsigned int var4 = 0;
        a3->int var2 = 0;
        return result;
      }
    }
    else
    {
      int var3 = a3->var3;
    }
    int v12 = 2;
    goto LABEL_14;
  }
  return result;
}

void sub_238B9E9EC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t XlReadStgStream::getStreamSize(XlReadStgStream *this)
{
  if (*((unsigned char *)this + 32)) {
    int v1 = *((_DWORD *)this + 5) - 8;
  }
  else {
    int v1 = *((_DWORD *)this + 5);
  }
  return (v1 - *((_DWORD *)this + 4));
}

uint64_t XlReadStgStream::getStreamLocation(XlReadStgStream *this)
{
  int v1 = (unsigned int *)*((void *)this + 6);
  if (((*((void *)this + 7) - (void)v1) & 0x3FFFFFFFCLL) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 3002;
  }
  return *v1;
}

void sub_238B9ED2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

uint64_t EshRoot::getChildInstance(EshRoot *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (((unint64_t)(*((void *)this + 3) - v2) >> 3) <= a2) {
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  return *(__int16 *)(*(void *)(v2 + 8 * a2) + 8);
}

void virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, EshObject *a2)
{
}

void XlEshBinaryReader::read(XlEshBinaryReader *this, EshObject *a2)
{
  EshBinaryReader::checkStarted((uint64_t)this);
  int v4 = (*((uint64_t (**)(EshObject *))a2->var0 + 2))(a2);
  int v5 = (EshHeader *)operator new(0x10uLL);
  EshHeader::makeDefault(v5);
  EshBinaryReader::findObjectHeader(this, v5, v4);
  if (!EshBinaryReader::atEnd(this))
  {
    if ((unsigned __int16)(v4 + 4096) <= 0x122u)
    {
      int v6 = (*((uint64_t (**)(EshObject *))a2->var0 + 11))(a2);
      uint64_t v7 = *(void *)this;
      if (v6) {
        (*(void (**)(XlEshBinaryReader *, EshObject *))(v7 + 112))(this, a2);
      }
      else {
        (*(void (**)(XlEshBinaryReader *, EshObject *))(v7 + 120))(this, a2);
      }
LABEL_15:
      EshBinaryReader::movePastObject(this, v5);
      JUMPOUT(0x23EC997B0);
    }
    switch(v4)
    {
      case 4:
        int v8 = *((_DWORD *)this + 14);
        if (!v8) {
          ChStack<EshHeader>::push((uint64_t *)this + 5, (uint64_t)v5);
        }
        (*(void (**)(XlEshBinaryReader *, EshObject *))(*(void *)this + 128))(this, a2);
        if (!v8) {
          --*((_DWORD *)this + 14);
        }
        goto LABEL_15;
      case 5:
        (*(void (**)(XlEshBinaryReader *, EshObject *))(*(void *)this + 136))(this, a2);
        *((unsigned char *)this + 93) = 1;
        goto LABEL_15;
      case 6:
        (*(void (**)(XlEshBinaryReader *, EshObject *))(*(void *)this + 160))(this, a2);
        goto LABEL_15;
      case 7:
        (*(void (**)(XlEshBinaryReader *, EshObject *))(*(void *)this + 152))(this, a2);
        goto LABEL_15;
      case 12:
        (*(void (**)(XlEshBinaryReader *, EshObject *))(*(void *)this + 144))(this, a2);
        goto LABEL_15;
      default:
        exception = __cxa_allocate_exception(4uLL);
        int v10 = 1004;
        goto LABEL_19;
    }
  }
  exception = __cxa_allocate_exception(4uLL);
  int v10 = 7000;
LABEL_19:
  _DWORD *exception = v10;
}

void sub_238B9F080(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x23EC997B0](v1, 0x1000C408B6DE1C6);
  }
  _Unwind_Resume(exception_object);
}

EshHeader *XlEshBinaryReader::readObject(XlReadStgStream **this, EshContainer *a2)
{
  int v4 = (uint64_t *)(this + 5);
  int v5 = (const EshHeader *)(*((uint64_t (**)(XlReadStgStream **))*this + 12))(this);
  EshRecord::setHeader(a2, v5);
  int v6 = *((_DWORD *)a2 + 4);
  int v7 = *((_DWORD *)a2 + 3);
  EshContainer::removeChildren((uint64_t)a2);
  ChStack<EshHeader>::push(v4, (uint64_t)a2 + 12);
  int v8 = (EshHeader *)operator new(0x10uLL);
  uint64_t result = EshHeader::makeDefault(v8);
  uint64_t v10 = (v6 + 8);
  unsigned int v11 = v10 + v7;
  if (v10 < (int)v10 + v7)
  {
    do
    {
      if (v10 >= *((_DWORD *)this[13] + 5))
      {
        while (1)
        {
          int v12 = this[13];
          if (v10 < *((_DWORD *)v12 + 5)) {
            break;
          }
          if ((XlReadStgStream::processNextStreamChunk(v12) & 1) == 0)
          {
            exception = __cxa_allocate_exception(4uLL);
            _DWORD *exception = 7000;
          }
        }
      }
      (*((void (**)(XlReadStgStream **, uint64_t, EshHeader *))*this + 11))(this, v10, v8);
      if ((__int16)v8->var3 != -3816)
      {
        if (v8->var1 >= *((_DWORD *)this + 24)) {
          v8->var2 |= 0x1000u;
        }
        EshContainer::addChild(a2, v8);
      }
      uint64_t v10 = (v10 + v8->var0 + 8);
    }
    while (v10 < v11);
    --*((_DWORD *)this + 14);
LABEL_13:
    JUMPOUT(0x23EC997B0);
  }
  --*((_DWORD *)this + 14);
  if (v8) {
    goto LABEL_13;
  }
  return result;
}

void sub_238B9F288(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlReadStgStream::getStreamMaxFileOffset(XlReadStgStream *this)
{
  uint64_t v1 = *((void *)this + 6);
  unint64_t v2 = *((void *)this + 7) - v1;
  if ((v2 & 0x3FFFFFFFCLL) == 0
    || (unsigned int v3 = *((_DWORD *)this + 5),
        unsigned int v4 = *(_DWORD *)(*((void *)this + 9)
                       + 4 * (((*((void *)this + 10) - *((void *)this + 9)) >> 2) - 1)),
        BOOL v5 = v3 >= v4,
        unsigned int v6 = v3 - v4,
        !v5))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 3002;
  }
  unint64_t v7 = v2 >> 2;
  if (*((_DWORD *)this + 2) == 2150) {
    int v8 = 18;
  }
  else {
    int v8 = 4;
  }
  return v6 + *(_DWORD *)(v1 + 4 * (v7 - 1)) + v8;
}

uint64_t EshContainer::getChildInstance(EshContainer *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (((unint64_t)(*((void *)this + 5) - v2) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  return *(__int16 *)(*(void *)(v2 + 8 * a2) + 8);
}

uint64_t XlEshBinaryReader::readRecordData(EshParserVisitor **this, EshRecord *a2, const EshHeader *a3)
{
  if (EshRecord::getRecordType(a2) != a3->var3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  EshRecord::setHeader(a2, a3);
  EshParserVisitor::beginRead(this[2], a2);
  if ((__int16)a3->var3 == -4092)
  {
    EshContainer::removeChildren((uint64_t)v6);
    int var0 = a3->var0;
    unsigned int var1 = a3->var1;
    unsigned int v9 = (EshHeader *)operator new(0x10uLL);
    EshHeader::makeDefault(v9);
    uint64_t v10 = var1 + 8;
    unsigned int v11 = v10 + var0;
    while (v10 < v11)
    {
      if (v10 >= *((_DWORD *)this[13] + 5))
      {
        while (1)
        {
          int v12 = this[13];
          if (v10 < *((_DWORD *)v12 + 5)) {
            break;
          }
          if ((XlReadStgStream::processNextStreamChunk(v12) & 1) == 0)
          {
            uint64_t v13 = __cxa_allocate_exception(4uLL);
            *uint64_t v13 = 7000;
          }
        }
      }
      EshParserVisitor::visit(this[2], v9, v10);
      if (v9->var1 >= *((_DWORD *)this + 24)) {
        v9->var2 |= 0x1000u;
      }
      EshContainer::addChild(v6, v9);
      uint64_t v10 = (v10 + v9->var0 + 8);
    }
    (*(void (**)(EshParserVisitor *, void, void))(*(void *)this[1] + 16))(this[1], a3->var1 + a3->var0 + 8, 0);
    if (v9) {
      MEMORY[0x23EC997B0](v9, 0x1000C408B6DE1C6);
    }
  }
  else
  {
    (*(void (**)(EshRecord *, EshParserVisitor *))(*(void *)a2 + 112))(a2, this[2]);
  }
  unsigned __int16 v14 = this[2];
  return EshParserVisitor::endRead(v14, a2);
}

void sub_238B9F5E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x23EC997B0](v1, 0x1000C408B6DE1C6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XlReadStgStream::readUInt32(XlReadStgStream *this)
{
  unsigned int v2 = *((unsigned __int16 *)this + 6);
  BOOL v3 = v2 >= 4;
  __int16 v4 = v2 - 4;
  if (v3)
  {
    *((_WORD *)this + 6) = v4;
    BOOL v5 = *(uint64_t (**)(void))(**((void **)this + 5) + 104);
    return v5();
  }
  else
  {
    int v7 = 4;
    (*(void (**)(XlReadStgStream *, void, int *))(*(void *)this + 56))(this, *((void *)this + 3), &v7);
    return CsLeReadSInt32(*((unsigned int **)this + 3));
  }
}

uint64_t XlReadStgStream::readByte(XlReadStgStream *this)
{
  __int16 v2 = *((_WORD *)this + 6);
  if (!v2)
  {
    XlReadStgStream::readNextHostRecordHeader(this);
    __int16 v2 = *((_WORD *)this + 6);
  }
  *((_WORD *)this + 6) = v2 - 1;
  BOOL v3 = *(uint64_t (**)(void))(**((void **)this + 5) + 64);
  return v3();
}

uint64_t XlReadStgStream::readBytes(XlReadStgStream *this, char *a2, unsigned int *a3)
{
  int v6 = *a3;
  if (*a3 > *((unsigned __int16 *)this + 6))
  {
    int v7 = 0;
    while (1)
    {
      do
      {
        int v8 = *((unsigned __int16 *)this + 6);
        int v12 = v8;
        if (!v8) {
          break;
        }
        if (v7 + v8 > *a3) {
          int v12 = *a3 - v7;
        }
        uint64_t result = (*(uint64_t (**)(void, char *, int *))(**((void **)this + 5) + 56))(*((void *)this + 5), &a2[v7], &v12);
        int v10 = v12;
        int v11 = *((unsigned __int16 *)this + 6);
        *((_WORD *)this + 6) = v11 - v12;
        v6 -= v10;
        if (!v6) {
          return result;
        }
        v7 += v10;
      }
      while (v11 != (unsigned __int16)v10);
      XlReadStgStream::readNextHostRecordHeader(this);
    }
  }
  uint64_t result = (*(uint64_t (**)(void, char *, unsigned int *))(**((void **)this + 5) + 56))(*((void *)this + 5), a2, a3);
  *((_WORD *)this + 6) -= *(_WORD *)a3;
  return result;
}

void XlEshRoot::~XlEshRoot(XlEshRoot *this)
{
  EshRoot::~EshRoot(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlPageProperties::setFooterString(XlPageProperties *this, OcText *a2)
{
  BOOL v3 = (OcText *)*((void *)this + 6);
  if (!v3)
  {
    BOOL v3 = (OcText *)operator new(0x30uLL);
    OcText::OcText(v3);
    *((void *)this + 6) = v3;
  }
  return OcText::operator=((uint64_t)v3, (uint64_t)a2);
}

void sub_238B9F92C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_238B9FEC4(_Unwind_Exception *a1, void *a2, ...)
{
  va_start(va, a2);

  XlGraphicsInfo::~XlGraphicsInfo((XlGraphicsInfo *)va);
  _Unwind_Resume(a1);
}

void XlGraphicsInfo::XlGraphicsInfo(XlGraphicsInfo *this)
{
  *(void *)this = &unk_26EBE2A50;
  *((void *)this + 1) = 48;
  *(_DWORD *)((char *)this + 78) = 0;
  *((_WORD *)this + 41) = 0;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 48) = 0;
  *(void *)((char *)this + 52) = 0;
  *(void *)((char *)this + 68) = 0;
  *(void *)((char *)this + 60) = 0;
  *((unsigned char *)this + 76) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((unsigned char *)this + 104) = 0;
  *(_OWORD *)((char *)this + 108) = xmmword_238EE0D60;
  *((unsigned char *)this + 124) = 0;
  *((void *)this + 16) = 0;
}

uint64_t *XlBinaryReader::read(XlBinaryReader *this, XlGraphicsInfo *a2)
{
  XlHeader::XlHeader(&v34);
  uint64_t v4 = *((unsigned int *)this + 324);
  XlGraphicsInfo::clear(a2);
  uint64_t result = (uint64_t *)*((void *)this + 163);
  if (result) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  *((void *)this + 163) = 0;
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0)
  {
    uint64_t result = (uint64_t *)XlBinaryReader::setSheet(this, 0);
    if ((v4 & 0x80000000) != 0) {
      return result;
    }
LABEL_7:
    (*(void (**)(void, uint64_t, void))(**((void **)this + 164) + 16))(*((void *)this + 164), v4, 0);
    uint64_t result = (uint64_t *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v34, *((unsigned char *)this + 1320));
    if (v34.var1 != 60 && v34.var1 != 236) {
      goto LABEL_31;
    }
    int v6 = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
    *((_DWORD *)this + 325) = v6 - XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
    (*(void (**)(void, void, uint64_t))(**((void **)this + 164) + 16))(*((void *)this + 164), v34.var0, 1);
    uint64_t result = (uint64_t *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v34, *((unsigned char *)this + 1320));
    while (v34.var1 == 60 || v34.var1 == 236)
      uint64_t result = (uint64_t *)XlParserVisitor::skipAhead(*((XlParserVisitor **)this + 167), &v34, *((unsigned char *)this + 1320));
    if (v34.var1 != 93)
    {
LABEL_31:
      *((_DWORD *)this + 324) = -1;
      return result;
    }
    int v7 = (XlObjBiff8 *)operator new(0x40uLL);
    XlObjBiff8::XlObjBiff8(v7, &v34);
    *((void *)this + 163) = v7;
    if (v7) {
    (*(void (**)(void, XlObjBiff8 *))(**((void **)this + 167) + 136))(*((void *)this + 167), v7);
    }
    *((_DWORD *)a2 + 2) = *((_DWORD *)v7 + 10);
    *((_WORD *)a2 + 6) = *((_WORD *)v7 + 22);
    __int16 v8 = *((_WORD *)v7 + 23);
    *((unsigned char *)a2 + 16) = (v8 & 0x2000) != 0;
    *((unsigned char *)a2 + 17) = (v8 & 0x4000) != 0;
    *((unsigned char *)a2 + 14) = v8 & 1;
    *((unsigned char *)a2 + 15) = (v8 & 0x10) != 0;
    *((_DWORD *)a2 + 13) = *((_DWORD *)v7 + 12);
    if (*((unsigned char *)v7 + 56))
    {
      unsigned int v9 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v9);
      int v10 = (char *)operator new[](0xCuLL);
      snprintf(v10, 8uLL, "MBD%08X", *((_DWORD *)v7 + 13));
      XlString::setString(v9, v10);
      *((unsigned char *)a2 + 124) = 1;
      XlGraphicsInfo::takeOLEName(a2, v9);
      if (v10) {
        MEMORY[0x23EC99790](v10, 0x1000C8077774924);
      }
    }
    uint64_t v11 = (*((void *)v7 + 3) - *((void *)v7 + 2)) >> 3;
    unint64_t v33 = 0;
    if (v11)
    {
      unsigned int v12 = 0;
      int v13 = 0;
      do
      {
        uint64_t MergeRegion = XlMerge::getMergeRegion(*((XlMerge **)this + 163), v12);
        if (MergeRegion)
        {
          unsigned int v15 = operator new(0x10uLL);
          int v16 = *(_DWORD *)(MergeRegion + 8);
          int v17 = *(_DWORD *)(MergeRegion + 32);
          uint64_t v18 = *(void *)(MergeRegion + 24);
          *(_DWORD *)unsigned int v15 = *(__int16 *)(MergeRegion + 16);
          int v15[2] = v16;
          v15[3] = v17;
          *((void *)v15 + 1) = v18;
          ChAutoPtr<XlGraphicsInfo::XlObjData>::setValue(&v33, (uint64_t)v15);
          XlCrn::appendOperand(a2, v33);
          unint64_t v33 = 0;
          *(void *)(MergeRegion + 24) = 0;
          *(_DWORD *)(MergeRegion + 32) = 0;
        }
        unsigned int v12 = (unsigned __int16)++v13;
      }
      while (v11 > (unsigned __int16)v13);
    }
    uint64_t v19 = *((void *)this + 163);
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    *((void *)this + 163) = 0;
    int v20 = *((_DWORD *)a2 + 2);
    if (v20 == 8)
    {
      int v22 = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
      XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v34, *((unsigned char *)this + 1320));
      int var1 = (unsigned __int16)v34.var1;
      if (v34.var1 == 127)
      {
        unsigned int var0 = v34.var0;
        unsigned int v25 = (XlImData *)operator new(0x28uLL);
        XlImData::XlImData(v25, &v34);
        *((void *)this + 163) = v25;
        if (v25) {
        *((unsigned char *)v25 + 36) = 1;
        }
        (*(void (**)(void, XlImData *))(**((void **)this + 167) + 88))(*((void *)this + 167), v25);
        *((unsigned char *)a2 + 104) = 1;
        *((_DWORD *)a2 + 30) = *((_DWORD *)v25 + 8);
        *((void *)a2 + 14) = *((void *)v25 + 3);
        *((_DWORD *)a2 + 27) = v22;
        uint64_t v26 = *((void *)this + 163);
        if (v26) {
          (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
        }
        *((void *)this + 163) = 0;
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v34, *((unsigned char *)this + 1320));
        unsigned int v27 = var0 - 8;
        while (1)
        {
          int var1 = (unsigned __int16)v34.var1;
          if (v34.var1 != 127 && v34.var1 != 60) {
            break;
          }
          v27 += v34.var0;
          if (v27 > *((_DWORD *)a2 + 28)) {
            break;
          }
          XlParserVisitor::skipAhead(*((XlParserVisitor **)this + 167), &v34, *((unsigned char *)this + 1320));
        }
      }
      if (var1 == 236 || var1 == 60)
      {
        int v32 = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
        int v28 = v32 - XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
LABEL_60:
        *((_DWORD *)this + 324) = v28;
        return ChAutoPtr<XlGraphicsInfo::XlObjData>::~ChAutoPtr((uint64_t *)&v33);
      }
    }
    else
    {
      if (v20 == 5)
      {
        int v21 = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v34, *((unsigned char *)this + 1320));
        while (v34.var1 != 2057)
          XlParserVisitor::skipAhead(*((XlParserVisitor **)this + 167), &v34, *((unsigned char *)this + 1320));
        (*(void (**)(void, void, uint64_t))(**((void **)this + 164) + 16))(*((void *)this + 164), v34.var0, 1);
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v34, *((unsigned char *)this + 1320));
        while (v34.var1 != 10)
          XlParserVisitor::skipAhead(*((XlParserVisitor **)this + 167), &v34, *((unsigned char *)this + 1320));
        (*(void (**)(void, void, uint64_t))(**((void **)this + 164) + 16))(*((void *)this + 164), v34.var0, 1);
        *((_DWORD *)a2 + 24) = v21;
        *((_DWORD *)a2 + 25) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164))
                             - v21;
      }
      else
      {
        int v28 = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v34, *((unsigned char *)this + 1320));
        if (v34.var1 != 60 && v34.var1 != 236) {
          goto LABEL_59;
        }
        if (v34.var0 != 8) {
          goto LABEL_60;
        }
        (*(void (**)(void))(**((void **)this + 164) + 104))(*((void *)this + 164));
        (*(void (**)(void))(**((void **)this + 164) + 104))(*((void *)this + 164));
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v34, *((unsigned char *)this + 1320));
        if (v34.var1 != 438) {
          goto LABEL_60;
        }
        uint64_t v29 = (XlTxo *)operator new(0x38uLL);
        XlTxo::XlTxo(v29, &v34);
        *((void *)this + 163) = v29;
        int v30 = (char *)ChDOWNCAST<XlRecord,XlTxo>(v29);
        (*(void (**)(void, char *))(**((void **)this + 167) + 176))(*((void *)this + 167), v30);
        *((unsigned char *)a2 + 48) = 1;
        *((_DWORD *)a2 + 18) = *((_DWORD *)v30 + 8);
        *((unsigned char *)a2 + 76) = v30[36];
        *((void *)a2 + 8) = *((void *)v30 + 3);
        *(_DWORD *)((char *)a2 + 78) = *(_DWORD *)(v30 + 38);
        XlAddMenu::setHelp(a2, *((XlString **)v30 + 2));
        XlGraphicsInfo::takeTextFormula(a2, *((unsigned __int8 **)v30 + 6), *((_WORD *)v30 + 21));
        *((void *)v30 + 2) = 0;
        *((void *)v30 + 6) = 0;
        uint64_t v31 = *((void *)this + 163);
        if (v31) {
          (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
        }
        *((void *)this + 163) = 0;
      }
      XlParserVisitor::peekAhead(*((XlParserVisitor **)this + 167), &v34, *((unsigned char *)this + 1320));
      if (v34.var1 == 236 || v34.var1 == 60)
      {
        int v28 = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
        goto LABEL_60;
      }
    }
LABEL_59:
    int v28 = -1;
    goto LABEL_60;
  }
  if ((v4 & 0x80000000) == 0) {
    goto LABEL_7;
  }
  return result;
}

void sub_238BA08D4(void *a1)
{
  __cxa_begin_catch(a1);
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 48) = 0;
  if (*(void *)(v1 + 1304)) {
    XlChartBinaryReader::scanChartProperties();
  }
  *(void *)(v1 + 1304) = 0;
  *(_DWORD *)(v1 + 1296) = -1;
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = 1004;
}

void sub_238BA091C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  __cxa_end_catch();
  ChAutoPtr<XlGraphicsInfo::XlObjData>::~ChAutoPtr((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t XlGraphicsInfo::clear(XlGraphicsInfo *this)
{
  *((void *)this + 1) = 48;
  *((unsigned char *)this + 48) = 0;
  *((_DWORD *)this + 13) = 0;
  *((_WORD *)this + 40) = 0;
  *((unsigned char *)this + 104) = 0;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 8) = 0;
  *(void *)((char *)this + 69) = 0;
  *(_OWORD *)((char *)this + 108) = xmmword_238EE0D60;
  *((void *)this + 12) = 0;
  *((unsigned char *)this + 124) = 0;
  XlGraphicsInfo::clearStateElements((uint64_t)this);
  uint64_t v2 = *((void *)this + 7);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 7) = 0;
  uint64_t v3 = *((void *)this + 16);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 16) = 0;
  uint64_t result = *((void *)this + 11);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  *((void *)this + 11) = 0;
  *((_WORD *)this + 41) = 0;
  return result;
}

uint64_t XlGraphicsInfo::clearStateElements(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 24);
  uint64_t v3 = *(void *)(this + 32);
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v2 + 8 * v4);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 8);
        if (v6) {
          MEMORY[0x23EC99790](v6, 0x1000C8077774924);
        }
        *(void *)(v5 + 8) = 0;
        this = MEMORY[0x23EC997B0](v5, 0x1010C40466105CCLL);
        uint64_t v2 = *(void *)(v1 + 24);
        uint64_t v3 = *(void *)(v1 + 32);
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  *(void *)(v1 + 32) = v2;
  return this;
}

void XlEshParserVisitor::~XlEshParserVisitor(XlEshParserVisitor *this)
{
  EshClientDataModelVisitor::EshClientDataModelVisitor(this);
  JUMPOUT(0x23EC997B0);
}

void XlGraphicsInfo::~XlGraphicsInfo(XlGraphicsInfo *this)
{
  *(void *)this = &unk_26EBE2A50;
  XlGraphicsInfo::clearStateElements((uint64_t)this);
  uint64_t v2 = *((void *)this + 7);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 7) = 0;
  uint64_t v3 = *((void *)this + 16);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 16) = 0;
  uint64_t v4 = *((void *)this + 11);
  if (v4) {
    MEMORY[0x23EC99790](v4, 0x1000C8077774924);
  }
  *((void *)this + 11) = 0;
  *((_WORD *)this + 41) = 0;
  uint64_t v5 = (void *)*((void *)this + 3);
  if (v5)
  {
    *((void *)this + 4) = v5;
    operator delete(v5);
  }
}

{
  uint64_t vars8;

  XlGraphicsInfo::~XlGraphicsInfo(this);
  JUMPOUT(0x23EC997B0);
}

void sub_238BA0CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void XlMerge::XlMerge(XlMerge *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE00A8;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 40) = 1;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlMerge *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  if (v4 >= 1)
  {
    int v5 = v4;
    LOWORD(v6) = 0;
    do
    {
      int v7 = (XlRef *)operator new(0xAuLL);
      XlRef::XlRef(v7, 0);
      (*(void (**)(XlParserVisitor *, XlRef *))(*(void *)this + 1504))(this, v7);
      XlCoordList::appendVertex(a2, (XlVertex *)v7);
      int v6 = (__int16)(v6 + 1);
    }
    while (v6 < v5);
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238BA0E88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlMerge::~XlMerge(XlMerge *this)
{
  XlMerge::~XlMerge(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBE00A8;
  XlMerge::clearMergedRegions((uint64_t)this);
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

uint64_t XlMerge::clearMergedRegions(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 40))
  {
    uint64_t v2 = *(void *)(this + 16);
    uint64_t v3 = *(void *)(this + 24);
    if (((v3 - v2) & 0x7FFFFFFF8) != 0)
    {
      unint64_t v4 = 0;
      do
      {
        this = *(void *)(v2 + 8 * v4);
        if (this)
        {
          this = MEMORY[0x23EC997B0](this, 0x1000C400EA6A39BLL);
          uint64_t v2 = *(void *)(v1 + 16);
          uint64_t v3 = *(void *)(v1 + 24);
        }
        ++v4;
      }
      while (v4 < ((unint64_t)(v3 - v2) >> 3));
    }
  }
  else
  {
    uint64_t v2 = *(void *)(this + 16);
  }
  *(void *)(v1 + 24) = v2;
  return this;
}

void sub_238BA1014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BA10F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BA11F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BA1458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BA182C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238BA195C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BA1A00(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_238BA1B14(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t TSUDeviceRGBColorSpace()
{
  if (TSUDeviceRGBColorSpace_sDeviceRGBDispatchOnce != -1) {
    dispatch_once(&TSUDeviceRGBColorSpace_sDeviceRGBDispatchOnce, &__block_literal_global_9);
  }
  return TSUDeviceRGBColorSpace_sDeviceRGBColorSpace;
}

uint64_t TSUDeviceCMYKColorSpace()
{
  if (TSUDeviceCMYKColorSpace_sDeviceCMYKDispatchOnce != -1) {
    dispatch_once(&TSUDeviceCMYKColorSpace_sDeviceCMYKDispatchOnce, &__block_literal_global_2);
  }
  return TSUDeviceCMYKColorSpace_sDeviceCMYKColorSpace;
}

void sub_238BA1CC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BA1F30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BA2074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BA22F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BA243C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BA2624(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_238BA26E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BA2B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238BA2D38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t XlPageProperties::setHeaderString(XlPageProperties *this, OcText *a2)
{
  uint64_t v3 = (OcText *)*((void *)this + 5);
  if (!v3)
  {
    uint64_t v3 = (OcText *)operator new(0x30uLL);
    OcText::OcText(v3);
    *((void *)this + 5) = v3;
  }
  return OcText::operator=((uint64_t)v3, (uint64_t)a2);
}

void sub_238BA2DDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlTopMargin::XlTopMargin(XlTopMargin *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *uint64_t v2 = &unk_26EBE1DF8;
  v2[2] = 0;
}

void XlObjBiff8::XlObjBiff8(XlObjBiff8 *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0368;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 48;
  *(_DWORD *)(v2 + 52) = -1;
  *(unsigned char *)(v2 + 56) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlObjBiff8 *a2)
{
  LODWORD(v4) = *((_DWORD *)a2 + 2);
  char v5 = *((unsigned char *)this + 76);
  int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)this + 18) = v6;
  uint64_t v7 = *((void *)this + 10);
  int v8 = *((_DWORD *)this + 22);
  *((unsigned char *)this + 76) = 0;
  int v9 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  __int16 v10 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  if (v9)
  {
    LOWORD(v11) = v10;
    while (1)
    {
      int v12 = (__int16)((_WORD)v4 - 4);
      int v13 = (__int16)v11 >= v12 ? (__int16)((_WORD)v4 - 4) : (__int16)v11;
      *((_DWORD *)this + 21) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2))
                             - 4;
      *((_DWORD *)this + 22) = 4;
      *((_DWORD *)this + 20) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2))
                             + v13;
      if (v12 < (__int16)v11) {
        break;
      }
      if ((unsigned __int16)v9 == 21)
      {
        *((_DWORD *)a2 + 10) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
        *((_WORD *)a2 + 22) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
        *((_WORD *)a2 + 23) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
        *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
        (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4294967286, 1);
      }
      unint64_t v4 = (XlGenericRecord *)operator new(0x28uLL);
      XlGenericRecord::XlGenericRecord(v4, v9, (__int16)v11, *((unsigned char *)a2 + 14));
      (*(void (**)(XlParserVisitor *, XlGenericRecord *))(*(void *)this + 80))(this, v4);
      if ((unsigned __int16)v9 == 9 && *((_DWORD *)a2 + 10) == 8)
      {
        uint64_t v14 = *((void *)v4 + 3);
        if (v14)
        {
          uint64_t v15 = *((unsigned int *)v4 + 8);
          if (v15 >= 4)
          {
            int SInt32 = CsLeReadSInt32((unsigned int *)(v14 + v15 - 4));
            *((unsigned char *)a2 + 56) = 1;
            *((_DWORD *)a2 + 13) = SInt32;
          }
        }
      }
      XlCoordList::appendVertex(a2, v4);
      LOWORD(v4) = v12 - v11;
      int v9 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
      int v11 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
      if (!v9)
      {
        int v17 = (XlGenericRecord *)operator new(0x28uLL);
        XlGenericRecord::XlGenericRecord(v17, 0, v11, *((unsigned char *)a2 + 14));
        XlCoordList::appendVertex(a2, v17);
        goto LABEL_19;
      }
    }
    if (v12 >= 1)
    {
      uint64_t v18 = (XlGenericRecord *)operator new(0x28uLL);
      XlGenericRecord::XlGenericRecord(v18, v9, v12, *((unsigned char *)a2 + 14));
      (*(void (**)(XlParserVisitor *, XlGenericRecord *))(*(void *)this + 80))(this, v18);
      *((_DWORD *)v18 + 2) = (__int16)v11;
      XlCoordList::appendVertex(a2, v18);
    }
    uint64_t v19 = (XlGenericRecord *)operator new(0x28uLL);
    XlGenericRecord::XlGenericRecord(v19, 0, 0, *((unsigned char *)a2 + 14));
    XlCoordList::appendVertex(a2, v19);
  }
LABEL_19:
  *((_DWORD *)this + 18) = v6;
  *((void *)this + 10) = v7;
  *((_DWORD *)this + 22) = v8;
  *((unsigned char *)this + 76) = v5;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238BA33C4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void XlGenericRecord::XlGenericRecord(XlGenericRecord *this, __int16 a2, int a3, char a4)
{
  XlRecord::XlRecord(this, a2, a3, a4);
  *(void *)uint64_t v4 = &unk_26EBDFB68;
  *(void *)(v4 + 24) = 0;
  *(_DWORD *)(v4 + 32) = 0;
  *(_WORD *)(v4 + 16) = *(_WORD *)(v4 + 12);
  *(_WORD *)(v4 + 12) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlGenericRecord *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  if (!*((unsigned char *)this + 76))
  {
    unsigned int v6 = *((_DWORD *)a2 + 2);
    uint64_t v4 = operator new[](v6);
    *((void *)this + 3) = v4;
    (*(void (**)(void, void *, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v4, &v6);
    XlGenericRecord::takeContents(a2, *((unsigned __int8 **)this + 3), v6);
    *((void *)this + 3) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlGenericRecord::takeContents(XlGenericRecord *this, unsigned __int8 *a2, int a3)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  *((void *)this + 3) = a2;
  *((_DWORD *)this + 8) = a3;
  return result;
}

void *ChAutoPtr<XlGraphicsInfo::XlObjData>::setValue(void *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result != a2)
  {
    uint64_t v4 = result;
    if (v2)
    {
      uint64_t v5 = *(void *)(v2 + 8);
      if (v5) {
        MEMORY[0x23EC99790](v5, 0x1000C8077774924);
      }
      *(void *)(v2 + 8) = 0;
      uint64_t result = (void *)MEMORY[0x23EC997B0](v2, 0x1010C40466105CCLL);
    }
    *uint64_t v4 = a2;
  }
  return result;
}

void XlObjBiff8::~XlObjBiff8(XlObjBiff8 *this)
{
  XlObjBiff8::~XlObjBiff8(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBE0368;
  XlObjBiff8::clearSubRecords(this);
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

void *XlObjBiff8::clearSubRecords(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[2];
  uint64_t v3 = this[3];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v4);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[2];
        uint64_t v3 = v1[3];
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[3] = v2;
  return this;
}

void XlGenericRecord::~XlGenericRecord(XlGenericRecord *this)
{
  *(void *)this = &unk_26EBDFB68;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBDFB68;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
}

uint64_t *ChAutoPtr<XlGraphicsInfo::XlObjData>::~ChAutoPtr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3) {
      MEMORY[0x23EC99790](v3, 0x1000C8077774924);
    }
    *(void *)(v2 + 8) = 0;
    MEMORY[0x23EC997B0](v2, 0x1010C40466105CCLL);
  }
  *a1 = 0;
  return a1;
}

void XlEshGroup::XlEshGroup(XlEshGroup *this)
{
  EshGroup::EshGroup(this);
  void *v1 = &unk_26EBE26E8;
  v1[34] = &unk_26EBE2798;
  v1[46] = 0;
  v1[47] = 0;
}

void XlEshShape::XlEshShape(XlEshShape *this)
{
  EshShape::EshShape((EshShape *)this);
  void *v1 = &unk_26EBE28B8;
  v1[52] = &unk_26EBE2988;
  v1[72] = 0;
  v1[74] = 0;
  v1[73] = 0;
}

uint64_t XlReadStgStream::readString16(XlReadStgStream *this, int *a2, unsigned __int16 *a3)
{
  unint64_t v5 = *((unsigned __int16 *)this + 6);
  uint64_t v6 = *a2;
  if (v5 >= 2 * v6)
  {
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 5) + 136))(*((void *)this + 5));
    __int16 v11 = *(_WORD *)a2;
  }
  else
  {
    do
    {
      int v13 = (unsigned __int16)v5 >> 1;
      if ((unsigned __int16)v5 >= 2u)
      {
        (*(void (**)(void, int *, unsigned __int16 *))(**((void **)this + 5) + 136))(*((void *)this + 5), &v13, a3);
        LOWORD(v5) = *((_WORD *)this + 6) - 2 * v13;
        *((_WORD *)this + 6) = v5;
      }
      if ((_WORD)v5)
      {
        unsigned __int16 v7 = (*(uint64_t (**)(XlReadStgStream *))(*(void *)this + 128))(this);
        int v8 = v13;
        a3[v13] = v7;
        unsigned int v9 = v8 + 1;
        int v13 = v9;
      }
      else
      {
        XlReadStgStream::readNextHostRecordHeader(this);
        unsigned int v9 = v13;
      }
      LODWORD(v6) = v6 - v9;
      int v14 = v6;
      a3 += v9;
      unint64_t v5 = *((unsigned __int16 *)this + 6);
    }
    while (v5 < 2 * (int)v6);
    uint64_t result = (*(uint64_t (**)(void, int *, unsigned __int16 *))(**((void **)this + 5) + 136))(*((void *)this + 5), &v14, a3);
    __int16 v11 = v14;
  }
  *((_WORD *)this + 6) -= 2 * v11;
  return result;
}

uint64_t XlEshBinaryReader::readClientAnchor(XlEshBinaryReader *this, EshContentBase *a2, const EshHeader *a3)
{
  uint64_t v6 = (EshAtom *)operator new(0x40uLL);
  EshAtom::EshAtom(v6, 0xF010u, 0);
  *(void *)uint64_t v6 = &unk_26EBDF518;
  *((_WORD *)v6 + 14) = 0;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  (*(void (**)(XlEshBinaryReader *, EshAtom *, const EshHeader *))(*(void *)this + 104))(this, v6, a3);
  if ((*(unsigned int (**)(EshContentBase *))(*(void *)a2 + 16))(a2) == 7)
  {
    return XlEshShape::takeClientAnchor((uint64_t)v7, (uint64_t)v6);
  }
  else
  {
    if ((*(unsigned int (**)(EshContentBase *))(*(void *)a2 + 16))(a2) != 6)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 0;
    }
    return XlEshGroup::takeClientAnchor((uint64_t)v9, v6);
  }
}

void sub_238BA3BEC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t XlEshClientAnchor::accept(int a1, void *lpsrc)
{
  ClientVisitor = (const void *)EshDataModelVisitor::getClientVisitor(v2);
  return v4();
}

uint64_t XlEshParserVisitor::visit(uint64_t a1, EshRecord *this)
{
  if (EshRecord::getDataLength(this) == 8)
  {
    int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8));
    int v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8));
    int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8));
    int v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8));
  }
  else
  {
    if (EshRecord::getDataLength(this) != 18)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 3002;
    }
    *((_WORD *)this + 14) = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8));
    int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8));
    int v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8));
    int v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8));
    int v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8));
    int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8));
    int v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8));
    int v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8));
    int v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8));
    *((_DWORD *)this + 12) = v8;
    *((_DWORD *)this + 13) = v9;
    *((_DWORD *)this + 14) = v10;
    *((_DWORD *)this + 15) = v11;
  }
  *((_DWORD *)this + 8) = v4;
  *((_DWORD *)this + 9) = v5;
  *((_DWORD *)this + 10) = v6;
  *((_DWORD *)this + 11) = v7;
  return 1;
}

uint64_t XlReadStgStream::readSInt16(XlReadStgStream *this)
{
  unsigned int v2 = *((unsigned __int16 *)this + 6);
  BOOL v3 = v2 >= 2;
  __int16 v4 = v2 - 2;
  if (v3)
  {
    *((_WORD *)this + 6) = v4;
    int v5 = *(uint64_t (**)(void))(**((void **)this + 5) + 72);
    return v5();
  }
  else
  {
    int v7 = 2;
    (*(void (**)(XlReadStgStream *, void, int *))(*(void *)this + 56))(this, *((void *)this + 3), &v7);
    return CsLeReadSInt16(*((__int16 **)this + 3));
  }
}

uint64_t XlEshShape::takeClientAnchor(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 576))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1010;
  }
  *(void *)(result + 576) = a2;
  return result;
}

uint64_t XlEshBinaryReader::readClientData(XlEshBinaryReader *this, EshContentBase *a2, const EshHeader *a3)
{
  int v6 = (EshAtom *)operator new(0x20uLL);
  EshAtom::EshAtom(v6, 0xF011u, 0);
  *(void *)int v6 = &unk_26EBDF5D8;
  (*(void (**)(XlEshBinaryReader *, EshAtom *, const EshHeader *))(*(void *)this + 104))(this, v6, a3);
  if ((*(unsigned int (**)(EshContentBase *))(*(void *)a2 + 16))(a2) == 7)
  {
    return XlEshShape::takeClientData((uint64_t)v7, (uint64_t)v6);
  }
  else
  {
    if ((*(unsigned int (**)(EshContentBase *))(*(void *)a2 + 16))(a2) != 6)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 0;
    }
    return XlEshGroup::takeClientData((uint64_t)v9, v6);
  }
}

void sub_238BA4290(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t XlEshClientData::accept(int a1, void *lpsrc)
{
  ClientVisitor = (const void *)EshDataModelVisitor::getClientVisitor(v2);
  return v4();
}

uint64_t XlEshParserVisitor::visit(int a1, EshRecord *this)
{
  if ((int)EshRecord::getDataLength(this) >= 1)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 3002;
  }
  return 1;
}

uint64_t XlEshShape::takeClientData(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 584))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1010;
  }
  *(void *)(result + 584) = a2;
  return result;
}

void sub_238BA45E0(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (a2 == 2)
  {
    id v10 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  objc_begin_catch(exc_buf);
  objc_exception_rethrow();
}

void sub_238BA4658()
{
}

void sub_238BA47A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t EshShapeProperties::isHyperlinkSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x382u);
}

void XlScl::XlScl(XlScl *this, XlHeader *a2)
{
  XlRecord::XlRecord((XlRecord *)this, a2);
  *(void *)uint64_t v2 = &unk_26EBE12C0;
  *(_DWORD *)(v2 + 16) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlScl *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlChartPlot::takeChartFormat(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *(void *)(a1 + 16) = a2;
  return result;
}

void XlScl::~XlScl(XlScl *this)
{
}

XlEof *XlRecordFactory::createRecord(XlHeader *this, XlHeader *a2)
{
  int var1 = this->var1;
  if (var1 <= 420)
  {
    switch(this->var1)
    {
      case 3:
        goto LABEL_47;
      case 4:
        goto LABEL_48;
      case 6:
        goto LABEL_24;
      case 7:
        goto LABEL_49;
      case 9:
        goto LABEL_41;
      case 0xA:
        __int16 v4 = (XlEof *)operator new(0x10uLL);
        XlEof::XlEof(v4, this);
        break;
      case 0xC:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlCalcCount::XlCalcCount(v4, this);
        break;
      case 0xD:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlCalcMode::XlCalcMode(v4, this);
        break;
      case 0xE:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlPrecision::XlPrecision(v4, this);
        break;
      case 0xF:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlRefMode::XlRefMode(v4, this);
        break;
      case 0x10:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlDelta::XlDelta(v4, this);
        break;
      case 0x11:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlIteration::XlIteration(v4, this);
        break;
      case 0x12:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlProtect::XlProtect(v4, this);
        break;
      case 0x13:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlPassword::XlPassword(v4, this);
        break;
      case 0x14:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlHdr::XlHdr(v4, this);
        break;
      case 0x15:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlFooter::XlFooter(v4, this);
        break;
      case 0x16:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlExternCount::XlExternCount(v4, this);
        break;
      case 0x17:
        __int16 v4 = (XlEof *)operator new(0x30uLL);
        XlExternSheet::XlExternSheet(v4, this);
        break;
      case 0x18:
        __int16 v4 = (XlEof *)operator new(0x58uLL);
        XlName::XlName((XlName *)v4, this);
        break;
      case 0x19:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlWindowProtect::XlWindowProtect(v4, this);
        break;
      case 0x1A:
        __int16 v4 = (XlEof *)operator new(0x30uLL);
        XlVerticalPageBreaks::XlVerticalPageBreaks(v4, this);
        break;
      case 0x1B:
        __int16 v4 = (XlEof *)operator new(0x30uLL);
        XlHorizPageBreaks::XlHorizPageBreaks(v4, this);
        break;
      case 0x1C:
        __int16 v4 = (XlEof *)operator new(0x28uLL);
        XlNote::XlNote(v4, this);
        break;
      case 0x1D:
        __int16 v4 = (XlEof *)operator new(0x38uLL);
        XlSelection::XlSelection((XlSelection *)v4, this);
        break;
      case 0x22:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        Xl1904::Xl1904(v4, this);
        break;
      case 0x23:
        goto LABEL_45;
      case 0x25:
        goto LABEL_13;
      case 0x26:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlLeftMargin::XlLeftMargin(v4, this);
        break;
      case 0x27:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlRightMargin::XlRightMargin(v4, this);
        break;
      case 0x28:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlTopMargin::XlTopMargin(v4, this);
        break;
      case 0x29:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlBottomMargin::XlBottomMargin(v4, this);
        break;
      case 0x2A:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlPrintHeaders::XlPrintHeaders(v4, this);
        break;
      case 0x2B:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlPrintGridlines::XlPrintGridlines(v4, this);
        break;
      case 0x2F:
        __int16 v4 = (XlEof *)operator new(0x28uLL);
        XlFilePass::XlFilePass(v4, this);
        break;
      case 0x31:
        goto LABEL_46;
      case 0x33:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlPrintSize::XlPrintSize(v4, this);
        break;
      case 0x3C:
        __int16 v4 = (XlEof *)operator new(0x20uLL);
        XlContinue::XlContinue(v4, this);
        break;
      case 0x3D:
        __int16 v4 = (XlEof *)operator new(0x28uLL);
        XlWindow1::XlWindow1(v4, this);
        break;
      case 0x3E:
        goto LABEL_32;
      case 0x40:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlBackup::XlBackup(v4, this);
        break;
      case 0x41:
        __int16 v4 = (XlEof *)operator new(0x20uLL);
        XlPane::XlPane((XlPane *)v4, this);
        break;
      case 0x42:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlCodePage::XlCodePage(v4, this);
        break;
      case 0x4D:
        __int16 v4 = (XlEof *)operator new(0x20uLL);
        XlPls::XlPls(v4, this);
        break;
      case 0x50:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlDCon::XlDCon(v4, this);
        break;
      case 0x51:
        __int16 v4 = (XlEof *)operator new(0x28uLL);
        XlDConRef::XlDConRef(v4, this);
        break;
      case 0x52:
        __int16 v4 = (XlEof *)operator new(0x30uLL);
        XlDConName::XlDConName(v4, this);
        break;
      case 0x55:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlDefColWidth::XlDefColWidth(v4, this);
        break;
      case 0x59:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlXct::XlXct(v4, this);
        break;
      case 0x5A:
        __int16 v4 = (XlEof *)operator new(0x30uLL);
        XlCrn::XlCrn(v4, this);
        break;
      case 0x5B:
        __int16 v4 = (XlEof *)operator new(0x20uLL);
        XlFileSharing::XlFileSharing(v4, this);
        break;
      case 0x5C:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlWriteAccess::XlWriteAccess(v4, this);
        break;
      case 0x5D:
        __int16 v4 = (XlEof *)operator new(0x40uLL);
        XlObjBiff8::XlObjBiff8(v4, this);
        break;
      case 0x5E:
        __int16 v4 = (XlEof *)operator new(0x10uLL);
        XlUnCalced::XlUnCalced(v4, this);
        break;
      case 0x5F:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlSaveRecalc::XlSaveRecalc(v4, this);
        break;
      case 0x60:
        __int16 v4 = (XlEof *)operator new(0x10uLL);
        XlTemplate::XlTemplate(v4, this);
        break;
      case 0x63:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlObjProtect::XlObjProtect(v4, this);
        break;
      case 0x7D:
        __int16 v4 = (XlEof *)operator new(0x20uLL);
        XlColInfo::XlColInfo(v4, this);
        break;
      case 0x7F:
      case 0xE9:
        __int16 v4 = (XlEof *)operator new(0x28uLL);
        XlImData::XlImData(v4, this);
        break;
      case 0x80:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlGuts::XlGuts(v4, this);
        break;
      case 0x81:
        __int16 v4 = (XlEof *)operator new(0x20uLL);
        XlWsBool::XlWsBool(v4, this);
        break;
      case 0x82:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlGridSet::XlGridSet(v4, this);
        break;
      case 0x83:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlHCenter::XlHCenter(v4, this);
        break;
      case 0x84:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlVCenter::XlVCenter(v4, this);
        break;
      case 0x85:
        __int16 v4 = (XlEof *)operator new(0x28uLL);
        XlBoundSheet::XlBoundSheet(v4, this);
        break;
      case 0x86:
        __int16 v4 = (XlEof *)operator new(0x10uLL);
        XlWriteProt::XlWriteProt(v4, this);
        break;
      case 0x87:
        __int16 v4 = (XlEof *)operator new(0x10uLL);
        XlAddIn::XlAddIn(v4, this);
        break;
      case 0x88:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlEdg::XlEdg(v4, this);
        break;
      case 0x89:
        __int16 v4 = (XlEof *)operator new(0x38uLL);
        XlPub::XlPub(v4, this);
        break;
      case 0x8C:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlCountry::XlCountry(v4, this);
        break;
      case 0x8D:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlHideObj::XlHideObj(v4, this);
        break;
      case 0x90:
        __int16 v4 = (XlEof *)operator new(0x38uLL);
        XlSort::XlSort(v4, this);
        break;
      case 0x91:
        __int16 v4 = (XlEof *)operator new(0x38uLL);
        XlSub::XlSub(v4, this);
        break;
      case 0x92:
        __int16 v4 = (XlEof *)operator new(0x20uLL);
        XlPalette::XlPalette(v4, this);
        break;
      case 0x96:
        __int16 v4 = (XlEof *)operator new(0x28uLL);
        XlSound::XlSound(v4, this);
        break;
      case 0x98:
        __int16 v4 = (XlEof *)operator new(0x28uLL);
        XlLpr::XlLpr(v4, this);
        break;
      case 0x99:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlStandardWidth::XlStandardWidth(v4, this);
        break;
      case 0x9A:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlFnGroupName::XlFnGroupName(v4, this);
        break;
      case 0x9B:
        __int16 v4 = (XlEof *)operator new(0x10uLL);
        XlFilterMode::XlFilterMode(v4, this);
        break;
      case 0x9C:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlFnGroupCount::XlFnGroupCount(v4, this);
        break;
      case 0x9D:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlAutoFilterInfo::XlAutoFilterInfo(v4, this);
        break;
      case 0x9E:
        __int16 v4 = (XlEof *)operator new(0x38uLL);
        XlAutoFilter::XlAutoFilter(v4, this);
        break;
      case 0xA0:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlScl::XlScl((XlScl *)v4, this);
        break;
      case 0xA1:
        __int16 v4 = (XlEof *)operator new(0x40uLL);
        XlSetup::XlSetup(v4, this);
        break;
      case 0xA9:
        __int16 v4 = (XlEof *)operator new(0x28uLL);
        XlCoordList::XlCoordList(v4, this);
        break;
      case 0xAB:
        __int16 v4 = (XlEof *)operator new(0x20uLL);
        XlGcw::XlGcw(v4, this);
        break;
      case 0xAE:
        __int16 v4 = (XlEof *)operator new(0x30uLL);
        XlScenMan::XlScenMan(v4, this);
        break;
      case 0xAF:
        __int16 v4 = (XlEof *)operator new(0x78uLL);
        XlScenario::XlScenario(v4, this);
        break;
      case 0xB0:
        __int16 v4 = (XlEof *)operator new(0x58uLL);
        XlSxView::XlSxView(v4, this);
        break;
      case 0xB1:
        __int16 v4 = (XlEof *)operator new(0x30uLL);
        XlSxVd::XlSxVd(v4, this);
        break;
      case 0xB2:
        __int16 v4 = (XlEof *)operator new(0x28uLL);
        XlSxVi::XlSxVi(v4, this);
        break;
      case 0xB4:
        __int16 v4 = (XlEof *)operator new(0x20uLL);
        XlSxIVd::XlSxIVd(v4, this);
        break;
      case 0xB5:
        __int16 v4 = (XlEof *)operator new(0x30uLL);
        XlSxLi::XlSxLi(v4, this);
        break;
      case 0xB8:
        __int16 v4 = (XlEof *)operator new(0x68uLL);
        XlDocRoute::XlDocRoute(v4, this);
        break;
      case 0xB9:
        __int16 v4 = (XlEof *)operator new(0x28uLL);
        XlRecipName::XlRecipName(v4, this);
        break;
      case 0xBD:
        __int16 v4 = (XlEof *)operator new(0x30uLL);
        XlMulRk::XlMulRk(v4, this);
        break;
      case 0xBE:
        __int16 v4 = (XlEof *)operator new(0x28uLL);
        XlMulBlank::XlMulBlank(v4, this);
        break;
      case 0xC1:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlMms::XlMms(v4, this);
        break;
      case 0xC2:
        __int16 v4 = (XlEof *)operator new(0x40uLL);
        XlAddMenu::XlAddMenu(v4, this);
        break;
      case 0xC3:
        __int16 v4 = (XlEof *)operator new(0x20uLL);
        XlDelMenu::XlDelMenu(v4, this);
        break;
      case 0xC5:
        __int16 v4 = (XlEof *)operator new(0x30uLL);
        XlSxDI::XlSxDI(v4, this);
        break;
      case 0xC6:
        __int16 v4 = (XlEof *)operator new(0x38uLL);
        XlSxDB::XlSxDB(v4, this);
        break;
      case 0xCD:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlSxString::XlSxString(v4, this);
        break;
      case 0xD0:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlSxTbl::XlSxTbl(v4, this);
        break;
      case 0xD1:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlSxTbRgiItm::XlSxTbRgiItm(v4, this);
        break;
      case 0xD2:
        __int16 v4 = (XlEof *)operator new(0x20uLL);
        XlSxTbPg::XlSxTbPg(v4, this);
        break;
      case 0xD3:
        __int16 v4 = (XlEof *)operator new(0x20uLL);
        XlObjProj::XlObjProj(v4, this);
        break;
      case 0xD5:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlSxIDStm::XlSxIDStm(v4, this);
        break;
      case 0xD6:
        __int16 v4 = (XlEof *)operator new(0x38uLL);
        XlRString::XlRString(v4, this);
        break;
      case 0xD7:
        __int16 v4 = (XlEof *)operator new(0x20uLL);
        XlDbCell::XlDbCell(v4, this);
        break;
      case 0xDA:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlBookBool::XlBookBool(v4, this);
        break;
      case 0xDB:
        __int16 v4 = (XlEof *)operator new(0x28uLL);
        XlParamQry::XlParamQry(v4, this);
        break;
      case 0xDC:
        __int16 v4 = (XlEof *)operator new(0x98uLL);
        XlSxExt::XlSxExt(v4, this);
        break;
      case 0xDD:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlScenProtect::XlScenProtect(v4, this);
        break;
      case 0xDE:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlOleSize::XlOleSize(v4, this);
        break;
      case 0xE0:
        goto LABEL_40;
      case 0xE1:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlInterfaceHdr::XlInterfaceHdr(v4, this);
        break;
      case 0xE2:
        __int16 v4 = (XlEof *)operator new(0x10uLL);
        XlInterfaceEnd::XlInterfaceEnd(v4, this);
        break;
      case 0xE3:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlSxVs::XlSxVs(v4, this);
        break;
      case 0xE5:
        __int16 v4 = (XlEof *)operator new(0x30uLL);
        XlMerge::XlMerge(v4, this);
        break;
      case 0xEA:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlTabIdConf::XlTabIdConf(v4, this);
        break;
      case 0xEB:
        __int16 v4 = (XlEof *)operator new(0x20uLL);
        XlMsoDrawingGroup::XlMsoDrawingGroup(v4, this);
        break;
      case 0xEC:
        __int16 v4 = (XlEof *)operator new(0x20uLL);
        XlMsoDrawing::XlMsoDrawing(v4, this);
        break;
      case 0xED:
        __int16 v4 = (XlEof *)operator new(0x20uLL);
        XlMsoDrawingSelection::XlMsoDrawingSelection(v4, this);
        break;
      case 0xEF:
        __int16 v4 = (XlEof *)operator new(0x40uLL);
        XlRubi::XlRubi(v4, this);
        break;
      case 0xF0:
        __int16 v4 = (XlEof *)operator new(0x20uLL);
        XlSxRule::XlSxRule(v4, this);
        break;
      case 0xF1:
        __int16 v4 = (XlEof *)operator new(0x60uLL);
        XlSxEx::XlSxEx(v4, this);
        break;
      case 0xF2:
        __int16 v4 = (XlEof *)operator new(0x28uLL);
        XlSxFilt::XlSxFilt(v4, this);
        break;
      case 0xF6:
        __int16 v4 = (XlEof *)operator new(0x20uLL);
        XlSxName::XlSxName(v4, this);
        break;
      case 0xF7:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlSxSelect::XlSxSelect(v4, this);
        break;
      case 0xF8:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlSxPair::XlSxPair(v4, this);
        break;
      case 0xF9:
        __int16 v4 = (XlEof *)operator new(0x20uLL);
        XlSxFmla::XlSxFmla(v4, this);
        break;
      case 0xFB:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlSxFormat::XlSxFormat(v4, this);
        break;
      case 0xFC:
        __int16 v4 = (XlEof *)operator new(0x40uLL);
        XlSst::XlSst(v4, this);
        break;
      case 0xFD:
        __int16 v4 = (XlEof *)operator new(0x20uLL);
        XlLabelSst::XlLabelSst(v4, this);
        break;
      case 0xFF:
        __int16 v4 = (XlEof *)operator new(0x20uLL);
        XlExtSst::XlExtSst(v4, this);
        break;
      case 0x100:
        __int16 v4 = (XlEof *)operator new(0x28uLL);
        XlSxVdEx::XlSxVdEx(v4, this);
        break;
      case 0x103:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlSxFormula::XlSxFormula(v4, this);
        break;
      case 0x122:
        __int16 v4 = (XlEof *)operator new(0x20uLL);
        XlSxDBEx::XlSxDBEx(v4, this);
        break;
      case 0x13D:
        __int16 v4 = (XlEof *)operator new(0x20uLL);
        XlTabId::XlTabId(v4, this);
        break;
      case 0x15F:
        __int16 v4 = (XlEof *)operator new(0x48uLL);
        XlLabelRanges::XlLabelRanges(v4, this);
        break;
      case 0x160:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlUsesElfs::XlUsesElfs(v4, this);
        break;
      case 0x161:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlDsf::XlDsf(v4, this);
        break;
      case 0x162:
        __int16 v4 = (XlEof *)operator new(0x10uLL);
        XlModify::XlModify(v4, this);
        break;
      default:
        goto LABEL_217;
    }
    return v4;
  }
  if (var1 <= 544)
  {
    switch(this->var1)
    {
      case 0x1A5:
        __int16 v4 = (XlEof *)operator new(0x20uLL);
        XlFileSharing2::XlFileSharing2(v4, this);
        break;
      case 0x1A6:
      case 0x1A7:
      case 0x1A8:
      case 0x1AC:
      case 0x1B3:
      case 0x1B4:
      case 0x1B9:
      case 0x1BD:
      case 0x1BF:
        goto LABEL_217;
      case 0x1A9:
        __int16 v4 = (XlEof *)operator new(0x50uLL);
        XlUserBView::XlUserBView(v4, this);
        break;
      case 0x1AA:
        __int16 v4 = (XlEof *)operator new(0x60uLL);
        XlUsersViewBegin::XlUsersViewBegin(v4, this);
        break;
      case 0x1AB:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlUsersViewEnd::XlUsersViewEnd(v4, this);
        break;
      case 0x1AD:
        __int16 v4 = (XlEof *)operator new(0x28uLL);
        XlQsi::XlQsi(v4, this);
        break;
      case 0x1AE:
        __int16 v4 = (XlEof *)operator new(0x38uLL);
        XlSupBook::XlSupBook(v4, this);
        break;
      case 0x1AF:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlProt4Rev::XlProt4Rev(v4, this);
        break;
      case 0x1B0:
        __int16 v4 = (XlEof *)operator new(0x38uLL);
        XlCondFmt::XlCondFmt(v4, this);
        break;
      case 0x1B1:
        __int16 v4 = (XlEof *)operator new(0x38uLL);
        XlCf::XlCf((XlCf *)v4, this);
        break;
      case 0x1B2:
        __int16 v4 = (XlEof *)operator new(0x28uLL);
        XlDVal::XlDVal(v4, this);
        break;
      case 0x1B5:
        __int16 v4 = (XlEof *)operator new(0x30uLL);
        XlDConBin::XlDConBin(v4, this);
        break;
      case 0x1B6:
        __int16 v4 = (XlEof *)operator new(0x38uLL);
        XlTxo::XlTxo(v4, this);
        break;
      case 0x1B7:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlRefreshAll::XlRefreshAll(v4, this);
        break;
      case 0x1B8:
        __int16 v4 = (XlEof *)operator new(0x50uLL);
        XlHLink::XlHLink((XlHLink *)v4, this);
        break;
      case 0x1BA:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlCodeName::XlCodeName(v4, this);
        break;
      case 0x1BB:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlSxFDBType::XlSxFDBType(v4, this);
        break;
      case 0x1BC:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlProt4RevPass::XlProt4RevPass(v4, this);
        break;
      case 0x1BE:
        __int16 v4 = (XlEof *)operator new(0x70uLL);
        XlDV::XlDV(v4, this);
        break;
      case 0x1C0:
        __int16 v4 = (XlEof *)operator new(0x10uLL);
        XlExcel9::XlExcel9(v4, this);
        break;
      case 0x1C1:
        __int16 v4 = (XlEof *)operator new(0x18uLL);
        XlRecalcID::XlRecalcID(v4, this);
        break;
      default:
        switch(this->var1)
        {
          case 0x200:
            __int16 v4 = (XlEof *)operator new(0x20uLL);
            XlDimensions::XlDimensions(v4, this);
            break;
          case 0x201:
            __int16 v4 = (XlEof *)operator new(0x18uLL);
            XlBlank::XlBlank(v4, this);
            break;
          case 0x203:
LABEL_47:
            __int16 v4 = (XlEof *)operator new(0x20uLL);
            XlNumberFP::XlNumberFP(v4, this);
            break;
          case 0x204:
LABEL_48:
            __int16 v4 = (XlEof *)operator new(0x20uLL);
            XlLabel::XlLabel(v4, this);
            break;
          case 0x205:
            __int16 v4 = (XlEof *)operator new(0x18uLL);
            XlBoolErr::XlBoolErr(v4, this);
            break;
          case 0x207:
LABEL_49:
            __int16 v4 = (XlEof *)operator new(0x18uLL);
            XlFmlaString::XlFmlaString(v4, this);
            break;
          case 0x208:
            __int16 v4 = (XlEof *)operator new(0x28uLL);
            XlRow::XlRow(v4, this);
            break;
          case 0x209:
            goto LABEL_41;
          case 0x20B:
            __int16 v4 = (XlEof *)operator new(0x28uLL);
            XlIndex::XlIndex(v4, this);
            break;
          default:
            goto LABEL_217;
        }
        break;
    }
    return v4;
  }
  if (var1 <= 1211)
  {
    if (var1 <= 637)
    {
      if (var1 > 560)
      {
        switch(var1)
        {
          case 561:
LABEL_46:
            __int16 v4 = (XlEof *)operator new(0x38uLL);
            XlFont::XlFont((XlFont *)v4, this);
            return v4;
          case 566:
            __int16 v4 = (XlEof *)operator new(0x28uLL);
            XlTable::XlTable((XlTable *)v4, this);
            return v4;
          case 574:
LABEL_32:
            __int16 v4 = (XlEof *)operator new(0x28uLL);
            XlWindow2::XlWindow2((XlWindow2 *)v4, this);
            return v4;
        }
      }
      else
      {
        switch(var1)
        {
          case 545:
            __int16 v4 = (XlEof *)operator new(0x30uLL);
            XlArray::XlArray((XlArray *)v4, this);
            return v4;
          case 547:
LABEL_45:
            __int16 v4 = (XlEof *)operator new(0x58uLL);
            XlExternName::XlExternName(v4, this);
            return v4;
          case 549:
LABEL_13:
            __int16 v4 = (XlEof *)operator new(0x18uLL);
            XlDefaultRowHeight::XlDefaultRowHeight(v4, this);
            return v4;
        }
      }
LABEL_217:
      __int16 v4 = (XlEof *)operator new(0x28uLL);
      XlGenericRecord::XlGenericRecord(v4, this);
      return v4;
    }
    if (var1 <= 1032)
    {
      switch(var1)
      {
        case 638:
          __int16 v4 = (XlEof *)operator new(0x20uLL);
          XlRk::XlRk(v4, this);
          return v4;
        case 659:
          __int16 v4 = (XlEof *)operator new(0x28uLL);
          XlStyle::XlStyle(v4, this);
          return v4;
        case 1030:
LABEL_24:
          __int16 v4 = (XlEof *)operator new(0x38uLL);
          XlFormula::XlFormula(v4, this);
          return v4;
      }
      goto LABEL_217;
    }
    if (var1 != 1033)
    {
      if (var1 == 1054)
      {
        __int16 v4 = (XlEof *)operator new(0x20uLL);
        XlFormat::XlFormat((XlFormat *)v4, this);
        return v4;
      }
      if (var1 == 1091)
      {
LABEL_40:
        __int16 v4 = (XlEof *)operator new(0x60uLL);
        XlXf::XlXf((XlXf *)v4, this);
        return v4;
      }
      goto LABEL_217;
    }
LABEL_41:
    __int16 v4 = (XlEof *)operator new(0x28uLL);
    XlBof::XlBof(v4, this);
    return v4;
  }
  if (var1 > 2161)
  {
    if (var1 > 2197)
    {
      if (var1 == 2198)
      {
        __int16 v4 = (XlEof *)operator new(0x20uLL);
        XlTheme::XlTheme(v4, this);
        return v4;
      }
      if (var1 == 4188)
      {
        __int16 v4 = (XlEof *)operator new(0x20uLL);
        XlPaletteX::XlPaletteX(v4, this);
        return v4;
      }
    }
    else
    {
      if (var1 == 2162)
      {
        __int16 v4 = (XlEof *)operator new(0x108uLL);
        XlList::XlList(v4, this);
        return v4;
      }
      if (var1 == 2175)
      {
        __int16 v4 = (XlEof *)operator new(0x20uLL);
        XlContinueFrt12::XlContinueFrt12(v4, this);
        return v4;
      }
    }
    goto LABEL_217;
  }
  if (var1 <= 2145)
  {
    if (var1 == 1212)
    {
      __int16 v4 = (XlEof *)operator new(0x28uLL);
      XlShrFmla::XlShrFmla((XlShrFmla *)v4, this);
      return v4;
    }
    if (var1 == 2048)
    {
      __int16 v4 = (XlEof *)operator new(0x20uLL);
      XlHLinkToolTip::XlHLinkToolTip((XlHLinkToolTip *)v4, this);
      return v4;
    }
    if (var1 != 2057) {
      goto LABEL_217;
    }
    goto LABEL_41;
  }
  switch(this->var1)
  {
    case 0x862:
      __int16 v4 = (XlEof *)operator new(0x18uLL);
      XlSheetTab::XlSheetTab(v4, this);
      break;
    case 0x866:
      __int16 v4 = (XlEof *)operator new(0x28uLL);
      XlHdrFooterDrawing::XlHdrFooterDrawing(v4, this);
      break;
    case 0x867:
      __int16 v4 = (XlEof *)operator new(0x20uLL);
      XlSheetProtection::XlSheetProtection(v4, this);
      break;
    case 0x868:
      __int16 v4 = (XlEof *)operator new(0x48uLL);
      XlRangeProtection::XlRangeProtection(v4, this);
      break;
    default:
      goto LABEL_217;
  }
  return v4;
}

{
  int var1;
  XlRevisionUserView *v4;
  uint64_t vars8;

  if (a2 == 2)
  {
    int var1 = this->var1;
    if (var1 > 403)
    {
      if (var1 > 405)
      {
        if (var1 == 428)
        {
          __int16 v4 = (XlRevisionUserView *)operator new(0x20uLL);
          XlRevisionUserView::XlRevisionUserView(v4, this);
        }
        else if (var1 == 406)
        {
          __int16 v4 = (XlRevisionUserView *)operator new(0x38uLL);
          XlRevisionInfo::XlRevisionInfo(v4, this);
        }
        else
        {
LABEL_16:
          __int16 v4 = (XlRevisionUserView *)operator new(0x20uLL);
          XlRevisionLogEntry::XlRevisionLogEntry(v4, this);
        }
      }
      else if (var1 == 404)
      {
        __int16 v4 = (XlRevisionUserView *)operator new(0x28uLL);
        XlRevisionExclusive::XlRevisionExclusive(v4, this);
      }
      else
      {
        __int16 v4 = (XlRevisionUserView *)operator new(0x20uLL);
        XlRevisionFileLock::XlRevisionFileLock(v4, this);
      }
    }
    else
    {
      switch(this->var1)
      {
        case 0x136:
          __int16 v4 = (XlRevisionUserView *)operator new(0x18uLL);
          XlRevisionVersionNumber::XlRevisionVersionNumber(v4, this);
          break;
        case 0x137:
          __int16 v4 = (XlRevisionUserView *)operator new(0x28uLL);
          XlRevisionInsertDelete::XlRevisionInsertDelete(v4, this);
          break;
        case 0x138:
          __int16 v4 = (XlRevisionUserView *)operator new(0x40uLL);
          XlRevisionHeader::XlRevisionHeader(v4, this);
          break;
        case 0x139:
        case 0x13A:
        case 0x13C:
        case 0x142:
        case 0x143:
        case 0x144:
        case 0x145:
        case 0x146:
        case 0x147:
        case 0x148:
        case 0x149:
          goto LABEL_16;
        case 0x13B:
          __int16 v4 = (XlRevisionUserView *)operator new(0x78uLL);
          XlRevisionChangeCell::XlRevisionChangeCell(v4, this);
          break;
        case 0x13D:
          __int16 v4 = (XlRevisionUserView *)operator new(0x20uLL);
          XlRevisionTabId::XlRevisionTabId(v4, this);
          break;
        case 0x13E:
          __int16 v4 = (XlRevisionUserView *)operator new(0x28uLL);
          XlRevisionRenameSheet::XlRevisionRenameSheet(v4, this);
          break;
        case 0x13F:
          __int16 v4 = (XlRevisionUserView *)operator new(0x38uLL);
          XlRevisionSort::XlRevisionSort(v4, this);
          break;
        case 0x140:
          __int16 v4 = (XlRevisionUserView *)operator new(0x30uLL);
          XlRevisionMove::XlRevisionMove(v4, this);
          break;
        case 0x141:
          __int16 v4 = (XlRevisionUserView *)operator new(0x20uLL);
          XlRevisionCopy::XlRevisionCopy(v4, this);
          break;
        case 0x14A:
          __int16 v4 = (XlRevisionUserView *)operator new(0x38uLL);
          XlRevisionFormat::XlRevisionFormat(v4, this);
          break;
        case 0x14B:
          __int16 v4 = (XlRevisionUserView *)operator new(0x28uLL);
          XlRevisionAutoFmt::XlRevisionAutoFmt(v4, this);
          break;
        case 0x14C:
          __int16 v4 = (XlRevisionUserView *)operator new(0x28uLL);
          XlRevisionDeleteShape::XlRevisionDeleteShape(v4, this);
          break;
        case 0x14D:
          __int16 v4 = (XlRevisionUserView *)operator new(0x28uLL);
          XlRevisionInsertShape::XlRevisionInsertShape(v4, this);
          break;
        case 0x14E:
          __int16 v4 = (XlRevisionUserView *)operator new(0x10uLL);
          XlRevisionMoveBegin::XlRevisionMoveBegin(v4, this);
          break;
        case 0x14F:
          __int16 v4 = (XlRevisionUserView *)operator new(0x10uLL);
          XlRevisionMoveEnd::XlRevisionMoveEnd(v4, this);
          break;
        case 0x150:
          __int16 v4 = (XlRevisionUserView *)operator new(0x10uLL);
          XlRevisionInsertDeleteBegin::XlRevisionInsertDeleteBegin(v4, this);
          break;
        case 0x151:
          __int16 v4 = (XlRevisionUserView *)operator new(0x10uLL);
          XlRevisionInsertDeleteEnd::XlRevisionInsertDeleteEnd(v4, this);
          break;
        case 0x152:
          __int16 v4 = (XlRevisionUserView *)operator new(0x18uLL);
          XlRevisionConflict::XlRevisionConflict(v4, this);
          break;
        case 0x153:
          __int16 v4 = (XlRevisionUserView *)operator new(0x88uLL);
          XlRevisionDefineName::XlRevisionDefineName(v4, this);
          break;
        default:
          if (var1 != 28) {
            goto LABEL_16;
          }
          __int16 v4 = (XlRevisionUserView *)operator new(0x40uLL);
          XlRevisionNote::XlRevisionNote(v4, this);
          break;
      }
    }
    return v4;
  }
  else
  {
    return XlRecordFactory::createRecord(this, a2);
  }
}

void sub_238BA6030(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlUsersViewBegin::XlUsersViewBegin(XlUsersViewBegin *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1EF8;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 46) = 0u;
  *(void *)(v2 + 72) = 0;
  *(void *)(v2 + 80) = 0;
  *(void *)(v2 + 64) = 0;
  *(_DWORD *)(v2 + 88) = 0;
}

uint64_t XlUsersViewBegin::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1328))(a2, a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlUsersViewBegin *a2)
{
  int v10 = 16;
  __int16 v4 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v4, 0);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((void *)this + 3) = operator new[](0x10uLL);
  (*(void (**)(void))(**((void **)this + 2) + 56))(*((void *)this + 2));
  XlUsersViewBegin::setGuid(a2, *((unsigned __int8 **)this + 3));
  *((void *)this + 3) = 0;
  *((_DWORD *)a2 + 6) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_DWORD *)a2 + 7) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_DWORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_DWORD *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  int16x8_t v5 = (int16x8_t)((__n128 (*)(void))*(void *)(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((unsigned char *)a2 + 40) = v6 & 1;
  v5.i64[0] = *(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(v6) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)((char *)a2 + 41) = vmovn_s16(v5).u32[0];
  *((unsigned char *)a2 + 45) = (v6 & 0x20) != 0;
  *((unsigned char *)a2 + 46) = (v6 & 0x40) != 0;
  *((unsigned char *)a2 + 47) = (v6 & 0x80) != 0;
  uint32x4_t v7 = (uint32x4_t)vdupq_n_s32(v6);
  *((int8x8_t *)a2 + 6) = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vshlq_u32(v7, (uint32x4_t)xmmword_238EDE0B0), (int16x8_t)vshlq_u32(v7, (uint32x4_t)xmmword_238EE0FF0))), (int8x8_t)0x101010101010101);
  *((unsigned char *)a2 + 56) = (v6 & 0x40000) != 0;
  *((unsigned char *)a2 + 57) = (v6 & 0x180000) != 0;
  int16x8_t v8 = (int16x8_t)vshlq_u32(v7, (uint32x4_t)xmmword_238EE1000);
  *(int8x8_t *)v8.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v8), (int8x8_t)0x1000100010001);
  *(_DWORD *)((char *)a2 + 58) = vmovn_s16(v8).u32[0];
  (*(void (**)(XlParserVisitor *, XlRef *))(*(void *)this + 1504))(this, v4);
  XlUsersViewBegin::setTopLeftPaneArea(a2, v4);
  *((double *)a2 + 9) = (*(double (**)(void))(**((void **)this + 2) + 120))(*((void *)this + 2));
  *((double *)a2 + 10) = (*(double (**)(void))(**((void **)this + 2) + 120))(*((void *)this + 2));
  *((_WORD *)a2 + 44) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 45) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238BA6714(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlUsersViewBegin::setGuid(XlUsersViewBegin *this, unsigned __int8 *a2)
{
  uint64_t result = *((void *)this + 2);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  *((void *)this + 2) = a2;
  return result;
}

uint64_t XlUsersViewBegin::setTopLeftPaneArea(XlUsersViewBegin *this, XlRef *a2)
{
  uint64_t result = *((void *)this + 8);
  if (result) {
    uint64_t result = MEMORY[0x23EC997B0](result, 0x1000C400EA6A39BLL);
  }
  *((void *)this + 8) = a2;
  return result;
}

uint64_t XlSelection::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 384))(a2, a1);
}

uint64_t XlHdr::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 728))(a2, a1);
}

uint64_t XlFooter::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 688))(a2, a1);
}

uint64_t XlHCenter::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 720))(a2, a1);
}

uint64_t XlVCenter::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1352))(a2, a1);
}

void XlPls::XlPls(XlPls *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0658;
  *(_DWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 20) = 0;
  *(void *)(v2 + 24) = 0;
}

uint64_t XlPls::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 864))(a2, a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlPls *a2)
{
  *(_DWORD *)uint32x4_t v7 = *((_DWORD *)a2 + 2) - 2;
  size_t v4 = *(unsigned int *)v7;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2)) & 1;
  if (v4)
  {
    int16x8_t v5 = operator new[](v4);
    *((void *)this + 3) = v5;
    (*(void (**)(void, void *, unsigned __int16 *))(**((void **)this + 2) + 56))(*((void *)this + 2), v5, v7);
    XlPls::setRgb(a2, *((unsigned __int8 **)this + 3), v7[0]);
    *((void *)this + 3) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlPls::setRgb(XlPls *this, unsigned __int8 *a2, __int16 a3)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  *((void *)this + 3) = a2;
  *((_WORD *)this + 10) = a3;
  return result;
}

uint64_t XlSetup::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1016))(a2, a1);
}

void XlUsersViewEnd::XlUsersViewEnd(XlUsersViewEnd *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1F38;
  *(unsigned char *)(v2 + 16) = 0;
}

uint64_t XlUsersViewEnd::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1336))(a2, a1);
}

void XlCustomView::~XlCustomView(void **this)
{
  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
  JUMPOUT(0x23EC997B0);
}

{
  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
}

void XlUsersViewEnd::~XlUsersViewEnd(XlUsersViewEnd *this)
{
}

void XlPls::~XlPls(XlPls *this)
{
  *(void *)this = &unk_26EBE0658;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 3) = 0;
  *((_WORD *)this + 10) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBE0658;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 3) = 0;
  *((_WORD *)this + 10) = 0;
}

void XlVCenter::~XlVCenter(XlVCenter *this)
{
}

void XlHCenter::~XlHCenter(XlHCenter *this)
{
}

void XlUsersViewBegin::~XlUsersViewBegin(XlUsersViewBegin *this)
{
  XlUsersViewBegin::~XlUsersViewBegin(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_26EBE1EF8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  BOOL v3 = *((void *)this + 8);
  if (v3) {
    MEMORY[0x23EC997B0](v3, 0x1000C400EA6A39BLL);
  }
  *((void *)this + 8) = 0;
}

void XlEshGroup::~XlEshGroup(XlEshGroup *this)
{
  *(void *)this = &unk_26EBE26E8;
  *((void *)this + 34) = &unk_26EBE2798;
  XlEshGroup::cleanup(this);
  EshGroup::~EshGroup(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBE26E8;
  *((void *)this + 34) = &unk_26EBE2798;
  XlEshGroup::cleanup(this);
  EshGroup::~EshGroup(this);
}

uint64_t XlEshGroup::cleanup(XlEshGroup *this)
{
  uint64_t v2 = *((void *)this + 46);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 46) = 0;
  uint64_t result = *((void *)this + 47);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 47) = 0;
  return result;
}

void XlEshShape::~XlEshShape(XlEshShape *this)
{
  *(void *)this = &unk_26EBE28B8;
  *((void *)this + 52) = &unk_26EBE2988;
  XlEshShape::cleanup(this);
  EshContentBase::~EshContentBase(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBE28B8;
  *((void *)this + 52) = &unk_26EBE2988;
  XlEshShape::cleanup(this);
  EshContentBase::~EshContentBase(this);
}

void XlEshClientAnchor::~XlEshClientAnchor(XlEshClientAnchor *this)
{
}

void XlEshClientData::~XlEshClientData(XlEshClientData *this)
{
}

void sub_238BA724C(_Unwind_Exception *a1)
{
  int16x8_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_238BA72FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BA7608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BA77B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BA79FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BA7C78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BA7D60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BA7DE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t XlReadStgStream::seek(SsrwOOStream **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (XlReadStgStream::getStreamLocation((XlReadStgStream *)a1) != a2)
  {
    (*((void (**)(SsrwOOStream *, uint64_t, void))a1[5]->var0 + 2))(a1[5], a2, 0);
    XlReadStgStream::start((XlReadStgStream *)a1, a1[5]);
  }
  unsigned int var0 = (*a1)[2].var0;
  return ((uint64_t (*)(SsrwOOStream **, uint64_t, uint64_t))var0)(a1, a3, a4);
}

uint64_t XlReadStgStream::readNextHostRecordHeader(XlReadStgStream *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 40))(*((void *)this + 5));
  uint64_t v3 = v2;
  size_t v4 = (unsigned int *)*((void *)this + 6);
  unint64_t v5 = *((void *)this + 7) - (void)v4;
  if ((v5 & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v6 = (v5 >> 2);
    while (1)
    {
      unsigned int v8 = *v4++;
      uint64_t v7 = v8;
      if (v2 <= v8) {
        break;
      }
      if (!--v6) {
        goto LABEL_7;
      }
    }
    uint64_t v3 = v7;
  }
LABEL_7:
  (*(void (**)(void, uint64_t, void))(**((void **)this + 5) + 16))(*((void *)this + 5), v3, 0);
  int v9 = (*(uint64_t (**)(void))(**((void **)this + 5) + 72))(*((void *)this + 5));
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 5) + 80))(*((void *)this + 5));
  __int16 v11 = result;
  if (v9 == 2150)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 5) + 16))(*((void *)this + 5), 14, 1);
    v11 -= 14;
  }
  *((_WORD *)this + 6) = v11;
  return result;
}

void XlBottomMargin::XlBottomMargin(XlBottomMargin *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *uint64_t v2 = &unk_26EBDED28;
  v2[2] = 0;
}

CGColorRef TSUCGColorCreateDeviceRGB(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  components[4] = *(CGFloat *)MEMORY[0x263EF8340];
  components[0] = a1;
  components[1] = a2;
  components[2] = a3;
  components[3] = a4;
  if (TSUDeviceRGBColorSpace_sDeviceRGBDispatchOnce != -1) {
    dispatch_once(&TSUDeviceRGBColorSpace_sDeviceRGBDispatchOnce, &__block_literal_global_9);
  }
  return CGColorCreate((CGColorSpaceRef)TSUDeviceRGBColorSpace_sDeviceRGBColorSpace, components);
}

void sub_238BA8268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BA8320(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

uint64_t XlReadStgStream::processNextStreamChunk(XlReadStgStream *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 6);
  unint64_t v4 = *((void *)this + 7) - v3;
  if ((v4 & 0x3FFFFFFFCLL) == 0 || !*((_DWORD *)this + 2)) {
    return 0;
  }
  (*(void (**)(uint64_t, void, void))(*(void *)v2 + 16))(v2, *(unsigned int *)(v3 + 4 * ((v4 >> 2) - 1)), 0);
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 5) + 72))(*((void *)this + 5));
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 5) + 80))(*((void *)this + 5));
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 5) + 16))(*((void *)this + 5), v6, 1);
  int v7 = (*(uint64_t (**)(void))(**((void **)this + 5) + 72))(*((void *)this + 5));
  int v8 = (*(uint64_t (**)(void))(**((void **)this + 5) + 80))(*((void *)this + 5));
  if (v7 != 60)
  {
    int v9 = v8;
    if (v7 != 236 || v5 != 236)
    {
      if (v7 == 93)
      {
        (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 5) + 16))(*((void *)this + 5), 4, 1);
        int v20 = (*(uint64_t (**)(void))(**((void **)this + 5) + 72))(*((void *)this + 5));
        (*(void (**)(void, void, uint64_t))(**((void **)this + 5) + 16))(*((void *)this + 5), (v9 - 6), 1);
        int v13 = (*(uint64_t (**)(void))(**((void **)this + 5) + 72))(*((void *)this + 5));
        uint64_t v21 = (*(uint64_t (**)(void))(**((void **)this + 5) + 80))(*((void *)this + 5));
        uint64_t v22 = v21;
        if (v20 == 5)
        {
          if (v13 != 2057)
          {
            do
            {
              (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 5) + 16))(*((void *)this + 5), v22, 1);
              int v23 = (*(uint64_t (**)(void))(**((void **)this + 5) + 72))(*((void *)this + 5));
              uint64_t v22 = (*(uint64_t (**)(void))(**((void **)this + 5) + 80))(*((void *)this + 5));
            }
            while (v23 != 2057);
          }
          do
          {
            (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 5) + 16))(*((void *)this + 5), v22, 1);
            int v24 = (*(uint64_t (**)(void))(**((void **)this + 5) + 72))(*((void *)this + 5));
            uint64_t v22 = (*(uint64_t (**)(void))(**((void **)this + 5) + 80))(*((void *)this + 5));
          }
          while (v24 != 10);
          uint64_t v19 = *(void (**)(void))(**((void **)this + 5) + 16);
          goto LABEL_26;
        }
        if (v20 == 8 && v13 == 127)
        {
          unsigned int v25 = v21 - 8;
          (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 5) + 16))(*((void *)this + 5), 4, 1);
          unsigned int v26 = (*(uint64_t (**)(void))(**((void **)this + 5) + 104))(*((void *)this + 5));
          for (uint64_t i = *(void (**)(void))(**((void **)this + 5) + 16);
                ;
                uint64_t i = *(void (**)(void))(**((void **)this + 5) + 16))
          {
            i();
            int v13 = (*(uint64_t (**)(void))(**((void **)this + 5) + 72))(*((void *)this + 5));
            int v28 = (*(uint64_t (**)(void))(**((void **)this + 5) + 80))(*((void *)this + 5));
            if (v13 != 127 && (unsigned __int16)v13 != 60) {
              break;
            }
            v25 += v28;
            if (v25 > v26) {
              break;
            }
          }
        }
      }
      else
      {
        if ((unsigned __int16)v7 != 438) {
          return 0;
        }
        (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 5) + 16))(*((void *)this + 5), 10, 1);
        int v12 = (*(uint64_t (**)(void))(**((void **)this + 5) + 72))(*((void *)this + 5));
        (*(void (**)(void, void, uint64_t))(**((void **)this + 5) + 16))(*((void *)this + 5), (v9 - 12), 1);
        int v13 = (*(uint64_t (**)(void))(**((void **)this + 5) + 72))(*((void *)this + 5));
        int v14 = (*(uint64_t (**)(void))(**((void **)this + 5) + 80))(*((void *)this + 5));
        if (v12 >= 1)
        {
          int v15 = v14;
          do
          {
            int v16 = (*(uint64_t (**)(void))(**((void **)this + 5) + 64))(*((void *)this + 5));
            unsigned int v17 = (unsigned __int16)v15;
            if ((_WORD)v15) {
              unsigned int v17 = (unsigned __int16)v15 - 1;
            }
            int v18 = v12 - (v17 >> 1);
            if (v16) {
              int v12 = v18;
            }
            else {
              int v12 = v12 - v15 + 1;
            }
            (*(void (**)(void, void, uint64_t))(**((void **)this + 5) + 16))(*((void *)this + 5), (unsigned __int16)v15 - 1, 1);
            (*(void (**)(void))(**((void **)this + 5) + 72))(*((void *)this + 5));
            int v15 = (*(uint64_t (**)(void))(**((void **)this + 5) + 80))(*((void *)this + 5));
          }
          while ((__int16)v12 > 0);
          uint64_t v19 = *(void (**)(void))(**((void **)this + 5) + 16);
LABEL_26:
          v19();
          int v13 = (*(uint64_t (**)(void))(**((void **)this + 5) + 72))(*((void *)this + 5));
          (*(void (**)(void))(**((void **)this + 5) + 80))(*((void *)this + 5));
        }
      }
      if (v13 == 236 || (unsigned __int16)v13 == 60) {
        goto LABEL_7;
      }
      return 0;
    }
  }
LABEL_7:
  uint64_t v10 = (*(unsigned int (**)(void))(**((void **)this + 5) + 40))(*((void *)this + 5)) - 4;
  return XlReadStgStream::mapStreamChunk(this, v10);
}

uint64_t EshStroke::getEndArrow(EshStroke *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x1D1u);
}

uint64_t EshTextBox::isAutoInsetSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0xBCu);
}

uint64_t EshTextBox::getAutoInset(EshTextBox *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty((uint64_t)this->var2, 0xBCu);
}

double EshTextBox::setInsetLeft(EshTextBox *this, unsigned int a2)
{
  int var2 = this->var2;
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty((uint64_t)var2, 0x81u, 2, &v4).n128_u64[0];
  return result;
}

double EshTextBox::setInsetRight(EshTextBox *this, unsigned int a2)
{
  int var2 = this->var2;
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty((uint64_t)var2, 0x83u, 2, &v4).n128_u64[0];
  return result;
}

double EshTextBox::setInsetTop(EshTextBox *this, unsigned int a2)
{
  int var2 = this->var2;
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty((uint64_t)var2, 0x82u, 2, &v4).n128_u64[0];
  return result;
}

double EshTextBox::setInsetBottom(EshTextBox *this, unsigned int a2)
{
  int var2 = this->var2;
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty((uint64_t)var2, 0x84u, 2, &v4).n128_u64[0];
  return result;
}

void sub_238BA905C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238BA91A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BA966C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_238BA9924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BA9CB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BA9EEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BA9FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BAA538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BAA630(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BAA8A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlLeftMargin::XlLeftMargin(XlLeftMargin *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *uint64_t v2 = &unk_26EBDFFE8;
  v2[2] = 0;
}

void XlRightMargin::XlRightMargin(XlRightMargin *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *uint64_t v2 = &unk_26EBE1080;
  v2[2] = 0;
}

uint64_t XlBinaryReader::processFormula(XlBinaryReader *this, XlCell *a2, XlHeader *a3)
{
  uint64_t v6 = operator new(0x38uLL);
  XlFormula::XlFormula((XlFormula *)v6, a3);
  int v7 = (XlFormulaInfo *)operator new(0x48uLL);
  XlFormulaInfo::XlFormulaInfo(v7);
  if (!v6 || !v7)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1001;
  }
  XlHeader::XlHeader(&v23);
  (*(void (**)(void, void *))(**((void **)this + 167) + 296))(*((void *)this + 167), v6);
  int v8 = *((_DWORD *)v6 + 12);
  switch(v8)
  {
    case 1:
      double NumberResult = XlFormula::getNumberResult((XlFormula *)v6);
      XlCell::setNumber(a2, NumberResult);
      break;
    case 2:
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_7;
    case 4:
      BOOL BooleanResult = XlFormula::getBooleanResult((XlFormula *)v6);
      XlCell::setBoolean(a2, BooleanResult);
      break;
    case 8:
      XlCell::setBlank(a2);
      break;
    default:
      if (v8 == 16)
      {
        unsigned int ErrorResult = XlFormula::getErrorResult((XlFormula *)v6);
        XlCell::setError(a2, ErrorResult);
      }
      else
      {
LABEL_7:
        ChLogFunction("wrong result type", 2, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/Reader/XlBinaryReader.cpp", 4079);
      }
      break;
  }
  a2->int var3 = *((_WORD *)v6 + 20);
  *(_DWORD *)&a2->int var1 = *((_DWORD *)v6 + 9);
  *(_WORD *)&v7->var11 = *((_WORD *)v6 + 22);
  v7->unsigned int var9 = *((unsigned char *)v6 + 42);
  if (*((unsigned char *)this + 1032)) {
    char v12 = *((unsigned char *)v6 + 43);
  }
  else {
    char v12 = 1;
  }
  v7->var10 = v12;
  int v13 = (unsigned __int8 *)*((void *)v6 + 2);
  if (v13)
  {
    int v14 = *v13;
    if (v14 == 1 || v14 == 2) {
      v7->int var1 = v14;
    }
    XlParserVisitor::peekAhead(*((XlParserVisitor **)this + 167), &v23, *((unsigned char *)this + 1320));
    switch(v23.var1)
    {
      case 0x4BC:
        int v18 = (XlShrFmla *)operator new(0x28uLL);
        XlShrFmla::XlShrFmla(v18, &v23);
        *((void *)this + 163) = v18;
        if (v18) {
        XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
        }
        (*(void (**)(void, XlShrFmla *))(**((void **)this + 167) + 392))(*((void *)this + 167), v18);
        XlFormulaInfo::takeShareBase(v7, v18);
        *((void *)this + 163) = 0;
        XlParserVisitor::peekAhead(*((XlParserVisitor **)this + 167), &v23, *((unsigned char *)this + 1320));
        break;
      case 0x236:
        int v16 = (XlTable *)operator new(0x28uLL);
        XlTable::XlTable(v16, &v23);
        *((void *)this + 163) = v16;
        if (v16) {
        else
        }
          unsigned int v17 = 0;
        uint64_t v19 = (XlTable *)operator new(0x28uLL);
        XlTable::XlTable(v19, &v23);
        XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
        (*(void (**)(void, XlChartPicF *))(**((void **)this + 167) + 1288))(*((void *)this + 167), v17);
        XlChartFrameType::takePictureFormat((XlChartFrameType *)v7, v17);
        *((void *)this + 163) = 0;
        XlParserVisitor::peekAhead(*((XlParserVisitor **)this + 167), &v23, *((unsigned char *)this + 1320));
        if (v19) {
          (*(void (**)(XlTable *))(*(void *)v19 + 8))(v19);
        }
        break;
      case 0x221:
        int v15 = (XlArray *)operator new(0x30uLL);
        XlArray::XlArray(v15, &v23);
        *((void *)this + 163) = v15;
        if (v15) {
        XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
        }
        (*(void (**)(void, XlArray *))(**((void **)this + 167) + 184))(*((void *)this + 167), v15);
        XlFormulaInfo::takeArrayBase(v7, v15);
        *((void *)this + 163) = 0;
        XlParserVisitor::peekAhead(*((XlParserVisitor **)this + 167), &v23, *((unsigned char *)this + 1320));
        break;
    }
    XlFormulaInfo::takeFormula(v7, *((char **)v6 + 2), *((_DWORD *)v6 + 8), *((_WORD *)v6 + 23));
    XlFormula::giveUpFormula((uint64_t)v6);
    XlCell::takeFormulaInfo(a2, v7);
    if (v23.var1 == 519)
    {
      int v20 = (XlString **)operator new(0x18uLL);
      XlFmlaString::XlFmlaString((XlFmlaString *)v20, &v23);
      XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
      (*(void (**)(void, XlString **))(**((void **)this + 167) + 272))(*((void *)this + 167), v20);
      XlCell::takeString(a2, v20[2]);
      v20[2] = 0;
      (*((void (**)(XlString **))*v20 + 1))(v20);
    }
  }
  else
  {
    (*((void (**)(XlFormulaInfo *))v7->var0 + 1))(v7);
  }
  return (*(uint64_t (**)(void *))(*(void *)v6 + 8))(v6);
}

void sub_238BAB00C(_Unwind_Exception *a1)
{
  operator delete(v3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(a1);
}

void XlFormula::XlFormula(XlFormula *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDFAE8;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0xFFFF000000000000;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(_DWORD *)(v2 + 48) = 0;
}

void XlFormulaInfo::XlFormulaInfo(XlFormulaInfo *this)
{
  this->unsigned int var0 = (void **)&unk_26EBE2A18;
  this->int var1 = 0;
  this->int var2 = 0;
  this->int var3 = 0;
  this->unsigned int var4 = 0;
  this->var5 = -1;
  this->var7 = 0;
  this->var8 = 0;
  this->var6 = 0;
  *(_DWORD *)((char *)&this->var8 + 7) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlFormula *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_WORD *)a2 + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 19) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 20) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  XlFormula::setEncodedResult((const char *)a2, v4 | (unint64_t)(v5 << 32));
  char v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((unsigned char *)a2 + 42) = v6 & 1;
  *((unsigned char *)a2 + 43) = (v6 & 2) != 0;
  *((unsigned char *)a2 + 44) = (v6 & 8) != 0;
  *((unsigned char *)a2 + 45) = (v6 & 0x20) != 0;
  if (*((unsigned __int8 *)a2 + 14) < 5u)
  {
    unsigned int v7 = 18;
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4, 1);
    unsigned int v7 = 22;
  }
  *((_WORD *)a2 + 23) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  unsigned int v8 = *((_DWORD *)a2 + 2);
  BOOL v9 = v8 >= v7;
  unsigned int v10 = v8 - v7;
  if (v9)
  {
    unsigned int v15 = v10;
    unsigned int DataAndContinues = XlParserVisitor::getDataAndContinues(this, &v15, -1);
    unsigned int v12 = *((_DWORD *)this + 18);
    BOOL v9 = DataAndContinues >= v12;
    unsigned int v13 = DataAndContinues - v12;
    if (v9) {
      *((_DWORD *)a2 + 2) = v13;
    }
    XlArray::setFormula((XlArray *)a2, *((unsigned __int8 **)this + 3), v15);
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

const char *XlFormula::setEncodedResult(const char *this, unint64_t a2)
{
  uint64_t v2 = this;
  *((void *)this + 3) = a2;
  if (a2 < 0xFFFF000000000000)
  {
    int v3 = 1;
  }
  else if ((a2 & 0xFC) != 0)
  {
    int v3 = 4;
    this = ChLogFunction("npt a BOOLean", 2, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/DataModel/XlFormula.cpp", 108);
  }
  else
  {
    int v3 = dword_238EE01A0[(char)a2];
  }
  *((_DWORD *)v2 + 12) = v3;
  return this;
}

uint64_t XlParserVisitor::getDataAndContinues(XlParserVisitor *this, unsigned int *a2, int a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  LODWORD(v7) = 0;
  uint64_t v8 = *a2;
  do
  {
    while (1)
    {
      do
      {
        (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), v8, 1);
        size_t v7 = (v8 + v7);
        int v9 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
        uint64_t v10 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
        uint64_t v8 = v10;
      }
      while (v9 == 60);
      if ((unsigned __int16)v9 != 2175) {
        break;
      }
      uint64_t v8 = (v10 - 12);
      (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 12, 1);
    }
  }
  while (v9 == a3);
  (*(void (**)(void, uint64_t, void))(**((void **)this + 2) + 16))(*((void *)this + 2), v6, 0);
  if (v7)
  {
    *((void *)this + 3) = operator new[](v7);
    unsigned int v16 = *a2;
    if (v16 > v7)
    {
LABEL_15:
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 3002;
    }
    unsigned int v11 = 0;
    while (1)
    {
      (*(void (**)(void, void, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), *((void *)this + 3) + v11, &v16);
      v11 += v16;
      int v12 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
      unsigned int v13 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
      unsigned int v16 = v13;
      if (v12 != 60)
      {
        if ((unsigned __int16)v12 == 2175)
        {
          unsigned int v16 = v13 - 12;
          (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 12, 1);
          unsigned int v13 = v16;
        }
        else if (v12 != a3)
        {
          (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4294967292, 1);
          *a2 = v11;
          return (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
        }
      }
      if (__CFADD__(v13, v11) || v13 + v11 > v7) {
        goto LABEL_15;
      }
    }
  }
  return v6;
}

uint64_t XlArray::setFormula(XlArray *this, unsigned __int8 *a2, int a3)
{
  uint64_t result = *((void *)this + 2);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  *((void *)this + 2) = a2;
  *((_DWORD *)this + 8) = a3;
  return result;
}

uint64_t XlParserVisitor::peekAhead(XlParserVisitor *this, XlHeader *a2, unsigned __int8 a3)
{
  XlParserVisitor::getHeader(this, a2, a3);
  unsigned int v4 = *(uint64_t (**)(void))(**((void **)this + 2) + 16);
  return v4();
}

char *XlFormulaInfo::takeFormula(XlFormulaInfo *this, char *a2, unsigned int a3, signed __int16 a4)
{
  uint64_t result = this->var3;
  if (result) {
    uint64_t result = (char *)MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  this->int var3 = a2;
  this->unsigned int var4 = a3;
  this->var5 = a4;
  return result;
}

uint64_t XlFormula::giveUpFormula(uint64_t this)
{
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_WORD *)(this + 46) = -1;
  return this;
}

XlCell *XlCell::takeFormulaInfo(XlCell *this, XlFormulaInfo *a2)
{
  int v3 = this;
  if (this->var11)
  {
    this = (XlCell *)this->var8;
    if (this) {
      this = (XlCell *)(*((uint64_t (**)(XlCell *))this->var0 + 1))(this);
    }
  }
  v3->var8 = a2;
  v3->var11 = 1;
  return this;
}

void XlFmlaString::XlFmlaString(XlFmlaString *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *uint64_t v2 = &unk_26EBDF968;
  v2[2] = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlFmlaString *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  if (*((unsigned __int8 *)a2 + 14) > 8u)
  {
    int v8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
    int v9 = *((_DWORD *)a2 + 2);
    int v10 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    if (v10)
    {
      unsigned __int16 v11 = v10;
      char v12 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
      unsigned int v13 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v13);
      *((void *)this + 4) = v13;
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v11, v12, v9 + v8, v13);
      XlBoundSheet::setName(a2, *((XlString **)this + 4));
      *((void *)this + 4) = 0;
      *((_DWORD *)a2 + 2) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2))
                          - *((_DWORD *)this + 18);
    }
  }
  else
  {
    int v4 = *((_DWORD *)a2 + 2);
    uint64_t v5 = **((void **)this + 2);
    if (*((unsigned char *)a2 + 14))
    {
      unsigned __int16 v6 = (*(uint64_t (**)(void))(v5 + 72))();
      int v7 = -2;
    }
    else
    {
      unsigned __int16 v6 = (*(uint64_t (**)(void))(v5 + 64))();
      int v7 = -1;
    }
    int v14 = v4 + v7;
    int v18 = v14;
    if (v14)
    {
      unsigned int v15 = operator new[]((v14 + 1));
      *((void *)this + 3) = v15;
      v15[v14] = 0;
      (*(void (**)(void, void, int *))(**((void **)this + 2) + 56))(*((void *)this + 2), *((void *)this + 3), &v18);
    }
    unsigned int v16 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v16);
    *((void *)this + 4) = v16;
    XlString::takeString((uint64_t)v16, *((char **)this + 3), v18 + 1, v6, 0);
    *((void *)this + 3) = 0;
    XlBoundSheet::setName(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238BABC30(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlFmlaString::~XlFmlaString(XlFmlaString *this)
{
  *(void *)this = &unk_26EBDF968;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBDF968;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
}

void XlFormula::~XlFormula(XlFormula *this)
{
  *(void *)this = &unk_26EBDFAE8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBDFAE8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
}

void XlShrFmla::XlShrFmla(XlShrFmla *this, XlHeader *a2)
{
  XlRecord::XlRecord((XlRecord *)this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1400;
  *(void *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 28) = 0;
  *(void *)(v2 + 32) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlShrFmla *a2)
{
  int v4 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v4, 1);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  (*(void (**)(XlParserVisitor *, XlRef *))(*(void *)this + 1504))(this, v4);
  XlRevisionMove::takeDestRef((XlRevisionMove *)a2, v4);
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 2, 1);
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 14) = v5;
  if (v5 < 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  unsigned int v10 = (unsigned __int16)v5;
  int DataAndContinues = XlParserVisitor::getDataAndContinues(this, &v10, -1);
  unsigned int v7 = v10;
  XlChartGelFrame::setBinaryData((XlChartGelFrame *)a2, *((unsigned __int8 **)this + 3), v10);
  *((_DWORD *)a2 + 6) = v7;
  *((_DWORD *)a2 + 2) = DataAndContinues - *((_DWORD *)this + 18);
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238BABF40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlRevisionMove::takeDestRef(XlRevisionMove *this, XlRef *a2)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = MEMORY[0x23EC997B0](result, 0x1000C400EA6A39BLL);
  }
  *((void *)this + 4) = a2;
  return result;
}

uint64_t XlChartGelFrame::setBinaryData(XlChartGelFrame *this, unsigned __int8 *a2, int a3)
{
  uint64_t result = *((void *)this + 2);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  *((void *)this + 2) = a2;
  *((_DWORD *)this + 6) = a3;
  return result;
}

XlShrFmla *XlFormulaInfo::takeShareBase(XlFormulaInfo *this, XlShrFmla *a2)
{
  uint64_t result = this->var6;
  if (result) {
    uint64_t result = (XlShrFmla *)(*(uint64_t (**)(XlShrFmla *))(*(void *)result + 8))(result);
  }
  this->var6 = a2;
  return result;
}

double XlFormula::getNumberResult(XlFormula *this)
{
  return *((double *)this + 3);
}

uint64_t XlFormula::getErrorResult(XlFormula *this)
{
  if (*((_DWORD *)this + 12) == 16) {
    return *((unsigned __int8 *)this + 26);
  }
  else {
    return 255;
  }
}

XlCell *XlCell::setError(XlCell *a1, unsigned int a2)
{
  uint64_t result = XlCell::resetContent(a1);
  a1->unsigned int var4 = 4;
  a1->var7 = a2;
  if (a2 > 0x2A || ((1 << a2) & 0x41020808081) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  return result;
}

void sub_238BAC358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *XlFormulaParser::addPtgString(char *this, XlPtg *a2, int a3)
{
  if (a2)
  {
    int v5 = (unsigned __int8 *)this;
    uint64_t v6 = **(void **)this;
    if (a3)
    {
      int v7 = (*(uint64_t (**)(void))(v6 + 72))();
      if (v7 < 0) {
        goto LABEL_27;
      }
      __int16 v8 = v7;
      int v9 = (unsigned __int16)v7;
      unsigned int v10 = 2;
    }
    else
    {
      int v9 = (*(uint64_t (**)(void))(v6 + 64))();
      unsigned int v10 = 0;
      __int16 v8 = v9;
    }
    if (v5[72] < 9u)
    {
      this = XlPtg::addDataItem(a2, v10 + v9 + 5);
      if (this)
      {
        char v12 = this;
        if (a3)
        {
          *this = 2;
          char v12 = &this[v10];
        }
        *(_WORD *)char v12 = v8;
        *((_WORD *)v12 + 1) = v5[72];
        if (!(v10 + v9)) {
          goto LABEL_25;
        }
        unsigned int v13 = *(uint64_t (**)(void))(**(void **)v5 + 56);
        goto LABEL_18;
      }
    }
    else
    {
      char v11 = (*(uint64_t (**)(void))(**(void **)v5 + 64))();
      if (v11)
      {
        unsigned int v14 = v10 + 2 * v9;
        this = XlPtg::addDataItem(a2, v14 + 6);
        if (this)
        {
          char v12 = this;
          if (a3)
          {
            *this = 2;
            char v12 = &this[v10];
          }
          *(_WORD *)char v12 = v8;
          v12[2] = v5[72];
          v12[3] = v11;
          if (v14)
          {
            int v16 = v9;
            this = (char *)(*(uint64_t (**)(void, int *, char *))(**(void **)v5 + 136))(*(void *)v5, &v16, v12 + 4);
          }
          v12[2 * v9 + 5] = 0;
          v9 *= 2;
          goto LABEL_25;
        }
      }
      else
      {
        this = XlPtg::addDataItem(a2, v10 + v9 + 5);
        if (this)
        {
          char v12 = this;
          if (a3)
          {
            *this = 2;
            char v12 = &this[v10];
          }
          *(_WORD *)char v12 = v8;
          v12[2] = v5[72];
          v12[3] = v11;
          if (!(v10 + v9)) {
            goto LABEL_25;
          }
          unsigned int v13 = *(uint64_t (**)(void))(**(void **)v5 + 56);
LABEL_18:
          this = (char *)v13();
LABEL_25:
          v12[v9 + 4] = 0;
          return this;
        }
      }
    }
LABEL_27:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 3002;
  }
  return this;
}

uint64_t SsrwOOMemStream::readSInt16(SsrwOOMemStream *this)
{
  uint64_t v1 = *((unsigned int *)this + 5);
  if ((v1 & 0x80000000) != 0 || *((_DWORD *)this + 4) - (int)v1 <= 1)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 15;
  }
  uint64_t result = CsLeReadSInt16((__int16 *)(**((void **)this + 1) + v1));
  *((_DWORD *)this + 5) += 2;
  return result;
}

void setFormulaForEDCell(EDCellHeader *a1, EDFormula *a2, EDRowBlocks *a3)
{
  int v9 = a2;
  int v5 = a3;
  uint64_t v6 = v5;
  if (a1)
  {
    int v7 = [(EDRowBlocks *)v5 formulas];
    unsigned int v8 = [v7 addObject:v9];
    if ((a1->var0 & 0x10000000) != 0) {
      a1[1].unsigned int var0 = v8;
    }
  }
}

void sub_238BAC718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t XlFormulaProcessor::getShareBase(XlFormulaProcessor *this, XlFormulaInfo *a2, unsigned __int16 *a3, __int16 *a4)
{
  *a3 = -1;
  *a4 = -1;
  if (a2->var1 != 1 || a2->var4 < 5) {
    return 0;
  }
  int var3 = a2->var3;
  if (!var3 || *var3 != 1) {
    return 0;
  }
  *a3 = CsLeReadUInt16((unsigned __int16 *)(var3 + 1));
  *a4 = CsLeReadSInt16((__int16 *)(var3 + 3));
  return 1;
}

void XlFormulaProcessor::convertToRegularFormula(XlFormulaProcessor *this, XlFormulaInfo *a2, int a3, int a4)
{
  XlHeader::XlHeader(&v27);
  if (a2->var1 == 1 && a2->var4 >= 5)
  {
    int var3 = a2->var3;
    if (var3)
    {
      int v9 = *var3;
      if (v9 == 2)
      {
        a2->int var1 = 2;
        return;
      }
      if (v9 != 1)
      {
        a2->int var1 = 0;
        return;
      }
      int UInt16 = CsLeReadUInt16((unsigned __int16 *)(var3 + 1));
      int SInt16 = CsLeReadSInt16((__int16 *)(var3 + 3));
      p_var6 = &a2->var6;
      var6 = a2->var6;
      if (*(_OWORD *)&a2->var6 != 0)
      {
        unsigned int v14 = (XlBaseFormulaTable *)*((void *)this + 2);
        if (!v14)
        {
          unsigned int v14 = (XlBaseFormulaTable *)operator new(0x48uLL);
          XlBaseFormulaTable::XlBaseFormulaTable(v14);
          *((void *)this + 2) = v14;
          var6 = *p_var6;
        }
        if (var6)
        {
          XlBaseFormulaTable::add(v14, (XlRecord *)var6, UInt16, SInt16);
        }
        else
        {
          XlBaseFormulaTable::add(v14, (XlRecord *)a2->var7, UInt16, SInt16);
          p_var6 = (XlShrFmla **)&a2->var7;
        }
        *p_var6 = 0;
      }
      unsigned int v15 = (XlBaseFormulaTable *)*((void *)this + 2);
      if (v15)
      {
        int v16 = (unsigned __int16 *)XlBaseFormulaTable::base(v15, UInt16, SInt16);
        if (!v16)
        {
LABEL_24:
          XlFormulaParser::setFormula(*((SsrwOOStream **)this + 1), (void **)a2->var3, a2->var5, (void **)a2->var4);
          XlFormulaParser::reset(*((XlFormulaParser **)this + 1));
          uint64_t v23 = *((void *)this + 1);
          *(unsigned char *)(v23 + 80) = 1;
          *(_WORD *)(v23 + 68) = a3;
          *(_WORD *)(v23 + 70) = a4;
          while (1)
          {
            Token = XlFormulaParser::nextToken((XlFormulaParser *)v23);
            if (!Token) {
              break;
            }
            XlPtg::~XlPtg(Token);
            MEMORY[0x23EC997B0]();
            uint64_t v23 = *((void *)this + 1);
          }
          *(unsigned char *)(*((void *)this + 1) + 80) = 0;
          return;
        }
        int v17 = v16[6];
        if (v17 == 1212)
        {
          uint64_t v22 = operator new[](v21[6]);
          *((void *)this + 19) = v22;
          memcpy(v22, *((const void **)v21 + 2), v21[6]);
          XlFormulaInfo::takeFormula(a2, *((char **)this + 19), v21[6], *((_WORD *)v21 + 14));
          *((void *)this + 19) = 0;
          uint64_t v20 = *((void *)v21 + 4);
          goto LABEL_21;
        }
        if (v17 == 545)
        {
          uint64_t v19 = operator new[](v18[8]);
          *((void *)this + 19) = v19;
          memcpy(v19, *((const void **)v18 + 2), v18[8]);
          XlFormulaInfo::takeFormula(a2, *((char **)this + 19), v18[8], *((_WORD *)v18 + 21));
          *((void *)this + 19) = 0;
          uint64_t v20 = *((void *)v18 + 3);
LABEL_21:
          if (*(unsigned __int16 *)(v20 + 2) == a3 && a4 == *(__int16 *)(v20 + 6)) {
            XlBaseFormulaTable::remove(*((XlBaseFormulaTable **)this + 2), UInt16, SInt16);
          }
          goto LABEL_24;
        }
        exception = __cxa_allocate_exception(4uLL);
        int v26 = 1004;
      }
      else
      {
        exception = __cxa_allocate_exception(4uLL);
        int v26 = 1003;
      }
      _DWORD *exception = v26;
    }
  }
}

void sub_238BACB50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlBaseFormulaTable::XlBaseFormulaTable(XlBaseFormulaTable *this)
{
  *(void *)this = &unk_26EBE3AB0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
}

void XlBaseFormulaTable::add(XlBaseFormulaTable *this, XlRecord *a2, __int16 a3, __int16 a4)
{
  if (!a2 || (int v8 = *((unsigned __int16 *)a2 + 6), v8 != 545) && v8 != 566 && v8 != 1212)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 8000;
  }
  int v9 = operator new(4uLL);
  *int v9 = a4;
  v9[1] = a3;
  *((void *)this + 7) = v9;
  uint64_t v10 = *((unsigned int *)this + 16);
  uint64_t v11 = *((void *)this + 1);
  char v12 = (void *)*((void *)this + 2);
  unint64_t v13 = (unint64_t)v12 - v11;
  if (v10 == (((unint64_t)v12 - v11) >> 3))
  {
    unint64_t v14 = *((void *)this + 3);
    if ((unint64_t)v12 >= v14)
    {
      unint64_t v16 = (v14 - v11) >> 3;
      if (2 * (int)v16 <= (v10 + 1)) {
        unsigned int v17 = v10 + 1;
      }
      else {
        unsigned int v17 = 2 * v16;
      }
      if (v16 >= 0x7FFFFFFF) {
        unint64_t v18 = 0xFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18)
      {
        uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 24, v18);
        uint64_t v21 = v20;
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v21 = 0;
      }
      uint64_t v22 = &v19[v13 & 0x7FFFFFFF8];
      uint64_t v23 = &v19[8 * v21];
      *(void *)uint64_t v22 = a2;
      unsigned int v15 = v22 + 8;
      unsigned int v25 = (char *)*((void *)this + 1);
      int v24 = (char *)*((void *)this + 2);
      if (v24 != v25)
      {
        do
        {
          uint64_t v26 = *((void *)v24 - 1);
          v24 -= 8;
          *((void *)v22 - 1) = v26;
          v22 -= 8;
        }
        while (v24 != v25);
        int v24 = (char *)*((void *)this + 1);
      }
      *((void *)this + 1) = v22;
      *((void *)this + 2) = v15;
      *((void *)this + 3) = v23;
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      void *v12 = a2;
      unsigned int v15 = v12 + 1;
    }
    unint64_t v27 = *((void *)this + 6);
    *((void *)this + 2) = v15;
    int v28 = (void *)*((void *)this + 5);
    if ((unint64_t)v28 >= v27)
    {
      uint64_t v30 = *((void *)this + 4);
      unint64_t v31 = (unint64_t)v28 - v30;
      unint64_t v32 = (v27 - v30) >> 3;
      unsigned int v33 = 2 * v32;
      if (2 * (int)v32 <= (v31 >> 3) + 1) {
        unsigned int v33 = (v31 >> 3) + 1;
      }
      if (v32 >= 0x7FFFFFFF) {
        unint64_t v34 = 0xFFFFFFFFLL;
      }
      else {
        unint64_t v34 = v33;
      }
      if (v34)
      {
        uint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 48, v34);
        uint64_t v37 = v36;
      }
      else
      {
        uint64_t v35 = 0;
        uint64_t v37 = 0;
      }
      unint64_t v38 = &v35[v31 & 0x7FFFFFFF8];
      unsigned int v39 = &v35[8 * v37];
      *(void *)unint64_t v38 = *((void *)this + 7);
      uint64_t v29 = v38 + 8;
      __int16 v41 = (char *)*((void *)this + 4);
      unint64_t v40 = (char *)*((void *)this + 5);
      if (v40 != v41)
      {
        do
        {
          uint64_t v42 = *((void *)v40 - 1);
          v40 -= 8;
          *((void *)v38 - 1) = v42;
          v38 -= 8;
        }
        while (v40 != v41);
        unint64_t v40 = (char *)*((void *)this + 4);
      }
      *((void *)this + 4) = v38;
      *((void *)this + 5) = v29;
      *((void *)this + 6) = v39;
      if (v40) {
        operator delete(v40);
      }
    }
    else
    {
      *int v28 = *((void *)this + 7);
      uint64_t v29 = v28 + 1;
    }
    *((void *)this + 5) = v29;
    LODWORD(v10) = *((_DWORD *)this + 16);
  }
  else
  {
    *(void *)(v11 + 8 * v10) = a2;
    *(void *)(*((void *)this + 4) + 8 * v10) = *((void *)this + 7);
  }
  *((void *)this + 7) = 0;
  uint64_t v43 = *((void *)this + 1);
  unint64_t v44 = *((void *)this + 2) - v43;
  if (v10 < (v44 >> 3))
  {
    uint64_t v45 = (v44 >> 3);
    uint64_t v10 = v10;
    do
    {
      if (!*(void *)(v43 + 8 * v10)) {
        break;
      }
      *((_DWORD *)this + 16) = ++v10;
    }
    while (v45 != v10);
  }
}

uint64_t XlBaseFormulaTable::base(XlBaseFormulaTable *this, int a2, int a3)
{
  unsigned int v4 = XlBaseFormulaTable::locate(this, a2, a3);
  if ((v4 & 0x80000000) != 0) {
    return 0;
  }
  else {
    return *(void *)(*((void *)this + 1) + 8 * v4);
  }
}

uint64_t XlBaseFormulaTable::locate(XlBaseFormulaTable *this, int a2, int a3)
{
  uint64_t v3 = *((void *)this + 4);
  unint64_t v4 = *((void *)this + 5) - v3;
  if ((v4 & 0x7FFFFFFF8) == 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  uint64_t v6 = (v4 >> 3);
  while (1)
  {
    int v7 = *(unsigned __int16 **)(v3 + 8 * result);
    if (v7)
    {
      if (v7[1] == a2 && a3 == *v7) {
        break;
      }
    }
    if (v6 == ++result) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t formulaIndexForEDCell(const EDCellHeader *a1)
{
  if (!a1 || (a1->var0 & 0x10000000) == 0) {
    return -1;
  }
  if (a1[1].var0 == -1) {
    return -1;
  }
  return a1[1].var0;
}

XlPtg *XlFormulaParser::readPtgArea(uint64_t **a1, int a2, int a3)
{
  uint64_t v6 = (XlPtg *)operator new(0x18uLL);
  XlPtg::XlPtg((uint64_t)v6, a2, 8);
  LastExtendedData = XlPtg::getLastExtendedData(v6);
  *(_WORD *)LastExtendedData = (*(uint64_t (**)(void))(**a1 + 80))();
  *((_WORD *)LastExtendedData + 1) = (*(uint64_t (**)(void))(**a1 + 80))();
  uint64_t v8 = **a1;
  if (*((unsigned __int8 *)a1 + 72) < 9u)
  {
    *((_WORD *)LastExtendedData + 2) = (*(uint64_t (**)(void))(v8 + 64))();
    __int16 v9 = (*(uint64_t (**)(void))(**a1 + 64))();
  }
  else
  {
    *((_WORD *)LastExtendedData + 2) = (*(uint64_t (**)(void))(v8 + 80))();
    __int16 v9 = (*(uint64_t (**)(void))(**a1 + 80))();
  }
  *((_WORD *)LastExtendedData + 3) = v9;
  if (*((unsigned __int8 *)a1 + 72) > 8u) {
    goto LABEL_13;
  }
  __int16 v10 = *(_WORD *)LastExtendedData;
  if (*(__int16 *)LastExtendedData < 0)
  {
    *((_WORD *)LastExtendedData + 2) |= 0x8000u;
    if ((v10 & 0x4000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if ((*(_WORD *)LastExtendedData & 0x4000) != 0) {
LABEL_7:
  }
    *((_WORD *)LastExtendedData + 2) |= 0x4000u;
LABEL_8:
  *(_WORD *)LastExtendedData = v10;
  int v11 = *((__int16 *)LastExtendedData + 1);
  unsigned int v12 = *((unsigned __int16 *)LastExtendedData + 1);
  __int16 v13 = v9 | 0x8000;
  if (v11 >= 0) {
    __int16 v13 = v9;
  }
  __int16 v9 = v11 & 0x4000 | v13;
  if (v12 >= 0x4000) {
    *((_WORD *)LastExtendedData + 3) = v9;
  }
  *((_WORD *)LastExtendedData + 1) = v12;
LABEL_13:
  if (!a3) {
    return v6;
  }
  int v14 = *((__int16 *)LastExtendedData + 2);
  if (v14 < 0)
  {
    *(_WORD *)LastExtendedData += *((_WORD *)a1 + 34);
    if ((v9 & 0x8000) == 0)
    {
LABEL_16:
      if ((v14 & 0x4000) == 0) {
        goto LABEL_17;
      }
LABEL_24:
      *((_WORD *)LastExtendedData + 2) = v14 & 0xC000 | (*((_WORD *)a1 + 35) + v14);
      if ((v9 & 0x4000) == 0) {
        return v6;
      }
      goto LABEL_18;
    }
  }
  else if ((v9 & 0x8000) == 0)
  {
    goto LABEL_16;
  }
  *((_WORD *)LastExtendedData + 1) += *((_WORD *)a1 + 34);
  if ((v14 & 0x4000) != 0) {
    goto LABEL_24;
  }
LABEL_17:
  if ((v9 & 0x4000) != 0) {
LABEL_18:
  }
    *((_WORD *)LastExtendedData + 3) = v9 & 0xC000 | (*((_WORD *)a1 + 35) + v9);
  return v6;
}

void sub_238BAD12C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

_DWORD *setErrorValueForEDCell(_DWORD *result, int a2)
{
  if (result)
  {
    if (*result >> 29 == 5)
    {
      if ((*result & 0x10000000) != 0) {
        result[3] = a2;
      }
      else {
        result[2] = a2;
      }
    }
    else
    {
      uint64_t v2 = objc_msgSend(NSString, "stringWithUTF8String:", "void setErrorValueForEDCell(EDCellHeader *, EDErrorValue)");
      uint64_t v3 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/DOM/EDCell.mm"];
      +[OITSUAssertionHandler handleFailureInFunction:v2 file:v3 lineNumber:294 isFatal:0 description:"Invalid Cell Type!"];

      return (_DWORD *)+[OITSUAssertionHandler logBacktraceThrottled];
    }
  }
  return result;
}

void sub_238BAD294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlFormulaInfo::~XlFormulaInfo(XlFormulaInfo *this)
{
  this->unsigned int var0 = (void **)&unk_26EBE2A18;
  XlFormulaInfo::reset(this);
  JUMPOUT(0x23EC997B0);
}

{
  this->unsigned int var0 = (void **)&unk_26EBE2A18;
  XlFormulaInfo::reset(this);
}

XlArray *XlFormulaInfo::reset(XlFormulaInfo *this)
{
  int var2 = this->var2;
  if (var2) {
    (*((void (**)(OcText *))var2->var0 + 1))(var2);
  }
  this->int var2 = 0;
  int var3 = this->var3;
  if (var3) {
    MEMORY[0x23EC99790](var3, 0x1000C8077774924);
  }
  this->int var3 = 0;
  var8 = this->var8;
  if (var8) {
    (*(void (**)(XlTable *))(*(void *)var8 + 8))(var8);
  }
  this->var8 = 0;
  var6 = this->var6;
  if (var6) {
    (*(void (**)(XlShrFmla *))(*(void *)var6 + 8))(var6);
  }
  this->var6 = 0;
  uint64_t result = this->var7;
  if (result) {
    uint64_t result = (XlArray *)(*(uint64_t (**)(XlArray *))(*(void *)result + 8))(result);
  }
  this->var7 = 0;
  this->int var1 = 0;
  this->unsigned int var4 = 0;
  this->var5 = -1;
  *(_WORD *)&this->unsigned int var9 = 0;
  this->var11 = 0;
  return result;
}

uint64_t XlLeftMargin::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 784))(a2, a1);
}

uint64_t XlRightMargin::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 968))(a2, a1);
}

uint64_t XlTopMargin::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1304))(a2, a1);
}

uint64_t XlBottomMargin::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 488))(a2, a1);
}

void XlBottomMargin::~XlBottomMargin(XlBottomMargin *this)
{
}

void XlTopMargin::~XlTopMargin(XlTopMargin *this)
{
}

void XlRightMargin::~XlRightMargin(XlRightMargin *this)
{
}

void XlLeftMargin::~XlLeftMargin(XlLeftMargin *this)
{
}

void sub_238BAD624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BAD788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BAD8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

unsigned __int16 *extractDataFromPtgRefBuffer(unsigned __int16 *result, int *a2, BOOL *a3, int *a4, BOOL *a5)
{
  *a2 = -1;
  *a4 = -1;
  *a3 = 0;
  *a5 = 0;
  if (result)
  {
    *a2 = *result;
    unsigned int v5 = result[1];
    *a3 = v5 >> 15;
    *a5 = (v5 & 0x4000) != 0;
    *a4 = v5;
  }
  return result;
}

void sub_238BADD3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BAE0BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BAE1C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BAE2E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned __int16 *extractDataFromPtgAreaBuffer(unsigned __int16 *result, int *a2, BOOL *a3, int *a4, BOOL *a5, int *a6, BOOL *a7, int *a8, BOOL *a9)
{
  *a2 = -1;
  *a4 = -1;
  *a6 = -1;
  *a8 = -1;
  *a3 = 0;
  *a5 = 0;
  *a7 = 0;
  *a9 = 0;
  if (result)
  {
    *a2 = *result;
    unsigned int v9 = result[2];
    *a3 = v9 >> 15;
    *a7 = (v9 & 0x4000) != 0;
    *a6 = v9;
    *a4 = result[1];
    unsigned int v10 = result[3];
    *a5 = v10 >> 15;
    *a9 = (v10 & 0x4000) != 0;
    *a8 = v10;
  }
  return result;
}

BOOL isRowReference(int a1, char a2)
{
  return (a1 | ~a2) == 0;
}

BOOL isColumnReference(int a1, int a2)
{
  return !a1 && a2 == 0xFFFF;
}

void sub_238BAE5DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BAE644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)EDFormula;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

uint64_t XlBaseFormulaTable::clear(XlBaseFormulaTable *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (((*((void *)this + 2) - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(v2 + 8 * v3);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        uint64_t v2 = *((void *)this + 1);
      }
      *(void *)(v2 + 8 * v3) = 0;
      uint64_t v5 = *((void *)this + 4);
      uint64_t v6 = *(void *)(v5 + 8 * v3);
      if (v6)
      {
        MEMORY[0x23EC997B0](v6, 0x1000C4052888210);
        uint64_t v5 = *((void *)this + 4);
      }
      *(void *)(v5 + 8 * v3++) = 0;
      uint64_t v2 = *((void *)this + 1);
    }
    while (v3 < ((unint64_t)(*((void *)this + 2) - v2) >> 3));
  }
  *((void *)this + 2) = v2;
  *((void *)this + 5) = *((void *)this + 4);
  uint64_t result = *((void *)this + 7);
  if (result) {
    uint64_t result = MEMORY[0x23EC997B0](result, 0x1000C4052888210);
  }
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  return result;
}

void XlShrFmla::~XlShrFmla(XlShrFmla *this)
{
  XlShrFmla::~XlShrFmla(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_26EBE1400;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  unint64_t v3 = *((void *)this + 4);
  if (v3) {
    MEMORY[0x23EC997B0](v3, 0x1000C400EA6A39BLL);
  }
  *((void *)this + 4) = 0;
}

void XlTxo::XlTxo(XlTxo *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1E38;
  *(_DWORD *)(v2 + 38) = 0;
  *(_WORD *)(v2 + 42) = 0;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 29) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlTxo *a2)
{
  int v4 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  int v6 = (v5 >> 1) & 7;
  if (v6 == 4) {
    int v6 = 5;
  }
  *((_DWORD *)a2 + 7) = ((v5 >> 4) & 7) - 1;
  *((_DWORD *)a2 + 8) = v6;
  *((unsigned char *)a2 + 36) = (v5 & 0x200) != 0;
  *((_DWORD *)a2 + 6) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 19) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4, 1);
  signed int v7 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  int v8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 20) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  int v10 = (v4 << 16) - 1179648;
  if (v10 >= 1)
  {
    __int16 v11 = result;
    unsigned int v12 = HIWORD(v10);
    if (v12 != result) {
      goto LABEL_33;
    }
    unsigned int v44 = v12;
    __int16 v13 = operator new[](result);
    *((void *)this + 3) = v13;
    (*(void (**)(void, void *, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v13, &v44);
    uint64_t result = XlTxo::setFormula(a2, *((unsigned __int8 **)this + 3), v11);
    *((void *)this + 3) = 0;
  }
  if (v7 < 1) {
    goto LABEL_29;
  }
  int v14 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  int v15 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  if (v14 != 60)
  {
LABEL_33:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 3002;
  }
  int v16 = v15;
  char v17 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  unint64_t v18 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v18);
  *((void *)this + 4) = v18;
  uint64_t v19 = (SsrwOOStream *)*((void *)this + 2);
  int v20 = (*((uint64_t (**)(SsrwOOStream *))v19->var0 + 5))(v19);
  XlStringParser::parse((XlParserVisitor *)((char *)this + 8), v19, v7, v17, v16 + v20 - 1, *((XlString **)this + 4));
  int v21 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  int v22 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  if (v21 != 60 || v8 < 16 || v22 < v8)
  {
    uint64_t v42 = *((void *)this + 4);
    if (v42) {
      (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
    }
    *((void *)this + 4) = 0;
    goto LABEL_33;
  }
  XlString::clearRichText(*((XlString **)this + 4));
  LOWORD(v23) = 0;
  int v24 = (void *)*((void *)this + 4);
  do
  {
    *((void *)this + 5) = operator new[](4uLL);
    **((_WORD **)this + 5) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    __int16 v25 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    uint64_t v26 = *((void *)this + 5);
    *(_WORD *)(v26 + 2) = v25;
    int v28 = (void *)v24[8];
    unint64_t v27 = v24[9];
    if ((unint64_t)v28 >= v27)
    {
      uint64_t v30 = v24[7];
      unint64_t v31 = (unint64_t)v28 - v30;
      unint64_t v32 = (v27 - v30) >> 3;
      unsigned int v33 = 2 * v32;
      if (2 * (int)v32 <= (v31 >> 3) + 1) {
        unsigned int v33 = (v31 >> 3) + 1;
      }
      if (v32 >= 0x7FFFFFFF) {
        unint64_t v34 = 0xFFFFFFFFLL;
      }
      else {
        unint64_t v34 = v33;
      }
      if (v34)
      {
        uint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)(v24 + 9), v34);
        uint64_t v37 = v36;
        uint64_t v26 = *((void *)this + 5);
      }
      else
      {
        uint64_t v35 = 0;
        uint64_t v37 = 0;
      }
      unint64_t v38 = &v35[v31 & 0x7FFFFFFF8];
      *(void *)unint64_t v38 = v26;
      uint64_t v29 = v38 + 8;
      unint64_t v40 = (char *)v24[7];
      unsigned int v39 = (char *)v24[8];
      if (v39 != v40)
      {
        do
        {
          uint64_t v41 = *((void *)v39 - 1);
          v39 -= 8;
          *((void *)v38 - 1) = v41;
          v38 -= 8;
        }
        while (v39 != v40);
        unsigned int v39 = (char *)v24[7];
      }
      v24[7] = v38;
      v24[8] = v29;
      v24[9] = &v35[8 * v37];
      if (v39) {
        operator delete(v39);
      }
    }
    else
    {
      *int v28 = v26;
      uint64_t v29 = v28 + 1;
    }
    v24[8] = v29;
    *((void *)this + 5) = 0;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4, 1);
    int v23 = (__int16)(v23 + 1);
  }
  while (v23 < (__int16)(v8 + ((v8 >> 28) & 7)) >> 3);
  XlBoundSheet::setName(a2, *((XlString **)this + 4));
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)a2 + 2) = result - *((_DWORD *)this + 18);
LABEL_29:
  *((_DWORD *)this + 18) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  return result;
}

void sub_238BAEE9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlAddMenu::setHelp(XlAddMenu *this, XlString *a2)
{
  uint64_t result = *((void *)this + 7);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 7) = a2;
  return result;
}

uint64_t XlGraphicsInfo::takeTextFormula(XlGraphicsInfo *this, unsigned __int8 *a2, __int16 a3)
{
  uint64_t result = *((void *)this + 11);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  *((void *)this + 11) = a2;
  *((_WORD *)this + 41) = a3;
  return result;
}

void XlTxo::~XlTxo(XlTxo *this)
{
  XlTxo::~XlTxo(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_26EBE1E38;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  unint64_t v3 = *((void *)this + 6);
  if (v3) {
    MEMORY[0x23EC99790](v3, 0x1000C8077774924);
  }
  *((void *)this + 6) = 0;
  *((_WORD *)this + 21) = 0;
}

uint64_t XlEshBinaryReader::readClientTextBox(XlEshBinaryReader *this, EshShape *a2, const EshHeader *a3)
{
  int v4 = (EshAtom *)operator new(0x20uLL);
  EshAtom::EshAtom(v4, 0xF00Du, 0);
  *(void *)int v4 = &unk_26EBDF680;
  return XlEshShape::takeClientTextBox((uint64_t)v5, (uint64_t)v4);
}

void sub_238BAF0CC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t XlEshShape::takeClientTextBox(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 592))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1010;
  }
  *(void *)(result + 592) = a2;
  return result;
}

void XlPane::XlPane(XlPane *this, XlHeader *a2)
{
  XlRecord::XlRecord((XlRecord *)this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0528;
  *(void *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlPane *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 10) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 11) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_DWORD *)a2 + 6) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

XlPane *XlSheetPresentation::takePaneInfo(XlSheetPresentation *this, XlPane *a2)
{
  uint64_t result = this->var3;
  if (result) {
    uint64_t result = (XlPane *)(*(uint64_t (**)(XlPane *))(*(void *)result + 8))(result);
  }
  this->int var3 = a2;
  return result;
}

void XlPane::~XlPane(XlPane *this)
{
}

void XlCondFmt::XlCondFmt(XlCondFmt *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDEF68;
  *(_WORD *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 18) = 0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlCondFmt *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((unsigned char *)a2 + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2)) & 1;
  int v4 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v4, 0);
  (*(void (**)(XlParserVisitor *, XlRef *))(*(void *)this + 1504))(this, v4);
  XlArray::setCellRange((XlArray *)a2, v4);
  for (int i = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2)); i; --i)
  {
    int v6 = (XlRef *)operator new(0xAuLL);
    XlRef::XlRef(v6, 0);
    (*(void (**)(XlParserVisitor *, XlRef *))(*(void *)this + 1504))(this, v6);
    XlCondFmt::appendCellRange(a2, v6);
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238BAF6B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlArray::setCellRange(XlArray *this, XlRef *a2)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = MEMORY[0x23EC997B0](result, 0x1000C400EA6A39BLL);
  }
  *((void *)this + 3) = a2;
  return result;
}

void XlCondFmt::appendCellRange(XlCondFmt *this, XlRef *a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
  unint64_t v6 = *((void *)this + 6);
  int v4 = (char *)this + 48;
  unint64_t v5 = v6;
  signed int v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *((void *)this + 4);
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      int v14 = 0;
      uint64_t v16 = 0;
    }
    char v17 = &v14[v10 & 0x7FFFFFFF8];
    unint64_t v18 = &v14[8 * v16];
    *(void *)char v17 = a2;
    int v8 = v17 + 8;
    int v20 = (char *)*((void *)this + 4);
    uint64_t v19 = (char *)*((void *)this + 5);
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      uint64_t v19 = (char *)*((void *)this + 4);
    }
    *((void *)this + 4) = v17;
    *((void *)this + 5) = v8;
    *((void *)this + 6) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *signed int v7 = a2;
    int v8 = v7 + 1;
  }
  *((void *)this + 5) = v8;
}

void XlConditionalFormat::XlConditionalFormat(XlConditionalFormat *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(void *)this = &unk_26EBE2410;
}

XlChartPicF *XlChartSeriesFormat::takePictureFormat(XlChartSeriesFormat *this, XlChartPicF *a2)
{
  uint64_t result = this->var4;
  if (result) {
    uint64_t result = (XlChartPicF *)(*((uint64_t (**)(XlChartPicF *))result->var0 + 1))(result);
  }
  this->unsigned int var4 = a2;
  return result;
}

void XlCf::XlCf(XlCf *this, XlHeader *a2)
{
  XlRecord::XlRecord((XlRecord *)this, a2);
  *(void *)uint64_t v2 = &unk_26EBDEE68;
  *(void *)(v2 + 16) = 0x100000001;
  *(_DWORD *)(v2 + 24) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 32) = 0;
}

XlDXf **XlParserVisitor::visit(XlParserVisitor *this, XlCf *a2)
{
  int v4 = (XlDXf *)operator new(0x38uLL);
  XlDXf::XlDXf(v4);
  uint64_t v9 = v4;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  a2->int var2 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  a2->int var3 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  (*(void (**)(XlParserVisitor *, XlDXf *))(*(void *)this + 1512))(this, v9);
  XlCf::setDifferentialFormat(a2, v9);
  uint64_t v9 = 0;
  if (v5 >= 1)
  {
    int v8 = (unsigned __int16)v5;
    *((void *)this + 3) = operator new[]((unsigned __int16)v5);
    (*(void (**)(void))(**((void **)this + 2) + 56))(*((void *)this + 2));
    XlCf::takeFirstFmla(a2, *((char **)this + 3), v5);
    *((void *)this + 3) = 0;
  }
  if (v6 >= 1)
  {
    int v8 = (unsigned __int16)v6;
    *((void *)this + 3) = operator new[]((unsigned __int16)v6);
    (*(void (**)(void))(**((void **)this + 2) + 56))(*((void *)this + 2));
    XlCf::takeSecondFmla(a2, *((char **)this + 3), v6);
    *((void *)this + 3) = 0;
  }
  XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
  return ChAutoPtr<XlDXf>::~ChAutoPtr(&v9);
}

void sub_238BAFB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  operator delete(v10);
  _Unwind_Resume(a1);
}

void XlDXf::XlDXf(XlDXf *this)
{
  *(_DWORD *)&this->unsigned int var0 = 63;
  *(_WORD *)&this->unsigned int var4 = 2;
  *(_OWORD *)&this->var6 = 0u;
  *(_OWORD *)&this->var8 = 0u;
  *(_OWORD *)&this->var10 = 0u;
}

XlDXfProtect *XlParserVisitor::visit(XlParserVisitor *this, XlDXf *a2)
{
  a2->unsigned int var0 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  a2->int var1 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  a2->int var2 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  a2->unsigned __int8 var3 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  a2->unsigned int var4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  uint64_t result = (XlDXfProtect *)(*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  a2->var5 = result;
  unsigned __int8 var3 = a2->var3;
  if ((var3 & 2) != 0)
  {
    int v6 = (XlDXfUserFmt *)operator new(0x18uLL);
    XlDXfUserFmt::XlDXfUserFmt(v6, a2->var4 & 1);
    (*(void (**)(XlParserVisitor *, XlDXfUserFmt *))(*(void *)this + 1520))(this, v6);
    uint64_t result = (XlDXfProtect *)XlDXf::setFmtChanges(a2, v6);
    unsigned __int8 var3 = a2->var3;
  }
  if ((var3 & 4) != 0)
  {
    signed int v7 = (XlDXfFont *)operator new(0x50uLL);
    XlDXfFont::XlDXfFont(v7);
    (*(void (**)(XlParserVisitor *, XlDXfFont *))(*(void *)this + 1544))(this, v7);
    uint64_t result = (XlDXfProtect *)XlDXf::setFontChanges(a2, v7);
    unsigned __int8 var3 = a2->var3;
  }
  if ((var3 & 8) != 0)
  {
    int v8 = (XlDXfAlign *)operator new(0x14uLL);
    XlDXfAlign::XlDXfAlign(v8);
    (*(void (**)(XlParserVisitor *, XlDXfAlign *))(*(void *)this + 1528))(this, v8);
    uint64_t result = (XlDXfProtect *)XlDXf::setAlignChanges(a2, v8);
    unsigned __int8 var3 = a2->var3;
  }
  if ((var3 & 0x10) != 0)
  {
    uint64_t v9 = (OcContact *)operator new(0x18uLL);
    OcContact::OcContact(v9);
    (*(void (**)(XlParserVisitor *, OcContact *))(*(void *)this + 1536))(this, v9);
    uint64_t result = (XlDXfProtect *)XlDXf::setBordersChanges(a2, (XlDXfBorders *)v9);
    unsigned __int8 var3 = a2->var3;
  }
  if ((var3 & 0x20) != 0)
  {
    unint64_t v10 = (XlDXfPattern *)operator new(8uLL);
    XlDXfPattern::XlDXfPattern(v10);
    (*(void (**)(XlParserVisitor *, XlDXfPattern *))(*(void *)this + 1552))(this, v10);
    uint64_t result = (XlDXfProtect *)XlDXf::setPatternChanges(a2, v10);
    unsigned __int8 var3 = a2->var3;
  }
  if ((var3 & 0x40) != 0)
  {
    unint64_t v11 = (XlDXfProtect *)operator new(2uLL);
    XlDXfProtect::XlDXfProtect(v11);
    (*(void (**)(XlParserVisitor *, XlDXfProtect *))(*(void *)this + 1560))(this, v11);
    return XlDXf::setProtectChanges(a2, v11);
  }
  return result;
}

void sub_238BAFF0C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void OcContact::OcContact(OcContact *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
}

int8x8_t XlParserVisitor::visit(XlParserVisitor *this, XlDXfBorders *a2)
{
  unsigned __int16 v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *(_DWORD *)a2 = v4 & 0xF;
  *((_WORD *)a2 + 8) = v5 & 0x7F;
  *((_WORD *)a2 + 9) = (v5 >> 7) & 0x7F;
  int8x8_t result = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v4), (uint32x2_t)0xFFFFFFF8FFFFFFFCLL), (int8x8_t)0xF0000000FLL);
  *(int8x8_t *)((char *)a2 + 4) = result;
  *((_WORD *)a2 + 11) = v6 & 0x7F;
  *((_DWORD *)a2 + 3) = v4 >> 12;
  *((_WORD *)a2 + 10) = (v6 >> 7) & 0x7F;
  return result;
}

XlDXfBorders *XlDXf::setBordersChanges(XlDXf *this, XlDXfBorders *a2)
{
  int8x8_t result = this->var9;
  if (result) {
    int8x8_t result = (XlDXfBorders *)MEMORY[0x23EC997B0](result, 0x1000C40504FFAC1);
  }
  this->var3 |= 0x10u;
  this->unsigned int var9 = a2;
  return result;
}

XlDXf *XlCf::setDifferentialFormat(XlCf *this, XlDXf *a2)
{
  int8x8_t result = this->var6;
  if (result)
  {
    XlDXf::~XlDXf(result);
    int8x8_t result = (XlDXf *)MEMORY[0x23EC997B0]();
  }
  this->var6 = a2;
  return result;
}

char *XlCf::takeFirstFmla(XlCf *this, char *a2, signed __int16 a3)
{
  int8x8_t result = this->var7;
  if (result) {
    int8x8_t result = (char *)MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  this->var7 = a2;
  this->unsigned int var4 = a3;
  return result;
}

XlDXf **ChAutoPtr<XlDXf>::~ChAutoPtr(XlDXf **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    XlDXf::~XlDXf(v2);
    MEMORY[0x23EC997B0]();
  }
  *a1 = 0;
  return a1;
}

void XlDXfFont::XlDXfFont(XlDXfFont *this)
{
  this->unsigned int var0 = (void **)&unk_26EBDF428;
  this->int var1 = 0;
  *(void *)&this->int var2 = 0xFFFFFFFFLL;
  this->unsigned int var4 = 0;
  *(void *)&this->var5 = 0;
  *(_WORD *)&this->var7 = 0;
  *(_OWORD *)&this->unsigned int var9 = 0u;
  *(_OWORD *)&this->var13 = 0u;
  *(void *)((char *)&this->var16 + 2) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlDXfFont *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  if (v5 - 1 <= 0x3F && v6 <= 1)
  {
    char v8 = v6;
    uint64_t v9 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v9);
    *((void *)this + 4) = v9;
    unint64_t v10 = (SsrwOOStream *)*((void *)this + 2);
    int v11 = (*((uint64_t (**)(SsrwOOStream *))v10->var0 + 5))(v10);
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), v10, v5, v8, v11 + 64, *((XlString **)this + 4));
    XlDXfFont::setName(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  (*(void (**)(void, void, void))(**((void **)this + 2) + 16))(*((void *)this + 2), (v4 + 64), 0);
  a2->int var2 = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  char v12 = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  if ((v12 & 2) != 0)
  {
    a2->var3 |= 2u;
    if ((v12 & 0x80) == 0)
    {
LABEL_8:
      if ((v12 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v12 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  a2->var3 |= 0x80u;
  if ((v12 & 0x10) == 0)
  {
LABEL_9:
    if ((v12 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  a2->var3 |= 0x10u;
  if ((v12 & 0x20) == 0)
  {
LABEL_10:
    if ((v12 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  a2->var3 |= 0x20u;
  if ((v12 & 1) == 0)
  {
LABEL_11:
    if ((v12 & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_20:
  a2->var3 |= 1u;
  if ((v12 & 4) != 0) {
LABEL_12:
  }
    a2->var3 |= 4u;
LABEL_13:
  a2->unsigned int var4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  a2->var5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  a2->var6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  a2->var7 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  a2->var8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  a2->unsigned int var9 = (*(__int16 (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  a2->var10 = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  a2->var11 = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  a2->var12 = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  a2->var13 = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  a2->var14 = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  a2->var15 = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  a2->var16 = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  a2->var17 = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  a2->var18 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  unint64_t v13 = *(uint64_t (**)(void))(**((void **)this + 2) + 64);
  return v13();
}

void sub_238BB0788(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

XlDXfFont *XlDXf::setFontChanges(XlDXf *this, XlDXfFont *a2)
{
  int8x8_t result = this->var7;
  if (result) {
    int8x8_t result = (XlDXfFont *)(*((uint64_t (**)(XlDXfFont *))result->var0 + 1))(result);
  }
  this->var3 |= 4u;
  this->var7 = a2;
  return result;
}

void XlDXfPattern::XlDXfPattern(XlDXfPattern *this)
{
  *(void *)this = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlDXfPattern *a2)
{
  unsigned __int16 v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *(_DWORD *)a2 = v4 >> 10;
  *((_WORD *)a2 + 2) = result & 0x7F;
  *((_WORD *)a2 + 3) = (result >> 7) & 0x7F;
  return result;
}

XlDXfPattern *XlDXf::setPatternChanges(XlDXf *this, XlDXfPattern *a2)
{
  uint64_t result = this->var10;
  if (result) {
    uint64_t result = (XlDXfPattern *)MEMORY[0x23EC997B0](result, 0x1000C4000313F17);
  }
  this->var3 |= 0x20u;
  this->var10 = a2;
  return result;
}

void sub_238BB09DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB0CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t XlCondFmt::getCellRange(XlCondFmt *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (((unint64_t)(*((void *)this + 5) - v2) >> 3) <= a2
    || (uint64_t result = *(void *)(v2 + 8 * a2)) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  return result;
}

void sub_238BB0DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BB0E5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB0FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB10A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB11E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB12BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB137C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB1440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BB14E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB1688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB1904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB1974()
{
}

void sub_238BB1A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BB1A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BB1BDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB1D14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlConditionalFormat::~XlConditionalFormat(void **this)
{
  XlConditionalFormat::~XlConditionalFormat(this);
  JUMPOUT(0x23EC997B0);
}

{
  *this = &unk_26EBE2410;
  XlConditionalFormat::reset((XlConditionalFormat *)this);
  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
}

void XlCondFmt::~XlCondFmt(XlCondFmt *this)
{
  XlCondFmt::~XlCondFmt(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;
  void *v3;

  *(void *)this = &unk_26EBDEF68;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C400EA6A39BLL);
  }
  *((void *)this + 3) = 0;
  XlCondFmt::clearCellRanges((uint64_t)this);
  unint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
}

uint64_t XlCondFmt::clearCellRanges(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 32);
  uint64_t v3 = *(void *)(this + 40);
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void *)(v2 + 8 * v4);
      if (this)
      {
        this = MEMORY[0x23EC997B0](this, 0x1000C400EA6A39BLL);
        uint64_t v2 = *(void *)(v1 + 32);
        uint64_t v3 = *(void *)(v1 + 40);
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  *(void *)(v1 + 40) = v2;
  return this;
}

void XlCf::~XlCf(XlCf *this)
{
  XlCf::~XlCf(this);
  JUMPOUT(0x23EC997B0);
}

{
  char *var7;
  char *var8;

  this->unsigned int var0 = (void **)&unk_26EBDEE68;
  XlCf::setDifferentialFormat(this, 0);
  var7 = this->var7;
  if (var7) {
    MEMORY[0x23EC99790](var7, 0x1000C8077774924);
  }
  this->var7 = 0;
  this->unsigned int var4 = 0;
  var8 = this->var8;
  if (var8) {
    MEMORY[0x23EC99790](var8, 0x1000C8077774924);
  }
  this->var8 = 0;
  this->var5 = 0;
}

void XlDXf::~XlDXf(XlDXf *this)
{
  var6 = this->var6;
  if (var6)
  {
    (*((void (**)(XlDXfUserFmt *))var6->var0 + 1))(var6);
    this->var6 = 0;
  }
  var7 = this->var7;
  if (var7)
  {
    (*((void (**)(XlDXfFont *))var7->var0 + 1))(var7);
    this->var7 = 0;
  }
  var8 = this->var8;
  if (var8)
  {
    MEMORY[0x23EC997B0](var8, 0x1000C40C36A4E17);
    this->var8 = 0;
  }
  unsigned int var9 = this->var9;
  if (var9)
  {
    MEMORY[0x23EC997B0](var9, 0x1000C40504FFAC1);
    this->unsigned int var9 = 0;
  }
  var10 = this->var10;
  if (var10)
  {
    MEMORY[0x23EC997B0](var10, 0x1000C4000313F17);
    this->var10 = 0;
  }
  var11 = this->var11;
  if (var11)
  {
    MEMORY[0x23EC997B0](var11, 0x1000C40BDFB0063);
    this->var11 = 0;
  }
}

void XlDXfFont::~XlDXfFont(XlDXfFont *this)
{
  this->unsigned int var0 = (void **)&unk_26EBDF428;
  int var1 = this->var1;
  if (var1) {
    (*(void (**)(XlString *))(*(void *)var1 + 8))(var1);
  }
  this->int var1 = 0;
  JUMPOUT(0x23EC997B0);
}

{
  XlString *var1;

  this->unsigned int var0 = (void **)&unk_26EBDF428;
  int var1 = this->var1;
  if (var1) {
    (*(void (**)(XlString *))(*(void *)var1 + 8))(var1);
  }
  this->int var1 = 0;
}

void XlVerticalPageBreaks::XlVerticalPageBreaks(XlVerticalPageBreaks *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1FF8;
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 24) = 0;
}

uint64_t XlVerticalPageBreaks::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1360))(a2, a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlVerticalPageBreaks *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  if (v4)
  {
    unsigned int v5 = v4;
    for (unsigned int i = 0; i < v5; ++i)
    {
      signed int v7 = (XlBrk *)operator new(0x10uLL);
      XlBrk::XlBrk(v7);
      (*(void (**)(XlParserVisitor *, XlBrk *))(*(void *)this + 1576))(this, v7);
      XlCrn::appendOperand(a2, v7);
    }
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238BB22F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlVerticalPageBreaks::~XlVerticalPageBreaks(XlVerticalPageBreaks *this)
{
  XlVerticalPageBreaks::~XlVerticalPageBreaks(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBE1FF8;
  XlHorizPageBreaks::clearPageBreaks((uint64_t)this);
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

void XlEshClientTextBox::~XlEshClientTextBox(XlEshClientTextBox *this)
{
}

void sub_238BB2558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned __int16 *extractDataFromPtgArea3DBuffer(unsigned __int16 *result, unsigned int *a2, int *a3, BOOL *a4, int *a5, BOOL *a6, int *a7, BOOL *a8, int *a9, BOOL *a10)
{
  *a2 = -1;
  *a3 = -1;
  *a5 = -1;
  *a7 = -1;
  *a9 = -1;
  *a4 = 0;
  *a6 = 0;
  *a8 = 0;
  *a10 = 0;
  if (result)
  {
    *a2 = *result;
    *a3 = result[1];
    unsigned int v10 = result[3];
    *a4 = v10 >> 15;
    *a8 = (v10 & 0x4000) != 0;
    *a7 = v10;
    *a5 = result[2];
    unsigned int v11 = result[4];
    *a6 = v11 >> 15;
    *a10 = (v11 & 0x4000) != 0;
    *a9 = v11;
  }
  return result;
}

void sub_238BB27B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB2990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BB2AFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned __int16 *extractDataFromPtgRef3DBuffer(unsigned __int16 *result, unsigned int *a2, int *a3, BOOL *a4, int *a5, BOOL *a6)
{
  *a2 = -1;
  *a3 = -1;
  *a5 = -1;
  *a4 = 0;
  *a6 = 0;
  if (result)
  {
    *a2 = *result;
    *a3 = result[1];
    unsigned int v6 = result[2];
    *a4 = v6 >> 15;
    *a6 = (v6 & 0x4000) != 0;
    *a5 = v6;
  }
  return result;
}

void XlBoolErr::XlBoolErr(XlBoolErr *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *uint64_t v2 = &unk_26EBDECE8;
  v2[2] = 0;
}

uint64_t XlBoolErr::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 200))(a2, a1);
}

void XlLink::~XlLink(void **this)
{
  XlLink::~XlLink(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;
  void *v3;

  *this = &unk_26EBE2AC8;
  XlLink::clear((XlLink *)this);
  this[10] = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 11);
  uint64_t v2 = this[7];
  if (v2)
  {
    this[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = this[4];
  if (v3)
  {
    this[5] = v3;
    operator delete(v3);
  }
}

void XlName::~XlName(XlName *this)
{
  XlName::~XlName(this);
  JUMPOUT(0x23EC997B0);
}

{
  XlString *var2;
  char *var7;
  XlString *var3;
  XlString *var4;
  XlString *var5;
  XlString *var6;

  this->unsigned int var0 = (void **)&unk_26EBE02A8;
  int var2 = this->var2;
  if (var2) {
    (*(void (**)(XlString *))(*(void *)var2 + 8))(var2);
  }
  this->int var2 = 0;
  var7 = this->var7;
  if (var7) {
    MEMORY[0x23EC99790](var7, 0x1000C8077774924);
  }
  this->var7 = 0;
  this->var8 = 0;
  unsigned __int8 var3 = this->var3;
  if (var3) {
    (*(void (**)(XlString *))(*(void *)var3 + 8))(var3);
  }
  this->unsigned __int8 var3 = 0;
  unsigned int var4 = this->var4;
  if (var4) {
    (*(void (**)(XlString *))(*(void *)var4 + 8))(var4);
  }
  this->unsigned int var4 = 0;
  var5 = this->var5;
  if (var5) {
    (*(void (**)(XlString *))(*(void *)var5 + 8))(var5);
  }
  this->var5 = 0;
  var6 = this->var6;
  if (var6) {
    (*(void (**)(XlString *))(*(void *)var6 + 8))(var6);
  }
  this->var6 = 0;
}

void XlBaseFormulaTable::~XlBaseFormulaTable(XlBaseFormulaTable *this)
{
  XlBaseFormulaTable::~XlBaseFormulaTable(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;
  void *v3;

  *(void *)this = &unk_26EBE3AB0;
  XlBaseFormulaTable::clear(this);
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

void sub_238BB30C4(_Unwind_Exception *a1)
{
  unsigned int v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t XlReadStgStream::finish(uint64_t this)
{
  *(void *)(this + 16) = 0;
  *(unsigned char *)(this + 32) = 0;
  *(_WORD *)(this + 12) = 0;
  *(_DWORD *)(this + 8) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + 56) = *(void *)(this + 48);
  *(void *)(this + 80) = *(void *)(this + 72);
  return this;
}

void XlReadStgStream::~XlReadStgStream(XlReadStgStream *this)
{
  XlReadStgStream::~XlReadStgStream(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;
  void *v3;

  *(void *)this = &unk_26EBE46E8;
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 32) = 0;
  *((_WORD *)this + 6) = 0;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 7) = *((void *)this + 6);
  uint64_t v2 = (void *)*((void *)this + 9);
  *((void *)this + 10) = v2;
  if (*((void *)this + 3))
  {
    MEMORY[0x23EC99790](*((void *)this + 3), 0x1000C8077774924);
    uint64_t v2 = (void *)*((void *)this + 9);
  }
  *((void *)this + 3) = 0;
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
}

uint64_t OcBinaryData::setMinimumCapacity(OcBinaryData *this, unsigned int a2)
{
  uint64_t result = this->var4;
  if (result < a2)
  {
    OcBinaryData::allocBuffer(this, a2);
    return this->var4;
  }
  return result;
}

void OcBinaryData::allocBuffer(OcBinaryData *this, unsigned int a2)
{
  if (this->var5)
  {
    if (this->var6) {
      MEMORY[0x23EC99790]();
    }
    *(void *)&this->unsigned __int8 var3 = 0;
    this->var5 = 0;
  }
  this->var6 = 1;
  unsigned int v4 = (char *)operator new[](a2);
  this->var5 = v4;
  this->unsigned int var4 = a2;
  if (v4)
  {
    bzero(v4, a2);
  }
}

uint64_t headerGetXFatStartSector(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 68);
  }
  return result;
}

void EshDibBlip::EshDibBlip(EshDibBlip *this, unsigned __int16 a2)
{
  *(void *)EshBlipT<EshDibBlipInfo>::EshBlipT((uint64_t)this, a2) = &unk_26EBD73C8;
}

uint64_t EshBlipT<EshDibBlipInfo>::EshBlipT(uint64_t a1, unsigned __int16 a2)
{
  EshBlip::EshBlip((EshBlip *)a1, a2);
  *(void *)uint64_t v3 = &unk_26EBD7488;
  *(void *)(v3 + 48) = v3 + 20;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 64) = 0;
  OcBinaryData::OcBinaryData((OcBinaryData *)(v3 + 72));
  *(_OWORD *)(a1 + 250) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 220) = 0u;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 272) = a1 + 264;
  OcBinaryData::OcBinaryData((OcBinaryData *)(a1 + 296));
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 460) = 0u;
  *(_OWORD *)(a1 + 444) = 0u;
  *(_OWORD *)(a1 + 428) = 0u;
  *(_OWORD *)(a1 + 412) = 0u;
  *(_OWORD *)(a1 + 396) = 0u;
  *(_OWORD *)(a1 + 380) = 0u;
  *(_OWORD *)(a1 + 364) = 0u;
  *(_OWORD *)(a1 + 348) = 0u;
  return a1;
}

void sub_238BB34E8(_Unwind_Exception *a1)
{
  EshDibBlipInfo::~EshDibBlipInfo(v2);
  EshBlip::~EshBlip(v1);
  _Unwind_Resume(a1);
}

uint64_t EshDibBlip::accept(int a1, void *lpsrc)
{
  return v2();
}

void *EshContainer::removeChild(EshContainer *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 4);
  unint64_t v3 = (unint64_t)(*((void *)this + 5) - v2) >> 3;
  if (v3 <= a2) {
    goto LABEL_8;
  }
  uint64_t result = *(void **)(v2 + 8 * a2);
  if (result)
  {
    uint64_t result = (void *)MEMORY[0x23EC997B0](result, 0x1000C408B6DE1C6);
    uint64_t v2 = *((void *)this + 4);
    unint64_t v3 = (unint64_t)(*((void *)this + 5) - v2) >> 3;
  }
  if (v3 <= a2) {
LABEL_8:
  }
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  *(void *)(v2 + 8 * a2) = 0;
  uint64_t v7 = *((void *)this + 5);
  uint64_t v8 = *((void *)this + 4) + 8 * a2;
  uint64_t v9 = v7 - (v8 + 8);
  if (v7 != v8 + 8) {
    uint64_t result = memmove((void *)v8, (const void *)(v8 + 8), v7 - (v8 + 8));
  }
  *((void *)this + 5) = v8 + v9;
  return result;
}

void PptTextOutlineBlockKeyAtom::PptTextOutlineBlockKeyAtom(PptTextOutlineBlockKeyAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEC950;
  *(void *)(v2 + 32) = &unk_26EBEC9F8;
  *(void *)(v2 + 48) = 0;
}

uint64_t PptTextOutlineBlockKeyAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextOutlineBlockKeyAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptTextBlockStyling9Atom::PptTextBlockStyling9Atom(PptTextBlockStyling9Atom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEE5D0;
  *(void *)(v2 + 32) = &unk_26EBEE678;
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 48) = 0;
}

uint64_t PptTextBlockStyling9Atom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextBlockStyling9Atom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  if (v4 < EshRecord::getDataLength(a2) + v4) {
    PptTextBlockStyling9Atom::addStyle(a2);
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptTextBlockStyling9Atom::addStyle(PptTextBlockStyling9Atom *this)
{
}

void sub_238BB3DA8(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C4064F814F1);
  _Unwind_Resume(a1);
}

void PptParaProperty9::PptParaProperty9(PptParaProperty9 *this)
{
  char v1 = *(unsigned char *)&this->var3 & 0xC0;
  *(unsigned char *)&this->var0 &= 0xF8u;
  *((_WORD *)&this->var0 + 1) = -1;
  LOBYTE(this->var1) = 0;
  *(unsigned char *)&this->unsigned __int8 var3 = v1;
  this->var3.int var1 = 0;
}

void PptCharProperty9::PptCharProperty9(PptCharProperty9 *this)
{
  *(unsigned char *)this &= 0xE0u;
}

void PptSpecialInfo9::PptSpecialInfo9(PptSpecialInfo9 *this)
{
  char v1 = *((unsigned char *)this + 2) & 0xE0;
  *(unsigned char *)this &= 0xFCu;
  *((unsigned char *)this + 1) &= ~1u;
  *((unsigned char *)this + 2) = v1;
}

void PptSSSlideInfoAtom::PptSSSlideInfoAtom(PptSSSlideInfoAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom((EshAtom *)this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEDC18;
  *(void *)(v2 + 32) = &unk_26EBEDCC0;
  *(void *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 60) = 0;
  *(unsigned char *)(v2 + 56) = 2;
  *(_WORD *)(v2 + 64) = 0;
  *(_DWORD *)(v2 + 68) = 1;
}

uint64_t PptSSSlideInfoAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptSSSlideInfoAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), a2->var2.var1 + 8, 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  a2->var6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4
    || (a2->var7 = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 8)
    || (a2->var8 = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 9)
    || (a2->unsigned int var9 = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 10)
    || (a2->var10 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 12)
    || (unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        PptSSSlideInfoAtom::setSpeed((uint64_t)a2, v5),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 13))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  PptSkipVisitor::skipUnknownBytes(*((PptSkipVisitor **)this + 3), (const EshRecord *)a2, 3u);
  PptParserVisitor::endRead(this, (EshRecord *)a2);
  return 1;
}

uint64_t PptSSSlideInfoAtom::setSpeed(uint64_t result, unsigned int a2)
{
  int v2 = 2;
  if (a2 < 3) {
    int v2 = a2;
  }
  *(_DWORD *)(result + 68) = v2;
  return result;
}

EshColor *EshColor::paletteIndex(EshColor *this, uint64_t a2, EshColor *a3)
{
  *(_DWORD *)a2 = 1;
  *(_WORD *)(a2 + 4) = (_WORD)this;
  return this;
}

void PptRecolorInfoAtom::PptRecolorInfoAtom(PptRecolorInfoAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBECE30;
  *(void *)(v2 + 32) = &unk_26EBECEE0;
  *(_WORD *)(v2 + 46) = -1;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
}

uint64_t PptRecolorInfoAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptRecolorInfoAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  *((_WORD *)a2 + 23) = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  PptSkipVisitor::skipKnownBytes(*((unsigned char **)this + 3), a2, 6u);
  int DataLength = EshRecord::getDataLength(a2);
  unsigned int v5 = DataLength - 12;
  if ((((DataLength - 12) % 44) & 0xFFFFFFFB) != 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4008;
  }
  int v6 = DataLength;
  PptRecolorInfoAtom::clearColors(a2);
  PptRecolorInfoAtom::clearFills(a2);
  if (v6 >= 56)
  {
    unsigned int v7 = v5 / 0x2C;
    do
    {
      uint64_t v8 = (PptRecolorSpec *)operator new(0x20uLL);
      PptRecolorSpec::PptRecolorSpec(v8, 0);
      uint64_t v9 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
      PptParserVisitor::visit(this, v8, v9);
      if (v8->var4) {
        PptTextBlockStylingAtom::addCharRun(a2, (PptCharRun *)v8);
      }
      else {
        EshDgg::addIdCluster(a2, (uint64_t)v8);
      }
      --v7;
    }
    while (v7);
  }
  PptSkipVisitor::skipKnownToEnd(*((PptSkipVisitor **)this + 3), a2);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void sub_238BB45CC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *PptRecolorInfoAtom::clearColors(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[6];
  if (((this[7] - v2) & 0x7FFFFFFF8) != 0)
  {
    unsigned __int16 v3 = 0;
    do
    {
      uint64_t v4 = v3;
      this = *(void **)(v2 + 8 * v3);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[6];
      }
      *(void *)(v2 + 8 * v4) = 0;
      unsigned __int16 v3 = v4 + 1;
      uint64_t v2 = v1[6];
    }
    while (((unint64_t)(v1[7] - v2) >> 3) > (unsigned __int16)(v4 + 1));
  }
  v1[7] = v2;
  return this;
}

void *PptRecolorInfoAtom::clearFills(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[9];
  if (((this[10] - v2) & 0x7FFFFFFF8) != 0)
  {
    unsigned __int16 v3 = 0;
    do
    {
      uint64_t v4 = v3;
      this = *(void **)(v2 + 8 * v3);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[9];
      }
      *(void *)(v2 + 8 * v4) = 0;
      unsigned __int16 v3 = v4 + 1;
      uint64_t v2 = v1[9];
    }
    while (((unint64_t)(v1[10] - v2) >> 3) > (unsigned __int16)(v4 + 1));
  }
  v1[10] = v2;
  return this;
}

void PptRecolorSpec::PptRecolorSpec(PptRecolorSpec *this, BOOL a2)
{
  this->unsigned int var0 = (void **)&unk_26EBECF30;
  this->var1.var0.unsigned int var0 = 255;
  this->var2.var0.unsigned int var0 = 255;
  this->unsigned __int8 var3 = 0;
  this->unsigned int var4 = a2;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptRecolorSpec *a2, uint64_t a3)
{
  (*(void (**)(void, uint64_t, void))(**((void **)this + 1) + 16))(*((void *)this + 1), a3, 0);
  a2->unsigned __int8 var3 = (*(unsigned int (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1)) != 0;
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  char v6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  char v7 = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  uint64_t v8 = (EshColor *)(*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  unsigned int v10 = operator new(8uLL);
  _DWORD *v10 = 255;
  if (v8 > 7) {
    EshColor::rgb(v5, v6, v7, (uint64_t)v10);
  }
  else {
    EshColor::schemeIndex(v8, (uint64_t)v10, v9);
  }
  EshColor::operator=((uint64_t)&a2->var1, (uint64_t)v10);
  unsigned int v11 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  if (v11 >= 2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4008;
  }
  a2->unsigned int var4 = v11 == 1;
  if (v11 == 1) {
    (*(void (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  }
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  uint64_t v12 = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  char v13 = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  char v14 = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  EshColor::rgb(v12, v13, v14, (uint64_t)v10);
  EshColor::operator=((uint64_t)&a2->var2, (uint64_t)v10);
  if (!a2->var4) {
    (*(void (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  }
  (*(void (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  MEMORY[0x23EC997B0](v10, 0x1000C4087442A64);
  return 1;
}

void sub_238BB4D7C(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

void PptSlideFlags10Atom::PptSlideFlags10Atom(PptSlideFlags10Atom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBF1CF8;
  *(void *)(v2 + 32) = &unk_26EBF1DA0;
}

uint64_t PptSlideFlags10Atom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptSlideFlags10Atom *a2)
{
  return 1;
}

void *EshPropValFactory::createPropVal(EshPropValFactory *this)
{
  if ((int)this > 406)
  {
    if ((int)this > 898)
    {
      if (this == 899)
      {
LABEL_16:
        uint64_t result = operator new(0x20uLL);
        result[2] = 0;
        result[3] = 0;
        result[1] = 0;
        uint64_t v2 = &unk_26EBD61E8;
        goto LABEL_25;
      }
      if (this != 928) {
        goto LABEL_23;
      }
    }
    else
    {
      if (this == 407)
      {
        uint64_t result = operator new(0x20uLL);
        result[2] = 0;
        result[3] = 0;
        result[1] = 0;
        uint64_t v2 = &unk_26EBD7A00;
        goto LABEL_25;
      }
      if (this != 463)
      {
LABEL_23:
        uint64_t result = operator new(0x18uLL);
        uint64_t v2 = &unk_26EBD7870;
        goto LABEL_24;
      }
    }
    uint64_t result = operator new(0x20uLL);
    result[2] = 0;
    result[3] = 0;
    result[1] = 0;
    uint64_t v2 = &unk_26EBD7AA0;
    goto LABEL_25;
  }
  if ((int)this <= 336)
  {
    switch(this)
    {
      case 0xC1:
        uint64_t result = operator new(0x18uLL);
        uint64_t v2 = &unk_26EBD77D0;
        break;
      case 0x145:
        uint64_t result = operator new(0x20uLL);
        uint64_t v2 = &unk_26EBD6120;
        result[3] = 0;
        break;
      case 0x146:
        uint64_t result = operator new(0x20uLL);
        result[2] = 0;
        result[3] = 0;
        result[1] = 0;
        uint64_t v2 = &unk_26EBD6288;
        goto LABEL_25;
      default:
        goto LABEL_23;
    }
LABEL_24:
    result[1] = 0;
    result[2] = 0;
    goto LABEL_25;
  }
  switch((int)this)
  {
    case 337:
      goto LABEL_16;
    case 338:
      uint64_t result = operator new(0x20uLL);
      result[2] = 0;
      result[3] = 0;
      result[1] = 0;
      uint64_t v2 = &unk_26EBD78C0;
      break;
    case 341:
      uint64_t result = operator new(0x20uLL);
      result[2] = 0;
      result[3] = 0;
      result[1] = 0;
      uint64_t v2 = &unk_26EBD7960;
      break;
    case 342:
      uint64_t result = operator new(0x20uLL);
      result[2] = 0;
      result[3] = 0;
      result[1] = 0;
      uint64_t v2 = &unk_26EBD6328;
      break;
    case 343:
      uint64_t result = operator new(0x20uLL);
      result[2] = 0;
      result[3] = 0;
      result[1] = 0;
      uint64_t v2 = &unk_26EBD63C8;
      break;
    default:
      goto LABEL_23;
  }
LABEL_25:
  *uint64_t result = v2;
  return result;
}

uint64_t EshPathParamTable::accept(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 56))(a2, a1);
  }
  else {
    return 1;
  }
}

uint64_t EshPropValParserVisitor::visit(EshPropValParserVisitor *this, EshPathParamTable *a2)
{
  return 1;
}

void EshPropValParserVisitor::parseTable<EshPathParamTable>(EshPropValParserVisitor *a1, uint64_t a2)
{
  uint64_t v4 = (EshTablePropValHeader *)operator new(6uLL);
  *(_DWORD *)uint64_t v4 = 0;
  *((_WORD *)v4 + 2) = 0;
  uint64_t v5 = (EshPropValParserVisitor *)EshPropValParserVisitor::parseTableHeader(a1, v4);
  EshPropValParserVisitor::decodeHeader(v5, v6, v4);
  *((_WORD *)a1 + 10) = *((_WORD *)v4 + 2);
  std::vector<EshComputedValue,ChAllocator<EshComputedValue>>::resize(a2 + 8, *(unsigned __int16 *)v4);
  if (*(_WORD *)v4)
  {
    unsigned int v7 = 0;
    do
    {
      uint64_t v8 = (EshComputedValue *)EshBasicTablePropVal<EshComputedValue>::operator[](a2, v7);
      EshPropValParserVisitor::parseValue((uint64_t)a1, v8, *((unsigned __int16 *)a1 + 10));
      ++v7;
    }
    while (v7 < *(unsigned __int16 *)v4);
  }
  JUMPOUT(0x23EC997B0);
}

void sub_238BB52DC(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C40274DC3F3);
  _Unwind_Resume(a1);
}

_WORD *EshPropValParserVisitor::decodeHeader(EshPropValParserVisitor *this, EshPathParamTable *a2, EshTablePropValHeader *a3)
{
  int v3 = *((unsigned __int16 *)a3 + 2);
  if (v3 != 4 && v3 != 8)
  {
    if (v3 != 65520)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 7005;
    }
    *((_WORD *)a3 + 2) = 4;
  }
  return EshTablePropValHeader::mulDivElementSizeInStream(a3, 1u, 2u);
}

_WORD *EshTablePropValHeader::mulDivElementSizeInStream(_WORD *this, unsigned int a2, unsigned int a3)
{
  *this = (unsigned __int16)(*this * a3) / a2;
  this[1] = (unsigned __int16)(this[1] * a3) / a2;
  this[2] = (unsigned __int16)(this[2] * a2) / a3;
  return this;
}

uint64_t EshPropValParserVisitor::parseValue(uint64_t this, EshComputedValue *a2, int a3)
{
  if (a3 == 4)
  {
    this = (*(uint64_t (**)(void))(**(void **)(this + 8) + 104))(*(void *)(this + 8));
    if ((int)this > -2147483521)
    {
      a2->unsigned int var0 = 0;
    }
    else
    {
      a2->unsigned int var0 = 1;
      this = this ^ 0x80000000;
    }
  }
  else
  {
    if (a3 != 2) {
      return this;
    }
    a2->unsigned int var0 = 0;
    this = (*(uint64_t (**)(void))(**(void **)(this + 8) + 80))(*(void *)(this + 8));
  }
  a2->int var1 = this;
  return this;
}

uint64_t EshTablePropVal<EshPathCommand>::accept(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, a1);
  }
  else {
    return 1;
  }
}

uint64_t EshPropValParserVisitor::visit(EshPropValParserVisitor *a1, uint64_t a2)
{
  *((_WORD *)a1 + 11) = 0;
  EshPropValParserVisitor::parseTable<EshTablePropVal<EshPathCommand>>(a1, a2);
  if (*((_WORD *)a1 + 11))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 7005;
  }
  return 1;
}

{
  EshPropValParserVisitor::parseTable<EshTablePropVal<int>>(a1, a2);
  return 1;
}

{
  EshPropValParserVisitor::parseTable<EshTablePropVal<EshComputedPoint>>(a1, a2);
  return 1;
}

{
  EshPropValParserVisitor::parseTable<EshTablePropVal<EshGradientStop>>(a1, a2);
  return 1;
}

{
  EshPropValParserVisitor::parseTable<EshTablePropVal<EshComputedRect>>(a1, a2);
  return 1;
}

{
  EshPropValParserVisitor::parseTable<EshTablePropVal<float>>(a1, a2);
  return 1;
}

{
  EshPropValParserVisitor::parseTable<EshTablePropVal<EshHandle>>(a1, a2);
  return 1;
}

{
  EshPropValParserVisitor::parseTable<EshTablePropVal<EshFormula>>(a1, a2);
  return 1;
}

{
  uint64_t (*v4)(EshPropValParserVisitor *, uint64_t);
  uint64_t vars8;

  EshPropValParserVisitor::parseTableHeader(a1, (EshTablePropValHeader *)(a2 + 20));
  *((_DWORD *)a1 + 4) = *(unsigned __int16 *)(a2 + 24) * *(unsigned __int16 *)(a2 + 20);
  uint64_t v4 = *(uint64_t (**)(EshPropValParserVisitor *, uint64_t))(*(void *)a1 + 16);
  return v4(a1, a2);
}

void EshPropValParserVisitor::parseTable<EshTablePropVal<EshPathCommand>>(EshPropValParserVisitor *a1, uint64_t a2)
{
  uint64_t v4 = (EshTablePropValHeader *)operator new(6uLL);
  *(_DWORD *)uint64_t v4 = 0;
  *((_WORD *)v4 + 2) = 0;
  EshPropValParserVisitor::parseTableHeader(a1, v4);
  *((_WORD *)a1 + 10) = *((_WORD *)v4 + 2);
  std::vector<EshPathCommand,ChAllocator<EshPathCommand>>::resize(a2 + 8, *(unsigned __int16 *)v4);
  if (*(_WORD *)v4)
  {
    unsigned int v5 = 0;
    do
    {
      uint64_t v6 = EshBasicTablePropVal<EshComputedValue>::operator[](a2, v5);
      EshPropValParserVisitor::parseElement((uint64_t)a1, v6);
      ++v5;
    }
    while (v5 < *(unsigned __int16 *)v4);
  }
  JUMPOUT(0x23EC997B0);
}

void sub_238BB55B0(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C40274DC3F3);
  _Unwind_Resume(a1);
}

uint64_t EshPropValParserVisitor::parseElement(uint64_t a1, uint64_t a2)
{
  if (*(_WORD *)(a1 + 20) != 2) {
    goto LABEL_13;
  }
  unsigned int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8));
  int v5 = v4 >> 13;
  if (v4 >> 13 <= 4)
  {
    *(_DWORD *)(a2 + 4) = v5;
    if (!*(_WORD *)(a1 + 22))
    {
      unsigned __int16 v6 = v4 & 0x1FFF;
      goto LABEL_8;
    }
LABEL_13:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 7005;
  }
  if (v5 != 5) {
    goto LABEL_13;
  }
  int v7 = (v4 >> 8) & 0x1F;
  int v5 = v7 + 5;
  *(_DWORD *)(a2 + 4) = v7 + 5;
  unsigned __int16 v6 = *(_WORD *)(a1 + 22) + v4;
  if (!v7)
  {
    uint64_t result = 0;
    *(_WORD *)(a1 + 22) = v6;
    goto LABEL_12;
  }
  *(_WORD *)(a1 + 22) = 0;
LABEL_8:
  if (v5 == 5) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = EshPathCommand::decodeCount(v5, v6);
  }
LABEL_12:
  *(_WORD *)a2 = result;
  return result;
}

{
  unsigned int v4;
  unint64_t v5;
  uint64_t (*v6)(void);
  uint64_t result;
  void *v8;
  int32x4_t v9;
  uint64_t vars8;

  unsigned int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8));
  int v5 = v4;
  *(unsigned char *)a2 = v4 & 1;
  *(unsigned char *)(a2 + 1) = (v4 & 2) != 0;
  *(unsigned char *)(a2 + 2) = (v4 & 4) != 0;
  *(unsigned char *)(a2 + 3) = (v4 & 8) != 0;
  EshPropValParserVisitor::parseValuePair(a1, a2, 0, 1, 1, 1);
  if (*(unsigned char *)(a2 + 3))
  {
    EshPropValParserVisitor::parseValuePair(a1, a2, 1u, 1, (v5 >> 11) & 1, (v5 >> 12) & 1);
    EshPropValParserVisitor::parseValuePair(a1, a2, 2u, (v5 >> 13) & 1, (v5 >> 7) & 1, (v5 >> 8) & 1);
    (*(void (**)(void))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8));
    unsigned __int16 v6 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 104);
    return v6();
  }
  else
  {
    EshPropValParserVisitor::parseValuePair(a1, a2, 1u, (v5 >> 4) & 1, (v5 >> 11) & 1, (v5 >> 12) & 1);
    EshPropValParserVisitor::parseValuePair(a1, a2, 2u, (v5 >> 5) & 1, (v5 >> 7) & 1, (v5 >> 8) & 1);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(a2 + 36), (int32x4_t)xmmword_238EDE0E0)))) & 1) == 0)
    {
      *(void *)(a2 + 36) = 0;
      *(void *)(a2 + 44) = 0;
    }
    uint64_t result = EshPropValParserVisitor::parseValuePair(a1, a2, 3u, (v5 >> 5) & 1, (v5 >> 9) & 1, (v5 >> 10) & 1);
    uint64_t v9 = *(int32x4_t *)(a2 + 52);
    uint64_t v8 = (void *)(a2 + 52);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v9, (int32x4_t)xmmword_238EDE0E0)))) & 1) == 0)
    {
      EshComputedValue *v8 = 0;
      v8[1] = 0;
    }
  }
  return result;
}

uint64_t EshPathCommand::decodeCount(int a1, unsigned int a2)
{
  if (a1 >= 28) {
    goto LABEL_15;
  }
  int v2 = EshPathCommand::m_commandPropsArray[6 * a1 + 2];
  if (v2 <= 0) {
    goto LABEL_15;
  }
  int v4 = EshPathCommand::m_commandPropsArray[6 * a1 + 3];
  unsigned int v5 = a2 / (unsigned __int16)EshPathCommand::m_commandPropsArray[6 * a1 + 2];
  if ((v4 & 0x80000000) == 0)
  {
    if (0xFFFF - v4 >= v5) {
      goto LABEL_5;
    }
LABEL_15:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 7007;
  }
  if ((int)v5 < -v4) {
    goto LABEL_15;
  }
LABEL_5:
  unsigned __int16 v6 = v4 + v5;
  if ((_WORD)a2 != (_WORD)v5 * (_WORD)v2) {
    ChLogFunction("A path command with a fractional count.", 8, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Binary/DataModel/EshPathCommand.cpp", 251);
  }
  if (!v6)
  {
    uint64_t v8 = "A path command with a count of 0.";
    int v9 = 255;
    goto LABEL_17;
  }
  if (v6 != 1 && LOBYTE(EshPathCommand::m_commandPropsArray[6 * a1 + 5]) == 0)
  {
    uint64_t v8 = "An unrepeatable path command with a count > 1.";
    int v9 = 259;
LABEL_17:
    ChLogFunction(v8, 8, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Binary/DataModel/EshPathCommand.cpp", v9);
  }
  return v6;
}

void PptTxInteracInfoAtom::PptTxInteracInfoAtom(PptTxInteracInfoAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom((EshAtom *)this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEE7C8;
  *(void *)(v2 + 32) = &unk_26EBEE870;
  *(void *)(v2 + 48) = 0;
}

uint64_t PptTxInteracInfoAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTxInteracInfoAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), a2->var2.var1 + 8, 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  a2->var6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  a2->var7 = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  PptParserVisitor::endRead(this, (EshRecord *)a2);
  return 1;
}

void sub_238BB5BF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB5CFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB5E24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB5FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BB6084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshPath::isShadowOKSet(EshPath *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x17Au);
}

uint64_t EshShapeLib::isShadowOK(EshShapeLib *this, uint64_t a2)
{
  Shapeint Type = (unsigned __int16 *)getShapeType((int)this);
  if (ShapeType) {
    return (*ShapeType >> 6) & 1;
  }
  return a2;
}

uint64_t EshShadow::isColorSet(EshShadow *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x201u);
}

uint64_t EshShadow::getColor(EshShadow *this)
{
  return EshOpt::getColorProperty(*((void *)this + 2), 0x201u);
}

uint64_t EshShadow::isOpacitySet(EshShadow *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x204u);
}

uint64_t EshShadow::isSoftnessSet(EshShadow *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2) + 128, 0x21Cu);
}

uint64_t EshShadow::getDefaultSoftness(EshShadow *this)
{
  return 63500;
}

uint64_t EshShadow::isOffsetXSet(EshShadow *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x205u);
}

uint64_t EshShadow::getDefaultOffsetX(EshShadow *this)
{
  return 25400;
}

uint64_t EshShadow::isOffsetYSet(EshShadow *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x206u);
}

uint64_t EshShadow::isShadowTypeSet(EshShadow *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x200u);
}

void sub_238BB6600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB6708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB681C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB690C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB6994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB6AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BB6E84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB6F6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshFill::getOpacity2(EshFill *this)
{
  int v1 = *(_DWORD *)EshOpt::getProperty((uint64_t)this->var2, 0x184u);
  if (v1 >= 0x10000) {
    return 0x10000;
  }
  else {
    return v1;
  }
}

void sub_238BB7114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB7200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB7290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB739C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB7470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB75C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB77E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  char v13 = v12;

  _Unwind_Resume(a1);
}

void sub_238BB793C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshTextPath::getOn(EshTextPath *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty(*((void *)this + 2), 0xF1u);
}

void sub_238BB7C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, id a16)
{
  _Unwind_Resume(a1);
}

uint64_t EshTextPath::isAlignSet(EshTextPath *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0xC2u);
}

uint64_t EshTextPath::isStringSet(EshTextPath *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0xC0u);
}

uint64_t *EshTextPath::getString(EshTextPath *this)
{
  return *EshOpt::getProperty(*((void *)this + 2), 0xC0u);
}

void sub_238BB8100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t EshTextPath::isFontSet(EshTextPath *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0xC5u);
}

uint64_t *EshTextPath::getFont(EshTextPath *this)
{
  return *EshOpt::getProperty(*((void *)this + 2), 0xC5u);
}

uint64_t EshTextPath::isSizeSet(EshTextPath *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0xC3u);
}

uint64_t EshTextPath::getSize(EshTextPath *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this + 2), 0xC3u);
}

uint64_t EshTextPath::isBoldSet(EshTextPath *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0xFAu);
}

uint64_t EshTextPath::getBold(EshTextPath *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty(*((void *)this + 2), 0xFAu);
}

uint64_t EshTextPath::isItalicSet(EshTextPath *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0xFBu);
}

uint64_t EshTextPath::getItalic(EshTextPath *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty(*((void *)this + 2), 0xFBu);
}

uint64_t EshTextPath::isSmallcapsSet(EshTextPath *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0xFEu);
}

uint64_t EshTextPath::getSmallcaps(EshTextPath *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty(*((void *)this + 2), 0xFEu);
}

void sub_238BB85E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB864C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB885C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB8A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BB8B04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB8C04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB8C60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB8CD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB8DA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB8E0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB8F24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB9018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB9140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB9258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB93D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB94F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB9624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BB9DC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t parsePoint32(uint64_t result, int a2, int *a3, int *a4)
{
  uint64_t v4 = 8 * a2;
  uint64_t v5 = result + (int)v4;
  *a3 = *(unsigned __int8 *)(result + v4) | (*(unsigned __int8 *)(v5 + 1) << 8) | (*(unsigned __int8 *)(v5 + 2) << 16) | (*(unsigned __int8 *)(v5 + 3) << 24);
  *a4 = *(_DWORD *)(v5 + 4);
  return result;
}

void sub_238BBA070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MFWriteUInt32ToByteArray(uint64_t result, int a2, unsigned int a3)
{
  *(_DWORD *)(result + a3) = a2;
  return result;
}

void sub_238BBA294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t EshTextBox::getDirection(EshTextBox *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x8Bu);
}

uint64_t EshBasicTablePropVal<EshComputedRect>::operator[](uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (((unint64_t)(*(void *)(a1 + 16) - v2) >> 5) < a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  return v2 + 32 * a2;
}

void sub_238BBA498(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CGFloat calculatePreviousPointOnLine(CGPoint a1, CGPoint a2, CGPoint *a3)
{
  int v3 = (int)vabdd_f64(a2.x, a1.x);
  int v4 = (int)vabdd_f64(a2.y, a1.y);
  BOOL v5 = a1.x <= a2.x;
  double v6 = 1.0;
  if (v5) {
    double v7 = 1.0;
  }
  else {
    double v7 = -1.0;
  }
  if (a1.y > a2.y) {
    double v6 = -1.0;
  }
  *a3 = a1;
  if (v3 >= v4)
  {
    if ((v3 & 0x80000000) == 0)
    {
      a1.x = a1.x + v7;
      a3->x = a1.x;
      if (v3 < 2 * v4)
      {
LABEL_12:
        a1.x = a1.y + v6;
        a3->y = a1.y + v6;
      }
    }
  }
  else if ((v4 & 0x80000000) == 0)
  {
    if (v4 < 2 * v3) {
      a3->x = a1.x + v7;
    }
    goto LABEL_12;
  }
  return a1.x;
}

uint64_t XlChartDataSeries::getCachedCustomFormat(XlChartDataSeries *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 6) + 8 * a2);
}

uint64_t XlChartDataSeries::getCachedCustomLabel(XlChartDataSeries *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 9) + 8 * a2);
}

void sub_238BBA680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshPath::getFillOK(EshPath *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty((uint64_t)this->var2, 0x17Fu);
}

void sub_238BBA854(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshShapeProperties::getCoordRight(EshShapeProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x142u);
}

uint64_t EshShapeProperties::getCoordBottom(EshShapeProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x143u);
}

void sub_238BBA948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshPath::getDefaultLimoX(EshPath *this)
{
  return 0x7FFFFFFFLL;
}

void sub_238BBAAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t *EshPath::getParams(EshPath *this)
{
  return *EshOpt::getProperty((uint64_t)this->var2, 0x145u);
}

uint64_t *EshPath::getCommands(EshPath *this)
{
  return *EshOpt::getProperty((uint64_t)this->var2, 0x146u);
}

uint64_t EshStroke::getStartArrow(EshStroke *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x1D0u);
}

void sub_238BBAC94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BBAE14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BBB098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238BBB43C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BBB548(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BBB8F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BBBA2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id parseRegion(unsigned int a1, const unsigned __int8 *a2)
{
  if (a1 < 0x10)
  {
    if (!a1)
    {
      double v7 = [MEMORY[0x263EFF980] array];
      goto LABEL_14;
    }
LABEL_12:
    double v7 = 0;
    goto LABEL_14;
  }
  uint64_t v3 = *(unsigned int *)a2;
  unsigned int v4 = *((_DWORD *)a2 + 2);
  unint64_t v5 = v3 + 16 * v4;
  if (HIDWORD(v5)) {
    goto LABEL_12;
  }
  if (v4 >> 28 || v5 > a1) {
    goto LABEL_12;
  }
  double v7 = [MEMORY[0x263EFF980] arrayWithCapacity:*((unsigned int *)a2 + 2)];
  if (v4)
  {
    uint64_t v8 = (int *)&a2[v3];
    do
    {
      int v9 = objc_msgSend(MEMORY[0x263F08D40], "valueWithCGRect:", (double)*v8, (double)v8[1], (double)(v8[2] - *v8), (double)(v8[3] - v8[1]));
      [v7 addObject:v9];

      v8 += 4;
      --v4;
    }
    while (v4);
  }
LABEL_14:
  return v7;
}

void sub_238BBBB54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PptSSSlideInfoAtom::~PptSSSlideInfoAtom(PptSSSlideInfoAtom *this)
{
}

void PptTxInteracInfoAtom::~PptTxInteracInfoAtom(PptTxInteracInfoAtom *this)
{
}

void PptRecolorInfoAtom::~PptRecolorInfoAtom(PptRecolorInfoAtom *this)
{
  PptRecolorInfoAtom::~PptRecolorInfoAtom(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;
  void *v3;

  *(void *)this = &unk_26EBECE30;
  *((void *)this + 4) = &unk_26EBECEE0;
  PptRecolorInfoAtom::clearColors(this);
  PptRecolorInfoAtom::clearFills(this);
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
}

void PptRecolorSpec::~PptRecolorSpec(PptRecolorSpec *this)
{
}

void PptSlideFlags10Atom::~PptSlideFlags10Atom(PptSlideFlags10Atom *this)
{
  *(void *)this = &unk_26EBF1CF8;
  *((void *)this + 4) = &unk_26EBF1DA0;
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBF1CF8;
  *((void *)this + 4) = &unk_26EBF1DA0;
}

void PptTextBlockStyling9Atom::~PptTextBlockStyling9Atom(PptTextBlockStyling9Atom *this)
{
  PptTextBlockStyling9Atom::~PptTextBlockStyling9Atom(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBEE5D0;
  *((void *)this + 4) = &unk_26EBEE678;
  PptTextBlockStyling9Atom::reset((uint64_t)this);
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
}

uint64_t PptTextBlockStyling9Atom::reset(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 48);
  uint64_t v3 = (uint64_t *)(this + 48);
  unint64_t v4 = *(void *)(this + 56) - v2;
  if ((v4 & 0x7FFFFFFF8) != 0)
  {
    unint64_t v5 = 0;
    uint64_t v6 = (v4 >> 3);
    do
    {
      uint64_t v7 = *(void *)(v1 + 48);
      unint64_t v8 = *(void *)(v1 + 56) - v7;
      if (v5 >= (v8 >> 3)) {
        goto LABEL_10;
      }
      this = *(void *)(v7 + 8 * v5);
      if (this)
      {
        this = MEMORY[0x23EC997B0](this, 0x1000C4064F814F1);
        uint64_t v7 = *(void *)(v1 + 48);
        unint64_t v8 = *(void *)(v1 + 56) - v7;
      }
      if (v5 >= (v8 >> 3)) {
LABEL_10:
      }
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      *(void *)(v7 + 8 * v5++) = 0;
    }
    while (v6 != v5);
    uint64_t v2 = *v3;
  }
  *(void *)(v1 + 56) = v2;
  return this;
}

void EshDibBlip::~EshDibBlip(EshBlip *this)
{
  this->unsigned int var0 = (void **)&unk_26EBD7488;
  uint64_t v2 = (EshDibBlipInfo *)&this[1];
  EshDibBlipInfo::~EshDibBlipInfo((EshDibBlipInfo *)&this[5].var3.var0[4]);
  EshDibBlipInfo::~EshDibBlipInfo(v2);
  EshBlip::~EshBlip(this);
  JUMPOUT(0x23EC997B0);
}

{
  EshDibBlipInfo *v2;
  uint64_t vars8;

  this->unsigned int var0 = (void **)&unk_26EBD7488;
  uint64_t v2 = (EshDibBlipInfo *)&this[1];
  EshDibBlipInfo::~EshDibBlipInfo((EshDibBlipInfo *)&this[5].var3.var0[4]);
  EshDibBlipInfo::~EshDibBlipInfo(v2);
  EshBlip::~EshBlip(this);
}

void EshDibBlipInfo::~EshDibBlipInfo(EshDibBlipInfo *this)
{
  uint64_t v2 = *((void *)this + 26);
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C4052888210);
  }
  *((void *)this + 26) = 0;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 24));
}

void PptTextOutlineBlockKeyAtom::~PptTextOutlineBlockKeyAtom(PptTextOutlineBlockKeyAtom *this)
{
}

void WrdTextBoxStory::WrdTextBoxStory(WrdTextBoxStory *this)
{
  *(void *)this = -1;
  *((void *)this + 1) = -1;
  *((unsigned char *)this + 16) = 1;
}

uint64_t WrdParser::parse(WrdParser *this, WrdTextBoxStory *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
  WrdTextBoxStory::setNumberOfReusableTextBoxStories((uint64_t)a2, v5);
  *((unsigned char *)a2 + 16) = (*(unsigned int (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16)) == 1;
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 4, 1);
  int v6 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 4, 1);
  if (*((unsigned char *)a2 + 16))
  {
    return WrdTextBoxStory::setNextTextBoxIndex((uint64_t)a2, v4);
  }
  else
  {
    WrdTextBoxStory::setNumberOfTextBoxesInStoryChain((uint64_t)a2, v4);
    return WrdTextBoxStory::setOfficeArtShapeIDForFirstShapeInStoryChain((uint64_t)a2, v6);
  }
}

uint64_t WrdTextBoxStory::setNumberOfReusableTextBoxStories(uint64_t this, int a2)
{
  *(unsigned char *)(this + 16) = 1;
  *(_DWORD *)(this + 12) = a2;
  return this;
}

uint64_t WrdTextBoxStory::setNumberOfTextBoxesInStoryChain(uint64_t this, int a2)
{
  *(unsigned char *)(this + 16) = 0;
  *(_DWORD *)this = a2;
  return this;
}

uint64_t WrdTextBoxStory::setOfficeArtShapeIDForFirstShapeInStoryChain(uint64_t this, int a2)
{
  *(unsigned char *)(this + 16) = 0;
  *(_DWORD *)(this + 4) = a2;
  return this;
}

void WrdStory::WrdStory(WrdStory *this)
{
  *(void *)this = &unk_26EBE6B10;
  *(_OWORD *)((char *)this + 8) = xmmword_238EEF7A0;
  *((void *)this + 3) = -1;
  *((unsigned char *)this + 32) = 0;
}

uint64_t WrdTextBoxStory::getOfficeArtShapeIDForFirstShapeInStoryChain(WrdTextBoxStory *this)
{
  return *((unsigned int *)this + 1);
}

void WrdFileShapeAddress::WrdFileShapeAddress(WrdFileShapeAddress *this)
{
  this->unsigned int var0 = (void **)&unk_26EBE60A0;
  this->int var1 = 0;
  *(void *)&this->int var2 = -1;
  *(void *)&this->unsigned int var4 = -1;
  this->var6 = -1;
  this->var14 = 0;
  *(void *)&this->var7 = 0;
  *(void *)&this->unsigned int var9 = 0;
  *(int *)((char *)&this->var10 + 3) = 0;
}

uint64_t WrdParser::parse(WrdParser *this, WrdFileShapeAddress *a2)
{
  a2->int var2 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
  a2->unsigned __int8 var3 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
  a2->unsigned int var4 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
  a2->var5 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
  a2->var6 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
  *(int8x16_t *)&a2->var7 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v4), (uint32x4_t)xmmword_238EEFAA0), (int8x16_t)xmmword_238EEFAB0);
  a2->var11 = (v4 & 0x2000) != 0;
  a2->var12 = (v4 & 0x4000) != 0;
  a2->var13 = v4 >> 15;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
  a2->var14 = result;
  return result;
}

CsString *CsString::append(CsString *this, const unsigned __int16 *a2)
{
  if (a2)
  {
    uint64_t v3 = this;
    unsigned int v4 = _ChWcslen(a2);
    return CsString::append(v3, a2, v4);
  }
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setNoAutoHyphenate(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 0x4000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFFFF7F | ((a2 & 1) << 7);
  return this;
}

void sub_238BBC518(_Unwind_Exception *exc_buf, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x238BBC4FCLL);
  }

  _Unwind_Resume(exc_buf);
}

char *WrdEshReader::readClientData(WrdEshReader *this, EshContentBase *a2, const EshHeader *a3)
{
  int v6 = (EshAtom *)operator new(0x20uLL);
  EshAtom::EshAtom(v6, 0xF011u, 0);
  *(void *)int v6 = &unk_26EBE5BE8;
  *((_DWORD *)v6 + 7) = 0;
  (*(void (**)(WrdEshReader *, EshAtom *, const EshHeader *))(*(void *)this + 104))(this, v6, a3);
  if ((*(unsigned int (**)(EshContentBase *))(*(void *)a2 + 16))(a2) == 7)
  {
    unint64_t v8 = (EshAtom **)(result + 584);
LABEL_5:
    int *v8 = v6;
    return result;
  }
  if ((*(unsigned int (**)(EshContentBase *))(*(void *)a2 + 16))(a2) == 6)
  {
    unint64_t v8 = (EshAtom **)(result + 376);
    goto LABEL_5;
  }
  if ((*(unsigned int (**)(EshContentBase *))(*(void *)a2 + 16))(a2) != 12)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 0;
  }
  return (char *)WrdEshBackground::takeClientData((uint64_t)v9, (uint64_t)v6);
}

void sub_238BBC77C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdEshClientData::accept(int a1, void *lpsrc)
{
  ClientVisitor = (const void *)EshDataModelVisitor::getClientVisitor(v2);
  return v4();
}

void *WrdEshReader::readClientTextBox(WrdEshReader *this, EshShape *a2, const EshHeader *a3)
{
  int v6 = (EshAtom *)operator new(0x20uLL);
  EshAtom::EshAtom(v6, 0xF00Du, 0);
  *(void *)int v6 = &unk_26EBE5C90;
  *((_DWORD *)v6 + 7) = 0;
  (*(void (**)(WrdEshReader *, EshAtom *, const EshHeader *))(*(void *)this + 104))(this, v6, a3);
  result[74] = v6;
  return result;
}

void sub_238BBC9DC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdEshClientTextBox::accept(int a1, void *lpsrc)
{
  ClientVisitor = (const void *)EshDataModelVisitor::getClientVisitor(v2);
  return v4();
}

void WrdEshBackground::WrdEshBackground(WrdEshBackground *this)
{
  EshBackground::EshBackground(this);
  void *v1 = &unk_26EBE5A88;
  v1[41] = 0;
}

uint64_t WrdEshBackground::takeClientData(uint64_t result, uint64_t a2)
{
  *(void *)(result + 328) = a2;
  return result;
}

uint64_t EshShape::getContentPropertiesReference(EshShape *this)
{
  return (uint64_t)this + 424;
}

void sub_238BBCDFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t EshContentProperties::isPositionHorizontalSet(EshContentProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2 + 128, 0x38Fu);
}

uint64_t EshContentProperties::isPositionHorizontalRelativeSet(EshContentProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2 + 128, 0x390u);
}

uint64_t EshContentProperties::isPositionVerticalSet(EshContentProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2 + 128, 0x391u);
}

uint64_t EshContentProperties::isPositionVerticalRelativeSet(EshContentProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2 + 128, 0x392u);
}

uint64_t EshContentProperties::isWrapDistanceLeftSet(EshContentProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x384u);
}

uint64_t EshContentProperties::getDefaultWrapDistanceLeft(EshContentProperties *this)
{
  return 114300;
}

uint64_t EshContentProperties::isWrapDistanceTopSet(EshContentProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x385u);
}

uint64_t EshContentProperties::isWrapDistanceRightSet(EshContentProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x386u);
}

uint64_t EshContentProperties::isWrapDistanceBottomSet(EshContentProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x387u);
}

uint64_t EshContentProperties::isAllowOverlapSet(EshContentProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2 + 128, 0x3B6u);
}

uint64_t EshTextBox::getTextID(EshTextBox *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x80u);
}

void sub_238BBD308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BBD37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t EshTextBox::isNextTextboxSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x8Au);
}

uint64_t EshTextBox::getNextTextbox(EshTextBox *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x8Au);
}

void sub_238BBD54C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BBD638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t WrdParagraphProperties::getBorderTopReference(WrdParagraphProperties *this)
{
  *((_WORD *)this + 12) |= 4u;
  return *((void *)this + 7);
}

uint64_t WrdParagraphProperties::getBorderLeftReference(WrdParagraphProperties *this)
{
  *((_WORD *)this + 12) |= 8u;
  return *((void *)this + 8);
}

uint64_t WrdParagraphProperties::getBorderBottomReference(WrdParagraphProperties *this)
{
  *((_WORD *)this + 12) |= 0x10u;
  return *((void *)this + 9);
}

uint64_t WrdParagraphProperties::getBorderRightReference(WrdParagraphProperties *this)
{
  *((_WORD *)this + 12) |= 0x20u;
  return *((void *)this + 10);
}

uint64_t WrdParagraphProperties::getShadingReference(WrdParagraphProperties *this)
{
  *((void *)this + 2) |= 0x80uLL;
  return *((void *)this + 4);
}

void sub_238BBDA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

WrdParagraphProperties *WrdParagraphProperties::setRightIndent(WrdParagraphProperties *this, int a2)
{
  *((void *)this + 2) |= 0x2000000000000000uLL;
  *((_DWORD *)this + 66) = a2;
  return this;
}

void sub_238BBDE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BBE138(void *a1, int a2)
{
  if (a2 == 3)
  {
    unsigned int v10 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v10);
    __cxa_end_catch();
  }
  else
  {
    unsigned int v11 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      [v11 raise];
    }
    else {
      +[TCMessageException raise:TCUnknownProblemMessage];
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x238BBE100);
}

void sub_238BBE224(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a2 == 2)
  {
    [objc_begin_catch(exc_buf) raise];
    objc_end_catch();
    JUMPOUT(0x238BBE100);
  }

  _Unwind_Resume(exc_buf);
}

void sub_238BBE400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t WrdFileShapeAddressTable::getFileShapeAddressByCp(WrdFileShapeAddressTable *this, int a2)
{
  uint64_t v2 = *((void *)this + 2);
  unint64_t v3 = *((void *)this + 3) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
  {
LABEL_5:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  uint64_t v4 = 0;
  uint64_t v5 = (v3 >> 3);
  while (*(_DWORD *)(*(void *)(v2 + 8 * v4) + 8) != a2)
  {
    if (v5 == ++v4) {
      goto LABEL_5;
    }
  }
  return *(void *)(v2 + 8 * v4);
}

void WrdFileShapeAddress::WrdFileShapeAddress(WrdFileShapeAddress *this, uint64_t a2)
{
  this->unsigned int var0 = (void **)&unk_26EBE60A0;
  WrdFileShapeAddress::operator=((uint64_t)this, a2);
}

double WrdFileShapeAddress::operator=(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  double result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 50);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  return result;
}

void sub_238BBE6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BBE718()
{
}

WrdTableProperties *WrdTableProperties::setRowHeight(WrdTableProperties *this, int a2)
{
  *((void *)this + 2) |= 0x100000000000uLL;
  *((_DWORD *)this + 75) = a2;
  return this;
}

uint64_t WrdParagraphProperties::getBorderBetweenReference(WrdParagraphProperties *this)
{
  *((_WORD *)this + 12) |= 0x40u;
  return *((void *)this + 11);
}

WrdCharacterProperties *WrdCharacterProperties::setSpaceAfterEachChar(WrdCharacterProperties *this, int a2)
{
  *(void *)&this->var2 |= 0x80000000000uLL;
  this->var49 = a2;
  return this;
}

void sub_238BBE9DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BBEDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BBEEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BBEF7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BBF060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BBF190(void *a1, int a2)
{
  if (a2 == 3)
  {
    int v6 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v6);
    __cxa_end_catch();
  }
  else
  {
    uint64_t v7 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      [v7 raise];
    }
    else {
      +[TCMessageException raise:TCUnknownProblemMessage];
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x238BBF158);
}

void sub_238BBF214(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (a2 == 2)
  {
    [objc_begin_catch(exc_buf) raise];
    objc_end_catch();
    JUMPOUT(0x238BBF158);
  }

  _Unwind_Resume(exc_buf);
}

void WrdEshClientData::~WrdEshClientData(WrdEshClientData *this)
{
}

void WrdEshClientTextBox::~WrdEshClientTextBox(WrdEshClientTextBox *this)
{
}

void WrdEshBackground::~WrdEshBackground(WrdEshBackground *this)
{
  WrdEshBackground::~WrdEshBackground(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBE5A88;
  uint64_t v2 = *((void *)this + 41);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 41) = 0;
  EshContentBase::~EshContentBase(this);
}

void sub_238BBF56C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BBF71C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BBF7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BBFA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BC0000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BC00E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BC0578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238BC07A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BC08B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WrdStory::~WrdStory(WrdStory *this)
{
}

void WrdFileShapeAddress::~WrdFileShapeAddress(WrdFileShapeAddress *this)
{
}

void PptBinaryTagBlipAtom::PptBinaryTagBlipAtom(PptBinaryTagBlipAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE8F00;
  *(void *)(v2 + 32) = &unk_26EBE8FB0;
  *(_WORD *)(v2 + 45) = 0;
  *(void *)(v2 + 48) = 0;
}

uint64_t PptBinaryTagBlipAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptBinaryTagBlipAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((unsigned char *)a2 + 45) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 1) {
    goto LABEL_11;
  }
  *((unsigned char *)a2 + 46) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  unsigned int v5 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3) + 8;
  unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  if (v5 <= v6) {
    goto LABEL_10;
  }
  if (v5 - v6 <= 7)
  {
LABEL_11:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  uint64_t v7 = (EshHeader *)operator new(0x10uLL);
  EshHeader::makeDefault(v7);
  uint64_t v8 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  double v9 = PptParserVisitor::parse(this, v7, v8, *((SsrwOOStream **)this + 1));
  unsigned int v10 = (EshRecord *)(*(uint64_t (**)(void, void, void, double))(**((void **)this + 4) + 16))(*((void *)this + 4), v7->var3, v7->var4, v9);
  unsigned int v11 = v10;
  if (!v10
  {
    char v17 = __cxa_allocate_exception(4uLL);
    _DWORD *v17 = 4003;
  }
  double v12 = EshRecord::setHeader(v11, v7);
  uint64_t v13 = (*(uint64_t (**)(PptParserVisitor *, double))(*(void *)this + 1208))(this, v12);
  (*(void (**)(EshRecord *, uint64_t))(*(void *)v11 + 112))(v11, v13);
  if (*((_DWORD *)v11 + 4) + *((_DWORD *)v11 + 3) != *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3))
  {
    unint64_t v18 = __cxa_allocate_exception(4uLL);
    *unint64_t v18 = 4003;
  }
  uint64_t v14 = *((void *)a2 + 6);
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  *((void *)a2 + 6) = v11;
  MEMORY[0x23EC997B0](v7, 0x1000C408B6DE1C6);
LABEL_10:
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void sub_238BC0DB4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t PptParserVisitor::getEscherVisitor(PptParserVisitor *this)
{
  return *((void *)this + 2);
}

void PptTextMasterStyle9Atom::PptTextMasterStyle9Atom(PptTextMasterStyle9Atom *this, const EshHeader *a2)
{
  EshAtom::EshAtom((EshAtom *)this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEC478;
  *(void *)(v2 + 32) = &unk_26EBEC520;
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 48) = 0;
}

uint64_t PptTextMasterStyle9Atom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextMasterStyle9Atom *a2)
{
  if ((*(int (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1)) >= 1) {
    PptTextMasterStyle9Atom::addLevel(a2);
  }
  PptParserVisitor::endRead(this, (EshRecord *)a2);
  return 1;
}

void PptTextMasterStyle9Atom::addLevel(PptTextMasterStyle9Atom *this)
{
}

void sub_238BC112C(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C4074B9B04ELL);
  _Unwind_Resume(a1);
}

uint64_t EshTablePropVal<int>::accept(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a1);
  }
  else {
    return 1;
  }
}

void EshPropValParserVisitor::parseTable<EshTablePropVal<int>>(EshPropValParserVisitor *a1, uint64_t a2)
{
  int v4 = (EshTablePropValHeader *)operator new(6uLL);
  *(_DWORD *)int v4 = 0;
  *((_WORD *)v4 + 2) = 0;
  EshPropValParserVisitor::parseTableHeader(a1, v4);
  *((_WORD *)a1 + 10) = *((_WORD *)v4 + 2);
  std::vector<int,ChAllocator<int>>::resize(a2 + 8, *(unsigned __int16 *)v4);
  if (*(_WORD *)v4)
  {
    unsigned int v5 = 0;
    do
    {
      unsigned int v6 = (int *)EshBasicTablePropVal<int>::operator[](a2, v5);
      EshPropValParserVisitor::parseElement(a1, v6);
      ++v5;
    }
    while (v5 < *(unsigned __int16 *)v4);
  }
  JUMPOUT(0x23EC997B0);
}

void sub_238BC1264(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C40274DC3F3);
  _Unwind_Resume(a1);
}

uint64_t EshBasicTablePropVal<int>::operator[](uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (((unint64_t)(*(void *)(a1 + 16) - v2) >> 2) < a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  return v2 + 4 * a2;
}

uint64_t EshPropValParserVisitor::parseElement(EshPropValParserVisitor *this, int *a2)
{
  if (*((_WORD *)this + 10) != 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 7005;
  }
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  *a2 = result;
  return result;
}

void PptTextBlockStyling10Atom::PptTextBlockStyling10Atom(PptTextBlockStyling10Atom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEDD10;
  *(void *)(v2 + 32) = &unk_26EBEDDB8;
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 48) = 0;
}

uint64_t PptTextBlockStyling10Atom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextBlockStyling10Atom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  if (v4 < EshRecord::getDataLength(a2) + v4) {
    PptTextBlockStyling10Atom::addStyle(a2);
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptTextBlockStyling10Atom::addStyle(PptTextBlockStyling10Atom *this)
{
}

void sub_238BC1660(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C404F21501ELL);
  _Unwind_Resume(a1);
}

void PptCharProperty10::PptCharProperty10(PptCharProperty10 *this)
{
  *(unsigned char *)this &= 0xF8u;
  *(_DWORD *)((char *)this + 2) = 0;
  *((_DWORD *)this + 2) = 0;
}

void PptEntranceAnimationInfoAtom::PptEntranceAnimationInfoAtom(PptEntranceAnimationInfoAtom *this, const EshHeader *a2)
{
  PptAnimationInfoAtom::PptAnimationInfoAtom(this, a2);
  *uint64_t v2 = &unk_26EBE7E10;
  v2[4] = &unk_26EBE7EB8;
}

uint64_t PptAnimationInfoAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimationInfoAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  Recordint Type = EshRecord::getRecordType(a2);
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  PptColor::setColor((PptColor *)a2 + 4, v6);
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v5 + 4) {
    goto LABEL_44;
  }
  unsigned int v7 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  unsigned int v8 = bswap32(v7);
  if (RecordType != 6023) {
    unsigned int v8 = v7;
  }
  *((unsigned char *)a2 + 60) = v8 & 1;
  *((unsigned char *)a2 + 61) = (v8 & 4) != 0;
  int16x8_t v9 = (int16x8_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v8), (uint32x4_t)xmmword_238EF0EA0);
  *(int8x8_t *)v9.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v9), (int8x8_t)0x1000100010001);
  *(_DWORD *)((char *)a2 + 62) = vmovn_s16(v9).u32[0];
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v5 + 8) {
    goto LABEL_44;
  }
  unsigned int v10 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  unsigned int v11 = bswap32(v10);
  if (RecordType != 6023) {
    unsigned int v11 = v10;
  }
  *((_DWORD *)a2 + 17) = v11;
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v5 + 12) {
    goto LABEL_44;
  }
  unsigned int v12 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  unsigned int v13 = bswap32(v12);
  if (RecordType != 6023) {
    unsigned int v13 = v12;
  }
  *((_DWORD *)a2 + 18) = v13;
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v5 + 16) {
    goto LABEL_44;
  }
  unsigned int v14 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  __int16 v15 = __rev16(v14);
  if (RecordType != 6023) {
    __int16 v15 = v14;
  }
  *((_WORD *)a2 + 38) = v15;
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v5 + 18) {
    goto LABEL_44;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  __int16 v17 = __rev16(v16);
  if (RecordType != 6023) {
    __int16 v17 = v16;
  }
  *((_WORD *)a2 + 39) = v17;
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v5 + 20) {
    goto LABEL_44;
  }
  *((_DWORD *)a2 + 20) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v5 + 21) {
    goto LABEL_44;
  }
  int v18 = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v5 + 22) {
    goto LABEL_44;
  }
  int v19 = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  switch(v18)
  {
    case 2:
      LOBYTE(v19) = v19 + 30;
      int v18 = 2;
      break;
    case 3:
      LOBYTE(v19) = v19 + 40;
      int v18 = 3;
      break;
    case 8:
      LOBYTE(v19) = v19 + 50;
      int v18 = 8;
      break;
    case 9:
      LOBYTE(v19) = v19 + 60;
      int v18 = 9;
      break;
    case 10:
      LOBYTE(v19) = v19 + 60;
      int v18 = 10;
      break;
    case 11:
      LOBYTE(v19) = v19 + 70;
      int v18 = 11;
      break;
    case 12:
      if ((v19 & 0xFC) == 8)
      {
        int v18 = 42;
      }
      else if ((v19 & 0xFC) == 0xC)
      {
        int v18 = 32;
      }
      else if ((v19 - 16) >= 6)
      {
        if ((v19 - 22) >= 5)
        {
          if (v19 == 27)
          {
            int v18 = 82;
          }
          else if (v19 == 28)
          {
            int v18 = 52;
          }
          else
          {
            int v18 = 12;
          }
        }
        else
        {
          int v18 = 62;
        }
      }
      else
      {
        int v18 = 72;
      }
      break;
    default:
      break;
  }
  *((_DWORD *)a2 + 21) = v18;
  *((_DWORD *)a2 + 22) = v19;
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v5 + 23
    || (*((_DWORD *)a2 + 23) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v5 + 24)
    || (*((_DWORD *)a2 + 24) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v5 + 25)
    || (*((unsigned char *)a2 + 100) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v5 + 26))
  {
LABEL_44:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  PptSkipVisitor::skipKnownBytes(*((unsigned char **)this + 3), a2, 2u);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptAnimSequenceDataAtom::PptAnimSequenceDataAtom(PptAnimSequenceDataAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBF1250;
  *(void *)(v2 + 32) = &unk_26EBF12F8;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 53) = 0;
}

uint64_t PptAnimSequenceDataAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimSequenceDataAtom *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  *((_DWORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  *((unsigned char *)a2 + 60) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptAnimConditionAtom::PptAnimConditionAtom(PptAnimConditionAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBF0E70;
  *(void *)(v2 + 32) = &unk_26EBF0F18;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = 0;
}

uint64_t PptAnimConditionAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimConditionAtom *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  *((_DWORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  *((_DWORD *)a2 + 15) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptAnimVisualPageAtom::PptAnimVisualPageAtom(PptAnimVisualPageAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE8C08;
  *(void *)(v2 + 32) = &unk_26EBE8CB0;
  *(_DWORD *)(v2 + 48) = 1;
}

uint64_t PptAnimVisualPageAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimVisualPageAtom *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptAnimSetBehaviorAtom::PptAnimSetBehaviorAtom(PptAnimSetBehaviorAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_WORD *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE8A18;
  *(void *)(v2 + 32) = &unk_26EBE8AC0;
  *(_DWORD *)(v2 + 48) = 1;
}

uint64_t PptAnimSetBehaviorAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimSetBehaviorAtom *a2)
{
  *((unsigned char *)a2 + 45) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

CsString *PptAnimVariantAtom::setWString(PptAnimVariantAtom *this, const CsString *a2)
{
  *((_DWORD *)this + 12) = 3;
  unint64_t v3 = (CsString *)((char *)this + 64);
  *((_DWORD *)this + 20) = 0;
  bzero(*((void **)this + 9), 2 * *((unsigned int *)this + 21));
  return CsString::append(v3, a2);
}

void PptAnimBehaviorAtom::PptAnimBehaviorAtom(PptAnimBehaviorAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_WORD *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBF1538;
  *(void *)(v2 + 32) = &unk_26EBF15E0;
  *(void *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 56) = 0;
}

uint64_t PptAnimBehaviorAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimBehaviorAtom *a2)
{
  *((unsigned char *)a2 + 45) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptAnimVisualElementAtom::PptAnimVisualElementAtom(PptAnimVisualElementAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE8B10;
  *(void *)(v2 + 32) = &unk_26EBE8BB8;
}

uint64_t PptAnimVisualElementAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimVisualElementAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 8
    || (*((_DWORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 12)
    || (*((_DWORD *)a2 + 15) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 16))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  *((_DWORD *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptAnimBuildAtom::PptAnimBuildAtom(PptAnimBuildAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE8068;
  *(void *)(v2 + 32) = &unk_26EBE8110;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 54) = 0;
}

uint64_t PptAnimBuildAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimBuildAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 8
    || (*((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 12)
    || (*((unsigned char *)a2 + 60) = (*(unsigned int (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) != 0,
        *((unsigned char *)a2 + 61) = (*(unsigned int (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) != 0,
        (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 16))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptAnimParagraphBuildAtom::PptAnimParagraphBuildAtom(PptAnimParagraphBuildAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE8828;
  *(void *)(v2 + 32) = &unk_26EBE88D0;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = 0;
}

uint64_t PptAnimParagraphBuildAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimParagraphBuildAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4
    || (*((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1)),
        *((unsigned char *)a2 + 56) = (*(unsigned int (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) != 0,
        *((unsigned char *)a2 + 57) = (*(unsigned int (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) != 0,
        *((unsigned char *)a2 + 58) = (*(unsigned int (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) != 0,
        *((unsigned char *)a2 + 59) = (*(unsigned int (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) != 0,
        *((_DWORD *)a2 + 15) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 16))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptAnimAnimateBehaviorAtom::PptAnimAnimateBehaviorAtom(PptAnimAnimateBehaviorAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBF0B88;
  *(void *)(v2 + 32) = &unk_26EBF0C30;
  *(void *)(v2 + 48) = -1;
  *(unsigned char *)(v2 + 56) = 0;
}

uint64_t PptAnimAnimateBehaviorAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimAnimateBehaviorAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  PptAnimAnimateBehaviorAtom::setCalcMode((uint64_t)a2, v5);
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4
    || (*((unsigned char *)a2 + 56) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 8))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  int v6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  PptAnimAnimateBehaviorAtom::setValueType((uint64_t)a2, v6);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptAnimAnimateBehaviorAtom::setCalcMode(uint64_t result, int a2)
{
  if (a2 == -1 || a2 >= 2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  *(_DWORD *)(result + 48) = a2;
  return result;
}

uint64_t PptAnimAnimateBehaviorAtom::setValueType(uint64_t result, int a2)
{
  if (a2 == -1 || a2 >= 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  *(_DWORD *)(result + 52) = a2;
  return result;
}

void PptAnimAnimationValueAtom::PptAnimAnimationValueAtom(PptAnimAnimationValueAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBF0D78;
  *(void *)(v2 + 32) = &unk_26EBF0E20;
  *(_DWORD *)(v2 + 48) = 0;
}

uint64_t PptAnimAnimationValueAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimAnimationValueAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  PptAnimAnimationValueAtom::setTime((uint64_t)a2, v4);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptAnimAnimationValueAtom::setTime(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

void sub_238BC3B14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshShapeImageData::getChromakey(EshShapeImageData *this)
{
  return EshOpt::getColorProperty(*((void *)this + 2), 0x107u);
}

void sub_238BC3D44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BC3DEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **EshGroupProperties::getTableProperties(EshGroupProperties *this)
{
  return EshOpt::getProperty(*((void *)this + 2) + 128, 0x39Fu);
}

void sub_238BC3ED8(void *a1, int a2)
{
  objc_begin_catch(a1);
  if (a2 == 2)
  {

    objc_end_catch();
    JUMPOUT(0x238BC3EA4);
  }

  objc_exception_rethrow();
}

void sub_238BC3F04(_Unwind_Exception *a1)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_238BC3FD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BC40B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BC4140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BC420C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BC42F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BC44E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BC47AC(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v3, 0x1020C405730B0C9);

  _Unwind_Resume(a1);
}

uint64_t EshContentProperties::getLeft(EshContentProperties *this)
{
  return *((unsigned int *)this->var2 + 60);
}

uint64_t EshContentProperties::getRight(EshContentProperties *this)
{
  return *((unsigned int *)this->var2 + 62);
}

uint64_t EshContentProperties::getTop(EshContentProperties *this)
{
  return *((unsigned int *)this->var2 + 61);
}

uint64_t EshContentProperties::getBottom(EshContentProperties *this)
{
  return *((unsigned int *)this->var2 + 63);
}

void sub_238BC4908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void OABTable2DArray<EshShape *>::OABTable2DArray(_DWORD *a1, int a2, int a3)
{
  *a1 = a2;
  a1[1] = a3;
  if ((a3 * a2) >> 29) {
    [MEMORY[0x263EFF940] raise:@"Dimensions out of bounds" format:&stru_26EBF24D8];
  }
  operator new[]();
}

uint64_t OABTable2DArray<EshShape *>::element(uint64_t a1, int a2, int a3)
{
  if (a2 < 0 || *(_DWORD *)a1 <= a2)
  {
    int v6 = objc_msgSend(NSString, "stringWithUTF8String:", "E &OABTable2DArray<EshShape *>::element(int, int) [E = EshShape *]");
    unsigned int v7 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Binary/Mapper/OABTable.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v6 file:v7 lineNumber:160 isFatal:0 description:"Index out of range"];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  if (a3 < 0 || (int v8 = *(_DWORD *)(a1 + 4), v8 <= a3))
  {
    int16x8_t v9 = objc_msgSend(NSString, "stringWithUTF8String:", "E &OABTable2DArray<EshShape *>::element(int, int) [E = EshShape *]");
    unsigned int v10 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Binary/Mapper/OABTable.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v9 file:v10 lineNumber:161 isFatal:0 description:"Index out of range"];

    +[OITSUAssertionHandler logBacktraceThrottled];
    int v8 = *(_DWORD *)(a1 + 4);
  }
  return *(void *)(a1 + 8) + 8 * (a3 + v8 * a2);
}

void sub_238BC4B48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void OABTable2DArray<OABTableCell>::OABTable2DArray(_DWORD *a1, int a2, int a3)
{
  *a1 = a2;
  a1[1] = a3;
  int v4 = a3 * a2;
  if ((a3 * a2) >= 0xAAAAAAB)
  {
    [MEMORY[0x263EFF940] raise:@"Dimensions out of bounds" format:&stru_26EBF24D8];
    int v4 = a1[1] * *a1;
  }
  is_mul_ok(v4, 0x18uLL);
  operator new[]();
}

void sub_238BC4CD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t OABTable2DArray<OABTableCell>::element(uint64_t a1, int a2, int a3)
{
  if (a2 < 0 || *(_DWORD *)a1 <= a2)
  {
    int v6 = objc_msgSend(NSString, "stringWithUTF8String:", "E &OABTable2DArray<OABTableCell>::element(int, int) [E = OABTableCell]");
    unsigned int v7 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Binary/Mapper/OABTable.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v6 file:v7 lineNumber:160 isFatal:0 description:"Index out of range"];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  if (a3 < 0 || (int v8 = *(_DWORD *)(a1 + 4), v8 <= a3))
  {
    int16x8_t v9 = objc_msgSend(NSString, "stringWithUTF8String:", "E &OABTable2DArray<OABTableCell>::element(int, int) [E = OABTableCell]");
    unsigned int v10 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Binary/Mapper/OABTable.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v9 file:v10 lineNumber:161 isFatal:0 description:"Index out of range"];

    +[OITSUAssertionHandler logBacktraceThrottled];
    int v8 = *(_DWORD *)(a1 + 4);
  }
  return *(void *)(a1 + 8) + 24 * (a3 + v8 * a2);
}

void sub_238BC4E2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BC515C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_238BC51F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

PptParaProperty9 *PptParaProperty9::copyOverridesFromParent(PptParaProperty9 *this, const PptParaProperty9 *a2)
{
  char var0 = (char)this->var0;
  if (*(unsigned char *)&this->var0)
  {
    if ((*(unsigned char *)&this->var0 & 2) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    char var0 = var0 & 0xFE | *(unsigned char *)&a2->var0 & 1;
    *(unsigned char *)&this->char var0 = var0;
    *((_WORD *)&this->var0 + 1) = *((_WORD *)&a2->var0 + 1);
    if ((var0 & 2) != 0)
    {
LABEL_3:
      if ((var0 & 4) != 0) {
        return this;
      }
LABEL_7:
      *(unsigned char *)&this->char var0 = *(unsigned char *)&a2->var0 & 4 | var0 & 0xFB;
      this->unsigned __int8 var3 = a2->var3;
      return this;
    }
  }
  char var0 = *(unsigned char *)&a2->var0 & 2 | var0 & 0xFD;
  *(unsigned char *)&this->char var0 = var0;
  LOBYTE(this->var1) = a2->var1;
  if ((var0 & 4) == 0) {
    goto LABEL_7;
  }
  return this;
}

void sub_238BC53E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshShadow::getOpacity(EshShadow *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this + 2), 0x204u);
}

uint64_t EshShadow::getOffsetX(EshShadow *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this + 2), 0x205u);
}

uint64_t EshShadow::getOffsetY(EshShadow *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this + 2), 0x206u);
}

void PptEntranceAnimationInfoAtom::~PptEntranceAnimationInfoAtom(PptEntranceAnimationInfoAtom *this)
{
}

void PptAnimSequenceDataAtom::~PptAnimSequenceDataAtom(PptAnimSequenceDataAtom *this)
{
}

void PptAnimConditionAtom::~PptAnimConditionAtom(PptAnimConditionAtom *this)
{
}

void PptAnimVisualPageAtom::~PptAnimVisualPageAtom(PptAnimVisualPageAtom *this)
{
}

void PptAnimSetBehaviorAtom::~PptAnimSetBehaviorAtom(PptAnimSetBehaviorAtom *this)
{
}

void PptAnimBehaviorAtom::~PptAnimBehaviorAtom(PptAnimBehaviorAtom *this)
{
}

void PptAnimVisualElementAtom::~PptAnimVisualElementAtom(PptAnimVisualElementAtom *this)
{
}

void PptAnimAnimateBehaviorAtom::~PptAnimAnimateBehaviorAtom(PptAnimAnimateBehaviorAtom *this)
{
}

void PptAnimAnimationValueAtom::~PptAnimAnimationValueAtom(PptAnimAnimationValueAtom *this)
{
}

void PptAnimBuildAtom::~PptAnimBuildAtom(PptAnimBuildAtom *this)
{
}

void PptAnimParagraphBuildAtom::~PptAnimParagraphBuildAtom(PptAnimParagraphBuildAtom *this)
{
}

void EshTablePropVal<int>::~EshTablePropVal(void *a1)
{
  *a1 = &unk_26EBD7B08;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23EC997B0);
}

void PptTextBlockStyling10Atom::~PptTextBlockStyling10Atom(PptTextBlockStyling10Atom *this)
{
  PptTextBlockStyling10Atom::~PptTextBlockStyling10Atom(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBEDD10;
  *((void *)this + 4) = &unk_26EBEDDB8;
  PptTextBlockStyling10Atom::reset((uint64_t)this);
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
}

uint64_t PptTextBlockStyling10Atom::reset(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 48);
  uint64_t v3 = (uint64_t *)(this + 48);
  unint64_t v4 = *(void *)(this + 56) - v2;
  if ((v4 & 0x7FFFFFFF8) != 0)
  {
    unint64_t v5 = 0;
    uint64_t v6 = (v4 >> 3);
    do
    {
      uint64_t v7 = *(void *)(v1 + 48);
      unint64_t v8 = *(void *)(v1 + 56) - v7;
      if (v5 >= (v8 >> 3)) {
        goto LABEL_10;
      }
      this = *(void *)(v7 + 8 * v5);
      if (this)
      {
        this = MEMORY[0x23EC997B0](this, 0x1000C404F21501ELL);
        uint64_t v7 = *(void *)(v1 + 48);
        unint64_t v8 = *(void *)(v1 + 56) - v7;
      }
      if (v5 >= (v8 >> 3)) {
LABEL_10:
      }
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      *(void *)(v7 + 8 * v5++) = 0;
    }
    while (v6 != v5);
    uint64_t v2 = *v3;
  }
  *(void *)(v1 + 56) = v2;
  return this;
}

void PptTextMasterStyle9Atom::~PptTextMasterStyle9Atom(PptTextMasterStyle9Atom *this)
{
  PptTextMasterStyle9Atom::~PptTextMasterStyle9Atom(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBEC478;
  *((void *)this + 4) = &unk_26EBEC520;
  PptTextMasterStyle9Atom::cleanup(this);
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
}

PptTextMasterStyle9Atom *PptTextMasterStyle9Atom::cleanup(PptTextMasterStyle9Atom *this)
{
  uint64_t v1 = this;
  uint64_t v2 = *((void *)this + 6);
  if (((*((void *)this + 7) - v2) & 0x7FFFFFFF8) != 0)
  {
    unsigned __int16 v3 = 0;
    do
    {
      uint64_t v4 = v3;
      this = *(PptTextMasterStyle9Atom **)(v2 + 8 * v3);
      if (this)
      {
        this = (PptTextMasterStyle9Atom *)MEMORY[0x23EC997B0](this, 0x1000C4074B9B04ELL);
        uint64_t v2 = *((void *)v1 + 6);
      }
      *(void *)(v2 + 8 * v4) = 0;
      *(void *)(*((void *)v1 + 6) + 8 * v4) = 0;
      unsigned __int16 v3 = v4 + 1;
      uint64_t v2 = *((void *)v1 + 6);
    }
    while (((unint64_t)(*((void *)v1 + 7) - v2) >> 3) > (unsigned __int16)(v4 + 1));
  }
  *((void *)v1 + 7) = v2;
  return this;
}

void PptBinaryTagBlipAtom::~PptBinaryTagBlipAtom(PptBinaryTagBlipAtom *this)
{
  PptBinaryTagBlipAtom::~PptBinaryTagBlipAtom(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBE8F00;
  *((void *)this + 4) = &unk_26EBE8FB0;
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 6) = 0;
}

uint64_t EshTablePropVal<EshComputedPoint>::accept(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 96))(a2, a1);
  }
  else {
    return 1;
  }
}

void EshPropValParserVisitor::parseTable<EshTablePropVal<EshComputedPoint>>(EshPropValParserVisitor *a1, uint64_t a2)
{
  uint64_t v4 = (EshTablePropValHeader *)operator new(6uLL);
  *(_DWORD *)uint64_t v4 = 0;
  *((_WORD *)v4 + 2) = 0;
  EshPropValParserVisitor::parseTableHeader(a1, v4);
  *((_WORD *)a1 + 10) = *((_WORD *)v4 + 2);
  std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::resize((uint64_t *)(a2 + 8), *(unsigned __int16 *)v4);
  if (*(_WORD *)v4)
  {
    unsigned int v5 = 0;
    do
    {
      uint64_t v6 = (EshComputedValue *)EshBasicTablePropVal<EshComputedPoint>::operator[](a2, v5);
      EshPropValParserVisitor::parseValue((uint64_t)a1, v6, *((unsigned __int16 *)a1 + 10) >> 1);
      EshPropValParserVisitor::parseValue((uint64_t)a1, v6 + 1, *((unsigned __int16 *)a1 + 10) >> 1);
      ++v5;
    }
    while (v5 < *(unsigned __int16 *)v4);
  }
  JUMPOUT(0x23EC997B0);
}

void sub_238BC59C4(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C40274DC3F3);
  _Unwind_Resume(a1);
}

uint64_t EshBasicTablePropVal<EshComputedPoint>::operator[](uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (((unint64_t)(*(void *)(a1 + 16) - v2) >> 4) < a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  return v2 + 16 * a2;
}

void EshArcRule::EshArcRule(EshArcRule *this)
{
  EshAtom::EshAtom(this, 0xF014u, 0);
  *(void *)uint64_t v1 = &unk_26EBD6980;
  *(_DWORD *)(v1 + 28) = 0;
  *(_DWORD *)(v1 + 32) = 0;
}

uint64_t EshArcRule::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t EshTablePropVal<EshGradientStop>::accept(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, a1);
  }
  else {
    return 1;
  }
}

void EshPropValParserVisitor::parseTable<EshTablePropVal<EshGradientStop>>(EshPropValParserVisitor *a1, uint64_t a2)
{
  uint64_t v4 = (EshTablePropValHeader *)operator new(6uLL);
  *(_DWORD *)uint64_t v4 = 0;
  *((_WORD *)v4 + 2) = 0;
  EshPropValParserVisitor::parseTableHeader(a1, v4);
  *((_WORD *)a1 + 10) = *((_WORD *)v4 + 2);
  std::vector<EshGradientStop,ChAllocator<EshGradientStop>>::resize((uint64_t *)(a2 + 8), *(unsigned __int16 *)v4);
  if (*(_WORD *)v4)
  {
    unsigned int v5 = 0;
    do
    {
      uint64_t v6 = EshBasicTablePropVal<EshGradientStop>::operator[](a2, v5);
      EshPropValParserVisitor::parseElement((uint64_t)a1, v6);
      ++v5;
    }
    while (v5 < *(unsigned __int16 *)v4);
  }
  JUMPOUT(0x23EC997B0);
}

void sub_238BC5CF8(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C40274DC3F3);
  _Unwind_Resume(a1);
}

uint64_t EshBasicTablePropVal<EshGradientStop>::operator[](uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (-1431655765 * ((unint64_t)(*(void *)(a1 + 16) - v2) >> 2) < a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  return v2 + 12 * a2;
}

void EshPropValParserVisitor::parseElement(uint64_t a1, uint64_t a2)
{
  if (*(_WORD *)(a1 + 20) != 8)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 7005;
  }
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8));
  *(_WORD *)(a2 + 2) = v4;
  *(_WORD *)(a2 + 4) = BYTE1(v4);
  *(_WORD *)(a2 + 6) = BYTE2(v4);
  *(_WORD *)a2 = 255;
  unsigned int v5 = (EshFixedPointUtil *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8));
  *(float *)(a2 + 8) = EshFixedPointUtil::toFloat(v5);
}

uint64_t non-virtual thunk to'PptAtom::hasId(PptAtom *this)
{
  return *((unsigned __int8 *)this + 12);
}

uint64_t non-virtual thunk to'PptAtom::getId(PptAtom *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t EshContentProperties::getBehindText(EshContentProperties *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty((uint64_t)this->var2, 0x3BAu);
}

void sub_238BC5FA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BC60DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t EshFill::isFocusLeftSet(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x18Du);
}

uint64_t EshFill::isFocusTopSet(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x18Eu);
}

uint64_t EshFill::isFocusRightSet(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x18Fu);
}

uint64_t EshFill::isFocusBottomSet(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x190u);
}

uint64_t *EshFill::getColors(EshFill *this)
{
  return *EshOpt::getProperty((uint64_t)this->var2, 0x197u);
}

uint64_t EshStroke::getStartArrowWidth(EshStroke *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x1D2u);
}

uint64_t EshStroke::getStartArrowLength(EshStroke *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x1D3u);
}

uint64_t EshStroke::getEndArrowWidth(EshStroke *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x1D4u);
}

uint64_t EshStroke::getEndArrowLength(EshStroke *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x1D5u);
}

_DWORD *EshFormula::operator=(_DWORD *result, _DWORD *a2)
{
  *uint64_t result = *a2;
  for (uint64_t i = 1; i != 7; i += 2)
  {
    unsigned __int16 v3 = &result[i];
    int v4 = a2[i];
    *((_WORD *)v3 + 2) = a2[i + 1];
    *unsigned __int16 v3 = v4;
  }
  return result;
}

uint64_t EshBasicTablePropVal<EshFormula>::operator[](uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (-1227133513 * ((unint64_t)(*(void *)(a1 + 16) - v2) >> 2) < a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  return v2 + 28 * a2;
}

void sub_238BC65F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BC67E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238BC697C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BC6DD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *EshTablePropVal<EshPathCommand>::clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  v2[2] = 0;
  v2[3] = 0;
  *uint64_t v2 = &unk_26EBD6288;
  v2[1] = 0;
  EshBasicTablePropVal<EshComputedValue>::operator=((uint64_t)v2, a1);
  return v2;
}

void sub_238BC6E58(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t **EshPath::takeCommands(uint64_t a1, uint64_t *a2)
{
  return EshOpt::takeComplexProperty(*(void *)(a1 + 16), 0x146u, a2);
}

void *EshTablePropVal<EshFormula>::clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  v2[2] = 0;
  v2[3] = 0;
  *uint64_t v2 = &unk_26EBD6328;
  v2[1] = 0;
  EshBasicTablePropVal<EshFormula>::operator=((uint64_t)v2, a1);
  return v2;
}

void sub_238BC6EF8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t **EshPath::takeFormulas(uint64_t a1, uint64_t *a2)
{
  return EshOpt::takeComplexProperty(*(void *)(a1 + 16), 0x156u, a2);
}

void *EshTablePropVal<EshComputedRect>::clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  v2[2] = 0;
  v2[3] = 0;
  *uint64_t v2 = &unk_26EBD63C8;
  v2[1] = 0;
  EshBasicTablePropVal<EshComputedRect>::operator=((uint64_t)v2, a1);
  return v2;
}

void sub_238BC6F98(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t **EshPath::takeTextBoxRects(uint64_t a1, uint64_t *a2)
{
  return EshOpt::takeComplexProperty(*(void *)(a1 + 16), 0x157u, a2);
}

double EshShapeProperties::setCoordLeft(EshShapeProperties *this, unsigned int a2)
{
  int var2 = this->var2;
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty((uint64_t)var2, 0x140u, 2, &v4).n128_u64[0];
  return result;
}

double EshShapeProperties::setCoordTop(EshShapeProperties *this, unsigned int a2)
{
  int var2 = this->var2;
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty((uint64_t)var2, 0x141u, 2, &v4).n128_u64[0];
  return result;
}

double EshShapeProperties::setCoordRight(EshShapeProperties *this, unsigned int a2)
{
  int var2 = this->var2;
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty((uint64_t)var2, 0x142u, 2, &v4).n128_u64[0];
  return result;
}

double EshShapeProperties::setAdj(EshShapeProperties *this, int a2, unsigned int a3)
{
  int var2 = this->var2;
  __n128 v5 = (__n128)a3;
  *(void *)&double result = EshOpt::setProperty((uint64_t)var2, a2 + 327, 2, &v5).n128_u64[0];
  return result;
}

uint64_t EshShapeProperties::getCoordLeft(EshShapeProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x140u);
}

uint64_t EshShapeProperties::getCoordTop(EshShapeProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x141u);
}

uint64_t *EshPath::getFormulas(EshPath *this)
{
  return *EshOpt::getProperty((uint64_t)this->var2, 0x156u);
}

uint64_t *EshPath::getTextBoxRects(EshPath *this)
{
  return *EshOpt::getProperty((uint64_t)this->var2, 0x157u);
}

uint64_t EshFill::getFocusLeft(EshFill *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x18Du);
}

uint64_t EshFill::getFocusTop(EshFill *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x18Eu);
}

uint64_t EshFill::getFocusRight(EshFill *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x18Fu);
}

uint64_t EshFill::getFocusBottom(EshFill *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x190u);
}

void sub_238BC7834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void EshTablePropVal<EshGradientStop>::~EshTablePropVal(void *a1)
{
  *a1 = &unk_26EBD7A68;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23EC997B0);
}

void EshTablePropVal<EshComputedPoint>::~EshTablePropVal(void *a1)
{
  *a1 = &unk_26EBD6250;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23EC997B0);
}

void EshArcRule::~EshArcRule(EshArcRule *this)
{
}

uint64_t PptAnimVariantAtom::setBoolean(uint64_t this, char a2)
{
  *(_DWORD *)(this + 48) = 0;
  *(unsigned char *)(this + 52) = a2;
  return this;
}

uint64_t EshStroke::getJoinStyle(EshStroke *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x1D6u);
}

uint64_t EshStroke::isMiterLimitSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1CCu);
}

uint64_t EshStroke::getMiterLimit(EshStroke *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x1CCu);
}

void sub_238BC7ADC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WrdDocumentFileRecord::appendListToStyleIndex(void *a1, _DWORD *a2)
{
  unint64_t v6 = a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  unint64_t v5 = v6;
  uint64_t v7 = *(_DWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = a1[1];
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 2;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 2) + 1) {
      unsigned int v12 = (v10 >> 2) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      unsigned int v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>(v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      unsigned int v14 = 0;
      uint64_t v16 = 0;
    }
    __int16 v17 = &v14[v10 & 0x3FFFFFFFCLL];
    int v18 = &v14[4 * v16];
    *(_DWORD *)__int16 v17 = *a2;
    unint64_t v8 = v17 + 4;
    int v20 = (char *)a1[1];
    int v19 = (char *)a1[2];
    if (v19 != v20)
    {
      do
      {
        int v21 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *((_DWORD *)v17 - 1) = v21;
        v17 -= 4;
      }
      while (v19 != v20);
      int v19 = (char *)a1[1];
    }
    a1[1] = v17;
    a1[2] = v8;
    a1[3] = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *uint64_t v7 = *a2;
    unint64_t v8 = v7 + 1;
  }
  a1[2] = v8;
}

WrdParagraphProperties *WrdParagraphProperties::setWidowed(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 0x100000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFFFDFF | ((a2 & 1) << 9);
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setAutoSpaceEastAsianAndAlphabeticCharacters(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 0x2000000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFFBFFF | ((a2 & 1) << 14);
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setAutoSpaceEastAsianAndNumericCharacters(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 0x4000000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFF7FFF | ((a2 & 1) << 15);
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setAdjustRightMargin(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 0x800000000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFF7FFFF | ((a2 & 1) << 19);
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setOverflowPunctuation(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 0x800000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFFEFFF | ((a2 & 1) << 12);
  return this;
}

uint64_t WrdParagraphProperties::setFontAlignment(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x8000000000uLL;
  *(_DWORD *)(result + 164) = a2;
  return result;
}

void WrdTapParser::applySprm(WrdBaseParser *a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, unsigned __int16 *a5, unsigned __int16 *a6, uint64_t a7)
{
  if (*(unsigned __int16 *)(a3 + 8) == 54890)
  {
    if (*(_DWORD *)(a2 + 152) == 3)
    {
      *a6 = WrdProperty::getSizeOfSPRMParameter(a3);
      int v22 = a4 + 1;
      if (a4 + 1 >= a5)
      {
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = 1004;
      }
      unsigned int UInt16 = CsLeReadUInt16(a4);
      for (unsigned int i = 0; i != 12; ++i)
      {
        if ((UInt16 >> i))
        {
          unsigned __int16 v26 = 0;
          unsigned int v12 = operator new(0x10uLL);
          void *v12 = 0;
          v12[1] = 0;
          uint64_t v13 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a7 + 280) + 16))(*(void *)(a7 + 280), 61);
          if (v13) {
            unsigned int v14 = (uint64_t *)(v13 - 8);
          }
          else {
            unsigned int v14 = 0;
          }
          if (*a6 >= 3u)
          {
            unsigned __int16 v15 = 2;
            uint64_t v16 = v22;
            do
            {
              WrdPropertyParser::parseSPRM(v16, (unint64_t)a5, &v26, (uint64_t)v12);
              unsigned __int16 v17 = v26;
              int v18 = (unsigned __int8 *)v16 + v26;
              if (*(_DWORD *)v12 == 5)
              {
                WrdTapParser::applySprm(a1, (uint64_t)v14, (uint64_t)v12, v18, a5, &v26);
                int SizeOfSPRMParameter = v26;
              }
              else
              {
                int SizeOfSPRMParameter = WrdProperty::getSizeOfSPRMParameter((uint64_t)v12);
                unsigned __int16 v26 = SizeOfSPRMParameter;
              }
              uint64_t v16 = (unsigned __int16 *)&v18[SizeOfSPRMParameter];
              v15 += SizeOfSPRMParameter + v17;
            }
            while (*a6 > v15);
          }
          WrdStyle::takeTableProps(a2, i, v14);
          MEMORY[0x23EC997B0](v12, 0x1000C4099076E91);
        }
      }
    }
  }
  else
  {
    uint64_t v20 = *(void *)(a2 + 64);
    WrdTapParser::applySprm(a1, v20, a3, (unsigned __int8 *)a4, a5, a6);
  }
}

void sub_238BC7EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (v11) {
    MEMORY[0x23EC997B0](v11, 0x1000C4099076E91);
  }
  _Unwind_Resume(exception_object);
}

WrdTableProperties *WrdTableProperties::setTableStyleIndex(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 0x10000000u;
  *((_WORD *)this + 164) = a2;
  return this;
}

uint64_t WrdTableProperties::setWidthOfInvisibleCellBeforeUnit(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x20000uLL;
  *(_DWORD *)(result + 140) = a2;
  return result;
}

WrdTableProperties *WrdTableProperties::setWidthOfInvisibleCellBefore(WrdTableProperties *this, __int16 a2)
{
  *((void *)this + 2) |= 0x800000000000000uLL;
  *((_WORD *)this + 170) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setDefaultTableTopCellPadding(WrdTableProperties *this, __int16 a2)
{
  *((void *)this + 2) |= 0x8000000000000000;
  *((_WORD *)this + 173) = a2;
  return this;
}

uint64_t WrdTableProperties::setDefaultTableTopCellPaddingUnit(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x80000uLL;
  *(_DWORD *)(result + 148) = a2;
  return result;
}

WrdTableProperties *WrdTableProperties::setDefaultTableBottomCellPadding(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 2u;
  *((_WORD *)this + 175) = a2;
  return this;
}

uint64_t WrdTableProperties::setDefaultTableBottomCellPaddingUnit(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x200000uLL;
  *(_DWORD *)(result + 156) = a2;
  return result;
}

WrdParagraphProperties *WrdParagraphProperties::setKeepOnOnePage(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 0x800uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFFFFF7 | (8 * (a2 & 1));
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setTrailingIndent(WrdParagraphProperties *this, int a2)
{
  *((void *)this + 2) |= 0x800000000000000uLL;
  *((_DWORD *)this + 62) = a2;
  return this;
}

void sub_238BC80CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BC8168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BC848C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BC86F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t WrdStyle::isTablePartDefinedForParagraphProperties(uint64_t a1, unsigned __int8 a2)
{
  if (*(_DWORD *)(a1 + 152) != 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  uint64_t v2 = *(uint64_t **)(a1 + 88);
  if (!v2) {
    return 0;
  }
  while (1)
  {
    unsigned int v3 = *((_DWORD *)v2 + 8);
    if (a2 >= v3) {
      break;
    }
LABEL_6:
    uint64_t v2 = (uint64_t *)*v2;
    if (!v2) {
      return 0;
    }
  }
  if (v3 < a2)
  {
    ++v2;
    goto LABEL_6;
  }
  return 1;
}

uint64_t WrdStyle::isTablePartDefinedForCharacterProperties(uint64_t a1, unsigned __int8 a2)
{
  if (*(_DWORD *)(a1 + 152) != 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  uint64_t v2 = *(uint64_t **)(a1 + 112);
  if (!v2) {
    return 0;
  }
  while (1)
  {
    unsigned int v3 = *((_DWORD *)v2 + 8);
    if (a2 >= v3) {
      break;
    }
LABEL_6:
    uint64_t v2 = (uint64_t *)*v2;
    if (!v2) {
      return 0;
    }
  }
  if (v3 < a2)
  {
    ++v2;
    goto LABEL_6;
  }
  return 1;
}

uint64_t WrdStyle::isTablePartDefinedForTableProperties(uint64_t a1, unsigned __int8 a2)
{
  if (*(_DWORD *)(a1 + 152) != 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  uint64_t v2 = *(uint64_t **)(a1 + 136);
  if (!v2) {
    return 0;
  }
  while (1)
  {
    unsigned int v3 = *((_DWORD *)v2 + 8);
    if (a2 >= v3) {
      break;
    }
LABEL_6:
    uint64_t v2 = (uint64_t *)*v2;
    if (!v2) {
      return 0;
    }
  }
  if (v3 < a2)
  {
    ++v2;
    goto LABEL_6;
  }
  return 1;
}

void sub_238BC8A00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WrdDocumentFileRecord::getListToStyleIndex(WrdDocumentFileRecord *this, unsigned int a2)
{
  return *((void *)this + 1) + 4 * a2;
}

WrdSectionProperties *WrdSectionProperties::applyVersion10Defaults(WrdSectionProperties *this)
{
  uint64_t v1 = *((void *)this + 2);
  if ((v1 & 0x40000000000000) != 0)
  {
    if ((v1 & 0x400000000000000) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    *((_DWORD *)this + 63) = 1;
    v1 |= 0x40000000000000uLL;
    *((void *)this + 2) = v1;
    if ((v1 & 0x400000000000000) != 0)
    {
LABEL_3:
      if ((v1 & 0x800000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  *((_DWORD *)this + 67) = 0;
  v1 |= 0x400000000000000uLL;
  *((void *)this + 2) = v1;
  if ((v1 & 0x800000000000000) != 0)
  {
LABEL_4:
    if ((v1 & 0x1000000000000000) != 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  *((_DWORD *)this + 68) = 0;
  v1 |= 0x800000000000000uLL;
  *((void *)this + 2) = v1;
  if ((v1 & 0x1000000000000000) != 0)
  {
LABEL_5:
    if ((v1 & 0x2000000000000000) != 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  *((_WORD *)this + 138) = 1;
  v1 |= 0x1000000000000000uLL;
  *((void *)this + 2) = v1;
  if ((v1 & 0x2000000000000000) != 0)
  {
LABEL_6:
    if ((v1 & 0x100000000000000) != 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  *((_WORD *)this + 139) = 1;
  v1 |= 0x2000000000000000uLL;
  *((void *)this + 2) = v1;
  if ((v1 & 0x100000000000000) != 0)
  {
LABEL_7:
    if ((v1 & 0x200000000000000) != 0) {
      return this;
    }
LABEL_15:
    *((_DWORD *)this + 66) = 2;
    *((void *)this + 2) = v1 | 0x200000000000000;
    return this;
  }
LABEL_14:
  *((_DWORD *)this + 65) = 0;
  v1 |= 0x100000000000000uLL;
  *((void *)this + 2) = v1;
  if ((v1 & 0x200000000000000) == 0) {
    goto LABEL_15;
  }
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::setHiddenInWebView(WrdCharacterProperties *this, char a2)
{
  *(void *)&this->var2 |= 0x10000000000uLL;
  *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFEFF | ((a2 & 1) << 8);
  return this;
}

void PptExMediaAtom::PptExMediaAtom(PptExMediaAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEAC30;
  *(void *)(v2 + 32) = &unk_26EBEACD8;
  *(_WORD *)(v2 + 52) = 0;
  *(unsigned char *)(v2 + 54) = 0;
}

uint64_t PptExMediaAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptExMediaAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  char v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  *((unsigned char *)a2 + 52) = v5 & 1;
  *((unsigned char *)a2 + 53) = (v5 & 2) != 0;
  *((unsigned char *)a2 + 54) = (v5 & 4) != 0;
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptSoundCollAtom::PptSoundCollAtom(PptSoundCollAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBED730;
  *(void *)(v2 + 32) = &unk_26EBED7D8;
}

uint64_t PptSoundCollAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptSoundCollAtom *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptSoundDataAtom::PptSoundDataAtom(PptSoundDataAtom *this, const EshHeader *a2)
{
  PptBinaryDataAtom::PptBinaryDataAtom(this, a2);
  *uint64_t v2 = &unk_26EBED828;
  v2[4] = &unk_26EBED8E0;
}

void PptBinaryDataAtom::PptBinaryDataAtom(PptBinaryDataAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE8DF8;
  *(void *)(v2 + 32) = &unk_26EBE8EB0;
  *(void *)(v2 + 48) = 0;
}

uint64_t PptSoundDataAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptSoundDataAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  int Offset = EshRecord::getOffset(a2);
  (*(void (**)(PptSoundDataAtom *, void))(*(void *)a2 + 160))(a2, (v4 - Offset - 8));
  int v6 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3);
  unsigned int v7 = v6 - (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) + 8;
  BinaryDataReference = PptBinaryDataAtom::getBinaryDataReference(a2);
  PptParserVisitor::delayReadData(this, BinaryDataReference, v7);
  return 1;
}

OcBinaryData *PptBinaryDataAtom::startAt(PptBinaryDataAtom *this, unsigned int a2)
{
  double result = PptBinaryDataAtom::getBinaryDataReference(this);
  result->int var1 = a2;
  return result;
}

OcBinaryData *PptBinaryDataAtom::getBinaryDataReference(PptBinaryDataAtom *this)
{
  uint64_t v1 = (OcBinaryData *)*((void *)this + 6);
  if (!v1)
  {
    uint64_t v1 = (OcBinaryData *)operator new(0x30uLL);
    OcBinaryData::OcBinaryData(v1);
    *((void *)this + 6) = v1;
  }
  return v1;
}

void sub_238BC92A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t PptParserVisitor::delayReadData(PptParserVisitor *this, OcBinaryData *a2, unsigned int a3)
{
  int v6 = (SsrwOOStream *)*((void *)this + 1);
  unsigned int v7 = (*((uint64_t (**)(SsrwOOStream *))v6->var0 + 4))(v6);
  unsigned int v8 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  OcBinaryData::setDataInfo(a2, v6, v7, v8, a3);
  uint64_t v9 = *(uint64_t (**)(void))(**((void **)this + 1) + 16);
  return v9();
}

uint64_t EshTextPath::getDefaultSize(EshTextPath *this)
{
  return 2359296;
}

void PptExMediaAtom::~PptExMediaAtom(PptExMediaAtom *this)
{
}

void PptSoundCollAtom::~PptSoundCollAtom(PptSoundCollAtom *this)
{
}

void PptSoundDataAtom::~PptSoundDataAtom(PptSoundDataAtom *this)
{
  *(void *)this = &unk_26EBED828;
  *((void *)this + 4) = &unk_26EBED8E0;
  PptBinaryDataAtom::~PptBinaryDataAtom(this);
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBED828;
  *((void *)this + 4) = &unk_26EBED8E0;
  PptBinaryDataAtom::~PptBinaryDataAtom(this);
}

void PptBinaryDataAtom::~PptBinaryDataAtom(PptBinaryDataAtom *this)
{
  *(void *)this = &unk_26EBE8DF8;
  *((void *)this + 4) = &unk_26EBE8EB0;
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 6) = 0;
}

{
  uint64_t vars8;

  PptBinaryDataAtom::~PptBinaryDataAtom(this);
  JUMPOUT(0x23EC997B0);
}

void OcBinaryData::~OcBinaryData(OcBinaryData *this)
{
  OcBinaryData::~OcBinaryData(this);
  JUMPOUT(0x23EC997B0);
}

{
  char *var5;

  this->char var0 = (void **)&unk_26EBD9AB8;
  if (this->var6)
  {
    var5 = this->var5;
    if (var5) {
      MEMORY[0x23EC99790](var5, 0x1000C8077774924);
    }
  }
  *(void *)&this->unsigned __int8 var3 = 0;
  this->var5 = 0;
}

void sub_238BC95DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BC96A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BC978C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WrdNoteReferencePositionTable::setCP(uint64_t this, unsigned int a2, int a3)
{
  if (*(unsigned __int16 *)(this + 32) > a2)
  {
    uint64_t v3 = *(void *)(this + 16);
    if (v3) {
      *(_DWORD *)(v3 + 4 * a2) = a3;
    }
  }
  return this;
}

uint64_t WrdNoteReferencePositionTable::setAuto(uint64_t this, unsigned int a2, __int16 a3)
{
  if (*(unsigned __int16 *)(this + 32) > a2)
  {
    uint64_t v3 = *(void *)(this + 24);
    if (v3) {
      *(_WORD *)(v3 + 2 * a2) = a3;
    }
  }
  return this;
}

void WrdNote::WrdNote(WrdNote *this)
{
  *(void *)this = &unk_26EBE6510;
  *((void *)this + 1) = 0;
  *(void *)((char *)this + 14) = 0;
}

uint64_t WrdNoteReferencePositionTable::getAuto(WrdNoteReferencePositionTable *this, unsigned int a2)
{
  if (*((unsigned __int16 *)this + 16) <= a2)
  {
    LOWORD(v2) = 0;
  }
  else
  {
    uint64_t v2 = *((void *)this + 3);
    if (v2) {
      LOWORD(v2) = *(_WORD *)(v2 + 2 * a2);
    }
  }
  return (__int16)v2;
}

uint64_t EshContentProperties::getPositionHorizontal(EshContentProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2 + 128, 0x38Fu);
}

void sub_238BC9924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BC99AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BC9AA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BC9C70(void *a1, WrdCharacterTextRun *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = v10;
  int v12 = (int)a2;

  WrdCharacterTextRun::~WrdCharacterTextRun((WrdCharacterTextRun *)&a10);
  if (v12 == 3)
  {
    unsigned int v14 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v14);
    __cxa_end_catch();
  }
  else
  {
    unsigned __int16 v15 = __cxa_begin_catch(a1);
    if (v12 == 2) {
      [v15 raise];
    }
    else {
      +[TCMessageException raise:TCUnknownProblemMessage];
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x238BC9C48);
}

void sub_238BC9D2C(_Unwind_Exception *exc_buf, int a2)
{
  if (a2 == 2)
  {
    [objc_begin_catch(exc_buf) raise];
    objc_end_catch();
    JUMPOUT(0x238BC9C48);
  }

  _Unwind_Resume(exc_buf);
}

uint64_t WrdNoteTable::getNoteAtMainTextCP(WrdNoteTable *this, int a2, unsigned int *a3)
{
  uint64_t v3 = *((void *)this + 2);
  unint64_t v4 = (unint64_t)(*((void *)this + 3) - v3) >> 3;
  if (!v4) {
    return 0;
  }
  uint64_t result = *(void *)v3;
  if (*(_DWORD *)(*(void *)v3 + 8) != a2)
  {
    unsigned __int16 v7 = 0;
    while (v4 > ++v7)
    {
      unsigned int v6 = v7;
      uint64_t result = *(void *)(v3 + 8 * v7);
      if (*(_DWORD *)(result + 8) == a2) {
        goto LABEL_7;
      }
    }
    return 0;
  }
  unsigned int v6 = 0;
LABEL_7:
  *a3 = v6;
  return result;
}

void WrdNote::~WrdNote(WrdNote *this)
{
}

void XlNumberFP::XlNumberFP(XlNumberFP *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *uint64_t v2 = &unk_26EBE0328;
  v2[2] = 0;
  *(void *)((char *)v2 + 22) = 0;
}

uint64_t XlNumberFP::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 344))(a2, a1);
}

void XlNumberFP::~XlNumberFP(XlNumberFP *this)
{
}

void PptSSDocInfoAtom::PptSSDocInfoAtom(PptSSDocInfoAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v3 + 40) = -1;
  *(unsigned char *)(v3 + 44) = 0;
  *(void *)uint64_t v3 = &unk_26EBEDA28;
  *(void *)(v3 + 32) = &unk_26EBEDAD0;
  *(void *)(v3 + 48) = 255;
  *(void *)(v3 + 56) = 255;
  CsString::CsString((CsString *)(v3 + 64));
  *((_WORD *)this + 44) = 0;
  *(void *)((char *)this + 92) = 0;
  *(_DWORD *)((char *)this + 99) = 0;
}

uint64_t PptSSDocInfoAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptSSDocInfoAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  PptColor::setColor((PptColor *)a2 + 4, v5);
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4) {
    goto LABEL_8;
  }
  PptSkipVisitor::skipKnownBytes(*((unsigned char **)this + 3), a2, 4u);
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 8) {
    goto LABEL_8;
  }
  *((_WORD *)a2 + 30) = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 10) {
    goto LABEL_8;
  }
  *((_WORD *)a2 + 31) = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 12) {
    goto LABEL_8;
  }
  int v9 = 32;
  CsString::reserve((CsString *)((char *)a2 + 64), 32);
  *((_DWORD *)a2 + 20) = 0;
  bzero(*((void **)a2 + 9), 2 * *((unsigned int *)a2 + 21));
  (*(void (**)(void, int *, void))(**((void **)this + 1) + 136))(*((void *)this + 1), &v9, *((void *)a2 + 9));
  CsString::setCount((CsString *)((char *)a2 + 64), v9 - 1);
  PptSkipVisitor::skipKnownBytes(*((unsigned char **)this + 3), a2, 64 - 2 * v9);
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 76
    || (unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1)),
        *((unsigned char *)a2 + 88) = v6 & 1,
        *((unsigned char *)a2 + 89) = (v6 & 2) != 0,
        *(int8x8_t *)((char *)a2 + 92) = vand_s8((int8x8_t)vdup_n_s32(v6), (int8x8_t)0x300000000CLL),
        *((unsigned char *)a2 + 100) = (v6 & 0x40) != 0,
        *((unsigned char *)a2 + 101) = (v6 & 0x80) != 0,
        *((unsigned char *)a2 + 102) = BYTE1(v6) & 1,
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 78))
  {
LABEL_8:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  PptSkipVisitor::skipUnknownBytes(*((PptSkipVisitor **)this + 3), a2, 2u);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptNamedShowSlidesAtom::PptNamedShowSlidesAtom(PptNamedShowSlidesAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEC570;
  *(void *)(v2 + 32) = &unk_26EBEC618;
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 48) = 0;
}

uint64_t PptNamedShowSlidesAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptNamedShowSlidesAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  if ((EshRecord::getDataLength(a2) & 3) != 0) {
    goto LABEL_12;
  }
  int DataLength = EshRecord::getDataLength(a2);
  unsigned int v6 = DataLength + 3;
  if (DataLength >= 0) {
    int v7 = DataLength;
  }
  else {
    int v7 = DataLength + 3;
  }
  unsigned int v8 = v7 >> 2;
  PptNamedShowSlidesAtom::setSlideIDCount(a2, v7 >> 2);
  if (v6 >= 7)
  {
    unsigned int v9 = 0;
    if (v8 <= 1) {
      unsigned int v8 = 1;
    }
    int v10 = v4 - 4;
    while (1)
    {
      v10 += 4;
      if (v10 != (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1))) {
        break;
      }
      int v11 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
      PptNamedShowSlidesAtom::setSlideIDAt((uint64_t)a2, v9++, v11);
      if (v8 == v9) {
        goto LABEL_11;
      }
    }
LABEL_12:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
LABEL_11:
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptNamedShowSlidesAtom::setSlideIDCount(PptNamedShowSlidesAtom *this, unsigned int a2)
{
}

uint64_t PptNamedShowSlidesAtom::setSlideIDAt(uint64_t this, unsigned int a2, int a3)
{
  *(_DWORD *)(*(void *)(this + 48) + 4 * a2) = a3;
  return this;
}

void PptSSDocInfoAtom::~PptSSDocInfoAtom(PptSSDocInfoAtom *this)
{
  *(void *)this = &unk_26EBEDA28;
  *((void *)this + 4) = &unk_26EBEDAD0;
  CsString::~CsString((CsString *)((char *)this + 64));
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBEDA28;
  *((void *)this + 4) = &unk_26EBEDAD0;
  CsString::~CsString((CsString *)((char *)this + 64));
}

void PptNamedShowSlidesAtom::~PptNamedShowSlidesAtom(PptNamedShowSlidesAtom *this)
{
  *(void *)this = &unk_26EBEC570;
  *((void *)this + 4) = &unk_26EBEC618;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBEC570;
  *((void *)this + 4) = &unk_26EBEC618;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
}

OcBinaryReader *OcBinaryReader::loadBlip(OcBinaryReader *this, EshBSE *a2, SsrwOOStream *a3)
{
  if (a2->var6)
  {
    uint64_t var7 = a2->var7;
    if (var7 != -1)
    {
      unsigned int v6 = this;
      (*((void (**)(SsrwOOStream *, uint64_t, void))a3->var0 + 2))(a3, var7, 0);
      int v7 = (EshBinaryReader *)operator new(0x60uLL);
      EshBinaryReader::EshBinaryReader(v7);
      uint64_t v8 = (*((uint64_t (**)(OcBinaryReader *))v6->var0 + 13))(v6);
      EshGroupProperties::init((uint64_t)v7, v8);
      (*(void (**)(EshBinaryReader *, SsrwOOStream *))(*(void *)v7 + 16))(v7, a3);
      unsigned int v9 = (EshRoot *)operator new(0x28uLL);
      EshRoot::EshRoot(v9);
      (*(void (**)(EshBinaryReader *, EshRoot *))(*(void *)v7 + 32))(v7, v9);
      int v10 = (EshBlip *)(*(uint64_t (**)(EshRoot *, void))(*(void *)v9 + 48))(v9, 0);
      if (!EshBlip::isBlipRecordType(v10))
      {
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = 7005;
      }
      unsigned __int8 v11 = (*(uint64_t (**)(EshRoot *, void))(*(void *)v9 + 56))(v9, 0);
      uint64_t v12 = (*((uint64_t (**)(OcBinaryReader *))v6->var0 + 13))(v6);
      uint64_t v13 = (EshBlip *)(*(uint64_t (**)(uint64_t, EshBlip *, void))(*(void *)v12 + 16))(v12, v10, v11);
      unsigned int v14 = v13;
      if (v13
      {
        (*(void (**)(EshBinaryReader *, void *))(*(void *)v7 + 40))(v7, v15);
        a2->unsigned __int8 var3 = v14;
        unsigned int v14 = 0;
      }
      else
      {
        a2->var6 = 0;
      }
      a2->uint64_t var7 = -1;
      (*(void (**)(EshBinaryReader *))(*(void *)v7 + 24))(v7);
      if (v14) {
        (*((void (**)(EshBlip *))v14->var0 + 1))(v14);
      }
      (*(void (**)(EshRoot *))(*(void *)v9 + 8))(v9);
      uint64_t v16 = *(uint64_t (**)(EshBinaryReader *))(*(void *)v7 + 8);
      return (OcBinaryReader *)v16(v7);
    }
  }
  return this;
}

void sub_238BCAD40()
{
}

void sub_238BCAE00()
{
}

void sub_238BCAE14()
{
  operator delete(v0);
  JUMPOUT(0x238BCAE84);
}

void sub_238BCAE2C()
{
  if (v0) {
    JUMPOUT(0x238BCAE64);
  }
  JUMPOUT(0x238BCAE84);
}

void sub_238BCAE40(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdBinaryReader::getEshObjectFactory(WrdBinaryReader *this)
{
  return *((void *)this + 2);
}

void sub_238BCAF24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BCAFA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BCB1CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BCB3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t WrdTextBoxStory::setNextTextBoxIndex(uint64_t this, int a2)
{
  *(unsigned char *)(this + 16) = 1;
  *(_DWORD *)(this + 8) = a2;
  return this;
}

int *WrdCharacterProperties::setRevisionProperties(WrdCharacterProperties *this, char a2)
{
  int v3 = *((_DWORD *)&this->var2 + 2);
  uint64_t result = (int *)&this->var2 + 2;
  *uint64_t result = v3 | 0x800000;
  result[79] = result[79] & 0xFF7FFFFF | ((a2 & 1) << 23);
  return result;
}

uint64_t WrdCharacterProperties::setIndexToAuthorIDOfRevisionProperties(WrdCharacterProperties *this, __int16 a2)
{
  int v3 = *((_DWORD *)&this->var2 + 2);
  uint64_t result = (uint64_t)&this->var2 + 8;
  *(_DWORD *)uint64_t result = v3 | 0x1000000;
  *(_WORD *)(result + 302) = a2;
  return result;
}

uint64_t WrdCharacterProperties::getRevisionPropertiesDateTimeReference(WrdCharacterProperties *this)
{
  int v2 = *((_DWORD *)&this->var2 + 2);
  uint64_t v1 = (char *)&this->var2 + 8;
  *(_DWORD *)uint64_t v1 = v2 | 0x2000000;
  return *((void *)v1 + 8);
}

uint64_t WrdCharacterProperties::setEngraved(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x400uLL;
  *(_DWORD *)(result + 204) = a2;
  return result;
}

WrdParagraphProperties *WrdParagraphProperties::setVerticalSpacingBeforeAutomatic(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 0x200000000000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFF7FFFFF | ((a2 & 1) << 23);
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setVerticalSpacingAfterAutomatic(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 0x400000000000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFEFFFFFF | ((a2 & 1) << 24);
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::setCharacterPosition(WrdCharacterProperties *this, signed __int16 a2)
{
  *(void *)&this->var2 |= 0x200000uLL;
  this->var105 = a2;
  return this;
}

uint64_t EshContentProperties::getWrapDistanceLeft(EshContentProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x384u);
}

uint64_t EshContentProperties::getWrapDistanceRight(EshContentProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x386u);
}

char *WrdListLevelFormatOverride::clone(WrdListLevelFormatOverride *this)
{
  uint64_t v2 = (*((uint64_t (**)(WrdListLevelFormat *))this->var1->var0 + 2))(this->var1);
  int v3 = (char *)operator new(0x18uLL);
  *((_DWORD *)v3 + 4) = 0;
  v3[20] = 0;
  *(_WORD *)(v3 + 21) &= 0xFC00u;
  *(void *)int v3 = &unk_26EBE6450;
  *((void *)v3 + 1) = v2;
  WrdListLevelFormatOverride::operator=((uint64_t)v3, (uint64_t)this);
  return v3;
}

void sub_238BCB5A0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

char *WrdListLevelFormat::clone(WrdListLevelFormat *this)
{
  uint64_t v2 = (*(uint64_t (**)(WrdParagraphProperties *))(*(void *)this->var1 + 24))(this->var1);
  uint64_t v3 = (*((uint64_t (**)(WrdCharacterProperties *))this->var2->var0 + 3))(this->var2);
  int v4 = (char *)operator new(0x58uLL);
  *((void *)v4 + 9) = 0;
  *((_DWORD *)v4 + 6) = 0;
  *((_WORD *)v4 + 14) = 0;
  *((void *)v4 + 4) = 0;
  *((_DWORD *)v4 + 10) = 0;
  *((void *)v4 + 7) = 0;
  *((_WORD *)v4 + 32) = 0;
  v4[80] &= 0xE0u;
  *(_WORD *)(v4 + 81) = 0;
  *(void *)(v4 + 44) = 0;
  v4[52] = 0;
  *(void *)int v4 = &unk_26EBE6410;
  *((void *)v4 + 1) = v2;
  *((void *)v4 + 2) = v3;
  WrdListLevelFormat::operator=((uint64_t)v4, (uint64_t)this);
  return v4;
}

void sub_238BCB6D8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdListLevelFormat::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  int v4 = *(unsigned char *)(a1 + 80) & 0xFE | *(unsigned char *)(a2 + 80) & 1;
  *(unsigned char *)(a1 + 80) = v4;
  unsigned int v5 = v4 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(a2 + 80) >> 1) & 1));
  *(unsigned char *)(a1 + 80) = v5;
  unsigned int v6 = v5 & 0xFFFFFFFB | (4 * ((*(unsigned __int8 *)(a2 + 80) >> 2) & 1));
  *(unsigned char *)(a1 + 80) = v6;
  LOBYTE(v6) = v6 & 0xF7 | (8 * ((*(unsigned char *)(a2 + 80) & 8) != 0));
  *(unsigned char *)(a1 + 80) = v6;
  *(unsigned char *)(a1 + 80) = v6 & 0xEF | *(unsigned char *)(a2 + 80) & 0x10;
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  int v7 = *(unsigned char *)(a1 + 82) & 0xFE | *(unsigned char *)(a2 + 82) & 1;
  *(unsigned char *)(a1 + 82) = v7;
  unsigned int v8 = v7 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(a2 + 82) >> 1) & 1));
  *(unsigned char *)(a1 + 82) = v8;
  unsigned int v9 = v8 & 0xFFFFFFFB | (4 * ((*(unsigned __int8 *)(a2 + 82) >> 2) & 1));
  *(unsigned char *)(a1 + 82) = v9;
  unsigned int v10 = v9 & 0xFFFFFFF7 | (8 * ((*(unsigned __int8 *)(a2 + 82) >> 3) & 1));
  *(unsigned char *)(a1 + 82) = v10;
  unsigned int v11 = v10 & 0xFFFFFFEF | (16 * ((*(unsigned __int8 *)(a2 + 82) >> 4) & 1));
  *(unsigned char *)(a1 + 82) = v11;
  unsigned int v12 = v11 & 0xFFFFFFDF | (32 * ((*(unsigned __int8 *)(a2 + 82) >> 5) & 1));
  *(unsigned char *)(a1 + 82) = v12;
  unsigned int v13 = v12 & 0xFFFFFFBF | (((*(unsigned __int8 *)(a2 + 82) >> 6) & 1) << 6);
  *(unsigned char *)(a1 + 82) = v13;
  *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82) & 0x80 | v13 & 0x7F;
  WrdParagraphProperties::operator=(*(void *)(a1 + 8), *(void *)(a2 + 8));
  WrdCharacterProperties::operator=(*(void *)(a1 + 16), *(void *)(a2 + 16));
  uint64_t v14 = *(void *)(a2 + 44);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(void *)(a1 + 44) = v14;
  WrdListLevelFormat::setNumberTextLength((WrdListLevelFormat *)a1, *(unsigned __int16 *)(a2 + 64));
  if (*(_WORD *)(a1 + 64)) {
    memcpy(*(void **)(a1 + 72), *(const void **)(a2 + 72), 2 * *(unsigned __int16 *)(a1 + 64));
  }
  return a1;
}

uint64_t WrdListLevelFormatOverride::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  int v5 = *(_WORD *)(a1 + 21) & 0xFFFE | *(_WORD *)(a2 + 21) & 1;
  *(_WORD *)(a1 + 21) = *(_WORD *)(a1 + 21) & 0xFFFE | *(_WORD *)(a2 + 21) & 1;
  unsigned int v6 = v5 & 0xFFFFFFFD | (2 * ((*(unsigned __int16 *)(a2 + 21) >> 1) & 1));
  *(_WORD *)(a1 + 21) = v6;
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  unsigned int v7 = v6 & 0xFFFFFFFB | (4 * ((*(unsigned __int16 *)(a2 + 21) >> 2) & 1));
  *(_WORD *)(a1 + 21) = v7;
  unsigned int v8 = v7 & 0xFFFFFFF7 | (8 * ((*(unsigned __int16 *)(a2 + 21) >> 3) & 1));
  *(_WORD *)(a1 + 21) = v8;
  unsigned int v9 = v8 & 0xFFFFFFEF | (16 * ((*(unsigned __int16 *)(a2 + 21) >> 4) & 1));
  *(_WORD *)(a1 + 21) = v9;
  unsigned int v10 = v9 & 0xFFFFFFDF | (32 * ((*(unsigned __int16 *)(a2 + 21) >> 5) & 1));
  *(_WORD *)(a1 + 21) = v10;
  unsigned int v11 = v10 & 0xFFFFFFBF | (((*(unsigned __int16 *)(a2 + 21) >> 6) & 1) << 6);
  *(_WORD *)(a1 + 21) = v11;
  unsigned int v12 = v11 & 0xFFFFFF7F | (((*(unsigned __int16 *)(a2 + 21) >> 7) & 1) << 7);
  *(_WORD *)(a1 + 21) = v12;
  unsigned int v13 = v12 & 0xFFFFFEFF | ((HIBYTE(*(unsigned __int16 *)(a2 + 21)) & 1) << 8);
  *(_WORD *)(a1 + 21) = v13;
  *(_WORD *)(a1 + 21) = v13 & 0xFDFF | *(_WORD *)(a2 + 21) & 0x200;
  uint64_t v14 = *(void *)(a2 + 8);
  if (v14) {
    *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
  }
  return a1;
}

uint64_t XlChartDataSeries::getDefaultFormat(XlChartDataSeries *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 3) + 8 * a2);
}

void *WrdParser::parse(WrdParser *this, WrdListLevelFormatOverride *a2)
{
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
  if (v4 == -1)
  {
    do
    {
      ChLogFunction("Skipping unexpected 0xFFFFFFFF at start of LFOLVL", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdParser.cpp", 1224);
      unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
    }
    while (v5 == -1);
    unsigned int v4 = v5;
  }
  unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
  unsigned __int16 v7 = v6;
  unsigned int v8 = v6 >> 4;
  int v9 = (v6 >> 5) & 1;
  a2->unsigned __int8 var3 = v6 & 0xF;
  *(_WORD *)((char *)a2 + 21) = *(_WORD *)((char *)a2 + 21) & 0xFFFE | (v6 >> 4) & 1;
  uint64_t result = WrdListLevelFormatOverride::setFormatting(a2, v9);
  if ((v8 & 1) != 0 && !v9)
  {
    if (v4 >> 15) {
      uint64_t result = (void *)ChLogFunction("LFOLVL start at value out of range", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdParser.cpp", 1242);
    }
    else {
      a2->int var2 = v4;
    }
  }
  if (*((int *)this + 38) >= 9) {
    *(_WORD *)((char *)a2 + 21) = (v7 >> 4) & 0x1FC | *(_WORD *)((char *)a2 + 21) & 0xFC03;
  }
  return result;
}

WrdListLevelFormatOverride *WrdListLevelFormatOverride::setFormatting(WrdListLevelFormatOverride *this, int a2)
{
  char v2 = a2;
  uint64_t v3 = this;
  if (a2) {
    this = (WrdListLevelFormatOverride *)WrdListLevelFormat::reset(this->var1);
  }
  *(_WORD *)((char *)v3 + 21) = *(_WORD *)((char *)v3 + 21) & 0xFFFD | (2 * (v2 & 1));
  return this;
}

uint64_t WrdListLevelFormatOverride::needsListLevel(WrdListLevelFormatOverride *this)
{
  return (*(unsigned __int16 *)((char *)this + 21) >> 1) & 1;
}

void sub_238BCBCA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BCBE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BCBF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t WrdParagraphProperties::getNumberRevisionMarkDataReference(WrdParagraphProperties *this)
{
  *((_WORD *)this + 12) |= 0x1000u;
  return *((void *)this + 15);
}

uint64_t WrdNumberRevisionMarkData::setIndexIntoNumberPlaceHolders(uint64_t this, unsigned int a2, char a3)
{
  if (a2 <= 8)
  {
    uint64_t v3 = *(void *)(this + 56);
    if (v3) {
      *(unsigned char *)(v3 + a2) = a3;
    }
  }
  return this;
}

uint64_t WrdNumberRevisionMarkData::setNumberFormats(uint64_t result, unsigned int a2, int a3)
{
  if (a2 <= 8)
  {
    uint64_t v3 = *(void *)(result + 40);
    if (v3) {
      *(_DWORD *)(v3 + 4 * a2) = a3;
    }
  }
  return result;
}

uint64_t WrdNumberRevisionMarkData::setNumberValue(uint64_t this, unsigned int a2, int a3)
{
  if (a2 <= 8)
  {
    uint64_t v3 = *(void *)(this + 48);
    if (v3) {
      *(_DWORD *)(v3 + 4 * a2) = a3;
    }
  }
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setParagraphNumberInserted(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 0x200000000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFDFFFF | ((a2 & 1) << 17);
  return this;
}

uint64_t WrdTableProperties::setJustification(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x4000uLL;
  *(_DWORD *)(result + 128) = a2;
  return result;
}

WrdParagraphProperties *WrdParagraphProperties::setWidth(WrdParagraphProperties *this, int a2)
{
  *((void *)this + 2) |= 0x400000uLL;
  *((_DWORD *)this + 58) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setAbsoluteHeight(WrdParagraphProperties *this, __int16 a2)
{
  *((void *)this + 2) |= 0x8000000uLL;
  *((_WORD *)this + 145) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setHorizontalDistanceFromText(WrdParagraphProperties *this, int a2)
{
  *((void *)this + 2) |= 0x40000000uLL;
  *((_DWORD *)this + 60) = a2;
  return this;
}

uint64_t WrdCharacterProperties::setSmallCaps(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x10000000uLL;
  *(_DWORD *)(result + 184) = a2;
  return result;
}

void SsrwOOMemStream::readFloat64(SsrwOOMemStream *this)
{
  uint64_t v1 = *((unsigned int *)this + 5);
  if ((v1 & 0x80000000) != 0 || *((_DWORD *)this + 4) - (int)v1 <= 7)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 15;
  }
  CsLeReadFloat64(**((void **)this + 1) + v1);
  *((_DWORD *)this + 5) += 8;
}

double *CsCopyFloat64ToPackedLocation(double *result, double a2)
{
  if (result) {
    *uint64_t result = a2;
  }
  return result;
}

uint64_t WrdBaseParser::parseBuffer(uint64_t this, WrdShading *a2, const unsigned __int8 *a3, const unsigned __int8 *a4)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  if (a4 > a3 && a4 - a3 >= 10)
  {
    a2->int var2 = 1;
    WrdBaseParser::parseBuffer((WrdBaseParser *)this, &a2->var3, a3, a4);
    WrdBaseParser::parseBuffer(v7, &a2->var4, a3 + 4, a4);
    this = CsLeReadUInt16((unsigned __int16 *)a3 + 4);
    if ((this - 64) <= 0xFFBE)
    {
      ChLogF("Unexpected shading pattern %d", v8, v9, v10, v11, v12, v13, v14, this);
      this = 0xFFFFLL;
    }
    a2->int var1 = this;
  }
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setVerticalDistanceFromText(WrdParagraphProperties *this, int a2)
{
  *((void *)this + 2) |= 0x20000000uLL;
  *((_DWORD *)this + 59) = a2;
  return this;
}

int *WrdCharacterProperties::setCodePageForPreUnicodeFiles(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 24);
  uint64_t result = (int *)(a1 + 24);
  *uint64_t result = v3 | 0x20000;
  result[55] = a2;
  return result;
}

uint64_t WrdParagraphProperties::getAutoNumberListDescriptorReference(WrdParagraphProperties *this)
{
  *((_WORD *)this + 12) |= 0x100u;
  return *((void *)this + 13);
}

int *WrdCharacterProperties::setCharPositionOfPictureBulletInBookmark(WrdCharacterProperties *this, int a2)
{
  int v3 = *((_DWORD *)&this->var2 + 2);
  uint64_t result = (int *)&this->var2 + 2;
  *uint64_t result = v3 | 0x800;
  result[69] = a2;
  return result;
}