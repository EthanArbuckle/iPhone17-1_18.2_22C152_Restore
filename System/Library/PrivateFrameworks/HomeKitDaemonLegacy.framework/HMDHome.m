@interface HMDHome
+ (BOOL)isObjectContainedInHome:(id)a3;
+ (BOOL)supportsSecureCoding;
+ (BOOL)updateCHIPPropertiesOnHomeModel:(id)a3 forAddedHAPAccessoryServer:(id)a4;
+ (id)decodedMigrationBulletinBoardNotifications:(id)a3;
+ (id)decodedMigrationCameraNotificationSettings:(id)a3;
+ (id)encodedMigrationBulletinBoardNotifications:(id)a3;
+ (id)encodedMigrationCameraNotificationSettings:(id)a3;
+ (id)filterAllowedToPostBulletinFromCharacteristics:(id)a3;
+ (id)filterUsersSupportingPresence:(id)a3;
+ (id)getBuiltinActionSets;
+ (id)logCategory;
+ (id)migrationBulletinBoardNotificationsForHome:(id)a3;
+ (id)migrationCameraNotificationSettingsForHome:(id)a3;
+ (id)nfcIssuerKeyIdentifierWithPairingIdentity:(id)a3;
+ (id)notificationPayloadForChangedCharacteristics:(id)a3 destinationIsXPCTransport:(BOOL)a4;
+ (id)shortDescription;
+ (id)supportedAccessoryClasses;
+ (id)zoneIDFromHomeUUID:(id)a3;
+ (unint64_t)privilegeFromUserInviteInformation:(id)a3;
+ (void)_initialize;
+ (void)appendCharacteristicsToAccessoryList:(id)a3 responseTuples:(id)a4 forMultipleCharacteristicsRemoteRead:(id)a5;
+ (void)appendCharacteristicsToAccessoryList:(id)a3 responseTuples:(id)a4 forMultipleCharacteristicsRemoteWrite:(id)a5 message:(id)a6;
+ (void)updateCHIPPropertiesOnAccessoryModel:(id)a3 forAddedHAPAccessoryServer:(id)a4;
- (BOOL)__shouldAllowAddingWiFiRouterAccessoryWithRequestMessage:(id)a3 error:(id *)a4;
- (BOOL)_addAccessory:(id)a3;
- (BOOL)_addOwnerToPrimaryAccessory:(id)a3 error:(id *)a4;
- (BOOL)_canCurrentDeviceRegisterForReachabilityEventNotification;
- (BOOL)_doesUsersHaveCATID;
- (BOOL)_ensureDevicesSymptomDiscoveryMessageCanBeHandled:(id)a3;
- (BOOL)_hasPairedReachableBTLEAccessories;
- (BOOL)_isAccessToHomeAllowed;
- (BOOL)_isEventTriggerOnLocalDeviceForAccessory:(id)a3;
- (BOOL)_isEventTriggerOnRemoteGatewayForAccessory:(id)a3;
- (BOOL)_isNetworkRouterSupportEnabledForCurrentDevice;
- (BOOL)_isReadRequestAllowForCharacteristics:(id)a3 message:(id)a4 error:(id *)a5;
- (BOOL)_isRegisteredForNotificationsForClients:(id)a3;
- (BOOL)_isRegisteredForNotificationsWithRemoteGateway:(id)a3;
- (BOOL)_isRetrievalInProgressForPrimaryAccessory:(id)a3 linkType:(int64_t)a4;
- (BOOL)_isSecureClassTriggeredByCharacteristics:(id)a3;
- (BOOL)_isSharedHomeVersionTrustZoneCapable;
- (BOOL)_isUserValid:(id)a3 error:(id *)a4;
- (BOOL)_loadBalanceWriteRequestOnResidentForAccessory:(id)a3 accessoryWriteRequestMapTable:(id)a4 requestMessage:(id)a5 source:(unint64_t)a6 responseTuples:(id)a7 withCompletionHandler:(id)a8;
- (BOOL)_overrideStartThreadTimeout;
- (BOOL)_passReadRequestToCompanion:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 pendingResponses:(id)a6 remoteAccessories:(id)a7 withCompletionHandler:(id)a8;
- (BOOL)_passWriteRequestToCompanion:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 remoteAccessories:(id)a6 responseTuples:(id)a7 withCompletionHandler:(id)a8;
- (BOOL)_populateTriggerModel:(id)a3 fromBuilderMessage:(id)a4 transaction:(id)a5 responsePayload:(id)a6;
- (BOOL)_removeAccessory:(id)a3;
- (BOOL)_residentDeviceAvailable;
- (BOOL)_shouldAllowAddingAccessoryOfCategory:(id)a3 requestMessage:(id)a4 error:(id *)a5;
- (BOOL)_shouldAllowAddingAccessoryWithDescription:(id)a3 requestMessage:(id)a4 error:(id *)a5;
- (BOOL)_shouldAvoidTombstoningAccessoryServer:(id)a3 accessory:(id)a4;
- (BOOL)_shouldFallbackLocallyForRemoteMatterRequest:(id)a3;
- (BOOL)_shouldRateLimitChangeNotificationsForCharacteristic:(id)a3;
- (BOOL)_shouldRegisterForNotificationsWithDevice:(id)a3;
- (BOOL)_shouldSendToDestination:(id)a3 device:(id)a4 remoteSourceDevice:(id)a5;
- (BOOL)_shouldUseAttributeReportForBulletin:(id)a3;
- (BOOL)_shouldUseDeprecatedAddAccessoryMessage:(id)a3 minimumVersion:(id)a4 primaryResident:(id)a5 shouldRelayMessages:(BOOL)a6;
- (BOOL)_shouldWaitForAccessoriesToBeReachable;
- (BOOL)_validateAddingNewTriggerWithName:(id)a3 message:(id)a4;
- (BOOL)_verifyUserManagementPermissionForAccessory:(id)a3 error:(id *)a4;
- (BOOL)allowsRemoteAccess;
- (BOOL)applyDeviceLockStatus:(id)a3;
- (BOOL)areAllResidentsUnreachable;
- (BOOL)areAllThreadResidentNodesUnreachable;
- (BOOL)attemptToUpdateThreadNetworkID:(id)a3;
- (BOOL)awdPrimaryReportingDevice;
- (BOOL)bulletinBoardNotificationsMigrationFileExistsOnDisk;
- (BOOL)bulletinNotificationsSupported;
- (BOOL)cameraNotificationSettingsMigrationFileExistsOnDisk;
- (BOOL)canTopicBeForwardedToPrimaryFromResident:(id)a3;
- (BOOL)checkForNetworkRouterSupport:(unint64_t)a3 error:(id *)a4;
- (BOOL)configureWithHomeManager:(id)a3 accessoriesPresent:(id)a4 uncommittedTransactions:(id)a5 source:(unint64_t)a6;
- (BOOL)containsRemovedUser:(id)a3;
- (BOOL)currentDeviceSupportsSidekickSettings;
- (BOOL)currentDeviceSupportsSiriUnsecuringActionsWithNoPasscodeForSiriSecureAccessoryAccessController:(id)a3;
- (BOOL)currentDeviceSupportsSiriUnsecuringActionsWithWatchAuthForSiriSecureAccessoryAccessController:(id)a3;
- (BOOL)currentMatterClientRegistration;
- (BOOL)currentRemoteReachabilityRegistration;
- (BOOL)defaultRoomContainsAccessoryWithUUID:(id)a3;
- (BOOL)didOnboardAudioAnalysis;
- (BOOL)didOnboardLocationServices;
- (BOOL)doesHomeContainResident;
- (BOOL)doesThisHomeHaveCameras;
- (BOOL)enabledResidentsSupportsHomeHub;
- (BOOL)evaluatePredicate:(id)a3;
- (BOOL)getUpdateTransactionForAccessory:(id)a3 hapAccessory:(id)a4 accessoryTransaction:(id)a5 addSvcTransactions:(id *)a6 updateSvcTransactions:(id *)a7 removeSvcTransactions:(id *)a8;
- (BOOL)hasActiveWACPairing;
- (BOOL)hasAnyAccessoryWithWalletKeyAndAccessCodeSupport;
- (BOOL)hasAnyAccessoryWithWalletKeySupport;
- (BOOL)hasAnyUserAcknowledgedCameraRecordingOnboarding;
- (BOOL)hasCharacteristicNotificationRegistrations;
- (BOOL)hasNeverAddedAnyHAPAccessory;
- (BOOL)hasOnboardedForAccessCode;
- (BOOL)hasOnboardedForWalletKey;
- (BOOL)hasPostedWalletKeyOnboardingBulletinForAnyAccessory;
- (BOOL)hasReachableAccessories;
- (BOOL)hasResidentDevicesForPrimaryResidentChangeMonitor:(id)a3;
- (BOOL)hasSharedUser;
- (BOOL)hasSiriEndpointAccessory;
- (BOOL)isAccessAllowedForCharacteristicsWithMessage:(id)a3;
- (BOOL)isActiveNetworkRouterInitialSetupNeeded;
- (BOOL)isAdminUser;
- (BOOL)isAnyBTLEAccessoryReachable;
- (BOOL)isAppleMediaAccessory:(id)a3;
- (BOOL)isAutomaticSoftwareUpdateEnabled;
- (BOOL)isAutomaticThirdPartyAccessorySoftwareUpdateEnabled;
- (BOOL)isCarPlayAccessAllowedForActionSet:(id)a3 withMessage:(id)a4 fromSource:(unint64_t)a5;
- (BOOL)isCarPlayAccessAllowedForCharacteristic:(id)a3 withMessage:(id)a4 fromSource:(unint64_t)a5;
- (BOOL)isClientIdentifierSubscribedToAppleMediaAccessoryState:(id)a3;
- (BOOL)isCompanionReachable;
- (BOOL)isCurrentDeviceAvailableResident;
- (BOOL)isCurrentDeviceConfirmedPrimaryResident;
- (BOOL)isCurrentDevicePairedWithWatchForSiriSecureAccessoryAccessController:(id)a3;
- (BOOL)isCurrentDevicePrimaryResident;
- (BOOL)isCurrentDevicePrimaryResidentForRemoteEventRouterClientController:(id)a3;
- (BOOL)isCurrentDeviceResidentCapableForRemoteEventRouterClientController:(id)a3;
- (BOOL)isCurrentDeviceThreadBorderRouterCapable;
- (BOOL)isCurrentDeviceThreadPreferredPrimaryResident;
- (BOOL)isCurrentUserRestrictedForRemoteEventRouterClientController:(id)a3;
- (BOOL)isDeviceIdentifierPrimaryResident:(id)a3;
- (BOOL)isDevicePrimaryResident:(id)a3;
- (BOOL)isMediaPeerToPeerEnabled;
- (BOOL)isMediaSystem:(id)a3;
- (BOOL)isMessagedHomepodSettingsEnabledForClientController:(id)a3;
- (BOOL)isMigratingAfterResidentChange;
- (BOOL)isMultiUserEnabled;
- (BOOL)isNetworkAvailable;
- (BOOL)isOwnerTrustZoneCapable;
- (BOOL)isOwnerUser;
- (BOOL)isPrimaryResidentNodeReachable;
- (BOOL)isPrimaryResidentNodeReachableAndThreadCapable;
- (BOOL)isRemoteAccessDeviceReachable;
- (BOOL)isResidentFirstAccessoryCommunicationEnabled;
- (BOOL)isResidentReachable:(id)a3;
- (BOOL)isResidentSupported;
- (BOOL)isSharedAdmin;
- (BOOL)isSidekickAccessory:(id)a3;
- (BOOL)isSiriPhraseOptionsHeySiriEnabled;
- (BOOL)isSiriPhraseOptionsJustSiriEnabled;
- (BOOL)isSmokeAlarmEnabled;
- (BOOL)isThisHomeMigratedToHH2;
- (BOOL)isThreadCapable;
- (BOOL)isThreadNetworkUp;
- (BOOL)isUpdatedToHH2;
- (BOOL)locationServicesEnabled;
- (BOOL)migrationNeeded;
- (BOOL)overrideSentinelZoneForConvergencePeriod;
- (BOOL)ownerTrustZoneCapable;
- (BOOL)registeredNotificationWithRemoteGateway;
- (BOOL)remoteAccessIsEnabled;
- (BOOL)remoteEventAllowedForTopic:(id)a3 deviceType:(unint64_t)a4 userType:(unint64_t)a5;
- (BOOL)requiresRemoteFabricDataUpdate;
- (BOOL)requiresUnlockToAccessCharacteristics:(id)a3 withMessage:(id)a4;
- (BOOL)router:(id)a3 shouldHandleMessage:(id)a4 usingRouter:(id)a5;
- (BOOL)shouldAccessoryRemovalFallbackToLocalRemovalOnError:(id)a3 accessory:(id)a4;
- (BOOL)shouldAllowTopic:(id)a3 forDeviceWithMessageIdentifier:(id)a4;
- (BOOL)shouldEnableResidentFirstAccessoryCommunication;
- (BOOL)shouldEncodeHasOnboardedForWalletKey;
- (BOOL)shouldEncodeLegacyLocationServiceSettingForSettingsParentUUID:(id)a3;
- (BOOL)shouldEncodeNFCReaderKey;
- (BOOL)shouldPostBulletin;
- (BOOL)shouldRelayNotificationToRegisteredDevicesForSource:(id)a3;
- (BOOL)shouldRestrictAllMessagingToLocalTransportsForUser:(id)a3;
- (BOOL)shouldWeSendAutomationsToClients;
- (BOOL)soundCheckEnabled;
- (BOOL)startThreadNetworkInProgress;
- (BOOL)supportsDeviceWithCapabilities:(id)a3;
- (BOOL)supportsResidentSelection;
- (BOOL)supportsRouterManagement;
- (BOOL)supportsSiriEndpointOnBoarding;
- (BOOL)synchronouslyFetchIsCarPlayConnectedStatus;
- (BOOL)synchronouslyFetchIsConnectedToCarPlayNetwork;
- (BOOL)threadNetworkIsUp;
- (BOOL)threadNetworkShouldRestartOnNetworkChange;
- (BOOL)threadPreferredNetworkExists;
- (BOOL)updateFabricUsingHomeModel:(id)a3;
- (BOOL)validateActionsDoNotConflict:(id)a3;
- (BOOL)watchSkipVersionCheck;
- (Class)lightLogCategory;
- (HAPKeyStore)keychainStore;
- (HMDAccessCodeManager)accessCodeManager;
- (HMDAccessory)currentAccessory;
- (HMDAccessoryBrowserProtocol)accessoryBrowser;
- (HMDAccessoryCount)accessoryCount;
- (HMDAccessoryInfoFetchController)accessoryInfoFetchController;
- (HMDAccessoryNetworkProtectionGroupRegistry)networkProtectionGroupRegistry;
- (HMDAccessoryReachabilityChangedLogEventManager)reachabilityChangedLogEventManager;
- (HMDAccessorySettingsMessenger)accessorySettingsMessenger;
- (HMDActionSet)_createActionSetWithUUID:(void *)a3 name:(void *)a4 type:(void *)a5 fromDictionary:(void *)a6 transaction:(void *)a7 response:(void *)a8 error:;
- (HMDAppleAccountSettings)accountSettings;
- (HMDAppleMediaAccessoriesStateManager)appleMediaAccessoriesStateManager;
- (HMDAppleMediaAccessoryMessageRouter)appleDeviceRouter;
- (HMDApplicationData)appData;
- (HMDBackgroundTaskManager)backgroundTaskManager;
- (HMDBackingStore)backingStore;
- (HMDCHIPHomeStorage)chipStorage;
- (HMDCameraAnalysisStatePublisher)analysisStatePublisher;
- (HMDCarPlayDataSource)carPlayDataSource;
- (HMDDelegatingMessageRouter)accessoryMessageRouterViaPrimary;
- (HMDDevice)companionDevice;
- (HMDDevice)currentDevice;
- (HMDDeviceLockStateDataSource)deviceLockStateDataSource;
- (HMDFeaturesDataSource)featureDataSource;
- (HMDHAPAccessory)activeNetworkRouterAccessory;
- (HMDHAPAccessoryConnectionCoordinator)accessoryConnectionCoordinator;
- (HMDHAPAccessoryReaderWriter)accessoryReaderWriter;
- (HMDHAPMetadata)hapMetadata;
- (HMDHome)initWithCoder:(id)a3;
- (HMDHome)initWithName:(id)a3 uuid:(id)a4 defaultRoomUUID:(id)a5 owner:(id)a6 homeManager:(id)a7 presenceAuth:(id)a8;
- (HMDHome)initWithName:(id)a3 uuid:(id)a4 defaultRoomUUID:(id)a5 owner:(id)a6 homeManager:(id)a7 presenceAuth:(id)a8 metricsDispatcherFactory:(id)a9 logEventSubmitter:(id)a10 dailyScheduler:(id)a11 currentUserFactory:(id)a12 residentDeviceManagerFactory:(id)a13 locationHandlerFactory:(id)a14 hapMetadata:(id)a15 siriSecureAccessoryAccessController:(id)a16 carPlayDataSource:(id)a17 deviceLockStateDataSource:(id)a18 notificationRegistry:(id)a19 administratorHandlerFactory:(id)a20 netManagerFactory:(id)a21 wifiManagerFactory:(id)a22 xpcMessageTransportFactory:(id)a23 localCapabilitiesDataSource:(id)a24 notificationCenter:(id)a25 keychainStore:(id)a26 reportingSessionManager:(id)a27;
- (HMDHomeAdministratorHandler)administratorHandler;
- (HMDHomeAudioAnalysisStereoPairController)audioAnalysisStereoPairController;
- (HMDHomeKitVersion)currentHomeKitVersion;
- (HMDHomeKitVersion)minHomeKitVersionForAccessoryNetworkProtectionChange;
- (HMDHomeKitVersion)minimumNetworkRouterSupportHomeKitVersion;
- (HMDHomeKitVersion)sharedHomeSourceVersion;
- (HMDHomeLocalDeviceCapabilitiesDataSource)localCapabilitiesDataSource;
- (HMDHomeLocationHandler)homeLocationHandler;
- (HMDHomeLockNotificationManager)lockNotificationManager;
- (HMDHomeManager)homeManager;
- (HMDHomeMediaSystemHandler)mediaSystemController;
- (HMDHomeMetricsDispatcher)metricsDispatcher;
- (HMDHomeNFCReaderKey)nfcReaderKey;
- (HMDHomeNFCReaderKeyManager)nfcReaderKeyManager;
- (HMDHomeNaturalLightingContextUpdater)naturalLightingContextUpdater;
- (HMDHomeNaturalLightingCurveWriter)naturalLightingCurveWriter;
- (HMDHomeObjectChangeHandler)homeObjectChangeHandler;
- (HMDHomeObjectLookup)lookup;
- (HMDHomePeriodicReader)periodicReader;
- (HMDHomePersonDataManager)personDataManager;
- (HMDHomePersonManager)personManager;
- (HMDHomePresenceMonitor)presenceMonitor;
- (HMDHomeRemoteEventAccessController)homeRemoteEventAccessController;
- (HMDHomeRemoteEventRouterClientController)remoteEventRouterClientController;
- (HMDHomeReprovisionHandler)homeReprovisionHandler;
- (HMDHomeWalletKeyManager)walletKeyManager;
- (HMDLaunchHandler)launchHandler;
- (HMDLogEventDailyScheduler)dailyScheduler;
- (HMDManagedStagedValue)stagedRemoteReachabilityRegistration;
- (HMDMediaActionRouter)mediaActionRouter;
- (HMDMediaGroupSetupMetricDispatcher)homeTheaterSetupMetricDispatcher;
- (HMDMediaGroupSetupMetricDispatcher)mediaSystemSetupMetricDispatcher;
- (HMDMediaGroupsAggregateConsumer)mediaGroupsAggregateConsumer;
- (HMDMediaGroupsAggregator)mediaGroupsAggregator;
- (HMDMediaGroupsUnconfiguredParticipantOnboardingManager)mediaGroupsUnconfiguredParticipantOnboardingManager;
- (HMDMultiuserSettingsMessenger)multiuserSettingsMessenger;
- (HMDNaturalLightingContext)naturalLightingContext;
- (HMDNetworkRouterClientManager)routerClientManager;
- (HMDNotificationRegistry)notificationRegistry;
- (HMDPredicateUtilities)predicateUtility;
- (HMDPrimaryResidentCapabilitiesAggregator)capabilitiesAggregator;
- (HMDPrimaryResidentChangeMonitor)primaryResidentChangeMonitor;
- (HMDPrimaryResidentMessageRouter)primaryResidentMessageRouter;
- (HMDRemoteEventRouterServer)remoteEventRouterServer;
- (HMDResidentAppleMediaStateManager)mediaStateManager;
- (HMDResidentDevice)userSelectedPreferredResident;
- (HMDResidentDeviceManager)residentDeviceManager;
- (HMDResidentReachabilityNotificationManager)reachabilityNotificationManager;
- (HMDRoom)roomForEntireHome;
- (HMDSharedHomeUpdateHandler)sharedHomeUpdateHandler;
- (HMDSiriEndpointProfilesMessenger)siriEndpointProfilesMessenger;
- (HMDSiriSecureAccessoryAccessController)siriSecureAccessoryAccessController;
- (HMDThreadNetworkStatusReporter)threadNetworkPeriodicStatusReporter;
- (HMDUnifiedLanguageValueListSettingDataProvider)unifiedLanguageValueListSettingDataProvider;
- (HMDUser)currentUser;
- (HMDUserActionPredictionManager)userActionPredictionManager;
- (HMDUserPresenceFeeder)presenceFeeder;
- (HMDXPCMessageReportingSessionManager)reportingSessionManager;
- (HMDXPCMessageTransportFactory)xpcMessageTransportFactory;
- (HMEDelegatingEventRouter)serverDelegatingEventRouter;
- (HMEEventForwarder)eventForwarder;
- (HMFMessageDestination)messageDestination;
- (HMFMessageDispatcher)msgDispatcher;
- (HMFTimer)disableNotificationTimer;
- (HMFTimer)modifyNotificationsCoalesceTimer;
- (HMFTimer)pendingResponsesTimer;
- (HMFTimer)reachabilityNotificationTimer;
- (HMFWiFiManager)wifiManager;
- (HMHomePersonManagerSettings)personManagerSettings;
- (HMMLogEventSubmitting)logEventSubmitter;
- (HMMTRFabric)fabric;
- (HMUserPresenceAuthorization)presenceAuthStatus;
- (HMUserPresenceCompute)presenceComputeStatus;
- (NSArray)accessories;
- (NSArray)accessoriesRequiringManualReconfigurationOnRouterRemoval;
- (NSArray)accessoriesWithWalletKeySupport;
- (NSArray)appleMediaAccessories;
- (NSArray)autoSelectedPreferredResidents;
- (NSArray)cameraAccessories;
- (NSArray)enabledResidents;
- (NSArray)hapAccessories;
- (NSArray)hapAccessoriesForLegacyDataBlobEncoding;
- (NSArray)matterAccessories;
- (NSArray)mediaDestinations;
- (NSArray)mediaSessionStates;
- (NSArray)mediaSessions;
- (NSArray)mediaSystems;
- (NSArray)residentCapableDevices;
- (NSArray)residentEnabledDevices;
- (NSArray)triggers;
- (NSArray)users;
- (NSArray)usersSupportingPresence;
- (NSArray)wiFiRouterAccessories;
- (NSData)threadOperationalDataset;
- (NSDate)creationDate;
- (NSDate)firstHAPAccessoryAddedDate;
- (NSDate)notificationsUpdatedTime;
- (NSDictionary)assistantObject;
- (NSHashTable)connectionsDiscoveringSymptomsForNearbyDevices;
- (NSHashTable)removeAccessoryInProgressForHMDAccessories;
- (NSHashTable)unpairedSecondaryHAPAccessories;
- (NSMapTable)addPendingAccessories;
- (NSMapTable)uuidToHAPAccessoryConfigTable;
- (NSMutableArray)accessoryRemoteReachabilityEnabledClients;
- (NSMutableArray)actionSets;
- (NSMutableArray)assistantOperations;
- (NSMutableArray)currentTriggers;
- (NSMutableArray)discoveredAccessories;
- (NSMutableArray)matterFabricEnabledClients;
- (NSMutableArray)outgoingInvitations;
- (NSMutableArray)ownedTriggers;
- (NSMutableArray)reachabilityRegisteredDevices;
- (NSMutableArray)remoteReachabilityNotificationPendingAccessories;
- (NSMutableArray)removedUsers;
- (NSMutableArray)retrievalAccessoryCompletionTuples;
- (NSMutableArray)rooms;
- (NSMutableArray)serviceGroups;
- (NSMutableArray)services;
- (NSMutableArray)triggerOwnedActionSets;
- (NSMutableArray)unconfiguredResidentDevices;
- (NSMutableArray)usersPendingUserManagementOperations;
- (NSMutableArray)zones;
- (NSMutableDictionary)addPendingAccessoryOnboardingSetupPayloadStrings;
- (NSMutableDictionary)addPendingAccessorySetupCodeHandlers;
- (NSMutableDictionary)addPendingAccessorySetupCodes;
- (NSMutableDictionary)chipLocalSubscribers;
- (NSMutableDictionary)disableNotificationPayload;
- (NSMutableDictionary)enableNotificationPayload;
- (NSMutableDictionary)labelsByAccessCode;
- (NSMutableDictionary)newlyConfiguredAccessories;
- (NSMutableDictionary)notificationHandlerMap;
- (NSMutableDictionary)pendingResponses;
- (NSMutableDictionary)removedUserInfoByAccessCode;
- (NSMutableSet)heartbeatPingMessagesQueuedWithServer;
- (NSMutableSet)pendingResponsesForRemoteAccessSetup;
- (NSNotificationCenter)notificationCenter;
- (NSNumber)availableBSPsCount;
- (NSNumber)availableBorderRouters;
- (NSNumber)currentAdministerCATID;
- (NSNumber)currentOperateCATID;
- (NSNumber)matterFabricID;
- (NSNumber)overriddenHomeAccessControl;
- (NSObject)WiFiAssertion;
- (NSSet)notificationDeregistrations;
- (NSSet)notificationRegistrations;
- (NSString)contextID;
- (NSString)debugDescription;
- (NSString)description;
- (NSString)name;
- (NSString)ownerName;
- (NSString)threadNetworkID;
- (NSString)unfilteredThreadNetworkID;
- (NSString)urlString;
- (NSUUID)activeNetworkRouterUUID;
- (NSUUID)altTargetFabricUUID;
- (NSUUID)contextSPIUniqueIdentifier;
- (NSUUID)personManagerZoneUUID;
- (NSUUID)primaryNetworkRouterManagingDeviceUUID;
- (NSUUID)spiClientIdentifier;
- (NSUUID)uuid;
- (NSUUID)zoneID;
- (OS_dispatch_queue)workQueue;
- (double)currentDeviceBecamePrimaryTime;
- (double)primaryResidentChangedTime;
- (id)__modelObjectsForRemovingOutgoingInvitationForUser:(id)a3;
- (id)__readWriteResponseHandler:(id)a3 unhandledRequests:(id)a4;
- (id)__residentDeviceForAccessory:(id)a3 fromMap:(id)a4;
- (id)_addMediaSessionForCurrentAccessory:(id)a3;
- (id)_buildRequestMapTableFromRequests:(id)a3 pendingResponses:(id)a4;
- (id)_changedHMDCharacteristicsForHAPCharacteristics:(id)a3 stateNumber:(id)a4 broadcast:(BOOL)a5 accessoryServer:(id)a6;
- (id)_characteristicNotificationPayloadsOnDirectTransports:(BOOL)a3;
- (id)_checkResidentCapabilitiesForCredentialSharing:(id)a3;
- (id)_createBuiltinActionSets;
- (id)_createEventsPayload:(uint64_t)a1;
- (id)_createMediaSessionWithEndpoint:(id)a3;
- (id)_createMessageForReadWriteRequest:(id)a3 source:(unint64_t)a4 withCompletionHandler:(id)a5;
- (id)_currentDeviceCapabilities;
- (id)_disablePayloadFromRemotelyUpdatedCharacteristicNotifications:(id)a3;
- (id)_discoveredAccessoriesForServer:(id)a3;
- (id)_discoveredAccessoriesForServer:(id)a3 linkType:(int64_t)a4;
- (id)_enqueueRetrievalTupleForAccessory:(id)a3 linkType:(int64_t)a4 inProgress:(BOOL *)a5 completion:(id)a6;
- (id)_getContainerForAppData:(id)a3 keyName:(id *)a4;
- (id)_getLogEventsForOperation:(BOOL)a3 startTime:(double)a4 accessories:(id)a5 requestMap:(id)a6 identifier:(id)a7 userUUID:(id)a8 source:(unint64_t)a9 bundleID:(id)a10;
- (id)_handleRenameHomeModel:(id)a3 message:(id)a4;
- (id)_hasConfirmedPrimaryResidentDevice;
- (id)_hmdCharacteristicsForUpdatedHAPCharacteristics:(id)a3 accessoryServer:(id)a4;
- (id)_initWithCoder:(id)a3;
- (id)_outgoingInvitationForUserWithHandle:(id)a3;
- (id)_primaryAccessoryForServer:(id)a3;
- (id)_processTestModeHomeAccessControlOverride:(id)a3;
- (id)_processTestModeHomeLocationStatusOverride:(id)a3;
- (id)_processTestModeSkipHH2MigrationOverride:(id)a3;
- (id)_processTestModeUpdateHomeLocation:(id)a3;
- (id)_productDataFromHAPAccessory:(id)a3;
- (id)_readRequestTuplesFromMessage:(id)a3 outUnhandledRequests:(id *)a4;
- (id)_removeAccessoriesCommon:(id)a3;
- (id)_residentDeviceForResidentUser:(id)a3;
- (id)_residentUserForResidentDevice:(id)a3;
- (id)_residentUsers;
- (id)_retrieveTupleForPrimaryAccessory:(id)a3 linkType:(int64_t)a4;
- (id)_setupCodeProviderForMessage:(id)a3;
- (id)_setupDescriptionFromData:(id)a3 error:(id *)a4;
- (id)_setupPendingResponseTimerIdentifier:(id)a3 originalRequestIdentifier:(id)a4;
- (id)_splitCharacteristicChanges:(id)a3 changedAccessories:(id)a4;
- (id)_unexpectedCharacteristicsFromCharacteristicNotifications:(id)a3;
- (id)_userForDevice:(id)a3;
- (id)accessoriesWithUUIDs:(id)a3;
- (id)accessoryAdministerPrivilegeCATID:(BOOL)a3;
- (id)accessoryForMediaProfileUniqueIdentifier:(id)a3;
- (id)accessoryOperatePrivilegeCATID:(BOOL)a3;
- (id)accessorySettingsMessengerMessageTargetUUID;
- (id)accessoryWithDeviceIdentifier:(id)a3;
- (id)accessoryWithEndpointIdentifier:(id)a3;
- (id)accessoryWithIdentifier:(id)a3;
- (id)accessoryWithSPIClientIdentifier:(id)a3;
- (id)accessoryWithUUID:(id)a3;
- (id)actionSetWithName:(id)a3;
- (id)actionSetWithUUID:(id)a3;
- (id)actionWithDictionaryRepresentation:(id)a3;
- (id)addActionSetName:(id)a3;
- (id)addName:(id)a3;
- (id)allNewlyConfiguredAccessories;
- (id)audioDestinationControllerDataForDestination:(id)a3;
- (id)backingStoreObjects:(int64_t)a3;
- (id)balancedResidentMapForAccessories:(id)a3;
- (id)builtInActionSetInfo;
- (id)createAccessorySettingsLocalMessageHandlerWithHomeUUID:(id)a3 languageValuesDataProvider:(id)a4;
- (id)createAccessorySettingsMessengerWithMessageTargetUUID:(id)a3 messageDispatcher:(id)a4 messageRouter:(id)a5 messageHandler:(id)a6 logEventSubmitter:(id)a7 legacyMessageReceiver:(id)a8;
- (id)createActionSetWithName:(id)a3 uuid:(id)a4 type:(id)a5;
- (id)createAppleMediaAccessoriesStateManagerMetricsDispatcherWithIdentifier:(id)a3 logEventSubmitter:(id)a4;
- (id)createAppleMediaAccessoriesStateManagerWithIdentifier:(id)a3 messenger:(id)a4 metricsDispatcher:(id)a5;
- (id)createAppleMediaAccessoriesStateMessengerWithIdentifier:(id)a3 messageDispatcher:(id)a4;
- (id)createModelForAppDataPayload:(id)a3 existingAppData:(id)a4 parentUUID:(id)a5;
- (id)createMultiuserSettingsMessenger:(id)a3 messageDispatcher:(id)a4;
- (id)createPrimaryResidentMessageRouterMetricsDispatcherWithLogEventSubmitter:(id)a3;
- (id)createPrimaryResidentMessageRouterWithHomeUUID:(id)a3 messageDispatcher:(id)a4 metricsDispatcher:(id)a5;
- (id)createSiriEndpointProfileMessageHandlerWithHomeUUID:(id)a3;
- (id)createSiriEndpointProfilesMessengerWithMessageTargetUUID:(id)a3 messageDispatcher:(id)a4 messageRouter:(id)a5 messageHandler:(id)a6;
- (id)createUnifiedLanguageValueListSettingDataProvider;
- (id)currentAccessoryHomeUUID;
- (id)currentAccessorySetupMetricDispatcher;
- (id)currentDeviceControllerNodeID;
- (id)currentUserFactory;
- (id)delegatingRouter:(id)a3 filteredTopics:(id)a4 forRouter:(id)a5;
- (id)delegatingRouter:(id)a3 upstreamTopicsFor:(id)a4;
- (id)deletedBackingStoreObject;
- (id)descriptionWithPointer:(BOOL)a3;
- (id)destinationControllerDataForAppleMediaAccessory:(id)a3;
- (id)destinationControllerWithCommittedDestinationIdentifier:(id)a3;
- (id)destinationControllerWithDestinationIdentifier:(id)a3;
- (id)destinationControllerWithIdentifier:(id)a3;
- (id)destinationControllers;
- (id)destinationForAppleMediaAccessory:(id)a3;
- (id)destinationForMediaSystem:(id)a3;
- (id)destinationManagerPassingTest:(id)a3;
- (id)destinationManagerWithDestinationIdentifier:(id)a3;
- (id)destinationManagerWithParentIdentifier:(id)a3;
- (id)destinationManagersWithDestinationIdentifiers:(id)a3 supportedOptions:(unint64_t)a4;
- (id)deviceForAccessoryUUID:(id)a3 forRemoteEventRouterClientController:(id)a4;
- (id)deviceForAppleMediaAccessoryMessageRouter:(id)a3 message:(id)a4;
- (id)deviceForPrimaryResidentForRemoteEventRouterClientController:(id)a3;
- (id)dumpActionSetDescription;
- (id)dumpCharacteristicNotificationRegistry;
- (id)dumpMediaSessionDescription;
- (id)dumpState;
- (id)emptyModelObjectWithChangeType:(unint64_t)a3;
- (id)eventRouterDumpStateInfo;
- (id)eventRouterServerDiagnosticInfo;
- (id)eventSourceForMediaGroupsAggregator:(id)a3;
- (id)eventStoreReadHandle;
- (id)eventStoreReadHandleForRemoteEventRouterClientController:(id)a3;
- (id)eventStoreWriteHandleForRemoteEventRouterClientController:(id)a3;
- (id)expandedTopicsWithTopics:(id)a3;
- (id)filterBuiltinActionSets:(id)a3;
- (id)getBulletinBoardNotificationSerializedFileName;
- (id)getCameraNotificationSettingsSerializedFileName;
- (id)getReachabilityTupleForAccessoryUUID:(id)a3;
- (id)getServiceTransaction:(id)a3 parentUUID:(id)a4 changeType:(unint64_t)a5;
- (id)getTransactionFromHAPAccessory:(id)a3 hmdAccessory:(id)a4 uuid:(id)a5 hostAccessoryUUID:(id)a6 objectChangeType:(unint64_t)a7;
- (id)hapAccessoriesForServer:(id)a3;
- (id)hapAccessoriesForServer:(id)a3 linkType:(int64_t)a4;
- (id)hapAccessoryServerIdentifiers;
- (id)hapAccessoryUniqueIdentifiers;
- (id)hapAccessoryWithIdentifier:(id)a3;
- (id)hapAccessoryWithIdentifier:(id)a3 instanceID:(id)a4;
- (id)hmdHAPAccessoryWithHAPAccessory:(id)a3;
- (id)homeBulletinContext;
- (id)homeConfigurationModelObjectWithChangeType:(unint64_t)a3;
- (id)homeConfigurationUUID;
- (id)hubAccessories;
- (id)lightProfileWithUUID:(id)a3;
- (id)loadMigrationBulletinBoardNotificationsFromDisk;
- (id)loadMigrationCameraNotificationSettingsFromDisk;
- (id)localAndRemoteSubscriptionProvider;
- (id)matterAccessoriesWithNewFirmwareInstalledInHome;
- (id)matterAccessoryWithNodeID:(id)a3;
- (id)mediaDestinationManagersWithHomeTheaterSupportedOptions;
- (id)mediaDestinationManagersWithSupportedOptions:(unint64_t)a3;
- (id)mediaDestinationsInRoom:(id)a3;
- (id)mediaGroupsAggregateDataTopicName;
- (id)mediaNotificationPayloadForProfile:(void *)a1;
- (id)mediaPassword;
- (id)mediaProfileWithUUID:(id)a3;
- (id)mediaSessionStateWithIdentifier:(id)a3;
- (id)mediaSessionWithIdentifier:(id)a3;
- (id)mediaSessionWithUUID:(id)a3;
- (id)mediaSystemController:(id)a3 accessoryForUUID:(id)a4;
- (id)mediaSystemForAppleMediaAccessory:(id)a3;
- (id)mediaSystemWithUUID:(id)a3;
- (id)mediaSystemsWithUUIDs:(id)a3;
- (id)messageTargetForDeviceIdentifier:(id)a3;
- (id)migrateOwnedTriggers;
- (id)modelObjectWithChangeType:(unint64_t)a3;
- (id)modelObjectWithChangeType:(unint64_t)a3 version:(int64_t)a4;
- (id)multiUserSettings;
- (id)namesOfServicesWithNewFirmwareAvailableInHome;
- (id)netManagerFactory;
- (id)notificationRegistrationsForAppleMediaAccessories;
- (id)outgoingInvitationWithUUID:(id)a3;
- (id)owner;
- (id)participantDataTopicForAccessory:(id)a3 mediaGroupsAggregator:(id)a4;
- (id)performReadRequests:(id)a3 loggingObject:(id)a4;
- (id)performReadRequests:(id)a3 withRetries:(int64_t)a4 timeInterval:(double)a5 loggingObject:(id)a6;
- (id)performWriteRequests:(id)a3 loggingObject:(id)a4;
- (id)performWriteRequests:(id)a3 withRetries:(int64_t)a4 timeInterval:(double)a5 loggingObject:(id)a6;
- (id)playbackArchiveWithSessionIdentifier:(id)a3;
- (id)preferredDevice;
- (id)prepareUserManagementOperationForUser:(id)a3 accessories:(id)a4 type:(unint64_t)a5 error:(id *)a6;
- (id)prepareUserManagementOperationForUser:(id)a3 accessory:(id)a4 type:(unint64_t)a5 model:(id)a6 error:(id *)a7;
- (id)primaryResident;
- (id)primaryResidentDeviceIdentifierForRemoteEventRouterClientController:(id)a3;
- (id)privateDataSourceForNode:(id)a3;
- (id)propertiesRegisteredForMediaProfileUniqueIdentifier:(id)a3;
- (id)receiverForParticipantAccessoryUUID:(id)a3 mediaGroupsLocalDataStorage:(id)a4;
- (id)removeName:(id)a3;
- (id)replaceActionSetName:(id)a3 withNewName:(id)a4;
- (id)replaceName:(id)a3 withNewName:(id)a4;
- (id)resolveReceiverForMessageTargetUUID:(id)a3;
- (id)retrieveAndResetNewlyConfiguredAccessoriesForAddSessionIdentifier:(id)a3;
- (id)roomForAllDestinationParentIdentifiers:(id)a3;
- (id)roomWithName:(id)a3;
- (id)roomWithUUID:(id)a3;
- (id)roomWithUniqueIdentifier:(id)a3 forClientIdentifierSalt:(id)a4;
- (id)roomsForMediaGroupsAggregator:(id)a3;
- (id)rootDestinationManagerWithDescendantDestinationIdentifier:(id)a3;
- (id)routerForParticipantAccessoryUUID:(id)a3 mediaGroupsLocalDataStorage:(id)a4;
- (id)routerServerUserAccessControlProviderForIdentifier:(id)a3;
- (id)routerServerUserAccessControlProviderIdentifierForMessage:(id)a3;
- (id)serviceGroupWithName:(id)a3;
- (id)serviceGroupWithUUID:(id)a3;
- (id)sharedHomeModel;
- (id)sharedUsers;
- (id)shortDescription;
- (id)targetAccessoriesWithDestinationIdentifiers:(id)a3;
- (id)timerWithTimerInterval:(double)a3;
- (id)triggerOwnedActionSetWithUUID:(id)a3;
- (id)triggerWithName:(id)a3;
- (id)triggerWithUUID:(id)a3;
- (id)updateHomeWithModel:(id)a3 message:(id)a4;
- (id)updatePersonManagerSettings:(id)a3;
- (id)userWithMergeID:(id)a3;
- (id)userWithPairingIdentity:(id)a3;
- (id)userWithPairingIdentityIdentifier:(id)a3;
- (id)userWithUUID:(id)a3;
- (id)validateName:(id)a3;
- (id)wifiManagerFactory;
- (id)writeRequestTuplesFromMessage:(id)a3 outUnhandledRequests:(id *)a4;
- (id)zoneWithName:(id)a3;
- (id)zoneWithUUID:(id)a3;
- (int64_t)atHomeLevel;
- (int64_t)configurationVersion;
- (int64_t)destinationTypeForDestinationWithIdentifier:(id)a3;
- (int64_t)expectedConfigurationVersion;
- (int64_t)homeLocation;
- (int64_t)lastSyncedConfigurationVersion;
- (int64_t)minimumMediaUserPrivilege;
- (int64_t)previousReachableAccessoriesCount;
- (int64_t)previousReachableAccessoriesCountExcludingMatter;
- (int64_t)previousReachableAppleMediaAccessoriesCount;
- (int64_t)protectionMode;
- (int64_t)reachableAccessoriesCount;
- (int64_t)reachableAccessoriesCountExcludingMatter;
- (int64_t)reachableAppleMediaAccessoriesCount;
- (int64_t)threadNetworkConnectionState;
- (int64_t)threadNetworkNodeType;
- (uint64_t)isCharacteristicAllowedForCarPlayAccess:(void *)a1;
- (uint64_t)isMessageEntitledForCarPlayAccess:(uint64_t)a3 source:;
- (uint64_t)supportsUnifiedMediaNotificationsOnResidents;
- (unint64_t)accessNotAllowedReasonCode;
- (unint64_t)accessoryCountForRoom:(id)a3;
- (unint64_t)accessorySettingsLocalMessageHandler:(id)a3 callerPrivilegeWithMessage:(id)a4;
- (unint64_t)assistantAccessCapableAccessoryCount;
- (unint64_t)audioAnalysisClassifierOptions;
- (unint64_t)deriveNetworkRouterSupport:(unint64_t)a3;
- (unint64_t)homeHubState;
- (unint64_t)networkRouterSupport;
- (unint64_t)networkRouterSupportDisableReason;
- (unint64_t)nonIPadResidentDeviceCountForHH2Migration;
- (unint64_t)siriPhraseOptions;
- (unint64_t)threadNetworkSequenceNumber;
- (void)__addMediaSession:(id)a3;
- (void)__encodeAccessoriesWithCoder:(id)a3 options:(unint64_t)a4;
- (void)__handleAcceptedOutgoingInvitationResponse:(id)a3 destinationAddress:(id)a4 publicKey:(id)a5 username:(id)a6 issuerPublicKeyER:(id)a7 presenceAuthStatus:(id)a8 completionHandler:(id)a9;
- (void)__handleAddHAPAccessoryModel:(id)a3 message:(id)a4;
- (void)__handleAddMediaAccessoryModel:(id)a3 message:(id)a4;
- (void)__handleCancelledOutgoingInvitation:(id)a3;
- (void)__handleCompletedOutgoingInvitation:(id)a3;
- (void)__handleProcessStateChange:(id)a3;
- (void)__registerForRemoteAccessoryReachabilityNotifications:(BOOL)a3 clientIdentifier:(id)a4;
- (void)__removeAccessory:(void *)a1 isBeingReplaced:(void *)a2 isForceUpdate:(char)a3 message:(void *)a4;
- (void)__requestAccessoryBrowsing;
- (void)__saveConfigurationVersionTransaction;
- (void)__sendOutgoingInvitations:(id)a3 suppressHomeInviteNotification:(BOOL)a4;
- (void)__updateServiceTransaction:(id)a3 accessoryTransaction:(id)a4 service:(id)a5 accessory:(id)a6 hapService:(id)a7;
- (void)_accessoryPairingDidComplete:(id)a3 configuration:(id)a4 pairingEvent:(id)a5 accessoryServer:(id)a6 certificationStatus:(int64_t)a7 requestMessage:(id)a8;
- (void)_addAccessories:(id)a3;
- (void)_addAccessoryToBalancedResidentMap:(id)a3 residentDevice:(id)a4 balancedResidentMap:(id)a5;
- (void)_addAllUsersToAccessory:(id)a3;
- (void)_addAndMaybeAssociateMediaAccessory:(void *)a3 message:;
- (void)_addMediaAccessory:(void *)a3 message:;
- (void)_addNewTrigger:(id)a3 message:(id)a4 payloadAnnex:(id)a5 triggerModel:(id)a6;
- (void)_addOutgoingInvitations:(id)a3 message:(id)a4 transactionCompleted:(id)a5;
- (void)_addResidentWithUsername:(id)a3 publicKey:(id)a4 destination:(id)a5;
- (void)_addResponseTuplesFromDictionary:(id)a3 accessoryRequestMapTable:(id)a4 responseTuples:(id)a5 completedGroup:(id)a6 logEvents:(id)a7;
- (void)_addRetrievalCompletionTuple:(id)a3;
- (void)_addTransactionForActiveNetworkRouterAccessory:(id)a3 isReplacement:(BOOL)a4;
- (void)_addTransactionForMinimumHomeKitVersionForAccessoryNetworkProtectionChange:(id)a3 message:(id)a4;
- (void)_addTransactionForMinimumNetworkRouterHomeKitVersion:(id)a3 message:(id)a4;
- (void)_addTransactionWithProtectionMode:(id)a3 message:(id)a4;
- (void)_addUserToContainer:(id)a3;
- (void)_addUserToIdentityRegistry:(id)a3;
- (void)_addUsers:(id)a3 accessory:(id)a4;
- (void)_addUsersWithInviteInformations:(id)a3 message:(id)a4;
- (void)_applyDeviceLockCheck:(unint64_t)a3 forSource:(void *)a4 message:(void *)a5 completion:;
- (void)_applyNotificationDeregistrations;
- (void)_areWriteRequestsAllowed:(id)a3 message:(id)a4 completion:(id)a5;
- (void)_auditAndDeregisterCharacteristicsForHAPAccessory:(id)a3;
- (void)_auditChangedCharactersitics:(id)a3;
- (void)_buildCharacteristicWriteRequest:(id)a3 accessoryWriteRequestMapTable:(id)a4 accessoryList:(id)a5 responseTuples:(id)a6 user:(id)a7;
- (void)_cancelPairingWithAccessoryDescription:(id)a3 context:(id)a4;
- (void)_cancelPairingWithAccessoryUUID:(id)a3 context:(id)a4 completionHandler:(id)a5;
- (void)_cleanAddAccessoryOperations;
- (void)_cleanRemovedUsers:(id)a3;
- (void)_clearAccessoryNetworkProtectionStateWithTransaction:(id)a3;
- (void)_clearCHIPStorageWithCompletion:(id)a3;
- (void)_configureBulletinNotification;
- (void)_configureConfiguredResident:(id)a3 desiredConfigState:(unint64_t)a4 message:(id)a5;
- (void)_configureNetworkRouterClientManager:(id)a3;
- (void)_configurePairedAccessoriesForServer:(id)a3 reAddServices:(BOOL)a4;
- (void)_configureUnconfiguredResident:(id)a3 desiredConfigState:(unint64_t)a4;
- (void)_continueLegacyAddAccessoryWithUUID:(id)a3 unassociatedAccessory:(id)a4 setupCode:(id)a5 appID:(id)a6 message:(id)a7;
- (void)_continuePairingAfterUserConsentWithAccessoryDescription:(id)a3 progressHandlerDelegate:(id)a4 message:(id)a5;
- (void)_continuePairingAfterUserConsentWithAccessoryUUID:(id)a3 orUnassociatedAccessory:(id)a4 message:(id)a5;
- (void)_createModifyNotificationsCoalesceTimerIfNeeded;
- (void)_createUniquePSKClientConfigurationWithRequestMessage:(id)a3 pairingEvent:(id)a4 completion:(id)a5;
- (void)_dequeueRetrievalForAccessory:(id)a3 linkType:(int64_t)a4 error:(id)a5;
- (void)_deregisterDeviceForReachabilityNotification:(id)a3;
- (void)_deregisterPairedAccessory:(id)a3;
- (void)_disableDirectCharacteristicNotificationsForClient:(id)a3;
- (void)_disableNotificationsForClient:(id)a3;
- (void)_disableNotificationsForDevices:(id)a3;
- (void)_dispatchCHIPReport:(id)a3 destination:(id)a4;
- (void)_enableMediaNotifications:(void *)a3 directlyOnMediaAccessory:(void *)a4 completion:;
- (void)_enableMediaNotifications:(void *)a3 forMediaAccessory:;
- (void)_enableMultiUserWithMessage:(void *)a1;
- (void)_enableNotificationsForDevices:(id)a3;
- (void)_encodeActionSets:(id)a3 coder:(id)a4;
- (void)_encodeObjectsWithAccessoriesWithCoder:(id)a3;
- (void)_encodeWithCoder:(id)a3;
- (void)_evaluateNetworkProtectionAndRouterManagement;
- (void)_evaluateNetworkProtectionSupport;
- (void)_evaluateNetworkRouterManagementForTransaction:(id)a3;
- (void)_evaluateOwnerTrustZoneCapabilityAndNotify;
- (void)_evaluateShouldRelaunchAndSetRelaunch;
- (void)_fetchMetadataFromPrimaryResidentWithCompletion:(id)a3;
- (void)_fetchMetadataOnCurrentDeviceWithCompletion:(id)a3;
- (void)_getRunTimeStateUpdateWithOptions:(unint64_t)a3 includeMediaAccessorySessionState:(BOOL)a4 includeResidentDeviceState:(BOOL)a5 completion:(id)a6;
- (void)_handleAccessoryReachabilityChange:(id)a3;
- (void)_handleAccessoryReachabilityEventNotificationsRegistration:(id)a3;
- (void)_handleAccessoryReachabilityRegistration:(id)a3;
- (void)_handleAccessoryReachabilityRegistrationAndEnable:(id)a3;
- (void)_handleAccessoryReachabilityUpdatesTimerFired;
- (void)_handleAddAccessories:(id)a3;
- (void)_handleAddAccessory:(id)a3;
- (void)_handleAddAccessoryModel:(id)a3 message:(id)a4;
- (void)_handleAddAccessoryWithDescription:(id)a3;
- (void)_handleAddAccessoryWithDescription:(void *)a3 progressHandlerDelegate:(void *)a4 message:;
- (void)_handleAddActionSet:(id)a3;
- (void)_handleAddActionSetFromBuilder:(id)a3;
- (void)_handleAddActionSetModel:(id)a3 message:(id)a4;
- (void)_handleAddEventTrigger:(id)a3;
- (void)_handleAddEventTriggerModel:(id)a3 message:(id)a4;
- (void)_handleAddHomeOwnedActionSet:(id)a3;
- (void)_handleAddOutgoingHomeInvitationModel:(id)a3 message:(id)a4;
- (void)_handleAddRoom:(id)a3;
- (void)_handleAddRoomModel:(id)a3 message:(id)a4;
- (void)_handleAddServiceGroup:(id)a3;
- (void)_handleAddServiceGroupModel:(id)a3 message:(id)a4;
- (void)_handleAddTimerTrigger:(id)a3;
- (void)_handleAddTimerTriggerModel:(id)a3 message:(id)a4;
- (void)_handleAddTriggerOwnedActionSet:(id)a3;
- (void)_handleAddTriggers:(id)a3;
- (void)_handleAddUserModel:(id)a3 message:(id)a4;
- (void)_handleAddZone:(id)a3;
- (void)_handleAddZoneModel:(id)a3 message:(id)a4;
- (void)_handleAllowUserManagementMessage:(id)a3;
- (void)_handleAssistantAccessControlUpdate:(id)a3;
- (void)_handleCHIPSendRemoteRequestMessage:(id)a3;
- (void)_handleCancelPairingAccessory:(id)a3;
- (void)_handleCharacteristicEnableNotification:(id)a3;
- (void)_handleCharacteristicRead:(id)a3;
- (void)_handleCharacteristicWrite:(id)a3;
- (void)_handleCharacteristicsChangedNotification:(id)a3;
- (void)_handleCoalescedModifyNotifications;
- (void)_handleConfirmResidentRequest:(id)a3;
- (void)_handleContinuePairingAccessory:(id)a3;
- (void)_handleCreateUniquePSKClientConfiguration:(id)a3;
- (void)_handleDidOnboardLocationServicesChange:(id)a3 message:(id)a4;
- (void)_handleDidReceiveIDSMessageWithNoListenerFromAddress:(id)a3;
- (void)_handleDisableNotificationsTimerFired;
- (void)_handleEnableMultiUserRequest:(id)a3;
- (void)_handleEnableNotifications:(id)a3;
- (void)_handleExecuteActionSet:(id)a3;
- (void)_handleExecuteConfirmationOfTrigger:(id)a3;
- (void)_handleFailedAccessories:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 pendingResponses:(id)a6 fastFailedAccessories:(id)a7 slowFailedAccessories:(id)a8 tmpErrorResponseTuples:(id)a9 waitGroup:(id)a10 failureWaitGroup:(id)a11 activity:(id)a12;
- (void)_handleFetchLastModifiedServiceOfType:(id)a3;
- (void)_handleFetchPresenceMapMessage:(id)a3;
- (void)_handleFetchTriggerNameRequest:(id)a3;
- (void)_handleHasAnyUserAcknowledgedCameraRecordingOnboardingChange:(id)a3 message:(id)a4;
- (void)_handleHomeDataRequest:(id)a3;
- (void)_handleHomeLocationChange:(int64_t)a3 previousLocation:(int64_t)a4;
- (void)_handleHomeLocationUpdateFromSharedAdmin:(id)a3;
- (void)_handleHomeUpdateDidOnboardLocationServicesRequest:(id)a3;
- (void)_handleHomeUpdateLocationServicesEnabledRequest:(id)a3;
- (void)_handleJoinOrFormThreadNetworkMessage:(id)a3;
- (void)_handleLegacyAddAccessory:(id)a3;
- (void)_handleLocationServicesEnabledChange:(id)a3 message:(id)a4;
- (void)_handleMediaContentProfileAccessControlUpdate:(id)a3;
- (void)_handleMediaPropertiesRead:(id)a3;
- (void)_handleMediaPropertiesWrite:(id)a3;
- (void)_handleModifyCharacteristicNotifications:(id)a3;
- (void)_handleMultiUserEnabledChange:(id)a3 message:(id)a4;
- (void)_handleMultipleCharacteristicRead:(id)a3;
- (void)_handleMultipleCharacteristicWrite:(id)a3;
- (void)_handleNetworkProtectionModeChangeForTransaction:(id)a3;
- (void)_handlePendingResponsesTimerFired:(BOOL)a3;
- (void)_handleQueryResidentReachabilityForAccessories:(id)a3;
- (void)_handleReadMediaProperties:(id)a3 source:(unint64_t)a4 message:(id)a5 completionHandler:(id)a6;
- (void)_handleReceivedNonCloudSourcedSharedHomeModel;
- (void)_handleRemoteGatewayNotificationRegistration:(id)a3 enable:(BOOL)a4;
- (void)_handleRemoteReachabilityNotificationTimerFired;
- (void)_handleRemoteUserClientCloudShareRepairRequest:(id)a3;
- (void)_handleRemoteUserClientCloudShareRequest:(id)a3;
- (void)_handleRemoveAccessoryAfterUserConsent:(id)a3 message:(id)a4;
- (void)_handleRemoveAccessoryMessage:(id)a3;
- (void)_handleRemoveAccessoryModel:(id)a3 message:(id)a4;
- (void)_handleRemoveActionSet:(id)a3;
- (void)_handleRemoveActionSetModel:(id)a3 message:(id)a4;
- (void)_handleRemoveAppDataModel:(id)a3 message:(id)a4;
- (void)_handleRemoveClientConfiguration:(id)a3;
- (void)_handleRemoveOutgoingHomeInvitationModel:(id)a3 message:(id)a4;
- (void)_handleRemoveRoom:(id)a3;
- (void)_handleRemoveRoomModel:(id)a3 message:(id)a4;
- (void)_handleRemoveServiceGroup:(id)a3;
- (void)_handleRemoveServiceGroupModel:(id)a3 message:(id)a4;
- (void)_handleRemoveTrigger:(id)a3;
- (void)_handleRemoveTriggerModel:(id)a3 message:(id)a4;
- (void)_handleRemoveUser:(id)a3;
- (void)_handleRemoveUserModel:(id)a3 message:(id)a4;
- (void)_handleRemoveZone:(id)a3;
- (void)_handleRemoveZoneModel:(id)a3 message:(id)a4;
- (void)_handleRename:(id)a3;
- (void)_handleRequestHomeDataSync:(id)a3;
- (void)_handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage:(id)a3;
- (void)_handleResetMatterStorageRequest:(id)a3;
- (void)_handleResidentChange;
- (void)_handleResolveThreadNetworkRequest:(id)a3;
- (void)_handleResponseForElectMessageToResident:(id)a3 error:(id)a4;
- (void)_handleRetrieveAsyncResults:(id)a3;
- (void)_handleRetrieveHomeLocationForFeedback:(id)a3;
- (void)_handleRollReaderKey:(id)a3;
- (void)_handleSendingNotificationsForRequest:(id)a3 requestIdentifier:(id)a4 supportsMultiPartResponse:(BOOL)a5 characteristicUpdates:(id)a6 completion:(id)a7;
- (void)_handleSetAppData:(id)a3;
- (void)_handleSetHasAnyUserAcknowledgedCameraRecordingOnboardingRequest:(id)a3;
- (void)_handleSetHasOnboardedForAccessCodeChange:(id)a3 message:(id)a4;
- (void)_handleSetHasOnboardedForAccessCodeMessage:(id)a3;
- (void)_handleSetHasOnboardedForWalletKeyChange:(id)a3 message:(id)a4;
- (void)_handleSetHasOnboardedForWalletKeyMessage:(id)a3;
- (void)_handleSetMinHomeKitVersionForAccessoryNetworkProtectionChange:(id)a3;
- (void)_handleSetMinimumNetworkRouterHomeKitVersion:(id)a3;
- (void)_handleSiriPhraseOptionsStatusChange:(id)a3 message:(id)a4;
- (void)_handleSiriPhraseOptionsUpdateRequest:(id)a3;
- (void)_handleSoundCheckChange:(id)a3 message:(id)a4;
- (void)_handleSoundCheckUpdateRequest:(id)a3;
- (void)_handleStartDiscoveringSymptomsForNearbyDevicesMessage:(id)a3;
- (void)_handleStopDiscoveringSymptomsForNearbyDevicesMessage:(id)a3;
- (void)_handleTestUpgradeToROAR:(id)a3;
- (void)_handleThreadNetworkCredentialsRequest:(id)a3;
- (void)_handleUnjoinThreadNetworkMessage:(id)a3;
- (void)_handleUpdateAppDataModel:(id)a3 message:(id)a4;
- (void)_handleUpdateAutomaticSoftwareUpdate:(id)a3;
- (void)_handleUpdateAutomaticThirdPartyAccessorySoftwareUpdate:(id)a3;
- (void)_handleUpdateMediaPassword:(id)a3;
- (void)_handleUpdateMediaPeerToPeerEnabled:(id)a3;
- (void)_handleUpdateMinimumMediaUserPrivilege:(id)a3;
- (void)_handleUpdateNetworkProtection:(id)a3;
- (void)_handleUpdateNetworkProtectionWithHomeModel:(id)a3 message:(id)a4;
- (void)_handleUpdateOutgoingInvitationState:(id)a3;
- (void)_handleUpdatePresenceConsent:(id)a3;
- (void)_handleUpdateRequestForHomeInvitation:(id)a3 controllerPublicKey:(id)a4 controllerUsername:(id)a5 invitationState:(int64_t)a6 presenceAuthStatus:(id)a7 preferredUserID:(id)a8 fromHandle:(id)a9 fromAddress:(id)a10 issuerPublicKeyER:(id)a11 message:(id)a12 messageResponseHandler:(id)a13;
- (void)_handleUpdateRequestForHomeInvitationFromInvitee:(id)a3;
- (void)_handleUpdateUserAccess:(id)a3;
- (void)_handleUpdateUserAnnounceAccess:(id)a3;
- (void)_handleUpdateUserCamerasAccessLevel:(id)a3;
- (void)_handleUpdatedCharacteristics:(id)a3 accessoryServer:(id)a4 stateNumber:(id)a5 broadcast:(BOOL)a6 internal:(BOOL)a7;
- (void)_handleUserConsentForAccessoryReplacement:(id)a3 consent:(BOOL)a4 message:(id)a5;
- (void)_handleUserConsentResponseForAccessory:(id)a3;
- (void)_handleUserInvitations:(id)a3;
- (void)_handleUserListeningHistoryUpdateControlUpdatedAccessoryUUIDs:(id)a3;
- (void)_handleWriteMediaProperties:(id)a3 source:(unint64_t)a4 requestMessage:(id)a5 completionHandler:(id)a6;
- (void)_incrementCurrentSequenceNumber;
- (void)_loadBalancedRedispatchForAccessories:(id)a3 source:(unint64_t)a4 dispatchGroup:(id)a5 writeRequestMap:(id)a6 requestMessage:(id)a7 responseTuples:(id)a8;
- (void)_migrateAppleMediaAccessoriesWithCloudZone:(id)a3 migrationQueue:(id)a4 completion:(id)a5;
- (void)_migrateHomeAllObjectsCloudZone:(id)a3 migrationGroup:(id)a4 migrationQueue:(id)a5 saveModels:(id)a6 runModels:(id)a7;
- (void)_migrateHomeMediaSettingsCloudZone:(id)a3 migrationQueue:(id)a4 completion:(id)a5;
- (void)_migrateHomeObjectCloudZone:(id)a3 defaultModel:(id)a4 completion:(id)a5;
- (void)_migrateHomeSettingsCloudZone:(id)a3 migrationQueue:(id)a4 completion:(id)a5;
- (void)_migrateHomeUsersCloudZone:(id)a3 migrationQueue:(id)a4 completion:(id)a5;
- (void)_migrateResidentDevicesCloudZone:(id)a3 migrationQueue:(id)a4 completion:(id)a5;
- (void)_migrateUnknownAccessoriesWithCloudZone:(id)a3 accessoryUUIDs:(id)a4 migrationQueue:(id)a5 completion:(id)a6;
- (void)_modifyCharacteristicNotifications:(id)a3 mediaNotifications:(id)a4 actionSetNotificationPayload:(id)a5 enableNotification:(BOOL)a6 withDevice:(id)a7;
- (void)_modifyCharacteristicNotifications:(id)a3 mediaNotifications:(id)a4 actionSetNotificationPayload:(id)a5 enableNotification:(BOOL)a6 withDevice:(id)a7 completion:(id)a8;
- (void)_modifyCharacteristicNotificationsOnResident:(id)a3 mediaNotifications:(id)a4 actionSetNotificationPayload:(id)a5 enableNotification:(BOOL)a6;
- (void)_modifyCharacteristicNotificationsOnResidentUsers:(id)a3 mediaNotifications:(id)a4 actionSetNotificationPayload:(id)a5 enableNotification:(BOOL)a6;
- (void)_notificationPayloadsForRemoteGateway:(void *)a3 accessories:(void *)a4 enableCharacteristicNotificationPayload:(void *)a5 characteristicNotificationThresholdsPayload:(void *)a6 disableCharacteristicNotificationPayload:(void *)a7 enableMediaNotificationPayload:(void *)a8 disableMediaNotificationPayload:;
- (void)_notifyChangedCharacteristics:(id)a3 identifier:(id)a4 multiPartResponse:(BOOL)a5 moreMessagesInMultipart:(BOOL)a6 requestMessage:(id)a7 withCompletionHandler:(id)a8;
- (void)_notifyChangedCharacteristics:(id)a3 message:(id)a4 modifiedCharacteristics:(id)a5 broadcast:(BOOL)a6;
- (void)_notifyChangedCharacteristics:(id)a3 withRequestIdentifier:(id)a4 notificationUpdateIdentifier:(id)a5 toUserDeviceAddress:(id)a6 broadcast:(BOOL)a7;
- (void)_notifyChangedProperties:(id)a3 withRequestIdentifier:(id)a4 notificationUpdateIdentifier:(id)a5 toUserDeviceAddress:(id)a6;
- (void)_notifyClientOfNewlyAddedAccessories:(id)a3 requestMessage:(id)a4;
- (void)_notifyClientsOfAccessoryInfoUpdatedForAccessories:(id)a3 shouldRefreshBadge:(BOOL)a4 withCompletion:(id)a5;
- (void)_notifyClientsOfUpdatedResidentUser:(id)a3;
- (void)_notifyOwnerOfAddedAccessories:(id)a3 completion:(id)a4;
- (void)_notifyRemoteUsersOfChangedCharacteristics:(id)a3 message:(id)a4 broadcast:(BOOL)a5;
- (void)_notifyRemoteUsersOfChangedProperties:(id)a3 requestMessageInformation:(id)a4;
- (void)_notifyRetrievalError:(id)a3 accessoryServer:(id)a4 linkType:(int64_t)a5 accessoryOperationBlock:(id)a6;
- (void)_notifyThreadLayerOfResidentChange;
- (void)_notifyUpdatedCharacteristic:(id)a3 withRequestIdentifier:(id)a4 notificationUpdateIdentifier:(id)a5 toUserDeviceAddress:(id)a6 completion:(id)a7;
- (void)_pairAccessoryWithAccessoryDescription:(id)a3 configuration:(id)a4 pairingEvent:(id)a5 progressHandler:(id)a6 requestMessage:(id)a7;
- (void)_pairAccessoryWithAccessoryDescription:(id)a3 unpairedAccessory:(id)a4 configuration:(id)a5 pairingEvent:(id)a6 requestMessage:(id)a7;
- (void)_performAllowedWriteCharacteristicValues:(unint64_t)a3 source:(void *)a4 identifier:(uint64_t)a5 qualityOfService:(void *)a6 withCompletionHandler:(void *)a7 activity:;
- (void)_performOperation:(id)a3 completion:(id)a4;
- (void)_performPostSaveActionsWithReason:(id)a3;
- (void)_postInternalNotificationForChangedCharacteristics:(id)a3 previouslyNilChangedCharacteristics:(id)a4 modifiedCharacteristics:(id)a5 changedByThisDevice:(BOOL)a6 residentShouldNotifyPeers:(BOOL)a7 message:(id)a8 broadcast:(BOOL)a9;
- (void)_processAccessoriesToAddForUnpairedAccessory:(id)a3 certificationStatus:(int64_t)a4 accessoryServer:(id)a5 networkCredential:(id)a6 pairingEvent:(id)a7 message:(id)a8 completionHandler:(id)a9;
- (void)_processLegacyPairingRequestForMessage:(id)a3 cancelPairing:(BOOL)a4 context:(id)a5;
- (void)_processOutgoingInvitationsRequest:(id)a3;
- (void)_processPairingRequestForMessage:(id)a3 cancelPairing:(BOOL)a4 context:(id)a5;
- (void)_processProductDataForNewlyAddedAccessory:(id)a3 transaction:(id)a4;
- (void)_processUpdatedAccessoryServer:(id)a3 reAddServices:(BOOL)a4;
- (void)_processUpdatedProductDataForAccessory:(id)a3 hapAccessory:(id)a4 transaction:(id)a5;
- (void)_purgeResidentUsers;
- (void)_reachabilityChangedForAccessory:(id)a3 reachable:(BOOL)a4;
- (void)_readCharacteristicValues:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 withCompletionHandler:(id)a6;
- (void)_readCharacteristicValuesForAccessories:(id)a3 readRequestMap:(id)a4 responseTuples:(id)a5 requestMessage:(id)a6 source:(unint64_t)a7 viaDevice:(id)a8 completionHandler:(id)a9;
- (void)_readProfileState:(void *)a3 viaDevice:;
- (void)_reallyRedispatchReadsToDevice:(id)a3 accessories:(id)a4 dispatchGroup:(id)a5 requestMap:(id)a6 requestMessage:(id)a7 source:(unint64_t)a8 responseTuples:(id)a9 activity:(id)a10;
- (void)_reallyRedispatchWritesToDevice:(id)a3 accessories:(id)a4 dispatchGroup:(id)a5 requestMap:(id)a6 requestMessage:(id)a7 source:(unint64_t)a8 responseTuples:(id)a9 activity:(id)a10;
- (void)_reconfigureAccessoriesOnRouterRemovalWithCompletion:(id)a3;
- (void)_redispatchReadForAccessories:(id)a3 dispatchGroup:(id)a4 requestMap:(id)a5 requestMessage:(id)a6 source:(unint64_t)a7 responseTuples:(id)a8 errorResponseTuples:(id)a9;
- (void)_redispatchWriteForAccessories:(id)a3 dispatchGroup:(id)a4 requestMap:(id)a5 requestMessage:(id)a6 source:(unint64_t)a7 responseTuples:(id)a8;
- (void)_reevaluateAccessoryInfoWithBadgeRefresh:(BOOL)a3;
- (void)_refreshCharacteristicValuesOnHomeNotificationEnable;
- (void)_refreshMediaProfilesOnHomeNotificationEnable;
- (void)_refreshUserDisplayNames;
- (void)_registerCameraReachabilityEventNotificationsWithCompletionHandler:(id)a3;
- (void)_registerDeviceForReachabilityNotification:(id)a3 accessoryList:(id)a4;
- (void)_registerForAccessoryReachabilityNotifications:(BOOL)a3 registrationIdentifier:(id)a4 clientIdentifier:(id)a5;
- (void)_registerForMatterFabricNotifications:(BOOL)a3 registrationIdentifier:(id)a4 clientIdentifier:(id)a5;
- (void)_registerForMessages;
- (void)_registerForNotifications;
- (void)_registerForReachabilityChangeNotificationsEnabled:(BOOL)a3 completionHandler:(id)a4;
- (void)_registerForThreadNetworkEvents;
- (void)_registerPairedAccessory:(id)a3 transports:(unint64_t)a4 setupHash:(id)a5;
- (void)_registerResidentReachabilityNotificationWithEnableAccessories:(id)a3 disableAccessories:(id)a4 completionHandler:(id)a5;
- (void)_registerThreadResidentCommissioningMessageHandlers;
- (void)_relayAddTriggerToResident:(id)a3;
- (void)_remoteAccessEnabled:(BOOL)a3;
- (void)_remoteAccessHealthMonitorTimerDidFire;
- (void)_remotelySetNotificationsEnabled:(BOOL)a3 forCharacteristics:(id)a4 characteristicChangeThresholds:(id)a5;
- (void)_removeAccessories:(id)a3 message:(id)a4;
- (void)_removeAccessoriesForPrimaryAccessory:(id)a3 error:(id)a4 completionHandler:(id)a5;
- (void)_removeAccessoriesFromContainers:(id)a3;
- (void)_removeAccessory:(id)a3 completionHandler:(id)a4;
- (void)_removeAccessoryWithUUID:(id)a3 message:(id)a4;
- (void)_removeAllHomeContentsAndAccessoryPairings:(BOOL)a3 queue:(id)a4 completionHandler:(id)a5;
- (void)_removeCharacteristic:(id)a3;
- (void)_removeClientConfigurationWithIdentifier:(id)a3;
- (void)_removeClientConfigurationWithIdentifier:(id)a3 completion:(id)a4;
- (void)_removeCloudData;
- (void)_removeConnectionFromConnectionsDiscoveringSymptomsForNearbyDevices:(id)a3;
- (void)_removeCorruptAccessories;
- (void)_removeMediaSessionWithIdentifier:(id)a3;
- (void)_removeOutgoingInvitationForUser:(id)a3;
- (void)_removePendingAccessoryAdd:(id)a3;
- (void)_removeRetrievalCompletionTuple:(id)a3;
- (void)_removeService:(id)a3;
- (void)_removeTrigger:(id)a3 message:(id)a4;
- (void)_removeUser:(id)a3;
- (void)_removeUser:(id)a3 message:(id)a4;
- (void)_removeUserFromContainer:(id)a3;
- (void)_removeWithMergeSecondaryAccessory:(id)a3 removedFromBridgeAccessory:(id)a4 completionHandler:(id)a5;
- (void)_requestRemoveClientConfigurationWithIdentifier:(id)a3;
- (void)_requestUniquePSKClientConfigurationWithCompletion:(id)a3;
- (void)_resubscribeForNotificationsOnResident:(id)a3;
- (void)_retrieveHAPAccessoryForHMDHAPAccessory:(id)a3 linkType:(int64_t)a4 forceRetrieve:(BOOL)a5 completion:(id)a6;
- (void)_retrievePreferredNetworkWithCompletion:(id)a3;
- (void)_retryStartThreadNetwork:(double)a3;
- (void)_saveAndSyncMatterFabricIDWithCompletion:(id)a3;
- (void)_saveSharedHomeToAccountWithReason:(id)a3 postSyncNotification:(BOOL)a4 options:(id)a5;
- (void)_scheduleApplyNetworkRouterSettingsAction:(id)a3;
- (void)_sendClientCharacteristicsChangedNotificationWithIdentifier:(id)a3 requestMessage:(id)a4 multiPartResponse:(BOOL)a5 moreInMultiPartResponse:(BOOL)a6 characteristicChanges:(id)a7 completionHandler:(id)a8;
- (void)_sendCoalescedRemoteNotificationsForRequestMessage:(id)a3 accessories:(id)a4;
- (void)_sendInvitation:(id)a3 message:(id)a4 shareURL:(id)a5 shareToken:(id)a6 suppressHomeInviteNotification:(BOOL)a7 logEventBuilder:(id)a8;
- (void)_sendInvitationCancelationRequestToInvitee:(id)a3;
- (void)_sendReadRequestToAccessoryServer:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 pendingResponses:(id)a6 slowFailedAccessories:(id)a7 fastFailedAccessories:(id)a8 unreachableWaitGroup:(id)a9 waitGroup:(id)a10 activity:(id)a11;
- (void)_sendRemoteMessageUsingNodeId:(unint64_t)a3 payload:(id)a4 completion:(id)a5;
- (void)_sendRemoveCompletionStatusForHMDAccessories:(id)a3 withCompletion:(id)a4 error:(id)a5;
- (void)_sendResidentInviteWithDestination:(id)a3;
- (void)_sendWriteRequestToAccessoryServer:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 failedAccessories:(id)a6 responseTuples:(id)a7 activity:(id)a8 waitGroup:(id)a9 unreachableWaitGroup:(id)a10;
- (void)_setAccessories:(id)a3;
- (void)_setupActiveNetworkRouterAccessory:(id)a3 existingRouterAccessories:(id)a4;
- (void)_sharedAdminDidFailToAddAccessories:(id)a3;
- (void)_startHomeNotificationDeregistrationTimer;
- (void)_startThreadNetworkOnCommissionerForIOSWithOperationalDataset:(id)a3 completion:(id)a4;
- (void)_startThreadNetworkOnCommissionerWithCompletion:(id)a3;
- (void)_startThreadNetworkOnIOSWithCompletion:(id)a3;
- (void)_startThreadNetworkWithCompletion:(id)a3;
- (void)_stopThreadNetworkWithCompletion:(id)a3;
- (void)_submitRemovalLogEventForAccessory:(id)a3 isLocalRemoval:(BOOL)a4 isLocalFallback:(BOOL)a5 isDuplicate:(BOOL)a6 duplicateCount:(int64_t)a7 error:(id)a8;
- (void)_subscribeForHomeAppleMediaNotificationsOnDirectTransports:(void *)a1;
- (void)_subscribeForHomeNotificationsFromRemoteGateway:(BOOL)a3;
- (void)_subscribeForHomeNotificationsFromRemoteGateway:(BOOL)a3 accessories:(id)a4;
- (void)_subscribeForHomeNotificationsOnDirectTransports:(void *)a1;
- (void)_subscribeForNotificationFromRemoteGateway:(void *)a1;
- (void)_testOnlyAddMediaAccessory:(id)a3 message:(id)a4;
- (void)_unconfigureNetworkRouterClientManager;
- (void)_unconfigurePairedAccessoriesForServer:(id)a3 updateReachability:(BOOL)a4;
- (void)_unitTest_setRetrievalCompletionsTimeout:(double)a3;
- (void)_unjoinThreadNetworkWithCompletion:(id)a3;
- (void)_unregisterForThreadNetworkEvents;
- (void)_updateActiveNetworkRouterAccessory:(id)a3 isReplacement:(BOOL)a4 withTransaction:(id)a5;
- (void)_updateBulletinBoardOfChangedCharacteristics:(id)a3 modifiedCharacteristics:(id)a4 changedByThisDevice:(BOOL)a5 changeNotificationFromPrimary:(BOOL)a6;
- (void)_updateConfigurationStateForResidentDevice:(id)a3 desiredConfigState:(unint64_t)a4 message:(id)a5;
- (void)_updateConfigurationVersion;
- (void)_updateCurrentUserForSharedHome;
- (void)_updateDirectAppleMediaNotificationsOnResidentChange:(void *)a3 previousResidentDevice:;
- (void)_updateExpectConfigurationVersion;
- (void)_updateHomeLocation;
- (void)_updateOutgoingInvitationsWithCompleteUserManagementOperation:(id)a3;
- (void)_updateOwnedTriggers;
- (void)_updateReachabilityChangeToRegisteredDevices:(id)a3;
- (void)_updateResidentFirstAccessoryCommunicationEnabled;
- (void)_updateThreadNetworkWithModel:(id)a3 message:(id)a4;
- (void)_updateWoWState:(id)a3;
- (void)_waitForEarlyDispatchTimeout:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 failedAccessories:(id)a6 responseTuples:(id)a7 activity:(id)a8 unreachableWaitGroup:(id)a9 failureWaitGroup:(id)a10;
- (void)_waitForEarlyDispatchTimeoutOnReadRequest:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 pendingResponses:(id)a6 activity:(id)a7 slowFailedAccessories:(id)a8 tmpErrorResponseTuples:(id)a9 unreachableWaitGroup:(id)a10 failureWaitGroup:(id)a11;
- (void)_waitForWriteRequestFanOut:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 responseTuples:(id)a6 failedAccessories:(id)a7 activity:(id)a8 waitGroup:(id)a9 failureWaitGroup:(id)a10;
- (void)_wol_processChangedCharacteristicResponses:(id)a3;
- (void)_writeCharacteristicValues:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 withCompletionHandler:(id)a6;
- (void)_writeCharacteristicValues:(void *)a3 source:(void *)a4 message:(void *)a5 identifier:(void *)a6 qualityOfService:(void *)a7 withCompletionHandler:(void *)a8 activity:;
- (void)_writeCharacteristicValuesForAccessories:(id)a3 writeRequestMap:(id)a4 responseTuples:(id)a5 requestMessage:(id)a6 viaDevice:(id)a7 source:(unint64_t)a8 completionHandler:(id)a9;
- (void)_writeLogData:(id)a3 logName:(id)a4 completion:(id)a5;
- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didDiscoverAccessories:(id)a5 transaction:(id)a6 error:(id)a7;
- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didStopPairingWithError:(id)a5;
- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateCategory:(id)a5;
- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateConnectionState:(BOOL)a5 linkLayerType:(int64_t)a6 bookkeeping:(id)a7 withError:(id)a8;
- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateConnectionState:(BOOL)a5 sessionInfo:(id)a6 linkLayerType:(int64_t)a7 withError:(id)a8;
- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateHasPairings:(BOOL)a5;
- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateValuesForCharacteristics:(id)a5 stateNumber:(id)a6 broadcast:(BOOL)a7;
- (void)accessoryBrowser:(id)a3 didAddAccessoryAdvertisement:(id)a4;
- (void)accessoryBrowser:(id)a3 didFindAccessoryServer:(id)a4 stateChanged:(BOOL)a5 stateNumber:(id)a6 completion:(id)a7;
- (void)accessoryBrowser:(id)a3 didFindAccessoryServerNeedingReprovisioning:(id)a4 error:(id)a5;
- (void)accessoryBrowser:(id)a3 didFinishPairingForAccessoryServer:(id)a4;
- (void)accessoryBrowser:(id)a3 didFinishWACForAccessoryWithIdentifier:(id)a4 error:(id)a5;
- (void)accessoryBrowser:(id)a3 didRemoveAccessoryAdvertisement:(id)a4;
- (void)accessoryBrowser:(id)a3 didRemoveAccessoryServer:(id)a4 error:(id)a5;
- (void)accessoryBrowser:(id)a3 didTombstoneAccessoryServer:(id)a4;
- (void)accessoryBrowser:(id)a3 didUpdateEndpoint:(id)a4;
- (void)accessoryBrowser:(id)a3 didUpdateReachability:(BOOL)a4 forBTLEAccessoriesWithServerIdentifier:(id)a5;
- (void)accessoryBrowser:(id)a3 discoveryFailedWithError:(id)a4 accessoryServer:(id)a5 linkType:(int64_t)a6;
- (void)accessoryBrowser:(id)a3 identifier:(id)a4 reachable:(BOOL)a5;
- (void)addAccessory:(id)a3;
- (void)addCompanionAsResidentUser:(id)a3;
- (void)addMediaSession:(id)a3;
- (void)addMediaSessionState:(id)a3;
- (void)addNewlyConfiguredAccessories:(id)a3 addSessionIdentifier:(id)a4;
- (void)addNotificationDeregistrationForClientIdentifier:(id)a3;
- (void)addNotificationRegistrationForClientIdentifier:(id)a3 includesAppleMediaAccessories:(BOOL)a4;
- (void)addOutgoingInvitation:(id)a3;
- (void)addResidentCapableDevice:(id)a3;
- (void)addSharedUserEventBuilder:(id)a3;
- (void)addSharedUserResponseEventBuilder:(id)a3;
- (void)addToCurrentTriggers:(id)a3;
- (void)addUnconfiguredResidentDevice:(id)a3;
- (void)addUser:(id)a3;
- (void)aggregator:(id)a3 accessoryCapabilitiesWithUUID:(id)a4 completion:(id)a5;
- (void)aggregator:(id)a3 changedAccessoryCapabilities:(id)a4 rawCapabilities:(id)a5 accessoryUUID:(id)a6 homeUUID:(id)a7;
- (void)aggregator:(id)a3 changedResidentCapabilities:(id)a4 rawCapabilities:(id)a5 accessoryUUID:(id)a6 homeUUID:(id)a7;
- (void)aggregator:(id)a3 residentCapabilitiesWithUUID:(id)a4 completion:(id)a5;
- (void)auditUsersForNotifications:(id)a3;
- (void)btleAccessoryReachabilityProbeTimer:(BOOL)a3;
- (void)checkTimerTriggers;
- (void)cleanChangesIfNoAddChangeObjectID:(id)a3 completion:(id)a4;
- (void)clientController:(id)a3 didReceiveFetchedCachedEvents:(id)a4 source:(id)a5;
- (void)computeBridgedAccessoriesForAllBridges;
- (void)configureAccessorySettingsMessengerWithMessengerFactory:(id)a3 messageHandlerFactory:(id)a4;
- (void)configureAfterAccessoriesConfigurationTrackerNotificationsWithCurrentAccessory:(id)a3 accessories:(id)a4 uncommittedTransactions:(id)a5;
- (void)configureAppleMediaAccessoriesStateManagerWithStateManagerWithFactory:(id)a3 messengerFactory:(id)a4 metricsDispatcherFactory:(id)a5;
- (void)configureBulletinNotification;
- (void)configureMediaDestinationControllersForAccessories:(id)a3;
- (void)configureMediaGroupObjects;
- (void)configureMediaGroupsAggregateConsumer;
- (void)configureMediaGroupsAggregator;
- (void)configureMediaGroupsUnconfiguredParticipantOnboardingManager;
- (void)configureMediaSystems;
- (void)configureMultiuserSettingsMessengerWithMessengerFactory:(id)a3;
- (void)configureNaturalLightingForDemoMode;
- (void)configureNaturalLightingWithDemoModeEnabled:(BOOL)a3;
- (void)configurePrimaryResidentMessageRouterWithFactory:(id)a3 metricsDispatcherFactory:(id)a4;
- (void)configureRemoteEventRouterClientControllerForAccessories:(id)a3;
- (void)configureSiriEndpointProfilesMessengerWithMessengerFactory:(id)a3 messageHandlerFactory:(id)a4;
- (void)configureUnifiedLanguageValueListSettingDataProviderWithFactory:(id)a3;
- (void)connectToThreadAccessoryWithExtendedMACAddress:(id)a3 completion:(id)a4;
- (void)createRemoteEventRouterServerIfNeeded;
- (void)dealloc;
- (void)didReceiveAccessorySetting:(id)a3 accessoryUUID:(id)a4;
- (void)didUpdateAggregateDataForMediaGroupsAggregateConsumer:(id)a3;
- (void)disableNotificationsForDevices:(id)a3;
- (void)dispatchRequestToEvaluateCondition:(id)a3 forCharacteristics:(id)a4 completion:(id)a5;
- (void)downloadLogWithController:(id)a3 nodeId:(id)a4 type:(int64_t)a5 timeout:(double)a6 completion:(id)a7;
- (void)dropAllChangesWithArrayOfObjectIDs:(id)a3;
- (void)dropAllChangesWithObjectID:(id)a3;
- (void)enableHomeNotificationsForMediaAccessory:(id)a3;
- (void)enableLocationServiceSettings;
- (void)enableMediaNotifications:(BOOL)a3 directlyOnMediaAccessory:(id)a4 completion:(id)a5;
- (void)enableMediaNotifications:(BOOL)a3 directlyOnMediaAccessory:(id)a4 forStateManager:(id)a5 completion:(id)a6;
- (void)enableMultiUser;
- (void)enableNotificationsForDevices:(id)a3;
- (void)enableUserListeningHistoryForAccessoryUUID:(id)a3 userUUID:(id)a4;
- (void)encodeMediaSystemsWithCoder:(id)a3 modifiedOptions:(unint64_t)a4;
- (void)encodeWithCoder:(id)a3;
- (void)endReportingSessionForMessage:(id)a3;
- (void)evaluateNotificationConditionForCharacteristics:(id)a3 homePresence:(id)a4 completion:(id)a5;
- (void)evaluateResidentUpdate;
- (void)evaluateShouldRelaunchAndSetRelaunch;
- (void)executeActionSet:(id)a3;
- (void)executeActionsFromMessage:(id)a3;
- (void)fetchAllMigratedObjectsForCloudZone:(id)a3 completion:(id)a4;
- (void)fetchOperationalCertificatesForNewFabricWithFabricID:(id)a3 publicKey:(id)a4 fetchFromResident:(BOOL)a5 completion:(id)a6;
- (void)filterServiceTransactions:(id)a3 removedServiceUUIDs:(id)a4;
- (void)finishPairingForServer:(id)a3;
- (void)fixupHomeAfterDecoding;
- (void)getReachableIPAccessories:(unint64_t *)a3 btleAccessories:(unint64_t *)a4 mediaAccessories:(unint64_t *)a5;
- (void)getRunTimeStateUpdateWithOptions:(unint64_t)a3 includeMediaAccessorySessionState:(BOOL)a4 includeResidentDeviceState:(BOOL)a5 completion:(id)a6;
- (void)handleAccessoryDidAddNetworkRouterControllerNotification:(id)a3;
- (void)handleAccessoryDidRemoveNetworkRouterControllerNotification:(id)a3;
- (void)handleAccessoryReachabilityChangeNotification:(id)a3;
- (void)handleAccountHandlesUpdated:(id)a3;
- (void)handleActiveAccountChanged:(id)a3;
- (void)handleCATUpdate;
- (void)handleCHIPSendRemoteRequestMessage:(id)a3;
- (void)handleCHIPSendReportMessage:(id)a3;
- (void)handleClientProcessDisconnectedNotification:(id)a3;
- (void)handleCommissioningCertificateRequest:(id)a3;
- (void)handleCommissioningCertificateRequestWithCommissionerNodeID:(id)a3 commissioneeNodeID:(id)a4 fabricID:(id)a5 publicKey:(id)a6 sender:(id)a7 completion:(id)a8;
- (void)handleCurrentUserPrivilegeChanged:(id)a3;
- (void)handleCurrentWiFiNetworkChangedNotification:(id)a3;
- (void)handleDeviceCapabilitiesUpdated:(id)a3;
- (void)handleDidReceiveIDSMessageWithNoListener:(id)a3;
- (void)handleEvaluatePredicateMessage:(id)a3;
- (void)handleFetchLightProfileSettingsMessage:(id)a3;
- (void)handleFetchLightProfileSettingsMessage:(id)a3 withLightProfileUUIDs:(id)a4;
- (void)handleFirstProcessDidBecomeActiveNotification:(id)a3;
- (void)handleHomeWasRemoved;
- (void)handleLastProcessDidBecomeInactiveNotification:(id)a3;
- (void)handleMatterPairingCompletionNotification:(id)a3;
- (void)handlePrimaryResidentChangeNotification:(id)a3;
- (void)handleRemoteDeviceBecameReachableNotification:(id)a3;
- (void)handleRemoveAccessory:(id)a3 completion:(id)a4;
- (void)handleRemoveAccessoryMessage:(id)a3;
- (void)handleRemovedMediaSessions:(id)a3;
- (void)handleReportingSessionResponseMessage:(id)a3;
- (void)handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage:(id)a3;
- (void)handleResetMatterStorageRequest:(id)a3;
- (void)handleSetPreferredPrimaryMessage:(id)a3;
- (void)handleSignificantTimeChange;
- (void)handleSiriEndPointAddedNotification:(id)a3;
- (void)handleUpdatedCHIPPropertiesOnHomeModel:(id)a3 actions:(id)a4;
- (void)handleUpdatedCharacteristics:(id)a3 accessoryServer:(id)a4;
- (void)handleXPCConnectionInvalidated:(id)a3;
- (void)incrementOperatePrivilegeCATVersion:(id)a3;
- (void)invokeCommandWithNodeId:(unint64_t)a3 endpointId:(id)a4 clusterId:(id)a5 commandId:(id)a6 fields:(id)a7 timedInvokeTimeout:(id)a8 source:(unint64_t)a9 completion:(id)a10;
- (void)mediaSystemController:(id)a3 didRemoveMediaSystem:(id)a4;
- (void)mediaSystemController:(id)a3 removeAccessories:(id)a4 fromAssistantAccessControl:(id)a5;
- (void)mergeMediaDestinationControllerDataWithConsumer:(id)a3;
- (void)mergeMediaDestinationsWithConsumer:(id)a3;
- (void)mergeMediaGroupsAggregateDataWithConsumer:(id)a3;
- (void)migrateAfterCloudMerge:(id)a3;
- (void)migrateAfterResidentChange;
- (void)migrateCloudZone:(id)a3 completion:(id)a4;
- (void)migrateLegacyLocationServiceSettings;
- (void)modifyCharacteristicNotifications:(id)a3 mediaNotifications:(id)a4 actionSetNotificationPayload:(id)a5 enableNotification:(BOOL)a6 withDevice:(id)a7;
- (void)notifyClientOfVendorInfoUpdatedForManufacturers:(id)a3 withCompletion:(id)a4;
- (void)notifyClientsOfAccessoryInfoUpdatedForAccessories:(id)a3;
- (void)notifyClientsOfReachabilityUpdateForAccessory:(id)a3;
- (void)notifyNewRemotePeersFound:(BOOL)a3 remoteUsersRemoved:(id)a4 forceRemoteNotificationRegistration:(BOOL)a5;
- (void)notifyOfAddedAccessory:(id)a3;
- (void)notifyOfChangedCharacteristic:(id)a3 changedByThisDevice:(BOOL)a4 residentShouldNotifyPeers:(BOOL)a5 message:(id)a6;
- (void)notifyOfNewlyAddedAccessoryByThisOwnerDevice:(id)a3;
- (void)notifyOfRemovedAccessory:(id)a3 source:(unint64_t)a4;
- (void)notifyRemoteUsersOfChangedCharacteristics:(id)a3 message:(id)a4 broadcast:(BOOL)a5;
- (void)notifyRemoteUsersOfChangedProperties:(id)a3 requestMessageInformation:(id)a4;
- (void)onThreadNetworkCallStateChange:(BOOL)a3;
- (void)onThreadNetworkConnectionStateChange:(int64_t)a3;
- (void)onThreadNetworkNodeTypeStateChange:(int64_t)a3;
- (void)onThreadNetworkPeripheralDeviceNodeTypeChange:(id)a3;
- (void)onThreadNetworkWakeOnDeviceConnectionStateChange:(id)a3;
- (void)performLocalAddAccessoryWithDescription:(id)a3 progressHandlerDelegate:(id)a4 completion:(id)a5;
- (void)performPostSaveActionsWithReason:(id)a3;
- (void)queryPrimaryResidentReachabilityForAccessories:(id)a3 completion:(id)a4;
- (void)reEvaluateHomeHubState;
- (void)reEvaluateTriggers;
- (void)reachabilityChangedForAccessory:(id)a3 reachable:(BOOL)a4;
- (void)readAttributeWithNodeId:(unint64_t)a3 endpointId:(id)a4 clusterId:(id)a5 attributeId:(id)a6 params:(id)a7 completion:(id)a8;
- (void)readCharacteristicValues:(id)a3 identifier:(id)a4 source:(unint64_t)a5 qualityOfService:(int64_t)a6 withCompletionHandler:(id)a7;
- (void)readCharacteristicValues:(id)a3 source:(unint64_t)a4 qualityOfService:(int64_t)a5 withCompletionHandler:(id)a6;
- (void)readCharacteristicValues:(id)a3 source:(unint64_t)a4 sourceForLogging:(id)a5 qualityOfService:(int64_t)a6 withCompletionHandler:(id)a7;
- (void)readProfileState:(id)a3 viaDevice:(id)a4;
- (void)redispatchMediaReadRequests:(id)a3 viaDevice:(id)a4 completion:(id)a5;
- (void)redispatchMediaWriteRequests:(id)a3 viaDevice:(id)a4 completion:(id)a5;
- (void)redispatchToResidentMessage:(id)a3 target:(id)a4 responseQueue:(id)a5;
- (void)redispatchToResidentMessage:(id)a3 target:(id)a4 responseQueue:(id)a5 viaDevice:(id)a6;
- (void)reevaluateAccessoryInfo;
- (void)refreshUserDisplayNames;
- (void)regionStateUpdated;
- (void)registerCameraReachabilityEventNotificationsWithCompletionHandler:(id)a3;
- (void)registerForAccessoryReachabilityNotifications:(BOOL)a3 registrationIdentifier:(id)a4;
- (void)registerForDeviceWithCapabilities;
- (void)registerForMatterFabricNotifications:(BOOL)a3 registrationIdentifier:(id)a4;
- (void)registerForMatterFabricNotifications:(BOOL)a3 registrationIdentifier:(id)a4 clientIdentifier:(id)a5;
- (void)remoteAccessEnabled:(BOOL)a3;
- (void)remoteAccessHealthMonitorTimerDidFire;
- (void)remotelySetNotificationsEnabled:(BOOL)a3 forCharacteristics:(id)a4 characteristicChangeThresholds:(id)a5;
- (void)removeAccessory:(id)a3;
- (void)removeAccessory:(id)a3 completionHandler:(id)a4;
- (void)removeAllHomeContentsAndAccessoryPairings:(BOOL)a3 queue:(id)a4 completionHandler:(id)a5;
- (void)removeAllUsersAndCloudDataFromAccessory:(id)a3 completionHandler:(id)a4;
- (void)removeBulletinBoardNotificationsMigrationFileFromDisk;
- (void)removeCameraNotificationSettingsMigrationFileFromDisk;
- (void)removeCharacteristic:(id)a3;
- (void)removeFromCurrentTriggers:(id)a3;
- (void)removeMediaSession:(id)a3;
- (void)removeMediaSessionState:(id)a3;
- (void)removeNotificationDeregistrationForClientIdentifier:(id)a3;
- (void)removeOutgoingInvitation:(id)a3;
- (void)removeResidentCapableDevice:(id)a3;
- (void)removeService:(id)a3;
- (void)removeSharedUserEventBuilder:(id)a3;
- (void)removeSharedUserResponseEventBuilder:(id)a3;
- (void)removeThreadNetworkPreferredNetworkWithCompletion:(id)a3;
- (void)removeTrigger:(id)a3;
- (void)removeTriggerNoNotification:(id)a3;
- (void)removeUnconfiguredResidentDeviceWithUserID:(id)a3;
- (void)removeUser:(id)a3;
- (void)removeUserWithUserID:(id)a3;
- (void)removeWithMergeSecondaryAccessory:(id)a3 removedFromBridgeAccessory:(id)a4 completionHandler:(id)a5;
- (void)resetAccessoryHashedRouteIdentifiers;
- (void)resetConfiguration;
- (void)residentDeviceManager:(id)a3 didUpdatePrimaryResident:(id)a4 previousPrimaryResident:(id)a5;
- (void)residentDeviceManager:(id)a3 didUpdateResidentAvailable:(BOOL)a4;
- (void)residentDeviceManagerDidUpdateResidents:(id)a3;
- (void)respondMessage:(id)a3 withSettingResults:(id)a4;
- (void)resubscribeForNotificationsOnResident:(id)a3;
- (void)retrieveHAPAccessoryForHMDAccessory:(id)a3 linkType:(int64_t)a4 forceRetrieve:(BOOL)a5 queue:(id)a6 completion:(id)a7;
- (void)retrieveOperationalCertificatesForFabricID:(id)a3 commissionerNodeID:(id)a4 commissioneeNodeID:(id)a5 publicKey:(id)a6 completion:(id)a7;
- (void)retrieveStateForTrackedAccessory:(id)a3 stateNumber:(id *)a4 isReachable:(BOOL *)a5 linkQuality:(unint64_t *)a6 lastSeen:(id *)a7;
- (void)retrieveThreadNetworkMetadataWithCompletion:(id)a3;
- (void)runDailyTask;
- (void)runLocationServicesEnabledUpdateWithValue:(BOOL)a3;
- (void)runLocationServicesEnabledUpdateWithValue:(BOOL)a3 message:(id)a4;
- (void)saveAndSyncWithThreadOperationalDataset:(id)a3;
- (void)saveSharedHomeToAccountWithReason:(id)a3 postSyncNotification:(BOOL)a4 options:(id)a5;
- (void)saveToCurrentAccountWithReason:(id)a3;
- (void)saveWithReason:(id)a3 information:(id)a4 postSyncNotification:(BOOL)a5;
- (void)saveWithReason:(id)a3 information:(id)a4 postSyncNotification:(BOOL)a5 objectChange:(BOOL)a6;
- (void)saveWithReason:(id)a3 postSyncNotification:(BOOL)a4;
- (void)saveWithReason:(id)a3 postSyncNotification:(BOOL)a4 objectChange:(BOOL)a5;
- (void)scheduleRemoval;
- (void)setAccessCodeManager:(id)a3;
- (void)setAccessories:(id)a3;
- (void)setAccessoryBrowser:(id)a3;
- (void)setAccessoryConnectionCoordinator:(id)a3;
- (void)setAccessoryMessageRouterViaPrimary:(id)a3;
- (void)setAccessoryReaderWriter:(id)a3;
- (void)setAccessorySettingsMessenger:(id)a3;
- (void)setActionSets:(id)a3;
- (void)setActiveNetworkRouterInitialSetupNeeded:(BOOL)a3;
- (void)setActiveNetworkRouterUUID:(id)a3;
- (void)setAddPendingAccessories:(id)a3;
- (void)setAddPendingAccessorySetupCodeHandlers:(id)a3;
- (void)setAddPendingAccessorySetupCodes:(id)a3;
- (void)setAdminUser:(BOOL)a3;
- (void)setAllowsRemoteAccess:(BOOL)a3;
- (void)setAnyBTLEAccessoryReachable:(BOOL)a3;
- (void)setAppData:(id)a3;
- (void)setAppleDeviceRouter:(id)a3;
- (void)setAppleMediaAccessoriesStateManager:(id)a3;
- (void)setAssistantOperations:(id)a3;
- (void)setAtHomeLevel:(int64_t)a3;
- (void)setAudioAnalysisClassifierOptions:(unint64_t)a3;
- (void)setAudioAnalysisStereoPairController:(id)a3;
- (void)setAutomaticSoftwareUpdateEnabled:(BOOL)a3;
- (void)setAutomaticThirdPartyAccessorySoftwareUpdateEnabled:(BOOL)a3;
- (void)setAvailableBSPsCount:(id)a3;
- (void)setAvailableBorderRouters:(id)a3;
- (void)setBackingStore:(id)a3;
- (void)setBulletinNotificationsSupported:(BOOL)a3;
- (void)setCHIPReportHandlerWithSubscriber:(id)a3 handler:(id)a4;
- (void)setCameraReachabilityEventNotificationsEnabled:(BOOL)a3 forAccessory:(id)a4 completionHandler:(id)a5;
- (void)setCapabilitiesAggregator:(id)a3;
- (void)setChipLocalSubscribers:(id)a3;
- (void)setChipStorage:(id)a3;
- (void)setConfigurationVersion:(int64_t)a3;
- (void)setCreationDate:(id)a3;
- (void)setCurrentAdministerCATID:(id)a3;
- (void)setCurrentDeviceBecamePrimaryTime:(double)a3;
- (void)setCurrentHomeKitVersion:(id)a3;
- (void)setCurrentMatterClientRegistration:(BOOL)a3;
- (void)setCurrentOperateCATID:(id)a3;
- (void)setCurrentRemoteReachabilityRegistration:(BOOL)a3;
- (void)setCurrentTriggers:(id)a3;
- (void)setDidOnboardAudioAnalysis:(BOOL)a3;
- (void)setDidOnboardLocationServices:(BOOL)a3;
- (void)setDisableNotificationTimer:(id)a3;
- (void)setDiscoveredAccessories:(id)a3;
- (void)setExpectedConfigurationVersion:(int64_t)a3;
- (void)setFabric:(id)a3;
- (void)setFeatureDataSource:(id)a3;
- (void)setFirstHAPAccessoryAddedDate:(id)a3;
- (void)setHasAnyUserAcknowledgedCameraRecordingOnboarding:(BOOL)a3;
- (void)setHasOnboardedForAccessCode:(BOOL)a3;
- (void)setHasOnboardedForWalletKey:(BOOL)a3;
- (void)setHeartbeatPingMessagesQueuedWithServer:(id)a3;
- (void)setHomeHubState:(unint64_t)a3;
- (void)setHomeLocation:(int64_t)a3;
- (void)setHomeManager:(id)a3;
- (void)setHomeReprovisionHandler:(id)a3;
- (void)setHomeUpdatedToROARAndInformClients;
- (void)setIsNetworkAvailable:(BOOL)a3;
- (void)setIsSiriPhraseOptionsHeySiriEnabled:(BOOL)a3;
- (void)setIsSiriPhraseOptionsJustSiriEnabled:(BOOL)a3;
- (void)setIsSmokeAlarmEnabled:(BOOL)a3;
- (void)setIsUpdatedToHH2:(BOOL)a3;
- (void)setLabelsByAccessCode:(id)a3;
- (void)setLastSyncedConfigurationVersion:(int64_t)a3;
- (void)setLocationServicesEnabled:(BOOL)a3;
- (void)setMediaActionRouter:(id)a3;
- (void)setMediaGroupsAggregator:(id)a3;
- (void)setMediaGroupsUnconfiguredParticipantOnboardingManager:(id)a3;
- (void)setMediaPassword:(id)a3;
- (void)setMediaPeerToPeerEnabled:(BOOL)a3;
- (void)setMediaSessionStates:(id)a3;
- (void)setMediaSessions:(id)a3;
- (void)setMediaSettingsValue:(int64_t)a3 mediaPassword:(id)a4 enabled:(BOOL)a5;
- (void)setMediaStateManager:(id)a3;
- (void)setMediaSystemController:(id)a3;
- (void)setMigratingAfterResidentChange:(BOOL)a3;
- (void)setMigrationNeeded:(BOOL)a3;
- (void)setMinHomeKitVersionForAccessoryNetworkProtectionChange:(id)a3;
- (void)setMinimumMediaUserPrivilege:(int64_t)a3;
- (void)setMinimumNetworkRouterSupportHomeKitVersion:(id)a3;
- (void)setModifyNotificationsCoalesceTimer:(id)a3;
- (void)setMsgDispatcher:(id)a3;
- (void)setMultiUserEnabled:(BOOL)a3;
- (void)setMultiuserSettingsMessenger:(id)a3;
- (void)setName:(id)a3;
- (void)setNaturalLightingContext:(id)a3;
- (void)setNaturalLightingContextUpdater:(id)a3;
- (void)setNetManagerFactory:(id)a3;
- (void)setNetworkProtectionGroupRegistry:(id)a3;
- (void)setNetworkRouterSupport:(unint64_t)a3;
- (void)setNetworkRouterSupportDisableReason:(unint64_t)a3;
- (void)setNfcReaderKey:(id)a3;
- (void)setNotificationHandlerMap:(id)a3;
- (void)setNotificationRegistry:(id)a3;
- (void)setNotificationsUpdatedTime:(id)a3;
- (void)setOutgoingInvitations:(id)a3;
- (void)setOverriddenHomeAccessControl:(id)a3;
- (void)setOverrideSentinelZoneForConvergencePeriod:(BOOL)a3;
- (void)setOwnedTriggers:(id)a3;
- (void)setOwnerName:(id)a3;
- (void)setOwnerTrustZoneCapable:(BOOL)a3;
- (void)setOwnerUser:(BOOL)a3;
- (void)setPendingResponses:(id)a3;
- (void)setPendingResponsesForRemoteAccessSetup:(id)a3;
- (void)setPendingResponsesTimer:(id)a3;
- (void)setPersonManagerSettings:(id)a3;
- (void)setPersonManagerZoneUUID:(id)a3;
- (void)setPresenceAuthStatus:(id)a3;
- (void)setPresenceComputeStatus:(id)a3;
- (void)setPresenceMonitor:(id)a3;
- (void)setPreviousReachableAccessoriesCount:(int64_t)a3;
- (void)setPreviousReachableAccessoriesCountExcludingMatter:(int64_t)a3;
- (void)setPreviousReachableAppleMediaAccessoriesCount:(int64_t)a3;
- (void)setPrimaryNetworkRouterManagingDeviceUUID:(id)a3;
- (void)setPrimaryResidentChangedTime:(double)a3;
- (void)setPrimaryResidentMessageRouter:(id)a3;
- (void)setProtectionMode:(int64_t)a3;
- (void)setReachabilityNotificationTimer:(id)a3;
- (void)setReachabilityRegisteredDevices:(id)a3;
- (void)setRegisteredNotificationWithRemoteGateway:(BOOL)a3;
- (void)setRemoteAccessEnabled:(BOOL)a3;
- (void)setRemoteAccessIsEnabled:(BOOL)a3;
- (void)setRemoteEventRouterClientController:(id)a3;
- (void)setRemoteEventRouterServer:(id)a3;
- (void)setRemoteReachabilityNotificationPendingAccessories:(id)a3;
- (void)setRemoveAccessoryInProgressForHMDAccessories:(id)a3;
- (void)setRemovedUserInfoByAccessCode:(id)a3;
- (void)setRemovedUsers:(id)a3;
- (void)setResidentFirstAccessoryCommunicationEnabled:(BOOL)a3;
- (void)setRetrievalAccessoryCompletionTuples:(id)a3;
- (void)setRoomForEntireHome:(id)a3;
- (void)setRooms:(id)a3;
- (void)setRouterClientManager:(id)a3;
- (void)setServiceGroups:(id)a3;
- (void)setServices:(id)a3;
- (void)setSharedAdmin:(BOOL)a3;
- (void)setSharedHomeSourceVersion:(id)a3;
- (void)setSiriEndpointProfilesMessenger:(id)a3;
- (void)setSiriPhraseOptions:(unint64_t)a3;
- (void)setSoundCheckEnabled:(BOOL)a3;
- (void)setStartThreadNetworkInProgress:(BOOL)a3;
- (void)setThreadNetworkConnectionState:(int64_t)a3;
- (void)setThreadNetworkID:(id)a3;
- (void)setThreadNetworkIsUp:(BOOL)a3;
- (void)setThreadNetworkNodeType:(int64_t)a3;
- (void)setThreadNetworkPeriodicStatusReporter:(id)a3;
- (void)setThreadNetworkSequenceNumber:(unint64_t)a3;
- (void)setThreadNetworkShouldRestartOnNetworkChange:(BOOL)a3;
- (void)setThreadOperationalDataset:(id)a3;
- (void)setThreadPreferredNetworkExists:(BOOL)a3;
- (void)setTriggerOwnedActionSets:(id)a3;
- (void)setUnconfiguredResidentDevices:(id)a3;
- (void)setUnifiedLanguageValueListSettingDataProvider:(id)a3;
- (void)setUserActionPredictionManager:(id)a3;
- (void)setUsersPendingUserManagementOperations:(id)a3;
- (void)setUuidToHAPAccessoryConfigTable:(id)a3;
- (void)setWatchSkipVersionCheck:(BOOL)a3;
- (void)setWiFiAssertion:(id)a3;
- (void)setWifiManagerFactory:(id)a3;
- (void)setWorkQueue:(id)a3;
- (void)setZones:(id)a3;
- (void)setupBackingStore;
- (void)startReportingSessionForMessage:(id)a3;
- (void)startThreadAccessoryFirmwareUpdateWithExtendedMACAddress:(id)a3 isWedDevice:(BOOL)a4 completion:(id)a5;
- (void)startThreadAccessoryPairingWithExtendedMACAddress:(id)a3 isWedDevice:(BOOL)a4 completion:(id)a5;
- (void)startThreadNetwork:(BOOL)a3;
- (void)stopThreadAccessoryFirmwareUpdateWithCompletion:(id)a3;
- (void)stopThreadAccessoryPairingWithCompletion:(id)a3;
- (void)stopThreadNetwork:(BOOL)a3;
- (void)stopThreadNetworkWithCompletion:(BOOL)a3 completion:(id)a4;
- (void)storeMigrationBulletinBoardNotificationsToDisk;
- (void)storeMigrationCameraNotificationSettingsToDisk;
- (void)storeMigrationCharacteristicsAuthorizationData;
- (void)submitLogEventForCommandResponse:(id)a3 nodeID:(unint64_t)a4 endpointID:(id)a5 clusterID:(id)a6 commandID:(id)a7 fields:(id)a8 source:(unint64_t)a9 error:(id)a10;
- (void)submitLogEventForWriteAttributeWithNodeId:(unint64_t)a3 endpointId:(id)a4 clusterId:(id)a5 attributeId:(id)a6 value:(id)a7 timedWriteTimeout:(id)a8 error:(id)a9;
- (void)subscribeForNotificationsFromRemoteGateway;
- (void)suspendedStateChangedForAccessory:(id)a3 suspendedState:(unint64_t)a4;
- (void)timerDidFire:(id)a3;
- (void)transactionObjectRemoved:(id)a3 message:(id)a4;
- (void)transactionObjectUpdated:(id)a3 newValues:(id)a4 message:(id)a5;
- (void)unconfigure;
- (void)updateActionSetExecutionDates:(id)a3;
- (void)updateAppData:(id)a3 identifierKey:(id)a4 lookup:(id)a5;
- (void)updateCATIDForUsersIfNeeded:(BOOL)a3;
- (void)updateCATIDsForUsersIfNeeded:(BOOL)a3 completion:(id)a4;
- (void)updateHasOnboardedForWalletKey:(BOOL)a3 message:(id)a4;
- (void)updateHomeConfigurationWithModel:(id)a3 message:(id)a4;
- (void)updateHomeFirstHAPAccessoryAddedDateToNow;
- (void)updateHomeLocation;
- (void)updateLightProfilesSettings:(id)a3;
- (void)updateLightProfilesSettingsWithRequiresHomeNotificationsEnabled:(BOOL)a3;
- (void)updateMediaStateWithResponses:(void *)a3 requestMessageInformation:;
- (void)updateNetworkConnectivity:(BOOL)a3 companionReachable:(BOOL)a4;
- (void)updateNetworkRouterManagingDeviceSettingsWithModel:(id)a3 message:(id)a4;
- (void)updateNetworkRouterSettingsWithModel:(id)a3 message:(id)a4;
- (void)updateROARStatus:(id)a3 message:(id)a4;
- (void)updateThreadOperationalDatasetWithHomeModel:(id)a3 message:(id)a4;
- (void)updateUserCATWithOperatePrivilege:(id)a3 administerPrivilege:(id)a4;
- (void)updateUserCATWithOperatePrivilege:(id)a3 administerPrivilege:(id)a4 completion:(id)a5;
- (void)userAssistantAccessControlDidUpdate:(id)a3 accessories:(id)a4;
- (void)userManagementOperationDidFinish:(id)a3;
- (void)writeAttributeWithNodeId:(unint64_t)a3 endpointId:(id)a4 clusterId:(id)a5 attributeId:(id)a6 value:(id)a7 timedWriteTimeout:(id)a8 completion:(id)a9;
- (void)writeCharacteristicValues:(id)a3 source:(unint64_t)a4 identifier:(id)a5 transport:(id)a6 qualityOfService:(int64_t)a7 withCompletionHandler:(id)a8;
- (void)writeCharacteristicValues:(id)a3 source:(unint64_t)a4 message:(id)a5 identifier:(id)a6 qualityOfService:(int64_t)a7 withCompletionHandler:(id)a8;
@end

@implementation HMDHome

uint64_t __63__HMDHome__refreshCharacteristicValuesOnHomeNotificationEnable__block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  v4 = [v3 type];
  v5 = [v3 service];

  v6 = [v5 type];

  v7 = [*(id *)(a1 + 32) hapMetadata];
  uint64_t v8 = [v7 shouldRefreshValueForCharacteristicWithType:v4 serviceType:v6];

  return v8;
}

- (id)_primaryAccessoryForServer:(id)a3
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  [(HMDHome *)self hapAccessoriesForServer:v4];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  id v6 = (id)[v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v15;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v5);
        }
        v9 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        if ([v9 isPrimary])
        {
          uint64_t v13 = 0;
          v10 = [v4 identifier];
          char v11 = [v9 matchesHAPAccessoryWithServerIdentifier:v10 linkType:&v13];

          if (v11)
          {
            id v6 = v9;
            goto LABEL_12;
          }
        }
      }
      id v6 = (id)[v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
LABEL_12:

  return v6;
}

- (id)hapAccessoriesForServer:(id)a3
{
  id v4 = a3;
  id v5 = [v4 identifier];
  uint64_t v6 = [v4 linkType];

  uint64_t v7 = [(HMDHome *)self hapAccessoriesForServer:v5 linkType:v6];

  return v7;
}

void __95__HMDHome_getTransactionFromHAPAccessory_hmdAccessory_uuid_hostAccessoryUUID_objectChangeType___block_invoke(uint64_t a1, void *a2)
{
  v10[3] = *MEMORY[0x1E4F143B8];
  v9[0] = @"HM.serverIdentifier";
  id v3 = *(void **)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  id v5 = a2;
  uint64_t v6 = [v4 serverIdentifier];
  v10[0] = v6;
  v9[1] = @"HM.instanceID";
  uint64_t v7 = [*(id *)(a1 + 40) instanceID];
  v9[2] = @"linkType";
  v10[1] = v7;
  v10[2] = v5;
  uint64_t v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:v9 count:3];
  [v3 addObject:v8];
}

void __95__HMDHome_getTransactionFromHAPAccessory_hmdAccessory_uuid_hostAccessoryUUID_objectChangeType___block_invoke_2(uint64_t a1, void *a2)
{
  v2 = *(void **)(a1 + 32);
  id v3 = [a2 transportInfoDictionary];
  [v2 addObject:v3];
}

void __102__HMDHome_AccessoryRetrieval___notifyRetrievalError_accessoryServer_linkType_accessoryOperationBlock___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 matchesHAPAccessoryWithServerIdentifier:*(void *)(a1 + 32) linkType:0])
  {
    id v4 = _Block_copy(*(const void **)(a1 + 56));
    id v5 = v4;
    if (v4) {
      (*((void (**)(void *, id))v4 + 2))(v4, v3);
    }

    uint64_t v6 = [*(id *)(a1 + 40) workQueue];
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __102__HMDHome_AccessoryRetrieval___notifyRetrievalError_accessoryServer_linkType_accessoryOperationBlock___block_invoke_2;
    void v9[3] = &unk_1E6A17018;
    v9[4] = *(void *)(a1 + 40);
    id v7 = v3;
    uint64_t v8 = *(void *)(a1 + 64);
    id v10 = v7;
    uint64_t v12 = v8;
    id v11 = *(id *)(a1 + 48);
    dispatch_async(v6, v9);
  }
}

- (id)hapAccessoriesForServer:(id)a3 linkType:(int64_t)a4
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = [(HMDHome *)self accessories];
  uint64_t v8 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v7, "count"));
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v9 = v7;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v20 != v12) {
          objc_enumerationMutation(v9);
        }
        id v14 = *(id *)(*((void *)&v19 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          long long v15 = v14;
        }
        else {
          long long v15 = 0;
        }
        id v16 = v15;

        if (v16)
        {
          int64_t v18 = a4;
          if ([v16 matchesHAPAccessoryWithServerIdentifier:v6 linkType:&v18]) {
            [v8 addObject:v16];
          }
        }
      }
      uint64_t v11 = [v9 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v11);
  }

  return v8;
}

- (void)_handleCoalescedModifyNotifications
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v3);

  id v4 = (void *)MEMORY[0x1D9452090]([(HMDHome *)self setModifyNotificationsCoalesceTimer:0]);
  id v5 = self;
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v7 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    long long v15 = v7;
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Modifying notification registrations with resident due to notification coalesce timer firing", buf, 0xCu);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __46__HMDHome__handleCoalescedModifyNotifications__block_invoke;
  aBlock[3] = &unk_1E6A07300;
  aBlock[4] = v5;
  uint64_t v8 = (void (**)(void *, void *, void *, uint64_t))_Block_copy(aBlock);
  id v9 = [(HMDHome *)v5 enableNotificationPayload];
  uint64_t v10 = [MEMORY[0x1E4F1CA48] array];
  v8[2](v8, v9, v10, 1);

  uint64_t v11 = [(HMDHome *)v5 disableNotificationPayload];
  uint64_t v12 = [MEMORY[0x1E4F1CA48] array];
  v8[2](v8, v11, v12, 0);
}

- (void)_remotelySetNotificationsEnabled:(BOOL)a3 forCharacteristics:(id)a4 characteristicChangeThresholds:(id)a5
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v8 = a4;
  id v30 = a5;
  id v9 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v9);

  if (a3)
  {
    uint64_t v10 = [(HMDHome *)self enableNotificationPayload];
    [(HMDHome *)self disableNotificationPayload];
  }
  else
  {
    uint64_t v10 = [(HMDHome *)self disableNotificationPayload];
    [(HMDHome *)self enableNotificationPayload];
  v34 = };
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id obj = v8;
  uint64_t v36 = [obj countByEnumeratingWithState:&v37 objects:v47 count:16];
  if (v36)
  {
    uint64_t v35 = *(void *)v38;
    v31 = v10;
    do
    {
      for (uint64_t i = 0; i != v36; ++i)
      {
        if (*(void *)v38 != v35) {
          objc_enumerationMutation(obj);
        }
        uint64_t v12 = *(void **)(*((void *)&v37 + 1) + 8 * i);
        uint64_t v13 = [v12 accessory];
        id v14 = [v13 uuid];
        long long v15 = [v14 UUIDString];

        if (v15)
        {
          uint64_t v16 = [v10 objectForKeyedSubscript:v15];
          if (!v16)
          {
            uint64_t v16 = [MEMORY[0x1E4F1CA48] array];
            [v10 setObject:v16 forKeyedSubscript:v15];
          }
          long long v17 = [v12 instanceID];
          char v18 = [v16 containsObject:v17];

          if ((v18 & 1) == 0)
          {
            long long v19 = [v12 instanceID];
            [v16 addObject:v19];
          }
          long long v20 = [v34 objectForKeyedSubscript:v15];

          long long v21 = [v12 instanceID];
          int v22 = [v20 containsObject:v21];

          if (v22)
          {
            v23 = [v12 instanceID];
            [v20 removeObject:v23];

            uint64_t v24 = (void *)MEMORY[0x1D9452090]();
            v25 = self;
            v26 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
            {
              v27 = HMFGetLogIdentifier();
              HMFBooleanToString();
              v32 = v24;
              v29 = v28 = self;
              *(_DWORD *)buf = 138543874;
              v42 = v27;
              __int16 v43 = 2112;
              v44 = v29;
              __int16 v45 = 2112;
              v46 = v12;
              _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_INFO, "%{public}@Function call to set notification to %@, removing the entry %@ from the other payload", buf, 0x20u);

              self = v28;
              uint64_t v24 = v32;

              uint64_t v10 = v31;
            }

            if (![v20 count]) {
              [v34 removeObjectForKey:v15];
            }
          }
        }
      }
      uint64_t v36 = [obj countByEnumeratingWithState:&v37 objects:v47 count:16];
    }
    while (v36);
  }

  if ([v10 count] || objc_msgSend(v34, "count")) {
    [(HMDHome *)self _createModifyNotificationsCoalesceTimerIfNeeded];
  }
}

- (NSMutableDictionary)enableNotificationPayload
{
  return self->_enableNotificationPayload;
}

- (NSMutableDictionary)disableNotificationPayload
{
  return self->_disableNotificationPayload;
}

- (void)_createModifyNotificationsCoalesceTimerIfNeeded
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v3);

  id v4 = [(HMDHome *)self modifyNotificationsCoalesceTimer];

  if (!v4)
  {
    id v5 = (void *)[objc_alloc(MEMORY[0x1E4F65580]) initWithTimeInterval:0 options:0.5];
    [(HMDHome *)self setModifyNotificationsCoalesceTimer:v5];

    id v6 = [(HMDHome *)self workQueue];
    id v7 = [(HMDHome *)self modifyNotificationsCoalesceTimer];
    [v7 setDelegateQueue:v6];

    id v8 = [(HMDHome *)self modifyNotificationsCoalesceTimer];
    [v8 setDelegate:self];

    id v9 = [(HMDHome *)self modifyNotificationsCoalesceTimer];
    [v9 resume];

    uint64_t v10 = (void *)MEMORY[0x1D9452090]();
    uint64_t v11 = self;
    uint64_t v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = HMFGetLogIdentifier();
      int v14 = 138543618;
      long long v15 = v13;
      __int16 v16 = 2112;
      long long v17 = v11;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@%@ Kicked off the modify notifications on resident request timer", (uint8_t *)&v14, 0x16u);
    }
  }
}

- (OS_dispatch_queue)workQueue
{
  return self->_workQueue;
}

- (HMFTimer)modifyNotificationsCoalesceTimer
{
  return self->_modifyNotificationsCoalesceTimer;
}

void __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke(uint64_t a1)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    uint64_t v28 = a1;
    id v3 = [*(id *)(a1 + 32) accessories];
    id v30 = WeakRetained;
    v29 = [WeakRetained accessories];
    id v4 = [MEMORY[0x1E4F28E10] strongToStrongObjectsMapTable];
    long long v46 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    id obj = v3;
    uint64_t v31 = [obj countByEnumeratingWithState:&v46 objects:v52 count:16];
    if (v31)
    {
      uint64_t v27 = *(void *)v47;
      do
      {
        for (uint64_t i = 0; i != v31; ++i)
        {
          if (*(void *)v47 != v27) {
            objc_enumerationMutation(obj);
          }
          uint64_t v6 = *(void *)(*((void *)&v46 + 1) + 8 * i);
          long long v42 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          id v7 = v29;
          uint64_t v8 = [v7 countByEnumeratingWithState:&v42 objects:v51 count:16];
          if (v8)
          {
            uint64_t v9 = v8;
            uint64_t v10 = *(void *)v43;
            do
            {
              for (uint64_t j = 0; j != v9; ++j)
              {
                if (*(void *)v43 != v10) {
                  objc_enumerationMutation(v7);
                }
                id v12 = *(id *)(*((void *)&v42 + 1) + 8 * j);
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  uint64_t v13 = v12;
                }
                else {
                  uint64_t v13 = 0;
                }
                id v14 = v13;

                if (v14 && [v14 matchesHAPAccessory:v6]) {
                  [v4 setObject:v6 forKey:v14];
                }
              }
              uint64_t v9 = [v7 countByEnumeratingWithState:&v42 objects:v51 count:16];
            }
            while (v9);
          }
        }
        uint64_t v31 = [obj countByEnumeratingWithState:&v46 objects:v52 count:16];
      }
      while (v31);
    }

    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id v15 = v4;
    uint64_t v16 = [v15 countByEnumeratingWithState:&v38 objects:v50 count:16];
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v32 = *(void *)v39;
      do
      {
        for (uint64_t k = 0; k != v17; ++k)
        {
          if (*(void *)v39 != v32) {
            objc_enumerationMutation(v15);
          }
          long long v19 = *(void **)(*((void *)&v38 + 1) + 8 * k);
          dispatch_group_enter(*(dispatch_group_t *)(v28 + 40));
          long long v20 = [v15 objectForKey:v19];
          long long v21 = [v30 notificationRegistrations];
          BOOL v22 = [v21 count] != 0;
          v23 = [v30 workQueue];
          v36[0] = MEMORY[0x1E4F143A8];
          v36[1] = 3221225472;
          v36[2] = __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_2;
          v36[3] = &unk_1E6A19668;
          v36[4] = v19;
          v36[5] = v30;
          id v37 = *(id *)(v28 + 40);
          [v19 configureWithAccessory:v20 homeNotificationsEnabled:v22 queue:v23 completion:v36];
        }
        uint64_t v17 = [v15 countByEnumeratingWithState:&v38 objects:v50 count:16];
      }
      while (v17);
    }

    uint64_t v24 = *(NSObject **)(v28 + 40);
    id WeakRetained = v30;
    v25 = [v30 workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_1750;
    block[3] = &unk_1E6A19668;
    block[4] = v30;
    id v34 = *(id *)(v28 + 32);
    id v35 = *(id *)(v28 + 48);
    dispatch_group_notify(v24, v25, block);
  }
}

- (NSSet)notificationRegistrations
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = (void *)[(NSMutableSet *)self->_notificationRegistrations copy];
  os_unfair_recursive_lock_unlock();
  return (NSSet *)v3;
}

- (void)__updateServiceTransaction:(id)a3 accessoryTransaction:(id)a4 service:(id)a5 accessory:(id)a6 hapService:(id)a7
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  id v73 = a3;
  id v72 = a4;
  id v12 = a5;
  id v75 = a6;
  id v13 = a7;
  id v14 = (void *)MEMORY[0x1E4F1CA48];
  id v71 = v13;
  id v15 = [v13 characteristics];
  uint64_t v16 = [v14 arrayWithArray:v15];

  if ([v16 count])
  {
    v78 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v16, "count"));
    long long v90 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    v69 = v16;
    id obj = v16;
    uint64_t v17 = [obj countByEnumeratingWithState:&v90 objects:v97 count:16];
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = *(void *)v91;
      unint64_t v20 = 0x1E4F1C000uLL;
      id v70 = v12;
      uint64_t v76 = *(void *)v91;
      v77 = self;
      do
      {
        uint64_t v21 = 0;
        uint64_t v79 = v18;
        do
        {
          if (*(void *)v91 != v19) {
            objc_enumerationMutation(obj);
          }
          BOOL v22 = *(void **)(*((void *)&v90 + 1) + 8 * v21);
          v23 = [(HMDHome *)self hapMetadata];
          uint64_t v24 = [v22 type];
          char v25 = [v23 shouldFilterCharacteristicOfType:v24];

          if ((v25 & 1) == 0)
          {
            uint64_t v83 = v21;
            v26 = [v22 metadata];
            uint64_t v27 = [*(id *)(v20 + 2656) dictionaryWithCapacity:8];
            uint64_t v28 = [v26 format];
            [v27 setObject:v28 forKeyedSubscript:@"metadataFormat"];

            v29 = [v26 units];
            [v27 setObject:v29 forKeyedSubscript:@"metadataUnits"];

            id v30 = [v26 manufacturerDescription];
            [v27 setObject:v30 forKeyedSubscript:@"metadataUserDescription"];

            uint64_t v31 = [v26 constraints];

            if (v31)
            {
              uint64_t v32 = [v26 constraints];
              v33 = [v32 minimumValue];
              [v27 setObject:v33 forKeyedSubscript:@"metadataMinimumValue"];

              id v34 = [v26 constraints];
              id v35 = [v34 maximumValue];
              [v27 setObject:v35 forKeyedSubscript:@"metadataMaximumValue"];

              uint64_t v36 = [v26 constraints];
              id v37 = [v36 stepValue];
              [v27 setObject:v37 forKeyedSubscript:@"metadataStepValue"];

              long long v38 = [v26 constraints];
              long long v39 = [v38 maxLength];
              [v27 setObject:v39 forKeyedSubscript:@"metadataMaxLength"];

              long long v40 = [v26 constraints];
              long long v41 = [v40 validValues];
              [v27 setObject:v41 forKeyedSubscript:@"metadataValidValues"];
            }
            long long v42 = *(void **)(v20 + 2656);
            v95[0] = @"characteristicInstanceID";
            long long v43 = [v22 instanceID];
            v96[0] = v43;
            v95[1] = @"characteristicType";
            long long v44 = [v22 type];
            v96[1] = v44;
            v95[2] = @"characteristicProperties";
            long long v45 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v22, "properties"));
            v95[3] = @"characteristicMetadata";
            v96[2] = v45;
            v96[3] = v27;
            long long v46 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v96 forKeys:v95 count:4];
            uint64_t v47 = [v42 dictionaryWithDictionary:v46];

            if (v12)
            {
              long long v88 = 0u;
              long long v89 = 0u;
              long long v86 = 0u;
              long long v87 = 0u;
              long long v48 = [v12 characteristics];
              id v49 = (id)[v48 countByEnumeratingWithState:&v86 objects:v94 count:16];
              if (v49)
              {
                v74 = (void *)v47;
                v81 = v26;
                uint64_t v50 = *(void *)v87;
LABEL_13:
                uint64_t v51 = 0;
                while (1)
                {
                  if (*(void *)v87 != v50) {
                    objc_enumerationMutation(v48);
                  }
                  v52 = *(void **)(*((void *)&v86 + 1) + 8 * v51);
                  uint64_t v53 = [v52 instanceID];
                  v54 = [v22 instanceID];
                  char v55 = [v53 isEqual:v54];

                  if (v55) {
                    break;
                  }
                  if (v49 == (id)++v51)
                  {
                    id v49 = (id)[v48 countByEnumeratingWithState:&v86 objects:v94 count:16];
                    if (v49) {
                      goto LABEL_13;
                    }
                    id v12 = v70;
                    v26 = v81;
                    uint64_t v47 = (uint64_t)v74;
                    goto LABEL_25;
                  }
                }
                id v49 = v52;

                if (v49)
                {
                  v56 = [v49 authorizationData];

                  id v12 = v70;
                  v26 = v81;
                  uint64_t v47 = (uint64_t)v74;
                  if (v56)
                  {
                    v57 = [v49 authorizationData];
                    [v74 setObject:v57 forKeyedSubscript:@"kCharacteristicAuthorizationDataCodingKey"];
                  }
                  v58 = [v75 findServiceWithServiceType:@"00000701-0000-1000-8000-0026BB765291"];

                  if (v58)
                  {
                    uint64_t v59 = [v22 properties];
                    unsigned __int8 v60 = [v49 properties];
                    long long v48 = [NSNumber numberWithUnsignedInteger:v60 & 0x80 | (unint64_t)v59];
                    [v74 setObject:v48 forKeyedSubscript:@"characteristicProperties"];
                    goto LABEL_25;
                  }
                }
                else
                {
                  id v12 = v70;
                  v26 = v81;
                  uint64_t v47 = (uint64_t)v74;
                }
              }
              else
              {
LABEL_25:
              }
            }
            v82 = v27;
            v61 = (void *)v47;
            [v78 addObject:v47];
            v62 = [v22 value];

            uint64_t v19 = v76;
            uint64_t v21 = v83;
            if (v62)
            {
              aBlock[0] = MEMORY[0x1E4F143A8];
              aBlock[1] = 3221225472;
              aBlock[2] = __88__HMDHome___updateServiceTransaction_accessoryTransaction_service_accessory_hapService___block_invoke;
              aBlock[3] = &unk_1E6A0CD30;
              id v85 = v73;
              v63 = _Block_copy(aBlock);
              v64 = [v22 type];
              v65 = [v22 value];
              v66 = [v71 type];
              +[HMDService processUpdateForCharacteristicType:v64 value:v65 serviceType:v66 service:v12 serviceTransactionGetter:v63 accessory:v75 accessoryTransaction:v72 accessoryTransactionChanged:0];
            }
            self = v77;
            uint64_t v18 = v79;
            unint64_t v20 = 0x1E4F1C000;
          }
          ++v21;
        }
        while (v21 != v18);
        uint64_t v18 = [obj countByEnumeratingWithState:&v90 objects:v97 count:16];
      }
      while (v18);
    }

    uint64_t v16 = v69;
    v67 = v78;
  }
  else
  {
    v67 = 0;
  }
  v68 = +[HMDCharacteristic sortComparatorForCharacteristicDictionary];
  [v67 sortUsingComparator:v68];

  [v73 setCharacteristics:v67];
}

- (HMDHAPMetadata)hapMetadata
{
  return (HMDHAPMetadata *)objc_getProperty(self, a2, 872, 1);
}

void __46__HMDHome__handleCoalescedModifyNotifications__block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v11 = a2;
  id v7 = a3;
  if ([v11 count] || objc_msgSend(v7, "count"))
  {
    uint64_t v8 = objc_msgSend(v11, "na_dictionaryByMappingValues:", &__block_literal_global_1767);
    uint64_t v9 = (void *)[v8 copy];

    uint64_t v10 = (void *)[v7 copy];
    [*(id *)(a1 + 32) _modifyCharacteristicNotificationsOnResident:v9 mediaNotifications:MEMORY[0x1E4F1CC08] actionSetNotificationPayload:v10 enableNotification:a4];
    [v11 removeAllObjects];
    [v7 removeAllObjects];
  }
}

- (void)setModifyNotificationsCoalesceTimer:(id)a3
{
}

- (HMDHomeManager)homeManager
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_homeManager);
  return (HMDHomeManager *)WeakRetained;
}

- (BOOL)getUpdateTransactionForAccessory:(id)a3 hapAccessory:(id)a4 accessoryTransaction:(id)a5 addSvcTransactions:(id *)a6 updateSvcTransactions:(id *)a7 removeSvcTransactions:(id *)a8
{
  uint64_t v160 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v11 = a4;
  id v115 = a5;
  id v12 = [v10 services];
  id v13 = (void *)[v12 mutableCopy];

  long long v145 = 0u;
  long long v146 = 0u;
  long long v143 = 0u;
  long long v144 = 0u;
  v106 = v11;
  id v14 = [v11 services];
  uint64_t v15 = [v14 countByEnumeratingWithState:&v143 objects:v159 count:16];
  id v116 = v10;
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v144;
    uint64_t v124 = 138544130;
    uint64_t v110 = *(void *)v144;
    v111 = v14;
    while (2)
    {
      uint64_t v18 = 0;
      uint64_t v112 = v16;
      do
      {
        if (*(void *)v144 != v17) {
          objc_enumerationMutation(v14);
        }
        uint64_t v19 = *(void **)(*((void *)&v143 + 1) + 8 * v18);
        unint64_t v20 = [(HMDHome *)self hapMetadata];
        uint64_t v21 = [v19 type];
        char v22 = [v20 shouldFilterServiceOfType:v21];

        if ((v22 & 1) == 0)
        {
          uint64_t v114 = v18;
          id v117 = v13;
          long long v141 = 0u;
          long long v142 = 0u;
          long long v139 = 0u;
          long long v140 = 0u;
          v23 = [v10 services];
          uint64_t v24 = [v23 countByEnumeratingWithState:&v139 objects:v158 count:16];
          if (v24)
          {
            uint64_t v25 = v24;
            uint64_t v26 = *(void *)v140;
            while (2)
            {
              for (uint64_t i = 0; i != v25; ++i)
              {
                if (*(void *)v140 != v26) {
                  objc_enumerationMutation(v23);
                }
                uint64_t v28 = *(void **)(*((void *)&v139 + 1) + 8 * i);
                v29 = [v28 instanceID];
                id v30 = [v19 instanceID];
                int v31 = [v29 isEqual:v30];

                if (v31)
                {
                  uint64_t v32 = v28;
                  goto LABEL_17;
                }
              }
              uint64_t v25 = [v23 countByEnumeratingWithState:&v139 objects:v158 count:16];
              if (v25) {
                continue;
              }
              break;
            }
          }
          uint64_t v32 = 0;
LABEL_17:

          v33 = [v115 uuid];
          if (v32) {
            uint64_t v34 = 2;
          }
          else {
            uint64_t v34 = 1;
          }
          id v35 = [(HMDHome *)self getServiceTransaction:v19 parentUUID:v33 changeType:v34];

          uint64_t v36 = [(HMDServiceTransaction *)v32 type];
          if (v36)
          {
            id v37 = (void *)v36;
            long long v38 = [(HMDServiceTransaction *)v32 type];
            long long v39 = [(HMDServiceTransaction *)v35 serviceType];
            char v40 = [v38 isEqualToString:v39];

            if ((v40 & 1) == 0)
            {

              BOOL v101 = 0;
              id v84 = v117;
              v102 = v111;
              goto LABEL_75;
            }
          }
          [(HMDHome *)self __updateServiceTransaction:v35 accessoryTransaction:v115 service:v32 accessory:v10 hapService:v19];
          long long v41 = [(HMDServiceTransaction *)v32 accessory];
          long long v42 = [v41 shortDescription];
          long long v43 = v42;
          if (v42)
          {
            v125 = v42;
          }
          else
          {
            long long v44 = [(HMDBackingStoreModelObject *)v35 parentUUID];
            v125 = [v44 UUIDString];
          }
          id v13 = v117;

          if (v32)
          {
            long long v45 = [(HMDServiceTransaction *)v32 modelObjectWithChangeType:1];
            id v138 = 0;
            v121 = v45;
            [v45 diff:v35 differingFields:&v138];
            id v46 = v138;
            v113 = v46;
            v122 = v35;
            if (a7)
            {
              uint64_t v47 = v46;
              if ([v46 count])
              {
                v108 = v32;
                long long v48 = (void *)MEMORY[0x1D9452090]();
                id v49 = self;
                uint64_t v50 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
                {
                  uint64_t v51 = HMFGetLogIdentifier();
                  *(_DWORD *)buf = 138544130;
                  id v151 = v51;
                  __int16 v152 = 2112;
                  v153 = v125;
                  __int16 v154 = 2114;
                  v155 = v35;
                  __int16 v156 = 2114;
                  v157 = v47;
                  _os_log_impl(&dword_1D49D5000, v50, OS_LOG_TYPE_INFO, "%{public}@[Pair-Verify %@] Received service update %{public}@ due to diff %{public}@", buf, 0x2Au);
                }
                long long v136 = 0u;
                long long v137 = 0u;
                long long v134 = 0u;
                long long v135 = 0u;
                id obj = v47;
                uint64_t v52 = [obj countByEnumeratingWithState:&v134 objects:v149 count:16];
                if (v52)
                {
                  uint64_t v53 = v52;
                  uint64_t v54 = *(void *)v135;
                  do
                  {
                    for (uint64_t j = 0; j != v53; ++j)
                    {
                      if (*(void *)v135 != v54) {
                        objc_enumerationMutation(obj);
                      }
                      v56 = *(HMDServiceTransaction **)(*((void *)&v134 + 1) + 8 * j);
                      v57 = (void *)MEMORY[0x1D9452090]();
                      v58 = v49;
                      uint64_t v59 = v49;
                      unsigned __int8 v60 = HMFGetOSLogHandle();
                      if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
                      {
                        v61 = HMFGetLogIdentifier();
                        v62 = [v121 valueForKeyPath:v56];
                        *(_DWORD *)buf = 138544130;
                        id v151 = v61;
                        __int16 v152 = 2114;
                        v153 = v125;
                        __int16 v154 = 2114;
                        v155 = v56;
                        __int16 v156 = 2114;
                        v157 = v62;
                        _os_log_impl(&dword_1D49D5000, v60, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] LOCAL %{public}@: %{public}@", buf, 0x2Au);
                      }
                      v63 = (void *)MEMORY[0x1D9452090]();
                      v64 = v59;
                      v65 = HMFGetOSLogHandle();
                      if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
                      {
                        v66 = HMFGetLogIdentifier();
                        v67 = [(HMDServiceTransaction *)v122 valueForKeyPath:v56];
                        *(_DWORD *)buf = 138544130;
                        id v151 = v66;
                        __int16 v152 = 2114;
                        v153 = v125;
                        __int16 v154 = 2114;
                        v155 = v56;
                        __int16 v156 = 2114;
                        v157 = v67;
                        _os_log_impl(&dword_1D49D5000, v65, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] UPDATE %{public}@: %{public}@", buf, 0x2Au);
                      }
                      id v49 = v58;
                    }
                    uint64_t v53 = [obj countByEnumeratingWithState:&v134 objects:v149 count:16];
                  }
                  while (v53);
                }

                [*a7 addObject:v122];
                id v13 = v117;
                uint64_t v32 = v108;
              }
            }
            v68 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v13, "count"));
            long long v130 = 0u;
            long long v131 = 0u;
            long long v132 = 0u;
            long long v133 = 0u;
            id v69 = v13;
            uint64_t v70 = [v69 countByEnumeratingWithState:&v130 objects:v148 count:16];
            if (v70)
            {
              uint64_t v71 = v70;
              uint64_t v72 = *(void *)v131;
              do
              {
                for (uint64_t k = 0; k != v71; ++k)
                {
                  if (*(void *)v131 != v72) {
                    objc_enumerationMutation(v69);
                  }
                  v74 = *(void **)(*((void *)&v130 + 1) + 8 * k);
                  id v75 = [v74 uuid];
                  uint64_t v76 = [(HMDBackingStoreModelObject *)v32 uuid];
                  char v77 = [v75 isEqual:v76];

                  if ((v77 & 1) == 0) {
                    [v68 addObject:v74];
                  }
                }
                uint64_t v71 = [v69 countByEnumeratingWithState:&v130 objects:v148 count:16];
              }
              while (v71);
            }

            v78 = v122;
            uint64_t v79 = v32;
            id v13 = v68;
            id v10 = v116;
            uint64_t v17 = v110;
            id v14 = v111;
            uint64_t v16 = v112;
            uint64_t v18 = v114;
          }
          else
          {
            v80 = (void *)MEMORY[0x1D9452090]();
            v81 = self;
            v82 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
            {
              uint64_t v83 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543874;
              id v151 = v83;
              __int16 v152 = 2114;
              v153 = v125;
              __int16 v154 = 2114;
              v155 = v35;
              _os_log_impl(&dword_1D49D5000, v82, OS_LOG_TYPE_INFO, "%{public}@[Pair-Verify %{public}@] Adding service %{public}@", buf, 0x20u);
            }
            [*a6 addObject:v35];
            uint64_t v79 = v35;
            uint64_t v17 = v110;
            id v14 = v111;
            uint64_t v16 = v112;
            uint64_t v18 = v114;
            v78 = v125;
          }
        }
        ++v18;
      }
      while (v18 != v16);
      uint64_t v16 = [v14 countByEnumeratingWithState:&v143 objects:v159 count:16];
      if (v16) {
        continue;
      }
      break;
    }
  }

  long long v128 = 0u;
  long long v129 = 0u;
  long long v126 = 0u;
  long long v127 = 0u;
  id v84 = v13;
  uint64_t v85 = [v84 countByEnumeratingWithState:&v126 objects:v147 count:16];
  if (v85)
  {
    uint64_t v86 = v85;
    id v118 = v84;
    uint64_t v87 = *(void *)v127;
    do
    {
      for (uint64_t m = 0; m != v86; ++m)
      {
        if (*(void *)v127 != v87) {
          objc_enumerationMutation(v118);
        }
        long long v89 = *(void **)(*((void *)&v126 + 1) + 8 * m);
        long long v90 = [HMDServiceTransaction alloc];
        long long v91 = [v89 uuid];
        long long v92 = [v10 uuid];
        long long v93 = [(HMDBackingStoreModelObject *)v90 initWithObjectChangeType:3 uuid:v91 parentUUID:v92];

        v94 = (void *)MEMORY[0x1D9452090]();
        v95 = self;
        HMFGetOSLogHandle();
        v96 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          id v97 = (id)objc_claimAutoreleasedReturnValue();
          uint64_t v98 = [v89 accessory];
          v99 = [v98 shortDescription];
          v100 = v99;
          if (!v99)
          {
            uint64_t v124 = [(HMDBackingStoreModelObject *)v93 parentUUID];
            v100 = (HMDServiceTransaction *)v124;
          }
          *(_DWORD *)buf = 138543874;
          id v151 = v97;
          __int16 v152 = 2114;
          v153 = v100;
          __int16 v154 = 2114;
          v155 = v93;
          _os_log_impl(&dword_1D49D5000, v96, OS_LOG_TYPE_INFO, "%{public}@[Pair-Verify %{public}@] Removing service %{public}@", buf, 0x20u);
          if (!v99) {

          }
          id v10 = v116;
        }

        [*a8 addObject:v93];
      }
      uint64_t v86 = [v118 countByEnumeratingWithState:&v126 objects:v147 count:16];
    }
    while (v86);
    id v84 = v118;
  }
  else
  {

    if (!a8)
    {
      BOOL v101 = 1;
      goto LABEL_76;
    }
  }
  v103 = (void *)MEMORY[0x1E4F1CAD0];
  v104 = objc_msgSend(*a8, "na_map:", &__block_literal_global_1738);
  v102 = [v103 setWithArray:v104];

  [(HMDHome *)self filterServiceTransactions:*a6 removedServiceUUIDs:v102];
  [(HMDHome *)self filterServiceTransactions:*a7 removedServiceUUIDs:v102];
  BOOL v101 = 1;
LABEL_75:

LABEL_76:
  return v101;
}

- (id)getServiceTransaction:(id)a3 parentUUID:(id)a4 changeType:(unint64_t)a5
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = [v7 instanceID];
  id v10 = +[HMDService generateUUIDWithAccessoryUUID:v8 serviceID:v9];

  id v11 = [(HMDBackingStoreModelObject *)[HMDServiceTransaction alloc] initWithObjectChangeType:a5 uuid:v10 parentUUID:v8];
  if (v7)
  {
    id v12 = [v7 instanceID];
    [(HMDServiceTransaction *)v11 setInstanceID:v12];

    id v13 = [v7 type];
    [(HMDServiceTransaction *)v11 setServiceType:v13];

    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v14 = v7;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      id v16 = v15;

      uint64_t v17 = [v16 endpoint];

      [(HMDServiceTransaction *)v11 setMatterEndpointID:v17];
    }
    uint64_t v18 = [v7 linkedServices];

    if (v18)
    {
      uint64_t v19 = [v7 linkedServices];
      unint64_t v20 = (void *)[v19 copy];
      [(HMDServiceTransaction *)v11 setLinkedServices:v20];
    }
    uint64_t v21 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v7, "serviceProperties"));
    [(HMDServiceTransaction *)v11 setServiceProperties:v21];
  }
  return v11;
}

- (void)filterServiceTransactions:(id)a3 removedServiceUUIDs:(id)a4
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  if (v6 && [v6 count] && objc_msgSend(v7, "count"))
  {
    id v8 = [MEMORY[0x1E4F28E60] indexSet];
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    id v25 = v6;
    id v9 = v6;
    uint64_t v10 = [v9 countByEnumeratingWithState:&v29 objects:v39 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v30;
      uint64_t v26 = *(void *)v30;
      id v27 = v9;
      do
      {
        uint64_t v13 = 0;
        uint64_t v28 = v11;
        do
        {
          if (*(void *)v30 != v12) {
            objc_enumerationMutation(v9);
          }
          id v14 = *(void **)(*((void *)&v29 + 1) + 8 * v13);
          uint64_t v15 = [v14 uuid];
          int v16 = [v7 containsObject:v15];

          if (v16)
          {
            uint64_t v17 = (void *)MEMORY[0x1D9452090](objc_msgSend(v8, "addIndex:", objc_msgSend(v9, "indexOfObject:", v14)));
            uint64_t v18 = self;
            uint64_t v19 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              unint64_t v20 = HMFGetLogIdentifier();
              [v14 uuid];
              uint64_t v21 = v8;
              char v22 = self;
              uint64_t v24 = v23 = v7;
              *(_DWORD *)buf = 138543874;
              uint64_t v34 = v20;
              __int16 v35 = 2114;
              uint64_t v36 = v24;
              __int16 v37 = 2114;
              long long v38 = v14;
              _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_ERROR, "%{public}@[Pair-Verify %{public}@] Removing duplicate service transaction %{public}@", buf, 0x20u);

              id v7 = v23;
              self = v22;
              id v8 = v21;
              id v9 = v27;

              uint64_t v12 = v26;
            }

            uint64_t v11 = v28;
          }
          ++v13;
        }
        while (v11 != v13);
        uint64_t v11 = [v9 countByEnumeratingWithState:&v29 objects:v39 count:16];
      }
      while (v11);
    }

    [v9 removeObjectsAtIndexes:v8];
    id v6 = v25;
  }
}

uint64_t __38__HMDHome__handleEnableNotifications___block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) respondWithPayload:0];
}

uint64_t __62__HMDHome__readRequestTuplesFromMessage_outUnhandledRequests___block_invoke()
{
  return HAPInstanceIDFromValue();
}

uint64_t __27__HMDHome_currentAccessory__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;
  id v5 = v4;
  if (v4) {
    uint64_t v6 = [v4 isCurrentAccessory];
  }
  else {
    uint64_t v6 = 0;
  }

  return v6;
}

uint64_t __38__HMDHome___handleProcessStateChange___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 checkHAPSessionRestore];
}

+ (BOOL)supportsSecureCoding
{
  return 1;
}

uint64_t __102__HMDHome_AccessoryRetrieval___notifyRetrievalError_accessoryServer_linkType_accessoryOperationBlock___block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) _dequeueRetrievalForAccessory:*(void *)(a1 + 40) linkType:*(void *)(a1 + 56) error:*(void *)(a1 + 48)];
}

uint64_t __93__HMDHome_remotelySetNotificationsEnabled_forCharacteristics_characteristicChangeThresholds___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _remotelySetNotificationsEnabled:*(unsigned __int8 *)(a1 + 56) forCharacteristics:*(void *)(a1 + 40) characteristicChangeThresholds:*(void *)(a1 + 48)];
}

+ (id)logCategory
{
  if (logCategory__hmf_once_t1329 != -1) {
    dispatch_once(&logCategory__hmf_once_t1329, &__block_literal_global_1776);
  }
  id v2 = (void *)logCategory__hmf_once_v1330;
  return v2;
}

- (id)shortDescription
{
  if (isInternalBuild())
  {
    id v3 = NSString;
    id v4 = [(HMDHome *)self name];
    id v5 = [(HMDHome *)self uuid];
    uint64_t v6 = [v3 stringWithFormat:@"%@/%@", v4, v5];
  }
  else
  {
    id v4 = [(HMDHome *)self uuid];
    uint64_t v6 = [v4 UUIDString];
  }

  return v6;
}

- (NSUUID)uuid
{
  return self->_uuid;
}

- (NSString)name
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = self->_name;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (id)primaryResident
{
  id v2 = [(HMDHome *)self residentDeviceManager];
  id v3 = [v2 primaryResidentDevice];

  return v3;
}

- (BOOL)isCurrentDeviceAvailableResident
{
  id v2 = [(HMDHome *)self residentDeviceManager];
  char v3 = [v2 isCurrentDeviceAvailableResident];

  return v3;
}

- (BOOL)isResidentSupported
{
  if (isWatch())
  {
    char v3 = [(HMDHome *)self homeManager];
    char v4 = [v3 companionReachable];

    if (v4) {
      return 0;
    }
  }
  uint64_t v6 = [(HMDHome *)self residentDeviceManager];
  char v7 = [v6 isResidentAvailable];

  return v7;
}

- (HMDResidentDeviceManager)residentDeviceManager
{
  return self->_residentDeviceManager;
}

void __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_2(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  logAndPostNotification(@"HMDAccessoryConnectedNotification", *(void **)(a1 + 32), 0);
  [*(id *)(a1 + 32) updateLightProfilesSettings];
  id v2 = [*(id *)(a1 + 32) chipAccessoryServer];

  if (v2)
  {
    char v3 = (void *)MEMORY[0x1D9452090]();
    id v4 = *(id *)(a1 + 40);
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = HMFGetLogIdentifier();
      char v7 = [*(id *)(a1 + 32) uuid];
      id v8 = [*(id *)(a1 + 32) chipAccessoryServer];
      id v9 = [*(id *)(a1 + 32) chipAccessoryServer];
      int v10 = 138544130;
      uint64_t v11 = v6;
      __int16 v12 = 2112;
      uint64_t v13 = v7;
      __int16 v14 = 2048;
      uint64_t v15 = v8;
      __int16 v16 = 2112;
      uint64_t v17 = v9;
      _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Configured chipAccessoryServer on accessory: %@, chipAccessoryServer: %p %@", (uint8_t *)&v10, 0x2Au);
    }
    [*(id *)(a1 + 32) setDidConfigureCHIPAccessoryServer];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

- (void)_wol_processChangedCharacteristicResponses:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v18 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        id v9 = [v8 request];
        int v10 = [v9 characteristic];

        uint64_t v11 = [v10 accessory];
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          __int16 v12 = v11;
        }
        else {
          __int16 v12 = 0;
        }
        id v13 = v12;

        if ([v13 canWakeUpViaWoL])
        {
          __int16 v14 = [v8 request];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();

          __int16 v16 = [v8 error];
          objc_msgSend(v13, "_wol_processReadWriteResponseForCharacteristic:isRead:error:", v10, (v14 == 0) | ((isKindOfClass & 1) == 0), v16);
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v5);
  }
}

- (id)hapAccessoryWithIdentifier:(id)a3
{
  id v3 = [(HMDHome *)self accessoryWithIdentifier:a3];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  id v5 = v4;

  return v5;
}

- (id)accessoryWithIdentifier:(id)a3
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v5 = [(HMDHome *)self accessories];
  id v6 = (id)[v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v5);
        }
        id v9 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        int v10 = [v9 identifier];
        if ([v10 isEqualToString:v4])
        {
          char v11 = [v9 isPrimary];

          if (v11)
          {
            id v6 = v9;
            goto LABEL_12;
          }
        }
        else
        {
        }
      }
      id v6 = (id)[v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v6);
  }
LABEL_12:

  return v6;
}

- (id)_buildRequestMapTableFromRequests:(id)a3 pendingResponses:(id)a4
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v30 = a4;
  id v32 = [MEMORY[0x1E4F28E10] weakToStrongObjectsMapTable];
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id obj = v5;
  uint64_t v6 = [obj countByEnumeratingWithState:&v33 objects:v41 count:16];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(void *)v34;
    *(void *)&long long v7 = 138543618;
    long long v28 = v7;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v34 != v9) {
          objc_enumerationMutation(obj);
        }
        char v11 = *(void **)(*((void *)&v33 + 1) + 8 * i);
        __int16 v12 = objc_msgSend(v11, "characteristic", v28);
        long long v13 = [v12 service];
        long long v14 = [v13 accessory];

        if (v14)
        {
          if (([v14 isPrimary] & 1) == 0)
          {
            uint64_t v15 = [v14 bridge];

            long long v14 = (void *)v15;
          }
          uint64_t v16 = [v32 objectForKey:v14];
          long long v17 = (void *)v16;
          uint64_t v18 = (void *)MEMORY[0x1E4F1CBF0];
          if (v16) {
            uint64_t v18 = (void *)v16;
          }
          id v19 = v18;

          long long v20 = +[HMDCharacteristicRequest requestWithCharacteristic:v12];
          uint64_t v21 = [v19 arrayByAddingObject:v20];

          [v32 setObject:v21 forKey:v14];
        }
        else
        {
          uint64_t v22 = v9;
          long long v14 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
          id v23 = (void *)MEMORY[0x1D9452090]();
          uint64_t v24 = self;
          id v25 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            uint64_t v26 = HMFGetLogIdentifier();
            *(_DWORD *)buf = v28;
            long long v38 = v26;
            __int16 v39 = 2112;
            uint64_t v40 = v11;
            _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_ERROR, "%{public}@Aborting characteristic request, accessory is nil %@", buf, 0x16u);
          }
          uint64_t v21 = +[HMDCharacteristicResponse responseWithRequest:v11 error:v14];
          [v30 addToPendingResponses:v21];
          uint64_t v9 = v22;
        }
      }
      uint64_t v8 = [obj countByEnumeratingWithState:&v33 objects:v41 count:16];
    }
    while (v8);
  }

  return v32;
}

void __168__HMDHome__sendReadRequestToAccessoryServer_requestMessage_source_pendingResponses_slowFailedAccessories_fastFailedAccessories_unreachableWaitGroup_waitGroup_activity___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    long long v7 = HMFGetLogIdentifier();
    uint64_t v8 = [*(id *)(a1 + 40) name];
    uint64_t v9 = [*(id *)(a1 + 40) uuid];
    int v10 = [v9 UUIDString];
    char v11 = [*(id *)(a1 + 40) uniqueIdentifier];
    *(_DWORD *)buf = 138544386;
    id v49 = v7;
    __int16 v50 = 2112;
    uint64_t v51 = v8;
    __int16 v52 = 2112;
    uint64_t v53 = v10;
    __int16 v54 = 2112;
    char v55 = v11;
    __int16 v56 = 2048;
    uint64_t v57 = [v3 count];
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Completed read for accessory %@/%@/%@ with %ld responses", buf, 0x34u);
  }
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  id v12 = v3;
  uint64_t v13 = [v12 countByEnumeratingWithState:&v43 objects:v47 count:16];
  if (!v13) {
    goto LABEL_25;
  }
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)v44;
  uint64_t v16 = *MEMORY[0x1E4F28A50];
  uint64_t v17 = *MEMORY[0x1E4F2D140];
  while (2)
  {
    for (uint64_t i = 0; i != v14; ++i)
    {
      if (*(void *)v44 != v15) {
        objc_enumerationMutation(v12);
      }
      id v19 = objc_msgSend(*(id *)(*((void *)&v43 + 1) + 8 * i), "error", (void)v43);
      [v19 domain];

      [v19 code];
      long long v20 = [v19 userInfo];

      if (v20)
      {
        uint64_t v21 = [v19 userInfo];
        uint64_t v22 = [v21 objectForKey:v16];

        BOOL v23 = v22 && ([v22 code] == 2401 || objc_msgSend(v22, "code") == 2400);
        if (!v19) {
          goto LABEL_22;
        }
      }
      else
      {
        BOOL v23 = 0;
        if (!v19) {
          goto LABEL_22;
        }
      }
      uint64_t v24 = [v19 domain];
      if (![v24 isEqualToString:v17] || objc_msgSend(v19, "code") != 4)
      {

LABEL_22:
        continue;
      }

      if (!v23)
      {

        if (!*(unsigned char *)(a1 + 120)) {
          goto LABEL_32;
        }
        if (*(unsigned char *)(a1 + 121))
        {
          id v25 = [*(id *)(a1 + 32) primaryResident];
          uint64_t v26 = [v25 device];
          id v27 = [v26 version];
          long long v28 = [[HMDHomeKitVersion alloc] initWithVersionString:@"4.0"];
          if ([v27 isAtLeastVersion:v28])
          {
            int v29 = *(unsigned __int8 *)(a1 + 121);

            if (v29)
            {
              id v30 = (void *)MEMORY[0x1D9452090]();
              id v31 = *(id *)(a1 + 32);
              id v32 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
              {
                long long v33 = HMFGetLogIdentifier();
                *(_DWORD *)buf = 138543362;
                id v49 = v33;
                _os_log_impl(&dword_1D49D5000, v32, OS_LOG_TYPE_INFO, "%{public}@Dispatching to resident with binning", buf, 0xCu);
LABEL_45:
              }
LABEL_46:

              uint64_t v42 = *(void **)(a1 + 64);
LABEL_47:
              [v42 addObject:*(void *)(a1 + 40)];
              goto LABEL_48;
            }
          }
          else
          {
          }
          uint64_t v38 = [*(id *)(a1 + 40) linkSpeed];
          id v30 = (void *)MEMORY[0x1D9452090]();
          id v31 = *(id *)(a1 + 32);
          id v32 = HMFGetOSLogHandle();
          BOOL v39 = os_log_type_enabled(v32, OS_LOG_TYPE_INFO);
          if ((v38 & 0x8000000000000000) == 0)
          {
            if (v39)
            {
              uint64_t v40 = HMFGetLogIdentifier();
              long long v41 = [*(id *)(a1 + 40) name];
              *(_DWORD *)buf = 138543618;
              id v49 = v40;
              __int16 v50 = 2112;
              uint64_t v51 = v41;
              _os_log_impl(&dword_1D49D5000, v32, OS_LOG_TYPE_INFO, "%{public}@adding accessory %@ to fast dispatch group (multi-part).", buf, 0x16u);
            }
            uint64_t v42 = *(void **)(a1 + 72);
            goto LABEL_47;
          }
          if (!v39) {
            goto LABEL_46;
          }
          long long v33 = HMFGetLogIdentifier();
          long long v36 = [*(id *)(a1 + 40) name];
          *(_DWORD *)buf = 138543618;
          id v49 = v33;
          __int16 v50 = 2112;
          uint64_t v51 = v36;
          __int16 v37 = "%{public}@adding accessory %@ to slow dispatch group (multi-part).";
        }
        else
        {
          id v30 = (void *)MEMORY[0x1D9452090]();
          id v31 = *(id *)(a1 + 32);
          id v32 = HMFGetOSLogHandle();
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_INFO)) {
            goto LABEL_46;
          }
          long long v33 = HMFGetLogIdentifier();
          long long v36 = [*(id *)(a1 + 40) name];
          *(_DWORD *)buf = 138543618;
          id v49 = v33;
          __int16 v50 = 2112;
          uint64_t v51 = v36;
          __int16 v37 = "%{public}@adding accessory %@ to dispatch group (single-part).";
        }
        _os_log_impl(&dword_1D49D5000, v32, OS_LOG_TYPE_INFO, v37, buf, 0x16u);

        goto LABEL_45;
      }
    }
    uint64_t v14 = [v12 countByEnumeratingWithState:&v43 objects:v47 count:16];
    if (v14) {
      continue;
    }
    break;
  }
LABEL_25:

LABEL_32:
  objc_msgSend(*(id *)(a1 + 80), "addResponsesToPendingResponse:", v12, (void)v43);
  if (*(unsigned char *)(a1 + 121) && ([*(id *)(a1 + 88) isRemote] & 1) == 0)
  {
    long long v34 = *(void **)(a1 + 32);
    long long v35 = [*(id *)(a1 + 80) retrieveAndClearAllResponses];
    [v34 _notifyChangedCharacteristics:v35 identifier:*(void *)(a1 + 96) multiPartResponse:1 moreMessagesInMultipart:1 requestMessage:*(void *)(a1 + 88) withCompletionHandler:0];
  }
LABEL_48:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 112));
}

- (HMMLogEventSubmitting)logEventSubmitter
{
  return self->_logEventSubmitter;
}

- (BOOL)isResidentFirstAccessoryCommunicationEnabled
{
  return self->_residentFirstAccessoryCommunicationEnabled;
}

- (void)remotelySetNotificationsEnabled:(BOOL)a3 forCharacteristics:(id)a4 characteristicChangeThresholds:(id)a5
{
  id v8 = a4;
  id v9 = a5;
  int v10 = [(HMDHome *)self workQueue];
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = __93__HMDHome_remotelySetNotificationsEnabled_forCharacteristics_characteristicChangeThresholds___block_invoke;
  v13[3] = &unk_1E6A15B38;
  BOOL v16 = a3;
  v13[4] = self;
  id v14 = v8;
  id v15 = v9;
  id v11 = v9;
  id v12 = v8;
  dispatch_async(v10, v13);
}

- (void)retrieveStateForTrackedAccessory:(id)a3 stateNumber:(id *)a4 isReachable:(BOOL *)a5 linkQuality:(unint64_t *)a6 lastSeen:(id *)a7
{
  id v12 = a3;
  id v14 = [(HMDHome *)self accessoryBrowser];
  uint64_t v13 = [v14 accessoryBrowserHapProtocol];
  [v13 retrieveCurrentStateForIdentifier:v12 stateNumber:a4 isReachable:a5 linkQuality:a6 lastSeen:a7];
}

id __39__HMDHome_Light__lightProfileWithUUID___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;
  uint64_t v6 = v5;
  if (v5)
  {
    long long v7 = [v5 lightProfiles];
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __39__HMDHome_Light__lightProfileWithUUID___block_invoke_2;
    v10[3] = &unk_1E6A0CA58;
    id v11 = *(id *)(a1 + 32);
    id v8 = objc_msgSend(v7, "na_firstObjectPassingTest:", v10);
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

- (void)updateLightProfilesSettings:(id)a3
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [MEMORY[0x1E4F1CA80] set];
  uint64_t v6 = [MEMORY[0x1E4F1CA80] set];
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v7 = v4;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v23 objects:v28 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v24 != v9) {
          objc_enumerationMutation(v7);
        }
        id v11 = *(void **)(*((void *)&v23 + 1) + 8 * i);
        id v12 = [v11 readCharacteristicRequests];
        if ([v12 count])
        {
          uint64_t v13 = [v12 allObjects];
          [v5 addObjectsFromArray:v13];

          [v6 addObject:v11];
        }
      }
      uint64_t v8 = [v7 countByEnumeratingWithState:&v23 objects:v28 count:16];
    }
    while (v8);
  }

  if ([v5 count])
  {
    objc_initWeak(location, self);
    id v14 = [v5 allObjects];
    id v15 = [(HMDHome *)self description];
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = __46__HMDHome_Light__updateLightProfilesSettings___block_invoke;
    v20[3] = &unk_1E6A17958;
    objc_copyWeak(&v22, location);
    id v21 = v6;
    [(HMDHome *)self readCharacteristicValues:v14 source:7 sourceForLogging:v15 qualityOfService:-1 withCompletionHandler:v20];

    objc_destroyWeak(&v22);
    objc_destroyWeak(location);
  }
  else
  {
    BOOL v16 = (void *)MEMORY[0x1D9452090]();
    uint64_t v17 = [(HMDHome *)self lightLogCategory];
    uint64_t v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      id v19 = HMFGetLogIdentifier();
      LODWORD(location[0]) = 138543362;
      *(id *)((char *)location + 4) = v19;
      _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_DEBUG, "%{public}@No characteristic read requests for light profiles", (uint8_t *)location, 0xCu);
    }
  }
}

- (Class)lightLogCategory
{
  return (Class)objc_opt_class();
}

- (HMDRoom)roomForEntireHome
{
  return self->_roomForEntireHome;
}

- (void)__encodeAccessoriesWithCoder:(id)a3 options:(unint64_t)a4
{
  __int16 v88 = a4;
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v79 = self;
  uint64_t v6 = [(HMDHome *)self accessories];
  id v84 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v6, "count"));
  id v7 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v6, "count"));
  v80 = v5;
  char v8 = objc_msgSend(v5, "hmd_isForXPCTransport");
  uint64_t v9 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v6, "count"));
  uint64_t v10 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v6, "count"));
  v81 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v6, "count"));
  long long v98 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  id obj = v6;
  uint64_t v11 = [obj countByEnumeratingWithState:&v98 objects:v112 count:16];
  uint64_t v85 = v7;
  uint64_t v86 = v9;
  uint64_t v87 = (void *)v10;
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v99;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v99 != v13) {
          objc_enumerationMutation(obj);
        }
        id v15 = *(id *)(*((void *)&v98 + 1) + 8 * v14);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          BOOL v16 = v15;
        }
        else {
          BOOL v16 = 0;
        }
        id v17 = v16;

        id v18 = v15;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v19 = v18;
        }
        else {
          id v19 = 0;
        }
        id v20 = v19;

        if (v20) {
          char v21 = v8;
        }
        else {
          char v21 = 1;
        }
        if ((v21 & 1) == 0)
        {
          long long v24 = (void *)v10;
          id v25 = v20;
          goto LABEL_25;
        }
        if (v17) {
          char v22 = v8;
        }
        else {
          char v22 = 1;
        }
        if ((v22 & 1) == 0)
        {
          long long v24 = v9;
          id v25 = v17;
          goto LABEL_25;
        }
        int v23 = [v18 isCurrentAccessory];
        if ((v88 & 0x10) != 0 && v23)
        {
          long long v24 = v7;
          id v25 = v18;
LABEL_25:
          [v24 addObject:v25];
          goto LABEL_26;
        }
        id v26 = v18;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v27 = v26;
        }
        else {
          id v27 = 0;
        }
        id v28 = v27;

        if (v28)
        {
          uint64_t v10 = (uint64_t)v87;
          if ((v88 & 0x100) != 0) {
            [v84 addObject:v28];
          }
          goto LABEL_69;
        }
        id v29 = v26;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v30 = v29;
        }
        else {
          id v30 = 0;
        }
        id v31 = v30;

        if (v31)
        {
          id v7 = v85;
          if ((v88 & 0x40) != 0
            || (v88 & 0x800) != 0
            && ([v31 device], id v32 = objc_claimAutoreleasedReturnValue(), v32, v32))
          {
            [v85 addObject:v31];
          }
          goto LABEL_68;
        }
        id v33 = v29;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          long long v34 = v33;
        }
        else {
          long long v34 = 0;
        }
        id v35 = v34;
        id v82 = v33;

        if (v35)
        {
          id v83 = v35;
          id v36 = v35;
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass) {
            uint64_t v38 = v36;
          }
          else {
            uint64_t v38 = 0;
          }
          id v39 = v38;

          if (isKindOfClass)
          {
            if (v8)
            {
              uint64_t v40 = [v36 hostAccessory];

              if (!v40) {
                goto LABEL_52;
              }
LABEL_66:

              id v35 = v83;
              goto LABEL_67;
            }
            uint64_t v42 = v81;
            id v43 = v36;
          }
          else
          {
LABEL_52:
            if ([v36 hasTelevisionService])
            {
              if ((v88 & 0x400) == 0) {
                goto LABEL_66;
              }
            }
            else
            {
              long long v41 = [v36 networkRouterController];

              if (v41)
              {
                if ((v88 & 0x1000) == 0) {
                  goto LABEL_66;
                }
              }
              else if ((v88 & 0x200) == 0)
              {
                int v44 = [v36 hasSmartSpeakerService];
                if ((v88 & 0x100) == 0 || !v44)
                {
                  long long v45 = [v36 siriEndpointProfile];

                  if ((v88 & 0x8000) == 0 || !v45) {
                    goto LABEL_66;
                  }
                }
              }
            }
            uint64_t v42 = v85;
            id v43 = v82;
          }
          [v42 addObject:v43];
          goto LABEL_66;
        }
LABEL_67:

        id v7 = v85;
        id v31 = 0;
LABEL_68:

        uint64_t v10 = (uint64_t)v87;
LABEL_69:

        uint64_t v9 = v86;
LABEL_26:

        ++v14;
      }
      while (v12 != v14);
      uint64_t v46 = [obj countByEnumeratingWithState:&v98 objects:v112 count:16];
      uint64_t v12 = v46;
    }
    while (v46);
  }

  uint64_t v47 = (void *)MEMORY[0x1D9452090]();
  long long v48 = v79;
  id v49 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
  {
    __int16 v50 = HMFGetLogIdentifier();
    uint64_t v51 = objc_msgSend(v80, "hmd_clientIdentifier");
    __int16 v52 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v85, "count"));
    uint64_t v53 = [v85 shortDescription];
    *(_DWORD *)buf = 138544130;
    v105 = v50;
    __int16 v106 = 2112;
    v107 = v51;
    __int16 v108 = 2112;
    v109 = v52;
    __int16 v110 = 2112;
    v111 = v53;
    _os_log_impl(&dword_1D49D5000, v49, OS_LOG_TYPE_DEBUG, "%{public}@encoded Accessories [%@]: %@, %@", buf, 0x2Au);

    id v7 = v85;
    uint64_t v9 = v86;
  }

  __int16 v54 = (void *)[v7 copy];
  [v80 encodeObject:v54 forKey:@"accessories"];

  char v55 = v7;
  __int16 v56 = (void *)[v84 copy];
  [v80 encodeObject:v56 forKey:@"accessories.airplay"];

  uint64_t v57 = (void *)[v9 copy];
  [v80 encodeObject:v57 forKey:@"accessories.homepod"];

  uint64_t v58 = v87;
  uint64_t v59 = (void *)[v87 copy];
  [v80 encodeObject:v59 forKey:@"accessories.homepod_6_1"];

  unsigned __int8 v60 = (void *)[v81 copy];
  [v80 encodeObject:v60 forKey:@"HM.AppleMediaAccessorySensor"];

  if ((v88 & 5) == 0)
  {
    v61 = objc_msgSend(MEMORY[0x1E4F1CA80], "setWithCapacity:", objc_msgSend(obj, "count"));
    long long v94 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    id v62 = v7;
    uint64_t v63 = [v62 countByEnumeratingWithState:&v94 objects:v103 count:16];
    if (v63)
    {
      uint64_t v64 = v63;
      uint64_t v65 = *(void *)v95;
      do
      {
        for (uint64_t i = 0; i != v64; ++i)
        {
          if (*(void *)v95 != v65) {
            objc_enumerationMutation(v62);
          }
          v67 = *(void **)(*((void *)&v94 + 1) + 8 * i);
          v68 = [v67 room];

          if (v68)
          {
            id v69 = [v67 room];
            [v61 addObject:v69];
          }
        }
        uint64_t v64 = [v62 countByEnumeratingWithState:&v94 objects:v103 count:16];
      }
      while (v64);
    }

    long long v92 = 0u;
    long long v93 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    id v70 = v84;
    uint64_t v71 = [v70 countByEnumeratingWithState:&v90 objects:v102 count:16];
    if (v71)
    {
      uint64_t v72 = v71;
      uint64_t v73 = *(void *)v91;
      do
      {
        for (uint64_t j = 0; j != v72; ++j)
        {
          if (*(void *)v91 != v73) {
            objc_enumerationMutation(v70);
          }
          id v75 = *(void **)(*((void *)&v90 + 1) + 8 * j);
          uint64_t v76 = [v75 room];

          if (v76)
          {
            char v77 = [v75 room];
            [v61 addObject:v77];
          }
        }
        uint64_t v72 = [v70 countByEnumeratingWithState:&v90 objects:v102 count:16];
      }
      while (v72);
    }

    v78 = [v61 allObjects];
    [v80 encodeObject:v78 forKey:@"rooms"];

    char v55 = v85;
    uint64_t v9 = v86;
    uint64_t v58 = v87;
  }
}

void __168__HMDHome__sendClientCharacteristicsChangedNotificationWithIdentifier_requestMessage_multiPartResponse_moreInMultiPartResponse_characteristicChanges_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  id v5 = (void *)(a1 + 32);
  if (*(void *)(a1 + 32) && ([v3 isEntitledForSPIAccess] & 1) != 0)
  {
    uint64_t v6 = 1;
    uint64_t v7 = 5;
  }
  else
  {
    uint64_t v6 = 0;
    id v5 = (void *)(a1 + 48);
    uint64_t v7 = 1;
  }
  [*(id *)(a1 + 40) setMessagePayload:*v5];
  [*(id *)(a1 + 40) setRequiresSPIEntitlement:v6];
  if (*(void **)(a1 + 56) == v4)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 0;
  }
  else
  {
    [*(id *)(a1 + 40) setQualityOfService:17];
    char v8 = [[HMDHomeManagerXPCMessageSendPolicy alloc] initWithEntitlements:v7 options:*(void *)(a1 + 88) active:1];
    [*(id *)(a1 + 40) setSendPolicy:v8];
  }
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 64));
  uint64_t v9 = (void *)[*(id *)(a1 + 40) copy];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __168__HMDHome__sendClientCharacteristicsChangedNotificationWithIdentifier_requestMessage_multiPartResponse_moreInMultiPartResponse_characteristicChanges_completionHandler___block_invoke_2;
  v11[3] = &unk_1E6A19A28;
  id v12 = v4;
  id v13 = *(id *)(a1 + 56);
  id v15 = *(id *)(a1 + 72);
  id v14 = *(id *)(a1 + 64);
  id v10 = v4;
  [v10 sendMessage:v9 completionHandler:v11];
}

void __168__HMDHome__sendClientCharacteristicsChangedNotificationWithIdentifier_requestMessage_multiPartResponse_moreInMultiPartResponse_characteristicChanges_completionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (*(void *)(a1 + 32) == *(void *)(a1 + 40))
  {
    uint64_t v3 = *(void *)(a1 + 56);
    if (v3) {
      (*(void (**)(void))(v3 + 16))();
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void __56__HMDHome___readWriteResponseHandler_unhandledRequests___block_invoke(id *a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if ([a1[4] count])
  {
    uint64_t v8 = +[HMDCharacteristicResponseNotificationContext updateMultipleCharacteristicReadWriteResponsePayload:v6 withUnhandledRequests:a1[4]];

    id v6 = (id)v8;
  }
  uint64_t v9 = (void *)MEMORY[0x1D9452090]();
  id v10 = WeakRetained;
  uint64_t v11 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    id v12 = HMFGetLogIdentifier();
    id v13 = [a1[5] shortDescription];
    int v14 = 138544130;
    id v15 = v12;
    __int16 v16 = 2112;
    id v17 = v13;
    __int16 v18 = 2112;
    id v19 = v6;
    __int16 v20 = 2112;
    id v21 = v5;
    _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Responding to the client: %@ with payload : %@, error: %@", (uint8_t *)&v14, 0x2Au);
  }
  [a1[5] respondWithPayload:v6 error:v5];
  [a1[5] setResponseHandler:0];
  [v10 endReportingSessionForMessage:a1[5]];
}

- (void)endReportingSessionForMessage:(id)a3
{
  id v10 = a3;
  id v4 = reportContextFromMessage(v10);
  if (v4)
  {
    id v5 = v10;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v6 = v5;
    }
    else {
      id v6 = 0;
    }
    id v7 = v6;

    if (!v7)
    {
      uint64_t v8 = [(HMDHome *)self reportingSessionManager];
      uint64_t v9 = [v5 identifier];
      [v8 endSessionWithUUID:v9];
    }
  }
}

- (NSString)description
{
  return (NSString *)[(HMDHome *)self descriptionWithPointer:0];
}

- (id)descriptionWithPointer:(BOOL)a3
{
  BOOL v3 = a3;
  id v5 = NSString;
  id v6 = [(id)objc_opt_class() shortDescription];
  if (v3)
  {
    objc_msgSend(NSString, "stringWithFormat:", @" %p", self);
    id v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v7 = &stru_1F2C9F1A8;
  }
  uint64_t v8 = [(HMDHome *)self uuid];
  uint64_t v9 = [v8 UUIDString];
  id v10 = [(HMDHome *)self spiClientIdentifier];
  uint64_t v11 = [v10 UUIDString];
  id v12 = [(HMDHome *)self name];
  id v13 = [v5 stringWithFormat:@"<%@%@, ID = %@, spiID = %@, NM = %@>", v6, v7, v9, v11, v12];

  if (v3) {
  return v13;
  }
}

+ (id)shortDescription
{
  id v2 = (objc_class *)objc_opt_class();
  return NSStringFromClass(v2);
}

- (void)__handleProcessStateChange:(id)a3
{
  id v4 = [a3 userInfo];
  id v5 = [v4 objectForKeyedSubscript:@"processInfo"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v6 = v5;
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;

  if (v7)
  {
    uint64_t v8 = [v7 bundleIdentifier];
    unint64_t v9 = [v7 state];
    if (v8) {
      BOOL v10 = v9 > 4;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10 && ((1 << v9) & 0x1A) != 0)
    {
      id v12 = [(HMDHome *)self workQueue];
      uint64_t v14 = MEMORY[0x1E4F143A8];
      uint64_t v15 = 3221225472;
      __int16 v16 = __38__HMDHome___handleProcessStateChange___block_invoke;
      id v17 = &unk_1E6A197C8;
      id v18 = v8;
      id v19 = self;
      dispatch_async(v12, &v14);
    }
    id v13 = [(HMDHome *)self hapAccessories];
    objc_msgSend(v13, "hmf_enumerateWithAutoreleasePoolUsingBlock:", &__block_literal_global_675);
  }
}

- (void)_notifyRetrievalError:(id)a3 accessoryServer:(id)a4 linkType:(int64_t)a5 accessoryOperationBlock:(id)a6
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a6;
  id v13 = [(HMDHome *)self hapAccessories];
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = __102__HMDHome_AccessoryRetrieval___notifyRetrievalError_accessoryServer_linkType_accessoryOperationBlock___block_invoke;
  v17[3] = &unk_1E6A17068;
  id v18 = v11;
  id v19 = self;
  id v21 = v12;
  int64_t v22 = a5;
  id v20 = v10;
  id v14 = v10;
  id v15 = v12;
  id v16 = v11;
  objc_msgSend(v13, "na_each:", v17);
}

- (NSArray)hapAccessories
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v2 = [(HMDHome *)self accessories];
  BOOL v3 = (void *)[v2 copy];

  id v4 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v3, "count"));
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v16 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(id *)(*((void *)&v15 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v11 = v10;
        }
        else {
          id v11 = 0;
        }
        id v12 = v11;

        if (v12) {
          objc_msgSend(v4, "addObject:", v12, (void)v15);
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v7);
  }

  id v13 = (void *)[v4 copy];
  return (NSArray *)v13;
}

- (void)_evaluateShouldRelaunchAndSetRelaunch
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (![(HMDHome *)self isCurrentDeviceConfirmedPrimaryResident])
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    BOOL v3 = [(HMDHome *)self accessories];
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      int v6 = 0;
      uint64_t v7 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v7) {
            objc_enumerationMutation(v3);
          }
          v6 |= [*(id *)(*((void *)&v11 + 1) + 8 * i) shouldEnableDaemonRelaunch];
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);

      if (v6) {
        goto LABEL_10;
      }
    }
    else
    {
    }
    unint64_t v9 = [(HMDHome *)self launchHandler];
    id v10 = [(HMDHome *)self uuid];
    [v9 deregisterRelaunchClientWithUUID:v10];
    goto LABEL_13;
  }
LABEL_10:
  unint64_t v9 = [(HMDHome *)self launchHandler];
  id v10 = [(HMDHome *)self uuid];
  [v9 registerRelaunchClientWithUUID:v10];
LABEL_13:
}

- (HMDLaunchHandler)launchHandler
{
  return +[HMDLaunchHandler sharedHandler];
}

id __50__HMDHome_Wallet__accessoriesWithWalletKeySupport__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    BOOL v3 = v2;
  }
  else {
    BOOL v3 = 0;
  }
  id v4 = v3;
  id v5 = 0;
  if ([v4 supportsWalletKey]) {
    id v5 = v4;
  }

  return v5;
}

- (void)_processUpdatedAccessoryServer:(id)a3 reAddServices:(BOOL)a4
{
  uint64_t v300 = *MEMORY[0x1E4F143B8];
  id v185 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  int v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    v289 = v8;
    __int16 v290 = 2112;
    uint64_t v291 = (uint64_t)v185;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Updating existing HMDAccessory objects from HAPAccessory objects for server: %@", buf, 0x16u);
  }
  id v209 = [(HMDHome *)v6 _primaryAccessoryForServer:v185];
  v188 = [MEMORY[0x1E4F1CA48] array];
  v187 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v184 = [v209 configNumber];
  unint64_t v9 = (void *)MEMORY[0x1E4F1CA48];
  id v10 = [v185 accessories];
  v192 = [v9 arrayWithArray:v10];

  long long v11 = (void *)MEMORY[0x1E4F1CA48];
  long long v12 = [(HMDHome *)v6 hapAccessoriesForServer:v185];
  v205 = [v11 arrayWithArray:v12];

  long long v13 = [(HMDHome *)v6 _discoveredAccessoriesForServer:v185];
  [v205 addObjectsFromArray:v13];

  long long v14 = (void *)MEMORY[0x1D9452090]();
  v223 = v6;
  long long v15 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    uint64_t v16 = HMFGetLogIdentifier();
    uint64_t v17 = [v205 count];
    long long v18 = [v185 identifier];
    id v19 = [v185 accessories];
    uint64_t v20 = [v19 count];
    *(_DWORD *)buf = 138544130;
    v289 = v16;
    __int16 v290 = 2050;
    uint64_t v291 = v17;
    __int16 v292 = 2114;
    id v293 = v18;
    __int16 v294 = 2050;
    v295 = (__CFString *)v20;
    _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@Found %{public}tu existing HMDAccessory objects associated with the server: '%{public}@' and discovered %{public}tu HAPAccessory objects", buf, 0x2Au);
  }
  v189 = [MEMORY[0x1E4F1CA48] array];
  v190 = [MEMORY[0x1E4F1CA48] array];
  v186 = [MEMORY[0x1E4F1CA48] array];
  v220 = [MEMORY[0x1E4F1CA48] array];
  v217 = [MEMORY[0x1E4F1CA48] array];
  context = [MEMORY[0x1E4F1CA48] array];
  long long v269 = 0u;
  long long v270 = 0u;
  long long v267 = 0u;
  long long v268 = 0u;
  id obj = [v185 accessories];
  uint64_t v211 = [obj countByEnumeratingWithState:&v267 objects:v286 count:16];
  if (v211)
  {
    uint64_t v206 = *(void *)v268;
    do
    {
      for (uint64_t i = 0; i != v211; ++i)
      {
        if (*(void *)v268 != v206) {
          objc_enumerationMutation(obj);
        }
        int64_t v22 = *(void **)(*((void *)&v267 + 1) + 8 * i);
        long long v263 = 0u;
        long long v264 = 0u;
        long long v265 = 0u;
        long long v266 = 0u;
        id v23 = v205;
        uint64_t v24 = [v23 countByEnumeratingWithState:&v263 objects:v285 count:16];
        if (!v24) {
          goto LABEL_21;
        }
        uint64_t v25 = *(void *)v264;
        while (2)
        {
          for (uint64_t j = 0; j != v24; ++j)
          {
            if (*(void *)v264 != v25) {
              objc_enumerationMutation(v23);
            }
            id v27 = *(id *)(*((void *)&v263 + 1) + 8 * j);
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              id v28 = v27;
            }
            else {
              id v28 = 0;
            }
            id v29 = v28;

            if ([v29 matchesHAPAccessory:v22])
            {

              if (!v29) {
                goto LABEL_56;
              }
              if (([v29 isPrimary] & 1) == 0 && (objc_msgSend(v29, "isPaired") & 1) == 0)
              {
                v61 = (void *)MEMORY[0x1D9452090]();
                id v62 = v223;
                uint64_t v63 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
                {
                  uint64_t v64 = HMFGetLogIdentifier();
                  uint64_t v65 = [v29 shortDescription];
                  *(_DWORD *)buf = 138543618;
                  v289 = v64;
                  __int16 v290 = 2114;
                  uint64_t v291 = (uint64_t)v65;
                  _os_log_impl(&dword_1D49D5000, v63, OS_LOG_TYPE_INFO, "%{public}@Skipping configuring unpaired secondary accessory with identifier: %{public}@", buf, 0x16u);
                }
                goto LABEL_55;
              }
              [v188 addObject:v22];
              [v187 addObject:v29];
              id v30 = [v29 uuid];
              id v31 = [v29 hostAccessory];
              id v32 = [v31 uuid];
              id v33 = [(HMDHome *)v223 getTransactionFromHAPAccessory:v22 hmdAccessory:v29 uuid:v30 hostAccessoryUUID:v32 objectChangeType:2];

              id v34 = v22;
              id v35 = v29;
              id v36 = v33;
              __int16 v37 = [v35 initialManufacturer];
              if (v37)
              {
LABEL_28:
              }
              else
              {
                uint64_t v38 = [v34 manufacturer];
                BOOL v39 = v38 == 0;

                if (!v39)
                {
                  __int16 v37 = [v34 manufacturer];
                  [v36 setInitialManufacturer:v37];
                  goto LABEL_28;
                }
              }
              uint64_t v40 = [v35 initialModel];
              if (v40)
              {
LABEL_32:
              }
              else
              {
                long long v41 = [v34 model];
                BOOL v42 = v41 == 0;

                if (!v42)
                {
                  uint64_t v40 = [v34 model];
                  [v36 setInitialModel:v40];
                  goto LABEL_32;
                }
              }
              id v43 = [v35 initialCategoryIdentifier];
              if (v43)
              {
LABEL_36:
              }
              else
              {
                int v44 = [v34 category];
                BOOL v45 = v44 == 0;

                if (!v45)
                {
                  id v43 = [v34 category];
                  [v36 setInitialCategoryIdentifier:v43];
                  goto LABEL_36;
                }
              }
              uint64_t v46 = [v35 initialServiceTypeUUIDs];
              BOOL v47 = v46 == 0;

              if (v47)
              {
                long long v48 = serviceTypeUUIDsForAccessory(v34);
                if (v48) {
                  [v36 setInitialServiceTypeUUIDs:v48];
                }
              }
              id v262 = v220;
              id v261 = v217;
              id v260 = context;
              [(HMDHome *)v223 getUpdateTransactionForAccessory:v35 hapAccessory:v34 accessoryTransaction:v36 addSvcTransactions:&v262 updateSvcTransactions:&v261 removeSvcTransactions:&v260];
              id val = v262;

              id v221 = v261;
              id v218 = v260;

              if ([v34 isPrimary])
              {
                id v49 = [v185 setupHash];
                if (v49)
                {
                  contexta = (void *)MEMORY[0x1D9452090]();
                  __int16 v50 = v223;
                  uint64_t v51 = HMFGetOSLogHandle();
                  if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
                  {
                    __int16 v52 = HMFGetLogIdentifier();
                    uint64_t v53 = [v35 shortDescription];
                    *(_DWORD *)buf = 138543874;
                    v289 = v52;
                    __int16 v290 = 2112;
                    uint64_t v291 = (uint64_t)v49;
                    __int16 v292 = 2112;
                    id v293 = v53;
                    _os_log_impl(&dword_1D49D5000, v51, OS_LOG_TYPE_INFO, "%{public}@Saving setup hash '%@ for accessory %@", buf, 0x20u);
                  }
                  [v36 setAccessorySetupHash:v49];
                }
                [(HMDHome *)v223 _processUpdatedProductDataForAccessory:v35 hapAccessory:v34 transaction:v36];
              }
              __int16 v54 = [v35 modelObjectWithChangeType:1];
              id v259 = 0;
              [v54 diff:v36 differingFields:&v259];
              char v55 = (__CFString *)v259;

              if ([(__CFString *)v55 count])
              {
                __int16 v56 = (void *)MEMORY[0x1D9452090]();
                uint64_t v57 = v223;
                uint64_t v58 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
                {
                  uint64_t v59 = HMFGetLogIdentifier();
                  unsigned __int8 v60 = [v209 shortDescription];
                  *(_DWORD *)buf = 138544130;
                  v289 = v59;
                  __int16 v290 = 2114;
                  uint64_t v291 = (uint64_t)v60;
                  __int16 v292 = 2114;
                  id v293 = v36;
                  __int16 v294 = 2114;
                  v295 = v55;
                  _os_log_impl(&dword_1D49D5000, v58, OS_LOG_TYPE_INFO, "%{public}@[Pair-Verify %{public}@] Received accessory update %{public}@ due to diff %{public}@", buf, 0x2Au);
                }
                [v190 addObject:v36];
              }

              context = v218;
              v217 = v221;
              v220 = val;
              goto LABEL_55;
            }
          }
          uint64_t v24 = [v23 countByEnumeratingWithState:&v263 objects:v285 count:16];
          if (v24) {
            continue;
          }
          break;
        }
LABEL_21:
        id v27 = v23;
LABEL_55:

LABEL_56:
        ;
      }
      uint64_t v211 = [obj countByEnumeratingWithState:&v267 objects:v286 count:16];
    }
    while (v211);
  }

  v66 = (void *)MEMORY[0x1D9452090]();
  vala = v223;
  v67 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
  {
    v68 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    v289 = v68;
    __int16 v290 = 2112;
    uint64_t v291 = (uint64_t)v185;
    _os_log_impl(&dword_1D49D5000, v67, OS_LOG_TYPE_INFO, "%{public}@Finished updating paired accessories for server: %@", buf, 0x16u);
  }
  [v192 removeObjectsInArray:v188];
  [v205 removeObjectsInArray:v187];
  v199 = [(HMDHome *)vala accessories];
  long long v257 = 0u;
  long long v258 = 0u;
  long long v255 = 0u;
  long long v256 = 0u;
  id v191 = v192;
  id obja = (id)[v191 countByEnumeratingWithState:&v255 objects:v284 count:16];
  if (obja)
  {
    uint64_t v197 = *(void *)v256;
    do
    {
      uint64_t v69 = 0;
      do
      {
        if (*(void *)v256 != v197)
        {
          uint64_t v70 = v69;
          objc_enumerationMutation(v191);
          uint64_t v69 = v70;
        }
        uint64_t v207 = v69;
        uint64_t v71 = *(void **)(*((void *)&v255 + 1) + 8 * v69);
        long long v251 = 0u;
        long long v252 = 0u;
        long long v253 = 0u;
        long long v254 = 0u;
        id v72 = v199;
        uint64_t v73 = [v72 countByEnumeratingWithState:&v251 objects:v283 count:16];
        if (v73)
        {
          uint64_t v74 = *(void *)v252;
LABEL_67:
          uint64_t v75 = 0;
          while (1)
          {
            if (*(void *)v252 != v74) {
              objc_enumerationMutation(v72);
            }
            id v76 = *(id *)(*((void *)&v251 + 1) + 8 * v75);
            objc_opt_class();
            id v77 = (objc_opt_isKindOfClass() & 1) != 0 ? v76 : 0;
            id v78 = v77;

            uint64_t v79 = [v71 identifier];
            v80 = [v71 instanceID];
            int v81 = [v78 matchesHAPAccessoryWithServerIdentifier:v79 instanceID:v80];

            if (v81) {
              break;
            }

            if (v73 == ++v75)
            {
              uint64_t v73 = [v72 countByEnumeratingWithState:&v251 objects:v283 count:16];
              if (v73) {
                goto LABEL_67;
              }
              goto LABEL_76;
            }
          }
          v224 = (void *)MEMORY[0x1D9452090]();
          v212 = vala;
          id v82 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
          {
            v193 = HMFGetLogIdentifier();
            v195 = [v71 server];
            id v83 = [v195 identifier];
            id v84 = [v71 instanceID];
            unint64_t v85 = [v71 linkType];
            uint64_t v86 = @"Undefined";
            if (v85 <= 2) {
              uint64_t v86 = off_1E6A0B860[v85];
            }
            uint64_t v87 = v86;
            __int16 v88 = [v78 name];
            long long v89 = [v78 uniqueIdentifier];
            *(_DWORD *)buf = 138544642;
            v289 = v193;
            __int16 v290 = 2114;
            uint64_t v291 = (uint64_t)v83;
            __int16 v292 = 2114;
            id v293 = v84;
            __int16 v294 = 2112;
            v295 = v87;
            __int16 v296 = 2112;
            v297 = v88;
            __int16 v298 = 2112;
            v299 = v89;
            _os_log_impl(&dword_1D49D5000, v82, OS_LOG_TYPE_INFO, "%{public}@HAPAccessory %{public}@/%{public}@/%@ matches existing HMDAccessory %@(%@)", buf, 0x3Eu);
          }

          if (v78)
          {
            [v205 removeObject:v78];
            long long v90 = [v78 uuid];
            long long v91 = [v78 hostAccessory];
            long long v92 = [v91 uuid];
            v225 = [(HMDHome *)v212 getTransactionFromHAPAccessory:v71 hmdAccessory:v78 uuid:v90 hostAccessoryUUID:v92 objectChangeType:2];

            id v250 = v220;
            id v249 = v217;
            id v248 = context;
            [(HMDHome *)v212 getUpdateTransactionForAccessory:v78 hapAccessory:v71 accessoryTransaction:v225 addSvcTransactions:&v250 updateSvcTransactions:&v249 removeSvcTransactions:&v248];
            id v93 = v250;

            id v94 = v249;
            id v95 = v248;

            long long v96 = [v78 modelObjectWithChangeType:1];
            id v247 = 0;
            [v96 diff:v225 differingFields:&v247];
            long long v97 = (__CFString *)v247;

            if ([(__CFString *)v97 count])
            {
              long long v98 = (void *)MEMORY[0x1D9452090]();
              long long v99 = v212;
              long long v100 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v100, OS_LOG_TYPE_INFO))
              {
                long long v101 = HMFGetLogIdentifier();
                v102 = [v209 uuid];
                *(_DWORD *)buf = 138544130;
                v289 = v101;
                __int16 v290 = 2114;
                uint64_t v291 = (uint64_t)v102;
                __int16 v292 = 2114;
                id v293 = v225;
                __int16 v294 = 2114;
                v295 = v97;
                _os_log_impl(&dword_1D49D5000, v100, OS_LOG_TYPE_INFO, "%{public}@[Pair-Verify %{public}@] Received accessory update %{public}@ due to diff %{public}@", buf, 0x2Au);
              }
              [v190 addObject:v225];
            }
            goto LABEL_94;
          }
        }
        else
        {
LABEL_76:
        }
        if (v209)
        {
          v103 = [v71 instanceID];
          v104 = [v103 stringValue];
          v282 = v104;
          id v76 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v282 count:1];

          v105 = (void *)MEMORY[0x1E4F29128];
          __int16 v106 = [v209 uuid];
          v225 = objc_msgSend(v105, "hm_deriveUUIDFromBaseUUID:withSalts:", v106, v76);

          if (!v225)
          {
            v107 = (void *)MEMORY[0x1D9452090]();
            __int16 v108 = vala;
            v109 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
            {
              __int16 v110 = HMFGetLogIdentifier();
              v111 = [v209 shortDescription];
              *(_DWORD *)buf = 138543618;
              v289 = v110;
              __int16 v290 = 2112;
              uint64_t v291 = (uint64_t)v111;
              _os_log_impl(&dword_1D49D5000, v109, OS_LOG_TYPE_ERROR, "%{public}@Error during _processUpdatedAccessoryServer: Primary Accessory for Server has nil UUID: %@", buf, 0x16u);
            }
            uint64_t v112 = +[HMDTTRManager sharedManager];
            [v112 requestRadarWithDisplayReason:@"accessory has null identifier" radarTitle:@"PrimaryAccessoryForServer results in nil uuid during processUpdatedAccessoryServer"];
          }
          uint64_t v113 = (void *)MEMORY[0x1D9452090]();
          uint64_t v114 = vala;
          id v115 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v115, OS_LOG_TYPE_INFO))
          {
            id v116 = HMFGetLogIdentifier();
            id v117 = [v209 shortDescription];
            id v118 = [v71 instanceID];
            v119 = [v225 UUIDString];
            *(_DWORD *)buf = 138544130;
            v289 = v116;
            __int16 v290 = 2114;
            uint64_t v291 = (uint64_t)v117;
            __int16 v292 = 2114;
            id v293 = v118;
            __int16 v294 = 2114;
            v295 = v119;
            _os_log_impl(&dword_1D49D5000, v115, OS_LOG_TYPE_INFO, "%{public}@[Pair-Verify %{public}@] Adding a new bridged accessory instanceID %{public}@ and uuid %{public}@", buf, 0x2Au);
          }
          v120 = [v209 uuid];
          long long v97 = [(HMDHome *)v114 getTransactionFromHAPAccessory:v71 hmdAccessory:0 uuid:v225 hostAccessoryUUID:v120 objectChangeType:1];

          id v246 = v220;
          id v245 = v217;
          id v244 = context;
          [(HMDHome *)v114 getUpdateTransactionForAccessory:0 hapAccessory:v71 accessoryTransaction:v97 addSvcTransactions:&v246 updateSvcTransactions:&v245 removeSvcTransactions:&v244];
          id v93 = v246;

          id v94 = v245;
          id v95 = v244;

          v121 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v209, "certificationStatus"));
          [(__CFString *)v97 setCertificationStatus:v121];

          v122 = [(HMDHome *)v114 uuidToHAPAccessoryConfigTable];
          [v122 setObject:v71 forKey:v225];

          [v189 addObject:v97];
LABEL_94:

          context = v95;
          v217 = v94;
          v220 = v93;
        }
        uint64_t v69 = v207 + 1;
      }
      while ((id)(v207 + 1) != obja);
      id obja = (id)[v191 countByEnumeratingWithState:&v255 objects:v284 count:16];
    }
    while (obja);
  }

  if ([v205 count])
  {
    long long v242 = 0u;
    long long v243 = 0u;
    long long v240 = 0u;
    long long v241 = 0u;
    id v123 = v205;
    uint64_t v124 = [v123 countByEnumeratingWithState:&v240 objects:v281 count:16];
    if (v124)
    {
      uint64_t v125 = *(void *)v241;
      do
      {
        for (uint64_t k = 0; k != v124; ++k)
        {
          if (*(void *)v241 != v125) {
            objc_enumerationMutation(v123);
          }
          long long v127 = *(void **)(*((void *)&v240 + 1) + 8 * k);
          if (([v127 isPrimary] & 1) == 0)
          {
            long long v128 = [v127 transactionWithObjectChangeType:3];
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              long long v129 = v128;
            }
            else {
              long long v129 = 0;
            }
            id v130 = v129;

            long long v131 = (void *)MEMORY[0x1D9452090]();
            long long v132 = vala;
            long long v133 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v133, OS_LOG_TYPE_INFO))
            {
              long long v134 = HMFGetLogIdentifier();
              long long v135 = [v209 shortDescription];
              *(_DWORD *)buf = 138543874;
              v289 = v134;
              __int16 v290 = 2114;
              uint64_t v291 = (uint64_t)v135;
              __int16 v292 = 2114;
              id v293 = v130;
              _os_log_impl(&dword_1D49D5000, v133, OS_LOG_TYPE_INFO, "%{public}@[Pair-Verify %{public}@] Removing a secondary accessory %{public}@", buf, 0x20u);
            }
            if (v130) {
              [v186 addObject:v130];
            }
          }
        }
        uint64_t v124 = [v123 countByEnumeratingWithState:&v240 objects:v281 count:16];
      }
      while (v124);
    }
  }
  dispatch_group_t v136 = dispatch_group_create();
  v208 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  id v213 = v185;
  id v137 = v209;
  id v222 = v220;
  id v219 = v217;
  id v226 = context;
  contextb = v137;
  uint64_t v138 = [v137 configNumber];
  if ([v213 configNumber] != v138)
  {

LABEL_123:
    v147 = @"Add Accessory";
    goto LABEL_124;
  }
  if (![v226 count] && !objc_msgSend(v222, "count"))
  {
    long long v277 = 0u;
    long long v278 = 0u;
    long long v275 = 0u;
    long long v276 = 0u;
    id objb = v219;
    uint64_t v198 = [objb countByEnumeratingWithState:&v275 objects:buf count:16];
    if (v198)
    {
      uint64_t v167 = *(void *)v276;
      uint64_t v194 = *(void *)v276;
      while (2)
      {
        uint64_t v168 = 0;
        do
        {
          if (*(void *)v276 != v167)
          {
            uint64_t v169 = v168;
            objc_enumerationMutation(objb);
            uint64_t v168 = v169;
          }
          uint64_t v196 = v168;
          v170 = *(void **)(*((void *)&v275 + 1) + 8 * v168);
          v171 = [v170 instanceID];
          v172 = [contextb findService:v171];

          v173 = [v172 serviceType];
          v174 = [v170 serviceType];
          LODWORD(v171) = [v173 isEqualToString:v174];

          if (!v171)
          {
LABEL_157:

            goto LABEL_119;
          }
          long long v273 = 0u;
          long long v274 = 0u;
          long long v271 = 0u;
          long long v272 = 0u;
          id v210 = [v170 characteristics];
          uint64_t v175 = [v210 countByEnumeratingWithState:&v271 objects:v287 count:16];
          if (v175)
          {
            uint64_t v176 = *(void *)v272;
            while (2)
            {
              for (uint64_t m = 0; m != v175; ++m)
              {
                if (*(void *)v272 != v176) {
                  objc_enumerationMutation(v210);
                }
                v178 = *(void **)(*((void *)&v271 + 1) + 8 * m);
                v179 = [v178 objectForKeyedSubscript:@"characteristicInstanceID"];
                v180 = [v178 objectForKeyedSubscript:@"characteristicType"];
                v181 = [v172 findCharacteristic:v179];
                v182 = [v181 characteristicType];
                int v183 = [v182 isEqualToString:v180];

                if (!v183)
                {

                  goto LABEL_157;
                }
              }
              uint64_t v175 = [v210 countByEnumeratingWithState:&v271 objects:v287 count:16];
              if (v175) {
                continue;
              }
              break;
            }
          }

          uint64_t v167 = v194;
          uint64_t v168 = v196 + 1;
        }
        while (v196 + 1 != v198);
        uint64_t v198 = [objb countByEnumeratingWithState:&v275 objects:buf count:16];
        uint64_t v167 = v194;
        if (v198) {
          continue;
        }
        break;
      }
    }

    goto LABEL_123;
  }

LABEL_119:
  long long v139 = (void *)MEMORY[0x1D9452090]();
  long long v140 = vala;
  long long v141 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
  {
    long long v142 = HMFGetLogIdentifier();
    long long v143 = [contextb shortDescription];
    long long v144 = [NSNumber numberWithUnsignedInteger:v184];
    *(_DWORD *)buf = 138543874;
    v289 = v142;
    __int16 v290 = 2112;
    uint64_t v291 = (uint64_t)v143;
    __int16 v292 = 2112;
    id v293 = v144;
    _os_log_impl(&dword_1D49D5000, v141, OS_LOG_TYPE_ERROR, "%{public}@Only storing the update locally since the accessory %@ didn't update its config number: %@ after updating its services/characteristics.", buf, 0x20u);
  }
  long long v145 = @"Add Accessory Locally";
  uint64_t v146 = +[HMDBackingStoreTransactionOptions defaultLocalOptions];

  v147 = @"Add Accessory Locally";
  v208 = (void *)v146;
LABEL_124:
  v148 = [(HMDHome *)vala backingStore];
  v149 = [v148 transaction:v147 options:v208];

  v150 = [v190 arrayByAddingObjectsFromArray:v189];
  id v151 = [v150 arrayByAddingObjectsFromArray:v186];

  long long v238 = 0u;
  long long v239 = 0u;
  long long v236 = 0u;
  long long v237 = 0u;
  id v152 = v151;
  uint64_t v153 = [v152 countByEnumeratingWithState:&v236 objects:v280 count:16];
  if (v153)
  {
    uint64_t v154 = *(void *)v237;
    do
    {
      for (uint64_t n = 0; n != v153; ++n)
      {
        if (*(void *)v237 != v154) {
          objc_enumerationMutation(v152);
        }
        __int16 v156 = *(void **)(*((void *)&v236 + 1) + 8 * n);
        [v156 setConfigurationTracker:v136];
        [v149 add:v156 withMessage:0];
      }
      uint64_t v153 = [v152 countByEnumeratingWithState:&v236 objects:v280 count:16];
    }
    while (v153);
  }

  v157 = [v219 arrayByAddingObjectsFromArray:v222];
  v158 = [v157 arrayByAddingObjectsFromArray:v226];

  long long v234 = 0u;
  long long v235 = 0u;
  long long v232 = 0u;
  long long v233 = 0u;
  id v159 = v158;
  uint64_t v160 = [v159 countByEnumeratingWithState:&v232 objects:v279 count:16];
  if (v160)
  {
    uint64_t v161 = *(void *)v233;
    do
    {
      for (iuint64_t i = 0; ii != v160; ++ii)
      {
        if (*(void *)v233 != v161) {
          objc_enumerationMutation(v159);
        }
        v163 = *(void **)(*((void *)&v232 + 1) + 8 * ii);
        [v163 setConfigurationTracker:v136];
        [v149 add:v163 withMessage:0];
      }
      uint64_t v160 = [v159 countByEnumeratingWithState:&v232 objects:v279 count:16];
    }
    while (v160);
  }

  objc_initWeak((id *)buf, vala);
  v227[0] = MEMORY[0x1E4F143A8];
  v227[1] = 3221225472;
  v227[2] = __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke;
  v227[3] = &unk_1E6A137D0;
  objc_copyWeak(&v231, (id *)buf);
  id v164 = v213;
  id v228 = v164;
  v165 = v136;
  v229 = v165;
  id v166 = v189;
  id v230 = v166;
  [v149 run:v227];

  objc_destroyWeak(&v231);
  objc_destroyWeak((id *)buf);
}

- (id)getTransactionFromHAPAccessory:(id)a3 hmdAccessory:(id)a4 uuid:(id)a5 hostAccessoryUUID:(id)a6 objectChangeType:(unint64_t)a7
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  uint64_t v16 = [(HMDHome *)self currentAccessory];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  id v81 = v17;

  id v18 = v14;
  id v19 = v18;
  uint64_t v79 = v15;
  if (v13)
  {
    uint64_t v20 = [v13 transactionWithObjectChangeType:a7];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v21 = v20;
    }
    else {
      id v21 = 0;
    }
    int64_t v22 = v21;
    goto LABEL_14;
  }
  if (!v18) {
    goto LABEL_13;
  }
  if (!v81) {
    goto LABEL_13;
  }
  id v23 = [v81 sensorAccessoryUUID];
  int v24 = objc_msgSend(v23, "hmf_isEqualToUUID:", v19);

  if (!v24
    || (uint64_t v25 = [HMDAppleMediaAccessorySensorModel alloc],
        [(HMDHome *)self uuid],
        id v26 = objc_claimAutoreleasedReturnValue(),
        v27 = [(HMDBackingStoreModelObject *)v25 initWithObjectChangeType:a7 uuid:v19 parentUUID:v26], v26, id v15 = v79, !v27))
  {
LABEL_13:
    id v28 = [HMDHAPAccessoryTransaction alloc];
    uint64_t v20 = [(HMDHome *)self uuid];
    int64_t v22 = [(HMDBackingStoreModelObject *)v28 initWithObjectChangeType:a7 uuid:v19 parentUUID:v20];
LABEL_14:
    id v27 = (HMDAppleMediaAccessorySensorModel *)v22;
  }
  [(HMDHAPAccessoryTransaction *)v27 setHapAccessoryLocal:v12];
  id v29 = [v13 providedName];
  if (v29)
  {
LABEL_18:

    goto LABEL_19;
  }
  if ([v12 linkType] != 2)
  {
    id v29 = [v12 name];
    id v30 = (void *)[v29 copy];
    [(HMDAppleMediaAccessorySensorModel *)v27 setProvidedName:v30];

    goto LABEL_18;
  }
LABEL_19:
  id v31 = [v12 uniqueIdentifier];
  [(HMDAppleMediaAccessorySensorModel *)v27 setUniqueIdentifier:v31];

  id v32 = [v12 identifier];
  [(HMDAppleMediaAccessorySensorModel *)v27 setIdentifier:v32];

  id v33 = [v12 identifier];
  unsigned __int8 v88 = 0;
  id v34 = [(HMDHome *)self keychainStore];
  id v87 = 0;
  v80 = [v34 readPublicKeyForAccessoryName:v33 registeredWithHomeKit:&v88 error:&v87];
  id v78 = v87;

  int v35 = v88;
  id v36 = (void *)MEMORY[0x1D9452090]();
  __int16 v37 = self;
  uint64_t v38 = HMFGetOSLogHandle();
  BOOL v39 = v38;
  if (v33 && v80 && v35)
  {
    if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
    {
      uint64_t v40 = HMFGetLogIdentifier();
      long long v41 = [v12 name];
      [v12 uniqueIdentifier];
      id v77 = v13;
      id v43 = v42 = v19;
      *(_DWORD *)buf = 138544386;
      long long v90 = v40;
      __int16 v91 = 2112;
      long long v92 = v41;
      __int16 v93 = 2112;
      id v94 = v43;
      __int16 v95 = 2112;
      id v96 = v33;
      __int16 v97 = 2112;
      long long v98 = v80;
      _os_log_impl(&dword_1D49D5000, v39, OS_LOG_TYPE_INFO, "%{public}@Accessory %@/%@ setting pairing username and pubkey to ('%@', '%@')", buf, 0x34u);

      id v19 = v42;
      id v13 = v77;

      id v15 = v79;
    }

    [(HMDAppleMediaAccessorySensorModel *)v27 setPairingUsername:v33];
    [(HMDAppleMediaAccessorySensorModel *)v27 setPublicKey:v80];
    if (!v15) {
      goto LABEL_34;
    }
LABEL_29:
    BOOL v47 = -[HMDHome accessoryWithUUID:](v37, "accessoryWithUUID:", v15, v77);
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    id v49 = [v15 UUIDString];
    if ((isKindOfClass & 1) != 0 && v47) {
      [(HMDAppleMediaAccessorySensorModel *)v27 setHostAccessoryUUID:v49];
    }
    else {
      [(HMDAppleMediaAccessorySensorModel *)v27 setBridgeUUID:v49];
    }

    goto LABEL_34;
  }
  if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
  {
    int v44 = HMFGetLogIdentifier();
    [(HMDAppleMediaAccessorySensorModel *)v27 providedName];
    id v77 = v13;
    v46 = id v45 = v19;
    *(_DWORD *)buf = 138544130;
    long long v90 = v44;
    __int16 v91 = 2112;
    long long v92 = v46;
    __int16 v93 = 2112;
    id v94 = v33;
    __int16 v95 = 2112;
    id v96 = v78;
    _os_log_impl(&dword_1D49D5000, v39, OS_LOG_TYPE_ERROR, "%{public}@Failed to read public key for accessory %@ with pairing username %@: %@", buf, 0x2Au);

    id v19 = v45;
    id v13 = v77;
  }
  if (v15) {
    goto LABEL_29;
  }
LABEL_34:
  uint64_t v50 = [(HMDAppleMediaAccessorySensorModel *)v27 hostAccessoryUUID];
  uint64_t v51 = (void *)v50;
  if (v19 && !v50 && v81)
  {
    __int16 v52 = [v81 sensorAccessoryUUID];
    int v53 = objc_msgSend(v52, "hmf_isEqualToUUID:", v19);

    if (!v53) {
      goto LABEL_40;
    }
    uint64_t v51 = [v81 uuid];
    __int16 v54 = [v51 UUIDString];
    [(HMDAppleMediaAccessorySensorModel *)v27 setHostAccessoryUUID:v54];
  }
LABEL_40:
  char v55 = [v13 category];

  if (!v55)
  {
    __int16 v56 = [v12 category];

    if (v56)
    {
      uint64_t v57 = [v12 category];
      [(HMDAppleMediaAccessorySensorModel *)v27 setAccessoryCategory:v57];
    }
    else
    {
      uint64_t v57 = [(HMDHome *)v37 hapMetadata];
      uint64_t v58 = [v57 categoryForOther];
      [v58 identifier];
      uint64_t v59 = v33;
      id v60 = v13;
      id v62 = v61 = v19;
      [(HMDAppleMediaAccessorySensorModel *)v27 setAccessoryCategory:v62];

      id v19 = v61;
      id v13 = v60;
      id v33 = v59;
    }
  }
  uint64_t v63 = v19;
  uint64_t v64 = [MEMORY[0x1E4F1CA80] set];
  uint64_t v65 = (void *)MEMORY[0x1E4F1CA80];
  v66 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v12, "linkType"));
  v67 = [v65 setWithObject:v66];

  v68 = [v12 servicesOfType:@"00000701-0000-1000-8000-0026BB765291"];
  uint64_t v69 = [v68 count];

  if (v69) {
    [v67 addObject:&unk_1F2DC7528];
  }
  v84[0] = MEMORY[0x1E4F143A8];
  v84[1] = 3221225472;
  v84[2] = __95__HMDHome_getTransactionFromHAPAccessory_hmdAccessory_uuid_hostAccessoryUUID_objectChangeType___block_invoke;
  v84[3] = &unk_1E6A069B8;
  id v70 = v64;
  id v85 = v70;
  id v86 = v12;
  id v71 = v12;
  objc_msgSend(v67, "na_each:", v84);
  id v72 = [v13 transportInformationInstances];
  v82[0] = MEMORY[0x1E4F143A8];
  v82[1] = 3221225472;
  v82[2] = __95__HMDHome_getTransactionFromHAPAccessory_hmdAccessory_uuid_hostAccessoryUUID_objectChangeType___block_invoke_2;
  v82[3] = &unk_1E6A069E0;
  id v83 = v70;
  id v73 = v70;
  objc_msgSend(v72, "na_each:", v82);

  uint64_t v74 = [v73 allObjects];
  [(HMDAppleMediaAccessorySensorModel *)v27 setTransportInformation:v74];

  uint64_t v75 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v71, "communicationProtocol"));
  [(HMDAppleMediaAccessorySensorModel *)v27 setCommunicationProtocol:v75];

  return v27;
}

- (HAPKeyStore)keychainStore
{
  return (HAPKeyStore *)objc_getProperty(self, a2, 920, 1);
}

- (HMDAccessory)currentAccessory
{
  id v2 = [(HMDHome *)self accessories];
  BOOL v3 = objc_msgSend(v2, "na_firstObjectPassingTest:", &__block_literal_global_1117);

  return (HMDAccessory *)v3;
}

- (id)accessoryWithUUID:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self accessories];
  int v6 = objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);

  return v6;
}

- (NSArray)accessories
{
  os_unfair_recursive_lock_lock_with_options();
  BOOL v3 = [(NSMutableDictionary *)self->_accessories allValues];
  os_unfair_recursive_lock_unlock();
  return (NSArray *)v3;
}

- (HMDBackingStore)backingStore
{
  os_unfair_recursive_lock_lock_with_options();
  BOOL v3 = self->_backingStore;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)encodeWithCoder:(id)a3
{
  id v5 = a3;
  id v4 = (void *)MEMORY[0x1D9452090]();
  [(HMDHome *)self _encodeWithCoder:v5];
}

- (void)getRunTimeStateUpdateWithOptions:(unint64_t)a3 includeMediaAccessorySessionState:(BOOL)a4 includeResidentDeviceState:(BOOL)a5 completion:(id)a6
{
  id v10 = a6;
  long long v11 = [(HMDHome *)self workQueue];
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = __116__HMDHome_getRunTimeStateUpdateWithOptions_includeMediaAccessorySessionState_includeResidentDeviceState_completion___block_invoke;
  v13[3] = &unk_1E6A06968;
  id v14 = v10;
  unint64_t v15 = a3;
  BOOL v16 = a4;
  BOOL v17 = a5;
  v13[4] = self;
  id v12 = v10;
  dispatch_async(v11, v13);
}

uint64_t __59__HMDHome__subscribeForHomeNotificationsFromRemoteGateway___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  char v3 = (v2 == 0) | ~objc_opt_isKindOfClass();

  return v3 & 1;
}

id __46__HMDHome__handleCoalescedModifyNotifications__block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  char v3 = (void *)[a3 copy];
  return v3;
}

uint64_t __116__HMDHome_getRunTimeStateUpdateWithOptions_includeMediaAccessorySessionState_includeResidentDeviceState_completion___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _getRunTimeStateUpdateWithOptions:*(void *)(a1 + 48) includeMediaAccessorySessionState:*(unsigned __int8 *)(a1 + 56) includeResidentDeviceState:*(unsigned __int8 *)(a1 + 57) completion:*(void *)(a1 + 40)];
}

- (void)_notificationPayloadsForRemoteGateway:(void *)a3 accessories:(void *)a4 enableCharacteristicNotificationPayload:(void *)a5 characteristicNotificationThresholdsPayload:(void *)a6 disableCharacteristicNotificationPayload:(void *)a7 enableMediaNotificationPayload:(void *)a8 disableMediaNotificationPayload:
{
  uint64_t v179 = *MEMORY[0x1E4F143B8];
  id v113 = a3;
  if (a1)
  {
    long long v144 = [MEMORY[0x1E4F1CA48] array];
    long long v162 = 0u;
    long long v163 = 0u;
    long long v164 = 0u;
    long long v165 = 0u;
    id obj = [a1 triggers];
    uint64_t v9 = [obj countByEnumeratingWithState:&v162 objects:v178 count:16];
    long long v132 = a1;
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v163;
      uint64_t v133 = *(void *)v163;
      do
      {
        uint64_t v12 = 0;
        context = (void *)v10;
        do
        {
          if (*(void *)v163 != v11) {
            objc_enumerationMutation(obj);
          }
          id v13 = *(id *)(*((void *)&v162 + 1) + 8 * v12);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v14 = v13;
          }
          else {
            id v14 = 0;
          }
          id v15 = v14;

          if ([v15 shouldActivateOnLocalDevice])
          {
            id v140 = v15;
            uint64_t v142 = v12;
            long long v160 = 0u;
            long long v161 = 0u;
            long long v158 = 0u;
            long long v159 = 0u;
            BOOL v16 = [v15 characteristicEvents];
            uint64_t v17 = [v16 countByEnumeratingWithState:&v158 objects:v177 count:16];
            if (v17)
            {
              uint64_t v18 = v17;
              uint64_t v19 = *(void *)v159;
              do
              {
                for (uint64_t i = 0; i != v18; ++i)
                {
                  if (*(void *)v159 != v19) {
                    objc_enumerationMutation(v16);
                  }
                  id v21 = *(void **)(*((void *)&v158 + 1) + 8 * i);
                  int64_t v22 = [v21 characteristic];

                  if (v22)
                  {
                    id v23 = [v21 characteristic];
                    [v144 addObject:v23];
                  }
                  else
                  {
                    int v24 = (void *)MEMORY[0x1D9452090]();
                    id v25 = v132;
                    id v26 = HMFGetOSLogHandle();
                    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
                    {
                      id v27 = HMFGetLogIdentifier();
                      *(_DWORD *)buf = 138543618;
                      *(void *)&uint8_t buf[4] = v27;
                      *(_WORD *)&buf[12] = 2112;
                      *(void *)&buf[14] = v21;
                      _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_ERROR, "%{public}@Characteristic of HMDCharacteristicEvent %@ is nil!", buf, 0x16u);
                    }
                  }
                  a1 = v132;
                }
                uint64_t v18 = [v16 countByEnumeratingWithState:&v158 objects:v177 count:16];
              }
              while (v18);
            }

            uint64_t v11 = v133;
            uint64_t v10 = (uint64_t)context;
            id v15 = v140;
            uint64_t v12 = v142;
          }

          ++v12;
        }
        while (v12 != v10);
        uint64_t v10 = [obj countByEnumeratingWithState:&v162 objects:v178 count:16];
      }
      while (v10);
    }

    unint64_t v28 = 0x1E4F1C000uLL;
    id v118 = [MEMORY[0x1E4F1CA60] dictionary];
    id v116 = [MEMORY[0x1E4F1CA60] dictionary];
    id v117 = [MEMORY[0x1E4F1CA60] dictionary];
    if (a7)
    {
      uint64_t v114 = [MEMORY[0x1E4F1CA60] dictionary];
    }
    else
    {
      uint64_t v114 = 0;
    }
    if (a8)
    {
      __int16 v110 = [MEMORY[0x1E4F1CA60] dictionary];
    }
    else
    {
      __int16 v110 = 0;
    }
    unint64_t v29 = 0x1E4F1C000uLL;
    long long v156 = 0u;
    long long v157 = 0u;
    long long v154 = 0u;
    long long v155 = 0u;
    id v120 = v113;
    uint64_t v30 = [v120 countByEnumeratingWithState:&v154 objects:v176 count:16];
    if (v30)
    {
      uint64_t v31 = v30;
      id v32 = v114;
      if (!a2) {
        id v32 = v110;
      }
      id v115 = v32;
      uint64_t v123 = *(void *)v155;
      id obja = (id)*MEMORY[0x1E4F5BA48];
      do
      {
        uint64_t v33 = 0;
        uint64_t v119 = v31;
        do
        {
          if (*(void *)v155 != v123) {
            objc_enumerationMutation(v120);
          }
          uint64_t v125 = v33;
          id v34 = *(void **)(*((void *)&v154 + 1) + 8 * v33);
          long long v134 = [*(id *)(v29 + 2632) array];
          id v130 = [*(id *)(v29 + 2632) array];
          int v35 = [*(id *)(v28 + 2656) dictionary];
          id v36 = v34;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            __int16 v37 = v36;
          }
          else {
            __int16 v37 = 0;
          }
          id v38 = v37;

          id v39 = v36;
          uint64_t v40 = v38;
          id v41 = v39;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v42 = v41;
          }
          else {
            id v42 = 0;
          }
          id v43 = v42;

          long long v145 = v35;
          if (v40)
          {
            id v124 = v43;
            if (shouldSkipRemoteAccessoryNotificationRegistration(a1, v40))
            {
              int v44 = (void *)MEMORY[0x1D9452090]();
              id v45 = a1;
              uint64_t v46 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
              {
                BOOL v47 = HMFGetLogIdentifier();
                *(void *)&buf[8] = 0;
                *(void *)buf = 0;
                long long v48 = [v40 uuid];

                if (v48)
                {
                  id v49 = [v40 uuid];
                  [v49 getUUIDBytes:buf];
                }
                else
                {
                  *(_OWORD *)buf = *MEMORY[0x1E4F655A8];
                }
                long long v175 = *(_OWORD *)buf;
                *(_DWORD *)buf = 138543874;
                *(void *)&uint8_t buf[4] = v47;
                *(_WORD *)&buf[12] = 1040;
                *(_DWORD *)&buf[14] = 16;
                *(_WORD *)&buf[18] = 2096;
                *(void *)&buf[20] = &v175;
                _os_log_impl(&dword_1D49D5000, v46, OS_LOG_TYPE_INFO, "%{public}@Dropping all characteristics for %{uuid_t}.16P from remote notification as partitioned network is no longer supported by residents", buf, 0x1Cu);

                unint64_t v29 = 0x1E4F1C000;
                uint64_t v31 = v119;
              }

              uint64_t v50 = v130;
              int v35 = v145;
              id v43 = v124;
              goto LABEL_111;
            }
            v121 = v41;
            v122 = v40;
            long long v152 = 0u;
            long long v153 = 0u;
            long long v150 = 0u;
            long long v151 = 0u;
            id v126 = [v40 services];
            uint64_t v128 = [v126 countByEnumeratingWithState:&v150 objects:v174 count:16];
            if (!v128) {
              goto LABEL_94;
            }
            uint64_t v127 = *(void *)v151;
            while (1)
            {
              uint64_t v55 = 0;
              do
              {
                if (*(void *)v151 != v127) {
                  objc_enumerationMutation(v126);
                }
                uint64_t v129 = v55;
                __int16 v56 = *(void **)(*((void *)&v150 + 1) + 8 * v55);
                uint64_t v57 = [v56 type];
                long long v146 = 0u;
                long long v147 = 0u;
                long long v148 = 0u;
                long long v149 = 0u;
                uint64_t v58 = [v56 characteristics];
                uint64_t v59 = [v58 countByEnumeratingWithState:&v146 objects:v173 count:16];
                if (v59)
                {
                  uint64_t v60 = v59;
                  uint64_t v61 = *(void *)v147;
                  uint64_t v141 = *(void *)v147;
                  long long v143 = v58;
                  do
                  {
                    uint64_t v62 = 0;
                    uint64_t v131 = v60;
                    do
                    {
                      if (*(void *)v147 != v61) {
                        objc_enumerationMutation(v58);
                      }
                      uint64_t v63 = *(void **)(*((void *)&v146 + 1) + 8 * v62);
                      if ([v63 supportsNotification])
                      {
                        uint64_t v64 = [a1 hapMetadata];
                        char v65 = [v64 shouldFilterEnableNotificationsForCharacteristicType:0 serviceType:v57];

                        if ((v65 & 1) == 0)
                        {
                          v66 = v57;
                          if ([v57 isEqualToString:obja])
                          {
                            v67 = [v63 type];
                            int v68 = [v67 isEqualToString:@"000000A6-0000-1000-8000-0026BB765291"];
                          }
                          else
                          {
                            int v68 = 0;
                          }
                          uint64_t v69 = [a1 hapMetadata];
                          id v70 = [v63 type];
                          char v71 = [v69 shouldAutoEnableNotificationForCharacteristic:v70 ofService:v66];

                          char v72 = [v63 isNonHomeNotificationsEnabled];
                          if (([v144 containsObject:v63] & 1) != 0
                            || (v72 & 1) != 0
                            || (v71 & 1) != 0
                            || v68)
                          {
                            contexta = (void *)MEMORY[0x1D9452090]();
                            id v77 = a1;
                            id v78 = HMFGetOSLogHandle();
                            if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
                            {
                              uint64_t v79 = HMFGetLogIdentifier();
                              v80 = HMFBooleanToString();
                              id v81 = HMFBooleanToString();
                              id v82 = HMFBooleanToString();
                              id v83 = HMFBooleanToString();
                              *(_DWORD *)buf = 138544642;
                              *(void *)&uint8_t buf[4] = v79;
                              *(_WORD *)&buf[12] = 2112;
                              *(void *)&buf[14] = v63;
                              *(_WORD *)&buf[22] = 2112;
                              *(void *)&buf[24] = v80;
                              __int16 v167 = 2112;
                              uint64_t v168 = v81;
                              __int16 v169 = 2112;
                              v170 = v82;
                              __int16 v171 = 2112;
                              v172 = v83;
                              _os_log_impl(&dword_1D49D5000, v78, OS_LOG_TYPE_DEBUG, "%{public}@Enabling characteristic %@ because characteristicInEvent: %@ nonHomeNotificationsEnabled: %@ autoEnableNotification: %@ accessoryFlags: %@", buf, 0x3Eu);

                              uint64_t v60 = v131;
                            }

                            id v84 = [v63 changeThresholdForNonHomeClientEnabledNotifications];
                            id v85 = [v77 hapMetadata];
                            id v86 = [v63 type];
                            uint64_t v57 = v66;
                            int v87 = [v85 shouldEnableHomeNotificationForCharacteristicType:v86 serviceType:v66];

                            int v35 = v145;
                            if (v84 && (v87 & a2 & 1) == 0)
                            {
                              unsigned __int8 v88 = [v63 instanceID];
                              long long v89 = [v88 stringValue];
                              [v145 setObject:v84 forKeyedSubscript:v89];
                            }
                            long long v90 = [v63 instanceID];
                            [v134 addObject:v90];

                            a1 = v132;
                          }
                          else
                          {
                            int v35 = v145;
                            if (a2)
                            {
                              id v73 = [v63 type];
                              uint64_t v74 = [a1 hapMetadata];
                              uint64_t v57 = v66;
                              int v75 = [v74 shouldEnableHomeNotificationForCharacteristicType:v73 serviceType:v66];

                              if (v75)
                              {
                                id v76 = [v63 instanceID];
                                [v134 addObject:v76];
                              }
LABEL_88:
                            }
                            else
                            {
                              uint64_t v57 = v66;
                              if (![v63 isClientNotificationEnabled])
                              {
                                id v73 = [v63 instanceID];
                                [v130 addObject:v73];
                                goto LABEL_88;
                              }
                              __int16 v91 = (void *)MEMORY[0x1D9452090]();
                              id v92 = a1;
                              __int16 v93 = HMFGetOSLogHandle();
                              if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
                              {
                                id v94 = HMFGetLogIdentifier();
                                __int16 v95 = [v63 notificationRegistrations];
                                *(_DWORD *)buf = 138543874;
                                *(void *)&uint8_t buf[4] = v94;
                                *(_WORD *)&buf[12] = 2112;
                                *(void *)&buf[14] = v63;
                                *(_WORD *)&buf[22] = 2112;
                                *(void *)&buf[24] = v95;
                                _os_log_impl(&dword_1D49D5000, v93, OS_LOG_TYPE_DEFAULT, "%{public}@Not disabling characteristic %@ because client(s) are registered: %@", buf, 0x20u);

                                uint64_t v57 = v66;
                                int v35 = v145;
                              }
                            }
                          }
                          uint64_t v61 = v141;
                          uint64_t v58 = v143;
                        }
                      }
                      ++v62;
                    }
                    while (v60 != v62);
                    uint64_t v60 = [v58 countByEnumeratingWithState:&v146 objects:v173 count:16];
                  }
                  while (v60);
                }

                uint64_t v55 = v129 + 1;
              }
              while (v129 + 1 != v128);
              uint64_t v128 = [v126 countByEnumeratingWithState:&v150 objects:v174 count:16];
              if (!v128)
              {
LABEL_94:

                id v96 = [v121 uuid];
                __int16 v97 = [v96 UUIDString];

                if ([v134 count])
                {
                  long long v98 = (void *)[v134 copy];
                  [v118 setObject:v98 forKeyedSubscript:v97];
                }
                unint64_t v29 = 0x1E4F1C000;
                unint64_t v28 = 0x1E4F1C000;
                uint64_t v31 = v119;
                if ([v35 count])
                {
                  uint64_t v99 = (void *)[v35 copy];
                  [v116 setObject:v99 forKeyedSubscript:v97];
                }
                uint64_t v50 = v130;
                id v43 = v124;
                if ([v130 count])
                {
                  long long v100 = (void *)[v130 copy];
                  [v117 setObject:v100 forKeyedSubscript:v97];

                  uint64_t v50 = v130;
                }

                uint64_t v40 = v122;
                goto LABEL_111;
              }
            }
          }
          uint64_t v50 = v130;
          if (v43)
          {
            if ([a1 isCurrentDeviceAvailableResident])
            {
              uint64_t v51 = (void *)MEMORY[0x1D9452090]();
              id v52 = a1;
              int v53 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
              {
                __int16 v54 = HMFGetLogIdentifier();
                *(_DWORD *)buf = 138543618;
                *(void *)&uint8_t buf[4] = v54;
                *(_WORD *)&buf[12] = 2112;
                *(void *)&buf[14] = v43;
                _os_log_impl(&dword_1D49D5000, v53, OS_LOG_TYPE_INFO, "%{public}@Skipping generating media notification payload for apple media accessory because current device is a resident: %@", buf, 0x16u);

                int v35 = v145;
              }
            }
            else
            {
              long long v101 = [v43 mediaProfile];
              if (v101)
              {
                v102 = -[HMDHome mediaNotificationPayloadForProfile:](a1, v101);
                [v115 addEntriesFromDictionary:v102];
              }
              else
              {
                v103 = (void *)MEMORY[0x1D9452090]();
                id v104 = a1;
                v105 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
                {
                  __int16 v106 = HMFGetLogIdentifier();
                  *(_DWORD *)buf = 138543618;
                  *(void *)&uint8_t buf[4] = v106;
                  *(_WORD *)&buf[12] = 2112;
                  *(void *)&buf[14] = v43;
                  _os_log_impl(&dword_1D49D5000, v105, OS_LOG_TYPE_INFO, "%{public}@Skipping generating media notification payload for accessory with no media profile: %@", buf, 0x16u);

                  unint64_t v29 = 0x1E4F1C000;
                }

                int v35 = v145;
              }
            }
            uint64_t v50 = v130;
            uint64_t v40 = 0;
            unint64_t v28 = 0x1E4F1C000;
          }
LABEL_111:

          uint64_t v33 = v125 + 1;
        }
        while (v125 + 1 != v31);
        uint64_t v31 = [v120 countByEnumeratingWithState:&v154 objects:v176 count:16];
      }
      while (v31);
    }

    *a4 = (id)[v118 copy];
    if (a5) {
      *a5 = (id)[v116 copy];
    }
    *a6 = (id)[v117 copy];
    if (a7) {
      *a7 = (id)[v114 copy];
    }
    if (a8) {
      *a8 = (id)[v110 copy];
    }
  }
}

- (id)_characteristicNotificationPayloadsOnDirectTransports:(BOOL)a3
{
  BOOL v65 = a3;
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  v66 = [MEMORY[0x1E4F1CA48] array];
  long long v88 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  id obj = [(HMDHome *)self triggers];
  uint64_t v4 = [obj countByEnumeratingWithState:&v88 objects:v97 count:16];
  char v71 = self;
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v89;
    do
    {
      uint64_t v7 = 0;
      uint64_t v67 = v5;
      do
      {
        if (*(void *)v89 != v6) {
          objc_enumerationMutation(obj);
        }
        id v8 = *(id *)(*((void *)&v88 + 1) + 8 * v7);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v9 = v8;
        }
        else {
          uint64_t v9 = 0;
        }
        id v10 = v9;

        if ([v10 shouldActivateOnLocalDevice])
        {
          long long v86 = 0u;
          long long v87 = 0u;
          long long v84 = 0u;
          long long v85 = 0u;
          uint64_t v11 = [v10 characteristicEvents];
          uint64_t v12 = [v11 countByEnumeratingWithState:&v84 objects:v96 count:16];
          if (v12)
          {
            uint64_t v13 = v12;
            uint64_t v14 = *(void *)v85;
            do
            {
              for (uint64_t i = 0; i != v13; ++i)
              {
                if (*(void *)v85 != v14) {
                  objc_enumerationMutation(v11);
                }
                BOOL v16 = *(void **)(*((void *)&v84 + 1) + 8 * i);
                uint64_t v17 = [v16 characteristic];

                if (v17)
                {
                  uint64_t v18 = [v16 characteristic];
                  [v66 addObject:v18];
                }
              }
              uint64_t v13 = [v11 countByEnumeratingWithState:&v84 objects:v96 count:16];
            }
            while (v13);
          }

          self = v71;
          uint64_t v5 = v67;
        }

        ++v7;
      }
      while (v7 != v5);
      uint64_t v5 = [obj countByEnumeratingWithState:&v88 objects:v97 count:16];
    }
    while (v5);
  }

  __int16 v54 = [MEMORY[0x1E4F1CA60] dictionary];
  int v53 = [MEMORY[0x1E4F1CA60] dictionary];
  [(HMDHome *)self accessories];
  long long v80 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  id v52 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v56 = [v52 countByEnumeratingWithState:&v80 objects:v95 count:16];
  if (v56)
  {
    uint64_t v55 = *(void *)v81;
    id obja = (id)*MEMORY[0x1E4F5BA48];
    do
    {
      for (uint64_t j = 0; j != v56; ++j)
      {
        if (*(void *)v81 != v55) {
          objc_enumerationMutation(v52);
        }
        uint64_t v20 = *(void **)(*((void *)&v80 + 1) + 8 * j);
        id v21 = [MEMORY[0x1E4F1CA48] array];
        int64_t v22 = [MEMORY[0x1E4F1CA48] array];
        id v23 = v20;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          int v24 = v23;
        }
        else {
          int v24 = 0;
        }
        id v25 = v24;

        if (v25)
        {
          id v57 = v23;
          id v58 = v25;
          uint64_t v64 = v22;
          int v68 = v21;
          uint64_t v59 = j;
          long long v78 = 0u;
          long long v79 = 0u;
          long long v76 = 0u;
          long long v77 = 0u;
          id v60 = [v25 services];
          uint64_t v62 = [v60 countByEnumeratingWithState:&v76 objects:v94 count:16];
          if (!v62) {
            goto LABEL_62;
          }
          uint64_t v61 = *(void *)v77;
          while (1)
          {
            uint64_t v26 = 0;
            do
            {
              if (*(void *)v77 != v61) {
                objc_enumerationMutation(v60);
              }
              uint64_t v63 = v26;
              id v27 = *(void **)(*((void *)&v76 + 1) + 8 * v26);
              unint64_t v28 = [v27 type];
              long long v72 = 0u;
              long long v73 = 0u;
              long long v74 = 0u;
              long long v75 = 0u;
              unint64_t v29 = [v27 characteristics];
              uint64_t v30 = [v29 countByEnumeratingWithState:&v72 objects:v93 count:16];
              if (v30)
              {
                uint64_t v31 = v30;
                uint64_t v32 = *(void *)v73;
                do
                {
                  uint64_t v33 = 0;
                  do
                  {
                    if (*(void *)v73 != v32) {
                      objc_enumerationMutation(v29);
                    }
                    id v34 = *(void **)(*((void *)&v72 + 1) + 8 * v33);
                    if ([v34 supportsNotification])
                    {
                      int v35 = [(HMDHome *)self hapMetadata];
                      id v36 = [v34 type];
                      char v37 = [v35 shouldFilterEnableNotificationsForCharacteristicType:v36 serviceType:v28];

                      if ((v37 & 1) == 0)
                      {
                        if ([v28 isEqualToString:obja])
                        {
                          id v38 = [v34 type];
                          int v39 = [v38 isEqualToString:@"000000A6-0000-1000-8000-0026BB765291"];
                        }
                        else
                        {
                          int v39 = 0;
                        }
                        uint64_t v40 = [(HMDHome *)self hapMetadata];
                        id v41 = [v34 type];
                        int v42 = [v40 shouldAutoEnableNotificationForCharacteristic:v41 ofService:v28];

                        if (([v34 isClientNotificationEnabled] & 1) != 0
                          || ([v66 containsObject:v34] & 1) != 0
                          || ([v34 isNonHomeNotificationsEnabled] | v39 | v42) == 1)
                        {
                          id v43 = v68;
                          goto LABEL_50;
                        }
                        if (v65)
                        {
                          int v44 = [v34 type];
                          id v45 = [(HMDHome *)v71 hapMetadata];
                          int v46 = [v45 shouldEnableHomeNotificationForCharacteristicType:v44 serviceType:v28];

                          if (v46) {
                            [v68 addObject:v34];
                          }
                        }
                        else
                        {
                          id v43 = v64;
LABEL_50:
                          [v43 addObject:v34];
                        }
                        self = v71;
                      }
                    }
                    ++v33;
                  }
                  while (v31 != v33);
                  uint64_t v47 = [v29 countByEnumeratingWithState:&v72 objects:v93 count:16];
                  uint64_t v31 = v47;
                }
                while (v47);
              }

              uint64_t v26 = v63 + 1;
            }
            while (v63 + 1 != v62);
            uint64_t v62 = [v60 countByEnumeratingWithState:&v76 objects:v94 count:16];
            if (!v62)
            {
LABEL_62:

              id v25 = v58;
              uint64_t j = v59;
              id v21 = v68;
              int64_t v22 = v64;
              id v23 = v57;
              break;
            }
          }
        }
        long long v48 = [v23 uuid];
        id v49 = [v48 UUIDString];

        if ([v21 count]) {
          [v54 setObject:v21 forKeyedSubscript:v49];
        }
        if ([v22 count]) {
          [v53 setObject:v22 forKeyedSubscript:v49];
        }
      }
      uint64_t v56 = [v52 countByEnumeratingWithState:&v80 objects:v95 count:16];
    }
    while (v56);
  }
  v92[0] = v53;
  v92[1] = v54;
  uint64_t v50 = [MEMORY[0x1E4F1C978] arrayWithObjects:v92 count:2];

  return v50;
}

- (void)_encodeObjectsWithAccessoriesWithCoder:(id)a3
{
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  int v5 = objc_msgSend(v4, "hmd_isForXPCTransport");
  int v6 = objc_msgSend(v4, "hmd_isForLocalStore");
  int v7 = objc_msgSend(v4, "hmd_isForRemoteTransport");
  int v8 = objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount");
  int v9 = objc_msgSend(v4, "hmd_isForRemoteGatewayCoder");
  int v10 = objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess");
  uint64_t v11 = objc_msgSend(v4, "hmd_homeManagerOptions");
  uint64_t v12 = v11;
  if (v11)
  {
    uint64_t v13 = v11 | 0x9FD0;
    if (!v10) {
      uint64_t v13 = v11;
    }
    if (v8) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = -1;
    }
    if (!v7) {
      uint64_t v14 = v11;
    }
    if (v5) {
      uint64_t v15 = v13;
    }
    else {
      uint64_t v15 = v14;
    }
    [(HMDHome *)self __encodeAccessoriesWithCoder:v4 options:v15];
    [(HMDHome *)self encodeMediaSystemsWithCoder:v4 modifiedOptions:v15];
    if ((objc_msgSend(v4, "hmd_isForRemoteGatewayCoder") & 1) == 0)
    {
      BOOL v16 = [(HMDHome *)self serviceGroups];
      uint64_t v17 = (void *)[v16 copy];
      [v4 encodeObject:v17 forKey:*MEMORY[0x1E4F2EE30]];
    }
    uint64_t v18 = [(HMDHome *)self actionSets];
    long long v82 = self;
    [(HMDHome *)self _encodeActionSets:v18 coder:v4];

    if (((v5 | v6) == 1 || !(v7 ^ 1 | v8) || ((v8 ^ 1 | v9) & 1) == 0)
      && [(HMDHome *)self shouldWeSendAutomationsToClients])
    {
      uint64_t v19 = [(HMDHome *)self triggerOwnedActionSets];
      uint64_t v20 = (void *)[v19 copy];
      [v4 encodeObject:v20 forKey:@"HM.triggerOwnedActionSets"];
    }
    if (!isWatch())
    {
      long long v87 = v4;
      if (v5 && (!isAppleTV() | v10) == 1)
      {
        id v21 = (void *)MEMORY[0x1E4F1CA48];
        int64_t v22 = [(HMDHome *)self triggers];
        id v23 = objc_msgSend(v21, "arrayWithCapacity:", objc_msgSend(v22, "count"));

        long long v114 = 0u;
        long long v115 = 0u;
        long long v112 = 0u;
        long long v113 = 0u;
        int v24 = [(HMDHome *)self triggers];
        uint64_t v25 = [v24 countByEnumeratingWithState:&v112 objects:v122 count:16];
        if (v25)
        {
          uint64_t v26 = v25;
          uint64_t v27 = *(void *)v113;
          do
          {
            for (uint64_t i = 0; i != v26; ++i)
            {
              if (*(void *)v113 != v27) {
                objc_enumerationMutation(v24);
              }
              id v29 = *(id *)(*((void *)&v112 + 1) + 8 * i);
              objc_opt_class();
              if (objc_opt_isKindOfClass()) {
                uint64_t v30 = v29;
              }
              else {
                uint64_t v30 = 0;
              }
              id v31 = v30;

              if (v31)
              {
                [v23 addObject:v29];
              }
              else
              {
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  id v32 = v29;
                  uint64_t v33 = [v32 significantEvent];

                  if (v33) {
                    int v34 = v10;
                  }
                  else {
                    int v34 = 1;
                  }
                  if (v34 == 1) {
                    [v23 addObject:v32];
                  }
                }
              }
            }
            uint64_t v26 = [v24 countByEnumeratingWithState:&v112 objects:v122 count:16];
          }
          while (v26);
        }

        id v4 = v87;
        if ([(HMDHome *)self shouldWeSendAutomationsToClients])
        {
          int v35 = (void *)[v23 copy];
          [v87 encodeObject:v35 forKey:@"triggers"];
        }
      }
      else if ((objc_msgSend(v4, "hmd_isForLocalStore") & 1) != 0 {
             || objc_msgSend(v4, "hmd_isForRemoteTransport")
      }
             && (objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount") & 1) == 0
             && (objc_msgSend(v4, "hmd_isForRemoteUserAdministrator") & 1) != 0
             || objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount")
             && (objc_msgSend(v4, "hmd_isForRemoteGatewayCoder") & 1) == 0)
      {
        long long v88 = [MEMORY[0x1E4F1CA48] array];
        id v92 = [MEMORY[0x1E4F1CA48] array];
        long long v83 = [MEMORY[0x1E4F1CA48] array];
        id v90 = [MEMORY[0x1E4F1CA48] array];
        long long v108 = 0u;
        long long v109 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        id obj = [(HMDHome *)self triggers];
        uint64_t v36 = [obj countByEnumeratingWithState:&v108 objects:v121 count:16];
        if (v36)
        {
          uint64_t v37 = v36;
          uint64_t v38 = *(void *)v109;
          uint64_t v84 = *(void *)v109;
          do
          {
            uint64_t v39 = 0;
            uint64_t v85 = v37;
            do
            {
              if (*(void *)v109 != v38) {
                objc_enumerationMutation(obj);
              }
              uint64_t v40 = *(void **)(*((void *)&v108 + 1) + 8 * v39);
              id v41 = [v40 owningDevice];

              if (v41)
              {
                id v42 = v40;
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  id v43 = v42;
                }
                else {
                  id v43 = 0;
                }
                id v44 = v43;

                if ((objc_msgSend(v4, "hmd_isForLocalStore") & 1) == 0)
                {
                  long long v106 = 0u;
                  long long v107 = 0u;
                  long long v104 = 0u;
                  long long v105 = 0u;
                  id v45 = [v44 characteristicBaseEvents];
                  uint64_t v46 = [v45 countByEnumeratingWithState:&v104 objects:v120 count:16];
                  if (v46)
                  {
                    uint64_t v47 = v46;
                    uint64_t v48 = *(void *)v105;
                    while (2)
                    {
                      for (uint64_t j = 0; j != v47; ++j)
                      {
                        if (*(void *)v105 != v48) {
                          objc_enumerationMutation(v45);
                        }
                        uint64_t v50 = [*(id *)(*((void *)&v104 + 1) + 8 * j) characteristic];
                        uint64_t v51 = [(id)v50 accessory];

                        objc_opt_class();
                        LOBYTE(v50) = objc_opt_isKindOfClass();

                        if ((v50 & 1) != 0 && v51)
                        {

                          id v52 = v83;
                          uint64_t v38 = v84;
                          uint64_t v37 = v85;
                          id v4 = v87;
                          goto LABEL_71;
                        }
                      }
                      uint64_t v47 = [v45 countByEnumeratingWithState:&v104 objects:v120 count:16];
                      if (v47) {
                        continue;
                      }
                      break;
                    }
                  }

                  uint64_t v37 = v85;
                  id v4 = v87;
                  uint64_t v38 = v84;
                }
                if ([v42 requiresDataVersion4]) {
                  id v52 = v90;
                }
                else {
                  id v52 = v92;
                }
LABEL_71:
                [v52 addObject:v42];
              }
              else
              {
                [v88 addObject:v40];
              }
              ++v39;
            }
            while (v39 != v37);
            uint64_t v37 = [obj countByEnumeratingWithState:&v108 objects:v121 count:16];
          }
          while (v37);
        }

        int v53 = (void *)[v92 copy];
        [v4 encodeObject:v53 forKey:@"HM.triggers"];

        __int16 v54 = (void *)[v83 copy];
        [v4 encodeObject:v54 forKey:@"HM.homePodTriggers"];

        uint64_t v55 = (void *)[v90 copy];
        [v4 encodeObject:v55 forKey:@"HM.sharedActivationTriggers"];

        if (objc_msgSend(v4, "hmd_isForLocalStore"))
        {
          uint64_t v56 = (void *)[v88 copy];
          [v4 encodeObject:v56 forKey:@"triggers"];

          [(HMDHome *)v82 _updateOwnedTriggers];
          id v57 = [(HMDHome *)v82 ownedTriggers];
          id v58 = (void *)[v57 copy];
          [v4 encodeObject:v58 forKey:@"HM.deviceOwnedTriggers"];
        }
      }
      else if (objc_msgSend(v4, "hmd_isForNonAdminSharedUser"))
      {
        uint64_t v59 = (void *)MEMORY[0x1D9452090]();
        id v60 = self;
        uint64_t v61 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
        {
          uint64_t v62 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          uint64_t v119 = v62;
          _os_log_impl(&dword_1D49D5000, v61, OS_LOG_TYPE_INFO, "%{public}@Syncing triggers to remote transport", buf, 0xCu);
        }
        long long v86 = [MEMORY[0x1E4F1CA48] array];
        long long v89 = [MEMORY[0x1E4F1CA48] array];
        long long v100 = 0u;
        long long v101 = 0u;
        long long v102 = 0u;
        long long v103 = 0u;
        id v91 = [(HMDHome *)v60 triggers];
        id obja = (id)[v91 countByEnumeratingWithState:&v100 objects:v117 count:16];
        if (obja)
        {
          uint64_t v93 = *(void *)v101;
          do
          {
            for (uint64_t k = 0; k != obja; uint64_t k = (char *)k + 1)
            {
              if (*(void *)v101 != v93) {
                objc_enumerationMutation(v91);
              }
              uint64_t v64 = *(void **)(*((void *)&v100 + 1) + 8 * (void)k);
              BOOL v65 = [v64 owningDevice];

              if (v65)
              {
                id v66 = v64;
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  uint64_t v67 = v66;
                }
                else {
                  uint64_t v67 = 0;
                }
                id v68 = v67;

                long long v98 = 0u;
                long long v99 = 0u;
                long long v96 = 0u;
                long long v97 = 0u;
                uint64_t v69 = [v68 characteristicBaseEvents];
                uint64_t v70 = [v69 countByEnumeratingWithState:&v96 objects:v116 count:16];
                if (v70)
                {
                  uint64_t v71 = v70;
                  uint64_t v72 = *(void *)v97;
                  while (2)
                  {
                    for (uint64_t m = 0; m != v71; ++m)
                    {
                      if (*(void *)v97 != v72) {
                        objc_enumerationMutation(v69);
                      }
                      uint64_t v74 = [*(id *)(*((void *)&v96 + 1) + 8 * m) characteristic];
                      long long v75 = [(id)v74 accessory];

                      objc_opt_class();
                      LOBYTE(v74) = objc_opt_isKindOfClass();

                      if ((v74 & 1) != 0 && v75)
                      {

                        long long v79 = v89;
                        goto LABEL_107;
                      }
                    }
                    uint64_t v71 = [v69 countByEnumeratingWithState:&v96 objects:v116 count:16];
                    if (v71) {
                      continue;
                    }
                    break;
                  }
                }

                long long v76 = objc_msgSend(v87, "hmd_supportedFeatures");
                long long v77 = objc_msgSend(v87, "hmd_user");
                char v78 = [v66 compatible:v76 user:v77];

                long long v79 = v86;
                if (v78) {
LABEL_107:
                }
                  [v79 addObject:v66];
              }
            }
            id obja = (id)[v91 countByEnumeratingWithState:&v100 objects:v117 count:16];
          }
          while (obja);
        }

        long long v80 = (void *)[v86 copy];
        id v4 = v87;
        [v87 encodeObject:v80 forKey:@"HM.triggers"];

        long long v81 = (void *)[v89 copy];
        [v87 encodeObject:v81 forKey:@"HM.homePodTriggers"];
      }
    }
  }
  else
  {
    [(HMDHome *)self __encodeAccessoriesWithCoder:v4 options:v11];
    [(HMDHome *)self encodeMediaSystemsWithCoder:v4 modifiedOptions:v12];
  }
}

- (NSArray)triggers
{
  os_unfair_recursive_lock_lock_with_options();
  char v3 = (void *)[(NSMutableArray *)self->_currentTriggers copy];
  os_unfair_recursive_lock_unlock();
  return (NSArray *)v3;
}

- (BOOL)shouldWeSendAutomationsToClients
{
  return 1;
}

- (NSMutableArray)triggerOwnedActionSets
{
  return self->_triggerOwnedActionSets;
}

- (void)encodeMediaSystemsWithCoder:(id)a3 modifiedOptions:(unint64_t)a4
{
  char v4 = a4;
  id v6 = a3;
  if ((v4 & 0xC0) != 0)
  {
    id v9 = v6;
    if (objc_msgSend(v6, "hmd_isForXPCTransport"))
    {
      int v7 = [(HMDHome *)self mediaSystems];
      int v8 = (void *)MEMORY[0x1E4F2ED90];
    }
    else
    {
      int v7 = [(HMDHome *)self mediaSystemController];
      int v8 = (void *)MEMORY[0x1E4F2ED60];
    }
    [v9 encodeObject:v7 forKey:*v8];

    id v6 = v9;
  }
}

- (NSArray)mediaSystems
{
  id v2 = [(HMDHome *)self mediaSystemController];
  char v3 = [v2 mediaSystems];

  return (NSArray *)v3;
}

- (HMDHomeMediaSystemHandler)mediaSystemController
{
  return (HMDHomeMediaSystemHandler *)objc_getProperty(self, a2, 560, 1);
}

- (void)_encodeActionSets:(id)a3 coder:(id)a4
{
  id v12 = a3;
  id v6 = a4;
  if ([(HMDHome *)self shouldWeSendAutomationsToClients])
  {
    int v7 = [MEMORY[0x1E4F1CA48] arrayWithArray:v12];
    int v8 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"type == %@", *MEMORY[0x1E4F2C958]];
    id v9 = [v7 filteredArrayUsingPredicate:v8];
    if ([v9 count])
    {
      int v10 = (void *)[v9 copy];
      [v6 encodeObject:v10 forKey:@"actionSets"];
    }
    if ((objc_msgSend(v6, "hmd_isForRemoteGatewayCoder") & 1) == 0)
    {
      uint64_t v11 = [v7 arrayByExcludingObjectsInArray:v9];
      [v6 encodeObject:v11 forKey:@"builtinActionSets"];
    }
  }
}

void __70__HMDHome__subscribeForHomeAppleMediaNotificationsOnDirectTransports___block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    char v3 = v5;
  }
  else {
    char v3 = 0;
  }
  id v4 = v3;
  if (v4) {
    -[HMDHome _enableMediaNotifications:forMediaAccessory:](*(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 40), v4);
  }
}

- (id)_splitCharacteristicChanges:(id)a3 changedAccessories:(id)a4
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = a4;
  uint64_t v47 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(v6, "count"));
  id v49 = v6;
  uint64_t v48 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(v6, "count"));
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  id obj = v5;
  uint64_t v7 = [obj countByEnumeratingWithState:&v62 objects:v68 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v63;
    do
    {
      uint64_t v10 = 0;
      uint64_t v54 = v8;
      do
      {
        if (*(void *)v63 != v9) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void **)(*((void *)&v62 + 1) + 8 * v10);
        id v12 = [v11 service];
        uint64_t v13 = [v12 accessory];
        uint64_t v14 = (void *)v13;
        if (v12) {
          BOOL v15 = v13 == 0;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15)
        {
          BOOL v16 = [(HMDHome *)self hapMetadata];
          uint64_t v17 = [v11 type];
          if (([v16 shouldFilterCharacteristicOfTypeFromApp:v17] & 1) == 0)
          {
            uint64_t v18 = [(HMDHome *)self hapMetadata];
            uint64_t v19 = [v12 type];
            id v60 = v18;
            if (([v18 shouldFilterServiceOfTypeFromApp:v19] & 1) == 0)
            {
              [(HMDHome *)self hapMetadata];
              v21 = uint64_t v20 = v17;
              int64_t v22 = [v11 type];
              [v12 type];
              id v57 = v16;
              int v24 = v23 = v9;
              char v55 = [v21 shouldFilterChangeNotificationsForCharacteristicType:v22 serviceType:v24];

              uint64_t v9 = v23;
              uint64_t v8 = v54;

              if (v55) {
                goto LABEL_29;
              }
              uint64_t v25 = [v14 uuid];
              BOOL v16 = [v25 UUIDString];

              uint64_t v26 = [v49 objectForKey:v16];
              uint64_t v27 = [v12 instanceID];
              uint64_t v28 = [v27 stringValue];

              uint64_t v56 = v26;
              id v60 = (void *)v28;
              uint64_t v19 = [v26 objectForKey:v28];
              id v29 = [v11 instanceID];
              uint64_t v30 = [v29 stringValue];

              id v31 = [v19 objectForKey:v30];
              if (v31)
              {
                int v53 = v30;
                id v32 = v48;
                id v52 = v31;
                if (isAppleTV())
                {
                  id v58 = v16;
                  uint64_t v33 = [(HMDHome *)self hapMetadata];
                  int v34 = [v11 type];
                  int v35 = [v12 type];
                  int v36 = [v33 requiresDeviceUnlock:v34 forService:v35];

                  if (v36)
                  {
                    id v37 = v47;

                    uint64_t v8 = v54;
                    BOOL v16 = v58;
                    goto LABEL_19;
                  }
                  uint64_t v8 = v54;
                  BOOL v16 = v58;
                }
                id v37 = v32;
LABEL_19:
                uint64_t v38 = accessoryToEncodeForXPCTransportForAccessory(v14);
                uint64_t v51 = v38;
                if (v38 != v14)
                {
                  uint64_t v39 = [v38 uuid];
                  uint64_t v40 = [v39 UUIDString];
                  id v41 = v16;
                  BOOL v16 = (void *)v40;

                  id v42 = v47;
                  id v37 = v42;
                }
                id v43 = [v37 objectForKey:v16];
                if (!v43)
                {
                  id v43 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(v56, "count"));
                  [v37 setObject:v43 forKey:v16];
                }
                id v44 = [v43 objectForKey:v60];
                if (!v44)
                {
                  id v44 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(v19, "count"));
                  [v43 setObject:v44 forKey:v60];
                }
                uint64_t v50 = v43;
                uint64_t v30 = v53;
                [v44 setObject:v52 forKey:v53];

                id v31 = v52;
              }

              uint64_t v17 = v56;
            }
          }
        }
LABEL_29:

        ++v10;
      }
      while (v8 != v10);
      uint64_t v8 = [obj countByEnumeratingWithState:&v62 objects:v68 count:16];
    }
    while (v8);
  }

  v66[0] = @"kCharacteristicUpdatesForEntitledClientsNotificationKey";
  v66[1] = @"kCharacteristicUpdatesForAllClientsNotificationKey";
  v67[0] = v47;
  v67[1] = v48;
  id v45 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v67 forKeys:v66 count:2];

  return v45;
}

BOOL __74__HMDHome_AccessoryRetrieval___retrieveTupleForPrimaryAccessory_linkType___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 accessory];
  id v5 = [v4 uuid];
  id v6 = [*(id *)(a1 + 32) uuid];
  if ([v5 isEqual:v6]) {
    BOOL v7 = [v3 linkType] == *(void *)(a1 + 40);
  }
  else {
    BOOL v7 = 0;
  }

  return v7;
}

- (void)handleFetchLightProfileSettingsMessage:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = [v4 setForKey:*MEMORY[0x1E4F2D5F0]];
  [(HMDHome *)self handleFetchLightProfileSettingsMessage:v4 withLightProfileUUIDs:v6];
}

uint64_t __39__HMDHome_Light__lightProfileWithUUID___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = [a2 uniqueIdentifier];
  uint64_t v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

- (void)handleFetchLightProfileSettingsMessage:(id)a3 withLightProfileUUIDs:(id)a4
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  id v35 = a3;
  id v6 = a4;
  BOOL v7 = (void *)MEMORY[0x1D9452090]();
  int v36 = self;
  uint64_t v8 = [(HMDHome *)self lightLogCategory];
  uint64_t v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    uint64_t v51 = v10;
    __int16 v52 = 2112;
    id v53 = v6;
    _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Handling fetch light profiles settings for profiles: %@", buf, 0x16u);
  }
  uint64_t v11 = [MEMORY[0x1E4F1CA60] dictionary];
  uint64_t v39 = [MEMORY[0x1E4F1CA80] set];
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  id obj = v6;
  uint64_t v12 = [obj countByEnumeratingWithState:&v44 objects:v49 count:16];
  uint64_t v13 = self;
  if (v12)
  {
    uint64_t v14 = v12;
    uint64_t v15 = *(void *)v45;
    do
    {
      uint64_t v16 = 0;
      uint64_t v37 = v14;
      do
      {
        if (*(void *)v45 != v15) {
          objc_enumerationMutation(obj);
        }
        uint64_t v17 = *(void **)(*((void *)&v44 + 1) + 8 * v16);
        uint64_t v18 = [(HMDHome *)v13 lightProfileWithUUID:v17];
        if (v18)
        {
          [v39 addObject:v18];
        }
        else
        {
          uint64_t v19 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
          uint64_t v20 = (void *)[objc_alloc(MEMORY[0x1E4F2E810]) initWithError:v19];
          id v21 = v11;
          [v11 setObject:v20 forKeyedSubscript:v17];

          int64_t v22 = (void *)MEMORY[0x1D9452090]();
          uint64_t v23 = [(HMDHome *)v13 lightLogCategory];
          int v24 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            uint64_t v25 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            uint64_t v51 = v25;
            __int16 v52 = 2112;
            id v53 = v17;
            _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_ERROR, "%{public}@Could not find light profile with uuid: %@", buf, 0x16u);

            uint64_t v13 = v36;
          }

          uint64_t v11 = v21;
          uint64_t v14 = v37;
        }

        ++v16;
      }
      while (v14 != v16);
      uint64_t v14 = [obj countByEnumeratingWithState:&v44 objects:v49 count:16];
    }
    while (v14);
  }

  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id v26 = v39;
  uint64_t v27 = [v26 countByEnumeratingWithState:&v40 objects:v48 count:16];
  if (v27)
  {
    uint64_t v28 = v27;
    uint64_t v29 = *(void *)v41;
    do
    {
      for (uint64_t i = 0; i != v28; ++i)
      {
        if (*(void *)v41 != v29) {
          objc_enumerationMutation(v26);
        }
        id v31 = *(void **)(*((void *)&v40 + 1) + 8 * i);
        id v32 = [v31 settings];
        uint64_t v33 = (void *)[objc_alloc(MEMORY[0x1E4F2E810]) initWithSettings:v32];
        int v34 = [v31 uniqueIdentifier];
        [v11 setObject:v33 forKeyedSubscript:v34];
      }
      uint64_t v28 = [v26 countByEnumeratingWithState:&v40 objects:v48 count:16];
    }
    while (v28);
  }

  [(HMDHome *)v36 respondMessage:v35 withSettingResults:v11];
}

- (id)lightProfileWithUUID:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self accessories];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __39__HMDHome_Light__lightProfileWithUUID___block_invoke;
  v10[3] = &unk_1E6A0A938;
  id v11 = v4;
  id v6 = v4;
  BOOL v7 = objc_msgSend(v5, "na_map:", v10);

  uint64_t v8 = [v7 firstObject];

  return v8;
}

- (void)respondMessage:(id)a3 withSettingResults:(id)a4
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v17 = 0;
  uint64_t v8 = [MEMORY[0x1E4F28DB0] archivedDataWithRootObject:v7 requiringSecureCoding:1 error:&v17];
  id v9 = v17;
  uint64_t v10 = (void *)MEMORY[0x1D9452090]();
  id v11 = [(HMDHome *)self lightLogCategory];
  uint64_t v12 = HMFGetOSLogHandle();
  uint64_t v13 = v12;
  if (v8)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v21 = v14;
      __int16 v22 = 2112;
      id v23 = v7;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_DEBUG, "%{public}@Responding with light profile settings: %@", buf, 0x16u);
    }
    uint64_t v18 = *MEMORY[0x1E4F2D5F8];
    uint64_t v19 = v8;
    uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v19 forKeys:&v18 count:1];
    [v6 respondWithPayload:v15];
  }
  else
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      id v21 = v16;
      __int16 v22 = 2112;
      id v23 = v7;
      __int16 v24 = 2112;
      id v25 = v9;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to encode profile setting results: %@ with error: %@", buf, 0x20u);
    }
    uint64_t v15 = [MEMORY[0x1E4F28C58] hmErrorWithCode:-1];
    [v6 respondWithError:v15];
  }
}

- (void)_encodeWithCoder:(id)a3
{
  uint64_t v320 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  int v251 = objc_msgSend(v4, "hmd_isForXPCTransport");
  int v5 = objc_msgSend(v4, "hmd_isForLocalStore");
  int v249 = objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess");
  int v248 = objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount");
  __int16 v250 = objc_msgSend(v4, "hmd_homeManagerOptions");
  int v252 = v5;
  if (v5)
  {
    id v6 = (void *)MEMORY[0x1D9452090]();
    id v7 = self;
    HMFGetOSLogHandle();
    uint64_t v8 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      id v9 = (id)objc_claimAutoreleasedReturnValue();
      [(HMDHome *)v7 isOwnerUser];
      HMFBooleanToString();
      id v10 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      id v304 = v9;
      __int16 v305 = 2112;
      id v306 = v10;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_DEBUG, "%{public}@Encoding isOwnerUser : %@ for HH2 migration", buf, 0x16u);
    }
    objc_msgSend(v4, "encodeBool:forKey:", -[HMDHome isOwnerUser](v7, "isOwnerUser"), @"HM.Owner.HH2.MI");
  }
  id v11 = [(HMDHome *)self uuid];
  uint64_t v12 = [v11 UUIDString];
  [v4 encodeObject:v12 forKey:@"homeUUID"];

  uint64_t v13 = [(HMDHome *)self ownerName];
  [v4 encodeObject:v13 forKey:@"homeAdmin"];

  uint64_t v14 = [(HMDUser *)self->_owner uuid];
  uint64_t v15 = [v14 UUIDString];
  [v4 encodeObject:v15 forKey:@"kHomeOwnerUUID"];

  uint64_t v16 = [(HMDHome *)self creationDate];
  [v4 encodeObject:v16 forKey:@"creationDate"];

  id v17 = [(HMDHome *)self firstHAPAccessoryAddedDate];
  [v4 encodeObject:v17 forKey:@"firstHAPAccessoryAddedDate"];

  int64_t v18 = [(HMDHome *)self configurationVersion];
  uint64_t v19 = objc_msgSend(v4, "hmd_supportedFeatures");
  int v20 = [v19 containsObject:&unk_1F2DC75E8];

  if (v20)
  {
    id v21 = [MEMORY[0x1E4F65530] sharedPreferences];
    __int16 v22 = [v21 preferenceForKey:@"homeHH2MigrationConfigurationVersionIncrement"];
    uint64_t v23 = [v22 numberValue];

    if (v23) {
      __int16 v24 = (void *)v23;
    }
    else {
      __int16 v24 = &unk_1F2DC7600;
    }
    v18 += (int)[v24 intValue];
  }
  id v25 = [NSNumber numberWithInteger:v18];
  [v4 encodeObject:v25 forKey:@"homeConfigVersion"];

  uint64_t v26 = [(HMDHome *)self name];
  [v4 encodeObject:v26 forKey:@"homeName"];

  unint64_t v27 = [(HMDHome *)self homeHubState];
  [v4 encodeInteger:v27 forKey:*MEMORY[0x1E4F2D290]];
  BOOL v28 = [(HMDHome *)self isMultiUserEnabled];
  [v4 encodeBool:v28 forKey:*MEMORY[0x1E4F2D608]];
  if (isFeatureHomeTheaterQFAEnabledForTests) {
    uint64_t v29 = [(id)isFeatureHomeTheaterQFAEnabledForTests BOOLValue];
  }
  else {
    uint64_t v29 = 0;
  }
  [v4 encodeBool:v29 forKey:*MEMORY[0x1E4F2D730]];
  BOOL v30 = [(HMDHome *)self soundCheckEnabled];
  [v4 encodeBool:v30 forKey:*MEMORY[0x1E4F2D718]];
  id v31 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", -[HMDHome siriPhraseOptions](self, "siriPhraseOptions"));
  [v4 encodeObject:v31 forKey:*MEMORY[0x1E4F2D708]];

  BOOL v32 = [(HMDHome *)self locationServicesEnabled];
  [v4 encodeBool:v32 forKey:*MEMORY[0x1E4F2D2D8]];
  BOOL v33 = [(HMDHome *)self didOnboardLocationServices];
  [v4 encodeBool:v33 forKey:*MEMORY[0x1E4F2D1F8]];
  BOOL v34 = [(HMDHome *)self hasAnyUserAcknowledgedCameraRecordingOnboarding];
  [v4 encodeBool:v34 forKey:*MEMORY[0x1E4F2D278]];
  BOOL v35 = [(HMDHome *)self hasOnboardedForAccessCode];
  [v4 encodeBool:v35 forKey:*MEMORY[0x1E4F2D280]];
  BOOL v36 = [(HMDHome *)self hasOnboardedForWalletKey];
  [v4 encodeBool:v36 forKey:*MEMORY[0x1E4F2D288]];
  uint64_t v37 = objc_msgSend(v4, "hmd_supportedFeatures");
  int v38 = [v37 containsObject:&unk_1F2DC75E8];

  uint64_t v39 = (void *)MEMORY[0x1D9452090]();
  long long v40 = self;
  HMFGetOSLogHandle();
  long long v41 = (id)objc_claimAutoreleasedReturnValue();
  BOOL v42 = os_log_type_enabled(v41, OS_LOG_TYPE_INFO);
  if (v38)
  {
    if (v42)
    {
      HMFGetLogIdentifier();
      id v43 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      id v304 = v43;
      _os_log_impl(&dword_1D49D5000, v41, OS_LOG_TYPE_INFO, "%{public}@Forcing isUpdatedToHH2 to YES", buf, 0xCu);
    }
    uint64_t v44 = 1;
  }
  else
  {
    if (v42)
    {
      HMFGetLogIdentifier();
      id v45 = (id)objc_claimAutoreleasedReturnValue();
      [(HMDHome *)v40 isUpdatedToHH2];
      HMFBooleanToString();
      id v46 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      id v304 = v45;
      __int16 v305 = 2112;
      id v306 = v46;
      _os_log_impl(&dword_1D49D5000, v41, OS_LOG_TYPE_INFO, "%{public}@isUpdatedToHH2 is set to %@", buf, 0x16u);
    }
    uint64_t v44 = [(HMDHome *)v40 isUpdatedToHH2];
  }
  [v4 encodeBool:v44 forKey:*MEMORY[0x1E4F2D7A0]];
  if (objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess"))
  {
    uint64_t v47 = [(HMDHome *)v40 bulletinNotificationsSupported];
    [v4 encodeBool:v47 forKey:*MEMORY[0x1E4F2D1E0]];
  }
  if ((objc_msgSend(v4, "hmd_isForRemoteGatewayCoder") & 1) == 0)
  {
    if ((v251 & v249) != 1)
    {
      uint64_t v54 = [(HMDHome *)v40 homeLocationHandler];
      char v55 = &kHomeLocationHandlerCodingKey;
      goto LABEL_30;
    }
    if (objc_msgSend(v4, "hmd_isForXPCTransportAuthorizedForLocationAccess"))
    {
      uint64_t v48 = [(HMDHome *)v40 homeLocationHandler];
      id v49 = [v48 location];
      [v4 encodeObject:v49 forKey:@"homeLocation"];

      if (objc_msgSend(v4, "hmd_isForXPCTransportEntitledForHomeLocationAccess"))
      {
        uint64_t v50 = [(HMDHome *)v40 homeLocation];
        [v4 encodeInteger:v50 forKey:*MEMORY[0x1E4F2D2E8]];
      }
    }
    uint64_t v51 = [(HMDHome *)v40 primaryResident];
    __int16 v52 = [v51 capabilities];
    int v53 = [v52 supportsSiriEndpointSetup];

    if (v53)
    {
      uint64_t v54 = (void *)[objc_alloc(MEMORY[0x1E4F65590]) initWithVersionString:@"7.2"];
      char v55 = (__CFString **)MEMORY[0x1E4F2D700];
LABEL_30:
      [v4 encodeObject:v54 forKey:*v55];
    }
  }
  if (v252)
  {
    uint64_t v56 = objc_msgSend(NSNumber, "numberWithInteger:", -[HMDHome lastSyncedConfigurationVersion](v40, "lastSyncedConfigurationVersion"));
    [v4 encodeObject:v56 forKey:@"lastSyncedHomeConfigVersion"];

    id v57 = [(HMDHome *)v40 reachabilityNotificationManager];
    id v58 = [v57 reachabilityContext];
    [v4 encodeObject:v58 forKey:@"HMHH.residentReachabilityContext"];
  }
  __int16 v59 = v250;
  if ((v250 & 9) != 0)
  {
    id v261 = [MEMORY[0x1E4F28E10] strongToStrongObjectsMapTable];
    long long v298 = 0u;
    long long v299 = 0u;
    long long v300 = 0u;
    long long v301 = 0u;
    id v60 = [(HMDHome *)v40 _residentUsers];
    uint64_t v61 = [v60 countByEnumeratingWithState:&v298 objects:v319 count:16];
    if (v61)
    {
      uint64_t v62 = v61;
      uint64_t v63 = *(void *)v299;
      do
      {
        for (uint64_t i = 0; i != v62; ++i)
        {
          if (*(void *)v299 != v63) {
            objc_enumerationMutation(v60);
          }
          long long v65 = *(void **)(*((void *)&v298 + 1) + 8 * i);
          id v66 = [v65 userID];
          uint64_t v67 = +[HMDDevice deviceWithDestination:v66];

          if (v67) {
            [v261 setObject:v65 forKey:v67];
          }
        }
        uint64_t v62 = [v60 countByEnumeratingWithState:&v298 objects:v319 count:16];
      }
      while (v62);
    }

    long long v296 = 0u;
    long long v297 = 0u;
    long long v294 = 0u;
    long long v295 = 0u;
    id v68 = [(HMDHome *)v40 residentDeviceManager];
    uint64_t v69 = [v68 residentDevices];

    uint64_t v70 = [v69 countByEnumeratingWithState:&v294 objects:v318 count:16];
    if (v70)
    {
      uint64_t v71 = v70;
      uint64_t v72 = *(void *)v295;
      do
      {
        for (uint64_t j = 0; j != v71; ++j)
        {
          if (*(void *)v295 != v72) {
            objc_enumerationMutation(v69);
          }
          uint64_t v74 = *(void **)(*((void *)&v294 + 1) + 8 * j);
          long long v75 = [v74 device];
          long long v76 = [v75 capabilities];
          int v77 = [v76 isRemoteGatewayCapable];

          if (v77)
          {
            char v78 = [(HMDHome *)v40 _residentUserForResidentDevice:v74];
            if (v78)
            {
              long long v79 = [v74 device];
              [v261 setObject:v78 forKey:v79];
            }
          }
        }
        uint64_t v71 = [v69 countByEnumeratingWithState:&v294 objects:v318 count:16];
      }
      while (v71);
    }

    long long v80 = [v261 objectEnumerator];
    long long v81 = [v80 allObjects];

    id v260 = v40;
    if (v251 && (!isAppleTV() | v249) == 1)
    {
      uint64_t v82 = [MEMORY[0x1E4F1CA48] array];
      long long v83 = (void *)v82;
      if (v249)
      {
        long long v256 = v4;
        long long v258 = (void *)v82;
        id v246 = v81;
        uint64_t v84 = [(HMDHome *)v40 owner];
        BOOL v85 = [(HMDHome *)v40 isOwnerUser];
        long long v290 = 0u;
        long long v291 = 0u;
        long long v292 = 0u;
        long long v293 = 0u;
        long long v86 = [(HMDHome *)v40 users];
        uint64_t v87 = [v86 countByEnumeratingWithState:&v290 objects:v317 count:16];
        if (v87)
        {
          uint64_t v88 = v87;
          uint64_t v89 = *(void *)v291;
          do
          {
            for (uint64_t k = 0; k != v88; ++k)
            {
              if (*(void *)v291 != v89) {
                objc_enumerationMutation(v86);
              }
              id v91 = *(void **)(*((void *)&v290 + 1) + 8 * k);
              if (!v85 || ([*(id *)(*((void *)&v290 + 1) + 8 * k) isEqual:v84] & 1) == 0)
              {
                uint64_t v92 = [v91 userID];
                if (!v92) {
                  continue;
                }
                uint64_t v93 = (void *)v92;
                char v94 = [v91 isRemoteGateway];

                if (v94) {
                  continue;
                }
              }
              [v258 addObject:v91];
            }
            uint64_t v88 = [v86 countByEnumeratingWithState:&v290 objects:v317 count:16];
          }
          while (v88);
        }

        long long v40 = v260;
        id v4 = v256;
        long long v83 = v258;
        long long v81 = v246;
        if ([(HMDHome *)v260 isAdminUser])
        {
          __int16 v95 = (void *)MEMORY[0x1E4F1CA48];
          long long v96 = [(HMDHome *)v260 outgoingInvitations];
          long long v97 = objc_msgSend(v95, "arrayWithCapacity:", objc_msgSend(v96, "count"));

          long long v288 = 0u;
          long long v289 = 0u;
          long long v286 = 0u;
          long long v287 = 0u;
          long long v98 = [(HMDHome *)v260 outgoingInvitations];
          uint64_t v99 = [v98 countByEnumeratingWithState:&v286 objects:v316 count:16];
          if (v99)
          {
            uint64_t v100 = v99;
            uint64_t v101 = *(void *)v287;
            do
            {
              for (uint64_t m = 0; m != v100; ++m)
              {
                if (*(void *)v287 != v101) {
                  objc_enumerationMutation(v98);
                }
                long long v103 = *(void **)(*((void *)&v286 + 1) + 8 * m);
                long long v104 = [v103 user];
                char v105 = [v104 isRemoteGateway];

                if ((v105 & 1) == 0) {
                  [v97 addObject:v103];
                }
              }
              uint64_t v100 = [v98 countByEnumeratingWithState:&v286 objects:v316 count:16];
            }
            while (v100);
          }

          long long v106 = (void *)[v97 copy];
          [v256 encodeObject:v106 forKey:@"HM.invitations"];

          long long v81 = v246;
          long long v83 = v258;
        }
      }
      else
      {
        [(HMDHome *)v40 isAdminUser];
      }
      uint64_t v176 = (void *)[v83 copy];
      [v4 encodeObject:v176 forKey:@"users"];

      objc_msgSend(v4, "encodeBool:forKey:", -[HMDHome isAdminUser](v40, "isAdminUser"), @"isAdminUser");
      objc_msgSend(v4, "encodeBool:forKey:", -[HMDHome isOwnerUser](v40, "isOwnerUser"), @"HM.isOwnerUser");
      uint64_t v177 = [(HMDHome *)v40 isAccessToHomeAllowed];
      [v4 encodeBool:v177 forKey:*MEMORY[0x1E4F2D2B8]];
      __int16 v59 = v250;
      if ((v177 & 1) == 0)
      {
        uint64_t v178 = [(HMDHome *)v40 accessNotAllowedReasonCode];
        [v4 encodeInteger:v178 forKey:*MEMORY[0x1E4F2D178]];
      }
      uint64_t v179 = [(HMDHome *)v40 overriddenHomeAccessControl];

      if (!v179) {
        goto LABEL_150;
      }
      id v122 = [(HMDHome *)v40 overriddenHomeAccessControl];
      uint64_t v180 = [v122 unsignedIntegerValue];
      [v4 encodeInteger:v180 forKey:*MEMORY[0x1E4F2D170]];
    }
    else
    {
      __int16 v59 = v250;
      if ((v252 | v248) == 1)
      {
        long long v107 = (void *)MEMORY[0x1E4F1CA48];
        long long v108 = [(HMDHome *)v40 users];
        long long v83 = [v107 arrayWithArray:v108];

        if (objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount"))
        {
          long long v109 = objc_msgSend(v4, "hmd_supportedFeatures");
          char v110 = [v109 containsObject:&unk_1F2DC7618];

          if ((v110 & 1) == 0)
          {
            long long v111 = v81;
            long long v284 = 0u;
            long long v285 = 0u;
            long long v282 = 0u;
            long long v283 = 0u;
            long long v112 = [(HMDHome *)v40 users];
            long long v113 = (void *)[v112 copy];

            uint64_t v114 = [v113 countByEnumeratingWithState:&v282 objects:v315 count:16];
            if (v114)
            {
              uint64_t v115 = v114;
              uint64_t v116 = *(void *)v283;
              do
              {
                for (uint64_t n = 0; n != v115; ++n)
                {
                  if (*(void *)v283 != v116) {
                    objc_enumerationMutation(v113);
                  }
                  id v118 = *(void **)(*((void *)&v282 + 1) + 8 * n);
                  if ([v118 requiresMakoSupport]) {
                    [v83 removeObject:v118];
                  }
                }
                uint64_t v115 = [v113 countByEnumeratingWithState:&v282 objects:v315 count:16];
              }
              while (v115);
            }

            long long v81 = v111;
          }
        }
        uint64_t v119 = (void *)[v81 mutableCopy];
        [v83 removeObjectsInArray:v81];
        if ((objc_msgSend(v4, "hmd_isForRemoteGatewayCoder") & 1) == 0)
        {
          id v120 = [(HMDHome *)v40 usersPendingUserManagementOperations];
          [v83 removeObjectsInArray:v120];

          v121 = [(HMDHome *)v40 usersPendingUserManagementOperations];
          [v119 removeObjectsInArray:v121];
        }
        long long v280 = 0u;
        long long v281 = 0u;
        long long v278 = 0u;
        long long v279 = 0u;
        id v122 = v119;
        uint64_t v123 = [v122 countByEnumeratingWithState:&v278 objects:v314 count:16];
        if (v123)
        {
          uint64_t v124 = v123;
          uint64_t v125 = *(void *)v279;
          do
          {
            for (iuint64_t i = 0; ii != v124; ++ii)
            {
              if (*(void *)v279 != v125) {
                objc_enumerationMutation(v122);
              }
              uint64_t v127 = [*(id *)(*((void *)&v278 + 1) + 8 * ii) legacyUser];
              [v83 addObject:v127];
            }
            uint64_t v124 = [v122 countByEnumeratingWithState:&v278 objects:v314 count:16];
          }
          while (v124);
        }

        uint64_t v128 = (void *)[v83 copy];
        [v4 encodeObject:v128 forKey:@"users"];

        uint64_t v129 = (void *)[v122 copy];
        [v4 encodeObject:v129 forKey:@"residentDevices"];

        __int16 v59 = v250;
      }
      else
      {
        if (!objc_msgSend(v4, "hmd_isForRemoteTransport"))
        {
LABEL_151:

          goto LABEL_152;
        }
        long long v83 = [MEMORY[0x1E4F1CA48] array];
        id v130 = [(HMDHome *)v40 owner];

        if (v130)
        {
          uint64_t v131 = [(HMDHome *)v40 owner];
          [v83 addObject:v131];

          long long v132 = objc_msgSend(v4, "hmd_user");

          if (v132)
          {
            uint64_t v133 = objc_msgSend(v4, "hmd_user");
            [v83 addObject:v133];
          }
        }
        long long v276 = 0u;
        long long v277 = 0u;
        long long v274 = 0u;
        long long v275 = 0u;
        id v247 = v81;
        id v134 = v81;
        uint64_t v135 = [v134 countByEnumeratingWithState:&v274 objects:v313 count:16];
        if (v135)
        {
          uint64_t v136 = v135;
          uint64_t v137 = *(void *)v275;
          do
          {
            for (juint64_t j = 0; jj != v136; ++jj)
            {
              if (*(void *)v275 != v137) {
                objc_enumerationMutation(v134);
              }
              long long v139 = [*(id *)(*((void *)&v274 + 1) + 8 * jj) legacyUser];
              [v83 addObject:v139];
            }
            uint64_t v136 = [v134 countByEnumeratingWithState:&v274 objects:v313 count:16];
          }
          while (v136);
        }

        id v140 = (void *)[v83 copy];
        [v4 encodeObject:v140 forKey:@"users"];

        [v4 encodeObject:v134 forKey:@"residentDevices"];
        id v259 = v83;
        if (objc_msgSend(v4, "hmd_isForRemoteUserAdministrator"))
        {
          uint64_t v141 = (void *)MEMORY[0x1E4F1CA48];
          uint64_t v142 = [(HMDHome *)v40 users];
          long long v143 = objc_msgSend(v141, "arrayWithCapacity:", objc_msgSend(v142, "count"));

          long long v272 = 0u;
          long long v273 = 0u;
          long long v270 = 0u;
          long long v271 = 0u;
          long long v144 = [(HMDHome *)v40 users];
          uint64_t v145 = [v144 countByEnumeratingWithState:&v270 objects:v312 count:16];
          if (v145)
          {
            uint64_t v146 = v145;
            uint64_t v147 = *(void *)v271;
            do
            {
              for (kuint64_t k = 0; kk != v146; ++kk)
              {
                if (*(void *)v271 != v147) {
                  objc_enumerationMutation(v144);
                }
                long long v149 = *(void **)(*((void *)&v270 + 1) + 8 * kk);
                if (([v149 isRemoteGateway] & 1) == 0
                  && ([v149 privilege] == 4 || !objc_msgSend(v149, "privilege")))
                {
                  if (![v149 requiresMakoSupport]
                    || (objc_msgSend(v4, "hmd_supportedFeatures"),
                        long long v150 = objc_claimAutoreleasedReturnValue(),
                        int v151 = [v150 containsObject:&unk_1F2DC7618],
                        v150,
                        long long v83 = v259,
                        v151))
                  {
                    [v143 addObject:v149];
                  }
                }
              }
              uint64_t v146 = [v144 countByEnumeratingWithState:&v270 objects:v312 count:16];
            }
            while (v146);
          }

          long long v152 = (void *)[v143 copy];
          [v4 encodeObject:v152 forKey:@"HM.sharedUsers"];

          long long v40 = v260;
        }
        long long v153 = (void *)MEMORY[0x1D9452090]();
        long long v154 = v40;
        HMFGetOSLogHandle();
        long long v155 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v155, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          id v156 = (id)objc_claimAutoreleasedReturnValue();
          long long v157 = [(HMDHome *)v154 users];
          long long v158 = objc_msgSend(v4, "hmd_user");
          *(_DWORD *)buf = 138543874;
          id v304 = v156;
          __int16 v305 = 2112;
          id v306 = v157;
          __int16 v307 = 2112;
          v308 = v158;
          _os_log_impl(&dword_1D49D5000, v155, OS_LOG_TYPE_INFO, "%{public}@encode users: %@, coder username: %@", buf, 0x20u);

          long long v83 = v259;
        }

        long long v268 = 0u;
        long long v269 = 0u;
        long long v266 = 0u;
        long long v267 = 0u;
        id v122 = [(HMDHome *)v154 users];
        uint64_t v159 = [v122 countByEnumeratingWithState:&v266 objects:v311 count:16];
        if (v159)
        {
          uint64_t v160 = v159;
          uint64_t v161 = *(void *)v267;
          id v255 = v122;
          id v257 = v4;
          long long v254 = v154;
          uint64_t v253 = *(void *)v267;
          do
          {
            for (muint64_t m = 0; mm != v160; ++mm)
            {
              if (*(void *)v267 != v161) {
                objc_enumerationMutation(v122);
              }
              long long v163 = *(void **)(*((void *)&v266 + 1) + 8 * mm);
              long long v164 = objc_msgSend(v4, "hmd_user");
              int v165 = [v163 isEqual:v164];

              if (v165)
              {
                id v166 = (void *)MEMORY[0x1D9452090]();
                __int16 v167 = v154;
                HMFGetOSLogHandle();
                uint64_t v168 = (id)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v168, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  id v169 = (id)objc_claimAutoreleasedReturnValue();
                  v170 = [(HMDHome *)v167 users];
                  __int16 v171 = objc_msgSend(v4, "hmd_user");
                  [v163 presenceAuthStatus];
                  v172 = v166;
                  v174 = uint64_t v173 = v160;
                  *(_DWORD *)buf = 138544130;
                  id v304 = v169;
                  __int16 v305 = 2112;
                  id v306 = v170;
                  __int16 v307 = 2112;
                  v308 = v171;
                  __int16 v309 = 2112;
                  v310 = v174;
                  _os_log_impl(&dword_1D49D5000, v168, OS_LOG_TYPE_INFO, "%{public}@encode users: %@, coder username: %@, %@", buf, 0x2Au);

                  uint64_t v160 = v173;
                  id v166 = v172;

                  id v4 = v257;
                  uint64_t v161 = v253;

                  id v122 = v255;
                  long long v154 = v254;
                }

                long long v175 = [v163 presenceAuthStatus];
                [v175 addToCoder:v4];

                long long v40 = v260;
              }
            }
            uint64_t v160 = [v122 countByEnumeratingWithState:&v266 objects:v311 count:16];
          }
          while (v160);
          __int16 v59 = v250;
          long long v81 = v247;
          long long v83 = v259;
        }
        else
        {
          __int16 v59 = v250;
          long long v81 = v247;
        }
      }
    }

LABEL_150:
    goto LABEL_151;
  }
LABEL_152:
  if ((v59 & 0x9FD1) != 0) {
    [(HMDHome *)v40 _encodeObjectsWithAccessoriesWithCoder:v4];
  }
  v181 = [(HMDHome *)v40 roomForEntireHome];
  [v4 encodeObject:v181 forKey:@"roomForEntireHome"];

  if ((v59 & 5) != 0 && (objc_msgSend(v4, "hmd_isForRemoteGatewayCoder") & 1) == 0)
  {
    v182 = [(HMDHome *)v40 rooms];
    int v183 = (void *)[v182 copy];
    [v4 encodeObject:v183 forKey:@"rooms"];

    uint64_t v184 = [(HMDHome *)v40 zones];
    id v185 = (void *)[v184 copy];
    [v4 encodeObject:v185 forKey:@"zones"];
  }
  if ((v59 & 0x801) != 0)
  {
    if (v251)
    {
      if (!v249) {
        goto LABEL_163;
      }
      v186 = [(HMDHome *)v40 residentDeviceManager];
      v187 = [v186 residentDevices];

      [v4 encodeObject:v187 forKey:@"residentDevices"];
      v188 = [(HMDHome *)v40 notificationRegistrations];
      objc_msgSend(v4, "encodeBool:forKey:", objc_msgSend(v188, "count") != 0, @"kCharacteristicNotificationEnableKey");

      v189 = [(HMDHome *)v40 notificationsUpdatedTime];
      [v4 encodeObject:v189 forKey:@"kCharacteristicNotificationEnableTime"];
    }
    else
    {
      v190 = [(HMDHome *)v40 residentDeviceManager];
      [v4 encodeObject:v190 forKey:@"HM.residentDeviceManager"];

      id v191 = [(HMDHome *)v40 enabledResidents];
      v192 = objc_msgSend(v191, "na_filter:", &__block_literal_global_1711);

      objc_msgSend(v4, "encodeInteger:forKey:", objc_msgSend(v192, "count"), @"HMD.nonIPadResidentDeviceCount");
      v187 = [(HMDHome *)v40 primaryNetworkRouterManagingDeviceUUID];
      [v4 encodeObject:v187 forKey:@"HMDHomePrimaryNetworkRouterManagingDeviceUUIDCodingKey"];
    }
  }
LABEL_163:
  if ((v59 & 0x85D1) != 0
    && (!objc_msgSend(v4, "hmd_isForXPCTransport")
     || objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess")))
  {
    uint64_t v193 = [(HMDHome *)v40 minimumMediaUserPrivilege];
    [v4 encodeInteger:v193 forKey:*MEMORY[0x1E4F2D5C8]];
    uint64_t v194 = [(HMDHome *)v40 isMediaPeerToPeerEnabled];
    [v4 encodeBool:v194 forKey:*MEMORY[0x1E4F2D5E0]];
    if ((objc_msgSend(v4, "hmd_isForNonAdminSharedUser") & 1) == 0)
    {
      v195 = [(HMDHome *)v40 mediaPassword];
      [v4 encodeObject:v195 forKey:*MEMORY[0x1E4F2D5D0]];
    }
  }
  if ((v59 & 0x11) != 0
    && (!objc_msgSend(v4, "hmd_isForXPCTransport")
     || objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess")))
  {
    uint64_t v196 = [(HMDHome *)v40 isAutomaticSoftwareUpdateEnabled];
    [v4 encodeBool:v196 forKey:*MEMORY[0x1E4F2D1D0]];
    uint64_t v197 = [(HMDHome *)v40 isAutomaticThirdPartyAccessorySoftwareUpdateEnabled];
    [v4 encodeBool:v197 forKey:*MEMORY[0x1E4F2D1D8]];
  }
  uint64_t v198 = [(HMDHome *)v40 matterFabricID];
  [v4 encodeObject:v198 forKey:@"HM.matterFabricID"];

  if (v59)
  {
    if (v252)
    {
      v199 = [(HMDHome *)v40 presenceMonitor];
      [v4 encodeObject:v199 forKey:@"kHMDHomePresenceMonitorCodingKey"];

      v200 = [(HMDHome *)v40 unfilteredThreadNetworkID];
      [v4 encodeObject:v200 forKey:@"HMHM.threadNetworkID"];
    }
    if (objc_msgSend(v4, "hmd_isForRemoteGatewayCoder"))
    {
      if (!v251) {
        goto LABEL_183;
      }
    }
    else
    {
      if ((v251 & 1) == 0)
      {
        v204 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHome allowsRemoteAccess](v40, "allowsRemoteAccess"));
        [v4 encodeObject:v204 forKey:@"HM.allowsRemoteAccess"];

        v205 = [(HMDHome *)v40 networkProtectionGroupRegistry];
        uint64_t v206 = [v205 persistedGroups];
        [v4 encodeObject:v206 forKey:*MEMORY[0x1E4F2D190]];

LABEL_183:
        v203 = [(HMDHome *)v40 appData];
        [v4 encodeObject:v203 forKey:@"HM.appDataRepository"];
LABEL_184:

        if (v252)
        {
          uint64_t v207 = [(HMDHome *)v40 removedUsers];
          v208 = (void *)[v207 copy];
          [v4 encodeObject:v208 forKey:@"HM.removedUsersCodingKey"];
        }
        else if (!v248)
        {
          goto LABEL_188;
        }
        id v209 = [(HMDHome *)v40 presenceAuthStatus];
        [v209 addToCoder:v4];

        id v210 = [(HMDHome *)v40 presenceComputeStatus];
        [v210 addToCoder:v4];

LABEL_188:
        if ((v252 | v248) == 1)
        {
          if (!isWatch() && (objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount") & 1) == 0)
          {
            uint64_t v211 = [(HMDHome *)v40 notificationRegistry];
            [v4 encodeObject:v211 forKey:@"characteristicNotificationRegistryCodingKey"];
          }
          if (!isWatch() && (objc_msgSend(v4, "hmd_isForRemoteGatewayCoder") & 1) == 0)
          {
            v212 = (void *)MEMORY[0x1E4F1CA48];
            id v213 = [(HMDHome *)v40 outgoingInvitations];
            v214 = [v212 arrayWithArray:v213];

            if (objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount"))
            {
              v215 = objc_msgSend(v4, "hmd_supportedFeatures");
              char v216 = [v215 containsObject:&unk_1F2DC7618];

              if ((v216 & 1) == 0)
              {
                long long v264 = 0u;
                long long v265 = 0u;
                long long v262 = 0u;
                long long v263 = 0u;
                v217 = [(HMDHome *)v40 outgoingInvitations];
                uint64_t v218 = [v217 countByEnumeratingWithState:&v262 objects:v302 count:16];
                if (v218)
                {
                  uint64_t v219 = v218;
                  uint64_t v220 = *(void *)v263;
                  do
                  {
                    for (nuint64_t n = 0; nn != v219; ++nn)
                    {
                      if (*(void *)v263 != v220) {
                        objc_enumerationMutation(v217);
                      }
                      id v222 = *(void **)(*((void *)&v262 + 1) + 8 * nn);
                      v223 = [v222 user];
                      if ([v223 requiresMakoSupport]) {
                        [v214 removeObject:v222];
                      }
                    }
                    uint64_t v219 = [v217 countByEnumeratingWithState:&v262 objects:v302 count:16];
                  }
                  while (v219);
                }
              }
            }
            v224 = (void *)[v214 copy];
            [v4 encodeObject:v224 forKey:@"HM.invitations"];
          }
        }
        if (!objc_msgSend(v4, "hmd_isForXPCTransport")
          || objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess"))
        {
          uint64_t v225 = [(HMDHome *)v40 protectionMode];
          [v4 encodeInteger:v225 forKey:*MEMORY[0x1E4F2D610]];
        }
        if (objc_msgSend(v4, "hmd_isForXPCTransport"))
        {
          if (objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess"))
          {
            uint64_t v226 = [(HMDHome *)v40 networkRouterSupportDisableReason];
            [v4 encodeInteger:v226 forKey:*MEMORY[0x1E4F2D618]];
          }
          unint64_t v227 = [(HMDHome *)v40 networkRouterSupport];
          [v4 encodeBool:(v227 >> 2) & 1 forKey:*MEMORY[0x1E4F2D1A0]];
        }
        id v228 = [(HMDHome *)v40 threadNetworkID];
        if (v228 && objc_msgSend(v4, "hmd_isForXPCTransport"))
        {
          int v229 = objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess");

          if (!v229) {
            goto LABEL_219;
          }
          id v228 = [(HMDHome *)v40 threadNetworkID];
          [v4 encodeObject:v228 forKey:*MEMORY[0x1E4F2D740]];
        }

LABEL_219:
        if ((objc_msgSend(v4, "hmd_isForXPCTransport") & 1) == 0)
        {
          id v230 = [(HMDHome *)v40 activeNetworkRouterUUID];
          id v231 = [v230 UUIDString];
          [v4 encodeObject:v231 forKey:@"HMHM.activeNetworkRouter"];

          long long v232 = [(HMDHome *)v40 minimumNetworkRouterSupportHomeKitVersion];
          long long v233 = [v232 versionString];
          [v4 encodeObject:v233 forKey:@"HMHM.minimumNetworkRouterSupportHomeKitVersion"];

          long long v234 = [(HMDHome *)v40 minHomeKitVersionForAccessoryNetworkProtectionChange];
          long long v235 = [v234 versionString];
          [v4 encodeObject:v235 forKey:@"HMHM.minHomeKitVersionForAccessoryNetworkProtectionChangeCodingKey"];
        }
        if (v251)
        {
          if (!objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess"))
          {
LABEL_229:
            if (v252 | v248)
            {
              id v244 = [(HMDHome *)v40 chipStorage];
              [v4 encodeObject:v244 forKey:@"HMHM.chipStorage"];
            }
            if (![(HMDHome *)v40 isOwnerUser]
              && ((objc_msgSend(v4, "hmd_isForLocalStore") & 1) != 0
               || objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount")))
            {
              id v245 = [(HMDHome *)v40 sharedHomeSourceVersion];
              [v4 encodeObject:v245 forKey:@"kHomeKitVersionStringKey"];
            }
            goto LABEL_235;
          }
          long long v236 = [(HMDHome *)v40 personManagerSettings];
          [v4 encodeObject:v236 forKey:*MEMORY[0x1E4F2D630]];

          long long v237 = [(HMDHome *)v40 personManagerZoneUUID];
          long long v238 = (__CFString *)*MEMORY[0x1E4F2D648];
        }
        else
        {
          long long v239 = [(HMDHome *)v40 personManagerSettings];
          [v4 encodeObject:v239 forKey:*MEMORY[0x1E4F2D630]];

          long long v240 = [(HMDHome *)v40 personManagerZoneUUID];
          [v4 encodeObject:v240 forKey:*MEMORY[0x1E4F2D648]];

          long long v241 = [(HMDHome *)v40 naturalLightingContext];
          [v4 encodeObject:v241 forKey:@"HM.nlcck"];

          if ((objc_msgSend(v4, "hmd_isForLocalStore") & 1) != 0
            || objc_msgSend(v4, "hmd_isForRemoteUserAdministrator"))
          {
            long long v242 = [(HMDHome *)v40 labelsByAccessCode];
            [v4 encodeObject:v242 forKey:@"HMDHomeLabelsByAccessCodeCodingKey"];

            long long v243 = [(HMDHome *)v40 removedUserInfoByAccessCode];
            [v4 encodeObject:v243 forKey:@"HMDHomeRemovedUserInfoByAccessCodeCodingKey"];
          }
          long long v237 = [(HMDHome *)v40 nfcReaderKey];
          long long v238 = @"HMDHomeNFCReaderKeyCodingKey";
        }
        [v4 encodeObject:v237 forKey:v238];

        goto LABEL_229;
      }
      if (v249)
      {
        v201 = [(HMDHome *)v40 networkProtectionGroupRegistry];
        v202 = [v201 activeGroups];
        [v4 encodeObject:v202 forKey:*MEMORY[0x1E4F2D190]];
      }
    }
    v203 = [(HMDHome *)v40 appData];
    [v203 encodeForXPCTransportWithCoder:v4 key:@"HM.appData"];
    goto LABEL_184;
  }
LABEL_235:
}

- (HMDAccessoryNetworkProtectionGroupRegistry)networkProtectionGroupRegistry
{
  return self->_networkProtectionGroupRegistry;
}

- (BOOL)isOwnerUser
{
  LOBYTE(self) = self->_ownerUser;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (BOOL)isUpdatedToHH2
{
  return self->_isUpdatedToHH2;
}

- (BOOL)isAdminUser
{
  id v2 = [(HMDHome *)self currentUser];
  char v3 = [v2 isAdministrator];

  return v3;
}

- (NSMutableArray)serviceGroups
{
  return self->_serviceGroups;
}

- (int64_t)atHomeLevel
{
  os_unfair_recursive_lock_lock_with_options();
  int64_t atHomeLevel = self->_atHomeLevel;
  os_unfair_recursive_lock_unlock();
  return atHomeLevel;
}

- (HMDUser)currentUser
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  p_currentUser = &self->_currentUser;
  currentUser = self->_currentUser;
  if (!currentUser)
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    int v5 = [(HMDHome *)self users];
    uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v14;
      while (2)
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v14 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = *(void **)(*((void *)&v13 + 1) + 8 * i);
          if ([v10 isCurrentUser])
          {
            objc_storeStrong((id *)p_currentUser, v10);
            id v11 = [(HMDHome *)self presenceAuthStatus];
            [(HMDUser *)*p_currentUser setPresenceAuthStatus:v11];

            goto LABEL_12;
          }
        }
        uint64_t v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
        if (v7) {
          continue;
        }
        break;
      }
    }
LABEL_12:

    currentUser = *p_currentUser;
  }
  return currentUser;
}

- (NSMutableArray)zones
{
  return self->_zones;
}

- (NSUUID)spiClientIdentifier
{
  return self->_spiClientIdentifier;
}

- (int64_t)homeLocation
{
  os_unfair_recursive_lock_lock_with_options();
  if (self->_overrideHomeLocation) {
    char v3 = &OBJC_IVAR___HMDHome__overriddenHomeLocation;
  }
  else {
    char v3 = &OBJC_IVAR___HMDHome__homeLocation;
  }
  int64_t v4 = *(int64_t *)((char *)&self->super.super.isa + *v3);
  os_unfair_recursive_lock_unlock();
  return v4;
}

- (NSMutableArray)actionSets
{
  return self->_actionSets;
}

- (BOOL)isThreadCapable
{
  char v3 = [(HMDHome *)self threadNetworkID];

  if (v3) {
    return 1;
  }
  [(HMDHome *)self _scheduleThreadNetworkUpdate];
  return [(HMDHome *)self threadPreferredNetworkExists];
}

- (NSString)threadNetworkID
{
  id v2 = [(HMDHome *)self unfilteredThreadNetworkID];
  if ([v2 isEqualToString:@"770E5B2E-0BAD-0BAD-0BAD-EE86505EFF8F"]) {
    id v3 = 0;
  }
  else {
    id v3 = v2;
  }

  return (NSString *)v3;
}

- (NSString)unfilteredThreadNetworkID
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = self->_unfilteredThreadNetworkID;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (BOOL)threadPreferredNetworkExists
{
  return self->_threadPreferredNetworkExists;
}

- (BOOL)isCurrentDeviceConfirmedPrimaryResident
{
  id v2 = [(HMDHome *)self residentDeviceManager];
  char v3 = [v2 isCurrentDeviceConfirmedPrimaryResident];

  return v3;
}

- (NSDate)notificationsUpdatedTime
{
  return self->_notificationsUpdatedTime;
}

- (BOOL)soundCheckEnabled
{
  return self->_soundCheckEnabled;
}

- (unint64_t)siriPhraseOptions
{
  return self->_siriPhraseOptions;
}

- (NSMutableArray)rooms
{
  return self->_rooms;
}

- (int64_t)protectionMode
{
  os_unfair_recursive_lock_lock_with_options();
  int64_t protectionMode = self->_protectionMode;
  os_unfair_recursive_lock_unlock();
  return protectionMode;
}

- (HMHomePersonManagerSettings)personManagerSettings
{
  os_unfair_recursive_lock_lock_with_options();
  personManagerSettings = self->_personManagerSettings;
  if (personManagerSettings) {
    int64_t v4 = personManagerSettings;
  }
  else {
    int64_t v4 = (HMHomePersonManagerSettings *)objc_alloc_init(MEMORY[0x1E4F2E838]);
  }
  int v5 = v4;
  os_unfair_recursive_lock_unlock();
  return v5;
}

- (NSString)ownerName
{
  return self->_ownerName;
}

- (NSNumber)overriddenHomeAccessControl
{
  os_unfair_recursive_lock_lock_with_options();
  char v3 = self->_overriddenHomeAccessControl;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (unint64_t)networkRouterSupport
{
  os_unfair_recursive_lock_lock_with_options();
  unint64_t networkRouterSupport = self->_networkRouterSupport;
  os_unfair_recursive_lock_unlock();
  return networkRouterSupport;
}

- (unint64_t)networkRouterSupportDisableReason
{
  os_unfair_recursive_lock_lock_with_options();
  networkRouterSupportDisableReasouint64_t n = self->_networkRouterSupportDisableReason;
  os_unfair_recursive_lock_unlock();
  return networkRouterSupportDisableReason;
}

- (int64_t)minimumMediaUserPrivilege
{
  os_unfair_recursive_lock_lock_with_options();
  int64_t minimumMediaUserPrivilege = self->_minimumMediaUserPrivilege;
  os_unfair_recursive_lock_unlock();
  return minimumMediaUserPrivilege;
}

- (id)mediaPassword
{
  os_unfair_recursive_lock_lock_with_options();
  char v3 = self->_mediaPassword;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (NSNumber)matterFabricID
{
  if (isFeatureMatterLocalFabricConfigEnabled()) {
    [(HMDHome *)self fabric];
  }
  else {
  char v3 = [(HMDHome *)self chipStorage];
  }
  int64_t v4 = [v3 fabricID];

  return (NSNumber *)v4;
}

- (BOOL)locationServicesEnabled
{
  return self->_locationServicesEnabled;
}

- (BOOL)isMultiUserEnabled
{
  return self->_multiUserEnabled;
}

- (BOOL)isMediaPeerToPeerEnabled
{
  LOBYTE(self) = self->_mediaPeerToPeerEnabled;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (BOOL)isAutomaticThirdPartyAccessorySoftwareUpdateEnabled
{
  LOBYTE(self) = self->_automaticThirdPartyAccessorySoftwareUpdateEnabled;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (BOOL)isAutomaticSoftwareUpdateEnabled
{
  LOBYTE(self) = self->_automaticSoftwareUpdateEnabled;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (HMDHomeLocationHandler)homeLocationHandler
{
  return self->_homeLocationHandler;
}

- (unint64_t)homeHubState
{
  return self->_homeHubState;
}

- (BOOL)hasOnboardedForWalletKey
{
  return self->_hasOnboardedForWalletKey;
}

- (BOOL)hasOnboardedForAccessCode
{
  return self->_hasOnboardedForAccessCode;
}

- (BOOL)hasAnyUserAcknowledgedCameraRecordingOnboarding
{
  return self->_hasAnyUserAcknowledgedCameraRecordingOnboarding;
}

- (NSDate)firstHAPAccessoryAddedDate
{
  return self->_firstHAPAccessoryAddedDate;
}

- (BOOL)didOnboardLocationServices
{
  return self->_didOnboardLocationServices;
}

- (NSDate)creationDate
{
  return self->_creationDate;
}

- (int64_t)configurationVersion
{
  return self->_configurationVersion;
}

- (HMDCHIPHomeStorage)chipStorage
{
  return (HMDCHIPHomeStorage *)objc_getProperty(self, a2, 1464, 1);
}

- (BOOL)bulletinNotificationsSupported
{
  return self->_bulletinNotificationsSupported;
}

- (HMDApplicationData)appData
{
  return (HMDApplicationData *)objc_getProperty(self, a2, 984, 1);
}

- (void)_refreshCharacteristicValuesOnHomeNotificationEnable
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  char v3 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v47 = [MEMORY[0x1E4F1CA80] set];
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  id v43 = self;
  id obj = [(HMDHome *)self accessories];
  uint64_t v44 = [obj countByEnumeratingWithState:&v61 objects:v73 count:16];
  if (v44)
  {
    uint64_t v42 = *(void *)v62;
    do
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v62 != v42) {
          objc_enumerationMutation(obj);
        }
        uint64_t v46 = v4;
        id v5 = *(id *)(*((void *)&v61 + 1) + 8 * v4);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v6 = v5;
        }
        else {
          uint64_t v6 = 0;
        }
        id v7 = v6;

        v60[0] = MEMORY[0x1E4F143A8];
        v60[1] = 3221225472;
        v60[2] = __63__HMDHome__refreshCharacteristicValuesOnHomeNotificationEnable__block_invoke;
        v60[3] = &unk_1E6A17BB8;
        v60[4] = v43;
        uint64_t v8 = [v7 characteristicsPassingTest:v60];
        long long v56 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        uint64_t v9 = [v8 countByEnumeratingWithState:&v56 objects:v72 count:16];
        if (v9)
        {
          uint64_t v10 = v9;
          uint64_t v11 = *(void *)v57;
          do
          {
            for (uint64_t i = 0; i != v10; ++i)
            {
              if (*(void *)v57 != v11) {
                objc_enumerationMutation(v8);
              }
              long long v13 = +[HMDCharacteristicRequest requestWithCharacteristic:*(void *)(*((void *)&v56 + 1) + 8 * i)];
              [v3 addObject:v13];
            }
            uint64_t v10 = [v8 countByEnumeratingWithState:&v56 objects:v72 count:16];
          }
          while (v10);
        }
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        id v45 = v7;
        long long v14 = [v7 lightProfiles];
        long long v15 = [v14 allObjects];

        uint64_t v16 = [v15 countByEnumeratingWithState:&v52 objects:v71 count:16];
        if (v16)
        {
          uint64_t v17 = v16;
          uint64_t v18 = *(void *)v53;
          do
          {
            for (uint64_t j = 0; j != v17; ++j)
            {
              if (*(void *)v53 != v18) {
                objc_enumerationMutation(v15);
              }
              int v20 = *(void **)(*((void *)&v52 + 1) + 8 * j);
              id v21 = [v20 readCharacteristicRequests];
              if ([v21 count])
              {
                __int16 v22 = [v21 allObjects];
                [v3 addObjectsFromArray:v22];

                [v47 addObject:v20];
              }
            }
            uint64_t v17 = [v15 countByEnumeratingWithState:&v52 objects:v71 count:16];
          }
          while (v17);
        }

        uint64_t v4 = v46 + 1;
      }
      while (v46 + 1 != v44);
      uint64_t v44 = [obj countByEnumeratingWithState:&v61 objects:v73 count:16];
    }
    while (v44);
  }

  char v23 = objc_msgSend(v3, "hmf_isEmpty");
  __int16 v24 = (void *)MEMORY[0x1D9452090]();
  id v25 = v43;
  uint64_t v26 = HMFGetOSLogHandle();
  BOOL v27 = os_log_type_enabled(v26, OS_LOG_TYPE_INFO);
  if (v23)
  {
    BOOL v28 = v47;
    if (v27)
    {
      uint64_t v29 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v68 = v29;
      _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_INFO, "%{public}@Not refreshing characteristics as read requests are empty", buf, 0xCu);
    }
  }
  else
  {
    BOOL v28 = v47;
    if (v27)
    {
      BOOL v30 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v68 = v30;
      __int16 v69 = 2112;
      uint64_t v70 = v3;
      _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_INFO, "%{public}@Issuing characteristic read requests when Home app enabled notifications: %@", buf, 0x16u);
    }
    id v31 = (void *)MEMORY[0x1E4F65480];
    BOOL v32 = [MEMORY[0x1E4F65488] allMessageDestinations];
    long long v65 = @"kMultiPartResponseKey";
    uint64_t v66 = MEMORY[0x1E4F1CC38];
    BOOL v33 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v66 forKeys:&v65 count:1];
    BOOL v34 = [v31 messageWithName:@"kMultipleCharacteristicReadRequestKey" destination:v32 payload:v33];

    BOOL v35 = (void *)MEMORY[0x1D9452090]();
    BOOL v36 = v25;
    uint64_t v37 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      int v38 = HMFGetLogIdentifier();
      uint64_t v39 = [v34 identifier];
      *(_DWORD *)buf = 138543618;
      id v68 = v38;
      __int16 v69 = 2114;
      uint64_t v70 = v39;
      _os_log_impl(&dword_1D49D5000, v37, OS_LOG_TYPE_INFO, "%{public}@Issuing read requests with identifier %{public}@, Source: App enabled notifications", buf, 0x16u);

      BOOL v28 = v47;
    }

    long long v40 = (void *)[v3 copy];
    v48[0] = MEMORY[0x1E4F143A8];
    v48[1] = 3221225472;
    v48[2] = __63__HMDHome__refreshCharacteristicValuesOnHomeNotificationEnable__block_invoke_1625;
    v48[3] = &unk_1E6A149B8;
    id v49 = v3;
    uint64_t v50 = v36;
    id v51 = v28;
    [(HMDHome *)v36 _readCharacteristicValues:v40 requestMessage:v34 source:7 withCompletionHandler:v48];
  }
}

void __87__HMDHome_retrieveHAPAccessoryForHMDAccessory_linkType_forceRetrieve_queue_completion___block_invoke(uint64_t a1)
{
  v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 56))
  {
    BOOL v6 = v3 != 0;
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = __87__HMDHome_retrieveHAPAccessoryForHMDAccessory_linkType_forceRetrieve_queue_completion___block_invoke_2;
    v8[3] = &unk_1E6A17D78;
    id v9 = *(id *)(a1 + 48);
    id v10 = *(id *)(a1 + 56);
    [v1 _retrieveHAPAccessoryForHMDHAPAccessory:v2 linkType:v4 forceRetrieve:v6 completion:v8];
  }
  else
  {
    id v7 = *(void **)(a1 + 32);
    [v7 _retrieveHAPAccessoryForHMDHAPAccessory:v2 linkType:v4 forceRetrieve:v3 != 0 completion:0];
  }
}

- (void)_registerPairedAccessory:(id)a3 transports:(unint64_t)a4 setupHash:(id)a5
{
  id v8 = a5;
  id v9 = a3;
  id v10 = [(HMDHome *)self accessoryBrowser];
  [v10 registerPairedAccessory:v9 transports:a4 setupHash:v8 delegate:self];
}

- (void)_retrieveHAPAccessoryForHMDHAPAccessory:(id)a3 linkType:(int64_t)a4 forceRetrieve:(BOOL)a5 completion:(id)a6
{
  BOOL v7 = a5;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v11 = a6;
  uint64_t v12 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v12);

  uint64_t v13 = [v10 bridge];
  long long v14 = (void *)v13;
  if (v13) {
    long long v15 = (void *)v13;
  }
  else {
    long long v15 = v10;
  }
  id v16 = v15;

  uint64_t v17 = [(HMDHome *)self accessoryBrowser];
  char v18 = [v17 isBrowsingAllowed];

  if (v18)
  {
    uint64_t v19 = [(HMDHome *)self accessories];
    char v20 = [v19 containsObject:v10];

    if (v20)
    {
      id v21 = [v16 matchingHAPAccessoryServerIdentifierWithLinkType:a4];
      __int16 v22 = (void *)MEMORY[0x1D9452090]();
      char v23 = self;
      __int16 v24 = HMFGetOSLogHandle();
      id v58 = v11;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        long long v54 = HMFGetLogIdentifier();
        long long v52 = [v16 shortDescription];
        long long v56 = v22;
        if ((unint64_t)a4 > 2) {
          id v25 = @"Undefined";
        }
        else {
          id v25 = off_1E6A0B860[a4];
        }
        uint64_t v39 = v25;
        long long v40 = HMFBooleanToString();
        *(_DWORD *)buf = 138544386;
        long long v64 = v54;
        __int16 v65 = 2112;
        uint64_t v66 = v52;
        __int16 v67 = 2112;
        id v68 = v21;
        __int16 v69 = 2112;
        uint64_t v70 = v39;
        __int16 v71 = 2112;
        uint64_t v72 = v40;
        _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_INFO, "%{public}@Retrieving accessory (%@) with server %@/%@. Force retrieve: %@", buf, 0x34u);

        __int16 v22 = v56;
        id v11 = v58;
      }

      char v62 = 0;
      long long v41 = [(HMDHome *)v23 _enqueueRetrievalTupleForAccessory:v16 linkType:a4 inProgress:&v62 completion:v11];
      uint64_t v42 = v41;
      if (v62 && !v7) {
        goto LABEL_23;
      }
      [v41 start];
      id v43 = [(HMDHome *)v23 accessoryBrowser];
      v59[0] = MEMORY[0x1E4F143A8];
      v59[1] = 3221225472;
      v59[2] = __105__HMDHome_AccessoryRetrieval___retrieveHAPAccessoryForHMDHAPAccessory_linkType_forceRetrieve_completion___block_invoke;
      v59[3] = &unk_1E6A17040;
      v59[4] = v23;
      id v60 = v16;
      int64_t v61 = a4;
      [v43 discoverAccessoryServer:v21 linkType:a4 errorHandler:v59];

      if (v62)
      {
LABEL_23:
        uint64_t v44 = (void *)MEMORY[0x1D9452090]();
        id v45 = v23;
        uint64_t v46 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
        {
          long long v55 = HMFGetLogIdentifier();
          [v16 shortDescription];
          long long v53 = v57 = v44;
          if ((unint64_t)a4 > 2) {
            uint64_t v47 = @"Undefined";
          }
          else {
            uint64_t v47 = off_1E6A0B860[a4];
          }
          uint64_t v48 = v47;
          id v49 = NSNumber;
          uint64_t v50 = [v42 completions];
          id v51 = objc_msgSend(v49, "numberWithUnsignedInteger:", objc_msgSend(v50, "count"));
          *(_DWORD *)buf = 138544386;
          long long v64 = v55;
          __int16 v65 = 2112;
          uint64_t v66 = v53;
          __int16 v67 = 2112;
          id v68 = v21;
          __int16 v69 = 2112;
          uint64_t v70 = v48;
          __int16 v71 = 2112;
          uint64_t v72 = v51;
          _os_log_impl(&dword_1D49D5000, v46, OS_LOG_TYPE_INFO, "%{public}@Retrieval already in progress for accessory (%@) with server %@/%@ and %@ completions.", buf, 0x34u);

          uint64_t v44 = v57;
          id v11 = v58;
        }
      }

      goto LABEL_30;
    }
    BOOL v33 = (void *)MEMORY[0x1D9452090]();
    BOOL v34 = self;
    BOOL v35 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      BOOL v36 = HMFGetLogIdentifier();
      uint64_t v37 = [v10 shortDescription];
      *(_DWORD *)buf = 138543618;
      long long v64 = v36;
      __int16 v65 = 2112;
      uint64_t v66 = v37;
      _os_log_impl(&dword_1D49D5000, v35, OS_LOG_TYPE_ERROR, "%{public}@Cannot retrieve HAP accessory: %@. Requested accessory not part of this home", buf, 0x16u);
    }
    id v21 = (void (**)(void, void))_Block_copy(v11);
    if (v21)
    {
      id v31 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v32 = 3;
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v26 = (void *)MEMORY[0x1D9452090]();
    BOOL v27 = self;
    BOOL v28 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      uint64_t v29 = HMFGetLogIdentifier();
      BOOL v30 = [v16 shortDescription];
      *(_DWORD *)buf = 138543618;
      long long v64 = v29;
      __int16 v65 = 2112;
      uint64_t v66 = v30;
      _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_ERROR, "%{public}@Ignoring request to retrieve HAP accessory: %@. Browsing not allowed (companion is connected or no app)", buf, 0x16u);
    }
    id v21 = (void (**)(void, void))_Block_copy(v11);
    if (v21)
    {
      id v31 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v32 = 48;
LABEL_17:
      int v38 = [v31 hmErrorWithCode:v32];
      ((void (**)(void, void *))v21)[2](v21, v38);
    }
  }
LABEL_30:
}

- (HMDAccessoryBrowserProtocol)accessoryBrowser
{
  return self->_accessoryBrowser;
}

- (void)_addRetrievalCompletionTuple:(id)a3
{
  id v5 = a3;
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v4 = [(HMDHome *)self retrievalAccessoryCompletionTuples];
  [v4 addObject:v5];

  os_unfair_recursive_lock_unlock();
}

- (id)_enqueueRetrievalTupleForAccessory:(id)a3 linkType:(int64_t)a4 inProgress:(BOOL *)a5 completion:(id)a6
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v11 = a6;
  uint64_t v12 = [v10 bridge];
  uint64_t v13 = (void *)v12;
  if (v12) {
    long long v14 = (void *)v12;
  }
  else {
    long long v14 = v10;
  }
  id v15 = v14;

  id v16 = (void *)MEMORY[0x1D9452090]();
  uint64_t v17 = self;
  char v18 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    BOOL v27 = v16;
    uint64_t v19 = HMFGetLogIdentifier();
    if (v11) {
      char v20 = @" with completion";
    }
    else {
      char v20 = &stru_1F2C9F1A8;
    }
    id v21 = objc_msgSend(v15, "shortDescription", v27);
    uint64_t v29 = a5;
    if ((unint64_t)a4 > 2) {
      __int16 v22 = @"Undefined";
    }
    else {
      __int16 v22 = off_1E6A0B860[a4];
    }
    char v23 = v22;
    *(_DWORD *)buf = 138544130;
    id v31 = v19;
    __int16 v32 = 2112;
    BOOL v33 = v20;
    __int16 v34 = 2112;
    BOOL v35 = v21;
    __int16 v36 = 2112;
    uint64_t v37 = v23;
    _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@Enqueueing retrieval tuple%@ for %@/%@.", buf, 0x2Au);

    id v16 = v28;
    a5 = v29;
  }

  uint64_t v24 = [(HMDHome *)v17 _retrieveTupleForPrimaryAccessory:v15 linkType:a4];
  if (v24)
  {
    id v25 = (HMDAccessoryRetrievalCompletionTuple *)v24;
    if (a5) {
      *a5 = 1;
    }
    if (v11) {
      goto LABEL_16;
    }
  }
  else
  {
    id v25 = [[HMDAccessoryRetrievalCompletionTuple alloc] initWithHome:v17 accessory:v15 linkType:a4];
    [(HMDHome *)v17 _addRetrievalCompletionTuple:v25];
    if (v11) {
LABEL_16:
    }
      [(HMDAccessoryRetrievalCompletionTuple *)v25 addCompletion:v11];
  }

  return v25;
}

- (BOOL)_isRetrievalInProgressForPrimaryAccessory:(id)a3 linkType:(int64_t)a4
{
  uint64_t v4 = [(HMDHome *)self _retrieveTupleForPrimaryAccessory:a3 linkType:a4];
  BOOL v5 = v4 != 0;

  return v5;
}

- (void)_dequeueRetrievalForAccessory:(id)a3 linkType:(int64_t)a4 error:(id)a5
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a5;
  id v10 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v10);

  uint64_t v11 = [v8 bridge];
  uint64_t v12 = (void *)v11;
  if (v11) {
    uint64_t v13 = (void *)v11;
  }
  else {
    uint64_t v13 = v8;
  }
  id v14 = v13;

  id v15 = [(HMDHome *)self _retrieveTupleForPrimaryAccessory:v14 linkType:a4];
  if (v15)
  {
    [(HMDHome *)self _removeRetrievalCompletionTuple:v15];
    uint64_t v16 = [v15 stop];
    if (v9)
    {
      uint64_t v17 = (void *)MEMORY[0x1D9452090](v16);
      char v18 = self;
      uint64_t v19 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        BOOL v30 = HMFGetLogIdentifier();
        BOOL v28 = [v14 shortDescription];
        uint64_t v29 = v17;
        if ((unint64_t)a4 > 2) {
          char v20 = @"Undefined";
        }
        else {
          char v20 = off_1E6A0B860[a4];
        }
        id v21 = v20;
        __int16 v22 = objc_msgSend(MEMORY[0x1E4F28C58], "hmStringFromErrorCode:", objc_msgSend(v9, "code"));
        char v23 = NSNumber;
        BOOL v27 = [v15 completions];
        uint64_t v24 = objc_msgSend(v23, "numberWithUnsignedInteger:", objc_msgSend(v27, "count"));
        *(_DWORD *)buf = 138544386;
        __int16 v34 = v30;
        __int16 v35 = 2112;
        __int16 v36 = v28;
        __int16 v37 = 2112;
        uint64_t v38 = v21;
        __int16 v39 = 2112;
        long long v40 = v22;
        __int16 v41 = 2112;
        uint64_t v42 = v24;
        _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_INFO, "%{public}@Calling accessory retrieval for %@/%@ with error: %@ and %@ completions.", buf, 0x34u);

        uint64_t v17 = v29;
      }
    }
    id v25 = [v15 completions];
    v31[0] = MEMORY[0x1E4F143A8];
    v31[1] = 3221225472;
    v31[2] = __76__HMDHome_AccessoryRetrieval___dequeueRetrievalForAccessory_linkType_error___block_invoke;
    v31[3] = &unk_1E6A16FF0;
    id v32 = v9;
    objc_msgSend(v25, "na_each:", v31);

    uint64_t v26 = [v15 completions];
    [v26 removeAllObjects];
  }
}

- (id)_retrieveTupleForPrimaryAccessory:(id)a3 linkType:(int64_t)a4
{
  id v6 = a3;
  uint64_t v7 = [v6 bridge];
  id v8 = (void *)v7;
  if (v7) {
    id v9 = (void *)v7;
  }
  else {
    id v9 = v6;
  }
  id v10 = v9;

  os_unfair_recursive_lock_lock_with_options();
  uint64_t v11 = [(HMDHome *)self retrievalAccessoryCompletionTuples];
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __74__HMDHome_AccessoryRetrieval___retrieveTupleForPrimaryAccessory_linkType___block_invoke;
  v15[3] = &unk_1E6A16FC8;
  id v12 = v10;
  id v16 = v12;
  int64_t v17 = a4;
  uint64_t v13 = objc_msgSend(v11, "na_firstObjectPassingTest:", v15);

  os_unfair_recursive_lock_unlock();
  return v13;
}

- (NSMutableArray)retrievalAccessoryCompletionTuples
{
  return self->_retrievalAccessoryCompletionTuples;
}

- (void)_removeRetrievalCompletionTuple:(id)a3
{
  id v5 = a3;
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v4 = [(HMDHome *)self retrievalAccessoryCompletionTuples];
  [v4 removeObject:v5];

  os_unfair_recursive_lock_unlock();
}

uint64_t __76__HMDHome_AccessoryRetrieval___dequeueRetrievalForAccessory_linkType_error___block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a2 + 16))(a2, *(void *)(a1 + 32));
}

- (BOOL)_isAccessToHomeAllowed
{
  return ![(HMDHome *)self isThisHomeMigratedToHH2];
}

- (BOOL)isThisHomeMigratedToHH2
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  int v3 = [(HMDHome *)self homeManager];
  uint64_t v4 = v3;
  if (!v3
    || ([v3 hh2FrameworkSwitch], id v5 = objc_claimAutoreleasedReturnValue(), v5, !v5))
  {
    id v21 = (void *)MEMORY[0x1D9452090]();
    __int16 v22 = self;
    char v23 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v24 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      BOOL v28 = v24;
      _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_DEBUG, "%{public}@Unable to find a valid instance of homeManager or this OS is not capable of running ROAR. Marking this home as not migrated to ROAR", buf, 0xCu);
    }
    goto LABEL_11;
  }
  id v6 = [(HMDHome *)self owner];
  char v7 = [v6 isCurrentUser];

  id v8 = [v4 hh2FrameworkSwitch];
  char v9 = [v8 checkExistenceOfHH2SentinelZone];

  id v10 = (void *)MEMORY[0x1D9452090]();
  uint64_t v11 = self;
  id v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = HMFGetLogIdentifier();
    id v14 = HMFBooleanToString();
    id v15 = HMFBooleanToString();
    [(HMDHome *)v11 isUpdatedToHH2];
    id v16 = HMFBooleanToString();
    HMFBooleanToString();
    char v26 = v9;
    char v17 = v7;
    uint64_t v19 = v18 = v10;
    *(_DWORD *)buf = 138544386;
    BOOL v28 = v13;
    __int16 v29 = 2112;
    BOOL v30 = v14;
    __int16 v31 = 2112;
    id v32 = v15;
    __int16 v33 = 2112;
    __int16 v34 = v16;
    __int16 v35 = 2112;
    __int16 v36 = v19;
    _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_DEBUG, "%{public}@[HH2 Sentinel zone exist : %@], [isOwner: %@], [Is Shared Home Updated to HH2: %@], [Running in HH2 daemon: %@]", buf, 0x34u);

    id v10 = v18;
    char v7 = v17;
    char v9 = v26;
  }
  if ((v9 & 1) == 0)
  {
    if ((v7 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_11:
    char v20 = 0;
    goto LABEL_14;
  }
  if ((v7 & 1) == 0)
  {
LABEL_13:
    char v20 = [(HMDHome *)v11 isUpdatedToHH2];
    goto LABEL_14;
  }
  char v20 = 1;
LABEL_14:

  return v20;
}

- (void)_handleEnableNotifications:(id)a3
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  char v63 = 0;
  uint64_t v6 = [v4 BOOLForKey:@"kCharacteristicNotificationEnableKey" keyPresent:&v63];
  char v62 = 0;
  uint64_t v7 = *MEMORY[0x1E4F2D210];
  uint64_t v8 = [v4 BOOLForKey:*MEMORY[0x1E4F2D210] keyPresent:&v62];
  if (v63 && v62)
  {
    uint64_t v9 = v8;
    id v10 = [v4 clientIdentifier];
    uint64_t v11 = (void *)MEMORY[0x1D9452090]();
    id v12 = self;
    uint64_t v13 = HMFGetOSLogHandle();
    id v14 = v13;
    if (!v10)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        long long v40 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        uint64_t v67 = (uint64_t)v40;
        _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_ERROR, "%{public}@Unable to look up the client identifier from request to enable home notifications", buf, 0xCu);
      }
      id v10 = [v4 responseHandler];

      if (v10)
      {
        __int16 v41 = [v4 responseHandler];
        uint64_t v42 = [MEMORY[0x1E4F28C58] hmErrorWithCode:52];
        ((void (**)(void, void *, void))v41)[2](v41, v42, 0);

        id v10 = 0;
      }
      goto LABEL_37;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      id v15 = HMFGetLogIdentifier();
      id v16 = HMFBooleanToString();
      *(_DWORD *)buf = 138543874;
      uint64_t v67 = (uint64_t)v15;
      __int16 v68 = 2112;
      __int16 v69 = v10;
      __int16 v70 = 2112;
      __int16 v71 = v16;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Handling Enable Notifications from ClientIdentifier: %@, setting: %@", buf, 0x20u);
    }
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __38__HMDHome__handleEnableNotifications___block_invoke;
    aBlock[3] = &unk_1E6A071F0;
    void aBlock[4] = v12;
    id v61 = v4;
    char v17 = _Block_copy(aBlock);
    char v18 = (void (**)(void, void))v17;
    if (!v6)
    {
      [(HMDHome *)v12 addNotificationDeregistrationForClientIdentifier:v10];
      [(HMDHome *)v12 _startHomeNotificationDeregistrationTimer];
      char v43 = 0;
      BOOL v21 = 0;
LABEL_33:
      long long v54 = [MEMORY[0x1E4F65520] sharedPowerLogger];
      [v54 reportCharacteristicNotificationRegistrationEvent:v6 clientIdentifier:v10];

      if (!v21 && (v43 & 1) == 0) {
        v18[2](v18, 0);
      }

      goto LABEL_37;
    }
    id v58 = (void (**)(void, void))v17;
    [(HMDHome *)v12 removeNotificationDeregistrationForClientIdentifier:v10];
    uint64_t v19 = [(HMDHome *)v12 notificationRegistrations];
    uint64_t v20 = [v19 count];
    BOOL v21 = v20 == 0;

    __int16 v22 = [(HMDHome *)v12 notificationRegistrationsForAppleMediaAccessories];
    if ([v22 count]) {
      int v23 = 0;
    }
    else {
      int v23 = v9;
    }

    uint64_t v24 = [(HMDHome *)v12 addNotificationRegistrationForClientIdentifier:v10 includesAppleMediaAccessories:v9];
    int v59 = v23;
    if (v23 == 1)
    {
      id v25 = (void *)MEMORY[0x1D9452090](v24);
      char v26 = v12;
      BOOL v27 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        uint64_t v28 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        uint64_t v67 = v28;
        long long v55 = v25;
        __int16 v29 = (void *)v28;
        _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_INFO, "%{public}@Modifying direct Apple Media notification registrations with resident due to HomeKit client request", buf, 0xCu);

        id v25 = v55;
      }

      -[HMDHome _subscribeForHomeAppleMediaNotificationsOnDirectTransports:](v26, 1);
      BOOL v21 = v20 == 0;
    }
    if (v20)
    {
      BOOL v30 = [(HMDHome *)v12 homeManager];
      __int16 v31 = [v30 chipDataSource];
      [v31 updateNotificationsEnabled:1 forHome:v12 keepAliveOnly:0];

      char v18 = v58;
      if (!v59) {
        goto LABEL_30;
      }
    }
    else
    {
      BOOL v57 = v21;
      uint64_t v44 = (void *)MEMORY[0x1D9452090]();
      id v45 = v12;
      uint64_t v46 = HMFGetOSLogHandle();
      char v18 = v58;
      if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        uint64_t v47 = v56 = v44;
        *(_DWORD *)buf = 138543362;
        uint64_t v67 = (uint64_t)v47;
        _os_log_impl(&dword_1D49D5000, v46, OS_LOG_TYPE_INFO, "%{public}@Modifying notification registrations with resident due to HomeKit client request", buf, 0xCu);

        uint64_t v44 = v56;
      }

      [(HMDHome *)v45 _subscribeForHomeNotificationsFromRemoteGateway:1];
      -[HMDHome _subscribeForHomeNotificationsOnDirectTransports:](v45, 1);
      uint64_t v48 = [MEMORY[0x1E4F1C9C8] date];
      [(HMDHome *)v45 setNotificationsUpdatedTime:v48];

      id v49 = [(HMDHome *)v45 homeManager];
      uint64_t v50 = [v49 chipDataSource];
      [v50 updateNotificationsEnabled:1 forHome:v45 keepAliveOnly:0];

      BOOL v21 = v57;
    }
    v65[0] = MEMORY[0x1E4F1CC38];
    v64[0] = @"kCharacteristicNotificationEnableKey";
    v64[1] = @"kCharacteristicNotificationEnableTime";
    id v51 = [(HMDHome *)v12 notificationsUpdatedTime];
    v65[1] = v51;
    v64[2] = v7;
    long long v52 = [NSNumber numberWithBool:v9];
    v65[2] = v52;
    long long v53 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v65 forKeys:v64 count:3];

    ((void (**)(void, void *))v18)[2](v18, v53);
LABEL_30:
    logAndPostNotification(@"HMDHomeDidEnableCharacteristicNotifyEventNotification", v12, 0);
    [(HMDHome *)v12 _refreshCharacteristicValuesOnHomeNotificationEnable];
    if (v9) {
      [(HMDHome *)v12 _refreshMediaProfilesOnHomeNotificationEnable];
    }
    char v43 = v59;
    goto LABEL_33;
  }
  id v32 = (void *)MEMORY[0x1D9452090](v8);
  __int16 v33 = self;
  __int16 v34 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    __int16 v35 = HMFGetLogIdentifier();
    __int16 v36 = HMFBooleanToString();
    uint64_t v37 = HMFBooleanToString();
    *(_DWORD *)buf = 138543874;
    uint64_t v67 = (uint64_t)v35;
    __int16 v68 = 2112;
    __int16 v69 = v36;
    __int16 v70 = 2112;
    __int16 v71 = v37;
    _os_log_impl(&dword_1D49D5000, v34, OS_LOG_TYPE_ERROR, "%{public}@Client request missing required key (hasHAPKey: %@, hasAppleMediaKey: %@) to enable home notifications", buf, 0x20u);
  }
  uint64_t v38 = [v4 responseHandler];

  if (v38)
  {
    id v10 = [v4 responseHandler];
    __int16 v39 = [MEMORY[0x1E4F28C58] hmErrorWithCode:27];
    ((void (**)(void, void *, void))v10)[2](v10, v39, 0);

LABEL_37:
  }
}

void __38__HMDHome__handleEnableNotifications___block_invoke(uint64_t a1, void *a2)
{
  int v3 = (objc_class *)MEMORY[0x1E4F65488];
  id v4 = a2;
  id v5 = [v3 alloc];
  uint64_t v6 = [*(id *)(a1 + 32) uuid];
  uint64_t v7 = (void *)[v5 initWithTarget:v6];

  id v8 = objc_alloc(MEMORY[0x1E4F654B0]);
  uint64_t v9 = (void *)[v8 initWithName:*MEMORY[0x1E4F2ECB0] destination:v7 payload:v4];

  id v10 = [*(id *)(a1 + 40) identifier];
  [v9 setIdentifier:v10];

  uint64_t v11 = [[HMDHomeManagerXPCMessageSendPolicy alloc] initWithEntitlements:4 options:1];
  [v9 setSendPolicy:v11];
  id v12 = [*(id *)(a1 + 32) msgDispatcher];
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = __38__HMDHome__handleEnableNotifications___block_invoke_2;
  v13[3] = &unk_1E6A197F0;
  id v14 = *(id *)(a1 + 40);
  [v12 sendMessage:v9 completionHandler:v13];
}

- (void)setNotificationsUpdatedTime:(id)a3
{
}

- (id)notificationRegistrationsForAppleMediaAccessories
{
  os_unfair_recursive_lock_lock_with_options();
  int v3 = (void *)[(NSMutableSet *)self->_notificationRegistrationsForAppleMediaAccessories copy];
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (HMFMessageDispatcher)msgDispatcher
{
  return self->_msgDispatcher;
}

- (void)_subscribeForHomeNotificationsOnDirectTransports:(void *)a1
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v2 = a2;
    id v4 = [a1 _characteristicNotificationPayloadsOnDirectTransports:a2];
    id v5 = [v4 objectAtIndex:0];
    uint64_t v6 = [v4 objectAtIndex:1];
    if ([v5 count] || objc_msgSend(v6, "count"))
    {
      if ([v5 count])
      {
        uint64_t v7 = (void *)MEMORY[0x1D9452090]();
        id v8 = a1;
        uint64_t v9 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          id v10 = HMFGetLogIdentifier();
          uint64_t v11 = [v5 shortDescription];
          *(_DWORD *)buf = 138543618;
          id v58 = v10;
          __int16 v59 = 2112;
          id v60 = v11;
          _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Deregistering notifications %@ with direct transports", buf, 0x16u);
        }
      }
      int v46 = v2;
      id v45 = v6;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      uint64_t v44 = v5;
      id v12 = v5;
      uint64_t v13 = [v12 countByEnumeratingWithState:&v51 objects:v56 count:16];
      if (v13)
      {
        uint64_t v14 = v13;
        uint64_t v15 = *(void *)v52;
        do
        {
          for (uint64_t i = 0; i != v14; ++i)
          {
            if (*(void *)v52 != v15) {
              objc_enumerationMutation(v12);
            }
            uint64_t v17 = *(void *)(*((void *)&v51 + 1) + 8 * i);
            char v18 = objc_msgSend(v12, "objectForKey:", v17, v44);
            uint64_t v19 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v17];
            uint64_t v20 = [a1 accessoryWithUUID:v19];

            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              BOOL v21 = v20;
            }
            else {
              BOOL v21 = 0;
            }
            id v22 = v21;

            [v22 enableNotification:0 forCharacteristics:v18 message:0 clientIdentifier:@"com.apple.HomeKitDaemon.homeNotifications"];
          }
          uint64_t v14 = [v12 countByEnumeratingWithState:&v51 objects:v56 count:16];
        }
        while (v14);
      }

      if ([v45 count])
      {
        int v23 = (void *)MEMORY[0x1D9452090]();
        id v24 = a1;
        id v25 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          char v26 = HMFGetLogIdentifier();
          BOOL v27 = [v45 shortDescription];
          *(_DWORD *)buf = 138543618;
          id v58 = v26;
          __int16 v59 = 2112;
          id v60 = v27;
          _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_DEBUG, "%{public}@Registering notifications %@ with direct transports", buf, 0x16u);
        }
      }
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      id v28 = v45;
      uint64_t v29 = [v28 countByEnumeratingWithState:&v47 objects:v55 count:16];
      id v5 = v44;
      if (v29)
      {
        uint64_t v30 = v29;
        uint64_t v31 = *(void *)v48;
        do
        {
          for (uint64_t j = 0; j != v30; ++j)
          {
            if (*(void *)v48 != v31) {
              objc_enumerationMutation(v28);
            }
            uint64_t v33 = *(void *)(*((void *)&v47 + 1) + 8 * j);
            __int16 v34 = objc_msgSend(v28, "objectForKey:", v33, v44);
            __int16 v35 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v33];
            __int16 v36 = [a1 accessoryWithUUID:v35];

            id v37 = v36;
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              uint64_t v38 = v37;
            }
            else {
              uint64_t v38 = 0;
            }
            id v39 = v38;

            if (v39)
            {
              if (v46) {
                [v39 enableNotification:1 forCharacteristics:v34 message:0 clientIdentifier:@"com.apple.HomeKitDaemon.homeNotifications"];
              }
              else {
                [v39 updateNotificationEnabled:0 forCharacteristics:v34 onBehalfOf:@"com.apple.HomeKitDaemon.homeNotifications"];
              }
              [v39 checkHAPSessionRestore];
            }
          }
          uint64_t v30 = [v28 countByEnumeratingWithState:&v47 objects:v55 count:16];
        }
        while (v30);
      }

      uint64_t v6 = v45;
    }
    else
    {
      long long v40 = (void *)MEMORY[0x1D9452090]();
      id v41 = a1;
      uint64_t v42 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        char v43 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v58 = v43;
        _os_log_impl(&dword_1D49D5000, v42, OS_LOG_TYPE_INFO, "%{public}@Not registering notifications on direct transports since we have no modifications", buf, 0xCu);
      }
    }
  }
}

- (id)_readRequestTuplesFromMessage:(id)a3 outUnhandledRequests:(id *)a4
{
  id v32 = a4;
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  id v33 = a3;
  id v4 = [v33 dictionaryForKey:@"kAccessoriesListKey"];
  id v5 = [MEMORY[0x1E4F1CA48] array];
  id v47 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  id obj = v4;
  uint64_t v36 = [obj countByEnumeratingWithState:&v58 objects:v64 count:16];
  if (v36)
  {
    uint64_t v34 = *(void *)v59;
    int v46 = v5;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v59 != v34) {
          objc_enumerationMutation(obj);
        }
        uint64_t v38 = v6;
        uint64_t v7 = *(void *)(*((void *)&v58 + 1) + 8 * v6);
        id v8 = objc_msgSend(obj, "hmf_dictionaryForKey:", v7, v32);
        uint64_t v48 = v7;
        uint64_t v9 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v7];
        id v10 = [(HMDHome *)self accessoryWithUUID:v9];

        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v11 = v10;
        }
        else {
          uint64_t v11 = 0;
        }
        id v40 = v11;

        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        id v12 = v8;
        id v5 = v46;
        uint64_t v42 = [v12 countByEnumeratingWithState:&v54 objects:v63 count:16];
        if (v42)
        {
          uint64_t v41 = *(void *)v55;
          id v39 = v12;
          do
          {
            for (uint64_t i = 0; i != v42; ++i)
            {
              if (*(void *)v55 != v41) {
                objc_enumerationMutation(v12);
              }
              uint64_t v14 = *(void *)(*((void *)&v54 + 1) + 8 * i);
              uint64_t v15 = objc_msgSend(v12, "hmf_arrayForKey:", v14);
              id v16 = objc_msgSend(v15, "na_map:", &__block_literal_global_1572);

              uint64_t v17 = HAPInstanceIDFromValue();
              if (v17)
              {
                uint64_t v45 = i;
                char v43 = v17;
                char v18 = [v40 findService:v17];
                long long v50 = 0u;
                long long v51 = 0u;
                long long v52 = 0u;
                long long v53 = 0u;
                uint64_t v44 = v16;
                id v19 = v16;
                uint64_t v20 = [v19 countByEnumeratingWithState:&v50 objects:v62 count:16];
                if (v20)
                {
                  uint64_t v21 = v20;
                  uint64_t v22 = *(void *)v51;
                  do
                  {
                    for (uint64_t j = 0; j != v21; ++j)
                    {
                      if (*(void *)v51 != v22) {
                        objc_enumerationMutation(v19);
                      }
                      uint64_t v24 = *(void *)(*((void *)&v50 + 1) + 8 * j);
                      id v25 = [v18 findCharacteristic:v24];
                      if (v25)
                      {
                        [v5 addObject:v25];
                      }
                      else
                      {
                        objc_msgSend(v47, "hmf_mutableDictionaryForKey:", v48);
                        id v26 = (id)objc_claimAutoreleasedReturnValue();
                        if (!v26)
                        {
                          id v26 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
                          [v47 setObject:v26 forKeyedSubscript:v48];
                        }
                        objc_msgSend(v26, "hmf_mutableArrayForKey:", v14);
                        id v27 = (id)objc_claimAutoreleasedReturnValue();
                        if (!v27)
                        {
                          id v27 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                          [v26 setObject:v27 forKeyedSubscript:v14];
                        }
                        [v27 addObject:v24];

                        id v5 = v46;
                      }
                    }
                    uint64_t v21 = [v19 countByEnumeratingWithState:&v50 objects:v62 count:16];
                  }
                  while (v21);
                }

                id v12 = v39;
                id v16 = v44;
                uint64_t i = v45;
                uint64_t v17 = v43;
              }
            }
            uint64_t v42 = [v12 countByEnumeratingWithState:&v54 objects:v63 count:16];
          }
          while (v42);
        }

        uint64_t v6 = v38 + 1;
      }
      while (v38 + 1 != v36);
      uint64_t v36 = [obj countByEnumeratingWithState:&v58 objects:v64 count:16];
    }
    while (v36);
  }

  if (v32) {
    id *v32 = (id)[v47 copy];
  }
  id v49 = 0;
  BOOL v28 = -[HMDHome _isReadRequestAllowForCharacteristics:message:error:](self, "_isReadRequestAllowForCharacteristics:message:error:", v5, v33, &v49, v32);
  id v29 = v49;
  if (v28)
  {
    uint64_t v30 = objc_msgSend(v5, "na_map:", &__block_literal_global_1575);
  }
  else
  {
    [v33 respondWithError:v29];
    uint64_t v30 = 0;
  }

  return v30;
}

- (BOOL)_isReadRequestAllowForCharacteristics:(id)a3 message:(id)a4 error:(id *)a5
{
  id v8 = a4;
  if ([(HMDHome *)self requiresUnlockToAccessCharacteristics:a3 withMessage:v8]&& ![(HMDHome *)self isAccessAllowedForCharacteristicsWithMessage:v8])
  {
    if (a5)
    {
      HMDSecureAccessErrorCodeForMessage(v8, [v8 source]);
      BOOL v9 = 0;
      *a5 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      BOOL v9 = 0;
    }
  }
  else
  {
    BOOL v9 = 1;
  }

  return v9;
}

- (BOOL)requiresUnlockToAccessCharacteristics:(id)a3 withMessage:(id)a4
{
  id v6 = a3;
  if ([(HMDHome *)self applyDeviceLockStatus:a4])
  {
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __61__HMDHome_requiresUnlockToAccessCharacteristics_withMessage___block_invoke;
    void v9[3] = &unk_1E6A17BB8;
    v9[4] = self;
    char v7 = objc_msgSend(v6, "na_any:", v9);
  }
  else
  {
    char v7 = 0;
  }

  return v7;
}

- (BOOL)applyDeviceLockStatus:(id)a3
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([v4 isRemote])
  {
    id v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = self;
    char v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = HMFGetLogIdentifier();
      BOOL v9 = [v4 shortDescription];
      int v17 = 138543618;
      char v18 = v8;
      __int16 v19 = 2112;
      uint64_t v20 = v9;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@%@ is from remote source; ignoring this device's lock status",
        (uint8_t *)&v17,
        0x16u);
    }
    char v10 = 0;
  }
  else if ([v4 BOOLForKey:@"kApplyDeviceUnlockKey"])
  {
    uint64_t v11 = (void *)MEMORY[0x1D9452090]();
    id v12 = self;
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      int v17 = 138543362;
      char v18 = v14;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Treating device as always locked.", (uint8_t *)&v17, 0xCu);
    }
    char v10 = 1;
  }
  else
  {
    uint64_t v15 = [(HMDHome *)self deviceLockStateDataSource];
    char v10 = [v15 isLocked];
  }
  return v10;
}

- (HMDDeviceLockStateDataSource)deviceLockStateDataSource
{
  return (HMDDeviceLockStateDataSource *)objc_getProperty(self, a2, 880, 1);
}

- (void)_subscribeForHomeNotificationsFromRemoteGateway:(BOOL)a3
{
  BOOL v3 = a3;
  id v7 = [(HMDHome *)self accessories];
  if (-[HMDHome supportsUnifiedMediaNotificationsOnResidents](self))
  {
    id v5 = v7;
  }
  else
  {
    uint64_t v6 = objc_msgSend(v7, "na_filter:", &__block_literal_global_805);

    id v5 = (id)v6;
  }
  id v8 = v5;
  [(HMDHome *)self _subscribeForHomeNotificationsFromRemoteGateway:v3 accessories:v5];
}

- (void)_subscribeForHomeNotificationsFromRemoteGateway:(BOOL)a3 accessories:(id)a4
{
  BOOL v4 = a3;
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  id v6 = a4;
  id v7 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v7);

  id v47 = 0;
  id v48 = 0;
  id v45 = 0;
  id v46 = 0;
  id v44 = 0;
  -[HMDHome _notificationPayloadsForRemoteGateway:accessories:enableCharacteristicNotificationPayload:characteristicNotificationThresholdsPayload:disableCharacteristicNotificationPayload:enableMediaNotificationPayload:disableMediaNotificationPayload:](self, v4, v6, &v48, &v47, &v46, &v45, &v44);
  id v8 = v48;
  id v9 = v47;
  id v10 = v46;
  id v11 = v45;
  id v12 = v44;
  if ([v10 count]
    || [v8 count]
    || [v12 count]
    || [v11 count])
  {
    if ([v8 count] || objc_msgSend(v11, "count"))
    {
      uint64_t v13 = (void *)MEMORY[0x1D9452090]();
      uint64_t v14 = self;
      uint64_t v15 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v37 = v13;
        v17 = id v16 = v11;
        HMFBooleanToString();
        char v18 = v38 = v12;
        [v8 shortDescription];
        id v39 = v8;
        id v41 = v10;
        v20 = id v19 = v6;
        [v16 shortDescription];
        v22 = id v21 = v9;
        *(_DWORD *)buf = 138544130;
        long long v50 = v17;
        __int16 v51 = 2112;
        long long v52 = v18;
        __int16 v53 = 2112;
        long long v54 = v20;
        __int16 v55 = 2112;
        long long v56 = v22;
        _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@Registering notifications with remote gateway when notificationEnabled: %@, characteristics: %@, properties: %@", buf, 0x2Au);

        id v9 = v21;
        id v6 = v19;
        id v8 = v39;
        id v10 = v41;

        id v12 = v38;
        id v11 = v16;
        uint64_t v13 = v37;
      }

      [(HMDHome *)v14 _modifyCharacteristicNotificationsOnResident:v8 mediaNotifications:v11 actionSetNotificationPayload:MEMORY[0x1E4F1CBF0] enableNotification:1];
    }
    if (objc_msgSend(v10, "count", v37) || objc_msgSend(v12, "count"))
    {
      int v23 = (void *)MEMORY[0x1D9452090]();
      uint64_t v24 = self;
      id v25 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v26 = id v42 = v11;
        HMFBooleanToString();
        v27 = id v43 = v6;
        [v10 shortDescription];
        v28 = id v40 = v9;
        [v12 shortDescription];
        uint64_t v30 = v29 = v12;
        *(_DWORD *)buf = 138544130;
        long long v50 = v26;
        __int16 v51 = 2112;
        long long v52 = v27;
        __int16 v53 = 2112;
        long long v54 = v28;
        __int16 v55 = 2112;
        long long v56 = v30;
        _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_INFO, "%{public}@De-registering notifications with remote gateway when notificationEnabled: %@, characteristics: %@, properties: %@", buf, 0x2Au);

        id v12 = v29;
        id v9 = v40;

        id v6 = v43;
        id v11 = v42;
      }

      [(HMDHome *)v24 _modifyCharacteristicNotificationsOnResident:v10 mediaNotifications:v12 actionSetNotificationPayload:MEMORY[0x1E4F1CBF0] enableNotification:0];
    }
  }
  else
  {
    id v31 = v12;
    id v32 = v11;
    id v33 = (void *)MEMORY[0x1D9452090]();
    uint64_t v34 = self;
    __int16 v35 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
    {
      uint64_t v36 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v50 = v36;
      _os_log_impl(&dword_1D49D5000, v35, OS_LOG_TYPE_INFO, "%{public}@Not registering notifications with remote gateway since we have no modifications", buf, 0xCu);
    }
    id v11 = v32;
    id v12 = v31;
  }
}

- (void)_modifyCharacteristicNotificationsOnResident:(id)a3 mediaNotifications:(id)a4 actionSetNotificationPayload:(id)a5 enableNotification:(BOOL)a6
{
  BOOL v41 = a6;
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  id v39 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v11);

  id v42 = self;
  id v12 = [(HMDHome *)self primaryResident];
  if (isWatch())
  {
    uint64_t v13 = [(HMDHome *)v42 homeManager];
    int v14 = [v13 companionReachable];

    if (v14)
    {

      id v12 = 0;
LABEL_11:
      int v17 = v39;
      goto LABEL_12;
    }
  }
  if (!v12) {
    goto LABEL_11;
  }
  uint64_t v15 = [v12 device];
  char v16 = [v15 isCurrentDevice];

  int v17 = v39;
  if (v16)
  {
LABEL_12:
    uint64_t v24 = [v12 device];
    int v25 = [v24 isCurrentDevice];

    if (v25)
    {
      id v37 = v12;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      id obj = [(HMDHome *)v42 residentEnabledDevices];
      uint64_t v26 = [obj countByEnumeratingWithState:&v43 objects:v47 count:16];
      if (v26)
      {
        uint64_t v27 = v26;
        uint64_t v28 = *(void *)v44;
        id v29 = "Disabling";
        if (v41) {
          id v29 = "Enabling";
        }
        id v38 = v29;
        do
        {
          for (uint64_t i = 0; i != v27; ++i)
          {
            id v31 = v9;
            if (*(void *)v44 != v28) {
              objc_enumerationMutation(obj);
            }
            id v32 = *(void **)(*((void *)&v43 + 1) + 8 * i);
            id v33 = (void *)MEMORY[0x1D9452090]();
            uint64_t v34 = v42;
            __int16 v35 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
            {
              uint64_t v36 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543874;
              id v49 = v36;
              __int16 v50 = 2080;
              __int16 v51 = v38;
              __int16 v52 = 2112;
              __int16 v53 = v32;
              _os_log_impl(&dword_1D49D5000, v35, OS_LOG_TYPE_INFO, "%{public}@%s notifications with secondary resident %@", buf, 0x20u);

              int v17 = v39;
            }

            id v9 = v31;
            [(HMDHome *)v34 _modifyCharacteristicNotifications:v17 mediaNotifications:v31 actionSetNotificationPayload:v10 enableNotification:v41 withDevice:v32 completion:0];
          }
          uint64_t v27 = [obj countByEnumeratingWithState:&v43 objects:v47 count:16];
        }
        while (v27);
      }

      id v12 = v37;
    }
    [(HMDHome *)v42 _modifyCharacteristicNotificationsOnResidentUsers:v17 mediaNotifications:v9 actionSetNotificationPayload:v10 enableNotification:v41];
    goto LABEL_26;
  }
  char v18 = [v12 device];
  id v19 = (void *)MEMORY[0x1D9452090]();
  uint64_t v20 = v42;
  id v21 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    uint64_t v22 = HMFGetLogIdentifier();
    int v23 = "Disabling";
    *(_DWORD *)buf = 138543874;
    id v49 = v22;
    if (v41) {
      int v23 = "Enabling";
    }
    __int16 v50 = 2080;
    __int16 v51 = v23;
    __int16 v52 = 2112;
    __int16 v53 = v18;
    _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@%s notifications with resident %@", buf, 0x20u);
  }
  [(HMDHome *)v20 _modifyCharacteristicNotifications:v39 mediaNotifications:v9 actionSetNotificationPayload:v10 enableNotification:v41 withDevice:v18 completion:0];

LABEL_26:
}

- (void)_getRunTimeStateUpdateWithOptions:(unint64_t)a3 includeMediaAccessorySessionState:(BOOL)a4 includeResidentDeviceState:(BOOL)a5 completion:(id)a6
{
  BOOL v6 = a5;
  BOOL v92 = a4;
  unsigned int v7 = a3;
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  id v9 = a6;
  id v10 = v9;
  if (v9)
  {
    BOOL v74 = v6;
    long long v75 = (void (**)(void, void *))v9;
    id v11 = [(HMDHome *)self accessories];
    id v12 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(v11, "count"));
    int v77 = [MEMORY[0x1E4F28E10] strongToStrongObjectsMapTable];
    long long v76 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v11, "count"));
    char v78 = -[HMDHome supportsUnifiedMediaNotificationsOnResidents](self);
    long long v102 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    id obj = v11;
    long long v79 = self;
    BOOL v85 = v12;
    uint64_t v91 = [obj countByEnumeratingWithState:&v102 objects:v110 count:16];
    if (v91)
    {
      uint64_t v90 = v7 & 0x201;
      uint64_t v89 = v7 & 0x50;
      uint64_t v88 = *(void *)v103;
      uint64_t v84 = *MEMORY[0x1E4F2D9B8];
      uint64_t v83 = *MEMORY[0x1E4F2DA10];
      uint64_t v82 = *MEMORY[0x1E4F2D9E0];
      uint64_t v81 = *MEMORY[0x1E4F2DA20];
      uint64_t v80 = *MEMORY[0x1E4F2D9A0];
      unsigned int v87 = v7;
      do
      {
        for (uint64_t i = 0; i != v91; ++i)
        {
          if (*(void *)v103 != v88) {
            objc_enumerationMutation(obj);
          }
          id v14 = *(id *)(*((void *)&v102 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            uint64_t v15 = v14;
          }
          else {
            uint64_t v15 = 0;
          }
          id v16 = v15;

          id v17 = v16;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            char v18 = v17;
          }
          else {
            char v18 = 0;
          }
          id v19 = v18;

          id v20 = v17;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v21 = v20;
          }
          else {
            id v21 = 0;
          }
          id v22 = v21;

          id v23 = v14;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = 0;
          }
          id v25 = v24;

          if (v20) {
            BOOL v26 = v92;
          }
          else {
            BOOL v26 = 0;
          }
          if (v89) {
            BOOL v27 = v22 == 0;
          }
          else {
            BOOL v27 = 1;
          }
          char v28 = !v27;
          uint64_t v93 = v19;
          if (v90) {
            BOOL v29 = v25 == 0;
          }
          else {
            BOOL v29 = 1;
          }
          char v30 = !v29;
          if (v26
            || (v28 & 1) != 0
            || ((v19 != 0) & (v7 >> 8)) != 0
            || (v30 & 1) != 0
            || (v7 & 0x400) != 0 && [v25 hasTelevisionService])
          {
            id v31 = [v23 runtimeState];
            id v32 = (void *)[v31 mutableCopy];

            if (v20 && v92)
            {
              id v33 = [v20 mediaProfile];
              uint64_t v34 = v33;
              if (v33)
              {
                __int16 v35 = [v33 mediaSession];
                uint64_t v36 = [v35 state];
                if (v36
                  || ([v20 identifier],
                      id v37 = objc_claimAutoreleasedReturnValue(),
                      [(HMDHome *)v79 mediaSessionStateWithIdentifier:v37],
                      uint64_t v36 = objc_claimAutoreleasedReturnValue(),
                      v37,
                      v36))
                {
                  id v38 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v36, "playbackState"));
                  [v32 setObject:v38 forKeyedSubscript:v84];

                  id v39 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v36, "shuffleState"));
                  [v32 setObject:v39 forKeyedSubscript:v83];

                  id v40 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v36, "repeatState"));
                  [v32 setObject:v40 forKeyedSubscript:v82];

                  BOOL v41 = [v36 volume];
                  [v32 setObject:v41 forKeyedSubscript:v81];

                  id v42 = [v36 mediaUniqueIdentifier];
                  [v32 setObject:v42 forKeyedSubscript:v80];
                }
                if (!v35)
                {
                  long long v43 = [v22 device];
                  if (v43) {
                    char v44 = v78;
                  }
                  else {
                    char v44 = 1;
                  }
                  if (v44)
                  {
                    [v76 addObject:v34];
                  }
                  else
                  {
                    long long v45 = [v77 objectForKey:v43];
                    if (!v45)
                    {
                      long long v45 = [MEMORY[0x1E4F1CA48] array];
                      [v77 setObject:v45 forKey:v43];
                    }
                    [v45 addObject:v34];
                  }
                }

                id v12 = v85;
              }
            }
            long long v46 = (void *)[v32 copy];
            id v47 = [v23 uuid];
            id v48 = [v47 UUIDString];
            [v12 setObject:v46 forKeyedSubscript:v48];

            unsigned int v7 = v87;
          }
        }
        uint64_t v91 = [obj countByEnumeratingWithState:&v102 objects:v110 count:16];
      }
      while (v91);
    }

    long long v108 = @"kAccessoriesListKey";
    id v49 = (void *)[v12 copy];
    long long v109 = v49;
    __int16 v50 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v109 forKeys:&v108 count:1];
    __int16 v51 = (void *)[v50 mutableCopy];

    id v10 = v75;
    __int16 v52 = v79;
    if (v74)
    {
      __int16 v53 = [(HMDHome *)v79 residentDeviceManager];
      uint64_t v54 = [v53 residentDevices];

      __int16 v55 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(v54, "count"));
      long long v98 = 0u;
      long long v99 = 0u;
      long long v100 = 0u;
      long long v101 = 0u;
      id v56 = v54;
      uint64_t v57 = [v56 countByEnumeratingWithState:&v98 objects:v107 count:16];
      if (v57)
      {
        uint64_t v58 = v57;
        uint64_t v59 = *(void *)v99;
        do
        {
          for (uint64_t j = 0; j != v58; ++j)
          {
            if (*(void *)v99 != v59) {
              objc_enumerationMutation(v56);
            }
            long long v61 = *(void **)(*((void *)&v98 + 1) + 8 * j);
            char v62 = [v61 identifier];
            char v63 = [v62 UUIDString];

            long long v64 = [v61 runtimeState];
            [v55 setObject:v64 forKey:v63];
          }
          uint64_t v58 = [v56 countByEnumeratingWithState:&v98 objects:v107 count:16];
        }
        while (v58);
      }

      uint64_t v65 = (void *)[v55 copy];
      [v51 setObject:v65 forKey:*MEMORY[0x1E4F2D6B8]];

      __int16 v52 = v79;
      id v12 = v85;
    }
    uint64_t v66 = (void *)[v51 copy];
    v75[2](v75, v66);

    if ([v76 count]) {
      -[HMDHome _readProfileState:viaDevice:](v52, v76, 0);
    }
    long long v96 = 0u;
    long long v97 = 0u;
    long long v94 = 0u;
    long long v95 = 0u;
    id v67 = v77;
    uint64_t v68 = [v67 countByEnumeratingWithState:&v94 objects:v106 count:16];
    if (v68)
    {
      uint64_t v69 = v68;
      uint64_t v70 = *(void *)v95;
      do
      {
        for (uint64_t k = 0; k != v69; ++k)
        {
          if (*(void *)v95 != v70) {
            objc_enumerationMutation(v67);
          }
          uint64_t v72 = *(void **)(*((void *)&v94 + 1) + 8 * k);
          uint64_t v73 = [v67 objectForKey:v72];
          if ([v73 count]) {
            -[HMDHome _readProfileState:viaDevice:](v52, v73, v72);
          }
        }
        uint64_t v69 = [v67 countByEnumeratingWithState:&v94 objects:v106 count:16];
      }
      while (v69);
    }
  }
}

- (uint64_t)supportsUnifiedMediaNotificationsOnResidents
{
  if (!a1) {
    return 0;
  }
  v1 = [a1 primaryResident];
  int v2 = [v1 device];
  if (v2)
  {
    BOOL v3 = [v1 capabilities];
    uint64_t v4 = [v3 supportsUnifiedMediaNotifications];
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

- (void)_modifyCharacteristicNotificationsOnResidentUsers:(id)a3 mediaNotifications:(id)a4 actionSetNotificationPayload:(id)a5 enableNotification:(BOOL)a6
{
  BOOL v6 = a6;
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v33 = a4;
  id v32 = a5;
  id v11 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v11);

  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id v12 = [(HMDHome *)self _residentUsers];
  uint64_t v13 = [v12 countByEnumeratingWithState:&v34 objects:v44 count:16];
  if (v13)
  {
    uint64_t v15 = v13;
    uint64_t v16 = *(void *)v35;
    if (v6) {
      id v17 = "Enabling";
    }
    else {
      id v17 = "Disabling";
    }
    BOOL v29 = v17;
    *(void *)&long long v14 = 138543874;
    long long v28 = v14;
    char v30 = self;
    id v31 = v12;
    do
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        if (*(void *)v35 != v16) {
          objc_enumerationMutation(v12);
        }
        id v19 = *(void **)(*((void *)&v34 + 1) + 8 * i);
        if (objc_msgSend(v19, "configurationState", v28) == 2)
        {
          id v20 = [v19 userID];
          id v21 = +[HMDDevice deviceWithDestination:v20];

          if (v21 && ([v21 isCurrentDevice] & 1) == 0)
          {
            id v22 = (void *)MEMORY[0x1D9452090]();
            id v23 = self;
            uint64_t v24 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              BOOL v25 = v6;
              BOOL v27 = v26 = v10;
              *(_DWORD *)buf = v28;
              id v39 = v27;
              __int16 v40 = 2080;
              BOOL v41 = v29;
              __int16 v42 = 2112;
              long long v43 = v21;
              _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_INFO, "%{public}@%s notifications with remote gateway %@", buf, 0x20u);

              id v10 = v26;
              BOOL v6 = v25;
              self = v30;
            }

            [(HMDHome *)v23 _modifyCharacteristicNotifications:v10 mediaNotifications:v33 actionSetNotificationPayload:v32 enableNotification:v6 withDevice:v21 completion:0];
            id v12 = v31;
          }
        }
      }
      uint64_t v15 = [v12 countByEnumeratingWithState:&v34 objects:v44 count:16];
    }
    while (v15);
  }
}

- (id)owner
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  p_owner = &self->_owner;
  owner = self->_owner;
  if (!owner)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    uint64_t v4 = [(HMDHome *)self users];
    uint64_t v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v12;
      while (2)
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v12 != v7) {
            objc_enumerationMutation(v4);
          }
          id v9 = *(void **)(*((void *)&v11 + 1) + 8 * i);
          if ([v9 privilege] == 3)
          {
            objc_storeStrong((id *)p_owner, v9);
            goto LABEL_12;
          }
        }
        uint64_t v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }
LABEL_12:

    owner = *p_owner;
  }
  return owner;
}

- (id)_residentUsers
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  BOOL v3 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v4 = [(HMDHome *)self users];
  uint64_t v5 = objc_msgSend(v3, "arrayWithCapacity:", objc_msgSend(v4, "count"));

  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v6 = [(HMDHome *)self users];
  uint64_t v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void *)(*((void *)&v13 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          [v5 addObject:v11];
        }
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v8);
  }

  return v5;
}

- (NSArray)users
{
  os_unfair_recursive_lock_lock_with_options();
  BOOL v3 = (void *)[(NSMutableArray *)self->_users copy];
  os_unfair_recursive_lock_unlock();
  return (NSArray *)v3;
}

- (void)_subscribeForHomeAppleMediaNotificationsOnDirectTransports:(void *)a1
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = [a1 workQueue];
    dispatch_assert_queue_V2(v4);

    if ((-[HMDHome supportsUnifiedMediaNotificationsOnResidents](a1) & 1) == 0)
    {
      uint64_t v5 = (void *)MEMORY[0x1D9452090]();
      id v6 = a1;
      uint64_t v7 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint64_t v8 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        long long v13 = v8;
        _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Registering for apple media notifications on direct transports since we have no primary resident that supports unified notifications", buf, 0xCu);
      }
      uint64_t v9 = [v6 accessories];
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 3221225472;
      v10[2] = __70__HMDHome__subscribeForHomeAppleMediaNotificationsOnDirectTransports___block_invoke;
      v10[3] = &unk_1E6A06830;
      void v10[4] = v6;
      char v11 = a2;
      objc_msgSend(v9, "na_each:", v10);
    }
  }
}

- (void)_refreshMediaProfilesOnHomeNotificationEnable
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  BOOL v25 = [MEMORY[0x1E4F28E10] strongToStrongObjectsMapTable];
  BOOL v3 = [MEMORY[0x1E4F1CA48] array];
  char v4 = -[HMDHome supportsUnifiedMediaNotificationsOnResidents](self);
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  uint64_t v24 = self;
  id obj = [(HMDHome *)self accessories];
  uint64_t v5 = [obj countByEnumeratingWithState:&v31 objects:v36 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v32;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v32 != v7) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(id *)(*((void *)&v31 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v10 = v9;
        }
        else {
          id v10 = 0;
        }
        id v11 = v10;

        if (v11)
        {
          long long v12 = [v11 device];
          if (v12) {
            char v13 = v4;
          }
          else {
            char v13 = 1;
          }
          if (v13)
          {
            uint64_t v14 = [v11 mediaProfile];
            [v3 addObject:v14];
          }
          else
          {
            long long v15 = v3;
            uint64_t v14 = [v25 objectForKey:v12];
            if (!v14)
            {
              uint64_t v14 = [MEMORY[0x1E4F1CA48] array];
              [v25 setObject:v14 forKey:v12];
            }
            long long v16 = [v11 mediaProfile];
            [v14 addObject:v16];

            BOOL v3 = v15;
          }
        }
      }
      uint64_t v6 = [obj countByEnumeratingWithState:&v31 objects:v36 count:16];
    }
    while (v6);
  }

  if ([v3 count]) {
    -[HMDHome _readProfileState:viaDevice:](v24, v3, 0);
  }
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v17 = v25;
  uint64_t v18 = [v17 countByEnumeratingWithState:&v27 objects:v35 count:16];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = *(void *)v28;
    do
    {
      for (uint64_t j = 0; j != v19; ++j)
      {
        if (*(void *)v28 != v20) {
          objc_enumerationMutation(v17);
        }
        id v22 = *(void **)(*((void *)&v27 + 1) + 8 * j);
        id v23 = [v17 objectForKey:v22];
        if ([v23 count]) {
          -[HMDHome _readProfileState:viaDevice:](v24, v23, v22);
        }
      }
      uint64_t v19 = [v17 countByEnumeratingWithState:&v27 objects:v35 count:16];
    }
    while (v19);
  }
}

- (HMMTRFabric)fabric
{
  return (HMMTRFabric *)objc_getProperty(self, a2, 1472, 1);
}

- (void)_notifyChangedCharacteristics:(id)a3 identifier:(id)a4 multiPartResponse:(BOOL)a5 moreMessagesInMultipart:(BOOL)a6 requestMessage:(id)a7 withCompletionHandler:(id)a8
{
  BOOL v10 = a6;
  BOOL v104 = a5;
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  id v13 = a3;
  id v14 = a4;
  id v15 = a7;
  aBlocuint64_t k = a8;
  long long v99 = v14;
  long long v101 = v13;
  BOOL v102 = v10;
  long long v16 = [[HMDCharacteristicResponseNotificationContext alloc] initWithRequestIdentifier:v14 responses:v13 pendingMultiPartResponses:v10];
  id v17 = (void *)MEMORY[0x1D9452090]();
  uint64_t v18 = self;
  uint64_t v19 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    uint64_t v114 = v20;
    __int16 v115 = 2112;
    uint64_t v116 = v16;
    _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_DEFAULT, "%{public}@Preparing characteristics changed notifications using context: %@", buf, 0x16u);
  }
  long long v106 = v18;

  id v21 = v15;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v22 = v21;
  }
  else {
    id v22 = 0;
  }
  id v23 = v22;

  uint64_t v24 = [v21 destination];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    BOOL v25 = v24;
  }
  else {
    BOOL v25 = 0;
  }
  id v26 = v25;

  LODWORD(v27) = 0;
  if ([v21 isRemote])
  {
    if (v26)
    {
      uint64_t v28 = [(HMDCharacteristicResponseNotificationContext *)v23 type];
      LODWORD(v27) = v28 != 2;
      if (v28 != 2 && v102) {
        LODWORD(v27) = [(HMDHome *)v18 isResidentFirstAccessoryCommunicationEnabled];
      }
    }
  }
  long long v100 = v23;
  if ([v21 isSingleReadWriteRequest])
  {
    long long v29 = [v101 firstObject];
    id v30 = [v29 characteristicUpdateDictionary];

    if (v27) {
      long long v31 = v30;
    }
    else {
      long long v31 = 0;
    }
    id v32 = v31;
    id v33 = 0;
    long long v105 = v30;
    if (!v27) {
      goto LABEL_38;
    }
  }
  else
  {
    long long v105 = [(HMDCharacteristicResponseNotificationContext *)v16 notificationPayloadByAccessoryUUID];
    if (!v27)
    {
      id v33 = 0;
      goto LABEL_38;
    }
    if (v104)
    {
      long long v34 = [NSNumber numberWithBool:v102];
      id v30 = +[HMDCharacteristicResponseNotificationContext responsePayloadForHome:v18 changedAccessories:v105 moreMessagesInMultipart:v34];
    }
    else
    {
      id v30 = +[HMDCharacteristicResponseNotificationContext responsePayloadForHome:v18 changedAccessories:v105 moreMessagesInMultipart:0];
    }
  }
  long long v35 = [[HMDHomeKitVersion alloc] initWithVersionString:@"3.0"];
  long long v36 = [v26 device];
  uint64_t v37 = [v36 version];

  long long v96 = v37;
  if (v104 || [v37 isAtLeastVersion:v35])
  {
    id v38 = v35;
    id v39 = (void *)MEMORY[0x1D9452090]();
    __int16 v40 = v106;
    BOOL v41 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      long long v43 = v42 = v16;
      *(_DWORD *)buf = 138543618;
      uint64_t v114 = v43;
      __int16 v115 = 2112;
      uint64_t v116 = v100;
      _os_log_impl(&dword_1D49D5000, v41, OS_LOG_TYPE_INFO, "%{public}@Preferring to send the response as a response for: %@", buf, 0x16u);

      long long v16 = v42;
    }

    char v44 = _Block_copy(aBlock);
    uint64_t v45 = v44;
    if (v44) {
      (*((void (**)(void *, void, id))v44 + 2))(v44, 0, v30);
    }
  }
  else
  {
    uint64_t v93 = v35;
    long long v94 = v16;
    long long v46 = (void *)MEMORY[0x1D9452090]();
    id v47 = v18;
    id v48 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
    {
      id v49 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v114 = v49;
      __int16 v115 = 2112;
      uint64_t v116 = v100;
      _os_log_impl(&dword_1D49D5000, v48, OS_LOG_TYPE_INFO, "%{public}@Preferring to send the response as a notification for: %@", buf, 0x16u);
    }
    uint64_t v45 = (void *)[v30 mutableCopy];
    [v45 setObject:MEMORY[0x1E4F1CC38] forKey:@"kIDSMessageIsNotificationKey"];
    BOOL v92 = (void *)[v45 copy];

    __int16 v50 = [HMDRemoteDeviceMessageDestination alloc];
    __int16 v51 = [(HMDHome *)v47 uuid];
    __int16 v52 = [v26 device];
    __int16 v53 = [(HMDRemoteDeviceMessageDestination *)v50 initWithTarget:v51 device:v52];

    if ([v21 qualityOfService] < 17) {
      uint64_t v54 = 17;
    }
    else {
      uint64_t v54 = [v21 qualityOfService];
    }
    __int16 v55 = [[HMDRemoteMessage alloc] initWithName:@"kMultipleCharacteristicValuesUpdatedNotificationKey" qualityOfService:v54 destination:v53 payload:v92 type:2 timeout:1 secure:0.0];
    [(HMDRemoteMessage *)v55 setIdentifier:v99];
    id v56 = [(HMDHome *)v47 homeManager];
    uint64_t v57 = [v56 messageDispatcher];
    v110[0] = MEMORY[0x1E4F143A8];
    v110[1] = 3221225472;
    v110[2] = __131__HMDHome__notifyChangedCharacteristics_identifier_multiPartResponse_moreMessagesInMultipart_requestMessage_withCompletionHandler___block_invoke;
    v110[3] = &unk_1E6A17D78;
    id v112 = aBlock;
    id v30 = v92;
    id v111 = v30;
    [v57 sendMessage:v55 completionHandler:v110];

    id v38 = v93;
    long long v16 = v94;
  }

  id v33 = v30;
LABEL_38:
  long long v97 = v33;
  uint64_t v58 = [(HMDCharacteristicResponseNotificationContext *)v16 changedCharacteristics];
  uint64_t v59 = [v58 allObjects];
  long long v60 = [(HMDCharacteristicResponseNotificationContext *)v16 previouslyNilChangedCharacteristics];
  long long v61 = [v60 allObjects];
  LOBYTE(v91) = 0;
  char v62 = v106;
  [(HMDHome *)v106 _postInternalNotificationForChangedCharacteristics:v59 previouslyNilChangedCharacteristics:v61 modifiedCharacteristics:0 changedByThisDevice:v27 ^ 1 residentShouldNotifyPeers:1 message:v21 broadcast:v91];

  char v63 = [(HMDCharacteristicResponseNotificationContext *)v16 notificationWithHome:v106];
  long long v98 = v26;
  if (v63)
  {
    long long v95 = v16;
    long long v64 = (void *)MEMORY[0x1D9452090]();
    uint64_t v65 = v106;
    uint64_t v66 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
    {
      id v67 = HMFGetLogIdentifier();
      uint64_t v68 = [v63 name];
      [v63 object];
      uint64_t v27 = v69 = v27;
      *(_DWORD *)buf = 138543874;
      uint64_t v114 = v67;
      __int16 v115 = 2112;
      uint64_t v116 = v68;
      __int16 v117 = 2112;
      uint64_t v118 = v27;
      _os_log_impl(&dword_1D49D5000, v66, OS_LOG_TYPE_INFO, "%{public}@Posting %@ with object: %@", buf, 0x20u);

      LOBYTE(v27) = v69;
      char v62 = v106;
    }
    uint64_t v70 = (void *)MEMORY[0x1D9452090]();
    __int16 v71 = v65;
    uint64_t v72 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v73 = HMFGetLogIdentifier();
      BOOL v74 = [v63 name];
      [v63 object];
      uint64_t v27 = v75 = v27;
      long long v76 = [v63 userInfo];
      *(_DWORD *)buf = 138544130;
      uint64_t v114 = v73;
      __int16 v115 = 2112;
      uint64_t v116 = v74;
      __int16 v117 = 2112;
      uint64_t v118 = v27;
      __int16 v119 = 2112;
      id v120 = v76;
      _os_log_impl(&dword_1D49D5000, v72, OS_LOG_TYPE_DEBUG, "%{public}@Posting %@ with object: %@, userInfo: %@", buf, 0x2Au);

      char v62 = v106;
      LOBYTE(v27) = v75;
    }
    int v77 = [(HMDHome *)v71 notificationCenter];
    [v77 postNotification:v63];

    long long v16 = v95;
  }
  char v78 = (void *)MEMORY[0x1D9452090]();
  long long v79 = [(HMDCharacteristicResponseNotificationContext *)v16 responseCharacteristics];
  uint64_t v80 = [v79 allObjects];
  uint64_t v81 = v16;
  uint64_t v82 = [(HMDCharacteristicResponseNotificationContext *)v16 notificationPayloadByAccessoryUUID];
  uint64_t v83 = [(HMDHome *)v62 _splitCharacteristicChanges:v80 changedAccessories:v82];

  if (v21)
  {
    uint64_t v84 = [v21 proxyConnection];
    char v85 = v84 ? 1 : v27;

    if ((v85 & 1) == 0)
    {
      long long v86 = aBlock;
      uint64_t v90 = _Block_copy(aBlock);
      uint64_t v89 = v90;
      if (v90) {
        (*((void (**)(void *, void, void *))v90 + 2))(v90, 0, v105);
      }
      uint64_t v88 = 0;
      goto LABEL_58;
    }
  }
  long long v86 = aBlock;
  if (aBlock) {
    char v87 = v27;
  }
  else {
    char v87 = 1;
  }
  if ((v87 & 1) == 0)
  {
    v107[0] = MEMORY[0x1E4F143A8];
    v107[1] = 3221225472;
    v107[2] = __131__HMDHome__notifyChangedCharacteristics_identifier_multiPartResponse_moreMessagesInMultipart_requestMessage_withCompletionHandler___block_invoke_1464;
    v107[3] = &unk_1E6A19530;
    id v109 = aBlock;
    id v108 = v105;
    uint64_t v88 = _Block_copy(v107);

    uint64_t v89 = v109;
LABEL_58:

    goto LABEL_59;
  }
  uint64_t v88 = 0;
LABEL_59:
  [(HMDHome *)v106 _sendClientCharacteristicsChangedNotificationWithIdentifier:v99 requestMessage:v21 multiPartResponse:v104 moreInMultiPartResponse:v102 characteristicChanges:v83 completionHandler:v88];

  [(HMDHome *)v106 _wol_processChangedCharacteristicResponses:v101];
}

- (NSNotificationCenter)notificationCenter
{
  return (NSNotificationCenter *)objc_getProperty(self, a2, 1080, 1);
}

- (void)_sendClientCharacteristicsChangedNotificationWithIdentifier:(id)a3 requestMessage:(id)a4 multiPartResponse:(BOOL)a5 moreInMultiPartResponse:(BOOL)a6 characteristicChanges:(id)a7 completionHandler:(id)a8
{
  BOOL v10 = a6;
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  id v56 = a3;
  id v57 = a4;
  id v14 = a7;
  id v53 = a8;
  uint64_t v54 = v14;
  *((void *)&v59 + 1) = [v14 objectForKeyedSubscript:@"kCharacteristicUpdatesForAllClientsNotificationKey"];
  *(void *)&long long v59 = [v14 objectForKeyedSubscript:@"kCharacteristicUpdatesForEntitledClientsNotificationKey"];
  if (a5)
  {
    id v15 = [NSNumber numberWithBool:v10];
    __int16 v52 = +[HMDCharacteristicResponseNotificationContext responsePayloadForHome:self changedAccessories:*((void *)&v59 + 1) moreMessagesInMultipart:v15];
  }
  else
  {
    __int16 v52 = +[HMDCharacteristicResponseNotificationContext responsePayloadForHome:self changedAccessories:*((void *)&v59 + 1) moreMessagesInMultipart:0];
  }
  if ((void)v59)
  {
    if (*((void *)&v59 + 1)) {
      uint64_t v16 = *((void *)&v59 + 1);
    }
    else {
      uint64_t v16 = MEMORY[0x1E4F1CC08];
    }
    id v17 = [MEMORY[0x1E4F1CA60] dictionaryWithDictionary:v16];
    [v17 addEntriesFromDictionary:(void)v59];
    uint64_t v18 = (void *)[v17 copy];
    if (a5)
    {
      uint64_t v19 = [NSNumber numberWithBool:v10];
      __int16 v51 = +[HMDCharacteristicResponseNotificationContext responsePayloadForHome:self changedAccessories:v18 moreMessagesInMultipart:v19];
    }
    else
    {
      __int16 v51 = +[HMDCharacteristicResponseNotificationContext responsePayloadForHome:self changedAccessories:v18 moreMessagesInMultipart:0];
    }
  }
  else
  {
    __int16 v51 = 0;
  }
  __int16 v55 = [v57 proxyConnection];
  uint64_t v58 = [MEMORY[0x1E4F1CA70] orderedSet];
  if (v55) {
    objc_msgSend(v58, "addObject:");
  }
  if (v59 != 0)
  {
    uint64_t v20 = [(HMDHome *)self xpcMessageTransportFactory];
    id v21 = [v20 defaultTransport];
    id v22 = [v21 connections];
    [v58 addObjectsFromArray:v22];
  }
  if ([v57 qualityOfService] < 17) {
    uint64_t v23 = 17;
  }
  else {
    uint64_t v23 = [v57 qualityOfService];
  }
  id v24 = objc_alloc(MEMORY[0x1E4F65488]);
  BOOL v25 = [(HMDHome *)self uuid];
  uint64_t v26 = [v24 initWithTarget:v25];

  __int16 v50 = (void *)v26;
  uint64_t v27 = (void *)[objc_alloc(MEMORY[0x1E4F654B0]) initWithName:@"kMultipleCharacteristicValuesUpdatedNotificationKey" qualityOfService:v23 destination:v26 payload:0];
  uint64_t v28 = v27;
  if (v56) {
    objc_msgSend(v27, "setIdentifier:");
  }
  long long v29 = (void *)MEMORY[0x1D9452090]();
  id v30 = self;
  long long v31 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
  {
    id v32 = HMFGetLogIdentifier();
    id v33 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v58, "count"));
    [*((id *)&v59 + 1) count];
    long long v34 = HMFBooleanToString();
    [(id)v59 count];
    long long v35 = HMFBooleanToString();
    long long v36 = HMFBooleanToString();
    uint64_t v37 = HMFBooleanToString();
    *(_DWORD *)buf = 138544898;
    *(void *)&uint8_t buf[4] = v32;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v33;
    *(_WORD *)&buf[22] = 2112;
    id v72 = v56;
    __int16 v73 = 2112;
    BOOL v74 = v34;
    __int16 v75 = 2112;
    long long v76 = v35;
    __int16 v77 = 2112;
    char v78 = v36;
    __int16 v79 = 2112;
    uint64_t v80 = v37;
    _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_INFO, "%{public}@Notifying %@ clients of characteristic changes with message identifier: %@ allClients: %@ entitledClients: %@ multiPartResponse: %@ moreMessagesInMultipart: %@", buf, 0x48u);
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000;
  LOBYTE(v72) = v53 != 0;
  dispatch_group_t v38 = dispatch_group_create();
  id v39 = [v58 array];
  v62[0] = MEMORY[0x1E4F143A8];
  v62[1] = 3221225472;
  v62[2] = __168__HMDHome__sendClientCharacteristicsChangedNotificationWithIdentifier_requestMessage_multiPartResponse_moreInMultiPartResponse_characteristicChanges_completionHandler___block_invoke;
  v62[3] = &unk_1E6A06EC0;
  id v40 = v51;
  id v63 = v40;
  id v41 = v28;
  id v64 = v41;
  id v42 = v52;
  id v65 = v42;
  id v43 = v55;
  id v66 = v43;
  char v69 = buf;
  uint64_t v70 = 34305;
  char v44 = v38;
  id v67 = v44;
  id v45 = v53;
  id v68 = v45;
  objc_msgSend(v39, "na_each:", v62);

  long long v46 = [(HMDHome *)v30 reportingSessionManager];
  id v47 = [v41 messagePayload];
  id v48 = [v41 identifier];
  [v46 addResponseMessagePayload:v47 toSessionWithUUID:v48];

  if (*(unsigned char *)(*(void *)&buf[8] + 24))
  {
    id v49 = [(HMDHome *)v30 workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __168__HMDHome__sendClientCharacteristicsChangedNotificationWithIdentifier_requestMessage_multiPartResponse_moreInMultiPartResponse_characteristicChanges_completionHandler___block_invoke_3;
    block[3] = &unk_1E6A186E0;
    id v61 = v45;
    dispatch_group_notify(v44, v49, block);
  }
  _Block_object_dispose(buf, 8);
}

- (HMDXPCMessageTransportFactory)xpcMessageTransportFactory
{
  return (HMDXPCMessageTransportFactory *)objc_getProperty(self, a2, 720, 1);
}

- (HMDXPCMessageReportingSessionManager)reportingSessionManager
{
  return (HMDXPCMessageReportingSessionManager *)objc_getProperty(self, a2, 928, 1);
}

- (void)_postInternalNotificationForChangedCharacteristics:(id)a3 previouslyNilChangedCharacteristics:(id)a4 modifiedCharacteristics:(id)a5 changedByThisDevice:(BOOL)a6 residentShouldNotifyPeers:(BOOL)a7 message:(id)a8 broadcast:(BOOL)a9
{
  BOOL v76 = a7;
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  id v14 = a3;
  id v77 = a4;
  id v83 = a5;
  id v15 = a8;
  uint64_t v16 = (void *)MEMORY[0x1D9452090]();
  id v17 = self;
  uint64_t v18 = HMFGetOSLogHandle();
  uint64_t v80 = v17;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    uint64_t v19 = HMFGetLogIdentifier();
    uint64_t v20 = HMFBooleanToString();
    HMFBooleanToString();
    v22 = BOOL v21 = a6;
    uint64_t v23 = HMFBooleanToString();
    [v15 shortDescription];
    v25 = id v24 = v15;
    *(_DWORD *)buf = 138544642;
    long long v106 = v19;
    __int16 v107 = 2112;
    id v108 = v20;
    __int16 v109 = 2112;
    char v110 = v22;
    __int16 v111 = 2112;
    id v112 = v23;
    __int16 v113 = 2112;
    id v114 = v14;
    __int16 v115 = 2112;
    uint64_t v116 = v25;
    _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@Posting internal notification and notifying remote users with changedByThisDevice: %@ residentShouldNotifyPeers: %@ broadcast: %@ about changed characteristics: %@ message: %@ ", buf, 0x3Eu);

    id v15 = v24;
    a6 = v21;

    id v17 = v80;
  }

  if ([v14 count] || objc_msgSend(v77, "count"))
  {
    uint64_t v26 = [v15 dictionaryForKey:@"kPresenceDictionaryForNotificationKey"];
    uint64_t v27 = [v15 dictionaryForKey:@"kPresencePairingIdentifierDictionaryForNotificationKey"];
    v101[0] = MEMORY[0x1E4F143A8];
    v101[1] = 3221225472;
    v101[2] = __186__HMDHome__postInternalNotificationForChangedCharacteristics_previouslyNilChangedCharacteristics_modifiedCharacteristics_changedByThisDevice_residentShouldNotifyPeers_message_broadcast___block_invoke;
    v101[3] = &unk_1E6A17BB8;
    v101[4] = v17;
    uint64_t v28 = objc_msgSend(v14, "na_filter:", v101);
    uint64_t v81 = (void *)v27;
    uint64_t v82 = v26;
    if (v27)
    {
      long long v29 = [[HMDHomePresenceRemote alloc] initWithPresenceByPairingIdentity:v27];
    }
    else
    {
      if (!v26)
      {
LABEL_10:
        id v30 = [(HMDHome *)v17 localCapabilitiesDataSource];
        int v31 = [v30 supportsBulletinBoard];

        if (v31)
        {
          v97[0] = MEMORY[0x1E4F143A8];
          v97[1] = 3221225472;
          v97[2] = __186__HMDHome__postInternalNotificationForChangedCharacteristics_previouslyNilChangedCharacteristics_modifiedCharacteristics_changedByThisDevice_residentShouldNotifyPeers_message_broadcast___block_invoke_2;
          v97[3] = &unk_1E6A06E98;
          v97[4] = v17;
          id v98 = v83;
          BOOL v99 = a6;
          char v100 = 0;
          [(HMDHome *)v17 evaluateNotificationConditionForCharacteristics:v28 homePresence:v26 completion:v97];
        }
        __int16 v73 = (void *)v28;
        id v74 = v15;

        uint64_t v84 = [MEMORY[0x1E4F28E10] weakToStrongObjectsMapTable];
        long long v93 = 0u;
        long long v94 = 0u;
        long long v95 = 0u;
        long long v96 = 0u;
        id v75 = v14;
        id obj = v14;
        uint64_t v32 = [obj countByEnumeratingWithState:&v93 objects:v104 count:16];
        if (v32)
        {
          uint64_t v33 = v32;
          uint64_t v34 = *(void *)v94;
          do
          {
            for (uint64_t i = 0; i != v33; ++i)
            {
              if (*(void *)v94 != v34) {
                objc_enumerationMutation(obj);
              }
              long long v36 = *(void **)(*((void *)&v93 + 1) + 8 * i);
              uint64_t v37 = [v36 accessory];
              if (v37)
              {
                dispatch_group_t v38 = [v84 objectForKey:v37];
                if (!v38)
                {
                  dispatch_group_t v38 = [MEMORY[0x1E4F1CA80] set];
                  [v84 setObject:v38 forKey:v37];
                }
                [v38 addObject:v36];
                id v39 = [[HMDHAPAccessoryNotificationEvent alloc] initWithAccessory:v37 characteristic:v36];
                id v40 = [(HMDHome *)v80 logEventSubmitter];
                [v40 submitLogEvent:v39 error:0];
              }
            }
            uint64_t v33 = [obj countByEnumeratingWithState:&v93 objects:v104 count:16];
          }
          while (v33);
        }

        id v41 = [MEMORY[0x1E4F28E10] weakToStrongObjectsMapTable];
        long long v89 = 0u;
        long long v90 = 0u;
        long long v91 = 0u;
        long long v92 = 0u;
        id v42 = v77;
        uint64_t v43 = [v42 countByEnumeratingWithState:&v89 objects:v103 count:16];
        if (v43)
        {
          uint64_t v44 = v43;
          uint64_t v45 = *(void *)v90;
          do
          {
            for (uint64_t j = 0; j != v44; ++j)
            {
              if (*(void *)v90 != v45) {
                objc_enumerationMutation(v42);
              }
              id v47 = *(void **)(*((void *)&v89 + 1) + 8 * j);
              id v48 = [v47 accessory];
              if (v48)
              {
                id v49 = [v41 objectForKey:v48];
                if (!v49)
                {
                  id v49 = [MEMORY[0x1E4F1CA80] set];
                  [v41 setObject:v49 forKey:v48];
                }
                [v49 addObject:v47];
              }
            }
            uint64_t v44 = [v42 countByEnumeratingWithState:&v89 objects:v103 count:16];
          }
          while (v44);
        }

        __int16 v50 = objc_msgSend(MEMORY[0x1E4F1CA80], "setWithCapacity:", objc_msgSend(v41, "count") + objc_msgSend(v84, "count"));
        __int16 v51 = objc_msgSend(v84, "hm_allKeys");
        [v50 addObjectsFromArray:v51];

        __int16 v52 = objc_msgSend(v41, "hm_allKeys");
        [v50 addObjectsFromArray:v52];

        long long v87 = 0u;
        long long v88 = 0u;
        long long v85 = 0u;
        long long v86 = 0u;
        id v79 = v50;
        uint64_t v53 = [v79 countByEnumeratingWithState:&v85 objects:v102 count:16];
        if (v53)
        {
          uint64_t v54 = v53;
          uint64_t v55 = MEMORY[0x1E4F1CBF0];
          uint64_t v56 = *(void *)v86;
          do
          {
            for (uint64_t k = 0; k != v54; ++k)
            {
              if (*(void *)v86 != v56) {
                objc_enumerationMutation(v79);
              }
              uint64_t v58 = *(void **)(*((void *)&v85 + 1) + 8 * k);
              long long v59 = [MEMORY[0x1E4F1CA60] dictionary];
              long long v60 = [v84 objectForKey:v58];
              uint64_t v61 = [v60 allObjects];
              char v62 = (void *)v61;
              if (v61) {
                uint64_t v63 = v61;
              }
              else {
                uint64_t v63 = v55;
              }
              [v59 setObject:v63 forKeyedSubscript:@"kModifiedCharacteristicsKey"];

              id v64 = [v41 objectForKey:v58];
              uint64_t v65 = [v64 allObjects];
              id v66 = (void *)v65;
              if (v65) {
                uint64_t v67 = v65;
              }
              else {
                uint64_t v67 = v55;
              }
              [v59 setObject:v67 forKeyedSubscript:@"HMDModifiedPreviouslyNilValuedCharacteristicsKey"];

              [v59 setObject:v83 forKeyedSubscript:@"kModifiedCharacteristicsMapKey"];
              [v59 setObject:v82 forKeyedSubscript:@"kPresenceDictionaryForNotificationKey"];
              [v59 setObject:v81 forKeyedSubscript:@"kPresencePairingIdentifierDictionaryForNotificationKey"];
              id v68 = (void *)[v59 copy];
              logAndPostNotification(@"HMDAccessoryCharacteristicsChangedNotification", v58, v68);
            }
            uint64_t v54 = [v79 countByEnumeratingWithState:&v85 objects:v102 count:16];
          }
          while (v54);
        }

        id v15 = v74;
        id v14 = v75;
        if (v76
          && [(HMDHome *)v80 shouldRelayNotificationToRegisteredDevicesForSource:v74])
        {
          char v69 = (void *)MEMORY[0x1D9452090]();
          uint64_t v70 = v80;
          __int16 v71 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
          {
            id v72 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543362;
            long long v106 = v72;
            _os_log_impl(&dword_1D49D5000, v71, OS_LOG_TYPE_INFO, "%{public}@Posting notification to remote users since this is a resident device or is paired with a watch", buf, 0xCu);
          }
          [(HMDHome *)v70 notifyRemoteUsersOfChangedCharacteristics:obj message:v74 broadcast:a9];
        }

        goto LABEL_53;
      }
      long long v29 = [[HMDHomePresenceRemote alloc] initWithPresenceByUserId:v26];
    }
    uint64_t v26 = v29;
    goto LABEL_10;
  }
LABEL_53:
}

- (NSArray)accessoriesWithWalletKeySupport
{
  int v2 = [(HMDHome *)self accessories];
  BOOL v3 = objc_msgSend(v2, "na_map:", &__block_literal_global_6);

  return (NSArray *)v3;
}

- (HMDHomeNFCReaderKeyManager)nfcReaderKeyManager
{
  return (HMDHomeNFCReaderKeyManager *)objc_getProperty(self, a2, 632, 1);
}

- (BOOL)hasCharacteristicNotificationRegistrations
{
  int v2 = [(HMDHome *)self notificationRegistrations];
  BOOL v3 = [v2 count] != 0;

  return v3;
}

- (void)retrieveHAPAccessoryForHMDAccessory:(id)a3 linkType:(int64_t)a4 forceRetrieve:(BOOL)a5 queue:(id)a6 completion:(id)a7
{
  id v12 = a3;
  id v13 = a6;
  id v14 = a7;
  id v15 = [(HMDHome *)self workQueue];
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = __87__HMDHome_retrieveHAPAccessoryForHMDAccessory_linkType_forceRetrieve_queue_completion___block_invoke;
  v19[3] = &unk_1E6A0AF48;
  v19[4] = self;
  id v20 = v12;
  id v22 = v14;
  int64_t v23 = a4;
  BOOL v24 = a5;
  id v21 = v13;
  id v16 = v13;
  id v17 = v14;
  id v18 = v12;
  dispatch_async(v15, v19);
}

void __81__HMDHome__readCharacteristicValues_requestMessage_source_withCompletionHandler___block_invoke(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = *(id *)(a1 + 32);
  char v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = HMFGetLogIdentifier();
    uint64_t v6 = (void *)v5;
    uint64_t v7 = "multi";
    if (!*(unsigned char *)(a1 + 96)) {
      uint64_t v7 = "single";
    }
    int v20 = 138543618;
    uint64_t v21 = v5;
    __int16 v22 = 2080;
    int64_t v23 = v7;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@Final notification for multi-read (%s part)", (uint8_t *)&v20, 0x16u);
  }
  uint64_t v8 = [*(id *)(a1 + 40) retrieveAndClearAllResponses];
  id v9 = v8;
  BOOL v10 = *(void **)(a1 + 48);
  if (v10)
  {
    if (v8)
    {
      id v11 = (void *)[v8 mutableCopy];
      uint64_t v12 = [v11 arrayByAddingObjectsFromArray:*(void *)(a1 + 48)];

      id v9 = (id)v12;
    }
    else
    {
      id v9 = v10;
    }
  }
  uint64_t v13 = [*(id *)(a1 + 32) _notifyChangedCharacteristics:v9 identifier:*(void *)(a1 + 56) multiPartResponse:*(unsigned __int8 *)(a1 + 96) moreMessagesInMultipart:0 requestMessage:*(void *)(a1 + 64) withCompletionHandler:*(void *)(a1 + 88)];
  if (!*(void *)(a1 + 72))
  {
    id v14 = (void *)MEMORY[0x1D9452090](v13);
    id v15 = *(id *)(a1 + 32);
    id v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      id v17 = HMFGetLogIdentifier();
      id v18 = *(const char **)(a1 + 80);
      int v20 = 138543618;
      uint64_t v21 = (uint64_t)v17;
      __int16 v22 = 2112;
      int64_t v23 = v18;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, "%{public}@Remove tracking pending response for identifier %@ after final notification", (uint8_t *)&v20, 0x16u);
    }
    uint64_t v19 = [*(id *)(a1 + 32) pendingResponses];
    [v19 removeObjectForKey:*(void *)(a1 + 80)];
  }
}

- (void)_readCharacteristicValues:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 withCompletionHandler:(id)a6
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  id v55 = a3;
  id v11 = a4;
  id v56 = a6;
  id v12 = objc_alloc(MEMORY[0x1E4F653F0]);
  uint64_t v13 = NSString;
  id v14 = MEMORY[0x1D94505D0](self, a2);
  id v15 = [v13 stringWithFormat:@"%@, %s:%ld", v14, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/Home/HMDHome.m", 26570];
  id v66 = (id)[v12 initWithName:v15];

  if ([(HMDHome *)self isResidentFirstAccessoryCommunicationEnabled])
  {
    BOOL v16 = [(HMDHome *)self isCurrentDeviceAvailableResident];
    id v17 = (void *)MEMORY[0x1D9452090]();
    id v18 = self;
    if (v16)
    {
      HMFGetOSLogHandle();
      uint64_t v19 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v20 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v21 = [v11 shortDescription];
        *(_DWORD *)buf = 138543618;
        id v68 = v20;
        __int16 v69 = 2112;
        uint64_t v70 = v21;
        _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_INFO, "%{public}@Running new accessory communication logic for resident. %@", buf, 0x16u);
      }
    }
    else
    {
      HMFGetOSLogHandle();
      uint64_t v19 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v43 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v44 = [v11 shortDescription];
        *(_DWORD *)buf = 138543618;
        id v68 = v43;
        __int16 v69 = 2112;
        uint64_t v70 = v44;
        _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_INFO, "%{public}@Routing accessory read requests using Resident First logic. %@", buf, 0x16u);
      }
    }

    uint64_t v45 = [(HMDHome *)v18 _createMessageForReadWriteRequest:v11 source:a5 withCompletionHandler:v56];
    long long v46 = [(HMDHome *)v18 accessoryReaderWriter];
    [v46 submitReadRequests:v55 sourceType:a5 requestMessage:v45];
  }
  else
  {
    dispatch_group_t v53 = dispatch_group_create();
    __int16 v22 = [v11 identifier];
    char v23 = [v11 BOOLForKey:@"kMultiPartResponseKey"];
    uint64_t v24 = [v11 stringForKey:@"kRequestIdentifierKey"];
    BOOL v25 = [v22 UUIDString];
    uint64_t v26 = [(HMDHome *)self _setupPendingResponseTimerIdentifier:v25 originalRequestIdentifier:v24];

    uint64_t v27 = +[HMDPendingResponse tupleForMessage:originalRequestIdentifier:requestCount:withCompletionHandler:](HMDPendingResponse, "tupleForMessage:originalRequestIdentifier:requestCount:withCompletionHandler:", v11, v26, [v55 count], v56);
    uint64_t v28 = [(HMDHome *)self pendingResponses];
    [v28 setObject:v27 forKeyedSubscript:v26];

    long long v29 = [MEMORY[0x1E4F28E10] weakToStrongObjectsMapTable];
    id v30 = [(HMDHome *)self _buildRequestMapTableFromRequests:v55 pendingResponses:v27];

    __int16 v52 = [MEMORY[0x1E4F1CA60] dictionary];
    if (isWatch()
      && [(HMDHome *)self _passReadRequestToCompanion:v30 requestMessage:v11 source:a5 pendingResponses:v27 remoteAccessories:v52 withCompletionHandler:v56])
    {
    }
    else
    {
      char v49 = v23;
      uint64_t v54 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v30, "count"));
      objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v30, "count"));
      id v47 = v24;
      v50 = id v48 = v22;
      dispatch_group_t v51 = dispatch_group_create();
      [(HMDHome *)self _sendReadRequestToAccessoryServer:v30 requestMessage:v11 source:a5 pendingResponses:v27 slowFailedAccessories:v54 fastFailedAccessories:v50 unreachableWaitGroup:v51 waitGroup:v53 activity:v66];
      int v31 = dispatch_group_create();
      uint64_t v32 = [MEMORY[0x1E4F1CA48] array];
      dispatch_group_enter(v31);
      [(HMDHome *)self _waitForEarlyDispatchTimeoutOnReadRequest:v30 requestMessage:v11 source:a5 pendingResponses:v27 activity:v66 slowFailedAccessories:v54 tmpErrorResponseTuples:v32 unreachableWaitGroup:v51 failureWaitGroup:v31];
      uint64_t v33 = (void *)MEMORY[0x1D9452090]([(HMDHome *)self _handleFailedAccessories:v30 requestMessage:v11 source:a5 pendingResponses:v27 fastFailedAccessories:v50 slowFailedAccessories:v54 tmpErrorResponseTuples:v32 waitGroup:v53 failureWaitGroup:v31 activity:v66]);
      uint64_t v34 = self;
      HMFGetOSLogHandle();
      long long v35 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        long long v36 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v68 = v36;
        _os_log_impl(&dword_1D49D5000, v35, OS_LOG_TYPE_INFO, "%{public}@Wait before final notification", buf, 0xCu);
      }
      uint64_t v37 = [(HMDHome *)v34 workQueue];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __81__HMDHome__readCharacteristicValues_requestMessage_source_withCompletionHandler___block_invoke;
      block[3] = &unk_1E6A07168;
      char v65 = v49;
      void block[4] = v34;
      id v58 = v27;
      id v59 = v32;
      id v60 = v48;
      id v61 = v11;
      id v62 = v47;
      id v63 = v26;
      id v64 = v56;
      id v38 = v26;
      id v39 = v47;
      id v40 = v48;
      id v41 = v32;
      id v42 = v27;
      dispatch_group_notify(v31, v37, block);
    }
  }
  __HMFActivityScopeLeave();
}

- (NSMutableDictionary)pendingResponses
{
  return self->_pendingResponses;
}

- (void)_waitForEarlyDispatchTimeoutOnReadRequest:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 pendingResponses:(id)a6 activity:(id)a7 slowFailedAccessories:(id)a8 tmpErrorResponseTuples:(id)a9 unreachableWaitGroup:(id)a10 failureWaitGroup:(id)a11
{
  id v15 = a3;
  id v16 = a4;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  id v20 = a9;
  id v21 = a10;
  id v22 = a11;
  char v23 = [v16 BOOLForKey:@"kMultiPartResponseKey"];
  uint64_t v24 = dispatch_get_global_queue(0, 0);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __184__HMDHome__waitForEarlyDispatchTimeoutOnReadRequest_requestMessage_source_pendingResponses_activity_slowFailedAccessories_tmpErrorResponseTuples_unreachableWaitGroup_failureWaitGroup___block_invoke;
  block[3] = &unk_1E6A11EF0;
  id v36 = v21;
  uint64_t v37 = self;
  id v38 = v19;
  id v39 = v18;
  char v46 = v23;
  id v40 = v17;
  id v41 = v22;
  id v42 = v15;
  id v43 = v16;
  id v44 = v20;
  unint64_t v45 = a5;
  id v25 = v20;
  id v26 = v16;
  id v27 = v15;
  id v28 = v22;
  id v29 = v17;
  id v30 = v18;
  id v31 = v19;
  id v32 = v21;
  dispatch_async(v24, block);
}

- (id)_setupPendingResponseTimerIdentifier:(id)a3 originalRequestIdentifier:(id)a4
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = v7;
  if (v7)
  {
    id v9 = v7;

    id v10 = objc_alloc(MEMORY[0x1E4F65580]);
    id v11 = (void *)[v10 initWithTimeInterval:1 options:*(double *)&pendingResponseTickPeriod];
    [(HMDHome *)self setPendingResponsesTimer:v11];

    id v12 = [(HMDHome *)self workQueue];
    uint64_t v13 = [(HMDHome *)self pendingResponsesTimer];
    [v13 setDelegateQueue:v12];

    id v14 = [(HMDHome *)self pendingResponsesTimer];
    [v14 setDelegate:self];

    id v15 = [(HMDHome *)self pendingResponsesTimer];
    [v15 resume];

    id v16 = (void *)MEMORY[0x1D9452090]();
    id v17 = self;
    id v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      id v19 = HMFGetLogIdentifier();
      id v20 = [(HMDHome *)v17 pendingResponsesTimer];
      int v22 = 138543874;
      char v23 = v19;
      __int16 v24 = 2048;
      id v25 = v20;
      __int16 v26 = 2112;
      id v27 = v9;
      _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@Started pending responses timer %p for request %@", (uint8_t *)&v22, 0x20u);
    }
  }
  else
  {
    id v9 = v6;
  }

  return v9;
}

- (void)_sendReadRequestToAccessoryServer:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 pendingResponses:(id)a6 slowFailedAccessories:(id)a7 fastFailedAccessories:(id)a8 unreachableWaitGroup:(id)a9 waitGroup:(id)a10 activity:(id)a11
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  id v15 = a3;
  id v16 = a4;
  id v17 = a6;
  id v40 = a7;
  id v39 = a8;
  unint64_t v45 = a9;
  group = a10;
  id v43 = a11;
  char v18 = [v16 BOOLForKey:@"kDoNotForwardMessageKey"];
  char v36 = [v16 BOOLForKey:@"kMultiPartResponseKey"];
  id v19 = v16;
  id v38 = [v16 identifier];
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  id obj = v15;
  uint64_t v41 = [obj countByEnumeratingWithState:&v58 objects:v68 count:16];
  if (v41)
  {
    char v34 = v18 ^ 1;
    uint64_t v33 = *(void *)v59;
    do
    {
      for (uint64_t i = 0; i != v41; ++i)
      {
        if (*(void *)v59 != v33) {
          objc_enumerationMutation(obj);
        }
        id v21 = *(void **)(*((void *)&v58 + 1) + 8 * i);
        dispatch_group_enter(group);
        dispatch_group_enter(v45);
        int v22 = [obj objectForKey:v21];
        char v23 = [v21 shortDescription];
        [v43 markWithFormat:@"Starting read for accessory: %@", v23];

        __int16 v24 = [v21 uuid];
        id v25 = (void *)MEMORY[0x1D9452090]();
        __int16 v26 = self;
        id v27 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v28 = HMFGetLogIdentifier();
          uint64_t v29 = [v22 count];
          *(_DWORD *)buf = 138543874;
          id v63 = v28;
          __int16 v64 = 2112;
          char v65 = v24;
          __int16 v66 = 2048;
          uint64_t v67 = v29;
          _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@Starting read for accessory %@ with %ld requests", buf, 0x20u);
        }
        [v22 count];
        id v30 = [(HMDHome *)v26 workQueue];
        v46[0] = MEMORY[0x1E4F143A8];
        v46[1] = 3221225472;
        v46[2] = __168__HMDHome__sendReadRequestToAccessoryServer_requestMessage_source_pendingResponses_slowFailedAccessories_fastFailedAccessories_unreachableWaitGroup_waitGroup_activity___block_invoke;
        v46[3] = &unk_1E6A07140;
        v46[4] = v26;
        v46[5] = v21;
        id v47 = v43;
        id v48 = v24;
        char v56 = v34;
        char v57 = v36;
        id v49 = v40;
        id v50 = v39;
        id v51 = v17;
        id v31 = v19;
        id v52 = v31;
        id v53 = v38;
        uint64_t v54 = group;
        id v55 = v45;
        id v32 = v24;
        [v21 readCharacteristicValues:v22 source:a5 message:v31 queue:v30 logEvent:0 completionHandler:v46];
      }
      uint64_t v41 = [obj countByEnumeratingWithState:&v58 objects:v68 count:16];
    }
    while (v41);
  }
}

- (void)_handleFailedAccessories:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 pendingResponses:(id)a6 fastFailedAccessories:(id)a7 slowFailedAccessories:(id)a8 tmpErrorResponseTuples:(id)a9 waitGroup:(id)a10 failureWaitGroup:(id)a11 activity:(id)a12
{
  id v44 = a3;
  id v17 = a4;
  id v36 = a6;
  id v18 = a7;
  id v43 = a8;
  id v40 = a9;
  id v19 = a11;
  id v20 = a12;
  group = a10;
  char v38 = [v17 BOOLForKey:@"kMultiPartResponseKey"];
  id v21 = self;
  int v22 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __178__HMDHome__handleFailedAccessories_requestMessage_source_pendingResponses_fastFailedAccessories_slowFailedAccessories_tmpErrorResponseTuples_waitGroup_failureWaitGroup_activity___block_invoke;
  block[3] = &unk_1E6A08D08;
  id v37 = v20;
  id v58 = v37;
  id v59 = v18;
  char v23 = v18;
  char v67 = v38;
  id v24 = v36;
  id v60 = v24;
  long long v61 = v21;
  id v25 = v19;
  id v62 = v25;
  id v26 = v44;
  id v63 = v26;
  id v27 = v17;
  id v64 = v27;
  unint64_t v66 = a5;
  id v28 = v40;
  id v65 = v28;
  id v45 = v23;
  dispatch_group_notify(group, v22, block);

  dispatch_group_enter(v25);
  uint64_t v29 = [(HMDHome *)v21 workQueue];
  v46[0] = MEMORY[0x1E4F143A8];
  v46[1] = 3221225472;
  v46[2] = __178__HMDHome__handleFailedAccessories_requestMessage_source_pendingResponses_fastFailedAccessories_slowFailedAccessories_tmpErrorResponseTuples_waitGroup_failureWaitGroup_activity___block_invoke_1554;
  v46[3] = &unk_1E6A08D08;
  id v47 = v37;
  id v48 = v43;
  char v56 = v38;
  id v49 = v24;
  id v50 = v21;
  id v51 = v25;
  id v52 = v26;
  id v54 = v28;
  unint64_t v55 = a5;
  id v53 = v27;
  id v42 = v28;
  id v30 = v27;
  id v31 = v26;
  id v32 = v25;
  id v33 = v24;
  id v34 = v43;
  id v35 = v37;
  dispatch_group_notify(group, v29, v46);
}

- (void)_handleMultipleCharacteristicRead:(id)a3
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [MEMORY[0x1E4F653F0] currentActivity];
  if ([v4 isRemote] && (objc_msgSend(v4, "isSecureRemote") & 1) == 0)
  {
    id v15 = (void *)MEMORY[0x1D9452090]();
    id v16 = self;
    id v17 = HMFGetOSLogHandle();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_21;
    }
    id v18 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    id v31 = v18;
    __int16 v32 = 2112;
    id v33 = v4;
    id v19 = "%{public}@Message not supported: %@";
    id v20 = v17;
    uint32_t v21 = 22;
    goto LABEL_20;
  }
  if ([v4 isEntitledForSPIAccess] & 1) != 0 || (objc_msgSend(v4, "isRemote"))
  {
    id v29 = 0;
    id v6 = [(HMDHome *)self _readRequestTuplesFromMessage:v4 outUnhandledRequests:&v29];
    id v7 = v29;
    if ([v6 count])
    {
      if ([v7 count])
      {
        uint64_t v8 = (void *)MEMORY[0x1D9452090]();
        id v9 = self;
        id v10 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          id v11 = HMFGetLogIdentifier();
          id v12 = [v4 shortDescription];
          *(_DWORD *)buf = 138543874;
          id v31 = v11;
          __int16 v32 = 2112;
          id v33 = v12;
          __int16 v34 = 2112;
          id v35 = v7;
          _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@%@ has characteristic requests that cannot be handled: %@", buf, 0x20u);
        }
      }
      uint64_t v13 = [v4 source];
      [v6 count];
      [v4 isRemote];
      [(HMDHome *)self startReportingSessionForMessage:v4];
      id v14 = [(HMDHome *)self __readWriteResponseHandler:v4 unhandledRequests:v7];
      [(HMDHome *)self _readCharacteristicValues:v6 requestMessage:v4 source:v13 withCompletionHandler:v14];
    }
    else
    {
      int v22 = (void *)MEMORY[0x1D9452090]();
      char v23 = self;
      id v24 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        id v25 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v31 = v25;
        _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_DEFAULT, "%{public}@None of the characteristics/properties in multi-read are valid", buf, 0xCu);
      }
      id v14 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
      [v14 domain];

      [v14 code];
      id v26 = [v4 responseHandler];

      if (v26)
      {
        id v27 = [v4 responseHandler];
        ((void (**)(void, void *, void))v27)[2](v27, v14, 0);
      }
    }

    goto LABEL_23;
  }
  id v15 = (void *)MEMORY[0x1D9452090]();
  id v16 = self;
  id v17 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    id v18 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v31 = v18;
    id v19 = "%{public}@Client does not have entitlement to use SPI";
    id v20 = v17;
    uint32_t v21 = 12;
LABEL_20:
    _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_DEFAULT, v19, buf, v21);
  }
LABEL_21:

  id v7 = [MEMORY[0x1E4F28C58] hmErrorWithCode:17];
  [v7 domain];

  [v7 code];
  id v28 = [v4 responseHandler];

  if (v28)
  {
    id v6 = [v4 responseHandler];
    ((void (**)(void, id, void))v6)[2](v6, v7, 0);
LABEL_23:
  }
}

- (void)startReportingSessionForMessage:(id)a3
{
  id v10 = a3;
  id v4 = reportContextFromMessage(v10);
  if (v4)
  {
    uint64_t v5 = [v10 transport];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v6 = v5;
    }
    else {
      id v6 = 0;
    }
    id v7 = v6;

    if (v7)
    {
      uint64_t v8 = [(HMDHome *)self reportingSessionManager];
      id v9 = [v10 identifier];
      [v8 startSessionWithUUID:v9 reportContext:v4 xpcClientConnection:v7];
    }
  }
}

- (id)__readWriteResponseHandler:(id)a3 unhandledRequests:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  objc_initWeak(&location, self);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __56__HMDHome___readWriteResponseHandler_unhandledRequests___block_invoke;
  v12[3] = &unk_1E6A19048;
  objc_copyWeak(&v15, &location);
  id v13 = v7;
  id v14 = v6;
  id v8 = v6;
  id v9 = v7;
  id v10 = _Block_copy(v12);

  objc_destroyWeak(&v15);
  objc_destroyWeak(&location);
  return v10;
}

- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didDiscoverAccessories:(id)a5 transaction:(id)a6 error:(id)a7
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  id v17 = [v13 identifier];
  id v18 = [(HMDHome *)self hapAccessoryWithIdentifier:v17];

  if (v18)
  {
    id v19 = (void *)MEMORY[0x1D9452090]();
    id v20 = self;
    uint32_t v21 = HMFGetOSLogHandle();
    int v22 = v21;
    if (v16)
    {
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        char v23 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543874;
        id v37 = v23;
        __int16 v38 = 2112;
        id v39 = v13;
        __int16 v40 = 2114;
        id v41 = v16;
        _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_ERROR, "%{public}@Failed HAP service discovery on accessory server %@ with error: %{public}@", buf, 0x20u);
      }
      id v24 = [v13 identifier];
      uint64_t v25 = [v13 linkType];
      v32[0] = MEMORY[0x1E4F143A8];
      v32[1] = 3221225472;
      v32[2] = __85__HMDHome_accessoryBrowser_accessoryServer_didDiscoverAccessories_transaction_error___block_invoke;
      v32[3] = &unk_1E6A07270;
      id v26 = v24;
      __int16 v34 = v20;
      uint64_t v35 = v25;
      id v33 = v26;
      [(HMDHome *)v20 _notifyRetrievalError:v16 accessoryServer:v26 linkType:v25 accessoryOperationBlock:v32];
      id v27 = [v16 domain];
      if ([v27 isEqualToString:*MEMORY[0x1E4F2D140]])
      {
        uint64_t v28 = [v16 code];

        if (v28 == 66)
        {
          [v18 didEncounterError:v16];
LABEL_15:

          goto LABEL_16;
        }
      }
      else
      {
      }
      id v30 = v13;
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();

      if (v30 && (isKindOfClass & 1) != 0) {
        [v18 _forceEnableReachabilityPingForPrimaryResident:v30];
      }
      goto LABEL_15;
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      id v29 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v37 = v29;
      __int16 v38 = 2112;
      id v39 = v13;
      _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_INFO, "%{public}@Completed HAP service discovery on accessory server %@", buf, 0x16u);
    }
    [v18 setLastPairingFailureTime:0.0];
    [v18 setConsecutivePairingFailures:0];
    -[HMDHome _configurePairedAccessoriesForServer:reAddServices:](v20, "_configurePairedAccessoriesForServer:reAddServices:", v13, [v14 count] == 0);
  }
LABEL_16:
}

- (void)_configurePairedAccessoriesForServer:(id)a3 reAddServices:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  char v7 = [v6 isPaired];
  id v8 = (void *)MEMORY[0x1D9452090]();
  id v9 = self;
  id v10 = HMFGetOSLogHandle();
  id v11 = v10;
  if (v7)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v12 = HMFGetLogIdentifier();
      int v21 = 138543618;
      int v22 = v12;
      __int16 v23 = 2112;
      id v24 = v6;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Configuring paired accessories with accessory server '%@'", (uint8_t *)&v21, 0x16u);
    }
    id v13 = [v6 identifier];
    id v14 = [(HMDHome *)v9 accessoryWithIdentifier:v13];

    if (v14)
    {
      id v15 = (void *)MEMORY[0x1D9452090]();
      id v16 = v9;
      id v17 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        id v18 = HMFGetLogIdentifier();
        int v21 = 138543618;
        int v22 = v18;
        __int16 v23 = 2112;
        id v24 = v14;
        _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Primary HMDAccessory %@ is listed as paired", (uint8_t *)&v21, 0x16u);
      }
      [(HMDHome *)v16 _processUpdatedAccessoryServer:v6 reAddServices:v4];
    }
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v19 = HMFGetLogIdentifier();
      int v21 = 138543618;
      int v22 = v19;
      __int16 v23 = 2112;
      id v24 = v6;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Skipping configuration of unpaired accessory server '%@'", (uint8_t *)&v21, 0x16u);
    }
    id v14 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:4 userInfo:0];
    id v20 = [v6 identifier];
    -[HMDHome _notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:](v9, "_notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:", v14, v20, [v6 linkType], 0);
  }
}

- (void)accessoryBrowser:(id)a3 didFindAccessoryServer:(id)a4 stateChanged:(BOOL)a5 stateNumber:(id)a6 completion:(id)a7
{
  BOOL v140 = a5;
  uint64_t v157 = *MEMORY[0x1E4F143B8];
  id v11 = a3;
  id v12 = a4;
  id v13 = (__CFString *)a6;
  id v14 = (void (**)(id, void, uint64_t))a7;
  id v15 = (void *)MEMORY[0x1D9452090]();
  id v16 = self;
  id v17 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    id v18 = HMFGetLogIdentifier();
    id v19 = [v12 shortDescription];
    id v20 = HMFBooleanToString();
    *(_DWORD *)buf = 138544130;
    uint64_t v146 = v18;
    __int16 v147 = 2112;
    long long v148 = v19;
    __int16 v149 = 2112;
    long long v150 = v13;
    __int16 v151 = 2112;
    long long v152 = v20;
    _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Found paired accessory server %@. State: %@/%@", buf, 0x2Au);
  }
  int v21 = [v12 identifier];
  int v22 = [(HMDHome *)v16 hapAccessoryWithIdentifier:v21];

  BOOL v142 = [(HMDHome *)v16 _shouldAvoidTombstoningAccessoryServer:v12 accessory:v22];
  if (!v22)
  {
    uint64_t v45 = 0;
LABEL_13:
    ((void (**)(id, BOOL, uint64_t))v14)[2](v14, v142, v45);
    goto LABEL_14;
  }
  long long v139 = v13;
  __int16 v23 = [(HMDHome *)v16 residentDeviceManager];
  int v136 = [v23 isCurrentDeviceAvailableResident];

  id v24 = (void *)MEMORY[0x1D9452090]();
  uint64_t v25 = v16;
  id v26 = HMFGetOSLogHandle();
  uint64_t v138 = v14;
  if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
  {
    id v27 = HMFGetLogIdentifier();
    uint64_t v28 = [v22 shortDescription];
    HMFBooleanToString();
    id v29 = v12;
    id v30 = v11;
    id v31 = (__CFString *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    uint64_t v146 = v27;
    __int16 v147 = 2112;
    long long v148 = v28;
    __int16 v149 = 2112;
    long long v150 = v31;
    _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_INFO, "%{public}@Performing accessory/service discovery on paired accessory %@. isResidentDevice: %@", buf, 0x20u);

    id v11 = v30;
    id v12 = v29;
  }
  if ((![v22 canWakeUpViaWoL]
     || [v22 shouldDiscoverSuspendCapableAccessoryServer:v12])
    && ![v12 wakeNumber])
  {
    id v46 = v12;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v47 = v46;
    }
    else {
      id v47 = 0;
    }
    id v48 = v47;

    if ([v46 isReachable] && (objc_msgSend(v48, "isCached") & 1) == 0)
    {
      id v49 = [MEMORY[0x1E4F1CA48] arrayWithObject:v22];
      v143[0] = MEMORY[0x1E4F143A8];
      v143[1] = 3221225472;
      v143[2] = __87__HMDHome_accessoryBrowser_didFindAccessoryServer_stateChanged_stateNumber_completion___block_invoke;
      v143[3] = &unk_1E6A175A8;
      id v144 = v46;
      objc_msgSend(v49, "na_each:", v143);
    }
    id v50 = (void *)MEMORY[0x1D9452090]();
    id v51 = v25;
    id v52 = HMFGetOSLogHandle();
    id v134 = v48;
    uint64_t v135 = v46;
    if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v53 = v132 = v50;
      id v54 = [v22 shortDescription];
      [(HMDHome *)v51 isCurrentDevicePrimaryResident];
      HMFBooleanToString();
      unint64_t v55 = (__CFString *)objc_claimAutoreleasedReturnValue();
      [(HMDHome *)v51 isCurrentDeviceAvailableResident];
      char v56 = HMFBooleanToString();
      [(HMDHome *)v51 areAllResidentsUnreachable];
      HMFBooleanToString();
      char v57 = v22;
      id v58 = v12;
      v60 = id v59 = v11;
      *(_DWORD *)buf = 138544386;
      uint64_t v146 = v53;
      __int16 v147 = 2112;
      long long v148 = v54;
      __int16 v149 = 2114;
      long long v150 = v55;
      __int16 v151 = 2114;
      long long v152 = v56;
      __int16 v153 = 2114;
      double v154 = *(double *)&v60;
      _os_log_impl(&dword_1D49D5000, v52, OS_LOG_TYPE_INFO, "%{public}@Evaluating disconnect on idle status for %@ using - isCurrentDevicePrimaryResident = %{public}@, isCurrentDeviceAvailableResident = %{public}@, areAllResidentsUnreachable = %{public}@", buf, 0x34u);

      id v11 = v59;
      id v12 = v58;
      int v22 = v57;

      id v46 = v135;
      id v48 = v134;

      id v50 = v132;
    }

    uint64_t v61 = shouldDisconnectOnIdleForAccessory(v22);
    if (v61 != [v22 shouldDisconnectOnIdle]) {
      [v22 setShouldDisconnectOnIdle:v61];
    }
    [v46 setShouldDisconnectOnIdle:v61];
    id v62 = [v46 identifier];
    uint64_t v63 = [v22 supportedTransports];
    id v64 = [v46 setupHash];
    [(HMDHome *)v51 _registerPairedAccessory:v62 transports:v63 setupHash:v64];

    double DiscoveryBackoffPeriod = 0.0;
    id v13 = v139;
    if (v136)
    {
      id v14 = v138;
      goto LABEL_49;
    }
    double Current = CFAbsoluteTimeGetCurrent();
    [v22 lastPairingFailureTime];
    double v68 = Current - v67;
    unint64_t v69 = [v22 consecutivePairingFailures];
    id v14 = v138;
    if (v68 < getDiscoveryBackoffPeriod() || v69 >= 6)
    {
      if (v69 <= 5) {
        double DiscoveryBackoffPeriod = getDiscoveryBackoffPeriod();
      }
      else {
        double DiscoveryBackoffPeriod = 1800.0;
      }
      [v22 setResetOnBackoffExpiry:v69 > 5];
      BOOL v76 = [MEMORY[0x1E4F28C58] hmErrorWithCode:4];
      id v77 = [v135 identifier];
      [(HMDHome *)v51 _notifyRetrievalError:v76 accessoryServer:v77 linkType:0 accessoryOperationBlock:0];

LABEL_48:
      if (DiscoveryBackoffPeriod != 0.0)
      {
        uint64_t v45 = 0;
LABEL_84:

        if (DiscoveryBackoffPeriod > 0.0)
        {
          id v120 = (void *)MEMORY[0x1D9452090]();
          uint64_t v121 = v51;
          id v122 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v122, OS_LOG_TYPE_INFO))
          {
            uint64_t v123 = HMFGetLogIdentifier();
            uint64_t v124 = [v22 shortDescription];
            uint64_t v125 = HMFBooleanToString();
            *(_DWORD *)buf = 138544386;
            uint64_t v146 = v123;
            __int16 v147 = 2112;
            long long v148 = v124;
            __int16 v149 = 2112;
            long long v150 = v139;
            __int16 v151 = 2112;
            long long v152 = v125;
            __int16 v153 = 2048;
            double v154 = DiscoveryBackoffPeriod;
            _os_log_impl(&dword_1D49D5000, v122, OS_LOG_TYPE_INFO, "%{public}@Backing off discovery for accessory %@ with s# %@, state changed: %@ for %.2f sec", buf, 0x34u);

            id v13 = v139;
            id v14 = v138;
          }

          [v22 backOffAccessoryForStateNumber:v13 backoffPeriod:DiscoveryBackoffPeriod];
        }
        goto LABEL_13;
      }
LABEL_49:
      if ([v22 shouldAutoDiscoverAccessoryServer])
      {
        int v137 = 1;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0 && ([v22 hasIPLink] & 1) == 0)
        {
          long long v85 = (void *)MEMORY[0x1D9452090]();
          id v130 = v51;
          long long v86 = v51;
          long long v87 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v87, OS_LOG_TYPE_INFO))
          {
            long long v88 = HMFGetLogIdentifier();
            unint64_t v89 = [v135 linkType];
            if (v89 > 2) {
              long long v90 = @"Undefined";
            }
            else {
              long long v90 = off_1E6A0B860[v89];
            }
            long long v95 = v90;
            long long v96 = [v22 shortDescription];
            *(_DWORD *)buf = 138543874;
            uint64_t v146 = v88;
            __int16 v147 = 2112;
            long long v148 = v95;
            __int16 v149 = 2112;
            long long v150 = v96;
            _os_log_impl(&dword_1D49D5000, v87, OS_LOG_TYPE_INFO, "%{public}@Adding %@ transport for Thread accessory: %@", buf, 0x20u);

            id v48 = v134;
          }

          long long v97 = (void *)MEMORY[0x1E4F5BC00];
          id v98 = [v22 uniqueIdentifier];
          BOOL v99 = [v97 instanceIDForUniqueIdentifier:v98];

          char v100 = [HMDAccessoryTransportInformation alloc];
          long long v101 = [v135 identifier];
          BOOL v102 = -[HMDAccessoryTransportInformation initWithServerIdentifier:instanceID:linkType:](v100, "initWithServerIdentifier:instanceID:linkType:", v101, v99, [v135 linkType]);
          [v22 addTransportInformationInstance:v102];

          if ([v135 isReachable])
          {
            long long v103 = [v135 identifier];
            objc_msgSend(v22, "setReachability:serverIdentifier:linkType:", 1, v103, objc_msgSend(v135, "linkType"));
          }
          id v14 = v138;
          id v51 = v130;
        }
        if (v48) {
          int v104 = v136;
        }
        else {
          int v104 = 0;
        }
        if (v104 == 1 && (v140 || [v48 connectReason] == 2))
        {
          long long v105 = (void *)MEMORY[0x1D9452090]();
          long long v106 = v51;
          __int16 v107 = v51;
          id v108 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v108, OS_LOG_TYPE_INFO))
          {
            __int16 v109 = HMFGetLogIdentifier();
            char v110 = [v22 shortDescription];
            *(_DWORD *)buf = 138543618;
            uint64_t v146 = v109;
            __int16 v147 = 2112;
            long long v148 = v110;
            _os_log_impl(&dword_1D49D5000, v108, OS_LOG_TYPE_INFO, "%{public}@Enabling auto discovery for BTLE accessory: %@", buf, 0x16u);

            id v48 = v134;
            id v14 = v138;
          }

          int v137 = 1;
          id v51 = v106;
        }
        else
        {
          int v137 = 0;
        }
      }
      uint64_t v133 = [v22 enhancedAuthMethod];
      unsigned int v111 = -[HMDHome _isRetrievalInProgressForPrimaryAccessory:linkType:](v51, "_isRetrievalInProgressForPrimaryAccessory:linkType:", v22, [v135 linkType]);
      context = (void *)MEMORY[0x1D9452090]();
      id v112 = v51;
      __int16 v113 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v113, OS_LOG_TYPE_INFO))
      {
        id v127 = v11;
        uint64_t v128 = HMFGetLogIdentifier();
        id v126 = [v135 identifier];
        unint64_t v114 = [v135 linkType];
        if (v114 > 2) {
          __int16 v115 = @"Undefined";
        }
        else {
          __int16 v115 = off_1E6A0B860[v114];
        }
        uint64_t v116 = v115;
        uint64_t v117 = HMFBooleanToString();
        uint64_t v118 = HMFBooleanToString();
        __int16 v119 = HMFBooleanToString();
        *(_DWORD *)buf = 138544642;
        uint64_t v146 = v128;
        __int16 v147 = 2112;
        long long v148 = v126;
        __int16 v149 = 2112;
        long long v150 = v116;
        __int16 v151 = 2112;
        long long v152 = v117;
        __int16 v153 = 2112;
        double v154 = *(double *)&v118;
        __int16 v155 = 2112;
        id v156 = v119;
        _os_log_impl(&dword_1D49D5000, v113, OS_LOG_TYPE_INFO, "%{public}@Evaluating need to discover accessories from found accessory server %@/%@, autoDiscoveryEnabled =  %@, hasExplicitRetrieveRequest = %@ discoverForEAuth = %@", buf, 0x3Eu);

        id v11 = v127;
        id v14 = v138;
        id v48 = v134;
      }

      if (v133) {
        uint64_t v45 = v137 | v111;
      }
      else {
        uint64_t v45 = 1;
      }
      id v13 = v139;
      goto LABEL_84;
    }
    if (!v48 || !v140) {
      goto LABEL_49;
    }
    uint64_t v129 = v51;
    if ([(HMDHome *)v51 _isRegisteredForNotificationsWithRemoteGateway:v22])
    {
      uint64_t v70 = (void *)MEMORY[0x1D9452090]();
      uint64_t v71 = v51;
      id v72 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
      {
        __int16 v73 = HMFGetLogIdentifier();
        id v74 = [v22 shortDescription];
        *(_DWORD *)buf = 138543618;
        uint64_t v146 = v73;
        __int16 v147 = 2112;
        long long v148 = v74;
        id v75 = "%{public}@Backing off since notifications for %@ are registered with remote gateway";
LABEL_34:
        _os_log_impl(&dword_1D49D5000, v72, OS_LOG_TYPE_INFO, v75, buf, 0x16u);

        id v48 = v134;
        id v14 = v138;
      }
    }
    else
    {
      if (![(HMDHome *)v51 _isEventTriggerOnRemoteGatewayForAccessory:v22]|| [(HMDHome *)v51 _isRegisteredForNotificationsForClients:v22]|| [(HMDHome *)v51 _isEventTriggerOnLocalDeviceForAccessory:v22])
      {
        BOOL v78 = [(HMDHome *)v51 _isEventTriggerOnRemoteGatewayForAccessory:v22];
        id v79 = (void *)MEMORY[0x1D9452090]();
        uint64_t v80 = v51;
        uint64_t v81 = HMFGetOSLogHandle();
        BOOL v82 = os_log_type_enabled(v81, OS_LOG_TYPE_INFO);
        if (!v78)
        {
          if (v82)
          {
            long long v91 = HMFGetLogIdentifier();
            long long v92 = [v22 shortDescription];
            long long v93 = [v134 stateNumber];
            [v134 stateChanged];
            long long v94 = HMFBooleanToString();
            *(_DWORD *)buf = 138544130;
            uint64_t v146 = v91;
            __int16 v147 = 2112;
            long long v148 = v92;
            __int16 v149 = 2112;
            long long v150 = v93;
            __int16 v151 = 2112;
            long long v152 = v94;
            _os_log_impl(&dword_1D49D5000, v81, OS_LOG_TYPE_INFO, "%{public}@Discovering BLE Accessory: %@, State Number: %@, State Changed: %@", buf, 0x2Au);

            id v14 = v138;
            id v13 = v139;
          }

          uint64_t v45 = 1;
          goto LABEL_13;
        }
        if (v82)
        {
          id v83 = HMFGetLogIdentifier();
          uint64_t v84 = [v22 shortDescription];
          *(_DWORD *)buf = 138543618;
          uint64_t v146 = v83;
          __int16 v147 = 2112;
          long long v148 = v84;
          _os_log_impl(&dword_1D49D5000, v81, OS_LOG_TYPE_INFO, "%{public}@Backing off since triggers are on resident and have clients interested for accessory: %@", buf, 0x16u);

          id v14 = v138;
        }

        double DiscoveryBackoffPeriod = getDiscoveryBackoffPeriod();
        id v48 = v134;
        goto LABEL_47;
      }
      uint64_t v70 = (void *)MEMORY[0x1D9452090]();
      uint64_t v71 = v51;
      id v72 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
      {
        __int16 v73 = HMFGetLogIdentifier();
        id v74 = [v22 shortDescription];
        *(_DWORD *)buf = 138543618;
        uint64_t v146 = v73;
        __int16 v147 = 2112;
        long long v148 = v74;
        id v75 = "%{public}@Not discovering accessory (%@) as trigger is active on resident and no clients and no local triggers locally";
        goto LABEL_34;
      }
    }

    double DiscoveryBackoffPeriod = getDiscoveryBackoffPeriod();
LABEL_47:
    id v51 = v129;
    goto LABEL_48;
  }
  __int16 v32 = (void *)MEMORY[0x1D9452090]();
  id v33 = v25;
  __int16 v34 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
  {
    uint64_t v35 = HMFGetLogIdentifier();
    uint64_t v36 = [v12 shortDescription];
    id v37 = [v22 lpmProfile];
    [v22 connectivityInfo];
    uint64_t v141 = v32;
    __int16 v38 = v22;
    id v39 = v12;
    v41 = id v40 = v11;
    uint64_t v42 = [v41 woWLANInfo];
    *(_DWORD *)buf = 138544130;
    uint64_t v146 = v35;
    __int16 v147 = 2112;
    long long v148 = v36;
    __int16 v149 = 2112;
    long long v150 = v37;
    __int16 v151 = 2112;
    long long v152 = v42;
    _os_log_impl(&dword_1D49D5000, v34, OS_LOG_TYPE_INFO, "%{public}@Not discovering the suspended accessory server: %@ with LPM Profile: %@ and WoWInfo: %@.", buf, 0x2Au);

    id v11 = v40;
    id v12 = v39;
    int v22 = v38;
    __int16 v32 = v141;
  }
  id v43 = [MEMORY[0x1E4F28C58] hmErrorWithCode:23];
  id v44 = [v12 identifier];
  -[HMDHome _notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:](v33, "_notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:", v43, v44, [v12 linkType], 0);

  id v14 = v138;
  ((void (**)(id, BOOL, uint64_t))v138)[2](v138, v142, 0);

  id v13 = v139;
LABEL_14:
}

- (BOOL)areAllResidentsUnreachable
{
  int v2 = [(HMDHome *)self enabledResidents];
  char v3 = objc_msgSend(v2, "na_allObjectsPassTest:", &__block_literal_global_1602);

  return v3;
}

- (NSArray)enabledResidents
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  char v3 = [MEMORY[0x1E4F1CA48] array];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  BOOL v4 = [(HMDHome *)self residentDeviceManager];
  uint64_t v5 = [v4 residentDevices];

  uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        if ([v10 isEnabled]) {
          [v3 addObject:v10];
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v7);
  }

  return (NSArray *)v3;
}

- (BOOL)isCurrentDevicePrimaryResident
{
  int v2 = [(HMDHome *)self residentDeviceManager];
  char v3 = [v2 isCurrentDevicePrimaryResident];

  return v3;
}

- (BOOL)_shouldAvoidTombstoningAccessoryServer:(id)a3 accessory:(id)a4
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = v7;
  BOOL v9 = 0;
  if (v6 && v7)
  {
    id v10 = [(HMDHome *)self removeAccessoryInProgressForHMDAccessories];
    int v11 = [v10 containsObject:v8];

    if (v11)
    {
      long long v12 = (void *)MEMORY[0x1D9452090]();
      long long v13 = self;
      long long v14 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        long long v15 = HMFGetLogIdentifier();
        id v16 = [v6 name];
        uint64_t v17 = [v6 identifier];
        *(_DWORD *)buf = 138543874;
        uint64_t v36 = v15;
        __int16 v37 = 2112;
        __int16 v38 = v16;
        __int16 v39 = 2112;
        id v40 = v17;
        id v18 = "%{public}@Accessory %@/%@ being removed from home - not tombstoning";
LABEL_9:
        _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, v18, buf, 0x20u);
      }
    }
    else
    {
      id v19 = [(HMDHome *)self addPendingAccessorySetupCodeHandlers];
      id v20 = [v8 uuid];
      int v21 = [v19 objectForKey:v20];

      if (!v21)
      {
        __int16 v23 = [(HMDHome *)self addPendingAccessories];
        id v24 = objc_msgSend(v23, "hm_allKeys");
        v33[0] = MEMORY[0x1E4F143A8];
        v33[1] = 3221225472;
        v33[2] = __60__HMDHome__shouldAvoidTombstoningAccessoryServer_accessory___block_invoke;
        v33[3] = &unk_1E6A06D10;
        id v25 = v8;
        id v34 = v25;
        int v26 = objc_msgSend(v24, "na_any:", v33);

        if (!v26)
        {

          BOOL v9 = -[HMDHome _isRetrievalInProgressForPrimaryAccessory:linkType:](self, "_isRetrievalInProgressForPrimaryAccessory:linkType:", v25, [v6 linkType]);
          goto LABEL_12;
        }
        id v27 = (void *)MEMORY[0x1D9452090]();
        uint64_t v28 = self;
        id v29 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
        {
          id v30 = HMFGetLogIdentifier();
          id v31 = [v6 name];
          __int16 v32 = [v6 identifier];
          *(_DWORD *)buf = 138543874;
          uint64_t v36 = v30;
          __int16 v37 = 2112;
          __int16 v38 = v31;
          __int16 v39 = 2112;
          id v40 = v32;
          _os_log_impl(&dword_1D49D5000, v29, OS_LOG_TYPE_INFO, "%{public}@Accessory %@/%@ being added to home (via setupDescription) - not tombstoning", buf, 0x20u);
        }

        goto LABEL_11;
      }
      long long v12 = (void *)MEMORY[0x1D9452090]();
      long long v13 = self;
      long long v14 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        long long v15 = HMFGetLogIdentifier();
        id v16 = [v6 name];
        uint64_t v17 = [v6 identifier];
        *(_DWORD *)buf = 138543874;
        uint64_t v36 = v15;
        __int16 v37 = 2112;
        __int16 v38 = v16;
        __int16 v39 = 2112;
        id v40 = v17;
        id v18 = "%{public}@Accessory %@/%@ being added to home - not tombstoning";
        goto LABEL_9;
      }
    }

LABEL_11:
    BOOL v9 = 1;
  }
LABEL_12:

  return v9;
}

- (NSHashTable)removeAccessoryInProgressForHMDAccessories
{
  os_unfair_recursive_lock_lock_with_options();
  char v3 = (void *)[(NSHashTable *)self->_removeAccessoryInProgressForHMDAccessories copy];
  os_unfair_recursive_lock_unlock();
  return (NSHashTable *)v3;
}

- (NSMutableDictionary)addPendingAccessorySetupCodeHandlers
{
  os_unfair_recursive_lock_lock_with_options();
  char v3 = (void *)[(NSMutableDictionary *)self->_addPendingAccessorySetupCodeHandlers copy];
  os_unfair_recursive_lock_unlock();
  return (NSMutableDictionary *)v3;
}

- (NSMapTable)addPendingAccessories
{
  os_unfair_recursive_lock_lock_with_options();
  char v3 = (void *)[(NSMapTable *)self->_addPendingAccessories copy];
  os_unfair_recursive_lock_unlock();
  return (NSMapTable *)v3;
}

- (id)_discoveredAccessoriesForServer:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [v4 identifier];
  uint64_t v6 = [v4 linkType];

  id v7 = [(HMDHome *)self _discoveredAccessoriesForServer:v5 linkType:v6];

  return v7;
}

- (id)_discoveredAccessoriesForServer:(id)a3 linkType:(int64_t)a4
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = [MEMORY[0x1E4F1CA48] array];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v8 = [(HMDHome *)self discoveredAccessories];
  uint64_t v9 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v17;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v17 != v11) {
          objc_enumerationMutation(v8);
        }
        long long v13 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        int64_t v15 = a4;
        if ([v13 matchesHAPAccessoryWithServerIdentifier:v6 linkType:&v15]) {
          [v7 addObject:v13];
        }
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v10);
  }

  return v7;
}

- (NSMutableArray)discoveredAccessories
{
  return self->_discoveredAccessories;
}

void __105__HMDHome_AccessoryRetrieval___retrieveHAPAccessoryForHMDHAPAccessory_linkType_forceRetrieve_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) workQueue];
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = __105__HMDHome_AccessoryRetrieval___retrieveHAPAccessoryForHMDHAPAccessory_linkType_forceRetrieve_completion___block_invoke_2;
    v8[3] = &unk_1E6A17018;
    uint64_t v5 = *(void **)(a1 + 40);
    void v8[4] = *(void *)(a1 + 32);
    id v6 = v5;
    uint64_t v7 = *(void *)(a1 + 48);
    id v9 = v6;
    uint64_t v11 = v7;
    id v10 = v3;
    dispatch_async(v4, v8);
  }
}

void __184__HMDHome__waitForEarlyDispatchTimeoutOnReadRequest_requestMessage_source_pendingResponses_activity_slowFailedAccessories_tmpErrorResponseTuples_unreachableWaitGroup_failureWaitGroup___block_invoke(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 32);
  dispatch_time_t v3 = dispatch_time(0, 250000000);
  dispatch_group_wait(v2, v3);
  id v4 = [*(id *)(a1 + 40) workQueue];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __184__HMDHome__waitForEarlyDispatchTimeoutOnReadRequest_requestMessage_source_pendingResponses_activity_slowFailedAccessories_tmpErrorResponseTuples_unreachableWaitGroup_failureWaitGroup___block_invoke_2;
  v10[3] = &unk_1E6A08D08;
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  char v20 = *(unsigned char *)(a1 + 112);
  id v5 = *(id *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 40);
  id v13 = v5;
  uint64_t v14 = v6;
  id v15 = *(id *)(a1 + 72);
  id v16 = *(id *)(a1 + 80);
  id v7 = *(id *)(a1 + 88);
  id v9 = *(void **)(a1 + 96);
  uint64_t v8 = *(void *)(a1 + 104);
  id v17 = v7;
  uint64_t v19 = v8;
  id v18 = v9;
  dispatch_async(v4, v10);
}

void __87__HMDHome_accessoryBrowser_didFindAccessoryServer_stateChanged_stateNumber_completion___block_invoke(uint64_t a1, void *a2)
{
  id v6 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    dispatch_time_t v3 = v6;
  }
  else {
    dispatch_time_t v3 = 0;
  }
  id v4 = v3;
  id v5 = [*(id *)(a1 + 32) identifier];
  objc_msgSend(v4, "setReachability:serverIdentifier:linkType:", 1, v5, objc_msgSend(*(id *)(a1 + 32), "linkType"));
}

void __87__HMDHome_retrieveHAPAccessoryForHMDAccessory_linkType_forceRetrieve_queue_completion___block_invoke_3(uint64_t a1)
{
  int v2 = _Block_copy(*(const void **)(a1 + 40));
  if (v2)
  {
    id v3 = v2;
    (*((void (**)(void *, void))v2 + 2))(v2, *(void *)(a1 + 32));
    int v2 = v3;
  }
}

uint64_t __178__HMDHome__handleFailedAccessories_requestMessage_source_pendingResponses_fastFailedAccessories_slowFailedAccessories_tmpErrorResponseTuples_waitGroup_failureWaitGroup_activity___block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 32) begin];
  if ([*(id *)(a1 + 40) count])
  {
    [*(id *)(a1 + 40) count];
    if (*(unsigned char *)(a1 + 104)) {
      [MEMORY[0x1E4F1CA48] array];
    }
    else {
    int v2 = [*(id *)(a1 + 48) allResponses];
    }
    [*(id *)(a1 + 32) begin];
    id v8 = *(id *)(a1 + 32);
    id v3 = (void *)MEMORY[0x1D9452090]();
    id v4 = *(id *)(a1 + 56);
    HMFGetOSLogHandle();
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v10 = v6;
      _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Beginning bulk redispatch for fast read failed accessories", buf, 0xCu);
    }
    [*(id *)(a1 + 56) _redispatchReadForAccessories:*(void *)(a1 + 40) dispatchGroup:*(void *)(a1 + 64) requestMap:*(void *)(a1 + 72) requestMessage:*(void *)(a1 + 80) source:*(void *)(a1 + 96) responseTuples:v2 errorResponseTuples:*(void *)(a1 + 88)];
    __HMFActivityScopeLeave();

    [*(id *)(a1 + 40) removeAllObjects];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
  return [*(id *)(a1 + 32) end];
}

void __184__HMDHome__waitForEarlyDispatchTimeoutOnReadRequest_requestMessage_source_pendingResponses_activity_slowFailedAccessories_tmpErrorResponseTuples_unreachableWaitGroup_failureWaitGroup___block_invoke_2(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v2 = [MEMORY[0x1E4F1C978] arrayWithArray:*(void *)(a1 + 32)];
  if ([v2 count])
  {
    [v2 count];
    if (*(unsigned char *)(a1 + 104)) {
      [MEMORY[0x1E4F1CA48] array];
    }
    else {
    id v3 = [*(id *)(a1 + 48) allResponses];
    }
    [*(id *)(a1 + 40) begin];
    id v8 = *(id *)(a1 + 40);
    id v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = *(id *)(a1 + 56);
    HMFGetOSLogHandle();
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v10 = v7;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Beginning bulk redispatch for unreachable read accessories", buf, 0xCu);
    }
    [*(id *)(a1 + 56) _redispatchReadForAccessories:v2 dispatchGroup:*(void *)(a1 + 64) requestMap:*(void *)(a1 + 72) requestMessage:*(void *)(a1 + 80) source:*(void *)(a1 + 96) responseTuples:v3 errorResponseTuples:*(void *)(a1 + 88)];
    __HMFActivityScopeLeave();

    [*(id *)(a1 + 32) removeObjectsInArray:v2];
  }
}

void __87__HMDHome_retrieveHAPAccessoryForHMDAccessory_linkType_forceRetrieve_queue_completion___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(a1 + 32);
  if (v4)
  {
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = __87__HMDHome_retrieveHAPAccessoryForHMDAccessory_linkType_forceRetrieve_queue_completion___block_invoke_3;
    v7[3] = &unk_1E6A19530;
    id v9 = *(id *)(a1 + 40);
    id v8 = v3;
    dispatch_async(v4, v7);
  }
  else
  {
    id v5 = _Block_copy(*(const void **)(a1 + 40));
    id v6 = v5;
    if (v5) {
      (*((void (**)(void *, id))v5 + 2))(v5, v3);
    }
  }
}

void __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = HMFGetLogIdentifier();
    id v8 = [*(id *)(a1 + 40) shortDescription];
    int v9 = 138543874;
    id v10 = v7;
    __int16 v11 = 2112;
    id v12 = v8;
    __int16 v13 = 2112;
    id v14 = v3;
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Commissioning finished for %@ with error: %@", (uint8_t *)&v9, 0x20u);
  }
}

- (void)timerDidFire:(id)a3
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v4 = (HMFTimer *)a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = [(HMDHome *)self modifyNotificationsCoalesceTimer];

  if (v6 == v4)
  {
    [(HMDHome *)self _handleCoalescedModifyNotifications];
  }
  else
  {
    id v7 = [(HMDHome *)self disableNotificationTimer];

    if (v7 == v4)
    {
      [(HMDHome *)self _handleDisableNotificationsTimerFired];
    }
    else
    {
      id v8 = [(HMDHome *)self reachabilityNotificationTimer];

      if (v8 == v4)
      {
        [(HMDHome *)self _handleRemoteReachabilityNotificationTimerFired];
      }
      else
      {
        int v9 = [(HMDHome *)self pendingResponsesTimer];

        if (v9 == v4)
        {
          [(HMDHome *)self _handlePendingResponsesTimerFired:0];
        }
        else if (self->_homeLocationTimer == v4)
        {
          id v10 = (void *)MEMORY[0x1D9452090]();
          __int16 v11 = self;
          id v12 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            __int16 v13 = HMFGetLogIdentifier();
            int v14 = 138543362;
            uint64_t v15 = v13;
            _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Evaluating home location", (uint8_t *)&v14, 0xCu);
          }
          [(HMDHome *)v11 updateHomeLocation];
        }
        else if (self->_accessoryReachabilityUpdatesTimer == v4)
        {
          [(HMDHome *)self _handleAccessoryReachabilityUpdatesTimerFired];
        }
      }
    }
  }
}

- (void)_processUpdatedProductDataForAccessory:(id)a3 hapAccessory:(id)a4 transaction:(id)a5
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  __int16 v11 = [v8 productData];
  id v12 = [(HMDHome *)self _productDataFromHAPAccessory:v9];
  __int16 v13 = v12;
  if (v11)
  {
    if (v12)
    {
      if (([v12 isEqualToString:v11] & 1) == 0)
      {
        int v14 = +[HMDVendorDataManager sharedVendorDataManager];
        uint64_t v15 = [v14 vendorModelEntryForProductData:v11];

        if (v15)
        {
          uint64_t v16 = [v15 productDataAlternates];
          char v17 = [v16 containsObject:v13];

          id v18 = (void *)MEMORY[0x1D9452090]();
          uint64_t v19 = self;
          char v20 = HMFGetOSLogHandle();
          uint64_t v21 = v20;
          if (v17)
          {
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              int v22 = v40 = v18;
              __int16 v23 = [v8 shortDescription];
              *(_DWORD *)buf = 138544130;
              id v44 = v22;
              __int16 v45 = 2112;
              id v46 = v23;
              __int16 v47 = 2112;
              id v48 = v11;
              __int16 v49 = 2112;
              id v50 = v13;
              _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Accessory %@ has changed its product data to a value that is allowed, binding: %@ -> %@", buf, 0x2Au);

              id v18 = v40;
            }

            [v10 setProductDataV2:v13];
            goto LABEL_22;
          }
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            id v34 = HMFGetLogIdentifier();
            [v8 shortDescription];
            __int16 v38 = v42 = v18;
            *(_DWORD *)buf = 138544130;
            id v44 = v34;
            __int16 v45 = 2112;
            id v46 = v38;
            __int16 v47 = 2112;
            id v48 = v11;
            __int16 v49 = 2112;
            id v50 = v13;
            _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_ERROR, "%{public}@Accessory %@ has changed its productData to a value that is not allowed, keeping previous product data: %@ -> %@", buf, 0x2Au);

            id v18 = v42;
            goto LABEL_20;
          }
        }
        else
        {
          id v18 = (void *)MEMORY[0x1D9452090]();
          uint64_t v19 = self;
          uint64_t v21 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            id v34 = HMFGetLogIdentifier();
            uint64_t v35 = [v8 shortDescription];
            [v8 manufacturer];
            uint64_t v36 = v39 = v19;
            [v8 model];
            __int16 v37 = v41 = v18;
            *(_DWORD *)buf = 138544386;
            id v44 = v34;
            __int16 v45 = 2112;
            id v46 = v35;
            __int16 v47 = 2112;
            id v48 = v36;
            __int16 v49 = 2112;
            id v50 = v37;
            __int16 v51 = 2112;
            id v52 = v11;
            _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@Accessory %@ could not be found in the VIDB, keeping previous product data (manufacturer: '%@', model: '%@', productData: '%@')", buf, 0x34u);

            id v18 = v41;
            uint64_t v19 = v39;

            uint64_t v15 = 0;
LABEL_20:
          }
        }

LABEL_22:
      }
    }
    else
    {
      id v29 = (void *)MEMORY[0x1D9452090]();
      id v30 = self;
      id v31 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        __int16 v32 = HMFGetLogIdentifier();
        id v33 = [v8 shortDescription];
        *(_DWORD *)buf = 138543874;
        id v44 = v32;
        __int16 v45 = 2112;
        id v46 = v33;
        __int16 v47 = 2112;
        id v48 = v11;
        _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_ERROR, "%{public}@Accessory %@ is no longer advertising product data, keeping previous product data %@", buf, 0x20u);
      }
    }
  }
  else if (v12)
  {
    id v24 = (void *)MEMORY[0x1D9452090]();
    id v25 = self;
    int v26 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      id v27 = HMFGetLogIdentifier();
      uint64_t v28 = [v8 shortDescription];
      *(_DWORD *)buf = 138543874;
      id v44 = v27;
      __int16 v45 = 2112;
      id v46 = v28;
      __int16 v47 = 2112;
      id v48 = v13;
      _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_DEFAULT, "%{public}@Accessory %@ is now bound to product data %@", buf, 0x20u);
    }
    [v10 setProductDataV2:v13];
    [v10 setProductData:v13];
  }
}

- (id)_productDataFromHAPAccessory:(id)a3
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 server];
  id v6 = [v5 productData];

  if (v6)
  {
    id v7 = [v5 productData];
    BOOL v8 = +[HMDAccessory validateProductData:v7];

    if (v8)
    {
      uint64_t v9 = [v4 productData];
      if (v9)
      {
        id v10 = (void *)v9;
        __int16 v11 = [v5 productData];
        id v12 = [v4 productData];
        char v13 = [v11 isEqualToString:v12];

        if ((v13 & 1) == 0)
        {
          int v14 = (void *)MEMORY[0x1D9452090]();
          uint64_t v15 = self;
          uint64_t v16 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            char v17 = HMFGetLogIdentifier();
            id v18 = [v4 shortDescription];
            uint64_t v19 = [v5 productData];
            char v20 = [v4 productData];
            int v52 = 138544130;
            uint64_t v53 = v17;
            __int16 v54 = 2112;
            unint64_t v55 = v18;
            __int16 v56 = 2112;
            char v57 = v19;
            __int16 v58 = 2112;
            id v59 = v20;
            _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_ERROR, "%{public}@Accessory %@ is using productData from pair setup that differs from productData published on AIS: %@ != %@", (uint8_t *)&v52, 0x2Au);
          }
        }
      }
      uint64_t v21 = v5;
      goto LABEL_15;
    }
    int v22 = (void *)MEMORY[0x1D9452090]();
    __int16 v23 = self;
    id v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      id v25 = HMFGetLogIdentifier();
      int v26 = [v4 shortDescription];
      id v27 = [v5 productData];
      int v52 = 138543874;
      uint64_t v53 = v25;
      __int16 v54 = 2112;
      unint64_t v55 = v26;
      __int16 v56 = 2112;
      char v57 = v27;
      _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_ERROR, "%{public}@Accessory %@ has invalid productData from pair setup: %@", (uint8_t *)&v52, 0x20u);
    }
  }
  uint64_t v28 = [v4 productData];

  if (v28)
  {
    id v29 = [v4 productData];
    BOOL v30 = +[HMDAccessory validateProductData:v29];

    if (v30)
    {
      uint64_t v21 = v4;
LABEL_15:
      id v31 = [v21 productData];
      goto LABEL_29;
    }
    __int16 v32 = (void *)MEMORY[0x1D9452090]();
    id v33 = self;
    id v34 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      uint64_t v35 = HMFGetLogIdentifier();
      uint64_t v36 = [v4 shortDescription];
      __int16 v37 = [v4 productData];
      int v52 = 138543874;
      uint64_t v53 = v35;
      __int16 v54 = 2112;
      unint64_t v55 = v36;
      __int16 v56 = 2112;
      char v57 = v37;
      _os_log_impl(&dword_1D49D5000, v34, OS_LOG_TYPE_ERROR, "%{public}@Accessory %@ has invalid productData published on AIS: %@", (uint8_t *)&v52, 0x20u);
    }
  }
  __int16 v38 = +[HMDVendorDataManager sharedVendorDataManager];
  __int16 v39 = [v4 manufacturer];
  id v40 = [v4 model];
  uint64_t v41 = [v38 vendorModelEntryForManufacturer:v39 model:v40];

  if (!v41)
  {
    id v43 = (void *)MEMORY[0x1D9452090]();
    id v44 = self;
    __int16 v45 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      id v46 = HMFGetLogIdentifier();
      __int16 v47 = [v4 shortDescription];
      id v48 = [v4 manufacturer];
      __int16 v49 = [v4 model];
      int v52 = 138544130;
      uint64_t v53 = v46;
      __int16 v54 = 2112;
      unint64_t v55 = v47;
      __int16 v56 = 2112;
      char v57 = v48;
      __int16 v58 = 2112;
      id v59 = v49;
      id v50 = "%{public}@Accessory %@ could not be found in the VIDB (manufacturer: '%@', model: '%@')";
LABEL_26:
      _os_log_impl(&dword_1D49D5000, v45, OS_LOG_TYPE_ERROR, v50, (uint8_t *)&v52, 0x2Au);
    }
LABEL_27:

    id v31 = 0;
    goto LABEL_28;
  }
  uint64_t v42 = [v41 productData];

  if (!v42)
  {
    id v43 = (void *)MEMORY[0x1D9452090]();
    id v44 = self;
    __int16 v45 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      id v46 = HMFGetLogIdentifier();
      __int16 v47 = [v4 shortDescription];
      id v48 = [v4 manufacturer];
      __int16 v49 = [v4 model];
      int v52 = 138544130;
      uint64_t v53 = v46;
      __int16 v54 = 2112;
      unint64_t v55 = v47;
      __int16 v56 = 2112;
      char v57 = v48;
      __int16 v58 = 2112;
      id v59 = v49;
      id v50 = "%{public}@Accessory %@ does not have productData in the VIDB (manufacturer: '%@', model: '%@')";
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  id v31 = [v41 productData];
LABEL_28:

LABEL_29:
  return v31;
}

- (id)homeBulletinContext
{
  v9[2] = *MEMORY[0x1E4F143B8];
  v8[0] = @"home";
  id v3 = [(HMDHome *)self contextID];
  v9[0] = v3;
  v8[1] = *MEMORY[0x1E4F2CA98];
  id v4 = [(HMDHome *)self contextSPIUniqueIdentifier];
  id v5 = [v4 UUIDString];
  v9[1] = v5;
  id v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:v8 count:2];

  return v6;
}

- (NSUUID)contextSPIUniqueIdentifier
{
  id v3 = +[HMDProcessInfo privateClientIdentifierSalt];
  id v4 = (void *)MEMORY[0x1E4F29128];
  id v5 = [(HMDHome *)self uuid];
  id v6 = objc_msgSend(v4, "hm_deriveUUIDFromBaseUUID:identifierSalt:", v5, v3);

  return (NSUUID *)v6;
}

- (NSString)contextID
{
  int v2 = [(HMDHome *)self uuid];
  id v3 = [v2 UUIDString];

  return (NSString *)v3;
}

- (void)updateHasOnboardedForWalletKey:(BOOL)a3 message:(id)a4
{
  BOOL v4 = a3;
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v6 = a4;
  if ([(HMDHome *)self hasOnboardedForWalletKey] != v4)
  {
    id v7 = (void *)MEMORY[0x1D9452090]();
    BOOL v8 = self;
    uint64_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      id v10 = HMFGetLogIdentifier();
      [(HMDHome *)v8 hasOnboardedForWalletKey];
      __int16 v11 = HMFBooleanToString();
      id v12 = HMFBooleanToString();
      int v23 = 138544130;
      id v24 = v10;
      __int16 v25 = 2112;
      int v26 = v11;
      __int16 v27 = 2112;
      uint64_t v28 = v12;
      __int16 v29 = 2112;
      id v30 = v6;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Updating has onboarded for wallet key from %@ to %@ with message: %@", (uint8_t *)&v23, 0x2Au);
    }
    char v13 = [HMDHomeModel alloc];
    int v14 = [(HMDHome *)v8 uuid];
    uint64_t v15 = [(HMDHome *)v8 homeManager];
    uint64_t v16 = [v15 uuid];
    char v17 = [(HMDBackingStoreModelObject *)v13 initWithObjectChangeType:2 uuid:v14 parentUUID:v16];

    if (v4) {
      uint64_t v18 = MEMORY[0x1E4F1CC38];
    }
    else {
      uint64_t v18 = MEMORY[0x1E4F1CC28];
    }
    [(HMDHomeModel *)v17 setHasOnboardedForWalletKey:v18];
    uint64_t v19 = [(HMDHome *)v8 backingStore];
    char v20 = [v6 name];
    uint64_t v21 = +[HMDBackingStoreTransactionOptions defaultPreferencesOptions];
    int v22 = [v19 transaction:v20 options:v21];

    [v22 add:v17 withMessage:v6];
    [v22 run];
  }
}

- (BOOL)hasPostedWalletKeyOnboardingBulletinForAnyAccessory
{
  int v2 = [(HMDHome *)self accessories];
  char v3 = objc_msgSend(v2, "na_any:", &__block_literal_global_8_1534);

  return v3;
}

uint64_t __70__HMDHome_Wallet__hasPostedWalletKeyOnboardingBulletinForAnyAccessory__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  id v4 = v3;
  uint64_t v5 = [v4 hasPostedBulletinForWalletKeyOnboarding];

  return v5;
}

- (BOOL)hasAnyAccessoryWithWalletKeyAndAccessCodeSupport
{
  id v2 = [(HMDHome *)self accessories];
  char v3 = objc_msgSend(v2, "na_any:", &__block_literal_global_3);

  return v3;
}

uint64_t __67__HMDHome_Wallet__hasAnyAccessoryWithWalletKeyAndAccessCodeSupport__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  id v4 = v3;
  unsigned int v5 = [v4 supportsAccessCode];
  int v6 = [v4 supportsWalletKey];

  return v6 & v5;
}

- (BOOL)hasAnyAccessoryWithWalletKeySupport
{
  id v2 = [(HMDHome *)self accessories];
  char v3 = objc_msgSend(v2, "na_any:", &__block_literal_global_1537);

  return v3;
}

uint64_t __54__HMDHome_Wallet__hasAnyAccessoryWithWalletKeySupport__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  id v4 = v3;
  uint64_t v5 = [v4 supportsWalletKey];

  return v5;
}

+ (id)nfcIssuerKeyIdentifierWithPairingIdentity:(id)a3
{
  char v3 = [a3 publicKey];
  id v4 = [v3 data];
  uint64_t v5 = +[HMDHomeNFCReaderKey identifierForKey:v4];

  return v5;
}

- (BOOL)isPrimaryResidentNodeReachable
{
  id v2 = [(HMDHome *)self primaryResident];
  char v3 = [v2 isReachable];

  return v3;
}

- (id)currentDeviceControllerNodeID
{
  return 0;
}

- (id)privateDataSourceForNode:(id)a3
{
  return 0;
}

- (BOOL)areAllThreadResidentNodesUnreachable
{
  id v2 = [(HMDHome *)self enabledResidents];
  char v3 = objc_msgSend(v2, "na_allObjectsPassTest:", &__block_literal_global_275);

  return v3;
}

uint64_t __53__HMDHome_CHIP__areAllThreadResidentNodesUnreachable__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  char v3 = [v2 capabilities];
  if ([v3 supportsThreadBorderRouter]) {
    uint64_t v4 = [v2 isReachable] ^ 1;
  }
  else {
    uint64_t v4 = 1;
  }

  return v4;
}

- (BOOL)isPrimaryResidentNodeReachableAndThreadCapable
{
  char v3 = [(HMDHome *)self primaryResident];
  if ([v3 isReachable])
  {
    uint64_t v4 = [(HMDHome *)self primaryResident];
    uint64_t v5 = [v4 capabilities];
    char v6 = [v5 supportsThreadBorderRouter];
  }
  else
  {
    char v6 = 0;
  }

  return v6;
}

- (void)updateUserCATWithOperatePrivilege:(id)a3 administerPrivilege:(id)a4 completion:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  __int16 v11 = [(HMDHome *)self workQueue];
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __82__HMDHome_CHIP__updateUserCATWithOperatePrivilege_administerPrivilege_completion___block_invoke;
  v15[3] = &unk_1E6A18398;
  void v15[4] = self;
  id v16 = v8;
  id v17 = v9;
  id v18 = v10;
  id v12 = v10;
  id v13 = v9;
  id v14 = v8;
  dispatch_async(v11, v15);
}

void __82__HMDHome_CHIP__updateUserCATWithOperatePrivilege_administerPrivilege_completion___block_invoke(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v2 = [*(id *)(a1 + 32) backingStore];
  char v3 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  __int16 v32 = [v2 transaction:@"UpdatingUserCATIDs" options:v3];

  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v4 = [*(id *)(v1 + 32) users];
  uint64_t v5 = [v4 countByEnumeratingWithState:&v34 objects:v46 count:16];
  if (!v5)
  {

    goto LABEL_23;
  }
  uint64_t v7 = v5;
  char v8 = 0;
  uint64_t v9 = *(void *)v35;
  id v33 = (id *)(v1 + 48);
  uint64_t v31 = v1;
  id v10 = (id *)(v1 + 40);
  *(void *)&long long v6 = 138544130;
  long long v28 = v6;
  id v30 = v4;
  do
  {
    for (uint64_t i = 0; i != v7; ++i)
    {
      if (*(void *)v35 != v9) {
        objc_enumerationMutation(v4);
      }
      id v12 = *(void **)(*((void *)&v34 + 1) + 8 * i);
      uint64_t v13 = objc_msgSend(v12, "privilege", v28);
      if (v13 != 4)
      {
        if (v13 == 3)
        {
          if (!*v33) {
            continue;
          }
          id v17 = [v12 matterCASEAuthenticatedTagID];
          char v18 = [v17 isEqual:*v33];

          id v16 = v33;
          if (v18) {
            continue;
          }
          goto LABEL_14;
        }
        if (v13) {
          continue;
        }
      }
      if (!*v10) {
        continue;
      }
      id v14 = [v12 matterCASEAuthenticatedTagID];
      char v15 = [v14 isEqual:*v10];

      id v16 = v10;
      if (v15) {
        continue;
      }
LABEL_14:
      id v19 = *v16;
      if (v19)
      {
        char v20 = v19;
        uint64_t v21 = (void *)[v12 newModelWithChangeType:2];
        [v21 setMatterCASEAuthenticatedTagID:v20];
        int v22 = (void *)MEMORY[0x1D9452090]([v32 add:v21]);
        id v23 = *(id *)(v31 + 32);
        id v24 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          __int16 v25 = v29 = v22;
          uint64_t v26 = [v20 integerValue];
          *(_DWORD *)buf = v28;
          __int16 v39 = v25;
          __int16 v40 = 2112;
          uint64_t v41 = v12;
          __int16 v42 = 2048;
          uint64_t v43 = v26;
          __int16 v44 = 2112;
          __int16 v45 = v20;
          _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_INFO, "%{public}@Updated CATID transaction for user %@ to 0x%lX (%@)", buf, 0x2Au);

          int v22 = v29;
        }

        char v8 = 1;
        uint64_t v4 = v30;
      }
    }
    uint64_t v7 = [v4 countByEnumeratingWithState:&v34 objects:v46 count:16];
  }
  while (v7);

  uint64_t v1 = v31;
  if (v8)
  {
    [v32 run:*(void *)(v31 + 56)];
    goto LABEL_25;
  }
LABEL_23:
  uint64_t v27 = *(void *)(v1 + 56);
  if (v27) {
    (*(void (**)(uint64_t, void))(v27 + 16))(v27, 0);
  }
LABEL_25:
}

- (void)updateUserCATWithOperatePrivilege:(id)a3 administerPrivilege:(id)a4
{
}

- (void)incrementOperatePrivilegeCATVersion:(id)a3
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void (**)(id, void *))a3;
  uint64_t v5 = [(HMDHome *)self accessoryOperatePrivilegeCATID:1];
  int v12 = 0;
  [MEMORY[0x1E4F6A108] parseCaseAuthenticatedTag:v5 identifier:(char *)&v12 + 2 version:&v12];
  long long v6 = [MEMORY[0x1E4F6A108] caseAuthenticatedTagWithIdentifier:HIWORD(v12) version:(unsigned __int16)(v12 + 1)];
  uint64_t v7 = (void *)MEMORY[0x1D9452090]();
  char v8 = self;
  uint64_t v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    id v10 = HMFGetLogIdentifier();
    uint64_t v11 = [v6 integerValue];
    *(_DWORD *)buf = 138543874;
    id v14 = v10;
    __int16 v15 = 2048;
    uint64_t v16 = v11;
    __int16 v17 = 2112;
    char v18 = v6;
    _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Bumping tag version for operate as 0x%lX (%@)", buf, 0x20u);
  }
  v4[2](v4, v6);
}

- (id)accessoryAdministerPrivilegeCATID:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v5 = [(HMDHome *)self users];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v34 objects:v46 count:16];
  if (!v6)
  {
LABEL_21:

LABEL_22:
    char v8 = [(HMDHome *)self currentAdministerCATID];

    if (v8)
    {
      char v8 = [(HMDHome *)self currentAdministerCATID];
    }
    if (!v8 && v3)
    {
      char v8 = objc_msgSend(MEMORY[0x1E4F6A108], "caseAuthenticatedTagWithIdentifier:version:", objc_msgSend(MEMORY[0x1E4F6A108], "randomCASEAuthenticatedTagIdentifier"), 1);
      uint64_t v27 = (void *)MEMORY[0x1D9452090]();
      long long v28 = self;
      __int16 v29 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        id v30 = HMFGetLogIdentifier();
        uint64_t v31 = [v8 integerValue];
        *(_DWORD *)buf = 138543874;
        __int16 v39 = v30;
        __int16 v40 = 2048;
        uint64_t v41 = v31;
        __int16 v42 = 2112;
        uint64_t v43 = (uint64_t)v8;
        _os_log_impl(&dword_1D49D5000, v29, OS_LOG_TYPE_INFO, "%{public}@Generated new CAT for accessory administer 0x%lX (%@)", buf, 0x20u);
      }
    }
    goto LABEL_29;
  }
  uint64_t v7 = v6;
  BOOL v33 = v3;
  char v8 = 0;
  uint64_t v9 = *(void *)v35;
  while (2)
  {
    for (uint64_t i = 0; i != v7; ++i)
    {
      if (*(void *)v35 != v9) {
        objc_enumerationMutation(v5);
      }
      uint64_t v11 = *(void **)(*((void *)&v34 + 1) + 8 * i);
      if ([v11 privilege] == 3)
      {
        if (v8
          || ([v11 matterCASEAuthenticatedTagID],
              char v18 = objc_claimAutoreleasedReturnValue(),
              v18,
              !v18))
        {
          int v12 = [v11 matterCASEAuthenticatedTagID];
          char v13 = [v12 isEqual:v8];

          if ((v13 & 1) == 0)
          {
            uint64_t v14 = [v11 matterCASEAuthenticatedTagID];
            if (v14)
            {
              __int16 v15 = (void *)v14;
              uint64_t v16 = [v11 matterCASEAuthenticatedTagID];
              char v17 = [v16 isEqual:v8];

              if ((v17 & 1) == 0)
              {
                uint64_t v19 = (void *)MEMORY[0x1D9452090]();
                char v20 = self;
                uint64_t v21 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
                {
                  id v23 = HMFGetLogIdentifier();
                  uint64_t v24 = [v8 integerValue];
                  __int16 v25 = [v11 matterCASEAuthenticatedTagID];
                  uint64_t v26 = [v25 integerValue];
                  *(_DWORD *)buf = 138544130;
                  __int16 v39 = v23;
                  __int16 v40 = 2048;
                  uint64_t v41 = v24;
                  __int16 v42 = 2048;
                  uint64_t v43 = v26;
                  __int16 v44 = 2112;
                  __int16 v45 = v11;
                  _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_ERROR, "%{public}@CATID mismatch between users - current 0x%lX userCAT 0x%lX user %@", buf, 0x2Au);
                }

                BOOL v3 = v33;
                goto LABEL_21;
              }
            }
          }
        }
        else
        {
          char v8 = [v11 matterCASEAuthenticatedTagID];
        }
      }
    }
    uint64_t v7 = [v5 countByEnumeratingWithState:&v34 objects:v46 count:16];
    if (v7) {
      continue;
    }
    break;
  }

  BOOL v3 = v33;
  if (!v8) {
    goto LABEL_22;
  }
LABEL_29:
  [(HMDHome *)self setCurrentAdministerCATID:v8];
  return v8;
}

- (id)accessoryOperatePrivilegeCATID:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v5 = [(HMDHome *)self users];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v34 objects:v46 count:16];
  if (!v6)
  {
LABEL_21:

LABEL_22:
    char v8 = [(HMDHome *)self currentOperateCATID];

    if (v8)
    {
      char v8 = [(HMDHome *)self currentOperateCATID];
    }
    if (!v8 && v3)
    {
      char v8 = objc_msgSend(MEMORY[0x1E4F6A108], "caseAuthenticatedTagWithIdentifier:version:", objc_msgSend(MEMORY[0x1E4F6A108], "randomCASEAuthenticatedTagIdentifier"), 1);
      uint64_t v27 = (void *)MEMORY[0x1D9452090]();
      long long v28 = self;
      __int16 v29 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        id v30 = HMFGetLogIdentifier();
        uint64_t v31 = [v8 integerValue];
        *(_DWORD *)buf = 138543874;
        __int16 v39 = v30;
        __int16 v40 = 2048;
        uint64_t v41 = v31;
        __int16 v42 = 2112;
        uint64_t v43 = (uint64_t)v8;
        _os_log_impl(&dword_1D49D5000, v29, OS_LOG_TYPE_INFO, "%{public}@Generated new CAT for accessory operate 0x%lX (%@)", buf, 0x20u);
      }
    }
    goto LABEL_29;
  }
  uint64_t v7 = v6;
  BOOL v33 = v3;
  char v8 = 0;
  uint64_t v9 = *(void *)v35;
  while (2)
  {
    for (uint64_t i = 0; i != v7; ++i)
    {
      if (*(void *)v35 != v9) {
        objc_enumerationMutation(v5);
      }
      uint64_t v11 = *(void **)(*((void *)&v34 + 1) + 8 * i);
      if (([v11 privilege] | 4) == 4)
      {
        if (v8
          || ([v11 matterCASEAuthenticatedTagID],
              char v18 = objc_claimAutoreleasedReturnValue(),
              v18,
              !v18))
        {
          int v12 = [v11 matterCASEAuthenticatedTagID];
          char v13 = [v12 isEqual:v8];

          if ((v13 & 1) == 0)
          {
            uint64_t v14 = [v11 matterCASEAuthenticatedTagID];
            if (v14)
            {
              __int16 v15 = (void *)v14;
              uint64_t v16 = [v11 matterCASEAuthenticatedTagID];
              char v17 = [v16 isEqual:v8];

              if ((v17 & 1) == 0)
              {
                uint64_t v19 = (void *)MEMORY[0x1D9452090]();
                char v20 = self;
                uint64_t v21 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
                {
                  id v23 = HMFGetLogIdentifier();
                  uint64_t v24 = [v8 integerValue];
                  __int16 v25 = [v11 matterCASEAuthenticatedTagID];
                  uint64_t v26 = [v25 integerValue];
                  *(_DWORD *)buf = 138544130;
                  __int16 v39 = v23;
                  __int16 v40 = 2048;
                  uint64_t v41 = v24;
                  __int16 v42 = 2048;
                  uint64_t v43 = v26;
                  __int16 v44 = 2112;
                  __int16 v45 = v11;
                  _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_ERROR, "%{public}@CATID mismatch between users - current 0x%lX userCAT 0x%lX user %@", buf, 0x2Au);
                }

                BOOL v3 = v33;
                goto LABEL_21;
              }
            }
          }
        }
        else
        {
          char v8 = [v11 matterCASEAuthenticatedTagID];
        }
      }
    }
    uint64_t v7 = [v5 countByEnumeratingWithState:&v34 objects:v46 count:16];
    if (v7) {
      continue;
    }
    break;
  }

  BOOL v3 = v33;
  if (!v8) {
    goto LABEL_22;
  }
LABEL_29:
  [(HMDHome *)self setCurrentOperateCATID:v8];
  return v8;
}

- (BOOL)hasSharedUser
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = [(HMDHome *)self users];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if ([v7 privilege] == 4 || !objc_msgSend(v7, "privilege"))
        {
          BOOL v8 = 1;
          goto LABEL_13;
        }
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
      BOOL v8 = 0;
      if (v4) {
        continue;
      }
      break;
    }
  }
  else
  {
    BOOL v8 = 0;
  }
LABEL_13:

  return v8;
}

- (void)updateCATIDsForUsersIfNeeded:(BOOL)a3 completion:(id)a4
{
  if (a4) {
    (*((void (**)(id, void))a4 + 2))(a4, 0);
  }
}

- (void)updateCATIDForUsersIfNeeded:(BOOL)a3
{
}

- (BOOL)_doesUsersHaveCATID
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v2 = [(HMDHome *)self users];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v13;
LABEL_3:
    uint64_t v6 = 0;
    while (1)
    {
      if (*(void *)v13 != v5) {
        objc_enumerationMutation(v2);
      }
      uint64_t v7 = *(void **)(*((void *)&v12 + 1) + 8 * v6);
      BOOL v8 = [v7 matterCASEAuthenticatedTagID];
      if (!v8) {
        break;
      }
      uint64_t v9 = [v7 matterCASEAuthenticatedTagID];
      int v10 = [v9 intValue];

      if (!v10)
      {
        LOBYTE(v8) = 0;
        break;
      }
      if (v4 == ++v6)
      {
        uint64_t v4 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
        LOBYTE(v8) = 1;
        if (v4) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
  else
  {
    LOBYTE(v8) = 1;
  }

  return (char)v8;
}

- (void)_clearCHIPStorageWithCompletion:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self chipStorage];
  uint64_t v6 = [v5 keyValueStore];
  uint64_t v7 = [v6 count];

  if (v7)
  {
    BOOL v8 = [HMDCHIPHomeDataSource alloc];
    uint64_t v9 = [(HMDHome *)self matterFabricID];
    int v10 = [(HMDCHIPHomeDataSource *)v8 initWithFabricID:v9 home:self];

    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __49__HMDHome_CHIP___clearCHIPStorageWithCompletion___block_invoke;
    v11[3] = &unk_1E6A17D78;
    void v11[4] = self;
    id v12 = v4;
    [(HMDCHIPHomeDataSource *)v10 updateKeyValueStore:MEMORY[0x1E4F1CC08] completion:v11];
  }
  else
  {
    (*((void (**)(id, void))v4 + 2))(v4, 0);
  }
}

void __49__HMDHome_CHIP___clearCHIPStorageWithCompletion___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __49__HMDHome_CHIP___clearCHIPStorageWithCompletion___block_invoke_2;
  v7[3] = &unk_1E6A19530;
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t __49__HMDHome_CHIP___clearCHIPStorageWithCompletion___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

- (void)_handleResetMatterStorageRequest:(id)a3
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 stringForKey:*MEMORY[0x1E4F2D6A8]];
  id v6 = (void *)MEMORY[0x1D9452090]();
  uint64_t v7 = self;
  id v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    long long v36 = v9;
    __int16 v37 = 2112;
    __int16 v38 = v5;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Handling request to reset Matter storage with corruption option: %@", buf, 0x16u);
  }
  if ([v5 isEqual:*MEMORY[0x1E4F2D698]])
  {
    if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
    {
      int v10 = [(HMDHome *)v7 fabric];
      long long v11 = [v10 storage];

      id v12 = [v11 nocSigner];
      uint64_t v13 = [v11 operationalKeyPair];
      long long v14 = (void *)v13;
      if (v12 && v13)
      {
        [v11 setNocSigner:v13];
        long long v15 = [(HMDHome *)v7 fabric];
        [v15 invalidateCachedData];

        uint64_t v16 = [(HMDHome *)v7 fabric];
        v30[0] = MEMORY[0x1E4F143A8];
        v30[1] = 3221225472;
        v30[2] = __50__HMDHome_CHIP___handleResetMatterStorageRequest___block_invoke;
        v30[3] = &unk_1E6A143D0;
        id v31 = v11;
        id v32 = v12;
        BOOL v33 = v7;
        id v34 = v4;
        [v16 createNewFabricIdentityWithCompletion:v30];

        uint64_t v17 = v31;
      }
      else
      {
        id v23 = (void *)MEMORY[0x1D9452090]();
        uint64_t v24 = v7;
        __int16 v25 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          uint64_t v26 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          long long v36 = v26;
          _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_ERROR, "%{public}@Cannot generate bad fabric data when fabric isn't created yet", buf, 0xCu);
        }
        uint64_t v17 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
        [v4 respondWithError:v17];
      }
    }
    else
    {
      char v18 = (void *)MEMORY[0x1D9452090]();
      uint64_t v19 = v7;
      char v20 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        long long v36 = v21;
        _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_ERROR, "%{public}@Bad-cert option for resetting Matter storage is not supported in current configuration", buf, 0xCu);
      }
      int v22 = [MEMORY[0x1E4F28C58] hmfErrorWithCode:5];
      [v4 respondWithError:v22];
    }
  }
  else
  {
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = __50__HMDHome_CHIP___handleResetMatterStorageRequest___block_invoke_265;
    v27[3] = &unk_1E6A18BA0;
    v27[4] = v7;
    id v28 = v4;
    id v29 = v5;
    [(HMDHome *)v7 _clearCHIPStorageWithCompletion:v27];
  }
}

void __50__HMDHome_CHIP___handleResetMatterStorageRequest___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  [*(id *)(a1 + 32) setNocSigner:*(void *)(a1 + 40)];
  id v4 = [*(id *)(a1 + 48) fabric];
  [v4 invalidateCachedData];

  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = HMFGetOSLogHandle();
  id v8 = v7;
  if (v3)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v9 = HMFGetLogIdentifier();
      int v11 = 138543618;
      id v12 = v9;
      __int16 v13 = 2112;
      id v14 = v3;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to generate bad fabric data into Matter storage: %@", (uint8_t *)&v11, 0x16u);
    }
    [*(id *)(a1 + 56) respondWithError:v3];
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v10 = HMFGetLogIdentifier();
      int v11 = 138543362;
      id v12 = v10;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Replaced Matter storage with bad fabric data", (uint8_t *)&v11, 0xCu);
    }
    [*(id *)(a1 + 56) respondWithSuccess];
  }
}

void __50__HMDHome_CHIP___handleResetMatterStorageRequest___block_invoke_265(id *a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = a1[4];
    id v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v32 = v7;
      __int16 v33 = 2112;
      id v34 = v3;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to clear CHIP storage: %@", buf, 0x16u);
    }
    [a1[5] respondWithError:v3];
    goto LABEL_19;
  }
  if ([a1[6] isEqual:*MEMORY[0x1E4F2D6A0]])
  {
    if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
    {
      id v8 = [a1[4] fabric];
      [v8 invalidateCachedData];

      id v9 = (void *)MEMORY[0x1D9452090]();
      id v10 = a1[4];
      int v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        id v12 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v32 = v12;
        _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Cleared and left CHIP storage as empty", buf, 0xCu);
      }
      [a1[5] respondWithSuccess];
      goto LABEL_19;
    }
    __int16 v13 = (void *)MEMORY[0x1D9452090]();
    id v14 = a1[4];
    uint64_t v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v32 = v16;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_ERROR, "%{public}@Empty storage option for resetting Matter storage is not supported in current configuration - option is ignored", buf, 0xCu);
    }
  }
  uint64_t v17 = [a1[4] homeManager];
  char v18 = v17;
  if (v17)
  {
    uint64_t v19 = [v17 accessoryBrowser];
    char v20 = [v19 chipAccessoryServerBrowser];
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    v28[2] = __50__HMDHome_CHIP___handleResetMatterStorageRequest___block_invoke_266;
    v28[3] = &unk_1E6A091B8;
    id v21 = a1[5];
    v28[4] = a1[4];
    id v29 = v21;
    id v30 = v18;
    [v20 createNewFabricIDWithCompletion:v28];
  }
  else
  {
    int v22 = (void *)MEMORY[0x1D9452090]();
    id v23 = a1[4];
    uint64_t v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      __int16 v25 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v32 = v25;
      _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_ERROR, "%{public}@Cleared CHIP storage but no home manager to create new Matter storage with", buf, 0xCu);
    }
    id v26 = a1[5];
    uint64_t v27 = [MEMORY[0x1E4F28C58] hmfErrorWithCode:2];
    [v26 respondWithError:v27];
  }
LABEL_19:
}

void __50__HMDHome_CHIP___handleResetMatterStorageRequest___block_invoke_266(id *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = a1[4];
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    id v23 = v7;
    __int16 v24 = 2112;
    id v25 = v3;
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Creating new CHIP storage content with fabric ID %@", buf, 0x16u);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __50__HMDHome_CHIP___handleResetMatterStorageRequest___block_invoke_267;
  aBlock[3] = &unk_1E6A18BA0;
  void aBlock[4] = a1[4];
  id v8 = v3;
  id v20 = v8;
  id v21 = a1[5];
  id v9 = _Block_copy(aBlock);
  int v10 = isFeatureMatterLocalFabricConfigEnabled();
  id v11 = a1[4];
  if (v10)
  {
    id v12 = [v11 fabric];
    [v12 invalidateCachedData];

    __int16 v13 = [a1[4] fabric];
    [v13 setFabricID:v8];

    id v14 = [a1[4] chipStorage];
    [v14 setFabricID:v8];

    uint64_t v15 = [a1[6] accessoryBrowser];
    uint64_t v16 = [v15 chipAccessoryServerBrowser];
    uint64_t v17 = [a1[4] fabric];
    [v16 createNewFabricDataForFabric:v17 completion:v9];
  }
  else
  {
    char v18 = [v11 chipStorage];
    [v18 setFabricID:v8];

    uint64_t v15 = [a1[6] accessoryBrowser];
    uint64_t v16 = [v15 chipAccessoryServerBrowser];
    [v16 createNewFabricDataForFabricID:v8 completion:v9];
  }
}

void __50__HMDHome_CHIP___handleResetMatterStorageRequest___block_invoke_267(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  uint64_t v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v8 = HMFGetLogIdentifier();
      uint64_t v9 = *(void *)(a1 + 40);
      int v12 = 138543874;
      __int16 v13 = v8;
      __int16 v14 = 2112;
      uint64_t v15 = v9;
      __int16 v16 = 2112;
      id v17 = v3;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to create new fabric data for fabric ID %@: %@", (uint8_t *)&v12, 0x20u);
    }
    [*(id *)(a1 + 48) respondWithError:v3];
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v10 = HMFGetLogIdentifier();
      uint64_t v11 = *(void *)(a1 + 40);
      int v12 = 138543618;
      __int16 v13 = v10;
      __int16 v14 = 2112;
      uint64_t v15 = v11;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Successfully created new fabric data for fabric ID %@", (uint8_t *)&v12, 0x16u);
    }
    [*(id *)(a1 + 48) respondWithSuccess];
  }
}

- (void)handleMatterPairingCompletionNotification:(id)a3
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 numberForKey:@"HMDHomePairingCompletionNodeIDMessageKey"];
  id v6 = [v4 numberForKey:@"HMDHomePairingCompletionFabricIDMessageKey"];
  uint64_t v7 = [v4 numberForKey:@"HMDHomePairingCompletionVendorIDMessageKey"];
  id v8 = [v4 numberForKey:@"HMDHomePairingCompletionProductIDMessageKey"];
  uint64_t v9 = [v4 numberForKey:@"HMDHomePairingCompletionConfigNumberMessageKey"];
  int v10 = [v4 numberForKey:@"HMDHomePairingCompletionCategoryMessageKey"];
  uint64_t v11 = [v4 dataForKey:@"HMDHomePairingCompletionTopologyMessageKey"];
  int v12 = (void *)v11;
  if (v5 && v6)
  {
    id v21 = [(HMDHome *)self homeManager];
    __int16 v13 = [v21 accessoryBrowserInternal];
    __int16 v14 = [v13 chipAccessoryServerBrowser];
    [v14 handlePairingCompletionForAccessoryWithNodeID:v5 fabricID:v6 vendorID:v7 productID:v8 configNumber:v9 category:v10 topology:v12];

    [v4 respondWithSuccess];
  }
  else
  {
    id v20 = v10;
    int v22 = (void *)v11;
    uint64_t v15 = (void *)MEMORY[0x1D9452090]();
    __int16 v16 = self;
    id v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      __int16 v24 = v18;
      __int16 v25 = 2112;
      uint64_t v26 = v5;
      __int16 v27 = 2112;
      id v28 = v6;
      _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_ERROR, "%{public}@Resident cannot establish connection with accessory with accessory node ID = %@, fabric ID = %@", buf, 0x20u);
    }
    uint64_t v19 = [MEMORY[0x1E4F28C58] hmfErrorWithCode:8];
    [v4 respondWithError:v19];

    int v10 = v20;
    int v12 = v22;
  }
}

- (void)handleCommissioningCertificateRequestWithCommissionerNodeID:(id)a3 commissioneeNodeID:(id)a4 fabricID:(id)a5 publicKey:(id)a6 sender:(id)a7 completion:(id)a8
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  if (![(HMDHome *)self isOwnerUser])
  {
    id v23 = (void *)MEMORY[0x1D9452090]();
    __int16 v24 = self;
    __int16 v25 = HMFGetOSLogHandle();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    uint64_t v26 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    uint64_t v80 = v26;
    id v28 = "%{public}@Non-owner user cannot handle request to generate certificates";
    uint64_t v29 = v25;
    uint32_t v30 = 12;
LABEL_13:
    _os_log_impl(&dword_1D49D5000, v29, OS_LOG_TYPE_ERROR, v28, buf, v30);
LABEL_14:

    goto LABEL_15;
  }
  if (!v17)
  {
    id v23 = (void *)MEMORY[0x1D9452090]();
    __int16 v24 = self;
    __int16 v25 = HMFGetOSLogHandle();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    uint64_t v26 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    uint64_t v80 = v26;
    __int16 v81 = 2112;
    id v82 = 0;
    id v28 = "%{public}@Cannot handle remote request to retrieve certificates with public Key: %@";
    uint64_t v29 = v25;
    uint32_t v30 = 22;
    goto LABEL_13;
  }
  if (!isFeatureMatterLocalFabricConfigEnabled())
  {
    if (([v16 isEqual:&unk_1F2DC7408] & 1) == 0)
    {
      if (v16)
      {
        id v32 = [(HMDHome *)self chipStorage];
        __int16 v33 = [v32 fabricID];
        char v34 = [v16 isEqual:v33];

        if ((v34 & 1) == 0)
        {
          id v23 = (void *)MEMORY[0x1D9452090]();
          __int16 v24 = self;
          __int16 v25 = HMFGetOSLogHandle();
          if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
            goto LABEL_15;
          }
          uint64_t v26 = HMFGetLogIdentifier();
          id v59 = [(HMDHome *)v24 chipStorage];
          uint64_t v61 = v23;
          __int16 v27 = [v59 fabricID];
          *(_DWORD *)buf = 138543874;
          uint64_t v80 = v26;
          __int16 v81 = 2112;
          id v82 = v16;
          __int16 v83 = 2112;
          uint64_t v84 = v27;
          goto LABEL_40;
        }
      }
LABEL_21:
      if ([v14 isEqualToNumber:&unk_1F2DC7408])
      {

        id v14 = 0;
      }
      if (v15 && !v16)
      {
        uint64_t v35 = (void *)MEMORY[0x1D9452090]();
        long long v36 = self;
        __int16 v37 = HMFGetOSLogHandle();
        if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
LABEL_28:

          id v16 = [MEMORY[0x1E4F28C58] hmErrorWithCode:-1];
          (*((void (**)(id, void, void, void, void, id))v19 + 2))(v19, 0, 0, 0, 0, v16);
          goto LABEL_16;
        }
        __int16 v38 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543874;
        uint64_t v80 = v38;
        __int16 v81 = 2112;
        id v82 = v15;
        __int16 v83 = 2112;
        uint64_t v84 = 0;
        uint64_t v39 = "%{public}@Cannot handle remote request to retrieve certificates with device Node ID %@ and fabricID %@";
        __int16 v40 = v37;
        uint32_t v41 = 32;
LABEL_27:
        _os_log_impl(&dword_1D49D5000, v40, OS_LOG_TYPE_ERROR, v39, buf, v41);

        goto LABEL_28;
      }
      if (isFeatureMatterLocalFabricConfigEnabled())
      {
        __int16 v42 = [(HMDHome *)self fabric];
        uint64_t v43 = [v42 fabricID];

        char v44 = [v18 isOwner];
        if (v43) {
          goto LABEL_37;
        }
      }
      else
      {
        __int16 v45 = [(HMDHome *)self chipStorage];
        uint64_t v43 = [v45 fabricID];

        char v44 = 0;
        if (v43) {
          goto LABEL_37;
        }
      }
      if (![(HMDHome *)self isCurrentDevicePrimaryResident]
        && [(HMDHome *)self doesHomeContainResident])
      {
        uint64_t v35 = (void *)MEMORY[0x1D9452090]();
        long long v36 = self;
        __int16 v37 = HMFGetOSLogHandle();
        if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
          goto LABEL_28;
        }
        __int16 v38 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        uint64_t v80 = v38;
        uint64_t v39 = "%{public}@Failing commissioning cert because operational cert creation is not allowed in this device while"
              " there is a resident in Home";
        __int16 v40 = v37;
        uint32_t v41 = 12;
        goto LABEL_27;
      }
LABEL_37:
      id v46 = [(HMDHome *)self homeManager];
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke;
      aBlock[3] = &unk_1E6A06370;
      id v47 = v19;
      id v77 = v47;
      id v48 = v46;
      id v73 = v48;
      id v49 = v14;
      id v74 = v49;
      id v58 = v19;
      id v50 = v18;
      id v51 = v15;
      id v75 = v51;
      char v78 = v44;
      id v62 = v15;
      id v52 = v17;
      id v76 = v52;
      id v60 = v17;
      uint64_t v53 = _Block_copy(aBlock);
      v63[0] = MEMORY[0x1E4F143A8];
      v63[1] = 3221225472;
      v63[2] = __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_2;
      v63[3] = &unk_1E6A06430;
      v63[4] = self;
      id v64 = v43;
      id v69 = v53;
      id v65 = v48;
      id v14 = v49;
      id v66 = v14;
      id v54 = v51;
      id v18 = v50;
      id v19 = v58;
      id v67 = v54;
      char v71 = v44;
      id v68 = v52;
      id v70 = v47;
      id v55 = v48;
      id v56 = v53;
      id v17 = v60;
      id v57 = v56;
      id v16 = v43;
      [(HMDHome *)self updateCATIDsForUsersIfNeeded:1 completion:v63];

      id v15 = v62;
      goto LABEL_16;
    }
LABEL_18:

    id v16 = 0;
    goto LABEL_21;
  }
  if ([v16 isEqualToNumber:&unk_1F2DC7408]) {
    goto LABEL_18;
  }
  if (!v16) {
    goto LABEL_21;
  }
  id v20 = [(HMDHome *)self fabric];
  id v21 = [v20 fabricID];
  char v22 = [v16 isEqual:v21];

  if (v22) {
    goto LABEL_21;
  }
  id v23 = (void *)MEMORY[0x1D9452090]();
  __int16 v24 = self;
  __int16 v25 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    uint64_t v26 = HMFGetLogIdentifier();
    id v59 = [(HMDHome *)v24 fabric];
    uint64_t v61 = v23;
    __int16 v27 = [v59 fabricID];
    *(_DWORD *)buf = 138543874;
    uint64_t v80 = v26;
    __int16 v81 = 2112;
    id v82 = v16;
    __int16 v83 = 2112;
    uint64_t v84 = v27;
LABEL_40:
    _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_ERROR, "%{public}@Cannot handle remote request to retrieve certificates for unknown fabricID %@. Current home fabric ID %@", buf, 0x20u);

    id v23 = v61;
    goto LABEL_14;
  }
LABEL_15:

  id v31 = [MEMORY[0x1E4F28C58] hmErrorWithCode:-1];
  (*((void (**)(id, void, void, void, void, void *))v19 + 2))(v19, 0, 0, 0, 0, v31);

LABEL_16:
}

void __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v7 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    id v5 = [*(id *)(a1 + 32) accessoryBrowser];
    id v6 = [v5 chipAccessoryServerBrowser];
    [v6 fetchCertificatesForMatterNodeWithCommissionerNodeID:*(void *)(a1 + 40) commissioneeNodeID:*(void *)(a1 + 48) forOwner:*(unsigned __int8 *)(a1 + 72) publicKey:*(void *)(a1 + 56) fabricID:v7 completionHandler:*(void *)(a1 + 64)];
  }
}

void __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_3;
  aBlock[3] = &unk_1E6A06398;
  id v4 = *(void **)(a1 + 40);
  void aBlock[4] = *(void *)(a1 + 32);
  id v30 = v4;
  id v32 = *(id *)(a1 + 80);
  id v5 = v3;
  id v31 = v5;
  id v6 = _Block_copy(aBlock);
  id v7 = *(void **)(a1 + 40);
  if (v7 && ![v7 isEqual:&unk_1F2DC7408])
  {
    __int16 v13 = [*(id *)(a1 + 48) accessoryBrowser];
    id v14 = [v13 chipAccessoryServerBrowser];
    uint64_t v15 = *(void *)(a1 + 72);
    uint64_t v19 = *(void *)(a1 + 64);
    uint64_t v20 = *(void *)(a1 + 56);
    uint64_t v16 = *(unsigned __int8 *)(a1 + 96);
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_3_259;
    v21[3] = &unk_1E6A06408;
    uint64_t v17 = *(void *)(a1 + 40);
    v21[4] = *(void *)(a1 + 32);
    int v10 = &v22;
    uint64_t v11 = &v24;
    id v22 = *(id *)(a1 + 48);
    __int16 v24 = v6;
    id v23 = *(id *)(a1 + 40);
    id v25 = *(id *)(a1 + 88);
    id v18 = v6;
    [v14 fetchCertificatesForMatterNodeWithCommissionerNodeID:v20 commissioneeNodeID:v19 forOwner:v16 publicKey:v15 fabricID:v17 completionHandler:v21];

    id v8 = v23;
  }
  else
  {
    id v8 = [*(id *)(a1 + 48) accessoryBrowser];
    uint64_t v9 = [v8 chipAccessoryServerBrowser];
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    v26[2] = __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_255;
    v26[3] = &unk_1E6A063C0;
    v26[4] = *(void *)(a1 + 32);
    int v10 = &v27;
    uint64_t v11 = &v28;
    id v27 = *(id *)(a1 + 48);
    id v28 = v6;
    id v12 = v6;
    [v9 createNewFabricIDWithCompletion:v26];
  }
}

void __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = (void *)MEMORY[0x1D9452090]();
    id v8 = *(id *)(a1 + 32);
    uint64_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v10 = HMFGetLogIdentifier();
      int v26 = 138543618;
      id v27 = v10;
      __int16 v28 = 2112;
      id v29 = v6;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_ERROR, "%{public}@Couldn't create CHIP storage: %@", (uint8_t *)&v26, 0x16u);
    }
    uint64_t v11 = *(void *)(a1 + 40);
    id v12 = [*(id *)(a1 + 32) fabric];
    [v12 setFabricID:v11];

    uint64_t v13 = *(void *)(a1 + 40);
    id v14 = [*(id *)(a1 + 32) chipStorage];
    [v14 setFabricID:v13];

    uint64_t v15 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
LABEL_9:
    v15();
    goto LABEL_10;
  }
  uint64_t v16 = [*(id *)(a1 + 32) matterFabricID];
  char v17 = [v16 isEqual:v5];

  id v18 = (void *)MEMORY[0x1D9452090]();
  id v19 = *(id *)(a1 + 32);
  uint64_t v20 = HMFGetOSLogHandle();
  BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_INFO);
  if (v17)
  {
    if (v21)
    {
      id v22 = HMFGetLogIdentifier();
      int v26 = 138543618;
      id v27 = v22;
      __int16 v28 = 2112;
      id v29 = v5;
      _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@Initialized CHIP storage with fabric ID: %@", (uint8_t *)&v26, 0x16u);
    }
    uint64_t v15 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    goto LABEL_9;
  }
  if (v21)
  {
    id v23 = HMFGetLogIdentifier();
    int v26 = 138543618;
    id v27 = v23;
    __int16 v28 = 2112;
    id v29 = v5;
    _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@CHIP storage wasn't initialized with fabric ID %@ due to asynchronous model update", (uint8_t *)&v26, 0x16u);
  }
  uint64_t v24 = *(void *)(a1 + 56);
  id v25 = [MEMORY[0x1E4F28C58] hmfErrorWithCode:12];
  (*(void (**)(uint64_t, void, void *))(v24 + 16))(v24, 0, v25);

LABEL_10:
}

void __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_255(id *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = a1[4];
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v7 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    __int16 v28 = v7;
    __int16 v29 = 2112;
    id v30 = v3;
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Attempting to initialize fabric data with fabric ID: %@", buf, 0x16u);
  }
  int v8 = isFeatureMatterLocalFabricConfigEnabled();
  id v9 = a1[4];
  if (v8)
  {
    int v10 = [v9 fabric];
    [v10 setFabricID:v3];

    uint64_t v11 = [a1[4] chipStorage];
    [v11 setFabricID:v3];

    id v12 = [a1[5] accessoryBrowser];
    uint64_t v13 = [v12 chipAccessoryServerBrowser];
    id v14 = [a1[4] fabric];
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_256;
    v24[3] = &unk_1E6A17D78;
    uint64_t v15 = &v26;
    id v16 = a1[6];
    char v17 = &v25;
    id v25 = v3;
    id v26 = v16;
    id v18 = v3;
    [v13 createNewFabricDataForFabric:v14 completion:v24];
  }
  else
  {
    id v19 = [v9 chipStorage];
    [v19 setFabricID:v3];

    id v12 = [a1[5] accessoryBrowser];
    uint64_t v13 = [v12 chipAccessoryServerBrowser];
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_2_257;
    v21[3] = &unk_1E6A17D78;
    uint64_t v15 = &v23;
    id v20 = a1[6];
    char v17 = &v22;
    id v22 = v3;
    id v23 = v20;
    [v13 createNewFabricDataForFabricID:v3 completion:v21];
  }
}

void __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_3_259(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = v15;
  if (v15
    && ([v15 underlyingErrors],
        char v17 = objc_claimAutoreleasedReturnValue(),
        int v18 = objc_msgSend(v17, "na_any:", &__block_literal_global_262),
        v17,
        v18))
  {
    id v19 = (void *)MEMORY[0x1D9452090]();
    id v20 = *(id *)(a1 + 32);
    BOOL v21 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      id v22 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v36 = v22;
      _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@Regenerating cert when handling commissioning cert request", buf, 0xCu);
    }
    int v23 = isFeatureMatterLocalFabricConfigEnabled();
    uint64_t v24 = [*(id *)(a1 + 40) accessoryBrowser];
    id v25 = [v24 chipAccessoryServerBrowser];
    if (v23)
    {
      id v26 = [*(id *)(a1 + 32) fabric];
      v32[0] = MEMORY[0x1E4F143A8];
      v32[1] = 3221225472;
      v32[2] = __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_263;
      v32[3] = &unk_1E6A17D78;
      id v34 = *(id *)(a1 + 56);
      id v33 = *(id *)(a1 + 48);
      [v25 createNewFabricDataForFabric:v26 completion:v32];

      id v27 = v34;
    }
    else
    {
      v29[0] = MEMORY[0x1E4F143A8];
      v29[1] = 3221225472;
      v29[2] = __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_2_264;
      v29[3] = &unk_1E6A17D78;
      uint64_t v28 = *(void *)(a1 + 48);
      id v31 = *(id *)(a1 + 56);
      id v30 = *(id *)(a1 + 48);
      [v25 createNewFabricDataForFabricID:v28 completion:v29];

      id v27 = v31;
    }
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
}

uint64_t __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_263(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), a2);
}

uint64_t __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_2_264(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), a2);
}

BOOL __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_4(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 domain];
  if ([v3 isEqual:*MEMORY[0x1E4F6A000]]) {
    BOOL v4 = [v2 code] == 2;
  }
  else {
    BOOL v4 = 0;
  }

  return v4;
}

uint64_t __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_256(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), a2);
}

uint64_t __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_2_257(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), a2);
}

- (void)handleCommissioningCertificateRequest:(id)a3
{
  id v4 = a3;
  id v5 = [v4 numberForKey:@"HMDHomeCommissioningDeviceNodeIDMessageKey"];
  id v6 = [v4 numberForKey:@"HMDHomeCommissioningFabricIDMessageKey"];
  id v7 = [v4 dataForKey:@"HMDHomeCommissioningPublicKeyMessageKey"];
  int v8 = [v4 userForHome:self];
  if (!isFeatureMatterLocalFabricConfigEnabled()) {
    goto LABEL_4;
  }
  id v9 = [v4 numberForKey:@"HMDHomeCommissioningCommissionerNodeIDMessageKey"];
  if ([v9 isEqualToNumber:&unk_1F2DC7408])
  {

LABEL_4:
    id v9 = 0;
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __55__HMDHome_CHIP__handleCommissioningCertificateRequest___block_invoke;
  v11[3] = &unk_1E6A06348;
  id v12 = v4;
  id v10 = v4;
  [(HMDHome *)self handleCommissioningCertificateRequestWithCommissionerNodeID:v9 commissioneeNodeID:v5 fabricID:v6 publicKey:v7 sender:v8 completion:v11];
}

void __55__HMDHome_CHIP__handleCommissioningCertificateRequest___block_invoke(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  id v15 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  if (a6)
  {
    [*(id *)(a1 + 32) respondWithError:a6];
  }
  else
  {
    id v14 = [MEMORY[0x1E4F1CA60] dictionary];
    [v14 setObject:v15 forKeyedSubscript:@"HMDHomeCommissioningRootCertMessageKey"];
    [v14 setObject:v11 forKeyedSubscript:@"HMDHomeCommissioningOperationalCertMessageKey"];
    [v14 setObject:v12 forKeyedSubscript:@"HMDHomeCommissioningOwnerNodeIDMessageKey"];
    [v14 setObject:v13 forKeyedSubscript:@"HMDHomeCommissioningIPKMessageKey"];
    [*(id *)(a1 + 32) respondWithPayload:v14];
  }
}

- (void)_dispatchCHIPReport:(id)a3 destination:(id)a4
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  int v8 = +[HMDDeviceHandle deviceHandleForDestination:v7];
  id v9 = +[HMDAccountRegistry sharedRegistry];
  id v10 = [v9 deviceForHandle:v8];

  id v11 = [v10 account];

  if (v11)
  {
    if (![v10 isCurrentDevice])
    {
      objc_initWeak((id *)buf, self);
      id v20 = [(HMDHome *)self homeManager];
      BOOL v21 = (void *)[v6 copy];
      id v22 = [(HMDHome *)self uuid];
      int v23 = [(HMDHome *)self workQueue];
      v24[0] = MEMORY[0x1E4F143A8];
      v24[1] = 3221225472;
      v24[2] = __49__HMDHome_CHIP___dispatchCHIPReport_destination___block_invoke;
      v24[3] = &unk_1E6A19048;
      objc_copyWeak(&v27, (id *)buf);
      id v25 = v6;
      id v26 = v7;
      [v20 sendSecureMessage:v21 target:v22 userID:v26 destination:v26 responseQueue:v23 responseHandler:v24];

      objc_destroyWeak(&v27);
      objc_destroyWeak((id *)buf);
      goto LABEL_10;
    }
    id v12 = (void *)MEMORY[0x1D9452090]();
    id v13 = self;
    id v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      id v15 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v29 = v15;
      __int16 v30 = 2112;
      id v31 = v7;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Skipping device %@ - ourselves", buf, 0x16u);
    }
  }
  else
  {
    id v12 = (void *)MEMORY[0x1D9452090]();
    id v13 = self;
    id v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      int v18 = HMFGetLogIdentifier();
      id v19 = [v10 shortDescription];
      *(_DWORD *)buf = 138543874;
      __int16 v29 = v18;
      __int16 v30 = 2112;
      id v31 = v19;
      __int16 v32 = 2112;
      id v33 = v7;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Device %@ for CHIP report destination %@ has no user attached to it. Destination removed.", buf, 0x20u);
    }
  }

  id v16 = [(HMDHome *)v13 notificationRegistry];
  char v17 = [v16 chipRemoteSubscribers];
  [v17 removeObject:v7];

LABEL_10:
}

void __49__HMDHome_CHIP___dispatchCHIPReport_destination___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    int v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = WeakRetained;
    id v10 = HMFGetOSLogHandle();
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
    if (v5)
    {
      if (v11)
      {
        id v12 = HMFGetLogIdentifier();
        id v13 = *(void **)(a1 + 40);
        int v16 = 138543874;
        char v17 = v12;
        __int16 v18 = 2112;
        id v19 = v13;
        __int16 v20 = 2112;
        id v21 = v5;
        _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Failed to send CHIP report to user %@ due to error %@", (uint8_t *)&v16, 0x20u);
LABEL_7:
      }
    }
    else if (v11)
    {
      id v12 = HMFGetLogIdentifier();
      id v14 = [*(id *)(a1 + 32) messagePayload];
      id v15 = *(void **)(a1 + 40);
      int v16 = 138543874;
      char v17 = v12;
      __int16 v18 = 2112;
      id v19 = v14;
      __int16 v20 = 2112;
      id v21 = v15;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Sent CHIP report: %@ to user %@", (uint8_t *)&v16, 0x20u);

      goto LABEL_7;
    }
  }
}

- (void)_handleCHIPSendRemoteRequestMessage:(id)a3
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v47 = [v4 numberForKey:@"HMDHomeCHIPNodeIDMessageKey"];
  if (v47)
  {
    __int16 v45 = v4;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    id v5 = [(HMDHome *)self matterAccessories];
    uint64_t v6 = [v5 countByEnumeratingWithState:&v48 objects:v58 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v49;
      while (2)
      {
        uint64_t v9 = 0;
        uint64_t v46 = v7;
        do
        {
          if (*(void *)v49 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = *(void **)(*((void *)&v48 + 1) + 8 * v9);
          BOOL v11 = (void *)MEMORY[0x1D9452090]();
          id v12 = self;
          id v13 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            uint64_t v14 = v8;
            id v15 = self;
            v17 = int v16 = v5;
            __int16 v18 = [v10 matterNodeID];
            *(_DWORD *)buf = 138543874;
            uint64_t v53 = v17;
            __int16 v54 = 2112;
            id v55 = v18;
            __int16 v56 = 2112;
            id v57 = v47;
            _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_DEBUG, "%{public}@Remote request dispatch compares %@ with %@", buf, 0x20u);

            id v5 = v16;
            self = v15;
            uint64_t v8 = v14;
            uint64_t v7 = v46;
          }

          id v19 = [v10 matterNodeID];
          if ([v19 isEqual:&unk_1F2DC7408])
          {
          }
          else
          {
            __int16 v20 = [v10 matterNodeID];
            int v21 = [v20 isEqualToNumber:v47];

            if (v21)
            {
              __int16 v32 = (void *)MEMORY[0x1D9452090]();
              id v33 = v12;
              uint64_t v34 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v35 = HMFGetLogIdentifier();
                long long v36 = [v10 identifier];
                *(_DWORD *)buf = 138543618;
                uint64_t v53 = v35;
                __int16 v54 = 2112;
                id v55 = v36;
                _os_log_impl(&dword_1D49D5000, v34, OS_LOG_TYPE_DEBUG, "%{public}@Dispatching remote request to accessory %@", buf, 0x16u);
              }
              id v4 = v45;
              uint64_t v37 = [v45 dictionaryForKey:@"HMDHomeCHIPRequestMessageKey"];
              __int16 v38 = [v37 CHIPRemoteCommand];
              int v39 = [v38 isEqualToString:*MEMORY[0x1E4F6A1E0]];

              if (v39)
              {
                __int16 v40 = (void *)MEMORY[0x1D9452090]();
                uint32_t v41 = v33;
                __int16 v42 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v43 = HMFGetLogIdentifier();
                  *(_DWORD *)buf = 138543618;
                  uint64_t v53 = v43;
                  __int16 v54 = 2112;
                  id v55 = v45;
                  _os_log_impl(&dword_1D49D5000, v42, OS_LOG_TYPE_ERROR, "%{public}@Rejecting CHIP remote request as subscription using this interface is not supported: %@", buf, 0x16u);
                }
                char v44 = [MEMORY[0x1E4F28C58] hmErrorWithCode:48];
                [v45 respondWithError:v44];
              }
              else
              {
                [v10 handleCHIPSendRemoteRequestMessage:v45];
              }

              goto LABEL_29;
            }
          }
          ++v9;
        }
        while (v7 != v9);
        uint64_t v7 = [v5 countByEnumeratingWithState:&v48 objects:v58 count:16];
        if (v7) {
          continue;
        }
        break;
      }
    }

    uint64_t v22 = MEMORY[0x1D9452090]();
    int v23 = self;
    uint64_t v24 = HMFGetOSLogHandle();
    id v4 = v45;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      id v25 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v53 = v25;
      __int16 v54 = 2112;
      id v55 = v45;
      _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_ERROR, "%{public}@Cannot find accessory for CHIP remote request: %@", buf, 0x16u);
    }
    id v26 = (void *)v22;
  }
  else
  {
    uint64_t v27 = MEMORY[0x1D9452090]();
    uint64_t v28 = self;
    __int16 v29 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      __int16 v30 = HMFGetLogIdentifier();
      id v31 = [v4 messagePayload];
      *(_DWORD *)buf = 138543618;
      uint64_t v53 = v30;
      __int16 v54 = 2112;
      id v55 = v31;
      _os_log_impl(&dword_1D49D5000, v29, OS_LOG_TYPE_ERROR, "%{public}@Cannot find node ID in CHIP remote request message payload: %@", buf, 0x16u);
    }
    id v26 = (void *)v27;
  }
  id v5 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
  [v4 respondWithError:v5];
LABEL_29:
}

- (void)_handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage:(id)a3
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 uuidForKey:@"kAccessoryUUID"];
  if (v5)
  {
    uint64_t v6 = [(HMDHome *)self matterAccessories];
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = __74__HMDHome_CHIP___handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage___block_invoke;
    v24[3] = &unk_1E6A0FC58;
    id v7 = v5;
    id v25 = v7;
    uint64_t v8 = objc_msgSend(v6, "na_firstObjectPassingTest:", v24);

    uint64_t v9 = (void *)MEMORY[0x1D9452090]();
    id v10 = self;
    BOOL v11 = HMFGetOSLogHandle();
    id v12 = v11;
    if (v8)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        id v13 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v27 = v13;
        __int16 v28 = 2112;
        id v29 = v8;
        _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Resetting and removing all CHIP pairings from accessory: %@", buf, 0x16u);
      }
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = __74__HMDHome_CHIP___handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage___block_invoke_250;
      v22[3] = &unk_1E6A196E0;
      v22[4] = v10;
      id v23 = v4;
      [v8 removeAllCHIPPairingsWithCompletion:v22];
    }
    else
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        __int16 v20 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v27 = v20;
        __int16 v28 = 2112;
        id v29 = v7;
        _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_ERROR, "%{public}@Cannot find accessory with UUID %@ for reset and remove all CHIP pairings message", buf, 0x16u);
      }
      int v21 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
      [v4 respondWithError:v21];
    }
    id v19 = v25;
  }
  else
  {
    uint64_t v14 = (void *)MEMORY[0x1D9452090]();
    id v15 = self;
    int v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      char v17 = HMFGetLogIdentifier();
      __int16 v18 = [v4 messagePayload];
      *(_DWORD *)buf = 138543618;
      uint64_t v27 = v17;
      __int16 v28 = 2112;
      id v29 = v18;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_ERROR, "%{public}@Cannot find accessory UUID in reset and remove all CHIP pairings message payload: %@", buf, 0x16u);
    }
    id v19 = [MEMORY[0x1E4F28C58] hmErrorWithCode:20];
    [v4 respondWithError:v19];
  }
}

uint64_t __74__HMDHome_CHIP___handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 uuid];
  uint64_t v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

void __74__HMDHome_CHIP___handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage___block_invoke_250(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = *(id *)(a1 + 32);
    uint64_t v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = HMFGetLogIdentifier();
      int v8 = 138543618;
      uint64_t v9 = v7;
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Ignoring remove all CHIP pairings error: %@", (uint8_t *)&v8, 0x16u);
    }
  }
  [*(id *)(a1 + 32) handleRemoveAccessoryMessage:*(void *)(a1 + 40)];
}

- (BOOL)_shouldFallbackLocallyForRemoteMatterRequest:(id)a3
{
  id v3 = a3;
  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    unint64_t v4 = [v3 code];
    BOOL v5 = 1;
    if (v4 > 8 || ((1 << v4) & 0x11C) == 0) {
      BOOL v5 = v4 == 3201;
    }
  }
  else
  {
    BOOL v5 = 0;
  }

  return v5;
}

- (void)_sendRemoteMessageUsingNodeId:(unint64_t)a3 payload:(id)a4 completion:(id)a5
{
  v31[2] = *MEMORY[0x1E4F143B8];
  id v8 = a4;
  id v9 = a5;
  id v10 = objc_alloc(MEMORY[0x1E4F65488]);
  id v11 = [(HMDHome *)self uuid];
  uint64_t v12 = (void *)[v10 initWithTarget:v11];

  v30[0] = @"HMDHomeCHIPNodeIDMessageKey";
  id v13 = [NSNumber numberWithUnsignedLongLong:a3];
  v30[1] = @"HMDHomeCHIPRequestMessageKey";
  v31[0] = v13;
  v31[1] = v8;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v31 forKeys:v30 count:2];

  id v15 = [MEMORY[0x1E4F654B0] messageWithName:@"HMDHomeCHIPSendRemoteRequestMessage" destination:v12 payload:v14];
  int v16 = [v8 CHIPRemoteMessageTimeout];

  if (v16)
  {
    char v17 = [v8 CHIPRemoteMessageTimeout];
    [v17 doubleValue];
    objc_msgSend(v15, "setTimeout:");
  }
  uint64_t v21 = MEMORY[0x1E4F143A8];
  uint64_t v22 = 3221225472;
  id v23 = __66__HMDHome_CHIP___sendRemoteMessageUsingNodeId_payload_completion___block_invoke;
  uint64_t v24 = &unk_1E6A06320;
  id v28 = v9;
  unint64_t v29 = a3;
  id v25 = self;
  id v26 = v12;
  id v27 = v14;
  id v18 = v14;
  id v19 = v12;
  id v20 = v9;
  [v15 setResponseHandler:&v21];
  -[HMDHome handleCHIPSendRemoteRequestMessage:](self, "handleCHIPSendRemoteRequestMessage:", v15, v21, v22, v23, v24, v25);
}

void __66__HMDHome_CHIP___sendRemoteMessageUsingNodeId_payload_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    if ([*(id *)(a1 + 32) _shouldFallbackLocallyForRemoteMatterRequest:v5])
    {
      id v7 = [MEMORY[0x1E4F654B0] messageWithName:@"HMDHomeCHIPSendRemoteRequestMessage" destination:*(void *)(a1 + 40) payload:*(void *)(a1 + 48)];
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = __66__HMDHome_CHIP___sendRemoteMessageUsingNodeId_payload_completion___block_invoke_248;
      v22[3] = &unk_1E6A062F8;
      id v9 = *(void **)(a1 + 56);
      uint64_t v8 = *(void *)(a1 + 64);
      v22[4] = *(void *)(a1 + 32);
      uint64_t v24 = v8;
      id v23 = v9;
      [v7 setResponseHandler:v22];
      [*(id *)(a1 + 32) _handleCHIPSendRemoteRequestMessage:v7];
    }
    else
    {
      int v16 = (void *)MEMORY[0x1D9452090]();
      id v17 = *(id *)(a1 + 32);
      id v18 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        id v19 = HMFGetLogIdentifier();
        uint64_t v20 = *(void *)(a1 + 64);
        *(_DWORD *)buf = 138543874;
        id v26 = v19;
        __int16 v27 = 2048;
        uint64_t v28 = v20;
        __int16 v29 = 2112;
        id v30 = v5;
        _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_ERROR, "%{public}@Failed to execute CHIP remote operation for nodeID=%llu: error=%@", buf, 0x20u);
      }
      uint64_t v21 = *(void *)(a1 + 56);
      id v7 = [v6 objectForKeyedSubscript:@"HMDHomeCHIPResponseMessageKey"];
      (*(void (**)(uint64_t, void *, id))(v21 + 16))(v21, v7, v5);
    }
  }
  else
  {
    id v10 = (void *)MEMORY[0x1D9452090]();
    id v11 = *(id *)(a1 + 32);
    uint64_t v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      uint64_t v14 = *(void *)(a1 + 64);
      *(_DWORD *)buf = 138543618;
      id v26 = v13;
      __int16 v27 = 2048;
      uint64_t v28 = v14;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Successfully executed CHIP remote operation for nodeID=%llu", buf, 0x16u);
    }
    uint64_t v15 = *(void *)(a1 + 56);
    id v7 = [v6 objectForKeyedSubscript:@"HMDHomeCHIPResponseMessageKey"];
    (*(void (**)(uint64_t, void *, void))(v15 + 16))(v15, v7, 0);
  }
}

void __66__HMDHome_CHIP___sendRemoteMessageUsingNodeId_payload_completion___block_invoke_248(uint64_t a1, void *a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)MEMORY[0x1D9452090]();
  id v8 = *(id *)(a1 + 32);
  id v9 = HMFGetOSLogHandle();
  id v10 = v9;
  if (v5)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v11 = HMFGetLogIdentifier();
      uint64_t v12 = *(void *)(a1 + 48);
      int v20 = 138543874;
      uint64_t v21 = v11;
      __int16 v22 = 2048;
      uint64_t v23 = v12;
      __int16 v24 = 2112;
      id v25 = v5;
      id v13 = "%{public}@Failed to execute CHIP local fallback operation for nodeID=%llu: error=%@";
      uint64_t v14 = v10;
      os_log_type_t v15 = OS_LOG_TYPE_ERROR;
      uint32_t v16 = 32;
LABEL_6:
      _os_log_impl(&dword_1D49D5000, v14, v15, v13, (uint8_t *)&v20, v16);
    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    id v11 = HMFGetLogIdentifier();
    uint64_t v17 = *(void *)(a1 + 48);
    int v20 = 138543618;
    uint64_t v21 = v11;
    __int16 v22 = 2048;
    uint64_t v23 = v17;
    id v13 = "%{public}@Successfully executed CHIP local fallback operation for nodeID=%llu";
    uint64_t v14 = v10;
    os_log_type_t v15 = OS_LOG_TYPE_INFO;
    uint32_t v16 = 22;
    goto LABEL_6;
  }

  uint64_t v18 = *(void *)(a1 + 40);
  id v19 = [v6 objectForKeyedSubscript:@"HMDHomeCHIPResponseMessageKey"];
  (*(void (**)(uint64_t, void *, id))(v18 + 16))(v18, v19, v5);
}

- (BOOL)requiresRemoteFabricDataUpdate
{
  return 0;
}

- (void)fetchOperationalCertificatesForNewFabricWithFabricID:(id)a3 publicKey:(id)a4 fetchFromResident:(BOOL)a5 completion:(id)a6
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v11 = a4;
  id v12 = a6;
  if (a5)
  {
    [(HMDHome *)self retrieveOperationalCertificatesForFabricID:v10 commissionerNodeID:0 commissioneeNodeID:0 publicKey:v11 completion:v12];
  }
  else
  {
    if ([(HMDHome *)self isOwnerUser])
    {
      id v13 = [(HMDHome *)self currentUser];
      [(HMDHome *)self handleCommissioningCertificateRequestWithCommissionerNodeID:0 commissioneeNodeID:0 fabricID:v10 publicKey:v11 sender:v13 completion:v12];
    }
    else
    {
      uint64_t v14 = (void *)MEMORY[0x1D9452090]();
      os_log_type_t v15 = self;
      uint32_t v16 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = HMFGetLogIdentifier();
        uint64_t v18 = [(HMDHome *)v15 currentUser];
        int v19 = 138543618;
        int v20 = v17;
        __int16 v21 = 2112;
        __int16 v22 = v18;
        _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_ERROR, "%{public}@Current user %@ is not the owner. Therefore it must request NOC from the primary resident", (uint8_t *)&v19, 0x16u);
      }
      id v13 = [MEMORY[0x1E4F28C58] hmErrorWithCode:10];
      (*((void (**)(id, void, void, void, void, void *))v12 + 2))(v12, 0, 0, 0, 0, v13);
    }
  }
}

- (void)handleResetMatterStorageRequest:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __49__HMDHome_CHIP__handleResetMatterStorageRequest___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __49__HMDHome_CHIP__handleResetMatterStorageRequest___block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v2 = [*(id *)(a1 + 32) primaryResidentMessageRouter];
  id v3 = v2;
  if (v2)
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __49__HMDHome_CHIP__handleResetMatterStorageRequest___block_invoke_245;
    v11[3] = &unk_1E6A17E18;
    uint64_t v4 = *(void *)(a1 + 40);
    void v11[4] = *(void *)(a1 + 32);
    [v2 routeMessage:v4 localHandler:v11];
  }
  else
  {
    id v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = *(id *)(a1 + 32);
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v8 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v13 = v8;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_ERROR, "%{public}@Could not find primary resident message router to handle request to reset Matter storage", buf, 0xCu);
    }
    id v9 = *(void **)(a1 + 40);
    id v10 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    [v9 respondWithError:v10];
  }
}

uint64_t __49__HMDHome_CHIP__handleResetMatterStorageRequest___block_invoke_245(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _handleResetMatterStorageRequest:a2];
}

- (void)handleCHIPSendReportMessage:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __45__HMDHome_CHIP__handleCHIPSendReportMessage___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __45__HMDHome_CHIP__handleCHIPSendReportMessage___block_invoke(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if ([*(id *)(a1 + 32) isCurrentDevicePrimaryResident])
  {
    id v2 = [*(id *)(a1 + 32) notificationRegistry];
    id v3 = [v2 chipRemoteSubscribers];
    id v4 = (void *)[v3 copy];

    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    id v5 = v4;
    uint64_t v6 = [v5 countByEnumeratingWithState:&v35 objects:v44 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v36;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v36 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void *)(*((void *)&v35 + 1) + 8 * i);
          id v11 = (void *)MEMORY[0x1D9452090]();
          id v12 = *(id *)(a1 + 32);
          id v13 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            uint64_t v14 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            uint32_t v41 = v14;
            __int16 v42 = 2112;
            uint64_t v43 = v10;
            _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Dispatch CHIP report to %@", buf, 0x16u);
          }
          [*(id *)(a1 + 32) _dispatchCHIPReport:*(void *)(a1 + 40) destination:v10];
        }
        uint64_t v7 = [v5 countByEnumeratingWithState:&v35 objects:v44 count:16];
      }
      while (v7);
    }
  }
  os_log_type_t v15 = [*(id *)(a1 + 40) numberForKey:@"HMDHomeCHIPNodeIDMessageKey"];
  uint64_t v30 = [v15 unsignedIntegerValue];

  uint32_t v16 = [*(id *)(a1 + 40) arrayForKey:@"HMDHomeCHIPReportMessageKey"];
  uint64_t v17 = objc_msgSend(v16, "na_filter:", &__block_literal_global_244);

  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id obj = [*(id *)(a1 + 32) chipLocalSubscribers];
  uint64_t v18 = [obj countByEnumeratingWithState:&v31 objects:v39 count:16];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = *(void *)v32;
    do
    {
      for (uint64_t j = 0; j != v19; ++j)
      {
        if (*(void *)v32 != v20) {
          objc_enumerationMutation(obj);
        }
        uint64_t v22 = *(void *)(*((void *)&v31 + 1) + 8 * j);
        uint64_t v23 = (void *)MEMORY[0x1D9452090]();
        id v24 = *(id *)(a1 + 32);
        id v25 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v26 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          uint32_t v41 = v26;
          __int16 v42 = 2112;
          uint64_t v43 = v22;
          _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_DEBUG, "%{public}@Calling CHIP report handler for subscriber %@", buf, 0x16u);
        }
        __int16 v27 = [*(id *)(a1 + 32) chipLocalSubscribers];
        uint64_t v28 = [v27 objectForKeyedSubscript:v22];
        ((void (**)(void, uint64_t, void *))v28)[2](v28, v30, v17);
      }
      uint64_t v19 = [obj countByEnumeratingWithState:&v31 objects:v39 count:16];
    }
    while (v19);
  }

  [*(id *)(a1 + 40) respondWithSuccess];
}

uint64_t __45__HMDHome_CHIP__handleCHIPSendReportMessage___block_invoke_241(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  uint64_t v3 = objc_opt_isKindOfClass() & (v2 != 0);

  return v3;
}

- (void)handleCHIPSendRemoteRequestMessage:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __52__HMDHome_CHIP__handleCHIPSendRemoteRequestMessage___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __52__HMDHome_CHIP__handleCHIPSendRemoteRequestMessage___block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v2 = [*(id *)(a1 + 32) primaryResidentMessageRouter];
  uint64_t v3 = v2;
  if (v2)
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __52__HMDHome_CHIP__handleCHIPSendRemoteRequestMessage___block_invoke_240;
    v11[3] = &unk_1E6A17E18;
    uint64_t v4 = *(void *)(a1 + 40);
    void v11[4] = *(void *)(a1 + 32);
    [v2 routeMessage:v4 localHandler:v11];
  }
  else
  {
    id v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = *(id *)(a1 + 32);
    uint64_t v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v8 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v13 = v8;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_ERROR, "%{public}@Could not find primary resident message router to handle CHIP remote request", buf, 0xCu);
    }
    id v9 = *(void **)(a1 + 40);
    uint64_t v10 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    [v9 respondWithError:v10];
  }
}

uint64_t __52__HMDHome_CHIP__handleCHIPSendRemoteRequestMessage___block_invoke_240(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _handleCHIPSendRemoteRequestMessage:a2];
}

- (void)handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage:(id)a3
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHome *)self primaryResidentMessageRouter];
  id v6 = v5;
  if (v5)
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __73__HMDHome_CHIP__handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage___block_invoke;
    v12[3] = &unk_1E6A17E18;
    void v12[4] = self;
    [v5 routeMessage:v4 localHandler:v12];
  }
  else
  {
    uint64_t v7 = (void *)MEMORY[0x1D9452090]();
    id v8 = self;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v14 = v10;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_ERROR, "%{public}@Could not find primary resident message router to handle reset and remove all CHIP pairings message", buf, 0xCu);
    }
    id v11 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    [v4 respondWithError:v11];
  }
}

uint64_t __73__HMDHome_CHIP__handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage:a2];
}

- (void)setCHIPReportHandlerWithSubscriber:(id)a3 handler:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __60__HMDHome_CHIP__setCHIPReportHandlerWithSubscriber_handler___block_invoke;
  block[3] = &unk_1E6A193D0;
  id v12 = v6;
  id v13 = v7;
  void block[4] = self;
  id v9 = v6;
  id v10 = v7;
  dispatch_async(v8, block);
}

void __60__HMDHome_CHIP__setCHIPReportHandlerWithSubscriber_handler___block_invoke(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = (void *)MEMORY[0x1D9452090]();
  id v4 = *(id *)(a1 + 32);
  id v5 = HMFGetOSLogHandle();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG);
  if (v2)
  {
    if (v6)
    {
      id v7 = HMFGetLogIdentifier();
      uint64_t v8 = *(void *)(a1 + 40);
      int v15 = 138543618;
      uint32_t v16 = v7;
      __int16 v17 = 2112;
      uint64_t v18 = v8;
      _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_DEBUG, "%{public}@Register CHIP report handler for subscriber %@", (uint8_t *)&v15, 0x16u);
    }
    id v9 = [*(id *)(a1 + 32) chipLocalSubscribers];

    if (!v9)
    {
      id v10 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      [*(id *)(a1 + 32) setChipLocalSubscribers:v10];
    }
    id v11 = _Block_copy(*(const void **)(a1 + 48));
    id v12 = [*(id *)(a1 + 32) chipLocalSubscribers];
    [v12 setObject:v11 forKeyedSubscript:*(void *)(a1 + 40)];
  }
  else
  {
    if (v6)
    {
      id v13 = HMFGetLogIdentifier();
      uint64_t v14 = *(void *)(a1 + 40);
      int v15 = 138543618;
      uint32_t v16 = v13;
      __int16 v17 = 2112;
      uint64_t v18 = v14;
      _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_DEBUG, "%{public}@Deregister CHIP report handler for subscriber %@", (uint8_t *)&v15, 0x16u);
    }
    id v11 = [*(id *)(a1 + 32) chipLocalSubscribers];
    [v11 setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
  }
}

- (void)finishPairingForServer:(id)a3
{
  id v5 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v3 = v5;
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = v3;
  [v4 finishPairing];
}

- (void)_saveAndSyncMatterFabricIDWithCompletion:(id)a3
{
  id v4 = a3;
  if ([(HMDHome *)self isOwnerUser])
  {
    id v5 = [(HMDHome *)self emptyModelObjectWithChangeType:2];
    BOOL v6 = [(HMDHome *)self fabric];
    id v7 = [v6 fabricID];
    [v5 setMatterFabricID:v7];

    uint64_t v8 = [(HMDHome *)self backingStore];
    id v9 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    id v10 = [v8 transaction:@"Update Matter Fabric ID" options:v9];

    [v10 add:v5];
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __58__HMDHome_CHIP___saveAndSyncMatterFabricIDWithCompletion___block_invoke;
    v12[3] = &unk_1E6A17D78;
    void v12[4] = self;
    id v13 = v4;
    [v10 run:v12];
  }
  else
  {
    id v11 = _Block_copy(v4);
    id v5 = v11;
    if (v11) {
      (*((void (**)(void *, void))v11 + 2))(v11, 0);
    }
  }
}

void __58__HMDHome_CHIP___saveAndSyncMatterFabricIDWithCompletion___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  BOOL v6 = HMFGetOSLogHandle();
  id v7 = v6;
  if (v3)
  {
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    uint64_t v8 = HMFGetLogIdentifier();
    id v9 = [*(id *)(a1 + 32) fabric];
    id v10 = [v9 fabricID];
    int v16 = 138543618;
    __int16 v17 = v8;
    __int16 v18 = 2112;
    uint64_t v19 = v10;
    id v11 = "%{public}@Failed to sync Matter Fabric ID to %@";
    id v12 = v7;
    os_log_type_t v13 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO)) {
      goto LABEL_7;
    }
    uint64_t v8 = HMFGetLogIdentifier();
    id v9 = [*(id *)(a1 + 32) fabric];
    id v10 = [v9 fabricID];
    int v16 = 138543618;
    __int16 v17 = v8;
    __int16 v18 = 2112;
    uint64_t v19 = v10;
    id v11 = "%{public}@Successfully sync'ed Matter Fabric ID to %@";
    id v12 = v7;
    os_log_type_t v13 = OS_LOG_TYPE_INFO;
  }
  _os_log_impl(&dword_1D49D5000, v12, v13, v11, (uint8_t *)&v16, 0x16u);

LABEL_7:
  uint64_t v14 = _Block_copy(*(const void **)(a1 + 40));
  int v15 = v14;
  if (v14) {
    (*((void (**)(void *, id))v14 + 2))(v14, v3);
  }
}

- (BOOL)updateFabricUsingHomeModel:(id)a3
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 setProperties];
  if (![v5 containsObject:@"matterFabricID"]) {
    goto LABEL_11;
  }
  BOOL v6 = [(HMDHome *)self fabric];
  id v7 = [v6 fabricID];
  uint64_t v8 = [v4 matterFabricID];
  int v9 = HMFEqualObjects();

  if (v9 || ([v4 matterFabricID], (id v10 = objc_claimAutoreleasedReturnValue()) == 0))
  {
LABEL_11:

    goto LABEL_12;
  }
  id v11 = v10;
  char v12 = [v10 isEqualToNumber:&unk_1F2DC7408];

  if (v12)
  {
LABEL_12:
    int v25 = 0;
    goto LABEL_13;
  }
  os_log_type_t v13 = [(HMDHome *)self fabric];
  uint64_t v14 = [v13 fabricID];

  int v15 = (void *)MEMORY[0x1D9452090]();
  int v16 = self;
  __int16 v17 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    __int16 v18 = HMFGetLogIdentifier();
    uint64_t v19 = [(HMDHome *)v16 fabric];
    uint64_t v20 = [v19 fabricID];
    __int16 v21 = [v4 matterFabricID];
    int v47 = 138543874;
    long long v48 = v18;
    __int16 v49 = 2112;
    long long v50 = v20;
    __int16 v51 = 2112;
    id v52 = v21;
    _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Updating fabric ID from %@ to %@", (uint8_t *)&v47, 0x20u);
  }
  uint64_t v22 = [v4 matterFabricID];
  uint64_t v23 = [(HMDHome *)v16 fabric];
  [v23 setFabricID:v22];

  if (v14 && ([v14 isEqualToNumber:&unk_1F2DC7408] & 1) == 0)
  {
    id v24 = [(HMDHome *)v16 fabric];
    [v24 invalidateCachedData];
  }
  int v25 = 1;
LABEL_13:
  uint64_t v26 = [(HMDHome *)self chipStorage];
  __int16 v27 = [v26 fabricID];
  uint64_t v28 = v27;
  if (v27 && ([v27 isEqualToNumber:&unk_1F2DC7408] & 1) == 0)
  {
    uint64_t v30 = [(HMDHome *)self fabric];
    long long v31 = [v30 fabricID];
    long long v32 = [(HMDHome *)self chipStorage];
    long long v33 = [v32 fabricID];
    char v34 = HMFEqualObjects();

    if (v34)
    {
      if (!v25) {
        goto LABEL_16;
      }
    }
    else
    {
      long long v35 = (void *)MEMORY[0x1D9452090]();
      long long v36 = self;
      long long v37 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        long long v38 = HMFGetLogIdentifier();
        int v39 = [(HMDHome *)v36 fabric];
        __int16 v40 = [v39 fabricID];
        uint32_t v41 = [(HMDHome *)v36 chipStorage];
        __int16 v42 = [v41 fabricID];
        int v47 = 138543874;
        long long v48 = v38;
        __int16 v49 = 2112;
        long long v50 = v40;
        __int16 v51 = 2112;
        id v52 = v42;
        _os_log_impl(&dword_1D49D5000, v37, OS_LOG_TYPE_INFO, "%{public}@Updating fabric ID from CHIPStorage from %@ to %@", (uint8_t *)&v47, 0x20u);
      }
      uint64_t v43 = [(HMDHome *)v36 chipStorage];
      char v44 = [v43 fabricID];
      uint64_t v45 = [(HMDHome *)v36 fabric];
      [v45 setFabricID:v44];
    }
LABEL_23:
    [(HMDHome *)self _saveAndSyncMatterFabricIDWithCompletion:0];
    BOOL v29 = 1;
    goto LABEL_24;
  }

  if (v25) {
    goto LABEL_23;
  }
LABEL_16:
  BOOL v29 = 0;
LABEL_24:

  return v29;
}

- (void)handleUpdatedCHIPPropertiesOnHomeModel:(id)a3 actions:(id)a4
{
  v14[1] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [(HMDHome *)self chipStorage];
  int v9 = [v8 updateUsingHomeModel:v6];

  if (v9)
  {
    BOOL v10 = (unint64_t)[v7 source] < 2;
    os_log_type_t v13 = @"HMDHomeCHIPStorageIsLocalChangeNotificationKey";
    id v11 = [NSNumber numberWithBool:v10];
    v14[0] = v11;
    char v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:&v13 count:1];

    logAndPostNotification(@"HMDHomeCHIPStorageUpdatedNotification", self, v12);
    [v7 markChanged];
  }
  if (isFeatureMatterLocalFabricConfigEnabled()
    && [(HMDHome *)self updateFabricUsingHomeModel:v6])
  {
    [v7 markChanged];
  }
}

- (void)_writeLogData:(id)a3 logName:(id)a4 completion:(id)a5
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = v10;
  if (v8 && v9)
  {
    char v12 = [(HMDHome *)self homeManager];
    os_log_type_t v13 = [v12 chipDataSource];
    uint64_t v14 = [v13 fileManager];

    int v15 = (void *)MEMORY[0x1E4F1CB10];
    uint64_t v16 = HMDCreateHomeKitDaemonCacheDirectory();
    __int16 v17 = [v15 fileURLWithPath:v16];

    __int16 v18 = [v17 URLByAppendingPathComponent:@"MatterDiagnostics"];

    id v36 = 0;
    LOBYTE(v16) = [v14 createDirectoryAtURL:v18 withIntermediateDirectories:1 attributes:0 error:&v36];
    id v19 = v36;
    if (v16)
    {
      uint64_t v20 = [v18 URLByAppendingPathComponent:v9];
      id v35 = v19;
      char v21 = [v14 writeData:v8 toURL:v20 options:0 error:&v35];
      id v22 = v35;

      if ((v21 & 1) == 0)
      {
        uint64_t v23 = (void *)MEMORY[0x1D9452090]();
        id v24 = self;
        int v25 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v26 = char v34 = v23;
          *(_DWORD *)buf = 138543874;
          long long v38 = v26;
          __int16 v39 = 2112;
          __int16 v40 = v20;
          __int16 v41 = 2112;
          id v42 = v22;
          _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_ERROR, "%{public}@Failed to write log file to path: %@ error: %@", buf, 0x20u);

          uint64_t v23 = v34;
        }

        uint64_t v20 = 0;
      }
      __int16 v27 = (void (**)(void *, void *, id))_Block_copy(v11);
      if (v27)
      {
        uint64_t v28 = [v20 path];
        v27[2](v27, v28, v22);
      }
    }
    else
    {
      BOOL v29 = (void *)MEMORY[0x1D9452090]();
      uint64_t v30 = self;
      long long v31 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        long long v32 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543874;
        long long v38 = v32;
        __int16 v39 = 2112;
        __int16 v40 = v18;
        __int16 v41 = 2112;
        id v42 = v19;
        _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_ERROR, "%{public}@Failed to create directory at path: %@ error: %@", buf, 0x20u);
      }
      long long v33 = _Block_copy(v11);
      uint64_t v20 = v33;
      if (v33) {
        (*((void (**)(void *, void, id))v33 + 2))(v33, 0, v19);
      }
      id v22 = v19;
    }

    goto LABEL_19;
  }
  uint64_t v14 = (void (**)(void, void, void))_Block_copy(v10);
  if (v14)
  {
    __int16 v18 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    ((void (**)(void, void, void *))v14)[2](v14, 0, v18);
LABEL_19:
  }
}

- (void)downloadLogWithController:(id)a3 nodeId:(id)a4 type:(int64_t)a5 timeout:(double)a6 completion:(id)a7
{
  id v11 = a4;
  id v12 = a7;
  os_log_type_t v13 = [MEMORY[0x1E4F1CA60] dictionary];
  [v13 setCHIPRemoteCommand:*MEMORY[0x1E4F6A1C8]];
  uint64_t v14 = [NSNumber numberWithInteger:a5];
  [v13 setCHIPDownloadLogType:v14];

  int v15 = [NSNumber numberWithDouble:a6];
  [v13 setCHIPDownloadTimeout:v15];

  if ((unint64_t)a6)
  {
    uint64_t v16 = [NSNumber numberWithUnsignedInteger:(unint64_t)(a6 + 10.0)];
    [v13 setCHIPRemoteMessageTimeout:v16];
  }
  uint64_t v17 = [v11 unsignedLongValue];
  __int16 v18 = (void *)[v13 copy];
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  v20[2] = __74__HMDHome_CHIP__downloadLogWithController_nodeId_type_timeout_completion___block_invoke;
  v20[3] = &unk_1E6A0A508;
  void v20[4] = self;
  id v21 = v12;
  id v19 = v12;
  [(HMDHome *)self _sendRemoteMessageUsingNodeId:v17 payload:v18 completion:v20];
}

void __74__HMDHome_CHIP__downloadLogWithController_nodeId_type_timeout_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)MEMORY[0x1D9452090]();
  id v8 = *(id *)(a1 + 32);
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    id v10 = HMFGetLogIdentifier();
    int v15 = 138543874;
    uint64_t v16 = v10;
    __int16 v17 = 2112;
    id v18 = v5;
    __int16 v19 = 2112;
    id v20 = v6;
    _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Download log response: %@, error: %@", (uint8_t *)&v15, 0x20u);
  }
  id v11 = objc_msgSend(v5, "hmf_dataForKey:", *MEMORY[0x1E4F6A1F0]);
  id v12 = objc_msgSend(v5, "hmf_stringForKey:", *MEMORY[0x1E4F6A1F8]);
  if (v6)
  {
    os_log_type_t v13 = _Block_copy(*(const void **)(a1 + 40));
    uint64_t v14 = v13;
    if (v13) {
      (*((void (**)(void *, void, id))v13 + 2))(v13, 0, v6);
    }
  }
  else
  {
    [*(id *)(a1 + 32) _writeLogData:v11 logName:v12 completion:*(void *)(a1 + 40)];
  }
}

- (void)submitLogEventForCommandResponse:(id)a3 nodeID:(unint64_t)a4 endpointID:(id)a5 clusterID:(id)a6 commandID:(id)a7 fields:(id)a8 source:(unint64_t)a9 error:(id)a10
{
  id v16 = a10;
  id v17 = a8;
  id v18 = a7;
  id v19 = a6;
  id v20 = a5;
  id v22 = [[HMDMatterAccessoryInvokeCommandLogEvent alloc] initWithHome:self nodeId:a4 endpointId:v20 clusterId:v19 commandId:v18 fields:v17 source:a9];

  uint64_t v21 = [(HMDHome *)self logEventSubmitter];
  [v21 submitLogEvent:v22 error:v16];
}

- (void)submitLogEventForWriteAttributeWithNodeId:(unint64_t)a3 endpointId:(id)a4 clusterId:(id)a5 attributeId:(id)a6 value:(id)a7 timedWriteTimeout:(id)a8 error:(id)a9
{
  id v16 = a9;
  id v17 = a8;
  id v18 = a7;
  id v19 = a6;
  id v20 = a5;
  id v21 = a4;
  uint64_t v23 = [[HMDMatterAccessoryWriteAttributeLogEvent alloc] initWithHome:self nodeId:a3 endpointId:v21 clusterId:v20 attributeId:v19 value:v18 timedWriteTimeout:v17];

  id v22 = [(HMDHome *)self logEventSubmitter];
  [v22 submitLogEvent:v23 error:v16];
}

- (void)invokeCommandWithNodeId:(unint64_t)a3 endpointId:(id)a4 clusterId:(id)a5 commandId:(id)a6 fields:(id)a7 timedInvokeTimeout:(id)a8 source:(unint64_t)a9 completion:(id)a10
{
  id v16 = a4;
  id v17 = a5;
  id v18 = a6;
  id v19 = a7;
  id v20 = a8;
  id v21 = a10;
  id v22 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  [v22 setCHIPRemoteCommand:*MEMORY[0x1E4F6A1C0]];
  [v22 setCHIPEndpointId:v16 clusterId:v17 commandId:v18];
  if (v19) {
    [v22 setCHIPCommandFields:v19];
  }
  if (v20) {
    [v22 setCHIPTimedInvokeTimeout:v20];
  }
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 3221225472;
  v28[2] = __116__HMDHome_CHIP__invokeCommandWithNodeId_endpointId_clusterId_commandId_fields_timedInvokeTimeout_source_completion___block_invoke;
  v28[3] = &unk_1E6A062D0;
  v28[4] = self;
  id v29 = v16;
  id v30 = v17;
  id v31 = v18;
  id v32 = v19;
  id v33 = v21;
  unint64_t v34 = a3;
  unint64_t v35 = a9;
  id v23 = v19;
  id v24 = v18;
  id v25 = v17;
  id v26 = v16;
  id v27 = v21;
  [(HMDHome *)self _sendRemoteMessageUsingNodeId:a3 payload:v22 completion:v28];
}

void __116__HMDHome_CHIP__invokeCommandWithNodeId_endpointId_clusterId_commandId_fields_timedInvokeTimeout_source_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)MEMORY[0x1D9452090]();
  id v8 = *(id *)(a1 + 32);
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    id v10 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543874;
    uint64_t v14 = v10;
    __int16 v15 = 2112;
    id v16 = v5;
    __int16 v17 = 2112;
    id v18 = v6;
    _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Invoke command response: %@, error: %@", buf, 0x20u);
  }
  uint64_t v11 = *(void *)(a1 + 72);
  id v12 = [v5 objectForKeyedSubscript:@"results"];
  (*(void (**)(uint64_t, void *, id))(v11 + 16))(v11, v12, v6);

  [*(id *)(a1 + 32) submitLogEventForCommandResponse:v5 nodeID:*(void *)(a1 + 80) endpointID:*(void *)(a1 + 40) clusterID:*(void *)(a1 + 48) commandID:*(void *)(a1 + 56) fields:*(void *)(a1 + 64) source:*(void *)(a1 + 88) error:v6];
}

- (void)writeAttributeWithNodeId:(unint64_t)a3 endpointId:(id)a4 clusterId:(id)a5 attributeId:(id)a6 value:(id)a7 timedWriteTimeout:(id)a8 completion:(id)a9
{
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  id v20 = a9;
  id v21 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  [v21 setCHIPRemoteCommand:*MEMORY[0x1E4F6A1E8]];
  [v21 setCHIPEndpointId:v15 clusterId:v16 attributeId:v17];
  [v21 setCHIPData:v18];
  if (v19) {
    [v21 setCHIPTimedWriteTimeout:v19];
  }
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 3221225472;
  v28[2] = __110__HMDHome_CHIP__writeAttributeWithNodeId_endpointId_clusterId_attributeId_value_timedWriteTimeout_completion___block_invoke;
  v28[3] = &unk_1E6A062A8;
  id v34 = v20;
  unint64_t v35 = a3;
  v28[4] = self;
  id v29 = v15;
  id v30 = v16;
  id v31 = v17;
  id v32 = v18;
  id v33 = v19;
  id v22 = v19;
  id v23 = v18;
  id v24 = v17;
  id v25 = v16;
  id v26 = v15;
  id v27 = v20;
  [(HMDHome *)self _sendRemoteMessageUsingNodeId:a3 payload:v21 completion:v28];
}

void __110__HMDHome_CHIP__writeAttributeWithNodeId_endpointId_clusterId_attributeId_value_timedWriteTimeout_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)MEMORY[0x1D9452090]();
  id v8 = *(id *)(a1 + 32);
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    id v10 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543874;
    uint64_t v14 = v10;
    __int16 v15 = 2112;
    id v16 = v5;
    __int16 v17 = 2112;
    id v18 = v6;
    _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Write attribute response: %@, error: %@", buf, 0x20u);
  }
  uint64_t v11 = *(void *)(a1 + 80);
  id v12 = [v5 objectForKeyedSubscript:@"results"];
  (*(void (**)(uint64_t, void *, id))(v11 + 16))(v11, v12, v6);

  [*(id *)(a1 + 32) submitLogEventForWriteAttributeWithNodeId:*(void *)(a1 + 88) endpointId:*(void *)(a1 + 40) clusterId:*(void *)(a1 + 48) attributeId:*(void *)(a1 + 56) value:*(void *)(a1 + 64) timedWriteTimeout:*(void *)(a1 + 72) error:v6];
}

- (void)readAttributeWithNodeId:(unint64_t)a3 endpointId:(id)a4 clusterId:(id)a5 attributeId:(id)a6 params:(id)a7 completion:(id)a8
{
  id v14 = a8;
  __int16 v15 = (objc_class *)MEMORY[0x1E4F1CA60];
  id v16 = a7;
  id v17 = a6;
  id v18 = a5;
  id v19 = a4;
  id v20 = objc_alloc_init(v15);
  [v20 setCHIPRemoteCommand:*MEMORY[0x1E4F6A1D8]];
  [v20 setCHIPEndpointId:v19 clusterId:v18 attributeId:v17];

  [v20 setCHIPEncodedParams:v16];
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = __92__HMDHome_CHIP__readAttributeWithNodeId_endpointId_clusterId_attributeId_params_completion___block_invoke;
  v22[3] = &unk_1E6A0A508;
  v22[4] = self;
  id v23 = v14;
  id v21 = v14;
  [(HMDHome *)self _sendRemoteMessageUsingNodeId:a3 payload:v20 completion:v22];
}

void __92__HMDHome_CHIP__readAttributeWithNodeId_endpointId_clusterId_attributeId_params_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)MEMORY[0x1D9452090]();
  id v8 = *(id *)(a1 + 32);
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    id v10 = HMFGetLogIdentifier();
    int v13 = 138543874;
    id v14 = v10;
    __int16 v15 = 2112;
    id v16 = v5;
    __int16 v17 = 2112;
    id v18 = v6;
    _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Read attribute response: %@, error: %@", (uint8_t *)&v13, 0x20u);
  }
  uint64_t v11 = *(void *)(a1 + 40);
  id v12 = [v5 objectForKeyedSubscript:@"results"];
  (*(void (**)(uint64_t, void *, id))(v11 + 16))(v11, v12, v6);
}

- (id)matterAccessoryWithNodeID:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self matterAccessories];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __43__HMDHome_CHIP__matterAccessoryWithNodeID___block_invoke;
  void v9[3] = &unk_1E6A0FC58;
  id v10 = v4;
  id v6 = v4;
  id v7 = objc_msgSend(v5, "na_firstObjectPassingTest:", v9);

  return v7;
}

uint64_t __43__HMDHome_CHIP__matterAccessoryWithNodeID___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 matterNodeID];
  uint64_t v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

+ (void)updateCHIPPropertiesOnAccessoryModel:(id)a3 forAddedHAPAccessoryServer:(id)a4
{
  id v10 = a3;
  id v5 = a4;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v6 = v5;
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;
  id v8 = v7;
  if (v7)
  {
    id v9 = [v7 nodeID];
    [v10 setChipNodeID:v9];
  }
}

+ (BOOL)updateCHIPPropertiesOnHomeModel:(id)a3 forAddedHAPAccessoryServer:(id)a4
{
  id v5 = a3;
  id v6 = a4;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v7 = v6;
  }
  else {
    id v7 = 0;
  }
  id v8 = v7;
  id v9 = [v8 fabricID];

  if (v9)
  {
    id v10 = [v8 fabricID];
    [v5 setChipFabricID:v10];

    uint64_t v11 = [v8 fabricID];
    [v5 setChipFabricIndex:v11];
  }
  return v9 != 0;
}

- (void)removeCameraNotificationSettingsMigrationFileFromDisk
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = objc_alloc(MEMORY[0x1E4F1CB10]);
  uint64_t v4 = [(HMDHome *)self getCameraNotificationSettingsSerializedFileName];
  id v5 = (void *)[v3 initFileURLWithPath:v4];

  id v6 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v12 = 0;
  [v6 removeItemAtURL:v5 error:&v12];
  id v7 = v12;

  if (v7)
  {
    id v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = self;
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v14 = v11;
      __int16 v15 = 2112;
      id v16 = v7;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_ERROR, "%{public}@Error occurred while removing camera notification settings migration file from disk : %@", buf, 0x16u);
    }
  }
}

- (void)removeBulletinBoardNotificationsMigrationFileFromDisk
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = objc_alloc(MEMORY[0x1E4F1CB10]);
  uint64_t v4 = [(HMDHome *)self getBulletinBoardNotificationSerializedFileName];
  id v5 = (void *)[v3 initFileURLWithPath:v4];

  id v6 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v12 = 0;
  [v6 removeItemAtURL:v5 error:&v12];
  id v7 = v12;

  if (v7)
  {
    id v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = self;
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v14 = v11;
      __int16 v15 = 2112;
      id v16 = v7;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_ERROR, "%{public}@Error occurred while removing bulletin board notification migration file from disk : %@", buf, 0x16u);
    }
  }
}

- (id)loadMigrationCameraNotificationSettingsFromDisk
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = [(HMDHome *)self getCameraNotificationSettingsSerializedFileName];
  id v16 = 0;
  uint64_t v4 = [MEMORY[0x1E4F1C9B8] dataWithContentsOfFile:v3 options:2 error:&v16];
  id v5 = v16;
  id v6 = v5;
  if (v4) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    id v12 = +[HMDHome decodedMigrationCameraNotificationSettings:v4];
    id v8 = (void *)MEMORY[0x1D9452090]();
    int v13 = self;
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v14 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v18 = v14;
      __int16 v19 = 2112;
      id v20 = v12;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Camera notification settings for migration: [%@]", buf, 0x16u);
    }
  }
  else
  {
    id v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = self;
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      id v18 = v11;
      __int16 v19 = 2112;
      id v20 = v3;
      __int16 v21 = 2112;
      id v22 = v6;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_ERROR, "%{public}@Unable to read data from file : %@ / %@", buf, 0x20u);
    }
    id v12 = 0;
  }

  return v12;
}

- (id)loadMigrationBulletinBoardNotificationsFromDisk
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = [(HMDHome *)self getBulletinBoardNotificationSerializedFileName];
  id v16 = 0;
  uint64_t v4 = [MEMORY[0x1E4F1C9B8] dataWithContentsOfFile:v3 options:2 error:&v16];
  id v5 = v16;
  id v6 = v5;
  if (v4) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    id v12 = +[HMDHome decodedMigrationBulletinBoardNotifications:v4];
    id v8 = (void *)MEMORY[0x1D9452090]();
    int v13 = self;
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v14 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v18 = v14;
      __int16 v19 = 2112;
      id v20 = v12;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Bulletin board notifications for migration: [%@]", buf, 0x16u);
    }
  }
  else
  {
    id v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = self;
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      id v18 = v11;
      __int16 v19 = 2112;
      id v20 = v3;
      __int16 v21 = 2112;
      id v22 = v6;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_ERROR, "%{public}@Unable to read data from file : %@ / %@", buf, 0x20u);
    }
    id v12 = 0;
  }

  return v12;
}

- (void)storeMigrationCameraNotificationSettingsToDisk
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = (void *)MEMORY[0x1D9452090](self, a2);
  uint64_t v4 = +[HMDHome migrationCameraNotificationSettingsForHome:self];
  uint64_t v5 = [v4 count];
  id v6 = (void *)MEMORY[0x1D9452090]();
  BOOL v7 = self;
  id v8 = HMFGetOSLogHandle();
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
  if (v5)
  {
    if (v9)
    {
      id v10 = HMFGetLogIdentifier();
      uint64_t v11 = [(HMDHome *)v7 name];
      int v25 = 138543874;
      id v26 = v10;
      __int16 v27 = 2112;
      uint64_t v28 = v11;
      __int16 v29 = 2112;
      id v30 = v4;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Archiving camera notification settings for migration for home: %@, [%@]", (uint8_t *)&v25, 0x20u);
    }
    id v12 = +[HMDHome encodedMigrationCameraNotificationSettings:v4];
    if (v12)
    {
      int v13 = [(HMDHome *)v7 getCameraNotificationSettingsSerializedFileName];
      id v14 = +[HMDPersistentStore writeData:v12 toStorePath:v13 dataLabel:@"CameraNotificationSettings"];
      __int16 v15 = (void *)MEMORY[0x1D9452090]();
      id v16 = v7;
      uint64_t v17 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        id v18 = HMFGetLogIdentifier();
        int v25 = 138543874;
        id v26 = v18;
        __int16 v27 = 2112;
        uint64_t v28 = v14;
        __int16 v29 = 2112;
        id v30 = v13;
        _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Stored camera notification settings ([%@] bytes) to [%@]", (uint8_t *)&v25, 0x20u);
      }
    }
    else
    {
      __int16 v21 = (void *)MEMORY[0x1D9452090]();
      id v22 = v7;
      uint64_t v23 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        id v24 = HMFGetLogIdentifier();
        int v25 = 138543362;
        id v26 = v24;
        _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_ERROR, "%{public}@Unable to store camera notification settings during migration, archived data is nil", (uint8_t *)&v25, 0xCu);
      }
    }
  }
  else
  {
    if (v9)
    {
      __int16 v19 = HMFGetLogIdentifier();
      id v20 = [(HMDHome *)v7 name];
      int v25 = 138543618;
      id v26 = v19;
      __int16 v27 = 2112;
      uint64_t v28 = v20;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@No camera notification settings to migrate for home: %@", (uint8_t *)&v25, 0x16u);
    }
  }
}

- (void)storeMigrationBulletinBoardNotificationsToDisk
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = (void *)MEMORY[0x1D9452090](self, a2);
  uint64_t v4 = +[HMDHome migrationBulletinBoardNotificationsForHome:self];
  uint64_t v5 = [v4 count];
  id v6 = (void *)MEMORY[0x1D9452090]();
  BOOL v7 = self;
  id v8 = HMFGetOSLogHandle();
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
  if (v5)
  {
    if (v9)
    {
      id v10 = HMFGetLogIdentifier();
      uint64_t v11 = [(HMDHome *)v7 name];
      int v25 = 138543874;
      id v26 = v10;
      __int16 v27 = 2112;
      uint64_t v28 = v11;
      __int16 v29 = 2112;
      id v30 = v4;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Archiving bulletin board notifications for migration for home: %@, [%@]", (uint8_t *)&v25, 0x20u);
    }
    id v12 = +[HMDHome encodedMigrationBulletinBoardNotifications:v4];
    if (v12)
    {
      int v13 = [(HMDHome *)v7 getBulletinBoardNotificationSerializedFileName];
      id v14 = +[HMDPersistentStore writeData:v12 toStorePath:v13 dataLabel:@"BulletinBoardNotifications"];
      __int16 v15 = (void *)MEMORY[0x1D9452090]();
      id v16 = v7;
      uint64_t v17 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        id v18 = HMFGetLogIdentifier();
        int v25 = 138543874;
        id v26 = v18;
        __int16 v27 = 2112;
        uint64_t v28 = v14;
        __int16 v29 = 2112;
        id v30 = v13;
        _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Stored bulletin board notifications ([%@] bytes) to [%@]", (uint8_t *)&v25, 0x20u);
      }
    }
    else
    {
      __int16 v21 = (void *)MEMORY[0x1D9452090]();
      id v22 = v7;
      uint64_t v23 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        id v24 = HMFGetLogIdentifier();
        int v25 = 138543362;
        id v26 = v24;
        _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_ERROR, "%{public}@Unable to store bulletin board notifications during migration, archived data is nil", (uint8_t *)&v25, 0xCu);
      }
    }
  }
  else
  {
    if (v9)
    {
      __int16 v19 = HMFGetLogIdentifier();
      id v20 = [(HMDHome *)v7 name];
      int v25 = 138543618;
      id v26 = v19;
      __int16 v27 = 2112;
      uint64_t v28 = v20;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@No bulletin board notifications to migrate for home: %@", (uint8_t *)&v25, 0x16u);
    }
  }
}

- (id)getCameraNotificationSettingsSerializedFileName
{
  id v3 = NSString;
  id v4 = (id)hh1ToHH2PerDeviceMigrationDirectoryPath;
  uint64_t v5 = [(HMDHome *)self uuid];
  id v6 = [v3 stringWithFormat:@"%@/HMDHome-Camera-Notification-Settings-%@.plist", v4, v5];

  return v6;
}

- (id)getBulletinBoardNotificationSerializedFileName
{
  id v3 = NSString;
  id v4 = (id)hh1ToHH2PerDeviceMigrationDirectoryPath;
  uint64_t v5 = [(HMDHome *)self uuid];
  id v6 = [v3 stringWithFormat:@"%@/HMDHome-Bulletin-Board-Notifications-%@.plist", v4, v5];

  return v6;
}

- (BOOL)cameraNotificationSettingsMigrationFileExistsOnDisk
{
  id v3 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v4 = [(HMDHome *)self getCameraNotificationSettingsSerializedFileName];
  char v5 = [v3 fileExistsAtPath:v4];

  return v5;
}

- (BOOL)bulletinBoardNotificationsMigrationFileExistsOnDisk
{
  id v3 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v4 = [(HMDHome *)self getBulletinBoardNotificationSerializedFileName];
  char v5 = [v3 fileExistsAtPath:v4];

  return v5;
}

+ (id)decodedMigrationCameraNotificationSettings:(id)a3
{
  v30[10] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  char v5 = (void *)MEMORY[0x1E4F1CAD0];
  v30[0] = objc_opt_class();
  v30[1] = objc_opt_class();
  void v30[2] = objc_opt_class();
  v30[3] = objc_opt_class();
  void v30[4] = objc_opt_class();
  v30[5] = objc_opt_class();
  v30[6] = objc_opt_class();
  v30[7] = objc_opt_class();
  v30[8] = objc_opt_class();
  v30[9] = objc_opt_class();
  id v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v30 count:10];
  BOOL v7 = [v5 setWithArray:v6];

  id v25 = 0;
  id v8 = [MEMORY[0x1E4F28DC0] unarchivedObjectOfClasses:v7 fromData:v4 error:&v25];
  id v9 = v25;
  id v10 = v9;
  if (!v8 || v9)
  {
    id v16 = (void *)MEMORY[0x1D9452090]();
    id v17 = a1;
    id v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      __int16 v19 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v27 = v19;
      __int16 v28 = 2112;
      id v29 = v10;
      _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_ERROR, "%{public}@Unable to unarchive camera notification settings: %@", buf, 0x16u);
    }
    id v15 = 0;
  }
  else
  {
    id v11 = v8;
    objc_opt_class();
    int v12 = objc_opt_isKindOfClass() & 1;
    if (v12) {
      int v13 = v11;
    }
    else {
      int v13 = 0;
    }
    id v14 = v13;

    if (v12)
    {
      id v15 = v11;
    }
    else
    {
      id v20 = (void *)MEMORY[0x1D9452090]();
      id v21 = a1;
      id v22 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        __int16 v27 = v23;
        __int16 v28 = 2112;
        id v29 = v11;
        _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_ERROR, "%{public}@Unarchived data is the wrong type : %@", buf, 0x16u);
      }
      id v15 = 0;
    }
  }
  return v15;
}

+ (id)decodedMigrationBulletinBoardNotifications:(id)a3
{
  v30[9] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  char v5 = (void *)MEMORY[0x1E4F1CAD0];
  v30[0] = objc_opt_class();
  v30[1] = objc_opt_class();
  void v30[2] = objc_opt_class();
  v30[3] = objc_opt_class();
  void v30[4] = objc_opt_class();
  v30[5] = objc_opt_class();
  v30[6] = objc_opt_class();
  v30[7] = objc_opt_class();
  v30[8] = objc_opt_class();
  id v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v30 count:9];
  BOOL v7 = [v5 setWithArray:v6];

  id v25 = 0;
  id v8 = [MEMORY[0x1E4F28DC0] unarchivedObjectOfClasses:v7 fromData:v4 error:&v25];
  id v9 = v25;
  id v10 = v9;
  if (!v8 || v9)
  {
    id v16 = (void *)MEMORY[0x1D9452090]();
    id v17 = a1;
    id v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      __int16 v19 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v27 = v19;
      __int16 v28 = 2112;
      id v29 = v10;
      _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_ERROR, "%{public}@Unable to unarchive bulletin board notifications: %@", buf, 0x16u);
    }
    id v15 = 0;
  }
  else
  {
    id v11 = v8;
    objc_opt_class();
    int v12 = objc_opt_isKindOfClass() & 1;
    if (v12) {
      int v13 = v11;
    }
    else {
      int v13 = 0;
    }
    id v14 = v13;

    if (v12)
    {
      id v15 = v11;
    }
    else
    {
      id v20 = (void *)MEMORY[0x1D9452090]();
      id v21 = a1;
      id v22 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        __int16 v27 = v23;
        __int16 v28 = 2112;
        id v29 = v11;
        _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_ERROR, "%{public}@Unarchived data is the wrong type : %@", buf, 0x16u);
      }
      id v15 = 0;
    }
  }
  return v15;
}

+ (id)encodedMigrationCameraNotificationSettings:(id)a3
{
  id v3 = (objc_class *)MEMORY[0x1E4F28DB0];
  id v4 = a3;
  char v5 = (void *)[[v3 alloc] initRequiringSecureCoding:1];
  [v5 encodeObject:v4 forKey:*MEMORY[0x1E4F284E8]];

  [v5 finishEncoding];
  id v6 = [v5 encodedData];

  return v6;
}

+ (id)encodedMigrationBulletinBoardNotifications:(id)a3
{
  id v3 = (objc_class *)MEMORY[0x1E4F28DB0];
  id v4 = a3;
  char v5 = (void *)[[v3 alloc] initRequiringSecureCoding:1];
  [v5 encodeObject:v4 forKey:*MEMORY[0x1E4F284E8]];

  [v5 finishEncoding];
  id v6 = [v5 encodedData];

  return v6;
}

+ (id)migrationCameraNotificationSettingsForHome:(id)a3
{
  id v4 = (void *)MEMORY[0x1E4F1CA48];
  id v5 = a3;
  id v6 = [v4 array];
  BOOL v7 = [v5 cameraAccessories];

  uint64_t v11 = MEMORY[0x1E4F143A8];
  uint64_t v12 = 3221225472;
  int v13 = __77__HMDHome_BulletinNotifications__migrationCameraNotificationSettingsForHome___block_invoke;
  id v14 = &unk_1E6A06660;
  id v15 = v6;
  id v16 = a1;
  id v8 = v6;
  objc_msgSend(v7, "na_each:", &v11);

  id v9 = objc_msgSend(v8, "copy", v11, v12, v13, v14);
  return v9;
}

void __77__HMDHome_BulletinNotifications__migrationCameraNotificationSettingsForHome___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [v3 cameraProfileNotificationSettings];
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = *(id *)(a1 + 40);
  BOOL v7 = HMFGetOSLogHandle();
  id v8 = v7;
  if (v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v9 = HMFGetLogIdentifier();
      id v10 = [v3 uuid];
      *(_DWORD *)buf = 138543874;
      id v18 = v9;
      __int16 v19 = 2112;
      id v20 = v10;
      __int16 v21 = 2112;
      id v22 = v4;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Adding camera notification settings entry for migration: accessoryUUID: %@ cameraProfileNotificationSettings: %@", buf, 0x20u);
    }
    uint64_t v11 = *(void **)(a1 + 32);
    uint64_t v12 = objc_msgSend(v3, "uuid", @"HMD.CNS.A");
    v15[1] = @"HMD.CNS";
    v16[0] = v12;
    v16[1] = v4;
    int v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v16 forKeys:v15 count:2];
    [v11 addObject:v13];
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v14 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v18 = v14;
      __int16 v19 = 2112;
      id v20 = v3;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_ERROR, "%{public}@Camera accessory: %@ missing camera profile notification settings during migration", buf, 0x16u);
    }
  }
}

+ (id)migrationBulletinBoardNotificationsForHome:(id)a3
{
  id v4 = (void *)MEMORY[0x1E4F1CA48];
  id v5 = a3;
  id v6 = [v4 array];
  BOOL v7 = [v5 hapAccessories];

  uint64_t v11 = MEMORY[0x1E4F143A8];
  uint64_t v12 = 3221225472;
  int v13 = __77__HMDHome_BulletinNotifications__migrationBulletinBoardNotificationsForHome___block_invoke;
  id v14 = &unk_1E6A06660;
  id v15 = v6;
  id v16 = a1;
  id v8 = v6;
  objc_msgSend(v7, "na_each:", &v11);

  id v9 = objc_msgSend(v8, "copy", v11, v12, v13, v14);
  return v9;
}

void __77__HMDHome_BulletinNotifications__migrationBulletinBoardNotificationsForHome___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 services];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = __77__HMDHome_BulletinNotifications__migrationBulletinBoardNotificationsForHome___block_invoke_2;
  v8[3] = &unk_1E6A06638;
  id v9 = v3;
  long long v7 = *(_OWORD *)(a1 + 32);
  id v5 = (id)v7;
  long long v10 = v7;
  id v6 = v3;
  objc_msgSend(v4, "na_each:", v8);
}

void __77__HMDHome_BulletinNotifications__migrationBulletinBoardNotificationsForHome___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [v3 bulletinBoardNotification];
  if (v4)
  {
    id v5 = [MEMORY[0x1E4F1CA98] null];
    id v6 = [v4 condition];

    if (v6)
    {
      long long v7 = (void *)[objc_alloc(MEMORY[0x1E4F28DB0]) initRequiringSecureCoding:1];
      id v8 = [v4 condition];
      [v7 encodeObject:v8 forKey:*MEMORY[0x1E4F284E8]];

      [v7 finishEncoding];
      uint64_t v9 = [v7 encodedData];

      id v5 = (void *)v9;
    }
    long long v10 = (void *)MEMORY[0x1D9452090]();
    id v11 = *(id *)(a1 + 48);
    uint64_t v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      int v13 = HMFGetLogIdentifier();
      id v14 = [*(id *)(a1 + 32) uuid];
      id v15 = [v3 instanceID];
      [v4 isEnabled];
      HMFBooleanToString();
      id v16 = v22 = v10;
      *(_DWORD *)buf = 138544386;
      id v26 = v13;
      __int16 v27 = 2112;
      __int16 v28 = v14;
      __int16 v29 = 2112;
      id v30 = v15;
      __int16 v31 = 2112;
      id v32 = v5;
      __int16 v33 = 2112;
      id v34 = v16;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Adding bulletin board notification entry for migration: accessoryUUID: %@ serviceInstanceID: %@ predicate: %@ enabled: %@", buf, 0x34u);

      long long v10 = v22;
    }

    v23[0] = @"HMD.BBN.A";
    id v17 = *(void **)(a1 + 40);
    id v18 = [*(id *)(a1 + 32) uuid];
    v24[0] = v18;
    v23[1] = @"HMD.BBN.S";
    __int16 v19 = [v3 instanceID];
    v24[1] = v19;
    v24[2] = v5;
    v23[2] = @"HMD.BBN.P";
    v23[3] = @"HMD.BBN.E";
    id v20 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v4, "isEnabled"));
    v24[3] = v20;
    __int16 v21 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:v23 count:4];
    [v17 addObject:v21];
  }
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_notificationHandlerMap, 0);
  objc_storeStrong((id *)&self->_featureDataSource, 0);
  objc_storeStrong((id *)&self->_audioAnalysisStereoPairController, 0);
  objc_storeStrong((id *)&self->_carPlayDataSource, 0);
  objc_storeStrong((id *)&self->_siriSecureAccessoryAccessController, 0);
  objc_storeStrong((id *)&self->_homeTheaterSetupMetricDispatcher, 0);
  objc_storeStrong((id *)&self->_mediaSystemSetupMetricDispatcher, 0);
  objc_storeStrong((id *)&self->_mediaGroupsAggregateConsumer, 0);
  objc_storeStrong((id *)&self->_chipLocalSubscribers, 0);
  objc_storeStrong((id *)&self->_altTargetFabricUUID, 0);
  objc_storeStrong((id *)&self->_currentAdministerCATID, 0);
  objc_storeStrong((id *)&self->_currentOperateCATID, 0);
  objc_storeStrong((id *)&self->_threadOperationalDataset, 0);
  objc_storeStrong((id *)&self->_fabric, 0);
  objc_storeStrong((id *)&self->_chipStorage, 0);
  objc_storeStrong((id *)&self->_accountSettings, 0);
  objc_storeStrong((id *)&self->_homeRemoteEventAccessController, 0);
  objc_storeStrong((id *)&self->_reachabilityNotificationManager, 0);
  objc_storeStrong((id *)&self->_personManagerZoneUUID, 0);
  objc_storeStrong((id *)&self->_mediaActionRouter, 0);
  objc_storeStrong((id *)&self->_sharedHomeSourceVersion, 0);
  objc_storeStrong((id *)&self->_predicateUtility, 0);
  objc_storeStrong((id *)&self->_uuidToHAPAccessoryConfigTable, 0);
  objc_storeStrong((id *)&self->_ownedTriggers, 0);
  objc_storeStrong((id *)&self->_pendingResponsesTimer, 0);
  objc_storeStrong((id *)&self->_pendingResponses, 0);
  objc_storeStrong((id *)&self->_disableNotificationTimer, 0);
  objc_storeStrong((id *)&self->_remoteReachabilityNotificationPendingAccessories, 0);
  objc_storeStrong((id *)&self->_reachabilityNotificationTimer, 0);
  objc_storeStrong((id *)&self->_reachabilityRegisteredDevices, 0);
  objc_storeStrong((id *)&self->_stagedRemoteReachabilityRegistration, 0);
  objc_storeStrong((id *)&self->_sharedHomeUpdateHandler, 0);
  objc_storeStrong((id *)&self->_residentDeviceManager, 0);
  objc_storeStrong((id *)&self->_unpairedSecondaryHAPAccessories, 0);
  objc_storeStrong((id *)&self->_modifyNotificationsCoalesceTimer, 0);
  objc_storeStrong((id *)&self->_localCapabilitiesDataSource, 0);
  objc_storeStrong((id *)&self->_disableNotificationPayload, 0);
  objc_storeStrong((id *)&self->_enableNotificationPayload, 0);
  objc_storeStrong((id *)&self->_assistantOperations, 0);
  objc_storeStrong((id *)&self->_pendingResponsesForRemoteAccessSetup, 0);
  objc_storeStrong((id *)&self->_heartbeatPingMessagesQueuedWithServer, 0);
  objc_storeStrong((id *)&self->_notificationRegistry, 0);
  objc_storeStrong((id *)&self->_firstHAPAccessoryAddedDate, 0);
  objc_storeStrong((id *)&self->_creationDate, 0);
  objc_storeStrong((id *)&self->_ownerName, 0);
  objc_storeStrong((id *)&self->_roomForEntireHome, 0);
  objc_storeStrong((id *)&self->_unconfiguredResidentDevices, 0);
  objc_storeStrong((id *)&self->_removedUsers, 0);
  objc_storeStrong((id *)&self->_usersPendingUserManagementOperations, 0);
  objc_storeStrong((id *)&self->_retrievalAccessoryCompletionTuples, 0);
  objc_storeStrong((id *)&self->_triggerOwnedActionSets, 0);
  objc_storeStrong((id *)&self->_actionSets, 0);
  objc_storeStrong((id *)&self->_serviceGroups, 0);
  objc_storeStrong((id *)&self->_services, 0);
  objc_storeStrong((id *)&self->_discoveredAccessories, 0);
  objc_storeStrong((id *)&self->_zones, 0);
  objc_storeStrong((id *)&self->_rooms, 0);
  objc_storeStrong((id *)&self->_accessoryMessageRouterViaPrimary, 0);
  objc_storeStrong((id *)&self->_notificationCenter, 0);
  objc_storeStrong((id *)&self->_appleDeviceRouter, 0);
  objc_storeStrong((id *)&self->_primaryResidentMessageRouter, 0);
  objc_storeStrong((id *)&self->_accessoryBrowser, 0);
  objc_storeStrong((id *)&self->_msgDispatcher, 0);
  objc_storeStrong((id *)&self->_workQueue, 0);
  objc_storeStrong((id *)&self->_homeObjectChangeHandler, 0);
  objc_storeStrong((id *)&self->_accessorySettingsMessenger, 0);
  objc_storeStrong((id *)&self->_appleMediaAccessoriesStateManager, 0);
  objc_storeStrong((id *)&self->_multiuserSettingsMessenger, 0);
  objc_storeStrong((id *)&self->_siriEndpointProfilesMessenger, 0);
  objc_storeStrong((id *)&self->_unifiedLanguageValueListSettingDataProvider, 0);
  objc_storeStrong((id *)&self->_appData, 0);
  objc_storeStrong(&self->_wifiManagerFactory, 0);
  objc_storeStrong(&self->_netManagerFactory, 0);
  objc_storeStrong((id *)&self->_matterFabricEnabledClients, 0);
  objc_storeStrong((id *)&self->_accessoryRemoteReachabilityEnabledClients, 0);
  objc_storeStrong((id *)&self->_remoteEventRouterClientController, 0);
  objc_storeStrong((id *)&self->_currentHomeKitVersion, 0);
  objc_storeStrong((id *)&self->_reportingSessionManager, 0);
  objc_storeStrong((id *)&self->_keychainStore, 0);
  objc_storeStrong((id *)&self->_capabilitiesAggregator, 0);
  objc_storeStrong((id *)&self->_serverDelegatingEventRouter, 0);
  objc_storeStrong((id *)&self->_accessoryInfoFetchController, 0);
  objc_storeStrong((id *)&self->_mediaStateManager, 0);
  objc_storeStrong((id *)&self->_deviceLockStateDataSource, 0);
  objc_storeStrong((id *)&self->_hapMetadata, 0);
  objc_storeStrong((id *)&self->_metricsDispatcher, 0);
  objc_storeStrong((id *)&self->_accessoryReaderWriter, 0);
  objc_storeStrong((id *)&self->_accessoryConnectionCoordinator, 0);
  objc_storeStrong((id *)&self->_naturalLightingContextUpdater, 0);
  objc_storeStrong((id *)&self->_personDataManager, 0);
  objc_storeStrong((id *)&self->_remoteEventRouterServer, 0);
  objc_storeStrong((id *)&self->_connectionsDiscoveringSymptomsForNearbyDevices, 0);
  objc_storeStrong((id *)&self->_homeReprovisionHandler, 0);
  objc_storeStrong((id *)&self->_addPendingAccessories, 0);
  objc_storeStrong((id *)&self->_addPendingAccessoryOnboardingSetupPayloadStrings, 0);
  objc_storeStrong((id *)&self->_addPendingAccessorySetupCodes, 0);
  objc_storeStrong((id *)&self->_addPendingAccessorySetupCodeHandlers, 0);
  objc_storeStrong((id *)&self->_WiFiAssertion, 0);
  objc_storeStrong((id *)&self->_removeAccessoryInProgressForHMDAccessories, 0);
  objc_storeStrong((id *)&self->_xpcMessageTransportFactory, 0);
  objc_storeStrong(&self->_currentUserFactory, 0);
  objc_storeStrong((id *)&self->_autoSelectedPreferredResidents, 0);
  objc_storeStrong((id *)&self->_userSelectedPreferredResident, 0);
  objc_storeStrong((id *)&self->_dailyScheduler, 0);
  objc_storeStrong((id *)&self->_logEventSubmitter, 0);
  objc_storeStrong((id *)&self->_reachabilityChangedLogEventManager, 0);
  objc_storeStrong((id *)&self->_lockNotificationManager, 0);
  objc_storeStrong((id *)&self->_removedUserInfoByAccessCode, 0);
  objc_storeStrong((id *)&self->_labelsByAccessCode, 0);
  objc_storeStrong((id *)&self->_accessCodeManager, 0);
  objc_storeStrong((id *)&self->_nfcReaderKeyManager, 0);
  objc_storeStrong((id *)&self->_walletKeyManager, 0);
  objc_storeStrong((id *)&self->_naturalLightingCurveWriter, 0);
  objc_storeStrong((id *)&self->_userActionPredictionManager, 0);
  objc_storeStrong((id *)&self->_analysisStatePublisher, 0);
  objc_storeStrong((id *)&self->_primaryResidentChangeMonitor, 0);
  objc_storeStrong((id *)&self->_periodicReader, 0);
  objc_storeStrong((id *)&self->_mediaSystemController, 0);
  objc_storeStrong((id *)&self->_presenceMonitor, 0);
  objc_storeStrong((id *)&self->_notificationsUpdatedTime, 0);
  objc_storeStrong((id *)&self->_mediaGroupsUnconfiguredParticipantOnboardingManager, 0);
  objc_storeStrong((id *)&self->_mediaGroupsAggregator, 0);
  objc_storeStrong((id *)&self->_administratorHandler, 0);
  objc_storeStrong((id *)&self->_presenceComputeStatus, 0);
  objc_storeStrong((id *)&self->_presenceAuthStatus, 0);
  objc_storeStrong((id *)&self->_homeLocationHandler, 0);
  objc_storeStrong((id *)&self->_zoneID, 0);
  objc_storeStrong((id *)&self->_spiClientIdentifier, 0);
  objc_storeStrong((id *)&self->_uuid, 0);
  objc_destroyWeak((id *)&self->_homeManager);
  objc_storeStrong((id *)&self->_lookup, 0);
  objc_storeStrong((id *)&self->_naturalLightingContext, 0);
  objc_storeStrong((id *)&self->_personManagerSettings, 0);
  objc_storeStrong((id *)&self->_availableBSPsCount, 0);
  objc_storeStrong((id *)&self->_availableBorderRouters, 0);
  objc_storeStrong((id *)&self->_overriddenHomeAccessControl, 0);
  objc_storeStrong((id *)&self->_nfcReaderKey, 0);
  objc_storeStrong((id *)&self->_threadNetworkPeriodicStatusReporter, 0);
  objc_storeStrong((id *)&self->_unfilteredThreadNetworkID, 0);
  objc_storeStrong((id *)&self->_outgoingInvitations, 0);
  objc_storeStrong((id *)&self->_currentTriggers, 0);
  objc_storeStrong((id *)&self->_name, 0);
  objc_storeStrong((id *)&self->_minHomeKitVersionForAccessoryNetworkProtectionChange, 0);
  objc_storeStrong((id *)&self->_minimumNetworkRouterSupportHomeKitVersion, 0);
  objc_storeStrong((id *)&self->_backingStore, 0);
  objc_storeStrong((id *)&self->_primaryNetworkRouterManagingDeviceUUID, 0);
  objc_storeStrong((id *)&self->_presenceFeeder, 0);
  objc_storeStrong((id *)&self->_newlyConfiguredAccessories, 0);
  objc_storeStrong((id *)&self->_activeNetworkRouterUUID, 0);
  objc_storeStrong((id *)&self->_networkProtectionGroupRegistry, 0);
  objc_storeStrong((id *)&self->_routerClientManager, 0);
  objc_storeStrong((id *)&self->_sharedUserResponseEventBuilders, 0);
  objc_storeStrong((id *)&self->_sharedUserInviteEventBuilders, 0);
  objc_storeStrong((id *)&self->_notificationDeregistrations, 0);
  objc_storeStrong((id *)&self->_notificationRegistrationsForAppleMediaAccessories, 0);
  objc_storeStrong((id *)&self->_notificationRegistrations, 0);
  objc_storeStrong((id *)&self->_logger, 0);
  objc_storeStrong((id *)&self->_reachabilityUpdatedAccessories, 0);
  objc_storeStrong((id *)&self->_accessoryReachabilityUpdatesTimer, 0);
  objc_storeStrong((id *)&self->_homeLocationTimer, 0);
  objc_storeStrong((id *)&self->_mediaPassword, 0);
  objc_storeStrong((id *)&self->_currentUser, 0);
  objc_storeStrong((id *)&self->_owner, 0);
  objc_storeStrong((id *)&self->_users, 0);
  objc_storeStrong((id *)&self->_mediaSessionStates, 0);
  objc_storeStrong((id *)&self->_mediaSessions, 0);
  objc_storeStrong((id *)&self->_accessories, 0);
}

- (void)setPrimaryResidentChangedTime:(double)a3
{
  self->_primaryResidentChangedTime = a3;
}

- (double)primaryResidentChangedTime
{
  return self->_primaryResidentChangedTime;
}

- (void)setCurrentDeviceBecamePrimaryTime:(double)a3
{
  self->_currentDeviceBecamePrimaryTime = a3;
}

- (double)currentDeviceBecamePrimaryTime
{
  return self->_currentDeviceBecamePrimaryTime;
}

- (void)setNotificationHandlerMap:(id)a3
{
}

- (NSMutableDictionary)notificationHandlerMap
{
  return self->_notificationHandlerMap;
}

- (void)setFeatureDataSource:(id)a3
{
}

- (HMDFeaturesDataSource)featureDataSource
{
  return (HMDFeaturesDataSource *)objc_getProperty(self, a2, 1584, 1);
}

- (void)setThreadNetworkNodeType:(int64_t)a3
{
  self->_threadNetworkNodeType = a3;
}

- (int64_t)threadNetworkNodeType
{
  return self->_threadNetworkNodeType;
}

- (void)setThreadNetworkConnectionState:(int64_t)a3
{
  self->_threadNetworkConnectionState = a3;
}

- (int64_t)threadNetworkConnectionState
{
  return self->_threadNetworkConnectionState;
}

- (void)setIsSiriPhraseOptionsJustSiriEnabled:(BOOL)a3
{
  self->_isSiriPhraseOptionsJustSiriEnabled = a3;
}

- (void)setIsSiriPhraseOptionsHeySiriEnabled:(BOOL)a3
{
  self->_isSiriPhraseOptionsHeySiriEnabled = a3;
}

- (void)setIsSmokeAlarmEnabled:(BOOL)a3
{
  self->_isSmokeAlarmEnabled = a3;
}

- (void)setAudioAnalysisStereoPairController:(id)a3
{
}

- (HMDHomeAudioAnalysisStereoPairController)audioAnalysisStereoPairController
{
  return (HMDHomeAudioAnalysisStereoPairController *)objc_getProperty(self, a2, 1560, 1);
}

- (HMDCarPlayDataSource)carPlayDataSource
{
  return (HMDCarPlayDataSource *)objc_getProperty(self, a2, 1552, 1);
}

- (HMDSiriSecureAccessoryAccessController)siriSecureAccessoryAccessController
{
  return (HMDSiriSecureAccessoryAccessController *)objc_getProperty(self, a2, 1544, 1);
}

- (void)setThreadNetworkShouldRestartOnNetworkChange:(BOOL)a3
{
  self->_threadNetworkShouldRestartOnNetworkChange = a3;
}

- (BOOL)threadNetworkShouldRestartOnNetworkChange
{
  return self->_threadNetworkShouldRestartOnNetworkChange;
}

- (HMDMediaGroupSetupMetricDispatcher)homeTheaterSetupMetricDispatcher
{
  return self->_homeTheaterSetupMetricDispatcher;
}

- (HMDMediaGroupSetupMetricDispatcher)mediaSystemSetupMetricDispatcher
{
  return self->_mediaSystemSetupMetricDispatcher;
}

- (HMDMediaGroupsAggregateConsumer)mediaGroupsAggregateConsumer
{
  return (HMDMediaGroupsAggregateConsumer *)objc_getProperty(self, a2, 1520, 1);
}

- (void)setBulletinNotificationsSupported:(BOOL)a3
{
  self->_bulletinNotificationsSupported = a3;
}

- (void)setChipLocalSubscribers:(id)a3
{
}

- (NSMutableDictionary)chipLocalSubscribers
{
  return self->_chipLocalSubscribers;
}

- (NSUUID)altTargetFabricUUID
{
  return (NSUUID *)objc_getProperty(self, a2, 1504, 1);
}

- (void)setCurrentMatterClientRegistration:(BOOL)a3
{
  self->_currentMatterClientRegistratiouint64_t n = a3;
}

- (BOOL)currentMatterClientRegistration
{
  return self->_currentMatterClientRegistration;
}

- (void)setCurrentAdministerCATID:(id)a3
{
}

- (NSNumber)currentAdministerCATID
{
  return self->_currentAdministerCATID;
}

- (void)setCurrentOperateCATID:(id)a3
{
}

- (NSNumber)currentOperateCATID
{
  return self->_currentOperateCATID;
}

- (void)setThreadOperationalDataset:(id)a3
{
}

- (NSData)threadOperationalDataset
{
  return self->_threadOperationalDataset;
}

- (void)setFabric:(id)a3
{
}

- (void)setChipStorage:(id)a3
{
}

- (HMDAppleAccountSettings)accountSettings
{
  return (HMDAppleAccountSettings *)objc_getProperty(self, a2, 1456, 1);
}

- (unint64_t)nonIPadResidentDeviceCountForHH2Migration
{
  return self->_nonIPadResidentDeviceCountForHH2Migration;
}

- (HMDHomeRemoteEventAccessController)homeRemoteEventAccessController
{
  return (HMDHomeRemoteEventAccessController *)objc_getProperty(self, a2, 1440, 1);
}

- (HMDResidentReachabilityNotificationManager)reachabilityNotificationManager
{
  return (HMDResidentReachabilityNotificationManager *)objc_getProperty(self, a2, 1432, 1);
}

- (void)setPersonManagerZoneUUID:(id)a3
{
}

- (NSUUID)personManagerZoneUUID
{
  return self->_personManagerZoneUUID;
}

- (void)setMediaActionRouter:(id)a3
{
}

- (HMDMediaActionRouter)mediaActionRouter
{
  return self->_mediaActionRouter;
}

- (void)setSharedHomeSourceVersion:(id)a3
{
}

- (HMDHomeKitVersion)sharedHomeSourceVersion
{
  return self->_sharedHomeSourceVersion;
}

- (HMDPredicateUtilities)predicateUtility
{
  return self->_predicateUtility;
}

- (void)setUuidToHAPAccessoryConfigTable:(id)a3
{
}

- (NSMapTable)uuidToHAPAccessoryConfigTable
{
  return self->_uuidToHAPAccessoryConfigTable;
}

- (void)setOwnedTriggers:(id)a3
{
}

- (NSMutableArray)ownedTriggers
{
  return self->_ownedTriggers;
}

- (void)setPendingResponsesTimer:(id)a3
{
}

- (HMFTimer)pendingResponsesTimer
{
  return self->_pendingResponsesTimer;
}

- (void)setPendingResponses:(id)a3
{
}

- (void)setDisableNotificationTimer:(id)a3
{
}

- (HMFTimer)disableNotificationTimer
{
  return self->_disableNotificationTimer;
}

- (void)setRemoteReachabilityNotificationPendingAccessories:(id)a3
{
}

- (NSMutableArray)remoteReachabilityNotificationPendingAccessories
{
  return self->_remoteReachabilityNotificationPendingAccessories;
}

- (void)setReachabilityNotificationTimer:(id)a3
{
}

- (HMFTimer)reachabilityNotificationTimer
{
  return self->_reachabilityNotificationTimer;
}

- (void)setReachabilityRegisteredDevices:(id)a3
{
}

- (NSMutableArray)reachabilityRegisteredDevices
{
  return self->_reachabilityRegisteredDevices;
}

- (void)setIsUpdatedToHH2:(BOOL)a3
{
  self->_isUpdatedToHH2 = a3;
}

- (HMDManagedStagedValue)stagedRemoteReachabilityRegistration
{
  return self->_stagedRemoteReachabilityRegistration;
}

- (void)setCurrentRemoteReachabilityRegistration:(BOOL)a3
{
  self->_currentRemoteReachabilityRegistratiouint64_t n = a3;
}

- (HMDSharedHomeUpdateHandler)sharedHomeUpdateHandler
{
  return self->_sharedHomeUpdateHandler;
}

- (NSHashTable)unpairedSecondaryHAPAccessories
{
  return self->_unpairedSecondaryHAPAccessories;
}

- (HMDHomeLocalDeviceCapabilitiesDataSource)localCapabilitiesDataSource
{
  return self->_localCapabilitiesDataSource;
}

- (void)setAssistantOperations:(id)a3
{
}

- (NSMutableArray)assistantOperations
{
  return self->_assistantOperations;
}

- (void)setMigratingAfterResidentChange:(BOOL)a3
{
  self->_migratingAfterResidentChange = a3;
}

- (BOOL)isMigratingAfterResidentChange
{
  return self->_migratingAfterResidentChange;
}

- (void)setAllowsRemoteAccess:(BOOL)a3
{
  self->_allowsRemoteAccess = a3;
}

- (BOOL)allowsRemoteAccess
{
  return self->_allowsRemoteAccess;
}

- (void)setRegisteredNotificationWithRemoteGateway:(BOOL)a3
{
  self->_registeredNotificationWithRemoteGateway = a3;
}

- (BOOL)registeredNotificationWithRemoteGateway
{
  return self->_registeredNotificationWithRemoteGateway;
}

- (void)setSharedAdmin:(BOOL)a3
{
  self->_sharedAdmiuint64_t n = a3;
}

- (void)setAdminUser:(BOOL)a3
{
  self->_adminUser = a3;
}

- (void)setPendingResponsesForRemoteAccessSetup:(id)a3
{
}

- (NSMutableSet)pendingResponsesForRemoteAccessSetup
{
  return self->_pendingResponsesForRemoteAccessSetup;
}

- (void)setHeartbeatPingMessagesQueuedWithServer:(id)a3
{
}

- (NSMutableSet)heartbeatPingMessagesQueuedWithServer
{
  return self->_heartbeatPingMessagesQueuedWithServer;
}

- (void)setRemoteAccessIsEnabled:(BOOL)a3
{
  self->_remoteAccessIsEnabled = a3;
}

- (void)setNotificationRegistry:(id)a3
{
}

- (HMDNotificationRegistry)notificationRegistry
{
  return self->_notificationRegistry;
}

- (void)setFirstHAPAccessoryAddedDate:(id)a3
{
}

- (void)setCreationDate:(id)a3
{
}

- (void)setOwnerName:(id)a3
{
}

- (void)setExpectedConfigurationVersion:(int64_t)a3
{
  self->_expectedConfigurationVersiouint64_t n = a3;
}

- (int64_t)expectedConfigurationVersion
{
  return self->_expectedConfigurationVersion;
}

- (void)setLastSyncedConfigurationVersion:(int64_t)a3
{
  self->_lastSyncedConfigurationVersiouint64_t n = a3;
}

- (int64_t)lastSyncedConfigurationVersion
{
  return self->_lastSyncedConfigurationVersion;
}

- (void)setConfigurationVersion:(int64_t)a3
{
  self->_configurationVersiouint64_t n = a3;
}

- (void)setRoomForEntireHome:(id)a3
{
}

- (void)setUnconfiguredResidentDevices:(id)a3
{
}

- (NSMutableArray)unconfiguredResidentDevices
{
  return self->_unconfiguredResidentDevices;
}

- (void)setRemovedUsers:(id)a3
{
}

- (NSMutableArray)removedUsers
{
  return self->_removedUsers;
}

- (void)setUsersPendingUserManagementOperations:(id)a3
{
}

- (NSMutableArray)usersPendingUserManagementOperations
{
  return self->_usersPendingUserManagementOperations;
}

- (void)setRetrievalAccessoryCompletionTuples:(id)a3
{
}

- (void)setTriggerOwnedActionSets:(id)a3
{
}

- (void)setActionSets:(id)a3
{
}

- (void)setServiceGroups:(id)a3
{
}

- (void)setServices:(id)a3
{
}

- (NSMutableArray)services
{
  return self->_services;
}

- (void)setDiscoveredAccessories:(id)a3
{
}

- (void)setZones:(id)a3
{
}

- (void)setRooms:(id)a3
{
}

- (void)setAccessoryMessageRouterViaPrimary:(id)a3
{
}

- (HMDDelegatingMessageRouter)accessoryMessageRouterViaPrimary
{
  return (HMDDelegatingMessageRouter *)objc_getProperty(self, a2, 1088, 1);
}

- (void)setAppleDeviceRouter:(id)a3
{
}

- (HMDAppleMediaAccessoryMessageRouter)appleDeviceRouter
{
  return (HMDAppleMediaAccessoryMessageRouter *)objc_getProperty(self, a2, 1072, 1);
}

- (void)setPrimaryResidentMessageRouter:(id)a3
{
}

- (HMDPrimaryResidentMessageRouter)primaryResidentMessageRouter
{
  return (HMDPrimaryResidentMessageRouter *)objc_getProperty(self, a2, 1064, 1);
}

- (void)setAccessoryBrowser:(id)a3
{
}

- (void)setMsgDispatcher:(id)a3
{
}

- (void)setWorkQueue:(id)a3
{
}

- (HMDHomeObjectChangeHandler)homeObjectChangeHandler
{
  return self->_homeObjectChangeHandler;
}

- (void)setAccessorySettingsMessenger:(id)a3
{
}

- (HMDAccessorySettingsMessenger)accessorySettingsMessenger
{
  return (HMDAccessorySettingsMessenger *)objc_getProperty(self, a2, 1024, 1);
}

- (void)setAppleMediaAccessoriesStateManager:(id)a3
{
}

- (HMDAppleMediaAccessoriesStateManager)appleMediaAccessoriesStateManager
{
  return (HMDAppleMediaAccessoriesStateManager *)objc_getProperty(self, a2, 1016, 1);
}

- (void)setMultiuserSettingsMessenger:(id)a3
{
}

- (HMDMultiuserSettingsMessenger)multiuserSettingsMessenger
{
  return (HMDMultiuserSettingsMessenger *)objc_getProperty(self, a2, 1008, 1);
}

- (void)setSiriEndpointProfilesMessenger:(id)a3
{
}

- (HMDSiriEndpointProfilesMessenger)siriEndpointProfilesMessenger
{
  return (HMDSiriEndpointProfilesMessenger *)objc_getProperty(self, a2, 1000, 1);
}

- (void)setUnifiedLanguageValueListSettingDataProvider:(id)a3
{
}

- (HMDUnifiedLanguageValueListSettingDataProvider)unifiedLanguageValueListSettingDataProvider
{
  return (HMDUnifiedLanguageValueListSettingDataProvider *)objc_getProperty(self, a2, 992, 1);
}

- (void)setAppData:(id)a3
{
}

- (void)setWifiManagerFactory:(id)a3
{
}

- (id)wifiManagerFactory
{
  return objc_getProperty(self, a2, 976, 1);
}

- (void)setNetManagerFactory:(id)a3
{
}

- (id)netManagerFactory
{
  return objc_getProperty(self, a2, 968, 1);
}

- (NSMutableArray)matterFabricEnabledClients
{
  return self->_matterFabricEnabledClients;
}

- (NSMutableArray)accessoryRemoteReachabilityEnabledClients
{
  return self->_accessoryRemoteReachabilityEnabledClients;
}

- (void)setRemoteEventRouterClientController:(id)a3
{
}

- (HMDHomeRemoteEventRouterClientController)remoteEventRouterClientController
{
  return (HMDHomeRemoteEventRouterClientController *)objc_getProperty(self, a2, 944, 1);
}

- (void)setCurrentHomeKitVersion:(id)a3
{
}

- (HMDHomeKitVersion)currentHomeKitVersion
{
  return self->_currentHomeKitVersion;
}

- (void)setOverrideSentinelZoneForConvergencePeriod:(BOOL)a3
{
  self->_overrideSentinelZoneForConvergencePeriod = a3;
}

- (BOOL)overrideSentinelZoneForConvergencePeriod
{
  return self->_overrideSentinelZoneForConvergencePeriod;
}

- (void)setCapabilitiesAggregator:(id)a3
{
}

- (HMDPrimaryResidentCapabilitiesAggregator)capabilitiesAggregator
{
  return self->_capabilitiesAggregator;
}

- (HMEDelegatingEventRouter)serverDelegatingEventRouter
{
  return (HMEDelegatingEventRouter *)objc_getProperty(self, a2, 904, 1);
}

- (HMDAccessoryInfoFetchController)accessoryInfoFetchController
{
  return self->_accessoryInfoFetchController;
}

- (void)setResidentFirstAccessoryCommunicationEnabled:(BOOL)a3
{
  self->_residentFirstAccessoryCommunicationEnabled = a3;
}

- (void)setMediaStateManager:(id)a3
{
}

- (HMDResidentAppleMediaStateManager)mediaStateManager
{
  return self->_mediaStateManager;
}

- (HMDHomeMetricsDispatcher)metricsDispatcher
{
  return (HMDHomeMetricsDispatcher *)objc_getProperty(self, a2, 864, 1);
}

- (void)setIsNetworkAvailable:(BOOL)a3
{
  self->_isNetworkAvailable = a3;
}

- (BOOL)isNetworkAvailable
{
  return self->_isNetworkAvailable;
}

- (void)setAccessoryReaderWriter:(id)a3
{
}

- (HMDHAPAccessoryReaderWriter)accessoryReaderWriter
{
  return self->_accessoryReaderWriter;
}

- (void)setAccessoryConnectionCoordinator:(id)a3
{
}

- (HMDHAPAccessoryConnectionCoordinator)accessoryConnectionCoordinator
{
  return self->_accessoryConnectionCoordinator;
}

- (void)setNaturalLightingContextUpdater:(id)a3
{
}

- (HMDHomeNaturalLightingContextUpdater)naturalLightingContextUpdater
{
  return (HMDHomeNaturalLightingContextUpdater *)objc_getProperty(self, a2, 840, 1);
}

- (HMDHomePersonDataManager)personDataManager
{
  return (HMDHomePersonDataManager *)objc_getProperty(self, a2, 832, 1);
}

- (void)setPreviousReachableAccessoriesCountExcludingMatter:(int64_t)a3
{
  self->_previousReachableAccessoriesCountExcludingMatter = a3;
}

- (int64_t)previousReachableAccessoriesCountExcludingMatter
{
  return self->_previousReachableAccessoriesCountExcludingMatter;
}

- (void)setPreviousReachableAppleMediaAccessoriesCount:(int64_t)a3
{
  self->_previousReachableAppleMediaAccessoriesCount = a3;
}

- (int64_t)previousReachableAppleMediaAccessoriesCount
{
  return self->_previousReachableAppleMediaAccessoriesCount;
}

- (void)setPreviousReachableAccessoriesCount:(int64_t)a3
{
  self->_previousReachableAccessoriesCount = a3;
}

- (int64_t)previousReachableAccessoriesCount
{
  return self->_previousReachableAccessoriesCount;
}

- (void)setRemoteEventRouterServer:(id)a3
{
}

- (HMDRemoteEventRouterServer)remoteEventRouterServer
{
  return self->_remoteEventRouterServer;
}

- (BOOL)shouldEncodeNFCReaderKey
{
  return self->_shouldEncodeNFCReaderKey;
}

- (BOOL)shouldEncodeHasOnboardedForWalletKey
{
  return self->_shouldEncodeHasOnboardedForWalletKey;
}

- (NSHashTable)connectionsDiscoveringSymptomsForNearbyDevices
{
  return self->_connectionsDiscoveringSymptomsForNearbyDevices;
}

- (void)setHomeReprovisionHandler:(id)a3
{
}

- (HMDHomeReprovisionHandler)homeReprovisionHandler
{
  return self->_homeReprovisionHandler;
}

- (void)setAddPendingAccessories:(id)a3
{
}

- (NSMutableDictionary)addPendingAccessoryOnboardingSetupPayloadStrings
{
  return self->_addPendingAccessoryOnboardingSetupPayloadStrings;
}

- (void)setAddPendingAccessorySetupCodes:(id)a3
{
}

- (NSMutableDictionary)addPendingAccessorySetupCodes
{
  return self->_addPendingAccessorySetupCodes;
}

- (void)setAddPendingAccessorySetupCodeHandlers:(id)a3
{
}

- (void)setWiFiAssertion:(id)a3
{
}

- (NSObject)WiFiAssertion
{
  return self->_WiFiAssertion;
}

- (void)setHomeHubState:(unint64_t)a3
{
  self->_homeHubState = a3;
}

- (void)setRemoveAccessoryInProgressForHMDAccessories:(id)a3
{
}

- (id)currentUserFactory
{
  return objc_getProperty(self, a2, 712, 1);
}

- (NSArray)autoSelectedPreferredResidents
{
  return (NSArray *)objc_getProperty(self, a2, 704, 1);
}

- (HMDResidentDevice)userSelectedPreferredResident
{
  return (HMDResidentDevice *)objc_getProperty(self, a2, 696, 1);
}

- (BOOL)supportsResidentSelection
{
  return self->_supportsResidentSelection;
}

- (HMDLogEventDailyScheduler)dailyScheduler
{
  return self->_dailyScheduler;
}

- (HMDAccessoryReachabilityChangedLogEventManager)reachabilityChangedLogEventManager
{
  return (HMDAccessoryReachabilityChangedLogEventManager *)objc_getProperty(self, a2, 672, 1);
}

- (HMDHomeLockNotificationManager)lockNotificationManager
{
  return (HMDHomeLockNotificationManager *)objc_getProperty(self, a2, 664, 1);
}

- (void)setRemovedUserInfoByAccessCode:(id)a3
{
}

- (NSMutableDictionary)removedUserInfoByAccessCode
{
  return (NSMutableDictionary *)objc_getProperty(self, a2, 656, 1);
}

- (void)setLabelsByAccessCode:(id)a3
{
}

- (NSMutableDictionary)labelsByAccessCode
{
  return (NSMutableDictionary *)objc_getProperty(self, a2, 648, 1);
}

- (void)setAccessCodeManager:(id)a3
{
}

- (HMDAccessCodeManager)accessCodeManager
{
  return (HMDAccessCodeManager *)objc_getProperty(self, a2, 640, 1);
}

- (HMDHomeWalletKeyManager)walletKeyManager
{
  return (HMDHomeWalletKeyManager *)objc_getProperty(self, a2, 624, 1);
}

- (HMDHomeNaturalLightingCurveWriter)naturalLightingCurveWriter
{
  return (HMDHomeNaturalLightingCurveWriter *)objc_getProperty(self, a2, 616, 1);
}

- (void)setUserActionPredictionManager:(id)a3
{
}

- (HMDUserActionPredictionManager)userActionPredictionManager
{
  return (HMDUserActionPredictionManager *)objc_getProperty(self, a2, 608, 1);
}

- (HMDCameraAnalysisStatePublisher)analysisStatePublisher
{
  return (HMDCameraAnalysisStatePublisher *)objc_getProperty(self, a2, 600, 1);
}

- (void)setHasOnboardedForWalletKey:(BOOL)a3
{
  self->_hasOnboardedForWalletKey = a3;
}

- (void)setHasOnboardedForAccessCode:(BOOL)a3
{
  self->_hasOnboardedForAccessCode = a3;
}

- (void)setHasAnyUserAcknowledgedCameraRecordingOnboarding:(BOOL)a3
{
  self->_hasAnyUserAcknowledgedCameraRecordingOnboarding = a3;
}

- (void)setDidOnboardLocationServices:(BOOL)a3
{
  self->_didOnboardLocationServices = a3;
}

- (void)setLocationServicesEnabled:(BOOL)a3
{
  self->_locationServicesEnabled = a3;
}

- (void)setSiriPhraseOptions:(unint64_t)a3
{
  self->_siriPhraseOptions = a3;
}

- (void)setDidOnboardAudioAnalysis:(BOOL)a3
{
  self->_didOnboardAudioAnalysis = a3;
}

- (BOOL)didOnboardAudioAnalysis
{
  return self->_didOnboardAudioAnalysis;
}

- (void)setAudioAnalysisClassifierOptions:(unint64_t)a3
{
  self->_audioAnalysisClassifierOptions = a3;
}

- (unint64_t)audioAnalysisClassifierOptions
{
  return self->_audioAnalysisClassifierOptions;
}

- (void)setSoundCheckEnabled:(BOOL)a3
{
  self->_soundCheckEnabled = a3;
}

- (void)setMultiUserEnabled:(BOOL)a3
{
  self->_multiUserEnabled = a3;
}

- (HMDPrimaryResidentChangeMonitor)primaryResidentChangeMonitor
{
  return (HMDPrimaryResidentChangeMonitor *)objc_getProperty(self, a2, 576, 1);
}

- (HMDHomePeriodicReader)periodicReader
{
  return self->_periodicReader;
}

- (void)setMediaSystemController:(id)a3
{
}

- (void)setPresenceMonitor:(id)a3
{
}

- (HMDHomePresenceMonitor)presenceMonitor
{
  return self->_presenceMonitor;
}

- (void)setMediaGroupsUnconfiguredParticipantOnboardingManager:(id)a3
{
}

- (HMDMediaGroupsUnconfiguredParticipantOnboardingManager)mediaGroupsUnconfiguredParticipantOnboardingManager
{
  return (HMDMediaGroupsUnconfiguredParticipantOnboardingManager *)objc_getProperty(self, a2, 536, 1);
}

- (void)setMediaGroupsAggregator:(id)a3
{
}

- (HMDMediaGroupsAggregator)mediaGroupsAggregator
{
  return (HMDMediaGroupsAggregator *)objc_getProperty(self, a2, 528, 1);
}

- (HMDHomeAdministratorHandler)administratorHandler
{
  return (HMDHomeAdministratorHandler *)objc_getProperty(self, a2, 520, 1);
}

- (void)setPresenceComputeStatus:(id)a3
{
}

- (HMUserPresenceCompute)presenceComputeStatus
{
  return self->_presenceComputeStatus;
}

- (void)setPresenceAuthStatus:(id)a3
{
}

- (HMUserPresenceAuthorization)presenceAuthStatus
{
  return self->_presenceAuthStatus;
}

- (NSUUID)zoneID
{
  return self->_zoneID;
}

- (void)setHomeManager:(id)a3
{
}

- (HMDHomeObjectLookup)lookup
{
  return self->_lookup;
}

- (void)setThreadNetworkIsUp:(BOOL)a3
{
  self->_threadNetworkIsUp = a3;
}

- (BOOL)threadNetworkIsUp
{
  return self->_threadNetworkIsUp;
}

- (void)setThreadPreferredNetworkExists:(BOOL)a3
{
  self->_threadPreferredNetworkExists = a3;
}

- (void)setThreadNetworkPeriodicStatusReporter:(id)a3
{
}

- (HMDThreadNetworkStatusReporter)threadNetworkPeriodicStatusReporter
{
  return self->_threadNetworkPeriodicStatusReporter;
}

- (void)setStartThreadNetworkInProgress:(BOOL)a3
{
  self->_startThreadNetworkInProgress = a3;
}

- (BOOL)startThreadNetworkInProgress
{
  return self->_startThreadNetworkInProgress;
}

- (void)setCurrentTriggers:(id)a3
{
}

- (NSMutableArray)currentTriggers
{
  return self->_currentTriggers;
}

- (void)setMigrationNeeded:(BOOL)a3
{
  self->_migrationNeeded = a3;
}

- (BOOL)migrationNeeded
{
  return self->_migrationNeeded;
}

- (BOOL)isOwnerTrustZoneCapable
{
  return self->_ownerTrustZoneCapable;
}

- (NSMutableDictionary)newlyConfiguredAccessories
{
  return self->_newlyConfiguredAccessories;
}

- (void)setNetworkProtectionGroupRegistry:(id)a3
{
}

- (void)setMediaSessionStates:(id)a3
{
}

- (void)setMediaSessions:(id)a3
{
}

- (void)removeSharedUserResponseEventBuilder:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    id v5 = v4;
    os_unfair_recursive_lock_lock_with_options();
    [(NSMutableSet *)self->_sharedUserResponseEventBuilders removeObject:v5];
    os_unfair_recursive_lock_unlock();
    id v4 = v5;
  }
}

- (void)addSharedUserResponseEventBuilder:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    id v8 = v4;
    os_unfair_recursive_lock_lock_with_options();
    sharedUserResponseEventBuilders = self->_sharedUserResponseEventBuilders;
    if (!sharedUserResponseEventBuilders)
    {
      id v6 = [MEMORY[0x1E4F1CA80] set];
      long long v7 = self->_sharedUserResponseEventBuilders;
      self->_sharedUserResponseEventBuilders = v6;

      sharedUserResponseEventBuilders = self->_sharedUserResponseEventBuilders;
    }
    [(NSMutableSet *)sharedUserResponseEventBuilders addObject:v8];
    os_unfair_recursive_lock_unlock();
    id v4 = v8;
  }
}

- (void)removeSharedUserEventBuilder:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    id v5 = v4;
    os_unfair_recursive_lock_lock_with_options();
    [(NSMutableSet *)self->_sharedUserInviteEventBuilders removeObject:v5];
    os_unfair_recursive_lock_unlock();
    id v4 = v5;
  }
}

- (void)addSharedUserEventBuilder:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    id v8 = v4;
    os_unfair_recursive_lock_lock_with_options();
    sharedUserInviteEventBuilders = self->_sharedUserInviteEventBuilders;
    if (!sharedUserInviteEventBuilders)
    {
      id v6 = [MEMORY[0x1E4F1CA80] set];
      long long v7 = self->_sharedUserInviteEventBuilders;
      self->_sharedUserInviteEventBuilders = v6;

      sharedUserInviteEventBuilders = self->_sharedUserInviteEventBuilders;
    }
    [(NSMutableSet *)sharedUserInviteEventBuilders addObject:v8];
    os_unfair_recursive_lock_unlock();
    id v4 = v8;
  }
}

- (BOOL)shouldPostBulletin
{
  return 1;
}

- (void)_handleFetchTriggerNameRequest:(id)a3
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 uuidForKey:@"triggerUUID"];
  if (v5)
  {
    id v6 = [(HMDHome *)self triggers];
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = __42__HMDHome__handleFetchTriggerNameRequest___block_invoke;
    v19[3] = &unk_1E6A0E4E0;
    id v20 = v5;
    long long v7 = objc_msgSend(v6, "na_firstObjectPassingTest:", v19);

    id v8 = [v7 configuredName];
    if (v8 || ([v7 name], (id v8 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      __int16 v21 = @"kTriggerName";
      id v22 = v8;
      uint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v22 forKeys:&v21 count:1];
      [v4 respondWithPayload:v9];
    }
    else
    {
      id v15 = (void *)MEMORY[0x1D9452090]();
      id v16 = self;
      id v17 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        id v18 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v24 = v18;
        _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_ERROR, "%{public}@trigger name is nil.", buf, 0xCu);
      }
      id v8 = [MEMORY[0x1E4F28C58] hmErrorWithCode:20];
      [v4 respondWithError:v8];
    }

    long long v10 = v20;
  }
  else
  {
    id v11 = (void *)MEMORY[0x1D9452090]();
    uint64_t v12 = self;
    int v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      id v14 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v24 = v14;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_ERROR, "%{public}@message does not contain the trigger SPI identifier", buf, 0xCu);
    }
    long long v10 = [MEMORY[0x1E4F28C58] hmErrorWithCode:20];
    [v4 respondWithError:v10];
  }
}

uint64_t __42__HMDHome__handleFetchTriggerNameRequest___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 spiClientIdentifier];
  uint64_t v3 = HMFEqualObjects();

  return v3;
}

- (BOOL)defaultRoomContainsAccessoryWithUUID:(id)a3
{
  id v4 = [(HMDHome *)self accessoryWithUUID:a3];
  id v5 = [(HMDHome *)self roomForEntireHome];
  id v6 = [v4 room];
  char v7 = [v5 isEqual:v6];

  return v7;
}

- (BOOL)hasActiveWACPairing
{
  uint64_t v2 = [(HMDHome *)self accessoryBrowser];
  char v3 = [v2 hasActiveWACPairing];

  return v3;
}

- (id)destinationForAppleMediaAccessory:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self mediaGroupsAggregateConsumer];
  id v6 = [v4 uuid];

  char v7 = [v5 destinationWithParentIdentifier:v6];

  return v7;
}

- (id)destinationControllerDataForAppleMediaAccessory:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self mediaGroupsAggregateConsumer];
  id v6 = [v4 uuid];

  char v7 = [v5 destinationControllerDataWithParentIdentifier:v6];

  return v7;
}

- (id)mediaGroupsAggregateDataTopicName
{
  uint64_t v2 = (void *)MEMORY[0x1E4F2E808];
  uint64_t v3 = *MEMORY[0x1E4F2D228];
  id v4 = [(HMDHome *)self uuid];
  id v5 = [v2 topicFromSuffixID:v3 homeUUID:v4];

  return v5;
}

- (void)runDailyTask
{
  uint64_t v3 = [(HMDHome *)self logEventSubmitter];
  id v4 = [[HMDUnexpectedNotificationLogEvent alloc] initWithCount:0];
  [v3 submitLogEvent:v4];

  [(HMDHome *)self submitRestrictedGuestLogEvents];
}

- (void)_handleRetrieveHomeLocationForFeedback:(id)a3
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHome *)self homeLocationHandler];

  if (v5)
  {
    id v6 = [MEMORY[0x1E4F1CA60] dictionary];
    char v7 = [(HMDHome *)self homeLocationHandler];
    id v8 = [v7 locationUpdateTimestamp];

    if (v8)
    {
      uint64_t v9 = [(HMDHome *)self homeLocationHandler];
      long long v10 = [v9 locationUpdateTimestamp];
      [v6 setObject:v10 forKeyedSubscript:*MEMORY[0x1E4F2D2D0]];
    }
    id v11 = (void *)MEMORY[0x1D9452090]();
    uint64_t v12 = self;
    int v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      id v14 = HMFGetLogIdentifier();
      int v19 = 138543618;
      id v20 = v14;
      __int16 v21 = 2112;
      id v22 = v6;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Retrieve home location for feedback : %@", (uint8_t *)&v19, 0x16u);
    }
    [v4 respondWithPayload:v6];
  }
  else
  {
    id v15 = (void *)MEMORY[0x1D9452090]();
    id v16 = self;
    id v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      id v18 = HMFGetLogIdentifier();
      int v19 = 138543362;
      id v20 = v18;
      _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Home Location Handler does not exist.", (uint8_t *)&v19, 0xCu);
    }
    id v6 = [MEMORY[0x1E4F28C58] hmErrorWithCode:20];
    [v4 respondWithError:v6];
  }
}

- (id)_processTestModeHomeAccessControlOverride:(id)a3
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  int v5 = objc_msgSend(v4, "hmf_BOOLForKey:", @"kConfigTestingResetOverrideKey");
  id v6 = objc_msgSend(v4, "hmf_numberForKey:", @"kConfigTestingHomeAccessControlKey");
  if (v6) {
    char v7 = 1;
  }
  else {
    char v7 = v5;
  }
  if (v7)
  {
    os_unfair_recursive_lock_lock_with_options();
    if (v5)
    {

      id v6 = 0;
    }
    char v8 = HMFEqualObjects();
    objc_storeStrong((id *)&self->_overriddenHomeAccessControl, v6);
    uint64_t v9 = os_unfair_recursive_lock_unlock();
    if (v8)
    {
      long long v10 = (void *)MEMORY[0x1D9452090](v9);
      id v11 = self;
      uint64_t v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        int v13 = HMFGetLogIdentifier();
        int v20 = 138543618;
        __int16 v21 = v13;
        __int16 v22 = 2112;
        id v23 = v4;
        _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Home Access Control overridden to %@", (uint8_t *)&v20, 0x16u);
      }
    }
    id v14 = 0;
  }
  else
  {
    id v15 = (void *)MEMORY[0x1D9452090]();
    id v16 = self;
    id v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      id v18 = HMFGetLogIdentifier();
      int v20 = 138543618;
      __int16 v21 = v18;
      __int16 v22 = 2112;
      id v23 = v4;
      _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Home Access Control override configuration incomplete: %@", (uint8_t *)&v20, 0x16u);
    }
    id v14 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    id v6 = 0;
  }

  return v14;
}

- (id)_processTestModeUpdateHomeLocation:(id)a3
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (isInternalBuild())
  {
    int v5 = [v4 dataForKey:@"kHomeLocationDataKey"];
    if (v5)
    {
      id v30 = 0;
      id v6 = [MEMORY[0x1E4F28DC0] unarchivedObjectOfClass:objc_opt_class() fromData:v5 error:&v30];
      id v7 = v30;
      if (v6)
      {
        char v8 = objc_msgSend(v4, "hmf_numberForKey:", @"homeLocationSource");
        unint64_t v9 = (int)[v8 intValue];

        long long v10 = (void *)MEMORY[0x1D9452090]();
        id v11 = self;
        uint64_t v12 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          int v13 = HMFGetLogIdentifier();
          id v14 = HMDHomeLocationSourceToString(v9);
          *(_DWORD *)buf = 138543874;
          id v32 = v13;
          __int16 v33 = 2112;
          id v34 = v6;
          __int16 v35 = 2112;
          id v36 = v14;
          _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Received new home location override from shared admin: %@, source : %@", buf, 0x20u);
        }
        id v15 = [(HMDHome *)v11 homeLocationHandler];
        id v16 = [MEMORY[0x1E4F1C9C8] date];
        [v15 runTransactionWithLocation:v6 updatedTime:v16 source:v9];
      }
      else
      {
        uint64_t v25 = (void *)MEMORY[0x1D9452090]();
        id v26 = self;
        __int16 v27 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          __int16 v28 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          id v32 = v28;
          __int16 v33 = 2112;
          id v34 = v7;
          _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive location from data: %@", buf, 0x16u);
        }
      }
    }
    else
    {
      __int16 v21 = (void *)MEMORY[0x1D9452090]();
      __int16 v22 = self;
      id v23 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        uint64_t v24 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v32 = v24;
        __int16 v33 = 2112;
        id v34 = 0;
        _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_ERROR, "%{public}@Failed to find location from data: %@", buf, 0x16u);
      }
      id v7 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    }
  }
  else
  {
    id v17 = (void *)MEMORY[0x1D9452090]();
    id v18 = self;
    int v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      int v20 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v32 = v20;
      _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_ERROR, "%{public}@Not processing home location overrides as build is not internal or simulator.", buf, 0xCu);
    }
    id v7 = [MEMORY[0x1E4F28C58] hmErrorWithCode:-1];
  }

  return v7;
}

- (id)_processTestModeHomeLocationStatusOverride:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  int v5 = objc_msgSend(v4, "hmf_BOOLForKey:", @"kConfigTestingResetOverrideKey");
  id v6 = objc_msgSend(v4, "hmf_numberForKey:", @"kConfigTestingHomeLocationStatusKey");
  id v7 = v6;
  if ((v5 & 1) != 0 || v6)
  {
    int64_t v13 = [v6 unsignedIntegerValue];
    int64_t v14 = [(HMDHome *)self homeLocation];
    os_unfair_recursive_lock_lock_with_options();
    if (v5)
    {
      if (!self->_overrideHomeLocation)
      {
        self->_overriddenHomeLocatiouint64_t n = v13;
        os_unfair_recursive_lock_unlock();
LABEL_13:
        uint64_t v12 = 0;
        goto LABEL_14;
      }
      BOOL v15 = 0;
    }
    else
    {
      BOOL v15 = 1;
    }
    self->_overrideHomeLocatiouint64_t n = v15;
    self->_overriddenHomeLocatiouint64_t n = v13;
    os_unfair_recursive_lock_unlock();
    int64_t v16 = [(HMDHome *)self homeLocation];
    if (v16 != v14) {
      [(HMDHome *)self _handleHomeLocationChange:v16 previousLocation:v14];
    }
    goto LABEL_13;
  }
  char v8 = (void *)MEMORY[0x1D9452090]();
  unint64_t v9 = self;
  long long v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    id v11 = HMFGetLogIdentifier();
    int v18 = 138543618;
    int v19 = v11;
    __int16 v20 = 2112;
    id v21 = v4;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Home Location override configuration incomplete: %@", (uint8_t *)&v18, 0x16u);
  }
  uint64_t v12 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
LABEL_14:

  return v12;
}

- (void)aggregator:(id)a3 residentCapabilitiesWithUUID:(id)a4 completion:(id)a5
{
}

- (void)aggregator:(id)a3 accessoryCapabilitiesWithUUID:(id)a4 completion:(id)a5
{
}

- (void)aggregator:(id)a3 changedResidentCapabilities:(id)a4 rawCapabilities:(id)a5 accessoryUUID:(id)a6 homeUUID:(id)a7
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  id v17 = (void *)MEMORY[0x1D9452090]();
  int v18 = self;
  int v19 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    __int16 v20 = HMFGetLogIdentifier();
    int v21 = 138543618;
    uint64_t v22 = v20;
    __int16 v23 = 2112;
    id v24 = v15;
    _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_INFO, "%{public}@Aggregator: Received resident capabilities for accessory: %@", (uint8_t *)&v21, 0x16u);
  }
  [(HMDHome *)v18 _writeResidentCapabilities:v14 accessoryUUID:v15 homeUUID:v16];
}

- (void)aggregator:(id)a3 changedAccessoryCapabilities:(id)a4 rawCapabilities:(id)a5 accessoryUUID:(id)a6 homeUUID:(id)a7
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  id v17 = (void *)MEMORY[0x1D9452090]();
  int v18 = self;
  int v19 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    __int16 v20 = HMFGetLogIdentifier();
    int v21 = 138543618;
    uint64_t v22 = v20;
    __int16 v23 = 2112;
    id v24 = v15;
    _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_INFO, "%{public}@Aggregator: Received accessory capabilities for accessory: %@", (uint8_t *)&v21, 0x16u);
  }
  [(HMDHome *)v18 _writeAccessoryCapabilities:v14 accessoryUUID:v15 homeUUID:v16];
}

- (id)localAndRemoteSubscriptionProvider
{
  uint64_t v2 = [(HMDHome *)self homeManager];
  uint64_t v3 = [v2 localAndRemoteSubscriptionProvider];

  return v3;
}

- (id)eventStoreReadHandle
{
  uint64_t v2 = [(HMDHome *)self homeManager];
  uint64_t v3 = [v2 eventStoreReadHandle];

  return v3;
}

- (HMEEventForwarder)eventForwarder
{
  uint64_t v2 = [(HMDHome *)self homeManager];
  uint64_t v3 = [v2 eventForwarder];

  return (HMEEventForwarder *)v3;
}

- (void)didReceiveAccessorySetting:(id)a3 accessoryUUID:(id)a4
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = v6;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    unint64_t v9 = v8;
  }
  else {
    unint64_t v9 = 0;
  }
  id v10 = v9;

  if (v10
    && ([v10 keyPath],
        id v11 = objc_claimAutoreleasedReturnValue(),
        char v12 = [v11 isEqualToString:@"root.siri.availableLanguages"],
        v11,
        (v12 & 1) != 0))
  {
    id v13 = [(HMDHome *)self accessoryWithUUID:v7];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v14 = v13;
    }
    else {
      id v14 = 0;
    }
    id v15 = v14;

    if (v15)
    {
      id v16 = [(HMDHome *)self notificationCenter];
      id v26 = @"HMDHomeNotificationKey";
      __int16 v27 = self;
      id v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v27 forKeys:&v26 count:1];
      [v16 postNotificationName:@"HMDAppleMediaAccessoryLanguagesChangedNotification" object:self userInfo:v17];
    }
    else
    {
      uint64_t v22 = (void *)MEMORY[0x1D9452090]();
      __int16 v23 = self;
      id v24 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        uint64_t v25 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543874;
        __int16 v29 = v25;
        __int16 v30 = 2112;
        id v31 = v8;
        __int16 v32 = 2112;
        id v33 = v7;
        _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_INFO, "%{public}@Received accessory setting %@ that is not for an accessory %@ in this home", buf, 0x20u);
      }
    }
  }
  else
  {
    int v18 = (void *)MEMORY[0x1D9452090]();
    int v19 = self;
    __int16 v20 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      int v21 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v29 = v21;
      __int16 v30 = 2112;
      id v31 = v8;
      _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@Unexpectedly received accessory setting %@ that is not for available languages", buf, 0x16u);
    }
  }
}

- (id)deviceForAppleMediaAccessoryMessageRouter:(id)a3 message:(id)a4
{
  int v5 = objc_msgSend(a4, "messagePayload", a3);
  id v6 = objc_msgSend(v5, "hmf_UUIDForKey:", *MEMORY[0x1E4F2C878]);

  id v7 = [(HMDHome *)self accessoryWithUUID:v6];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v8 = v7;
  }
  else {
    id v8 = 0;
  }
  id v9 = v8;

  id v10 = [v9 device];

  return v10;
}

- (BOOL)isCurrentDevicePairedWithWatchForSiriSecureAccessoryAccessController:(id)a3
{
  uint64_t v3 = [(HMDHome *)self homeManager];
  char v4 = [v3 isPairedWithWatch];

  return v4;
}

- (BOOL)currentDeviceSupportsSiriUnsecuringActionsWithWatchAuthForSiriSecureAccessoryAccessController:(id)a3
{
  uint64_t v3 = [(HMDHome *)self localCapabilitiesDataSource];
  char v4 = [v3 supportsSiriUnsecuringActionsWithWatchAuth];

  return v4;
}

- (BOOL)currentDeviceSupportsSiriUnsecuringActionsWithNoPasscodeForSiriSecureAccessoryAccessController:(id)a3
{
  uint64_t v3 = [(HMDHome *)self localCapabilitiesDataSource];
  char v4 = [v3 supportsSiriUnsecuringActionsWithNoPasscode];

  return v4;
}

- (BOOL)isMediaSystem:(id)a3
{
  id v4 = a3;
  int v5 = [(HMDHome *)self mediaSystems];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __25__HMDHome_isMediaSystem___block_invoke;
  void v9[3] = &unk_1E6A0A830;
  id v10 = v4;
  id v6 = v4;
  id v7 = objc_msgSend(v5, "na_firstObjectPassingTest:", v9);

  return v7 != 0;
}

uint64_t __25__HMDHome_isMediaSystem___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 uuid];
  uint64_t v4 = objc_msgSend(v3, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v4;
}

- (BOOL)isSidekickAccessory:(id)a3
{
  uint64_t v3 = [(HMDHome *)self accessoryWithUUID:a3];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  id v5 = v4;
  id v6 = v5;
  if (v5)
  {
    id v7 = [v5 siriEndpointProfile];
    BOOL v8 = v7 != 0;
  }
  else
  {
    BOOL v8 = 0;
  }

  return v8;
}

- (BOOL)isAppleMediaAccessory:(id)a3
{
  uint64_t v3 = [(HMDHome *)self accessoryWithUUID:a3];
  objc_opt_class();
  BOOL v4 = objc_opt_isKindOfClass() & (v3 != 0);

  return v4;
}

- (BOOL)router:(id)a3 shouldHandleMessage:(id)a4 usingRouter:(id)a5
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = [(HMDHome *)self accessoryMessageRouterViaPrimary];

  if (v11 != v8)
  {
    BOOL v12 = 0;
    goto LABEL_18;
  }
  id v13 = [v9 messagePayload];
  id v14 = objc_msgSend(v13, "hmf_UUIDForKey:", *MEMORY[0x1E4F2C878]);

  id v15 = [(HMDHome *)self accessoryWithUUID:v14];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v16 = v15;
  }
  else {
    id v16 = 0;
  }
  id v17 = v16;

  int v18 = [(HMDHome *)self currentAccessory];
  int v19 = [v18 uuid];
  __int16 v20 = [v17 uuid];
  int v21 = objc_msgSend(v19, "hmf_isEqualToUUID:", v20);

  if (v17)
  {
    id v22 = [(HMDHome *)self appleDeviceRouter];
    if (v22 == v10)
    {
      int v23 = [(HMDHome *)self isCurrentDeviceConfirmedPrimaryResident] | v21;

      if (v23 == 1)
      {
        id v24 = (void *)MEMORY[0x1D9452090]();
        uint64_t v25 = self;
        id v26 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          __int16 v27 = HMFGetLogIdentifier();
          int v31 = 138543362;
          __int16 v32 = v27;
          _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_DEBUG, "%{public}@accepting accessory router", (uint8_t *)&v31, 0xCu);
        }
        char v28 = 1;
        goto LABEL_14;
      }
    }
    else
    {
    }
  }
  char v28 = 0;
LABEL_14:
  id v29 = [(HMDHome *)self primaryResidentMessageRouter];

  if (v29 == v10) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = v28;
  }

LABEL_18:
  return v12;
}

- (BOOL)remoteEventAllowedForTopic:(id)a3 deviceType:(unint64_t)a4 userType:(unint64_t)a5
{
  id v8 = a3;
  id v9 = [(HMDHome *)self homeRemoteEventAccessController];
  LOBYTE(a5) = [v9 remoteEventAllowedForTopic:v8 deviceType:a4 userType:a5];

  return a5;
}

- (id)currentAccessoryHomeUUID
{
  uint64_t v3 = [(HMDHome *)self currentAccessory];

  if (v3)
  {
    BOOL v4 = [(HMDHome *)self uuid];
  }
  else
  {
    BOOL v4 = 0;
  }
  return v4;
}

- (id)currentAccessorySetupMetricDispatcher
{
  uint64_t v2 = [(HMDHome *)self homeManager];
  uint64_t v3 = [v2 currentAccessorySetupMetricDispatcher];

  return v3;
}

- (id)expandedTopicsWithTopics:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self homeManager];
  id v6 = +[HMDHomeEventsGenerated expandedTopicsWithTopics:v4 homeManager:v5];

  return v6;
}

- (BOOL)canTopicBeForwardedToPrimaryFromResident:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self currentAccessory];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v6 = v5;
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;

  if (v7)
  {
    if (self)
    {
      id v8 = (void *)MEMORY[0x1E4F2E580];
      id v9 = v7;
      id v10 = [(HMDHome *)self uuid];
      id v11 = [v9 uuid];

      self = [v8 topicPrefixWithHomeUUID:v10 accessoryUUID:v11];
    }
    char v12 = [v4 hasPrefix:self];
  }
  else
  {
    char v12 = 0;
  }

  return v12;
}

- (id)messageTargetForDeviceIdentifier:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self residentDeviceManager];
  id v6 = [v5 residentDevices];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __44__HMDHome_messageTargetForDeviceIdentifier___block_invoke;
  v11[3] = &unk_1E6A0F028;
  id v12 = v4;
  id v7 = v4;
  id v8 = objc_msgSend(v6, "na_firstObjectPassingTest:", v11);
  id v9 = [v8 device];

  return v9;
}

uint64_t __44__HMDHome_messageTargetForDeviceIdentifier___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 device];
  id v4 = [v3 identifier];
  uint64_t v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v5;
}

- (BOOL)isDeviceIdentifierPrimaryResident:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self primaryResident];
  id v6 = [v5 device];
  id v7 = [v6 identifier];
  char v8 = objc_msgSend(v7, "hmf_isEqualToUUID:", v4);

  return v8;
}

- (BOOL)isDevicePrimaryResident:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self primaryResident];
  id v6 = [v5 device];
  char v7 = [v6 isEqual:v4];

  return v7;
}

- (BOOL)shouldAllowTopic:(id)a3 forDeviceWithMessageIdentifier:(id)a4
{
  v13[1] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  char v7 = [(HMDHome *)self accessoryWithDeviceIdentifier:a4];
  if (v7)
  {
    v13[0] = v6;
    char v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v13 count:1];
    id v9 = [v7 uuid];
    id v10 = +[HMDAccessoryEventsGenerated topicsRemovingAccessoryTopics:v8 accessoryUUID:v9];
    BOOL v11 = [v10 count] != 0;
  }
  else
  {
    BOOL v11 = 1;
  }

  return v11;
}

- (id)routerServerUserAccessControlProviderForIdentifier:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self users];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __62__HMDHome_routerServerUserAccessControlProviderForIdentifier___block_invoke;
  void v9[3] = &unk_1E6A12608;
  id v10 = v4;
  id v6 = v4;
  char v7 = objc_msgSend(v5, "na_firstObjectPassingTest:", v9);

  return v7;
}

uint64_t __62__HMDHome_routerServerUserAccessControlProviderForIdentifier___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 uuid];
  uint64_t v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

- (id)routerServerUserAccessControlProviderIdentifierForMessage:(id)a3
{
  uint64_t v3 = [a3 matchingRemoteIdentityUserForHome:self];
  uint64_t v4 = [v3 uuid];

  return v4;
}

- (BOOL)isCurrentUserRestrictedForRemoteEventRouterClientController:(id)a3
{
  return 0;
}

- (BOOL)isMessagedHomepodSettingsEnabledForClientController:(id)a3
{
  return _os_feature_enabled_impl();
}

- (BOOL)isCurrentDevicePrimaryResidentForRemoteEventRouterClientController:(id)a3
{
  uint64_t v3 = [(HMDHome *)self residentDeviceManager];
  char v4 = [v3 isCurrentDevicePrimaryResident];

  return v4;
}

- (BOOL)isCurrentDeviceResidentCapableForRemoteEventRouterClientController:(id)a3
{
  uint64_t v3 = [(HMDHome *)self localCapabilitiesDataSource];
  char v4 = [v3 isResidentCapable];

  return v4;
}

- (id)deviceForPrimaryResidentForRemoteEventRouterClientController:(id)a3
{
  uint64_t v3 = [(HMDHome *)self residentDeviceManager];
  char v4 = [v3 primaryResidentDevice];
  uint64_t v5 = [v4 device];

  if ([v5 isCurrentDevice]) {
    id v6 = 0;
  }
  else {
    id v6 = v5;
  }

  return v6;
}

- (id)deviceForAccessoryUUID:(id)a3 forRemoteEventRouterClientController:(id)a4
{
  char v4 = -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", a3, a4);
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = v5;

  if (v6)
  {
    char v7 = [v6 deviceForDirectMessaging];
  }
  else
  {
    char v7 = 0;
  }

  return v7;
}

- (id)eventStoreWriteHandleForRemoteEventRouterClientController:(id)a3
{
  uint64_t v3 = [(HMDHome *)self homeManager];
  char v4 = [v3 eventStoreWriteHandle];

  return v4;
}

- (id)eventStoreReadHandleForRemoteEventRouterClientController:(id)a3
{
  uint64_t v3 = [(HMDHome *)self homeManager];
  char v4 = [v3 eventStoreReadHandle];

  return v4;
}

- (id)primaryResidentDeviceIdentifierForRemoteEventRouterClientController:(id)a3
{
  uint64_t v3 = [(HMDHome *)self residentDeviceManager];
  char v4 = [v3 primaryResidentDevice];
  uint64_t v5 = [v4 device];
  id v6 = [v5 identifier];

  return v6;
}

- (void)clientController:(id)a3 didReceiveFetchedCachedEvents:(id)a4 source:(id)a5
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v19 = a3;
  id v7 = a4;
  id v8 = a5;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v9 = v7;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v22;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v22 != v12) {
          objc_enumerationMutation(v9);
        }
        uint64_t v14 = *(void *)(*((void *)&v21 + 1) + 8 * v13);
        id v15 = (void *)MEMORY[0x1D9452090](v10);
        id v16 = objc_msgSend(v9, "objectForKeyedSubscript:", v14, v19);
        id v17 = [(HMDHome *)self homeManager];
        int v18 = [v17 memoryEventConsumer];
        [v18 didReceiveCachedEvent:v16 topic:v14 source:v8];

        ++v13;
      }
      while (v11 != v13);
      uint64_t v10 = [v9 countByEnumeratingWithState:&v21 objects:v25 count:16];
      uint64_t v11 = v10;
    }
    while (v10);
  }
}

- (id)delegatingRouter:(id)a3 upstreamTopicsFor:(id)a4
{
  return +[HMDHomeEventsGenerated upstreamTopicsForTopic:a4];
}

- (id)delegatingRouter:(id)a3 filteredTopics:(id)a4 forRouter:(id)a5
{
  id v5 = a4;
  return v5;
}

- (id)eventRouterDumpStateInfo
{
  v19[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [(HMDHome *)self uuid];
  char v4 = [v3 UUIDString];

  int v18 = v4;
  v16[0] = @"RemoteClientController";
  id v5 = [(HMDHome *)self remoteEventRouterClientController];
  uint64_t v6 = [v5 dumpStateDescription];
  id v7 = (void *)v6;
  if (v6) {
    id v8 = (__CFString *)v6;
  }
  else {
    id v8 = &stru_1F2C9F1A8;
  }
  v16[1] = @"RemoteServer";
  v17[0] = v8;
  id v9 = [(HMDHome *)self remoteEventRouterServer];
  uint64_t v10 = [v9 dumpStateDescription];
  uint64_t v11 = (void *)v10;
  if (v10) {
    uint64_t v12 = (__CFString *)v10;
  }
  else {
    uint64_t v12 = &stru_1F2C9F1A8;
  }
  v17[1] = v12;
  uint64_t v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v17 forKeys:v16 count:2];
  v19[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:&v18 count:1];

  return v14;
}

- (void)_handleRetrieveAsyncResults:(id)a3
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  uint64_t v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    id v9 = [v4 shortDescription];
    *(_DWORD *)buf = 138543618;
    uint64_t v53 = v8;
    __int16 v54 = 2112;
    id v55 = v9;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Handling retrieve async results message: %@", buf, 0x16u);
  }
  uint64_t v10 = [v4 dataForKey:*MEMORY[0x1E4F2D688]];
  if (v10)
  {
    uint64_t v11 = [(HMDHome *)v6 reportingSessionManager];
    uint64_t v12 = [v11 consumeResponseMessagePayloadsForSessionWithReportContextRequestInfo:v10];

    if ([v12 count])
    {
      char v44 = v10;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      id v13 = v12;
      uint64_t v47 = [v13 countByEnumeratingWithState:&v48 objects:v58 count:16];
      if (v47)
      {
        uint64_t v46 = *(void *)v49;
        id obj = v13;
        do
        {
          for (uint64_t i = 0; i != v47; ++i)
          {
            if (*(void *)v49 != v46) {
              objc_enumerationMutation(obj);
            }
            id v15 = *(void **)(*((void *)&v48 + 1) + 8 * i);
            id v16 = (void *)MEMORY[0x1D9452090]();
            id v17 = (void *)[v15 mutableCopy];
            int v18 = (void *)MEMORY[0x1D9452090]([v17 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:@"kMultiPartResponseKey"]);
            id v19 = v6;
            __int16 v20 = v6;
            long long v21 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
            {
              long long v22 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543874;
              uint64_t v53 = v22;
              __int16 v54 = 2112;
              id v55 = v15;
              __int16 v56 = 2112;
              id v57 = v17;
              _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@Overriding payload in last cached message from %@ to %@", buf, 0x20u);
            }
            if ([v4 qualityOfService] < 17) {
              uint64_t v23 = 17;
            }
            else {
              uint64_t v23 = [v4 qualityOfService];
            }
            id v24 = objc_alloc(MEMORY[0x1E4F65488]);
            uint64_t v25 = [(HMDHome *)v20 uuid];
            uint64_t v26 = (void *)[v24 initWithTarget:v25];

            id v27 = objc_alloc(MEMORY[0x1E4F654B0]);
            char v28 = (void *)[v17 copy];
            id v29 = (void *)[v27 initWithName:@"kMultipleCharacteristicValuesUpdatedNotificationKey" qualityOfService:v23 destination:v26 payload:v28];

            __int16 v30 = [v4 transport];
            [v29 setTransport:v30];
            int v31 = [v4 identifier];
            [v29 setIdentifier:v31];

            __int16 v32 = [(HMDHome *)v20 msgDispatcher];
            [v32 sendMessage:v29];

            uint64_t v6 = v19;
          }
          id v13 = obj;
          uint64_t v47 = [obj countByEnumeratingWithState:&v48 objects:v58 count:16];
        }
        while (v47);
      }

      [v4 respondWithSuccess];
      uint64_t v10 = v44;
    }
    else
    {
      long long v38 = v12;
      __int16 v39 = (void *)MEMORY[0x1D9452090]();
      __int16 v40 = v6;
      __int16 v41 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        id v42 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        uint64_t v53 = v42;
        _os_log_impl(&dword_1D49D5000, v41, OS_LOG_TYPE_DEFAULT, "%{public}@Did not find any response message payloads to retrieve", buf, 0xCu);
      }
      uint64_t v43 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
      [v4 respondWithError:v43];

      id v13 = v38;
    }
  }
  else
  {
    uint64_t v33 = (void *)MEMORY[0x1D9452090]();
    uint64_t v34 = v6;
    __int16 v35 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      id v36 = HMFGetLogIdentifier();
      uint64_t v37 = [v4 messagePayload];
      *(_DWORD *)buf = 138543618;
      uint64_t v53 = v36;
      __int16 v54 = 2112;
      id v55 = v37;
      _os_log_impl(&dword_1D49D5000, v35, OS_LOG_TYPE_ERROR, "%{public}@Could not find request info in message payload: %@", buf, 0x16u);
    }
    id v13 = [MEMORY[0x1E4F28C58] hmErrorWithCode:20];
    [v4 respondWithError:v13];
  }
}

- (void)handleReportingSessionResponseMessage:(id)a3
{
  id v4 = a3;
  id v7 = [(HMDHome *)self reportingSessionManager];
  id v5 = [v4 messagePayload];
  uint64_t v6 = [v4 identifier];

  [v7 addResponseMessagePayload:v5 toSessionWithUUID:v6];
}

- (void)_applyNotificationDeregistrations
{
  os_unfair_recursive_lock_lock_with_options();
  [(NSMutableSet *)self->_notificationRegistrations minusSet:self->_notificationDeregistrations];
  [(NSMutableSet *)self->_notificationRegistrationsForAppleMediaAccessories minusSet:self->_notificationDeregistrations];
  [(NSMutableSet *)self->_notificationDeregistrations removeAllObjects];
  os_unfair_recursive_lock_unlock();
}

- (void)removeNotificationDeregistrationForClientIdentifier:(id)a3
{
  id v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  [(NSMutableSet *)self->_notificationDeregistrations removeObject:v4];
  os_unfair_recursive_lock_unlock();
}

- (void)addNotificationDeregistrationForClientIdentifier:(id)a3
{
  id v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  [(NSMutableSet *)self->_notificationDeregistrations addObject:v4];
  os_unfair_recursive_lock_unlock();
}

- (NSSet)notificationDeregistrations
{
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v3 = (void *)[(NSMutableSet *)self->_notificationDeregistrations copy];
  os_unfair_recursive_lock_unlock();
  return (NSSet *)v3;
}

- (BOOL)isClientIdentifierSubscribedToAppleMediaAccessoryState:(id)a3
{
  id v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  LOBYTE(self) = [(NSMutableSet *)self->_notificationRegistrationsForAppleMediaAccessories containsObject:v4];
  os_unfair_recursive_lock_unlock();

  return (char)self;
}

- (void)addNotificationRegistrationForClientIdentifier:(id)a3 includesAppleMediaAccessories:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  os_unfair_recursive_lock_lock_with_options();
  [(NSMutableSet *)self->_notificationRegistrations addObject:v6];
  if (v4) {
    [(NSMutableSet *)self->_notificationRegistrationsForAppleMediaAccessories addObject:v6];
  }
  os_unfair_recursive_lock_unlock();
}

- (void)_handleFetchLastModifiedServiceOfType:(id)a3
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 stringForKey:@"kServiceType"];
  id v6 = v5;
  if (!v5)
  {
    uint64_t v11 = (void *)MEMORY[0x1D9452090]();
    uint64_t v12 = self;
    id v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      id v15 = [v4 messagePayload];
      *(_DWORD *)locatiouint64_t n = 138543874;
      *(void *)&location[4] = v14;
      __int16 v27 = 2112;
      char v28 = @"kServiceType";
      __int16 v29 = 2112;
      __int16 v30 = v15;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_ERROR, "%{public}@Missing service type parameter in message payload %@:%@", location, 0x20u);
    }
    id v16 = [MEMORY[0x1E4F28C58] hmErrorWithCode:27];
    [v4 respondWithError:v16];

    goto LABEL_10;
  }
  if (![(__CFString *)v5 isEqualToString:*MEMORY[0x1E4F2DE38]])
  {
    id v17 = (void *)MEMORY[0x1D9452090]();
    int v18 = self;
    id v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      __int16 v20 = HMFGetLogIdentifier();
      *(_DWORD *)locatiouint64_t n = 138543618;
      *(void *)&location[4] = v20;
      __int16 v27 = 2112;
      char v28 = v6;
      _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_ERROR, "%{public}@Querying for the service type is not supported: %@", location, 0x16u);
    }
    long long v21 = [MEMORY[0x1E4F28C58] hmErrorWithCode:48];
    [v4 respondWithError:v21];

LABEL_10:
    id v7 = 0;
    goto LABEL_11;
  }
  id v7 = (id)*MEMORY[0x1E4F2CFE0];
  objc_initWeak((id *)location, self);
  id v8 = [(HMDHome *)self homeManager];
  id v9 = [v8 biomeEventManager];
  uint64_t v10 = [(HMDHome *)self spiClientIdentifier];
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = __49__HMDHome__handleFetchLastModifiedServiceOfType___block_invoke;
  v22[3] = &unk_1E6A075C8;
  objc_copyWeak(&v25, (id *)location);
  id v23 = v4;
  id v24 = v6;
  [v9 fetchMostRecentEventWithCharacteristicType:v7 serviceType:v24 homeSPIClientIdentifier:v10 completion:v22];

  objc_destroyWeak(&v25);
  objc_destroyWeak((id *)location);
LABEL_11:
}

void __49__HMDHome__handleFetchLastModifiedServiceOfType___block_invoke(uint64_t a1, void *a2)
{
  v72[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if ([v3 count])
  {
    id v5 = objc_msgSend(v3, "hmf_UUIDForKey:", @"HMDAccessorySPIClientIdentifierKey");
    uint64_t v6 = objc_msgSend(v3, "hmf_UUIDForKey:", @"HMDServiceSPIClientIdentifierKey");
    id v7 = (void *)v6;
    if (v5 && v6)
    {
      id v8 = [WeakRetained accessoryWithSPIClientIdentifier:v5];
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v9 = v8;
      }
      else {
        id v9 = 0;
      }
      id v10 = v9;

      if (v10)
      {
        uint64_t v11 = [v10 identifiersForBridgedAccessories];
        uint64_t v12 = [v11 count];

        uint64_t v55 = a1;
        __int16 v56 = WeakRetained;
        id v57 = v10;
        id v58 = v5;
        if (v12)
        {
          id v13 = [v10 identifiersForBridgedAccessories];
          uint64_t v14 = [v13 allObjects];
          id v15 = [WeakRetained accessoriesWithUUIDs:v14];
        }
        else
        {
          v72[0] = v10;
          id v15 = [MEMORY[0x1E4F1C978] arrayWithObjects:v72 count:1];
        }
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        id v28 = v15;
        uint64_t v29 = [v28 countByEnumeratingWithState:&v59 objects:v71 count:16];
        if (v29)
        {
          uint64_t v30 = v29;
          uint64_t v31 = *(void *)v60;
          while (2)
          {
            for (uint64_t i = 0; i != v30; ++i)
            {
              if (*(void *)v60 != v31) {
                objc_enumerationMutation(v28);
              }
              id v33 = *(id *)(*((void *)&v59 + 1) + 8 * i);
              objc_opt_class();
              if (objc_opt_isKindOfClass()) {
                uint64_t v34 = v33;
              }
              else {
                uint64_t v34 = 0;
              }
              id v35 = v34;

              if (v35)
              {
                uint64_t v36 = [v35 serviceWithSPIClientIdentifier:v7];
                if (v36)
                {
                  id v42 = (void *)v36;

                  uint64_t v43 = [v42 instanceID];
                  char v44 = [v33 uuid];
                  uint64_t v45 = [v44 UUIDString];

                  if (v43) {
                    BOOL v46 = v45 == 0;
                  }
                  else {
                    BOOL v46 = 1;
                  }
                  if (v46)
                  {
                    context = (void *)MEMORY[0x1D9452090]();
                    id WeakRetained = v56;
                    id v47 = v56;
                    long long v48 = HMFGetOSLogHandle();
                    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
                    {
                      uint64_t v53 = HMFGetLogIdentifier();
                      *(_DWORD *)buf = 138543874;
                      id v66 = v53;
                      __int16 v67 = 2112;
                      id v68 = v43;
                      __int16 v69 = 2112;
                      id v70 = v45;
                      _os_log_impl(&dword_1D49D5000, v48, OS_LOG_TYPE_ERROR, "%{public}@Either service instanceID (%@) is nil or accessory UUID (%@) is nil", buf, 0x20u);
                    }
                    long long v49 = v43;
                    long long v50 = *(void **)(v55 + 32);
                    id v52 = [MEMORY[0x1E4F28C58] hmErrorWithCode:-1];
                    long long v51 = v50;
                    uint64_t v43 = v49;
                    [v51 respondWithError:v52];
                  }
                  else
                  {
                    v63[0] = @"kServiceInstanceID";
                    v63[1] = @"kAccessoryUUID";
                    v64[0] = v43;
                    v64[1] = v45;
                    id v52 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v64 forKeys:v63 count:2];
                    [*(id *)(v55 + 32) respondWithPayload:v52];
                    id WeakRetained = v56;
                  }

                  goto LABEL_43;
                }
              }
            }
            uint64_t v30 = [v28 countByEnumeratingWithState:&v59 objects:v71 count:16];
            if (v30) {
              continue;
            }
            break;
          }
        }

        uint64_t v37 = (void *)MEMORY[0x1D9452090]();
        id WeakRetained = v56;
        id v38 = v56;
        __int16 v39 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          __int16 v40 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          id v66 = v40;
          __int16 v67 = 2112;
          id v68 = v7;
          _os_log_impl(&dword_1D49D5000, v39, OS_LOG_TYPE_ERROR, "%{public}@Unable to find service with serviceSPIClientIdentifier %@", buf, 0x16u);
        }
        __int16 v41 = *(void **)(v55 + 32);
        id v33 = [MEMORY[0x1E4F28C58] hmErrorWithCode:-1];
        [v41 respondWithError:v33];
LABEL_43:

        id v10 = v57;
        id v5 = v58;
      }
      else
      {
        id v23 = (void *)MEMORY[0x1D9452090]();
        id v24 = WeakRetained;
        id v25 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          uint64_t v26 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          id v66 = v26;
          __int16 v67 = 2112;
          id v68 = v5;
          _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_ERROR, "%{public}@Unable to find accessory with accessorySPIClientIdentifier %@", buf, 0x16u);

          id v10 = 0;
        }

        __int16 v27 = *(void **)(a1 + 32);
        id v28 = [MEMORY[0x1E4F28C58] hmErrorWithCode:-1];
        [v27 respondWithError:v28];
      }
    }
    else
    {
      int v18 = (void *)MEMORY[0x1D9452090]();
      id v19 = WeakRetained;
      __int16 v20 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        long long v21 = HMFGetLogIdentifier();
        long long v22 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138543618;
        id v66 = v21;
        __int16 v67 = 2112;
        id v68 = v22;
        _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@Found no query results for last modified service of type: %@ ", buf, 0x16u);
      }
      [*(id *)(a1 + 32) respondWithPayload:MEMORY[0x1E4F1CC08]];
    }
  }
  else
  {
    id v16 = *(void **)(a1 + 32);
    id v17 = [MEMORY[0x1E4F28C58] hmErrorWithCode:23];
    [v16 respondWithError:v17];
  }
}

- (void)handleSetPreferredPrimaryMessage:(id)a3
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  uint64_t v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = HMFGetLogIdentifier();
    id v9 = [v4 messagePayload];
    int v10 = 138543618;
    uint64_t v11 = v8;
    __int16 v12 = 2112;
    id v13 = v9;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@SetPreferredPrimary - Received set preferred primary message with payload: %@", (uint8_t *)&v10, 0x16u);
  }
  [v4 respondWithSuccess];
}

- (void)_handleRollReaderKey:(id)a3
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [MEMORY[0x1E4F65430] internalOnlyInitializer];
  uint64_t v6 = (void *)MEMORY[0x1D9452090]();
  id v7 = self;
  id v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    int v10 = [v5 UUID];
    *(_DWORD *)buf = 138543618;
    id v16 = v9;
    __int16 v17 = 2112;
    int v18 = v10;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@[NewFlow: %@] Homeutil command received to roll reader key in this home", buf, 0x16u);
  }
  uint64_t v11 = [(HMDHome *)v7 nfcReaderKeyManager];
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = __32__HMDHome__handleRollReaderKey___block_invoke;
  v13[3] = &unk_1E6A197F0;
  id v14 = v4;
  id v12 = v4;
  [v11 rollReaderKeyWithFlow:v5 withCompletion:v13];
}

uint64_t __32__HMDHome__handleRollReaderKey___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (a2) {
    return [v2 respondWithError:a2];
  }
  else {
    return [v2 respondWithSuccess];
  }
}

- (void)_handleTestUpgradeToROAR:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 numberForKey:*MEMORY[0x1E4F2D720]];
  uint64_t v6 = v5;
  if (v5)
  {
    if ([v5 BOOLValue])
    {
      id v7 = +[HMDHomeUpgradedToROAR defaultModelForHome:self];
    }
    else
    {
      [(HMDHome *)self setIsUpdatedToHH2:0];
      id v13 = [HMDHomeUpgradedToROAR alloc];
      id v14 = +[HMDHomeUpgradedToROAR modelIDForHome:self];
      id v15 = [(HMDHome *)self uuid];
      id v7 = [(HMDBackingStoreModelObject *)v13 initWithObjectChangeType:3 uuid:v14 parentUUID:v15];

      [(HMDHome *)self saveWithReason:@"Downgrading To HH1" postSyncNotification:0 objectChange:1];
    }
    id v16 = [(HMDHome *)self backingStore];
    __int16 v17 = [v4 name];
    int v18 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    uint64_t v19 = [v16 transaction:v17 options:v18];

    [v19 add:v7 withMessage:v4];
    [v19 run];
    [v4 respondWithSuccess];
  }
  else
  {
    id v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = self;
    int v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      int v20 = 138543362;
      long long v21 = v11;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_ERROR, "%{public}@Update flag is needed.", (uint8_t *)&v20, 0xCu);
    }
    id v12 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:20 userInfo:0];
    [v4 respondWithError:v12];
  }
}

- (HMDHomeNFCReaderKey)nfcReaderKey
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = self->_nfcReaderKey;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setNfcReaderKey:(id)a3
{
  id v4 = (HMDHomeNFCReaderKey *)a3;
  os_unfair_recursive_lock_lock_with_options();
  nfcReaderKey = self->_nfcReaderKey;
  self->_nfcReaderKey = v4;

  os_unfair_recursive_lock_unlock();
}

- (void)configureNaturalLightingForDemoMode
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v3 = (void *)MEMORY[0x1D9452090](self, a2);
  id v4 = self;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = HMFGetLogIdentifier();
    int v7 = 138543362;
    id v8 = v6;
    _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Setting up natural lighting for demo mode", (uint8_t *)&v7, 0xCu);
  }
  [(HMDHome *)v4 configureNaturalLightingWithDemoModeEnabled:1];
}

- (HMDNaturalLightingContext)naturalLightingContext
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = self->_naturalLightingContext;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setNaturalLightingContext:(id)a3
{
  id v6 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if ([(HMDNaturalLightingContext *)self->_naturalLightingContext isEqual:v6])
  {
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    id v4 = (HMDNaturalLightingContext *)[v6 copy];
    naturalLightingContext = self->_naturalLightingContext;
    self->_naturalLightingContext = v4;

    os_unfair_recursive_lock_unlock();
    logAndPostNotification(@"HMDHomeNaturalLightingContextUpdatedNotification", self, 0);
  }
}

- (BOOL)isResidentReachable:(id)a3
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([(HMDHome *)self isCurrentDevicePrimaryResident]
    || ([(HMDHome *)self primaryResident],
        id v5 = objc_claimAutoreleasedReturnValue(),
        int v6 = [v5 isEqual:v4],
        v5,
        v6))
  {
    char v7 = [v4 isReachable];
  }
  else
  {
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v9 = [(HMDHome *)self appleMediaAccessories];
    uint64_t v10 = [v9 countByEnumeratingWithState:&v22 objects:v30 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v23;
      while (2)
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v23 != v12) {
            objc_enumerationMutation(v9);
          }
          id v14 = *(void **)(*((void *)&v22 + 1) + 8 * i);
          id v15 = [v14 device];
          id v16 = [v4 device];
          int v17 = [v15 isEqual:v16];

          if (v17)
          {
            if ([v14 isReachable]) {
              char v7 = 1;
            }
            else {
              char v7 = [v14 isDeviceReachable];
            }

            goto LABEL_4;
          }
        }
        uint64_t v11 = [v9 countByEnumeratingWithState:&v22 objects:v30 count:16];
        if (v11) {
          continue;
        }
        break;
      }
    }

    int v18 = (void *)MEMORY[0x1D9452090]();
    uint64_t v19 = self;
    int v20 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      long long v21 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v27 = v21;
      __int16 v28 = 2112;
      id v29 = v4;
      _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_DEBUG, "%{public}@Could not find matching accessory for resident %@ so assuming unreachable", buf, 0x16u);
    }
    char v7 = 0;
  }
LABEL_4:

  return v7;
}

- (BOOL)isCompanionReachable
{
  uint64_t v2 = [(HMDHome *)self homeManager];
  char v3 = [v2 companionReachable];

  return v3;
}

- (HMDDevice)companionDevice
{
  uint64_t v2 = [(HMDHome *)self homeManager];
  char v3 = [v2 companionDevice];

  return (HMDDevice *)v3;
}

- (BOOL)attemptToUpdateThreadNetworkID:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  os_unfair_recursive_lock_lock_with_options();
  p_unfilteredThreadNetworkID = (id *)&self->_unfilteredThreadNetworkID;
  char v7 = HMFEqualObjects();
  id v8 = (void *)MEMORY[0x1D9452090]();
  uint64_t v9 = self;
  if (v7)
  {
    HMFGetOSLogHandle();
    uint64_t v10 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      int v16 = 138543618;
      int v17 = v11;
      __int16 v18 = 2112;
      id v19 = v5;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_DEBUG, "%{public}@unfilteredThreadNetworkID did not change (%@)", (uint8_t *)&v16, 0x16u);
    }
  }
  else
  {
    HMFGetOSLogHandle();
    uint64_t v12 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      id v14 = *p_unfilteredThreadNetworkID;
      int v16 = 138543874;
      int v17 = v13;
      __int16 v18 = 2112;
      id v19 = v14;
      __int16 v20 = 2112;
      id v21 = v5;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@unfilteredThreadNetworkID changed: %@ -> %@", (uint8_t *)&v16, 0x20u);
    }
    objc_storeStrong(p_unfilteredThreadNetworkID, a3);
  }
  os_unfair_recursive_lock_unlock();

  return v7 ^ 1;
}

- (void)setThreadNetworkSequenceNumber:(unint64_t)a3
{
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  self->_threadNetworkSequenceNumber = a3;
}

- (unint64_t)threadNetworkSequenceNumber
{
  char v3 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v3);

  return self->_threadNetworkSequenceNumber;
}

- (void)_handleRemoteUserClientCloudShareRepairRequest:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self homeManager];
  [v5 handleRemoteUserClientCloudShareRepairRequest:v4];
}

- (void)_handleRemoteUserClientCloudShareRequest:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self homeManager];
  [v5 handleRemoteUserClientCloudShareRequest:v4];
}

- (void)handleXPCConnectionInvalidated:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __42__HMDHome_handleXPCConnectionInvalidated___block_invoke;
  v7[3] = &unk_1E6A197C8;
  id v8 = v4;
  uint64_t v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __42__HMDHome_handleXPCConnectionInvalidated___block_invoke(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  char v3 = [v2 objectForKeyedSubscript:@"connection"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;

  if (v5)
  {
    [*(id *)(a1 + 40) _removeConnectionFromConnectionsDiscoveringSymptomsForNearbyDevices:v5];
  }
  else
  {
    id v6 = (void *)MEMORY[0x1D9452090]();
    id v7 = *(id *)(a1 + 40);
    id v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = HMFGetLogIdentifier();
      uint64_t v10 = *(void *)(a1 + 32);
      int v11 = 138543618;
      uint64_t v12 = v9;
      __int16 v13 = 2112;
      uint64_t v14 = v10;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_ERROR, "%{public}@Received connection invalidated notification, but no connection object was found: %@", (uint8_t *)&v11, 0x16u);
    }
  }
}

- (id)updatePersonManagerSettings:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self personDataManager];
  id v6 = [v5 updateSettingsModelWithSettings:v4];

  return v6;
}

- (HMDHomePersonManager)personManager
{
  uint64_t v2 = [(HMDHome *)self personDataManager];
  char v3 = [v2 personManager];

  return (HMDHomePersonManager *)v3;
}

- (void)setPersonManagerSettings:(id)a3
{
  id v6 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if ([(HMHomePersonManagerSettings *)self->_personManagerSettings isEqual:v6])
  {
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    id v4 = (HMHomePersonManagerSettings *)[v6 copy];
    personManagerSettings = self->_personManagerSettings;
    self->_personManagerSettings = v4;

    os_unfair_recursive_lock_unlock();
    logAndPostNotification(@"HMDHomePersonManagerSettingsDidChangeNotification", self, 0);
  }
}

- (void)_removeConnectionFromConnectionsDiscoveringSymptomsForNearbyDevices:(id)a3
{
  id v7 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if ([(NSHashTable *)self->_connectionsDiscoveringSymptomsForNearbyDevices containsObject:v7])
  {
    [(NSHashTable *)self->_connectionsDiscoveringSymptomsForNearbyDevices removeObject:v7];
    NSUInteger v4 = [(NSHashTable *)self->_connectionsDiscoveringSymptomsForNearbyDevices count];
    os_unfair_recursive_lock_unlock();
    if (!v4)
    {
      id v5 = +[HMDMainDriver driver];
      id v6 = [v5 symptomManager];
      [v6 stopDiscoveringSymptomsRequiringNearbyInfo];
    }
  }
  else
  {
    os_unfair_recursive_lock_unlock();
  }
}

- (void)_handleStopDiscoveringSymptomsForNearbyDevicesMessage:(id)a3
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([(HMDHome *)self _ensureDevicesSymptomDiscoveryMessageCanBeHandled:v4])
  {
    id v5 = [v4 transport];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v6 = v5;
    }
    else {
      id v6 = 0;
    }
    id v7 = v6;

    if (v7)
    {
      [(HMDHome *)self _removeConnectionFromConnectionsDiscoveringSymptomsForNearbyDevices:v7];
    }
    else
    {
      id v8 = (void *)MEMORY[0x1D9452090]();
      uint64_t v9 = self;
      uint64_t v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        int v11 = HMFGetLogIdentifier();
        int v12 = 138543362;
        __int16 v13 = v11;
        _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_ERROR, "%{public}@Asked to stop discovering symptoms, but no connection proxy was available", (uint8_t *)&v12, 0xCu);
      }
    }
    [v4 respondWithPayload:0];
  }
}

- (void)_handleStartDiscoveringSymptomsForNearbyDevicesMessage:(id)a3
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([(HMDHome *)self _ensureDevicesSymptomDiscoveryMessageCanBeHandled:v4])
  {
    id v5 = [v4 transport];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v6 = v5;
    }
    else {
      id v6 = 0;
    }
    id v7 = v6;

    if (v7)
    {
      os_unfair_recursive_lock_lock_with_options();
      if ([(NSHashTable *)self->_connectionsDiscoveringSymptomsForNearbyDevices containsObject:v7])
      {
        os_unfair_recursive_lock_unlock();
      }
      else
      {
        [(NSHashTable *)self->_connectionsDiscoveringSymptomsForNearbyDevices addObject:v7];
        NSUInteger v12 = [(NSHashTable *)self->_connectionsDiscoveringSymptomsForNearbyDevices count];
        os_unfair_recursive_lock_unlock();
        if (v12 == 1)
        {
          __int16 v13 = +[HMDMainDriver driver];
          uint64_t v14 = [v13 symptomManager];
          [v14 startDiscoveringSymptomsRequiringNearbyInfo];
        }
      }
    }
    else
    {
      id v8 = (void *)MEMORY[0x1D9452090]();
      uint64_t v9 = self;
      uint64_t v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        int v11 = HMFGetLogIdentifier();
        int v15 = 138543362;
        int v16 = v11;
        _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_ERROR, "%{public}@Asked to start discovering symptoms, but no connection proxy was available", (uint8_t *)&v15, 0xCu);
      }
    }
    [v4 respondWithPayload:0];
  }
}

- (BOOL)_ensureDevicesSymptomDiscoveryMessageCanBeHandled:(id)a3
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([v4 isEntitledForSPIAccess])
  {
    if ([(HMDHome *)self isOwnerUser])
    {
      LOBYTE(v5) = 1;
      goto LABEL_13;
    }
    NSUInteger v12 = (void *)MEMORY[0x1D9452090]();
    __int16 v13 = self;
    uint64_t v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      int v15 = HMFGetLogIdentifier();
      int v18 = 138543362;
      id v19 = v15;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_DEBUG, "%{public}@Only owners may start discovering symptoms for nearby devices", (uint8_t *)&v18, 0xCu);
    }
    id v5 = [v4 responseHandler];

    if (v5)
    {
      uint64_t v10 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v11 = 17;
      goto LABEL_12;
    }
  }
  else
  {
    id v6 = (void *)MEMORY[0x1D9452090]();
    id v7 = self;
    id v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = HMFGetLogIdentifier();
      int v18 = 138543362;
      id v19 = v9;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_DEBUG, "%{public}@Only entitled clients may stop discovering symptoms for nearby devices", (uint8_t *)&v18, 0xCu);
    }
    id v5 = [v4 responseHandler];

    if (v5)
    {
      uint64_t v10 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v11 = 10;
LABEL_12:
      id v5 = [v10 hmErrorWithCode:v11];
      int v16 = [v4 responseHandler];
      ((void (**)(void, void *, void))v16)[2](v16, v5, 0);

      LOBYTE(v5) = 0;
    }
  }
LABEL_13:

  return (char)v5;
}

- (void)mediaSystemController:(id)a3 didRemoveMediaSystem:(id)a4
{
  id v5 = a4;
  id v7 = [(HMDHome *)self homeManager];
  id v6 = [v7 lastEventStoreController];
  [v6 didRemoveMediaSystem:v5];
}

- (void)mediaSystemController:(id)a3 removeAccessories:(id)a4 fromAssistantAccessControl:(id)a5
{
  id v11 = a4;
  id v7 = a5;
  id v8 = [(HMDHome *)self currentUser];
  int v9 = [v8 isEqual:v7];

  if (v9)
  {
    uint64_t v10 = [(HMDHome *)self currentUser];
    [v10 removeAccessoriesFromAssistantAccessControlList:v11];
  }
}

- (id)mediaSystemController:(id)a3 accessoryForUUID:(id)a4
{
  id v5 = a4;
  id v6 = [(HMDHome *)self accessories];
  id v7 = objc_msgSend(v6, "hmf_firstObjectWithUUID:", v5);

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v8 = v7;
  }
  else {
    id v8 = 0;
  }
  id v9 = v8;

  return v9;
}

- (id)destinationForMediaSystem:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self mediaGroupsAggregateConsumer];
  id v6 = [v4 uuid];

  id v7 = [v5 destinationWithParentIdentifier:v6];

  return v7;
}

- (void)userAssistantAccessControlDidUpdate:(id)a3 accessories:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHome *)self currentUser];
  int v9 = [v8 isEqual:v6];

  if (v9)
  {
    uint64_t v10 = [(HMDHome *)self workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __59__HMDHome_userAssistantAccessControlDidUpdate_accessories___block_invoke;
    block[3] = &unk_1E6A19668;
    void block[4] = self;
    id v12 = v6;
    id v13 = v7;
    dispatch_async(v10, block);
  }
}

void __59__HMDHome_userAssistantAccessControlDidUpdate_accessories___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mediaSystemController];
  [v2 _userAssistantAccessControlDidUpdate:*(void *)(a1 + 40) accessories:*(void *)(a1 + 48)];
}

- (NSArray)cameraAccessories
{
  id v2 = [(HMDHome *)self accessories];
  char v3 = objc_msgSend(v2, "na_map:", &__block_literal_global_2034);

  return (NSArray *)v3;
}

id __28__HMDHome_cameraAccessories__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  id v4 = v3;
  id v5 = [v4 cameraProfiles];
  uint64_t v6 = [v5 count];

  if (v6) {
    id v7 = v4;
  }
  else {
    id v7 = 0;
  }

  return v7;
}

- (NSArray)hapAccessoriesForLegacyDataBlobEncoding
{
  id v2 = [(HMDHome *)self hapAccessories];
  char v3 = objc_msgSend(v2, "na_filter:", &__block_literal_global_2032);

  return (NSArray *)v3;
}

uint64_t __50__HMDHome_hapAccessoriesForLegacyDataBlobEncoding__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  char v3 = (v2 == 0) | ~objc_opt_isKindOfClass();

  return v3 & 1;
}

- (NSArray)matterAccessories
{
  id v2 = [(HMDHome *)self accessories];
  char v3 = objc_msgSend(v2, "na_map:", &__block_literal_global_1926);

  return (NSArray *)v3;
}

id __28__HMDHome_matterAccessories__block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 conformsToProtocol:&unk_1F2E2B7D8]) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;
  char v6 = [v5 supportsCHIP];
  if ((v6 & 1) != 0
    || ([v5 matterNodeID],
        id v2 = objc_claimAutoreleasedReturnValue(),
        [v2 unsignedIntValue]))
  {
    id v7 = v5;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v8 = v7;
    }
    else {
      id v8 = 0;
    }
    id v9 = v8;

    if (v6) {
      goto LABEL_13;
    }
  }
  else
  {
    id v9 = 0;
  }

LABEL_13:
  return v9;
}

- (void)_handleMediaPropertiesWrite:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [v4 source];
  char v6 = [v4 dictionaryForKey:@"kMediaPropertiesListKey"];
  objc_initWeak(&location, self);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = __39__HMDHome__handleMediaPropertiesWrite___block_invoke;
  v8[3] = &unk_1E6A0DF08;
  objc_copyWeak(&v10, &location);
  id v7 = v4;
  id v9 = v7;
  [(HMDHome *)self _handleWriteMediaProperties:v6 source:v5 requestMessage:v7 completionHandler:v8];

  objc_destroyWeak(&v10);
  objc_destroyWeak(&location);
}

void __39__HMDHome__handleMediaPropertiesWrite___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = WeakRetained;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      id v8 = HMFGetLogIdentifier();
      int v11 = 138543618;
      id v12 = v8;
      __int16 v13 = 2112;
      id v14 = v3;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Responding to media write with %@", (uint8_t *)&v11, 0x16u);
    }
    id v9 = [*(id *)(a1 + 32) responseHandler];
    ((void (**)(void, void, id))v9)[2](v9, 0, v3);
  }
  else
  {
    id v9 = [*(id *)(a1 + 32) responseHandler];
    id v10 = [MEMORY[0x1E4F28C58] hmErrorWithCode:4];
    ((void (**)(void, void *, void))v9)[2](v9, v10, 0);
  }
}

- (void)_handleWriteMediaProperties:(id)a3 source:(unint64_t)a4 requestMessage:(id)a5 completionHandler:(id)a6
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v33 = a5;
  id v34 = a6;
  __int16 v41 = v8;
  __int16 v40 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(v8, "count"));
  group = dispatch_group_create();
  objc_initWeak(&location, self);
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  id v9 = [v8 allKeys];
  uint64_t v10 = [v9 countByEnumeratingWithState:&v51 objects:v62 count:16];
  if (v10)
  {
    uint64_t v39 = *(void *)v52;
    id obj = v9;
    do
    {
      uint64_t v42 = v10;
      for (uint64_t i = 0; i != v42; ++i)
      {
        if (*(void *)v52 != v39) {
          objc_enumerationMutation(obj);
        }
        uint64_t v12 = *(void *)(*((void *)&v51 + 1) + 8 * i);
        __int16 v13 = objc_msgSend(objc_alloc(MEMORY[0x1E4F29128]), "initWithUUIDString:", v12, v33);
        id v14 = [(HMDHome *)self mediaProfileWithUUID:v13];
        uint64_t v15 = objc_msgSend(v41, "hmf_dictionaryForKey:", v12);
        int v16 = +[HMDMediaPropertyWriteRequest deserializeWriteRequests:v15 mediaProfile:v14];
        if ([v16 count])
        {
          uint64_t v17 = [v14 mediaSession];
          if (v17)
          {
            dispatch_group_enter(group);
            v47[0] = MEMORY[0x1E4F143A8];
            v47[1] = 3221225472;
            v47[2] = __79__HMDHome__handleWriteMediaProperties_source_requestMessage_completionHandler___block_invoke;
            v47[3] = &unk_1E6A191D0;
            objc_copyWeak(&v50, &location);
            id v48 = v40;
            long long v49 = group;
            [v17 writeProperties:v16 completion:v47];

            objc_destroyWeak(&v50);
          }
          else
          {
            uint64_t v20 = (void *)MEMORY[0x1D9452090]();
            id v21 = self;
            HMFGetOSLogHandle();
            uint64_t v22 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
            {
              log = v22;
              uint64_t v36 = v20;
              HMFGetLogIdentifier();
              id v23 = (id)objc_claimAutoreleasedReturnValue();
              long long v24 = [v14 accessory];
              long long v25 = [v24 name];
              *(_DWORD *)buf = 138543874;
              id v57 = v23;
              __int16 v58 = 2112;
              long long v59 = v25;
              __int16 v60 = 2112;
              uint64_t v61 = v12;
              uint64_t v26 = v23;
              uint64_t v22 = log;
              _os_log_impl(&dword_1D49D5000, log, OS_LOG_TYPE_INFO, "%{public}@Accessory with media profile %@/%@ not reachable for writing", buf, 0x20u);

              uint64_t v20 = v36;
            }

            __int16 v27 = [MEMORY[0x1E4F28C58] hmErrorWithCode:4];
            __int16 v28 = +[HMDMediaPropertyResponse propertyResponsesFromRequests:v16 error:v27];
            id v29 = +[HMDMediaPropertyResponse serializeResponses:v28];
            [v40 addEntriesFromDictionary:v29];

            uint64_t v17 = 0;
          }
        }
        else
        {
          uint64_t v17 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
          int v18 = +[HMDMediaPropertyResponse propertyResponsesFromRequests:v16 error:v17];
          id v19 = +[HMDMediaPropertyResponse serializeResponses:v18];
          [v40 addEntriesFromDictionary:v19];
        }
      }
      id v9 = obj;
      uint64_t v10 = [obj countByEnumeratingWithState:&v51 objects:v62 count:16];
    }
    while (v10);
  }

  uint64_t v30 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __79__HMDHome__handleWriteMediaProperties_source_requestMessage_completionHandler___block_invoke_3;
  block[3] = &unk_1E6A19530;
  id v45 = v40;
  id v46 = v34;
  id v31 = v40;
  id v32 = v34;
  dispatch_group_notify(group, v30, block);

  objc_destroyWeak(&location);
}

void __79__HMDHome__handleWriteMediaProperties_source_requestMessage_completionHandler___block_invoke(id *a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = [WeakRetained workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __79__HMDHome__handleWriteMediaProperties_source_requestMessage_completionHandler___block_invoke_2;
    block[3] = &unk_1E6A19668;
    id v8 = a1[4];
    id v9 = v3;
    id v10 = a1[5];
    dispatch_async(v6, block);
  }
}

void __79__HMDHome__handleWriteMediaProperties_source_requestMessage_completionHandler___block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = (id)[*(id *)(a1 + 32) copy];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

void __79__HMDHome__handleWriteMediaProperties_source_requestMessage_completionHandler___block_invoke_2(void *a1)
{
  id v2 = (void *)a1[4];
  id v3 = +[HMDMediaPropertyResponse serializeResponses:a1[5]];
  [v2 addEntriesFromDictionary:v3];

  id v4 = a1[6];
  dispatch_group_leave(v4);
}

- (void)redispatchMediaWriteRequests:(id)a3 viaDevice:(id)a4 completion:(id)a5
{
  v27[1] = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v19 = a4;
  id v9 = a5;
  id v10 = +[HMDMediaPropertyWriteRequest serializeWriteRequests:v8];
  if ([v10 count])
  {
    int v11 = [(HMDHome *)self uuid];
    uint64_t v12 = [v11 UUIDString];

    v25[0] = @"kMediaPropertiesListKey";
    v25[1] = @"kHomeUUID";
    v26[0] = v10;
    v26[1] = v12;
    __int16 v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:v25 count:2];
    id v14 = (void *)MEMORY[0x1E4F654B0];
    uint64_t v15 = [(HMDHome *)self messageDestination];
    int v16 = [v14 messageWithName:@"kMediaPropertiesWriteRequestKey" qualityOfService:25 destination:v15 payload:v13];

    objc_initWeak(&location, self);
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = __61__HMDHome_redispatchMediaWriteRequests_viaDevice_completion___block_invoke;
    v20[3] = &unk_1E6A159F8;
    objc_copyWeak(&v23, &location);
    id v22 = v9;
    id v21 = v8;
    [v16 setResponseHandler:v20];
    uint64_t v17 = [(HMDHome *)self uuid];
    int v18 = [(HMDHome *)self workQueue];
    [(HMDHome *)self redispatchToResidentMessage:v16 target:v17 responseQueue:v18 viaDevice:v19];

    objc_destroyWeak(&v23);
    objc_destroyWeak(&location);
LABEL_5:

    goto LABEL_6;
  }
  if (v9)
  {
    uint64_t v12 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    __int16 v13 = +[HMDMediaPropertyResponse propertyResponsesFromRequests:v8 error:v12];
    v27[0] = v13;
    int v16 = [MEMORY[0x1E4F1C978] arrayWithObjects:v27 count:1];
    (*((void (**)(id, void *))v9 + 2))(v9, v16);
    goto LABEL_5;
  }
LABEL_6:
}

void __61__HMDHome_redispatchMediaWriteRequests_viaDevice_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    if (v5)
    {
      if (v8)
      {
        id v9 = +[HMDMediaPropertyResponse propertyResponsesFromRequests:*(void *)(a1 + 32) error:v5];
        uint64_t v10 = *(void *)(a1 + 40);
        v12[0] = v9;
        int v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v12 count:1];
        (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v11);

LABEL_7:
      }
    }
    else if (v8)
    {
      id v9 = +[HMDMediaPropertyResponse responsesFromSerializedResponse:v6 requests:*(void *)(a1 + 32) home:WeakRetained];
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
      goto LABEL_7;
    }
  }
}

- (void)_handleMediaPropertiesRead:(id)a3
{
  location[3] = *(id *)MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 dictionaryForKey:@"kMediaPropertiesListKey"];
  if ([v5 count])
  {
    uint64_t v6 = [v4 source];
    objc_initWeak(location, self);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    void v12[2] = __38__HMDHome__handleMediaPropertiesRead___block_invoke;
    v12[3] = &unk_1E6A0DF08;
    objc_copyWeak(&v14, location);
    id v13 = v4;
    [(HMDHome *)self _handleReadMediaProperties:v5 source:v6 message:v13 completionHandler:v12];

    objc_destroyWeak(&v14);
    objc_destroyWeak(location);
  }
  else
  {
    id v7 = (void *)MEMORY[0x1D9452090]();
    uint64_t v8 = self;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      LODWORD(location[0]) = 138543362;
      *(id *)((char *)location + 4) = v10;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@None of the properties in media properties read are valid", (uint8_t *)location, 0xCu);
    }
    int v11 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    [v4 respondWithError:v11];
  }
}

void __38__HMDHome__handleMediaPropertiesRead___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = WeakRetained;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = HMFGetLogIdentifier();
      int v11 = 138543618;
      uint64_t v12 = v8;
      __int16 v13 = 2112;
      id v14 = v3;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Responding to media read with %@", (uint8_t *)&v11, 0x16u);
    }
    [*(id *)(a1 + 32) respondWithPayload:v3];
  }
  else
  {
    id v9 = *(void **)(a1 + 32);
    uint64_t v10 = [MEMORY[0x1E4F28C58] hmErrorWithCode:20];
    [v9 respondWithError:v10];
  }
}

- (void)_handleReadMediaProperties:(id)a3 source:(unint64_t)a4 message:(id)a5 completionHandler:(id)a6
{
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v65 = a5;
  id v66 = a6;
  group = dispatch_group_create();
  id v72 = v8;
  __int16 v69 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(v8, "count"));
  objc_initWeak(&location, self);
  long long v102 = 0u;
  long long v103 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  id obj = [v8 allKeys];
  uint64_t v75 = [obj countByEnumeratingWithState:&v100 objects:v109 count:16];
  if (v75)
  {
    uint64_t v74 = *(void *)v101;
    uint64_t v88 = *MEMORY[0x1E4F2D990];
    uint64_t v87 = *MEMORY[0x1E4F2D9B8];
    uint64_t v86 = *MEMORY[0x1E4F2DA10];
    uint64_t v85 = *MEMORY[0x1E4F2D9E0];
    uint64_t v82 = *MEMORY[0x1E4F2DA20];
    uint64_t v79 = *MEMORY[0x1E4F2D9A0];
    do
    {
      uint64_t v83 = 0;
      do
      {
        if (*(void *)v101 != v74) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void *)(*((void *)&v100 + 1) + 8 * v83);
        __int16 v81 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v9];
        uint64_t v84 = -[HMDHome mediaProfileWithUUID:](self, "mediaProfileWithUUID:");
        if (v84)
        {
          id v77 = objc_msgSend(v72, "hmf_arrayForKey:", v9);
          uint64_t v10 = +[HMDMediaPropertyRequest deserializeReadRequests:mediaProfile:](HMDMediaPropertyRequest, "deserializeReadRequests:mediaProfile:");
          if (![v10 count]) {
            goto LABEL_51;
          }
          char v78 = [v84 mediaSession];
          int v11 = [v84 accessory];
          id v76 = v10;
          id v73 = v11;
          if (v11)
          {
            uint64_t v12 = [v11 identifier];
            id v13 = [(HMDHome *)self mediaSessionStateWithIdentifier:v12];

            if (!v78 && v13)
            {
              if ([(HMDHome *)self isCurrentDevicePrimaryResident])
              {
                id v14 = (void *)MEMORY[0x1D9452090]();
                id v68 = self;
                HMFGetOSLogHandle();
                uint64_t v15 = (id)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  id v16 = (id)objc_claimAutoreleasedReturnValue();
                  uint64_t v17 = [v84 accessory];
                  int v18 = [v17 name];
                  *(_DWORD *)buf = 138543874;
                  id v111 = v16;
                  __int16 v112 = 2112;
                  __int16 v113 = v18;
                  __int16 v114 = 2112;
                  uint64_t v115 = v9;
                  _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@Accessory with media profile %@/%@ has no session, returning local state", buf, 0x20u);
                }
                id v13 = v13;
                id v19 = v10;
                __int16 v67 = v19;
                if (self)
                {
                  uint64_t v20 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v19, "count"));
                  id v21 = [MEMORY[0x1E4F1C9C8] now];
                  long long v107 = 0u;
                  long long v108 = 0u;
                  long long v105 = 0u;
                  long long v106 = 0u;
                  id v22 = v67;
                  uint64_t v23 = [v22 countByEnumeratingWithState:&v105 objects:buf count:16];
                  if (!v23) {
                    goto LABEL_40;
                  }
                  uint64_t v24 = *(void *)v106;
                  while (1)
                  {
                    for (uint64_t i = 0; i != v23; ++i)
                    {
                      if (*(void *)v106 != v24) {
                        objc_enumerationMutation(v22);
                      }
                      uint64_t v26 = *(void **)(*((void *)&v105 + 1) + 8 * i);
                      __int16 v27 = [v26 property];
                      int v28 = [v27 isEqualToString:v88];

                      if (v28)
                      {
                        id v29 = [v13 sessionIdentifier];
                        uint64_t v30 = +[HMDMediaPropertyResponse responseWithRequest:v26 value:v29 updatedTime:v21];
                      }
                      else
                      {
                        id v31 = [v26 property];
                        int v32 = [v31 isEqualToString:v87];

                        if (v32)
                        {
                          id v29 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v13, "playbackState"));
                          uint64_t v30 = +[HMDMediaPropertyResponse responseWithRequest:v26 value:v29 updatedTime:v21];
                        }
                        else
                        {
                          id v33 = [v26 property];
                          int v34 = [v33 isEqualToString:v86];

                          if (v34)
                          {
                            id v29 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v13, "shuffleState"));
                            uint64_t v30 = +[HMDMediaPropertyResponse responseWithRequest:v26 value:v29 updatedTime:v21];
                          }
                          else
                          {
                            id v35 = [v26 property];
                            int v36 = [v35 isEqualToString:v85];

                            if (v36)
                            {
                              id v29 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v13, "repeatState"));
                              uint64_t v30 = +[HMDMediaPropertyResponse responseWithRequest:v26 value:v29 updatedTime:v21];
                            }
                            else
                            {
                              uint64_t v37 = [v26 property];
                              if ([v37 isEqualToString:v82])
                              {
                                id v38 = [v13 volume];
                                BOOL v39 = v38 == 0;

                                if (!v39)
                                {
                                  id v29 = [v13 volume];
                                  uint64_t v30 = +[HMDMediaPropertyResponse responseWithRequest:v26 value:v29 updatedTime:v21];
                                  goto LABEL_35;
                                }
                              }
                              else
                              {
                              }
                              __int16 v40 = [v26 property];
                              if (![v40 isEqualToString:v79]) {
                                goto LABEL_37;
                              }
                              __int16 v41 = [v13 mediaUniqueIdentifier];
                              BOOL v42 = v41 == 0;

                              if (v42) {
                                continue;
                              }
                              id v29 = [v13 mediaUniqueIdentifier];
                              uint64_t v30 = +[HMDMediaPropertyResponse responseWithRequest:v26 value:v29 updatedTime:v21];
                            }
                          }
                        }
                      }
LABEL_35:
                      __int16 v40 = (void *)v30;

                      if (!v40) {
                        continue;
                      }
                      [v20 addObject:v40];
LABEL_37:
                    }
                    uint64_t v23 = [v22 countByEnumeratingWithState:&v105 objects:buf count:16];
                    if (!v23)
                    {
LABEL_40:

                      uint64_t v43 = (void *)[v20 copy];
                      goto LABEL_41;
                    }
                  }
                }
                uint64_t v43 = 0;
LABEL_41:

                dispatch_group_enter(group);
                char v44 = [(HMDHome *)v68 workQueue];
                block[0] = MEMORY[0x1E4F143A8];
                block[1] = 3221225472;
                block[2] = __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke;
                block[3] = &unk_1E6A19668;
                id v97 = v69;
                id v98 = v43;
                BOOL v99 = group;
                id v45 = v43;
                dispatch_async(v44, block);

LABEL_50:
                uint64_t v10 = v76;
LABEL_51:

                goto LABEL_52;
              }
LABEL_47:
              long long v52 = (void *)MEMORY[0x1D9452090]();
              long long v53 = self;
              HMFGetOSLogHandle();
              long long v54 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                id v55 = (id)objc_claimAutoreleasedReturnValue();
                __int16 v56 = [v84 accessory];
                id v57 = [v56 name];
                *(_DWORD *)buf = 138543874;
                id v111 = v55;
                __int16 v112 = 2112;
                __int16 v113 = v57;
                __int16 v114 = 2112;
                uint64_t v115 = v9;
                _os_log_impl(&dword_1D49D5000, v54, OS_LOG_TYPE_INFO, "%{public}@Accessory with media profile %@/%@ not reachable for reading", buf, 0x20u);
              }
              __int16 v58 = [MEMORY[0x1E4F28C58] hmErrorWithCode:4];
              long long v59 = +[HMDMediaPropertyResponse propertyResponsesFromRequests:v10 error:v58];
              __int16 v60 = +[HMDMediaPropertyResponse serializeResponses:v59];
              [v69 addEntriesFromDictionary:v60];

              goto LABEL_50;
            }
          }
          else
          {
            id v13 = 0;
          }
          if (v78)
          {
            dispatch_group_enter(group);
            id v46 = (void *)MEMORY[0x1D9452090]();
            id v47 = self;
            HMFGetOSLogHandle();
            id v48 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              id v49 = (id)objc_claimAutoreleasedReturnValue();
              id v50 = [v84 accessory];
              long long v51 = [v50 name];
              *(_DWORD *)buf = 138544130;
              id v111 = v49;
              __int16 v112 = 2112;
              __int16 v113 = v51;
              __int16 v114 = 2112;
              uint64_t v115 = v9;
              __int16 v116 = 2112;
              uint64_t v117 = v78;
              _os_log_impl(&dword_1D49D5000, v48, OS_LOG_TYPE_INFO, "%{public}@Reading state for accessory with media profile %@/%@ from media session: %@", buf, 0x2Au);
            }
            v92[0] = MEMORY[0x1E4F143A8];
            v92[1] = 3221225472;
            void v92[2] = __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke_1922;
            v92[3] = &unk_1E6A191D0;
            objc_copyWeak(&v95, &location);
            long long v93 = group;
            id v94 = v69;
            [v78 readProperties:v10 completion:v92];

            objc_destroyWeak(&v95);
            goto LABEL_50;
          }
          goto LABEL_47;
        }
LABEL_52:

        ++v83;
      }
      while (v83 != v75);
      uint64_t v61 = [obj countByEnumeratingWithState:&v100 objects:v109 count:16];
      uint64_t v75 = v61;
    }
    while (v61);
  }

  long long v62 = [(HMDHome *)self workQueue];
  v89[0] = MEMORY[0x1E4F143A8];
  v89[1] = 3221225472;
  v89[2] = __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke_3;
  v89[3] = &unk_1E6A19530;
  id v90 = v69;
  id v91 = v66;
  id v63 = v69;
  id v64 = v66;
  dispatch_group_notify(group, v62, v89);

  objc_destroyWeak(&location);
}

void __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke(void *a1)
{
  id v2 = (void *)a1[4];
  id v3 = +[HMDMediaPropertyResponse serializeResponses:a1[5]];
  [v2 addEntriesFromDictionary:v3];

  id v4 = a1[6];
  dispatch_group_leave(v4);
}

void __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke_1922(id *a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = [WeakRetained workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke_2;
    block[3] = &unk_1E6A19668;
    id v8 = a1[5];
    id v9 = v3;
    id v10 = a1[4];
    dispatch_async(v6, block);
  }
  else
  {
    dispatch_group_leave((dispatch_group_t)a1[4]);
  }
}

void __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = (id)[*(id *)(a1 + 32) copy];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

void __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke_2(void *a1)
{
  id v2 = (void *)a1[4];
  id v3 = +[HMDMediaPropertyResponse serializeResponses:a1[5]];
  [v2 addEntriesFromDictionary:v3];

  id v4 = a1[6];
  dispatch_group_leave(v4);
}

- (void)redispatchMediaReadRequests:(id)a3 viaDevice:(id)a4 completion:(id)a5
{
  v27[1] = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v19 = a4;
  id v9 = a5;
  id v10 = +[HMDMediaPropertyRequest serializeReadRequests:v8];
  if ([v10 count])
  {
    int v11 = [(HMDHome *)self uuid];
    uint64_t v12 = [v11 UUIDString];

    v25[0] = @"kMediaPropertiesListKey";
    v25[1] = @"kHomeUUID";
    v26[0] = v10;
    v26[1] = v12;
    id v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:v25 count:2];
    id v14 = (void *)MEMORY[0x1E4F654B0];
    uint64_t v15 = [(HMDHome *)self messageDestination];
    id v16 = [v14 messageWithName:@"kMediaPropertiesReadRequestKey" qualityOfService:33 destination:v15 payload:v13];

    objc_initWeak(&location, self);
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = __60__HMDHome_redispatchMediaReadRequests_viaDevice_completion___block_invoke;
    v20[3] = &unk_1E6A159F8;
    objc_copyWeak(&v23, &location);
    id v22 = v9;
    id v21 = v8;
    [v16 setResponseHandler:v20];
    uint64_t v17 = [(HMDHome *)self uuid];
    int v18 = [(HMDHome *)self workQueue];
    [(HMDHome *)self redispatchToResidentMessage:v16 target:v17 responseQueue:v18 viaDevice:v19];

    objc_destroyWeak(&v23);
    objc_destroyWeak(&location);
LABEL_5:

    goto LABEL_6;
  }
  if (v9)
  {
    uint64_t v12 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    id v13 = +[HMDMediaPropertyResponse propertyResponsesFromRequests:v8 error:v12];
    v27[0] = v13;
    id v16 = [MEMORY[0x1E4F1C978] arrayWithObjects:v27 count:1];
    (*((void (**)(id, void *))v9 + 2))(v9, v16);
    goto LABEL_5;
  }
LABEL_6:
}

void __60__HMDHome_redispatchMediaReadRequests_viaDevice_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    if (v5)
    {
      if (v8)
      {
        id v9 = +[HMDMediaPropertyResponse propertyResponsesFromRequests:*(void *)(a1 + 32) error:v5];
        uint64_t v10 = *(void *)(a1 + 40);
        v12[0] = v9;
        int v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v12 count:1];
        (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v11);

LABEL_7:
      }
    }
    else if (v8)
    {
      id v9 = +[HMDMediaPropertyResponse responsesFromSerializedResponse:v6 requests:*(void *)(a1 + 32) home:WeakRetained];
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
      goto LABEL_7;
    }
  }
}

- (void)removeMediaSessionState:(id)a3
{
  id v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if ([(NSMutableArray *)self->_mediaSessionStates containsObject:v4]) {
    [(NSMutableArray *)self->_mediaSessionStates removeObject:v4];
  }
  os_unfair_recursive_lock_unlock();
}

- (void)addMediaSessionState:(id)a3
{
  id v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if (([(NSMutableArray *)self->_mediaSessionStates containsObject:v4] & 1) == 0) {
    [(NSMutableArray *)self->_mediaSessionStates addObject:v4];
  }
  os_unfair_recursive_lock_unlock();
}

- (id)mediaSessionStateWithIdentifier:(id)a3
{
  id v4 = a3;
  if ([v4 hasPrefix:@"direct://"])
  {
    id v5 = v4;
    id v6 = [v5 substringFromIndex:8];
  }
  else
  {
    id v5 = [NSString stringWithFormat:@"direct://%@", v4];
    id v6 = v4;
  }
  id v7 = v6;
  uint64_t v8 = [(HMDHome *)self mediaSessionStates];
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = __43__HMDHome_mediaSessionStateWithIdentifier___block_invoke;
  v13[3] = &unk_1E6A07580;
  id v14 = v5;
  id v15 = v7;
  id v9 = v7;
  id v10 = v5;
  int v11 = objc_msgSend(v8, "na_firstObjectPassingTest:", v13);

  return v11;
}

uint64_t __43__HMDHome_mediaSessionStateWithIdentifier___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 sessionIdentifier];
  if ([v4 isEqualToString:*(void *)(a1 + 32)])
  {
    uint64_t v5 = 1;
  }
  else
  {
    id v6 = [v3 sessionIdentifier];
    uint64_t v5 = [v6 isEqualToString:*(void *)(a1 + 40)];
  }
  return v5;
}

- (NSArray)mediaSessionStates
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = (void *)[(NSMutableArray *)self->_mediaSessionStates copy];
  os_unfair_recursive_lock_unlock();
  return (NSArray *)v3;
}

- (void)removeMediaSession:(id)a3
{
  id v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if ([(NSMutableArray *)self->_mediaSessions containsObject:v4]) {
    [(NSMutableArray *)self->_mediaSessions removeObject:v4];
  }
  os_unfair_recursive_lock_unlock();
}

- (void)addMediaSession:(id)a3
{
  id v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if (([(NSMutableArray *)self->_mediaSessions containsObject:v4] & 1) == 0) {
    [(NSMutableArray *)self->_mediaSessions addObject:v4];
  }
  os_unfair_recursive_lock_unlock();
}

- (id)mediaSessionWithUUID:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self mediaSessions];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);

  return v6;
}

- (id)mediaSessionWithIdentifier:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self mediaSessions];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithValue:forKeyPath:", v4, @"sessionIdentifier");

  return v6;
}

- (NSArray)mediaSessions
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = (void *)[(NSMutableArray *)self->_mediaSessions copy];
  os_unfair_recursive_lock_unlock();
  return (NSArray *)v3;
}

- (void)migrateAfterCloudMerge:(id)a3
{
  id v4 = a3;
  [(HMDHome *)self setMigrationNeeded:0];
  if ([(HMDHome *)self isOwnerUser])
  {
    uint64_t v5 = [MEMORY[0x1E4F1CA48] array];
    id v6 = [MEMORY[0x1E4F1CA48] array];
    HMDispatchQueueNameString();
    id v7 = objc_claimAutoreleasedReturnValue();
    uint64_t v8 = (const char *)[v7 UTF8String];
    id v9 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    id v10 = dispatch_queue_create(v8, v9);

    int v11 = dispatch_group_create();
    objc_initWeak(location, self);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __34__HMDHome_migrateAfterCloudMerge___block_invoke;
    aBlock[3] = &unk_1E6A16550;
    objc_copyWeak(&v42, location);
    id v12 = v5;
    id v40 = v12;
    id v13 = v6;
    id v41 = v13;
    blocuint64_t k = _Block_copy(aBlock);
    dispatch_group_enter(v11);
    v34[0] = MEMORY[0x1E4F143A8];
    v34[1] = 3221225472;
    v34[2] = __34__HMDHome_migrateAfterCloudMerge___block_invoke_4;
    v34[3] = &unk_1E6A0E400;
    objc_copyWeak(&v38, location);
    id v14 = v12;
    id v35 = v14;
    id v15 = v13;
    id v36 = v15;
    id v16 = v11;
    uint64_t v37 = v16;
    [(HMDHome *)self _migrateHomeSettingsCloudZone:v4 migrationQueue:v10 completion:v34];
    dispatch_group_enter(v16);
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 3221225472;
    v29[2] = __34__HMDHome_migrateAfterCloudMerge___block_invoke_5;
    v29[3] = &unk_1E6A0E400;
    objc_copyWeak(&v33, location);
    id v17 = v14;
    id v30 = v17;
    id v18 = v15;
    id v31 = v18;
    id v19 = v16;
    int v32 = v19;
    [(HMDHome *)self _migrateHomeMediaSettingsCloudZone:v4 migrationQueue:v10 completion:v29];
    dispatch_group_enter(v19);
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = __34__HMDHome_migrateAfterCloudMerge___block_invoke_6;
    v24[3] = &unk_1E6A0E400;
    objc_copyWeak(&v28, location);
    id v20 = v17;
    id v25 = v20;
    id v21 = v18;
    id v26 = v21;
    id v22 = v19;
    __int16 v27 = v22;
    [(HMDHome *)self _migrateHomeUsersCloudZone:v4 migrationQueue:v10 completion:v24];
    dispatch_group_notify(v22, v10, block);

    objc_destroyWeak(&v28);
    objc_destroyWeak(&v33);

    objc_destroyWeak(&v38);
    objc_destroyWeak(&v42);
    objc_destroyWeak(location);
  }
}

void __34__HMDHome_migrateAfterCloudMerge___block_invoke(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  id v2 = (id *)(a1 + 48);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    frouint64_t m = v2;
    id v38 = WeakRetained;
    uint64_t v39 = v1;
    if ([*(id *)(v1 + 32) count])
    {
      id v4 = (void *)MEMORY[0x1D9452090]();
      id v43 = WeakRetained;
      uint64_t v5 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        id v6 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        uint64_t v61 = v6;
        _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@General Merge Migrating (Save Transactions)", buf, 0xCu);
      }
      id v7 = [v43 backingStore];
      uint64_t v8 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      id v45 = [v7 transaction:@"generalMergeHomeSaveMigration" options:v8];

      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      id obj = *(id *)(v39 + 32);
      uint64_t v9 = [obj countByEnumeratingWithState:&v55 objects:v66 count:16];
      if (v9)
      {
        uint64_t v10 = *(void *)v56;
        do
        {
          for (uint64_t i = 0; i != v9; ++i)
          {
            if (*(void *)v56 != v10) {
              objc_enumerationMutation(obj);
            }
            uint64_t v12 = *(void *)(*((void *)&v55 + 1) + 8 * i);
            id v13 = (void *)MEMORY[0x1D9452090]();
            id v14 = v43;
            id v15 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
            {
              id v16 = HMFGetLogIdentifier();
              id v17 = [v14 uuid];
              id v18 = [v17 UUIDString];
              *(_DWORD *)buf = 138543874;
              uint64_t v61 = v16;
              __int16 v62 = 2112;
              id v63 = v18;
              __int16 v64 = 2112;
              uint64_t v65 = v12;
              _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_DEBUG, "%{public}@[General Merge Home Migration %@] Object Change: %@", buf, 0x20u);
            }
            [v45 add:v12 withMessage:0];
          }
          uint64_t v9 = [obj countByEnumeratingWithState:&v55 objects:v66 count:16];
        }
        while (v9);
      }

      id v19 = [v43 metricsDispatcher];
      [v19 submitMigrationEventMetricsForModels:*(void *)(v39 + 32) reason:@"generalMergeHomeSaveMigration"];

      uint64_t v1 = v39;
    }
    else
    {
      id v45 = 0;
    }
    if ([*(id *)(v1 + 40) count])
    {
      id v20 = (void *)MEMORY[0x1D9452090]();
      id obja = v38;
      id v21 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        id v22 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        uint64_t v61 = v22;
        _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@General Merge New Object Migrating (Run Transactions)", buf, 0xCu);
      }
      id v23 = [obja backingStore];
      uint64_t v24 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      id v44 = [v23 transaction:@"generalMergeHomeRunNewObjectMigration" options:v24];

      long long v54 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v51 = 0u;
      id v40 = *(id *)(v39 + 40);
      uint64_t v25 = [v40 countByEnumeratingWithState:&v51 objects:v59 count:16];
      if (v25)
      {
        uint64_t v26 = *(void *)v52;
        do
        {
          for (uint64_t j = 0; j != v25; ++j)
          {
            if (*(void *)v52 != v26) {
              objc_enumerationMutation(v40);
            }
            uint64_t v28 = *(void *)(*((void *)&v51 + 1) + 8 * j);
            id v29 = (void *)MEMORY[0x1D9452090]();
            id v30 = obja;
            id v31 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
            {
              int v32 = HMFGetLogIdentifier();
              id v33 = [v30 uuid];
              int v34 = [v33 UUIDString];
              *(_DWORD *)buf = 138543874;
              uint64_t v61 = v32;
              __int16 v62 = 2112;
              id v63 = v34;
              __int16 v64 = 2112;
              uint64_t v65 = v28;
              _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_DEBUG, "%{public}@[General Merge Home New Migration %@] Object Change: %@", buf, 0x20u);
            }
            [v44 add:v28 withMessage:0];
          }
          uint64_t v25 = [v40 countByEnumeratingWithState:&v51 objects:v59 count:16];
        }
        while (v25);
      }

      id v35 = [obja metricsDispatcher];
      [v35 submitMigrationEventMetricsForModels:*(void *)(v39 + 40) reason:@"generalMergeHomeRunNewObjectMigration"];

      if (!v45)
      {
        if (v44)
        {
          v46[0] = MEMORY[0x1E4F143A8];
          v46[1] = 3221225472;
          v46[2] = __34__HMDHome_migrateAfterCloudMerge___block_invoke_3;
          v46[3] = &unk_1E6A18528;
          id v36 = &v47;
          objc_copyWeak(&v47, from);
          [v44 run:v46];
LABEL_34:
          objc_destroyWeak(v36);
        }
LABEL_35:

        id WeakRetained = v38;
        goto LABEL_36;
      }
    }
    else
    {
      if (!v45) {
        goto LABEL_35;
      }
      id v44 = 0;
    }
    v48[0] = MEMORY[0x1E4F143A8];
    v48[1] = 3221225472;
    v48[2] = __34__HMDHome_migrateAfterCloudMerge___block_invoke_1911;
    v48[3] = &unk_1E6A17758;
    id v36 = &v50;
    objc_copyWeak(&v50, from);
    id v44 = v44;
    id v49 = v44;
    [v45 save:v48];

    goto LABEL_34;
  }
LABEL_36:
}

void __34__HMDHome_migrateAfterCloudMerge___block_invoke_4(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v10 = a2;
  id v7 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v9 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    [*(id *)(a1 + 32) addObjectsFromArray:v10];
    [*(id *)(a1 + 40) addObjectsFromArray:v7];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void __34__HMDHome_migrateAfterCloudMerge___block_invoke_5(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v10 = a2;
  id v7 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v9 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    [*(id *)(a1 + 32) addObjectsFromArray:v10];
    [*(id *)(a1 + 40) addObjectsFromArray:v7];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void __34__HMDHome_migrateAfterCloudMerge___block_invoke_6(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v10 = a2;
  id v7 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v9 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    [*(id *)(a1 + 32) addObjectsFromArray:v10];
    [*(id *)(a1 + 40) addObjectsFromArray:v7];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void __34__HMDHome_migrateAfterCloudMerge___block_invoke_1911(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v6 = WeakRetained;
  id v7 = *(void **)(a1 + 32);
  if (v7)
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __34__HMDHome_migrateAfterCloudMerge___block_invoke_2;
    v10[3] = &unk_1E6A18528;
    objc_copyWeak(&v11, v4);
    [v7 run:v10];
    objc_destroyWeak(&v11);
  }
  else
  {
    uint64_t v8 = [WeakRetained homeManager];
    uint64_t v9 = [v6 zoneID];
    [v8 uploadHomeToCloudZone:v9 withDelay:0.0];
  }
}

void __34__HMDHome_migrateAfterCloudMerge___block_invoke_3(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v1 = [WeakRetained homeManager];
  id v2 = [WeakRetained zoneID];
  [v1 uploadHomeToCloudZone:v2 withDelay:0.0];
}

void __34__HMDHome_migrateAfterCloudMerge___block_invoke_2(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v1 = [WeakRetained homeManager];
  id v2 = [WeakRetained zoneID];
  [v1 uploadHomeToCloudZone:v2 withDelay:0.0];
}

- (void)migrateCloudZone:(id)a3 completion:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  [(HMDHome *)self setMigrationNeeded:0];
  if ([(HMDHome *)self isOwnerUser])
  {
    uint64_t v8 = [MEMORY[0x1E4F1CA48] array];
    uint64_t v9 = [MEMORY[0x1E4F1CA48] array];
    [(HMDHome *)self setupBackingStore];
    HMDispatchQueueNameString();
    id v10 = objc_claimAutoreleasedReturnValue();
    id v11 = (const char *)[v10 UTF8String];
    uint64_t v12 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    dispatch_queue_t v23 = dispatch_queue_create(v11, v12);

    dispatch_group_t v13 = dispatch_group_create();
    objc_initWeak(location, self);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke;
    aBlock[3] = &unk_1E6A17B18;
    objc_copyWeak(&v37, location);
    id v14 = v7;
    id v36 = v14;
    id v15 = v8;
    id v34 = v15;
    id v16 = v9;
    id v35 = v16;
    id v17 = _Block_copy(aBlock);
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_4;
    v24[3] = &unk_1E6A07558;
    objc_copyWeak(&v32, location);
    id v30 = v14;
    id v25 = v6;
    id v22 = v13;
    uint64_t v26 = v22;
    id v18 = v23;
    __int16 v27 = v18;
    id v19 = v15;
    id v28 = v19;
    id v20 = v16;
    id v29 = v20;
    id v21 = v17;
    id v31 = v21;
    [(HMDHome *)self fetchAllMigratedObjectsForCloudZone:v25 completion:v24];

    objc_destroyWeak(&v32);
    objc_destroyWeak(&v37);
    objc_destroyWeak(location);
  }
  else if (v7)
  {
    (*((void (**)(id, void))v7 + 2))(v7, 0);
  }
}

void __39__HMDHome_migrateCloudZone_completion___block_invoke(id *a1)
{
  uint64_t v1 = a1;
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  frouint64_t m = a1 + 7;
  id WeakRetained = objc_loadWeakRetained(a1 + 7);
  if (WeakRetained)
  {
    id v38 = WeakRetained;
    uint64_t v39 = v1;
    if ([v1[4] count])
    {
      id v3 = (void *)MEMORY[0x1D9452090]();
      id v43 = WeakRetained;
      id v4 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        uint64_t v5 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        __int16 v62 = v5;
        _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@General Migrating (Save Transactions)", buf, 0xCu);
      }
      id v6 = [v43 backingStore];
      id v7 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      id v45 = [v6 transaction:@"generalHomeSaveMigration" options:v7];

      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      id obj = v39[4];
      uint64_t v8 = [obj countByEnumeratingWithState:&v56 objects:v67 count:16];
      if (v8)
      {
        uint64_t v9 = *(void *)v57;
        do
        {
          for (uint64_t i = 0; i != v8; ++i)
          {
            if (*(void *)v57 != v9) {
              objc_enumerationMutation(obj);
            }
            uint64_t v11 = *(void *)(*((void *)&v56 + 1) + 8 * i);
            uint64_t v12 = (void *)MEMORY[0x1D9452090]();
            id v13 = v43;
            id v14 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
            {
              id v15 = HMFGetLogIdentifier();
              id v16 = [v13 uuid];
              id v17 = [v16 UUIDString];
              *(_DWORD *)buf = 138543874;
              __int16 v62 = v15;
              __int16 v63 = 2112;
              __int16 v64 = v17;
              __int16 v65 = 2112;
              uint64_t v66 = v11;
              _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_DEBUG, "%{public}@[General Home Migration %@] Object Change: %@", buf, 0x20u);
            }
            [v45 add:v11 withMessage:0];
          }
          uint64_t v8 = [obj countByEnumeratingWithState:&v56 objects:v67 count:16];
        }
        while (v8);
      }

      id v18 = [v43 metricsDispatcher];
      [v18 submitMigrationEventMetricsForModels:v39[4] reason:@"generalHomeSaveMigration"];

      uint64_t v1 = v39;
    }
    else
    {
      id v45 = 0;
    }
    if ([v1[5] count])
    {
      id v20 = (void *)MEMORY[0x1D9452090]();
      id obja = v38;
      id v21 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        id v22 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        __int16 v62 = v22;
        _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@General New Object Migrating (Run Transactions)", buf, 0xCu);
      }
      dispatch_queue_t v23 = [obja backingStore];
      uint64_t v24 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      id v44 = [v23 transaction:@"generalHomeRunNewObjectMigration" options:v24];

      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      id v40 = v39[5];
      uint64_t v25 = [v40 countByEnumeratingWithState:&v52 objects:v60 count:16];
      if (v25)
      {
        uint64_t v26 = *(void *)v53;
        do
        {
          for (uint64_t j = 0; j != v25; ++j)
          {
            if (*(void *)v53 != v26) {
              objc_enumerationMutation(v40);
            }
            uint64_t v28 = *(void *)(*((void *)&v52 + 1) + 8 * j);
            id v29 = (void *)MEMORY[0x1D9452090]();
            id v30 = obja;
            id v31 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
            {
              id v32 = HMFGetLogIdentifier();
              id v33 = [v30 uuid];
              id v34 = [v33 UUIDString];
              *(_DWORD *)buf = 138543874;
              __int16 v62 = v32;
              __int16 v63 = 2112;
              __int16 v64 = v34;
              __int16 v65 = 2112;
              uint64_t v66 = v28;
              _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_DEBUG, "%{public}@[General Home New Migration %@] Object Change: %@", buf, 0x20u);
            }
            [v44 add:v28 withMessage:0];
          }
          uint64_t v25 = [v40 countByEnumeratingWithState:&v52 objects:v60 count:16];
        }
        while (v25);
      }

      id v35 = [obja metricsDispatcher];
      [v35 submitMigrationEventMetricsForModels:v39[5] reason:@"generalHomeRunNewObjectMigration"];

      if (!v45)
      {
        if (v44)
        {
          v46[0] = MEMORY[0x1E4F143A8];
          v46[1] = 3221225472;
          v46[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_3;
          v46[3] = &unk_1E6A18528;
          objc_copyWeak(&v47, from);
          [v44 run:v46];
          objc_destroyWeak(&v47);
        }
        else
        {
          id v44 = 0;
        }
LABEL_36:
        id v36 = (void (**)(id, void))v39[6];
        if (v36) {
          v36[2](v36, 0);
        }
        goto LABEL_38;
      }
    }
    else
    {
      id v44 = 0;
      if (!v45) {
        goto LABEL_36;
      }
    }
    v48[0] = MEMORY[0x1E4F143A8];
    v48[1] = 3221225472;
    v48[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_1894;
    v48[3] = &unk_1E6A18500;
    objc_copyWeak(&v51, from);
    id v44 = v44;
    id v49 = v44;
    id v50 = v39[6];
    [v45 save:v48];

    objc_destroyWeak(&v51);
LABEL_38:

    id WeakRetained = v38;
    goto LABEL_39;
  }
  id v19 = (void (**)(id, void))v1[6];
  if (v19) {
    v19[2](v19, 0);
  }
LABEL_39:
}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  id v40 = a2;
  id v5 = a3;
  frouint64_t m = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));
  id v7 = WeakRetained;
  uint64_t v39 = v5;
  if (WeakRetained)
  {
    id v42 = (id *)a1;
    id v43 = WeakRetained;
    if (v5)
    {
      uint64_t v8 = (void *)MEMORY[0x1D9452090]();
      id v9 = v43;
      id v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v86 = v11;
        __int16 v87 = 2112;
        uint64_t v88 = v39;
        _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_ERROR, "%{public}@Unable to fetch migration changes in this house because of error (%@).", buf, 0x16u);
      }
    }
    if (![v40 count]) {
      goto LABEL_20;
    }
    uint64_t v12 = (void *)MEMORY[0x1D9452090]();
    id v46 = v43;
    id v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      id v14 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v86 = v14;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@General Object Migrating (Run Transactions)", buf, 0xCu);
    }
    id v15 = [v46 backingStore];
    id v16 = +[HMDBackingStoreTransactionOptions defaultCloudOptions];
    id v45 = [v15 transaction:@"generalHomeRunObjectMigration" options:v16];

    long long v83 = 0u;
    long long v84 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    id obj = v40;
    uint64_t v17 = [obj countByEnumeratingWithState:&v81 objects:v91 count:16];
    if (v17)
    {
      uint64_t v18 = *(void *)v82;
      do
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          if (*(void *)v82 != v18) {
            objc_enumerationMutation(obj);
          }
          uint64_t v20 = *(void *)(*((void *)&v81 + 1) + 8 * i);
          id v21 = (void *)MEMORY[0x1D9452090]();
          id v22 = v46;
          dispatch_queue_t v23 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v24 = HMFGetLogIdentifier();
            uint64_t v25 = [v22 uuid];
            uint64_t v26 = [v25 UUIDString];
            *(_DWORD *)buf = 138543874;
            uint64_t v86 = v24;
            __int16 v87 = 2112;
            uint64_t v88 = v26;
            __int16 v89 = 2112;
            uint64_t v90 = v20;
            _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_DEBUG, "%{public}@[General Home Migration %@] Object Change: %@", buf, 0x20u);
          }
          [v45 add:v20 withMessage:0];
        }
        uint64_t v17 = [obj countByEnumeratingWithState:&v81 objects:v91 count:16];
      }
      while (v17);
    }

    if (v45)
    {
      v72[0] = MEMORY[0x1E4F143A8];
      v72[1] = 3221225472;
      v72[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_1898;
      void v72[3] = &unk_1E6A07530;
      objc_copyWeak(&v80, from);
      id v78 = v42[9];
      id v73 = v42[4];
      id v74 = v42[5];
      id v75 = v42[6];
      id v76 = v42[7];
      id v77 = v42[8];
      id v79 = v42[10];
      [v45 run:v72];

      objc_destroyWeak(&v80);
    }
    else
    {
LABEL_20:
      dispatch_group_enter((dispatch_group_t)v42[5]);
      id v27 = v42[4];
      id v28 = v42[6];
      v67[0] = MEMORY[0x1E4F143A8];
      v67[1] = 3221225472;
      void v67[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_7;
      v67[3] = &unk_1E6A0E400;
      objc_copyWeak(&v71, from);
      id v68 = v42[7];
      id v69 = v42[8];
      id v70 = v42[5];
      [v43 _migrateResidentDevicesCloudZone:v27 migrationQueue:v28 completion:v67];
      dispatch_group_enter((dispatch_group_t)v42[5]);
      id v29 = v42[4];
      id v30 = v42[6];
      v62[0] = MEMORY[0x1E4F143A8];
      v62[1] = 3221225472;
      v62[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_8;
      v62[3] = &unk_1E6A0E400;
      objc_copyWeak(&v66, from);
      id v63 = v42[7];
      id v64 = v42[8];
      id v65 = v42[5];
      [v43 _migrateHomeSettingsCloudZone:v29 migrationQueue:v30 completion:v62];
      dispatch_group_enter((dispatch_group_t)v42[5]);
      id v31 = v42[4];
      id v32 = v42[6];
      v57[0] = MEMORY[0x1E4F143A8];
      v57[1] = 3221225472;
      v57[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_9;
      v57[3] = &unk_1E6A0E400;
      objc_copyWeak(&v61, from);
      id v58 = v42[7];
      id v59 = v42[8];
      id v60 = v42[5];
      [v43 _migrateHomeMediaSettingsCloudZone:v31 migrationQueue:v32 completion:v57];
      dispatch_group_enter((dispatch_group_t)v42[5]);
      id v33 = v42[4];
      id v34 = v42[6];
      v52[0] = MEMORY[0x1E4F143A8];
      v52[1] = 3221225472;
      v52[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_10;
      v52[3] = &unk_1E6A0E400;
      objc_copyWeak(&v56, from);
      id v53 = v42[7];
      id v54 = v42[8];
      id v55 = v42[5];
      [v43 _migrateHomeUsersCloudZone:v33 migrationQueue:v34 completion:v52];
      dispatch_group_enter((dispatch_group_t)v42[5]);
      id v35 = v42[4];
      id v36 = v42[6];
      v47[0] = MEMORY[0x1E4F143A8];
      v47[1] = 3221225472;
      v47[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_11;
      v47[3] = &unk_1E6A0E400;
      objc_copyWeak(&v51, from);
      id v37 = v42;
      id v48 = v42[7];
      id v49 = v42[8];
      id v50 = v42[5];
      [v43 _migrateAppleMediaAccessoriesWithCloudZone:v35 migrationQueue:v36 completion:v47];
      [v43 _migrateHomeAllObjectsCloudZone:v37[4] migrationGroup:v37[5] migrationQueue:v37[6] saveModels:v37[7] runModels:v37[8]];
      dispatch_group_notify((dispatch_group_t)v37[5], (dispatch_queue_t)v37[6], v37[10]);

      objc_destroyWeak(&v51);
      objc_destroyWeak(&v56);

      objc_destroyWeak(&v61);
      objc_destroyWeak(&v66);

      objc_destroyWeak(&v71);
    }
    id v7 = v43;
  }
  else
  {
    uint64_t v38 = *(void *)(a1 + 72);
    if (v38) {
      (*(void (**)(uint64_t, void))(v38 + 16))(v38, 0);
    }
  }
}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_1898(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));
  if (WeakRetained)
  {
    [*(id *)(a1 + 32) markMigratedObjectsAsMigrated];
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 48);
    v37[0] = MEMORY[0x1E4F143A8];
    v37[1] = 3221225472;
    v37[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_2_1899;
    v37[3] = &unk_1E6A0E400;
    objc_copyWeak(v41, (id *)(a1 + 88));
    id v38 = *(id *)(a1 + 56);
    id v39 = *(id *)(a1 + 64);
    id v40 = *(id *)(a1 + 40);
    [WeakRetained _migrateResidentDevicesCloudZone:v5 migrationQueue:v6 completion:v37];
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 48);
    v32[0] = MEMORY[0x1E4F143A8];
    v32[1] = 3221225472;
    v32[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_3_1900;
    v32[3] = &unk_1E6A0E400;
    objc_copyWeak(&v36, (id *)(a1 + 88));
    id v33 = *(id *)(a1 + 56);
    id v34 = *(id *)(a1 + 64);
    id v35 = *(id *)(a1 + 40);
    [WeakRetained _migrateHomeSettingsCloudZone:v7 migrationQueue:v8 completion:v32];
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 48);
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    void v27[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_4_1901;
    v27[3] = &unk_1E6A0E400;
    objc_copyWeak(&v31, (id *)(a1 + 88));
    id v28 = *(id *)(a1 + 56);
    id v29 = *(id *)(a1 + 64);
    id v30 = *(id *)(a1 + 40);
    [WeakRetained _migrateHomeMediaSettingsCloudZone:v9 migrationQueue:v10 completion:v27];
    id v11 = v3;
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 48);
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_5;
    v22[3] = &unk_1E6A0E400;
    objc_copyWeak(&v26, (id *)(a1 + 88));
    id v23 = *(id *)(a1 + 56);
    id v24 = *(id *)(a1 + 64);
    id v25 = *(id *)(a1 + 40);
    [WeakRetained _migrateHomeUsersCloudZone:v12 migrationQueue:v13 completion:v22];
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void *)(a1 + 48);
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    void v17[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_6;
    v17[3] = &unk_1E6A0E400;
    objc_copyWeak(&v21, (id *)(a1 + 88));
    id v18 = *(id *)(a1 + 56);
    id v19 = *(id *)(a1 + 64);
    id v20 = *(id *)(a1 + 40);
    [WeakRetained _migrateAppleMediaAccessoriesWithCloudZone:v14 migrationQueue:v15 completion:v17];
    [WeakRetained _migrateHomeAllObjectsCloudZone:*(void *)(a1 + 32) migrationGroup:*(void *)(a1 + 40) migrationQueue:*(void *)(a1 + 48) saveModels:*(void *)(a1 + 56) runModels:*(void *)(a1 + 64)];
    id v3 = v11;
    dispatch_group_notify(*(dispatch_group_t *)(a1 + 40), *(dispatch_queue_t *)(a1 + 48), *(dispatch_block_t *)(a1 + 80));

    objc_destroyWeak(&v21);
    objc_destroyWeak(&v26);

    objc_destroyWeak(&v31);
    objc_destroyWeak(&v36);

    objc_destroyWeak(v41);
  }
  else
  {
    uint64_t v16 = *(void *)(a1 + 72);
    if (v16) {
      (*(void (**)(uint64_t, void))(v16 + 16))(v16, 0);
    }
  }
}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_7(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v10 = a2;
  id v7 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v9 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    [*(id *)(a1 + 32) addObjectsFromArray:v10];
    [*(id *)(a1 + 40) addObjectsFromArray:v7];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_8(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v10 = a2;
  id v7 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v9 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    [*(id *)(a1 + 32) addObjectsFromArray:v10];
    [*(id *)(a1 + 40) addObjectsFromArray:v7];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_9(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v10 = a2;
  id v7 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v9 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    [*(id *)(a1 + 32) addObjectsFromArray:v10];
    [*(id *)(a1 + 40) addObjectsFromArray:v7];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_10(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v10 = a2;
  id v7 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v9 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    [*(id *)(a1 + 32) addObjectsFromArray:v10];
    [*(id *)(a1 + 40) addObjectsFromArray:v7];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_11(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v10 = a2;
  id v7 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v9 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    [*(id *)(a1 + 32) addObjectsFromArray:v10];
    [*(id *)(a1 + 40) addObjectsFromArray:v7];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_2_1899(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v10 = a2;
  id v7 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v9 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    [*(id *)(a1 + 32) addObjectsFromArray:v10];
    [*(id *)(a1 + 40) addObjectsFromArray:v7];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_3_1900(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v10 = a2;
  id v7 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v9 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    [*(id *)(a1 + 32) addObjectsFromArray:v10];
    [*(id *)(a1 + 40) addObjectsFromArray:v7];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_4_1901(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v10 = a2;
  id v7 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v9 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    [*(id *)(a1 + 32) addObjectsFromArray:v10];
    [*(id *)(a1 + 40) addObjectsFromArray:v7];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_5(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v10 = a2;
  id v7 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v9 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    [*(id *)(a1 + 32) addObjectsFromArray:v10];
    [*(id *)(a1 + 40) addObjectsFromArray:v7];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_6(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v10 = a2;
  id v7 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v9 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    [*(id *)(a1 + 32) addObjectsFromArray:v10];
    [*(id *)(a1 + 40) addObjectsFromArray:v7];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_1894(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v5 = WeakRetained;
  uint64_t v6 = *(void **)(a1 + 32);
  if (v6)
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_2;
    v10[3] = &unk_1E6A18528;
    objc_copyWeak(&v11, (id *)(a1 + 48));
    [v6 run:v10];
    objc_destroyWeak(&v11);
  }
  else
  {
    id v7 = [WeakRetained homeManager];
    uint64_t v8 = [v5 zoneID];
    [v7 uploadHomeToCloudZone:v8 withDelay:0.0];
  }
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, void))(v9 + 16))(v9, 0);
  }
}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_3(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v1 = [WeakRetained homeManager];
  id v2 = [WeakRetained zoneID];
  [v1 uploadHomeToCloudZone:v2 withDelay:0.0];
}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_2(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v1 = [WeakRetained homeManager];
  id v2 = [WeakRetained zoneID];
  [v1 uploadHomeToCloudZone:v2 withDelay:0.0];
}

- (void)fetchAllMigratedObjectsForCloudZone:(id)a3 completion:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  v40[0] = 0;
  v40[1] = v40;
  v40[2] = 0x3032000000;
  v40[3] = __Block_byref_object_copy__10691;
  v40[4] = __Block_byref_object_dispose__10692;
  id v41 = [MEMORY[0x1E4F1CA48] array];
  v38[0] = 0;
  v38[1] = v38;
  v38[2] = 0x3032000000;
  v38[3] = __Block_byref_object_copy__10691;
  v38[4] = __Block_byref_object_dispose__10692;
  id v39 = [MEMORY[0x1E4F1CA80] set];
  v36[0] = 0;
  v36[1] = v36;
  v36[2] = 0x3032000000;
  v36[3] = __Block_byref_object_copy__10691;
  v36[4] = __Block_byref_object_dispose__10692;
  id v37 = [MEMORY[0x1E4F1CA48] array];
  v34[0] = 0;
  v34[1] = v34;
  v34[2] = 0x3032000000;
  v34[3] = __Block_byref_object_copy__10691;
  void v34[4] = __Block_byref_object_dispose__10692;
  id v35 = 0;
  HMDispatchQueueNameString();
  id v8 = objc_claimAutoreleasedReturnValue();
  uint64_t v9 = (const char *)[v8 UTF8String];
  id v10 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v11 = dispatch_queue_create(v9, v10);

  uint64_t v12 = dispatch_group_create();
  dispatch_group_enter(v12);
  objc_initWeak(&location, self);
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  void v26[2] = __58__HMDHome_fetchAllMigratedObjectsForCloudZone_completion___block_invoke;
  v26[3] = &unk_1E6A074B8;
  objc_copyWeak(&v32, &location);
  id v28 = v34;
  uint64_t v13 = v12;
  id v27 = v13;
  id v29 = v40;
  id v30 = v38;
  id v31 = v36;
  [v6 fetchMigratedObjects:v26];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __58__HMDHome_fetchAllMigratedObjectsForCloudZone_completion___block_invoke_1884;
  block[3] = &unk_1E6A07508;
  id v21 = v36;
  id v22 = v40;
  id v23 = v34;
  void block[4] = self;
  id v18 = v6;
  dispatch_queue_t v19 = v11;
  id v20 = v7;
  uint64_t v14 = v11;
  id v15 = v6;
  id v16 = v7;
  objc_copyWeak(&v25, &location);
  id v24 = v38;
  dispatch_group_notify(v13, v14, block);
  objc_destroyWeak(&v25);

  objc_destroyWeak(&v32);
  objc_destroyWeak(&location);

  _Block_object_dispose(v34, 8);
  _Block_object_dispose(v36, 8);

  _Block_object_dispose(v38, 8);
  _Block_object_dispose(v40, 8);
}

void __58__HMDHome_fetchAllMigratedObjectsForCloudZone_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  id v8 = WeakRetained;
  if (v6 || !WeakRetained)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
  }
  else if ([v5 count])
  {
    uint64_t v9 = (void *)MEMORY[0x1D9452090]();
    id v42 = v8;
    id v10 = v8;
    dispatch_queue_t v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v51 = v12;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Found General Objects to Migrate", buf, 0xCu);
    }
    uint64_t v13 = [MEMORY[0x1E4F1CA48] array];
    uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8);
    id v15 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = v13;

    uint64_t v16 = [MEMORY[0x1E4F1CA80] set];
    uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8);
    id v18 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = v16;

    uint64_t v19 = [MEMORY[0x1E4F1CA48] array];
    uint64_t v20 = *(void *)(*(void *)(a1 + 64) + 8);
    id v21 = *(void **)(v20 + 40);
    *(void *)(v20 + 40) = v19;

    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    id v43 = v5;
    id obj = v5;
    uint64_t v22 = [obj countByEnumeratingWithState:&v45 objects:v49 count:16];
    if (v22)
    {
      uint64_t v23 = v22;
      uint64_t v24 = *(void *)v46;
      do
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          if (*(void *)v46 != v24) {
            objc_enumerationMutation(obj);
          }
          id v26 = *(id *)(*((void *)&v45 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v27 = v26;
          }
          else {
            id v27 = 0;
          }
          id v28 = v27;

          if (v28)
          {
            id v29 = [v28 uuid];
            id v30 = [v10 accessoryWithUUID:v29];

            if (!v30)
            {
              id v31 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
              id v32 = [v28 uuid];
              [v31 addObject:v32];
            }
          }
          id v33 = v26;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v34 = v33;
          }
          else {
            id v34 = 0;
          }
          id v35 = v34;

          if (v35)
          {
            id v36 = [v35 uuid];
            id v37 = [v10 accessoryWithUUID:v36];

            if (!v37)
            {
              id v38 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
              id v39 = [v35 uuid];
              [v38 addObject:v39];
            }
          }
          objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), "addObject:", v33, v42);
          id v40 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
          id v41 = [v33 uuid];
          [v40 addObject:v41];
        }
        uint64_t v23 = [obj countByEnumeratingWithState:&v45 objects:v49 count:16];
      }
      while (v23);
    }

    id v6 = 0;
    id v5 = v43;
    id v8 = v42;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __58__HMDHome_fetchAllMigratedObjectsForCloudZone_completion___block_invoke_1884(uint64_t a1)
{
  if ([*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) count])
  {
    id v2 = *(void **)(a1 + 32);
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __58__HMDHome_fetchAllMigratedObjectsForCloudZone_completion___block_invoke_2;
    v10[3] = &unk_1E6A074E0;
    objc_copyWeak(&v15, (id *)(a1 + 96));
    uint64_t v6 = *(void *)(a1 + 72);
    uint64_t v12 = *(void *)(a1 + 88);
    uint64_t v13 = v6;
    id v7 = *(id *)(a1 + 56);
    uint64_t v8 = *(void *)(a1 + 80);
    id v11 = v7;
    uint64_t v14 = v8;
    [v2 _migrateUnknownAccessoriesWithCloudZone:v3 accessoryUUIDs:v4 migrationQueue:v5 completion:v10];

    objc_destroyWeak(&v15);
  }
  else
  {
    uint64_t v9 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    v9();
  }
}

void __58__HMDHome_fetchAllMigratedObjectsForCloudZone_completion___block_invoke_2(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  id v7 = WeakRetained;
  if (!a3 && WeakRetained)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v8 = v5;
    uint64_t v9 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v19 != v11) {
            objc_enumerationMutation(v8);
          }
          uint64_t v13 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          uint64_t v14 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
          id v15 = objc_msgSend(v13, "uuid", (void)v18);
          LOBYTE(v14) = [v14 containsObject:v15];

          if ((v14 & 1) == 0)
          {
            [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addObject:v13];
            uint64_t v16 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
            uint64_t v17 = [v13 uuid];
            [v16 addObject:v17];
          }
        }
        uint64_t v10 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }
      while (v10);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

- (void)_migrateUnknownAccessoriesWithCloudZone:(id)a3 accessoryUUIDs:(id)a4 migrationQueue:(id)a5 completion:(id)a6
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v26 = a3;
  id v9 = a4;
  queue = a5;
  id v23 = a6;
  uint64_t v10 = [MEMORY[0x1E4F1CA48] array];
  HMDispatchQueueNameString();
  id v11 = objc_claimAutoreleasedReturnValue();
  uint64_t v12 = (const char *)[v11 UTF8String];
  uint64_t v13 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v14 = dispatch_queue_create(v12, v13);

  id v15 = dispatch_group_create();
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id obj = v9;
  uint64_t v16 = [obj countByEnumeratingWithState:&v34 objects:v38 count:16];
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = *(void *)v35;
    do
    {
      uint64_t v19 = 0;
      do
      {
        if (*(void *)v35 != v18) {
          objc_enumerationMutation(obj);
        }
        uint64_t v20 = *(void *)(*((void *)&v34 + 1) + 8 * v19);
        dispatch_group_enter(v15);
        v30[0] = MEMORY[0x1E4F143A8];
        v30[1] = 3221225472;
        void v30[2] = __92__HMDHome__migrateUnknownAccessoriesWithCloudZone_accessoryUUIDs_migrationQueue_completion___block_invoke;
        v30[3] = &unk_1E6A17DC8;
        id v31 = v14;
        id v32 = v10;
        id v33 = v15;
        [v26 allDescendentsCloudRecordsForParentID:v20 completionHandler:v30];

        ++v19;
      }
      while (v17 != v19);
      uint64_t v17 = [obj countByEnumeratingWithState:&v34 objects:v38 count:16];
    }
    while (v17);
  }

  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __92__HMDHome__migrateUnknownAccessoriesWithCloudZone_accessoryUUIDs_migrationQueue_completion___block_invoke_3;
  block[3] = &unk_1E6A19530;
  id v28 = v10;
  id v29 = v23;
  id v21 = v10;
  id v22 = v23;
  dispatch_group_notify(v15, queue, block);
}

void __92__HMDHome__migrateUnknownAccessoriesWithCloudZone_accessoryUUIDs_migrationQueue_completion___block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  uint64_t v6 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v5, "count"));
  if (!a3)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v7 = v5;
    uint64_t v8 = [v7 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v21;
      do
      {
        uint64_t v11 = 0;
        do
        {
          if (*(void *)v21 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = [*(id *)(*((void *)&v20 + 1) + 8 * v11) extractObjectChange];
          uint64_t v13 = v12;
          if (v12)
          {
            [v12 setObjectChangeType:1];
            [v6 addObject:v13];
          }

          ++v11;
        }
        while (v9 != v11);
        uint64_t v9 = [v7 countByEnumeratingWithState:&v20 objects:v24 count:16];
      }
      while (v9);
    }
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __92__HMDHome__migrateUnknownAccessoriesWithCloudZone_accessoryUUIDs_migrationQueue_completion___block_invoke_2;
  block[3] = &unk_1E6A19668;
  dispatch_queue_t v14 = *(NSObject **)(a1 + 32);
  id v17 = *(id *)(a1 + 40);
  id v18 = v6;
  id v19 = *(id *)(a1 + 48);
  id v15 = v6;
  dispatch_async(v14, block);
}

uint64_t __92__HMDHome__migrateUnknownAccessoriesWithCloudZone_accessoryUUIDs_migrationQueue_completion___block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void __92__HMDHome__migrateUnknownAccessoriesWithCloudZone_accessoryUUIDs_migrationQueue_completion___block_invoke_2(uint64_t a1)
{
  [*(id *)(a1 + 32) addObjectsFromArray:*(void *)(a1 + 40)];
  id v2 = *(NSObject **)(a1 + 48);
  dispatch_group_leave(v2);
}

- (void)_migrateHomeAllObjectsCloudZone:(id)a3 migrationGroup:(id)a4 migrationQueue:(id)a5 saveModels:(id)a6 runModels:(id)a7
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __94__HMDHome__migrateHomeAllObjectsCloudZone_migrationGroup_migrationQueue_saveModels_runModels___block_invoke;
  aBlock[3] = &unk_1E6A07468;
  id v64 = v14;
  id v78 = v64;
  objc_copyWeak(&v82, &location);
  id v63 = v15;
  id v79 = v63;
  id v65 = v16;
  id v80 = v65;
  id v17 = v13;
  id v81 = v17;
  id v18 = _Block_copy(aBlock);
  v72[0] = MEMORY[0x1E4F143A8];
  v72[1] = 3221225472;
  v72[2] = __94__HMDHome__migrateHomeAllObjectsCloudZone_migrationGroup_migrationQueue_saveModels_runModels___block_invoke_3;
  void v72[3] = &unk_1E6A07490;
  dispatch_group_t group = (dispatch_group_t)v17;
  dispatch_group_t v73 = group;
  id v74 = self;
  id v62 = v12;
  id v75 = v62;
  id v67 = v18;
  id v76 = v67;
  id v68 = (void (**)(void *, void *))_Block_copy(v72);
  id v19 = [(HMDHome *)self uuid];
  long long v20 = +[HMDHomeNetworkRouterManagingDeviceSettingsModel defaultModelForHomeUUID:v19];
  v68[2](v68, v20);

  long long v21 = [(HMDHome *)self uuid];
  id v69 = +[HMDHomeNetworkRouterSettingsModel defaultModelForHomeUUID:v21];

  long long v22 = [(HMDHome *)self activeNetworkRouterUUID];
  long long v23 = [v22 UUIDString];
  [v69 setActiveNetworkRouterAccessoryUUID:v23];

  uint64_t v24 = [(HMDHome *)self minimumNetworkRouterSupportHomeKitVersion];
  uint64_t v25 = [v24 versionString];
  [v69 setMinimumNetworkRouterSupportHomeKitVersion:v25];

  id v26 = [(HMDHome *)self minHomeKitVersionForAccessoryNetworkProtectionChange];
  id v27 = [v26 versionString];
  [v69 setMinHomeKitVersionForAccessoryNetworkProtectionChange:v27];

  v68[2](v68, v69);
  id v28 = (void *)MEMORY[0x1E4F1CA48];
  id v29 = [(HMDHome *)self accessories];
  id v30 = objc_msgSend(v28, "arrayWithCapacity:", objc_msgSend(v29, "count"));

  id v31 = self;
  id v70 = v30;
  id v71 = v31;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  id v32 = [(HMDHome *)v31 accessories];
  uint64_t v33 = [v32 countByEnumeratingWithState:&v84 objects:v88 count:16];
  if (v33)
  {
    uint64_t v34 = *(void *)v85;
    do
    {
      uint64_t v35 = 0;
      do
      {
        if (*(void *)v85 != v34) {
          objc_enumerationMutation(v32);
        }
        id v36 = *(id *)(*((void *)&v84 + 1) + 8 * v35);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          long long v37 = v36;
        }
        else {
          long long v37 = 0;
        }
        id v38 = v37;

        if (v38)
        {
          id v39 = objc_alloc((Class)[(id)objc_opt_class() transactionClass]);
          id v40 = [v38 uuid];
          id v41 = [(HMDHome *)v71 uuid];
          id v42 = (void *)[v39 initWithObjectChangeType:2 uuid:v40 parentUUID:v41];

          id v43 = [v38 initialManufacturer];
          if (v43)
          {
            int v44 = 0;
            goto LABEL_14;
          }
          long long v45 = [v38 manufacturer];
          BOOL v46 = v45 == 0;

          if (v46)
          {
            int v44 = 0;
          }
          else
          {
            id v43 = [v38 manufacturer];
            [v42 setInitialManufacturer:v43];
            int v44 = 1;
LABEL_14:
          }
          long long v47 = [v38 initialModel];
          if (v47)
          {
LABEL_18:
          }
          else
          {
            long long v48 = [v38 model];
            BOOL v49 = v48 == 0;

            if (!v49)
            {
              long long v47 = [v38 model];
              [v42 setInitialModel:v47];
              int v44 = 1;
              goto LABEL_18;
            }
          }
          id v50 = [v38 initialCategoryIdentifier];
          if (v50)
          {
LABEL_20:
          }
          else
          {
            id v53 = [v38 category];
            BOOL v54 = v53 == 0;

            if (!v54)
            {
              id v55 = (void *)MEMORY[0x1E4F2E520];
              id v56 = [v38 category];
              id v50 = [v55 categoryIdentifierForCategory:v56];

              if (v50)
              {
                long long v57 = [NSNumber numberWithUnsignedInteger:1];
                char v58 = [v50 isEqualToNumber:v57];

                if ((v58 & 1) == 0)
                {
                  [v42 setInitialCategoryIdentifier:v50];
                  int v44 = 1;
                }
              }
              goto LABEL_20;
            }
          }
          id v51 = [v38 initialServiceTypeUUIDs];
          BOOL v52 = v51 == 0;

          if (v52)
          {
            id v59 = [v38 serviceTypeUUIDs];
            [v42 setInitialServiceTypeUUIDs:v59];
          }
          else if (!v44)
          {
            goto LABEL_30;
          }
          [v70 addObject:v42];
LABEL_30:
        }
        ++v35;
      }
      while (v33 != v35);
      uint64_t v60 = [v32 countByEnumeratingWithState:&v84 objects:v88 count:16];
      uint64_t v33 = v60;
    }
    while (v60);
  }

  if ([v70 count])
  {
    dispatch_group_enter(group);
    id v61 = [MEMORY[0x1E4F1C978] array];
    (*((void (**)(id, void *, id, void))v67 + 2))(v67, v61, v70, 0);
  }
  objc_destroyWeak(&v82);

  objc_destroyWeak(&location);
}

void __94__HMDHome__migrateHomeAllObjectsCloudZone_migrationGroup_migrationQueue_saveModels_runModels___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __94__HMDHome__migrateHomeAllObjectsCloudZone_migrationGroup_migrationQueue_saveModels_runModels___block_invoke_2;
  block[3] = &unk_1E6A07440;
  objc_copyWeak(&v21, (id *)(a1 + 64));
  id v15 = v9;
  id v16 = *(id *)(a1 + 40);
  id v17 = v7;
  id v18 = *(id *)(a1 + 48);
  id v19 = v8;
  id v20 = *(id *)(a1 + 56);
  id v11 = v8;
  id v12 = v7;
  id v13 = v9;
  dispatch_async(v10, block);

  objc_destroyWeak(&v21);
}

void __94__HMDHome__migrateHomeAllObjectsCloudZone_migrationGroup_migrationQueue_saveModels_runModels___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v3 = *(NSObject **)(a1 + 32);
  id v4 = a2;
  dispatch_group_enter(v3);
  [*(id *)(a1 + 40) _migrateHomeObjectCloudZone:*(void *)(a1 + 48) defaultModel:v4 completion:*(void *)(a1 + 56)];
}

void __94__HMDHome__migrateHomeAllObjectsCloudZone_migrationGroup_migrationQueue_saveModels_runModels___block_invoke_2(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  if (WeakRetained && !*(void *)(a1 + 32))
  {
    [*(id *)(a1 + 40) addObjectsFromArray:*(void *)(a1 + 48)];
    [*(id *)(a1 + 56) addObjectsFromArray:*(void *)(a1 + 64)];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
}

- (void)_migrateHomeObjectCloudZone:(id)a3 defaultModel:(id)a4 completion:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = [MEMORY[0x1E4F1CA48] array];
  id v12 = [MEMORY[0x1E4F1CA48] array];
  objc_initWeak(&location, self);
  id v13 = [v9 uuid];
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  v18[2] = __63__HMDHome__migrateHomeObjectCloudZone_defaultModel_completion___block_invoke;
  v18[3] = &unk_1E6A07418;
  objc_copyWeak(&v23, &location);
  id v14 = v10;
  id v22 = v14;
  id v15 = v11;
  id v19 = v15;
  id v16 = v12;
  id v20 = v16;
  id v17 = v9;
  id v21 = v17;
  [v8 cloudRecordWithObjectID:v13 completionHandler:v18];

  objc_destroyWeak(&v23);
  objc_destroyWeak(&location);
}

void __63__HMDHome__migrateHomeObjectCloudZone_defaultModel_completion___block_invoke(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 8);
  if (WeakRetained && !v5)
  {
    id v8 = [a1[6] uuid];
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __63__HMDHome__migrateHomeObjectCloudZone_defaultModel_completion___block_invoke_2;
    void v9[3] = &unk_1E6A14B98;
    objc_copyWeak(&v14, a1 + 8);
    id v10 = a1[4];
    id v11 = a1[6];
    id v13 = a1[7];
    id v12 = a1[5];
    [WeakRetained cleanChangesIfNoAddChangeObjectID:v8 completion:v9];

    objc_destroyWeak(&v14);
  }
  else
  {
    (*((void (**)(void))a1[7] + 2))();
  }
}

void __63__HMDHome__migrateHomeObjectCloudZone_defaultModel_completion___block_invoke_2(uint64_t a1, char a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained && (a2 & 1) == 0) {
    [*(id *)(a1 + 32) addObject:*(void *)(a1 + 40)];
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

- (void)_migrateAppleMediaAccessoriesWithCloudZone:(id)a3 migrationQueue:(id)a4 completion:(id)a5
{
  id v8 = a3;
  id v9 = a5;
  id v10 = a4;
  id v11 = [(HMDHome *)self currentAccessory];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v12 = v11;
  }
  else {
    id v12 = 0;
  }
  id v13 = v12;

  if (v13)
  {
    [v13 migrateWithCloudZone:v8 migrationQueue:v10 completion:v9];
  }
  else
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __80__HMDHome__migrateAppleMediaAccessoriesWithCloudZone_migrationQueue_completion___block_invoke;
    block[3] = &unk_1E6A186E0;
    id v15 = v9;
    dispatch_async(v10, block);

    id v10 = v15;
  }
}

uint64_t __80__HMDHome__migrateAppleMediaAccessoriesWithCloudZone_migrationQueue_completion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

- (void)_migrateHomeUsersCloudZone:(id)a3 migrationQueue:(id)a4 completion:(id)a5
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v22 = a3;
  queue = a4;
  id v20 = a5;
  id v8 = [MEMORY[0x1E4F1CA48] array];
  id v9 = [MEMORY[0x1E4F1CA48] array];
  id v10 = dispatch_group_create();
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v11 = [(HMDHome *)self users];
  id v12 = (void *)[v11 copy];

  id obj = v12;
  uint64_t v13 = [v12 countByEnumeratingWithState:&v34 objects:v38 count:16];
  if (v13)
  {
    uint64_t v14 = *(void *)v35;
    do
    {
      uint64_t v15 = 0;
      do
      {
        if (*(void *)v35 != v14) {
          objc_enumerationMutation(obj);
        }
        id v16 = *(void **)(*((void *)&v34 + 1) + 8 * v15);
        dispatch_group_enter(v10);
        objc_initWeak(&location, self);
        v28[0] = MEMORY[0x1E4F143A8];
        v28[1] = 3221225472;
        v28[2] = __64__HMDHome__migrateHomeUsersCloudZone_migrationQueue_completion___block_invoke;
        v28[3] = &unk_1E6A0E400;
        objc_copyWeak(&v32, &location);
        id v29 = v8;
        id v30 = v9;
        id v31 = v10;
        [v16 migrateCloudZone:v22 migrationQueue:queue completion:v28];

        objc_destroyWeak(&v32);
        objc_destroyWeak(&location);
        ++v15;
      }
      while (v13 != v15);
      uint64_t v13 = [obj countByEnumeratingWithState:&v34 objects:v38 count:16];
    }
    while (v13);
  }

  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __64__HMDHome__migrateHomeUsersCloudZone_migrationQueue_completion___block_invoke_2;
  block[3] = &unk_1E6A193D0;
  id v26 = v9;
  id v27 = v20;
  id v25 = v8;
  id v17 = v9;
  id v18 = v8;
  id v19 = v20;
  dispatch_group_notify(v10, queue, block);
}

void __64__HMDHome__migrateHomeUsersCloudZone_migrationQueue_completion___block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v10 = a2;
  id v7 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v9 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    [*(id *)(a1 + 32) addObjectsFromArray:v10];
    [*(id *)(a1 + 40) addObjectsFromArray:v7];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

uint64_t __64__HMDHome__migrateHomeUsersCloudZone_migrationQueue_completion___block_invoke_2(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

- (void)_migrateHomeMediaSettingsCloudZone:(id)a3 migrationQueue:(id)a4 completion:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = [MEMORY[0x1E4F1CA48] array];
  id v12 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v13 = [(HMDHome *)self uuid];
  uint64_t v14 = +[HMDHomeMediaSettingsModel modelIDForHomeUUID:v13];

  objc_initWeak(&location, self);
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  v20[2] = __72__HMDHome__migrateHomeMediaSettingsCloudZone_migrationQueue_completion___block_invoke;
  v20[3] = &unk_1E6A073F0;
  objc_copyWeak(&v26, &location);
  id v15 = v9;
  id v21 = v15;
  id v16 = v10;
  id v25 = v16;
  id v17 = v11;
  id v22 = v17;
  id v18 = v12;
  id v23 = v18;
  id v19 = v14;
  id v24 = v19;
  [v8 cloudRecordWithObjectID:v19 completionHandler:v20];

  objc_destroyWeak(&v26);
  objc_destroyWeak(&location);
}

void __72__HMDHome__migrateHomeMediaSettingsCloudZone_migrationQueue_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (!WeakRetained)
  {
    id v11 = *(NSObject **)(a1 + 32);
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __72__HMDHome__migrateHomeMediaSettingsCloudZone_migrationQueue_completion___block_invoke_2;
    v23[3] = &unk_1E6A193D0;
    id v26 = *(id *)(a1 + 64);
    id v24 = *(id *)(a1 + 40);
    id v25 = *(id *)(a1 + 48);
    dispatch_async(v11, v23);

    id v10 = v26;
    goto LABEL_6;
  }
  if (!v5)
  {
    uint64_t v12 = *(void *)(a1 + 56);
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    void v17[2] = __72__HMDHome__migrateHomeMediaSettingsCloudZone_migrationQueue_completion___block_invoke_3;
    v17[3] = &unk_1E6A14B98;
    objc_copyWeak(&v22, (id *)(a1 + 72));
    id v18 = *(id *)(a1 + 48);
    id v21 = *(id *)(a1 + 64);
    id v19 = *(id *)(a1 + 32);
    id v20 = *(id *)(a1 + 40);
    [WeakRetained cleanChangesIfNoAddChangeObjectID:v12 completion:v17];

    objc_destroyWeak(&v22);
    goto LABEL_8;
  }
  id v8 = *(void **)(a1 + 64);
  if (v8)
  {
    id v9 = *(NSObject **)(a1 + 32);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __72__HMDHome__migrateHomeMediaSettingsCloudZone_migrationQueue_completion___block_invoke_2_1875;
    block[3] = &unk_1E6A193D0;
    id v16 = v8;
    id v14 = *(id *)(a1 + 40);
    id v15 = *(id *)(a1 + 48);
    dispatch_async(v9, block);

    id v10 = v16;
LABEL_6:
  }
LABEL_8:
}

uint64_t __72__HMDHome__migrateHomeMediaSettingsCloudZone_migrationQueue_completion___block_invoke_2(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

void __72__HMDHome__migrateHomeMediaSettingsCloudZone_migrationQueue_completion___block_invoke_3(uint64_t a1, char a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained && (a2 & 1) == 0)
  {
    id v7 = (void *)MEMORY[0x1D9452090]();
    id v8 = WeakRetained;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v20 = v10;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Creating home media settings and adding transaction to push to cloud", buf, 0xCu);
    }
    id v11 = [v8 uuid];
    uint64_t v12 = +[HMDHomeMediaSettingsModel defaultModelForHomeUUID:v11];

    [*(id *)(a1 + 32) addObject:v12];
  }
  uint64_t v13 = *(void **)(a1 + 56);
  if (v13)
  {
    id v14 = *(NSObject **)(a1 + 40);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __72__HMDHome__migrateHomeMediaSettingsCloudZone_migrationQueue_completion___block_invoke_1874;
    block[3] = &unk_1E6A193D0;
    id v18 = v13;
    id v16 = *(id *)(a1 + 48);
    id v17 = *(id *)(a1 + 32);
    dispatch_async(v14, block);
  }
}

uint64_t __72__HMDHome__migrateHomeMediaSettingsCloudZone_migrationQueue_completion___block_invoke_2_1875(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

uint64_t __72__HMDHome__migrateHomeMediaSettingsCloudZone_migrationQueue_completion___block_invoke_1874(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

- (void)_migrateHomeSettingsCloudZone:(id)a3 migrationQueue:(id)a4 completion:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v12 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v13 = [(HMDHome *)self uuid];
  id v14 = +[HMDHomeSettingsModel modelIDForHomeUUID:v13];

  objc_initWeak(&location, self);
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  v20[2] = __67__HMDHome__migrateHomeSettingsCloudZone_migrationQueue_completion___block_invoke;
  v20[3] = &unk_1E6A073F0;
  objc_copyWeak(&v26, &location);
  id v15 = v9;
  id v21 = v15;
  id v16 = v10;
  id v25 = v16;
  id v17 = v11;
  id v22 = v17;
  id v18 = v12;
  id v23 = v18;
  id v19 = v14;
  id v24 = v19;
  [v8 cloudRecordWithObjectID:v19 completionHandler:v20];

  objc_destroyWeak(&v26);
  objc_destroyWeak(&location);
}

void __67__HMDHome__migrateHomeSettingsCloudZone_migrationQueue_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (!WeakRetained)
  {
    id v11 = *(NSObject **)(a1 + 32);
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __67__HMDHome__migrateHomeSettingsCloudZone_migrationQueue_completion___block_invoke_2;
    v23[3] = &unk_1E6A193D0;
    id v26 = *(id *)(a1 + 64);
    id v24 = *(id *)(a1 + 40);
    id v25 = *(id *)(a1 + 48);
    dispatch_async(v11, v23);

    id v10 = v26;
    goto LABEL_6;
  }
  if (!v5)
  {
    uint64_t v12 = *(void *)(a1 + 56);
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    void v17[2] = __67__HMDHome__migrateHomeSettingsCloudZone_migrationQueue_completion___block_invoke_3;
    v17[3] = &unk_1E6A14B98;
    objc_copyWeak(&v22, (id *)(a1 + 72));
    id v18 = *(id *)(a1 + 48);
    id v21 = *(id *)(a1 + 64);
    id v19 = *(id *)(a1 + 32);
    id v20 = *(id *)(a1 + 40);
    [WeakRetained cleanChangesIfNoAddChangeObjectID:v12 completion:v17];

    objc_destroyWeak(&v22);
    goto LABEL_8;
  }
  id v8 = *(void **)(a1 + 64);
  if (v8)
  {
    id v9 = *(NSObject **)(a1 + 32);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __67__HMDHome__migrateHomeSettingsCloudZone_migrationQueue_completion___block_invoke_2_1873;
    block[3] = &unk_1E6A193D0;
    id v16 = v8;
    id v14 = *(id *)(a1 + 40);
    id v15 = *(id *)(a1 + 48);
    dispatch_async(v9, block);

    id v10 = v16;
LABEL_6:
  }
LABEL_8:
}

uint64_t __67__HMDHome__migrateHomeSettingsCloudZone_migrationQueue_completion___block_invoke_2(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

void __67__HMDHome__migrateHomeSettingsCloudZone_migrationQueue_completion___block_invoke_3(uint64_t a1, char a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained && (a2 & 1) == 0)
  {
    id v7 = (void *)MEMORY[0x1D9452090]();
    id v8 = WeakRetained;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v20 = v10;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Creating home settings and adding transaction to push to cloud", buf, 0xCu);
    }
    id v11 = [v8 uuid];
    uint64_t v12 = +[HMDHomeSettingsModel defaultModelForHomeUUID:v11];

    [*(id *)(a1 + 32) addObject:v12];
  }
  uint64_t v13 = *(void **)(a1 + 56);
  if (v13)
  {
    id v14 = *(NSObject **)(a1 + 40);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __67__HMDHome__migrateHomeSettingsCloudZone_migrationQueue_completion___block_invoke_1872;
    block[3] = &unk_1E6A193D0;
    id v18 = v13;
    id v16 = *(id *)(a1 + 48);
    id v17 = *(id *)(a1 + 32);
    dispatch_async(v14, block);
  }
}

uint64_t __67__HMDHome__migrateHomeSettingsCloudZone_migrationQueue_completion___block_invoke_2_1873(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

uint64_t __67__HMDHome__migrateHomeSettingsCloudZone_migrationQueue_completion___block_invoke_1872(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

- (void)_migrateResidentDevicesCloudZone:(id)a3 migrationQueue:(id)a4 completion:(id)a5
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v22 = a3;
  id v8 = a4;
  id v9 = a5;
  id v10 = [MEMORY[0x1E4F1CA48] array];
  id v11 = [MEMORY[0x1E4F1CA48] array];
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v12 = [(HMDHome *)self residentDeviceManager];
  uint64_t v13 = [v12 residentDevices];

  uint64_t v14 = [v13 countByEnumeratingWithState:&v36 objects:v40 count:16];
  if (v14)
  {
    uint64_t v15 = *(void *)v37;
LABEL_3:
    uint64_t v16 = 0;
    while (1)
    {
      if (*(void *)v37 != v15) {
        objc_enumerationMutation(v13);
      }
      id v17 = *(void **)(*((void *)&v36 + 1) + 8 * v16);
      if (objc_msgSend(v17, "isCurrentDevice", v22)) {
        break;
      }
      if (v14 == ++v16)
      {
        uint64_t v14 = [v13 countByEnumeratingWithState:&v36 objects:v40 count:16];
        if (v14) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
    id v18 = v17;

    if (!v18) {
      goto LABEL_12;
    }
    id v19 = [v18 identifier];
    objc_initWeak(&location, self);
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __70__HMDHome__migrateResidentDevicesCloudZone_migrationQueue_completion___block_invoke_2;
    v23[3] = &unk_1E6A073C8;
    objc_copyWeak(&v30, &location);
    id v24 = v8;
    id v29 = v9;
    id v25 = v10;
    id v26 = v11;
    id v20 = v19;
    id v27 = v20;
    id v21 = v18;
    id v28 = v21;
    [v22 cloudRecordWithObjectID:v20 completionHandler:v23];

    objc_destroyWeak(&v30);
    objc_destroyWeak(&location);

    goto LABEL_14;
  }
LABEL_9:

LABEL_12:
  if (v9)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __70__HMDHome__migrateResidentDevicesCloudZone_migrationQueue_completion___block_invoke;
    block[3] = &unk_1E6A193D0;
    id v35 = v9;
    id v33 = v10;
    id v34 = v11;
    dispatch_async(v8, block);

    id v21 = v35;
LABEL_14:
  }
}

uint64_t __70__HMDHome__migrateResidentDevicesCloudZone_migrationQueue_completion___block_invoke(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

void __70__HMDHome__migrateResidentDevicesCloudZone_migrationQueue_completion___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  if (!WeakRetained)
  {
    id v11 = *(NSObject **)(a1 + 32);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __70__HMDHome__migrateResidentDevicesCloudZone_migrationQueue_completion___block_invoke_3;
    block[3] = &unk_1E6A193D0;
    id v27 = *(id *)(a1 + 72);
    id v25 = *(id *)(a1 + 40);
    id v26 = *(id *)(a1 + 48);
    dispatch_async(v11, block);

    id v10 = v27;
    goto LABEL_6;
  }
  if (!v5)
  {
    uint64_t v12 = *(void *)(a1 + 56);
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    void v17[2] = __70__HMDHome__migrateResidentDevicesCloudZone_migrationQueue_completion___block_invoke_4;
    v17[3] = &unk_1E6A073A0;
    objc_copyWeak(&v23, (id *)(a1 + 80));
    id v18 = *(id *)(a1 + 64);
    id v19 = *(id *)(a1 + 40);
    id v22 = *(id *)(a1 + 72);
    id v20 = *(id *)(a1 + 32);
    id v21 = *(id *)(a1 + 48);
    [WeakRetained cleanChangesIfNoAddChangeObjectID:v12 completion:v17];

    objc_destroyWeak(&v23);
    goto LABEL_8;
  }
  id v8 = *(void **)(a1 + 72);
  if (v8)
  {
    id v9 = *(NSObject **)(a1 + 32);
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    void v13[2] = __70__HMDHome__migrateResidentDevicesCloudZone_migrationQueue_completion___block_invoke_2_1870;
    v13[3] = &unk_1E6A193D0;
    id v16 = v8;
    id v14 = *(id *)(a1 + 40);
    id v15 = *(id *)(a1 + 48);
    dispatch_async(v9, v13);

    id v10 = v16;
LABEL_6:
  }
LABEL_8:
}

uint64_t __70__HMDHome__migrateResidentDevicesCloudZone_migrationQueue_completion___block_invoke_3(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

void __70__HMDHome__migrateResidentDevicesCloudZone_migrationQueue_completion___block_invoke_4(uint64_t a1, char a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (WeakRetained && (a2 & 1) == 0)
  {
    id v7 = (void *)MEMORY[0x1D9452090]();
    id v8 = WeakRetained;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v19 = v10;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Creating resident device and adding transaction to push to cloud", buf, 0xCu);
    }
    id v11 = [*(id *)(a1 + 32) modelObjectWithChangeType:1 version:4];
    [*(id *)(a1 + 40) addObject:v11];
  }
  uint64_t v12 = *(void **)(a1 + 64);
  if (v12)
  {
    uint64_t v13 = *(NSObject **)(a1 + 48);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __70__HMDHome__migrateResidentDevicesCloudZone_migrationQueue_completion___block_invoke_1869;
    block[3] = &unk_1E6A193D0;
    id v17 = v12;
    id v15 = *(id *)(a1 + 40);
    id v16 = *(id *)(a1 + 56);
    dispatch_async(v13, block);
  }
}

uint64_t __70__HMDHome__migrateResidentDevicesCloudZone_migrationQueue_completion___block_invoke_2_1870(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

uint64_t __70__HMDHome__migrateResidentDevicesCloudZone_migrationQueue_completion___block_invoke_1869(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

- (void)cleanChangesIfNoAddChangeObjectID:(id)a3 completion:(id)a4
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  if (v6)
  {
    *(void *)&long long v44 = 0;
    *((void *)&v44 + 1) = &v44;
    uint64_t v45 = 0x2020000000;
    char v46 = 0;
    id v8 = [MEMORY[0x1E4F1CA80] set];
    objc_initWeak(&location, self);
    id v9 = [HMDBackingStoreLogFetchOperation alloc];
    v34[0] = MEMORY[0x1E4F143A8];
    v34[1] = 3221225472;
    v34[2] = __56__HMDHome_cleanChangesIfNoAddChangeObjectID_completion___block_invoke;
    v34[3] = &unk_1E6A07378;
    id v10 = v6;
    id v35 = v10;
    id v11 = v8;
    long long v37 = self;
    long long v38 = &v44;
    id v36 = v11;
    uint64_t v12 = [(HMDBackingStoreLogFetchOperation *)v9 initWithNeedsPushTo:2 result:v34];
    uint64_t v25 = MEMORY[0x1E4F143A8];
    uint64_t v26 = 3221225472;
    id v27 = __56__HMDHome_cleanChangesIfNoAddChangeObjectID_completion___block_invoke_1868;
    id v28 = &unk_1E6A16C48;
    objc_copyWeak(&v33, &location);
    id v32 = &v44;
    id v13 = v11;
    id v29 = v13;
    id v14 = v10;
    id v30 = v14;
    id v31 = v7;
    id v15 = (void *)MEMORY[0x1D9452090]([(HMDBackingStoreOperation *)v12 setResultBlock:&v25]);
    id v16 = self;
    HMFGetOSLogHandle();
    id v17 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      id v18 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v41 = v18;
      __int16 v42 = 2112;
      id v43 = v14;
      _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_DEBUG, "%{public}@Cleaning of objects for %@ from datastore started", buf, 0x16u);
    }
    id v19 = [(HMDHome *)v16 backingStore];
    [v19 submit:v12];

    objc_destroyWeak(&v33);
    objc_destroyWeak(&location);

    _Block_object_dispose(&v44, 8);
  }
  else
  {
    uint64_t v20 = (void *)MEMORY[0x1D9452090]();
    id v21 = self;
    id v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      id v23 = HMFGetLogIdentifier();
      LODWORD(v44) = 138543362;
      *(void *)((char *)&v44 + 4) = v23;
      _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_ERROR, "%{public}@ObjectID must be defined", (uint8_t *)&v44, 0xCu);
    }
    id v24 = [MEMORY[0x1E4F28C58] hmErrorWithCode:20];
    (*((void (**)(id, void, void *))v7 + 2))(v7, 0, v24);
  }
}

uint64_t __56__HMDHome_cleanChangesIfNoAddChangeObjectID_completion___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v10 = v7;
  uint64_t v11 = [v10 countByEnumeratingWithState:&v28 objects:v36 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    id v26 = v9;
    id v27 = v8;
    uint64_t v13 = *(void *)v29;
    while (2)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v29 != v13) {
          objc_enumerationMutation(v10);
        }
        id v15 = *(void **)(*((void *)&v28 + 1) + 8 * i);
        id v16 = objc_msgSend(v15, "uuid", v26, v27);
        int v17 = [v16 isEqual:*(void *)(a1 + 32)];

        if (v17)
        {
          if ([v15 objectChangeType] == 1 && !objc_msgSend(*(id *)(a1 + 40), "count"))
          {
            uint64_t v24 = 0;
            *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
            goto LABEL_16;
          }
          id v18 = (void *)MEMORY[0x1D9452090]();
          id v19 = *(id *)(a1 + 48);
          uint64_t v20 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          {
            id v21 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            id v33 = v21;
            __int16 v34 = 2112;
            id v35 = v15;
            _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_DEBUG, "%{public}@Removing object change from homes transaction store %@", buf, 0x16u);
          }
          id v22 = *(void **)(a1 + 40);
          id v23 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v15, "bsoLogRowID"));
          [v22 addObject:v23];
        }
      }
      uint64_t v12 = [v10 countByEnumeratingWithState:&v28 objects:v36 count:16];
      if (v12) {
        continue;
      }
      break;
    }
    uint64_t v24 = 1;
LABEL_16:
    id v9 = v26;
    id v8 = v27;
  }
  else
  {
    uint64_t v24 = 1;
  }

  return v24;
}

void __56__HMDHome_cleanChangesIfNoAddChangeObjectID_completion___block_invoke_1868(uint64_t a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained
    && !*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)
    && [*(id *)(a1 + 32) count])
  {
    id v6 = [HMDBackingStoreLogUpdateOperation alloc];
    id v7 = [*(id *)(a1 + 32) allObjects];
    id v8 = [(HMDBackingStoreLogUpdateOperation *)v6 initWithRowIDs:v7 successfullyPushedTo:3];

    uint64_t v17 = MEMORY[0x1E4F143A8];
    uint64_t v18 = 3221225472;
    id v19 = __56__HMDHome_cleanChangesIfNoAddChangeObjectID_completion___block_invoke_2;
    uint64_t v20 = &unk_1E6A16C20;
    objc_copyWeak(&v24, (id *)(a1 + 64));
    id v21 = *(id *)(a1 + 40);
    id v9 = *(id *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 56);
    id v22 = v9;
    uint64_t v23 = v10;
    uint64_t v11 = (void *)MEMORY[0x1D9452090]([(HMDBackingStoreOperation *)v8 setResultBlock:&v17]);
    id v12 = WeakRetained;
    HMFGetOSLogHandle();
    uint64_t v13 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      id v14 = HMFGetLogIdentifier();
      uint64_t v15 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      id v26 = v14;
      __int16 v27 = 2112;
      uint64_t v28 = v15;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_DEBUG, "%{public}@Scheduling cleanup of objects for %@ in home in datastore", buf, 0x16u);
    }
    id v16 = objc_msgSend(v12, "backingStore", v17, v18, v19, v20);
    [v16 submit:v8];

    objc_destroyWeak(&v24);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 48);
    if (v5) {
      (*(void (**)(uint64_t, void, id))(v5 + 16))(v5, *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24), v3);
    }
  }
}

void __56__HMDHome_cleanChangesIfNoAddChangeObjectID_completion___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = WeakRetained;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    id v8 = HMFGetLogIdentifier();
    uint64_t v9 = *(void *)(a1 + 32);
    int v11 = 138543618;
    id v12 = v8;
    __int16 v13 = 2112;
    uint64_t v14 = v9;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Cleaned objects for %@ in home in datastore", (uint8_t *)&v11, 0x16u);
  }
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(uint64_t, void, id))(v10 + 16))(v10, *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), v3);
  }
}

- (void)dropAllChangesWithObjectID:(id)a3
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = v4;
  if (v4)
  {
    id v11 = v4;
    id v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v11 count:1];
    [(HMDHome *)self dropAllChangesWithArrayOfObjectIDs:v6];
  }
  else
  {
    id v7 = (void *)MEMORY[0x1D9452090]();
    id v8 = self;
    uint64_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      __int16 v13 = v10;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_ERROR, "%{public}@ObjectID must be defined", buf, 0xCu);
    }
  }
}

- (void)dropAllChangesWithArrayOfObjectIDs:(id)a3
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [MEMORY[0x1E4F1CA80] set];
  objc_initWeak(&location, self);
  id v6 = [HMDBackingStoreLogFetchOperation alloc];
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  v21[2] = __46__HMDHome_dropAllChangesWithArrayOfObjectIDs___block_invoke;
  v21[3] = &unk_1E6A07350;
  id v7 = v4;
  id v22 = v7;
  uint64_t v23 = self;
  id v8 = v5;
  id v24 = v8;
  uint64_t v9 = [(HMDBackingStoreLogFetchOperation *)v6 initWithNeedsPushTo:2 result:v21];
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  void v17[2] = __46__HMDHome_dropAllChangesWithArrayOfObjectIDs___block_invoke_1866;
  v17[3] = &unk_1E6A15888;
  objc_copyWeak(&v20, &location);
  id v10 = v8;
  id v18 = v10;
  id v11 = v7;
  id v19 = v11;
  id v12 = (void *)MEMORY[0x1D9452090]([(HMDBackingStoreOperation *)v9 setResultBlock:v17]);
  __int16 v13 = self;
  HMFGetOSLogHandle();
  uint64_t v14 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    uint64_t v15 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    __int16 v27 = v15;
    __int16 v28 = 2112;
    id v29 = v11;
    _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Dropping of changes datastore started for %@", buf, 0x16u);
  }
  id v16 = [(HMDHome *)v13 backingStore];
  [v16 submit:v9];

  objc_destroyWeak(&v20);
  objc_destroyWeak(&location);
}

uint64_t __46__HMDHome_dropAllChangesWithArrayOfObjectIDs___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v24 = a3;
  id v23 = a4;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v8 = v7;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v25 objects:v33 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v26 != v11) {
          objc_enumerationMutation(v8);
        }
        __int16 v13 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        uint64_t v14 = *(void **)(a1 + 32);
        uint64_t v15 = objc_msgSend(v13, "uuid", v23, v24);
        LODWORD(v14) = [v14 containsObject:v15];

        if (v14)
        {
          id v16 = (void *)MEMORY[0x1D9452090]();
          id v17 = *(id *)(a1 + 40);
          id v18 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            id v19 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            uint64_t v30 = v19;
            __int16 v31 = 2112;
            id v32 = v13;
            _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@Removing object change from homes transaction store %@", buf, 0x16u);
          }
          id v20 = *(void **)(a1 + 48);
          id v21 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v13, "bsoLogRowID"));
          [v20 addObject:v21];
        }
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v25 objects:v33 count:16];
    }
    while (v10);
  }

  return 1;
}

void __46__HMDHome_dropAllChangesWithArrayOfObjectIDs___block_invoke_1866(id *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained && [a1[4] count])
  {
    uint64_t v5 = [HMDBackingStoreLogUpdateOperation alloc];
    id v6 = [a1[4] allObjects];
    id v7 = [(HMDBackingStoreLogUpdateOperation *)v5 initWithRowIDs:v6 successfullyPushedTo:3];

    uint64_t v14 = MEMORY[0x1E4F143A8];
    uint64_t v15 = 3221225472;
    id v16 = __46__HMDHome_dropAllChangesWithArrayOfObjectIDs___block_invoke_2;
    id v17 = &unk_1E6A17758;
    objc_copyWeak(&v19, a1 + 6);
    id v18 = a1[5];
    id v8 = (void *)MEMORY[0x1D9452090]([(HMDBackingStoreOperation *)v7 setResultBlock:&v14]);
    id v9 = WeakRetained;
    HMFGetOSLogHandle();
    uint64_t v10 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      id v12 = a1[5];
      *(_DWORD *)buf = 138543618;
      id v21 = v11;
      __int16 v22 = 2112;
      id v23 = v12;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Scheduling dropping of changes in home in datastore for %@", buf, 0x16u);
    }
    __int16 v13 = objc_msgSend(v9, "backingStore", v14, v15, v16, v17);
    [v13 submit:v7];

    objc_destroyWeak(&v19);
  }
}

void __46__HMDHome_dropAllChangesWithArrayOfObjectIDs___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = WeakRetained;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    uint64_t v9 = *(void *)(a1 + 32);
    int v10 = 138543618;
    uint64_t v11 = v8;
    __int16 v12 = 2112;
    uint64_t v13 = v9;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Dropped changes in home in datastore for %@", (uint8_t *)&v10, 0x16u);
  }
}

- (id)homeConfigurationModelObjectWithChangeType:(unint64_t)a3
{
  uint64_t v5 = [HMDHomeConfigurationModel alloc];
  id v6 = [(HMDHome *)self homeConfigurationUUID];
  id v7 = [(HMDHome *)self uuid];
  id v8 = [(HMDBackingStoreModelObject *)v5 initWithObjectChangeType:a3 uuid:v6 parentUUID:v7];

  uint64_t v9 = objc_msgSend(NSNumber, "numberWithInteger:", -[HMDHome configurationVersion](self, "configurationVersion"));
  [(HMDHomeConfigurationModel *)v8 setConfigurationVersion:v9];

  return v8;
}

- (id)homeConfigurationUUID
{
  v7[1] = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1E4F29128];
  id v3 = [(HMDHome *)self uuid];
  v7[0] = @"6741775F-2ED4-4DF8-B582-1F64BB3D1C75";
  id v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:v7 count:1];
  uint64_t v5 = objc_msgSend(v2, "hm_deriveUUIDFromBaseUUID:identifierSalt:withSalts:", v3, 0, v4);

  return v5;
}

- (id)emptyModelObjectWithChangeType:(unint64_t)a3
{
  uint64_t v5 = [HMDHomeModel alloc];
  id v6 = [(HMDHome *)self uuid];
  id v7 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:@"1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938"];
  id v8 = [(HMDBackingStoreModelObject *)v5 initWithObjectChangeType:a3 uuid:v6 parentUUID:v7];

  return v8;
}

- (id)modelObjectWithChangeType:(unint64_t)a3 version:(int64_t)a4
{
  id v6 = [(HMDHome *)self emptyModelObjectWithChangeType:a3];
  id v7 = [(HMDHome *)self name];
  [v6 setName:v7];

  uint64_t v8 = [(HMDHome *)self ownerName];
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    int v10 = [(HMDHome *)self owner];
    uint64_t v11 = [v10 publicKey];

    if (v11)
    {
      __int16 v12 = [(HMDHome *)self ownerName];
      [v6 setOwnerName:v12];

      uint64_t v13 = [(HMDHome *)self owner];
      uint64_t v14 = [v13 uuid];
      uint64_t v15 = [v14 UUIDString];
      [v6 setOwnerUUID:v15];

      id v16 = [(HMDHome *)self owner];
      id v17 = [v16 userID];
      [v6 setOwnerUserID:v17];

      id v18 = [(HMDHome *)self owner];
      id v19 = [v18 publicKey];
      [v6 setOwnerPublicKey:v19];
    }
  }
  id v20 = [(HMDHome *)self creationDate];

  if (v20)
  {
    id v21 = [(HMDHome *)self creationDate];
    [v6 setCreationDate:v21];
  }
  __int16 v22 = [(HMDHome *)self firstHAPAccessoryAddedDate];

  if (v22)
  {
    id v23 = [(HMDHome *)self firstHAPAccessoryAddedDate];
    [v6 setFirstHAPAccessoryAddedDate:v23];
  }
  uint64_t v24 = [(HMDHome *)self roomForEntireHome];
  long long v25 = [v24 uuid];
  long long v26 = [v25 UUIDString];
  [v6 setDefaultRoomUUID:v26];

  long long v27 = [(HMDHome *)self homeLocationHandler];
  long long v28 = [v27 locationData];
  id v29 = encodeRootObject();
  [v6 setHomeLocationData:v29];

  if (a4 >= 3)
  {
    uint64_t v30 = [(HMDHome *)self residentDeviceManager];
    __int16 v31 = [v30 primaryResidentUUID];
    id v32 = [v31 UUIDString];
    [v6 setPrimaryResidentUUID:v32];

    if (a4 != 3)
    {
      id v33 = [(HMDHome *)self presenceAuthStatus];

      if (v33)
      {
        uint64_t v34 = [(HMDHome *)self presenceAuthStatus];
        id v35 = [v34 number];
        [v6 setPresenceAuthorizationStatus:v35];
      }
      id v36 = [(HMDHome *)self presenceComputeStatus];

      if (v36)
      {
        uint64_t v37 = [(HMDHome *)self presenceComputeStatus];
        long long v38 = [v37 number];
        [v6 setPresenceComputeStatus:v38];
      }
      long long v39 = [(HMDHome *)self sharedHomeSourceVersion];

      if (v39)
      {
        id v40 = [(HMDHome *)self sharedHomeSourceVersion];
        [v6 setSharedHomeSourceVersion:v40];
      }
      uint64_t v41 = objc_msgSend(NSNumber, "numberWithInteger:", -[HMDHome protectionMode](self, "protectionMode"));
      [v6 setNetworkProtectionMode:v41];
    }
  }
  if ([(HMDHome *)self isMultiUserEnabled])
  {
    __int16 v42 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHome isMultiUserEnabled](self, "isMultiUserEnabled"));
    [v6 setMultiUserEnabled:v42];
  }
  id v43 = [v6 hasAnyUserAcknowledgedCameraRecordingOnboarding];

  if (v43)
  {
    long long v44 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHome hasAnyUserAcknowledgedCameraRecordingOnboarding](self, "hasAnyUserAcknowledgedCameraRecordingOnboarding"));
    [v6 setHasAnyUserAcknowledgedCameraRecordingOnboarding:v44];
  }
  if ([(HMDHome *)self hasOnboardedForAccessCode])
  {
    uint64_t v45 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHome hasOnboardedForAccessCode](self, "hasOnboardedForAccessCode"));
    [v6 setHasOnboardedForAccessCode:v45];
  }
  if ([(HMDHome *)self shouldEncodeHasOnboardedForWalletKey])
  {
    char v46 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHome hasOnboardedForWalletKey](self, "hasOnboardedForWalletKey"));
    [v6 setHasOnboardedForWalletKey:v46];
  }
  uint64_t v47 = [(HMDHome *)self naturalLightingContext];
  if (v47) {
    [v6 setNaturalLightingContext:v47];
  }
  long long v48 = [(HMDHome *)self chipStorage];
  [v48 updateHomeModel:v6];

  if (isFeatureMatterLocalFabricConfigEnabled())
  {
    BOOL v49 = [(HMDHome *)self fabric];
    id v50 = [v49 fabricID];
    [v6 setMatterFabricID:v50];
  }
  id v51 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHome soundCheckEnabled](self, "soundCheckEnabled"));
  [v6 setSoundCheckEnabled:v51];

  BOOL v52 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", -[HMDHome siriPhraseOptions](self, "siriPhraseOptions"));
  [v6 setSiriPhraseOptions:v52];

  id v53 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHome locationServicesEnabled](self, "locationServicesEnabled"));
  [v6 setLocationServicesEnabled:v53];

  BOOL v54 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHome didOnboardLocationServices](self, "didOnboardLocationServices"));
  [v6 setDidOnboardLocationServices:v54];

  return v6;
}

- (id)modelObjectWithChangeType:(unint64_t)a3
{
  return [(HMDHome *)self modelObjectWithChangeType:a3 version:4];
}

- (id)backingStoreObjects:(int64_t)a3
{
  uint64_t v208 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = [MEMORY[0x1E4F1CA48] array];
  id v6 = [(HMDHome *)self modelObjectWithChangeType:1 version:a3];
  [v5 addObject:v6];

  id v7 = [(HMDHome *)self homeConfigurationModelObjectWithChangeType:1];
  [v5 addObject:v7];

  long long v191 = 0u;
  long long v192 = 0u;
  long long v189 = 0u;
  long long v190 = 0u;
  uint64_t v8 = [(HMDHome *)self accessories];
  uint64_t v9 = [v8 countByEnumeratingWithState:&v189 objects:v207 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v190;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v190 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void **)(*((void *)&v189 + 1) + 8 * i);
        if (a3 <= 3)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            continue;
          }
        }
        uint64_t v14 = [v13 backingStoreObjects:a3];
        [v5 addObjectsFromArray:v14];
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v189 objects:v207 count:16];
    }
    while (v10);
  }

  long long v187 = 0u;
  long long v188 = 0u;
  long long v185 = 0u;
  long long v186 = 0u;
  __int16 v147 = self;
  uint64_t v15 = [(HMDHome *)self actionSets];
  uint64_t v16 = [v15 countByEnumeratingWithState:&v185 objects:v206 count:16];
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = *(void *)v186;
    do
    {
      for (uint64_t j = 0; j != v17; ++j)
      {
        if (*(void *)v186 != v18) {
          objc_enumerationMutation(v15);
        }
        id v20 = *(void **)(*((void *)&v185 + 1) + 8 * j);
        if (a3 <= 1)
        {
          id v21 = (void *)MEMORY[0x1E4F2E660];
          __int16 v22 = [*(id *)(*((void *)&v185 + 1) + 8 * j) type];
          LOBYTE(v21) = [v21 isBuiltinActionSetType:v22];

          if (v21) {
            continue;
          }
        }
        id v23 = [v20 backingStoreObjects:a3];
        [v5 addObjectsFromArray:v23];
      }
      uint64_t v17 = [v15 countByEnumeratingWithState:&v185 objects:v206 count:16];
    }
    while (v17);
  }

  if (a3 >= 3 && !isWatch())
  {
    long long v183 = 0u;
    long long v184 = 0u;
    long long v181 = 0u;
    long long v182 = 0u;
    uint64_t v24 = [(HMDHome *)v147 triggerOwnedActionSets];
    uint64_t v25 = [v24 countByEnumeratingWithState:&v181 objects:v205 count:16];
    if (v25)
    {
      uint64_t v26 = v25;
      uint64_t v27 = *(void *)v182;
      do
      {
        for (uint64_t k = 0; k != v26; ++k)
        {
          if (*(void *)v182 != v27) {
            objc_enumerationMutation(v24);
          }
          id v29 = [*(id *)(*((void *)&v181 + 1) + 8 * k) backingStoreObjects:a3];
          [v5 addObjectsFromArray:v29];
        }
        uint64_t v26 = [v24 countByEnumeratingWithState:&v181 objects:v205 count:16];
      }
      while (v26);
    }

    long long v179 = 0u;
    long long v180 = 0u;
    long long v177 = 0u;
    long long v178 = 0u;
    uint64_t v30 = [(HMDHome *)v147 triggers];
    uint64_t v31 = [v30 countByEnumeratingWithState:&v177 objects:v204 count:16];
    if (v31)
    {
      uint64_t v32 = v31;
      uint64_t v33 = *(void *)v178;
      do
      {
        for (uint64_t m = 0; m != v32; ++m)
        {
          if (*(void *)v178 != v33) {
            objc_enumerationMutation(v30);
          }
          id v35 = *(void **)(*((void *)&v177 + 1) + 8 * m);
          char v36 = [v35 requiresDataVersion4];
          if (a3 > 3 || (v36 & 1) == 0)
          {
            uint64_t v37 = [v35 backingStoreObjects:a3];
            [v5 addObjectsFromArray:v37];
          }
        }
        uint64_t v32 = [v30 countByEnumeratingWithState:&v177 objects:v204 count:16];
      }
      while (v32);
    }
  }
  long long v175 = 0u;
  long long v176 = 0u;
  long long v173 = 0u;
  long long v174 = 0u;
  long long v38 = [(HMDHome *)v147 rooms];
  uint64_t v39 = [v38 countByEnumeratingWithState:&v173 objects:v203 count:16];
  if (v39)
  {
    uint64_t v40 = v39;
    uint64_t v41 = *(void *)v174;
    do
    {
      for (uint64_t n = 0; n != v40; ++n)
      {
        if (*(void *)v174 != v41) {
          objc_enumerationMutation(v38);
        }
        id v43 = [*(id *)(*((void *)&v173 + 1) + 8 * n) backingStoreObjects:a3];
        [v5 addObjectsFromArray:v43];
      }
      uint64_t v40 = [v38 countByEnumeratingWithState:&v173 objects:v203 count:16];
    }
    while (v40);
  }

  long long v171 = 0u;
  long long v172 = 0u;
  long long v169 = 0u;
  long long v170 = 0u;
  long long v44 = [(HMDHome *)v147 zones];
  uint64_t v45 = [v44 countByEnumeratingWithState:&v169 objects:v202 count:16];
  if (v45)
  {
    uint64_t v46 = v45;
    uint64_t v47 = *(void *)v170;
    do
    {
      for (iuint64_t i = 0; ii != v46; ++ii)
      {
        if (*(void *)v170 != v47) {
          objc_enumerationMutation(v44);
        }
        BOOL v49 = [*(id *)(*((void *)&v169 + 1) + 8 * ii) backingStoreObjects:a3];
        [v5 addObjectsFromArray:v49];
      }
      uint64_t v46 = [v44 countByEnumeratingWithState:&v169 objects:v202 count:16];
    }
    while (v46);
  }

  long long v167 = 0u;
  long long v168 = 0u;
  long long v165 = 0u;
  long long v166 = 0u;
  id v50 = [(HMDHome *)v147 serviceGroups];
  uint64_t v51 = [v50 countByEnumeratingWithState:&v165 objects:v201 count:16];
  if (v51)
  {
    uint64_t v52 = v51;
    uint64_t v53 = *(void *)v166;
    do
    {
      for (juint64_t j = 0; jj != v52; ++jj)
      {
        if (*(void *)v166 != v53) {
          objc_enumerationMutation(v50);
        }
        id v55 = [*(id *)(*((void *)&v165 + 1) + 8 * jj) backingStoreObjects:a3];
        [v5 addObjectsFromArray:v55];
      }
      uint64_t v52 = [v50 countByEnumeratingWithState:&v165 objects:v201 count:16];
    }
    while (v52);
  }

  id v56 = (void *)MEMORY[0x1D9452090]();
  long long v57 = v147;
  HMFGetOSLogHandle();
  char v58 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
  {
    id v59 = HMFGetLogIdentifier();
    [(HMDHome *)v57 isUpdatedToHH2];
    uint64_t v60 = HMFBooleanToString();
    *(_DWORD *)buf = 138543618;
    uint64_t v198 = v59;
    __int16 v199 = 2112;
    v200 = v60;
    _os_log_impl(&dword_1D49D5000, v58, OS_LOG_TYPE_INFO, "%{public}@HH2 status : %@", buf, 0x16u);
  }
  if ([(HMDHome *)v57 isUpdatedToHH2])
  {
    id v61 = +[HMDHomeUpgradedToROAR defaultModelForHome:v57];
    [v5 addObject:v61];
  }
  long long v163 = 0u;
  long long v164 = 0u;
  long long v161 = 0u;
  long long v162 = 0u;
  id v62 = [(HMDHome *)v57 users];
  uint64_t v63 = [v62 countByEnumeratingWithState:&v161 objects:v196 count:16];
  if (v63)
  {
    uint64_t v64 = v63;
    uint64_t v65 = *(void *)v162;
    do
    {
      for (kuint64_t k = 0; kk != v64; ++kk)
      {
        if (*(void *)v162 != v65) {
          objc_enumerationMutation(v62);
        }
        id v67 = *(void **)(*((void *)&v161 + 1) + 8 * kk);
        objc_opt_class();
        char isKindOfClass = objc_opt_isKindOfClass();
        char v69 = isKindOfClass;
        if ((a3 > 1 || (isKindOfClass & 1) == 0)
          && (!isWatch() || (v69 & 1) == 0 && [v67 isOwner])
          && (a3 > 3 || ([v67 requiresMakoSupport] & 1) == 0))
        {
          id v70 = [v67 backingStoreObjects:a3];
          [v5 addObjectsFromArray:v70];
        }
      }
      uint64_t v64 = [v62 countByEnumeratingWithState:&v161 objects:v196 count:16];
    }
    while (v64);
  }

  if (a3 >= 2)
  {
    long long v159 = 0u;
    long long v160 = 0u;
    long long v157 = 0u;
    long long v158 = 0u;
    long long v148 = v57;
    id v71 = [(HMDHome *)v57 outgoingInvitations];
    uint64_t v72 = [v71 countByEnumeratingWithState:&v157 objects:v195 count:16];
    if (v72)
    {
      uint64_t v73 = v72;
      uint64_t v74 = *(void *)v158;
      do
      {
        for (muint64_t m = 0; mm != v73; ++mm)
        {
          if (*(void *)v158 != v74) {
            objc_enumerationMutation(v71);
          }
          id v76 = *(void **)(*((void *)&v157 + 1) + 8 * mm);
          if (a3 <= 3)
          {
            id v77 = [*(id *)(*((void *)&v157 + 1) + 8 * mm) user];
            char v78 = [v77 requiresMakoSupport];

            if (v78) {
              continue;
            }
          }
          id v79 = [v76 modelObjectWithChangeType:1 version:a3];
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v80 = v79;
          }
          else {
            id v80 = 0;
          }
          id v81 = v80;

          if (v81) {
            [v5 addObject:v81];
          }
        }
        uint64_t v73 = [v71 countByEnumeratingWithState:&v157 objects:v195 count:16];
      }
      while (v73);
    }

    if (a3 >= 3)
    {
      long long v155 = 0u;
      long long v156 = 0u;
      long long v153 = 0u;
      long long v154 = 0u;
      id v82 = [(HMDHome *)v57 residentDeviceManager];
      long long v83 = [v82 residentDevices];

      uint64_t v84 = [v83 countByEnumeratingWithState:&v153 objects:v194 count:16];
      if (v84)
      {
        uint64_t v85 = v84;
        uint64_t v86 = *(void *)v154;
        do
        {
          for (nuint64_t n = 0; nn != v85; ++nn)
          {
            if (*(void *)v154 != v86) {
              objc_enumerationMutation(v83);
            }
            uint64_t v88 = [*(id *)(*((void *)&v153 + 1) + 8 * nn) modelObjectWithChangeType:1 version:a3];
            [v5 addObject:v88];
          }
          uint64_t v85 = [v83 countByEnumeratingWithState:&v153 objects:v194 count:16];
        }
        while (v85);
      }

      uint64_t v89 = [(HMDHome *)v57 appData];

      if (v89)
      {
        uint64_t v90 = [(HMDHome *)v57 appData];
        id v91 = [v90 modelObjectWithChangeType:1];
        [v5 addObject:v91];
      }
      if (a3 >= 4)
      {
        uint64_t v92 = [HMDHomeSettingsModel alloc];
        long long v93 = [(HMDHome *)v57 uuid];
        id v94 = +[HMDHomeSettingsModel modelIDForHomeUUID:v93];
        id v95 = [(HMDHome *)v57 uuid];
        long long v96 = [(HMDBackingStoreModelObject *)v92 initWithObjectChangeType:1 uuid:v94 parentUUID:v95];

        id v97 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHome isAutomaticSoftwareUpdateEnabled](v57, "isAutomaticSoftwareUpdateEnabled"));
        [(HMDHomeSettingsModel *)v96 setAutomaticSoftwareUpdateEnabled:v97];

        id v98 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHome isAutomaticThirdPartyAccessorySoftwareUpdateEnabled](v57, "isAutomaticThirdPartyAccessorySoftwareUpdateEnabled"));
        [(HMDHomeSettingsModel *)v96 setAutomaticThirdPartyAccessorySoftwareUpdateEnabled:v98];

        [v5 addObject:v96];
        BOOL v99 = [HMDHomeMediaSettingsModel alloc];
        long long v100 = [(HMDHome *)v57 uuid];
        long long v101 = +[HMDHomeMediaSettingsModel modelIDForHomeUUID:v100];
        long long v102 = [(HMDHome *)v57 uuid];
        long long v103 = [(HMDBackingStoreModelObject *)v99 initWithObjectChangeType:1 uuid:v101 parentUUID:v102];

        int v104 = objc_msgSend(NSNumber, "numberWithInteger:", -[HMDHome minimumMediaUserPrivilege](v57, "minimumMediaUserPrivilege"));
        [(HMDHomeMediaSettingsModel *)v103 setMinimumMediaUserPrivilege:v104];

        long long v105 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHome isMediaPeerToPeerEnabled](v57, "isMediaPeerToPeerEnabled"));
        [(HMDHomeMediaSettingsModel *)v103 setMediaPeerToPeerEnabled:v105];

        long long v106 = [(HMDHome *)v57 mediaPassword];
        [(HMDHomeMediaSettingsModel *)v103 setMediaPassword:v106];

        [v5 addObject:v103];
        long long v107 = [(HMDHome *)v57 mediaSystemController];
        long long v108 = [v107 backingStoreObjectsForVersion:a3];

        if ([v108 count]) {
          [v5 addObjectsFromArray:v108];
        }
        __int16 v109 = [(HMDHome *)v57 uuid];
        char v110 = +[HMDHomeNetworkRouterManagingDeviceSettingsModel defaultModelForHomeUUID:v109];

        id v111 = [(HMDHome *)v57 primaryNetworkRouterManagingDeviceUUID];
        __int16 v112 = [v111 UUIDString];
        [v110 setPrimaryNetworkRouterManagingDeviceUUID:v112];

        [v5 addObject:v110];
        __int16 v113 = [(HMDHome *)v57 uuid];
        __int16 v114 = +[HMDHomeNetworkRouterSettingsModel defaultModelForHomeUUID:v113];

        uint64_t v115 = [(HMDHome *)v57 activeNetworkRouterUUID];
        __int16 v116 = [v115 UUIDString];
        [v114 setActiveNetworkRouterAccessoryUUID:v116];

        uint64_t v117 = [[HMDHomeKitVersion alloc] initWithVersionString:@"6.2"];
        uint64_t v118 = [(HMDHome *)v57 minimumNetworkRouterSupportHomeKitVersion];
        if (!v118) {
          goto LABEL_113;
        }
        __int16 v119 = (void *)v118;
        id v120 = [(HMDHome *)v57 minimumNetworkRouterSupportHomeKitVersion];
        uint64_t v121 = [v120 compare:v117];

        BOOL v122 = v121 == -1;
        long long v57 = v148;
        if (v122)
        {
LABEL_113:
          uint64_t v123 = [(HMDHomeKitVersion *)v117 versionString];
          [v114 setMinimumNetworkRouterSupportHomeKitVersion:v123];
        }
        uint64_t v124 = [(HMDHome *)v57 minHomeKitVersionForAccessoryNetworkProtectionChange];
        uint64_t v125 = [v124 versionString];
        [v114 setMinHomeKitVersionForAccessoryNetworkProtectionChange:v125];

        [v5 addObject:v114];
        long long v151 = 0u;
        long long v152 = 0u;
        long long v149 = 0u;
        long long v150 = 0u;
        id v126 = [(HMDHome *)v57 networkProtectionGroupRegistry];
        id v127 = [v126 persistedGroups];

        uint64_t v128 = [v127 countByEnumeratingWithState:&v149 objects:v193 count:16];
        if (v128)
        {
          uint64_t v129 = v128;
          uint64_t v130 = *(void *)v150;
          do
          {
            for (uint64_t i1 = 0; i1 != v129; ++i1)
            {
              if (*(void *)v150 != v130) {
                objc_enumerationMutation(v127);
              }
              long long v132 = [*(id *)(*((void *)&v149 + 1) + 8 * i1) modelForVersion:a3];
              [v5 addObject:v132];
            }
            uint64_t v129 = [v127 countByEnumeratingWithState:&v149 objects:v193 count:16];
          }
          while (v129);
        }

        uint64_t v133 = +[HMDHomeThreadNetworkModel defaultModelForHome:v148];
        id v134 = [(HMDHome *)v148 unfilteredThreadNetworkID];
        [v133 setThreadNetworkID:v134];

        [v5 addObject:v133];
        uint64_t v135 = [(HMDHome *)v148 uuid];
        int v136 = +[HMDHomePersonManagerSettingsModel defaultModelForHomeUUID:v135];

        int v137 = [(HMDHome *)v148 personManagerZoneUUID];
        [v136 setZoneUUID:v137];

        [v5 addObject:v136];
        uint64_t v138 = [(HMDHome *)v148 labelsByAccessCode];
        long long v139 = +[HMDAccessCodeDataManager createHomeAccessCodeModelsFromLabelsByAccessCode:v138 forHome:v148];

        [v5 addObjectsFromArray:v139];
        BOOL v140 = [(HMDHome *)v148 removedUserInfoByAccessCode];
        uint64_t v141 = +[HMDAccessCodeDataManager createRemovedUserInfoModelsFromRemovedUserInfoByAccessCode:v140 forHome:v148];

        [v5 addObjectsFromArray:v141];
        BOOL v142 = +[HMDHomeNFCReaderKeyModel defaultModelForHome:v148];
        if ([(HMDHome *)v148 shouldEncodeNFCReaderKey])
        {
          long long v143 = [(HMDHome *)v148 nfcReaderKey];
          [v142 setNfcReaderKey:v143];
        }
        [v5 addObject:v142];
      }
    }
  }
  id v144 = v5;

  return v144;
}

- (id)sharedHomeModel
{
  id v3 = [HMDSharedHomeModel alloc];
  id v4 = [(HMDHome *)self uuid];
  uint64_t v5 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:@"1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938"];
  id v6 = [(HMDBackingStoreModelObject *)v3 initWithObjectChangeType:1 uuid:v4 parentUUID:v5];

  id v7 = [(HMDHome *)self homeManager];
  uint64_t v8 = [v7 generateDataForSharedHomeModel:self];
  [(HMDSharedHomeModel *)v6 setHomeData:v8];

  uint64_t v9 = objc_msgSend(NSNumber, "numberWithInteger:", -[HMDHome configurationVersion](self, "configurationVersion"));
  [(HMDSharedHomeModel *)v6 setConfigurationVersion:v9];

  return v6;
}

- (id)deletedBackingStoreObject
{
  id v3 = [(HMDHome *)self homeManager];
  if ([(HMDHome *)self isOwnerUser]) {
    id v4 = HMDHomeModel;
  }
  else {
    id v4 = HMDSharedHomeModel;
  }
  id v5 = [v4 alloc];
  id v6 = [(HMDHome *)self uuid];
  id v7 = [v3 uuid];
  uint64_t v8 = (void *)[v5 initWithObjectChangeType:3 uuid:v6 parentUUID:v7];

  return v8;
}

- (void)transactionObjectRemoved:(id)a3 message:(id)a4
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  id v9 = v8;
  if (v9)
  {
    id v10 = [(HMDHome *)self residentDeviceManager];
    [v10 transactionObjectRemoved:v6 message:v7];
  }
  else
  {
    id v11 = v6;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      __int16 v12 = v11;
    }
    else {
      __int16 v12 = 0;
    }
    id v10 = v12;

    if (v10)
    {
      uint64_t v13 = [(HMDHome *)self accessCodeManager];
      id v14 = [v13 dataManager];

      if (v14)
      {
        [v14 handleRemovedHomeAccessCodeModel:v10 message:v7];
      }
      else
      {
        id v19 = (void *)MEMORY[0x1D9452090]();
        id v20 = self;
        id v21 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          __int16 v22 = HMFGetLogIdentifier();
          int v30 = 138543362;
          uint64_t v31 = v22;
          _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_ERROR, "%{public}@Not handling removed HMDHomeAccessCodeModel because self.accessCodeManager.dataManager is nil", (uint8_t *)&v30, 0xCu);
        }
        id v23 = [MEMORY[0x1E4F28C58] hmErrorWithCode:-1];
        [v7 respondWithError:v23];

        id v14 = 0;
      }
    }
    else
    {
      id v15 = v11;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      id v14 = v16;

      if (v14)
      {
        uint64_t v17 = [(HMDHome *)self accessCodeManager];
        uint64_t v18 = [v17 dataManager];

        if (v18)
        {
          [v18 handleRemovedHMDRemovedUserAccessCodeModel:v14 message:v7];
        }
        else
        {
          uint64_t v25 = (void *)MEMORY[0x1D9452090]();
          uint64_t v26 = self;
          uint64_t v27 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            long long v28 = HMFGetLogIdentifier();
            int v30 = 138543362;
            uint64_t v31 = v28;
            _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_ERROR, "%{public}@Not handling removed HMDRemovedUserAccessCodeModel because self.accessCodeManager.dataManager is nil", (uint8_t *)&v30, 0xCu);
          }
          id v29 = [MEMORY[0x1E4F28C58] hmErrorWithCode:-1];
          [v7 respondWithError:v29];
        }
      }
      else
      {
        uint64_t v24 = [(HMDHome *)self homeObjectChangeHandler];
        [v24 handleObjectRemove:v15 message:v7];
      }
    }
  }
}

- (void)transactionObjectUpdated:(id)a3 newValues:(id)a4 message:(id)a5
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v11 = v9;
  }
  else {
    id v11 = 0;
  }
  id v12 = v11;
  if (!v12)
  {
    id v14 = v9;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v15 = v14;
    }
    else {
      id v15 = 0;
    }
    id v16 = v15;

    if (v16)
    {
      [(HMDHome *)self updateHomeConfigurationWithModel:v16 message:v10];
LABEL_101:

      goto LABEL_102;
    }
    id v17 = v14;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    id v19 = v18;

    if (v19)
    {
      id v20 = [(HMDHome *)self residentDeviceManager];
      [v20 transactionObjectUpdated:v8 newValues:v17 message:v10];

LABEL_100:
      goto LABEL_101;
    }
    id v21 = v17;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      __int16 v22 = v21;
    }
    else {
      __int16 v22 = 0;
    }
    id v23 = v22;

    if (v23)
    {
      uint64_t v24 = [(HMDHome *)self homeManager];
      [v24 transactionObjectUpdated:v8 newValues:v21 message:v10];

LABEL_99:
      goto LABEL_100;
    }
    id v25 = v21;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    id v27 = v26;

    if (v27)
    {
      __transactionHomeSettingsUpdated(self, v27, v10);
      id v23 = 0;
LABEL_98:

      goto LABEL_99;
    }
    id v28 = v25;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v29 = v28;
    }
    else {
      id v29 = 0;
    }
    id v30 = v29;

    if (v30)
    {
      __transactionHomeMediaSettingsUpdated(self, v30, v10);
      id v23 = 0;
LABEL_97:

      id v27 = 0;
      goto LABEL_98;
    }
    id v31 = v28;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v32 = v31;
    }
    else {
      uint64_t v32 = 0;
    }
    id v33 = v32;

    if (v33)
    {
      [(HMDHome *)self updateNetworkRouterSettingsWithModel:v33 message:v10];
      id v23 = 0;
      id v30 = 0;
LABEL_96:

      goto LABEL_97;
    }
    id v34 = v31;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v35 = v34;
    }
    else {
      id v35 = 0;
    }
    id v36 = v35;

    if (v36)
    {
      [(HMDHome *)self updateNetworkRouterManagingDeviceSettingsWithModel:v36 message:v10];
      id v23 = 0;
      uint64_t v37 = v36;
      id v33 = 0;
      id v30 = 0;
LABEL_95:

      goto LABEL_96;
    }
    id v38 = v34;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v39 = v38;
    }
    else {
      uint64_t v39 = 0;
    }
    id v40 = v39;

    if (v40)
    {
      [(HMDHome *)self _updateThreadNetworkWithModel:v40 message:v10];
      uint64_t v41 = v40;
      id v23 = 0;
      id v33 = 0;
      id v30 = 0;
LABEL_94:

      uint64_t v37 = 0;
      goto LABEL_95;
    }
    id v42 = v38;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v43 = v42;
    }
    else {
      id v43 = 0;
    }
    id v44 = v43;

    if (v44)
    {
      id v45 = v8;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t v46 = v45;
      }
      else {
        uint64_t v46 = 0;
      }
      id v47 = v46;

      long long v48 = [(HMDHome *)self personDataManager];
      [v48 handleUpdatedSettingsModel:v44 previousSettingsModel:v47 message:v10];

      goto LABEL_93;
    }
    id v49 = v42;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v50 = v49;
    }
    else {
      id v50 = 0;
    }
    id v51 = v50;

    id v91 = v51;
    if (v51)
    {
      uint64_t v52 = [(HMDHome *)self accessCodeManager];
      uint64_t v53 = [v52 dataManager];

      if (v53)
      {
        BOOL v54 = v53;
        [v53 handleUpdatedHomeAccessCodeModel:v91 message:v10];
      }
      else
      {
        uint64_t v60 = (void *)MEMORY[0x1D9452090]();
        id v61 = self;
        id v62 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
        {
          uint64_t v63 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          long long v93 = v63;
          _os_log_impl(&dword_1D49D5000, v62, OS_LOG_TYPE_ERROR, "%{public}@Not handling removed HMDHomeAccessCodeModel because self.accessCodeManager.dataManager is nil", buf, 0xCu);
        }
        uint64_t v64 = [MEMORY[0x1E4F28C58] hmErrorWithCode:-1];
        [v10 respondWithError:v64];

        BOOL v54 = 0;
      }
      goto LABEL_92;
    }
    id v55 = v49;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v56 = v55;
    }
    else {
      id v56 = 0;
    }
    id v57 = v56;

    BOOL v54 = v57;
    if (v57)
    {
      char v58 = [(HMDHome *)self accessCodeManager];
      id v59 = [v58 dataManager];

      uint64_t v88 = v59;
      if (v59)
      {
        [v59 handleUpdatedHMDRemovedUserAccessCodeModel:v54 message:v10];
LABEL_91:

LABEL_92:
        id v44 = 0;
LABEL_93:

        id v23 = 0;
        id v33 = 0;
        id v30 = 0;
        uint64_t v41 = 0;
        goto LABEL_94;
      }
      uint64_t v89 = (void *)MEMORY[0x1D9452090]();
      id v76 = self;
      id v77 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
      {
        char v78 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        long long v93 = v78;
        _os_log_impl(&dword_1D49D5000, v77, OS_LOG_TYPE_ERROR, "%{public}@Not handling removed HMDRemovedUserAccessCodeModel because self.accessCodeManager.dataManager is nil", buf, 0xCu);
      }
      id v79 = [MEMORY[0x1E4F28C58] hmErrorWithCode:-1];
      [v10 respondWithError:v79];
    }
    else
    {
      id v65 = v55;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v66 = v65;
      }
      else {
        id v66 = 0;
      }
      id v67 = v66;

      uint64_t v88 = v67;
      if (v67)
      {
        long long v87 = [v67 nfcReaderKey];
        id v68 = [v67 setProperties];
        if ([v68 containsObject:@"encodedNfcReaderKey"])
        {
          char v69 = [(HMDHome *)self nfcReaderKey];
          char contexta = HMFEqualObjects();

          if ((contexta & 1) == 0)
          {
            context = (void *)MEMORY[0x1D9452090]();
            id v70 = self;
            id v71 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
            {
              uint64_t v84 = HMFGetLogIdentifier();
              [(HMDHome *)v70 nfcReaderKey];
              *(_DWORD *)buf = 138543874;
              long long v93 = v84;
              v95 = __int16 v94 = 2112;
              uint64_t v72 = (void *)v95;
              __int16 v96 = 2112;
              id v97 = v87;
              _os_log_impl(&dword_1D49D5000, v71, OS_LOG_TYPE_INFO, "%{public}@Updating nfc reader key from %@ -> %@", buf, 0x20u);
            }
            uint64_t v73 = [MEMORY[0x1E4F1CA60] dictionary];
            uint64_t v74 = [(HMDHome *)v70 nfcReaderKey];
            [v73 setObject:v74 forKeyedSubscript:@"HMDHomeDidUpdateNFCReaderKeyNotificationKeyPreviousNFCReaderKey"];

            [(HMDHome *)v70 setNfcReaderKey:v87];
            logAndPostNotification(@"HMDHomeDidUpdateNFCReaderKeyNotification", v70, v73);
            id v75 = [v10 transactionResult];
            [v75 markChanged];
          }
        }
        else
        {
        }
        [v10 respondWithSuccess];

        goto LABEL_91;
      }
      id v80 = v65;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v81 = v80;
      }
      else {
        id v81 = 0;
      }
      id v82 = v81;
      uint64_t v90 = v80;

      if (v82)
      {
        [(HMDHome *)self updateROARStatus:v82 message:v10];
        [v10 respondWithSuccess];
      }
      else
      {
        long long v83 = [(HMDHome *)self homeObjectChangeHandler];
        [v83 handleObjectUpdate:v8 newValues:v90 message:v10];
      }
    }
    uint64_t v88 = 0;
    goto LABEL_91;
  }
  id v13 = [(HMDHome *)self updateHomeWithModel:v12 message:v10];
LABEL_102:
}

- (void)updateNetworkRouterManagingDeviceSettingsWithModel:(id)a3 message:(id)a4
{
  id v15 = a3;
  id v6 = a4;
  id v7 = [v15 setProperties];
  if ([v7 containsObject:@"primaryNetworkRouterManagingDeviceUUID"])
  {
    id v8 = [(HMDHome *)self primaryNetworkRouterManagingDeviceUUID];
    id v9 = [v8 UUIDString];
    id v10 = [v15 primaryNetworkRouterManagingDeviceUUID];
    char v11 = HMFEqualObjects();

    if (v11) {
      goto LABEL_5;
    }
    id v12 = objc_alloc(MEMORY[0x1E4F29128]);
    id v13 = [v15 primaryNetworkRouterManagingDeviceUUID];
    id v7 = (void *)[v12 initWithUUIDString:v13];

    [(HMDHome *)self setPrimaryNetworkRouterManagingDeviceUUID:v7];
    id v14 = [v6 transactionResult];
    [(HMDHome *)self _evaluateNetworkRouterManagementForTransaction:v14];
    [v14 markChanged];
  }
LABEL_5:
  [v6 respondWithPayload:0];
}

- (void)setHomeUpdatedToROARAndInformClients
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if ([(HMDHome *)self isUpdatedToHH2])
  {
    id v3 = (void *)MEMORY[0x1D9452090]();
    id v4 = self;
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = HMFGetLogIdentifier();
      int v12 = 138543362;
      id v13 = v6;
      _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@isUpdatedToHH2 is already set on this home. Not doing anything.", (uint8_t *)&v12, 0xCu);
    }
  }
  else if (![(HMDHome *)self isUpdatedToHH2])
  {
    id v7 = (void *)MEMORY[0x1D9452090]([(HMDHome *)self setIsUpdatedToHH2:1]);
    id v8 = self;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      id v10 = HMFGetLogIdentifier();
      int v12 = 138543362;
      id v13 = v10;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Marked home upgraded to HH2 & informing clients about the status", (uint8_t *)&v12, 0xCu);
    }
    [(HMDHome *)v8 saveWithReason:@"Upgraded To HH2" postSyncNotification:0 objectChange:1];
    char v11 = [(HMDHome *)v8 homeManager];
    [v11 checkAndMoveDirectlyToHH2IfOnlyHH2SharedHomesExistAllowEmptyOwnedHomes:1];
  }
}

- (void)updateROARStatus:(id)a3 message:(id)a4
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)MEMORY[0x1D9452090]();
  id v9 = self;
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    char v11 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    id v16 = v11;
    __int16 v17 = 2112;
    id v18 = v6;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Found ROAR Model : %@", buf, 0x16u);
  }
  int v12 = [v7 transactionResult];
  id v13 = [(HMDHome *)v9 workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __36__HMDHome_updateROARStatus_message___block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = v9;
  dispatch_async(v13, block);

  [v12 markSaveToAssistant];
  [v12 markChanged];
}

uint64_t __36__HMDHome_updateROARStatus_message___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) setHomeUpdatedToROARAndInformClients];
}

- (void)updateNetworkRouterSettingsWithModel:(id)a3 message:(id)a4
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = [v7 transactionResult];
  id v9 = [v6 setProperties];
  int v10 = [v9 containsObject:@"activeNetworkRouterAccessoryUUID"];

  if (v10)
  {
    id v11 = objc_alloc(MEMORY[0x1E4F29128]);
    int v12 = [v6 activeNetworkRouterAccessoryUUID];
    id v13 = (void *)[v11 initWithUUIDString:v12];

    uint64_t v14 = [(HMDHome *)self activeNetworkRouterUUID];
    int v15 = HMFEqualObjects();

    if ((v15 & 1) == 0)
    {
      [(HMDHome *)self setActiveNetworkRouterUUID:v13];
      if (v13)
      {
        id v16 = [v6 activeNetworkRouterAccessoryUUID];
        __int16 v17 = [v6 activeNetworkRouterInitialSetupNeededUUID];
        -[HMDHome setActiveNetworkRouterInitialSetupNeeded:](self, "setActiveNetworkRouterInitialSetupNeeded:", [v16 isEqual:v17]);
      }
      else
      {
        [(HMDHome *)self setActiveNetworkRouterInitialSetupNeeded:0];
      }
    }
    int v18 = v15 ^ 1;
  }
  else
  {
    int v18 = 0;
  }
  uint64_t v19 = [v6 setProperties];
  int v20 = [v19 containsObject:@"minimumNetworkRouterSupportHomeKitVersion"];

  if (v20)
  {
    id v21 = [v6 minimumNetworkRouterSupportHomeKitVersion];

    if (v21)
    {
      __int16 v22 = [HMDHomeKitVersion alloc];
      id v23 = [v6 minimumNetworkRouterSupportHomeKitVersion];
      id v21 = [(HMDHomeKitVersion *)v22 initWithVersionString:v23];
    }
    uint64_t v24 = [[HMDHomeKitVersion alloc] initWithVersionString:@"6.2"];
    if ([(HMDHome *)self isOwnerUser]
      && [v8 source] != 1
      && [(HMDHomeKitVersion *)v21 isGreaterThanVersion:v24])
    {
      id v25 = (void *)MEMORY[0x1D9452090]();
      uint64_t v26 = self;
      id v27 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v44 = v25;
        v29 = id v28 = v24;
        *(_DWORD *)buf = 138543874;
        uint64_t v53 = v29;
        __int16 v54 = 2112;
        id v55 = v21;
        __int16 v56 = 2112;
        id v57 = v28;
        _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_INFO, "%{public}@Overriding minimum router support HomeKit version to enable network router support from %@ in cloud to our version %@", buf, 0x20u);

        uint64_t v24 = v28;
        id v25 = v44;
      }

      id v30 = [(HMDHome *)v26 workQueue];
      blocuint64_t k = MEMORY[0x1E4F143A8];
      uint64_t v46 = 3221225472;
      id v47 = __56__HMDHome_updateNetworkRouterSettingsWithModel_message___block_invoke;
      long long v48 = &unk_1E6A19668;
      id v49 = v26;
      id v50 = v21;
      id v51 = v7;
      dispatch_async(v30, &block);
    }
    else
    {
      id v31 = (void *)MEMORY[0x1D9452090]();
      uint64_t v32 = self;
      id v33 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        id v34 = HMFGetLogIdentifier();
        [(HMDHome *)v32 minimumNetworkRouterSupportHomeKitVersion];
        id v44 = v8;
        id v35 = v24;
        id v36 = (HMDHomeKitVersion *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        uint64_t v53 = v34;
        __int16 v54 = 2112;
        id v55 = v36;
        __int16 v56 = 2112;
        id v57 = v21;
        _os_log_impl(&dword_1D49D5000, v33, OS_LOG_TYPE_INFO, "%{public}@Updating minimum router support HomeKit version to enable network router support from %@ to cloud version %@", buf, 0x20u);

        uint64_t v24 = v35;
        id v8 = v44;
      }
      [(HMDHome *)v32 setMinimumNetworkRouterSupportHomeKitVersion:v21];
      int v18 = 1;
    }
  }
  uint64_t v37 = objc_msgSend(v6, "setProperties", v44, block, v46, v47, v48, v49);
  int v38 = [v37 containsObject:@"minHomeKitVersionForAccessoryNetworkProtectionChange"];

  if (v38)
  {
    uint64_t v39 = [v6 minHomeKitVersionForAccessoryNetworkProtectionChange];

    if (v39)
    {
      id v40 = [HMDHomeKitVersion alloc];
      uint64_t v41 = [v6 minHomeKitVersionForAccessoryNetworkProtectionChange];
      uint64_t v39 = [(HMDHomeKitVersion *)v40 initWithVersionString:v41];
    }
    id v42 = [(HMDHome *)self minHomeKitVersionForAccessoryNetworkProtectionChange];
    char v43 = HMFEqualObjects();

    if (v43)
    {

      if ((v18 & 1) == 0) {
        goto LABEL_31;
      }
    }
    else
    {
      [(HMDHome *)self setMinHomeKitVersionForAccessoryNetworkProtectionChange:v39];
    }
  }
  else if (!v18)
  {
    goto LABEL_31;
  }
  [(HMDHome *)self _evaluateNetworkRouterManagementForTransaction:v8];
  [v8 markChanged];
LABEL_31:
  [v7 respondWithPayload:0];
}

uint64_t __56__HMDHome_updateNetworkRouterSettingsWithModel_message___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _addTransactionForMinimumNetworkRouterHomeKitVersion:*(void *)(a1 + 40) message:*(void *)(a1 + 48)];
}

- (void)updateHomeConfigurationWithModel:(id)a3 message:(id)a4
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = [v7 transactionResult];
  id v9 = [v6 setProperties];
  int v10 = [v9 containsObject:@"configurationVersion"];

  if (v10)
  {
    id v11 = [v6 configurationVersion];
    uint64_t v12 = [v11 integerValue];

    id v13 = (void *)MEMORY[0x1D9452090]();
    uint64_t v14 = self;
    int v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = HMFGetLogIdentifier();
      int v22 = 138544130;
      id v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = v12;
      __int16 v26 = 2048;
      uint64_t v27 = [(HMDHome *)v14 lastSyncedConfigurationVersion];
      __int16 v28 = 2048;
      uint64_t v29 = [(HMDHome *)v14 configurationVersion];
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_DEFAULT, "%{public}@Received incoming configuration version %lu, last synced was %lu, and current is %lu", (uint8_t *)&v22, 0x2Au);
    }
    if ([(HMDHome *)v14 isOwnerUser])
    {
      if (v12 >= [(HMDHome *)v14 configurationVersion])
      {
        uint64_t v21 = [(HMDHome *)v14 configurationVersion];
        if (v21 <= [(HMDHome *)v14 lastSyncedConfigurationVersion])
        {
          [(HMDHome *)v14 setConfigurationVersion:v12];
        }
        else
        {
          [(HMDHome *)v14 setConfigurationVersion:v12 + 1];
          [(HMDHome *)v14 __saveConfigurationVersionTransaction];
        }
        [(HMDHome *)v14 setLastSyncedConfigurationVersion:v12];
      }
      else
      {
        [(HMDHome *)v14 __saveConfigurationVersionTransaction];
      }
    }
    else
    {
      __int16 v17 = (void *)MEMORY[0x1D9452090]();
      int v18 = v14;
      uint64_t v19 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        int v20 = HMFGetLogIdentifier();
        int v22 = 138543362;
        id v23 = v20;
        _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_DEBUG, "%{public}@Shared user will use incoming configuration version", (uint8_t *)&v22, 0xCu);
      }
      [(HMDHome *)v18 setConfigurationVersion:v12];
      [(HMDHome *)v18 setLastSyncedConfigurationVersion:v12];
      [(HMDHome *)v18 setExpectedConfigurationVersion:0];
    }
  }
  [v7 respondWithPayload:0];
  [v8 markChanged];
}

- (id)updateHomeWithModel:(id)a3 message:(id)a4
{
  uint64_t v207 = *MEMORY[0x1E4F143B8];
  id v6 = (__CFString *)a3;
  id v7 = (HMDHome *)a4;
  id v8 = [(HMDHome *)v7 transactionResult];
  id v9 = (void *)MEMORY[0x1D9452090]();
  int v10 = self;
  HMFGetOSLogHandle();
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v12 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    id v202 = v12;
    __int16 v203 = 2112;
    v204 = v6;
    __int16 v205 = 2112;
    uint64_t v206 = v7;
    _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Updating home with model: %@ / %@", buf, 0x20u);
  }
  id v13 = [(__CFString *)v6 setProperties];
  int v14 = [v13 containsObject:@"primaryResidentUUID"];

  long long v186 = v8;
  if (v14)
  {
    int v15 = [(__CFString *)v6 primaryResidentUUID];

    if (v15)
    {
      id v16 = objc_alloc(MEMORY[0x1E4F29128]);
      __int16 v17 = [(__CFString *)v6 primaryResidentUUID];
      int v15 = (void *)[v16 initWithUUIDString:v17];
    }
    int v18 = [(HMDHome *)v10 residentDeviceManager];
    uint64_t v19 = [v18 primaryResidentUUID];

    int v20 = [(HMDHome *)v10 primaryResident];
    uint64_t v21 = [v20 device];

    int v22 = [(HMDHome *)v10 residentDeviceManager];
    [v22 updatePrimaryResidentWithUUID:v15 actions:v8];

    if (HMFEqualObjects())
    {
      id v23 = (void *)MEMORY[0x1D9452090]();
      __int16 v24 = v10;
      HMFGetOSLogHandle();
      uint64_t v25 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v26 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        id v202 = v26;
        _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_INFO, "%{public}@Not resubscribing since the primary resident did not change", buf, 0xCu);
      }
      id v8 = v186;
    }
    else
    {
      uint64_t v27 = [(HMDHome *)v10 backingStore];
      v195[0] = MEMORY[0x1E4F143A8];
      v195[1] = 3221225472;
      v195[2] = __39__HMDHome_updateHomeWithModel_message___block_invoke;
      v195[3] = &unk_1E6A143D0;
      v195[4] = v10;
      id v196 = v15;
      id v197 = v19;
      id v198 = v21;
      [v27 submitBlock:v195];
    }
    if ([v8 source] == 1)
    {
      __int16 v28 = [(HMDHome *)v10 residentDeviceManager];
      uint64_t v29 = [v28 primaryResidentDevice];
      char v30 = [v29 isReachable];

      if ((v30 & 1) == 0)
      {
        id v31 = [(HMDHome *)v10 residentDeviceManager];
        [v31 electResidentDevice:1];
      }
    }
  }
  long long v184 = [(HMDHome *)v10 currentUser];
  uint64_t v32 = [(__CFString *)v6 setProperties];
  int v33 = [v32 containsObject:@"presenceAuthorizationStatus"];

  long long v185 = v7;
  if (v33)
  {
    id v34 = (void *)MEMORY[0x1E4F2EBC0];
    id v35 = [(__CFString *)v6 presenceAuthorizationStatus];
    id v36 = [v34 authWithNumber:v35];

    if (isPresenceAuthorizationValid())
    {
      uint64_t v37 = [(HMDHome *)v10 presenceAuthStatus];
      char v38 = HMFEqualObjects();

      if (v38)
      {
        uint64_t v39 = (void *)MEMORY[0x1D9452090]();
        id v40 = v10;
        HMFGetOSLogHandle();
        uint64_t v41 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          id v42 = (id)objc_claimAutoreleasedReturnValue();
          char v43 = [(HMDHome *)v40 presenceAuthStatus];
          *(_DWORD *)buf = 138543618;
          id v202 = v42;
          __int16 v203 = 2112;
          v204 = v43;
          _os_log_impl(&dword_1D49D5000, v41, OS_LOG_TYPE_INFO, "%{public}@Presence auth is not changing from %@", buf, 0x16u);
        }
        int v44 = 0;
      }
      else
      {
        [(HMDHome *)v10 setPresenceAuthStatus:v36];
        [v184 setPresenceAuthStatus:v36];
        [v8 markChanged];
        int v44 = 1;
      }
      if (![(HMDHome *)v10 isOwnerUser]) {
        [v8 markSaveToSharedUserAccount];
      }
    }
    else
    {
      id v45 = (void *)MEMORY[0x1D9452090]();
      uint64_t v46 = v10;
      HMFGetOSLogHandle();
      id v47 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v48 = (id)objc_claimAutoreleasedReturnValue();
        id v49 = [(__CFString *)v6 presenceAuthorizationStatus];
        *(_DWORD *)buf = 138543618;
        id v202 = v48;
        __int16 v203 = 2112;
        v204 = v49;
        _os_log_impl(&dword_1D49D5000, v47, OS_LOG_TYPE_INFO, "%{public}@Ignoring the value for presence auth in home model: %@", buf, 0x16u);
      }
      int v44 = 0;
    }

    BOOL v182 = v44 != 0;
    id v7 = v185;
  }
  else
  {
    BOOL v182 = 0;
  }
  id v50 = [(__CFString *)v6 setProperties];
  int v51 = [v50 containsObject:@"presenceComputeStatus"];

  if (v51)
  {
    uint64_t v52 = (void *)MEMORY[0x1E4F2EBC8];
    uint64_t v53 = [(__CFString *)v6 presenceComputeStatus];
    __int16 v54 = [v52 computeWithNumber:v53];

    if (v54)
    {
      id v55 = [(HMDHome *)v10 presenceComputeStatus];
      char v56 = HMFEqualObjects();

      if ((v56 & 1) == 0)
      {
        [(HMDHome *)v10 setPresenceComputeStatus:v54];
        if (![(HMDHome *)v10 isOwnerUser]) {
          [v8 markSaveToSharedUserAccount];
        }
        [v8 markChanged];
      }
    }
  }
  id v57 = [(__CFString *)v6 setProperties];
  int v58 = [v57 containsObject:@"homeLocationData"];

  if (v58)
  {
    id v59 = [(HMDHome *)v10 homeLocationHandler];
    uint64_t v60 = [v59 _handleHomeLocationData:v6 message:v7];

    if (v60)
    {
      id v61 = v60;
    }
    else
    {
      id v62 = [MEMORY[0x1E4F1CA80] set];
      long long v191 = 0u;
      long long v192 = 0u;
      long long v193 = 0u;
      long long v194 = 0u;
      uint64_t v63 = [(HMDHome *)v10 xpcMessageTransportFactory];
      uint64_t v64 = [v63 defaultTransport];
      id v65 = [v64 connections];

      uint64_t v66 = [v65 countByEnumeratingWithState:&v191 objects:v200 count:16];
      if (v66)
      {
        uint64_t v67 = v66;
        uint64_t v68 = *(void *)v192;
        do
        {
          for (uint64_t i = 0; i != v67; ++i)
          {
            if (*(void *)v192 != v68) {
              objc_enumerationMutation(v65);
            }
            id v70 = [*(id *)(*((void *)&v191 + 1) + 8 * i) processInfo];
            id v71 = [v70 locationAuthorization];

            if (v71) {
              [v62 addObject:v71];
            }
          }
          uint64_t v67 = [v65 countByEnumeratingWithState:&v191 objects:v200 count:16];
        }
        while (v67);
      }

      long long v189 = 0u;
      long long v190 = 0u;
      long long v187 = 0u;
      long long v188 = 0u;
      id v72 = v62;
      uint64_t v73 = [v72 countByEnumeratingWithState:&v187 objects:v199 count:16];
      id v8 = v186;
      if (v73)
      {
        uint64_t v74 = v73;
        uint64_t v75 = *(void *)v188;
        do
        {
          for (uint64_t j = 0; j != v74; ++j)
          {
            if (*(void *)v188 != v75) {
              objc_enumerationMutation(v72);
            }
            id v77 = *(void **)(*((void *)&v187 + 1) + 8 * j);
            if ([v77 isAuthorized]) {
              [v77 mark];
            }
          }
          uint64_t v74 = [v72 countByEnumeratingWithState:&v187 objects:v199 count:16];
        }
        while (v74);
      }

      id v61 = 0;
      id v7 = v185;
    }
  }
  else
  {
    id v61 = 0;
  }
  uint64_t v78 = [(__CFString *)v6 naturalLightingContext];
  id v79 = [(__CFString *)v6 setProperties];
  long long v183 = (void *)v78;
  if ([v79 containsObject:@"encodedNaturalLightingContext"])
  {
    id v80 = [(HMDHome *)v10 naturalLightingContext];
    char v81 = [v80 isEqual:v78];

    if ((v81 & 1) == 0)
    {
      id v82 = (void *)MEMORY[0x1D9452090]();
      long long v83 = v10;
      HMFGetOSLogHandle();
      uint64_t v84 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v85 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v86 = [(HMDHome *)v83 naturalLightingContext];
        *(_DWORD *)buf = 138543874;
        id v202 = v85;
        __int16 v203 = 2112;
        v204 = v86;
        __int16 v205 = 2112;
        uint64_t v206 = (HMDHome *)v78;
        _os_log_impl(&dword_1D49D5000, v84, OS_LOG_TYPE_INFO, "%{public}@Updating natural lighting context from %@ -> %@", buf, 0x20u);
      }
      [(HMDHome *)v83 setNaturalLightingContext:v78];
      id v8 = v186;
      [v186 markChanged];
    }
  }
  else
  {
  }
  long long v87 = [(__CFString *)v6 setProperties];
  if (![v87 containsObject:@"name"]) {
    goto LABEL_71;
  }
  uint64_t v88 = [(__CFString *)v6 name];
  uint64_t v89 = [(HMDHome *)v10 name];
  char v90 = [v88 isEqualToString:v89];

  if ((v90 & 1) == 0)
  {
    id v91 = [(HMDHome *)v10 _handleRenameHomeModel:v6 message:v7];
    long long v87 = v91;
    if (v91)
    {
      id v92 = v91;

      id v61 = v92;
    }
    [v8 markSaveToAssistant];
    [v8 markChanged];
LABEL_71:
  }
  uint64_t v93 = [(__CFString *)v6 creationDate];
  if (v93)
  {
    __int16 v94 = (void *)v93;
    uint64_t v95 = [(__CFString *)v6 creationDate];
    __int16 v96 = [(HMDHome *)v10 creationDate];
    char v97 = [v95 isEqualToDate:v96];

    if ((v97 & 1) == 0)
    {
      uint64_t v98 = [(__CFString *)v6 creationDate];
      [(HMDHome *)v10 setCreationDate:v98];

      [v8 markChanged];
    }
  }
  uint64_t v99 = [(__CFString *)v6 firstHAPAccessoryAddedDate];
  if (v99)
  {
    long long v100 = (void *)v99;
    long long v101 = [(__CFString *)v6 firstHAPAccessoryAddedDate];
    long long v102 = [(HMDHome *)v10 firstHAPAccessoryAddedDate];
    char v103 = [v101 isEqualToDate:v102];

    if ((v103 & 1) == 0)
    {
      int v104 = [(__CFString *)v6 firstHAPAccessoryAddedDate];
      [(HMDHome *)v10 setFirstHAPAccessoryAddedDate:v104];

      [v8 markChanged];
    }
  }
  long long v105 = [(__CFString *)v6 setProperties];
  if ([v105 containsObject:@"multiUserEnabled"])
  {
    long long v106 = [(__CFString *)v6 multiUserEnabled];
    int v107 = [v106 BOOLValue];
    int v108 = [(HMDHome *)v10 isMultiUserEnabled];

    if (v107 != v108)
    {
      __int16 v109 = (void *)MEMORY[0x1D9452090]();
      char v110 = v10;
      HMFGetOSLogHandle();
      id v111 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v111, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v112 = (id)objc_claimAutoreleasedReturnValue();
        __int16 v113 = [(__CFString *)v6 multiUserEnabled];
        __int16 v114 = @"YES";
        *(_DWORD *)buf = 138543874;
        id v202 = v112;
        __int16 v203 = 2112;
        if (!v113) {
          __int16 v114 = @"NO";
        }
        v204 = v114;
        __int16 v205 = 2112;
        uint64_t v206 = v110;
        _os_log_impl(&dword_1D49D5000, v111, OS_LOG_TYPE_INFO, "%{public}@Merging multi-user enabled value %@ into home: %@", buf, 0x20u);
      }
      [(HMDHome *)v110 _handleMultiUserEnabledChange:v6 message:v7];
      id v8 = v186;
      [v186 markChanged];
    }
  }
  else
  {
  }
  if ([(__CFString *)v6 propertyWasSet:@"soundCheckEnabled"])
  {
    uint64_t v115 = [(__CFString *)v6 soundCheckEnabled];
    int v116 = [v115 BOOLValue];
    int v117 = [(HMDHome *)v10 soundCheckEnabled];

    if (v116 != v117)
    {
      [(HMDHome *)v10 _handleSoundCheckChange:v6 message:v7];
      [v8 markChanged];
    }
  }
  if ([(__CFString *)v6 propertyWasSet:@"siriPhraseOptions"])
  {
    uint64_t v118 = [(__CFString *)v6 siriPhraseOptions];
    uint64_t v119 = [v118 unsignedIntegerValue];
    uint64_t v120 = [(HMDHome *)v10 siriPhraseOptions];

    if (v119 != v120)
    {
      [(HMDHome *)v10 _handleSiriPhraseOptionsStatusChange:v6 message:v7];
      [v8 markChanged];
    }
  }
  if ([(__CFString *)v6 propertyWasSet:@"locationServicesEnabled"])
  {
    uint64_t v121 = [(__CFString *)v6 locationServicesEnabled];
    int v122 = [v121 BOOLValue];
    int v123 = [(HMDHome *)v10 locationServicesEnabled];

    if (v122 != v123)
    {
      [(HMDHome *)v10 _handleLocationServicesEnabledChange:v6 message:v7];
      [v8 markChanged];
    }
  }
  if ([(__CFString *)v6 propertyWasSet:@"didOnboardLocationServices"])
  {
    uint64_t v124 = [(__CFString *)v6 didOnboardLocationServices];
    int v125 = [v124 BOOLValue];
    int v126 = [(HMDHome *)v10 didOnboardLocationServices];

    if (v125 != v126)
    {
      [(HMDHome *)v10 _handleDidOnboardLocationServicesChange:v6 message:v7];
      [v8 markChanged];
    }
  }
  id v127 = [(__CFString *)v6 setProperties];
  if ([v127 containsObject:@"hasAnyUserAcknowledgedCameraRecordingOnboarding"])
  {
    uint64_t v128 = [(__CFString *)v6 hasAnyUserAcknowledgedCameraRecordingOnboarding];
    int v129 = [v128 BOOLValue];
    int v130 = [(HMDHome *)v10 hasAnyUserAcknowledgedCameraRecordingOnboarding];

    if (v129 != v130)
    {
      uint64_t v131 = (void *)MEMORY[0x1D9452090]();
      long long v132 = v10;
      HMFGetOSLogHandle();
      uint64_t v133 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v133, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v134 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v135 = [(__CFString *)v6 hasAnyUserAcknowledgedCameraRecordingOnboarding];
        int v136 = @"YES";
        *(_DWORD *)buf = 138543874;
        id v202 = v134;
        __int16 v203 = 2112;
        if (!v135) {
          int v136 = @"NO";
        }
        v204 = v136;
        __int16 v205 = 2112;
        uint64_t v206 = v132;
        _os_log_impl(&dword_1D49D5000, v133, OS_LOG_TYPE_INFO, "%{public}@Merging home's has any user acknowledged camera recording onboarding value %@ into home: %@", buf, 0x20u);
      }
      [(HMDHome *)v132 _handleHasAnyUserAcknowledgedCameraRecordingOnboardingChange:v6 message:v7];
      id v8 = v186;
      [v186 markChanged];
    }
  }
  else
  {
  }
  int v137 = [(__CFString *)v6 setProperties];
  if ([v137 containsObject:@"hasOnboardedForAccessCode"])
  {
    uint64_t v138 = [(__CFString *)v6 hasOnboardedForAccessCode];
    int v139 = [v138 BOOLValue];
    int v140 = [(HMDHome *)v10 hasOnboardedForAccessCode];

    if (v139 != v140)
    {
      uint64_t v141 = (void *)MEMORY[0x1D9452090]();
      BOOL v142 = v10;
      HMFGetOSLogHandle();
      long long v143 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v143, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v144 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v145 = [(__CFString *)v6 hasOnboardedForAccessCode];
        [v145 BOOLValue];
        HMFBooleanToString();
        uint64_t v146 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        id v202 = v144;
        __int16 v203 = 2112;
        v204 = v146;
        __int16 v205 = 2112;
        uint64_t v206 = v142;
        _os_log_impl(&dword_1D49D5000, v143, OS_LOG_TYPE_INFO, "%{public}@Merging home's has onboarded for access code value %@ into home: %@", buf, 0x20u);
      }
      [(HMDHome *)v142 _handleSetHasOnboardedForAccessCodeChange:v6 message:v7];
      id v8 = v186;
      [v186 markChanged];
    }
  }
  else
  {
  }
  __int16 v147 = [(__CFString *)v6 setProperties];
  if ([v147 containsObject:@"hasOnboardedForWalletKey"])
  {
    long long v148 = [(__CFString *)v6 hasOnboardedForWalletKey];
    int v149 = [v148 BOOLValue];
    int v150 = [(HMDHome *)v10 hasOnboardedForWalletKey];

    if (v149 != v150)
    {
      long long v151 = (void *)MEMORY[0x1D9452090]();
      long long v152 = v10;
      HMFGetOSLogHandle();
      long long v153 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v153, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v154 = (id)objc_claimAutoreleasedReturnValue();
        long long v155 = [(__CFString *)v6 hasOnboardedForWalletKey];
        [v155 BOOLValue];
        HMFBooleanToString();
        long long v156 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        id v202 = v154;
        __int16 v203 = 2112;
        v204 = v156;
        __int16 v205 = 2112;
        uint64_t v206 = v152;
        _os_log_impl(&dword_1D49D5000, v153, OS_LOG_TYPE_INFO, "%{public}@Merging home's has onboarded for wallet key value %@ into home: %@", buf, 0x20u);
      }
      [(HMDHome *)v152 _handleSetHasOnboardedForWalletKeyChange:v6 message:v7];
      id v8 = v186;
      [v186 markChanged];
    }
  }
  else
  {
  }
  long long v157 = [(__CFString *)v6 setProperties];
  int v158 = [v157 containsObject:@"networkProtectionMode"];

  if (v158) {
    [(HMDHome *)v10 _handleUpdateNetworkProtectionWithHomeModel:v6 message:v7];
  }
  if (![(HMDHome *)v10 isOwnerUser])
  {
    BOOL v159 = [v8 source] != 2 && objc_msgSend(v8, "source") != 3;
    long long v160 = [(__CFString *)v6 setProperties];
    int v161 = [v160 containsObject:@"sharedHomeSourceVersion"];

    if (v161)
    {
      if (v159)
      {
        long long v162 = (void *)MEMORY[0x1D9452090]([(HMDHome *)v10 _handleReceivedNonCloudSourcedSharedHomeModel]);
        long long v163 = v10;
        HMFGetOSLogHandle();
        long long v164 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v164, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          id v165 = (id)objc_claimAutoreleasedReturnValue();
          long long v166 = [(HMDHome *)v163 sharedHomeSourceVersion];
          long long v167 = [(__CFString *)v6 sharedHomeSourceVersion];
          *(_DWORD *)buf = 138543874;
          id v202 = v165;
          __int16 v203 = 2112;
          v204 = v166;
          __int16 v205 = 2112;
          uint64_t v206 = v167;
          _os_log_impl(&dword_1D49D5000, v164, OS_LOG_TYPE_INFO, "%{public}@Updating shared home source version from %@ to %@", buf, 0x20u);
        }
        long long v168 = [(HMDHome *)v163 sharedHomeSourceVersion];
        long long v169 = [(__CFString *)v6 sharedHomeSourceVersion];
        char v170 = HMFEqualObjects();

        id v8 = v186;
        if ((v170 & 1) == 0)
        {
          long long v171 = [(__CFString *)v6 sharedHomeSourceVersion];
          [(HMDHome *)v163 setSharedHomeSourceVersion:v171];

          [v186 markChanged];
        }
      }
    }
  }
  if ([(__CFString *)v6 propertyWasSet:@"threadOperationalDataset"])
  {
    long long v172 = [(__CFString *)v6 threadOperationalDataset];

    if (v172) {
      [(HMDHome *)v10 updateThreadOperationalDatasetWithHomeModel:v6 message:v185];
    }
  }
  [(HMDHome *)v10 handleUpdatedCHIPPropertiesOnHomeModel:v6 actions:v8];
  long long v173 = [(HMDHome *)v185 responseHandler];

  if (v173)
  {
    long long v174 = [(HMDHome *)v185 responseHandler];
    ((void (**)(void, id, void))v174)[2](v174, v61, 0);
  }
  if (v182)
  {
    long long v175 = [(HMDHome *)v185 name];
    int v176 = HMFEqualObjects();

    long long v177 = [(HMDHome *)v10 presenceFeeder];
    long long v178 = v177;
    if (v176)
    {
      [v177 presenceAuthChanged];
    }
    else
    {
      long long v179 = [(HMDHome *)v10 presenceAuthStatus];
      [v178 presenceAuthStatusChangedForUser:v184 presenceAuthStatus:v179];
    }
  }
  id v180 = v61;

  return v180;
}

void __39__HMDHome_updateHomeWithModel_message___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v7 = HMFGetLogIdentifier();
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    int v10 = 138543874;
    id v11 = v7;
    __int16 v12 = 2112;
    uint64_t v13 = v8;
    __int16 v14 = 2112;
    uint64_t v15 = v9;
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Scheduling resubscription for new primary resident: %@, old primary: %@", (uint8_t *)&v10, 0x20u);
  }
  [*(id *)(a1 + 32) resubscribeForNotificationsOnResident:*(void *)(a1 + 56)];
}

- (void)_handleUpdateNetworkProtectionWithHomeModel:(id)a3 message:(id)a4
{
  id v9 = a4;
  id v6 = [a3 networkProtectionMode];
  uint64_t v7 = [v6 unsignedIntegerValue];

  if ([(HMDHome *)self protectionMode] != v7)
  {
    [(HMDHome *)self setProtectionMode:v7];
    uint64_t v8 = [v9 transactionResult];
    [(HMDHome *)self _handleNetworkProtectionModeChangeForTransaction:v8];
    [v8 markChanged];
  }
}

- (void)enableMediaNotifications:(BOOL)a3 directlyOnMediaAccessory:(id)a4 forStateManager:(id)a5 completion:(id)a6
{
}

- (id)timerWithTimerInterval:(double)a3
{
  id v3 = (void *)[objc_alloc(MEMORY[0x1E4F65580]) initWithTimeInterval:0 options:a3];
  return v3;
}

- (id)propertiesRegisteredForMediaProfileUniqueIdentifier:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self notificationRegistry];
  id v6 = [v5 propertiesRegisteredForMediaProfileUniqueIdentifier:v4];

  return v6;
}

- (id)accessoryForMediaProfileUniqueIdentifier:(id)a3
{
  id v3 = [(HMDHome *)self mediaProfileWithUUID:a3];
  id v4 = [v3 accessory];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v5 = v4;
  }
  else {
    id v5 = 0;
  }
  id v6 = v5;

  return v6;
}

- (BOOL)awdPrimaryReportingDevice
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = [(HMDHome *)self residentDeviceManager];
  id v4 = [v3 primaryResidentDevice];

  if (v4 && [v4 isReachable])
  {
    id v5 = [v4 device];
    char v6 = [v5 isCurrentDevice];
LABEL_19:

    goto LABEL_20;
  }
  if ([(HMDHome *)self isOwnerUser]
    && ([MEMORY[0x1E4F65548] productInfo],
        uint64_t v7 = objc_claimAutoreleasedReturnValue(),
        uint64_t v8 = [v7 productClass],
        v7,
        v8 == 1))
  {
    char v6 = 1;
  }
  else
  {
    if ([(HMDHome *)self isOwnerUser])
    {
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      id v9 = +[HMDAppleAccountManager sharedManager];
      int v10 = [v9 account];
      id v5 = [v10 devices];

      uint64_t v11 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)v19;
        while (2)
        {
          for (uint64_t i = 0; i != v12; ++i)
          {
            if (*(void *)v19 != v13) {
              objc_enumerationMutation(v5);
            }
            uint64_t v15 = [*(id *)(*((void *)&v18 + 1) + 8 * i) productInfo];
            uint64_t v16 = [v15 productClass];

            if (v16 == 1)
            {
              char v6 = 0;
              goto LABEL_19;
            }
          }
          uint64_t v12 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
          if (v12) {
            continue;
          }
          break;
        }
      }
      char v6 = 1;
      goto LABEL_19;
    }
    char v6 = 0;
  }
LABEL_20:

  return v6;
}

- (NSNumber)availableBorderRouters
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = self->_availableBorderRouters;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setAvailableBorderRouters:(id)a3
{
  id v4 = (NSNumber *)a3;
  os_unfair_recursive_lock_lock_with_options();
  availableBorderRouters = self->_availableBorderRouters;
  self->_availableBorderRouters = v4;

  os_unfair_recursive_lock_unlock();
}

- (NSNumber)availableBSPsCount
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = self->_availableBSPsCount;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setAvailableBSPsCount:(id)a3
{
  id v4 = (NSNumber *)a3;
  os_unfair_recursive_lock_lock_with_options();
  availableBSPsCount = self->_availableBSPsCount;
  self->_availableBSPsCount = v4;

  os_unfair_recursive_lock_unlock();
}

- (id)dumpMediaSessionDescription
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = (void *)MEMORY[0x1E4F1CA48];
  id v4 = [(HMDHome *)self mediaSessionStates];
  id v5 = objc_msgSend(v3, "arrayWithCapacity:", objc_msgSend(v4, "count"));

  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  char v6 = [(HMDHome *)self mediaSessionStates];
  uint64_t v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = [*(id *)(*((void *)&v13 + 1) + 8 * i) dumpState];
        [v5 addObject:v11];
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v8);
  }

  return v5;
}

- (id)dumpCharacteristicNotificationRegistry
{
  id v3 = (void *)MEMORY[0x1E4F28E78];
  id v4 = [(HMDHome *)self name];
  id v5 = [(HMDHome *)self uuid];
  char v6 = [v5 UUIDString];
  uint64_t v7 = [v3 stringWithFormat:@"Home %@/%@:", v4, v6];

  uint64_t v8 = [(HMDHome *)self notificationRegistry];
  uint64_t v9 = [v8 shortDescription];
  [v7 appendString:v9];

  return v7;
}

- (id)dumpActionSetDescription
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v3 = (void *)MEMORY[0x1E4F1CA48];
  id v4 = [(HMDHome *)self mediaSessionStates];
  id v5 = objc_msgSend(v3, "arrayWithCapacity:", objc_msgSend(v4, "count"));

  char v6 = [(HMDHome *)self actionSets];
  uint64_t v7 = (void *)[v6 copy];

  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v8 = v7;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v28 objects:v33 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v29 != v11) {
          objc_enumerationMutation(v8);
        }
        long long v13 = [*(id *)(*((void *)&v28 + 1) + 8 * i) dumpState];
        [v5 addObject:v13];
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v28 objects:v33 count:16];
    }
    while (v10);
  }

  long long v14 = [(HMDHome *)self triggerOwnedActionSets];
  long long v15 = (void *)[v14 copy];

  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v16 = v15;
  uint64_t v17 = [v16 countByEnumeratingWithState:&v24 objects:v32 count:16];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)v25;
    do
    {
      for (uint64_t j = 0; j != v18; ++j)
      {
        if (*(void *)v25 != v19) {
          objc_enumerationMutation(v16);
        }
        long long v21 = objc_msgSend(*(id *)(*((void *)&v24 + 1) + 8 * j), "dumpState", (void)v24);
        [v5 addObject:v21];
      }
      uint64_t v18 = [v16 countByEnumeratingWithState:&v24 objects:v32 count:16];
    }
    while (v18);
  }

  int v22 = (void *)[v5 copy];
  return v22;
}

- (void)_handleResponseForElectMessageToResident:(id)a3 error:(id)a4
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  if ([(HMDHome *)self remoteAccessIsEnabled])
  {
    id v8 = (void *)MEMORY[0x1D9452090]();
    uint64_t v9 = self;
    uint64_t v10 = HMFGetOSLogHandle();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
LABEL_5:

      goto LABEL_19;
    }
    uint64_t v11 = HMFGetLogIdentifier();
    uint64_t v12 = [v6 userID];
    int v36 = 138543618;
    uint64_t v37 = v11;
    __int16 v38 = 2112;
    uint64_t v39 = v12;
    long long v13 = "%{public}@Received response for ping message to resident %@. Remote access is already setup, dropping response";
LABEL_4:
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, v13, (uint8_t *)&v36, 0x16u);

    goto LABEL_5;
  }
  if (v7)
  {
    long long v14 = [v7 domain];
    if ([v14 isEqualToString:*MEMORY[0x1E4F6A888]])
    {
      if ([v7 code] == 16)
      {

LABEL_21:
        id v8 = (void *)MEMORY[0x1D9452090]();
        uint64_t v9 = self;
        uint64_t v10 = HMFGetOSLogHandle();
        if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO)) {
          goto LABEL_5;
        }
        uint64_t v11 = HMFGetLogIdentifier();
        uint64_t v12 = [v6 userID];
        int v36 = 138543618;
        uint64_t v37 = v11;
        __int16 v38 = 2112;
        uint64_t v39 = v12;
        long long v13 = "%{public}@Failed to ping resident %@, will try again at next heartbeat";
        goto LABEL_4;
      }
      uint64_t v35 = [v7 code];

      if (v35 == 23) {
        goto LABEL_21;
      }
    }
    else
    {
    }
    long long v28 = (void *)MEMORY[0x1D9452090]();
    long long v29 = self;
    long long v30 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      long long v31 = HMFGetLogIdentifier();
      uint64_t v32 = [v6 userID];
      int v36 = 138543874;
      uint64_t v37 = v31;
      __int16 v38 = 2112;
      uint64_t v39 = v32;
      __int16 v40 = 2112;
      id v41 = v7;
      _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_INFO, "%{public}@Failed to ping resident %@, but error %@ is not specific IDS error, will not re-try at next heartbeat", (uint8_t *)&v36, 0x20u);
    }
    int v33 = [(HMDHome *)v29 heartbeatPingMessagesQueuedWithServer];
    uint64_t v34 = [v6 userID];
    [v33 addObject:v34];
  }
  else
  {
    long long v15 = (void *)MEMORY[0x1D9452090]();
    id v16 = self;
    uint64_t v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = HMFGetLogIdentifier();
      uint64_t v19 = [v6 userID];
      int v36 = 138543618;
      uint64_t v37 = v18;
      __int16 v38 = 2112;
      uint64_t v39 = v19;
      _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Successfully sent ping message to resident %@, remembering queued message", (uint8_t *)&v36, 0x16u);
    }
    long long v20 = [(HMDHome *)v16 heartbeatPingMessagesQueuedWithServer];
    long long v21 = [v6 userID];
    [v20 addObject:v21];

    int v22 = (void *)MEMORY[0x1D9452090]();
    uint64_t v23 = v16;
    long long v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      long long v25 = HMFGetLogIdentifier();
      int v36 = 138543362;
      uint64_t v37 = v25;
      _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_INFO, "%{public}@Home does not have remote access enabled, requesting electing a remote peer", (uint8_t *)&v36, 0xCu);
    }
    long long v26 = [(HMDHome *)v23 homeManager];
    long long v27 = [(HMDHome *)v23 uuid];
    [v26 electRemoteAccessPeerForHome:v27];
  }
LABEL_19:
}

- (void)_remoteAccessHealthMonitorTimerDidFire
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (![(HMDHome *)self remoteAccessIsEnabled])
  {
    id v3 = [(HMDHome *)self _residentUsers];
    objc_initWeak(&location, self);
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id obj = v3;
    uint64_t v4 = [obj countByEnumeratingWithState:&v28 objects:v37 count:16];
    if (v4)
    {
      uint64_t v25 = *(void *)v29;
      do
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v29 != v25) {
            objc_enumerationMutation(obj);
          }
          id v6 = *(void **)(*((void *)&v28 + 1) + 8 * i);
          id v7 = [(HMDHome *)self heartbeatPingMessagesQueuedWithServer];
          id v8 = [v6 userID];
          char v9 = [v7 containsObject:v8];

          uint64_t v10 = (void *)MEMORY[0x1D9452090]();
          uint64_t v11 = self;
          if (v9)
          {
            HMFGetOSLogHandle();
            uint64_t v12 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              id v13 = (id)objc_claimAutoreleasedReturnValue();
              long long v14 = [v6 userID];
              *(_DWORD *)buf = 138543618;
              id v34 = v13;
              __int16 v35 = 2112;
              int v36 = v14;
              _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Remote access health monitor fired, but we already have a ping queued with server to %@", buf, 0x16u);
            }
          }
          else
          {
            HMFGetOSLogHandle();
            long long v15 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              id v16 = (id)objc_claimAutoreleasedReturnValue();
              uint64_t v17 = [v6 userID];
              *(_DWORD *)buf = 138543618;
              id v34 = v16;
              __int16 v35 = 2112;
              int v36 = v17;
              _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@Remote access health monitor fired, sending ping elect message to %@", buf, 0x16u);
            }
            aBlock[0] = MEMORY[0x1E4F143A8];
            aBlock[1] = 3221225472;
            aBlock[2] = __49__HMDHome__remoteAccessHealthMonitorTimerDidFire__block_invoke;
            aBlock[3] = &unk_1E6A07328;
            objc_copyWeak(&v27, &location);
            void aBlock[4] = v6;
            uint64_t v18 = _Block_copy(aBlock);
            uint64_t v19 = [(HMDHome *)v11 homeManager];
            long long v20 = [v19 messageDispatcher];
            long long v21 = [v6 userID];
            int v22 = [v6 userID];
            uint64_t v23 = [(HMDHome *)v11 workQueue];
            [v20 electDeviceForHH1User:v21 destination:v22 deviceCapabilities:0 responseTimeout:v23 responseQueue:v18 responseHandler:600.0];

            objc_destroyWeak(&v27);
          }
        }
        uint64_t v4 = [obj countByEnumeratingWithState:&v28 objects:v37 count:16];
      }
      while (v4);
    }

    objc_destroyWeak(&location);
  }
}

void __49__HMDHome__remoteAccessHealthMonitorTimerDidFire__block_invoke(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v6)
    {
      uint64_t v4 = [v6 userInfo];
      id v5 = [v4 objectForKeyedSubscript:*MEMORY[0x1E4F28A50]];

      [WeakRetained _handleResponseForElectMessageToResident:*(void *)(a1 + 32) error:v5];
    }
    else
    {
      [WeakRetained _handleResponseForElectMessageToResident:*(void *)(a1 + 32) error:0];
    }
  }
}

- (void)remoteAccessHealthMonitorTimerDidFire
{
  if (isiOSDevice())
  {
    id v3 = [(HMDHome *)self workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __48__HMDHome_remoteAccessHealthMonitorTimerDidFire__block_invoke;
    block[3] = &unk_1E6A19B30;
    void block[4] = self;
    dispatch_async(v3, block);
  }
}

uint64_t __48__HMDHome_remoteAccessHealthMonitorTimerDidFire__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _remoteAccessHealthMonitorTimerDidFire];
}

- (void)_handleDidReceiveIDSMessageWithNoListenerFromAddress:(id)a3
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (__CFString *)a3;
  int v5 = shouldLogPrivateInformation();
  id v6 = @"...";
  if (v5) {
    id v6 = v4;
  }
  id v7 = v6;
  if ([(HMDHome *)self remoteAccessIsEnabled])
  {
    id v8 = (void *)MEMORY[0x1D9452090]();
    char v9 = self;
    uint64_t v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v32 = v11;
      __int16 v33 = 2112;
      id v34 = v7;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Received IDS message from %@ but home has remote access enabled, ignoring notification", buf, 0x16u);
    }
  }
  else
  {
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    uint64_t v12 = [(HMDHome *)self _residentUsers];
    uint64_t v13 = [v12 countByEnumeratingWithState:&v26 objects:v30 count:16];
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = *(void *)v27;
      while (2)
      {
        for (uint64_t i = 0; i != v14; ++i)
        {
          if (*(void *)v27 != v15) {
            objc_enumerationMutation(v12);
          }
          uint64_t v17 = *(void **)(*((void *)&v26 + 1) + 8 * i);
          if ([v17 configurationState] == 2)
          {
            uint64_t v18 = [v17 userID];
            int v19 = [v18 isEqualToString:v4];

            if (v19)
            {
              long long v20 = (void *)MEMORY[0x1D9452090]();
              long long v21 = self;
              int v22 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
              {
                uint64_t v23 = HMFGetLogIdentifier();
                *(_DWORD *)buf = 138543618;
                uint64_t v32 = v23;
                __int16 v33 = 2112;
                id v34 = v7;
                _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_INFO, "%{public}@Home does not have remote access enabled but we received a message from resident at %@, requesting electing a remote peer", buf, 0x16u);
              }
              long long v24 = [(HMDHome *)v21 homeManager];
              uint64_t v25 = [(HMDHome *)v21 uuid];
              [v24 electRemoteAccessPeerForHome:v25];

              goto LABEL_20;
            }
          }
        }
        uint64_t v14 = [v12 countByEnumeratingWithState:&v26 objects:v30 count:16];
        if (v14) {
          continue;
        }
        break;
      }
    }
LABEL_20:
  }
}

- (void)handleDidReceiveIDSMessageWithNoListener:(id)a3
{
  id v4 = a3;
  int v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __52__HMDHome_handleDidReceiveIDSMessageWithNoListener___block_invoke;
  v7[3] = &unk_1E6A197C8;
  id v8 = v4;
  char v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __52__HMDHome_handleDidReceiveIDSMessageWithNoListener___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) userInfo];

  if (v2)
  {
    id v3 = [*(id *)(a1 + 32) userInfo];
    objc_msgSend(v3, "hmf_stringForKey:", @"kIDSMessageSourceIDKey");
    id v5 = (id)objc_claimAutoreleasedReturnValue();

    id v4 = v5;
    if (v5)
    {
      [*(id *)(a1 + 40) _handleDidReceiveIDSMessageWithNoListenerFromAddress:v5];
      id v4 = v5;
    }
  }
}

- (void)handleActiveAccountChanged:(id)a3
{
  id v4 = [a3 userInfo];
  id v5 = [v4 objectForKeyedSubscript:@"HMDAccountNotificationKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v6 = v5;
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;

  id v8 = [(HMDHome *)self workQueue];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __38__HMDHome_handleActiveAccountChanged___block_invoke;
  v10[3] = &unk_1E6A197C8;
  void v10[4] = self;
  id v11 = v7;
  id v9 = v7;
  dispatch_async(v8, v10);
}

void __38__HMDHome_handleActiveAccountChanged___block_invoke(uint64_t a1)
{
}

- (void)handleAccountHandlesUpdated:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __39__HMDHome_handleAccountHandlesUpdated___block_invoke;
  v7[3] = &unk_1E6A197C8;
  id v8 = v4;
  id v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __39__HMDHome_handleAccountHandlesUpdated___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) object];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v7 = v3;

  id v4 = +[HMDAppleAccountManager sharedManager];
  id v5 = [v4 account];
  int v6 = [v7 isEqualToAccount:v5];

  if (v6) {
    __updateAccountHandleForCurrentUser(*(void **)(a1 + 40), v7);
  }
}

- (void)removeUnconfiguredResidentDeviceWithUserID:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __54__HMDHome_removeUnconfiguredResidentDeviceWithUserID___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __54__HMDHome_removeUnconfiguredResidentDeviceWithUserID___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) unconfiguredResidentDevices];
  objc_msgSend(v2, "hmf_firstObjectWithValue:forKeyPath:", *(void *)(a1 + 40), @"userID");
  id v4 = (id)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    [v4 setConfigurationState:2];
    id v3 = [*(id *)(a1 + 32) unconfiguredResidentDevices];
    [v3 removeObject:v4];
  }
}

- (void)addUnconfiguredResidentDevice:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __41__HMDHome_addUnconfiguredResidentDevice___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __41__HMDHome_addUnconfiguredResidentDevice___block_invoke(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id v2 = [*(id *)(a1 + 32) unconfiguredResidentDevices];
  uint64_t v3 = [(HMDResidentUser *)v2 countByEnumeratingWithState:&v31 objects:v40 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v32;
LABEL_3:
    uint64_t v6 = 0;
    while (1)
    {
      if (*(void *)v32 != v5) {
        objc_enumerationMutation(v2);
      }
      id v7 = [*(id *)(*((void *)&v31 + 1) + 8 * v6) device];
      int v8 = [v7 isEqual:*(void *)(a1 + 40)];

      if (v8) {
        break;
      }
      if (v4 == ++v6)
      {
        uint64_t v4 = [(HMDResidentUser *)v2 countByEnumeratingWithState:&v31 objects:v40 count:16];
        if (v4) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
    long long v21 = (void *)MEMORY[0x1D9452090]();
    id v22 = *(id *)(a1 + 32);
    uint64_t v23 = HMFGetOSLogHandle();
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_INFO)) {
      goto LABEL_25;
    }
    long long v24 = HMFGetLogIdentifier();
    uint64_t v25 = [*(id *)(a1 + 40) shortDescription];
    *(_DWORD *)buf = 138543618;
    uint64_t v37 = v24;
    __int16 v38 = 2112;
    uint64_t v39 = v25;
    long long v26 = "%{public}@Not adding resident device, %@, to unconfigured list since it already exists";
  }
  else
  {
LABEL_9:

    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    objc_msgSend(*(id *)(a1 + 32), "_residentUsers", 0);
    id v2 = (HMDResidentUser *)objc_claimAutoreleasedReturnValue();
    uint64_t v9 = [(HMDResidentUser *)v2 countByEnumeratingWithState:&v27 objects:v35 count:16];
    if (!v9)
    {
LABEL_17:

      uint64_t v15 = (void *)MEMORY[0x1D9452090]();
      id v16 = *(id *)(a1 + 32);
      uint64_t v17 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        uint64_t v18 = HMFGetLogIdentifier();
        int v19 = [*(id *)(a1 + 40) shortDescription];
        *(_DWORD *)buf = 138543618;
        uint64_t v37 = v18;
        __int16 v38 = 2112;
        uint64_t v39 = v19;
        _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Adding resident device, %@, to unconfigured list and posting notification", buf, 0x16u);
      }
      id v2 = [[HMDResidentUser alloc] initWithDevice:*(void *)(a1 + 40) home:*(void *)(a1 + 32) pairingIdentity:0 configurationState:1];
      long long v20 = [*(id *)(a1 + 32) unconfiguredResidentDevices];
      [v20 addObject:v2];

      [(HMDUser *)v2 setHome:*(void *)(a1 + 32)];
      [*(id *)(a1 + 32) _configureUnconfiguredResident:v2 desiredConfigState:2];
      goto LABEL_26;
    }
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v28;
LABEL_11:
    uint64_t v12 = 0;
    while (1)
    {
      if (*(void *)v28 != v11) {
        objc_enumerationMutation(v2);
      }
      uint64_t v13 = [*(id *)(*((void *)&v27 + 1) + 8 * v12) device];
      int v14 = [v13 isEqual:*(void *)(a1 + 40)];

      if (v14) {
        break;
      }
      if (v10 == ++v12)
      {
        uint64_t v10 = [(HMDResidentUser *)v2 countByEnumeratingWithState:&v27 objects:v35 count:16];
        if (v10) {
          goto LABEL_11;
        }
        goto LABEL_17;
      }
    }
    long long v21 = (void *)MEMORY[0x1D9452090]();
    id v22 = *(id *)(a1 + 32);
    uint64_t v23 = HMFGetOSLogHandle();
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_INFO)) {
      goto LABEL_25;
    }
    long long v24 = HMFGetLogIdentifier();
    uint64_t v25 = [*(id *)(a1 + 40) shortDescription];
    *(_DWORD *)buf = 138543618;
    uint64_t v37 = v24;
    __int16 v38 = 2112;
    uint64_t v39 = v25;
    long long v26 = "%{public}@Not adding resident device, %@, to unconfigured list since it already exists in users";
  }
  _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_INFO, v26, buf, 0x16u);

LABEL_25:
LABEL_26:
}

- (void)_handleAccessoryReachabilityUpdatesTimerFired
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v3 = [(NSMutableSet *)self->_reachabilityUpdatedAccessories allObjects];
  [(NSMutableSet *)self->_reachabilityUpdatedAccessories removeAllObjects];
  os_unfair_recursive_lock_unlock();
  uint64_t v4 = self;
  id v66 = v3;
  uint64_t v58 = [v66 count];
  uint64_t v5 = (void *)MEMORY[0x1D9452090]();
  char v69 = v4;
  uint64_t v6 = HMFGetOSLogHandle();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (v58)
  {
    if (v7)
    {
      int v8 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v96 = v8;
      __int16 v97 = 2048;
      uint64_t v98 = v58;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Sending accessory reachability updates - number of entries %lu", buf, 0x16u);
    }
    uint64_t v68 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:v58];
    uint64_t v60 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:v58];
    uint64_t v67 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:v58];
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    id obj = [(HMDHome *)v69 accessories];
    uint64_t v9 = [obj countByEnumeratingWithState:&v82 objects:buf count:16];
    if (v9)
    {
      id v63 = *(id *)v83;
      uint64_t v61 = *MEMORY[0x1E4F2C518];
      uint64_t v59 = *MEMORY[0x1E4F2C828];
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(id *)v83 != v63) {
            objc_enumerationMutation(obj);
          }
          uint64_t v11 = *(void **)(*((void *)&v82 + 1) + 8 * i);
          uint64_t v12 = objc_msgSend(v11, "uuid", v58);
          uint64_t v13 = [v12 UUIDString];

          if ([v66 containsObject:v13])
          {
            int v14 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v11, "isReachableForXPCClients"));
            uint64_t v15 = [v11 messageSendPolicy];
            id v16 = objc_msgSend(v68, "hmf_mutableDictionaryForKey:", v15);
            if (!v16)
            {
              id v16 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:v58];
              [v68 setObject:v16 forKey:v15];
            }
            uint64_t v17 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:3];
            [v17 setObject:v14 forKeyedSubscript:@"kAccessoryIsReachableKey"];
            uint64_t v18 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v11, "reachableTransports"));
            [v17 setObject:v18 forKeyedSubscript:v61];

            id v19 = v11;
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              long long v20 = v19;
            }
            else {
              long long v20 = 0;
            }
            id v21 = v20;

            if (v21)
            {
              id v22 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v21, "suspendedState"));
              [v17 setObject:v22 forKeyedSubscript:v59];
            }
            uint64_t v23 = (void *)[v17 copy];
            [v16 setObject:v23 forKeyedSubscript:v13];

            if (([v15 entitlements] & 4) == 0)
            {
              long long v24 = objc_msgSend(v60, "hmf_mutableDictionaryForKey:", v15);
              if (!v24)
              {
                long long v24 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:v58];
                [v60 setObject:v24 forKey:v15];
              }
              uint64_t v93 = @"kAccessoryIsReachableKey";
              __int16 v94 = v14;
              uint64_t v25 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v94 forKeys:&v93 count:1];
              [v24 setObject:v25 forKeyedSubscript:v13];
            }
          }
        }
        uint64_t v9 = [obj countByEnumeratingWithState:&v82 objects:buf count:16];
      }
      while (v9);
    }

    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    id v64 = [v68 allKeys];
    uint64_t v26 = [v64 countByEnumeratingWithState:&v78 objects:v92 count:16];
    if (v26)
    {
      uint64_t v27 = *(void *)v79;
      uint64_t v28 = *MEMORY[0x1E4F2C2C8];
      do
      {
        for (uint64_t j = 0; j != v26; ++j)
        {
          if (*(void *)v79 != v27) {
            objc_enumerationMutation(v64);
          }
          long long v30 = *(void **)(*((void *)&v78 + 1) + 8 * j);
          long long v31 = objc_msgSend(v68, "hmf_mutableDictionaryForKey:", v30, v58);
          if ([v31 count])
          {
            long long v32 = (void *)MEMORY[0x1E4F654B0];
            long long v33 = [(HMDHome *)v69 messageDestination];
            char v90 = @"kAccessoriesListKey";
            long long v34 = (void *)[v31 copy];
            id v91 = v34;
            uint64_t v35 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v91 forKeys:&v90 count:1];
            int v36 = [v32 messageWithName:v28 destination:v33 payload:v35];

            if (([v30 entitlements] & 4) != 0) {
              uint64_t v37 = -[HMDHomeManagerXPCMessageSendPolicy initWithEntitlements:options:active:]([HMDHomeManagerXPCMessageSendPolicy alloc], "initWithEntitlements:options:active:", [v30 entitlements], objc_msgSend(v30, "options"), 1);
            }
            else {
              uint64_t v37 = -[HMDHomeManagerXPCMessageSendPolicy initWithEntitlements:options:active:]([HMDHomeManagerXPCMessageSendPolicy alloc], "initWithEntitlements:options:active:", [v30 entitlements] | 4, objc_msgSend(v30, "options"), 1);
            }
            __int16 v38 = v37;
            [v36 setSendPolicy:v37];

            [v67 addObject:v36];
          }
        }
        uint64_t v26 = [v64 countByEnumeratingWithState:&v78 objects:v92 count:16];
      }
      while (v26);
    }

    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    id v65 = [v60 allKeys];
    uint64_t v39 = [v65 countByEnumeratingWithState:&v74 objects:v89 count:16];
    if (v39)
    {
      uint64_t v40 = *(void *)v75;
      uint64_t v41 = *MEMORY[0x1E4F2C2C8];
      do
      {
        for (uint64_t k = 0; k != v39; ++k)
        {
          if (*(void *)v75 != v40) {
            objc_enumerationMutation(v65);
          }
          char v43 = *(void **)(*((void *)&v74 + 1) + 8 * k);
          int v44 = objc_msgSend(v68, "hmf_mutableDictionaryForKey:", v43, v58);
          if ([v44 count])
          {
            id v45 = (void *)MEMORY[0x1E4F654B0];
            uint64_t v46 = [(HMDHome *)v69 messageDestination];
            long long v87 = @"kAccessoriesListKey";
            id v47 = (void *)[v44 copy];
            uint64_t v88 = v47;
            id v48 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v88 forKeys:&v87 count:1];
            id v49 = [v45 messageWithName:v41 destination:v46 payload:v48];

            [v49 setRequiresNoSPIEntitlement:1];
            id v50 = -[HMDHomeManagerXPCMessageSendPolicy initWithEntitlements:options:active:]([HMDHomeManagerXPCMessageSendPolicy alloc], "initWithEntitlements:options:active:", [v43 entitlements], objc_msgSend(v43, "options"), 1);
            [v49 setSendPolicy:v50];
            [v67 addObject:v49];
          }
        }
        uint64_t v39 = [v65 countByEnumeratingWithState:&v74 objects:v89 count:16];
      }
      while (v39);
    }

    int v51 = (void *)[v67 copy];
  }
  else
  {
    if (v7)
    {
      uint64_t v52 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      __int16 v96 = v52;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Reachability update timer fired but no entries", buf, 0xCu);
    }
    int v51 = (void *)MEMORY[0x1E4F1CBF0];
  }

  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  uint64_t v53 = [v51 countByEnumeratingWithState:&v70 objects:v86 count:16];
  if (v53)
  {
    uint64_t v54 = *(void *)v71;
    do
    {
      for (uint64_t m = 0; m != v53; ++m)
      {
        if (*(void *)v71 != v54) {
          objc_enumerationMutation(v51);
        }
        uint64_t v56 = *(void *)(*((void *)&v70 + 1) + 8 * m);
        id v57 = [(HMDHome *)v69 msgDispatcher];
        [v57 sendMessage:v56];
      }
      uint64_t v53 = [v51 countByEnumeratingWithState:&v70 objects:v86 count:16];
    }
    while (v53);
  }
}

- (void)notifyClientsOfReachabilityUpdateForAccessory:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __57__HMDHome_notifyClientsOfReachabilityUpdateForAccessory___block_invoke;
  v7[3] = &unk_1E6A197C8;
  id v8 = v4;
  uint64_t v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __57__HMDHome_notifyClientsOfReachabilityUpdateForAccessory___block_invoke(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v2 = [*(id *)(a1 + 32) uuid];
  uint64_t v3 = [v2 UUIDString];

  if (v3)
  {
    os_unfair_recursive_lock_lock_with_options();
    if ([*(id *)(*(void *)(a1 + 40) + 112) containsObject:v3])
    {
      BOOL v4 = 0;
    }
    else
    {
      [*(id *)(*(void *)(a1 + 40) + 112) addObject:v3];
      BOOL v4 = [*(id *)(*(void *)(a1 + 40) + 112) count] == 1;
    }
    uint64_t v10 = os_unfair_recursive_lock_unlock();
    uint64_t v11 = (void *)MEMORY[0x1D9452090](v10);
    id v12 = *(id *)(a1 + 40);
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      int v14 = HMFGetLogIdentifier();
      uint64_t v15 = [*(id *)(a1 + 32) shortDescription];
      id v16 = HMFBooleanToString();
      int v17 = 138543874;
      uint64_t v18 = v14;
      __int16 v19 = 2112;
      long long v20 = v15;
      __int16 v21 = 2112;
      id v22 = v16;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Queuing up reachability update for accessory %@. Started timer: %@", (uint8_t *)&v17, 0x20u);
    }
    if (v4) {
      [*(id *)(*(void *)(a1 + 40) + 104) resume];
    }
  }
  else
  {
    uint64_t v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = *(id *)(a1 + 40);
    BOOL v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v8 = HMFGetLogIdentifier();
      uint64_t v9 = *(void **)(a1 + 32);
      int v17 = 138543618;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      long long v20 = v9;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_ERROR, "%{public}@Attempt to queue reachability update for accessory with no UUID - %@", (uint8_t *)&v17, 0x16u);
    }
  }
}

- (void)_handleDisableNotificationsTimerFired
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v3);

  BOOL v4 = [(HMDHome *)self notificationRegistrations];
  uint64_t v5 = (void *)[v4 copy];

  id v6 = [(HMDHome *)self notificationDeregistrations];
  BOOL v7 = (void *)[v6 copy];

  id v8 = (void *)MEMORY[0x1D9452090]();
  uint64_t v9 = self;
  uint64_t v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    id v12 = [v5 shortDescription];
    uint64_t v13 = [v7 shortDescription];
    *(_DWORD *)buf = 138543874;
    uint64_t v41 = v11;
    __int16 v42 = 2112;
    char v43 = v12;
    __int16 v44 = 2112;
    id v45 = v13;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Notification disable timer fired - registrations %@  deregistrations %@", buf, 0x20u);
  }
  [(HMDHome *)v9 setDisableNotificationTimer:0];
  int v14 = [(HMDHome *)v9 notificationRegistrationsForAppleMediaAccessories];
  uint64_t v15 = [v14 count];

  [(HMDHome *)v9 _applyNotificationDeregistrations];
  id v16 = [(HMDHome *)v9 notificationRegistrations];
  uint64_t v17 = [v16 count];

  uint64_t v18 = [(HMDHome *)v9 notificationRegistrationsForAppleMediaAccessories];
  uint64_t v19 = [v18 count];

  if (!v19 && v15)
  {
    long long v20 = (void *)MEMORY[0x1D9452090]();
    __int16 v21 = v9;
    id v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      uint64_t v23 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v41 = v23;
      _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_INFO, "%{public}@Modifying Apple Media notification registrations with devices due to HomeKit client no longer active", buf, 0xCu);
    }
    -[HMDHome _subscribeForHomeAppleMediaNotificationsOnDirectTransports:](v21, 0);
  }
  if (!v17)
  {
    long long v24 = (void *)MEMORY[0x1D9452090]();
    uint64_t v25 = v9;
    uint64_t v26 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      uint64_t v27 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v41 = v27;
      _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_INFO, "%{public}@Modifying notification registrations with resident due to HomeKit client no longer active", buf, 0xCu);
    }
    [(HMDHome *)v25 _subscribeForHomeNotificationsFromRemoteGateway:0];
    -[HMDHome _subscribeForHomeNotificationsOnDirectTransports:](v25, 0);
    uint64_t v28 = [MEMORY[0x1E4F1C9C8] date];
    [(HMDHome *)v25 setNotificationsUpdatedTime:v28];

    long long v29 = [(HMDHome *)v25 homeManager];
    long long v30 = [v29 chipDataSource];
    [v30 updateNotificationsEnabled:0 forHome:v25 keepAliveOnly:0];

    long long v31 = objc_msgSend(NSNumber, "numberWithBool:", 0, @"kCharacteristicNotificationEnableKey");
    v39[0] = v31;
    v38[1] = *MEMORY[0x1E4F2D210];
    long long v32 = [NSNumber numberWithBool:0];
    v39[1] = v32;
    v38[2] = @"kCharacteristicNotificationEnableTime";
    long long v33 = [(HMDHome *)v25 notificationsUpdatedTime];
    v39[2] = v33;
    long long v34 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v39 forKeys:v38 count:3];

    uint64_t v35 = [MEMORY[0x1E4F65480] entitledMessageWithName:*MEMORY[0x1E4F2ECB0] messagePayload:v34];
    int v36 = [(HMDHome *)v25 msgDispatcher];
    uint64_t v37 = [(HMDHome *)v25 uuid];
    [v36 sendMessage:v35 target:v37];

    logAndPostNotification(@"HMDHomeDidDisableCharacteristicNotifyEventNotification", v25, 0);
  }
}

- (void)_enableMediaNotifications:(void *)a3 forMediaAccessory:
{
  v8[1] = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (a1)
  {
    id v6 = [a1 workQueue];
    dispatch_assert_queue_V2(v6);

    if (([a1 isCurrentDevicePrimaryResident] & 1) != 0
      || !-[HMDHome supportsUnifiedMediaNotificationsOnResidents](a1))
    {
      -[HMDHome _enableMediaNotifications:directlyOnMediaAccessory:completion:](a1, a2, v5, 0);
    }
    else
    {
      v8[0] = v5;
      BOOL v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v8 count:1];
      [a1 _subscribeForHomeNotificationsFromRemoteGateway:a2 accessories:v7];
    }
  }
}

- (void)_enableMediaNotifications:(void *)a3 directlyOnMediaAccessory:(void *)a4 completion:
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  if (a1)
  {
    uint64_t v9 = [a1 workQueue];
    dispatch_assert_queue_V2(v9);

    uint64_t v10 = [v7 device];
    uint64_t v11 = [v7 mediaProfile];
    id v12 = v11;
    if (v10 && v11)
    {
      uint64_t v13 = -[HMDHome mediaNotificationPayloadForProfile:](a1, v11);
      int v14 = (void *)MEMORY[0x1D9452090]();
      id v15 = a1;
      id v16 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        uint64_t v17 = HMFGetLogIdentifier();
        HMFBooleanToString();
        uint64_t v18 = v23 = v14;
        *(_DWORD *)buf = 138544130;
        uint64_t v25 = v17;
        __int16 v26 = 2112;
        id v27 = v18;
        __int16 v28 = 2112;
        long long v29 = v12;
        __int16 v30 = 2112;
        long long v31 = v10;
        _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, "%{public}@Registering for media notifications (enabled: %@) on profile %@ with device %@", buf, 0x2Au);

        int v14 = v23;
      }

      [v15 _modifyCharacteristicNotifications:MEMORY[0x1E4F1CC08] mediaNotifications:v13 actionSetNotificationPayload:MEMORY[0x1E4F1CBF0] enableNotification:a2 withDevice:v10 completion:v8];
    }
    else
    {
      uint64_t v19 = (void *)MEMORY[0x1D9452090]();
      id v20 = a1;
      __int16 v21 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        id v22 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138544130;
        uint64_t v25 = v22;
        __int16 v26 = 2112;
        id v27 = v7;
        __int16 v28 = 2112;
        long long v29 = v10;
        __int16 v30 = 2112;
        long long v31 = v12;
        _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_ERROR, "%{public}@Unable to enable media notifications on apple media accessory %@ due to no device (%@) or profile (%@)", buf, 0x2Au);
      }
      if (!v8) {
        goto LABEL_12;
      }
      uint64_t v13 = [MEMORY[0x1E4F28C58] hmfErrorWithCode:8];
      v8[2](v8, v13);
    }

LABEL_12:
  }
}

- (id)mediaNotificationPayloadForProfile:(void *)a1
{
  v10[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  BOOL v4 = v3;
  if (a1)
  {
    if (!v3) {
      _HMFPreconditionFailure();
    }
    id v5 = [v3 uniqueIdentifier];
    id v6 = [v5 UUIDString];

    uint64_t v9 = v6;
    id v7 = +[HMDMediaSession mediaPropertyMessageKeys];
    v10[0] = v7;
    a1 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:&v9 count:1];
  }
  return a1;
}

- (void)userManagementOperationDidFinish:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __44__HMDHome_userManagementOperationDidFinish___block_invoke;
  v7[3] = &unk_1E6A197C8;
  id v8 = v4;
  uint64_t v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __44__HMDHome_userManagementOperationDidFinish___block_invoke(uint64_t a1)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  int v2 = [*(id *)(a1 + 32) isAuditOperation];
  id v3 = *(void **)(a1 + 40);
  if (v2)
  {
    id v4 = [v3 backingStore];
    id v5 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    id v6 = [v4 transaction:@"HMDUserManagementOperationDelete" options:v5];

    id v7 = *(void **)(a1 + 40);
    id v8 = [*(id *)(a1 + 32) accessory];
    uint64_t v9 = [v8 uuid];
    uint64_t v10 = [v7 accessoryWithUUID:v9];

    uint64_t v11 = [v10 home];
    id v12 = (void *)v11;
    if (!v10 || !v11) {
      goto LABEL_15;
    }
    if ([*(id *)(a1 + 32) isExpired])
    {
      uint64_t v13 = [v10 transactionWithObjectChangeType:2];
      int v14 = [HMDUserManagementOperationTimestamp alloc];
      id v15 = [*(id *)(a1 + 40) currentDevice];
      id v16 = [(HMDUserManagementOperationTimestamp *)v14 initWithDevice:v15 state:2];
      [v13 setPairingsAuditedTimestamp:v16];

      uint64_t v17 = (void *)MEMORY[0x1D9452090]();
      id v18 = *(id *)(a1 + 40);
      uint64_t v19 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        __int16 v38 = HMFGetLogIdentifier();
        id v20 = [v10 name];
        [v10 uuid];
        uint64_t v40 = v44 = v17;
        uint64_t v21 = [v40 UUIDString];
        [v13 pairingsAuditedTimestamp];
        id v22 = v42 = v13;
        *(_DWORD *)buf = 138544130;
        id v47 = v38;
        __int16 v48 = 2112;
        id v49 = v20;
        __int16 v50 = 2112;
        uint64_t v51 = v21;
        uint64_t v23 = (void *)v21;
        __int16 v52 = 2112;
        uint64_t v53 = v22;
        _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_INFO, "%{public}@Accessory %@/%@ pairings audit failed %@", buf, 0x2Au);

        uint64_t v13 = v42;
        uint64_t v17 = v44;
      }
    }
    else
    {
      if ([*(id *)(a1 + 32) isCancelled]) {
        goto LABEL_15;
      }
      uint64_t v13 = [v10 transactionWithObjectChangeType:2];
      uint64_t v25 = [HMDUserManagementOperationTimestamp alloc];
      __int16 v26 = [*(id *)(a1 + 40) currentDevice];
      id v27 = [(HMDUserManagementOperationTimestamp *)v25 initWithDevice:v26 state:0];
      [v13 setPairingsAuditedTimestamp:v27];

      uint64_t v17 = (void *)MEMORY[0x1D9452090]();
      id v18 = *(id *)(a1 + 40);
      uint64_t v19 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        uint64_t v39 = HMFGetLogIdentifier();
        __int16 v28 = [v10 name];
        [v10 uuid];
        v41 = id v45 = v17;
        uint64_t v29 = [v41 UUIDString];
        [v13 pairingsAuditedTimestamp];
        __int16 v30 = v43 = v13;
        *(_DWORD *)buf = 138544130;
        id v47 = v39;
        __int16 v48 = 2112;
        id v49 = v28;
        __int16 v50 = 2112;
        uint64_t v51 = v29;
        long long v31 = (void *)v29;
        __int16 v52 = 2112;
        uint64_t v53 = v30;
        _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_INFO, "%{public}@Accessory %@/%@ pairings audit completed %@", buf, 0x2Au);

        uint64_t v13 = v43;
        uint64_t v17 = v45;
      }
    }

    [v6 add:v13];

LABEL_15:
    uint64_t v32 = *(void **)(a1 + 32);
    long long v33 = [v32 accessory];
    long long v34 = [v33 uuid];
    uint64_t v35 = [v32 modelObjectWithChangeType:3 parentUUID:v34];

    [v6 add:v35];
    [v6 run];
    if (v10
      && ([*(id *)(a1 + 32) isCancelled] & 1) == 0
      && ([*(id *)(a1 + 32) isExpired] & 1) == 0)
    {
      int v36 = *(void **)(a1 + 40);
      uint64_t v37 = [*(id *)(a1 + 32) auditUsersToBeAdded];
      [v36 _addUsers:v37 accessory:v10];
    }
    return;
  }
  uint64_t v24 = *(void *)(a1 + 32);
  [v3 _updateOutgoingInvitationsWithCompleteUserManagementOperation:v24];
}

- (id)balancedResidentMapForAccessories:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self homeManager];
  id v6 = [v5 residentMesh];
  id v7 = [v6 balancedResidentMapForAccessories:v4];

  return v7;
}

- (void)residentDeviceManagerDidUpdateResidents:(id)a3
{
  id v4 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __51__HMDHome_residentDeviceManagerDidUpdateResidents___block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v4, block);
}

uint64_t __51__HMDHome_residentDeviceManagerDidUpdateResidents___block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) _evaluateOwnerTrustZoneCapabilityAndNotify];
  int v2 = *(void **)(a1 + 32);
  return [v2 _updateResidentFirstAccessoryCommunicationEnabled];
}

- (void)residentDeviceManager:(id)a3 didUpdatePrimaryResident:(id)a4 previousPrimaryResident:(id)a5
{
  id v6 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __82__HMDHome_residentDeviceManager_didUpdatePrimaryResident_previousPrimaryResident___block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v6, block);
}

void __82__HMDHome_residentDeviceManager_didUpdatePrimaryResident_previousPrimaryResident___block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) _registerCameraReachabilityEventNotificationsWithCompletionHandler:0];
  [*(id *)(a1 + 32) migrateAfterResidentChange];
  [*(id *)(a1 + 32) reEvaluateHomeHubState];
  id v2 = [*(id *)(a1 + 32) stagedRemoteReachabilityRegistration];
  [v2 resetAndStagePriorValue];
}

- (void)residentDeviceManager:(id)a3 didUpdateResidentAvailable:(BOOL)a4
{
  id v6 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __60__HMDHome_residentDeviceManager_didUpdateResidentAvailable___block_invoke;
  v7[3] = &unk_1E6A19B58;
  void v7[4] = self;
  BOOL v8 = a4;
  dispatch_async(v6, v7);
}

uint64_t __60__HMDHome_residentDeviceManager_didUpdateResidentAvailable___block_invoke(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    uint64_t v6 = [*(id *)(a1 + 32) shortDescription];
    id v7 = (void *)v6;
    int v8 = *(unsigned __int8 *)(a1 + 40);
    *(_DWORD *)buf = 138543874;
    uint64_t v24 = v5;
    if (v8) {
      uint64_t v9 = @"available";
    }
    else {
      uint64_t v9 = @"unavailable";
    }
    __int16 v25 = 2112;
    uint64_t v26 = v6;
    __int16 v27 = 2112;
    __int16 v28 = v9;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@[%@] Resident devices are %@ for this home", buf, 0x20u);
  }
  if (!*(unsigned char *)(a1 + 40))
  {
    [*(id *)(a1 + 32) migrateAfterResidentChange];
    if (!*(unsigned char *)(a1 + 40))
    {
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      uint64_t v10 = objc_msgSend(*(id *)(a1 + 32), "_residentUsers", 0);
      uint64_t v11 = [v10 countByEnumeratingWithState:&v18 objects:v22 count:16];
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)v19;
        do
        {
          for (uint64_t i = 0; i != v12; ++i)
          {
            if (*(void *)v19 != v13) {
              objc_enumerationMutation(v10);
            }
            [*(id *)(a1 + 32) _notifyClientsOfUpdatedResidentUser:*(void *)(*((void *)&v18 + 1) + 8 * i)];
          }
          uint64_t v12 = [v10 countByEnumeratingWithState:&v18 objects:v22 count:16];
        }
        while (v12);
      }

      id v15 = [*(id *)(a1 + 32) homeManager];
      id v16 = [*(id *)(a1 + 32) uuid];
      [v15 electRemoteAccessPeerForHome:v16];
    }
  }
  return [*(id *)(a1 + 32) reEvaluateHomeHubState];
}

- (void)retrieveOperationalCertificatesForFabricID:(id)a3 commissionerNodeID:(id)a4 commissioneeNodeID:(id)a5 publicKey:(id)a6 completion:(id)a7
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v12 = a3;
  id v35 = a4;
  id v36 = a5;
  id v37 = a6;
  id v13 = a7;
  int v14 = [(HMDHome *)self primaryResident];
  id v15 = v14;
  if (v14
    && ([v14 device], (id v16 = objc_claimAutoreleasedReturnValue()) != 0)
    && ([(HMDHome *)self primaryResident],
        uint64_t v17 = objc_claimAutoreleasedReturnValue(),
        char v18 = [v17 isReachable],
        v17,
        v16,
        (v18 & 1) != 0))
  {
    long long v19 = [HMDRemoteDeviceMessageDestination alloc];
    long long v20 = [(HMDHome *)self uuid];
    long long v21 = [v15 device];
    id v22 = [(HMDRemoteDeviceMessageDestination *)v19 initWithTarget:v20 device:v21];

    uint64_t v23 = [MEMORY[0x1E4F1CA60] dictionary];
    [v23 setObject:v36 forKeyedSubscript:@"HMDHomeCommissioningDeviceNodeIDMessageKey"];
    [v23 setObject:v12 forKeyedSubscript:@"HMDHomeCommissioningFabricIDMessageKey"];
    [v23 setObject:v12 forKeyedSubscript:@"HMDHomeCommissioningFabricIndexMessageKey"];
    [v23 setObject:v37 forKeyedSubscript:@"HMDHomeCommissioningPublicKeyMessageKey"];
    if (isFeatureMatterLocalFabricConfigEnabled()) {
      [v23 setObject:v35 forKeyedSubscript:@"HMDHomeCommissioningCommissionerNodeIDMessageKey"];
    }
    uint64_t v24 = (void *)[objc_alloc(MEMORY[0x1E4F654B0]) initWithName:@"HMDHomeRequestCommissioningCertificatesMessage" destination:v22 payload:v23];
    [v24 setRemote:1];
    [v24 setSecureRemote:1];
    objc_initWeak(&location, self);
    v38[0] = MEMORY[0x1E4F143A8];
    v38[1] = 3221225472;
    v38[2] = __113__HMDHome_retrieveOperationalCertificatesForFabricID_commissionerNodeID_commissioneeNodeID_publicKey_completion___block_invoke;
    void v38[3] = &unk_1E6A193F8;
    objc_copyWeak(&v40, &location);
    id v39 = v13;
    context = (void *)MEMORY[0x1D9452090]([v24 setResponseHandler:v38]);
    __int16 v25 = self;
    HMFGetOSLogHandle();
    uint64_t v26 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v27 = (id)objc_claimAutoreleasedReturnValue();
      __int16 v28 = [v24 shortDescription];
      *(_DWORD *)buf = 138543618;
      id v43 = v27;
      __int16 v44 = 2112;
      id v45 = v28;
      _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_INFO, "%{public}@Sending message %@ to fetch Matter operational certificates from the primary resident", buf, 0x16u);
    }
    uint64_t v29 = [(HMDHome *)v25 msgDispatcher];
    [v29 sendMessage:v24];

    objc_destroyWeak(&v40);
    objc_destroyWeak(&location);
  }
  else
  {
    __int16 v30 = (void *)MEMORY[0x1D9452090]();
    long long v31 = self;
    uint64_t v32 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      long long v33 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v43 = v33;
      _os_log_impl(&dword_1D49D5000, v32, OS_LOG_TYPE_ERROR, "%{public}@Primary resident is not available or it is unreachable", buf, 0xCu);
    }
    id v22 = [MEMORY[0x1E4F28C58] hmErrorWithCode:91];
    (*((void (**)(id, void, void, void, void, HMDRemoteDeviceMessageDestination *))v13 + 2))(v13, 0, 0, 0, 0, v22);
  }
}

void __113__HMDHome_retrieveOperationalCertificatesForFabricID_commissionerNodeID_commissioneeNodeID_publicKey_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v5)
    {
      int v8 = (void *)MEMORY[0x1D9452090]();
      id v9 = WeakRetained;
      uint64_t v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v27 = v11;
        __int16 v28 = 2112;
        id v29 = v5;
        _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_ERROR, "%{public}@Request for operational certificates failed with %@", buf, 0x16u);
      }
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
    else
    {
      id v12 = objc_msgSend(v6, "hmf_dataForKey:", @"HMDHomeCommissioningRootCertMessageKey");
      id v13 = objc_msgSend(v6, "hmf_dataForKey:", @"HMDHomeCommissioningOperationalCertMessageKey");
      int v14 = objc_msgSend(v6, "hmf_numberForKey:", @"HMDHomeCommissioningOwnerNodeIDMessageKey");
      id v15 = objc_msgSend(v6, "hmf_dataForKey:", @"HMDHomeCommissioningIPKMessageKey");
      context = (void *)MEMORY[0x1D9452090]();
      id v16 = WeakRetained;
      uint64_t v17 = HMFGetOSLogHandle();
      char v18 = v17;
      if (v12 && v13)
      {
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          long long v19 = v23 = v15;
          *(_DWORD *)buf = 138544130;
          id v27 = v19;
          __int16 v28 = 2112;
          id v29 = v12;
          __int16 v30 = 2112;
          long long v31 = v13;
          __int16 v32 = 2112;
          long long v33 = v14;
          _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@Request for operational certificates successful. rootCertificate %@, operationalCert %@, ownerNodeID %@", buf, 0x2Au);

          id v15 = v23;
        }

        (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
      }
      else
      {
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          long long v20 = v24 = v15;
          *(_DWORD *)buf = 138544130;
          id v27 = v20;
          __int16 v28 = 2112;
          id v29 = v12;
          __int16 v30 = 2112;
          long long v31 = v13;
          __int16 v32 = 2112;
          long long v33 = v14;
          _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_ERROR, "%{public}@Primary resident returned unexpected values for rootCertificate %@, operationalCert %@, ownerNodeID %@", buf, 0x2Au);

          id v15 = v24;
        }

        uint64_t v21 = *(void *)(a1 + 32);
        id v22 = [MEMORY[0x1E4F28C58] hmErrorWithCode:-1];
        (*(void (**)(uint64_t, void, void, void, void, void *))(v21 + 16))(v21, 0, 0, 0, 0, v22);
      }
    }
  }
}

- (void)_fetchMetadataFromPrimaryResidentWithCompletion:(id)a3
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v4 = (void (**)(id, void, void *))a3;
  id v5 = [(HMDHome *)self primaryResident];
  id v6 = [(HMDHome *)self _checkResidentCapabilitiesForCredentialSharing:v5];
  if (v6)
  {
    id v7 = (void *)MEMORY[0x1D9452090]();
    int v8 = self;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v29 = v10;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_ERROR, "%{public}@Couldn't find compatible resident to fetch Thread network credentials", buf, 0xCu);
    }
    v4[2](v4, 0, v6);
  }
  else
  {
    if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled()
      && (+[HMDDeviceCapabilities deviceCapabilities],
          uint64_t v11 = objc_claimAutoreleasedReturnValue(),
          int v12 = [v11 supportsThreadService],
          v11,
          v12))
    {
      uint64_t v26 = @"HMDHomeThreadNetworkCredentialsIsRequestorThreadCapablePayloadKey";
      id v27 = &unk_1F2DC7648;
      id v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v27 forKeys:&v26 count:1];
    }
    else
    {
      id v13 = 0;
    }
    int v14 = [HMDRemoteDeviceMessageDestination alloc];
    id v15 = [(HMDHome *)self uuid];
    id v16 = [v5 device];
    uint64_t v17 = [(HMDRemoteDeviceMessageDestination *)v14 initWithTarget:v15 device:v16];

    char v18 = (void *)[objc_alloc(MEMORY[0x1E4F654B0]) initWithName:@"HMDHomeThreadNetworkCredentialsRequestKey" destination:v17 payload:v13];
    [v18 setRemote:1];
    [v18 setSecureRemote:1];
    objc_initWeak((id *)buf, self);
    uint64_t v20 = MEMORY[0x1E4F143A8];
    uint64_t v21 = 3221225472;
    id v22 = __59__HMDHome__fetchMetadataFromPrimaryResidentWithCompletion___block_invoke;
    uint64_t v23 = &unk_1E6A193F8;
    objc_copyWeak(&v25, (id *)buf);
    uint64_t v24 = v4;
    [v18 setResponseHandler:&v20];
    long long v19 = [(HMDHome *)self msgDispatcher];
    [v19 sendMessage:v18 completionHandler:0];

    objc_destroyWeak(&v25);
    objc_destroyWeak((id *)buf);
  }
}

void __59__HMDHome__fetchMetadataFromPrimaryResidentWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v5)
    {
      int v8 = (void *)MEMORY[0x1D9452090]();
      id v9 = WeakRetained;
      uint64_t v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v41 = v11;
        __int16 v42 = 2112;
        id v43 = v5;
        _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_ERROR, "%{public}@Request for Thread Network credentials failed with error: %@", buf, 0x16u);
      }
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
    else
    {
      int v12 = objc_msgSend(v6, "hmf_dataForKey:", *MEMORY[0x1E4F2D738]);
      id v39 = 0;
      id v13 = [MEMORY[0x1E4F28DC0] unarchivedObjectOfClass:objc_opt_class() fromData:v12 error:&v39];
      id v37 = v39;
      int v14 = objc_msgSend(v6, "hmf_dataForKey:", @"HMHomeThreadNetworkCredentialsMasterKeyMessageKey");
      id v15 = (void *)MEMORY[0x1D9452090]();
      id v16 = WeakRetained;
      uint64_t v17 = HMFGetOSLogHandle();
      char v18 = v17;
      __int16 v38 = v14;
      if (v13) {
        BOOL v19 = v14 == 0;
      }
      else {
        BOOL v19 = 1;
      }
      if (v19)
      {
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v21 = uint64_t v20 = v12;
          uint64_t v22 = [v38 length];
          *(_DWORD *)buf = 138543874;
          uint64_t v41 = v21;
          __int16 v42 = 2112;
          id v43 = v13;
          __int16 v44 = 2048;
          uint64_t v45 = v22;
          _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_ERROR, "%{public}@Missing metadata (%@)/masterKeyData (length %zu) in response", buf, 0x20u);

          int v12 = v20;
        }

        uint64_t v23 = *(void *)(a1 + 32);
        uint64_t v24 = [MEMORY[0x1E4F28C58] hmErrorWithCode:-1];
        (*(void (**)(uint64_t, void, void *))(v23 + 16))(v23, 0, v24);
        int v14 = v38;
      }
      else
      {
        id v35 = v6;
        id v36 = v12;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          uint64_t v26 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          uint64_t v41 = v26;
          _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@Request for Thread Network Metadata successful", buf, 0xCu);
        }
        id v34 = objc_alloc(MEMORY[0x1E4F2EB88]);
        __int16 v32 = [v13 name];
        unsigned int v33 = [v13 channel];
        long long v31 = [v13 PANID];
        id v27 = [v13 extendedPANID];
        __int16 v28 = [v13 passPhrase];
        id v29 = [v13 PSKc];
        uint64_t v30 = [v13 operationalDataset];
        uint64_t v24 = (void *)[v34 initWithName:v32 channel:v33 PANID:v31 extendedPANID:v27 masterKey:v14 passPhrase:v28 PSKc:v29 operationalDataset:v30];

        (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
        id v6 = v35;
        int v12 = v36;
      }
    }
  }
}

- (id)_checkResidentCapabilitiesForCredentialSharing:(id)a3
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = v4;
  if (v4 && ([v4 device], id v6 = objc_claimAutoreleasedReturnValue(), v6, v6))
  {
    id v7 = [v5 capabilities];
    char v8 = [v7 supportsThreadNetworkCredentialSharing];

    if (v8)
    {
      id v9 = 0;
      goto LABEL_12;
    }
    uint64_t v10 = (void *)MEMORY[0x1D9452090]();
    id v15 = self;
    int v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id v16 = HMFGetLogIdentifier();
      int v18 = 138543362;
      BOOL v19 = v16;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_ERROR, "%{public}@Primary resident doesn't support Thread Network Credential sharing", (uint8_t *)&v18, 0xCu);
    }
    uint64_t v14 = 92;
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1D9452090]();
    uint64_t v11 = self;
    int v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id v13 = HMFGetLogIdentifier();
      int v18 = 138543362;
      BOOL v19 = v13;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_ERROR, "%{public}@No primary resident device to request thread credentials from", (uint8_t *)&v18, 0xCu);
    }
    uint64_t v14 = 91;
  }

  id v9 = [MEMORY[0x1E4F28C58] hmErrorWithCode:v14];
LABEL_12:

  return v9;
}

- (void)removeThreadNetworkPreferredNetworkWithCompletion:(id)a3
{
  id v3 = a3;
  id v4 = +[HMDThreadNetworkMetadataStore defaultStore];
  [v4 removePreferredNetworkWithCompletion:v3];
}

- (void)retrieveThreadNetworkMetadataWithCompletion:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v4 = (void (**)(id, void, void *))a3;
  if (![(HMDHome *)self isSharedAdmin] && ![(HMDHome *)self isOwnerUser])
  {
    uint64_t v14 = (void *)MEMORY[0x1D9452090]();
    id v15 = self;
    id v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v21 = v17;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_ERROR, "%{public}@Unexpected user. Returning without retrieving thread network credentials", buf, 0xCu);
    }
    id v6 = [MEMORY[0x1E4F28C58] hmErrorWithCode:47];
    v4[2](v4, 0, v6);
    goto LABEL_16;
  }
  if (![(HMDHome *)self isCurrentDeviceConfirmedPrimaryResident])
  {
    id v5 = [(HMDHome *)self residentDeviceManager];
    id v6 = [v5 residentDevices];

    if ([v6 count]
      && ([(HMDHome *)self primaryResident],
          id v7 = objc_claimAutoreleasedReturnValue(),
          int v8 = [v7 isReachable],
          v7,
          v8))
    {
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 3221225472;
      v18[2] = __55__HMDHome_retrieveThreadNetworkMetadataWithCompletion___block_invoke;
      v18[3] = &unk_1E6A12FA8;
      void v18[4] = self;
      BOOL v19 = v4;
      [(HMDHome *)self _fetchMetadataFromPrimaryResidentWithCompletion:v18];
    }
    else if ([(HMDHome *)self isSharedAdmin])
    {
      id v9 = (void *)MEMORY[0x1D9452090]();
      uint64_t v10 = self;
      uint64_t v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        int v12 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        uint64_t v21 = v12;
        _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_ERROR, "%{public}@No resident available. Returning without retrieving thread network credentials", buf, 0xCu);
      }
      id v13 = [MEMORY[0x1E4F28C58] hmErrorWithCode:91];
      v4[2](v4, 0, v13);
    }
    else
    {
      [(HMDHome *)self _fetchMetadataOnCurrentDeviceWithCompletion:v4];
    }
LABEL_16:

    goto LABEL_17;
  }
  [(HMDHome *)self _fetchMetadataOnCurrentDeviceWithCompletion:v4];
LABEL_17:
}

void __55__HMDHome_retrieveThreadNetworkMetadataWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v5 && !v6) {
    goto LABEL_9;
  }
  int v8 = (void *)MEMORY[0x1D9452090]();
  id v9 = *(id *)(a1 + 32);
  uint64_t v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    int v16 = 138543618;
    uint64_t v17 = v11;
    __int16 v18 = 2112;
    BOOL v19 = v7;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to get thread network credentials from resident. Error: %@", (uint8_t *)&v16, 0x16u);
  }
  if ([*(id *)(a1 + 32) isOwnerUser])
  {
    int v12 = (void *)MEMORY[0x1D9452090]();
    id v13 = *(id *)(a1 + 32);
    uint64_t v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      id v15 = HMFGetLogIdentifier();
      int v16 = 138543362;
      uint64_t v17 = v15;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Falling back to get thread network credentials from current owner device", (uint8_t *)&v16, 0xCu);
    }
    [*(id *)(a1 + 32) _fetchMetadataOnCurrentDeviceWithCompletion:*(void *)(a1 + 40)];
  }
  else
  {
LABEL_9:
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

- (void)_fetchMetadataOnCurrentDeviceWithCompletion:(id)a3
{
  id v4 = a3;
  id v6 = +[HMDThreadNetworkMetadataStore defaultStore];
  id v5 = [(HMDHome *)self threadOperationalDataset];
  objc_msgSend(v6, "retrieveMetadata:homeHasResident:completion:", v5, -[HMDHome doesHomeContainResident](self, "doesHomeContainResident"), v4);
}

- (void)_unconfigurePairedAccessoriesForServer:(id)a3 updateReachability:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  if ([v6 isPaired])
  {
    if (v4)
    {
      id v7 = (void *)MEMORY[0x1D9452090]();
      int v8 = self;
      id v9 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        uint64_t v10 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v20 = v10;
        __int16 v21 = 2112;
        id v22 = v6;
        _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Setting reachability to false for all paired accessories associated with %@", buf, 0x16u);
      }
    }
    uint64_t v11 = [MEMORY[0x1E4F28C58] hmErrorWithCode:4];
    int v12 = [v6 identifier];
    uint64_t v13 = [v6 linkType];
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    void v15[2] = __69__HMDHome__unconfigurePairedAccessoriesForServer_updateReachability___block_invoke;
    v15[3] = &unk_1E6A072B8;
    id v16 = v12;
    uint64_t v17 = v13;
    BOOL v18 = v4;
    id v14 = v12;
    [(HMDHome *)self _notifyRetrievalError:v11 accessoryServer:v14 linkType:v13 accessoryOperationBlock:v15];
  }
}

uint64_t __69__HMDHome__unconfigurePairedAccessoriesForServer_updateReachability___block_invoke(uint64_t a1, void *a2)
{
  return [a2 unconfigureAccessoryWithServerIdentifier:*(void *)(a1 + 32) linkType:*(void *)(a1 + 40) updateReachability:*(unsigned __int8 *)(a1 + 48)];
}

uint64_t __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_1750(uint64_t a1)
{
  uint64_t v1 = (id *)a1;
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) identifier];
  uint64_t v4 = [v1[5] linkType];
  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 3221225472;
  v37[2] = __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_2_1751;
  v37[3] = &unk_1E6A13600;
  void v37[4] = v1[4];
  [v2 _notifyRetrievalError:0 accessoryServer:v3 linkType:v4 accessoryOperationBlock:v37];

  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id obj = v1[6];
  uint64_t v5 = [obj countByEnumeratingWithState:&v33 objects:v44 count:16];
  if (v5)
  {
    uint64_t v7 = v5;
    uint64_t v8 = *(void *)v34;
    id v9 = v31;
    *(void *)&long long v6 = 138543874;
    long long v26 = v6;
    uint64_t v27 = *(void *)v34;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v34 != v8) {
          objc_enumerationMutation(obj);
        }
        id v11 = v1[4];
        int v12 = objc_msgSend(*(id *)(*((void *)&v33 + 1) + 8 * v10), "uuid", v26);
        uint64_t v13 = [v11 accessoryWithUUID:v12];

        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v14 = v13;
        }
        else {
          id v14 = 0;
        }
        id v15 = v14;

        if (v15)
        {
          id v16 = (void *)MEMORY[0x1D9452090]();
          id v17 = v1[4];
          BOOL v18 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            BOOL v19 = HMFGetLogIdentifier();
            uint64_t v20 = [v15 shortDescription];
            [v15 supportsTargetController];
            HMFBooleanToString();
            id v29 = v16;
            __int16 v21 = v9;
            id v22 = v1;
            uint64_t v24 = v23 = v7;
            *(_DWORD *)buf = v26;
            id v39 = v19;
            __int16 v40 = 2112;
            uint64_t v41 = v20;
            __int16 v42 = 2112;
            id v43 = v24;
            _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@Bridged accessory %@ (supportsTargetController %@) being added to home", buf, 0x20u);

            uint64_t v8 = v27;
            uint64_t v7 = v23;
            uint64_t v1 = v22;
            id v9 = v21;
            id v16 = v29;
          }
          v30[0] = MEMORY[0x1E4F143A8];
          v30[1] = 3221225472;
          v31[0] = __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_1752;
          v31[1] = &unk_1E6A197F0;
          id v32 = v15;
          [v32 readInitialRequiredCharacteristicsForAccessory:v30];
        }
        ++v10;
      }
      while (v7 != v10);
      uint64_t v7 = [obj countByEnumeratingWithState:&v33 objects:v44 count:16];
    }
    while (v7);
  }

  return [v1[4] _evaluateShouldRelaunchAndSetRelaunch];
}

void __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_2_1751(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isPrimary])
  {
    uint64_t v4 = MEMORY[0x1E4F143A8];
    uint64_t v5 = 3221225472;
    long long v6 = __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_3;
    uint64_t v7 = &unk_1E6A196E0;
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = v3;
    [v9 maybeCommissionToThreadNetworkWithCompletion:&v4];
  }
  objc_msgSend(v3, "handleUpdatedServicesForThreadManagementWithCompletion:", 0, v4, v5, v6, v7, v8);
}

uint64_t __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_1752(uint64_t a1)
{
  return [*(id *)(a1 + 32) autoConfigureTargetController];
}

- (void)_processProductDataForNewlyAddedAccessory:(id)a3 transaction:(id)a4
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [(HMDHome *)self _productDataFromHAPAccessory:v6];
  if (v8)
  {
    id v9 = (void *)MEMORY[0x1D9452090]();
    uint64_t v10 = self;
    id v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = HMFGetLogIdentifier();
      uint64_t v13 = [v6 shortDescription];
      int v14 = 138543874;
      id v15 = v12;
      __int16 v16 = 2112;
      id v17 = v13;
      __int16 v18 = 2112;
      BOOL v19 = v8;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Accessory %@ is now bound to productData %@", (uint8_t *)&v14, 0x20u);
    }
    [v7 setProductDataV2:v8];
    [v7 setProductData:v8];
  }
}

uint64_t __141__HMDHome_getUpdateTransactionForAccessory_hapAccessory_accessoryTransaction_addSvcTransactions_updateSvcTransactions_removeSvcTransactions___block_invoke(uint64_t a1, void *a2)
{
  return [a2 uuid];
}

id __88__HMDHome___updateServiceTransaction_accessoryTransaction_service_accessory_hapService___block_invoke(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

- (void)accessoryBrowser:(id)a3 didFinishPairingForAccessoryServer:(id)a4
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v37 = a3;
  id v38 = a4;
  id v6 = [(HMDHome *)self primaryResident];
  id v7 = v6;
  if (v6 && ([v6 device], uint64_t v8 = objc_claimAutoreleasedReturnValue(), v8, v8))
  {
    id v9 = [HMDRemoteDeviceMessageDestination alloc];
    uint64_t v10 = [(HMDHome *)self uuid];
    id v11 = [v7 device];
    int v12 = [(HMDRemoteDeviceMessageDestination *)v9 initWithTarget:v10 device:v11];

    id v13 = v38;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    id v15 = v14;

    __int16 v16 = [MEMORY[0x1E4F1CA60] dictionary];
    id v17 = [v15 nodeID];
    [v16 setObject:v17 forKeyedSubscript:@"HMDHomePairingCompletionNodeIDMessageKey"];

    __int16 v18 = [v15 fabricID];
    [v16 setObject:v18 forKeyedSubscript:@"HMDHomePairingCompletionFabricIDMessageKey"];

    BOOL v19 = [v15 fabricID];
    [v16 setObject:v19 forKeyedSubscript:@"HMDHomePairingCompletionFabricIndexMessageKey"];

    uint64_t v20 = [v15 vendorID];
    [v16 setObject:v20 forKeyedSubscript:@"HMDHomePairingCompletionVendorIDMessageKey"];

    __int16 v21 = [v15 productID];
    [v16 setObject:v21 forKeyedSubscript:@"HMDHomePairingCompletionProductIDMessageKey"];

    id v22 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v15, "configNumber"));
    [v16 setObject:v22 forKeyedSubscript:@"HMDHomePairingCompletionConfigNumberMessageKey"];

    uint64_t v23 = [v15 category];
    [v16 setObject:v23 forKeyedSubscript:@"HMDHomePairingCompletionCategoryMessageKey"];

    uint64_t v24 = [v15 topology];
    [v16 setObject:v24 forKeyedSubscript:@"HMDHomePairingCompletionTopologyMessageKey"];

    id v25 = (void *)[objc_alloc(MEMORY[0x1E4F654B0]) initWithName:@"HMDHomeNotificationPairingCompletionMessage" destination:v12 payload:v16];
    [v25 setRemote:1];
    [v25 setSecureRemote:1];
    objc_initWeak(&location, self);
    v39[0] = MEMORY[0x1E4F143A8];
    v39[1] = 3221225472;
    v39[2] = __63__HMDHome_accessoryBrowser_didFinishPairingForAccessoryServer___block_invoke;
    void v39[3] = &unk_1E6A17958;
    long long v36 = &v41;
    objc_copyWeak(&v41, &location);
    id v40 = v13;
    long long v26 = (void *)MEMORY[0x1D9452090]([v25 setResponseHandler:v39]);
    uint64_t v27 = self;
    HMFGetOSLogHandle();
    __int16 v28 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v29 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v30 = objc_msgSend(v25, "shortDescription", &v41, v37);
      *(_DWORD *)buf = 138543618;
      id v44 = v29;
      __int16 v45 = 2112;
      uint64_t v46 = v30;
      _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_INFO, "%{public}@Sending message %@ to notify pairing completion", buf, 0x16u);
    }
    long long v31 = [(HMDHome *)v27 msgDispatcher];
    [v31 sendMessage:v25];

    objc_destroyWeak(v36);
    objc_destroyWeak(&location);
  }
  else
  {
    id v32 = (void *)MEMORY[0x1D9452090]();
    long long v33 = self;
    long long v34 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      long long v35 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v44 = v35;
      _os_log_impl(&dword_1D49D5000, v34, OS_LOG_TYPE_ERROR, "%{public}@Primary resident is not available", buf, 0xCu);
    }
  }
}

void __63__HMDHome_accessoryBrowser_didFinishPairingForAccessoryServer___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = WeakRetained;
    uint64_t v10 = HMFGetOSLogHandle();
    id v11 = v10;
    if (v5)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        int v12 = HMFGetLogIdentifier();
        uint64_t v13 = *(void *)(a1 + 32);
        int v19 = 138543874;
        uint64_t v20 = v12;
        __int16 v21 = 2112;
        uint64_t v22 = v13;
        __int16 v23 = 2112;
        id v24 = v5;
        int v14 = "%{public}@Failed to notify pairing completion for accessory server %@ to the primary resident with error %@";
        id v15 = v11;
        os_log_type_t v16 = OS_LOG_TYPE_ERROR;
        uint32_t v17 = 32;
LABEL_7:
        _os_log_impl(&dword_1D49D5000, v15, v16, v14, (uint8_t *)&v19, v17);
      }
    }
    else if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      int v12 = HMFGetLogIdentifier();
      uint64_t v18 = *(void *)(a1 + 32);
      int v19 = 138543618;
      uint64_t v20 = v12;
      __int16 v21 = 2112;
      uint64_t v22 = v18;
      int v14 = "%{public}@Successfully notified the primary resident of pairing completion for accessory server %@";
      id v15 = v11;
      os_log_type_t v16 = OS_LOG_TYPE_INFO;
      uint32_t v17 = 22;
      goto LABEL_7;
    }
  }
}

- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateConnectionState:(BOOL)a5 linkLayerType:(int64_t)a6 bookkeeping:(id)a7 withError:(id)a8
{
  BOOL v10 = a5;
  id v13 = a8;
  id v14 = a7;
  id v15 = [a4 identifier];
  id v16 = [(HMDHome *)self hapAccessoryWithIdentifier:v15];

  [v16 didUpdateConnectionState:v10 sessionInfo:0 linkLayerType:a6 bookkeeping:v14 withError:v13];
}

- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateConnectionState:(BOOL)a5 sessionInfo:(id)a6 linkLayerType:(int64_t)a7 withError:(id)a8
{
  BOOL v10 = a5;
  id v13 = a8;
  id v14 = a6;
  id v15 = [a4 identifier];
  id v16 = [(HMDHome *)self hapAccessoryWithIdentifier:v15];

  [v16 didUpdateConnectionState:v10 sessionInfo:v14 linkLayerType:a7 bookkeeping:0 withError:v13];
}

- (void)accessoryBrowser:(id)a3 didUpdateReachability:(BOOL)a4 forBTLEAccessoriesWithServerIdentifier:(id)a5
{
  BOOL v6 = a4;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a5;
  BOOL v10 = [(HMDHome *)self hapAccessories];
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  void v26[2] = __89__HMDHome_accessoryBrowser_didUpdateReachability_forBTLEAccessoriesWithServerIdentifier___block_invoke;
  v26[3] = &unk_1E6A14470;
  id v11 = v9;
  id v27 = v11;
  int v12 = objc_msgSend(v10, "na_firstObjectPassingTest:", v26);

  [v12 setReachability:v6 serverIdentifier:v11 linkType:2];
  if (!v6
    && isiOSDevice()
    && ![(HMDHome *)self _hasPairedReachableBTLEAccessories]
    && ([(HMDHome *)self homeLocation] == 3 || [(HMDHome *)self homeLocation] == 2))
  {
    id v13 = (void *)MEMORY[0x1D9452090]();
    id v14 = self;
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      id v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v29 = v16;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@All BLE accessories have become unreachable and we are out... Stop looking", buf, 0xCu);
    }
    uint32_t v17 = [(HMDHome *)v14 accessoryBrowser];
    [v17 btleAccessoryReachabilityProbeTimer:0];

    uint64_t v18 = [(HMDHome *)v14 hapAccessories];
    int v19 = objc_msgSend(v18, "na_map:", &__block_literal_global_1733);

    if ([v19 count])
    {
      uint64_t v20 = (void *)MEMORY[0x1D9452090]();
      __int16 v21 = v14;
      uint64_t v22 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        __int16 v23 = HMFGetLogIdentifier();
        id v24 = [(HMDHome *)v21 uuid];
        *(_DWORD *)buf = 138543874;
        id v29 = v23;
        __int16 v30 = 2112;
        long long v31 = v19;
        __int16 v32 = 2112;
        long long v33 = v24;
        _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_INFO, "%{public}@Stop tracking BLE accessories: %@ in Home UUID: %@", buf, 0x20u);
      }
      uint64_t v25 = [(HMDHome *)v21 accessoryBrowser];
      [v25 stopTrackingBTLEAccessoriesWithIdentifiers:v19];
    }
  }
}

uint64_t __89__HMDHome_accessoryBrowser_didUpdateReachability_forBTLEAccessoriesWithServerIdentifier___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 identifier];
  uint64_t v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

id __89__HMDHome_accessoryBrowser_didUpdateReachability_forBTLEAccessoriesWithServerIdentifier___block_invoke_1730(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 hasBTLELink])
  {
    id v3 = [v2 identifier];
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateCategory:(id)a5
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = [v9 identifier];
  int v12 = [(HMDHome *)self hapAccessoryWithIdentifier:v11];

  if (v12)
  {
    id v13 = (void *)MEMORY[0x1D9452090]();
    id v14 = self;
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      id v16 = HMFGetLogIdentifier();
      uint32_t v17 = [v12 shortDescription];
      int v18 = 138543874;
      int v19 = v16;
      __int16 v20 = 2112;
      __int16 v21 = v17;
      __int16 v22 = 2112;
      id v23 = v10;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@Paired Accessory: %@, Updated Category to %@", (uint8_t *)&v18, 0x20u);
    }
    [v12 updateCategory:v10];
  }
}

- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateHasPairings:(BOOL)a5
{
  int v5 = a5;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = [v9 identifier];
  id v11 = [(HMDHome *)self hapAccessoryWithIdentifier:v10];

  if (v11)
  {
    int v12 = (void *)MEMORY[0x1D9452090]();
    id v13 = self;
    id v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      id v15 = HMFGetLogIdentifier();
      id v16 = [v9 identifier];
      int v18 = 138543874;
      int v19 = v15;
      __int16 v20 = 2112;
      __int16 v21 = v16;
      __int16 v22 = 1024;
      int v23 = v5;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Updating accessory server %@ with new value of hasPairings: %d", (uint8_t *)&v18, 0x1Cu);
    }
    if ([v9 isPaired] == v5)
    {
      uint32_t v17 = [(HMDHome *)v13 accessoryBrowser];
      [v17 resurrectAccessoryServer:v9];
    }
    else
    {
      [(HMDHome *)v13 _unconfigurePairedAccessoriesForServer:v9 updateReachability:1];
      uint32_t v17 = [(HMDHome *)v13 accessoryBrowser];
      [v17 tombstoneAccessoryServer:v9];
    }
  }
}

- (BOOL)_isSecureClassTriggeredByCharacteristics:(id)a3
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  int v5 = (void *)MEMORY[0x1E4F1CA48];
  BOOL v6 = [(HMDHome *)self triggers];
  id v7 = objc_msgSend(v5, "arrayWithCapacity:", objc_msgSend(v6, "count"));

  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  id v37 = self;
  id obj = [(HMDHome *)self triggers];
  uint64_t v40 = [obj countByEnumeratingWithState:&v55 objects:v68 count:16];
  if (v40)
  {
    uint64_t v39 = *(void *)v56;
    do
    {
      for (uint64_t i = 0; i != v40; ++i)
      {
        if (*(void *)v56 != v39) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(id *)(*((void *)&v55 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v10 = v9;
        }
        else {
          id v10 = 0;
        }
        id v11 = v10;

        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        id v41 = v11;
        int v12 = [v11 characteristicBaseEvents];
        uint64_t v13 = [v12 countByEnumeratingWithState:&v51 objects:v67 count:16];
        if (v13)
        {
          uint64_t v14 = v13;
          uint64_t v15 = *(void *)v52;
          do
          {
            for (uint64_t j = 0; j != v14; ++j)
            {
              if (*(void *)v52 != v15) {
                objc_enumerationMutation(v12);
              }
              uint32_t v17 = [*(id *)(*((void *)&v51 + 1) + 8 * j) characteristic];
              int v18 = [v4 containsObject:v17];

              if (v18) {
                [v7 addObject:v9];
              }
            }
            uint64_t v14 = [v12 countByEnumeratingWithState:&v51 objects:v67 count:16];
          }
          while (v14);
        }
      }
      uint64_t v40 = [obj countByEnumeratingWithState:&v55 objects:v68 count:16];
    }
    while (v40);
  }

  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  id v19 = v7;
  uint64_t v20 = [v19 countByEnumeratingWithState:&v47 objects:v66 count:16];
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = *(void *)v48;
    uint64_t v42 = *(void *)v48;
    do
    {
      for (uint64_t k = 0; k != v21; ++k)
      {
        if (*(void *)v48 != v22) {
          objc_enumerationMutation(v19);
        }
        uint64_t v24 = *(void **)(*((void *)&v47 + 1) + 8 * k);
        long long v43 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        uint64_t v25 = [v24 actionSets];
        uint64_t v26 = [v25 countByEnumeratingWithState:&v43 objects:v65 count:16];
        if (v26)
        {
          uint64_t v27 = v26;
          uint64_t v28 = *(void *)v44;
          while (2)
          {
            for (uint64_t m = 0; m != v27; ++m)
            {
              if (*(void *)v44 != v28) {
                objc_enumerationMutation(v25);
              }
              __int16 v30 = *(void **)(*((void *)&v43 + 1) + 8 * m);
              if ([v30 containsSecureCharacteristic])
              {
                __int16 v32 = (void *)MEMORY[0x1D9452090]();
                long long v33 = v37;
                uint64_t v34 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
                {
                  long long v35 = HMFGetLogIdentifier();
                  *(_DWORD *)buf = 138543874;
                  uint64_t v60 = v35;
                  __int16 v61 = 2112;
                  id v62 = v24;
                  __int16 v63 = 2112;
                  id v64 = v30;
                  _os_log_impl(&dword_1D49D5000, v34, OS_LOG_TYPE_DEBUG, "%{public}@Trigger %@ has action set %@ with security class", buf, 0x20u);
                }

                BOOL v31 = 1;
                goto LABEL_40;
              }
            }
            uint64_t v27 = [v25 countByEnumeratingWithState:&v43 objects:v65 count:16];
            if (v27) {
              continue;
            }
            break;
          }
        }

        uint64_t v22 = v42;
      }
      uint64_t v21 = [v19 countByEnumeratingWithState:&v47 objects:v66 count:16];
      BOOL v31 = 0;
    }
    while (v21);
  }
  else
  {
    BOOL v31 = 0;
  }
LABEL_40:

  return v31;
}

- (void)_handleUpdatedCharacteristics:(id)a3 accessoryServer:(id)a4 stateNumber:(id)a5 broadcast:(BOOL)a6 internal:(BOOL)a7
{
  BOOL v8 = a6;
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  uint64_t v15 = [v13 identifier];
  id v16 = [(HMDHome *)self hapAccessoryWithIdentifier:v15];

  if (v16)
  {
    if (v8)
    {
      uint32_t v17 = +[HMDBLEBroadcastEventReceived broadcastEventFromAccessory:v16 withExpectedGSN:1];
      int v18 = [(HMDHome *)self logEventSubmitter];
      [v18 submitLogEvent:v17];

      id v19 = [(HMDHome *)self _hmdCharacteristicsForUpdatedHAPCharacteristics:v12 accessoryServer:v13];
      BOOL v20 = [(HMDHome *)self _isSecureClassTriggeredByCharacteristics:v19];

      if (v20)
      {
        uint64_t v21 = (void *)MEMORY[0x1D9452090]();
        uint64_t v22 = self;
        int v23 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v24 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          id v66 = v24;
          _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_DEBUG, "%{public}@Broadcasted change - triggering secure class - confirming", buf, 0xCu);
        }
        if ([v13 linkType] == 2)
        {
          id v25 = v13;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            uint64_t v26 = v25;
          }
          else {
            uint64_t v26 = 0;
          }
          id v27 = v26;

          [v27 setConnectReason:4];
        }
        uint64_t v28 = [(HMDHome *)v22 accessoryBrowser];
        [v28 discoverAccessories:v13];
LABEL_33:

        goto LABEL_34;
      }
    }
    id v49 = v14;
    id v50 = v13;
    id v51 = v12;
    id v29 = [(HMDHome *)self _changedHMDCharacteristicsForHAPCharacteristics:v12 stateNumber:v14 broadcast:v8 accessoryServer:v13];
    [(HMDHome *)self _notifyChangedCharacteristics:v29 message:0 modifiedCharacteristics:0 broadcast:v8];
    if (!v8 && !a7) {
      [(HMDHome *)self _auditChangedCharactersitics:v29];
    }
    uint64_t v28 = [MEMORY[0x1E4F1CA60] dictionary];
    long long v57 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    id v30 = v29;
    uint64_t v31 = [v30 countByEnumeratingWithState:&v57 objects:v64 count:16];
    if (v31)
    {
      uint64_t v32 = v31;
      uint64_t v33 = *(void *)v58;
      do
      {
        for (uint64_t i = 0; i != v32; ++i)
        {
          if (*(void *)v58 != v33) {
            objc_enumerationMutation(v30);
          }
          long long v35 = *(void **)(*((void *)&v57 + 1) + 8 * i);
          long long v36 = [v35 accessory];
          id v37 = [v36 uuid];
          id v38 = [v28 objectForKeyedSubscript:v37];

          if (!v38)
          {
            id v38 = [MEMORY[0x1E4F1CA48] array];
            uint64_t v39 = [v36 uuid];
            [v28 setObject:v38 forKeyedSubscript:v39];
          }
          [v38 addObject:v35];
        }
        uint64_t v32 = [v30 countByEnumeratingWithState:&v57 objects:v64 count:16];
      }
      while (v32);
    }
    id v48 = v30;

    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    id obj = [v28 allValues];
    uint64_t v40 = [obj countByEnumeratingWithState:&v53 objects:v63 count:16];
    if (v40)
    {
      uint64_t v41 = v40;
      uint64_t v42 = *(void *)v54;
      do
      {
        for (uint64_t j = 0; j != v41; ++j)
        {
          if (*(void *)v54 != v42) {
            objc_enumerationMutation(obj);
          }
          long long v44 = *(void **)(*((void *)&v53 + 1) + 8 * j);
          v61[0] = @"HMDNotificationCharacteristicValueUpdatedReasonKey";
          v61[1] = @"HMDNotificationCharacteristicValueUpdatedChangedCharacteristicsKey";
          v62[0] = &unk_1F2DC7630;
          v62[1] = v44;
          long long v45 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v62, v61, 2, v48);
          long long v46 = [v44 firstObject];
          long long v47 = [v46 accessory];
          logAndPostNotification(@"HMDNotificationCharacteristicValueUpdated", v47, v45);
        }
        uint64_t v41 = [obj countByEnumeratingWithState:&v53 objects:v63 count:16];
      }
      while (v41);
    }

    id v13 = v50;
    id v12 = v51;
    id v14 = v49;
    uint32_t v17 = v48;
    goto LABEL_33;
  }
LABEL_34:
}

- (void)handleUpdatedCharacteristics:(id)a3 accessoryServer:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  BOOL v8 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __56__HMDHome_handleUpdatedCharacteristics_accessoryServer___block_invoke;
  block[3] = &unk_1E6A19668;
  void block[4] = self;
  id v12 = v6;
  id v13 = v7;
  id v9 = v7;
  id v10 = v6;
  dispatch_async(v8, block);
}

uint64_t __56__HMDHome_handleUpdatedCharacteristics_accessoryServer___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleUpdatedCharacteristics:*(void *)(a1 + 40) accessoryServer:*(void *)(a1 + 48) stateNumber:0 broadcast:0 internal:1];
}

- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateValuesForCharacteristics:(id)a5 stateNumber:(id)a6 broadcast:(BOOL)a7
{
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  id v14 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __100__HMDHome_accessoryBrowser_accessoryServer_didUpdateValuesForCharacteristics_stateNumber_broadcast___block_invoke;
  block[3] = &unk_1E6A154B0;
  void block[4] = self;
  id v19 = v12;
  id v20 = v11;
  id v21 = v13;
  BOOL v22 = a7;
  id v15 = v13;
  id v16 = v11;
  id v17 = v12;
  dispatch_async(v14, block);
}

uint64_t __100__HMDHome_accessoryBrowser_accessoryServer_didUpdateValuesForCharacteristics_stateNumber_broadcast___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleUpdatedCharacteristics:*(void *)(a1 + 40) accessoryServer:*(void *)(a1 + 48) stateNumber:*(void *)(a1 + 56) broadcast:*(unsigned __int8 *)(a1 + 64) internal:0];
}

- (id)_changedHMDCharacteristicsForHAPCharacteristics:(id)a3 stateNumber:(id)a4 broadcast:(BOOL)a5 accessoryServer:(id)a6
{
  BOOL v7 = a5;
  uint64_t v178 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v139 = a4;
  id v133 = a6;
  id v144 = [MEMORY[0x1E4F28E10] strongToStrongObjectsMapTable];
  long long v155 = 0u;
  long long v156 = 0u;
  long long v157 = 0u;
  long long v158 = 0u;
  int v136 = self;
  id obj = v10;
  uint64_t v145 = [obj countByEnumeratingWithState:&v155 objects:v177 count:16];
  if (v145)
  {
    int v140 = *(void **)v156;
    BOOL v137 = v7;
    do
    {
      for (uint64_t i = 0; i != v145; ++i)
      {
        if (*(void **)v156 != v140) {
          objc_enumerationMutation(obj);
        }
        id v12 = *(void **)(*((void *)&v155 + 1) + 8 * i);
        id v13 = [v12 service];
        id v14 = [v13 accessory];
        id v15 = [(HMDHome *)self hapMetadata];
        if (v7)
        {
          id v16 = [v12 type];
          char v17 = [v15 shouldFilterCharacteristicOfType:v16];

          if (v17) {
            goto LABEL_16;
          }
          uint64_t v18 = [v133 primaryAccessory];

          id v14 = (void *)v18;
        }
        else
        {
          id v19 = [v13 type];
          char v20 = [v15 shouldFilterServiceOfType:v19];

          if (v20) {
            goto LABEL_16;
          }
        }
        id v21 = [(HMDHome *)self hmdHAPAccessoryWithHAPAccessory:v14];
        BOOL v22 = [v12 instanceID];
        int v23 = [v21 hmdCharacteristicForInstanceId:v22];

        if (v23)
        {
          [v144 setObject:v23 forKey:v12];
        }
        else
        {
          context = (void *)MEMORY[0x1D9452090]();
          uint64_t v24 = self;
          id v25 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            id v131 = (id)objc_claimAutoreleasedReturnValue();
            [v133 identifier];
            uint64_t v26 = v128 = v24;
            id v27 = [v13 instanceID];
            uint64_t v28 = [v12 instanceID];
            id v29 = [v12 type];
            *(_DWORD *)buf = 138544386;
            id v161 = v131;
            __int16 v162 = 2112;
            uint64_t v163 = (uint64_t)v26;
            __int16 v164 = 2112;
            uint64_t v165 = (uint64_t)v27;
            __int16 v166 = 2112;
            long long v167 = v28;
            __int16 v168 = 2112;
            long long v169 = v29;
            _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot map HAPCharacteristic %@/%@/%@/%@ to a HMDCharacteristic", buf, 0x34u);

            uint64_t v24 = v128;
          }

          self = v136;
        }

        BOOL v7 = v137;
LABEL_16:
      }
      uint64_t v145 = [obj countByEnumeratingWithState:&v155 objects:v177 count:16];
    }
    while (v145);
  }

  objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(obj, "count"));
  id v132 = (id)objc_claimAutoreleasedReturnValue();
  int v123 = [MEMORY[0x1E4F1CA80] set];
  long long v151 = 0u;
  long long v152 = 0u;
  long long v153 = 0u;
  long long v154 = 0u;
  id v30 = [v144 keyEnumerator];
  uint64_t v31 = [v30 allObjects];

  id v129 = v31;
  uint64_t v138 = [v31 countByEnumeratingWithState:&v151 objects:v176 count:16];
  int v33 = 0;
  if (!v138)
  {
    uint64_t v34 = v139;
    goto LABEL_71;
  }
  char contexta = *(void **)v152;
  *(void *)&long long v32 = 138543618;
  long long v122 = v32;
  uint64_t v34 = v139;
  do
  {
    uint64_t v35 = 0;
    do
    {
      if (*(void **)v152 != contexta) {
        objc_enumerationMutation(v129);
      }
      long long v36 = *(void **)(*((void *)&v151 + 1) + 8 * v35);
      id v37 = objc_msgSend(v144, "objectForKey:", v36, v122);
      id v38 = [v37 stateNumber];
      int v39 = HMFEqualObjects();

      if (v39)
      {
        uint64_t v146 = v35;
        uint64_t v40 = [v36 value];
        uint64_t v41 = [v37 lastKnownValue];
        BOOL v42 = +[HMDCharacteristic value:v40 differentThan:v41];

        if (v34 && v42)
        {
          uint64_t v141 = (void *)MEMORY[0x1D9452090]();
          long long v43 = self;
          long long v44 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
          {
            int v125 = HMFGetLogIdentifier();
            long long v45 = [v37 type];
            uint64_t v46 = [v37 instanceID];
            long long v47 = [v37 lastKnownValue];
            id v48 = [v37 stateNumber];
            id v49 = [v36 value];
            id v50 = [v133 identifier];
            *(_DWORD *)buf = 138545154;
            id v161 = v125;
            __int16 v162 = 2112;
            uint64_t v163 = (uint64_t)v45;
            __int16 v164 = 2112;
            uint64_t v165 = v46;
            id v51 = (void *)v46;
            __int16 v166 = 2112;
            long long v167 = v47;
            __int16 v168 = 2112;
            long long v169 = v48;
            __int16 v170 = 2112;
            id v171 = v49;
            __int16 v172 = 2112;
            id v173 = v139;
            __int16 v174 = 2112;
            long long v175 = v50;
            _os_log_impl(&dword_1D49D5000, v44, OS_LOG_TYPE_DEFAULT, "%{public}@Characteristic: '%@'/%@ updated value at same state number from %@/%@ to %@/%@ for accessory: %@", buf, 0x52u);

            self = v136;
          }
          goto LABEL_32;
        }
        if ([v37 shouldUpdateValueFromHAPCharacteristic:v36]
          && ([v36 value], long long v73 = objc_claimAutoreleasedReturnValue(), v73, v73))
        {
          long long v74 = (void *)MEMORY[0x1D9452090]();
          long long v75 = self;
          long long v76 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
          {
            long long v77 = HMFGetLogIdentifier();
            long long v78 = [v37 type];
            [v37 instanceID];
            long long v79 = v126 = v75;
            [v37 lastKnownValue];
            v80 = BOOL v142 = v74;
            long long v81 = [v36 value];
            long long v82 = [v133 identifier];
            *(_DWORD *)buf = 138544898;
            id v161 = v77;
            __int16 v162 = 2112;
            uint64_t v163 = (uint64_t)v78;
            __int16 v164 = 2112;
            uint64_t v165 = (uint64_t)v79;
            __int16 v166 = 2112;
            long long v167 = v80;
            __int16 v168 = 2112;
            long long v169 = v81;
            __int16 v170 = 2112;
            id v171 = v139;
            __int16 v172 = 2112;
            id v173 = v82;
            _os_log_impl(&dword_1D49D5000, v76, OS_LOG_TYPE_DEFAULT, "%{public}@Characteristic: '%@'/%@ updated value from %@ to %@ at same state number %@ for accessory: %@", buf, 0x48u);

            long long v74 = v142;
            long long v75 = v126;
          }
          [v132 addObject:v37];
          long long v83 = [v37 accessory];
          if (([v83 supportsWoL] & 1) == 0 && !objc_msgSend(v83, "custom1WoBLE")) {
            goto LABEL_48;
          }
          long long v84 = (void *)MEMORY[0x1D9452090]();
          long long v85 = v75;
          uint64_t v86 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v86, OS_LOG_TYPE_INFO))
          {
            long long v87 = HMFGetLogIdentifier();
            uint64_t v88 = [v133 identifier];
            *(_DWORD *)buf = 138544130;
            id v161 = v87;
            __int16 v162 = 2112;
            uint64_t v163 = (uint64_t)v36;
            __int16 v164 = 2112;
            uint64_t v165 = (uint64_t)v37;
            __int16 v166 = 2112;
            long long v167 = v88;
            _os_log_impl(&dword_1D49D5000, v86, OS_LOG_TYPE_INFO, "%{public}@Checking if we should update value hapCharacteristic %@ to hmdCharacteristic %@ for accessory: %@", buf, 0x2Au);
          }
          if (v42
            || ([v37 lastKnownValueUpdateTime],
                uint64_t v89 = objc_claimAutoreleasedReturnValue(),
                [v36 valueUpdatedTime],
                char v90 = objc_claimAutoreleasedReturnValue(),
                uint64_t v91 = [v89 compare:v90],
                v90,
                v89,
                v91))
          {
LABEL_48:

            self = v136;
            goto LABEL_33;
          }
          char v110 = (void *)MEMORY[0x1D9452090]();
          id v111 = v85;
          id v112 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v112, OS_LOG_TYPE_INFO))
          {
            __int16 v113 = HMFGetLogIdentifier();
            __int16 v114 = [v133 identifier];
            *(_DWORD *)buf = v122;
            id v161 = v113;
            __int16 v162 = 2112;
            uint64_t v163 = (uint64_t)v114;
            _os_log_impl(&dword_1D49D5000, v112, OS_LOG_TYPE_INFO, "%{public}@Not updating value because update times and values are the same for accessory: %@", buf, 0x16u);
          }

          uint64_t v34 = v139;
          [v37 setStateNumber:v139];
          int v33 = 1;
        }
        else
        {
          id v92 = (void *)MEMORY[0x1D9452090]();
          uint64_t v93 = self;
          __int16 v94 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v124 = HMFGetLogIdentifier();
            uint64_t v95 = [v37 type];
            __int16 v96 = [v37 instanceID];
            [v37 stateNumber];
            __int16 v97 = v127 = v33;
            [v37 lastKnownValue];
            uint64_t v98 = v143 = v92;
            uint64_t v99 = [v36 value];
            long long v100 = [v133 identifier];
            *(_DWORD *)buf = 138544898;
            id v161 = v124;
            __int16 v162 = 2112;
            uint64_t v163 = v95;
            long long v101 = (void *)v95;
            __int16 v164 = 2112;
            uint64_t v165 = (uint64_t)v96;
            __int16 v166 = 2112;
            long long v167 = v97;
            __int16 v168 = 2112;
            long long v169 = v98;
            __int16 v170 = 2112;
            id v171 = v99;
            __int16 v172 = 2112;
            id v173 = v100;
            _os_log_impl(&dword_1D49D5000, v94, OS_LOG_TYPE_DEBUG, "%{public}@Ignoring the update for characteristic: '%@'/%@/%@ from %@ to %@ for accessory: %@", buf, 0x48u);

            id v92 = v143;
            int v33 = v127;

            uint64_t v34 = v139;
          }
        }
        self = v136;
LABEL_53:
        uint64_t v35 = v146;
        if (!v34) {
          goto LABEL_59;
        }
LABEL_54:
        if ((v33 & 1) != 0 && ([v37 shouldIgnoreCacheValueForRead] & 1) == 0)
        {
          long long v102 = [v37 accessory];
          if (v102) {
            [v123 addObject:v102];
          }
        }
        goto LABEL_59;
      }
      uint64_t v52 = [v36 value];
      if (!v52
        || (long long v53 = (void *)v52,
            char v54 = [v37 shouldUpdateValueFromHAPCharacteristic:v36],
            v53,
            (v54 & 1) != 0))
      {
        uint64_t v141 = (void *)MEMORY[0x1D9452090]();
        long long v55 = self;
        long long v44 = HMFGetOSLogHandle();
        uint64_t v146 = v35;
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          long long v56 = HMFGetLogIdentifier();
          long long v57 = [v37 type];
          long long v58 = [v37 instanceID];
          long long v59 = [v37 lastKnownValue];
          long long v60 = [v37 stateNumber];
          __int16 v61 = [v36 value];
          id v62 = [v133 identifier];
          *(_DWORD *)buf = 138545154;
          id v161 = v56;
          __int16 v162 = 2112;
          uint64_t v163 = (uint64_t)v57;
          __int16 v164 = 2112;
          uint64_t v165 = (uint64_t)v58;
          __int16 v166 = 2112;
          long long v167 = v59;
          __int16 v168 = 2112;
          long long v169 = v60;
          __int16 v170 = 2112;
          id v171 = v61;
          __int16 v172 = 2112;
          id v173 = v139;
          __int16 v174 = 2112;
          long long v175 = v62;
          _os_log_impl(&dword_1D49D5000, v44, OS_LOG_TYPE_DEFAULT, "%{public}@Characteristic: '%@'/%@ updated value / state number from %@/%@ to %@/%@ for accessory: %@", buf, 0x52u);

          self = v136;
        }
LABEL_32:

        [v132 addObject:v37];
LABEL_33:
        uint64_t v34 = v139;
        [v37 setStateNumber:v139];
        __int16 v63 = [v36 notificationContext];

        if (v63)
        {
          id v64 = (void *)MEMORY[0x1D9452090]();
          id v65 = self;
          id v66 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
          {
            uint64_t v67 = HMFGetLogIdentifier();
            uint64_t v68 = [v36 value];
            uint64_t v69 = [v36 notificationContext];
            *(_DWORD *)buf = 138543874;
            id v161 = v67;
            __int16 v162 = 2112;
            uint64_t v163 = (uint64_t)v68;
            __int16 v164 = 2112;
            uint64_t v165 = (uint64_t)v69;
            _os_log_impl(&dword_1D49D5000, v66, OS_LOG_TYPE_INFO, "%{public}@Updating HMD characteristic with value: %@ and notification context: %@", buf, 0x20u);

            self = v136;
          }
        }
        long long v70 = [v36 value];
        long long v71 = [v36 valueUpdatedTime];
        long long v72 = [v36 notificationContext];
        [v37 updateValue:v70 updatedTime:v71 stateNumber:v139 notificationContext:v72];

        int v33 = 1;
        goto LABEL_53;
      }
      char v103 = (void *)MEMORY[0x1D9452090]();
      int v104 = self;
      long long v105 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
      {
        long long v106 = HMFGetLogIdentifier();
        int v107 = [v36 value];
        int v108 = [v37 shortDescription];
        __int16 v109 = [v133 identifier];
        *(_DWORD *)buf = 138544130;
        id v161 = v106;
        __int16 v162 = 2112;
        uint64_t v163 = (uint64_t)v107;
        __int16 v164 = 2112;
        uint64_t v165 = (uint64_t)v108;
        __int16 v166 = 2112;
        long long v167 = v109;
        _os_log_impl(&dword_1D49D5000, v105, OS_LOG_TYPE_INFO, "%{public}@Ignoring same value %@ updates from local for characteristic: '%@' for accessory: %@", buf, 0x2Au);

        uint64_t v34 = v139;
        self = v136;
      }
      [v37 setStateNumber:v34];
      int v33 = 1;
      if (v34) {
        goto LABEL_54;
      }
LABEL_59:

      ++v35;
    }
    while (v138 != v35);
    uint64_t v115 = [v129 countByEnumeratingWithState:&v151 objects:v176 count:16];
    uint64_t v138 = v115;
  }
  while (v115);
LABEL_71:

  long long v149 = 0u;
  long long v150 = 0u;
  long long v147 = 0u;
  long long v148 = 0u;
  id v116 = v123;
  uint64_t v117 = [v116 countByEnumeratingWithState:&v147 objects:v159 count:16];
  if (v117)
  {
    uint64_t v118 = v117;
    uint64_t v119 = *(void *)v148;
    do
    {
      for (uint64_t j = 0; j != v118; ++j)
      {
        if (*(void *)v148 != v119) {
          objc_enumerationMutation(v116);
        }
        [*(id *)(*((void *)&v147 + 1) + 8 * j) notifyingCharacteristicStateNumberUpdated:v34];
      }
      uint64_t v118 = [v116 countByEnumeratingWithState:&v147 objects:v159 count:16];
    }
    while (v118);
  }

  if (v34 != 0 && (v33 & 1) != 0) {
    [(HMDHome *)self saveToCurrentAccountWithReason:@"kCharacteristicValueUpdateStateNumberKey"];
  }

  return v132;
}

- (id)_hmdCharacteristicsForUpdatedHAPCharacteristics:(id)a3 accessoryServer:(id)a4
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v24 = a4;
  objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v6, "count"));
  id v27 = (id)objc_claimAutoreleasedReturnValue();
  int v23 = [(HMDHome *)self accessories];
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id obj = v6;
  uint64_t v25 = [obj countByEnumeratingWithState:&v32 objects:v37 count:16];
  if (v25)
  {
    uint64_t v22 = *(void *)v33;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v33 != v22) {
          objc_enumerationMutation(obj);
        }
        uint64_t v26 = v7;
        BOOL v8 = *(void **)(*((void *)&v32 + 1) + 8 * v7);
        id v9 = [v24 primaryAccessory];
        long long v28 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        id v10 = v23;
        uint64_t v11 = [v10 countByEnumeratingWithState:&v28 objects:v36 count:16];
        if (v11)
        {
          uint64_t v12 = v11;
          uint64_t v13 = *(void *)v29;
          do
          {
            for (uint64_t i = 0; i != v12; ++i)
            {
              if (*(void *)v29 != v13) {
                objc_enumerationMutation(v10);
              }
              id v15 = *(id *)(*((void *)&v28 + 1) + 8 * i);
              objc_opt_class();
              if (objc_opt_isKindOfClass()) {
                id v16 = v15;
              }
              else {
                id v16 = 0;
              }
              id v17 = v16;

              if ([v17 matchesHAPAccessory:v9])
              {
                uint64_t v18 = [v8 instanceID];
                id v19 = [v17 hmdCharacteristicForInstanceId:v18];

                if ([v19 shouldUpdateValueFromHAPCharacteristic:v8]) {
                  [v27 addObject:v19];
                }
              }
            }
            uint64_t v12 = [v10 countByEnumeratingWithState:&v28 objects:v36 count:16];
          }
          while (v12);
        }

        uint64_t v7 = v26 + 1;
      }
      while (v26 + 1 != v25);
      uint64_t v25 = [obj countByEnumeratingWithState:&v32 objects:v37 count:16];
    }
    while (v25);
  }

  return v27;
}

- (void)accessoryBrowser:(id)a3 didUpdateEndpoint:(id)a4
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  id v53 = a3;
  id v6 = a4;
  uint64_t v7 = (void *)MEMORY[0x1E4F1CA48];
  long long v57 = self;
  BOOL v8 = [(HMDHome *)self accessories];
  id v9 = objc_msgSend(v7, "arrayWithCapacity:", objc_msgSend(v8, "count"));

  char v54 = v6;
  [v6 advertisements];
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v58 = [obj countByEnumeratingWithState:&v69 objects:v85 count:16];
  if (v58)
  {
    uint64_t v56 = *(void *)v70;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v70 != v56) {
          objc_enumerationMutation(obj);
        }
        uint64_t v59 = v10;
        uint64_t v11 = [*(id *)(*((void *)&v69 + 1) + 8 * v10) identifier];
        long long v65 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        uint64_t v12 = [(HMDHome *)v57 accessories];
        uint64_t v13 = [v12 countByEnumeratingWithState:&v65 objects:v84 count:16];
        if (v13)
        {
          uint64_t v14 = v13;
          uint64_t v15 = *(void *)v66;
          do
          {
            for (uint64_t i = 0; i != v14; ++i)
            {
              if (*(void *)v66 != v15) {
                objc_enumerationMutation(v12);
              }
              id v17 = *(id *)(*((void *)&v65 + 1) + 8 * i);
              objc_opt_class();
              if (objc_opt_isKindOfClass()) {
                uint64_t v18 = v17;
              }
              else {
                uint64_t v18 = 0;
              }
              id v19 = v18;

              char v20 = [v19 identifier];
              int v21 = [v20 isEqual:v11];

              if (v21) {
                [v9 addObject:v19];
              }
            }
            uint64_t v14 = [v12 countByEnumeratingWithState:&v65 objects:v84 count:16];
          }
          while (v14);
        }

        uint64_t v10 = v59 + 1;
      }
      while (v59 + 1 != v58);
      uint64_t v58 = [obj countByEnumeratingWithState:&v69 objects:v85 count:16];
    }
    while (v58);
  }

  uint64_t v22 = (void *)MEMORY[0x1D9452090]();
  int v23 = v57;
  id v24 = HMFGetOSLogHandle();
  uint64_t v25 = v54;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    uint64_t v26 = HMFGetLogIdentifier();
    id v27 = [v54 sessionIdentifier];
    *(_DWORD *)buf = 138544130;
    long long v75 = v26;
    __int16 v76 = 2112;
    long long v77 = v27;
    __int16 v78 = 2112;
    id v79 = obj;
    __int16 v80 = 2112;
    id v81 = v9;
    _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_INFO, "%{public}@Endpoint %@ with advertisements %@ matches accessories %@", buf, 0x2Au);
  }
  if ([v9 count])
  {
    long long v28 = [v54 sessionIdentifier];
    if (!v28)
    {
      int v39 = (void *)MEMORY[0x1D9452090]();
      uint64_t v40 = v23;
      uint64_t v41 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
      {
        BOOL v42 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        long long v75 = v42;
        __int16 v76 = 2112;
        long long v77 = 0;
        _os_log_impl(&dword_1D49D5000, v41, OS_LOG_TYPE_INFO, "%{public}@Nil session identifier - dropping update for endpoint %@", buf, 0x16u);
      }
      goto LABEL_46;
    }
    uint64_t v29 = [(HMDHome *)v23 mediaSessionWithIdentifier:v28];
    long long v60 = v28;
    if (v29)
    {
      long long v30 = (void *)v29;
      long long v31 = (void *)MEMORY[0x1D9452090]();
      long long v32 = v23;
      long long v33 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        long long v34 = HMFGetLogIdentifier();
        long long v35 = [v30 uuid];
        long long v36 = [v35 UUIDString];
        uint64_t v37 = [v9 count];
        *(_DWORD *)buf = 138544386;
        long long v75 = v34;
        __int16 v76 = 2112;
        long long v77 = v36;
        __int16 v78 = 2112;
        id v79 = v28;
        __int16 v80 = 2112;
        id v81 = obj;
        __int16 v82 = 2048;
        uint64_t v83 = v37;
        uint64_t v38 = "%{public}@Updated the endpoint for mediaSession %@ with sessionIdentifier %@ (%@ advertisements for %tu accessories) ";
LABEL_32:
        _os_log_impl(&dword_1D49D5000, v33, OS_LOG_TYPE_INFO, v38, buf, 0x34u);
      }
    }
    else
    {
      long long v30 = [(HMDHome *)v23 _createMediaSessionWithEndpoint:v54];
      long long v31 = (void *)MEMORY[0x1D9452090]();
      long long v43 = v23;
      long long v33 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        long long v34 = HMFGetLogIdentifier();
        long long v35 = [v30 uuid];
        long long v36 = [v35 UUIDString];
        uint64_t v44 = [v9 count];
        *(_DWORD *)buf = 138544386;
        long long v75 = v34;
        __int16 v76 = 2112;
        long long v77 = v36;
        __int16 v78 = 2112;
        id v79 = v28;
        __int16 v80 = 2112;
        id v81 = obj;
        __int16 v82 = 2048;
        uint64_t v83 = v44;
        uint64_t v38 = "%{public}@Creating mediaSession %@ for sessionIdentifier %@ (%@ advertisements for %tu accessories) ";
        goto LABEL_32;
      }
    }

    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    id v45 = v9;
    uint64_t v46 = [v45 countByEnumeratingWithState:&v61 objects:v73 count:16];
    if (v46)
    {
      uint64_t v47 = v46;
      uint64_t v48 = *(void *)v62;
      do
      {
        for (uint64_t j = 0; j != v47; ++j)
        {
          if (*(void *)v62 != v48) {
            objc_enumerationMutation(v45);
          }
          id v50 = *(id *)(*((void *)&v61 + 1) + 8 * j);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v51 = v50;
          }
          else {
            id v51 = 0;
          }
          id v52 = v51;

          if (!v52) {
            [v50 setReachable:1];
          }
          [v50 updateMediaSession:v30];
        }
        uint64_t v47 = [v45 countByEnumeratingWithState:&v61 objects:v73 count:16];
      }
      while (v47);
    }

    uint64_t v25 = v54;
    long long v28 = v60;
LABEL_46:
  }
}

- (void)accessoryBrowser:(id)a3 identifier:(id)a4 reachable:(BOOL)a5
{
  BOOL v17 = a5;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v6 = a4;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v7 = [(HMDHome *)self accessories];
  uint64_t v8 = [v7 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v19;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v19 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(id *)(*((void *)&v18 + 1) + 8 * v11);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        id v14 = v13;

        if (!v14)
        {
          uint64_t v15 = [v12 identifier];
          int v16 = [v15 isEqualToString:v6];

          if (v16) {
            [v12 setReachable:v17];
          }
        }

        ++v11;
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v9);
  }
}

void __85__HMDHome_accessoryBrowser_accessoryServer_didDiscoverAccessories_transaction_error___block_invoke(uint64_t a1, void *a2)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  [v3 setReachability:0 serverIdentifier:*(void *)(a1 + 32) linkType:*(void *)(a1 + 48)];
  if ([v3 hasBTLELink] && *(void *)(a1 + 48) == 2)
  {
    id v4 = [*(id *)(a1 + 40) accessoryBrowser];
    v8[0] = *(void *)(a1 + 32);
    int v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v8 count:1];
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __85__HMDHome_accessoryBrowser_accessoryServer_didDiscoverAccessories_transaction_error___block_invoke_2;
    v6[3] = &unk_1E6A07248;
    id v7 = v3;
    [v4 probeReachabilityForBTLEAccessoryServersWithIdentifiers:v5 forceScan:1 withCompletion:v6];
  }
}

uint64_t __85__HMDHome_accessoryBrowser_accessoryServer_didDiscoverAccessories_transaction_error___block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setReachability:a3 serverIdentifier:a2 linkType:2];
}

- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didStopPairingWithError:(id)a5
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = [v9 identifier];
  id v12 = [(HMDHome *)self hapAccessoryWithIdentifier:v11];

  if (v12)
  {
    uint64_t v13 = (void *)MEMORY[0x1D9452090]();
    id v14 = self;
    uint64_t v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      int v16 = HMFGetLogIdentifier();
      BOOL v17 = [v9 shortDescription];
      *(_DWORD *)buf = 138543874;
      uint64_t v37 = v16;
      __int16 v38 = 2112;
      int v39 = v17;
      __int16 v40 = 2112;
      id v41 = v10;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@Accessory server %@ stopped pairing with error: %@", buf, 0x20u);
    }
    long long v18 = (void *)MEMORY[0x1D9452090]();
    long long v19 = v14;
    long long v20 = HMFGetOSLogHandle();
    BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_INFO);
    if (v10)
    {
      if (v21)
      {
        uint64_t v22 = HMFGetLogIdentifier();
        uint64_t v23 = [v9 shortDescription];
        *(_DWORD *)buf = 138543874;
        uint64_t v37 = v22;
        __int16 v38 = 2112;
        int v39 = v23;
        __int16 v40 = 2112;
        id v41 = v10;
        _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@Accessory server %@ failed to pair with error: %@", buf, 0x20u);
      }
      id v24 = [v10 userInfo];
      uint64_t v25 = [v24 objectForKeyedSubscript:*MEMORY[0x1E4F28A50]];

      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t v26 = v25;
      }
      else {
        uint64_t v26 = 0;
      }
      id v27 = v26;

      long long v28 = [v27 domain];
      int v29 = HMFEqualObjects();

      if (!v29 || [v27 code] != -6754)
      {
        [v12 setLastPairingFailureTime:CFAbsoluteTimeGetCurrent()];
        objc_msgSend(v12, "setConsecutivePairingFailures:", objc_msgSend(v12, "consecutivePairingFailures") + 1);
      }
      long long v30 = [v9 identifier];
      uint64_t v31 = [v9 linkType];
      v34[0] = MEMORY[0x1E4F143A8];
      v34[1] = 3221225472;
      v34[2] = __68__HMDHome_accessoryBrowser_accessoryServer_didStopPairingWithError___block_invoke;
      v34[3] = &unk_1E6A175A8;
      id v35 = v10;
      [(HMDHome *)v19 _notifyRetrievalError:v35 accessoryServer:v30 linkType:v31 accessoryOperationBlock:v34];
    }
    else
    {
      if (v21)
      {
        long long v32 = HMFGetLogIdentifier();
        long long v33 = [v9 shortDescription];
        *(_DWORD *)buf = 138543618;
        uint64_t v37 = v32;
        __int16 v38 = 2112;
        int v39 = v33;
        _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@Accessory server %@ pairing completed successfully", buf, 0x16u);
      }
      id v27 = [(HMDHome *)v19 accessoryBrowser];
      [v27 discoverAccessories:v9];
    }
  }
}

uint64_t __68__HMDHome_accessoryBrowser_accessoryServer_didStopPairingWithError___block_invoke(uint64_t a1, void *a2)
{
  return [a2 didEncounterError:*(void *)(a1 + 32)];
}

- (void)accessoryBrowser:(id)a3 discoveryFailedWithError:(id)a4 accessoryServer:(id)a5 linkType:(int64_t)a6
{
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = [(HMDHome *)self hapAccessoryWithIdentifier:v10];
  if (v11)
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    void v12[2] = __78__HMDHome_accessoryBrowser_discoveryFailedWithError_accessoryServer_linkType___block_invoke;
    v12[3] = &unk_1E6A07220;
    int64_t v14 = a6;
    id v13 = v10;
    [(HMDHome *)self _notifyRetrievalError:v9 accessoryServer:v13 linkType:a6 accessoryOperationBlock:v12];
  }
}

void __78__HMDHome_accessoryBrowser_discoveryFailedWithError_accessoryServer_linkType___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 40) != 2)
  {
    id v6 = v3;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v4 = v6;
    }
    else {
      id v4 = 0;
    }
    id v5 = v4;
    [v5 setReachability:0 serverIdentifier:*(void *)(a1 + 32) linkType:*(void *)(a1 + 40)];

    id v3 = v6;
  }
}

- (void)accessoryBrowser:(id)a3 didFinishWACForAccessoryWithIdentifier:(id)a4 error:(id)a5
{
  id v10 = a4;
  id v7 = a5;
  id v8 = [(HMDHome *)self accessoryWithIdentifier:v10];
  if (v8)
  {
    id v9 = [(HMDHome *)self homeReprovisionHandler];
    [v9 handleReprovionedAccessory:v8 identifier:v10 error:v7];
  }
}

- (void)accessoryBrowser:(id)a3 didFindAccessoryServerNeedingReprovisioning:(id)a4 error:(id)a5
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  if ([v9 isPaired])
  {
    uint64_t v11 = [v9 identifier];
    id v12 = [(HMDHome *)self hapAccessoryWithIdentifier:v11];

    if (v12)
    {
      id v13 = (void *)MEMORY[0x1D9452090]();
      int64_t v14 = self;
      uint64_t v15 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        int v16 = HMFGetLogIdentifier();
        BOOL v17 = [v12 shortDescription];
        int v19 = 138543618;
        long long v20 = v16;
        __int16 v21 = 2112;
        uint64_t v22 = v17;
        _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@Accessory %@ needs reprovisioning is found", (uint8_t *)&v19, 0x16u);
      }
      long long v18 = [(HMDHome *)v14 homeReprovisionHandler];
      [v18 handleFoundAccessoryNeedingReprovisioning:v12 error:v10];
    }
  }
}

- (void)accessoryBrowser:(id)a3 didTombstoneAccessoryServer:(id)a4
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = [v7 identifier];
  id v9 = [(HMDHome *)self hapAccessoryWithIdentifier:v8];

  if (v9)
  {
    id v10 = (void *)MEMORY[0x1D9452090]();
    uint64_t v11 = self;
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      int64_t v14 = [v9 shortDescription];
      int v15 = 138543874;
      int v16 = v13;
      __int16 v17 = 2112;
      id v18 = v7;
      __int16 v19 = 2112;
      long long v20 = v14;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@AccessoryServer %@ tombstoned - unconfiguring all paired accessories for %@", (uint8_t *)&v15, 0x20u);
    }
    [(HMDHome *)v11 _unconfigurePairedAccessoriesForServer:v7 updateReachability:1];
  }
}

- (void)accessoryBrowser:(id)a3 didRemoveAccessoryServer:(id)a4 error:(id)a5
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = [v9 identifier];
  id v12 = [(HMDHome *)self hapAccessoryWithIdentifier:v11];

  if (v12)
  {
    uint64_t v13 = [v9 linkType];
    if (v10) {
      BOOL v14 = 0;
    }
    else {
      BOOL v14 = v13 == 2;
    }
    uint64_t v15 = !v14;
    uint64_t v16 = [v9 linkType];
    if (v16 == 1) {
      uint64_t v16 = objc_msgSend(v12, "_wol_processDidRemoveHPAccessoryServer:", v9);
    }
    __int16 v17 = (void *)MEMORY[0x1D9452090](v16);
    id v18 = self;
    __int16 v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      long long v20 = HMFGetLogIdentifier();
      uint64_t v21 = @"not updating";
      int v24 = 138543874;
      uint64_t v25 = v20;
      __int16 v26 = 2112;
      if (v15) {
        uint64_t v21 = @"updating";
      }
      id v27 = v9;
      __int16 v28 = 2112;
      int v29 = v21;
      _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_INFO, "%{public}@AccessoryServer %@ removed - %@ reachability", (uint8_t *)&v24, 0x20u);
    }
    [(HMDHome *)v18 _unconfigurePairedAccessoriesForServer:v9 updateReachability:v15];
    uint64_t v22 = objc_alloc_init(HMDHAPMetricsLogEvent);
    [(HMDHAPMetricsLogEvent *)v22 updateWithHAPAccessoryServer:v9];
    uint64_t v23 = [(HMDHome *)v18 logEventSubmitter];
    [v23 submitLogEvent:v22];
  }
}

- (void)handleRemovedMediaSessions:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __38__HMDHome_handleRemovedMediaSessions___block_invoke;
  v7[3] = &unk_1E6A197C8;
  id v8 = v4;
  id v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __38__HMDHome_handleRemovedMediaSessions___block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v2 = [*(id *)(a1 + 32) userInfo];
  id v3 = objc_msgSend(v2, "hmf_arrayForKey:", @"kRemovedMediaSessionIdentifiersKey");

  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v4 = v3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        objc_msgSend(*(id *)(a1 + 40), "_removeMediaSessionWithIdentifier:", *(void *)(*((void *)&v9 + 1) + 8 * v8++), (void)v9);
      }
      while (v6 != v8);
      uint64_t v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v6);
  }
}

- (void)accessoryBrowser:(id)a3 didRemoveAccessoryAdvertisement:(id)a4
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v7 identifier];
  long long v9 = [(HMDHome *)self accessoryWithIdentifier:v8];

  if (v9)
  {
    long long v10 = (void *)MEMORY[0x1D9452090]();
    long long v11 = self;
    long long v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = HMFGetLogIdentifier();
      int v14 = 138543618;
      uint64_t v15 = v13;
      __int16 v16 = 2112;
      id v17 = v7;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Handling removed advertisement: %@", (uint8_t *)&v14, 0x16u);
    }
    [v9 removeAdvertisement:v7];
  }
}

- (void)accessoryBrowser:(id)a3 didAddAccessoryAdvertisement:(id)a4
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v7 identifier];
  long long v9 = [(HMDHome *)self accessoryWithIdentifier:v8];

  if (v9)
  {
    long long v10 = (void *)MEMORY[0x1D9452090]();
    long long v11 = self;
    long long v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = HMFGetLogIdentifier();
      int v14 = 138543618;
      uint64_t v15 = v13;
      __int16 v16 = 2112;
      id v17 = v7;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Handling added advertisement: %@", (uint8_t *)&v14, 0x16u);
    }
    [v9 addAdvertisement:v7];
  }
}

uint64_t __60__HMDHome__shouldAvoidTombstoningAccessoryServer_accessory___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 accessoryUUID];
  id v4 = [*(id *)(a1 + 32) uuid];
  uint64_t v5 = [v3 isEqual:v4];

  return v5;
}

- (BOOL)_isEventTriggerOnLocalDeviceForAccessory:(id)a3
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v5 = [(HMDHome *)self triggers];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v15;
    while (2)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v5);
        }
        id v9 = *(id *)(*((void *)&v14 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          long long v10 = v9;
        }
        else {
          long long v10 = 0;
        }
        id v11 = v10;

        char v12 = [v11 isEventTriggerOnLocalDeviceForAccessory:v4];
        if (v12)
        {
          LOBYTE(v6) = 1;
          goto LABEL_14;
        }
      }
      uint64_t v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
LABEL_14:

  return v6;
}

- (BOOL)_isEventTriggerOnRemoteGatewayForAccessory:(id)a3
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v5 = [(HMDHome *)self triggers];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v15;
    while (2)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v5);
        }
        id v9 = *(id *)(*((void *)&v14 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          long long v10 = v9;
        }
        else {
          long long v10 = 0;
        }
        id v11 = v10;

        char v12 = [v11 isEventTriggerOnRemoteGatewayForAccessory:v4];
        if (v12)
        {
          LOBYTE(v6) = 1;
          goto LABEL_14;
        }
      }
      uint64_t v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
LABEL_14:

  return v6;
}

- (BOOL)_isRegisteredForNotificationsForClients:(id)a3
{
  id v3 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;
  char v6 = [v5 isClientRegisteredForNotifications];

  return v6;
}

- (BOOL)_isRegisteredForNotificationsWithRemoteGateway:(id)a3
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  char v6 = [v5 services];
  uint64_t v7 = (void *)[v6 copy];

  uint64_t v8 = [v7 countByEnumeratingWithState:&v25 objects:v30 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v26 != v10) {
          objc_enumerationMutation(v7);
        }
        char v12 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        long long v21 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        uint64_t v13 = objc_msgSend(v12, "characteristics", 0);
        long long v14 = (void *)[v13 copy];

        uint64_t v15 = [v14 countByEnumeratingWithState:&v21 objects:v29 count:16];
        if (v15)
        {
          uint64_t v16 = v15;
          uint64_t v17 = *(void *)v22;
          while (2)
          {
            for (uint64_t j = 0; j != v16; ++j)
            {
              if (*(void *)v22 != v17) {
                objc_enumerationMutation(v14);
              }
              if ([*(id *)(*((void *)&v21 + 1) + 8 * j) notificationRegisteredWithRemoteGateway])
              {

                BOOL v19 = 1;
                goto LABEL_22;
              }
            }
            uint64_t v16 = [v14 countByEnumeratingWithState:&v21 objects:v29 count:16];
            if (v16) {
              continue;
            }
            break;
          }
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v25 objects:v30 count:16];
      BOOL v19 = 0;
    }
    while (v9);
  }
  else
  {
    BOOL v19 = 0;
  }
LABEL_22:

  return v19;
}

- (HMFMessageDestination)messageDestination
{
  id v3 = objc_alloc(MEMORY[0x1E4F65488]);
  id v4 = [(HMDHome *)self messageTargetUUID];
  id v5 = (void *)[v3 initWithTarget:v4];

  return (HMFMessageDestination *)v5;
}

- (void)_removeCorruptAccessories
{
  id v2 = self;
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v3 = [(HMDHome *)self accessories];
  long long v25 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v3, "count"));
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v4 = v3;
  uint64_t v28 = [v4 countByEnumeratingWithState:&v29 objects:v41 count:16];
  if (v28)
  {
    uint64_t v6 = *(void *)v30;
    *(void *)&long long v5 = 138544130;
    long long v22 = v5;
    id v23 = v4;
    long long v24 = v2;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v30 != v6) {
          objc_enumerationMutation(v4);
        }
        id v8 = *(id *)(*((void *)&v29 + 1) + 8 * v7);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v9 = v8;
        }
        else {
          uint64_t v9 = 0;
        }
        id v10 = v9;

        id v11 = [v8 identifier];
        if (v11)
        {
          char v12 = v11;
          if (!v10)
          {

LABEL_16:
            objc_msgSend(v25, "addObject:", v8, v22);
            goto LABEL_17;
          }
          uint64_t v13 = [v10 uniqueIdentifier];

          if (v13) {
            goto LABEL_16;
          }
        }
        long long v14 = (void *)MEMORY[0x1D9452090]();
        uint64_t v15 = v2;
        uint64_t v16 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          long long v26 = HMFGetLogIdentifier();
          uint64_t v17 = [v8 uuid];
          uint64_t v18 = [v17 UUIDString];
          BOOL v19 = [v8 identifier];
          [v10 uniqueIdentifier];
          long long v27 = v14;
          v21 = uint64_t v20 = v6;
          *(_DWORD *)buf = v22;
          long long v34 = v26;
          __int16 v35 = 2112;
          long long v36 = v18;
          __int16 v37 = 2112;
          __int16 v38 = v19;
          __int16 v39 = 2112;
          __int16 v40 = v21;
          _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_DEBUG, "%{public}@Incomplete accessory: %@ (%@ / %@)", buf, 0x2Au);

          uint64_t v6 = v20;
          long long v14 = v27;

          id v4 = v23;
          id v2 = v24;
        }
LABEL_17:

        ++v7;
      }
      while (v28 != v7);
      uint64_t v28 = [v4 countByEnumeratingWithState:&v29 objects:v41 count:16];
    }
    while (v28);
  }

  [(HMDHome *)v2 setAccessories:v25];
}

BOOL __28__HMDHome__encodeWithCoder___block_invoke(uint64_t a1, void *a2)
{
  id v2 = [a2 device];
  id v3 = [v2 productInfo];
  BOOL v4 = [v3 productClass] != 3;

  return v4;
}

- (id)_initWithCoder:(id)a3
{
  v369[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v5 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"homeName"];
  uint64_t v6 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"homeUUID"];
  uint64_t v7 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v6];
  id v8 = [(HMDHome *)self initWithName:v5 uuid:v7 defaultRoomUUID:0 owner:0 homeManager:0 presenceAuth:0];

  if (!v8) {
    goto LABEL_214;
  }
  v303 = v6;
  id v304 = v5;
  __int16 v305 = v7;
  uint64_t v9 = +[HMDHome zoneIDFromHomeUUID:v8->_uuid];
  zoneID = v8->_zoneID;
  v8->_zoneID = (NSUUID *)v9;

  v313 = v8;
  uint64_t v11 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"creationDate"];
  creationDate = v8->_creationDate;
  v8->_creationDate = (NSDate *)v11;

  uint64_t v13 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"firstHAPAccessoryAddedDate"];
  firstHAPAccessoryAddedDate = v8->_firstHAPAccessoryAddedDate;
  v8->_firstHAPAccessoryAddedDate = (NSDate *)v13;

  uint64_t v15 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"homeAdmin"];
  ownerName = v8->_ownerName;
  v8->_ownerName = (NSString *)v15;

  BOOL v17 = +[HMDHomeManager isThisDeviceAdminOfHome:v8];
  v8->_ownerUser = v17;
  if (v17)
  {
    uint64_t v18 = [(HMDHome *)v8 localCapabilitiesDataSource];
    int v19 = [v18 isResidentCapable];

    id v8 = v313;
    if (v19)
    {
      uint64_t v20 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"kHMDHomePresenceMonitorCodingKey"];
      long long v21 = v20;
      if (!v20) {
        long long v21 = objc_alloc_init(HMDHomePresenceMonitor);
      }
      objc_storeStrong((id *)&v313->_presenceMonitor, v21);
      if (!v20) {

      }
      long long v22 = objc_alloc_init(HMDHomePeriodicReader);
      periodicReader = v313->_periodicReader;
      v313->_periodicReader = v22;

      id v8 = v313;
    }
  }
  long long v24 = [[HMDHomeAdministratorHandler alloc] initWithHome:v8];
  administratorHandler = v8->_administratorHandler;
  v8->_administratorHandler = v24;

  if (v8->_ownerUser || isWatch())
  {
    sharedHomeUpdateHandler = v8->_sharedHomeUpdateHandler;
    v8->_sharedHomeUpdateHandler = 0;
  }
  else
  {
    int v126 = objc_alloc_init(HMDSharedHomeUpdateHandler);
    int v127 = v8->_sharedHomeUpdateHandler;
    v8->_sharedHomeUpdateHandler = v126;

    [(HMDSharedHomeUpdateHandler *)v8->_sharedHomeUpdateHandler configureWithHome:v8];
  }
  long long v27 = [v4 decodeObjectOfClass:objc_opt_class() forKey:*MEMORY[0x1E4F2ED60]];
  mediaSystemController = v27;
  if (!v27) {
    mediaSystemController = v313->_mediaSystemController;
  }
  objc_storeStrong((id *)&v313->_mediaSystemController, mediaSystemController);

  rooms = v313->_rooms;
  long long v30 = (void *)MEMORY[0x1E4F1CAD0];
  v369[0] = objc_opt_class();
  v369[1] = objc_opt_class();
  long long v31 = [MEMORY[0x1E4F1C978] arrayWithObjects:v369 count:2];
  long long v32 = [v30 setWithArray:v31];
  long long v33 = [v4 decodeObjectOfClasses:v32 forKey:@"rooms"];
  [(NSMutableArray *)rooms setArray:v33];

  zones = v313->_zones;
  __int16 v35 = (void *)MEMORY[0x1E4F1CAD0];
  v368[0] = objc_opt_class();
  v368[1] = objc_opt_class();
  long long v36 = [MEMORY[0x1E4F1C978] arrayWithObjects:v368 count:2];
  __int16 v37 = [v35 setWithArray:v36];
  __int16 v38 = [v4 decodeObjectOfClasses:v37 forKey:@"zones"];
  [(NSMutableArray *)zones setArray:v38];

  if ([v4 containsValueForKey:@"accessories"])
  {
    __int16 v39 = +[HMDHome supportedAccessoryClasses];
    __int16 v40 = [v4 decodeObjectOfClasses:v39 forKey:@"accessories"];
    [(HMDHome *)v313 _addAccessories:v40];
  }
  if ([v4 containsValueForKey:@"accessories.airplay"])
  {
    id v41 = +[HMDHome supportedAccessoryClasses];
    uint64_t v42 = [v4 decodeObjectOfClasses:v41 forKey:@"accessories.airplay"];
    [(HMDHome *)v313 _addAccessories:v42];
  }
  if ([v4 containsValueForKey:@"accessories.homepod"])
  {
    long long v43 = +[HMDHome supportedAccessoryClasses];
    uint64_t v44 = [v4 decodeObjectOfClasses:v43 forKey:@"accessories.homepod"];
    [(HMDHome *)v313 _addAccessories:v44];
  }
  if ([v4 containsValueForKey:@"accessories.homepod_6_1"])
  {
    id v45 = +[HMDHome supportedAccessoryClasses];
    uint64_t v46 = [v4 decodeObjectOfClasses:v45 forKey:@"accessories.homepod_6_1"];
    [(HMDHome *)v313 _addAccessories:v46];
  }
  if ([v4 containsValueForKey:@"HM.AppleMediaAccessorySensor"])
  {
    uint64_t v47 = +[HMDHome supportedAccessoryClasses];
    uint64_t v48 = [v4 decodeObjectOfClasses:v47 forKey:@"HM.AppleMediaAccessorySensor"];
    [(HMDHome *)v313 _addAccessories:v48];
  }
  uint64_t v49 = *MEMORY[0x1E4F2D608];
  if ([v4 containsValueForKey:*MEMORY[0x1E4F2D608]]) {
    -[HMDHome setMultiUserEnabled:](v313, "setMultiUserEnabled:", [v4 decodeBoolForKey:v49]);
  }
  v313->_soundCheckEnabled = [v4 decodeBoolForKey:*MEMORY[0x1E4F2D718]];
  id v50 = [v4 decodeObjectOfClass:objc_opt_class() forKey:*MEMORY[0x1E4F2D708]];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v51 = v50;
  }
  else {
    id v51 = 0;
  }
  id v52 = v51;

  v313->_siriPhraseOptions = [v52 unsignedIntegerValue];
  v313->_locationServicesEnabled = [v4 decodeBoolForKey:*MEMORY[0x1E4F2D2D8]];
  v313->_didOnboardLocationServices = [v4 decodeBoolForKey:*MEMORY[0x1E4F2D1F8]];
  uint64_t v53 = *MEMORY[0x1E4F2D278];
  if ([v4 containsValueForKey:*MEMORY[0x1E4F2D278]]) {
    -[HMDHome setHasAnyUserAcknowledgedCameraRecordingOnboarding:](v313, "setHasAnyUserAcknowledgedCameraRecordingOnboarding:", [v4 decodeBoolForKey:v53]);
  }
  uint64_t v54 = *MEMORY[0x1E4F2D280];
  if ([v4 containsValueForKey:*MEMORY[0x1E4F2D280]]) {
    v313->_hasOnboardedForAccessCode = [v4 decodeBoolForKey:v54];
  }
  uint64_t v55 = *MEMORY[0x1E4F2D288];
  if ([v4 containsValueForKey:*MEMORY[0x1E4F2D288]]) {
    v313->_hasOnboardedForWalletKey = [v4 decodeBoolForKey:v55];
  }
  else {
    v313->_shouldEncodeHasOnboardedForWalletKey = 0;
  }
  serviceGroups = v313->_serviceGroups;
  long long v57 = (void *)MEMORY[0x1E4F1CAD0];
  v367[0] = objc_opt_class();
  v367[1] = objc_opt_class();
  uint64_t v58 = [MEMORY[0x1E4F1C978] arrayWithObjects:v367 count:2];
  uint64_t v59 = [v57 setWithArray:v58];
  long long v60 = [v4 decodeObjectOfClasses:v59 forKey:*MEMORY[0x1E4F2EE30]];
  [(NSMutableArray *)serviceGroups setArray:v60];

  long long v61 = (void *)MEMORY[0x1E4F1CAD0];
  v366[0] = objc_opt_class();
  v366[1] = objc_opt_class();
  long long v62 = [MEMORY[0x1E4F1C978] arrayWithObjects:v366 count:2];
  uint64_t v63 = [v61 setWithArray:v62];

  actionSets = v313->_actionSets;
  long long v65 = [v4 decodeObjectOfClasses:v63 forKey:@"actionSets"];
  [(NSMutableArray *)actionSets setArray:v65];

  triggerOwnedActionSets = v313->_triggerOwnedActionSets;
  long long v67 = [v4 decodeObjectOfClasses:v63 forKey:@"HM.triggerOwnedActionSets"];
  [(NSMutableArray *)triggerOwnedActionSets setArray:v67];

  long long v68 = [MEMORY[0x1E4F1CA48] array];
  v302 = (void *)v63;
  long long v69 = [v4 decodeObjectOfClasses:v63 forKey:@"builtinActionSets"];
  [v68 setArray:v69];

  long long v301 = v68;
  if ([v68 count])
  {
    [(NSMutableArray *)v313->_actionSets addObjectsFromArray:v68];
  }
  else if ([(HMDHome *)v313 isOwnerUser])
  {
    long long v70 = (void *)MEMORY[0x1D9452090]();
    long long v71 = v313;
    HMFGetOSLogHandle();
    long long v72 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v73 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v74 = [(NSMutableArray *)v313->_actionSets count];
      *(_DWORD *)buf = 138543618;
      id v363 = v73;
      __int16 v364 = 2048;
      uint64_t v365 = v74;
      _os_log_impl(&dword_1D49D5000, v72, OS_LOG_TYPE_INFO, "%{public}@init: %ld user-defined actionSets; no builtin actionSets - creating....",
        buf,
        0x16u);
    }
    long long v75 = v313->_actionSets;
    __int16 v76 = [(HMDHome *)v71 _createBuiltinActionSets];
    [(NSMutableArray *)v75 addObjectsFromArray:v76];
  }
  removedUsers = v313->_removedUsers;
  __int16 v78 = (void *)MEMORY[0x1E4F1CAD0];
  v361[0] = objc_opt_class();
  v361[1] = objc_opt_class();
  id v79 = [MEMORY[0x1E4F1C978] arrayWithObjects:v361 count:2];
  __int16 v80 = [v78 setWithArray:v79];
  id v81 = [v4 decodeObjectOfClasses:v80 forKey:@"HM.removedUsersCodingKey"];
  [(NSMutableArray *)removedUsers setArray:v81];

  v318 = [MEMORY[0x1E4F1CA80] set];
  __int16 v82 = [MEMORY[0x1E4F1CA80] set];
  if ([v4 containsValueForKey:@"residentDevices"])
  {
    uint64_t v83 = (void *)MEMORY[0x1E4F1CAD0];
    v360[0] = objc_opt_class();
    v360[1] = objc_opt_class();
    long long v84 = [MEMORY[0x1E4F1C978] arrayWithObjects:v360 count:2];
    long long v85 = [v83 setWithArray:v84];
    uint64_t v86 = [v4 decodeObjectOfClasses:v85 forKey:@"residentDevices"];
    [v318 addObjectsFromArray:v86];
  }
  if ([v4 containsValueForKey:@"HM.sharedUsers"])
  {
    long long v87 = (void *)MEMORY[0x1E4F1CAD0];
    v359[0] = objc_opt_class();
    v359[1] = objc_opt_class();
    uint64_t v88 = [MEMORY[0x1E4F1C978] arrayWithObjects:v359 count:2];
    uint64_t v89 = [v87 setWithArray:v88];
    char v90 = [v4 decodeObjectOfClasses:v89 forKey:@"HM.sharedUsers"];
    [v82 addObjectsFromArray:v90];
  }
  uint64_t v91 = (void *)MEMORY[0x1E4F1CAD0];
  v358[0] = objc_opt_class();
  v358[1] = objc_opt_class();
  id v92 = [MEMORY[0x1E4F1C978] arrayWithObjects:v358 count:2];
  uint64_t v93 = [v91 setWithArray:v92];
  __int16 v307 = v4;
  __int16 v94 = [v4 decodeObjectOfClasses:v93 forKey:@"users"];
  [v82 addObjectsFromArray:v94];

  long long v341 = 0u;
  long long v342 = 0u;
  long long v339 = 0u;
  long long v340 = 0u;
  id obj = v82;
  uint64_t v95 = [obj countByEnumeratingWithState:&v339 objects:v357 count:16];
  if (v95)
  {
    uint64_t v96 = v95;
    id v314 = *(id *)v340;
    do
    {
      for (uint64_t i = 0; i != v96; ++i)
      {
        if (*(id *)v340 != v314) {
          objc_enumerationMutation(obj);
        }
        uint64_t v98 = *(void **)(*((void *)&v339 + 1) + 8 * i);
        long long v335 = 0u;
        long long v336 = 0u;
        long long v337 = 0u;
        long long v338 = 0u;
        id v99 = v318;
        uint64_t v100 = [v99 countByEnumeratingWithState:&v335 objects:v356 count:16];
        if (v100)
        {
          uint64_t v101 = v100;
          uint64_t v102 = *(void *)v336;
          while (2)
          {
            for (uint64_t j = 0; j != v101; ++j)
            {
              if (*(void *)v336 != v102) {
                objc_enumerationMutation(v99);
              }
              int v104 = [*(id *)(*((void *)&v335 + 1) + 8 * j) userID];
              long long v105 = [v98 userID];
              char v106 = [v104 isEqualToString:v105];

              if (v106)
              {

                goto LABEL_61;
              }
            }
            uint64_t v101 = [v99 countByEnumeratingWithState:&v335 objects:v356 count:16];
            if (v101) {
              continue;
            }
            break;
          }
        }

        [(NSMutableArray *)v313->_users addObject:v98];
LABEL_61:
        ;
      }
      uint64_t v96 = [obj countByEnumeratingWithState:&v339 objects:v357 count:16];
    }
    while (v96);
  }

  users = v313->_users;
  int v108 = [v318 allObjects];
  [(NSMutableArray *)users addObjectsFromArray:v108];

  __int16 v109 = (void *)MEMORY[0x1D9452090]();
  char v110 = v313;
  HMFGetOSLogHandle();
  id v111 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v111, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    id v112 = (id)objc_claimAutoreleasedReturnValue();
    __int16 v113 = v313->_users;
    *(_DWORD *)buf = 138543618;
    id v363 = v112;
    __int16 v364 = 2112;
    uint64_t v365 = (uint64_t)v113;
    _os_log_impl(&dword_1D49D5000, v111, OS_LOG_TYPE_DEBUG, "%{public}@Received users in the home data: %@", buf, 0x16u);
  }
  id v4 = v307;
  __int16 v114 = [v307 decodeObjectOfClass:objc_opt_class() forKey:@"roomForEntireHome"];
  uint64_t v115 = HMDDefaultRoomName();
  id v306 = (void *)v115;
  if (v114)
  {
    [(HMDRoom *)v114 setName:v115];
  }
  else
  {
    id v116 = (void *)MEMORY[0x1D9452090]();
    uint64_t v117 = v110;
    HMFGetOSLogHandle();
    uint64_t v118 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v118, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v119 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      id v363 = v119;
      _os_log_impl(&dword_1D49D5000, v118, OS_LOG_TYPE_INFO, "%{public}@Missing roomForEntireHome - creating one", buf, 0xCu);
    }
    __int16 v114 = [[HMDRoom alloc] initWithName:v306 uuid:0 home:v117];
  }
  long long v300 = v114;
  objc_storeStrong(v110 + 148, v114);
  if (!isWatch())
  {
    uint64_t v120 = [v307 decodeObjectOfClass:objc_opt_class() forKey:@"homeLocationHandler"];
    if (v120) {
      objc_storeStrong(v110 + 62, v120);
    }
  }
  uint64_t v121 = [v307 decodeObjectOfClass:objc_opt_class() forKey:@"homeConfigVersion"];
  v110[149] = (id)[v121 integerValue];

  if ([v307 containsValueForKey:@"lastSyncedHomeConfigVersion"])
  {
    long long v122 = [v307 decodeObjectOfClass:objc_opt_class() forKey:@"lastSyncedHomeConfigVersion"];
    v110[150] = (id)[v122 integerValue];
  }
  if (!isWatch())
  {
    int v123 = [v307 decodeObjectOfClass:objc_opt_class() forKey:@"characteristicNotificationRegistryCodingKey"];
    uint64_t v124 = v123;
    if (v123) {
      int v125 = v123;
    }
    else {
      int v125 = objc_alloc_init(HMDNotificationRegistry);
    }
    id v128 = v110[155];
    v110[155] = v125;

    [v110[155] configureWithHome:v110];
  }
  if (isiOSDevice() || isTVOSDevice())
  {
    id v129 = [v307 decodeObjectOfClass:objc_opt_class() forKey:@"HM.allowsRemoteAccess"];
    int v130 = v129;
    if (v129) {
      *((unsigned char *)v110 + 234) = [v129 BOOLValue];
    }
  }
  if (!isWatch())
  {
    id v131 = v110[47];
    id v132 = (void *)MEMORY[0x1E4F1CAD0];
    v355[0] = objc_opt_class();
    v355[1] = objc_opt_class();
    id v133 = [MEMORY[0x1E4F1C978] arrayWithObjects:v355 count:2];
    id v134 = [v132 setWithArray:v133];
    uint64_t v135 = [v307 decodeObjectOfClasses:v134 forKey:@"HM.invitations"];
    [v131 setArray:v135];

    long long v333 = 0u;
    long long v334 = 0u;
    long long v331 = 0u;
    long long v332 = 0u;
    id v315 = (id)[v110[47] copy];
    uint64_t v136 = [v315 countByEnumeratingWithState:&v331 objects:v354 count:16];
    if (v136)
    {
      uint64_t v137 = v136;
      uint64_t v138 = *(void *)v332;
      do
      {
        for (uint64_t k = 0; k != v137; ++k)
        {
          if (*(void *)v332 != v138) {
            objc_enumerationMutation(v315);
          }
          int v140 = *(void **)(*((void *)&v331 + 1) + 8 * k);
          long long v327 = 0u;
          long long v328 = 0u;
          long long v329 = 0u;
          long long v330 = 0u;
          uint64_t v141 = [v140 operations];
          uint64_t v142 = [v141 countByEnumeratingWithState:&v327 objects:v353 count:16];
          if (v142)
          {
            uint64_t v143 = v142;
            uint64_t v144 = *(void *)v328;
            do
            {
              for (uint64_t m = 0; m != v143; ++m)
              {
                if (*(void *)v328 != v144) {
                  objc_enumerationMutation(v141);
                }
                [*(id *)(*((void *)&v327 + 1) + 8 * m) setDelegate:v110];
              }
              uint64_t v143 = [v141 countByEnumeratingWithState:&v327 objects:v353 count:16];
            }
            while (v143);
          }

          uint64_t v146 = [v140 user];
          long long v147 = v146;
          if (v146)
          {
            long long v148 = v313->_users;
            long long v149 = [v146 userID];
            long long v150 = [(NSMutableArray *)v148 hmf_firstObjectWithValue:v149 forKeyPath:@"userID"];

            if (v150 && [v140 isComplete])
            {
              [v110[47] removeObject:v140];
            }
            else if ([v140 isAccepted])
            {
              [(NSMutableArray *)v313->_users addObject:v147];
              [v110[145] addObject:v147];
              [v147 setHome:v110];
            }
          }
        }
        uint64_t v137 = [v315 countByEnumeratingWithState:&v331 objects:v354 count:16];
      }
      while (v137);
    }

    id v4 = v307;
  }
  long long v151 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"HM.residentDeviceManager"];
  if (v151)
  {
    objc_storeStrong(v110 + 164, v151);
    [v110 _purgeResidentUsers];
  }
  long long v299 = v151;
  v110[181] = (id)[v4 decodeIntegerForKey:@"HMD.nonIPadResidentDeviceCount"];
  if ([v110 isOwnerUser])
  {
    long long v152 = [v110 currentUserFactory];
    long long v153 = ((void (**)(void, uint64_t, id *))v152)[2](v152, 3, v110);

    uint64_t v154 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"kHomeOwnerUUID"];
    if (v154)
    {
      long long v155 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v154];
      [v153 setUUID:v155];
    }
    long long v298 = (void *)v154;
    __int16 v309 = [MEMORY[0x1E4F1CA48] array];
    long long v323 = 0u;
    long long v324 = 0u;
    long long v325 = 0u;
    long long v326 = 0u;
    long long v156 = v313->_users;
    uint64_t v157 = [(NSMutableArray *)v156 countByEnumeratingWithState:&v323 objects:v352 count:16];
    v308 = v153;
    if (v157)
    {
      uint64_t v158 = v157;
      id v310 = 0;
      uint64_t v159 = *(void *)v324;
      do
      {
        for (uint64_t n = 0; n != v158; ++n)
        {
          if (*(void *)v324 != v159) {
            objc_enumerationMutation(v156);
          }
          id v161 = *(void **)(*((void *)&v323 + 1) + 8 * n);
          if ([v161 privilege] == 3 && (objc_msgSend(v161, "isRemoteGateway") & 1) == 0)
          {
            if (v310) {
              goto LABEL_125;
            }
            __int16 v162 = [v161 pairingUsername];
            uint64_t v163 = [v153 pairingUsername];
            int v164 = [v162 isEqual:v163];

            long long v153 = v308;
            if (!v164) {
LABEL_125:
            }
              [v309 addObject:v161];
            else {
              id v310 = v161;
            }
          }
        }
        uint64_t v158 = [(NSMutableArray *)v156 countByEnumeratingWithState:&v323 objects:v352 count:16];
      }
      while (v158);
    }
    else
    {
      id v310 = 0;
    }

    [(NSMutableArray *)v313->_users removeObjectsInArray:v309];
    __int16 v174 = v110 + 5;
    if (v310)
    {
      objc_storeStrong(v110 + 5, v310);
    }
    else
    {
      objc_storeStrong(v110 + 5, v153);
      [(NSMutableArray *)v313->_users addObject:v153];
      [v153 setHome:v110];
    }
    objc_storeStrong(v110 + 6, *v174);
    long long v175 = [MEMORY[0x1E4F1CA48] array];
    long long v319 = 0u;
    long long v320 = 0u;
    long long v321 = 0u;
    long long v322 = 0u;
    int v176 = v313->_users;
    id v316 = (id)[(NSMutableArray *)v176 countByEnumeratingWithState:&v319 objects:v351 count:16];
    if (v316)
    {
      uint64_t v177 = *(void *)v320;
      do
      {
        for (iuint64_t i = 0; ii != v316; iuint64_t i = (char *)ii + 1)
        {
          if (*(void *)v320 != v177) {
            objc_enumerationMutation(v176);
          }
          long long v179 = *(void **)(*((void *)&v319 + 1) + 8 * (void)ii);
          id v180 = [v179 pairingUsername];
          long long v181 = [*v174 pairingUsername];
          if ([v180 isEqual:v181])
          {
            if (![v179 privilege])
            {

              goto LABEL_155;
            }
            uint64_t v182 = [v179 privilege];

            if (v182 == 4) {
              goto LABEL_155;
            }
          }
          else
          {
          }
          if ([v179 isValid]) {
            continue;
          }
          long long v183 = (void *)MEMORY[0x1D9452090]();
          long long v184 = v110;
          HMFGetOSLogHandle();
          long long v185 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v185, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v311 = v183;
            uint64_t v186 = v177;
            long long v187 = v176;
            long long v188 = v174;
            long long v189 = v175;
            id v190 = (id)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            id v363 = v190;
            __int16 v364 = 2112;
            uint64_t v365 = (uint64_t)v179;
            _os_log_impl(&dword_1D49D5000, v185, OS_LOG_TYPE_DEFAULT, "%{public}@Removing invalid user %@", buf, 0x16u);

            long long v175 = v189;
            __int16 v174 = v188;
            int v176 = v187;
            uint64_t v177 = v186;
            long long v183 = v311;
          }

LABEL_155:
          [v175 addObject:v179];
        }
        id v316 = (id)[(NSMutableArray *)v176 countByEnumeratingWithState:&v319 objects:v351 count:16];
      }
      while (v316);
    }

    [(NSMutableArray *)v313->_users removeObjectsInArray:v175];
    id v4 = v307;
    id v171 = v308;
LABEL_159:

    goto LABEL_160;
  }
  uint64_t v165 = [v110 currentUser];

  if (!v165)
  {
    __int16 v166 = (void *)MEMORY[0x1D9452090]();
    long long v167 = v110;
    HMFGetOSLogHandle();
    __int16 v168 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      id v169 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      id v363 = v169;
      _os_log_impl(&dword_1D49D5000, v168, OS_LOG_TYPE_DEFAULT, "%{public}@Current user not found, creating", buf, 0xCu);
    }
    __int16 v170 = [v167 currentUserFactory];
    id v171 = ((void (**)(void, void, id *))v170)[2](v170, 0, v167);

    if (!v171)
    {
      long long v294 = (void *)MEMORY[0x1D9452090]();
      long long v295 = v167;
      HMFGetOSLogHandle();
      long long v296 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v296, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        id v297 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        id v363 = v297;
        _os_log_impl(&dword_1D49D5000, v296, OS_LOG_TYPE_ERROR, "%{public}@Current user cannot be found or created, failing to deserialize home", buf, 0xCu);
      }
      int v290 = 0;
      uint64_t v6 = v303;
      uint64_t v7 = v305;
      goto LABEL_212;
    }
    uint64_t v172 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"kHomeOwnerUUID"];
    if (v172)
    {
      id v173 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v172];
      [v171 setUUID:v173];
    }
    long long v298 = (void *)v172;
    objc_storeStrong(v167 + 6, v171);
    [(NSMutableArray *)v313->_users addObject:v171];
    [v171 setHome:v167];
    goto LABEL_159;
  }
LABEL_160:
  uint64_t v191 = [MEMORY[0x1E4F2EBC0] authWithCoder:v4];
  id v192 = v110[63];
  v110[63] = (id)v191;

  [v110[6] setPresenceAuthStatus:v110[63]];
  uint64_t v193 = [MEMORY[0x1E4F2EBC8] computeWithCoder:v4];
  id v194 = v110[64];
  v110[64] = (id)v193;

  v195 = (void *)MEMORY[0x1D9452090]();
  id v196 = v110;
  HMFGetOSLogHandle();
  id v197 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v197, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v198 = (id)objc_claimAutoreleasedReturnValue();
    id v199 = v110[6];
    *(_DWORD *)buf = 138543618;
    id v363 = v198;
    __int16 v364 = 2112;
    uint64_t v365 = (uint64_t)v199;
    _os_log_impl(&dword_1D49D5000, v197, OS_LOG_TYPE_INFO, "%{public}@Current user is %@", buf, 0x16u);
  }
  v200 = [MEMORY[0x1E4F1CA48] array];
  if ([v4 containsValueForKey:@"triggers"])
  {
    v201 = (void *)MEMORY[0x1E4F1CAD0];
    v350[0] = objc_opt_class();
    v350[1] = objc_opt_class();
    v350[2] = objc_opt_class();
    v350[3] = objc_opt_class();
    id v202 = [MEMORY[0x1E4F1C978] arrayWithObjects:v350 count:4];
    __int16 v203 = [v201 setWithArray:v202];
    v204 = [v4 decodeObjectOfClasses:v203 forKey:@"triggers"];
    [v200 addObjectsFromArray:v204];
  }
  if ([v4 containsValueForKey:@"HM.triggers"])
  {
    __int16 v205 = (void *)MEMORY[0x1E4F1CAD0];
    v349[0] = objc_opt_class();
    v349[1] = objc_opt_class();
    v349[2] = objc_opt_class();
    v349[3] = objc_opt_class();
    uint64_t v206 = [MEMORY[0x1E4F1C978] arrayWithObjects:v349 count:4];
    uint64_t v207 = [v205 setWithArray:v206];
    uint64_t v208 = [v4 decodeObjectOfClasses:v207 forKey:@"HM.triggers"];
    [v200 addObjectsFromArray:v208];
  }
  if ([v4 containsValueForKey:@"HM.homePodTriggers"])
  {
    id v209 = (void *)MEMORY[0x1E4F1CAD0];
    v348[0] = objc_opt_class();
    v348[1] = objc_opt_class();
    id v210 = [MEMORY[0x1E4F1C978] arrayWithObjects:v348 count:2];
    uint64_t v211 = [v209 setWithArray:v210];
    v212 = [v4 decodeObjectOfClasses:v211 forKey:@"HM.homePodTriggers"];
    [v200 addObjectsFromArray:v212];
  }
  if ([v4 containsValueForKey:@"HM.sharedActivationTriggers"])
  {
    id v213 = (void *)MEMORY[0x1E4F1CAD0];
    v347[0] = objc_opt_class();
    v347[1] = objc_opt_class();
    v347[2] = objc_opt_class();
    v347[3] = objc_opt_class();
    v214 = [MEMORY[0x1E4F1C978] arrayWithObjects:v347 count:4];
    v215 = [v213 setWithArray:v214];
    char v216 = [v4 decodeObjectOfClasses:v215 forKey:@"HM.sharedActivationTriggers"];
    [v200 addObjectsFromArray:v216];
  }
  [v196[46] setArray:v200];
  id v217 = v196[173];
  uint64_t v218 = (void *)MEMORY[0x1E4F1CAD0];
  v346[0] = objc_opt_class();
  v346[1] = objc_opt_class();
  uint64_t v219 = [MEMORY[0x1E4F1C978] arrayWithObjects:v346 count:2];
  uint64_t v220 = [v218 setWithArray:v219];
  id v221 = [v4 decodeObjectOfClasses:v220 forKey:@"HM.deviceOwnedTriggers"];
  [v217 setArray:v221];

  uint64_t v222 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"HM.appDataRepository"];
  id v223 = v196[123];
  v196[123] = (id)v222;

  [v196[123] updateParentUUIDIfNil:v313->_uuid];
  uint64_t v224 = *MEMORY[0x1E4F2D1D0];
  if ([v4 containsValueForKey:*MEMORY[0x1E4F2D1D0]]) {
    *((unsigned char *)v196 + 56) = [v4 decodeBoolForKey:v224];
  }
  uint64_t v225 = *MEMORY[0x1E4F2D1D8];
  if ([v4 containsValueForKey:*MEMORY[0x1E4F2D1D8]]) {
    *((unsigned char *)v196 + 57) = [v4 decodeBoolForKey:v225];
  }
  uint64_t v226 = *MEMORY[0x1E4F2D5C8];
  if ([v4 containsValueForKey:*MEMORY[0x1E4F2D5C8]]) {
    v196[8] = (id)[v4 decodeIntegerForKey:v226];
  }
  uint64_t v227 = *MEMORY[0x1E4F2D5E0];
  if ([v4 containsValueForKey:*MEMORY[0x1E4F2D5E0]]) {
    *((unsigned char *)v196 + 72) = [v4 decodeBoolForKey:v227];
  }
  uint64_t v228 = *MEMORY[0x1E4F2D5D0];
  if ([v4 containsValueForKey:*MEMORY[0x1E4F2D5D0]])
  {
    uint64_t v229 = [v4 decodeObjectOfClass:objc_opt_class() forKey:v228];
    id v230 = v196[10];
    v196[10] = (id)v229;
  }
  uint64_t v231 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"kHomeKitVersionStringKey"];
  id v232 = v196[176];
  v196[176] = (id)v231;

  id v233 = v196[176];
  if (v233)
  {
    long long v234 = [[HMDHomeKitVersion alloc] initWithVersionString:@"6.1"];
    int v235 = [v233 isAtLeastVersion:v234];

    if (v235) {
      *((unsigned char *)v196 + 211) = 1;
    }
  }
  uint64_t v236 = *MEMORY[0x1E4F2D610];
  if ([v4 containsValueForKey:*MEMORY[0x1E4F2D610]]) {
    uint64_t v237 = [v4 decodeIntegerForKey:v236];
  }
  else {
    uint64_t v237 = 0;
  }
  v196[33] = (id)v237;
  long long v238 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"HMHM.minimumNetworkRouterSupportHomeKitVersion"];
  if (v238)
  {
    long long v239 = [[HMDHomeKitVersion alloc] initWithVersionString:v238];
    id v240 = v196[41];
    v196[41] = v239;
  }
  long long v241 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"HMHM.minHomeKitVersionForAccessoryNetworkProtectionChangeCodingKey"];

  if (v241)
  {
    long long v242 = [[HMDHomeKitVersion alloc] initWithVersionString:v241];
    id v243 = v196[42];
    v196[42] = v242;
  }
  uint64_t v6 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"HMHM.activeNetworkRouter"];

  if (v6)
  {
    uint64_t v244 = [objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v6];
    id v245 = v196[36];
    v196[36] = (id)v244;
  }
  if ([v4 containsValueForKey:@"HMDHomePrimaryNetworkRouterManagingDeviceUUIDCodingKey"])
  {
    uint64_t v246 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"HMDHomePrimaryNetworkRouterManagingDeviceUUIDCodingKey"];
    id v247 = v196[39];
    v196[39] = (id)v246;
  }
  id v317 = v200;
  int v248 = (void *)MEMORY[0x1E4F1CAD0];
  v345[0] = objc_opt_class();
  v345[1] = objc_opt_class();
  int v249 = [MEMORY[0x1E4F1C978] arrayWithObjects:v345 count:2];
  __int16 v250 = [v248 setWithArray:v249];
  int v251 = [v4 decodeObjectOfClasses:v250 forKey:*MEMORY[0x1E4F2D190]];

  int v252 = [HMDAccessoryNetworkProtectionGroupRegistry alloc];
  uint64_t v253 = [v196 notificationCenter];
  uint64_t v254 = [(HMDAccessoryNetworkProtectionGroupRegistry *)v252 initWithHome:v196 notificationCenter:v253 persistedGroups:v251];
  id v255 = v196[35];
  v196[35] = (id)v254;

  long long v256 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"HMHH.residentReachabilityContext"];
  id v257 = v256;
  if (v256)
  {
    long long v258 = v256;
  }
  else
  {
    long long v258 = objc_alloc_init(HMDResidentReachabilityContext);
  }
  id v259 = [[HMDResidentReachabilityNotificationManager alloc] initWithResidentReachabilityContext:v258 workQueue:v196[130]];
  id v260 = v196[179];
  v196[179] = v259;

  if ([v4 containsValueForKey:@"HMHM.threadNetworkID"])
  {
    uint64_t v261 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"HMHM.threadNetworkID"];
    id v262 = v196[48];
    v196[48] = (id)v261;
  }
  uint64_t v263 = [v4 decodeObjectOfClass:objc_opt_class() forKey:*MEMORY[0x1E4F2D630]];
  id v264 = v196[55];
  v196[55] = (id)v263;

  uint64_t v265 = [v4 decodeObjectOfClass:objc_opt_class() forKey:*MEMORY[0x1E4F2D648]];
  id v266 = v196[178];
  v196[178] = (id)v265;

  uint64_t v267 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"HM.nlcck"];
  id v268 = v196[56];
  v196[56] = (id)v267;

  if ([v4 containsValueForKey:@"HMDHomeLabelsByAccessCodeCodingKey"])
  {
    long long v269 = (void *)MEMORY[0x1E4F1CAD0];
    v344[0] = objc_opt_class();
    v344[1] = objc_opt_class();
    long long v270 = [MEMORY[0x1E4F1C978] arrayWithObjects:v344 count:2];
    long long v271 = [v269 setWithArray:v270];
    long long v272 = [v4 decodeObjectOfClasses:v271 forKey:@"HMDHomeLabelsByAccessCodeCodingKey"];

    uint64_t v273 = [v272 mutableCopy];
    id v274 = v196[81];
    v196[81] = (id)v273;
  }
  if ([v4 containsValueForKey:@"HMDHomeRemovedUserInfoByAccessCodeCodingKey"])
  {
    long long v275 = (void *)MEMORY[0x1E4F1CAD0];
    v343[0] = objc_opt_class();
    v343[1] = objc_opt_class();
    v343[2] = objc_opt_class();
    long long v276 = [MEMORY[0x1E4F1C978] arrayWithObjects:v343 count:3];
    long long v277 = [v275 setWithArray:v276];
    long long v278 = [v4 decodeObjectOfClasses:v277 forKey:@"HMDHomeRemovedUserInfoByAccessCodeCodingKey"];

    uint64_t v279 = [v278 mutableCopy];
    id v280 = v196[82];
    v196[82] = (id)v279;
  }
  if ([v4 containsValueForKey:@"HMDHomeNFCReaderKeyCodingKey"])
  {
    uint64_t v281 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"HMDHomeNFCReaderKeyCodingKey"];
    id v282 = v196[51];
    v196[51] = (id)v281;
  }
  else
  {
    *((unsigned char *)v196 + 226) = 0;
  }
  uint64_t v7 = v305;
  long long v283 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"HMHM.chipStorage"];
  if (v283)
  {
    objc_storeStrong(v196 + 183, v283);
    if (isFeatureMatterLocalFabricConfigEnabled())
    {
      long long v284 = [v283 fabricID];

      if (v284)
      {
        long long v285 = [v283 fabricID];
        [v196[184] setFabricID:v285];
      }
      long long v286 = [v196 homeManager];
      long long v287 = [v286 accessoryBrowser];
      long long v288 = [v287 chipAccessoryServerBrowser];
      long long v289 = [v288 storage];
      [v196[184] setStorage:v289];

      id v4 = v307;
      uint64_t v7 = v305;
    }
  }
  *((unsigned char *)v196 + 237) = [v4 decodeBoolForKey:*MEMORY[0x1E4F2D7A0]];

  int v290 = 1;
LABEL_212:

  long long v5 = v304;
  if (!v290)
  {
    long long v292 = 0;
    long long v291 = v313;
    goto LABEL_216;
  }
  id v8 = v313;
LABEL_214:
  long long v291 = v8;
  long long v292 = v8;
LABEL_216:

  return v292;
}

- (HMDHome)initWithCoder:(id)a3
{
  id v4 = a3;
  long long v5 = (void *)MEMORY[0x1D9452090]();
  uint64_t v6 = (HMDHome *)[(HMDHome *)self _initWithCoder:v4];

  return v6;
}

- (void)fixupHomeAfterDecoding
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  uint64_t v91 = +[HMDProcessInfo privateClientIdentifierSalt];
  __int16 v94 = [MEMORY[0x1E4F1CA60] dictionary];
  uint64_t v88 = self;
  if ([(HMDHome *)self isOwnerUser])
  {
    long long v109 = 0u;
    long long v110 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    id v3 = [(HMDHome *)self accessories];
    uint64_t v4 = [v3 countByEnumeratingWithState:&v107 objects:v123 count:16];
    if (v4)
    {
      uint64_t v6 = v4;
      uint64_t v7 = *(void *)v108;
      p_vtable = HMDEvent.vtable;
      *(void *)&long long v5 = 138543874;
      long long v79 = v5;
      uint64_t v83 = v3;
      uint64_t v84 = *(void *)v108;
      do
      {
        uint64_t v9 = 0;
        uint64_t v85 = v6;
        do
        {
          if (*(void *)v108 != v7) {
            objc_enumerationMutation(v3);
          }
          id v10 = *(id *)(*((void *)&v107 + 1) + 8 * v9);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            uint64_t v11 = v10;
          }
          else {
            uint64_t v11 = 0;
          }
          id v12 = v11;

          uint64_t v13 = [v12 bridge];
          long long v14 = (void *)v13;
          if (v12) {
            BOOL v15 = v13 == 0;
          }
          else {
            BOOL v15 = 1;
          }
          if (!v15)
          {
            uint64_t v16 = [v12 uniqueIdentifier];

            if (v16)
            {
              uint64_t v86 = v14;
              uint64_t v87 = v9;
              BOOL v17 = (void *)MEMORY[0x1E4F29128];
              uint64_t v18 = [v14 uuid];
              int v19 = (void *)MEMORY[0x1E4F5BC00];
              uint64_t v20 = [v12 uniqueIdentifier];
              long long v21 = [v19 instanceIDForUniqueIdentifier:v20];
              long long v22 = [v21 stringValue];
              long long v122 = v22;
              id v23 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v122 count:1];
              long long v24 = objc_msgSend(v17, "hm_deriveUUIDFromBaseUUID:withSalts:", v18, v23);

              long long v25 = [v12 uuid];
              LOBYTE(v17) = [v24 isEqual:v25];

              if (v17)
              {

                uint64_t v6 = v85;
                long long v14 = v86;
                uint64_t v9 = v87;
                uint64_t v7 = v84;
              }
              else
              {
                long long v36 = (void *)MEMORY[0x1D9452090]();
                __int16 v37 = v88;
                __int16 v38 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
                {
                  __int16 v39 = HMFGetLogIdentifier();
                  __int16 v40 = [v12 uuid];
                  *(_DWORD *)buf = v79;
                  uint64_t v117 = v39;
                  __int16 v118 = 2112;
                  id v119 = v40;
                  __int16 v120 = 2112;
                  uint64_t v121 = v24;
                  _os_log_impl(&dword_1D49D5000, v38, OS_LOG_TYPE_DEFAULT, "%{public}@Fixup of accessory uuid from legacy archive %@ -> %@", buf, 0x20u);
                }
                uint64_t v41 = [v12 uuid];
                [v12 setUuid:v24];
                uint64_t v42 = [v12 appData];

                if (v42)
                {
                  long long v43 = [v12 uuid];
                  uint64_t v44 = [v12 appData];
                  [v44 setParentUUID:v43];
                }
                __int16 v80 = (void *)v41;
                uint64_t v93 = objc_msgSend(MEMORY[0x1E4F29128], "hm_deriveUUIDFromBaseUUID:identifierSalt:withSalts:", v41, v91, 0, v79);
                id v81 = v24;
                id v92 = objc_msgSend(MEMORY[0x1E4F29128], "hm_deriveUUIDFromBaseUUID:identifierSalt:withSalts:", v24, v91, 0);
                long long v103 = 0u;
                long long v104 = 0u;
                long long v105 = 0u;
                long long v106 = 0u;
                id v82 = v12;
                id obj = [v12 services];
                uint64_t v45 = [obj countByEnumeratingWithState:&v103 objects:v115 count:16];
                if (v45)
                {
                  uint64_t v46 = v45;
                  uint64_t v90 = *(void *)v104;
                  do
                  {
                    for (uint64_t i = 0; i != v46; ++i)
                    {
                      if (*(void *)v104 != v90) {
                        objc_enumerationMutation(obj);
                      }
                      uint64_t v48 = *(void **)(*((void *)&v103 + 1) + 8 * i);
                      [v48 _recalculateUUID];
                      uint64_t v49 = (void *)MEMORY[0x1E4F29128];
                      id v50 = [v48 instanceID];
                      id v51 = [v50 stringValue];
                      __int16 v114 = v51;
                      id v52 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v114 count:1];
                      uint64_t v53 = objc_msgSend(v49, "hm_deriveUUIDFromBaseUUID:identifierSalt:withSalts:", v93, v91, v52);

                      uint64_t v54 = (void *)MEMORY[0x1E4F29128];
                      uint64_t v55 = [v48 instanceID];
                      uint64_t v56 = [v55 stringValue];
                      __int16 v113 = v56;
                      long long v57 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v113 count:1];
                      uint64_t v58 = objc_msgSend(v54, "hm_deriveUUIDFromBaseUUID:identifierSalt:withSalts:", v92, v91, v57);

                      uint64_t v59 = [v58 UUIDString];
                      long long v60 = [v53 UUIDString];
                      [v94 setObject:v59 forKey:v60];

                      long long v61 = [v48 appData];

                      if (v61)
                      {
                        long long v62 = [v48 uuid];
                        uint64_t v63 = [v48 appData];
                        [v63 setParentUUID:v62];
                      }
                    }
                    uint64_t v46 = [obj countByEnumeratingWithState:&v103 objects:v115 count:16];
                  }
                  while (v46);
                }

                id v3 = v83;
                uint64_t v7 = v84;
                p_vtable = (void **)(HMDEvent + 24);
                uint64_t v6 = v85;
                long long v14 = v86;
                uint64_t v9 = v87;
                id v12 = v82;
              }
            }
            else
            {
              long long v26 = v14;
              long long v27 = (void *)MEMORY[0x1D9452090]();
              uint64_t v28 = v88;
              long long v29 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
              {
                long long v30 = HMFGetLogIdentifier();
                long long v31 = [v12 uuid];
                [v31 UUIDString];
                long long v32 = p_vtable;
                id v33 = v12;
                __int16 v35 = v34 = v9;
                *(_DWORD *)buf = 138543618;
                uint64_t v117 = v30;
                __int16 v118 = 2112;
                id v119 = v35;
                _os_log_impl(&dword_1D49D5000, v29, OS_LOG_TYPE_DEFAULT, "%{public}@Unable to check validity of uuid %@ (accessory has nil uniqueIdentifier)", buf, 0x16u);

                uint64_t v9 = v34;
                id v12 = v33;
                p_vtable = v32;

                uint64_t v6 = v85;
                uint64_t v7 = v84;
              }

              long long v14 = v26;
              id v3 = v83;
            }
          }

          ++v9;
        }
        while (v9 != v6);
        uint64_t v6 = [v3 countByEnumeratingWithState:&v107 objects:v123 count:16];
      }
      while (v6);
    }

    long long v101 = 0u;
    long long v102 = 0u;
    long long v99 = 0u;
    long long v100 = 0u;
    long long v64 = [(HMDHome *)v88 rooms];
    uint64_t v65 = [v64 countByEnumeratingWithState:&v99 objects:v112 count:16];
    if (v65)
    {
      uint64_t v66 = v65;
      uint64_t v67 = *(void *)v100;
      do
      {
        for (uint64_t j = 0; j != v66; ++j)
        {
          if (*(void *)v100 != v67) {
            objc_enumerationMutation(v64);
          }
          long long v69 = *(void **)(*((void *)&v99 + 1) + 8 * j);
          long long v70 = objc_msgSend(v69, "appData", v79);

          if (v70)
          {
            long long v71 = [v69 appData];
            [(HMDHome *)v88 updateAppData:v71 identifierKey:@"HFSortedIdentifierStrings_roomServices" lookup:v94];
          }
        }
        uint64_t v66 = [v64 countByEnumeratingWithState:&v99 objects:v112 count:16];
      }
      while (v66);
    }

    long long v72 = [(HMDHome *)v88 appData];

    if (v72)
    {
      id v73 = [(HMDHome *)v88 appData];
      [(HMDHome *)v88 updateAppData:v73 identifierKey:@"HFSortedIdentifierStrings_homeServices" lookup:v94];
    }
    [(HMDHome *)v88 computeBridgedAccessoriesForAllBridges];
  }
  long long v97 = 0u;
  long long v98 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  uint64_t v74 = [(HMDHome *)v88 serviceGroups];
  uint64_t v75 = [v74 countByEnumeratingWithState:&v95 objects:v111 count:16];
  if (v75)
  {
    uint64_t v76 = v75;
    uint64_t v77 = *(void *)v96;
    do
    {
      for (uint64_t k = 0; k != v76; ++k)
      {
        if (*(void *)v96 != v77) {
          objc_enumerationMutation(v74);
        }
        [*(id *)(*((void *)&v95 + 1) + 8 * k) fixupServiceGroup];
      }
      uint64_t v76 = [v74 countByEnumeratingWithState:&v95 objects:v111 count:16];
    }
    while (v76);
  }
}

- (void)updateAppData:(id)a3 identifierKey:(id)a4 lookup:(id)a5
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = [v8 dictionary];
  id v12 = objc_msgSend(v11, "hmf_dictionaryForKey:", @"com.apple.homekit-entitledclient.identifer");

  long long v36 = v9;
  uint64_t v13 = [v12 objectForKey:v9];
  long long v14 = v13;
  if (v13 && [v13 count])
  {
    id v33 = v12;
    uint64_t v34 = v8;
    long long v31 = (void *)[v12 mutableCopy];
    BOOL v15 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v14, "count"));
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v32 = v14;
    id obj = v14;
    uint64_t v38 = [obj countByEnumeratingWithState:&v39 objects:v51 count:16];
    if (v38)
    {
      uint64_t v16 = *(void *)v40;
      uint64_t v35 = *(void *)v40;
      do
      {
        for (uint64_t i = 0; i != v38; ++i)
        {
          if (*(void *)v40 != v16) {
            objc_enumerationMutation(obj);
          }
          uint64_t v18 = *(void **)(*((void *)&v39 + 1) + 8 * i);
          int v19 = [v10 objectForKey:v18];
          if (v19)
          {
            uint64_t v20 = (void *)MEMORY[0x1D9452090]();
            long long v21 = self;
            long long v22 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              id v23 = v15;
              long long v24 = self;
              v26 = id v25 = v10;
              *(_DWORD *)buf = 138544130;
              uint64_t v44 = v26;
              __int16 v45 = 2112;
              uint64_t v46 = v36;
              __int16 v47 = 2112;
              uint64_t v48 = v18;
              __int16 v49 = 2112;
              id v50 = v19;
              _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_DEFAULT, "%{public}@Fixup of service uuid list %@ from legacy archive %@ -> %@", buf, 0x2Au);

              id v10 = v25;
              self = v24;
              BOOL v15 = v23;
              uint64_t v16 = v35;
            }

            long long v27 = v15;
            uint64_t v28 = v19;
          }
          else
          {
            long long v27 = v15;
            uint64_t v28 = v18;
          }
          [v27 addObject:v28];
        }
        uint64_t v38 = [obj countByEnumeratingWithState:&v39 objects:v51 count:16];
      }
      while (v38);
    }

    long long v29 = (void *)[v15 copy];
    [v31 setObject:v29 forKey:v36];

    long long v30 = (void *)[v31 copy];
    id v8 = v34;
    [v34 setApplicationData:v30 forIdentifier:@"com.apple.homekit-entitledclient.identifer"];

    long long v14 = v32;
    id v12 = v33;
  }
}

- (void)_handleUpdateMediaPassword:(id)a3
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v5 = [v4 messagePayload];
  uint64_t v6 = [v5 objectForKeyedSubscript:*MEMORY[0x1E4F2D5D8]];

  if (!v6) {
    goto LABEL_5;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v13 = (void *)MEMORY[0x1D9452090]();
    long long v14 = self;
    BOOL v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v33 = v16;
      __int16 v34 = 2112;
      uint64_t v35 = v6;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_ERROR, "%{public}@Invalid password: %@", buf, 0x16u);
    }
    BOOL v17 = [v4 responseHandler];

    if (!v17) {
      goto LABEL_18;
    }
    id v9 = [MEMORY[0x1E4F28C58] hmErrorWithCode:22];
LABEL_16:
    long long v30 = [v4 responseHandler];
    ((void (**)(void, HMDHomeMediaSettingsModel *, void))v30)[2](v30, v9, 0);

    goto LABEL_17;
  }
  id v31 = 0;
  char v7 = [MEMORY[0x1E4F2E7F8] isValidMediaPassword:v6 error:&v31];
  id v8 = (HMDHomeMediaSettingsModel *)v31;
  id v9 = v8;
  if ((v7 & 1) == 0)
  {
    id v25 = (void *)MEMORY[0x1D9452090]();
    long long v26 = self;
    long long v27 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v28 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      id v33 = v28;
      __int16 v34 = 2112;
      uint64_t v35 = v6;
      __int16 v36 = 2112;
      __int16 v37 = v9;
      _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to validate password, %@, with error: %@", buf, 0x20u);
    }
    long long v29 = [v4 responseHandler];

    if (!v29) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }

LABEL_5:
  id v10 = [(HMDHome *)self mediaPassword];
  int v11 = HMFEqualObjects();

  if (!v11)
  {
    uint64_t v18 = [HMDHomeMediaSettingsModel alloc];
    int v19 = [(HMDHome *)self uuid];
    uint64_t v20 = +[HMDHomeMediaSettingsModel modelIDForHomeUUID:v19];
    long long v21 = [(HMDHome *)self uuid];
    id v9 = [(HMDBackingStoreModelObject *)v18 initWithObjectChangeType:2 uuid:v20 parentUUID:v21];

    [(HMDHomeMediaSettingsModel *)v9 setMediaPassword:v6];
    long long v22 = [(HMDHome *)self backingStore];
    id v23 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    long long v24 = [v22 transaction:@"Update Media Password" options:v23];

    [v24 add:v9 withMessage:v4];
    [v24 run];

    goto LABEL_17;
  }
  id v12 = [v4 responseHandler];

  if (v12)
  {
    id v9 = [v4 responseHandler];
    (*(void (**)(HMDHomeMediaSettingsModel *, void, void))&v9->super.super._bsoDataVersionOverride)(v9, 0, 0);
LABEL_17:
  }
LABEL_18:
}

- (void)setMediaPassword:(id)a3
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v5 = (void *)[v4 copy];
  os_unfair_recursive_lock_lock_with_options();
  if (HMFEqualObjects())
  {
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    objc_storeStrong((id *)&self->_mediaPassword, v5);
    uint64_t v6 = os_unfair_recursive_lock_unlock();
    char v7 = (void *)MEMORY[0x1D9452090](v6);
    id v8 = self;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      id v10 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      BOOL v15 = v10;
      __int16 v16 = 2112;
      BOOL v17 = v5;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Updated media password to: %@", buf, 0x16u);
    }
    workQueue = v8->_workQueue;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    void v12[2] = __28__HMDHome_setMediaPassword___block_invoke;
    v12[3] = &unk_1E6A197C8;
    void v12[4] = v8;
    id v13 = v5;
    dispatch_async(workQueue, v12);
  }
}

void __28__HMDHome_setMediaPassword___block_invoke(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = objc_msgSend(*(id *)(a1 + 32), "accessories", 0);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(id *)(*((void *)&v10 + 1) + 8 * v6);
        if ([v7 conformsToProtocol:&unk_1F2E2B308]) {
          id v8 = v7;
        }
        else {
          id v8 = 0;
        }
        id v9 = v8;

        if (v9 && [v9 supportsMinimumUserPrivilege]) {
          [v9 handleUpdatedPassword:*(void *)(a1 + 40)];
        }

        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
}

- (void)_handleUpdateMediaPeerToPeerEnabled:(id)a3
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  char v23 = 0;
  uint64_t v5 = [v4 BOOLForKey:@"kEnabledKey" keyPresent:&v23];
  if (v23)
  {
    uint64_t v6 = v5;
    if (v5 != [(HMDHome *)self isMediaPeerToPeerEnabled])
    {
      id v7 = [HMDHomeMediaSettingsModel alloc];
      id v8 = [(HMDHome *)self uuid];
      id v9 = +[HMDHomeMediaSettingsModel modelIDForHomeUUID:v8];
      long long v10 = [(HMDHome *)self uuid];
      long long v11 = [(HMDBackingStoreModelObject *)v7 initWithObjectChangeType:2 uuid:v9 parentUUID:v10];

      long long v12 = [NSNumber numberWithBool:v6];
      [(HMDHomeMediaSettingsModel *)v11 setMediaPeerToPeerEnabled:v12];

      long long v13 = [(HMDHome *)self backingStore];
      long long v14 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      uint64_t v15 = [v13 transaction:@"Update Media Peer-to-peer Enabled" options:v14];

      [v15 add:v11 withMessage:v4];
      [v15 run];

LABEL_10:
      goto LABEL_11;
    }
    long long v22 = [v4 responseHandler];

    if (v22)
    {
      long long v11 = [v4 responseHandler];
      (*(void (**)(HMDHomeMediaSettingsModel *, void, void))&v11->super.super._bsoDataVersionOverride)(v11, 0, 0);
      goto LABEL_10;
    }
  }
  else
  {
    __int16 v16 = (void *)MEMORY[0x1D9452090](v5);
    BOOL v17 = self;
    uint64_t v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v19 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v25 = v19;
      _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_ERROR, "%{public}@Client request missing required key", buf, 0xCu);
    }
    uint64_t v20 = [v4 responseHandler];

    if (v20)
    {
      long long v11 = [MEMORY[0x1E4F28C58] hmErrorWithCode:27];
      long long v21 = [v4 responseHandler];
      ((void (**)(void, HMDHomeMediaSettingsModel *, void))v21)[2](v21, v11, 0);

      goto LABEL_10;
    }
  }
LABEL_11:
}

- (void)setMediaPeerToPeerEnabled:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_mediaPeerToPeerEnabled = a3;
  os_unfair_recursive_lock_unlock();
}

- (void)_handleUpdateMinimumMediaUserPrivilege:(id)a3
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [v4 numberForKey:@"kUserPrivilegeLevelKey"];
  uint64_t v6 = v5;
  if (v5)
  {
    uint64_t v7 = [v5 integerValue];
    if ([(HMDHome *)self minimumMediaUserPrivilege] != v7)
    {
      __int16 v16 = [HMDHomeMediaSettingsModel alloc];
      BOOL v17 = [(HMDHome *)self uuid];
      uint64_t v18 = +[HMDHomeMediaSettingsModel modelIDForHomeUUID:v17];
      int v19 = [(HMDHome *)self uuid];
      uint64_t v20 = [(HMDBackingStoreModelObject *)v16 initWithObjectChangeType:2 uuid:v18 parentUUID:v19];

      long long v21 = [NSNumber numberWithInteger:v7];
      [(HMDHomeMediaSettingsModel *)v20 setMinimumMediaUserPrivilege:v21];

      long long v22 = [(HMDHome *)self backingStore];
      char v23 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      long long v24 = [v22 transaction:@"Update Minimum User Privilege" options:v23];

      [v24 add:v20 withMessage:v4];
      [v24 run];

      goto LABEL_11;
    }
    id v8 = [v4 responseHandler];

    if (v8)
    {
      id v9 = [v4 responseHandler];
      v9[2](v9, 0, 0);
LABEL_9:
    }
  }
  else
  {
    long long v10 = (void *)MEMORY[0x1D9452090]();
    long long v11 = self;
    long long v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      long long v13 = HMFGetLogIdentifier();
      int v25 = 138543362;
      uint64_t v26 = v13;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_ERROR, "%{public}@Client request missing required key", (uint8_t *)&v25, 0xCu);
    }
    long long v14 = [v4 responseHandler];

    if (v14)
    {
      id v9 = [MEMORY[0x1E4F28C58] hmErrorWithCode:27];
      uint64_t v15 = [v4 responseHandler];
      v15[2](v15, v9, 0);

      goto LABEL_9;
    }
  }
LABEL_11:
}

- (void)setMinimumMediaUserPrivilege:(int64_t)a3
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  os_unfair_recursive_lock_lock_with_options();
  if (self->_minimumMediaUserPrivilege == a3)
  {
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    self->_int64_t minimumMediaUserPrivilege = a3;
    uint64_t v5 = os_unfair_recursive_lock_unlock();
    uint64_t v6 = (void *)MEMORY[0x1D9452090](v5);
    uint64_t v7 = self;
    id v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = HMFGetLogIdentifier();
      long long v10 = HMUserPrivilegeToString();
      *(_DWORD *)buf = 138543618;
      long long v14 = v9;
      __int16 v15 = 2112;
      __int16 v16 = v10;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Updated minimum user privilege to: %@", buf, 0x16u);
    }
    workQueue = v7->_workQueue;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    void v12[2] = __40__HMDHome_setMinimumMediaUserPrivilege___block_invoke;
    v12[3] = &unk_1E6A189D0;
    void v12[4] = v7;
    void v12[5] = a3;
    dispatch_async(workQueue, v12);
  }
}

void __40__HMDHome_setMinimumMediaUserPrivilege___block_invoke(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = objc_msgSend(*(id *)(a1 + 32), "accessories", 0);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(id *)(*((void *)&v10 + 1) + 8 * v6);
        if ([v7 conformsToProtocol:&unk_1F2E2B308]) {
          id v8 = v7;
        }
        else {
          id v8 = 0;
        }
        id v9 = v8;

        if (v9 && [v9 supportsMinimumUserPrivilege]) {
          [v9 handleUpdatedMinimumUserPrivilege:*(void *)(a1 + 40)];
        }

        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
}

- (void)queryPrimaryResidentReachabilityForAccessories:(id)a3 completion:(id)a4
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = (void (**)(void, void *))a4;
  BOOL v8 = [(HMDHome *)self isCurrentDeviceConfirmedPrimaryResident];
  id v9 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v6, "count"));
  if (v8)
  {
    id v31 = v7;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id v10 = v6;
    uint64_t v11 = [v10 countByEnumeratingWithState:&v38 objects:v47 count:16];
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = *(void *)v39;
      do
      {
        for (uint64_t i = 0; i != v12; ++i)
        {
          if (*(void *)v39 != v13) {
            objc_enumerationMutation(v10);
          }
          uint64_t v15 = *(void **)(*((void *)&v38 + 1) + 8 * i);
          __int16 v45 = @"kAccessoryIsReachableKey";
          __int16 v16 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v15, "isReachable", v31));
          uint64_t v46 = v16;
          uint64_t v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v46 forKeys:&v45 count:1];

          [v9 addObject:v17];
        }
        uint64_t v12 = [v10 countByEnumeratingWithState:&v38 objects:v47 count:16];
      }
      while (v12);
    }

    id v7 = v31;
    v31[2](v31, v9);
  }
  else
  {
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id v18 = v6;
    uint64_t v19 = [v18 countByEnumeratingWithState:&v34 objects:v44 count:16];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = *(void *)v35;
      do
      {
        for (uint64_t j = 0; j != v20; ++j)
        {
          if (*(void *)v35 != v21) {
            objc_enumerationMutation(v18);
          }
          char v23 = [*(id *)(*((void *)&v34 + 1) + 8 * j) uuid];
          long long v24 = [v23 UUIDString];
          [v9 addObject:v24];
        }
        uint64_t v20 = [v18 countByEnumeratingWithState:&v34 objects:v44 count:16];
      }
      while (v20);
    }

    long long v42 = @"kAccessoriesUUIDKey";
    long long v43 = v9;
    int v25 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v43 forKeys:&v42 count:1];
    uint64_t v26 = (void *)MEMORY[0x1E4F65480];
    uint64_t v27 = [MEMORY[0x1E4F29128] UUID];
    uint64_t v28 = [v26 messageWithName:@"HMDHomeQueryResidentReachabilityForAccessoriesMessageKey" identifier:v27 messagePayload:v25];

    v32[0] = MEMORY[0x1E4F143A8];
    v32[1] = 3221225472;
    v32[2] = __69__HMDHome_queryPrimaryResidentReachabilityForAccessories_completion___block_invoke;
    v32[3] = &unk_1E6A16B58;
    void v32[4] = self;
    id v33 = v7;
    [v28 setResponseHandler:v32];
    long long v29 = [(HMDHome *)self uuid];
    long long v30 = [(HMDHome *)self workQueue];
    [(HMDHome *)self redispatchToResidentMessage:v28 target:v29 responseQueue:v30];
  }
}

void __69__HMDHome_queryPrimaryResidentReachabilityForAccessories_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v5)
  {
    BOOL v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = *(id *)(a1 + 32);
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      int v15 = 138543618;
      __int16 v16 = v11;
      __int16 v17 = 2112;
      id v18 = v5;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_ERROR, "%{public}@Query reachability response error: %@", (uint8_t *)&v15, 0x16u);
    }
    uint64_t v12 = 0;
LABEL_5:

    goto LABEL_6;
  }
  uint64_t v13 = objc_msgSend(v6, "hmf_arrayForKey:", @"kAccessoriesInfoDictionaryKey");
  uint64_t v12 = v13;
  if (!v13 || ![v13 count])
  {
    BOOL v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = *(id *)(a1 + 32);
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      long long v14 = HMFGetLogIdentifier();
      int v15 = 138543618;
      __int16 v16 = v14;
      __int16 v17 = 2112;
      id v18 = v7;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_ERROR, "%{public}@No reachability setting in query reachability response: %@", (uint8_t *)&v15, 0x16u);
    }
    goto LABEL_5;
  }
LABEL_6:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

- (void)_handleQueryResidentReachabilityForAccessories:(id)a3
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 messagePayload];
  id v6 = objc_msgSend(v5, "hmf_arrayForKey:", @"kAccessoriesUUIDKey");
  id v7 = v6;
  if (v6)
  {
    long long v24 = v5;
    int v25 = v4;
    BOOL v8 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v6, "count"));
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id v9 = v7;
    uint64_t v10 = [v9 countByEnumeratingWithState:&v26 objects:v34 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v27;
      do
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v27 != v12) {
            objc_enumerationMutation(v9);
          }
          uint64_t v14 = *(void *)(*((void *)&v26 + 1) + 8 * i);
          int v15 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v14];
          __int16 v16 = [(HMDHome *)self accessoryWithUUID:v15];

          if (v16)
          {
            v32[0] = @"kAccessoryUUID";
            v32[1] = @"kAccessoryIsReachableKey";
            v33[0] = v14;
            __int16 v17 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v16, "isReachable"));
            v33[1] = v17;
            id v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v33 forKeys:v32 count:2];

            [v8 addObject:v18];
          }
        }
        uint64_t v11 = [v9 countByEnumeratingWithState:&v26 objects:v34 count:16];
      }
      while (v11);
    }

    long long v30 = @"kAccessoriesInfoDictionaryKey";
    id v31 = v8;
    uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v31 forKeys:&v30 count:1];
    id v4 = v25;
    [v25 respondWithPayload:v19];

    id v5 = v24;
  }
  else
  {
    uint64_t v20 = (void *)MEMORY[0x1D9452090]();
    uint64_t v21 = self;
    long long v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      char v23 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v36 = v23;
      _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_ERROR, "%{public}@Query reachability request is missing accessory UUID in payload", buf, 0xCu);
    }
    BOOL v8 = [MEMORY[0x1E4F28C58] hmfErrorWithCode:8];
    [v4 respondWithError:v8];
  }
}

- (void)_handleUpdateAutomaticThirdPartyAccessorySoftwareUpdate:(id)a3
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  char v23 = 0;
  uint64_t v5 = [v4 BOOLForKey:@"kEnabledKey" keyPresent:&v23];
  if (v23)
  {
    uint64_t v6 = v5;
    if (v5 != [(HMDHome *)self isAutomaticThirdPartyAccessorySoftwareUpdateEnabled])
    {
      id v7 = [HMDHomeSettingsModel alloc];
      BOOL v8 = [(HMDHome *)self uuid];
      id v9 = +[HMDHomeSettingsModel modelIDForHomeUUID:v8];
      uint64_t v10 = [(HMDHome *)self uuid];
      uint64_t v11 = [(HMDBackingStoreModelObject *)v7 initWithObjectChangeType:2 uuid:v9 parentUUID:v10];

      uint64_t v12 = [NSNumber numberWithBool:v6];
      [(HMDHomeSettingsModel *)v11 setAutomaticThirdPartyAccessorySoftwareUpdateEnabled:v12];

      uint64_t v13 = [(HMDHome *)self backingStore];
      uint64_t v14 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      int v15 = [v13 transaction:@"Update Automatic Accessory Firmware Update" options:v14];

      [v15 add:v11 withMessage:v4];
      [v15 run];

LABEL_10:
      goto LABEL_11;
    }
    long long v22 = [v4 responseHandler];

    if (v22)
    {
      uint64_t v11 = [v4 responseHandler];
      (*(void (**)(HMDHomeSettingsModel *, void, void))&v11->super.super._bsoDataVersionOverride)(v11, 0, 0);
      goto LABEL_10;
    }
  }
  else
  {
    __int16 v16 = (void *)MEMORY[0x1D9452090](v5);
    __int16 v17 = self;
    id v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      int v25 = v19;
      _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_ERROR, "%{public}@Client request missing required key", buf, 0xCu);
    }
    uint64_t v20 = [v4 responseHandler];

    if (v20)
    {
      uint64_t v11 = [MEMORY[0x1E4F28C58] hmErrorWithCode:27];
      uint64_t v21 = [v4 responseHandler];
      ((void (**)(void, HMDHomeSettingsModel *, void))v21)[2](v21, v11, 0);

      goto LABEL_10;
    }
  }
LABEL_11:
}

- (void)setAutomaticThirdPartyAccessorySoftwareUpdateEnabled:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  os_unfair_recursive_lock_lock_with_options();
  if (self->_automaticThirdPartyAccessorySoftwareUpdateEnabled == v3)
  {
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    self->_automaticThirdPartyAccessorySoftwareUpdateEnabled = v3;
    uint64_t v5 = os_unfair_recursive_lock_unlock();
    uint64_t v6 = (void *)MEMORY[0x1D9452090](v5);
    id v7 = self;
    BOOL v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = HMFGetLogIdentifier();
      uint64_t v10 = HMFEnabledStatusToString();
      *(_DWORD *)buf = 138543618;
      uint64_t v19 = v9;
      __int16 v20 = 2112;
      uint64_t v21 = v10;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Setting Automatic third-party accessory software updates to: %@", buf, 0x16u);
    }
    uint64_t v11 = [(HMDHome *)v7 notificationCenter];
    uint64_t v12 = objc_msgSend(NSNumber, "numberWithBool:", v3, @"kEnabledKey");
    __int16 v17 = v12;
    uint64_t v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v17 forKeys:&v16 count:1];
    [v11 postNotificationName:@"HMDHomeAutomaticThirdPartyUpdateEnabledChangedNotification" object:v7 userInfo:v13];

    uint64_t v14 = [(HMDHome *)v7 logEventSubmitter];
    int v15 = +[HMDAccessorySoftwareUpdateAutoThirdPartyToggledEvent eventWithHome:v7];
    [v14 submitLogEvent:v15];

    [(HMDHome *)v7 _reevaluateAccessoryInfoWithBadgeRefresh:1];
  }
}

- (void)_handleUpdateAutomaticSoftwareUpdate:(id)a3
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x1D9452090]();
  uint64_t v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    BOOL v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    long long v40 = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Handling update automatic software update message", buf, 0xCu);
  }
  char v38 = 0;
  uint64_t v9 = [v4 BOOLForKey:@"kEnabledKey" keyPresent:&v38];
  if (v38)
  {
    uint64_t v10 = v9;
    int v11 = [(HMDHome *)v6 isAutomaticSoftwareUpdateEnabled];
    uint64_t v12 = (void *)MEMORY[0x1D9452090]();
    uint64_t v13 = v6;
    uint64_t v14 = HMFGetOSLogHandle();
    BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_INFO);
    if (v10 != v11)
    {
      if (v15)
      {
        uint64_t v16 = HMFGetLogIdentifier();
        __int16 v17 = HMFBooleanToString();
        *(_DWORD *)buf = 138543618;
        long long v40 = v16;
        __int16 v41 = 2112;
        long long v42 = v17;
        _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Updating automatic software update to: %@", buf, 0x16u);
      }
      id v18 = +[HMDSoftwareUpdateAutomaticUpdateToggledEvent eventWithAutomaticUpdateEnabled:v10];
      uint64_t v19 = [(HMDHome *)v13 logEventSubmitter];
      [v19 submitLogEvent:v18];

      __int16 v20 = [HMDHomeSettingsModel alloc];
      uint64_t v21 = [(HMDHome *)v13 uuid];
      uint64_t v22 = +[HMDHomeSettingsModel modelIDForHomeUUID:v21];
      char v23 = [(HMDHome *)v13 uuid];
      long long v24 = [(HMDBackingStoreModelObject *)v20 initWithObjectChangeType:2 uuid:v22 parentUUID:v23];

      int v25 = [NSNumber numberWithBool:v10];
      [(HMDHomeSettingsModel *)v24 setAutomaticSoftwareUpdateEnabled:v25];

      uint64_t v26 = [(HMDHome *)v13 backingStore];
      long long v27 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      long long v28 = [v26 transaction:@"Update Automatic Software Update" options:v27];

      [v28 add:v24 withMessage:v4];
      [v28 run];

      goto LABEL_16;
    }
    if (v15)
    {
      long long v35 = HMFGetLogIdentifier();
      long long v36 = HMFBooleanToString();
      *(_DWORD *)buf = 138543618;
      long long v40 = v35;
      __int16 v41 = 2112;
      long long v42 = v36;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Not changing the setting because it is already set to: %@", buf, 0x16u);
    }
    uint64_t v37 = [v4 responseHandler];

    if (v37)
    {
      id v18 = [v4 responseHandler];
      v18[2](v18, 0, 0);
      goto LABEL_16;
    }
  }
  else
  {
    long long v29 = (void *)MEMORY[0x1D9452090](v9);
    long long v30 = v6;
    id v31 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      long long v32 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v40 = v32;
      _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_ERROR, "%{public}@Client request missing required key", buf, 0xCu);
    }
    id v33 = [v4 responseHandler];

    if (v33)
    {
      id v18 = [MEMORY[0x1E4F28C58] hmErrorWithCode:27];
      long long v34 = [v4 responseHandler];
      v34[2](v34, v18, 0);

LABEL_16:
    }
  }
}

- (void)setAutomaticSoftwareUpdateEnabled:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  os_unfair_recursive_lock_lock_with_options();
  if (self->_automaticSoftwareUpdateEnabled == v3)
  {
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    self->_automaticSoftwareUpdateEnabled = v3;
    uint64_t v5 = os_unfair_recursive_lock_unlock();
    uint64_t v6 = (void *)MEMORY[0x1D9452090](v5);
    id v7 = self;
    BOOL v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = HMFGetLogIdentifier();
      uint64_t v10 = (void *)v9;
      int v11 = @"disabled";
      if (v3) {
        int v11 = @"enabled";
      }
      int v12 = 138543618;
      uint64_t v13 = v9;
      __int16 v14 = 2112;
      BOOL v15 = v11;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Automatic software updates %@", (uint8_t *)&v12, 0x16u);
    }
    [(HMDHome *)v7 _reevaluateAccessoryInfoWithBadgeRefresh:1];
  }
}

- (void)_handleHomeLocationUpdateFromSharedAdmin:(id)a3
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [v4 dataForKey:@"kHomeLocationDataKey"];
  if (v5)
  {
    id v24 = 0;
    uint64_t v6 = [MEMORY[0x1E4F28DC0] unarchivedObjectOfClass:objc_opt_class() fromData:v5 error:&v24];
    id v7 = v24;
    if (!v6)
    {
      id v18 = (void *)MEMORY[0x1D9452090]();
      uint64_t v19 = self;
      __int16 v20 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v26 = v21;
        __int16 v27 = 2112;
        id v28 = v7;
        _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive location from data: %@", buf, 0x16u);
      }
      goto LABEL_13;
    }
    BOOL v8 = [v4 numberForKey:@"HMD.LOC.SRC"];
    unint64_t v9 = (int)[v8 intValue];

    int v10 = isInternalBuild();
    int v11 = (void *)MEMORY[0x1D9452090]();
    int v12 = self;
    uint64_t v13 = HMFGetOSLogHandle();
    BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_INFO);
    if (v10)
    {
      if (v14)
      {
        BOOL v15 = HMFGetLogIdentifier();
        uint64_t v16 = HMDHomeLocationSourceToString(v9);
        *(_DWORD *)buf = 138543874;
        uint64_t v26 = v15;
        __int16 v27 = 2112;
        id v28 = v6;
        __int16 v29 = 2112;
        long long v30 = v16;
        __int16 v17 = "%{public}@Received new home location from shared admin: %@, source : %@";
LABEL_11:
        _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, v17, buf, 0x20u);
      }
    }
    else if (v14)
    {
      BOOL v15 = HMFGetLogIdentifier();
      uint64_t v16 = HMDHomeLocationSourceToString(v9);
      *(_DWORD *)buf = 138543875;
      uint64_t v26 = v15;
      __int16 v27 = 2117;
      id v28 = v6;
      __int16 v29 = 2112;
      long long v30 = v16;
      __int16 v17 = "%{public}@Received new home location from shared admin: %{sensitive}@, source : %@";
      goto LABEL_11;
    }

    uint64_t v22 = [(HMDHome *)v12 homeLocationHandler];
    char v23 = [MEMORY[0x1E4F1C9C8] date];
    [v22 runTransactionWithLocation:v6 updatedTime:v23 source:v9];

LABEL_13:
  }
}

- (void)_updateHomeLocation
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  BOOL v3 = [(HMDHome *)self homeLocationHandler];
  if (![v3 regionStateAtHome])
  {

    goto LABEL_8;
  }
  id v4 = [(HMDHome *)self homeLocationHandler];
  uint64_t v5 = [v4 regionStateNearbyHome];

  if (!v5)
  {
LABEL_8:
    __int16 v20 = (void *)MEMORY[0x1D9452090]();
    uint64_t v21 = self;
    uint64_t v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      char v23 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v30 = v23;
      _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_INFO, "%{public}@No reachable accessories found and not all regions are determined. Setting Home location to unknown & home level to Not at Home.", buf, 0xCu);
    }
    uint64_t v19 = 0;
    uint64_t v18 = 1;
    goto LABEL_11;
  }
  uint64_t v6 = (void *)MEMORY[0x1D9452090]();
  id v7 = self;
  BOOL v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    unint64_t v9 = HMFGetLogIdentifier();
    int v10 = [(HMDHome *)v7 homeLocationHandler];
    [v10 regionStateAtHome];
    int v11 = HMDRegionStateString();
    int v12 = [(HMDHome *)v7 homeLocationHandler];
    [v12 regionStateNearbyHome];
    uint64_t v13 = HMDRegionStateString();
    uint64_t v14 = [(HMDHome *)v7 reachableAccessoriesCount];
    HMFBooleanToString();
    BOOL v15 = v28 = v6;
    *(_DWORD *)buf = 138544386;
    long long v30 = v9;
    __int16 v31 = 2112;
    long long v32 = v11;
    __int16 v33 = 2112;
    long long v34 = v13;
    __int16 v35 = 2048;
    uint64_t v36 = v14;
    __int16 v37 = 2112;
    char v38 = v15;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@RegionStateAtHome : %@, RegionStateNearbyHome : %@, reachableAccessoriesCount : %lu/%@", buf, 0x34u);

    uint64_t v6 = v28;
  }

  uint64_t v16 = [(HMDHome *)v7 homeLocationHandler];
  uint64_t v17 = [v16 regionStateAtHome];

  if (v17 == 1)
  {
    uint64_t v18 = 2;
    uint64_t v19 = 1;
  }
  else
  {
    id v24 = [(HMDHome *)v7 homeLocationHandler];
    uint64_t v25 = [v24 regionStateNearbyHome];

    if (v25 == 1)
    {
      uint64_t v18 = 1;
      uint64_t v19 = 3;
    }
    else
    {
      uint64_t v26 = [(HMDHome *)v7 homeLocationHandler];
      uint64_t v27 = [v26 regionStateNearbyHome];

      uint64_t v18 = 1;
      if (v27 != 2) {
        goto LABEL_12;
      }
      uint64_t v19 = 2;
    }
  }
LABEL_11:
  [(HMDHome *)self setHomeLocation:v19];
LABEL_12:
  [(HMDHome *)self setAtHomeLevel:v18];
}

- (void)updateHomeLocation
{
  BOOL v3 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __29__HMDHome_updateHomeLocation__block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v3, block);
}

uint64_t __29__HMDHome_updateHomeLocation__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateHomeLocation];
}

- (void)setHomeLocation:(int64_t)a3
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  os_unfair_recursive_lock_lock_with_options();
  BOOL v5 = 0;
  homeLocatiouint64_t n = self->_homeLocation;
  if (homeLocation != a3)
  {
    self->_homeLocatiouint64_t n = a3;
    BOOL v5 = !self->_overrideHomeLocation;
  }
  uint64_t v7 = os_unfair_recursive_lock_unlock();
  BOOL v8 = (void *)MEMORY[0x1D9452090](v7);
  unint64_t v9 = self;
  int v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    int v11 = HMFGetLogIdentifier();
    if (v5) {
      int v12 = @"Updated";
    }
    else {
      int v12 = @"Did not update";
    }
    uint64_t v13 = HMStringFromHomeLocation();
    uint64_t v14 = HMStringFromHomeLocation();
    int v15 = 138544130;
    uint64_t v16 = v11;
    __int16 v17 = 2112;
    uint64_t v18 = v12;
    __int16 v19 = 2112;
    __int16 v20 = v13;
    __int16 v21 = 2112;
    uint64_t v22 = v14;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@%@ home location from %@ to %@", (uint8_t *)&v15, 0x2Au);
  }
  if (v5) {
    [(HMDHome *)v9 _handleHomeLocationChange:a3 previousLocation:homeLocation];
  }
}

- (void)_handleHomeLocationChange:(int64_t)a3 previousLocation:(int64_t)a4
{
  v36[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (void *)MEMORY[0x1D9452090](self, a2);
  BOOL v8 = self;
  unint64_t v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    int v10 = HMFGetLogIdentifier();
    int v11 = [(HMDHome *)v8 name];
    int v12 = [(HMDHome *)v8 shortDescription];
    uint64_t v13 = HMStringFromHomeLocation();
    uint64_t v14 = HMStringFromHomeLocation();
    *(_DWORD *)uint64_t v27 = 138544386;
    *(void *)&void v27[4] = v10;
    __int16 v28 = 2112;
    __int16 v29 = v11;
    __int16 v30 = 2112;
    __int16 v31 = v12;
    __int16 v32 = 2112;
    __int16 v33 = v13;
    __int16 v34 = 2112;
    __int16 v35 = v14;
    _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Location status for home %@/%@ changing from %@ to %@", v27, 0x34u);
  }
  int v15 = [(HMDHome *)v8 notificationCenter];
  [v15 postNotificationName:@"HMDHomeLocationChangedNotification" object:v8];

  uint64_t v16 = [(HMDHome *)v8 homeManager];
  __int16 v17 = [(HMDHome *)v8 uuid];
  [v16 updateGenerationCounterWithReason:@"HomeLocationChanged" sourceUUID:v17 shouldNotifyClients:0];

  uint64_t v18 = (void *)MEMORY[0x1E4F65480];
  uint64_t v19 = *MEMORY[0x1E4F2D2E0];
  __int16 v20 = v8;
  __int16 v21 = [(HMDHome *)v20 uuid];
  v36[0] = *MEMORY[0x1E4F2D2F0];
  uint64_t v22 = [NSNumber numberWithInteger:a3];
  *(void *)uint64_t v27 = v22;
  uint64_t v23 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v27 forKeys:v36 count:1];
  id v24 = [v18 homeLocationAuthorizedAndEntitledMessageWithName:v19 target:v21 messagePayload:v23];

  uint64_t v25 = [(HMDHome *)v20 msgDispatcher];

  [v25 sendMessage:v24 completionHandler:0];
  if (a3 == 1)
  {
    uint64_t v26 = [(HMDHome *)v20 presenceFeeder];
    [v26 notifyDidArriveHome];
LABEL_10:

    return;
  }
  if (a3 == 3 && a4 != 2 || a3 == 2 && a4 != 3)
  {
    uint64_t v26 = [(HMDHome *)v20 presenceFeeder];
    [v26 notifyDidLeaveHome];
    goto LABEL_10;
  }
}

- (BOOL)hasReachableAccessories
{
  return [(HMDHome *)self reachableAccessoriesCount] > 0;
}

- (void)setAtHomeLevel:(int64_t)a3
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  os_unfair_recursive_lock_lock_with_options();
  unint64_t atHomeLevel = self->_atHomeLevel;
  if (atHomeLevel != a3) {
    self->_unint64_t atHomeLevel = a3;
  }
  uint64_t v6 = os_unfair_recursive_lock_unlock();
  uint64_t v7 = (void *)MEMORY[0x1D9452090](v6);
  BOOL v8 = self;
  unint64_t v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = HMFGetLogIdentifier();
    int v11 = (void *)v10;
    int v12 = @"Updated";
    if (atHomeLevel == a3) {
      int v12 = @"Did not update";
    }
    if (atHomeLevel > 3) {
      uint64_t v13 = @"HMDAtHomeLevelNotAtHome";
    }
    else {
      uint64_t v13 = off_1E6A07688[atHomeLevel];
    }
    if ((unint64_t)a3 > 3) {
      uint64_t v14 = @"HMDAtHomeLevelNotAtHome";
    }
    else {
      uint64_t v14 = off_1E6A07688[a3];
    }
    int v18 = 138544130;
    uint64_t v19 = v10;
    __int16 v20 = 2112;
    __int16 v21 = v12;
    __int16 v22 = 2112;
    uint64_t v23 = v13;
    __int16 v24 = 2112;
    uint64_t v25 = v14;
    _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@%@ atHomeLevel from %@ to %@", (uint8_t *)&v18, 0x2Au);
  }
  if (atHomeLevel != a3)
  {
    int v15 = [(HMDHome *)v8 residentDeviceManager];
    [v15 atHomeLevelChanged:a3];

    uint64_t v16 = [(HMDHome *)v8 homeManager];
    __int16 v17 = [(HMDHome *)v8 uuid];
    [v16 atHomeLevelChanged:a3 formerLevel:atHomeLevel home:v17];
  }
}

- (BOOL)enabledResidentsSupportsHomeHub
{
  id v2 = [(HMDHome *)self residentDeviceManager];
  BOOL v3 = [v2 availableResidentDevices];
  char v4 = objc_msgSend(v3, "na_any:", &__block_literal_global_1629);

  return v4;
}

uint64_t __42__HMDHome_enabledResidentsSupportsHomeHub__block_invoke(uint64_t a1, void *a2)
{
  id v2 = [a2 capabilities];
  uint64_t v3 = [v2 supportsHomeHub];

  return v3;
}

- (BOOL)currentDeviceSupportsSidekickSettings
{
  id v2 = [(HMDHome *)self homeManager];
  uint64_t v3 = [v2 capabilitiesController];
  char v4 = [v3 currentResidentCapabilities];
  char v5 = [v4 supportsSiriEndpointSetup];

  return v5;
}

- (BOOL)supportsSiriEndpointOnBoarding
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [(HMDHome *)self primaryResident];
  char v4 = [v3 capabilities];
  int v5 = [v4 supportsSiriEndpointSetup];

  if (v5)
  {
    uint64_t v6 = [MEMORY[0x1E4F1CA48] array];
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    uint64_t v7 = [(HMDHome *)self appleMediaAccessories];
    uint64_t v8 = [v7 countByEnumeratingWithState:&v27 objects:v32 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v28;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v28 != v10) {
            objc_enumerationMutation(v7);
          }
          int v12 = [*(id *)(*((void *)&v27 + 1) + 8 * i) device];
          if (v12) {
            [v6 addObject:v12];
          }
        }
        uint64_t v9 = [v7 countByEnumeratingWithState:&v27 objects:v32 count:16];
      }
      while (v9);
    }

    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    uint64_t v13 = [(HMDHome *)self residentDeviceManager];
    uint64_t v14 = [v13 residentDevices];

    uint64_t v15 = [v14 countByEnumeratingWithState:&v23 objects:v31 count:16];
    if (v15)
    {
      uint64_t v16 = *(void *)v24;
      do
      {
        for (uint64_t j = 0; j != v15; ++j)
        {
          if (*(void *)v24 != v16) {
            objc_enumerationMutation(v14);
          }
          int v18 = *(void **)(*((void *)&v23 + 1) + 8 * j);
          uint64_t v19 = [v18 device];
          __int16 v20 = [v18 capabilities];
          if ([v20 supportsHomeHub])
          {
            char v21 = [v6 containsObject:v19];

            if (v21)
            {

              LOBYTE(v15) = 1;
              goto LABEL_24;
            }
          }
          else
          {
          }
        }
        uint64_t v15 = [v14 countByEnumeratingWithState:&v23 objects:v31 count:16];
      }
      while (v15);
    }
LABEL_24:
  }
  else
  {
    LOBYTE(v15) = 0;
  }
  return v15;
}

- (void)handleSiriEndPointAddedNotification:(id)a3
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  int v5 = [v4 object];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = v6;

  if (!v7)
  {
    uint64_t v9 = (void *)MEMORY[0x1D9452090]();
    uint64_t v10 = self;
    int v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v12 = HMFGetLogIdentifier();
      int v20 = 138543618;
      char v21 = v12;
      __int16 v22 = 2112;
      id v23 = v4;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_ERROR, "%{public}@Unable to synchronize settings after receiving endpoint added notification with no HAP accessory. %@", (uint8_t *)&v20, 0x16u);
      goto LABEL_10;
    }
LABEL_11:

    goto LABEL_12;
  }
  uint64_t v8 = [v7 home];

  if (v8 != self)
  {
    uint64_t v9 = (void *)MEMORY[0x1D9452090]();
    uint64_t v10 = self;
    int v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = HMFGetLogIdentifier();
      uint64_t v13 = [v7 home];
      int v20 = 138543874;
      char v21 = v12;
      __int16 v22 = 2112;
      id v23 = v7;
      __int16 v24 = 2112;
      long long v25 = v13;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@New accessory is added for another home for HAP accessory: %@ home:%@", (uint8_t *)&v20, 0x20u);

LABEL_10:
      goto LABEL_11;
    }
    goto LABEL_11;
  }
  uint64_t v14 = [v7 siriEndpointProfile];

  if (v14)
  {
    uint64_t v15 = (void *)MEMORY[0x1D9452090]();
    uint64_t v16 = self;
    __int16 v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = HMFGetLogIdentifier();
      int v20 = 138543618;
      char v21 = v18;
      __int16 v22 = 2112;
      id v23 = v7;
      _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_DEFAULT, "%{public}@A siri endpoint accessory is added. Confirm resident device: %@", (uint8_t *)&v20, 0x16u);
    }
    uint64_t v19 = [(HMDHome *)v16 residentDeviceManager];
    [v19 confirmWithCompletionHandler:0];
  }
LABEL_12:
}

- (void)_readProfileState:(void *)a3 viaDevice:
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v17 = a2;
  id v16 = a3;
  if (a1)
  {
    int v5 = (void *)MEMORY[0x1E4F1CA48];
    uint64_t v6 = [v17 count];
    id v7 = +[HMDMediaSession mediaPropertyMessageKeys];
    uint64_t v8 = objc_msgSend(v5, "arrayWithCapacity:", objc_msgSend(v7, "count") * v6);

    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    id obj = v17;
    uint64_t v9 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v24;
      uint64_t v11 = MEMORY[0x1E4F143A8];
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v24 != v10) {
            objc_enumerationMutation(obj);
          }
          uint64_t v13 = *(void *)(*((void *)&v23 + 1) + 8 * i);
          uint64_t v14 = +[HMDMediaSession mediaPropertyMessageKeys];
          v22[0] = v11;
          v22[1] = 3221225472;
          v22[2] = __39__HMDHome__readProfileState_viaDevice___block_invoke;
          v22[3] = &unk_1E6A16F58;
          void v22[4] = v13;
          uint64_t v15 = objc_msgSend(v14, "na_map:", v22);

          [v8 addObjectsFromArray:v15];
        }
        uint64_t v9 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
      }
      while (v9);
    }

    objc_initWeak(&location, a1);
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    void v19[2] = __39__HMDHome__readProfileState_viaDevice___block_invoke_2;
    v19[3] = &unk_1E6A19160;
    objc_copyWeak(&v20, &location);
    [a1 redispatchMediaReadRequests:v8 viaDevice:v16 completion:v19];
    objc_destroyWeak(&v20);
    objc_destroyWeak(&location);
  }
}

HMDMediaPropertyRequest *__39__HMDHome__readProfileState_viaDevice___block_invoke(uint64_t a1, uint64_t a2)
{
  return +[HMDMediaPropertyRequest requestWithProperty:a2 mediaProfile:*(void *)(a1 + 32)];
}

void __39__HMDHome__readProfileState_viaDevice___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  int v5 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v6 = [WeakRetained workQueue];
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = __39__HMDHome__readProfileState_viaDevice___block_invoke_3;
    v7[3] = &unk_1E6A197C8;
    id v8 = v3;
    uint64_t v9 = v5;
    dispatch_async(v6, v7);
  }
}

void __39__HMDHome__readProfileState_viaDevice___block_invoke_3(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v150 = *MEMORY[0x1E4F143B8];
  id v2 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
  long long v122 = 0u;
  long long v123 = 0u;
  long long v124 = 0u;
  long long v125 = 0u;
  id obj = *(id *)(v1 + 32);
  uint64_t v105 = v1;
  long long v101 = v2;
  uint64_t v99 = [obj countByEnumeratingWithState:&v122 objects:v149 count:16];
  if (v99)
  {
    uint64_t v98 = *(void *)v123;
    uint64_t v117 = *MEMORY[0x1E4F2D990];
    uint64_t v114 = *MEMORY[0x1E4F2D9B8];
    uint64_t v112 = *MEMORY[0x1E4F2DA10];
    uint64_t v110 = *MEMORY[0x1E4F2D9E0];
    uint64_t v108 = *MEMORY[0x1E4F2DA20];
    uint64_t v106 = *MEMORY[0x1E4F2D9A0];
    *(void *)&long long v3 = 138544130;
    long long v95 = v3;
    do
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v123 != v98) {
          objc_enumerationMutation(obj);
        }
        int v5 = *(void **)(*((void *)&v122 + 1) + 8 * v4);
        long long v118 = 0u;
        long long v119 = 0u;
        long long v120 = 0u;
        long long v121 = 0u;
        id v6 = v5;
        id v7 = (void *)[v6 countByEnumeratingWithState:&v118 objects:v148 count:16];
        uint64_t v102 = v4;
        if (!v7)
        {

          uint64_t v9 = 0;
          __int16 v113 = 0;
          id v111 = 0;
          long long v109 = 0;
          long long v107 = 0;
LABEL_56:
          __int16 v32 = objc_msgSend(v9, "mediaSession", v95);
          char v38 = [v32 state];
          id v8 = 0;
          goto LABEL_57;
        }
        long long v107 = 0;
        long long v109 = 0;
        id v111 = 0;
        __int16 v113 = 0;
        uint64_t v115 = 0;
        id v8 = 0;
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)v119;
        do
        {
          for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v119 != v10) {
              objc_enumerationMutation(v6);
            }
            int v12 = *(void **)(*((void *)&v118 + 1) + 8 * i);
            uint64_t v13 = objc_msgSend(v12, "error", v95);

            if (!v13)
            {
              uint64_t v14 = [v12 request];
              uint64_t v15 = [v14 mediaProfile];

              id v16 = [v14 property];
              int v17 = [v16 isEqual:v117];

              if (v17)
              {
                int v18 = [v12 value];
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  uint64_t v19 = v18;
                }
                else {
                  uint64_t v19 = 0;
                }
                id v20 = v8;
                id v8 = v19;
                goto LABEL_42;
              }
              char v21 = [v14 property];
              int v22 = [v21 isEqual:v114];

              if (v22)
              {
                int v18 = [v12 value];
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  uint64_t v19 = v18;
                }
                else {
                  uint64_t v19 = 0;
                }
                id v20 = v115;
                uint64_t v115 = v19;
                goto LABEL_42;
              }
              long long v23 = [v14 property];
              int v24 = [v23 isEqual:v112];

              if (v24)
              {
                int v18 = [v12 value];
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  uint64_t v19 = v18;
                }
                else {
                  uint64_t v19 = 0;
                }
                id v20 = v113;
                __int16 v113 = v19;
                goto LABEL_42;
              }
              long long v25 = [v14 property];
              int v26 = [v25 isEqual:v110];

              if (v26)
              {
                int v18 = [v12 value];
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  uint64_t v19 = v18;
                }
                else {
                  uint64_t v19 = 0;
                }
                id v20 = v111;
                id v111 = v19;
                goto LABEL_42;
              }
              long long v27 = [v14 property];
              int v28 = [v27 isEqual:v108];

              if (v28)
              {
                int v18 = [v12 value];
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  uint64_t v19 = v18;
                }
                else {
                  uint64_t v19 = 0;
                }
                id v20 = v109;
                long long v109 = v19;
                goto LABEL_42;
              }
              long long v29 = [v14 property];
              int v30 = [v29 isEqual:v106];

              if (v30)
              {
                int v18 = [v12 value];
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  uint64_t v19 = v18;
                }
                else {
                  uint64_t v19 = 0;
                }
                id v20 = v107;
                long long v107 = v19;
LABEL_42:
                id v31 = v19;
              }
              uint64_t v9 = (void *)v15;
              continue;
            }
          }
          id v7 = (void *)[v6 countByEnumeratingWithState:&v118 objects:v148 count:16];
        }
        while (v7);

        id v2 = v101;
        if (!v8)
        {
          uint64_t v1 = v105;
          id v7 = v115;
          goto LABEL_56;
        }
        __int16 v32 = [v9 accessory];
        uint64_t v33 = [v9 uniqueIdentifier];
        __int16 v34 = [v33 UUIDString];
        int v35 = [v8 isEqualToString:v34];

        uint64_t v1 = v105;
        id v7 = v115;
        if (v35)
        {
          uint64_t v36 = [v32 identifier];

          id v8 = (void *)v36;
        }
        __int16 v37 = [v32 home];
        char v38 = [v37 mediaSessionStateWithIdentifier:v8];
        if (!v38)
        {
          uint64_t v39 = (void *)MEMORY[0x1D9452090]();
          id v40 = *(id *)(v105 + 40);
          __int16 v41 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            long long v42 = v103 = v39;
            uint64_t v43 = [v32 identifier];
            uint64_t v44 = *(void *)(v105 + 32);
            *(_DWORD *)buf = v95;
            uint64_t v141 = v42;
            __int16 v142 = 2112;
            uint64_t v143 = (uint64_t)v8;
            __int16 v144 = 2112;
            uint64_t v145 = v43;
            __int16 v146 = 2112;
            uint64_t v147 = v44;
            _os_log_impl(&dword_1D49D5000, v41, OS_LOG_TYPE_INFO, "%{public}@Creating a media session state for a remote session (sessionIdentifier %@; accessoryIdentifier %"
              "@) update - responses %@",
              buf,
              0x2Au);

            uint64_t v39 = v103;
          }

          char v38 = [[HMDMediaSessionState alloc] initWithSessionIdentifier:v8];
          [v37 addMediaSessionState:v38];
          id v7 = v115;
          uint64_t v1 = v105;
        }

LABEL_57:
        __int16 v45 = [v9 accessory];
        uint64_t v46 = [v45 uuid];
        __int16 v47 = [v46 UUIDString];

        if (v47 && v38)
        {
          long long v97 = v45;
          uint64_t v48 = (void *)MEMORY[0x1E4F1CA60];
          __int16 v49 = objc_msgSend(v2, "hmf_dictionaryForKey:", v47);
          id v50 = [v48 dictionaryWithDictionary:v49];

          BOOL v51 = v7 != 0;
          id v116 = v7;
          long long v104 = v50;
          if (v7)
          {
            uint64_t v52 = [v7 unsignedIntegerValue];
            uint64_t v53 = (void *)MEMORY[0x1D9452090]([(HMDMediaSessionState *)v38 setPlaybackState:v52]);
            id v54 = *(id *)(v105 + 40);
            uint64_t v55 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              uint64_t v56 = v47;
              v58 = long long v57 = v38;
              *(_DWORD *)buf = 138543618;
              uint64_t v141 = v58;
              __int16 v142 = 2048;
              uint64_t v143 = v52;
              _os_log_impl(&dword_1D49D5000, v55, OS_LOG_TYPE_INFO, "%{public}@Read the profile playback state as %tu", buf, 0x16u);

              char v38 = v57;
              __int16 v47 = v56;
            }

            uint64_t v138 = v114;
            id v139 = v116;
            uint64_t v59 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v139 forKeys:&v138 count:1];
            id v50 = v104;
            [v104 addEntriesFromDictionary:v59];
          }
          long long v100 = v47;
          if (v113)
          {
            uint64_t v60 = [v113 unsignedIntegerValue];
            long long v61 = v38;
            long long v62 = (void *)MEMORY[0x1D9452090]([(HMDMediaSessionState *)v38 setShuffleState:v60]);
            id v63 = *(id *)(v105 + 40);
            long long v64 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
            {
              uint64_t v65 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543618;
              uint64_t v141 = v65;
              __int16 v142 = 2048;
              uint64_t v143 = v60;
              _os_log_impl(&dword_1D49D5000, v64, OS_LOG_TYPE_INFO, "%{public}@Read the profile shuffle state as %tu", buf, 0x16u);
            }
            uint64_t v136 = v112;
            uint64_t v137 = v113;
            BOOL v51 = 1;
            uint64_t v66 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v137 forKeys:&v136 count:1];
            id v50 = v104;
            [v104 addEntriesFromDictionary:v66];
          }
          else
          {
            long long v61 = v38;
          }
          if (v111)
          {
            uint64_t v67 = [v111 unsignedIntegerValue];
            long long v68 = (void *)MEMORY[0x1D9452090]([(HMDMediaSessionState *)v61 setRepeatState:v67]);
            id v69 = *(id *)(v105 + 40);
            long long v70 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
            {
              long long v71 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543618;
              uint64_t v141 = v71;
              __int16 v142 = 2048;
              uint64_t v143 = v67;
              _os_log_impl(&dword_1D49D5000, v70, OS_LOG_TYPE_INFO, "%{public}@Read the profile repeat state as %tu", buf, 0x16u);
            }
            uint64_t v134 = v110;
            uint64_t v135 = v111;
            BOOL v51 = 1;
            long long v72 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v135 forKeys:&v134 count:1];
            id v50 = v104;
            [v104 addEntriesFromDictionary:v72];
          }
          id v7 = v116;
          if (v109)
          {
            id v73 = (void *)MEMORY[0x1D9452090]([(HMDMediaSessionState *)v61 setVolume:v109]);
            uint64_t v1 = v105;
            id v74 = *(id *)(v105 + 40);
            uint64_t v75 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
            {
              uint64_t v76 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543618;
              uint64_t v141 = v76;
              __int16 v142 = 2112;
              uint64_t v143 = (uint64_t)v109;
              _os_log_impl(&dword_1D49D5000, v75, OS_LOG_TYPE_INFO, "%{public}@Read the profile volume as %@", buf, 0x16u);
            }
            uint64_t v132 = v108;
            id v133 = v109;
            uint64_t v77 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v133 forKeys:&v132 count:1];
            id v50 = v104;
            [v104 addEntriesFromDictionary:v77];

            char v38 = v61;
            __int16 v47 = v100;
            if (!v107)
            {
LABEL_81:
              [v101 setObject:v50 forKey:v47];
              goto LABEL_82;
            }
LABEL_78:
            __int16 v78 = (void *)MEMORY[0x1D9452090]([(HMDMediaSessionState *)v38 setMediaUniqueIdentifier:v107]);
            id v79 = *(id *)(v1 + 40);
            __int16 v80 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              id v82 = v81 = v38;
              *(_DWORD *)buf = 138543618;
              uint64_t v141 = v82;
              __int16 v142 = 2112;
              uint64_t v143 = (uint64_t)v107;
              _os_log_impl(&dword_1D49D5000, v80, OS_LOG_TYPE_INFO, "%{public}@Read the profile mediaUniqueIdentifier state as %@", buf, 0x16u);

              char v38 = v81;
              __int16 v47 = v100;
            }

            uint64_t v130 = v106;
            id v131 = v107;
            uint64_t v83 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v131 forKeys:&v130 count:1];
            id v50 = v104;
            [v104 addEntriesFromDictionary:v83];

            goto LABEL_81;
          }
          char v38 = v61;
          uint64_t v1 = v105;
          __int16 v47 = v100;
          if (v107) {
            goto LABEL_78;
          }
          if (v51) {
            goto LABEL_81;
          }
LABEL_82:

          id v2 = v101;
          __int16 v45 = v97;
        }

        uint64_t v4 = v102 + 1;
      }
      while (v102 + 1 != v99);
      uint64_t v84 = [obj countByEnumeratingWithState:&v122 objects:v149 count:16];
      uint64_t v99 = v84;
    }
    while (v84);
  }

  if ([v2 count])
  {
    uint64_t v85 = [*(id *)(v1 + 40) uuid];
    uint64_t v86 = [v85 UUIDString];
    id v128 = v86;
    int v126 = @"kAccessoriesListKey";
    uint64_t v87 = (void *)[v101 copy];
    int v127 = v87;
    uint64_t v88 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v127 forKeys:&v126 count:1];
    id v129 = v88;
    uint64_t v89 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v129 forKeys:&v128 count:1];

    uint64_t v90 = [MEMORY[0x1E4F654B0] entitledMessageWithName:*MEMORY[0x1E4F2D538] messagePayload:v89];
    uint64_t v91 = [[HMDHomeManagerXPCMessageSendPolicy alloc] initWithEntitlements:0 options:-1 active:1];
    [v90 setSendPolicy:v91];

    id v92 = [*(id *)(v105 + 40) msgDispatcher];
    uint64_t v93 = [*(id *)(v105 + 40) homeManager];
    __int16 v94 = [v93 uuid];
    [v92 sendMessage:v90 target:v94];

    uint64_t v1 = v105;
    id v2 = v101;
  }
  -[HMDHome updateMediaStateWithResponses:requestMessageInformation:](*(void *)(v1 + 40), *(void **)(v1 + 32), 0);
}

- (void)updateMediaStateWithResponses:(void *)a3 requestMessageInformation:
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (a1)
  {
    id v29 = v6;
    id v31 = [MEMORY[0x1E4F28E10] strongToStrongObjectsMapTable];
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id v28 = v5;
    id obj = v5;
    uint64_t v8 = [obj countByEnumeratingWithState:&v36 objects:v41 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v37;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v37 != v10) {
            objc_enumerationMutation(obj);
          }
          int v12 = *(void **)(*((void *)&v36 + 1) + 8 * i);
          uint64_t v13 = objc_msgSend(v12, "firstObject", v28);
          uint64_t v14 = [v13 request];
          uint64_t v15 = [v14 mediaProfile];
          id v16 = v15;
          if (v15)
          {
            int v17 = [v15 mediaSession];
            if (v17)
            {
              int v18 = [v31 objectForKey:v17];
              uint64_t v19 = (void *)[v18 mutableCopy];

              if (v19) {
                [v19 addObjectsFromArray:v12];
              }
              else {
                uint64_t v19 = (void *)[v12 mutableCopy];
              }
              id v20 = (void *)[v19 copy];
              [v31 setObject:v20 forKey:v17];
            }
            else
            {
              [v16 updateWithResponses:v12 requestMessageInformation:v29];
            }
          }
        }
        uint64_t v9 = [obj countByEnumeratingWithState:&v36 objects:v41 count:16];
      }
      while (v9);
    }

    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    char v21 = objc_msgSend(v31, "hm_allKeys");
    uint64_t v22 = [v21 countByEnumeratingWithState:&v32 objects:v40 count:16];
    id v7 = v29;
    if (v22)
    {
      uint64_t v23 = v22;
      uint64_t v24 = *(void *)v33;
      do
      {
        for (uint64_t j = 0; j != v23; ++j)
        {
          if (*(void *)v33 != v24) {
            objc_enumerationMutation(v21);
          }
          int v26 = *(void **)(*((void *)&v32 + 1) + 8 * j);
          long long v27 = objc_msgSend(v31, "objectForKey:", v26, v28);
          [v26 updateWithResponses:v27 requestMessageInformation:v29];
        }
        uint64_t v23 = [v21 countByEnumeratingWithState:&v32 objects:v40 count:16];
      }
      while (v23);
    }

    id v5 = v28;
  }
}

void __63__HMDHome__refreshCharacteristicValuesOnHomeNotificationEnable__block_invoke_1625(uint64_t a1, void *a2, void *a3)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v35 = a2;
  id v36 = a3;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  uint64_t v5 = a1;
  id obj = *(id *)(a1 + 32);
  uint64_t v6 = [obj countByEnumeratingWithState:&v46 objects:v57 count:16];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(void *)v47;
    *(void *)&long long v7 = 138543874;
    long long v32 = v7;
    uint64_t v33 = *(void *)v47;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v47 != v9) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void **)(*((void *)&v46 + 1) + 8 * i);
        int v12 = objc_msgSend(v11, "characteristic", v32);
        id v45 = 0;
        uint64_t v13 = objc_msgSend(v36, "hmd_valueOfCharacteristic:error:", v12, &v45);
        id v14 = v45;

        uint64_t v15 = (void *)MEMORY[0x1D9452090]();
        id v16 = *(id *)(v5 + 40);
        int v17 = HMFGetOSLogHandle();
        int v18 = v17;
        if (v13)
        {
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_INFO)) {
            goto LABEL_12;
          }
          uint64_t v19 = HMFGetLogIdentifier();
          *(_DWORD *)buf = v32;
          uint64_t v52 = v19;
          __int16 v53 = 2112;
          id v54 = v11;
          __int16 v55 = 2112;
          id v56 = v13;
          id v20 = v18;
          os_log_type_t v21 = OS_LOG_TYPE_INFO;
          uint64_t v22 = "%{public}@Characteristic read request succeeded when Home app enabled notifications %@:%@";
        }
        else
        {
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
            goto LABEL_12;
          }
          uint64_t v19 = HMFGetLogIdentifier();
          *(_DWORD *)buf = v32;
          uint64_t v52 = v19;
          __int16 v53 = 2112;
          id v54 = v11;
          __int16 v55 = 2112;
          id v56 = v14;
          id v20 = v18;
          os_log_type_t v21 = OS_LOG_TYPE_ERROR;
          uint64_t v22 = "%{public}@Characteristic read request when Home app enabled notification failed %@:%@";
        }
        _os_log_impl(&dword_1D49D5000, v20, v21, v22, buf, 0x20u);

        uint64_t v9 = v33;
LABEL_12:
      }
      uint64_t v8 = [obj countByEnumeratingWithState:&v46 objects:v57 count:16];
    }
    while (v8);
  }

  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  id v23 = *(id *)(v5 + 48);
  uint64_t v24 = [v23 countByEnumeratingWithState:&v41 objects:v50 count:16];
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = *(void *)v42;
    do
    {
      for (uint64_t j = 0; j != v25; ++j)
      {
        if (*(void *)v42 != v26) {
          objc_enumerationMutation(v23);
        }
        id v28 = *(void **)(*((void *)&v41 + 1) + 8 * j);
        id v29 = [v28 workQueue];
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = __63__HMDHome__refreshCharacteristicValuesOnHomeNotificationEnable__block_invoke_1626;
        block[3] = &unk_1E6A18668;
        void block[4] = v28;
        id v30 = v36;
        uint64_t v31 = *(void *)(v5 + 40);
        id v38 = v30;
        uint64_t v39 = v31;
        id v40 = v35;
        dispatch_async(v29, block);
      }
      uint64_t v25 = [v23 countByEnumeratingWithState:&v41 objects:v50 count:16];
    }
    while (v25);
  }
}

void __63__HMDHome__refreshCharacteristicValuesOnHomeNotificationEnable__block_invoke_1626(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v17 = 0;
  uint64_t v4 = [v2 updateSettingsWithReadCharacteristicResponsePayload:v3 error:&v17];
  id v5 = v17;
  uint64_t v6 = (void *)MEMORY[0x1D9452090]();
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = HMFGetOSLogHandle();
  uint64_t v9 = v8;
  if (v4)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      uint64_t v11 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543874;
      uint64_t v19 = v10;
      __int16 v20 = 2112;
      uint64_t v21 = v11;
      __int16 v22 = 2112;
      id v23 = v4;
      int v12 = "%{public}@Successfully updated light profile settings %@:%@";
      uint64_t v13 = v9;
      os_log_type_t v14 = OS_LOG_TYPE_INFO;
LABEL_6:
      _os_log_impl(&dword_1D49D5000, v13, v14, v12, buf, 0x20u);
    }
  }
  else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = HMFGetLogIdentifier();
    uint64_t v15 = *(void *)(a1 + 32);
    id v16 = *(void **)(a1 + 56);
    *(_DWORD *)buf = 138543874;
    uint64_t v19 = v10;
    __int16 v20 = 2112;
    uint64_t v21 = v15;
    __int16 v22 = 2112;
    id v23 = v16;
    int v12 = "%{public}@Failed to update light profile settings %@:%@";
    uint64_t v13 = v9;
    os_log_type_t v14 = OS_LOG_TYPE_ERROR;
    goto LABEL_6;
  }
}

- (void)_handleSetHasOnboardedForWalletKeyChange:(id)a3 message:(id)a4
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)MEMORY[0x1D9452090]();
  uint64_t v9 = self;
  uint64_t v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    int v14 = 138543362;
    uint64_t v15 = v11;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Home's has onboarded for wallet key value changed, sending notification", (uint8_t *)&v14, 0xCu);
  }
  int v12 = [v6 hasOnboardedForWalletKey];
  -[HMDHome setHasOnboardedForWalletKey:](v9, "setHasOnboardedForWalletKey:", [v12 BOOLValue]);

  uint64_t v13 = [(HMDHome *)v9 notificationCenter];
  [v13 postNotificationName:@"HMDHomeHasOnboardedForWalletKeyChangeNotification" object:v9];
}

- (void)_handleSetHasOnboardedForAccessCodeChange:(id)a3 message:(id)a4
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)MEMORY[0x1D9452090]();
  uint64_t v9 = self;
  uint64_t v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    int v14 = 138543362;
    uint64_t v15 = v11;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Home's has onboarded for access code value changed, sending notification", (uint8_t *)&v14, 0xCu);
  }
  int v12 = [v6 hasOnboardedForAccessCode];
  -[HMDHome setHasOnboardedForAccessCode:](v9, "setHasOnboardedForAccessCode:", [v12 BOOLValue]);

  uint64_t v13 = [(HMDHome *)v9 notificationCenter];
  [v13 postNotificationName:@"HMDHomeHasOnboardedForAccessCodeChangeNotification" object:v9];
}

- (void)_handleHasAnyUserAcknowledgedCameraRecordingOnboardingChange:(id)a3 message:(id)a4
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)MEMORY[0x1D9452090]();
  uint64_t v9 = self;
  uint64_t v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    int v13 = 138543362;
    int v14 = v11;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Home's has any user acknowledged camera recording onboarding value changed, sending notification", (uint8_t *)&v13, 0xCu);
  }
  int v12 = [v6 hasAnyUserAcknowledgedCameraRecordingOnboarding];
  -[HMDHome setHasAnyUserAcknowledgedCameraRecordingOnboarding:](v9, "setHasAnyUserAcknowledgedCameraRecordingOnboarding:", [v12 BOOLValue]);
}

- (void)_handleResolveThreadNetworkRequest:(id)a3
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    __int16 v20 = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Attempting to resolve thread network credentials", buf, 0xCu);
  }
  uint64_t v9 = +[HMDThreadNetworkMetadataStore defaultStore];
  if (v9)
  {
    uint64_t v10 = [(HMDHome *)v6 threadOperationalDataset];
    objc_initWeak((id *)buf, v6);
    uint64_t v11 = [(HMDHome *)v6 doesHomeContainResident];
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    void v16[2] = __46__HMDHome__handleResolveThreadNetworkRequest___block_invoke;
    v16[3] = &unk_1E6A08060;
    objc_copyWeak(&v18, (id *)buf);
    id v17 = v4;
    [v9 retrieveMetadata:v10 homeHasResident:v11 completion:v16];

    objc_destroyWeak(&v18);
    objc_destroyWeak((id *)buf);
  }
  else
  {
    int v12 = (void *)MEMORY[0x1D9452090]();
    int v13 = v6;
    int v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      __int16 v20 = v15;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_ERROR, "%{public}@No thread network metadata store", buf, 0xCu);
    }
    uint64_t v10 = [MEMORY[0x1E4F28C58] hmfErrorWithCode:2];
    [v4 respondWithError:v10];
  }
}

void __46__HMDHome__handleResolveThreadNetworkRequest___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v8 = WeakRetained;
  if (v5 && WeakRetained)
  {
    id v24 = 0;
    uint64_t v9 = [MEMORY[0x1E4F28DB0] archivedDataWithRootObject:v5 requiringSecureCoding:1 error:&v24];
    id v10 = v24;
    if (v9)
    {
      uint64_t v11 = *(void **)(a1 + 32);
      uint64_t v25 = *MEMORY[0x1E4F2D738];
      uint64_t v26 = v9;
      int v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v26 forKeys:&v25 count:1];
      [v11 respondWithPayload:v12];
    }
    else
    {
      uint64_t v19 = (void *)MEMORY[0x1D9452090]();
      id v20 = v8;
      uint64_t v21 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        __int16 v22 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v28 = v22;
        __int16 v29 = 2112;
        id v30 = v10;
        _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_ERROR, "%{public}@Unable to encode credentials: %@", buf, 0x16u);
      }
      id v23 = *(void **)(a1 + 32);
      int v12 = [MEMORY[0x1E4F28C58] hmfErrorWithCode:15];
      [v23 respondWithError:v12];
    }
  }
  else
  {
    int v13 = (void *)MEMORY[0x1D9452090]();
    id v14 = v8;
    uint64_t v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = HMFGetLogIdentifier();
      id v17 = [v14 threadNetworkID];
      *(_DWORD *)buf = 138543874;
      id v28 = v16;
      __int16 v29 = 2112;
      id v30 = v17;
      __int16 v31 = 2112;
      id v32 = v6;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_ERROR, "%{public}@Unable to retrieve metadata for thread network '%@': %@", buf, 0x20u);
    }
    id v18 = *(void **)(a1 + 32);
    id v10 = [MEMORY[0x1E4F28C58] hmfErrorWithCode:2];
    [v18 respondWithError:v10];
  }
}

- (void)_handleHomeUpdateDidOnboardLocationServicesRequest:(id)a3
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = (void *)MEMORY[0x1D9452090]();
  id v7 = self;
  uint64_t v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    __int16 v31 = v9;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Received update did onboard locations services request", buf, 0xCu);
  }
  id v10 = [v4 messagePayload];
  uint64_t v11 = *MEMORY[0x1E4F2D1F8];
  id v29 = 0;
  uint64_t v12 = objc_msgSend(v10, "hmf_BOOLForKey:error:", v11, &v29);
  id v13 = v29;

  if (v13)
  {
    id v14 = (void *)MEMORY[0x1D9452090]();
    uint64_t v15 = v7;
    uint64_t v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      id v17 = HMFGetLogIdentifier();
      id v18 = [v4 messagePayload];
      *(_DWORD *)buf = 138543618;
      __int16 v31 = v17;
      __int16 v32 = 2112;
      uint64_t v33 = v18;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to decode did onboard location services from update request payload: %@", buf, 0x16u);
    }
    [v4 respondWithError:v13];
  }
  else
  {
    uint64_t v19 = [HMDHomeModel alloc];
    id v20 = [(HMDHome *)v7 uuid];
    uint64_t v21 = [(HMDHome *)v7 homeManager];
    __int16 v22 = [v21 uuid];
    id v23 = [(HMDBackingStoreModelObject *)v19 initWithObjectChangeType:2 uuid:v20 parentUUID:v22];

    id v24 = [NSNumber numberWithBool:v12];
    [(HMDHomeModel *)v23 setDidOnboardLocationServices:v24];

    uint64_t v25 = [(HMDHome *)v7 backingStore];
    uint64_t v26 = [v4 name];
    long long v27 = +[HMDBackingStoreTransactionOptions defaultPreferencesOptions];
    id v28 = [v25 transaction:v26 options:v27];

    [v28 add:v23 withMessage:v4];
    [v28 run];
  }
}

- (void)_handleDidOnboardLocationServicesChange:(id)a3 message:(id)a4
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v6 didOnboardLocationServices];
  uint64_t v9 = [v8 BOOLValue];

  id v10 = (void *)MEMORY[0x1D9452090]();
  uint64_t v11 = self;
  uint64_t v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v13 = HMFGetLogIdentifier();
    id v14 = HMFBooleanToString();
    int v15 = 138543618;
    uint64_t v16 = v13;
    __int16 v17 = 2112;
    id v18 = v14;
    _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Updating did onboard location services: %@", (uint8_t *)&v15, 0x16u);
  }
  [(HMDHome *)v11 setDidOnboardLocationServices:v9];
}

- (void)runLocationServicesEnabledUpdateWithValue:(BOOL)a3 message:(id)a4
{
  BOOL v4 = a3;
  id v6 = a4;
  id v7 = [HMDHomeModel alloc];
  uint64_t v8 = [(HMDHome *)self uuid];
  uint64_t v9 = [(HMDHome *)self homeManager];
  id v10 = [v9 uuid];
  int v15 = [(HMDBackingStoreModelObject *)v7 initWithObjectChangeType:2 uuid:v8 parentUUID:v10];

  uint64_t v11 = [NSNumber numberWithBool:v4];
  [(HMDHomeModel *)v15 setLocationServicesEnabled:v11];

  [(HMDHomeModel *)v15 setDidOnboardLocationServices:MEMORY[0x1E4F1CC38]];
  uint64_t v12 = [(HMDHome *)self backingStore];
  id v13 = +[HMDBackingStoreTransactionOptions defaultPreferencesOptions];
  id v14 = [v12 transaction:@"LocationServicesEnabledUpdate" options:v13];

  [v14 add:v15 withMessage:v6];
  [v14 run];
}

- (void)runLocationServicesEnabledUpdateWithValue:(BOOL)a3
{
}

- (void)_handleHomeUpdateLocationServicesEnabledRequest:(id)a3
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = (void *)MEMORY[0x1D9452090]();
  id v7 = self;
  uint64_t v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    uint64_t v21 = v9;
    __int16 v22 = 2112;
    id v23 = v4;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Received update location services enabled request message: %@", buf, 0x16u);
  }
  id v10 = [v4 messagePayload];
  uint64_t v11 = *MEMORY[0x1E4F2D2D8];
  id v19 = 0;
  uint64_t v12 = objc_msgSend(v10, "hmf_BOOLForKey:error:", v11, &v19);
  id v13 = v19;

  if (v13)
  {
    id v14 = (void *)MEMORY[0x1D9452090]();
    int v15 = v7;
    uint64_t v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      __int16 v17 = HMFGetLogIdentifier();
      id v18 = [v4 messagePayload];
      *(_DWORD *)buf = 138543618;
      uint64_t v21 = v17;
      __int16 v22 = 2112;
      id v23 = v18;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to decode location services enabled from update request payload: %@", buf, 0x16u);
    }
    [v4 respondWithError:v13];
  }
  else
  {
    [(HMDHome *)v7 runLocationServicesEnabledUpdateWithValue:v12 message:v4];
  }
}

- (void)_handleLocationServicesEnabledChange:(id)a3 message:(id)a4
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v6 locationServicesEnabled];
  uint64_t v9 = [v8 BOOLValue];

  id v10 = (void *)MEMORY[0x1D9452090]();
  uint64_t v11 = self;
  uint64_t v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v13 = HMFGetLogIdentifier();
    id v14 = HMFBooleanToString();
    int v15 = 138543618;
    uint64_t v16 = v13;
    __int16 v17 = 2112;
    id v18 = v14;
    _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Updating location services enabled: %@", (uint8_t *)&v15, 0x16u);
  }
  [(HMDHome *)v11 setLocationServicesEnabled:v9];
}

- (void)_handleSoundCheckUpdateRequest:(id)a3
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = (void *)MEMORY[0x1D9452090]();
  id v7 = self;
  uint64_t v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    uint64_t v26 = v9;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Received update soundCheck request", buf, 0xCu);
  }
  id v10 = [HMDHomeModel alloc];
  uint64_t v11 = [(HMDHome *)v7 uuid];
  uint64_t v12 = [(HMDHome *)v7 homeManager];
  id v13 = [v12 uuid];
  id v14 = [(HMDBackingStoreModelObject *)v10 initWithObjectChangeType:2 uuid:v11 parentUUID:v13];

  int v15 = [v4 messagePayload];
  uint64_t v16 = *MEMORY[0x1E4F2D718];
  id v24 = 0;
  uint64_t v17 = objc_msgSend(v15, "hmf_BOOLForKey:error:", v16, &v24);
  id v18 = v24;

  if (v18)
  {
    [v4 respondWithError:v18];
  }
  else
  {
    uint64_t v19 = [NSNumber numberWithBool:v17];
    [(HMDHomeModel *)v14 setSoundCheckEnabled:v19];

    id v20 = [(HMDHome *)v7 backingStore];
    uint64_t v21 = [v4 name];
    __int16 v22 = +[HMDBackingStoreTransactionOptions defaultPreferencesOptions];
    id v23 = [v20 transaction:v21 options:v22];

    [v23 add:v14 withMessage:v4];
    [v23 run];
  }
}

- (void)_handleSoundCheckChange:(id)a3 message:(id)a4
{
  id v5 = [a3 soundCheckEnabled];
  -[HMDHome setSoundCheckEnabled:](self, "setSoundCheckEnabled:", [v5 BOOLValue]);
}

- (void)enableUserListeningHistoryForAccessoryUUID:(id)a3 userUUID:(id)a4
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [(HMDHome *)self userWithUUID:v7];
  uint64_t v9 = (void *)MEMORY[0x1D9452090]();
  id v10 = self;
  uint64_t v11 = HMFGetOSLogHandle();
  uint64_t v12 = v11;
  if (v8)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      int v15 = 138543874;
      uint64_t v16 = v13;
      __int16 v17 = 2112;
      id v18 = v6;
      __int16 v19 = 2112;
      id v20 = v8;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Enable ULH: accessoryUUID %@ user %@", (uint8_t *)&v15, 0x20u);
    }
    [(HMDHome *)v8 enableUserListeningHistoryForAccessory:v6];
  }
  else
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      id v14 = HMFGetLogIdentifier();
      int v15 = 138543874;
      uint64_t v16 = v14;
      __int16 v17 = 2112;
      id v18 = v7;
      __int16 v19 = 2112;
      id v20 = v10;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_ERROR, "%{public}@No user exist for userUUID %@ in home %@", (uint8_t *)&v15, 0x20u);
    }
  }
}

- (void)_handleUserListeningHistoryUpdateControlUpdatedAccessoryUUIDs:(id)a3
{
  id v4 = a3;
  __decodeAndVerifyCurrentUser(self, v4);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [v5 handleUserListeningHistoryUpdateControlUpdatedAccessoryUUIDs:v4];
}

- (void)_handleMediaContentProfileAccessControlUpdate:(id)a3
{
  id v4 = a3;
  __decodeAndVerifyCurrentUser(self, v4);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [v5 handleMediaContentProfileAccessControlUpdate:v4];
}

- (void)_handleAssistantAccessControlUpdate:(id)a3
{
  id v4 = a3;
  __decodeAndVerifyCurrentUser(self, v4);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [v5 handleAssistantAccessControlUpdate:v4];
}

- (void)_handleSiriPhraseOptionsUpdateRequest:(id)a3
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = (void *)MEMORY[0x1D9452090]();
  id v7 = self;
  uint64_t v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = HMFGetLogIdentifier();
    int v23 = 138543362;
    id v24 = v9;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Received update Siri phrase options request", (uint8_t *)&v23, 0xCu);
  }
  id v10 = [HMDHomeModel alloc];
  uint64_t v11 = [(HMDHome *)v7 uuid];
  uint64_t v12 = [(HMDHome *)v7 homeManager];
  id v13 = [v12 uuid];
  id v14 = [(HMDBackingStoreModelObject *)v10 initWithObjectChangeType:2 uuid:v11 parentUUID:v13];

  int v15 = [v4 messagePayload];
  uint64_t v16 = objc_msgSend(v15, "hmf_numberForKey:", *MEMORY[0x1E4F2D708]);
  uint64_t v17 = [v16 unsignedIntegerValue];

  id v18 = [NSNumber numberWithUnsignedInteger:v17];
  [(HMDHomeModel *)v14 setSiriPhraseOptions:v18];

  __int16 v19 = [(HMDHome *)v7 backingStore];
  id v20 = [v4 name];
  uint64_t v21 = +[HMDBackingStoreTransactionOptions defaultPreferencesOptions];
  __int16 v22 = [v19 transaction:v20 options:v21];

  [v22 add:v14 withMessage:v4];
  [v22 run];
}

- (void)_handleSiriPhraseOptionsStatusChange:(id)a3 message:(id)a4
{
  id v5 = [a3 siriPhraseOptions];
  -[HMDHome setSiriPhraseOptions:](self, "setSiriPhraseOptions:", [v5 unsignedIntegerValue]);
}

- (void)_handleMultiUserEnabledChange:(id)a3 message:(id)a4
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)MEMORY[0x1D9452090]();
  uint64_t v9 = self;
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    int v20 = 138543362;
    uint64_t v21 = v11;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Multi-user enabled changed, sending notification", (uint8_t *)&v20, 0xCu);
  }
  uint64_t v12 = [v6 multiUserEnabled];
  -[HMDHome setMultiUserEnabled:](v9, "setMultiUserEnabled:", [v12 BOOLValue]);

  id v13 = [(HMDHome *)v9 notificationCenter];
  uint64_t v14 = *MEMORY[0x1E4F2D600];
  [v13 postNotificationName:*MEMORY[0x1E4F2D600] object:0];

  int v15 = (void *)MEMORY[0x1E4F654B0];
  uint64_t v16 = [(HMDHome *)v9 messageDestination];
  uint64_t v17 = [v15 messageWithName:v14 destination:v16 payload:0];

  id v18 = [v7 identifier];
  [v17 setIdentifier:v18];

  objc_msgSend(v17, "setRemote:", objc_msgSend(v7, "isRemote"));
  __int16 v19 = [(HMDHome *)v9 msgDispatcher];
  [v19 sendMessage:v17 completionHandler:0];
}

- (void)_handleSetHasOnboardedForWalletKeyMessage:(id)a3
{
}

- (void)_handleSetHasOnboardedForAccessCodeMessage:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    int v18 = 138543618;
    __int16 v19 = v8;
    __int16 v20 = 2112;
    id v21 = v4;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Handling message to set has onboarded for access code: %@", (uint8_t *)&v18, 0x16u);
  }
  uint64_t v9 = [HMDHomeModel alloc];
  id v10 = [(HMDHome *)v6 uuid];
  uint64_t v11 = [(HMDHome *)v6 homeManager];
  uint64_t v12 = [v11 uuid];
  id v13 = [(HMDBackingStoreModelObject *)v9 initWithObjectChangeType:2 uuid:v10 parentUUID:v12];

  [(HMDHomeModel *)v13 setHasOnboardedForAccessCode:MEMORY[0x1E4F1CC38]];
  uint64_t v14 = [(HMDHome *)v6 backingStore];
  int v15 = [v4 name];
  uint64_t v16 = +[HMDBackingStoreTransactionOptions defaultPreferencesOptions];
  uint64_t v17 = [v14 transaction:v15 options:v16];

  [v17 add:v13 withMessage:v4];
  [v17 run];
}

- (void)_handleSetHasAnyUserAcknowledgedCameraRecordingOnboardingRequest:(id)a3
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    uint64_t v22 = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Received set has any user acknowledged camera recording onboarding request", buf, 0xCu);
  }
  uint64_t v9 = [HMDHomeModel alloc];
  id v10 = [(HMDHome *)v6 uuid];
  uint64_t v11 = [(HMDHome *)v6 homeManager];
  uint64_t v12 = [v11 uuid];
  id v13 = [(HMDBackingStoreModelObject *)v9 initWithObjectChangeType:2 uuid:v10 parentUUID:v12];

  [(HMDHomeModel *)v13 setHasAnyUserAcknowledgedCameraRecordingOnboarding:MEMORY[0x1E4F1CC38]];
  uint64_t v14 = [(HMDHome *)v6 backingStore];
  int v15 = [v4 name];
  uint64_t v16 = +[HMDBackingStoreTransactionOptions defaultPreferencesOptions];
  uint64_t v17 = [v14 transaction:v15 options:v16];

  [v17 add:v13 withMessage:v4];
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  void v19[2] = __76__HMDHome__handleSetHasAnyUserAcknowledgedCameraRecordingOnboardingRequest___block_invoke;
  v19[3] = &unk_1E6A197F0;
  id v20 = v4;
  id v18 = v4;
  [v17 run:v19];
}

uint64_t __76__HMDHome__handleSetHasAnyUserAcknowledgedCameraRecordingOnboardingRequest___block_invoke(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  if (a2) {
    return [v2 respondWithError:a2];
  }
  else {
    return [v2 respondWithSuccess];
  }
}

- (void)enableMultiUser
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)MEMORY[0x1D9452090](self, a2);
  id v4 = self;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    int v11 = 138543362;
    uint64_t v12 = v6;
    _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Received local request to enable Multi-User", (uint8_t *)&v11, 0xCu);
  }
  id v7 = (void *)MEMORY[0x1E4F65480];
  uint64_t v8 = *MEMORY[0x1E4F2D218];
  uint64_t v9 = [(HMDHome *)v4 messageDestination];
  id v10 = [v7 messageWithName:v8 destination:v9 payload:MEMORY[0x1E4F1CC08]];

  -[HMDHome _enableMultiUserWithMessage:](v4, v10);
}

- (void)_enableMultiUserWithMessage:(void *)a1
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (a1)
  {
    if ([a1 isMultiUserEnabled])
    {
      [v3 respondWithSuccess];
    }
    else
    {
      id v4 = (void *)MEMORY[0x1D9452090]();
      id v5 = a1;
      id v6 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        id v7 = HMFGetLogIdentifier();
        int v17 = 138543362;
        id v18 = v7;
        _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Received enable multi-user request", (uint8_t *)&v17, 0xCu);
      }
      uint64_t v8 = [HMDHomeModel alloc];
      uint64_t v9 = [v5 uuid];
      id v10 = [v5 homeManager];
      int v11 = [v10 uuid];
      uint64_t v12 = [(HMDBackingStoreModelObject *)v8 initWithObjectChangeType:2 uuid:v9 parentUUID:v11];

      [(HMDHomeModel *)v12 setMultiUserEnabled:MEMORY[0x1E4F1CC38]];
      uint64_t v13 = [v5 backingStore];
      uint64_t v14 = [v3 name];
      int v15 = +[HMDBackingStoreTransactionOptions defaultPreferencesOptions];
      uint64_t v16 = [v13 transaction:v14 options:v15];

      [v16 add:v12 withMessage:v3];
      [v16 run];
    }
  }
}

- (void)_handleEnableMultiUserRequest:(id)a3
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([v4 isRemote] && (objc_msgSend(v4, "isSecureRemote") & 1) == 0)
  {
    id v10 = (void *)MEMORY[0x1D9452090]();
    int v11 = self;
    uint64_t v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      long long v37 = v13;
      __int16 v38 = 2112;
      id v39 = v4;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Message not supported: %@", buf, 0x16u);
    }
    uint64_t v14 = [MEMORY[0x1E4F28C58] hmErrorWithCode:17];
    [v4 respondWithError:v14];
  }
  else
  {
    if ([(HMDHome *)self isOwnerUser])
    {
      -[HMDHome _enableMultiUserWithMessage:](self, v4);
      goto LABEL_16;
    }
    id v5 = [(HMDHome *)self primaryResident];
    if (!v5)
    {
      id v6 = (void *)MEMORY[0x1D9452090]();
      int v15 = self;
      uint64_t v8 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        long long v37 = v16;
        _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_ERROR, "%{public}@Unable to forward message to home owner no resident found", buf, 0xCu);
      }
      goto LABEL_15;
    }
    if (([v4 isRemote] & 1) != 0
      || [v4 BOOLForKey:@"kDoNotForwardMessageKey"])
    {
      id v6 = (void *)MEMORY[0x1D9452090]();
      id v7 = self;
      uint64_t v8 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v9 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        long long v37 = v9;
        _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_ERROR, "%{public}@Did not expect remote message.", buf, 0xCu);
      }
LABEL_15:

      int v17 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
      [v4 respondWithError:v17];

      goto LABEL_16;
    }
    id v18 = (void *)[v4 mutableCopy];
    [v18 setRemote:1];
    [v18 setSecureRemote:1];
    uint64_t v34 = @"kDoNotForwardMessageKey";
    uint64_t v35 = MEMORY[0x1E4F1CC38];
    uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v35 forKeys:&v34 count:1];
    [v18 setMessagePayload:v19];

    id v20 = [HMDRemoteDeviceMessageDestination alloc];
    id v21 = [v4 destination];
    uint64_t v22 = [v21 target];
    uint64_t v23 = [v5 device];
    id v24 = [(HMDRemoteDeviceMessageDestination *)v20 initWithTarget:v22 device:v23];
    [v18 setDestination:v24];

    objc_initWeak(&location, self);
    v30[0] = MEMORY[0x1E4F143A8];
    v30[1] = 3221225472;
    void v30[2] = __41__HMDHome__handleEnableMultiUserRequest___block_invoke;
    v30[3] = &unk_1E6A17958;
    objc_copyWeak(&v32, &location);
    id v31 = v4;
    uint64_t v25 = (void *)MEMORY[0x1D9452090]([v18 setResponseHandler:v30]);
    uint64_t v26 = self;
    HMFGetOSLogHandle();
    uint64_t v27 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      id v28 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v37 = v28;
      _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_INFO, "%{public}@Forwarding enable multi-user request to owner.", buf, 0xCu);
    }
    id v29 = [(HMDHome *)v26 msgDispatcher];
    [v29 sendMessage:v18];

    objc_destroyWeak(&v32);
    objc_destroyWeak(&location);
  }
LABEL_16:
}

void __41__HMDHome__handleEnableMultiUserRequest___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v8 = (void *)MEMORY[0x1D9452090]();
  id v9 = WeakRetained;
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    int v11 = HMFGetLogIdentifier();
    int v14 = 138543618;
    int v15 = v11;
    __int16 v16 = 2112;
    id v17 = v5;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Enabled multi-user on the home error: %@", (uint8_t *)&v14, 0x16u);
  }
  uint64_t v12 = [*(id *)(a1 + 32) responseHandler];

  if (v12)
  {
    uint64_t v13 = [*(id *)(a1 + 32) responseHandler];
    ((void (**)(void, id, id))v13)[2](v13, v5, v6);
  }
}

- (void)_configureConfiguredResident:(id)a3 desiredConfigState:(unint64_t)a4 message:(id)a5
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a5;
  if (a4 == 1)
  {
    id v10 = (void *)MEMORY[0x1D9452090]();
    int v11 = self;
    uint64_t v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = HMFGetLogIdentifier();
      int v27 = 138543362;
      id v28 = v13;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Unconfiguring residents is not supported", (uint8_t *)&v27, 0xCu);
    }
    int v14 = [v9 responseHandler];

    if (v14)
    {
      int v15 = [MEMORY[0x1E4F28C58] hmErrorWithCode:48 description:0 reason:0 suggestion:0];
      __int16 v16 = [v9 responseHandler];
      ((void (**)(void, void *, void))v16)[2](v16, v15, 0);
LABEL_17:
    }
  }
  else
  {
    uint64_t v17 = [v8 configurationState];
    [(HMDHome *)self _updateConfigurationStateForResidentDevice:v8 desiredConfigState:a4 message:v9];
    if (v17 != a4)
    {
      int v15 = [(HMDHome *)self homeManager];
      uint64_t v18 = (void *)MEMORY[0x1D9452090]();
      uint64_t v19 = self;
      id v20 = HMFGetOSLogHandle();
      BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_INFO);
      if (a4 == 2)
      {
        if (v21)
        {
          uint64_t v22 = HMFGetLogIdentifier();
          uint64_t v23 = [v8 displayName];
          int v27 = 138543618;
          id v28 = v22;
          __int16 v29 = 2112;
          id v30 = v23;
          _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@Enabling resident device %@, checking if we need to go remote", (uint8_t *)&v27, 0x16u);
        }
      }
      else
      {
        if (v21)
        {
          id v24 = HMFGetLogIdentifier();
          uint64_t v25 = [v8 displayName];
          int v27 = 138543618;
          id v28 = v24;
          __int16 v29 = 2112;
          id v30 = v25;
          _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@Disabling resident device %@, checking if we need to go remote", (uint8_t *)&v27, 0x16u);
        }
        uint64_t v26 = [(HMDHome *)v19 uuid];
        [v15 teardownRemoteAccessForHome:v26];
      }
      if (![(HMDHome *)v19 isResidentSupported]) {
        [v15 checkForRemotePeers];
      }
      __int16 v16 = [v9 name];
      [(HMDHome *)v19 saveWithReason:v16 postSyncNotification:0];
      goto LABEL_17;
    }
  }
}

- (void)_addResidentWithUsername:(id)a3 publicKey:(id)a4 destination:(id)a5
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  if (v8 && v9)
  {
    int v11 = [(HMDHome *)self unconfiguredResidentDevices];
    uint64_t v12 = objc_msgSend(v11, "hmf_firstObjectWithValue:forKeyPath:", v10, @"userID");

    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    int v14 = (void *)MEMORY[0x1D9452090]();
    int v15 = self;
    __int16 v16 = HMFGetOSLogHandle();
    uint64_t v17 = v16;
    if (isKindOfClass)
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        uint64_t v18 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v32 = v18;
        _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Found user as unconfigured resident, creating an accepted invitation to track adding the resident", buf, 0xCu);
      }
      uint64_t v19 = [[HMDOutgoingHomeInvitation alloc] initWithInvitee:v12 invitationState:5 forHome:v15 expiryDate:0 messageIdentifier:0];
      id v20 = [(HMDHome *)v15 outgoingInvitations];
      [v20 addObject:v19];

      objc_initWeak((id *)buf, v15);
      v27[0] = MEMORY[0x1E4F143A8];
      v27[1] = 3221225472;
      void v27[2] = __58__HMDHome__addResidentWithUsername_publicKey_destination___block_invoke;
      v27[3] = &unk_1E6A15888;
      objc_copyWeak(&v30, (id *)buf);
      id v28 = v12;
      BOOL v21 = v19;
      __int16 v29 = v21;
      [(HMDHome *)v15 __handleAcceptedOutgoingInvitationResponse:v21 destinationAddress:v10 publicKey:v9 username:v8 issuerPublicKeyER:0 presenceAuthStatus:0 completionHandler:v27];

      objc_destroyWeak(&v30);
      objc_destroyWeak((id *)buf);
    }
    else
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v32 = v26;
        __int16 v33 = 2112;
        id v34 = v10;
        _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_ERROR, "%{public}@Attempt to pair an unknown resident user '%@', aborting", buf, 0x16u);
      }
    }
  }
  else
  {
    uint64_t v22 = (void *)MEMORY[0x1D9452090]();
    uint64_t v23 = self;
    id v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      id v32 = v25;
      __int16 v33 = 2112;
      id v34 = v8;
      __int16 v35 = 2112;
      id v36 = v9;
      _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_ERROR, "%{public}@Aborting adding resident due to missing userName '%@' and publicKey '%@'", buf, 0x20u);
    }
  }
}

void __58__HMDHome__addResidentWithUsername_publicKey_destination___block_invoke(id *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (shouldLogPrivateInformation())
  {
    id v5 = [a1[4] userID];
  }
  else
  {
    id v5 = @"...";
    id v6 = @"...";
  }
  id v7 = (void *)MEMORY[0x1D9452090]();
  id v8 = WeakRetained;
  id v9 = HMFGetOSLogHandle();
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  if (v3)
  {
    if (v10)
    {
      int v11 = HMFGetLogIdentifier();
      int v15 = 138543874;
      __int16 v16 = v11;
      __int16 v17 = 2112;
      uint64_t v18 = v5;
      __int16 v19 = 2112;
      id v20 = v3;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to add resident user '%@' invitation with error: %@", (uint8_t *)&v15, 0x20u);
    }
  }
  else if (v10)
  {
    uint64_t v12 = HMFGetLogIdentifier();
    uint64_t v13 = [a1[5] identifier];
    int v14 = [v13 UUIDString];
    int v15 = 138543874;
    __int16 v16 = v12;
    __int16 v17 = 2112;
    uint64_t v18 = v5;
    __int16 v19 = 2112;
    id v20 = v14;
    _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_ERROR, "%{public}@Tracking adding resident user '%@' with accepted and pending invitation '%@'", (uint8_t *)&v15, 0x20u);
  }
}

- (void)_sendResidentInviteWithDestination:(id)a3
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v5 = v4;
  }
  else {
    id v5 = 0;
  }
  id v6 = v5;

  id v7 = (void *)MEMORY[0x1D9452090]();
  id v8 = self;
  id v9 = HMFGetOSLogHandle();
  BOOL v10 = v9;
  if (v6)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v11 = HMFGetLogIdentifier();
      uint64_t v12 = [v6 device];
      uint64_t v13 = [v12 remoteDestinationString];
      *(_DWORD *)buf = 138543618;
      long long v41 = v11;
      __int16 v42 = 2112;
      long long v43 = v13;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Adding user %@ as remote access point", buf, 0x16u);
    }
    int v14 = [(HMDHome *)v8 homeManager];
    id v36 = 0;
    id v37 = 0;
    id v35 = 0;
    char v15 = [v14 getOrCreateControllerPublicKey:&v37 controllerUsername:&v36 error:&v35];
    id v16 = v37;
    id v31 = v36;
    id v30 = v35;
    if (v15)
    {
      v38[0] = @"kHomeName";
      __int16 v17 = [(HMDHome *)v8 name];
      v39[0] = v17;
      v38[1] = @"kHomeUUID";
      uint64_t v18 = [(HMDHome *)v8 uuid];
      __int16 v19 = [v18 UUIDString];
      v39[1] = v19;
      v38[2] = @"kControllerPublicKey";
      id v20 = v16;
      if (!v16)
      {
        id v20 = [MEMORY[0x1E4F1CA98] null];
      }
      void v38[3] = @"kControllerPairingNameKey";
      v39[2] = v20;
      void v39[3] = v31;
      __int16 v29 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v39 forKeys:v38 count:4];
      if (!v16) {

      }
      uint64_t v21 = [MEMORY[0x1E4F65480] internalMessageWithName:@"kAddRemoteAccessRequestKey" destination:v4 messagePayload:v29];
      objc_initWeak((id *)buf, v8);
      v32[0] = MEMORY[0x1E4F143A8];
      v32[1] = 3221225472;
      void v32[2] = __46__HMDHome__sendResidentInviteWithDestination___block_invoke;
      v32[3] = &unk_1E6A17958;
      objc_copyWeak(&v34, (id *)buf);
      id v33 = v6;
      [v21 setResponseHandler:v32];
      uint64_t v22 = [v14 messageDispatcher];
      [v22 sendMessage:v21 completionHandler:0];

      objc_destroyWeak(&v34);
      objc_destroyWeak((id *)buf);
    }
    else
    {
      uint64_t v25 = (void *)MEMORY[0x1D9452090]();
      uint64_t v26 = v8;
      int v27 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        id v28 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        long long v41 = v28;
        _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_ERROR, "%{public}@Failed getting controller public key to add remote gateway", buf, 0xCu);
      }
    }
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = HMFGetLogIdentifier();
      id v24 = [(HMDHome *)v8 shortDescription];
      *(_DWORD *)buf = 138543874;
      long long v41 = v23;
      __int16 v42 = 2112;
      long long v43 = v24;
      __int16 v44 = 2112;
      id v45 = v4;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_ERROR, "%{public}@[%@] Invalid resident invite destination: %@", buf, 0x20u);
    }
  }
}

void __46__HMDHome__sendResidentInviteWithDestination___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v8 = WeakRetained;
  if (v5 || !v6)
  {
    BOOL v10 = (void *)MEMORY[0x1D9452090]();
    id v11 = v8;
    uint64_t v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = HMFGetLogIdentifier();
      int v14 = [*(id *)(a1 + 32) device];
      char v15 = [v14 remoteDestinationString];
      *(_DWORD *)buf = 138543874;
      uint64_t v21 = v13;
      __int16 v22 = 2112;
      uint64_t v23 = v15;
      __int16 v24 = 2112;
      id v25 = v5;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to receive controller info to auto add user %@ due to error: %@", buf, 0x20u);
    }
  }
  else if (WeakRetained)
  {
    id v9 = [WeakRetained workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __46__HMDHome__sendResidentInviteWithDestination___block_invoke_1619;
    block[3] = &unk_1E6A19668;
    id v17 = v6;
    uint64_t v18 = v8;
    id v19 = *(id *)(a1 + 32);
    dispatch_async(v9, block);
  }
}

void __46__HMDHome__sendResidentInviteWithDestination___block_invoke_1619(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "hmf_stringForKey:", @"kControllerPairingNameKey");
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  id v2 = objc_msgSend(*(id *)(a1 + 32), "hmf_dataForKey:", @"kControllerPublicKey");
  id v3 = *(void **)(a1 + 40);
  id v4 = [*(id *)(a1 + 48) device];
  id v5 = [v4 remoteDestinationString];
  [v3 _addResidentWithUsername:v6 publicKey:v2 destination:v5];
}

- (void)_configureUnconfiguredResident:(id)a3 desiredConfigState:(unint64_t)a4
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  uint64_t v7 = [v6 configurationState];
  if (v7 != a4)
  {
    uint64_t v8 = v7;
    __int16 v55 = self;
    id v56 = v6;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    id v9 = [(HMDHome *)self outgoingInvitations];
    uint64_t v10 = [v9 countByEnumeratingWithState:&v61 objects:v73 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v62;
      while (2)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v62 != v11) {
            objc_enumerationMutation(v9);
          }
          uint64_t v13 = [*(id *)(*((void *)&v61 + 1) + 8 * i) user];
          int v14 = [v13 userID];
          char v15 = [v56 userID];
          int v16 = [v14 isEqualToString:v15];

          if (v16)
          {
            id v32 = (void *)MEMORY[0x1D9452090]();
            id v33 = v55;
            id v34 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
            {
              id v35 = HMFGetLogIdentifier();
              id v36 = [v56 userID];
              *(_DWORD *)buf = 138543618;
              long long v68 = v35;
              __int16 v69 = 2112;
              long long v70 = v36;
              _os_log_impl(&dword_1D49D5000, v34, OS_LOG_TYPE_INFO, "%{public}@Already have a pending invitation for the resident user '%@', not setting up remote access", buf, 0x16u);
            }

            goto LABEL_36;
          }
        }
        uint64_t v10 = [v9 countByEnumeratingWithState:&v61 objects:v73 count:16];
        if (v10) {
          continue;
        }
        break;
      }
    }

    if (a4 != 2 || v8 != 1)
    {
      id v37 = (void *)MEMORY[0x1D9452090]();
      __int16 v38 = v55;
      id v39 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        uint64_t v40 = HMFGetLogIdentifier();
        long long v41 = [v56 displayName];
        *(_DWORD *)buf = 138543618;
        long long v68 = v40;
        __int16 v69 = 2112;
        long long v70 = v41;
        _os_log_impl(&dword_1D49D5000, v39, OS_LOG_TYPE_INFO, "%{public}@Cannot configure unconfigured resident %@ to desired state", buf, 0x16u);
      }
      goto LABEL_36;
    }
    id v17 = [v56 userID];
    uint64_t v18 = [(HMDHome *)v55 homeManager];
    id v19 = (void *)MEMORY[0x1D9452090]();
    id v20 = v55;
    uint64_t v21 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      __int16 v22 = HMFGetLogIdentifier();
      uint64_t v23 = [v56 displayName];
      *(_DWORD *)buf = 138543874;
      long long v68 = v22;
      __int16 v69 = 2112;
      long long v70 = v17;
      __int16 v71 = 2112;
      long long v72 = v23;
      _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@Configuring unconfigured resident %@/%@ for remote access", buf, 0x20u);
    }
    __int16 v24 = [(HMDHome *)v20 hapAccessoryUniqueIdentifiers];
    id v25 = [v24 allObjects];

    if ([v25 count])
    {
      uint64_t v26 = [(HMDHome *)v20 pendingResponsesForRemoteAccessSetup];
      int v27 = [v26 containsObject:v17];

      if (!v27)
      {
        long long v43 = [v18 uuid];
        __int16 v44 = +[HMDMessageDispatcher destinationWithTarget:v43 userID:0 destination:v17 multicast:0];

        if (v44)
        {
          id v45 = [(HMDHome *)v20 pendingResponsesForRemoteAccessSetup];
          [v45 addObject:v17];

          v65[0] = @"kAccessoryIdentitiesKey";
          v65[1] = @"kHomeUUID";
          v66[0] = v25;
          uint64_t v46 = [(HMDHome *)v20 uuid];
          long long v47 = [v46 UUIDString];
          v66[1] = v47;
          long long v48 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v66 forKeys:v65 count:2];

          long long v49 = [MEMORY[0x1E4F65480] internalMessageWithName:@"kDoYouSeeUnpairedAccessoriesKey" destination:v44 messagePayload:v48];
          objc_initWeak((id *)buf, v20);
          v57[0] = MEMORY[0x1E4F143A8];
          v57[1] = 3221225472;
          v57[2] = __61__HMDHome__configureUnconfiguredResident_desiredConfigState___block_invoke;
          v57[3] = &unk_1E6A19048;
          objc_copyWeak(&v60, (id *)buf);
          id v58 = v17;
          id v59 = v44;
          [v49 setResponseHandler:v57];
          id v50 = [v18 messageDispatcher];
          [v50 sendMessage:v49 completionHandler:0];

          objc_destroyWeak(&v60);
          objc_destroyWeak((id *)buf);
        }
        else
        {
          BOOL v51 = (void *)MEMORY[0x1D9452090]();
          uint64_t v52 = v20;
          __int16 v53 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
          {
            id v54 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            long long v68 = v54;
            __int16 v69 = 2112;
            long long v70 = v17;
            _os_log_impl(&dword_1D49D5000, v53, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot configure unconfigured resident: could not create message destination for address: %@", buf, 0x16u);
          }
        }

        goto LABEL_35;
      }
      id v28 = (void *)MEMORY[0x1D9452090]();
      __int16 v29 = v20;
      id v30 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        id v31 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        long long v68 = v31;
        _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot configure unconfigured resident: there is already a pending request", buf, 0xCu);
      }
    }
    else
    {
      id v28 = (void *)MEMORY[0x1D9452090]();
      __int16 v29 = v20;
      id v30 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v42 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        long long v68 = v42;
        _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot configure unconfigured resident: no accessory identifiers found", buf, 0xCu);
      }
    }

LABEL_35:

LABEL_36:
    id v6 = v56;
    goto LABEL_37;
  }
  [(HMDHome *)self _updateConfigurationStateForResidentDevice:v6 desiredConfigState:a4 message:0];
LABEL_37:
}

void __61__HMDHome__configureUnconfiguredResident_desiredConfigState___block_invoke(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  uint64_t v8 = WeakRetained;
  if (WeakRetained)
  {
    id v9 = [WeakRetained workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __61__HMDHome__configureUnconfiguredResident_desiredConfigState___block_invoke_2;
    block[3] = &unk_1E6A190C0;
    void block[4] = v8;
    id v11 = a1[4];
    id v12 = v5;
    id v13 = v6;
    id v14 = a1[5];
    dispatch_async(v9, block);
  }
}

void __61__HMDHome__configureUnconfiguredResident_desiredConfigState___block_invoke_2(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v2 = [*(id *)(a1 + 32) pendingResponsesForRemoteAccessSetup];
  [v2 removeObject:*(void *)(a1 + 40)];

  if (*(void *)(a1 + 48) || (id v9 = *(void **)(a1 + 56)) == 0)
  {
    id v3 = (void *)MEMORY[0x1D9452090]();
    id v4 = *(id *)(a1 + 32);
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = HMFGetLogIdentifier();
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = *(void *)(a1 + 48);
      int v18 = 138543874;
      id v19 = v6;
      __int16 v20 = 2112;
      uint64_t v21 = v7;
      __int16 v22 = 2112;
      uint64_t v23 = v8;
      _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Remote peer %@ failed to look for accessories with error:%@", (uint8_t *)&v18, 0x20u);
    }
  }
  else
  {
    int v10 = objc_msgSend(v9, "hmf_BOOLForKey:", @"kAtHomeStateKey");
    uint64_t v11 = objc_msgSend(*(id *)(a1 + 56), "hmf_stringForKey:", @"kDeviceNameKey");
    id v12 = (void *)v11;
    if (v10 && v11)
    {
      [*(id *)(a1 + 32) _sendResidentInviteWithDestination:*(void *)(a1 + 64)];
    }
    else
    {
      id v13 = (void *)MEMORY[0x1D9452090]();
      id v14 = *(id *)(a1 + 32);
      char v15 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        int v16 = HMFGetLogIdentifier();
        uint64_t v17 = *(void *)(a1 + 40);
        int v18 = 138543618;
        id v19 = v16;
        __int16 v20 = 2112;
        uint64_t v21 = v17;
        _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@Remote peer %@ is not at home", (uint8_t *)&v18, 0x16u);
      }
    }
  }
}

- (void)_updateConfigurationStateForResidentDevice:(id)a3 desiredConfigState:(unint64_t)a4 message:(id)a5
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a5;
  int v10 = (void *)MEMORY[0x1D9452090]();
  uint64_t v11 = self;
  id v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v13 = HMFGetLogIdentifier();
    id v14 = [v8 displayName];
    int v15 = 138543874;
    int v16 = v13;
    __int16 v17 = 2112;
    int v18 = v14;
    __int16 v19 = 2048;
    unint64_t v20 = a4;
    _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Updated configuration state of resident %@ to %ld", (uint8_t *)&v15, 0x20u);
  }
  if ([v8 configurationState] != a4)
  {
    [v8 setConfigurationState:a4];
    [(HMDHome *)v11 _notifyClientsOfUpdatedResidentUser:v8];
  }
}

- (void)notifyNewRemotePeersFound:(BOOL)a3 remoteUsersRemoved:(id)a4 forceRemoteNotificationRegistration:(BOOL)a5
{
  id v8 = a4;
  id v9 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __92__HMDHome_notifyNewRemotePeersFound_remoteUsersRemoved_forceRemoteNotificationRegistration___block_invoke;
  block[3] = &unk_1E6A12C78;
  void block[4] = self;
  id v12 = v8;
  BOOL v13 = a3;
  BOOL v14 = a5;
  id v10 = v8;
  dispatch_async(v9, block);
}

void __92__HMDHome_notifyNewRemotePeersFound_remoteUsersRemoved_forceRemoteNotificationRegistration___block_invoke(uint64_t a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1E4F1CA80];
  id v3 = [*(id *)(a1 + 32) users];
  id v4 = [v2 setWithArray:v3];

  id v5 = [MEMORY[0x1E4F1CA80] setWithArray:*(void *)(a1 + 40)];
  [v4 intersectSet:v5];
  if ([v4 count])
  {
    uint64_t v40 = v5;
    long long v43 = [MEMORY[0x1E4F1CA48] array];
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v41 = v4;
    id obj = [v4 allObjects];
    uint64_t v6 = [obj countByEnumeratingWithState:&v44 objects:v54 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v45;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v45 != v8) {
            objc_enumerationMutation(obj);
          }
          id v10 = *(void **)(*((void *)&v44 + 1) + 8 * i);
          if (shouldLogPrivateInformation())
          {
            uint64_t v11 = [v10 userID];
          }
          else
          {
            uint64_t v11 = @"...";
            id v12 = @"...";
          }
          BOOL v13 = (void *)MEMORY[0x1D9452090]();
          id v14 = *(id *)(a1 + 32);
          int v15 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            int v16 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            BOOL v51 = v16;
            __int16 v52 = 2112;
            __int16 v53 = v11;
            _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@Removing remote user %@ since it has de-registered", buf, 0x16u);
          }
          __int16 v17 = [v10 userID];

          if (v17)
          {
            int v18 = [v10 userID];
            [v43 addObject:v18];
          }
          [*(id *)(a1 + 32) _removeOutgoingInvitationForUser:v10];
          [*(id *)(a1 + 32) _removeUserFromContainer:v10];
        }
        uint64_t v7 = [obj countByEnumeratingWithState:&v44 objects:v54 count:16];
      }
      while (v7);
    }

    __int16 v19 = [*(id *)(a1 + 32) usersPendingUserManagementOperations];
    id v4 = v41;
    unint64_t v20 = [v41 allObjects];
    [v19 removeObjectsInArray:v20];

    v48[0] = @"kUserIDsKey";
    uint64_t v21 = (void *)[v43 copy];
    v48[1] = @"kHomeUUID";
    v49[0] = v21;
    __int16 v22 = [*(id *)(a1 + 32) uuid];
    uint64_t v23 = [v22 UUIDString];
    v49[1] = v23;
    uint64_t v24 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v49 forKeys:v48 count:2];

    [*(id *)(a1 + 32) saveWithReason:@"kRemoteUsersDeregistered" information:v24 postSyncNotification:0];
    id v5 = v40;
  }
  id v25 = [*(id *)(a1 + 32) localCapabilitiesDataSource];
  int v26 = [v25 supportsRemoteAccess];

  if (v26)
  {
    int v27 = [*(id *)(a1 + 32) homeManager];
    if (*(unsigned char *)(a1 + 48))
    {
      if ([*(id *)(a1 + 32) reachableAccessoriesCount])
      {
        if ([*(id *)(a1 + 32) allowsRemoteAccess])
        {
          id v28 = [*(id *)(a1 + 32) currentUser];
          int v29 = [v28 isRemoteAccessAllowed];

          if (v29)
          {
            id v30 = (void *)MEMORY[0x1D9452090]();
            id v31 = *(id *)(a1 + 32);
            id v32 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
            {
              id v33 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543362;
              BOOL v51 = v33;
              _os_log_impl(&dword_1D49D5000, v32, OS_LOG_TYPE_INFO, "%{public}@We have potential remote gateways that can be auto setup, triggering detection", buf, 0xCu);
            }
            id v34 = [*(id *)(a1 + 32) uuid];
            [v27 accessoriesAreLocallyReachableOnTransientDevice:1 forHome:v34];
          }
        }
      }
    }
    if (([*(id *)(a1 + 32) remoteAccessIsEnabled] & 1) == 0
      && ([*(id *)(a1 + 32) isResidentSupported] & 1) == 0)
    {
      id v35 = (void *)MEMORY[0x1D9452090]();
      id v36 = *(id *)(a1 + 32);
      id v37 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        __int16 v38 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        BOOL v51 = v38;
        _os_log_impl(&dword_1D49D5000, v37, OS_LOG_TYPE_INFO, "%{public}@Home does not have remote access enabled, requesting electing a remote peer", buf, 0xCu);
      }
      id v39 = [*(id *)(a1 + 32) uuid];
      [v27 electRemoteAccessPeerForHome:v39];
    }
    -[HMDHome _subscribeForNotificationFromRemoteGateway:](*(void **)(a1 + 32), *(unsigned char *)(a1 + 49));
  }
}

- (void)_subscribeForNotificationFromRemoteGateway:(void *)a1
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v4 = [a1 workQueue];
    dispatch_assert_queue_V2(v4);

    if ((a2 & 1) != 0 || ![a1 registeredNotificationWithRemoteGateway])
    {
      id v9 = [a1 notificationRegistrations];
      uint64_t v10 = [v9 count];

      uint64_t v11 = (void *)MEMORY[0x1D9452090]();
      id v12 = a1;
      BOOL v13 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        id v14 = HMFGetLogIdentifier();
        int v15 = [v12 notificationRegistrations];
        int v16 = [v15 shortDescription];
        int v17 = 138543874;
        int v18 = v14;
        __int16 v19 = 2112;
        unint64_t v20 = v16;
        __int16 v21 = 2048;
        uint64_t v22 = v10;
        _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Modifying notification registrations with new remote gateway: %@/%lu", (uint8_t *)&v17, 0x20u);
      }
      [v12 _subscribeForHomeNotificationsFromRemoteGateway:v10 != 0];
      [v12 setRegisteredNotificationWithRemoteGateway:1];
    }
    else
    {
      id v5 = (void *)MEMORY[0x1D9452090]();
      id v6 = a1;
      uint64_t v7 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint64_t v8 = HMFGetLogIdentifier();
        int v17 = 138543362;
        int v18 = v8;
        _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Already registered for notification with remote gateway, skipping", (uint8_t *)&v17, 0xCu);
      }
    }
  }
}

- (void)_remoteAccessEnabled:(BOOL)a3
{
  id v4 = [(HMDHome *)self hapAccessories];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __32__HMDHome__remoteAccessEnabled___block_invoke;
  v5[3] = &__block_descriptor_33_e25_v16__0__HMDHAPAccessory_8l;
  BOOL v6 = a3;
  objc_msgSend(v4, "na_each:", v5);
}

uint64_t __32__HMDHome__remoteAccessEnabled___block_invoke(uint64_t a1, void *a2)
{
  return [a2 remoteAccessEnabled:*(unsigned __int8 *)(a1 + 32)];
}

- (void)remoteAccessEnabled:(BOOL)a3
{
  id v5 = [(HMDHome *)self workQueue];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __31__HMDHome_remoteAccessEnabled___block_invoke;
  v6[3] = &unk_1E6A19B58;
  void v6[4] = self;
  BOOL v7 = a3;
  dispatch_async(v5, v6);
}

uint64_t __31__HMDHome_remoteAccessEnabled___block_invoke(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(a1 + 40) == [*(id *)(a1 + 32) remoteAccessIsEnabled]) {
    goto LABEL_25;
  }
  id v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    BOOL v6 = HMFBooleanToString();
    *(_DWORD *)buf = 138543618;
    long long v43 = v5;
    __int16 v44 = 2112;
    long long v45 = v6;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@Setting remote access enabled to %@", buf, 0x16u);
  }
  [*(id *)(a1 + 32) setRemoteAccessIsEnabled:*(unsigned __int8 *)(a1 + 40)];
  if (!*(unsigned char *)(a1 + 40))
  {
    int v18 = [*(id *)(a1 + 32) WiFiAssertion];

    if (v18)
    {
      __int16 v19 = (void *)MEMORY[0x1D9452090]();
      id v20 = *(id *)(a1 + 32);
      __int16 v21 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        long long v43 = v22;
        _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Releasing WiFi assertion", buf, 0xCu);
      }
      uint64_t v23 = [*(id *)(a1 + 32) wifiManager];
      uint64_t v24 = [*(id *)(a1 + 32) WiFiAssertion];
      [v23 endActiveAssertion:v24];

      id v25 = [*(id *)(a1 + 32) wifiManager];
      [v25 releaseWoWAssertion];

      [*(id *)(a1 + 32) setWiFiAssertion:0];
    }
    goto LABEL_16;
  }
  if (isWatch())
  {
    BOOL v7 = [*(id *)(a1 + 32) homeManager];
    if ([v7 isActive])
    {
      uint64_t v8 = [*(id *)(a1 + 32) WiFiAssertion];

      if (v8) {
        goto LABEL_16;
      }
      id v9 = (void *)MEMORY[0x1D9452090]();
      id v10 = *(id *)(a1 + 32);
      uint64_t v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        id v12 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        long long v43 = v12;
        _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Taking WiFi assertion", buf, 0xCu);
      }
      BOOL v13 = [*(id *)(a1 + 32) wifiManager];
      id v14 = NSString;
      int v15 = [*(id *)(a1 + 32) shortDescription];
      int v16 = [v14 stringWithFormat:@"Remote Access for %@", v15];
      int v17 = [v13 beginActiveAssertionWithOptions:0 reason:v16];
      [*(id *)(a1 + 32) setWiFiAssertion:v17];

      BOOL v7 = [*(id *)(a1 + 32) wifiManager];
      [v7 takeWoWAssertion];
    }
  }
LABEL_16:
  if (([*(id *)(a1 + 32) isResidentSupported] & 1) == 0)
  {
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    int v26 = [*(id *)(a1 + 32) _residentUsers];
    uint64_t v27 = [v26 countByEnumeratingWithState:&v37 objects:v41 count:16];
    if (v27)
    {
      uint64_t v28 = v27;
      uint64_t v29 = *(void *)v38;
      do
      {
        for (uint64_t i = 0; i != v28; ++i)
        {
          if (*(void *)v38 != v29) {
            objc_enumerationMutation(v26);
          }
          [*(id *)(a1 + 32) _notifyClientsOfUpdatedResidentUser:*(void *)(*((void *)&v37 + 1) + 8 * i)];
        }
        uint64_t v28 = [v26 countByEnumeratingWithState:&v37 objects:v41 count:16];
      }
      while (v28);
    }
  }
LABEL_25:
  id v31 = (void *)MEMORY[0x1D9452090]();
  id v32 = *(id *)(a1 + 32);
  id v33 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
  {
    id v34 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    long long v43 = v34;
    _os_log_impl(&dword_1D49D5000, v33, OS_LOG_TYPE_INFO, "%{public}@Clearing history of all heartbeat queued messages to server", buf, 0xCu);
  }
  id v35 = [*(id *)(a1 + 32) heartbeatPingMessagesQueuedWithServer];
  [v35 removeAllObjects];

  return [*(id *)(a1 + 32) _remoteAccessEnabled:*(unsigned __int8 *)(a1 + 40)];
}

- (BOOL)remoteAccessIsEnabled
{
  LOBYTE(self) = self->_remoteAccessIsEnabled;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)setRemoteAccessEnabled:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_remoteAccessIsEnabled = a3;
  os_unfair_recursive_lock_unlock();
}

- (void)updateNetworkConnectivity:(BOOL)a3 companionReachable:(BOOL)a4
{
  BOOL v7 = [(HMDHome *)self workQueue];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = __56__HMDHome_updateNetworkConnectivity_companionReachable___block_invoke;
  v8[3] = &unk_1E6A0F918;
  void v8[4] = self;
  BOOL v9 = a3;
  BOOL v10 = a4;
  dispatch_async(v7, v8);
}

void __56__HMDHome_updateNetworkConnectivity_companionReachable___block_invoke(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v2 = [*(id *)(a1 + 32) isNetworkAvailable];
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 != v2) {
    [*(id *)(a1 + 32) setIsNetworkAvailable:v3 != 0];
  }
  id v4 = [*(id *)(a1 + 32) remoteEventRouterClientController];
  [v4 networkAvailabilityDidChange:*(unsigned __int8 *)(a1 + 40)];

  if (isWatch() && *(unsigned char *)(a1 + 41))
  {
    id v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = *(id *)(a1 + 32);
    BOOL v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = HMFGetLogIdentifier();
      int v13 = 138543362;
      id v14 = v8;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Companion is reachable, ignoring network connectivity update", (uint8_t *)&v13, 0xCu);
    }
  }
  else if ([*(id *)(a1 + 32) remoteAccessIsEnabled])
  {
    BOOL v9 = (void *)MEMORY[0x1D9452090]();
    id v10 = *(id *)(a1 + 32);
    uint64_t v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      id v12 = HMFGetLogIdentifier();
      int v13 = 138543362;
      id v14 = v12;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@We have no network connectivity, setting reachability state for all accessories to reflect their state", (uint8_t *)&v13, 0xCu);
    }
    [*(id *)(a1 + 32) _remoteAccessEnabled:*(unsigned __int8 *)(a1 + 40)];
  }
}

- (BOOL)_residentDeviceAvailable
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if ([(HMDHome *)self isResidentSupported])
  {
    LOBYTE(v3) = 1;
  }
  else
  {
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    id v4 = [(HMDHome *)self _residentUsers];
    uint64_t v3 = [v4 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v3)
    {
      uint64_t v5 = *(void *)v9;
      while (2)
      {
        for (uint64_t i = 0; i != v3; ++i)
        {
          if (*(void *)v9 != v5) {
            objc_enumerationMutation(v4);
          }
          if ([*(id *)(*((void *)&v8 + 1) + 8 * i) configurationState] == 2)
          {
            LOBYTE(v3) = 1;
            goto LABEL_13;
          }
        }
        uint64_t v3 = [v4 countByEnumeratingWithState:&v8 objects:v12 count:16];
        if (v3) {
          continue;
        }
        break;
      }
    }
LABEL_13:
  }
  return v3;
}

- (BOOL)isRemoteAccessDeviceReachable
{
  if (![(HMDHome *)self remoteAccessIsEnabled]) {
    return 0;
  }
  uint64_t v3 = [(HMDHome *)self primaryResident];
  BOOL v4 = ([v3 isReachable] & 1) != 0 || -[HMDHome isCompanionReachable](self, "isCompanionReachable");

  return v4;
}

- (void)handlePrimaryResidentChangeNotification:(id)a3
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  BOOL v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    long long v8 = HMFGetLogIdentifier();
    long long v9 = [v4 name];
    *(_DWORD *)buf = 138543618;
    int v16 = v8;
    __int16 v17 = 2112;
    int v18 = v9;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Received resident update notification: %@", buf, 0x16u);
  }
  long long v10 = [(HMDHome *)v6 workQueue];
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  void v12[2] = __51__HMDHome_handlePrimaryResidentChangeNotification___block_invoke;
  v12[3] = &unk_1E6A197C8;
  id v13 = v4;
  id v14 = v6;
  id v11 = v4;
  dispatch_async(v10, v12);
}

void __51__HMDHome_handlePrimaryResidentChangeNotification___block_invoke(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v2 = [*(id *)(a1 + 32) userInfo];
  uint64_t v3 = objc_msgSend(v2, "hmf_UUIDForKey:", @"HMDResidentDeviceHomeUUIDNotificationKey");

  id v4 = [*(id *)(a1 + 40) uuid];
  int v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", v3);

  if (v5)
  {
    if ([*(id *)(a1 + 40) isCurrentDeviceConfirmedPrimaryResident])
    {
      id v6 = (void *)MEMORY[0x1D9452090]();
      id v7 = *(id *)(a1 + 40);
      long long v8 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        long long v9 = HMFGetLogIdentifier();
        int v13 = 138543362;
        id v14 = v9;
        _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Resetting accessory browsers", (uint8_t *)&v13, 0xCu);
      }
      long long v10 = [*(id *)(a1 + 40) accessoryBrowser];
      [v10 restartBrowsers];

      [*(id *)(a1 + 40) _evaluateShouldRelaunchAndSetRelaunch];
      HMFUptime();
      id v12 = *(void **)(a1 + 40);
    }
    else
    {
      id v12 = *(void **)(a1 + 40);
      double v11 = 0.0;
    }
    [v12 setCurrentDeviceBecamePrimaryTime:v11];
    [*(id *)(a1 + 40) _registerCameraReachabilityEventNotificationsWithCompletionHandler:0];
    HMFUptime();
    objc_msgSend(*(id *)(a1 + 40), "setPrimaryResidentChangedTime:");
    [*(id *)(a1 + 40) _notifyThreadLayerOfResidentChange];
  }
}

- (void)handleRemoteDeviceBecameReachableNotification:(id)a3
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  int v5 = [v4 object];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v6 = v5;
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;

  if (v7)
  {
    long long v8 = [(HMDHome *)self primaryResident];
    id v9 = [v8 device];
    if (v9 != v7)
    {

LABEL_14:
      goto LABEL_15;
    }
    int v14 = -[HMDHome supportsUnifiedMediaNotificationsOnResidents](self);

    if (v14)
    {
      uint64_t v15 = (void *)MEMORY[0x1D9452090]();
      int v16 = self;
      __int16 v17 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        int v18 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        __int16 v21 = v18;
        __int16 v22 = 2112;
        id v23 = v4;
        _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Resubscribing for apple media accessory state on primary resident did become reachable notification %@ ", buf, 0x16u);
      }
      long long v8 = [(HMDHome *)v16 workQueue];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __57__HMDHome_handleRemoteDeviceBecameReachableNotification___block_invoke;
      block[3] = &unk_1E6A19B30;
      void block[4] = v16;
      dispatch_async(v8, block);
      goto LABEL_14;
    }
  }
  else
  {
    long long v10 = (void *)MEMORY[0x1D9452090]();
    double v11 = self;
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v13 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v21 = v13;
      __int16 v22 = 2112;
      id v23 = v4;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_ERROR, "%{public}@Expected notification (%@) to contain device for reachability ", buf, 0x16u);
    }
  }
LABEL_15:
}

void __57__HMDHome_handleRemoteDeviceBecameReachableNotification___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v3 = [v1 primaryResident];
  int v2 = [v3 device];
  -[HMDHome _updateDirectAppleMediaNotificationsOnResidentChange:previousResidentDevice:](v1, v2, 0);
}

- (void)_updateDirectAppleMediaNotificationsOnResidentChange:(void *)a3 previousResidentDevice:
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = [a1 workQueue];
    dispatch_assert_queue_V2(v7);

    long long v8 = [a1 notificationRegistrationsForAppleMediaAccessories];
    uint64_t v9 = [v8 count];

    if (v9)
    {
      long long v10 = [a1 appleMediaAccessories];
      double v11 = [v6 capabilities];
      if ([v11 supportsUnifiedMediaNotifications])
      {
      }
      else
      {
        int v16 = [v5 capabilities];
        int v17 = [v16 supportsUnifiedMediaNotifications];

        if (v17)
        {
          long long v40 = 0u;
          long long v41 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          id v33 = v10;
          id v18 = v10;
          uint64_t v19 = [v18 countByEnumeratingWithState:&v38 objects:v43 count:16];
          if (v19)
          {
            uint64_t v20 = v19;
            uint64_t v21 = *(void *)v39;
            do
            {
              for (uint64_t i = 0; i != v20; ++i)
              {
                if (*(void *)v39 != v21) {
                  objc_enumerationMutation(v18);
                }
                id v23 = *(void **)(*((void *)&v38 + 1) + 8 * i);
                uint64_t v24 = [v23 device];
                char v25 = [v24 isEqual:v5];

                if ((v25 & 1) == 0) {
                  -[HMDHome _enableMediaNotifications:directlyOnMediaAccessory:completion:](a1, 0, v23, 0);
                }
              }
              uint64_t v20 = [v18 countByEnumeratingWithState:&v38 objects:v43 count:16];
            }
            while (v20);
          }

          long long v10 = v33;
          goto LABEL_29;
        }
      }
      id v26 = [v6 capabilities];
      if ([v26 supportsUnifiedMediaNotifications])
      {
        uint64_t v27 = [v5 capabilities];
        char v28 = [v27 supportsUnifiedMediaNotifications];

        if (v28)
        {
LABEL_29:
          [a1 _refreshMediaProfilesOnHomeNotificationEnable];

          goto LABEL_30;
        }
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        id v26 = v10;
        uint64_t v29 = [v26 countByEnumeratingWithState:&v34 objects:v42 count:16];
        if (v29)
        {
          uint64_t v30 = v29;
          uint64_t v31 = *(void *)v35;
          do
          {
            for (uint64_t j = 0; j != v30; ++j)
            {
              if (*(void *)v35 != v31) {
                objc_enumerationMutation(v26);
              }
              -[HMDHome _enableMediaNotifications:directlyOnMediaAccessory:completion:](a1, 1, *(void **)(*((void *)&v34 + 1) + 8 * j), 0);
            }
            uint64_t v30 = [v26 countByEnumeratingWithState:&v34 objects:v42 count:16];
          }
          while (v30);
        }
      }

      goto LABEL_29;
    }
    id v12 = (void *)MEMORY[0x1D9452090]();
    id v13 = a1;
    int v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v45 = v15;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Skipping updated apple media notification registrations for remote devices because there are no clients registered.", buf, 0xCu);
    }
  }
LABEL_30:
}

- (void)handleDeviceCapabilitiesUpdated:(id)a3
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    long long v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    uint64_t v20 = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Received notification to handle device capabilities update", buf, 0xCu);
  }
  uint64_t v9 = [v4 object];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    long long v10 = v9;
  }
  else {
    long long v10 = 0;
  }
  id v11 = v10;

  id v12 = [(HMDHome *)v6 workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __43__HMDHome_handleDeviceCapabilitiesUpdated___block_invoke;
  block[3] = &unk_1E6A19668;
  id v16 = v4;
  int v17 = v6;
  id v18 = v11;
  id v13 = v11;
  id v14 = v4;
  dispatch_async(v12, block);
}

void __43__HMDHome_handleDeviceCapabilitiesUpdated___block_invoke(id *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v2 = [a1[4] userInfo];
  id v3 = [v2 objectForKeyedSubscript:@"HMDDeviceCapabilitiesUpdatedDifferingFieldsNotificationKey"];

  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v4 = v3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v15;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v4);
        }
        if (objc_msgSend(*(id *)(*((void *)&v14 + 1) + 8 * v8), "isEqualToString:", @"supportsCameraRecordingReachabilityNotifications", (void)v14))objc_msgSend(a1[5], "_registerCameraReachabilityEventNotificationsWithCompletionHandler:", 0); {
        ++v8;
        }
      }
      while (v6 != v8);
      uint64_t v6 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v6);
  }

  uint64_t v9 = [a1[5] primaryResident];
  long long v10 = [v9 device];

  id v11 = [v10 capabilities];
  id v12 = v11;
  if (v11 == a1[6])
  {
    int v13 = [v4 containsObject:@"supportsUnifiedMediaNotifications"];

    if (v13 && [a1[6] supportsUnifiedMediaNotifications]) {
      -[HMDHome _updateDirectAppleMediaNotificationsOnResidentChange:previousResidentDevice:](a1[5], v10, 0);
    }
  }
  else
  {
  }
}

- (void)_handleResidentChange
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  [(HMDHome *)self setMigratingAfterResidentChange:0];
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  uint64_t v21 = self;
  id v3 = [(HMDHome *)self triggers];
  uint64_t v4 = [v3 countByEnumeratingWithState:&v28 objects:v34 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v29;
    uint64_t v6 = MEMORY[0x1E4F143A8];
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v29 != v5) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v28 + 1) + 8 * i);
        objc_initWeak(location, v8);
        v26[0] = v6;
        v26[1] = 3221225472;
        void v26[2] = __32__HMDHome__handleResidentChange__block_invoke;
        v26[3] = &unk_1E6A18528;
        objc_copyWeak(&v27, location);
        [v8 activateAfterResidentChangeWithCompletion:v26];
        objc_destroyWeak(&v27);
        objc_destroyWeak(location);
      }
      uint64_t v4 = [v3 countByEnumeratingWithState:&v28 objects:v34 count:16];
    }
    while (v4);
  }

  if ([(HMDHome *)v21 isOwnerUser]
    && ![(HMDHome *)v21 isResidentSupported]
    && !isWatch())
  {
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v9 = [(HMDHome *)v21 users];
    uint64_t v10 = [v9 countByEnumeratingWithState:&v22 objects:v33 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v23;
      do
      {
        for (uint64_t j = 0; j != v10; ++j)
        {
          if (*(void *)v23 != v11) {
            objc_enumerationMutation(v9);
          }
          int v13 = *(void **)(*((void *)&v22 + 1) + 8 * j);
          if ([v13 isAdministrator]
            && [v13 updateAdministrator:0])
          {
            [(HMDHome *)v21 saveWithReason:@"migration" postSyncNotification:0];
          }
        }
        uint64_t v10 = [v9 countByEnumeratingWithState:&v22 objects:v33 count:16];
      }
      while (v10);
    }
  }
  long long v14 = (void *)MEMORY[0x1D9452090]();
  long long v15 = v21;
  long long v16 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    long long v17 = HMFGetLogIdentifier();
    LODWORD(location[0]) = 138543362;
    *(id *)((char *)location + 4) = v17;
    _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, "%{public}@Calling presence feeder to notify the presence status to the new resident", (uint8_t *)location, 0xCu);
  }
  id v18 = [(HMDHome *)v15 presenceMonitor];
  [v18 residentChanged];

  uint64_t v19 = [(HMDHome *)v15 presenceFeeder];
  [v19 residentChanged];

  uint64_t v20 = [(HMDHome *)v15 periodicReader];
  [v20 residentUpdated];

  [(HMDHome *)v15 _evaluateNetworkProtectionAndRouterManagement];
}

void __32__HMDHome__handleResidentChange__block_invoke(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = WeakRetained;
    uint64_t v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = HMFGetLogIdentifier();
      int v9 = 138543618;
      uint64_t v10 = v8;
      __int16 v11 = 2112;
      id v12 = v3;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Activating trigger after resident change finished with error (%@)", (uint8_t *)&v9, 0x16u);
    }
  }
}

- (void)migrateAfterResidentChange
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = (void *)MEMORY[0x1D9452090](self, a2);
  uint64_t v4 = self;
  uint64_t v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    long long v15 = v6;
    _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@migrateAfterResidentChange", buf, 0xCu);
  }
  if ([(HMDHome *)v4 isMigratingAfterResidentChange])
  {
    uint64_t v7 = (void *)MEMORY[0x1D9452090]();
    uint64_t v8 = v4;
    int v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v15 = v10;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Migration after resident change is already running", buf, 0xCu);
    }
  }
  else
  {
    [(HMDHome *)v4 setMigratingAfterResidentChange:1];
    objc_initWeak((id *)buf, v4);
    __int16 v11 = [(HMDHome *)v4 backingStore];
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    void v12[2] = __37__HMDHome_migrateAfterResidentChange__block_invoke;
    v12[3] = &unk_1E6A18528;
    objc_copyWeak(&v13, (id *)buf);
    [v11 submitBlock:v12];

    objc_destroyWeak(&v13);
    objc_destroyWeak((id *)buf);
  }
}

void __37__HMDHome_migrateAfterResidentChange__block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleResidentChange];
}

- (void)removeResidentCapableDevice:(id)a3
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([(HMDHome *)self isOwnerUser])
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    uint64_t v5 = [(HMDHome *)self residentDeviceManager];
    id v6 = [v5 residentDevices];

    uint64_t v7 = [v6 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v21;
      while (2)
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v21 != v9) {
            objc_enumerationMutation(v6);
          }
          __int16 v11 = *(void **)(*((void *)&v20 + 1) + 8 * i);
          id v12 = [v11 device];
          int v13 = [v12 isEqual:v4];

          if (v13)
          {
            uint64_t v19 = [(HMDHome *)self residentDeviceManager];
            [v19 removeResidentDevice:v11];

            goto LABEL_16;
          }
        }
        uint64_t v8 = [v6 countByEnumeratingWithState:&v20 objects:v24 count:16];
        if (v8) {
          continue;
        }
        break;
      }
    }

    if ([v4 isCurrentDevice])
    {
      long long v14 = [(HMDHome *)self notificationRegistry];
      [v14 clearAllRegistrations];
    }
  }
  else
  {
    long long v15 = (void *)MEMORY[0x1D9452090]();
    uint64_t v16 = self;
    long long v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      id v18 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v26 = v18;
      __int16 v27 = 2112;
      id v28 = v4;
      _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_ERROR, "%{public}@Attempting to remove resident on non-owner home -- device: %@", buf, 0x16u);
    }
  }
LABEL_16:
}

- (void)addResidentCapableDevice:(id)a3
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([(HMDHome *)self isOwnerUser])
  {
    uint64_t v5 = [v4 capabilities];
    int v6 = [v5 isResidentCapable];

    if (v6)
    {
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      uint64_t v7 = [(HMDHome *)self residentDeviceManager];
      uint64_t v8 = [v7 residentDevices];

      uint64_t v9 = [v8 countByEnumeratingWithState:&v30 objects:v38 count:16];
      if (v9)
      {
        uint64_t v10 = v9;
        uint64_t v11 = *(void *)v31;
        while (2)
        {
          for (uint64_t i = 0; i != v10; ++i)
          {
            if (*(void *)v31 != v11) {
              objc_enumerationMutation(v8);
            }
            int v13 = *(void **)(*((void *)&v30 + 1) + 8 * i);
            long long v14 = [v13 device];
            int v15 = [v14 isEqual:v4];

            if (v15)
            {
              id v26 = (void *)MEMORY[0x1D9452090]();
              __int16 v27 = self;
              id v28 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v29 = HMFGetLogIdentifier();
                *(_DWORD *)buf = 138543618;
                uint64_t v35 = v29;
                __int16 v36 = 2112;
                long long v37 = v13;
                _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_DEBUG, "%{public}@Resident device already exists, refraining from creating a new transaction: %@", buf, 0x16u);
              }
              goto LABEL_17;
            }
          }
          uint64_t v10 = [v8 countByEnumeratingWithState:&v30 objects:v38 count:16];
          if (v10) {
            continue;
          }
          break;
        }
      }

      uint64_t v16 = [(HMDHome *)self uuid];
      long long v17 = [v4 identifier];
      uint64_t v8 = +[HMDResidentDevice deriveUUIDFromHomeUUID:v16 deviceUUID:v17];

      id v18 = [HMDResidentDeviceModel alloc];
      uint64_t v19 = [(HMDHome *)self uuid];
      long long v20 = [(HMDBackingStoreModelObject *)v18 initWithObjectChangeType:1 uuid:v8 parentUUID:v19];

      [(HMDResidentDeviceModel *)v20 setEnabled:MEMORY[0x1E4F1CC38]];
      long long v21 = [v4 identifier];
      long long v22 = [v21 UUIDString];
      [(HMDResidentDeviceModel *)v20 setDeviceUUID:v22];

      if ([v4 isCurrentDevice]) {
        [(HMDResidentDeviceModel *)v20 setDevice:v4];
      }
      long long v23 = [(HMDHome *)self backingStore];
      long long v24 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      long long v25 = [v23 transaction:@"addResidentCapableDevice" options:v24];

      [v25 add:v20 withMessage:0];
      [v25 run];

LABEL_17:
    }
  }
}

- (NSArray)residentEnabledDevices
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = [MEMORY[0x1E4F1CA48] array];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v4 = [(HMDHome *)self residentDeviceManager];
  uint64_t v5 = [v4 residentDevices];

  uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        if ([v10 isEnabled])
        {
          uint64_t v11 = [v10 device];
          [v3 addObject:v11];
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v7);
  }

  return (NSArray *)v3;
}

- (NSArray)residentCapableDevices
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = [MEMORY[0x1E4F1CA48] array];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v4 = [(HMDHome *)self residentDeviceManager];
  uint64_t v5 = [v4 residentDevices];

  uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = [*(id *)(*((void *)&v12 + 1) + 8 * i) device];
        [v3 addObject:v10];
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v7);
  }

  return (NSArray *)v3;
}

- (id)preferredDevice
{
  id v3 = [(HMDHome *)self homeManager];
  id v4 = [v3 messageDispatcher];
  uint64_t v5 = [v4 residentCommunicationHandlerForHome:self];

  uint64_t v6 = [v5 preferredDevice];

  return v6;
}

- (BOOL)shouldEnableResidentFirstAccessoryCommunication
{
  int v2 = [(HMDHome *)self residentEnabledDevices];
  char v3 = objc_msgSend(v2, "na_any:", &__block_literal_global_1605);

  return v3;
}

uint64_t __58__HMDHome_shouldEnableResidentFirstAccessoryCommunication__block_invoke(uint64_t a1, void *a2)
{
  int v2 = [a2 capabilities];
  uint64_t v3 = [v2 supportsResidentFirstAccessoryCommunication];

  return v3;
}

- (void)_updateResidentFirstAccessoryCommunicationEnabled
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  BOOL v3 = [(HMDHome *)self shouldEnableResidentFirstAccessoryCommunication];
  if (v3 != [(HMDHome *)self isResidentFirstAccessoryCommunicationEnabled])
  {
    id v4 = (void *)MEMORY[0x1D9452090]();
    uint64_t v5 = self;
    uint64_t v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = HMFGetLogIdentifier();
      [(HMDHome *)v5 isResidentFirstAccessoryCommunicationEnabled];
      uint64_t v8 = HMFBooleanToString();
      uint64_t v9 = HMFBooleanToString();
      int v10 = 138543874;
      uint64_t v11 = v7;
      __int16 v12 = 2112;
      long long v13 = v8;
      __int16 v14 = 2112;
      long long v15 = v9;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Updating isResidentFirstAccessoryCommunicationEnabled from %@ to %@", (uint8_t *)&v10, 0x20u);
    }
    [(HMDHome *)v5 setResidentFirstAccessoryCommunicationEnabled:v3];
    logAndPostNotification(@"HMDHomeIsResidentFirstAccessoryCommunicationEnabledDidChangeNotification", v5, 0);
  }
}

- (BOOL)doesHomeContainResident
{
  int v2 = [(HMDHome *)self residentDeviceManager];
  BOOL v3 = [v2 residentDevices];
  BOOL v4 = [v3 count] != 0;

  return v4;
}

uint64_t __37__HMDHome_areAllResidentsUnreachable__block_invoke(uint64_t a1, void *a2)
{
  return [a2 isReachable] ^ 1;
}

- (id)_hasConfirmedPrimaryResidentDevice
{
  int v2 = [(HMDHome *)self residentDeviceManager];
  BOOL v3 = [v2 confirmedPrimaryResidentDevice];

  return v3;
}

- (BOOL)hasResidentDevicesForPrimaryResidentChangeMonitor:(id)a3
{
  BOOL v3 = [(HMDHome *)self residentDeviceManager];
  BOOL v4 = [v3 residentDevices];
  BOOL v5 = [v4 count] != 0;

  return v5;
}

- (void)_handleCharacteristicEnableNotification:(id)a3
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  __int16 v71 = v3;
  if ([v3 isRemote] && (objc_msgSend(v3, "isSecureRemote") & 1) == 0)
  {
    int v10 = (void *)MEMORY[0x1D9452090]();
    uint64_t v11 = self;
    __int16 v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      long long v13 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v95 = v13;
      __int16 v96 = 2112;
      long long v97 = v71;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Message not supported: %@", buf, 0x16u);
    }
    __int16 v14 = [v71 responseHandler];

    if (v14)
    {
      long long v15 = [MEMORY[0x1E4F28C58] hmErrorWithCode:17];
      uint64_t v16 = [v71 responseHandler];
      ((void (**)(void, void *, void))v16)[2](v16, v15, 0);
    }
  }
  else
  {
    BOOL v4 = [v3 messagePayload];
    __int16 v69 = [v4 objectForKey:@"kNotificationEnablePayloadKey"];

    if (v69)
    {
      BOOL v5 = @"kNotificationEnablePayloadKey";
    }
    else
    {
      uint64_t v6 = [v71 messagePayload];
      uint64_t v7 = [v6 objectForKey:@"kNotificationDisablePayloadKey"];

      if (!v7)
      {
        id v59 = [v71 responseHandler];
        id v60 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
        ((void (**)(void, void *, void))v59)[2](v59, v60, 0);

        goto LABEL_49;
      }
      BOOL v5 = @"kNotificationDisablePayloadKey";
    }
    long long v70 = [v71 dictionaryForKey:v5];
    uint64_t v8 = [v71 clientIdentifier];

    if (v8)
    {
      uint64_t v9 = [v71 clientIdentifier];
      uint64_t v67 = [@"com.apple.HomeKit.client." stringByAppendingString:v9];
    }
    else
    {
      uint64_t v67 = @"com.apple.HomeKitDaemon";
      uint64_t v17 = @"com.apple.HomeKitDaemon";
    }
    dispatch_group_t group = dispatch_group_create();
    v91[0] = 0;
    v91[1] = v91;
    v91[2] = 0x3032000000;
    v91[3] = __Block_byref_object_copy__10691;
    v91[4] = __Block_byref_object_dispose__10692;
    id v92 = 0;
    long long v64 = [MEMORY[0x1E4F28E10] strongToStrongObjectsMapTable];
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    uint64_t v18 = [v70 allKeys];
    uint64_t v19 = [v18 countByEnumeratingWithState:&v87 objects:v106 count:16];
    if (v19)
    {
      uint64_t v72 = *(void *)v88;
      long long v21 = @"disable";
      if (v69) {
        long long v21 = @"enable";
      }
      long long v63 = v21;
      *(void *)&long long v20 = 138544642;
      long long v61 = v20;
      id obj = v18;
      do
      {
        uint64_t v74 = v19;
        for (uint64_t i = 0; i != v74; ++i)
        {
          if (*(void *)v88 != v72) {
            objc_enumerationMutation(obj);
          }
          long long v23 = *(void **)(*((void *)&v87 + 1) + 8 * i);
          long long v24 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v23];
          long long v25 = [(HMDHome *)self accessoryWithUUID:v24];

          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v26 = v25;
          }
          else {
            id v26 = 0;
          }
          id v27 = v26;

          if (v27)
          {
            id v28 = objc_msgSend(v70, "hmf_arrayForKey:", v23);
            if ([v28 count])
            {
              [v64 setObject:v28 forKey:v27];
            }
            else
            {
              __int16 v36 = (void *)MEMORY[0x1D9452090]();
              long long v37 = self;
              HMFGetOSLogHandle();
              long long v38 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
              {
                long long v62 = v36;
                HMFGetLogIdentifier();
                id v65 = (id)objc_claimAutoreleasedReturnValue();
                uint64_t v39 = [(HMDHome *)v37 name];
                long long v40 = [(HMDHome *)v37 uuid];
                id v41 = [v40 UUIDString];
                __int16 v42 = [v27 name];
                *(_DWORD *)buf = v61;
                id v95 = v65;
                __int16 v96 = 2112;
                long long v97 = v39;
                __int16 v98 = 2112;
                id v99 = v41;
                __int16 v100 = 2112;
                long long v101 = v63;
                __int16 v102 = 2112;
                long long v103 = v42;
                __int16 v104 = 2112;
                uint64_t v105 = v23;
                _os_log_impl(&dword_1D49D5000, v38, OS_LOG_TYPE_INFO, "%{public}@%@/%@: Received notification %@ for zero characteristics on accessory %@/%@", buf, 0x3Eu);

                __int16 v36 = v62;
              }
            }
          }
          else
          {
            uint64_t v29 = (void *)MEMORY[0x1D9452090]();
            long long v30 = self;
            HMFGetOSLogHandle();
            long long v31 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              id v32 = (id)objc_claimAutoreleasedReturnValue();
              long long v33 = [(HMDHome *)v30 name];
              long long v34 = [(HMDHome *)v30 uuid];
              uint64_t v35 = [v34 UUIDString];
              *(_DWORD *)buf = 138544386;
              id v95 = v32;
              __int16 v96 = 2112;
              long long v97 = v33;
              __int16 v98 = 2112;
              id v99 = v35;
              __int16 v100 = 2112;
              long long v101 = v63;
              __int16 v102 = 2112;
              long long v103 = v23;
              _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_INFO, "%{public}@%@/%@: Received notification %@ for different accessory: %@", buf, 0x34u);
            }
          }
        }
        uint64_t v18 = obj;
        uint64_t v19 = [obj countByEnumeratingWithState:&v87 objects:v106 count:16];
      }
      while (v19);
    }

    uint64_t v43 = [v64 count];
    if (v43)
    {
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      id v44 = v64;
      uint64_t v45 = [v44 countByEnumeratingWithState:&v83 objects:v93 count:16];
      if (v45)
      {
        uint64_t v46 = 0;
        uint64_t v47 = *(void *)v84;
        uint64_t v73 = v43 - 1;
        do
        {
          uint64_t v48 = 0;
          uint64_t v49 = v73 - v46;
          uint64_t v75 = v46 + v45;
          do
          {
            if (*(void *)v84 != v47) {
              objc_enumerationMutation(v44);
            }
            id v50 = *(void **)(*((void *)&v83 + 1) + 8 * v48);
            dispatch_group_enter(group);
            BOOL v51 = (void *)MEMORY[0x1E4F65480];
            v80[0] = MEMORY[0x1E4F143A8];
            v80[1] = 3221225472;
            v80[2] = __51__HMDHome__handleCharacteristicEnableNotification___block_invoke;
            v80[3] = &unk_1E6A15A48;
            id v82 = v91;
            id v81 = group;
            __int16 v52 = [v51 messageWithMessage:v71 messagePayload:0 responseHandler:v80];
            __int16 v53 = (void *)[v52 mutableCopy];

            if (v49 != v48)
            {
              id v54 = [MEMORY[0x1E4F29128] UUID];
              [v53 setIdentifier:v54];
            }
            uint64_t v55 = objc_msgSend(v44, "objectForKey:", v50, v61);
            [v50 enableNotification:v69 != 0 forCharacteristicIDs:v55 message:v53 clientIdentifier:v67];

            ++v48;
          }
          while (v45 != v48);
          uint64_t v45 = [v44 countByEnumeratingWithState:&v83 objects:v93 count:16];
          uint64_t v46 = v75;
        }
        while (v45);
      }

      id v56 = [(HMDHome *)self workQueue];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __51__HMDHome__handleCharacteristicEnableNotification___block_invoke_2;
      block[3] = &unk_1E6A18690;
      id v78 = v71;
      id v79 = v91;
      dispatch_group_notify(group, v56, block);

      long long v57 = (void (**)(void, void, void))v78;
    }
    else
    {
      long long v57 = [v71 responseHandler];
      id v58 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
      ((void (**)(void, void *, void))v57)[2](v57, v58, 0);
    }
    _Block_object_dispose(v91, 8);
  }
LABEL_49:
}

void __51__HMDHome__handleCharacteristicEnableNotification___block_invoke(uint64_t a1, void *a2)
{
  id v7 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v6 = *(void *)(v4 + 40);
  BOOL v5 = (id *)(v4 + 40);
  if (!v6) {
    objc_storeStrong(v5, a2);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __51__HMDHome__handleCharacteristicEnableNotification___block_invoke_2(uint64_t a1)
{
  int v2 = [*(id *)(a1 + 32) responseHandler];

  if (v2)
  {
    id v3 = [*(id *)(a1 + 32) responseHandler];
    (*((void (**)(id, void, void))v3 + 2))(v3, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), 0);
  }
}

- (void)_handlePendingResponsesTimerFired:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v4 = self;
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  BOOL v5 = [(HMDHome *)self pendingResponses];
  uint64_t v6 = [v5 allValues];
  id v7 = (void *)[v6 copy];

  BOOL v8 = v3;
  id obj = v7;
  uint64_t v48 = [v7 countByEnumeratingWithState:&v49 objects:v59 count:16];
  if (v48)
  {
    uint64_t v47 = *(void *)v50;
    *(void *)&long long v9 = 138543618;
    long long v43 = v9;
    uint64_t v46 = v4;
    do
    {
      for (uint64_t i = 0; i != v48; ++i)
      {
        if (*(void *)v50 != v47) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void **)(*((void *)&v49 + 1) + 8 * i);
        if (!objc_msgSend(v11, "pendingResponseCount", v43))
        {
          __int16 v12 = [v11 allResponses];
          uint64_t v13 = [v12 count];

          if (!v13)
          {
            long long v21 = (void *)MEMORY[0x1D9452090]();
            long long v22 = v4;
            long long v23 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
            {
              long long v24 = HMFGetLogIdentifier();
              long long v25 = [v11 originalRequestIdentifier];
              *(_DWORD *)buf = v43;
              id v54 = v24;
              __int16 v55 = 2112;
              id v56 = v25;
              _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_DEBUG, "%{public}@Removing pending response for identifier %@ - all responses received", buf, 0x16u);
            }
            uint64_t v17 = [(HMDHome *)v22 pendingResponses];
            long long v20 = [v11 originalRequestIdentifier];
            [v17 removeObjectForKey:v20];
            goto LABEL_15;
          }
        }
        __int16 v14 = [v11 requestMessage];
        int v15 = [v14 BOOLForKey:@"kMultiPartResponseKey"];

        if (v15)
        {
          uint64_t v16 = [v11 retrieveAndClearLatestResponses];
          uint64_t v17 = objc_msgSend(v16, "na_map:", &__block_literal_global_1590);

          if ([v17 count])
          {
            uint64_t v18 = [v11 requestMessage];
            uint64_t v19 = [v11 originalRequestIdentifier];
            [(HMDHome *)v4 _handleSendingNotificationsForRequest:v18 requestIdentifier:v19 supportsMultiPartResponse:1 characteristicUpdates:v17 completion:0];
          }
          long long v20 = [(HMDHome *)v4 pendingResponsesTimer];
          [v20 resume];
LABEL_15:
        }
        if (!v8)
        {
          if ([v11 pendingResponseCount])
          {
            double Current = CFAbsoluteTimeGetCurrent();
            [v11 creationTime];
            if (Current - v27 <= *(double *)&pendingResponseMaxPeriod) {
              continue;
            }
          }
        }
        id v28 = [v11 requestMessage];
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v29 = v28;
        }
        else {
          uint64_t v29 = 0;
        }
        id v30 = v29;

        long long v31 = [v11 retrieveAndClearAllResponses];
        if (v30)
        {
          id v32 = [v30 identifier];
          long long v33 = [v30 responseHandler];
          [(HMDHome *)v4 _notifyChangedCharacteristics:v31 identifier:v32 multiPartResponse:1 moreMessagesInMultipart:0 requestMessage:v30 withCompletionHandler:v33];
        }
        long long v34 = (void *)MEMORY[0x1D9452090]();
        uint64_t v35 = v4;
        __int16 v36 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        {
          long long v37 = HMFGetLogIdentifier();
          [v30 identifier];
          long long v38 = v45 = v34;
          [v11 originalRequestIdentifier];
          v40 = BOOL v39 = v8;
          *(_DWORD *)buf = 138543874;
          id v54 = v37;
          __int16 v55 = 2112;
          id v56 = v38;
          __int16 v57 = 2112;
          id v58 = v40;
          _os_log_impl(&dword_1D49D5000, v36, OS_LOG_TYPE_DEBUG, "%{public}@Removing pending response and notifying changes for message identifier: %@(%@)", buf, 0x20u);

          BOOL v8 = v39;
          long long v34 = v45;
        }
        id v41 = [(HMDHome *)v35 pendingResponses];
        __int16 v42 = [v11 originalRequestIdentifier];
        [v41 removeObjectForKey:v42];

        uint64_t v4 = v46;
      }
      uint64_t v48 = [obj countByEnumeratingWithState:&v49 objects:v59 count:16];
    }
    while (v48);
  }
}

HMDCharacteristicUpdateTuple *__45__HMDHome__handlePendingResponsesTimerFired___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  BOOL v3 = [v2 error];

  if (v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    BOOL v5 = [HMDCharacteristicUpdateTuple alloc];
    uint64_t v6 = [v2 request];
    id v7 = [v6 characteristic];
    BOOL v8 = [v2 value];
    uint64_t v4 = [(HMDCharacteristicUpdateTuple *)v5 initWithCharacteristic:v7 updatedValue:v8 isBroadcast:0];
  }
  return v4;
}

- (void)_handleSendingNotificationsForRequest:(id)a3 requestIdentifier:(id)a4 supportsMultiPartResponse:(BOOL)a5 characteristicUpdates:(id)a6 completion:(id)a7
{
  BOOL v9 = a5;
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v12 = a3;
  id v13 = a4;
  id v14 = a6;
  int v15 = (void (**)(id, void *))a7;
  uint64_t v16 = [v12 destination];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  id v18 = v17;

  if ([v12 isRemote]
    && ([v18 device],
        uint64_t v19 = objc_claimAutoreleasedReturnValue(),
        [v19 remoteDestinationString],
        long long v20 = objc_claimAutoreleasedReturnValue(),
        v20,
        v19,
        v20))
  {
    long long v21 = (void *)MEMORY[0x1D9452090]();
    long long v22 = self;
    long long v23 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      uint64_t v24 = HMFGetLogIdentifier();
      long long v37 = (void *)v24;
      uint64_t v25 = [v12 shortDescription];
      id v26 = "single";
      if (v9) {
        id v26 = "multi";
      }
      long long v34 = v26;
      uint64_t v35 = (void *)v25;
      double v27 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v14, "count"));
      __int16 v36 = [v18 device];
      [v36 remoteDestinationString];
      *(_DWORD *)buf = 138544898;
      uint64_t v39 = v24;
      __int16 v40 = 2112;
      id v41 = v35;
      __int16 v42 = 2080;
      long long v43 = v34;
      __int16 v44 = 2112;
      uint64_t v45 = v27;
      __int16 v46 = 2112;
      id v47 = v14;
      __int16 v48 = 2112;
      id v49 = v13;
      v51 = __int16 v50 = 2112;
      id v28 = (void *)v51;
      _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_INFO, "%{public}@Response notification for %@ (%s part) [%@] with chars: %@ with id: %@ to device: %@", buf, 0x48u);
    }
    uint64_t v29 = [MEMORY[0x1E4F29128] UUID];
    id v30 = [v29 UUIDString];
    long long v31 = [v18 device];
    id v32 = [v31 remoteDestinationString];
    [(HMDHome *)v22 _notifyUpdatedCharacteristic:v14 withRequestIdentifier:v13 notificationUpdateIdentifier:v30 toUserDeviceAddress:v32 completion:v15];
  }
  else if (v15)
  {
    long long v33 = [MEMORY[0x1E4F28C58] hmErrorWithCode:48];
    v15[2](v15, v33);
  }
}

- (void)_handleCharacteristicRead:(id)a3
{
  v50[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  BOOL v5 = [v4 messagePayload];
  uint64_t v6 = objc_msgSend(v5, "hmf_UUIDForKey:", @"kAccessoryUUID");

  id v7 = [(HMDHome *)self accessoryWithUUID:v6];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    BOOL v8 = v7;
  }
  else {
    BOOL v8 = 0;
  }
  id v9 = v8;

  if (!v9)
  {
    uint64_t v11 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    [v4 respondWithError:v11];
LABEL_17:

    goto LABEL_18;
  }
  if ([(HMDHome *)self isResidentFirstAccessoryCommunicationEnabled])
  {
    int v10 = [v4 messagePayload];
    uint64_t v11 = [v10 objectForKeyedSubscript:@"kServiceInstanceID"];

    id v12 = [v4 messagePayload];
    id v13 = [v12 objectForKeyedSubscript:@"kCharacteristicInstanceID"];

    id v14 = [v9 findService:v11];
    uint64_t v15 = [v14 findCharacteristic:v13];
    uint64_t v16 = (void *)v15;
    if (v15)
    {
      uint64_t v35 = v11;
      v50[0] = v15;
      uint64_t v17 = [MEMORY[0x1E4F1C978] arrayWithObjects:v50 count:1];
      id v36 = 0;
      BOOL v18 = [(HMDHome *)self _isReadRequestAllowForCharacteristics:v17 message:v4 error:&v36];
      id v19 = v36;

      if (v18)
      {
        id v34 = v19;
        id v32 = +[HMDCharacteristicRequest requestWithCharacteristic:v16];
        uint64_t v33 = [v4 source];
        long long v20 = (void *)MEMORY[0x1D9452090]();
        long long v21 = self;
        long long v22 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          long long v31 = HMFGetLogIdentifier();
          long long v23 = [v4 shortDescription];
          [v6 UUIDString];
          uint64_t v24 = v30 = v22;
          [v9 uniqueIdentifier];
          uint64_t v25 = v29 = v20;
          *(_DWORD *)buf = 138544642;
          uint64_t v39 = v31;
          __int16 v40 = 2112;
          id v41 = v23;
          __int16 v42 = 2112;
          long long v43 = v24;
          __int16 v44 = 2112;
          uint64_t v45 = v25;
          __int16 v46 = 2112;
          id v47 = v35;
          __int16 v48 = 2112;
          id v49 = v13;
          _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_INFO, "%{public}@Processing single characteristic read request: %@ (%@/%@/%@/%@) as a special case of multiple characteristic read requests", buf, 0x3Eu);

          long long v20 = v29;
          long long v22 = v30;
        }
        long long v37 = v32;
        id v26 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v37 count:1];
        double v27 = [(HMDHome *)v21 __readWriteResponseHandler:v4 unhandledRequests:0];
        [(HMDHome *)v21 _readCharacteristicValues:v26 requestMessage:v4 source:v33 withCompletionHandler:v27];

        id v19 = v34;
      }
      else
      {
        [v4 respondWithError:v19];
      }

      uint64_t v11 = v35;
    }
    else
    {
      id v28 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
      [v4 respondWithError:v28];
    }
    goto LABEL_17;
  }
  [v9 _handleCharacteristicRead:v4];
LABEL_18:
}

HMDCharacteristicRequest *__62__HMDHome__readRequestTuplesFromMessage_outUnhandledRequests___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return +[HMDCharacteristicRequest requestWithCharacteristic:a2];
}

uint64_t __178__HMDHome__handleFailedAccessories_requestMessage_source_pendingResponses_fastFailedAccessories_slowFailedAccessories_tmpErrorResponseTuples_waitGroup_failureWaitGroup_activity___block_invoke_1554(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 32) begin];
  if ([*(id *)(a1 + 40) count])
  {
    if (*(unsigned char *)(a1 + 104)) {
      [MEMORY[0x1E4F1CA48] array];
    }
    else {
    id v2 = [*(id *)(a1 + 48) allResponses];
    }
    [*(id *)(a1 + 32) begin];
    id v8 = *(id *)(a1 + 32);
    BOOL v3 = (void *)MEMORY[0x1D9452090]();
    id v4 = *(id *)(a1 + 56);
    HMFGetOSLogHandle();
    BOOL v5 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      int v10 = v6;
      _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Beginning bulk redispatch for slow read failed accessories", buf, 0xCu);
    }
    [*(id *)(a1 + 56) _redispatchReadForAccessories:*(void *)(a1 + 40) dispatchGroup:*(void *)(a1 + 64) requestMap:*(void *)(a1 + 72) requestMessage:*(void *)(a1 + 80) source:*(void *)(a1 + 96) responseTuples:v2 errorResponseTuples:*(void *)(a1 + 88)];
    __HMFActivityScopeLeave();

    [*(id *)(a1 + 40) removeAllObjects];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
  return [*(id *)(a1 + 32) end];
}

- (BOOL)_passReadRequestToCompanion:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 pendingResponses:(id)a6 remoteAccessories:(id)a7 withCompletionHandler:(id)a8
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v14 = a3;
  id v15 = a4;
  id v16 = a6;
  id v17 = a7;
  id v18 = a8;
  id v32 = v15;
  char v19 = [v15 BOOLForKey:@"kMultiPartResponseKey"];
  long long v31 = v14;
  if (isWatch() && [(HMDHome *)self remoteAccessIsEnabled])
  {
    char v29 = v19;
    unint64_t v30 = a5;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    id v20 = v14;
    uint64_t v21 = [v20 countByEnumeratingWithState:&v39 objects:v43 count:16];
    if (v21)
    {
      uint64_t v22 = *(void *)v40;
      do
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          if (*(void *)v40 != v22) {
            objc_enumerationMutation(v20);
          }
          uint64_t v24 = [v20 objectForKey:*(void *)(*((void *)&v39 + 1) + 8 * i)];
          uint64_t v25 = [v16 allResponses];
          +[HMDHome appendCharacteristicsToAccessoryList:v17 responseTuples:v25 forMultipleCharacteristicsRemoteRead:v24];
        }
        uint64_t v21 = [v20 countByEnumeratingWithState:&v39 objects:v43 count:16];
      }
      while (v21);
    }

    id v26 = [MEMORY[0x1E4F1CA48] array];
    objc_initWeak(&location, self);
    v33[0] = MEMORY[0x1E4F143A8];
    v33[1] = 3221225472;
    void v33[2] = __118__HMDHome__passReadRequestToCompanion_requestMessage_source_pendingResponses_remoteAccessories_withCompletionHandler___block_invoke;
    v33[3] = &unk_1E6A07118;
    objc_copyWeak(&v36, &location);
    id v34 = v32;
    char v37 = v29;
    id v35 = v18;
    [(HMDHome *)self _readCharacteristicValuesForAccessories:v17 readRequestMap:v20 responseTuples:v26 requestMessage:v34 source:v30 viaDevice:0 completionHandler:v33];

    objc_destroyWeak(&v36);
    objc_destroyWeak(&location);

    BOOL v27 = 1;
  }
  else
  {
    BOOL v27 = 0;
  }

  return v27;
}

void __118__HMDHome__passReadRequestToCompanion_requestMessage_source_pendingResponses_remoteAccessories_withCompletionHandler___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  BOOL v3 = [WeakRetained workQueue];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __118__HMDHome__passReadRequestToCompanion_requestMessage_source_pendingResponses_remoteAccessories_withCompletionHandler___block_invoke_2;
  v4[3] = &unk_1E6A16328;
  v4[4] = WeakRetained;
  id v5 = *(id *)(a1 + 32);
  char v7 = *(unsigned char *)(a1 + 56);
  id v6 = *(id *)(a1 + 40);
  dispatch_async(v3, v4);
}

void __118__HMDHome__passReadRequestToCompanion_requestMessage_source_pendingResponses_remoteAccessories_withCompletionHandler___block_invoke_2(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) identifier];
  [v2 _notifyChangedCharacteristics:0 identifier:v3 multiPartResponse:*(unsigned __int8 *)(a1 + 56) moreMessagesInMultipart:0 requestMessage:*(void *)(a1 + 40) withCompletionHandler:*(void *)(a1 + 48)];
}

- (void)readCharacteristicValues:(id)a3 source:(unint64_t)a4 sourceForLogging:(id)a5 qualityOfService:(int64_t)a6 withCompletionHandler:(id)a7
{
  id v13 = a3;
  id v14 = a5;
  id v15 = a7;
  id v16 = objc_alloc(MEMORY[0x1E4F653F0]);
  id v17 = NSString;
  id v18 = MEMORY[0x1D94505D0](self, a2);
  char v19 = [v17 stringWithFormat:@"%@, %s:%ld", v18, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/Home/HMDHome.m", 26179];
  id v32 = (id)[v16 initWithName:v19];

  id v20 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __99__HMDHome_readCharacteristicValues_source_sourceForLogging_qualityOfService_withCompletionHandler___block_invoke;
  block[3] = &unk_1E6A070F0;
  id v25 = v32;
  id v26 = self;
  id v27 = v14;
  id v28 = v13;
  int64_t v30 = a6;
  unint64_t v31 = a4;
  id v29 = v15;
  id v21 = v15;
  id v22 = v13;
  id v23 = v14;
  dispatch_async(v20, block);

  __HMFActivityScopeLeave();
}

void __99__HMDHome_readCharacteristicValues_source_sourceForLogging_qualityOfService_withCompletionHandler___block_invoke(uint64_t a1)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1E4F65480];
  uint64_t v3 = *(void *)(a1 + 72);
  id v4 = [MEMORY[0x1E4F65488] allMessageDestinations];
  char v19 = @"kMultiPartResponseKey";
  v20[0] = MEMORY[0x1E4F1CC28];
  id v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v20 forKeys:&v19 count:1];
  id v6 = [v2 messageWithName:@"kMultipleCharacteristicReadRequestKey" qualityOfService:v3 destination:v4 payload:v5];

  char v7 = (void *)MEMORY[0x1D9452090]();
  id v8 = *(id *)(a1 + 40);
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    int v10 = HMFGetLogIdentifier();
    uint64_t v11 = [v6 identifier];
    uint64_t v12 = *(void *)(a1 + 48);
    int v13 = 138543874;
    id v14 = v10;
    __int16 v15 = 2114;
    id v16 = v11;
    __int16 v17 = 2114;
    uint64_t v18 = v12;
    _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Issuing read requests with identifier %{public}@, Source: %{public}@", (uint8_t *)&v13, 0x20u);
  }
  [*(id *)(a1 + 40) _readCharacteristicValues:*(void *)(a1 + 56) requestMessage:v6 source:*(void *)(a1 + 80) withCompletionHandler:*(void *)(a1 + 64)];
}

- (void)readCharacteristicValues:(id)a3 source:(unint64_t)a4 qualityOfService:(int64_t)a5 withCompletionHandler:(id)a6
{
}

- (void)_redispatchReadForAccessories:(id)a3 dispatchGroup:(id)a4 requestMap:(id)a5 requestMessage:(id)a6 source:(unint64_t)a7 responseTuples:(id)a8 errorResponseTuples:(id)a9
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  id v75 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a8;
  id v19 = a9;
  id v20 = objc_alloc(MEMORY[0x1E4F653F0]);
  id v21 = NSString;
  id v22 = MEMORY[0x1D94505D0](self, a2);
  id v23 = [v21 stringWithFormat:@"%@, %s:%ld", v22, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/Home/HMDHome.m", 26070];
  uint64_t v24 = (void *)[v20 initWithName:v23];

  uint64_t v25 = [(HMDHome *)self primaryResident];
  id v82 = (void *)v25;
  if (v25)
  {
    id v26 = (void *)v25;
    id v80 = v18;
    id v81 = v15;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __123__HMDHome__redispatchReadForAccessories_dispatchGroup_requestMap_requestMessage_source_responseTuples_errorResponseTuples___block_invoke;
    aBlock[3] = &unk_1E6A06F88;
    id v74 = v16;
    id v78 = v16;
    id v99 = v78;
    id v72 = v19;
    id v100 = v19;
    unint64_t v103 = a7;
    id v73 = v17;
    id v89 = v17;
    id v101 = v89;
    __int16 v102 = self;
    long long v87 = (void (**)(void *, void *, void *))_Block_copy(aBlock);
    id v27 = [MEMORY[0x1E4F28E10] strongToStrongObjectsMapTable];
    long long v86 = self;
    id v79 = v24;
    long long v88 = v27;
    if ([v26 isCurrentDevice])
    {
      long long v96 = 0u;
      long long v97 = 0u;
      long long v94 = 0u;
      long long v95 = 0u;
      id v28 = v75;
      uint64_t v29 = [v28 countByEnumeratingWithState:&v94 objects:v112 count:16];
      if (v29)
      {
        uint64_t v30 = v29;
        uint64_t v31 = *(void *)v95;
        id v76 = v28;
        do
        {
          uint64_t v32 = 0;
          id obj = (id)v30;
          do
          {
            if (*(void *)v95 != v31) {
              objc_enumerationMutation(v28);
            }
            uint64_t v33 = *(void **)(*((void *)&v94 + 1) + 8 * v32);
            id v34 = [(HMDHome *)self homeManager];
            id v35 = [v34 residentMesh];
            id v36 = [v35 bestResidentDeviceForAccessory:v33];

            if (v36)
            {
              char v37 = [v27 objectForKey:v36];
              long long v38 = v37;
              if (v37)
              {
                id v39 = v37;
              }
              else
              {
                id v39 = [MEMORY[0x1E4F1CA48] array];
              }
              __int16 v50 = v39;

              [v50 addObject:v33];
              [v27 setObject:v50 forKey:v36];
            }
            else
            {
              long long v40 = (void *)MEMORY[0x1D9452090]();
              long long v41 = self;
              long long v42 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
              {
                long long v43 = HMFGetLogIdentifier();
                uint64_t v44 = [v33 uuid];
                [v44 UUIDString];
                uint64_t v45 = v77 = v40;
                [v33 uniqueIdentifier];
                v47 = uint64_t v46 = v31;
                *(_DWORD *)buf = 138543874;
                uint64_t v107 = v43;
                __int16 v108 = 2112;
                long long v109 = v45;
                __int16 v110 = 2112;
                id v111 = v47;
                _os_log_impl(&dword_1D49D5000, v42, OS_LOG_TYPE_INFO, "%{public}@Read bulk redispatching failing for %@/%@ (No Mesh Redirect)", buf, 0x20u);

                uint64_t v31 = v46;
                long long v40 = v77;

                id v27 = v88;
                id v28 = v76;
              }

              uint64_t v105 = v33;
              __int16 v48 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v105 count:1];
              id v49 = [MEMORY[0x1E4F28C58] hmErrorWithCode:4];
              v87[2](v87, v48, v49);

              __int16 v50 = [v33 uuid];
              uint64_t v30 = (uint64_t)obj;
              self = v86;
            }

            ++v32;
          }
          while (v30 != v32);
          uint64_t v30 = [v28 countByEnumeratingWithState:&v94 objects:v112 count:16];
        }
        while (v30);
      }
    }
    else
    {
      [v27 setObject:v75 forKey:v26];
    }
    int v54 = [v89 BOOLForKey:@"kMultiPartResponseKey"];
    long long v90 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    id obja = [v27 keyEnumerator];
    uint64_t v55 = [obja countByEnumeratingWithState:&v90 objects:v104 count:16];
    if (v55)
    {
      uint64_t v56 = v55;
      uint64_t v57 = *(void *)v91;
      if (v54) {
        id v58 = v89;
      }
      else {
        id v58 = 0;
      }
      do
      {
        for (uint64_t i = 0; i != v56; ++i)
        {
          if (*(void *)v91 != v57) {
            objc_enumerationMutation(obja);
          }
          uint64_t v60 = *(void **)(*((void *)&v90 + 1) + 8 * i);
          long long v61 = [v27 objectForKey:v60];
          long long v62 = [v89 remoteSourceDevice];
          long long v63 = [v60 device];
          int v64 = [v62 isEqual:v63];

          if (v64)
          {
            id v65 = (void *)MEMORY[0x1D9452090]();
            uint64_t v66 = self;
            uint64_t v67 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
            {
              long long v68 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543874;
              uint64_t v107 = v68;
              __int16 v108 = 2112;
              long long v109 = v61;
              __int16 v110 = 2112;
              id v111 = v89;
              _os_log_impl(&dword_1D49D5000, v67, OS_LOG_TYPE_ERROR, "%{public}@Skipping read bulk redispatching for accessories %@ (Same source device). Message: %@", buf, 0x20u);
            }
            __int16 v69 = [MEMORY[0x1E4F28C58] hmErrorWithCode:4];
            v87[2](v87, v61, v69);

            self = v86;
          }
          else if (v60 == v82)
          {
            [(HMDHome *)self _reallyRedispatchReadsToDevice:0 accessories:v61 dispatchGroup:v81 requestMap:v78 requestMessage:v58 source:a7 responseTuples:v80 activity:v79];
          }
          else
          {
            long long v70 = [v60 device];
            [(HMDHome *)self _reallyRedispatchReadsToDevice:v70 accessories:v61 dispatchGroup:v81 requestMap:v78 requestMessage:v58 source:a7 responseTuples:v80 activity:v79];
          }
          id v27 = v88;
        }
        uint64_t v56 = [obja countByEnumeratingWithState:&v90 objects:v104 count:16];
      }
      while (v56);
    }

    id v16 = v74;
    uint64_t v52 = v75;
    __int16 v53 = v80;
    id v15 = v81;
    id v19 = v72;
    id v17 = v73;
    uint64_t v24 = v79;
  }
  else
  {
    id v71 = v18;
    id v51 = v18;
    uint64_t v52 = v75;
    [(HMDHome *)self _reallyRedispatchReadsToDevice:0 accessories:v75 dispatchGroup:v15 requestMap:v16 requestMessage:v17 source:a7 responseTuples:v71 activity:v24];
    __int16 v53 = v51;
  }
}

void __123__HMDHome__redispatchReadForAccessories_dispatchGroup_requestMap_requestMessage_source_responseTuples_errorResponseTuples___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  id obj = v5;
  uint64_t v30 = [v5 countByEnumeratingWithState:&v40 objects:v45 count:16];
  if (v30)
  {
    uint64_t v29 = *(void *)v41;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v41 != v29) {
          objc_enumerationMutation(obj);
        }
        id v34 = *(void **)(*((void *)&v40 + 1) + 8 * v7);
        uint64_t v35 = v7;
        id v8 = objc_msgSend(*(id *)(a1 + 32), "objectForKey:");
        id v9 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v8, "count"));
        long long v36 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        id v10 = v8;
        uint64_t v11 = [v10 countByEnumeratingWithState:&v36 objects:v44 count:16];
        if (v11)
        {
          uint64_t v12 = v11;
          uint64_t v13 = *(void *)v37;
          do
          {
            for (uint64_t i = 0; i != v12; ++i)
            {
              if (*(void *)v37 != v13) {
                objc_enumerationMutation(v10);
              }
              id v15 = *(void **)(*((void *)&v36 + 1) + 8 * i);
              id v16 = *(void **)(a1 + 40);
              id v17 = +[HMDCharacteristicResponse responseWithRequest:v15 error:v6];
              [v16 addObject:v17];

              id v18 = [v15 characteristic];
              [v9 addObject:v18];
            }
            uint64_t v12 = [v10 countByEnumeratingWithState:&v36 objects:v44 count:16];
          }
          while (v12);
        }

        uint64_t v32 = [HMDCharacteristicReadWriteLogEvent alloc];
        uint64_t v33 = *(void *)(a1 + 64);
        uint64_t v31 = [*(id *)(a1 + 48) identifier];
        id v19 = [*(id *)(a1 + 48) clientIdentifier];
        id v20 = *(void **)(a1 + 48);
        id v21 = [v34 home];
        id v22 = [v20 userForHome:v21];
        id v23 = [v22 uuid];
        LOBYTE(v27) = 0;
        LOBYTE(v26) = 1;
        uint64_t v24 = [(HMDCharacteristicReadWriteLogEvent *)v32 initWithCharacteristics:v9 hmdAccessory:v34 hapAccessory:0 source:v33 isWriteOperation:0 isTimedWrite:0 isLocal:v26 transactionId:v31 isCached:v27 bundleId:v19 userUUID:v23 writtenValues:MEMORY[0x1E4F1CBF0]];

        uint64_t v25 = [*(id *)(a1 + 56) logEventSubmitter];
        [v25 submitLogEvent:v24 error:v6];

        uint64_t v7 = v35 + 1;
      }
      while (v35 + 1 != v30);
      uint64_t v30 = [obj countByEnumeratingWithState:&v40 objects:v45 count:16];
    }
    while (v30);
  }
}

- (void)_reallyRedispatchReadsToDevice:(id)a3 accessories:(id)a4 dispatchGroup:(id)a5 requestMap:(id)a6 requestMessage:(id)a7 source:(unint64_t)a8 responseTuples:(id)a9 activity:(id)a10
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v42 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v35 = a7;
  id v18 = a9;
  uint64_t v33 = v16;
  id v34 = a10;
  dispatch_group_enter(v16);
  id v19 = self;
  id v20 = [(HMDHome *)self primaryResident];
  id v21 = [v20 device];

  id v22 = [MEMORY[0x1E4F1CA60] dictionary];
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  id obj = v15;
  uint64_t v43 = [obj countByEnumeratingWithState:&v47 objects:v57 count:16];
  if (v43)
  {
    uint64_t v41 = *(void *)v48;
    long long v38 = v21;
    id v39 = v18;
    long long v37 = v22;
    do
    {
      for (uint64_t i = 0; i != v43; ++i)
      {
        if (*(void *)v48 != v41) {
          objc_enumerationMutation(obj);
        }
        uint64_t v24 = *(void **)(*((void *)&v47 + 1) + 8 * i);
        context = (void *)MEMORY[0x1D9452090]();
        uint64_t v25 = v19;
        uint64_t v26 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          uint64_t v27 = HMFGetLogIdentifier();
          id v28 = [v24 uuid];
          uint64_t v29 = [v28 UUIDString];
          uint64_t v30 = [v24 uniqueIdentifier];
          *(_DWORD *)buf = 138543874;
          uint64_t v52 = v27;
          __int16 v53 = 2112;
          int v54 = v29;
          __int16 v55 = 2112;
          uint64_t v56 = v30;
          _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_INFO, "%{public}@Read bulk redispatching accessory %@/%@ to resident", buf, 0x20u);

          id v22 = v37;
          id v18 = v39;

          id v21 = v38;
        }

        [v21 isCurrentDevice];
        [v24 uuid];

        [v42 identifier];
        uint64_t v31 = [v17 objectForKey:v24];
        +[HMDHome appendCharacteristicsToAccessoryList:v22 responseTuples:v18 forMultipleCharacteristicsRemoteRead:v31];
      }
      uint64_t v43 = [obj countByEnumeratingWithState:&v47 objects:v57 count:16];
    }
    while (v43);
  }

  v45[0] = MEMORY[0x1E4F143A8];
  v45[1] = 3221225472;
  v45[2] = __125__HMDHome__reallyRedispatchReadsToDevice_accessories_dispatchGroup_requestMap_requestMessage_source_responseTuples_activity___block_invoke;
  v45[3] = &unk_1E6A18C18;
  uint64_t v46 = v33;
  uint64_t v32 = v33;
  [(HMDHome *)v19 _readCharacteristicValuesForAccessories:v22 readRequestMap:v17 responseTuples:v18 requestMessage:v35 source:a8 viaDevice:v42 completionHandler:v45];
}

void __125__HMDHome__reallyRedispatchReadsToDevice_accessories_dispatchGroup_requestMap_requestMessage_source_responseTuples_activity___block_invoke(uint64_t a1)
{
}

- (void)_readCharacteristicValuesForAccessories:(id)a3 readRequestMap:(id)a4 responseTuples:(id)a5 requestMessage:(id)a6 source:(unint64_t)a7 viaDevice:(id)a8 completionHandler:(id)a9
{
  v105[3] = *MEMORY[0x1E4F143B8];
  id v78 = a3;
  id v77 = a4;
  id v71 = a5;
  id v16 = a6;
  id v76 = a8;
  id v70 = a9;
  id v17 = objc_alloc(MEMORY[0x1E4F653F0]);
  id v18 = NSString;
  id v19 = MEMORY[0x1D94505D0](self, a2);
  id v20 = [v18 stringWithFormat:@"%@, %s:%ld", v19, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/Home/HMDHome.m", 25873];
  id v74 = (void *)[v17 initWithName:v20];

  id v21 = dispatch_group_create();
  dispatch_group_enter(v21);
  id v75 = [MEMORY[0x1E4F1CA48] array];
  int v73 = [v16 BOOLForKey:@"kMultiPartResponseKey"];
  if (![v78 count])
  {
    dispatch_group_leave(v21);
    goto LABEL_30;
  }
  [MEMORY[0x1E4F6A278] currentTime];
  double v23 = v22;
  uint64_t v24 = [v16 identifier];
  uint64_t v25 = [v16 userForHome:self];
  uint64_t v26 = [v25 uuid];
  uint64_t v27 = [v16 clientIdentifier];
  context = [(HMDHome *)self _getLogEventsForOperation:0 startTime:v78 accessories:v77 requestMap:v24 identifier:v26 userUUID:a7 source:v23 bundleID:v27];

  id v28 = [(HMDHome *)self uuid];
  __int16 v69 = [v28 UUIDString];

  uint64_t v29 = (void *)MEMORY[0x1E4F1CA60];
  v104[0] = @"kAccessoriesListKey";
  v104[1] = @"kHomeUUID";
  v105[0] = v78;
  v105[1] = v69;
  v104[2] = @"kDoNotForwardMessageKey";
  uint64_t v30 = [NSNumber numberWithInt:v76 != 0];
  v105[2] = v30;
  uint64_t v31 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v105 forKeys:v104 count:3];
  id v72 = [v29 dictionaryWithDictionary:v31];

  long long v68 = [[HMDHomeKitVersion alloc] initWithVersionString:@"4.0"];
  uint64_t v32 = [(HMDHome *)self primaryResident];
  uint64_t v33 = [v32 device];

  if (v33)
  {
    id v34 = [(HMDHome *)self primaryResident];
    id v35 = [v34 device];
    long long v36 = [v35 version];
    int v37 = [v36 isAtLeastVersion:v68];

LABEL_7:
    goto LABEL_8;
  }
  if (isWatch())
  {
    long long v38 = [(HMDHome *)self homeManager];
    id v34 = [v38 companionDevice];

    id v35 = [v34 version];
    int v37 = [v35 isAtLeastVersion:v68];
    goto LABEL_7;
  }
  int v37 = 0;
LABEL_8:
  id v39 = [v16 identifier];
  long long v40 = v39;
  if (v39) {
    int v41 = v37;
  }
  else {
    int v41 = 0;
  }
  if (v41 != 1) {
    goto LABEL_14;
  }

  if (v73)
  {
    v102[0] = @"kMultiPartResponseKey";
    v102[1] = @"kRequestIdentifierKey";
    v103[0] = MEMORY[0x1E4F1CC38];
    long long v40 = [v16 identifier];
    id v42 = [v40 UUIDString];
    v103[1] = v42;
    uint64_t v43 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v103 forKeys:v102 count:2];
    [v72 addEntriesFromDictionary:v43];

LABEL_14:
  }
  uint64_t v44 = (void *)MEMORY[0x1E4F654B0];
  uint64_t v45 = [v16 qualityOfService];
  uint64_t v46 = [(HMDHome *)self messageDestination];
  long long v47 = (void *)[v72 copy];
  long long v48 = [v44 messageWithName:@"kMultipleCharacteristicReadRequestKey" qualityOfService:v45 destination:v46 payload:v47];

  objc_initWeak(&location, self);
  v90[0] = MEMORY[0x1E4F143A8];
  v90[1] = 3221225472;
  v90[2] = __131__HMDHome__readCharacteristicValuesForAccessories_readRequestMap_responseTuples_requestMessage_source_viaDevice_completionHandler___block_invoke;
  v90[3] = &unk_1E6A06F38;
  objc_copyWeak(&v97, &location);
  id v91 = v74;
  id v92 = v78;
  id v49 = v77;
  id v93 = v49;
  id v94 = v75;
  id v50 = context;
  id v95 = v50;
  long long v96 = v21;
  [v48 setResponseHandler:v90];
  id v51 = [(HMDHome *)self uuid];
  uint64_t v52 = [(HMDHome *)self workQueue];
  [(HMDHome *)self redispatchToResidentMessage:v48 target:v51 responseQueue:v52 viaDevice:v76];

  if ([(HMDHome *)self remoteAccessIsEnabled])
  {
    long long v88 = 0u;
    long long v89 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    id v53 = v49;
    uint64_t v54 = [v53 countByEnumeratingWithState:&v86 objects:v101 count:16];
    if (v54)
    {
      uint64_t v55 = *(void *)v87;
      while (2)
      {
        for (uint64_t i = 0; i != v54; ++i)
        {
          if (*(void *)v87 != v55) {
            objc_enumerationMutation(v53);
          }
          if ([*(id *)(*((void *)&v86 + 1) + 8 * i) hasBTLELink])
          {
            char contexta = (void *)MEMORY[0x1D9452090]();
            uint64_t v57 = self;
            HMFGetOSLogHandle();
            uint64_t v58 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
            {
              id v59 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543362;
              id v100 = v59;
              _os_log_impl(&dword_1D49D5000, v58, OS_LOG_TYPE_INFO, "%{public}@There are BTLE accessories that are currently unreachable during the read, kicking scan to update reachability", buf, 0xCu);
            }
            uint64_t v60 = [(HMDHome *)v57 accessoryBrowser];
            [v60 btleAccessoryReachabilityProbeTimer:1];

            goto LABEL_28;
          }
        }
        uint64_t v54 = [v53 countByEnumeratingWithState:&v86 objects:v101 count:16];
        if (v54) {
          continue;
        }
        break;
      }
    }
LABEL_28:
  }
  objc_destroyWeak(&v97);
  objc_destroyWeak(&location);

LABEL_30:
  long long v61 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __131__HMDHome__readCharacteristicValuesForAccessories_readRequestMap_responseTuples_requestMessage_source_viaDevice_completionHandler___block_invoke_1540;
  block[3] = &unk_1E6A0A4B8;
  id v80 = v71;
  id v81 = v75;
  id v82 = v16;
  long long v83 = self;
  char v85 = v73;
  id v84 = v70;
  id v62 = v70;
  id v63 = v16;
  id v64 = v75;
  id v65 = v71;
  dispatch_group_notify(v21, v61, block);
}

void __131__HMDHome__readCharacteristicValuesForAccessories_readRequestMap_responseTuples_requestMessage_source_viaDevice_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v44 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  if (WeakRetained)
  {
    [*(id *)(a1 + 32) begin];
    if (v5)
    {
      id v6 = [MEMORY[0x1E4F1CA80] set];
      long long v53 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      id obj = *(id *)(a1 + 40);
      uint64_t v7 = [obj countByEnumeratingWithState:&v53 objects:v62 count:16];
      if (!v7) {
        goto LABEL_31;
      }
      uint64_t v9 = v7;
      uint64_t v47 = *(void *)v54;
      *(void *)&long long v8 = 138543618;
      long long v42 = v8;
      uint64_t v43 = v6;
      while (1)
      {
        uint64_t v10 = 0;
        uint64_t v46 = v9;
        do
        {
          if (*(void *)v54 != v47) {
            objc_enumerationMutation(obj);
          }
          uint64_t v11 = *(void *)(*((void *)&v53 + 1) + 8 * v10);
          uint64_t v12 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v11];
          uint64_t v13 = [WeakRetained accessoryWithUUID:v12];

          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v14 = v13;
          }
          else {
            id v14 = 0;
          }
          id v15 = v14;

          if ([v15 isPrimary])
          {
            id v16 = v15;
LABEL_16:
            id v17 = objc_msgSend(*(id *)(a1 + 48), "objectForKey:", v16, v42);
            id v18 = v17;
            if (v17)
            {
              long long v51 = 0u;
              long long v52 = 0u;
              long long v49 = 0u;
              long long v50 = 0u;
              uint64_t v19 = [v17 countByEnumeratingWithState:&v49 objects:v57 count:16];
              if (v19)
              {
                uint64_t v20 = v19;
                uint64_t v21 = *(void *)v50;
                do
                {
                  uint64_t v22 = 0;
                  do
                  {
                    if (*(void *)v50 != v21) {
                      objc_enumerationMutation(v18);
                    }
                    double v23 = +[HMDCharacteristicResponse responseWithRequest:*(void *)(*((void *)&v49 + 1) + 8 * v22) error:v5];
                    [*(id *)(a1 + 56) addObject:v23];

                    ++v22;
                  }
                  while (v20 != v22);
                  uint64_t v20 = [v18 countByEnumeratingWithState:&v49 objects:v57 count:16];
                }
                while (v20);
              }
              uint64_t v24 = *(void **)(a1 + 64);
              uint64_t v25 = [v16 uuid];
              uint64_t v26 = [v25 UUIDString];
              uint64_t v27 = [v24 objectForKeyedSubscript:v26];
              objc_msgSend(v27, "setLocal:", objc_msgSend(v44, "hmf_BOOLForKey:", @"NoResident"));

              id v28 = *(void **)(a1 + 64);
              uint64_t v29 = [v16 uuid];
              uint64_t v30 = [v29 UUIDString];
              uint64_t v31 = [v28 objectForKeyedSubscript:v30];
              uint64_t v32 = [v44 objectForKeyedSubscript:@"kRemoteMessageTransportAttributionKey"];
              objc_msgSend(v31, "setTransportType:", objc_msgSend(v32, "intValue"));

              uint64_t v33 = [WeakRetained logEventSubmitter];
              id v34 = *(void **)(a1 + 64);
              id v35 = [v16 uuid];
              long long v36 = [v35 UUIDString];
              int v37 = [v34 objectForKeyedSubscript:v36];
              [v33 submitLogEvent:v37 error:v5];

              id v6 = v43;
              uint64_t v9 = v46;
            }

            goto LABEL_29;
          }
          id v16 = [v15 bridge];

          if (v16)
          {
            if ([v6 containsObject:v16]) {
              goto LABEL_29;
            }
            [v6 addObject:v16];
            goto LABEL_16;
          }
          long long v38 = (void *)MEMORY[0x1D9452090]();
          id v39 = WeakRetained;
          long long v40 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
          {
            int v41 = HMFGetLogIdentifier();
            *(_DWORD *)buf = v42;
            id v59 = v41;
            __int16 v60 = 2112;
            uint64_t v61 = v11;
            _os_log_impl(&dword_1D49D5000, v40, OS_LOG_TYPE_DEFAULT, "%{public}@Dropping read responses for nil-ed out accessory with UUID %@", buf, 0x16u);

            uint64_t v9 = v46;
          }

          id v16 = 0;
LABEL_29:

          ++v10;
        }
        while (v10 != v9);
        uint64_t v9 = [obj countByEnumeratingWithState:&v53 objects:v62 count:16];
        if (!v9)
        {
LABEL_31:

          dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
          goto LABEL_33;
        }
      }
    }
    [WeakRetained _addResponseTuplesFromDictionary:v44 accessoryRequestMapTable:*(void *)(a1 + 48) responseTuples:*(void *)(a1 + 56) completedGroup:*(void *)(a1 + 72) logEvents:*(void *)(a1 + 64)];
LABEL_33:
    objc_msgSend(*(id *)(a1 + 32), "end", v42);
  }
}

void __131__HMDHome__readCharacteristicValuesForAccessories_readRequestMap_responseTuples_requestMessage_source_viaDevice_completionHandler___block_invoke_1540(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 32) addObjectsFromArray:*(void *)(a1 + 40)];
  id v2 = *(void **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = [v2 stringForKey:@"kRequestIdentifierKey"];
    if (v3)
    {
      id v4 = (void *)v3;
      id v5 = [*(id *)(a1 + 56) pendingResponses];
      id v6 = [v5 objectForKeyedSubscript:v4];

      [v6 addResponsesToPendingResponse:*(void *)(a1 + 40)];
    }
    else
    {
      uint64_t v12 = [*(id *)(a1 + 48) identifier];
      id v4 = [v12 UUIDString];

      uint64_t v13 = [*(id *)(a1 + 56) pendingResponses];
      id v14 = [v13 objectForKeyedSubscript:v4];

      if (v14)
      {
        id v15 = (void *)MEMORY[0x1D9452090]([v14 setPendingResponseCount:0]);
        id v16 = *(id *)(a1 + 56);
        id v17 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          id v18 = HMFGetLogIdentifier();
          int v27 = 138543618;
          id v28 = v18;
          __int16 v29 = 2112;
          uint64_t v30 = v4;
          _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Remove tracking pending response %@ because last response received", (uint8_t *)&v27, 0x16u);
        }
        uint64_t v19 = [*(id *)(a1 + 56) pendingResponses];
        [v19 removeObjectForKey:v4];
      }
    }
    uint64_t v20 = (void *)MEMORY[0x1D9452090]();
    id v21 = *(id *)(a1 + 56);
    uint64_t v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      double v23 = HMFGetLogIdentifier();
      int v27 = 138543362;
      id v28 = v23;
      _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_DEFAULT, "%{public}@Completed all the reads and sending notification.", (uint8_t *)&v27, 0xCu);
    }
    uint64_t v24 = *(void **)(a1 + 56);
    uint64_t v25 = *(void *)(a1 + 40);
    uint64_t v26 = [*(id *)(a1 + 48) identifier];
    [v24 _notifyChangedCharacteristics:v25 identifier:v26 multiPartResponse:*(unsigned __int8 *)(a1 + 72) moreMessagesInMultipart:*(unsigned __int8 *)(a1 + 72) requestMessage:*(void *)(a1 + 48) withCompletionHandler:*(void *)(a1 + 64)];
  }
  else
  {
    uint64_t v7 = (void *)MEMORY[0x1D9452090]();
    id v8 = *(id *)(a1 + 56);
    uint64_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      int v27 = 138543362;
      id v28 = v10;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Completed all the reads and delaying notification.", (uint8_t *)&v27, 0xCu);
    }
    uint64_t v11 = *(void *)(a1 + 64);
    if (v11) {
      (*(void (**)(uint64_t, void, void))(v11 + 16))(v11, 0, 0);
    }
  }
}

- (id)_getLogEventsForOperation:(BOOL)a3 startTime:(double)a4 accessories:(id)a5 requestMap:(id)a6 identifier:(id)a7 userUUID:(id)a8 source:(unint64_t)a9 bundleID:(id)a10
{
  BOOL v14 = a3;
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  id v16 = a5;
  id v17 = a6;
  id v62 = a7;
  id v61 = a8;
  id v60 = a10;
  id v71 = [MEMORY[0x1E4F1CA80] set];
  long long v81 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  id obj = v16;
  uint64_t v18 = [obj countByEnumeratingWithState:&v81 objects:v87 count:16];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = *(void *)v82;
    do
    {
      for (uint64_t i = 0; i != v19; ++i)
      {
        if (*(void *)v82 != v20) {
          objc_enumerationMutation(obj);
        }
        uint64_t v22 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:*(void *)(*((void *)&v81 + 1) + 8 * i)];
        double v23 = [(HMDHome *)self accessoryWithUUID:v22];

        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v24 = v23;
        }
        else {
          uint64_t v24 = 0;
        }
        id v25 = v24;

        if (v25)
        {
          if (([v25 isPrimary] & 1) == 0)
          {
            double v23 = [v25 bridge];
          }
          uint64_t v26 = [v23 uuid];
          int v27 = [v26 UUIDString];
          [v71 addObject:v27];
        }
      }
      uint64_t v19 = [obj countByEnumeratingWithState:&v81 objects:v87 count:16];
    }
    while (v19);
  }

  objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(v17, "count"));
  id v59 = (id)objc_claimAutoreleasedReturnValue();
  long long v77 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  id v66 = v17;
  uint64_t v65 = [v66 countByEnumeratingWithState:&v77 objects:v86 count:16];
  if (v65)
  {
    uint64_t v64 = *(void *)v78;
    uint64_t v28 = 2;
    if (v14) {
      uint64_t v28 = 3;
    }
    uint64_t v57 = v28;
    do
    {
      for (uint64_t j = 0; j != v65; ++j)
      {
        if (*(void *)v78 != v64) {
          objc_enumerationMutation(v66);
        }
        uint64_t v30 = *(void **)(*((void *)&v77 + 1) + 8 * j);
        uint64_t v31 = [v30 uuid];
        uint64_t v32 = [v31 UUIDString];

        if (([v71 containsObject:v32] & 1) != 0
          || isWatch()
          && ([obj objectForKey:v32],
              uint64_t v33 = objc_claimAutoreleasedReturnValue(),
              v33,
              v33))
        {
          __int16 v69 = v32;
          uint64_t v70 = j;
          id v34 = v30;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v35 = v34;
          }
          else {
            id v35 = 0;
          }
          id v36 = v35;
          id v67 = v34;

          long long v68 = v36;
          int v37 = [v66 objectForKey:v36];
          long long v38 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v37, "count"));
          id v39 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v37, "count"));
          long long v73 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v76 = 0u;
          id v40 = v37;
          uint64_t v41 = [v40 countByEnumeratingWithState:&v73 objects:v85 count:16];
          if (v41)
          {
            uint64_t v42 = v41;
            uint64_t v43 = *(void *)v74;
            do
            {
              for (uint64_t k = 0; k != v42; ++k)
              {
                if (*(void *)v74 != v43) {
                  objc_enumerationMutation(v40);
                }
                uint64_t v45 = *(void **)(*((void *)&v73 + 1) + 8 * k);
                uint64_t v46 = [v45 characteristic];
                [v38 addObject:v46];

                id v47 = v45;
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  long long v48 = v47;
                }
                else {
                  long long v48 = 0;
                }
                id v49 = v48;

                if (v14 && v49)
                {
                  long long v50 = [v49 value];
                  if (v50)
                  {
                    [v39 addObject:v50];
                  }
                  else
                  {
                    long long v51 = [MEMORY[0x1E4F1CA98] null];
                    [v39 addObject:v51];
                  }
                }
              }
              uint64_t v42 = [v40 countByEnumeratingWithState:&v73 objects:v85 count:16];
            }
            while (v42);
          }

          uint64_t v72 = 0;
          long long v52 = [v68 preferredHAPAccessoryForOperation:v57 linkType:&v72];
          LOBYTE(v56) = 0;
          LOBYTE(v55) = 0;
          long long v53 = [[HMDCharacteristicReadWriteLogEvent alloc] initWithStartTime:v38 characteristics:v67 hmdAccessory:v52 hapAccessory:a9 source:v14 isWriteOperation:0 isTimedWrite:a4 isLocal:v55 transactionId:v62 isCached:v56 bundleId:v60 userUUID:v61 writtenValues:v39];
          uint64_t v32 = v69;
          [v59 setObject:v53 forKeyedSubscript:v69];

          uint64_t j = v70;
        }
      }
      uint64_t v65 = [v66 countByEnumeratingWithState:&v77 objects:v86 count:16];
    }
    while (v65);
  }

  return v59;
}

- (void)readCharacteristicValues:(id)a3 identifier:(id)a4 source:(unint64_t)a5 qualityOfService:(int64_t)a6 withCompletionHandler:(id)a7
{
  id v13 = a3;
  id v14 = a4;
  id v15 = a7;
  id v16 = objc_alloc(MEMORY[0x1E4F653F0]);
  id v17 = NSString;
  uint64_t v18 = MEMORY[0x1D94505D0](self, a2);
  uint64_t v19 = [v17 stringWithFormat:@"%@, %s:%ld", v18, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/Home/HMDHome.m", 25734];
  uint64_t v20 = (void *)[v16 initWithName:v19];

  id v21 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __93__HMDHome_readCharacteristicValues_identifier_source_qualityOfService_withCompletionHandler___block_invoke;
  block[3] = &unk_1E6A070F0;
  id v27 = v20;
  id v28 = v13;
  id v31 = v15;
  unint64_t v32 = a5;
  int64_t v33 = a6;
  __int16 v29 = self;
  id v30 = v14;
  id v22 = v14;
  id v23 = v15;
  id v24 = v13;
  id v25 = v20;
  dispatch_async(v21, block);
}

void __93__HMDHome_readCharacteristicValues_identifier_source_qualityOfService_withCompletionHandler___block_invoke(uint64_t a1)
{
  location[3] = *(id *)MEMORY[0x1E4F143B8];
  if ([*(id *)(a1 + 40) count])
  {
    objc_initWeak(location, *(id *)(a1 + 48));
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __93__HMDHome_readCharacteristicValues_identifier_source_qualityOfService_withCompletionHandler___block_invoke_1539;
    aBlock[3] = &unk_1E6A070C8;
    objc_copyWeak(&v17, location);
    id v16 = *(id *)(a1 + 64);
    id v13 = *(id *)(a1 + 32);
    long long v18 = *(_OWORD *)(a1 + 72);
    id v14 = *(id *)(a1 + 56);
    id v15 = *(id *)(a1 + 40);
    id v2 = (void (**)(void))_Block_copy(aBlock);
    if ([*(id *)(a1 + 48) _shouldWaitForAccessoriesToBeReachable])
    {
      uint64_t v3 = *(void *)(a1 + 40);
      id v4 = [*(id *)(a1 + 48) workQueue];
      id v5 = +[HMDHomeAssistantOperation homeAssistantOperationWithReadRequests:v3 queue:v4];

      [*(id *)(a1 + 48) _performOperation:v5 completion:v2];
    }
    else
    {
      v2[2](v2);
    }

    objc_destroyWeak(&v17);
    objc_destroyWeak(location);
    uint64_t v10 = 0;
  }
  else
  {
    id v6 = (void *)MEMORY[0x1D9452090]();
    id v7 = *(id *)(a1 + 48);
    id v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = HMFGetLogIdentifier();
      LODWORD(location[0]) = 138543362;
      *(id *)((char *)location + 4) = v9;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_ERROR, "%{public}@Empty characteristics array was given", (uint8_t *)location, 0xCu);
    }
    uint64_t v10 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:3 userInfo:0];
    uint64_t v11 = *(void *)(a1 + 64);
    if (v11) {
      (*(void (**)(uint64_t, void *, void))(v11 + 16))(v11, v10, 0);
    }
  }
}

void __93__HMDHome_readCharacteristicValues_identifier_source_qualityOfService_withCompletionHandler___block_invoke_1539(uint64_t a1)
{
  v29[2] = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    [*(id *)(a1 + 32) begin];
    v28[0] = @"sourceType";
    uint64_t v3 = [NSNumber numberWithUnsignedInteger:*(void *)(a1 + 72)];
    v28[1] = @"kMultiPartResponseKey";
    v29[0] = v3;
    v29[1] = MEMORY[0x1E4F1CC38];
    id v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v29 forKeys:v28 count:2];

    id v5 = objc_alloc(MEMORY[0x1E4F654B0]);
    uint64_t v6 = *(void *)(a1 + 80);
    id v7 = [MEMORY[0x1E4F65488] allMessageDestinations];
    id v8 = (void *)[v5 initWithName:@"kMultipleCharacteristicReadRequestKey" qualityOfService:v6 destination:v7 payload:v4];

    uint64_t v9 = (void *)MEMORY[0x1D9452090]([v8 setIdentifier:*(void *)(a1 + 40)]);
    id v10 = WeakRetained;
    uint64_t v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = HMFGetLogIdentifier();
      id v13 = [v8 identifier];
      unint64_t v14 = *(void *)(a1 + 72);
      if (v14 > 9) {
        id v15 = @"Unknown";
      }
      else {
        id v15 = off_1E6A07FB8[v14];
      }
      id v21 = v15;
      int v22 = 138543874;
      id v23 = v12;
      __int16 v24 = 2114;
      id v25 = v13;
      __int16 v26 = 2114;
      id v27 = v21;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Issuing read requests with identifier %{public}@, Source: %{public}@", (uint8_t *)&v22, 0x20u);
    }
    [v10 _readCharacteristicValues:*(void *)(a1 + 48) requestMessage:v8 source:*(void *)(a1 + 72) withCompletionHandler:*(void *)(a1 + 56)];
    [*(id *)(a1 + 32) end];
  }
  else
  {
    uint64_t v16 = *(void *)(a1 + 56);
    if (v16)
    {
      id v17 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:3 userInfo:0];
      (*(void (**)(uint64_t, void *, void))(v16 + 16))(v16, v17, 0);
    }
    long long v18 = (void *)MEMORY[0x1D9452090]();
    uint64_t v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      uint64_t v20 = HMFGetLogIdentifier();
      int v22 = 138543362;
      id v23 = v20;
      _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_INFO, "%{public}@Home does not exist anymore, cannot perform read request", (uint8_t *)&v22, 0xCu);
    }
  }
}

- (void)_performOperation:(id)a3 completion:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHome *)self assistantOperations];

  if (!v8)
  {
    uint64_t v9 = [MEMORY[0x1E4F1CA48] array];
    [(HMDHome *)self setAssistantOperations:v9];
  }
  id v10 = [(HMDHome *)self assistantOperations];
  [v10 addObject:v6];

  objc_initWeak(&location, self);
  objc_initWeak(&from, v6);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  void v12[2] = __40__HMDHome__performOperation_completion___block_invoke;
  v12[3] = &unk_1E6A070A0;
  id v11 = v7;
  id v13 = v11;
  objc_copyWeak(&v14, &from);
  objc_copyWeak(&v15, &location);
  [v6 startWithCompletion:v12];
  objc_destroyWeak(&v15);
  objc_destroyWeak(&v14);

  objc_destroyWeak(&from);
  objc_destroyWeak(&location);
}

void __40__HMDHome__performOperation_completion___block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v2 = objc_loadWeakRetained((id *)(a1 + 48));
    uint64_t v3 = [v2 assistantOperations];
    [v3 removeObject:WeakRetained];
  }
}

- (BOOL)_shouldWaitForAccessoriesToBeReachable
{
  if (isWatch())
  {
    uint64_t v3 = +[HMDWatchSystemState sharedState];
    if ([v3 isCompanionReachable])
    {
      LOBYTE(v4) = 0;
    }
    else
    {
      id v5 = [(HMDHome *)self residentDeviceManager];
      id v6 = [v5 primaryResidentDevice];
      int v4 = [v6 isReachable] ^ 1;
    }
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  return v4;
}

- (id)writeRequestTuplesFromMessage:(id)a3 outUnhandledRequests:(id *)a4
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = [v5 dictionaryForKey:@"kAccessoriesListKey"];
  id v55 = [MEMORY[0x1E4F1CA48] array];
  int v37 = a4;
  if (a4) {
    id v7 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v7 = 0;
  }
  id v8 = [v5 uuidForKey:@"kActionSetUUID"];
  if (v8) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = [v5 BOOLForKey:@"kShortActionKey"];
  }
  uint64_t v54 = v9;

  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  id obj = v6;
  uint64_t v39 = [obj countByEnumeratingWithState:&v68 objects:v74 count:16];
  if (v39)
  {
    uint64_t v38 = *(void *)v69;
    long long v50 = v7;
    long long v53 = v5;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v69 != v38) {
          objc_enumerationMutation(obj);
        }
        uint64_t v41 = v10;
        uint64_t v11 = *(void *)(*((void *)&v68 + 1) + 8 * v10);
        uint64_t v12 = objc_msgSend(obj, "hmf_dictionaryForKey:", v11);
        uint64_t v51 = v11;
        id v13 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v11];
        id v14 = [(HMDHome *)self accessoryWithUUID:v13];

        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v15 = v14;
        }
        else {
          id v15 = 0;
        }
        id v43 = v15;

        long long v66 = 0u;
        long long v67 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        id v16 = v12;
        uint64_t v45 = [v16 countByEnumeratingWithState:&v64 objects:v73 count:16];
        if (v45)
        {
          uint64_t v44 = *(void *)v65;
          id v42 = v16;
          do
          {
            for (uint64_t i = 0; i != v45; ++i)
            {
              if (*(void *)v65 != v44) {
                objc_enumerationMutation(v16);
              }
              uint64_t v18 = *(void *)(*((void *)&v64 + 1) + 8 * i);
              uint64_t v19 = objc_msgSend(v16, "hmf_dictionaryForKey:", v18);
              uint64_t v52 = v18;
              uint64_t v20 = HAPInstanceIDFromValue();
              if (v20)
              {
                uint64_t v48 = i;
                uint64_t v46 = v20;
                uint64_t v57 = [v43 findService:v20];
                long long v60 = 0u;
                long long v61 = 0u;
                long long v62 = 0u;
                long long v63 = 0u;
                id v47 = v19;
                id v21 = v19;
                uint64_t v59 = [v21 countByEnumeratingWithState:&v60 objects:v72 count:16];
                if (v59)
                {
                  uint64_t v22 = *(void *)v61;
                  uint64_t v56 = *(void *)v61;
                  do
                  {
                    for (uint64_t j = 0; j != v59; ++j)
                    {
                      if (*(void *)v61 != v22) {
                        objc_enumerationMutation(v21);
                      }
                      uint64_t v24 = *(void *)(*((void *)&v60 + 1) + 8 * j);
                      id v25 = HAPInstanceIDFromValue();
                      if (v25)
                      {
                        __int16 v26 = [v57 findCharacteristic:v25];
                        if (v26)
                        {
                          if ([v5 isRemote])
                          {
                            id v27 = [NSString stringWithFormat:@"%@-%@", v24, @"kAuthorizationDataKey"];
                            objc_msgSend(v21, "hmf_dataForKey:", v27);
                            id v28 = (id)objc_claimAutoreleasedReturnValue();
                          }
                          else
                          {
                            id v28 = [v26 authorizationData];
                          }
                          unsigned int v58 = objc_msgSend(v21, "hmf_BOOLForKey:", @"HMDCharacteristicWriteRequestIncludeResponseValueKey");
                          if ([v5 isRemote])
                          {
                            id v30 = [NSString stringWithFormat:@"%@-%@", v24, @"kCharacteristicContextDataForWriteKey"];
                            objc_msgSend(v21, "hmf_dataForKey:", v30);
                            id v29 = (id)objc_claimAutoreleasedReturnValue();
                          }
                          else
                          {
                            id v30 = [(HMDHome *)self currentUser];
                            id v31 = [v30 notificationContextHAPIdentifier];
                            id v29 = [v26 contextDataForWriteRequestWithIdentifier:v31];
                          }
                          [v21 objectForKeyedSubscript:v24];
                          v33 = id v32 = v21;
                          id v5 = v53;
                          id v34 = [v53 identifier];
                          id v35 = +[HMDCharacteristicWriteRequest writeRequestWithCharacteristic:v26 value:v33 authorizationData:v28 identifier:v34 type:v54 includeResponseValue:v58 contextData:v29];

                          id v21 = v32;
                          [v55 addObject:v35];

                          uint64_t v22 = v56;
                        }
                        else
                        {
                          objc_msgSend(v50, "hmf_mutableDictionaryForKey:", v51);
                          id v28 = (id)objc_claimAutoreleasedReturnValue();
                          if (!v28)
                          {
                            id v28 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
                            [v50 setObject:v28 forKeyedSubscript:v51];
                          }
                          objc_msgSend(v28, "hmf_mutableArrayForKey:", v52);
                          id v29 = (id)objc_claimAutoreleasedReturnValue();
                          if (!v29)
                          {
                            id v29 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                            [v28 setObject:v29 forKeyedSubscript:v52];
                          }
                          [v29 addObject:v25];
                        }
                      }
                    }
                    uint64_t v59 = [v21 countByEnumeratingWithState:&v60 objects:v72 count:16];
                  }
                  while (v59);
                }

                id v7 = v50;
                id v16 = v42;
                uint64_t v19 = v47;
                uint64_t i = v48;
                uint64_t v20 = v46;
              }
            }
            uint64_t v45 = [v16 countByEnumeratingWithState:&v64 objects:v73 count:16];
          }
          while (v45);
        }

        uint64_t v10 = v41 + 1;
      }
      while (v41 + 1 != v39);
      uint64_t v39 = [obj countByEnumeratingWithState:&v68 objects:v74 count:16];
    }
    while (v39);
  }

  if (v37) {
    *int v37 = (id)[v7 copy];
  }

  return v55;
}

- (void)_areWriteRequestsAllowed:(id)a3 message:(id)a4 completion:(id)a5
{
  id v12 = a3;
  id v8 = a4;
  id v9 = a5;
  unint64_t v10 = [v8 source];
  if ([(HMDHome *)self applyDeviceLockStatus:v8])
  {
    -[HMDHome _applyDeviceLockCheck:forSource:message:completion:](self, v12, v10, v8, v9);
  }
  else
  {
    uint64_t v11 = (void (**)(void *, uint64_t, void))_Block_copy(v9);

    if (v11)
    {
      v11[2](v11, 1, 0);
      id v9 = v11;
    }
    else
    {
      id v9 = 0;
    }
  }
}

- (void)_applyDeviceLockCheck:(unint64_t)a3 forSource:(void *)a4 message:(void *)a5 completion:
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  id v50 = a2;
  id v52 = a4;
  id v49 = a5;
  if (a1)
  {
    int v8 = [a1 synchronouslyFetchIsCarPlayConnectedStatus];
    uint64_t v57 = a1;
    id v9 = [a1 deviceLockStateDataSource];
    int v10 = [v9 isPasscodeEnabled];

    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    id obj = (__CFString *)v50;
    uint64_t v11 = [(__CFString *)obj countByEnumeratingWithState:&v63 objects:v75 count:16];
    if (v11)
    {
      uint64_t v55 = *(void *)v64;
      int v51 = v10 & v8;
LABEL_4:
      uint64_t v12 = 0;
      while (1)
      {
        if (*(void *)v64 != v55) {
          objc_enumerationMutation(obj);
        }
        id v13 = *(__CFString **)(*((void *)&v63 + 1) + 8 * v12);
        id v14 = [(__CFString *)v13 characteristic];
        id v15 = [(__CFString *)v14 service];
        id v16 = [v57 hapMetadata];
        id v17 = [(__CFString *)v14 type];
        uint64_t v18 = [v15 type];
        int v19 = [v16 requiresDeviceUnlock:v17 forService:v18];

        if (v19)
        {
          uint64_t v20 = [v57 hapMetadata];
          id v21 = [(__CFString *)v14 type];
          uint64_t v22 = [(__CFString *)v13 value];
          unsigned __int8 v23 = [v20 allowsSecuringWriteFor:v21 withValue:v22];

          if (((a3 == 1) & v23) == 0)
          {
            int v24 = v51
                ? [v57 isCarPlayAccessAllowedForCharacteristic:v14 withMessage:v52 fromSource:a3]
                : 0;
            if ((([v57 isAccessAllowedForCharacteristicsWithMessage:v52] | v24) & 1) == 0) {
              break;
            }
          }
        }

        if (v11 == ++v12)
        {
          uint64_t v11 = [(__CFString *)obj countByEnumeratingWithState:&v63 objects:v75 count:16];
          if (v11) {
            goto LABEL_4;
          }
          goto LABEL_19;
        }
      }
      uint64_t v56 = HMDSecureAccessErrorCodeForMessage(v52, a3);
      id v25 = (void *)MEMORY[0x1D9452090]();
      id v26 = v57;
      id v27 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        id v28 = HMFGetLogIdentifier();
        if (a3 > 9) {
          id v29 = @"Unknown";
        }
        else {
          id v29 = off_1E6A07FB8[a3];
        }
        id v30 = v29;
        *(_DWORD *)buf = 138544130;
        long long v68 = v28;
        __int16 v69 = 2112;
        long long v70 = v13;
        __int16 v71 = 2112;
        uint64_t v72 = v14;
        __int16 v73 = 2112;
        long long v74 = v30;
        _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_INFO, "%{public}@Write request (%@) for characteristic: %@ from source: %@ is attempting to perform a securing write", buf, 0x2Au);
      }

      if (a3 != 1) {
        goto LABEL_28;
      }
      if (!v56) {
        goto LABEL_34;
      }
      id v31 = (void *)MEMORY[0x1D9452090]();
      id v32 = v26;
      int64_t v33 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        id v34 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        long long v68 = v34;
        _os_log_impl(&dword_1D49D5000, v33, OS_LOG_TYPE_INFO, "%{public}@Checking siri unlock access for siri triggered write request", buf, 0xCu);
      }
      objc_initWeak((id *)buf, v32);
      id v35 = [v32 siriSecureAccessoryAccessController];
      v58[0] = MEMORY[0x1E4F143A8];
      v58[1] = 3221225472;
      v58[2] = __62__HMDHome__applyDeviceLockCheck_forSource_message_completion___block_invoke;
      v58[3] = &unk_1E6A168D8;
      objc_copyWeak(&v62, (id *)buf);
      id v61 = v49;
      uint64_t v59 = obj;
      id v36 = v56;
      id v60 = v36;
      [v35 isUnsecuringSiriActionAllowedWithCompletion:v58];

      objc_destroyWeak(&v62);
      objc_destroyWeak((id *)buf);
    }
    else
    {
LABEL_19:

      if (a3 == 1)
      {
LABEL_34:
        id v43 = (void *)MEMORY[0x1D9452090]();
        id v44 = v57;
        uint64_t v45 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
        {
          uint64_t v46 = HMFGetLogIdentifier();
          id v47 = @"Siri";
          *(_DWORD *)buf = 138543874;
          long long v68 = v46;
          __int16 v69 = 2112;
          long long v70 = obj;
          __int16 v71 = 2112;
          uint64_t v72 = @"Siri";
          _os_log_impl(&dword_1D49D5000, v45, OS_LOG_TYPE_INFO, "%{public}@Access is allowed for write requests (%@) from source: %@", buf, 0x20u);
        }
        (*((void (**)(id, uint64_t, void))v49 + 2))(v49, 1, 0);
      }
      else
      {
        uint64_t v56 = 0;
LABEL_28:
        int v37 = (void *)MEMORY[0x1D9452090]();
        id v38 = v57;
        uint64_t v39 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
        {
          id v40 = HMFGetLogIdentifier();
          if (v56) {
            uint64_t v41 = @"denied";
          }
          else {
            uint64_t v41 = @"allowed";
          }
          if (a3 > 9) {
            id v42 = @"Unknown";
          }
          else {
            id v42 = off_1E6A07FB8[a3];
          }
          uint64_t v48 = v42;
          *(_DWORD *)buf = 138544130;
          long long v68 = v40;
          __int16 v69 = 2112;
          long long v70 = v41;
          __int16 v71 = 2112;
          uint64_t v72 = obj;
          __int16 v73 = 2112;
          long long v74 = v48;
          _os_log_impl(&dword_1D49D5000, v39, OS_LOG_TYPE_INFO, "%{public}@Access is %@ for write requests (%@) from source: %@", buf, 0x2Au);
        }
        (*((void (**)(id, BOOL, void *))v49 + 2))(v49, v56 == 0, v56);
      }
    }
  }
}

void __62__HMDHome__applyDeviceLockCheck_forSource_message_completion___block_invoke(uint64_t a1, int a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    id v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = WeakRetained;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v8 = HMFGetLogIdentifier();
      id v9 = @"denied";
      uint64_t v10 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543874;
      int v19 = v8;
      if (a2) {
        id v9 = @"allowed";
      }
      __int16 v20 = 2112;
      id v21 = v9;
      __int16 v22 = 2112;
      uint64_t v23 = v10;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Access is %@ for write requests (%@) by siri watch authentication", buf, 0x20u);
    }
    uint64_t v11 = [v6 workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __62__HMDHome__applyDeviceLockCheck_forSource_message_completion___block_invoke_1480;
    block[3] = &unk_1E6A113D0;
    id v16 = *(id *)(a1 + 48);
    char v17 = a2;
    id v15 = *(id *)(a1 + 40);
    dispatch_async(v11, block);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 48);
    id v13 = [MEMORY[0x1E4F28C58] hmErrorWithCode:20];
    (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v13);
  }
}

uint64_t __62__HMDHome__applyDeviceLockCheck_forSource_message_completion___block_invoke_1480(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(unsigned char *)(a1 + 48)) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(v2 + 16))(v2, *(unsigned char *)(a1 + 48) != 0, v3);
}

- (void)_handleMultipleCharacteristicWrite:(id)a3
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v21 = 0;
  id v5 = [(HMDHome *)self writeRequestTuplesFromMessage:v4 outUnhandledRequests:&v21];
  id v6 = v21;
  if ([v6 count])
  {
    id v7 = (void *)MEMORY[0x1D9452090]();
    int v8 = self;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      uint64_t v11 = [v4 shortDescription];
      *(_DWORD *)buf = 138543874;
      uint64_t v23 = v10;
      __int16 v24 = 2112;
      id v25 = v11;
      __int16 v26 = 2112;
      id v27 = v6;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@%@ has characteristic requests that cannot be handled: %@", buf, 0x20u);
    }
  }
  uint64_t v12 = (void *)[v4 source];
  [v5 count];
  [v4 isRemote];
  objc_initWeak((id *)buf, self);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  void v16[2] = __46__HMDHome__handleMultipleCharacteristicWrite___block_invoke;
  v16[3] = &unk_1E6A07078;
  objc_copyWeak(v20, (id *)buf);
  id v13 = v4;
  id v17 = v13;
  v20[1] = v12;
  id v14 = v5;
  id v18 = v14;
  id v15 = v6;
  id v19 = v15;
  [(HMDHome *)self _areWriteRequestsAllowed:v14 message:v13 completion:v16];

  objc_destroyWeak(v20);
  objc_destroyWeak((id *)buf);
}

void __46__HMDHome__handleMultipleCharacteristicWrite___block_invoke(uint64_t a1, char a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v7 = WeakRetained;
  if (a2)
  {
    int v8 = *(void **)(a1 + 32);
    if (WeakRetained)
    {
      id v9 = (void *)MEMORY[0x1D9452090]([WeakRetained startReportingSessionForMessage:*(void *)(a1 + 32)]);
      id v10 = v7;
      uint64_t v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = HMFGetLogIdentifier();
        *(void *)buf = 0;
        *(void *)&buf[8] = 0;
        id v13 = [*(id *)(a1 + 32) identifier];

        if (v13)
        {
          id v14 = [*(id *)(a1 + 32) identifier];
          [v14 getUUIDBytes:buf];
        }
        else
        {
          *(_OWORD *)buf = *MEMORY[0x1E4F655A8];
        }
        long long v22 = *(_OWORD *)buf;
        unint64_t v16 = *(void *)(a1 + 64);
        if (v16 > 9) {
          id v17 = @"Unknown";
        }
        else {
          id v17 = off_1E6A07FB8[v16];
        }
        id v18 = v17;
        *(_DWORD *)buf = 138544130;
        *(void *)&uint8_t buf[4] = v12;
        *(_WORD *)&buf[12] = 1042;
        *(_DWORD *)&buf[14] = 16;
        __int16 v24 = 2098;
        id v25 = &v22;
        __int16 v26 = 2114;
        id v27 = v18;
        _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Handling multiple characteristics write requests with identifier: %{public,uuid_t}.16P, source: %{public}@", buf, 0x26u);
      }
      uint64_t v20 = *(void *)(a1 + 32);
      uint64_t v19 = *(void *)(a1 + 40);
      uint64_t v21 = *(void *)(a1 + 64);
      id v15 = objc_msgSend(v10, "__readWriteResponseHandler:unhandledRequests:", v20, *(void *)(a1 + 48));
      [v10 _writeCharacteristicValues:v19 requestMessage:v20 source:v21 withCompletionHandler:v15];
    }
    else
    {
      id v15 = [MEMORY[0x1E4F28C58] hmErrorWithCode:20];
      [v8 respondWithError:v15];
    }
  }
  else
  {
    [*(id *)(a1 + 32) respondWithError:v5];
  }
}

- (void)_handleCharacteristicWrite:(id)a3
{
  v36[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 messagePayload];
  id v6 = objc_msgSend(v5, "hmf_UUIDForKey:", @"kAccessoryUUID");

  id v7 = [(HMDHome *)self accessoryWithUUID:v6];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    int v8 = v7;
  }
  else {
    int v8 = 0;
  }
  id v9 = v8;

  if (v9)
  {
    if ([(HMDHome *)self isResidentFirstAccessoryCommunicationEnabled])
    {
      id v10 = [v4 messagePayload];
      uint64_t v11 = [v10 objectForKeyedSubscript:@"kServiceInstanceID"];
      __int16 v26 = HAPInstanceIDFromValue();

      uint64_t v12 = [v4 messagePayload];
      id v13 = [v12 objectForKeyedSubscript:@"kCharacteristicInstanceID"];
      id v14 = HAPInstanceIDFromValue();

      id v25 = [v9 findService:v26];
      id v15 = [v25 findCharacteristic:v14];
      if (v15)
      {
        if ([v4 isRemote]) {
          [v4 dataForKey:@"kAuthorizationDataKey"];
        }
        else {
        __int16 v24 = [v15 authorizationData];
        }
        id v18 = [v4 messagePayload];
        uint64_t v19 = [v18 objectForKeyedSubscript:@"kCharacteristicValue"];
        uint64_t v20 = [v4 identifier];
        uint64_t v21 = +[HMDCharacteristicWriteRequest writeRequestWithCharacteristic:v15 value:v19 authorizationData:v24 identifier:v20 type:0 includeResponseValue:0];

        objc_initWeak(&location, self);
        v36[0] = v21;
        long long v22 = [MEMORY[0x1E4F1C978] arrayWithObjects:v36 count:1];
        v27[0] = MEMORY[0x1E4F143A8];
        v27[1] = 3221225472;
        void v27[2] = __38__HMDHome__handleCharacteristicWrite___block_invoke;
        v27[3] = &unk_1E6A07050;
        objc_copyWeak(&v34, &location);
        id v28 = v4;
        id v29 = v6;
        id v30 = v9;
        id v31 = v26;
        id v32 = v14;
        id v23 = v21;
        id v33 = v23;
        [(HMDHome *)self _areWriteRequestsAllowed:v22 message:v28 completion:v27];

        objc_destroyWeak(&v34);
        objc_destroyWeak(&location);
      }
      else
      {
        id v17 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
        [v4 respondWithError:v17];
      }
    }
    else
    {
      [v9 _handleCharacteristicWrite:v4];
    }
  }
  else
  {
    unint64_t v16 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    [v4 respondWithError:v16];
  }
}

void __38__HMDHome__handleCharacteristicWrite___block_invoke(uint64_t a1, char a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  id v7 = WeakRetained;
  if (a2)
  {
    if (WeakRetained)
    {
      int v8 = (void *)MEMORY[0x1D9452090]();
      id v9 = v7;
      id v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = HMFGetLogIdentifier();
        uint64_t v12 = [*(id *)(a1 + 32) shortDescription];
        id v13 = [*(id *)(a1 + 40) UUIDString];
        id v14 = [*(id *)(a1 + 48) uniqueIdentifier];
        uint64_t v15 = *(void *)(a1 + 56);
        uint64_t v16 = *(void *)(a1 + 64);
        *(_DWORD *)buf = 138544642;
        *(void *)&uint8_t buf[4] = v11;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v12;
        *(_WORD *)&buf[22] = 2112;
        *(void *)&unsigned char buf[24] = v13;
        *(_WORD *)&unsigned char buf[32] = 2112;
        *(void *)&buf[34] = v14;
        __int16 v34 = 2112;
        uint64_t v35 = v15;
        __int16 v36 = 2112;
        uint64_t v37 = v16;
        _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Processing single characteristic write request: %@ (%@/%@/%@/%@) as a special case of multiple characteristic write requests", buf, 0x3Eu);
      }
      unint64_t v17 = [*(id *)(a1 + 32) source];
      id v18 = (void *)MEMORY[0x1D9452090]();
      id v19 = v9;
      uint64_t v20 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        uint64_t v21 = HMFGetLogIdentifier();
        *(void *)buf = 0;
        *(void *)&buf[8] = 0;
        long long v22 = [*(id *)(a1 + 32) identifier];

        if (v22)
        {
          id v23 = [*(id *)(a1 + 32) identifier];
          [v23 getUUIDBytes:buf];
        }
        else
        {
          *(_OWORD *)buf = *MEMORY[0x1E4F655A8];
        }
        long long v32 = *(_OWORD *)buf;
        if (v17 > 9) {
          __int16 v26 = @"Unknown";
        }
        else {
          __int16 v26 = off_1E6A07FB8[v17];
        }
        id v27 = v26;
        *(_DWORD *)buf = 138544130;
        *(void *)&uint8_t buf[4] = v21;
        *(_WORD *)&buf[12] = 1042;
        *(_DWORD *)&buf[14] = 16;
        *(_WORD *)&unsigned char buf[18] = 2098;
        *(void *)&buf[20] = &v32;
        *(_WORD *)&buf[28] = 2114;
        *(void *)&buf[30] = v27;
        _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@Handling single characteristic write request with identifier: %{public,uuid_t}.16P, source: %{public}@", buf, 0x26u);
      }
      uint64_t v31 = *(void *)(a1 + 72);
      id v28 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v31 count:1];
      uint64_t v29 = *(void *)(a1 + 32);
      id v30 = objc_msgSend(v19, "__readWriteResponseHandler:unhandledRequests:", v29, 0);
      [v19 _writeCharacteristicValues:v28 requestMessage:v29 source:v17 withCompletionHandler:v30];
    }
    else
    {
      __int16 v24 = *(void **)(a1 + 32);
      id v25 = [MEMORY[0x1E4F28C58] hmErrorWithCode:20];
      [v24 respondWithError:v25];
    }
  }
  else
  {
    [*(id *)(a1 + 32) respondWithError:v5];
  }
}

- (void)_addResponseTuplesFromDictionary:(id)a3 accessoryRequestMapTable:(id)a4 responseTuples:(id)a5 completedGroup:(id)a6 logEvents:(id)a7
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  id v12 = a3;
  id v36 = a4;
  id v35 = a5;
  dispatch_group_t group = a6;
  id v33 = a7;
  uint64_t v37 = v12;
  objc_msgSend(v12, "hmf_dictionaryForKey:", @"kModifiedCharacteristicsForAccessoryKey");
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v39 = [obj countByEnumeratingWithState:&v52 objects:v56 count:16];
  if (v39)
  {
    uint64_t v38 = *(void *)v53;
    long long v32 = v43;
    do
    {
      for (uint64_t i = 0; i != v39; ++i)
      {
        if (*(void *)v53 != v38) {
          objc_enumerationMutation(obj);
        }
        uint64_t v14 = *(void *)(*((void *)&v52 + 1) + 8 * i);
        uint64_t v15 = objc_msgSend(objc_alloc(MEMORY[0x1E4F29128]), "initWithUUIDString:", v14, v32);
        uint64_t v16 = [(HMDHome *)self accessoryWithUUID:v15];
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          unint64_t v17 = v16;
        }
        else {
          unint64_t v17 = 0;
        }
        id v18 = v17;

        if (v18)
        {
          uint64_t v19 = [v18 bridge];
          uint64_t v41 = v15;
          uint64_t v20 = (void *)v19;
          if (v19) {
            uint64_t v21 = (void *)v19;
          }
          else {
            uint64_t v21 = v18;
          }
          id v22 = v21;

          id v23 = [v22 uuid];
          __int16 v24 = [v23 UUIDString];

          id v25 = [v36 objectForKey:v22];
          __int16 v26 = objc_msgSend(obj, "hmf_dictionaryForKey:", v14);
          dispatch_group_enter(group);
          [(HMDHome *)self workQueue];
          v28 = id v27 = self;
          v42[0] = MEMORY[0x1E4F143A8];
          v42[1] = 3221225472;
          v43[0] = __109__HMDHome__addResponseTuplesFromDictionary_accessoryRequestMapTable_responseTuples_completedGroup_logEvents___block_invoke;
          v43[1] = &unk_1E6A07028;
          id v44 = v25;
          id v29 = v18;
          id v45 = v29;
          id v46 = v33;
          id v47 = v24;
          id v48 = v37;
          id v49 = v27;
          id v50 = v35;
          int v51 = group;
          id v30 = v24;
          id v31 = v25;
          [v29 handleMultipleCharacteristicsUpdated:v26 message:0 completionQueue:v28 completionHandler:v42];

          self = v27;
          uint64_t v15 = v41;
        }
      }
      uint64_t v39 = [obj countByEnumeratingWithState:&v52 objects:v56 count:16];
    }
    while (v39);
  }
  dispatch_group_leave(group);
}

void __109__HMDHome__addResponseTuplesFromDictionary_accessoryRequestMapTable_responseTuples_completedGroup_logEvents___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v4 = *(id *)(a1 + 32);
  uint64_t v28 = [v4 countByEnumeratingWithState:&v29 objects:v33 count:16];
  if (v28)
  {
    uint64_t v5 = *(void *)v30;
    uint64_t v26 = *(void *)v30;
    id v24 = v3;
    do
    {
      for (uint64_t i = 0; i != v28; ++i)
      {
        if (*(void *)v30 != v5) {
          objc_enumerationMutation(v4);
        }
        id v7 = *(void **)(*((void *)&v29 + 1) + 8 * i);
        int v8 = [v7 characteristic];
        id v9 = [v8 accessory];
        id v10 = *(void **)(a1 + 40);

        if (v9 == v10)
        {
          uint64_t v11 = [*(id *)(a1 + 48) objectForKeyedSubscript:*(void *)(a1 + 56)];
          id v12 = [*(id *)(a1 + 64) objectForKeyedSubscript:@"kRemoteMessageTransportAttributionKey"];
          objc_msgSend(v11, "setTransportType:", objc_msgSend(v12, "intValue"));

          id v13 = [v7 characteristic];
          uint64_t v14 = [v3 objectForKey:v13];

          if (([v11 isSubmitted] & 1) == 0)
          {
            uint64_t v15 = [*(id *)(a1 + 72) logEventSubmitter];
            uint64_t v16 = [v14 error];
            [v15 submitLogEvent:v11 error:v16];

            uint64_t v5 = v26;
          }
          if (v14 && *(void *)(a1 + 80))
          {
            unint64_t v17 = [v14 error];
            id v27 = +[HMDCharacteristicResponse responseWithRequest:v7 error:v17];

            id v25 = [v7 characteristic];
            id v18 = [v25 value];
            uint64_t v19 = [v14 valueUpdatedTime];
            uint64_t v20 = [v14 valueUpdatedStateNumber];
            uint64_t v21 = [v7 characteristic];
            [v21 notificationContext];
            v23 = id v22 = v4;
            [v27 setValue:v18 updatedTime:v19 stateNumber:v20 notificationContext:v23];

            id v4 = v22;
            id v3 = v24;

            uint64_t v5 = v26;
            [*(id *)(a1 + 80) addObject:v27];
          }
        }
      }
      uint64_t v28 = [v4 countByEnumeratingWithState:&v29 objects:v33 count:16];
    }
    while (v28);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 88));
}

- (void)_writeCharacteristicValues:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 withCompletionHandler:(id)a6
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v11 = a3;
  id v12 = a4;
  id v46 = a6;
  id v13 = objc_alloc(MEMORY[0x1E4F653F0]);
  uint64_t v14 = NSString;
  uint64_t v15 = MEMORY[0x1D94505D0](self, a2);
  uint64_t v16 = [v14 stringWithFormat:@"%@, %s:%ld", v15, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/Home/HMDHome.m", 25152];
  id v53 = (id)[v13 initWithName:v16];

  if ([(HMDHome *)self isResidentFirstAccessoryCommunicationEnabled])
  {
    BOOL v17 = [(HMDHome *)self isCurrentDeviceAvailableResident];
    id v18 = (void *)MEMORY[0x1D9452090]();
    uint64_t v19 = self;
    if (v17)
    {
      HMFGetOSLogHandle();
      uint64_t v20 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v21 = (id)objc_claimAutoreleasedReturnValue();
        id v22 = [v12 shortDescription];
        *(_DWORD *)buf = 138543618;
        id v55 = v21;
        __int16 v56 = 2112;
        uint64_t v57 = v22;
        _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@Running new accessory communication logic for resident. %@", buf, 0x16u);
      }
    }
    else
    {
      HMFGetOSLogHandle();
      uint64_t v20 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v30 = (id)objc_claimAutoreleasedReturnValue();
        long long v31 = [v12 shortDescription];
        *(_DWORD *)buf = 138543618;
        id v55 = v30;
        __int16 v56 = 2112;
        uint64_t v57 = v31;
        _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@Routing accessory write requests using Resident First logic. %@", buf, 0x16u);
      }
    }

    long long v32 = [(HMDHome *)v19 _createMessageForReadWriteRequest:v12 source:a5 withCompletionHandler:v46];
    id v33 = [(HMDHome *)v19 accessoryReaderWriter];
    [v33 submitWriteRequests:v11 sourceType:a5 requestMessage:v32];
  }
  else
  {
    id v23 = v11;
    id v24 = [MEMORY[0x1E4F1CA48] array];
    id v25 = [v12 identifier];
    char v26 = [v12 BOOLForKey:@"kMultiPartResponseKey"];
    id v45 = [v12 userForHome:self];
    char v43 = v26;
    dispatch_group_t v44 = dispatch_group_create();
    id v27 = [MEMORY[0x1E4F28E10] weakToStrongObjectsMapTable];
    uint64_t v28 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v23, "count"));
    [(HMDHome *)self _buildCharacteristicWriteRequest:v23 accessoryWriteRequestMapTable:v27 accessoryList:v28 responseTuples:v24 user:v45];
    long long v29 = [MEMORY[0x1E4F1CA60] dictionary];
    if (isWatch()
      && [(HMDHome *)self _passWriteRequestToCompanion:v27 requestMessage:v12 source:a5 remoteAccessories:v29 responseTuples:v24 withCompletionHandler:v46]|| [(HMDHome *)self _loadBalanceWriteRequestOnResidentForAccessory:v28 accessoryWriteRequestMapTable:v27 requestMessage:v12 source:a5 responseTuples:v24 withCompletionHandler:v46])
    {

      id v11 = v23;
    }
    else
    {
      uint64_t v34 = [MEMORY[0x1E4F1CA48] array];
      id v42 = v25;
      id v40 = v29;
      dispatch_group_t v35 = dispatch_group_create();
      [(HMDHome *)self _sendWriteRequestToAccessoryServer:v27 requestMessage:v12 source:a5 failedAccessories:v34 responseTuples:v24 activity:v53 waitGroup:v44 unreachableWaitGroup:v35];
      id v36 = dispatch_group_create();
      dispatch_group_enter(v36);
      dispatch_group_t v41 = v35;
      [(HMDHome *)self _waitForEarlyDispatchTimeout:v27 requestMessage:v12 source:a5 failedAccessories:v34 responseTuples:v24 activity:v53 unreachableWaitGroup:v35 failureWaitGroup:v36];
      [(HMDHome *)self _waitForWriteRequestFanOut:v27 requestMessage:v12 source:a5 responseTuples:v24 failedAccessories:v34 activity:v53 waitGroup:v44 failureWaitGroup:v36];
      uint64_t v37 = [(HMDHome *)self workQueue];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __82__HMDHome__writeCharacteristicValues_requestMessage_source_withCompletionHandler___block_invoke;
      block[3] = &unk_1E6A0A4B8;
      char v52 = v43;
      void block[4] = self;
      id v48 = v24;
      id v49 = v42;
      id v50 = v12;
      id v51 = v46;
      id v38 = v42;
      id v39 = v24;
      dispatch_group_notify(v36, v37, block);

      id v11 = v23;
    }
  }
  __HMFActivityScopeLeave();
}

uint64_t __82__HMDHome__writeCharacteristicValues_requestMessage_source_withCompletionHandler___block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = HMFGetLogIdentifier();
    id v6 = (void *)v5;
    id v7 = "multi";
    if (!*(unsigned char *)(a1 + 72)) {
      id v7 = "single";
    }
    int v9 = 138543618;
    uint64_t v10 = v5;
    __int16 v11 = 2080;
    id v12 = v7;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@Final notification for multi-write (%s part)", (uint8_t *)&v9, 0x16u);
  }
  return [*(id *)(a1 + 32) _notifyChangedCharacteristics:*(void *)(a1 + 40) identifier:*(void *)(a1 + 48) multiPartResponse:*(unsigned __int8 *)(a1 + 72) moreMessagesInMultipart:0 requestMessage:*(void *)(a1 + 56) withCompletionHandler:*(void *)(a1 + 64)];
}

- (id)_createMessageForReadWriteRequest:(id)a3 source:(unint64_t)a4 withCompletionHandler:(id)a5
{
  id v7 = a3;
  id v8 = a5;
  int v9 = [v7 internal];
  uint64_t v10 = (void *)[v9 copy];

  __int16 v11 = (void *)[objc_alloc((Class)objc_opt_class()) initWithInternalMessage:v10];
  objc_initWeak(&location, v11);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  void v15[2] = __74__HMDHome__createMessageForReadWriteRequest_source_withCompletionHandler___block_invoke;
  v15[3] = &unk_1E6A167C8;
  objc_copyWeak(&v19, &location);
  id v12 = v8;
  id v18 = v12;
  id v13 = v7;
  id v16 = v13;
  BOOL v17 = self;
  [v11 setResponseHandler:v15];

  objc_destroyWeak(&v19);
  objc_destroyWeak(&location);

  return v11;
}

void __74__HMDHome__createMessageForReadWriteRequest_source_withCompletionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v8 = _Block_copy(*(const void **)(a1 + 48));
  int v9 = v8;
  if (v8) {
    (*((void (**)(void *, id, id))v8 + 2))(v8, v5, v6);
  }

  uint64_t v10 = [*(id *)(a1 + 32) responseHandler];

  if (!v10)
  {
    __int16 v11 = (void *)MEMORY[0x1D9452090]();
    id v12 = *(id *)(a1 + 40);
    id v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      uint64_t v15 = [*(id *)(a1 + 32) shortDescription];
      int v16 = 138543618;
      BOOL v17 = v14;
      __int16 v18 = 2112;
      id v19 = v15;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_DEBUG, "%{public}@The response handler became nil for read/write request message: %@", (uint8_t *)&v16, 0x16u);
    }
    [WeakRetained setResponseHandler:0];
  }
}

- (void)_waitForWriteRequestFanOut:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 responseTuples:(id)a6 failedAccessories:(id)a7 activity:(id)a8 waitGroup:(id)a9 failureWaitGroup:(id)a10
{
  id v15 = a3;
  id v16 = a4;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  id v20 = a10;
  id v21 = a9;
  char v22 = [v16 BOOLForKey:@"kMultiPartResponseKey"];
  id v23 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __129__HMDHome__waitForWriteRequestFanOut_requestMessage_source_responseTuples_failedAccessories_activity_waitGroup_failureWaitGroup___block_invoke;
  block[3] = &unk_1E6A07000;
  id v32 = v19;
  id v33 = v18;
  char v40 = v22;
  id v34 = v17;
  dispatch_group_t v35 = self;
  id v36 = v20;
  id v37 = v15;
  id v38 = v16;
  unint64_t v39 = a5;
  id v24 = v16;
  id v25 = v15;
  id v26 = v20;
  id v27 = v17;
  id v28 = v18;
  id v29 = v19;
  dispatch_group_notify(v21, v23, block);
}

uint64_t __129__HMDHome__waitForWriteRequestFanOut_requestMessage_source_responseTuples_failedAccessories_activity_waitGroup_failureWaitGroup___block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 32) begin];
  if ([*(id *)(a1 + 40) count])
  {
    [*(id *)(a1 + 40) count];
    if (*(unsigned char *)(a1 + 96))
    {
      id v2 = [MEMORY[0x1E4F1CA48] array];
    }
    else
    {
      id v2 = *(id *)(a1 + 48);
    }
    id v3 = v2;
    [*(id *)(a1 + 32) begin];
    id v9 = *(id *)(a1 + 32);
    id v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = *(id *)(a1 + 56);
    HMFGetOSLogHandle();
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      __int16 v11 = v7;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Beginning bulk redispatch for write failed accessories", buf, 0xCu);
    }
    [*(id *)(a1 + 56) _redispatchWriteForAccessories:*(void *)(a1 + 40) dispatchGroup:*(void *)(a1 + 64) requestMap:*(void *)(a1 + 72) requestMessage:*(void *)(a1 + 80) source:*(void *)(a1 + 88) responseTuples:v3];
    __HMFActivityScopeLeave();

    [*(id *)(a1 + 40) removeAllObjects];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
  return [*(id *)(a1 + 32) end];
}

- (void)_waitForEarlyDispatchTimeout:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 failedAccessories:(id)a6 responseTuples:(id)a7 activity:(id)a8 unreachableWaitGroup:(id)a9 failureWaitGroup:(id)a10
{
  id v15 = a3;
  id v16 = a4;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  id v20 = a9;
  id v21 = a10;
  char v22 = [v16 BOOLForKey:@"kMultiPartResponseKey"];
  id v23 = dispatch_get_global_queue(0, 0);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __142__HMDHome__waitForEarlyDispatchTimeout_requestMessage_source_failedAccessories_responseTuples_activity_unreachableWaitGroup_failureWaitGroup___block_invoke;
  block[3] = &unk_1E6A08D08;
  id v33 = v20;
  id v34 = self;
  id v35 = v19;
  id v36 = v17;
  char v42 = v22;
  id v37 = v18;
  id v38 = v21;
  id v39 = v15;
  id v40 = v16;
  unint64_t v41 = a5;
  id v24 = v16;
  id v25 = v15;
  id v26 = v21;
  id v27 = v18;
  id v28 = v17;
  id v29 = v19;
  id v30 = v20;
  dispatch_async(v23, block);
}

void __142__HMDHome__waitForEarlyDispatchTimeout_requestMessage_source_failedAccessories_responseTuples_activity_unreachableWaitGroup_failureWaitGroup___block_invoke(uint64_t a1)
{
  id v2 = *(NSObject **)(a1 + 32);
  dispatch_time_t v3 = dispatch_time(0, 250000000);
  dispatch_group_wait(v2, v3);
  id v4 = [*(id *)(a1 + 40) workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __142__HMDHome__waitForEarlyDispatchTimeout_requestMessage_source_failedAccessories_responseTuples_activity_unreachableWaitGroup_failureWaitGroup___block_invoke_2;
  block[3] = &unk_1E6A07000;
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  char v18 = *(unsigned char *)(a1 + 104);
  id v5 = *(id *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 40);
  id v12 = v5;
  uint64_t v13 = v6;
  id v14 = *(id *)(a1 + 72);
  id v15 = *(id *)(a1 + 80);
  id v7 = *(id *)(a1 + 88);
  uint64_t v8 = *(void *)(a1 + 96);
  id v16 = v7;
  uint64_t v17 = v8;
  dispatch_async(v4, block);
}

void __142__HMDHome__waitForEarlyDispatchTimeout_requestMessage_source_failedAccessories_responseTuples_activity_unreachableWaitGroup_failureWaitGroup___block_invoke_2(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)[*(id *)(a1 + 40) copy];
  if ([v2 count])
  {
    [v2 count];
    if (*(unsigned char *)(a1 + 96))
    {
      id v3 = [MEMORY[0x1E4F1CA48] array];
    }
    else
    {
      id v3 = *(id *)(a1 + 48);
    }
    id v4 = v3;
    [*(id *)(a1 + 32) begin];
    id v9 = *(id *)(a1 + 32);
    id v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = *(id *)(a1 + 56);
    HMFGetOSLogHandle();
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v11 = v8;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Beginning bulk redispatch for unreachable write failed accessories", buf, 0xCu);
    }
    [*(id *)(a1 + 56) _redispatchWriteForAccessories:v2 dispatchGroup:*(void *)(a1 + 64) requestMap:*(void *)(a1 + 72) requestMessage:*(void *)(a1 + 80) source:*(void *)(a1 + 88) responseTuples:v4];
    __HMFActivityScopeLeave();

    [*(id *)(a1 + 40) removeObjectsInArray:v2];
  }
}

- (void)_sendWriteRequestToAccessoryServer:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 failedAccessories:(id)a6 responseTuples:(id)a7 activity:(id)a8 waitGroup:(id)a9 unreachableWaitGroup:(id)a10
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  id v14 = a3;
  id v15 = a4;
  id v38 = a6;
  id v40 = a7;
  id v32 = a8;
  dispatch_group_t group = a9;
  char v43 = a10;
  char v16 = [v15 BOOLForKey:@"kDoNotForwardMessageKey"];
  char v36 = [v15 BOOLForKey:@"kMultiPartResponseKey"];
  uint64_t v17 = v15;
  id v39 = [v15 identifier];
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  id obj = v14;
  uint64_t v41 = [obj countByEnumeratingWithState:&v57 objects:v67 count:16];
  if (v41)
  {
    char v34 = v16 ^ 1;
    uint64_t v33 = *(void *)v58;
    do
    {
      uint64_t v18 = 0;
      id v19 = v32;
      do
      {
        if (*(void *)v58 != v33) {
          objc_enumerationMutation(obj);
        }
        id v20 = *(void **)(*((void *)&v57 + 1) + 8 * v18);
        dispatch_group_enter(group);
        dispatch_group_enter(v43);
        id v21 = [obj objectForKey:v20];
        char v22 = [v20 shortDescription];
        [v19 markWithFormat:@"Starting write for accessory: %@", v22];

        id v23 = [v20 uuid];
        id v24 = (void *)MEMORY[0x1D9452090]();
        id v25 = self;
        id v26 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          id v27 = HMFGetLogIdentifier();
          uint64_t v28 = [v21 count];
          *(_DWORD *)buf = 138543874;
          id v62 = v27;
          __int16 v63 = 2112;
          long long v64 = v23;
          __int16 v65 = 2048;
          uint64_t v66 = v28;
          _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_DEFAULT, "%{public}@Starting write for accessory %@ with %ld requests", buf, 0x20u);

          id v19 = v32;
        }

        [v21 count];
        id v29 = [(HMDHome *)v25 workQueue];
        v45[0] = MEMORY[0x1E4F143A8];
        v45[1] = 3221225472;
        v45[2] = __141__HMDHome__sendWriteRequestToAccessoryServer_requestMessage_source_failedAccessories_responseTuples_activity_waitGroup_unreachableWaitGroup___block_invoke;
        v45[3] = &unk_1E6A06FD8;
        void v45[4] = v25;
        id v46 = v23;
        id v47 = v20;
        id v48 = v19;
        char v55 = v34;
        id v49 = v38;
        char v56 = v36;
        id v50 = v39;
        id v30 = v17;
        id v51 = v30;
        id v52 = v40;
        id v53 = group;
        long long v54 = v43;
        id v31 = v23;
        [v20 writeCharacteristicValues:v21 source:a5 message:v30 queue:v29 completionHandler:v45];

        ++v18;
      }
      while (v41 != v18);
      uint64_t v41 = [obj countByEnumeratingWithState:&v57 objects:v67 count:16];
    }
    while (v41);
  }
}

void __141__HMDHome__sendWriteRequestToAccessoryServer_requestMessage_source_failedAccessories_responseTuples_activity_waitGroup_unreachableWaitGroup___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = HMFGetLogIdentifier();
    uint64_t v8 = *(void *)(a1 + 40);
    id v9 = [*(id *)(a1 + 48) uniqueIdentifier];
    *(_DWORD *)buf = 138544130;
    id v32 = v7;
    __int16 v33 = 2112;
    uint64_t v34 = v8;
    __int16 v35 = 2112;
    char v36 = v9;
    __int16 v37 = 2048;
    uint64_t v38 = [v3 count];
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Completed write for accessory %@/%@ with %ld responses", buf, 0x2Au);
  }
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v10 = v3;
  uint64_t v11 = [v10 countByEnumeratingWithState:&v26 objects:v30 count:16];
  if (!v11)
  {
LABEL_15:

    goto LABEL_20;
  }
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)v27;
  uint64_t v14 = *MEMORY[0x1E4F2D140];
LABEL_5:
  uint64_t v15 = 0;
  while (1)
  {
    if (*(void *)v27 != v13) {
      objc_enumerationMutation(v10);
    }
    char v16 = objc_msgSend(*(id *)(*((void *)&v26 + 1) + 8 * v15), "error", (void)v26);
    [v16 domain];

    [v16 code];
    if (!v16) {
      goto LABEL_13;
    }
    uint64_t v17 = [v16 domain];
    if (([v17 isEqualToString:v14] & 1) == 0)
    {

      goto LABEL_13;
    }
    uint64_t v18 = [v16 code];

    if (v18 == 4) {
      break;
    }
LABEL_13:

    if (v12 == ++v15)
    {
      uint64_t v12 = [v10 countByEnumeratingWithState:&v26 objects:v30 count:16];
      if (v12) {
        goto LABEL_5;
      }
      goto LABEL_15;
    }
  }
  id v19 = (void *)MEMORY[0x1D9452090]();
  id v20 = *(id *)(a1 + 32);
  id v21 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    id v23 = HMFGetLogIdentifier();
    uint64_t v24 = *(void *)(a1 + 40);
    id v25 = HMFBooleanToString();
    *(_DWORD *)buf = 138543874;
    id v32 = v23;
    __int16 v33 = 2112;
    uint64_t v34 = v24;
    __int16 v35 = 2112;
    char v36 = v25;
    _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_ERROR, "%{public}@Write for accessory with UUID: %@ failed with unreachable error, can forward to resident: %@", buf, 0x20u);
  }

  if (*(unsigned char *)(a1 + 112))
  {
    [*(id *)(a1 + 64) addObject:*(void *)(a1 + 48)];
    goto LABEL_23;
  }
LABEL_20:
  if (*(unsigned char *)(a1 + 113)) {
    [*(id *)(a1 + 32) _notifyChangedCharacteristics:v10 identifier:*(void *)(a1 + 72) multiPartResponse:1 moreMessagesInMultipart:1 requestMessage:*(void *)(a1 + 80) withCompletionHandler:0];
  }
  else {
    [*(id *)(a1 + 88) addObjectsFromArray:v10];
  }
LABEL_23:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 96));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));
}

- (BOOL)_passWriteRequestToCompanion:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 remoteAccessories:(id)a6 responseTuples:(id)a7 withCompletionHandler:(id)a8
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v27 = a3;
  id v13 = a4;
  id v14 = a6;
  id v15 = a7;
  id v25 = a8;
  char v23 = [v13 BOOLForKey:@"kMultiPartResponseKey"];
  long long v26 = [v13 identifier];
  if (isWatch() && [(HMDHome *)self remoteAccessIsEnabled])
  {
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    id v16 = v27;
    uint64_t v17 = [v16 countByEnumeratingWithState:&v36 objects:v40 count:16];
    if (v17)
    {
      uint64_t v18 = *(void *)v37;
      do
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          if (*(void *)v37 != v18) {
            objc_enumerationMutation(v16);
          }
          id v20 = [v16 objectForKey:*(void *)(*((void *)&v36 + 1) + 8 * i)];
          +[HMDHome appendCharacteristicsToAccessoryList:v14 responseTuples:v15 forMultipleCharacteristicsRemoteWrite:v20 message:v13];
        }
        uint64_t v17 = [v16 countByEnumeratingWithState:&v36 objects:v40 count:16];
      }
      while (v17);
    }

    objc_initWeak(&location, self);
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    void v28[2] = __117__HMDHome__passWriteRequestToCompanion_requestMessage_source_remoteAccessories_responseTuples_withCompletionHandler___block_invoke;
    v28[3] = &unk_1E6A07AD0;
    objc_copyWeak(&v33, &location);
    char v34 = v23;
    id v29 = v15;
    id v30 = v26;
    id v31 = v13;
    id v32 = v25;
    [(HMDHome *)self _writeCharacteristicValuesForAccessories:v14 writeRequestMap:v16 responseTuples:v29 requestMessage:v31 viaDevice:0 source:a5 completionHandler:v28];

    objc_destroyWeak(&v33);
    objc_destroyWeak(&location);
    BOOL v21 = 1;
  }
  else
  {
    BOOL v21 = 0;
  }

  return v21;
}

void __117__HMDHome__passWriteRequestToCompanion_requestMessage_source_remoteAccessories_responseTuples_withCompletionHandler___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    id v4 = [WeakRetained workQueue];
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = __117__HMDHome__passWriteRequestToCompanion_requestMessage_source_remoteAccessories_responseTuples_withCompletionHandler___block_invoke_2;
    v5[3] = &unk_1E6A0A4B8;
    void v5[4] = v3;
    char v10 = *(unsigned char *)(a1 + 72);
    id v6 = *(id *)(a1 + 32);
    id v7 = *(id *)(a1 + 40);
    id v8 = *(id *)(a1 + 48);
    id v9 = *(id *)(a1 + 56);
    dispatch_async(v4, v5);
  }
}

uint64_t __117__HMDHome__passWriteRequestToCompanion_requestMessage_source_remoteAccessories_responseTuples_withCompletionHandler___block_invoke_2(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (*(unsigned char *)(a1 + 72)) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 40);
  }
  return [v2 _notifyChangedCharacteristics:v3 identifier:*(void *)(a1 + 48) multiPartResponse:*(unsigned __int8 *)(a1 + 72) != 0 moreMessagesInMultipart:0 requestMessage:*(void *)(a1 + 56) withCompletionHandler:*(void *)(a1 + 64)];
}

- (BOOL)_loadBalanceWriteRequestOnResidentForAccessory:(id)a3 accessoryWriteRequestMapTable:(id)a4 requestMessage:(id)a5 source:(unint64_t)a6 responseTuples:(id)a7 withCompletionHandler:(id)a8
{
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a7;
  id v28 = a8;
  char v18 = [v16 BOOLForKey:@"kMultiPartResponseKey"];
  id v19 = [v16 identifier];
  [MEMORY[0x1E4F6A278] currentTime];
  uint64_t v21 = v20;
  char v22 = [(HMDHome *)self primaryResident];
  int v23 = [v22 isCurrentDevice];

  if (v23)
  {
    id v27 = v14;
    uint64_t v24 = dispatch_group_create();
    [(HMDHome *)self _loadBalancedRedispatchForAccessories:v27 source:a6 dispatchGroup:v24 writeRequestMap:v15 requestMessage:v16 responseTuples:v17];
    id v25 = [(HMDHome *)self workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __147__HMDHome__loadBalanceWriteRequestOnResidentForAccessory_accessoryWriteRequestMapTable_requestMessage_source_responseTuples_withCompletionHandler___block_invoke;
    block[3] = &unk_1E6A06FB0;
    void block[4] = self;
    char v37 = v18;
    id v30 = v17;
    id v31 = v16;
    uint64_t v35 = v21;
    id v32 = v15;
    id v33 = v19;
    unint64_t v36 = a6;
    id v34 = v28;
    dispatch_group_notify(v24, v25, block);

    id v14 = v27;
  }

  return v23;
}

uint64_t __147__HMDHome__loadBalanceWriteRequestOnResidentForAccessory_accessoryWriteRequestMapTable_requestMessage_source_responseTuples_withCompletionHandler___block_invoke(uint64_t a1)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = HMFGetLogIdentifier();
    id v6 = (void *)v5;
    id v7 = "multi";
    if (!*(unsigned char *)(a1 + 96)) {
      id v7 = "single";
    }
    *(_DWORD *)buf = 138543618;
    uint64_t v61 = v5;
    __int16 v62 = 2080;
    __int16 v63 = v7;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@Final notification for multi-write - loadBalanceGroup primary resident (%s part)", buf, 0x16u);
  }
  if ([*(id *)(a1 + 40) count])
  {
    uint64_t v8 = [*(id *)(a1 + 48) dictionaryForKey:@"kAccessoriesListKey"];
    id v9 = *(void **)(a1 + 32);
    double v10 = *(double *)(a1 + 80);
    uint64_t v12 = *(void *)(a1 + 56);
    uint64_t v11 = *(void *)(a1 + 64);
    [*(id *)(a1 + 48) userForHome:v9];
    v14 = uint64_t v13 = a1;
    id v15 = [v14 uuid];
    uint64_t v16 = *(void *)(v13 + 88);
    id v17 = [*(id *)(v13 + 48) clientIdentifier];
    id v48 = (void *)v8;
    id v47 = [v9 _getLogEventsForOperation:1 startTime:v8 accessories:v12 requestMap:v11 identifier:v15 userUUID:v16 source:v10 bundleID:v17];

    char v18 = [MEMORY[0x1E4F1CA60] dictionary];
    long long v54 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    uint64_t v49 = v13;
    id v19 = *(id *)(v13 + 40);
    uint64_t v20 = [v19 countByEnumeratingWithState:&v54 objects:v59 count:16];
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = *(void *)v55;
      do
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          if (*(void *)v55 != v22) {
            objc_enumerationMutation(v19);
          }
          uint64_t v24 = *(void **)(*((void *)&v54 + 1) + 8 * i);
          id v25 = [v24 request];
          long long v26 = [v25 characteristic];
          id v27 = [v26 accessory];

          if (v27)
          {
            id v28 = [v24 error];

            if (v28)
            {
              uint64_t v29 = [v27 bridge];
              id v30 = (void *)v29;
              if (v29) {
                id v31 = (void *)v29;
              }
              else {
                id v31 = v27;
              }
              id v32 = v31;

              id v33 = [v24 error];
              id v34 = [v32 uuid];
              uint64_t v35 = [v34 UUIDString];
              [v18 setObject:v33 forKeyedSubscript:v35];

              id v27 = v32;
            }
          }
        }
        uint64_t v21 = [v19 countByEnumeratingWithState:&v54 objects:v59 count:16];
      }
      while (v21);
    }

    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    id v36 = v47;
    uint64_t v37 = [v36 countByEnumeratingWithState:&v50 objects:v58 count:16];
    a1 = v49;
    if (v37)
    {
      uint64_t v38 = v37;
      uint64_t v39 = *(void *)v51;
      do
      {
        for (uint64_t j = 0; j != v38; ++j)
        {
          if (*(void *)v51 != v39) {
            objc_enumerationMutation(v36);
          }
          uint64_t v41 = *(void *)(*((void *)&v50 + 1) + 8 * j);
          char v42 = [*(id *)(a1 + 32) logEventSubmitter];
          char v43 = [v36 objectForKeyedSubscript:v41];
          dispatch_group_t v44 = [v18 objectForKeyedSubscript:v41];
          if (v44)
          {
            id v45 = [v18 objectForKeyedSubscript:v41];
            [v42 submitLogEvent:v43 error:v45];
          }
          else
          {
            [v42 submitLogEvent:v43 error:0];
          }

          a1 = v49;
        }
        uint64_t v38 = [v36 countByEnumeratingWithState:&v50 objects:v58 count:16];
      }
      while (v38);
    }
  }
  return [*(id *)(a1 + 32) _notifyChangedCharacteristics:*(void *)(a1 + 40) identifier:*(void *)(a1 + 64) multiPartResponse:*(unsigned __int8 *)(a1 + 96) moreMessagesInMultipart:0 requestMessage:*(void *)(a1 + 48) withCompletionHandler:*(void *)(a1 + 72)];
}

- (void)_buildCharacteristicWriteRequest:(id)a3 accessoryWriteRequestMapTable:(id)a4 accessoryList:(id)a5 responseTuples:(id)a6 user:(id)a7
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  id v11 = a3;
  id v46 = a4;
  id v47 = a5;
  id v51 = a6;
  id v49 = a7;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  id obj = v11;
  uint64_t v12 = [obj countByEnumeratingWithState:&v53 objects:v61 count:16];
  if (v12)
  {
    uint64_t v14 = v12;
    uint64_t v52 = *(void *)v54;
    *(void *)&long long v13 = 138543618;
    long long v45 = v13;
    do
    {
      for (uint64_t i = 0; i != v14; ++i)
      {
        if (*(void *)v54 != v52) {
          objc_enumerationMutation(obj);
        }
        uint64_t v16 = *(void **)(*((void *)&v53 + 1) + 8 * i);
        id v17 = objc_msgSend(v16, "characteristic", v45);
        char v18 = [v17 service];
        id v19 = [v18 accessory];

        if (!v19)
        {
          id v19 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
          id v34 = (void *)MEMORY[0x1D9452090]();
          uint64_t v35 = self;
          id v36 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            uint64_t v37 = HMFGetLogIdentifier();
            *(_DWORD *)buf = v45;
            long long v58 = v37;
            __int16 v59 = 2112;
            long long v60 = v16;
            _os_log_impl(&dword_1D49D5000, v36, OS_LOG_TYPE_ERROR, "%{public}@Aborting characteristic write request: %@, accessory is nil", buf, 0x16u);
          }
          id v31 = +[HMDCharacteristicResponse responseWithRequest:v16 error:v19];
          id v32 = v51;
          id v33 = v31;
          goto LABEL_21;
        }
        uint64_t v20 = [v16 characteristic];
        uint64_t v21 = [v20 type];
        uint64_t v22 = [v16 service];
        int v23 = [v22 type];
        BOOL v24 = +[HMDHAPMetadata isOwnerPrivilegeRequiredForWritingCharacteristicType:v21 serviceType:v23];

        if (v24 && ([v49 isOwner] & 1) == 0)
        {
          uint64_t v38 = (void *)MEMORY[0x1D9452090]();
          uint64_t v39 = self;
          id v40 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          {
            uint64_t v41 = HMFGetLogIdentifier();
            *(_DWORD *)buf = v45;
            long long v58 = v41;
            __int16 v59 = 2112;
            long long v60 = v16;
            char v42 = v40;
            char v43 = "%{public}@Aborting characteristic write request that requires owner privilege: %@";
LABEL_26:
            _os_log_impl(&dword_1D49D5000, v42, OS_LOG_TYPE_ERROR, v43, buf, 0x16u);
          }
        }
        else
        {
          id v25 = [v16 characteristic];
          long long v26 = [v25 type];
          id v27 = [v16 service];
          id v28 = [v27 type];
          BOOL v29 = +[HMDHAPMetadata isAdminPrivilegeRequiredForWritingCharacteristicType:v26 serviceType:v28];

          if (!v29 || ([v49 isAdministrator] & 1) != 0)
          {
            if (([v19 isPrimary] & 1) == 0)
            {
              uint64_t v30 = [v19 bridge];

              id v19 = (void *)v30;
            }
            if (([v47 containsObject:v19] & 1) == 0) {
              [v47 addObject:v19];
            }
            id v31 = [v46 objectForKey:v19];
            if (!v31)
            {
              id v31 = [MEMORY[0x1E4F1CA48] array];
              [v46 setObject:v31 forKey:v19];
            }
            id v32 = v31;
            id v33 = v16;
LABEL_21:
            [v32 addObject:v33];
            goto LABEL_28;
          }
          uint64_t v38 = (void *)MEMORY[0x1D9452090]();
          uint64_t v39 = self;
          id v40 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          {
            uint64_t v41 = HMFGetLogIdentifier();
            *(_DWORD *)buf = v45;
            long long v58 = v41;
            __int16 v59 = 2112;
            long long v60 = v16;
            char v42 = v40;
            char v43 = "%{public}@Aborting characteristic write request that requires admin privilege: %@";
            goto LABEL_26;
          }
        }

        id v31 = [MEMORY[0x1E4F28C58] hmErrorWithCode:10];
        dispatch_group_t v44 = +[HMDCharacteristicResponse responseWithRequest:v16 error:v31];
        [v51 addObject:v44];

LABEL_28:
      }
      uint64_t v14 = [obj countByEnumeratingWithState:&v53 objects:v61 count:16];
    }
    while (v14);
  }
}

- (void)_redispatchWriteForAccessories:(id)a3 dispatchGroup:(id)a4 requestMap:(id)a5 requestMessage:(id)a6 source:(unint64_t)a7 responseTuples:(id)a8
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a8;
  id v19 = [(HMDHome *)self primaryResident];
  uint64_t v20 = [MEMORY[0x1E4F653F0] currentActivity];
  uint64_t v21 = (void *)v20;
  if (v19)
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __104__HMDHome__redispatchWriteForAccessories_dispatchGroup_requestMap_requestMessage_source_responseTuples___block_invoke;
    aBlock[3] = &unk_1E6A06F88;
    id v73 = v16;
    id v93 = v73;
    id v72 = v18;
    id v94 = v72;
    unint64_t v97 = a7;
    id v83 = v17;
    id v95 = v83;
    long long v96 = self;
    long long v81 = (void (**)(void *, void *, void *))_Block_copy(aBlock);
    uint64_t v22 = [MEMORY[0x1E4F28E10] strongToStrongObjectsMapTable];
    long long v80 = self;
    long long v82 = v22;
    id v67 = v16;
    id v68 = v14;
    uint64_t v76 = v19;
    id v77 = v15;
    id v65 = v18;
    id v66 = v17;
    unint64_t v74 = a7;
    uint64_t v75 = v21;
    if ([v19 isCurrentDevice])
    {
      long long v90 = 0u;
      long long v91 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      id v23 = v14;
      id obj = (id)[v23 countByEnumeratingWithState:&v88 objects:v106 count:16];
      if (obj)
      {
        uint64_t v24 = *(void *)v89;
        id v25 = v22;
        long long v26 = (char *)(v81 + 2);
        uint64_t v69 = *(void *)v89;
        id v70 = v23;
        do
        {
          for (uint64_t i = 0; i != obj; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v89 != v24) {
              objc_enumerationMutation(v23);
            }
            id v28 = *(void **)(*((void *)&v88 + 1) + 8 * i);
            BOOL v29 = [(HMDHome *)self homeManager];
            uint64_t v30 = [v29 residentMesh];
            id v31 = [v30 bestResidentDeviceForAccessory:v28];

            if (v31)
            {
              id v32 = [v25 objectForKey:v31];
              id v33 = v32;
              if (v32)
              {
                id v34 = v32;
              }
              else
              {
                id v34 = [MEMORY[0x1E4F1CA48] array];
              }
              id v47 = v34;

              [v47 addObject:v28];
              [v25 setObject:v47 forKey:v31];
            }
            else
            {
              uint64_t v35 = MEMORY[0x1D9452090]();
              id v36 = self;
              uint64_t v37 = (void *)v35;
              uint64_t v38 = v36;
              uint64_t v39 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
              {
                id v40 = HMFGetLogIdentifier();
                uint64_t v41 = [v28 uuid];
                char v42 = [v41 UUIDString];
                [v28 uniqueIdentifier];
                __int16 v71 = v37;
                v44 = char v43 = v26;
                *(_DWORD *)buf = 138543874;
                id v101 = v40;
                __int16 v102 = 2112;
                unint64_t v103 = v42;
                __int16 v104 = 2112;
                id v105 = v44;
                _os_log_impl(&dword_1D49D5000, v39, OS_LOG_TYPE_INFO, "%{public}@Write bulk redispatching failing for %@/%@ (No Mesh Redirect)", buf, 0x20u);

                long long v26 = v43;
                uint64_t v37 = v71;

                id v25 = v82;
                uint64_t v24 = v69;

                id v23 = v70;
              }

              id v99 = v28;
              long long v45 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v99 count:1];
              id v46 = [MEMORY[0x1E4F28C58] hmErrorWithCode:4];
              v81[2](v81, v45, v46);

              id v47 = [v28 uuid];
              self = v80;
            }
          }
          id obj = (id)[v23 countByEnumeratingWithState:&v88 objects:v106 count:16];
        }
        while (obj);
      }
      else
      {
        id v25 = v22;
      }
    }
    else
    {
      id v23 = (id)[v14 mutableCopy];
      [v22 setObject:v23 forKey:v19];
      id v25 = v22;
    }

    int v48 = [v83 BOOLForKey:@"kMultiPartResponseKey"];
    long long v84 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    id obja = [v25 keyEnumerator];
    uint64_t v49 = [obja countByEnumeratingWithState:&v84 objects:v98 count:16];
    if (v49)
    {
      uint64_t v50 = v49;
      uint64_t v51 = *(void *)v85;
      if (v48) {
        id v52 = v83;
      }
      else {
        id v52 = 0;
      }
      do
      {
        for (uint64_t j = 0; j != v50; ++j)
        {
          if (*(void *)v85 != v51) {
            objc_enumerationMutation(obja);
          }
          long long v54 = *(void **)(*((void *)&v84 + 1) + 8 * j);
          long long v55 = [v25 objectForKey:v54];
          long long v56 = [v83 remoteSourceDevice];
          long long v57 = [v54 device];
          int v58 = [v56 isEqual:v57];

          if (v58)
          {
            __int16 v59 = (void *)MEMORY[0x1D9452090]();
            long long v60 = self;
            uint64_t v61 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
            {
              uint64_t v62 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543874;
              id v101 = v62;
              __int16 v102 = 2112;
              unint64_t v103 = v55;
              __int16 v104 = 2112;
              id v105 = v83;
              _os_log_impl(&dword_1D49D5000, v61, OS_LOG_TYPE_ERROR, "%{public}@Skipping write bulk redispatching for %@ (Same source device). Message: %@", buf, 0x20u);
            }
            __int16 v63 = [MEMORY[0x1E4F28C58] hmErrorWithCode:4];
            v81[2](v81, v55, v63);

            self = v80;
          }
          else if (v54 == v76)
          {
            [(HMDHome *)self _reallyRedispatchWritesToDevice:0 accessories:v55 dispatchGroup:v77 requestMap:v73 requestMessage:v52 source:v74 responseTuples:v72 activity:v75];
          }
          else
          {
            uint64_t v64 = [v54 device];
            [(HMDHome *)self _reallyRedispatchWritesToDevice:v64 accessories:v55 dispatchGroup:v77 requestMap:v73 requestMessage:v52 source:v74 responseTuples:v72 activity:v75];
          }
          id v25 = v82;
        }
        uint64_t v50 = [obja countByEnumeratingWithState:&v84 objects:v98 count:16];
      }
      while (v50);
    }

    id v16 = v67;
    id v14 = v68;
    id v19 = v76;
    id v15 = v77;
    id v18 = v65;
    id v17 = v66;
    uint64_t v21 = v75;
  }
  else
  {
    [(HMDHome *)self _reallyRedispatchWritesToDevice:0 accessories:v14 dispatchGroup:v15 requestMap:v16 requestMessage:v17 source:a7 responseTuples:v18 activity:v20];
  }
}

void __104__HMDHome__redispatchWriteForAccessories_dispatchGroup_requestMap_requestMessage_source_responseTuples___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  id v5 = a3;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  id obj = v4;
  uint64_t v32 = [v4 countByEnumeratingWithState:&v41 objects:v46 count:16];
  if (v32)
  {
    uint64_t v31 = *(void *)v42;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v42 != v31) {
          objc_enumerationMutation(obj);
        }
        uint64_t v34 = *(void *)(*((void *)&v41 + 1) + 8 * v6);
        uint64_t v35 = v6;
        id v7 = objc_msgSend(*(id *)(a1 + 32), "objectForKey:");
        uint64_t v8 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v7, "count"));
        id v9 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v7, "count"));
        long long v37 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        id v10 = v7;
        uint64_t v11 = [v10 countByEnumeratingWithState:&v37 objects:v45 count:16];
        if (v11)
        {
          uint64_t v12 = v11;
          uint64_t v13 = *(void *)v38;
          do
          {
            for (uint64_t i = 0; i != v12; ++i)
            {
              if (*(void *)v38 != v13) {
                objc_enumerationMutation(v10);
              }
              id v15 = *(void **)(*((void *)&v37 + 1) + 8 * i);
              id v16 = *(void **)(a1 + 40);
              id v17 = +[HMDCharacteristicResponse responseWithRequest:v15 error:v5];
              [v16 addObject:v17];

              id v18 = [v15 characteristic];
              [v8 addObject:v18];

              id v19 = [v15 value];
              if (v19)
              {
                [v9 addObject:v19];
              }
              else
              {
                uint64_t v20 = [MEMORY[0x1E4F1CA98] null];
                [v9 addObject:v20];
              }
            }
            uint64_t v12 = [v10 countByEnumeratingWithState:&v37 objects:v45 count:16];
          }
          while (v12);
        }

        uint64_t v21 = [HMDCharacteristicReadWriteLogEvent alloc];
        uint64_t v33 = *(void *)(a1 + 64);
        uint64_t v22 = [*(id *)(a1 + 48) identifier];
        id v23 = [*(id *)(a1 + 48) clientIdentifier];
        uint64_t v24 = [*(id *)(a1 + 48) userForHome:*(void *)(a1 + 56)];
        id v25 = [v24 uuid];
        LOBYTE(v29) = 0;
        LOBYTE(v28) = 1;
        long long v26 = [(HMDCharacteristicReadWriteLogEvent *)v21 initWithCharacteristics:v8 hmdAccessory:v34 hapAccessory:0 source:v33 isWriteOperation:1 isTimedWrite:0 isLocal:v28 transactionId:v22 isCached:v29 bundleId:v23 userUUID:v25 writtenValues:v9];

        id v27 = [*(id *)(a1 + 56) logEventSubmitter];
        [v27 submitLogEvent:v26 error:v5];

        uint64_t v6 = v35 + 1;
      }
      while (v35 + 1 != v32);
      uint64_t v32 = [obj countByEnumeratingWithState:&v41 objects:v46 count:16];
    }
    while (v32);
  }
}

- (void)_reallyRedispatchWritesToDevice:(id)a3 accessories:(id)a4 dispatchGroup:(id)a5 requestMap:(id)a6 requestMessage:(id)a7 source:(unint64_t)a8 responseTuples:(id)a9 activity:(id)a10
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  id v38 = a3;
  id v15 = a4;
  id v16 = a5;
  id v45 = a6;
  id v17 = a7;
  id v18 = a9;
  uint64_t v35 = v16;
  id v36 = a10;
  dispatch_group_enter(v16);
  id v19 = self;
  uint64_t v20 = [(HMDHome *)self primaryResident];
  uint64_t v21 = [v20 device];

  uint64_t v22 = [MEMORY[0x1E4F1CA60] dictionary];
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  id obj = v15;
  uint64_t v46 = [obj countByEnumeratingWithState:&v50 objects:v62 count:16];
  if (v46)
  {
    uint64_t v44 = *(void *)v51;
    id v41 = v18;
    id v42 = v17;
    long long v40 = v21;
    long long v39 = v22;
    do
    {
      for (uint64_t i = 0; i != v46; ++i)
      {
        if (*(void *)v51 != v44) {
          objc_enumerationMutation(obj);
        }
        uint64_t v24 = *(void **)(*((void *)&v50 + 1) + 8 * i);
        context = (void *)MEMORY[0x1D9452090]();
        id v25 = v19;
        long long v26 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          id v27 = HMFGetLogIdentifier();
          uint64_t v28 = [v24 name];
          uint64_t v29 = [v24 uuid];
          uint64_t v30 = [v29 UUIDString];
          [v24 uniqueIdentifier];
          v32 = uint64_t v31 = v19;
          *(_DWORD *)buf = 138544130;
          long long v55 = v27;
          __int16 v56 = 2112;
          long long v57 = v28;
          __int16 v58 = 2112;
          __int16 v59 = v30;
          __int16 v60 = 2112;
          uint64_t v61 = v32;
          _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_INFO, "%{public}@Write bulk redispatching accessory %@/%@/%@ to resident", buf, 0x2Au);

          id v19 = v31;
          uint64_t v22 = v39;

          id v18 = v41;
          uint64_t v21 = v40;

          id v17 = v42;
        }

        [v21 isCurrentDevice];
        [v24 uuid];

        [v21 identifier];
        uint64_t v33 = [v45 objectForKey:v24];
        +[HMDHome appendCharacteristicsToAccessoryList:v22 responseTuples:v18 forMultipleCharacteristicsRemoteWrite:v33 message:v17];
      }
      uint64_t v46 = [obj countByEnumeratingWithState:&v50 objects:v62 count:16];
    }
    while (v46);
  }

  v48[0] = MEMORY[0x1E4F143A8];
  v48[1] = 3221225472;
  void v48[2] = __126__HMDHome__reallyRedispatchWritesToDevice_accessories_dispatchGroup_requestMap_requestMessage_source_responseTuples_activity___block_invoke;
  v48[3] = &unk_1E6A18C18;
  uint64_t v49 = v35;
  uint64_t v34 = v35;
  [(HMDHome *)v19 _writeCharacteristicValuesForAccessories:v22 writeRequestMap:v45 responseTuples:v18 requestMessage:v17 viaDevice:v38 source:a8 completionHandler:v48];
}

void __126__HMDHome__reallyRedispatchWritesToDevice_accessories_dispatchGroup_requestMap_requestMessage_source_responseTuples_activity___block_invoke(uint64_t a1)
{
}

- (void)_loadBalancedRedispatchForAccessories:(id)a3 source:(unint64_t)a4 dispatchGroup:(id)a5 writeRequestMap:(id)a6 requestMessage:(id)a7 responseTuples:(id)a8
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  id v58 = a3;
  dispatch_group_t group = a5;
  id v57 = a6;
  id v60 = a7;
  id v55 = a8;
  id v84 = [MEMORY[0x1E4F653F0] currentActivity];
  char v54 = [v60 BOOLForKey:@"kMultiPartResponseKey"];
  uint64_t v61 = [v58 sortedArrayUsingComparator:&__block_literal_global_1486];
  uint64_t v13 = [(HMDHome *)self homeManager];
  id v14 = [v13 residentMesh];
  id v66 = [v14 balancedResidentMapForAccessories:v61];

  id v15 = (void *)MEMORY[0x1D9452090]();
  uint64_t v62 = self;
  HMFGetOSLogHandle();
  id v16 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    id v17 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543874;
    long long v87 = v17;
    __int16 v88 = 2112;
    id v89 = v61;
    __int16 v90 = 2112;
    long long v91 = v66;
    _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, "%{public}@Balanced Resident Map for accessories: %@ -> %@", buf, 0x20u);
  }
  dispatch_group_enter(group);
  uint64_t v64 = [(HMDHome *)v62 primaryResident];
  uint64_t v63 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v61, "count"));
  id v18 = [(HMDHome *)v62 primaryResident];
  int v19 = [v18 isCurrentDevice];

  if (v19)
  {
    uint64_t v20 = (void *)MEMORY[0x1D9452090]();
    uint64_t v21 = v62;
    HMFGetOSLogHandle();
    uint64_t v22 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      id v23 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v87 = v23;
      _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_DEBUG, "%{public}@Checking for local reachability on primary resident", buf, 0xCu);
    }
    long long v82 = 0u;
    long long v83 = 0u;
    long long v81 = 0u;
    long long v80 = 0u;
    id obj = v61;
    uint64_t v24 = [obj countByEnumeratingWithState:&v80 objects:v85 count:16];
    if (v24)
    {
      uint64_t v25 = *(void *)v81;
      do
      {
        uint64_t v26 = 0;
        do
        {
          if (*(void *)v81 != v25) {
            objc_enumerationMutation(obj);
          }
          id v27 = *(id *)(*((void *)&v80 + 1) + 8 * v26);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            uint64_t v28 = v27;
          }
          else {
            uint64_t v28 = 0;
          }
          id v29 = v28;

          if (v29)
          {
            if ([v29 custom1WoBLE])
            {
              uint64_t v30 = (void *)MEMORY[0x1D9452090]();
              uint64_t v31 = v21;
              HMFGetOSLogHandle();
              uint64_t v32 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
              {
                uint64_t v33 = HMFGetLogIdentifier();
                *(_DWORD *)buf = 138543618;
                long long v87 = v33;
                __int16 v88 = 2112;
                id v89 = v29;
                _os_log_impl(&dword_1D49D5000, v32, OS_LOG_TYPE_INFO, "%{public}@Adding accessory %@ supporting custom1WoBLE to balanced resident map", buf, 0x16u);
              }
              [(HMDHome *)v31 _addAccessoryToBalancedResidentMap:v29 residentDevice:v64 balancedResidentMap:v66];
            }
            uint64_t v34 = [(HMDHome *)v21 __residentDeviceForAccessory:v27 fromMap:v66];
            BOOL v35 = v34 == 0;

            if (v35)
            {
              if ([v29 hasBTLELink])
              {
                char v79 = 0;
                id v36 = [v29 identifier];
                [(HMDHome *)v21 retrieveStateForTrackedAccessory:v36 stateNumber:0 isReachable:&v79 linkQuality:0 lastSeen:0];

                if (!v79) {
                  goto LABEL_31;
                }
                long long v37 = (void *)MEMORY[0x1D9452090]();
                id v38 = v21;
                HMFGetOSLogHandle();
                long long v39 = (id)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
                {
                  long long v40 = HMFGetLogIdentifier();
                  *(_DWORD *)buf = 138543874;
                  long long v87 = v40;
                  __int16 v88 = 2112;
                  id v89 = v29;
                  __int16 v90 = 2112;
                  long long v91 = v64;
                  _os_log_impl(&dword_1D49D5000, v39, OS_LOG_TYPE_INFO, "%{public}@Adding map for locally reachable accessory: %@ to resident: %@", buf, 0x20u);
                }
                [(HMDHome *)v38 _addAccessoryToBalancedResidentMap:v29 residentDevice:v64 balancedResidentMap:v66];
              }
              else
              {
                if (![v29 canWakeUpViaWoL])
                {
LABEL_31:
                  [v63 addObject:v29];
                  goto LABEL_20;
                }
                id v41 = (void *)MEMORY[0x1D9452090]();
                id v42 = v21;
                HMFGetOSLogHandle();
                long long v43 = (id)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                {
                  uint64_t v44 = HMFGetLogIdentifier();
                  *(_DWORD *)buf = 138543618;
                  long long v87 = v44;
                  __int16 v88 = 2112;
                  id v89 = v29;
                  _os_log_impl(&dword_1D49D5000, v43, OS_LOG_TYPE_INFO, "%{public}@Adding accessory %@ supporting WakeUpViaWoL to balanced resident map", buf, 0x16u);
                }
                [(HMDHome *)v42 _addAccessoryToBalancedResidentMap:v29 residentDevice:v64 balancedResidentMap:v66];
              }
            }
          }
LABEL_20:

          ++v26;
        }
        while (v24 != v26);
        uint64_t v45 = [obj countByEnumeratingWithState:&v80 objects:v85 count:16];
        uint64_t v24 = v45;
      }
      while (v45);
    }
  }
  uint64_t v46 = [(HMDHome *)v62 workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __116__HMDHome__loadBalancedRedispatchForAccessories_source_dispatchGroup_writeRequestMap_requestMessage_responseTuples___block_invoke_1487;
  block[3] = &unk_1E6A11EF0;
  id v68 = v84;
  id v69 = v63;
  id v70 = v57;
  id v71 = v55;
  id v72 = v66;
  id v73 = v64;
  id v74 = v60;
  uint64_t v75 = v62;
  uint64_t v76 = group;
  unint64_t v77 = a4;
  char v78 = v54;
  uint64_t v47 = group;
  id v48 = v60;
  id v49 = v64;
  id v50 = v66;
  id v51 = v55;
  id v52 = v57;
  id v53 = v63;
  dispatch_async(v46, block);

  __HMFActivityScopeLeave();
}

uint64_t __116__HMDHome__loadBalancedRedispatchForAccessories_source_dispatchGroup_writeRequestMap_requestMessage_responseTuples___block_invoke_1487(uint64_t a1)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 32) begin];
  long long v86 = 0u;
  long long v87 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  id v2 = *(id *)(a1 + 40);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v84 objects:v97 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v85;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v85 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v84 + 1) + 8 * i);
        uint64_t v8 = [*(id *)(a1 + 48) objectForKey:v7];
        [*(id *)(a1 + 48) removeObjectForKey:v7];
        id v9 = [MEMORY[0x1E4F28C58] hmErrorWithCode:4];
        id v10 = +[HMDCharacteristicResponse responsesWithRequests:v8 error:v9];

        [*(id *)(a1 + 56) addObjectsFromArray:v10];
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v84 objects:v97 count:16];
    }
    while (v4);
  }

  long long v82 = 0u;
  long long v83 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  id obj = [*(id *)(a1 + 64) keyEnumerator];
  uint64_t v58 = [obj countByEnumeratingWithState:&v80 objects:v96 count:16];
  if (v58)
  {
    uint64_t v57 = *(void *)v81;
    id v55 = v64;
    p_vtable = HMDEvent.vtable;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v81 != v57) {
          objc_enumerationMutation(obj);
        }
        uint64_t v59 = v12;
        uint64_t v13 = *(void **)(*((void *)&v80 + 1) + 8 * v12);
        uint64_t v14 = [MEMORY[0x1E4F1CA60] dictionary];
        id v15 = [*(id *)(a1 + 64) objectForKey:*(void *)(a1 + 72)];
        long long v76 = 0u;
        long long v77 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        id v62 = v15;
        uint64_t v16 = [v62 countByEnumeratingWithState:&v76 objects:v95 count:16];
        if (v16)
        {
          uint64_t v17 = v16;
          uint64_t v18 = *(void *)v77;
          do
          {
            for (uint64_t j = 0; j != v17; ++j)
            {
              if (*(void *)v77 != v18) {
                objc_enumerationMutation(v62);
              }
              id v20 = *(id *)(*((void *)&v76 + 1) + 8 * j);
              objc_opt_class();
              if (objc_opt_isKindOfClass()) {
                uint64_t v21 = v20;
              }
              else {
                uint64_t v21 = 0;
              }
              id v22 = v21;

              id v23 = [*(id *)(a1 + 48) objectForKey:v22];
              [p_vtable + 142 appendCharacteristicsToAccessoryList:v14 responseTuples:*(void *)(a1 + 56) forMultipleCharacteristicsRemoteWrite:v23 message:*(void *)(a1 + 80)];
            }
            uint64_t v17 = [v62 countByEnumeratingWithState:&v76 objects:v95 count:16];
          }
          while (v17);
        }
        id v60 = (void *)v14;

        int v24 = [v13 isCurrentDevice];
        uint64_t v25 = (void *)MEMORY[0x1D9452090]();
        id v26 = *(id *)(a1 + 88);
        id v27 = HMFGetOSLogHandle();
        BOOL v28 = os_log_type_enabled(v27, OS_LOG_TYPE_INFO);
        if (v24)
        {
          if (v28)
          {
            id v29 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543874;
            __int16 v90 = v29;
            __int16 v91 = 2112;
            uint64_t v92 = v60;
            __int16 v93 = 2112;
            id v94 = v13;
            _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_INFO, "%{public}@Writing to accessories: %@ on current Device: %@", buf, 0x20u);
          }
          [v60 count];
          long long v72 = 0u;
          long long v73 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          id v30 = v62;
          uint64_t v31 = [v30 countByEnumeratingWithState:&v72 objects:v88 count:16];
          if (v31)
          {
            uint64_t v32 = v31;
            id v61 = v30;
            uint64_t v33 = *(void *)v73;
            do
            {
              for (uint64_t k = 0; k != v32; ++k)
              {
                if (*(void *)v73 != v33) {
                  objc_enumerationMutation(v61);
                }
                id v35 = *(id *)(*((void *)&v72 + 1) + 8 * k);
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  id v36 = v35;
                }
                else {
                  id v36 = 0;
                }
                id v37 = v36;

                id v38 = [*(id *)(a1 + 48) objectForKey:v37];
                if (v38)
                {
                  dispatch_group_enter(*(dispatch_group_t *)(a1 + 96));
                  uint64_t v39 = *(void *)(a1 + 104);
                  uint64_t v40 = *(void *)(a1 + 80);
                  id v41 = [*(id *)(a1 + 88) workQueue];
                  v66[0] = MEMORY[0x1E4F143A8];
                  v66[1] = 3221225472;
                  void v66[2] = __116__HMDHome__loadBalancedRedispatchForAccessories_source_dispatchGroup_writeRequestMap_requestMessage_responseTuples___block_invoke_1492;
                  v66[3] = &unk_1E6A06F60;
                  v66[4] = *(void *)(a1 + 88);
                  v66[5] = v35;
                  id v42 = v37;
                  id v67 = v42;
                  char v71 = *(unsigned char *)(a1 + 112);
                  id v68 = *(id *)(a1 + 80);
                  id v69 = *(id *)(a1 + 56);
                  id v70 = *(id *)(a1 + 96);
                  [v42 writeCharacteristicValues:v38 source:v39 message:v40 queue:v41 completionHandler:v66];
                }
              }
              uint64_t v32 = [v61 countByEnumeratingWithState:&v72 objects:v88 count:16];
            }
            while (v32);
            p_vtable = (void **)(HMDEvent + 24);
            id v30 = v61;
          }
LABEL_48:

          uint64_t v45 = v60;
          goto LABEL_49;
        }
        if (v28)
        {
          long long v43 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543874;
          __int16 v90 = v43;
          __int16 v91 = 2112;
          uint64_t v92 = v60;
          __int16 v93 = 2112;
          id v94 = v13;
          _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_INFO, "%{public}@Dispatching accessories: %@ to resident: %@", buf, 0x20u);
        }
        id v44 = *(id *)(a1 + 32);
        uint64_t v45 = v60;
        [v60 count];
        uint64_t v46 = [v13 identifier];

        if (*(void *)(a1 + 48))
        {
          dispatch_group_enter(*(dispatch_group_t *)(a1 + 96));
          if (*(unsigned char *)(a1 + 112)) {
            uint64_t v47 = *(void *)(a1 + 80);
          }
          else {
            uint64_t v47 = 0;
          }
          id v48 = *(void **)(a1 + 88);
          uint64_t v49 = *(void *)(a1 + 48);
          uint64_t v50 = *(void *)(a1 + 56);
          id v51 = [v48 primaryResident];
          id v52 = [v51 device];
          if ([v13 isEqual:v52]) {
            uint64_t v13 = 0;
          }
          v63[0] = MEMORY[0x1E4F143A8];
          v63[1] = 3221225472;
          v64[0] = __116__HMDHome__loadBalancedRedispatchForAccessories_source_dispatchGroup_writeRequestMap_requestMessage_responseTuples___block_invoke_1497;
          v64[1] = &unk_1E6A18C18;
          uint64_t v53 = *(void *)(a1 + 104);
          id v65 = *(id *)(a1 + 96);
          objc_msgSend(v48, "_writeCharacteristicValuesForAccessories:writeRequestMap:responseTuples:requestMessage:viaDevice:source:completionHandler:", v60, v49, v50, v47, v13, v53, v63, v55);

          id v30 = v65;
          p_vtable = (void **)(HMDEvent + 24);
          goto LABEL_48;
        }
LABEL_49:

        uint64_t v12 = v59 + 1;
      }
      while (v59 + 1 != v58);
      uint64_t v58 = [obj countByEnumeratingWithState:&v80 objects:v96 count:16];
    }
    while (v58);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 96));
  return [*(id *)(a1 + 32) end];
}

void __116__HMDHome__loadBalancedRedispatchForAccessories_source_dispatchGroup_writeRequestMap_requestMessage_responseTuples___block_invoke_1492(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    uint64_t v8 = [*(id *)(a1 + 40) name];
    id v9 = [*(id *)(a1 + 40) uuid];
    id v10 = [v9 UUIDString];
    uint64_t v11 = [*(id *)(a1 + 48) uniqueIdentifier];
    int v14 = 138544386;
    id v15 = v7;
    __int16 v16 = 2112;
    uint64_t v17 = v8;
    __int16 v18 = 2112;
    int v19 = v10;
    __int16 v20 = 2112;
    uint64_t v21 = v11;
    __int16 v22 = 2048;
    uint64_t v23 = [v3 count];
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Load Balance completed write for accessory %@/%@/%@ with %ld responses", (uint8_t *)&v14, 0x34u);
  }
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v12 = *(void **)(a1 + 32);
    uint64_t v13 = [*(id *)(a1 + 56) identifier];
    [v12 _notifyChangedCharacteristics:v3 identifier:v13 multiPartResponse:1 moreMessagesInMultipart:1 requestMessage:*(void *)(a1 + 56) withCompletionHandler:0];
  }
  else
  {
    [*(id *)(a1 + 64) addObjectsFromArray:v3];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
}

void __116__HMDHome__loadBalancedRedispatchForAccessories_source_dispatchGroup_writeRequestMap_requestMessage_responseTuples___block_invoke_1497(uint64_t a1)
{
}

uint64_t __116__HMDHome__loadBalancedRedispatchForAccessories_source_dispatchGroup_writeRequestMap_requestMessage_responseTuples___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = [a2 uuid];
  uint64_t v6 = [v5 UUIDString];
  uint64_t v7 = [v4 uuid];

  uint64_t v8 = [v7 UUIDString];
  uint64_t v9 = [v6 compare:v8];

  return v9;
}

- (void)_addAccessoryToBalancedResidentMap:(id)a3 residentDevice:(id)a4 balancedResidentMap:(id)a5
{
  v14[1] = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  id v9 = a5;
  id v10 = [v9 objectForKey:v8];
  uint64_t v11 = v10;
  if (v10)
  {
    if (([v10 containsObject:v7] & 1) == 0) {
      [v11 addObject:v7];
    }
  }
  else
  {
    v14[0] = v7;
    uint64_t v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:1];
    uint64_t v13 = (void *)[v12 mutableCopy];
    [v9 setObject:v13 forKey:v8];
  }
}

- (id)__residentDeviceForAccessory:(id)a3 fromMap:(id)a4
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = a4;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v7 = objc_msgSend(v6, "keyEnumerator", 0);
  id v8 = (id)[v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v15;
    while (2)
    {
      for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v9) {
          objc_enumerationMutation(v7);
        }
        uint64_t v11 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        uint64_t v12 = [v6 objectForKey:v11];
        if ([v12 containsObject:v5])
        {
          id v8 = v11;

          goto LABEL_11;
        }
      }
      id v8 = (id)[v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v8) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v8;
}

- (void)_writeCharacteristicValuesForAccessories:(id)a3 writeRequestMap:(id)a4 responseTuples:(id)a5 requestMessage:(id)a6 viaDevice:(id)a7 source:(unint64_t)a8 completionHandler:(id)a9
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  id v86 = a3;
  id v83 = a4;
  id v78 = a5;
  id v16 = a6;
  id v82 = a7;
  id v77 = a9;
  id v17 = objc_alloc(MEMORY[0x1E4F653F0]);
  __int16 v18 = NSString;
  long long v84 = self;
  uint64_t v19 = MEMORY[0x1D94505D0](self, a2);
  __int16 v20 = [v18 stringWithFormat:@"%@, %s:%ld", v19, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/Home/HMDHome.m", 24257];
  long long v80 = (void *)[v17 initWithName:v20];

  dispatch_group_t group = dispatch_group_create();
  dispatch_group_enter(group);
  long long v81 = [MEMORY[0x1E4F1CA48] array];
  if ([v86 count])
  {
    uint64_t v21 = (void *)MEMORY[0x1D9452090]();
    __int16 v22 = self;
    uint64_t v23 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v24 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      long long v122 = v24;
      __int16 v123 = 2048;
      unint64_t v124 = a8;
      _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_DEBUG, "%{public}@Write operation source: %lu", buf, 0x16u);
    }
    [MEMORY[0x1E4F6A278] currentTime];
    double v26 = v25;
    id v27 = [v16 identifier];
    BOOL v28 = [v16 userForHome:v22];
    id v29 = [v28 uuid];
    id v30 = [v16 clientIdentifier];
    long long v75 = [(HMDHome *)v22 _getLogEventsForOperation:1 startTime:v86 accessories:v83 requestMap:v27 identifier:v29 userUUID:a8 source:v26 bundleID:v30];

    char v31 = [v16 BOOLForKey:@"kShortActionKey"];
    uint64_t v32 = [v16 uuidForKey:@"kActionSetUUID"];

    if (v32) {
      char v33 = 1;
    }
    else {
      char v33 = v31;
    }
    uint64_t v34 = [(HMDHome *)v22 uuid];
    long long v76 = [v34 UUIDString];

    v119[0] = @"kAccessoriesListKey";
    id v35 = (void *)[v86 copy];
    v120[0] = v35;
    v120[1] = v76;
    v119[1] = @"kHomeUUID";
    v119[2] = @"kDoNotForwardMessageKey";
    id v36 = [NSNumber numberWithInt:v82 != 0];
    v120[2] = v36;
    id v37 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v120 forKeys:v119 count:3];
    long long v79 = (void *)[v37 mutableCopy];

    if (v33)
    {
LABEL_29:
      uint64_t v115 = @"kShortActionKey";
      uint64_t v116 = MEMORY[0x1E4F1CC38];
      id v38 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v116 forKeys:&v115 count:1];
      [v79 addEntriesFromDictionary:v38];
    }
    else
    {
      long long v112 = 0u;
      long long v113 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      id v38 = v86;
      uint64_t v74 = [v38 countByEnumeratingWithState:&v110 objects:v118 count:16];
      if (v74)
      {
        uint64_t v39 = *(void *)v111;
        uint64_t v73 = *(void *)v111;
        do
        {
          for (uint64_t i = 0; i != v74; ++i)
          {
            if (*(void *)v111 != v39) {
              objc_enumerationMutation(v38);
            }
            id v41 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:*(void *)(*((void *)&v110 + 1) + 8 * i)];
            id v42 = [(HMDHome *)v22 accessoryWithUUID:v41];

            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              long long v43 = v42;
            }
            else {
              long long v43 = 0;
            }
            id v44 = v43;

            uint64_t v45 = [v83 objectForKey:v44];
            long long v108 = 0u;
            long long v109 = 0u;
            long long v106 = 0u;
            long long v107 = 0u;
            id v46 = v45;
            uint64_t v47 = [v46 countByEnumeratingWithState:&v106 objects:v117 count:16];
            if (v47)
            {
              uint64_t v48 = *(void *)v107;
              while (2)
              {
                for (uint64_t j = 0; j != v47; ++j)
                {
                  if (*(void *)v107 != v48) {
                    objc_enumerationMutation(v46);
                  }
                  if ([*(id *)(*((void *)&v106 + 1) + 8 * j) requestType] == 1)
                  {

                    goto LABEL_29;
                  }
                }
                uint64_t v47 = [v46 countByEnumeratingWithState:&v106 objects:v117 count:16];
                if (v47) {
                  continue;
                }
                break;
              }
            }

            uint64_t v39 = v73;
          }
          uint64_t v74 = [v38 countByEnumeratingWithState:&v110 objects:v118 count:16];
          uint64_t v39 = v73;
        }
        while (v74);
      }
    }

    uint64_t v50 = (void *)MEMORY[0x1E4F654B0];
    uint64_t v51 = [v16 qualityOfService];
    id v52 = [(HMDHome *)v22 messageDestination];
    uint64_t v53 = (void *)[v79 copy];
    char v54 = [v50 messageWithName:@"kMultipleCharacteristicWriteRequestKey" qualityOfService:v51 destination:v52 payload:v53];

    objc_initWeak(&location, v22);
    v97[0] = MEMORY[0x1E4F143A8];
    v97[1] = 3221225472;
    v97[2] = __133__HMDHome__writeCharacteristicValuesForAccessories_writeRequestMap_responseTuples_requestMessage_viaDevice_source_completionHandler___block_invoke;
    v97[3] = &unk_1E6A06F38;
    objc_copyWeak(&v104, &location);
    id v98 = v80;
    id v99 = v86;
    id v55 = v83;
    id v100 = v55;
    id v101 = v81;
    id v56 = v75;
    id v102 = v56;
    unint64_t v103 = group;
    [v54 setResponseHandler:v97];
    uint64_t v57 = [(HMDHome *)v22 uuid];
    uint64_t v58 = [(HMDHome *)v22 workQueue];
    [(HMDHome *)v22 redispatchToResidentMessage:v54 target:v57 responseQueue:v58 viaDevice:v82];

    if ([(HMDHome *)v22 remoteAccessIsEnabled])
    {
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      id v59 = v55;
      uint64_t v60 = [v59 countByEnumeratingWithState:&v93 objects:v114 count:16];
      if (v60)
      {
        uint64_t v61 = *(void *)v94;
        while (2)
        {
          for (uint64_t k = 0; k != v60; ++k)
          {
            if (*(void *)v94 != v61) {
              objc_enumerationMutation(v59);
            }
            if ([*(id *)(*((void *)&v93 + 1) + 8 * k) hasBTLELink])
            {
              uint64_t v63 = (void *)MEMORY[0x1D9452090]();
              uint64_t v64 = v22;
              HMFGetOSLogHandle();
              id v65 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
              {
                id v66 = HMFGetLogIdentifier();
                *(_DWORD *)buf = 138543362;
                long long v122 = v66;
                _os_log_impl(&dword_1D49D5000, v65, OS_LOG_TYPE_INFO, "%{public}@There are BTLE accessories that are currently unreachable during the write, kicking scan to update reachability", buf, 0xCu);
              }
              id v67 = [(HMDHome *)v64 accessoryBrowser];
              [v67 btleAccessoryReachabilityProbeTimer:1];

              goto LABEL_43;
            }
          }
          uint64_t v60 = [v59 countByEnumeratingWithState:&v93 objects:v114 count:16];
          if (v60) {
            continue;
          }
          break;
        }
      }
LABEL_43:
    }
    objc_destroyWeak(&v104);
    objc_destroyWeak(&location);
  }
  else
  {
    dispatch_group_leave(group);
  }
  id v68 = [(HMDHome *)v84 workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __133__HMDHome__writeCharacteristicValuesForAccessories_writeRequestMap_responseTuples_requestMessage_viaDevice_source_completionHandler___block_invoke_1483;
  block[3] = &unk_1E6A18488;
  id v88 = v78;
  id v89 = v81;
  id v90 = v16;
  __int16 v91 = v84;
  id v92 = v77;
  id v69 = v77;
  id v70 = v16;
  id v71 = v81;
  id v72 = v78;
  dispatch_group_notify(group, v68, block);
}

void __133__HMDHome__writeCharacteristicValuesForAccessories_writeRequestMap_responseTuples_requestMessage_viaDevice_source_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v35 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  if (WeakRetained)
  {
    [*(id *)(a1 + 32) begin];
    if (v5)
    {
      id v7 = [MEMORY[0x1E4F1CA80] set];
      long long v44 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      id obj = *(id *)(a1 + 40);
      uint64_t v39 = [obj countByEnumeratingWithState:&v44 objects:v53 count:16];
      if (!v39) {
        goto LABEL_31;
      }
      uint64_t v38 = *(void *)v45;
      *(void *)&long long v8 = 138543618;
      long long v33 = v8;
      id v36 = v7;
      uint64_t v34 = WeakRetained;
      while (1)
      {
        uint64_t v9 = 0;
        do
        {
          if (*(void *)v45 != v38) {
            objc_enumerationMutation(obj);
          }
          uint64_t v10 = *(void *)(*((void *)&v44 + 1) + 8 * v9);
          uint64_t v11 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v10];
          uint64_t v12 = [WeakRetained accessoryWithUUID:v11];

          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            uint64_t v13 = v12;
          }
          else {
            uint64_t v13 = 0;
          }
          id v14 = v13;

          if ([v14 isPrimary])
          {
            long long v15 = v14;
LABEL_16:
            id v16 = objc_msgSend(*(id *)(a1 + 48), "objectForKey:", v15, v33);
            id v17 = v16;
            if (v16)
            {
              long long v42 = 0u;
              long long v43 = 0u;
              long long v40 = 0u;
              long long v41 = 0u;
              uint64_t v18 = [v16 countByEnumeratingWithState:&v40 objects:v48 count:16];
              if (v18)
              {
                uint64_t v19 = v18;
                uint64_t v20 = *(void *)v41;
                do
                {
                  uint64_t v21 = 0;
                  do
                  {
                    if (*(void *)v41 != v20) {
                      objc_enumerationMutation(v17);
                    }
                    __int16 v22 = +[HMDCharacteristicResponse responseWithRequest:*(void *)(*((void *)&v40 + 1) + 8 * v21) error:v5];
                    [*(id *)(a1 + 56) addObject:v22];

                    ++v21;
                  }
                  while (v19 != v21);
                  uint64_t v19 = [v17 countByEnumeratingWithState:&v40 objects:v48 count:16];
                }
                while (v19);
              }
              uint64_t v23 = *(void **)(a1 + 64);
              uint64_t v24 = [v15 uuid];
              double v25 = [v24 UUIDString];
              double v26 = [v23 objectForKeyedSubscript:v25];

              id v27 = [v35 objectForKeyedSubscript:@"kRemoteMessageTransportAttributionKey"];
              objc_msgSend(v26, "setTransportType:", objc_msgSend(v27, "intValue"));

              id WeakRetained = v34;
              BOOL v28 = [v34 logEventSubmitter];
              [v28 submitLogEvent:v26 error:v5];

              id v7 = v36;
            }

            goto LABEL_29;
          }
          long long v15 = [v14 bridge];

          if (v15)
          {
            if ([v7 containsObject:v15]) {
              goto LABEL_29;
            }
            [v7 addObject:v15];
            goto LABEL_16;
          }
          id v29 = (void *)MEMORY[0x1D9452090]();
          id v30 = WeakRetained;
          char v31 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v32 = HMFGetLogIdentifier();
            *(_DWORD *)buf = v33;
            uint64_t v50 = v32;
            __int16 v51 = 2112;
            uint64_t v52 = v10;
            _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_DEFAULT, "%{public}@Dropping write responses for nil-ed out accessory with UUID %@", buf, 0x16u);

            id v7 = v36;
          }

          long long v15 = 0;
LABEL_29:

          ++v9;
        }
        while (v9 != v39);
        uint64_t v39 = [obj countByEnumeratingWithState:&v44 objects:v53 count:16];
        if (!v39)
        {
LABEL_31:

          dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
          goto LABEL_33;
        }
      }
    }
    [WeakRetained _addResponseTuplesFromDictionary:v35 accessoryRequestMapTable:*(void *)(a1 + 48) responseTuples:*(void *)(a1 + 56) completedGroup:*(void *)(a1 + 72) logEvents:*(void *)(a1 + 64)];
LABEL_33:
    objc_msgSend(*(id *)(a1 + 32), "end", v33);
  }
}

void __133__HMDHome__writeCharacteristicValuesForAccessories_writeRequestMap_responseTuples_requestMessage_viaDevice_source_completionHandler___block_invoke_1483(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1 + 32) addObjectsFromArray:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = (void *)MEMORY[0x1D9452090](v2);
  id v5 = *(id *)(a1 + 56);
  id v6 = HMFGetOSLogHandle();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v7)
    {
      long long v8 = HMFGetLogIdentifier();
      int v15 = 138543362;
      id v16 = v8;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Completed all the writes and sending notification.", (uint8_t *)&v15, 0xCu);
    }
    uint64_t v9 = [*(id *)(a1 + 48) BOOLForKey:@"kMultiPartResponseKey"];
    uint64_t v10 = *(void **)(a1 + 56);
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = [*(id *)(a1 + 48) identifier];
    [v10 _notifyChangedCharacteristics:v11 identifier:v12 multiPartResponse:v9 moreMessagesInMultipart:v9 requestMessage:*(void *)(a1 + 48) withCompletionHandler:*(void *)(a1 + 64)];
  }
  else
  {
    if (v7)
    {
      uint64_t v13 = HMFGetLogIdentifier();
      int v15 = 138543362;
      id v16 = v13;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Completed all the writes and delaying notification.", (uint8_t *)&v15, 0xCu);
    }
    uint64_t v14 = *(void *)(a1 + 64);
    if (v14) {
      (*(void (**)(uint64_t, void, void))(v14 + 16))(v14, 0, 0);
    }
  }
}

uint64_t __61__HMDHome_requiresUnlockToAccessCharacteristics_withMessage___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 hapMetadata];
  id v5 = [v3 type];
  id v6 = [v3 service];

  BOOL v7 = [v6 type];
  uint64_t v8 = [v4 requiresDeviceUnlock:v5 forService:v7];

  return v8;
}

- (BOOL)isAccessAllowedForCharacteristicsWithMessage:(id)a3
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([v4 isEntitledForSecureAccess]
    && ([v4 isEntitledForSPIAccess] & 1) != 0)
  {
    BOOL v5 = 1;
  }
  else
  {
    id v6 = (void *)MEMORY[0x1D9452090]();
    BOOL v7 = self;
    uint64_t v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = HMFGetLogIdentifier();
      uint64_t v10 = [v4 shortDescription];
      int v12 = 138543618;
      uint64_t v13 = v9;
      __int16 v14 = 2112;
      int v15 = v10;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Insufficient entitlements, access is not allowed for characteristic with message: %@", (uint8_t *)&v12, 0x16u);
    }
    BOOL v5 = 0;
  }

  return v5;
}

- (void)writeCharacteristicValues:(id)a3 source:(unint64_t)a4 message:(id)a5 identifier:(id)a6 qualityOfService:(int64_t)a7 withCompletionHandler:(id)a8
{
  id v14 = a3;
  id v15 = a5;
  id v16 = a6;
  id v17 = a8;
  id v18 = objc_alloc(MEMORY[0x1E4F653F0]);
  uint64_t v19 = NSString;
  uint64_t v20 = MEMORY[0x1D94505D0](self, a2);
  uint64_t v21 = [v19 stringWithFormat:@"%@, %s:%ld", v20, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/Home/HMDHome.m", 24009];
  __int16 v22 = (void *)[v18 initWithName:v21];

  objc_initWeak(&location, self);
  uint64_t v23 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __102__HMDHome_writeCharacteristicValues_source_message_identifier_qualityOfService_withCompletionHandler___block_invoke;
  block[3] = &unk_1E6A06EE8;
  objc_copyWeak(v36, &location);
  id v31 = v14;
  id v32 = v22;
  id v34 = v16;
  id v35 = v17;
  id v33 = v15;
  v36[1] = (id)a4;
  void v36[2] = (id)a7;
  id v24 = v16;
  id v25 = v15;
  id v26 = v22;
  id v27 = v14;
  id v28 = v17;
  dispatch_async(v23, block);

  objc_destroyWeak(v36);
  objc_destroyWeak(&location);
}

void __102__HMDHome_writeCharacteristicValues_source_message_identifier_qualityOfService_withCompletionHandler___block_invoke(id *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1 + 9;
  id WeakRetained = objc_loadWeakRetained(a1 + 9);
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    if ([WeakRetained _shouldWaitForAccessoriesToBeReachable])
    {
      id v5 = a1[4];
      id v6 = [v4 workQueue];
      BOOL v7 = +[HMDHomeAssistantOperation homeAssistantOperationWithWriteRequests:v5 queue:v6];

      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 3221225472;
      void v16[2] = __102__HMDHome_writeCharacteristicValues_source_message_identifier_qualityOfService_withCompletionHandler___block_invoke_1465;
      v16[3] = &unk_1E6A06EE8;
      objc_copyWeak(v22, v2);
      id v21 = a1[8];
      id v17 = a1[5];
      id v8 = a1[4];
      id v9 = a1[10];
      id v18 = v8;
      v22[1] = v9;
      id v19 = a1[6];
      id v10 = a1[7];
      id v11 = a1[11];
      id v20 = v10;
      v22[2] = v11;
      [v4 _performOperation:v7 completion:v16];

      objc_destroyWeak(v22);
    }
    else
    {
      [a1[5] begin];
      -[HMDHome _writeCharacteristicValues:source:message:identifier:qualityOfService:withCompletionHandler:activity:](v4, a1[4], a1[10], a1[6], a1[7], a1[11], a1[8], a1[5]);
    }
  }
  else
  {
    if (a1[8])
    {
      int v12 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:20 userInfo:0];
      (*((void (**)(void))a1[8] + 2))();
    }
    uint64_t v13 = (void *)MEMORY[0x1D9452090]();
    id v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      id v15 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v24 = v15;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Home does not exist anymore, cannot perform write request", buf, 0xCu);
    }
  }
}

void __102__HMDHome_writeCharacteristicValues_source_message_identifier_qualityOfService_withCompletionHandler___block_invoke_1465(id *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained(a1 + 9);
  if (WeakRetained)
  {
    [a1[4] begin];
    -[HMDHome _writeCharacteristicValues:source:message:identifier:qualityOfService:withCompletionHandler:activity:](WeakRetained, a1[5], a1[10], a1[6], a1[7], a1[11], a1[8], a1[4]);
  }
  else
  {
    if (a1[8])
    {
      id v3 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:20 userInfo:0];
      (*((void (**)(void))a1[8] + 2))();
    }
    id v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = HMFGetLogIdentifier();
      int v7 = 138543362;
      id v8 = v6;
      _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Home does not exist anymore, cannot perform write request", (uint8_t *)&v7, 0xCu);
    }
  }
}

- (void)_writeCharacteristicValues:(void *)a3 source:(void *)a4 message:(void *)a5 identifier:(void *)a6 qualityOfService:(void *)a7 withCompletionHandler:(void *)a8 activity:
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  id v12 = a2;
  id v35 = a4;
  id v36 = a5;
  id v37 = a7;
  id v38 = a8;
  long long v40 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v12, "count"));
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  id obj = v12;
  uint64_t v13 = [obj countByEnumeratingWithState:&v49 objects:v55 count:16];
  if (v13)
  {
    uint64_t v14 = *(void *)v50;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v50 != v14) {
          objc_enumerationMutation(obj);
        }
        id v16 = *(void **)(*((void *)&v49 + 1) + 8 * i);
        id v17 = [v16 characteristic];
        id v18 = [v17 authorizationData];
        id v19 = [a1 home];
        id v20 = [v19 currentUser];
        id v21 = [v20 notificationContextHAPIdentifier];
        __int16 v22 = [v17 contextDataForWriteRequestWithIdentifier:v21];

        uint64_t v23 = [v16 value];
        id v24 = +[HMDCharacteristicWriteRequest writeRequestWithCharacteristic:value:authorizationData:identifier:type:includeResponseValue:contextData:](HMDCharacteristicWriteRequest, "writeRequestWithCharacteristic:value:authorizationData:identifier:type:includeResponseValue:contextData:", v17, v23, v18, 0, [v16 requestType], objc_msgSend(v16, "includeResponseValue"), v22);

        [v40 addObject:v24];
      }
      uint64_t v13 = [obj countByEnumeratingWithState:&v49 objects:v55 count:16];
    }
    while (v13);
  }

  uint64_t v25 = [a1 deviceLockStateDataSource];
  if (([v25 isPasscodeEnabled] & 1) == 0)
  {

    goto LABEL_14;
  }
  id v26 = [a1 deviceLockStateDataSource];
  int v27 = [v26 isLocked];

  if (v27)
  {
LABEL_14:
    objc_initWeak((id *)buf, a1);
    v42[0] = MEMORY[0x1E4F143A8];
    v42[1] = 3221225472;
    void v42[2] = __112__HMDHome__writeCharacteristicValues_source_message_identifier_qualityOfService_withCompletionHandler_activity___block_invoke;
    v42[3] = &unk_1E6A06F10;
    objc_copyWeak(v47, (id *)buf);
    id v32 = v37;
    char v48 = 1;
    id v46 = v32;
    v47[1] = a3;
    id v43 = v38;
    id v44 = v40;
    id v45 = v36;
    v47[2] = a6;
    -[HMDHome _applyDeviceLockCheck:forSource:message:completion:](a1, v44, (unint64_t)a3, v35, v42);

    objc_destroyWeak(v47);
    objc_destroyWeak((id *)buf);
    goto LABEL_15;
  }
  id v28 = (void *)MEMORY[0x1D9452090]();
  id v29 = a1;
  id v30 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
  {
    id v31 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    uint64_t v54 = v31;
    _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_INFO, "%{public}@Allowing characteristic write because device lock check is not required", buf, 0xCu);
  }
  -[HMDHome _performAllowedWriteCharacteristicValues:source:identifier:qualityOfService:withCompletionHandler:activity:](v29, v40, (unint64_t)a3, v36, (uint64_t)a6, v37, v38);
LABEL_15:
}

void __112__HMDHome__writeCharacteristicValues_source_message_identifier_qualityOfService_withCompletionHandler_activity___block_invoke(uint64_t a1, int a2, void *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    int v7 = (void *)MEMORY[0x1D9452090]();
    id v8 = WeakRetained;
    uint64_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      id v10 = HMFGetLogIdentifier();
      if (a2) {
        id v11 = @"Allowing";
      }
      else {
        id v11 = @"Denying";
      }
      id v12 = NSStringFromBOOL();
      uint64_t v13 = *(void *)(a1 + 72);
      int v20 = 138544386;
      id v21 = v10;
      __int16 v22 = 2112;
      uint64_t v23 = v11;
      __int16 v24 = 2112;
      uint64_t v25 = v12;
      __int16 v26 = 2048;
      uint64_t v27 = v13;
      __int16 v28 = 2112;
      id v29 = v5;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@%@ characteristic write passcode=%@, source=%lu : %@", (uint8_t *)&v20, 0x34u);
    }
    if (a2)
    {
      -[HMDHome _performAllowedWriteCharacteristicValues:source:identifier:qualityOfService:withCompletionHandler:activity:](v8, *(void **)(a1 + 40), *(void *)(a1 + 72), *(void **)(a1 + 48), *(void *)(a1 + 80), *(void **)(a1 + 56), *(void **)(a1 + 32));
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 56);
      if (v19) {
        (*(void (**)(uint64_t, id, void))(v19 + 16))(v19, v5, 0);
      }
      [*(id *)(a1 + 32) end];
    }
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 56);
    if (v14)
    {
      id v15 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:20 userInfo:0];
      (*(void (**)(uint64_t, void *, void))(v14 + 16))(v14, v15, 0);
    }
    id v16 = (void *)MEMORY[0x1D9452090]();
    id v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      id v18 = HMFGetLogIdentifier();
      int v20 = 138543362;
      id v21 = v18;
      _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Home does not exist anymore, cannot perform write request", (uint8_t *)&v20, 0xCu);
    }
  }
}

- (void)_performAllowedWriteCharacteristicValues:(unint64_t)a3 source:(void *)a4 identifier:(uint64_t)a5 qualityOfService:(void *)a6 withCompletionHandler:(void *)a7 activity:
{
  v38[2] = *MEMORY[0x1E4F143B8];
  id v30 = a2;
  id v13 = a4;
  id v14 = a6;
  id v15 = a7;
  v37[0] = @"sourceType";
  id v16 = [NSNumber numberWithUnsignedInteger:a3];
  v37[1] = @"kMultiPartResponseKey";
  v38[0] = v16;
  v38[1] = MEMORY[0x1E4F1CC38];
  id v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v38 forKeys:v37 count:2];

  id v18 = objc_alloc(MEMORY[0x1E4F654B0]);
  uint64_t v19 = [MEMORY[0x1E4F65488] allMessageDestinations];
  int v20 = (void *)[v18 initWithName:@"kMultipleCharacteristicWriteRequestKey" qualityOfService:a5 destination:v19 payload:v17];

  id v21 = (void *)MEMORY[0x1D9452090]([v20 setIdentifier:v13]);
  id v22 = a1;
  uint64_t v23 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    id v29 = v13;
    __int16 v24 = HMFGetLogIdentifier();
    *(void *)buf = 0;
    *(void *)&buf[8] = 0;
    uint64_t v25 = [v20 identifier];

    if (v25)
    {
      __int16 v26 = [v20 identifier];
      [v26 getUUIDBytes:buf];
    }
    else
    {
      *(_OWORD *)buf = *MEMORY[0x1E4F655A8];
    }
    long long v31 = *(_OWORD *)buf;
    if (a3 > 9) {
      uint64_t v27 = @"Unknown";
    }
    else {
      uint64_t v27 = off_1E6A07FB8[a3];
    }
    __int16 v28 = v27;
    *(_DWORD *)buf = 138544130;
    *(void *)&uint8_t buf[4] = v24;
    *(_WORD *)&buf[12] = 1042;
    *(_DWORD *)&buf[14] = 16;
    __int16 v33 = 2098;
    id v34 = &v31;
    __int16 v35 = 2114;
    id v36 = v28;
    _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_INFO, "%{public}@Performing allowed write requests with identifier: %{public,uuid_t}.16P, source: %{public}@", buf, 0x26u);

    id v13 = v29;
  }

  [v22 _writeCharacteristicValues:v30 requestMessage:v20 source:a3 withCompletionHandler:v14];
  [v15 end];
}

void __131__HMDHome__notifyChangedCharacteristics_identifier_multiPartResponse_moreMessagesInMultipart_requestMessage_withCompletionHandler___block_invoke(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
  if (v2)
  {
    id v3 = v2;
    (*((void (**)(void *, void, void))v2 + 2))(v2, 0, *(void *)(a1 + 32));
    uint64_t v2 = v3;
  }
}

void __131__HMDHome__notifyChangedCharacteristics_identifier_multiPartResponse_moreMessagesInMultipart_requestMessage_withCompletionHandler___block_invoke_1464(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
  if (v2)
  {
    id v3 = v2;
    (*((void (**)(void *, void, void))v2 + 2))(v2, 0, *(void *)(a1 + 32));
    uint64_t v2 = v3;
  }
}

uint64_t __168__HMDHome__sendClientCharacteristicsChangedNotificationWithIdentifier_requestMessage_multiPartResponse_moreInMultiPartResponse_characteristicChanges_completionHandler___block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

- (void)_updateBulletinBoardOfChangedCharacteristics:(id)a3 modifiedCharacteristics:(id)a4 changedByThisDevice:(BOOL)a5 changeNotificationFromPrimary:(BOOL)a6
{
  BOOL v6 = a6;
  BOOL v7 = a5;
  id v11 = a3;
  id v9 = a4;
  if ([v11 count])
  {
    id v10 = +[HMDBulletinBoard sharedBulletinBoard];
    [v10 insertBulletinsForChangedCharacteristics:v11 modifiedCharacteristics:v9 changedByThisDevice:v7 changeNotificationFromPrimary:v6 completion:0];
  }
}

- (void)notifyRemoteUsersOfChangedCharacteristics:(id)a3 message:(id)a4 broadcast:(BOOL)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = [(HMDHome *)self workQueue];
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = __71__HMDHome_notifyRemoteUsersOfChangedCharacteristics_message_broadcast___block_invoke;
  v13[3] = &unk_1E6A15B38;
  void v13[4] = self;
  id v14 = v8;
  id v15 = v9;
  BOOL v16 = a5;
  id v11 = v9;
  id v12 = v8;
  dispatch_async(v10, v13);
}

uint64_t __71__HMDHome_notifyRemoteUsersOfChangedCharacteristics_message_broadcast___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _notifyRemoteUsersOfChangedCharacteristics:*(void *)(a1 + 40) message:*(void *)(a1 + 48) broadcast:*(unsigned __int8 *)(a1 + 56)];
}

- (void)notifyOfChangedCharacteristic:(id)a3 changedByThisDevice:(BOOL)a4 residentShouldNotifyPeers:(BOOL)a5 message:(id)a6
{
  id v10 = a3;
  id v11 = a6;
  id v12 = [(HMDHome *)self workQueue];
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  void v15[2] = __95__HMDHome_notifyOfChangedCharacteristic_changedByThisDevice_residentShouldNotifyPeers_message___block_invoke;
  v15[3] = &unk_1E6A12D20;
  void v15[4] = self;
  id v16 = v10;
  BOOL v18 = a4;
  BOOL v19 = a5;
  id v17 = v11;
  id v13 = v11;
  id v14 = v10;
  dispatch_async(v12, v15);
}

void __95__HMDHome_notifyOfChangedCharacteristic_changedByThisDevice_residentShouldNotifyPeers_message___block_invoke(uint64_t a1)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  v5[0] = *(void *)(a1 + 40);
  id v3 = [MEMORY[0x1E4F1C978] arrayWithObjects:v5 count:1];
  LOBYTE(v4) = 0;
  [v2 _postInternalNotificationForChangedCharacteristics:v3 previouslyNilChangedCharacteristics:MEMORY[0x1E4F1CBF0] modifiedCharacteristics:0 changedByThisDevice:*(unsigned __int8 *)(a1 + 56) residentShouldNotifyPeers:*(unsigned __int8 *)(a1 + 57) message:*(void *)(a1 + 48) broadcast:v4];
}

uint64_t __186__HMDHome__postInternalNotificationForChangedCharacteristics_previouslyNilChangedCharacteristics_modifiedCharacteristics_changedByThisDevice_residentShouldNotifyPeers_message_broadcast___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _shouldUseAttributeReportForBulletin:a2];
}

uint64_t __186__HMDHome__postInternalNotificationForChangedCharacteristics_previouslyNilChangedCharacteristics_modifiedCharacteristics_changedByThisDevice_residentShouldNotifyPeers_message_broadcast___block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _updateBulletinBoardOfChangedCharacteristics:a3 modifiedCharacteristics:*(void *)(a1 + 40) changedByThisDevice:*(unsigned __int8 *)(a1 + 48) changeNotificationFromPrimary:*(unsigned __int8 *)(a1 + 49)];
}

- (id)_disablePayloadFromRemotelyUpdatedCharacteristicNotifications:(id)a3
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([(HMDHome *)self isCurrentDeviceConfirmedPrimaryResident])
  {
    long long v31 = [MEMORY[0x1E4F1CA60] dictionary];
    long long v50 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    id obj = [v4 allKeys];
    uint64_t v5 = [obj countByEnumeratingWithState:&v50 objects:v56 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v51;
      unint64_t v8 = 0x1E4F1C000uLL;
      unint64_t v9 = 0x1E4F29000uLL;
      __int16 v33 = self;
      id v34 = v4;
      uint64_t v32 = *(void *)v51;
      do
      {
        uint64_t v10 = 0;
        uint64_t v35 = v6;
        do
        {
          if (*(void *)v51 != v7) {
            objc_enumerationMutation(obj);
          }
          uint64_t v38 = v10;
          uint64_t v11 = *(void *)(*((void *)&v50 + 1) + 8 * v10);
          id v12 = [*(id *)(v8 + 2632) array];
          long long v41 = objc_msgSend(v4, "hmf_dictionaryForKey:", v11);
          uint64_t v39 = (void *)[objc_alloc(*(Class *)(v9 + 296)) initWithUUIDString:v11];
          id v13 = -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:");
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v14 = v13;
          }
          else {
            id v14 = 0;
          }
          id v15 = v14;

          if (v15 && ([v15 hasBTLELink] & 1) == 0 && objc_msgSend(v15, "hasIPLink"))
          {
            id v36 = v15;
            long long v48 = 0u;
            long long v49 = 0u;
            long long v46 = 0u;
            long long v47 = 0u;
            id v40 = [v41 allKeys];
            uint64_t v16 = [v40 countByEnumeratingWithState:&v46 objects:v55 count:16];
            if (v16)
            {
              uint64_t v17 = v16;
              uint64_t v18 = *(void *)v47;
              do
              {
                for (uint64_t i = 0; i != v17; ++i)
                {
                  if (*(void *)v47 != v18) {
                    objc_enumerationMutation(v40);
                  }
                  int v20 = objc_msgSend(v41, "hmf_dictionaryForKey:", *(void *)(*((void *)&v46 + 1) + 8 * i));
                  long long v42 = 0u;
                  long long v43 = 0u;
                  long long v44 = 0u;
                  long long v45 = 0u;
                  id v21 = [v20 allKeys];
                  uint64_t v22 = [v21 countByEnumeratingWithState:&v42 objects:v54 count:16];
                  if (v22)
                  {
                    uint64_t v23 = v22;
                    uint64_t v24 = *(void *)v43;
                    do
                    {
                      for (uint64_t j = 0; j != v23; ++j)
                      {
                        if (*(void *)v43 != v24) {
                          objc_enumerationMutation(v21);
                        }
                        __int16 v26 = HAPInstanceIDFromValue();
                        if (v26) {
                          [v12 addObject:v26];
                        }
                      }
                      uint64_t v23 = [v21 countByEnumeratingWithState:&v42 objects:v54 count:16];
                    }
                    while (v23);
                  }
                }
                uint64_t v17 = [v40 countByEnumeratingWithState:&v46 objects:v55 count:16];
              }
              while (v17);
            }

            self = v33;
            id v4 = v34;
            uint64_t v7 = v32;
            unint64_t v8 = 0x1E4F1C000;
            unint64_t v9 = 0x1E4F29000;
            uint64_t v6 = v35;
            id v15 = v36;
            if ([v12 count])
            {
              uint64_t v27 = (void *)[v12 copy];
              __int16 v28 = [v39 UUIDString];
              [v31 setObject:v27 forKeyedSubscript:v28];

              id v15 = v36;
            }
          }

          uint64_t v10 = v38 + 1;
        }
        while (v38 + 1 != v6);
        uint64_t v6 = [obj countByEnumeratingWithState:&v50 objects:v56 count:16];
      }
      while (v6);
    }

    id v29 = (void *)[v31 copy];
  }
  else
  {
    id v29 = (void *)MEMORY[0x1E4F1CC08];
  }

  return v29;
}

- (void)_handleCharacteristicsChangedNotification:(id)a3
{
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  id v87 = a3;
  id v78 = [v87 dictionaryForKey:@"kCharacteristicNotificationsKey"];
  long long v79 = [v87 stringForKey:@"kRequestIdentifierKey"];
  __int16 v91 = [MEMORY[0x1E4F1CA48] array];
  if (v79)
  {
    id v3 = self;
    if ([(HMDHome *)self isResidentFirstAccessoryCommunicationEnabled])
    {
      id v4 = [(HMDHome *)self accessoryReaderWriter];
      [v4 handleRemotelyUpdatedCharacteristicsMessage:v87];

      id v3 = self;
    }
    long long v75 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v79];
    uint64_t v5 = [(HMDHome *)v3 pendingResponses];
    long long v85 = [v5 objectForKeyedSubscript:v79];

    uint64_t v6 = [MEMORY[0x1E4F1CA48] array];
    if (v85)
    {
      long long v109 = 0u;
      long long v110 = 0u;
      long long v107 = 0u;
      long long v108 = 0u;
      id obj = [v78 allKeys];
      uint64_t v74 = [obj countByEnumeratingWithState:&v107 objects:v121 count:16];
      if (v74)
      {
        uint64_t v72 = *(void *)v108;
        do
        {
          uint64_t v7 = 0;
          do
          {
            if (*(void *)v108 != v72)
            {
              uint64_t v8 = v7;
              objc_enumerationMutation(obj);
              uint64_t v7 = v8;
            }
            uint64_t v73 = v7;
            uint64_t v9 = *(void *)(*((void *)&v107 + 1) + 8 * v7);
            uint64_t v10 = objc_msgSend(v78, "objectForKeyedSubscript:", v9, v72);
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              uint64_t v11 = v10;
            }
            else {
              uint64_t v11 = 0;
            }
            id v82 = v11;

            id v77 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v9];
            id v12 = [(HMDHome *)self accessoryWithUUID:v77];
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              id v13 = v12;
            }
            else {
              id v13 = 0;
            }
            id v14 = v13;

            long long v105 = 0u;
            long long v106 = 0u;
            long long v103 = 0u;
            long long v104 = 0u;
            id v80 = [v82 allKeys];
            uint64_t v83 = [v80 countByEnumeratingWithState:&v103 objects:v120 count:16];
            if (v83)
            {
              uint64_t v81 = *(void *)v104;
              do
              {
                uint64_t v15 = 0;
                do
                {
                  if (*(void *)v104 != v81)
                  {
                    uint64_t v16 = v15;
                    objc_enumerationMutation(v80);
                    uint64_t v15 = v16;
                  }
                  uint64_t v84 = v15;
                  uint64_t v17 = [v82 objectForKeyedSubscript:*(void *)(*((void *)&v103 + 1) + 8 * v15)];
                  objc_opt_class();
                  if (objc_opt_isKindOfClass()) {
                    uint64_t v18 = v17;
                  }
                  else {
                    uint64_t v18 = 0;
                  }
                  id v88 = v18;

                  BOOL v19 = HAPInstanceIDFromValue();
                  unint64_t v20 = [v85 pendingResponseCount];
                  if (v20 >= [v88 count])
                  {
                    uint64_t v22 = [v88 count];
                    uint64_t v21 = [v85 pendingResponseCount] - v22;
                  }
                  else
                  {
                    uint64_t v21 = 0;
                  }
                  [v85 setPendingResponseCount:v21];
                  long long v101 = 0u;
                  long long v102 = 0u;
                  long long v99 = 0u;
                  long long v100 = 0u;
                  uint64_t v23 = [v88 allKeys];
                  uint64_t v24 = [v23 countByEnumeratingWithState:&v99 objects:v119 count:16];
                  if (v24)
                  {
                    uint64_t v25 = 0;
                    uint64_t v26 = *(void *)v100;
                    do
                    {
                      uint64_t v27 = 0;
                      __int16 v28 = v25;
                      do
                      {
                        if (*(void *)v100 != v26) {
                          objc_enumerationMutation(v23);
                        }
                        id v29 = HAPInstanceIDFromValue();
                        uint64_t v25 = [v14 findCharacteristic:v29 forService:v19];

                        if (v25)
                        {
                          [v6 addObject:v25];
                          if ([v25 isNotificationEnabledForClientIdentifierPrefix:@"com.apple.HomeKitDaemon.Local"])objc_msgSend(v91, "addObject:", v25); {
                        }
                          }

                        ++v27;
                        __int16 v28 = v25;
                      }
                      while (v24 != v27);
                      uint64_t v24 = [v23 countByEnumeratingWithState:&v99 objects:v119 count:16];
                    }
                    while (v24);
                  }
                  uint64_t v15 = v84 + 1;
                }
                while (v84 + 1 != v83);
                uint64_t v83 = [v80 countByEnumeratingWithState:&v103 objects:v120 count:16];
              }
              while (v83);
            }

            uint64_t v7 = v73 + 1;
          }
          while (v73 + 1 != v74);
          uint64_t v74 = [obj countByEnumeratingWithState:&v107 objects:v121 count:16];
        }
        while (v74);
      }

      id v30 = (void *)MEMORY[0x1D9452090]();
      long long v31 = self;
      uint64_t v32 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        __int16 v33 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543874;
        uint64_t v114 = v33;
        __int16 v115 = 2112;
        uint64_t v116 = (uint64_t)v79;
        __int16 v117 = 2112;
        long long v118 = v78;
        _os_log_impl(&dword_1D49D5000, v32, OS_LOG_TYPE_DEBUG, "%{public}@Notifying changes for requestIdentifier %@: %@", buf, 0x20u);
      }
      id v34 = (void *)MEMORY[0x1D9452090]();
      uint64_t v35 = [(HMDHome *)v31 _splitCharacteristicChanges:v6 changedAccessories:v78];
      id v36 = [v85 requestMessage];
      [(HMDHome *)v31 _sendClientCharacteristicsChangedNotificationWithIdentifier:v75 requestMessage:v36 multiPartResponse:1 moreInMultiPartResponse:1 characteristicChanges:v35 completionHandler:0];
    }
  }
  else
  {
    long long v97 = 0u;
    long long v98 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    id v37 = v78;
    uint64_t v38 = [v37 countByEnumeratingWithState:&v95 objects:v112 count:16];
    if (v38)
    {
      uint64_t v39 = *(void *)v96;
      do
      {
        for (uint64_t i = 0; i != v38; ++i)
        {
          if (*(void *)v96 != v39) {
            objc_enumerationMutation(v37);
          }
          uint64_t v41 = *(void *)(*((void *)&v95 + 1) + 8 * i);
          objc_initWeak((id *)buf, self);
          long long v42 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v41];
          long long v43 = [(HMDHome *)self accessoryWithUUID:v42];
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            long long v44 = v43;
          }
          else {
            long long v44 = 0;
          }
          id v45 = v44;

          long long v46 = objc_msgSend(v37, "hmf_dictionaryForKey:", v41);
          long long v47 = [(HMDHome *)self workQueue];
          v92[0] = MEMORY[0x1E4F143A8];
          v92[1] = 3221225472;
          void v92[2] = __53__HMDHome__handleCharacteristicsChangedNotification___block_invoke;
          v92[3] = &unk_1E6A06E70;
          objc_copyWeak(&v94, (id *)buf);
          id v93 = v87;
          [v45 handleMultipleCharacteristicsUpdated:v46 message:v93 completionQueue:v47 completionHandler:v92];

          objc_destroyWeak(&v94);
          objc_destroyWeak((id *)buf);
        }
        uint64_t v38 = [v37 countByEnumeratingWithState:&v95 objects:v112 count:16];
      }
      while (v38);
    }

    id v48 = [(HMDHome *)self _unexpectedCharacteristicsFromCharacteristicNotifications:v37];
  }
  long long v49 = [MEMORY[0x1E4F1CA48] array];
  id v89 = [v87 dictionaryForKey:@"kMediaNotificationsKey"];
  id v86 = +[HMDMediaPropertyResponse responsesFromSerializedResponse:v89 requests:0 home:self];
  long long v50 = [[HMDMediaSessionRequestMessageInformation alloc] initWithMessage:v87];
  -[HMDHome updateMediaStateWithResponses:requestMessageInformation:]((uint64_t)self, v86, v50);
  long long v51 = [v87 remoteSourceDevice];
  if ([(HMDHome *)self _shouldRegisterForNotificationsWithDevice:v51])
  {
    long long v52 = [(HMDHome *)self primaryResident];
    if ([v91 count])
    {
      if ([(HMDHome *)self isCurrentDeviceAvailableResident])
      {
        if (![(HMDHome *)self isCurrentDevicePrimaryResident])
        {
          long long v53 = [v52 device];
          int v54 = [v51 isEqual:v53];

          if (v54)
          {
            id v55 = (void *)MEMORY[0x1D9452090]();
            uint64_t v56 = self;
            uint64_t v57 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
            {
              uint64_t v58 = HMFGetLogIdentifier();
              uint64_t v59 = [v91 count];
              *(_DWORD *)buf = 138543874;
              uint64_t v114 = v58;
              __int16 v115 = 2048;
              uint64_t v116 = v59;
              __int16 v117 = 2112;
              long long v118 = v91;
              _os_log_impl(&dword_1D49D5000, v57, OS_LOG_TYPE_INFO, "%{public}@Disabling %tu notifications on primary resident: %@", buf, 0x20u);
            }
            [(HMDHome *)v56 _remotelySetNotificationsEnabled:0 forCharacteristics:v91 characteristicChangeThresholds:0];
          }
        }
      }
    }
    uint64_t v60 = [(HMDHome *)self _disablePayloadFromRemotelyUpdatedCharacteristicNotifications:v78];
    if ([v60 count] || objc_msgSend(v49, "count"))
    {
      uint64_t v61 = (void *)MEMORY[0x1D9452090]();
      id v62 = self;
      uint64_t v63 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
      {
        uint64_t v64 = HMFGetLogIdentifier();
        id v65 = [v51 shortDescription];
        *(_DWORD *)buf = 138543618;
        uint64_t v114 = v64;
        __int16 v115 = 2112;
        uint64_t v116 = (uint64_t)v65;
        _os_log_impl(&dword_1D49D5000, v63, OS_LOG_TYPE_INFO, "%{public}@Modifying notification registrations due to unexpected characteristic notification received on primary resident from remote device: %@", buf, 0x16u);
      }
      [(HMDHome *)v62 _modifyCharacteristicNotifications:v60 mediaNotifications:MEMORY[0x1E4F1CC08] actionSetNotificationPayload:v49 enableNotification:0 withDevice:v51];
    }
  }
  else
  {
    id v66 = (void *)MEMORY[0x1D9452090]();
    id v67 = self;
    id v68 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
    {
      id v69 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v114 = v69;
      __int16 v115 = 2112;
      uint64_t v116 = (uint64_t)v51;
      _os_log_impl(&dword_1D49D5000, v68, OS_LOG_TYPE_INFO, "%{public}@Disabling notification registrations with resident: %@ due to unexpected characteristic notification received", buf, 0x16u);
    }
    id v70 = [(HMDHome *)v67 logEventSubmitter];
    id v71 = [[HMDUnexpectedNotificationLogEvent alloc] initWithCount:1];
    [v70 submitLogEvent:v71];

    long long v111 = v51;
    long long v52 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v111 count:1];
    [(HMDHome *)v67 _disableNotificationsForDevices:v52];
  }

  [v87 respondWithPayload:0];
}

void __53__HMDHome__handleCharacteristicsChangedNotification___block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if ([v5 count])
  {
    id v4 = objc_msgSend(v5, "hm_allKeys");
    [WeakRetained _notifyChangedCharacteristics:v4 message:*(void *)(a1 + 32) modifiedCharacteristics:v5 broadcast:0];
  }
}

- (void)_notifyChangedProperties:(id)a3 withRequestIdentifier:(id)a4 notificationUpdateIdentifier:(id)a5 toUserDeviceAddress:(id)a6
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  if (v13)
  {
    id v14 = [(HMDHome *)self notificationHandlerMap];
    uint64_t v15 = [v14 objectForKey:v13];

    if (!v15)
    {
      uint64_t v16 = [(HMDHome *)self homeManager];
      long long v29 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      uint64_t v17 = [v16 watchManager];
      uint64_t v18 = [v17 connectedWatches];

      uint64_t v19 = [v18 countByEnumeratingWithState:&v29 objects:v33 count:16];
      if (v19)
      {
        uint64_t v27 = v16;
        id v28 = v10;
        uint64_t v20 = *(void *)v30;
        while (2)
        {
          for (uint64_t i = 0; i != v19; ++i)
          {
            if (*(void *)v30 != v20) {
              objc_enumerationMutation(v18);
            }
            uint64_t v22 = objc_msgSend(*(id *)(*((void *)&v29 + 1) + 8 * i), "remoteDestinationString", v27, v28);
            char v23 = [v22 isEqual:v13];

            if (v23)
            {
              uint64_t v19 = 1;
              goto LABEL_13;
            }
          }
          uint64_t v19 = [v18 countByEnumeratingWithState:&v29 objects:v33 count:16];
          if (v19) {
            continue;
          }
          break;
        }
LABEL_13:
        uint64_t v16 = v27;
        id v10 = v28;
      }

      uint64_t v24 = [HMDDeviceNotificationHandler alloc];
      uint64_t v25 = [(HMDHome *)self msgDispatcher];
      uint64_t v15 = [(HMDDeviceNotificationHandler *)v24 initWithDestination:v13 watchDevice:v19 withRequestIdentifier:v11 messageDispatcher:v25 home:self];

      uint64_t v26 = [(HMDHome *)self notificationHandlerMap];
      [v26 setObject:v15 forKey:v13];
    }
    [(HMDDeviceNotificationHandler *)v15 sendNotificationForMediaProperties:v10 withRequestIdentifier:v11 notificationUpdateIdentifier:v12];
  }
}

- (void)_notifyRemoteUsersOfChangedProperties:(id)a3 requestMessageInformation:(id)a4
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)MEMORY[0x1D9452090]();
  uint64_t v9 = self;
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    id v11 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v62 = v11;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Notifying users registered with resident of changes in properties", buf, 0xCu);
  }
  long long v50 = v7;
  id v12 = [v7 remoteSourceDevice];
  id v13 = [(HMDHome *)v9 primaryResident];
  long long v49 = [v13 device];

  id v14 = [(HMDHome *)v9 notificationRegistry];
  uint64_t v15 = [v14 usersRegisteredForNotificationsForProperties:v6];

  uint64_t v16 = [(HMDHome *)v9 residentDeviceManager];
  int v47 = [v16 isCurrentDeviceAvailableResident];

  uint64_t v17 = [MEMORY[0x1E4F1CA80] set];
  unint64_t skippedInterDeviceChangeNotifications = v9->_skippedInterDeviceChangeNotifications;
  uint64_t v18 = [MEMORY[0x1E4F29128] UUID];
  int v54 = [v18 UUIDString];

  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  id obj = v15;
  uint64_t v19 = [obj countByEnumeratingWithState:&v57 objects:v67 count:16];
  long long v53 = v12;
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = *(void *)v58;
    p_superclass = HMDBackingStoreLocal.superclass;
    id v51 = v6;
    long long v52 = v9;
    uint64_t v55 = *(void *)v58;
    do
    {
      for (uint64_t i = 0; i != v20; ++i)
      {
        if (*(void *)v58 != v21) {
          objc_enumerationMutation(obj);
        }
        uint64_t v24 = *(void **)(*((void *)&v57 + 1) + 8 * i);
        uint64_t v25 = [p_superclass + 454 deviceWithDestination:v24];
        if (v25)
        {
          [v17 addObject:v25];
          if ([(HMDHome *)v9 _shouldSendToDestination:v24 device:v25 remoteSourceDevice:v12])
          {
            uint64_t v26 = v17;
            uint64_t v27 = [(HMDHome *)v9 notificationRegistry];
            id v28 = [v27 filterProperties:v6 forUser:v24];

            if ([v28 count])
            {
              long long v29 = (void *)MEMORY[0x1D9452090]();
              long long v30 = v9;
              long long v31 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
              {
                long long v32 = HMFGetLogIdentifier();
                *(_DWORD *)buf = 138543874;
                id v62 = v32;
                __int16 v63 = 2112;
                unint64_t v64 = (unint64_t)v24;
                __int16 v65 = 2112;
                id v66 = v54;
                _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_INFO, "%{public}@Fanning out to device %@ with the properties that changed with notificationUpdateIdentifier: %@", buf, 0x20u);

                id v6 = v51;
              }

              [(HMDHome *)v30 _notifyChangedProperties:v28 withRequestIdentifier:0 notificationUpdateIdentifier:v54 toUserDeviceAddress:v24];
              uint64_t v9 = v52;
              id v12 = v53;
            }

            uint64_t v17 = v26;
            uint64_t v21 = v55;
            p_superclass = (__objc2_class **)(HMDBackingStoreLocal + 8);
          }
        }
      }
      uint64_t v20 = [obj countByEnumeratingWithState:&v57 objects:v67 count:16];
    }
    while (v20);
  }

  if (!v50
    && [v6 count]
    && v49
    && ([v49 isCurrentDevice] & 1) == 0
    && ([v17 containsObject:v49] & 1) == 0)
  {
    if (v47)
    {
      uint64_t v39 = v17;
      id v40 = (void *)MEMORY[0x1D9452090]();
      uint64_t v41 = v9;
      long long v42 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        long long v43 = HMFGetLogIdentifier();
        [v49 remoteDestinationString];
        id v45 = v44 = v9;
        *(_DWORD *)buf = 138543874;
        id v62 = v43;
        __int16 v63 = 2112;
        unint64_t v64 = (unint64_t)v45;
        __int16 v65 = 2112;
        id v66 = v54;
        _os_log_impl(&dword_1D49D5000, v42, OS_LOG_TYPE_INFO, "%{public}@Fanning to primary resident destination %@ notificationUpdateIdentifier: %@", buf, 0x20u);

        uint64_t v9 = v44;
        id v12 = v53;
      }

      long long v46 = [v49 remoteDestinationString];
      [(HMDHome *)v41 _notifyChangedProperties:v6 withRequestIdentifier:0 notificationUpdateIdentifier:v54 toUserDeviceAddress:v46];

      uint64_t v17 = v39;
    }
    else
    {
      ++v9->_skippedInterDeviceChangeNotifications;
    }
  }
  if (isInternalBuild()
    && skippedInterDeviceChangeNotifications != v9->_skippedInterDeviceChangeNotifications)
  {
    __int16 v33 = v17;
    uint64_t v34 = (void *)MEMORY[0x1D9452090]();
    uint64_t v35 = v9;
    id v36 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      id v37 = HMFGetLogIdentifier();
      unint64_t v38 = v9->_skippedInterDeviceChangeNotifications;
      *(_DWORD *)buf = 138543618;
      id v62 = v37;
      __int16 v63 = 2048;
      unint64_t v64 = v38;
      _os_log_impl(&dword_1D49D5000, v36, OS_LOG_TYPE_INFO, "%{public}@Skipped %lu spurious inter-device media property change notifications", buf, 0x16u);

      id v12 = v53;
    }

    uint64_t v17 = v33;
  }
}

- (void)notifyRemoteUsersOfChangedProperties:(id)a3 requestMessageInformation:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __74__HMDHome_notifyRemoteUsersOfChangedProperties_requestMessageInformation___block_invoke;
  block[3] = &unk_1E6A19668;
  void block[4] = self;
  id v12 = v6;
  id v13 = v7;
  id v9 = v7;
  id v10 = v6;
  dispatch_async(v8, block);
}

uint64_t __74__HMDHome_notifyRemoteUsersOfChangedProperties_requestMessageInformation___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _notifyRemoteUsersOfChangedProperties:*(void *)(a1 + 40) requestMessageInformation:*(void *)(a1 + 48)];
}

- (void)_notifyUpdatedCharacteristic:(id)a3 withRequestIdentifier:(id)a4 notificationUpdateIdentifier:(id)a5 toUserDeviceAddress:(id)a6 completion:(id)a7
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  if (v15)
  {
    uint64_t v17 = [(HMDHome *)self notificationHandlerMap];
    uint64_t v18 = [v17 objectForKey:v15];

    if (!v18)
    {
      [(HMDHome *)self homeManager];
      long long v32 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      v31 = long long v35 = 0u;
      uint64_t v19 = [v31 watchManager];
      uint64_t v20 = [v19 connectedWatches];

      uint64_t v21 = [v20 countByEnumeratingWithState:&v32 objects:v36 count:16];
      if (v21)
      {
        id v29 = v14;
        id v30 = v12;
        uint64_t v22 = *(void *)v33;
        while (2)
        {
          for (uint64_t i = 0; i != v21; ++i)
          {
            if (*(void *)v33 != v22) {
              objc_enumerationMutation(v20);
            }
            uint64_t v24 = [*(id *)(*((void *)&v32 + 1) + 8 * i) remoteDestinationString];
            char v25 = [v24 isEqual:v15];

            if (v25)
            {
              uint64_t v21 = 1;
              goto LABEL_13;
            }
          }
          uint64_t v21 = [v20 countByEnumeratingWithState:&v32 objects:v36 count:16];
          if (v21) {
            continue;
          }
          break;
        }
LABEL_13:
        id v14 = v29;
        id v12 = v30;
      }

      uint64_t v26 = [HMDDeviceNotificationHandler alloc];
      uint64_t v27 = [(HMDHome *)self msgDispatcher];
      uint64_t v18 = [(HMDDeviceNotificationHandler *)v26 initWithDestination:v15 watchDevice:v21 withRequestIdentifier:v13 messageDispatcher:v27 home:self];

      id v28 = [(HMDHome *)self notificationHandlerMap];
      [v28 setObject:v18 forKey:v15];
    }
    [(HMDDeviceNotificationHandler *)v18 sendNotificationForCharacteristicUpdates:v12 withRequestIdentifier:v13 notificationUpdateIdentifier:v14 completion:v16];
  }
}

- (void)_sendCoalescedRemoteNotificationsForRequestMessage:(id)a3 accessories:(id)a4
{
  id v15 = a4;
  id v6 = a3;
  id v7 = [v6 destination];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  id v9 = v8;

  int v10 = [v6 isRemote];
  if (v10)
  {
    id v11 = [v9 device];
    id v12 = [v11 remoteDestinationString];

    if (v12)
    {
      id v13 = [(HMDHome *)self notificationHandlerMap];
      id v14 = [v13 objectForKey:v12];

      [v14 sendCoalescedRemoteNotificationForAccessories:v15];
    }
  }
}

- (void)_notifyChangedCharacteristics:(id)a3 withRequestIdentifier:(id)a4 notificationUpdateIdentifier:(id)a5 toUserDeviceAddress:(id)a6 broadcast:(BOOL)a7
{
  BOOL v7 = a7;
  id v12 = a6;
  id v13 = a5;
  id v14 = a4;
  id v15 = +[HMDCharacteristicUpdateTuple characteristicUpdateTuplesWithCharacteristics:a3 isBroadcast:v7];
  [(HMDHome *)self _notifyUpdatedCharacteristic:v15 withRequestIdentifier:v14 notificationUpdateIdentifier:v13 toUserDeviceAddress:v12 completion:0];
}

- (BOOL)_shouldSendToDestination:(id)a3 device:(id)a4 remoteSourceDevice:(id)a5
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = +[HMDDeviceHandle deviceHandleForDestination:v8];
  id v12 = +[HMDAccountRegistry sharedRegistry];
  id v13 = [v12 deviceForHandle:v11];

  id v14 = [v13 account];

  if (!v14)
  {
    uint64_t v21 = (void *)MEMORY[0x1D9452090]();
    uint64_t v22 = self;
    char v23 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      uint64_t v26 = HMFGetLogIdentifier();
      [v13 shortDescription];
      v28 = id v27 = v10;
      *(_DWORD *)buf = 138543618;
      id v51 = v26;
      __int16 v52 = 2112;
      id v53 = v28;
      _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_INFO, "%{public}@Device %@ has no user attached to it", buf, 0x16u);

      id v10 = v27;
    }
    goto LABEL_38;
  }
  if (![(HMDHome *)self isResidentFirstAccessoryCommunicationEnabled])
  {
    id v15 = [(HMDHome *)self _userForDevice:v13];
    if (!v15)
    {
      id v49 = v10;
      id v16 = (void *)MEMORY[0x1D9452090]();
      uint64_t v17 = self;
      uint64_t v18 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        uint64_t v19 = HMFGetLogIdentifier();
        [v13 shortDescription];
        uint64_t v20 = v48 = v16;
        *(_DWORD *)buf = 138543618;
        id v51 = v19;
        __int16 v52 = 2112;
        id v53 = v20;
        _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@No user found for the matching device: %@", buf, 0x16u);

        id v16 = v48;
      }

      id v10 = v49;
    }
    if ((objc_msgSend(v15, "isRemoteAccessAllowed", v48) & 1) == 0)
    {
      long long v32 = (void *)MEMORY[0x1D9452090]();
      long long v33 = self;
      long long v34 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        long long v35 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v51 = v35;
        __int16 v52 = 2112;
        id v53 = v9;
        _os_log_impl(&dword_1D49D5000, v34, OS_LOG_TYPE_INFO, "%{public}@Skipping device %@ since the user lacks remote access", buf, 0x16u);
      }

      goto LABEL_39;
    }
  }
  if (v9 && [v10 isEqual:v9])
  {
    uint64_t v21 = (void *)MEMORY[0x1D9452090]();
    uint64_t v22 = self;
    char v23 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v24 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v51 = v24;
      __int16 v52 = 2112;
      id v53 = v8;
      char v25 = "%{public}@Skipping device %@ since it is the original sender";
LABEL_18:
      id v29 = v23;
      os_log_type_t v30 = OS_LOG_TYPE_DEBUG;
LABEL_37:
      _os_log_impl(&dword_1D49D5000, v29, v30, v25, buf, 0x16u);

      goto LABEL_38;
    }
    goto LABEL_38;
  }
  if ([v13 isCurrentDevice])
  {
    uint64_t v21 = (void *)MEMORY[0x1D9452090]();
    uint64_t v22 = self;
    char v23 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v24 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v51 = v24;
      __int16 v52 = 2112;
      id v53 = v8;
      char v25 = "%{public}@Skipping device %@ - ourselves";
      goto LABEL_18;
    }
LABEL_38:

LABEL_39:
    BOOL v46 = 0;
    goto LABEL_40;
  }
  long long v31 = [(HMDHome *)self localCapabilitiesDataSource];
  if ([v31 isCompanionCapable])
  {
  }
  else
  {
    id v36 = [(HMDHome *)self residentDeviceManager];
    char v37 = [v36 isCurrentDeviceAvailableResident];

    if ((v37 & 1) == 0)
    {
      ++self->_skippedInterDeviceChangeNotifications;
      uint64_t v21 = (void *)MEMORY[0x1D9452090]();
      uint64_t v22 = self;
      char v23 = HMFGetOSLogHandle();
      if (!os_log_type_enabled(v23, OS_LOG_TYPE_INFO)) {
        goto LABEL_38;
      }
      uint64_t v24 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v51 = v24;
      __int16 v52 = 2112;
      id v53 = v8;
      char v25 = "%{public}@Skipping device %@ since this device is not a companion or enabled resident";
      goto LABEL_36;
    }
  }
  unint64_t v38 = [(HMDHome *)self localCapabilitiesDataSource];
  int v39 = [v38 isCompanionCapable];

  if (v39)
  {
    uint64_t v40 = [v13 productInfo];
    if (v40
      && (uint64_t v41 = (void *)v40,
          [v13 productInfo],
          long long v42 = objc_claimAutoreleasedReturnValue(),
          uint64_t v43 = [v42 productClass],
          v42,
          v41,
          v43 != 5))
    {
      ++self->_skippedInterDeviceChangeNotifications;
      uint64_t v21 = (void *)MEMORY[0x1D9452090]();
      uint64_t v22 = self;
      char v23 = HMFGetOSLogHandle();
      if (!os_log_type_enabled(v23, OS_LOG_TYPE_INFO)) {
        goto LABEL_38;
      }
      uint64_t v24 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v51 = v24;
      __int16 v52 = 2112;
      id v53 = v8;
      char v25 = "%{public}@Skipping device %@ since this device is a companion but sending to non-watch";
    }
    else
    {
      long long v44 = [(HMDHome *)self homeManager];
      char v45 = [v44 isPairedWithWatch];

      if (v45) {
        goto LABEL_29;
      }
      ++self->_skippedInterDeviceChangeNotifications;
      uint64_t v21 = (void *)MEMORY[0x1D9452090]();
      uint64_t v22 = self;
      char v23 = HMFGetOSLogHandle();
      if (!os_log_type_enabled(v23, OS_LOG_TYPE_INFO)) {
        goto LABEL_38;
      }
      uint64_t v24 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v51 = v24;
      __int16 v52 = 2112;
      id v53 = v8;
      char v25 = "%{public}@Skipping device %@ since this device is a companion but not paired with a watch";
    }
LABEL_36:
    id v29 = v23;
    os_log_type_t v30 = OS_LOG_TYPE_INFO;
    goto LABEL_37;
  }
LABEL_29:
  BOOL v46 = 1;
LABEL_40:

  return v46;
}

- (id)_userForDevice:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self users];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __26__HMDHome__userForDevice___block_invoke;
  void v9[3] = &unk_1E6A06E48;
  id v10 = v4;
  id v6 = v4;
  BOOL v7 = objc_msgSend(v5, "hmf_objectPassingTest:", v9);

  return v7;
}

uint64_t __26__HMDHome__userForDevice___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 account];
  id v4 = [*(id *)(a1 + 32) account];
  uint64_t v5 = [v3 isEqual:v4];

  return v5;
}

- (BOOL)_shouldUseAttributeReportForBulletin:(id)a3
{
  return 1;
}

- (BOOL)_shouldRateLimitChangeNotificationsForCharacteristic:(id)a3
{
  id v3 = a3;
  id v4 = [v3 service];
  uint64_t v5 = [v3 type];
  if (([v5 isEqualToString:*MEMORY[0x1E4F5B850]] & 1) == 0)
  {

    goto LABEL_13;
  }
  id v6 = [v4 type];
  if (![v6 isEqualToString:*MEMORY[0x1E4F5BB38]])
  {
    BOOL v7 = [v4 type];
    int v8 = [v7 isEqualToString:*MEMORY[0x1E4F5BA98]];

    if (v8) {
      goto LABEL_6;
    }
LABEL_13:
    BOOL v20 = 0;
    goto LABEL_14;
  }

LABEL_6:
  id v9 = [v3 previousValue];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v10 = v9;
  }
  else {
    id v10 = 0;
  }
  id v11 = v10;

  [v11 doubleValue];
  double v13 = v12;

  double v14 = round(v13 + v13) * 0.5;
  id v15 = [v3 value];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v16 = v15;
  }
  else {
    id v16 = 0;
  }
  id v17 = v16;

  [v17 doubleValue];
  double v19 = v18;

  BOOL v20 = vabdd_f64(v14, round(v19 + v19) * 0.5) < 2.22044605e-16;
LABEL_14:

  return v20;
}

- (void)_notifyRemoteUsersOfChangedCharacteristics:(id)a3 message:(id)a4 broadcast:(BOOL)a5
{
  BOOL v98 = a5;
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v93 = a4;
  long long v99 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v7, "count"));
  id v94 = [MEMORY[0x1E4F1CA80] set];
  long long v113 = 0u;
  long long v114 = 0u;
  long long v115 = 0u;
  long long v116 = 0u;
  id v8 = v7;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v113 objects:v125 count:16];
  id obj = v8;
  long long v104 = self;
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v114;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v114 != v11) {
          objc_enumerationMutation(obj);
        }
        double v13 = *(void **)(*((void *)&v113 + 1) + 8 * i);
        double v14 = [v13 accessory];
        id v15 = [v13 stateNumber];
        [v14 updateTrackedAccessoryStateNumber:v15];

        id v16 = [(HMDHome *)self hapMetadata];
        id v17 = [v13 type];
        double v18 = [v13 service];
        double v19 = [v18 type];
        char v20 = [v16 shouldFilterChangeNotificationsForCharacteristicType:v17 serviceType:v19];

        self = v104;
        if ((v20 & 1) == 0)
        {
          if ([(HMDHome *)v104 _shouldRateLimitChangeNotificationsForCharacteristic:v13])
          {
            uint64_t v21 = (void *)MEMORY[0x1D9452090]();
            uint64_t v22 = v104;
            char v23 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
            {
              uint64_t v24 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543618;
              long long v118 = v24;
              __int16 v119 = 2112;
              unint64_t v120 = (unint64_t)v13;
              _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_INFO, "%{public}@Filtering out characteristic for remote notification due to rate limiting: %@", buf, 0x16u);

              self = v104;
            }
          }
          else
          {
            char v25 = [v13 accessory];
            if ([v25 hasBTLELink])
            {
              uint64_t v26 = [v25 identifier];
              id v27 = [v25 matchingTransportInformationWithServerIdentifier:v26 instanceID:0 linkType:1];

              if (([v27 isReachable] & 1) == 0) {
                [v94 addObject:v13];
              }
            }
            [v99 addObject:v13];
          }
        }
      }
      id v8 = obj;
      uint64_t v10 = [obj countByEnumeratingWithState:&v113 objects:v125 count:16];
    }
    while (v10);
  }

  id v28 = v99;
  if ([v99 count])
  {
    id v29 = v93;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      os_log_type_t v30 = v29;
    }
    else {
      os_log_type_t v30 = 0;
    }
    id v31 = v30;

    id v92 = v31;
    long long v32 = [v31 destination];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      long long v33 = v32;
    }
    else {
      long long v33 = 0;
    }
    id v34 = v33;

    __int16 v91 = v34;
    long long v35 = [v34 device];
    id v36 = [(HMDHome *)self primaryResident];
    id v90 = [v36 device];

    long long v102 = [MEMORY[0x1E4F1CA80] set];
    char v37 = [(HMDHome *)self notificationRegistry];
    unint64_t v38 = [v37 usersRegisteredForNotificationsForCharacteristics:v99];
    id v100 = (id)[v38 mutableCopy];

    int v39 = [(HMDHome *)self residentDeviceManager];
    LODWORD(v38) = [v39 isCurrentDeviceAvailableResident];

    long long v95 = v35;
    int v88 = (int)v38;
    if (v38)
    {
      long long v111 = 0u;
      long long v112 = 0u;
      long long v109 = 0u;
      long long v110 = 0u;
      uint64_t v40 = [(HMDHome *)self residentEnabledDevices];
      uint64_t v41 = [v40 countByEnumeratingWithState:&v109 objects:v124 count:16];
      if (!v41) {
        goto LABEL_37;
      }
      uint64_t v42 = v41;
      uint64_t v43 = *(void *)v110;
      while (1)
      {
        for (uint64_t j = 0; j != v42; ++j)
        {
          if (*(void *)v110 != v43) {
            objc_enumerationMutation(v40);
          }
          char v45 = *(void **)(*((void *)&v109 + 1) + 8 * j);
          BOOL v46 = [(HMDHome *)self primaryResident];
          if (([v46 isCurrentDevice] & 1) == 0)
          {
            int v47 = [(HMDHome *)self primaryResident];
            id v48 = [v47 device];
            id v49 = [v48 remoteDestinationString];
            char v50 = [v100 containsObject:v49];

            if (v50) {
              goto LABEL_35;
            }
            BOOL v46 = [v45 remoteDestinationString];
            [v100 addObject:v46];
          }

LABEL_35:
          self = v104;
        }
        uint64_t v42 = [v40 countByEnumeratingWithState:&v109 objects:v124 count:16];
        if (!v42)
        {
LABEL_37:

          long long v35 = v95;
          break;
        }
      }
    }
    id v51 = [MEMORY[0x1E4F29128] UUID];
    long long v96 = [v51 UUIDString];

    unint64_t skippedInterDeviceChangeNotifications = self->_skippedInterDeviceChangeNotifications;
    long long v105 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    id v101 = v100;
    uint64_t v52 = [v101 countByEnumeratingWithState:&v105 objects:v123 count:16];
    id v28 = v99;
    if (v52)
    {
      uint64_t v53 = v52;
      uint64_t v54 = *(void *)v106;
      p_superclass = HMDBackingStoreLocal.superclass;
      uint64_t v97 = *(void *)v106;
      do
      {
        for (uint64_t k = 0; k != v53; ++k)
        {
          if (*(void *)v106 != v54) {
            objc_enumerationMutation(v101);
          }
          long long v57 = *(void **)(*((void *)&v105 + 1) + 8 * k);
          long long v58 = [p_superclass + 454 deviceWithDestination:v57];
          if (v58)
          {
            [v102 addObject:v58];
            if ([(HMDHome *)self _shouldSendToDestination:v57 device:v58 remoteSourceDevice:v35])
            {
              long long v59 = [(HMDHome *)self notificationRegistry];
              long long v60 = [v59 filterCharacteristics:v28 forUser:v57];

              uint64_t v61 = +[HMDCharacteristicUpdateTuple characteristicUpdateTuplesWithCharacteristics:v60 isBroadcast:v98];
              if ([v61 count])
              {
                id v62 = (void *)MEMORY[0x1D9452090]();
                __int16 v63 = self;
                unint64_t v64 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
                {
                  __int16 v65 = HMFGetLogIdentifier();
                  *(_DWORD *)buf = 138543874;
                  long long v118 = v65;
                  __int16 v119 = 2112;
                  unint64_t v120 = (unint64_t)v57;
                  __int16 v121 = 2112;
                  uint64_t v122 = v96;
                  _os_log_impl(&dword_1D49D5000, v64, OS_LOG_TYPE_INFO, "%{public}@Fanning out to device %@ with the characteristics that changed for notificationUpdateIdentifier: %@", buf, 0x20u);

                  id v28 = v99;
                }

                [(HMDHome *)v63 _notifyUpdatedCharacteristic:v61 withRequestIdentifier:0 notificationUpdateIdentifier:v96 toUserDeviceAddress:v57 completion:&__block_literal_global_1444];
                self = v104;
                long long v35 = v95;
              }

              uint64_t v54 = v97;
              p_superclass = (__objc2_class **)(HMDBackingStoreLocal + 8);
            }
          }
        }
        uint64_t v53 = [v101 countByEnumeratingWithState:&v105 objects:v123 count:16];
      }
      while (v53);
    }

    if (![v28 count]
      || !v90
      || ([v90 isCurrentDevice] & 1) != 0
      || ([v102 containsObject:v90] & 1) != 0
      || ([v35 isEqual:v90] & 1) != 0)
    {
      goto LABEL_70;
    }
    if (v88)
    {
      id v66 = (void *)MEMORY[0x1D9452090]();
      id v67 = self;
      uint64_t v68 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
      {
        id v69 = HMFGetLogIdentifier();
        id v70 = [v90 remoteDestinationString];
        *(_DWORD *)buf = 138543874;
        long long v118 = v69;
        __int16 v119 = 2112;
        unint64_t v120 = (unint64_t)v70;
        __int16 v121 = 2112;
        uint64_t v122 = v96;
        _os_log_impl(&dword_1D49D5000, v68, OS_LOG_TYPE_INFO, "%{public}@Fanning to primary resident destination %@ with notificationUpdateIdentifier: %@", buf, 0x20u);
      }
      id v71 = [v90 remoteDestinationString];
      [(HMDHome *)v67 _notifyChangedCharacteristics:v28 withRequestIdentifier:0 notificationUpdateIdentifier:v96 toUserDeviceAddress:v71 broadcast:v98];
    }
    else
    {
      if (![v94 count])
      {
        ++self->_skippedInterDeviceChangeNotifications;
LABEL_70:
        uint64_t v72 = v93;
        if (isInternalBuild()
          && skippedInterDeviceChangeNotifications != self->_skippedInterDeviceChangeNotifications)
        {
          uint64_t v83 = (void *)MEMORY[0x1D9452090]();
          uint64_t v84 = self;
          long long v85 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
          {
            id v86 = HMFGetLogIdentifier();
            unint64_t v87 = self->_skippedInterDeviceChangeNotifications;
            *(_DWORD *)buf = 138543618;
            long long v118 = v86;
            __int16 v119 = 2048;
            unint64_t v120 = v87;
            _os_log_impl(&dword_1D49D5000, v85, OS_LOG_TYPE_INFO, "%{public}@Skipped %lu spurious inter-device characteristic change notifications", buf, 0x16u);
          }
          long long v35 = v95;
        }

        goto LABEL_76;
      }
      id v77 = (void *)MEMORY[0x1D9452090]();
      id v78 = self;
      long long v79 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
      {
        id v80 = HMFGetLogIdentifier();
        uint64_t v81 = [v90 remoteDestinationString];
        *(_DWORD *)buf = 138543874;
        long long v118 = v80;
        __int16 v119 = 2112;
        unint64_t v120 = (unint64_t)v81;
        __int16 v121 = 2112;
        uint64_t v122 = v96;
        _os_log_impl(&dword_1D49D5000, v79, OS_LOG_TYPE_INFO, "%{public}@Fanning the characteristics changed over BTLE to primary resident destination %@ with notificationUpdateIdentifier: %@", buf, 0x20u);
      }
      id v71 = [v94 allObjects];
      id v82 = [v90 remoteDestinationString];
      [(HMDHome *)v78 _notifyChangedCharacteristics:v71 withRequestIdentifier:0 notificationUpdateIdentifier:v96 toUserDeviceAddress:v82 broadcast:v98];
    }
    long long v35 = v95;
    goto LABEL_70;
  }
  uint64_t v72 = v93;
  if ([v8 count])
  {
    uint64_t v73 = (void *)MEMORY[0x1D9452090]();
    uint64_t v74 = self;
    long long v75 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
    {
      long long v76 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v118 = v76;
      _os_log_impl(&dword_1D49D5000, v75, OS_LOG_TYPE_DEBUG, "%{public}@No changes to notify remote devices of changed characteristics after filtering", buf, 0xCu);
    }
  }
LABEL_76:
}

- (BOOL)_shouldRegisterForNotificationsWithDevice:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self primaryResident];
  if (!isWatch())
  {
    if (v5)
    {
      uint64_t v11 = [v5 device];
      char v12 = [v11 isCurrentDevice];

      if (v12) {
        goto LABEL_8;
      }
      uint64_t v9 = [v5 device];
      char v13 = [v4 isEqual:v9];
    }
    else
    {
      uint64_t v9 = [v4 capabilities];
      char v13 = [v9 isRemoteGatewayCapable];
    }
    char v10 = v13;
LABEL_14:

    goto LABEL_15;
  }
  if (!v5
    || ([v5 device],
        id v6 = objc_claimAutoreleasedReturnValue(),
        char v7 = [v4 isEqual:v6],
        v6,
        (v7 & 1) == 0))
  {
    id v8 = [(HMDHome *)self homeManager];
    uint64_t v9 = [v8 companionDevice];

    if ([v4 isEqual:v9])
    {
      char v10 = 1;
    }
    else if (v9)
    {
      char v10 = 0;
    }
    else
    {
      id v15 = [v5 device];
      char v10 = [v4 isEqual:v15];

      uint64_t v9 = 0;
    }
    goto LABEL_14;
  }
LABEL_8:
  char v10 = 1;
LABEL_15:

  return v10;
}

- (BOOL)shouldRelayNotificationToRegisteredDevicesForSource:(id)a3
{
  id v4 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = v5;
  char v7 = [v4 destination];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (![v6 isRemote] || (isKindOfClass & 1) == 0 || !v7) {
    goto LABEL_16;
  }
  uint64_t v9 = [v6 name];
  if (([v9 isEqualToString:@"kCharacteristicValueUpdatedNotificationKey"] & 1) == 0)
  {
    char v10 = [v6 name];
    if ([v10 isEqualToString:@"kMultipleCharacteristicValuesUpdatedNotificationKey"])
    {

      goto LABEL_10;
    }
    id v15 = [v6 name];
    char v16 = [v15 isEqualToString:@"kCharacterisiticsChangedInternalNotificationKey"];

    if (v16) {
      goto LABEL_11;
    }
LABEL_16:
    if (!isWatch()) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }
LABEL_10:

LABEL_11:
  uint64_t v11 = [(HMDHome *)self primaryResident];
  if ([v11 isCurrentDevice])
  {

LABEL_17:
    BOOL v14 = 1;
    goto LABEL_18;
  }
  char v12 = [(HMDHome *)self homeManager];
  char v13 = [v12 isPairedWithWatch];

  if (v13) {
    goto LABEL_17;
  }
LABEL_14:
  BOOL v14 = 0;
LABEL_18:

  return v14;
}

- (void)_notifyChangedCharacteristics:(id)a3 message:(id)a4 modifiedCharacteristics:(id)a5 broadcast:(BOOL)a6
{
  BOOL v6 = a6;
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  char v13 = (void *)MEMORY[0x1D9452090]();
  BOOL v14 = self;
  id v15 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    char v16 = HMFGetLogIdentifier();
    id v17 = [v11 shortDescription];
    *(_DWORD *)buf = 138543618;
    uint64_t v24 = v16;
    __int16 v25 = 2112;
    uint64_t v26 = v17;
    _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@Posting internal notification before remote and XPC notifications. %@", buf, 0x16u);
  }
  LOBYTE(v22) = v6;
  double v18 = (void *)MEMORY[0x1D9452090]([(HMDHome *)v14 _postInternalNotificationForChangedCharacteristics:v10 previouslyNilChangedCharacteristics:MEMORY[0x1E4F1CBF0] modifiedCharacteristics:v12 changedByThisDevice:0 residentShouldNotifyPeers:0 message:v11 broadcast:v22]);
  double v19 = +[HMDCharacteristicUpdateTuple characteristicUpdateTuplesWithCharacteristics:v10 isBroadcast:v6];
  char v20 = +[HMDHome notificationPayloadForChangedCharacteristics:v19 destinationIsXPCTransport:1];
  uint64_t v21 = [(HMDHome *)v14 _splitCharacteristicChanges:v10 changedAccessories:v20];
  [(HMDHome *)v14 _sendClientCharacteristicsChangedNotificationWithIdentifier:0 requestMessage:0 multiPartResponse:0 moreInMultiPartResponse:0 characteristicChanges:v21 completionHandler:0];

  if (!isWatch()
    && [(HMDHome *)v14 shouldRelayNotificationToRegisteredDevicesForSource:v11])
  {
    [(HMDHome *)v14 notifyRemoteUsersOfChangedCharacteristics:v10 message:v11 broadcast:v6];
  }
}

- (void)_handleRequestHomeDataSync:(id)a3
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  BOOL v5 = [(HMDHome *)self isOwnerUser];
  BOOL v6 = (void *)MEMORY[0x1E4F2D140];
  if (!v5)
  {
    char v7 = (void *)MEMORY[0x1D9452090]();
    id v8 = self;
    uint64_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      id v10 = HMFGetLogIdentifier();
      id v11 = [v4 identifier];
      id v12 = [v11 UUIDString];
      *(_DWORD *)buf = 138543618;
      uint64_t v56 = v10;
      __int16 v57 = 2112;
      long long v58 = v12;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Not owner, cannot send for message: %@", buf, 0x16u);
    }
    char v13 = [MEMORY[0x1E4F28C58] errorWithDomain:*v6 code:10 userInfo:0];
    BOOL v14 = [v4 responseHandler];

    if (v14)
    {
      id v15 = [v4 responseHandler];
      ((void (**)(void, void *, void))v15)[2](v15, v13, 0);
    }
  }
  char v16 = [v4 stringForKey:@"pairingUsername"];
  if (!v16)
  {
    id v17 = (void *)MEMORY[0x1D9452090]();
    double v18 = self;
    double v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      char v20 = HMFGetLogIdentifier();
      uint64_t v21 = [v4 identifier];
      uint64_t v22 = [v21 UUIDString];
      *(_DWORD *)buf = 138543618;
      uint64_t v56 = v20;
      __int16 v57 = 2112;
      long long v58 = v22;
      _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_INFO, "%{public}@User is not specified for message: %@", buf, 0x16u);

      BOOL v6 = (void *)MEMORY[0x1E4F2D140];
    }

    char v23 = [MEMORY[0x1E4F28C58] errorWithDomain:*v6 code:2 userInfo:0];
    uint64_t v24 = [v4 responseHandler];

    if (v24)
    {
      __int16 v25 = [v4 responseHandler];
      ((void (**)(void, void *, void))v25)[2](v25, v23, 0);
    }
  }
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  uint64_t v26 = [(HMDHome *)self users];
  uint64_t v27 = [v26 countByEnumeratingWithState:&v50 objects:v54 count:16];
  if (v27)
  {
    uint64_t v28 = v27;
    uint64_t v29 = *(void *)v51;
LABEL_15:
    uint64_t v30 = 0;
    while (1)
    {
      if (*(void *)v51 != v29) {
        objc_enumerationMutation(v26);
      }
      id v31 = *(void **)(*((void *)&v50 + 1) + 8 * v30);
      if (([v31 isRemoteGateway] & 1) == 0)
      {
        long long v32 = [v31 pairingUsername];
        char v33 = [v16 isEqualToString:v32];

        if (v33) {
          break;
        }
      }
      if (v28 == ++v30)
      {
        uint64_t v28 = [v26 countByEnumeratingWithState:&v50 objects:v54 count:16];
        if (v28) {
          goto LABEL_15;
        }
        goto LABEL_22;
      }
    }
    id v34 = v31;

    if (v34) {
      goto LABEL_29;
    }
  }
  else
  {
LABEL_22:
  }
  long long v35 = (void *)MEMORY[0x1D9452090]();
  id v36 = self;
  char v37 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
  {
    unint64_t v38 = HMFGetLogIdentifier();
    int v39 = [v4 identifier];
    uint64_t v40 = [v39 UUIDString];
    *(_DWORD *)buf = 138543618;
    uint64_t v56 = v38;
    __int16 v57 = 2112;
    long long v58 = v40;
    _os_log_impl(&dword_1D49D5000, v37, OS_LOG_TYPE_INFO, "%{public}@Unable to find user for message: %@", buf, 0x16u);
  }
  uint64_t v41 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:2 userInfo:0];
  uint64_t v42 = [v4 responseHandler];

  if (v42)
  {
    uint64_t v43 = [v4 responseHandler];
    ((void (**)(void, void *, void))v43)[2](v43, v41, 0);
  }
  id v34 = 0;
LABEL_29:
  long long v44 = [v4 destination];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    char v45 = v44;
  }
  else {
    char v45 = 0;
  }
  id v46 = v45;

  if (v46)
  {
    int v47 = [(HMDHome *)self homeManager];
    id v48 = [v46 device];
    id v49 = [v48 remoteDestinationString];
    [v47 sendUserAdded:v34 destination:v49 toHome:self];
  }
  [v4 respondWithPayload:0];
}

- (void)_sendInvitationCancelationRequestToInvitee:(id)a3
{
  v18[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  BOOL v5 = [(HMDHome *)self homeManager];
  v17[0] = @"kInvitationIdentifierKey";
  BOOL v6 = [v4 identifier];
  char v7 = [v6 UUIDString];
  v17[1] = @"kInvitationStateKey";
  v18[0] = v7;
  v18[1] = &unk_1F2DC7570;
  id v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v18 forKeys:v17 count:2];

  uint64_t v9 = [v4 invitationData];
  id v10 = [MEMORY[0x1E4F65480] internalMessageWithName:@"kUpdateHomeInvitationStateInternalRequestKey" messagePayload:v8];
  id v11 = [v5 uuid];
  id v12 = [v9 inviteeUserID];
  char v13 = [(HMDHome *)self workQueue];
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  void v15[2] = __54__HMDHome__sendInvitationCancelationRequestToInvitee___block_invoke;
  v15[3] = &unk_1E6A17DF0;
  void v15[4] = self;
  id v16 = v4;
  id v14 = v4;
  [v5 sendUnsecureMessage:v10 target:v11 userID:v12 responseQueue:v13 responseHandler:v15];
}

void __54__HMDHome__sendInvitationCancelationRequestToInvitee___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  char v7 = (void *)MEMORY[0x1D9452090]();
  id v8 = *(id *)(a1 + 32);
  uint64_t v9 = HMFGetOSLogHandle();
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
  if (v5)
  {
    if (v10)
    {
      id v11 = HMFGetLogIdentifier();
      id v12 = [*(id *)(a1 + 40) identifier];
      char v13 = [v12 UUIDString];
      int v17 = 138543874;
      double v18 = v11;
      __int16 v19 = 2112;
      char v20 = v13;
      __int16 v21 = 2112;
      id v22 = v5;
      id v14 = "%{public}@Failed to cancel invitation state for invitee with identifier %@ due to error %@";
      id v15 = v9;
      uint32_t v16 = 32;
LABEL_6:
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, v14, (uint8_t *)&v17, v16);
    }
  }
  else if (v10)
  {
    id v11 = HMFGetLogIdentifier();
    id v12 = [*(id *)(a1 + 40) identifier];
    char v13 = [v12 UUIDString];
    int v17 = 138543618;
    double v18 = v11;
    __int16 v19 = 2112;
    char v20 = v13;
    id v14 = "%{public}@Canceled invitation state for invitee with identifier %@";
    id v15 = v9;
    uint32_t v16 = 22;
    goto LABEL_6;
  }
}

- (void)__handleCompletedOutgoingInvitation:(id)a3
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  char v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    uint64_t v9 = [v4 identifier];
    BOOL v10 = [v9 UUIDString];
    int v13 = 138543618;
    id v14 = v8;
    __int16 v15 = 2112;
    uint32_t v16 = v10;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Removing outgoing invitation '%@' since it completed", (uint8_t *)&v13, 0x16u);
  }
  [v4 updateInvitationState:3];
  id v11 = [v4 user];
  id v12 = [(HMDHome *)v6 usersPendingUserManagementOperations];
  [v12 removeObject:v11];
}

- (void)__handleCancelledOutgoingInvitation:(id)a3
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  [v4 cancel];
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  __int16 v19 = v4;
  id v5 = [v4 operations];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v20 objects:v28 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v21 != v8) {
          objc_enumerationMutation(v5);
        }
        BOOL v10 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        if ([v10 isFinished] && (objc_msgSend(v10, "isCancelled") & 1) == 0)
        {
          id v11 = [v10 user];
          id v12 = [v10 accessory];
          int v13 = +[HMDUserManagementOperation removeUserManagementOperationForUser:v11 accessory:v12 model:0];

          id v14 = (void *)MEMORY[0x1D9452090]();
          __int16 v15 = self;
          uint32_t v16 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            uint64_t v17 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            __int16 v25 = v17;
            __int16 v26 = 2112;
            uint64_t v27 = v13;
            _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, "%{public}@Adding remove operation for canceled invite: %@", buf, 0x16u);
          }
          double v18 = +[HMDUserManagementOperationManager sharedManager];
          [v18 addOperation:v13];
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v20 objects:v28 count:16];
    }
    while (v7);
  }
}

- (void)__handleAcceptedOutgoingInvitationResponse:(id)a3 destinationAddress:(id)a4 publicKey:(id)a5 username:(id)a6 issuerPublicKeyER:(id)a7 presenceAuthStatus:(id)a8 completionHandler:(id)a9
{
  uint64_t v143 = *MEMORY[0x1E4F143B8];
  id v15 = a3;
  id v102 = a4;
  id v99 = a5;
  id v101 = a6;
  id v95 = a7;
  id v98 = a8;
  aBlocuint64_t k = a9;
  long long v105 = v15;
  long long v109 = [v15 user];
  uint32_t v16 = (void *)MEMORY[0x1D9452090]();
  id val = self;
  uint64_t v17 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    double v18 = HMFGetLogIdentifier();
    unint64_t v19 = [(__CFString *)v109 privilege];
    if (v19 > 4) {
      long long v20 = @"None";
    }
    else {
      long long v20 = off_1E6A14D48[v19];
    }
    long long v21 = v20;
    *(_DWORD *)buf = 138543874;
    uint64_t v136 = v18;
    __int16 v137 = 2112;
    uint64_t v138 = v109;
    __int16 v139 = 2112;
    int v140 = v21;
    _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@User: %@, has accepted an invitation, processing acceptance. %@", buf, 0x20u);
  }
  [(__CFString *)v109 setHome:val];
  id v107 = [(__CFString *)v109 modelObjectWithChangeType:1];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    long long v22 = v107;
  }
  else {
    long long v22 = 0;
  }
  id v23 = v22;

  if (v109 && v23)
  {
    id v106 = v101;
    if ([(__CFString *)v109 isRemoteGateway])
    {
      uint64_t v24 = [(HMDHome *)val keychainStore];
      id v131 = 0;
      id v132 = 0;
      char v25 = [v24 getControllerPublicKey:0 secretKey:0 keyPair:0 username:&v132 allowCreation:0 error:&v131];
      id v100 = v132;
      long long v104 = (HMDOutgoingHomeInvitationModel *)v131;

      if ((v25 & 1) == 0)
      {
        id v50 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3 description:@"Failed to set resident pairing name" reason:0 suggestion:0];
        long long v53 = _Block_copy(aBlock);
        uint64_t v54 = v53;
        if (v53) {
          (*((void (**)(void *, id))v53 + 2))(v53, v50);
        }
        goto LABEL_48;
      }
      if ([v100 isEqualToString:v106])
      {
        __int16 v26 = +[HMDDevice deviceWithDestination:v102];
        uint64_t v27 = [v26 identifier];
        uint64_t v28 = [v27 UUIDString];

        id v106 = (id)v28;
      }
    }
    long long v104 = (HMDOutgoingHomeInvitationModel *)[objc_alloc(MEMORY[0x1E4F65510]) initWithPairingKeyData:v99];
    id v100 = (id)[objc_alloc(MEMORY[0x1E4F5BE00]) initWithIdentifier:v106 publicKey:v104 privateKey:0 permissions:0];
    uint64_t v29 = [(__CFString *)v109 userID];
    uint64_t v30 = [(HMDHome *)val uuid];
    uint64_t v94 = +[HMDUser UUIDWithUserID:v29 forHomeIdentifier:v30 uuid:0 pairingIdentity:v100];

    id v31 = [(__CFString *)v109 uuid];
    char v32 = HMFEqualObjects();

    if ((v32 & 1) == 0)
    {
      char v33 = (void *)MEMORY[0x1D9452090]();
      id v34 = val;
      long long v35 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        id v36 = HMFGetLogIdentifier();
        char v37 = [(__CFString *)v109 uuid];
        unint64_t v38 = [(__CFString *)v109 userID];
        *(_DWORD *)buf = 138544130;
        uint64_t v136 = v36;
        __int16 v137 = 2112;
        uint64_t v138 = v37;
        __int16 v139 = 2112;
        int v140 = (__CFString *)v94;
        __int16 v141 = 2112;
        __int16 v142 = v38;
        _os_log_impl(&dword_1D49D5000, v35, OS_LOG_TYPE_INFO, "%{public}@Old invitee uuid %@, new invitee uuid %@ for userID %@", buf, 0x2Au);
      }
      [(__CFString *)v109 setUUID:v94];
      int v39 = [(__CFString *)v109 modelObjectWithChangeType:1];
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t v40 = v39;
      }
      else {
        uint64_t v40 = 0;
      }
      id v107 = v40;
    }
    uint64_t v41 = objc_msgSend(v100, "hmd_dictionaryEncoding");
    [v107 setPairingIdentity:v41];

    uint64_t v42 = [v98 number];
    [v107 setPresenceAuthorizationStatus:v42];

    [(__CFString *)v109 setPairingIdentity:v100];
    uint64_t v43 = [(HMDHome *)val accessories];
    id v130 = 0;
    uint64_t v97 = [(HMDHome *)val prepareUserManagementOperationForUser:v109 accessories:v43 type:1 error:&v130];
    id v92 = (__CFString *)v130;

    if (!v97)
    {
      if (shouldLogPrivateInformation())
      {
        long long v44 = [(__CFString *)v109 userID];
      }
      else
      {
        long long v44 = @"...";
        uint64_t v55 = @"...";
      }
      uint64_t v56 = (void *)MEMORY[0x1D9452090]();
      __int16 v57 = val;
      long long v58 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
      {
        uint64_t v59 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543874;
        uint64_t v136 = v59;
        __int16 v137 = 2112;
        uint64_t v138 = v44;
        __int16 v139 = 2112;
        int v140 = v92;
        _os_log_impl(&dword_1D49D5000, v58, OS_LOG_TYPE_ERROR, "%{public}@Failed to prepare add user operations for recently accepted user '%@' with error: %@", buf, 0x20u);
      }
    }
    long long v60 = [HMDOutgoingHomeInvitationModel alloc];
    uint64_t v61 = [v15 identifier];
    id v62 = [(HMDHome *)val uuid];
    long long v96 = [(HMDBackingStoreModelObject *)v60 initWithObjectChangeType:3 uuid:v61 parentUUID:v62];

    [(HMDOutgoingHomeInvitationModel *)v96 setInvitationState:&unk_1F2DC75D0];
    [(HMDOutgoingHomeInvitationModel *)v96 setInviteeDestinationAddress:v102];
    long long v113 = [(HMDHome *)val homeManager];
    __int16 v63 = [v113 backingStore];
    unint64_t v64 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    long long v112 = [v63 transaction:@"kUserManagementOperationAddedKey" options:v64];

    __int16 v65 = dispatch_group_create();
    long long v111 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v97, "count"));
    if ([v97 count])
    {
      id v66 = [(HMDHome *)val usersPendingUserManagementOperations];
      [v66 addObject:v109];

      [(HMDBackingStoreModelObject *)v96 setObjectChangeType:2];
      long long v128 = 0u;
      long long v129 = 0u;
      long long v126 = 0u;
      long long v127 = 0u;
      id obj = v97;
      uint64_t v67 = [obj countByEnumeratingWithState:&v126 objects:v134 count:16];
      if (v67)
      {
        uint64_t v68 = *(void *)v127;
        do
        {
          for (uint64_t i = 0; i != v67; ++i)
          {
            if (*(void *)v127 != v68) {
              objc_enumerationMutation(obj);
            }
            id v70 = *(void **)(*((void *)&v126 + 1) + 8 * i);
            dispatch_group_enter(v65);
            id v71 = [v70 accessory];
            uint64_t v72 = [v71 identifier];
            uint64_t v73 = [v70 user];
            uint64_t v74 = [v73 pairingIdentity];
            v124[0] = MEMORY[0x1E4F143A8];
            v124[1] = 3221225472;
            v124[2] = __147__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke_1439;
            v124[3] = &unk_1E6A197F0;
            uint64_t v125 = v65;
            [v113 cleanupOperationsForAccessory:v72 user:v74 completion:v124];

            long long v75 = [v70 modelObjectWithChangeType:1];
            [v112 add:v75];

            long long v76 = [v70 identifier];
            id v77 = [v76 UUIDString];
            [v111 addObject:v77];
          }
          uint64_t v67 = [obj countByEnumeratingWithState:&v126 objects:v134 count:16];
        }
        while (v67);
      }
    }
    else
    {
      id v78 = (void *)MEMORY[0x1D9452090]();
      long long v79 = val;
      id v80 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
      {
        uint64_t v81 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        uint64_t v136 = v81;
        _os_log_impl(&dword_1D49D5000, v80, OS_LOG_TYPE_INFO, "%{public}@Immediately processing outgoing invitation as there are no accessory operations to perform", buf, 0xCu);
      }
    }
    id v82 = [(HMDHome *)val backingStore];
    uint64_t v83 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    uint64_t v84 = [v82 transaction:@"kAddUserRequestKey" options:v83];

    long long v85 = (void *)MEMORY[0x1E4F65480];
    id v86 = [v105 identifier];
    unint64_t v87 = [v85 messageWithName:@"kAddUserRequestKey" identifier:v86 messagePayload:0];
    [v84 add:v107 withMessage:v87];

    [v84 add:v96];
    objc_initWeak((id *)buf, val);
    v114[0] = MEMORY[0x1E4F143A8];
    v114[1] = 3221225472;
    v114[2] = __147__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke_1440;
    v114[3] = &unk_1E6A06E20;
    v114[4] = val;
    long long v115 = v109;
    int v88 = v65;
    long long v116 = v88;
    id v89 = v112;
    id v117 = v89;
    objc_copyWeak(&v123, (id *)buf);
    id v90 = v111;
    id v118 = v90;
    id v119 = v105;
    id v120 = v102;
    id v122 = aBlock;
    id v50 = v93;
    id v121 = v50;
    __int16 v91 = _Block_copy(v114);
    [v84 run:v91];

    objc_destroyWeak(&v123);
    objc_destroyWeak((id *)buf);

    uint64_t v54 = (void *)v94;
LABEL_48:

    id v23 = v107;
    goto LABEL_49;
  }
  char v45 = [(HMDHome *)val backingStore];
  id v46 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  id v106 = [v45 transaction:@"kUpdateInvitationStateRequestKey" options:v46];

  int v47 = [HMDOutgoingHomeInvitationModel alloc];
  id v48 = [v15 identifier];
  id v49 = [(HMDHome *)val uuid];
  long long v104 = [(HMDBackingStoreModelObject *)v47 initWithObjectChangeType:3 uuid:v48 parentUUID:v49];

  [v106 add:v104];
  v133[0] = MEMORY[0x1E4F143A8];
  v133[1] = 3221225472;
  v133[2] = __147__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke;
  v133[3] = &unk_1E6A197F0;
  v133[4] = val;
  [v106 run:v133];
  id v50 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3 description:@"Outgoing Invitation does not have a valid invitee. Cancelling the invite." reason:0 suggestion:0];
  long long v51 = _Block_copy(aBlock);
  long long v52 = v51;
  if (v51) {
    (*((void (**)(void *, id))v51 + 2))(v51, v50);
  }

LABEL_49:
}

void __147__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    int v8 = 138543618;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Finished deleting the outgoing invitation with error: %@", (uint8_t *)&v8, 0x16u);
  }
}

void __147__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke_1439(uint64_t a1)
{
}

void __147__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke_1440(uint64_t a1, void *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  int v4 = shouldLogPrivateInformation();
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = *(id *)(a1 + 32);
  uint64_t v7 = HMFGetOSLogHandle();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if (v4)
  {
    if (v8)
    {
      uint64_t v9 = HMFGetLogIdentifier();
      __int16 v10 = [*(id *)(a1 + 40) userID];
      id v11 = [*(id *)(a1 + 40) displayName];
      *(_DWORD *)buf = 138544130;
      uint64_t v29 = v9;
      __int16 v30 = 2112;
      id v31 = v10;
      __int16 v32 = 2112;
      char v33 = v11;
      __int16 v34 = 2112;
      id v35 = v3;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Added user with userID: %@ and displayName: %@ with error: %@", buf, 0x2Au);
    }
  }
  else if (v8)
  {
    uint64_t v12 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138544130;
    uint64_t v29 = v12;
    __int16 v30 = 2112;
    id v31 = @"...";
    __int16 v32 = 2112;
    char v33 = @"...";
    __int16 v34 = 2112;
    id v35 = v3;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Added user with userID: %@ and displayName: %@ with error: %@", buf, 0x2Au);
  }
  int v13 = *(NSObject **)(a1 + 48);
  id v14 = [*(id *)(a1 + 32) workQueue];
  uint64_t v20 = MEMORY[0x1E4F143A8];
  uint64_t v21 = 3221225472;
  long long v22 = __147__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke_1441;
  id v23 = &unk_1E6A17780;
  id v24 = *(id *)(a1 + 56);
  objc_copyWeak(&v27, (id *)(a1 + 104));
  id v25 = *(id *)(a1 + 64);
  id v26 = *(id *)(a1 + 72);
  dispatch_group_notify(v13, v14, &v20);

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  uint32_t v16 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v17 = objc_msgSend(WeakRetained, "homeManager", v20, v21, v22, v23, v24, v25);
    [v17 sendUserAdded:*(void *)(a1 + 40) destination:*(void *)(a1 + 80) toHome:v16];
  }
  double v18 = _Block_copy(*(const void **)(a1 + 96));
  unint64_t v19 = v18;
  if (v18) {
    (*((void (**)(void *, void))v18 + 2))(v18, *(void *)(a1 + 88));
  }

  objc_destroyWeak(&v27);
}

void __147__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke_1441(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __147__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke_2;
  v3[3] = &unk_1E6A15888;
  objc_copyWeak(&v6, (id *)(a1 + 56));
  id v4 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  [v2 run:v3];

  objc_destroyWeak(&v6);
}

uint64_t __147__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke_2(id *a1)
{
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    id v11 = WeakRetained;
    if ([a1[4] count])
    {
      id v3 = [v11 backingStore];
      id v4 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      id v5 = [v3 transaction:@"kAddUserRequestKey" options:v4];

      id v6 = [HMDOutgoingHomeInvitationModel alloc];
      uint64_t v7 = [a1[5] identifier];
      BOOL v8 = [v11 uuid];
      uint64_t v9 = [(HMDBackingStoreModelObject *)v6 initWithObjectChangeType:2 uuid:v7 parentUUID:v8];

      [(HMDOutgoingHomeInvitationModel *)v9 setOperationIdentifiers:a1[4]];
      [v5 add:v9];
      [v5 run];
    }
  }
  return MEMORY[0x1F41817F8]();
}

- (void)_handleRemoveUserModel:(id)a3 message:(id)a4
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  BOOL v8 = [v6 uuid];
  uint64_t v9 = [(HMDHome *)self userWithUUID:v8];

  if (v9)
  {
    if (v9 == self->_currentUser)
    {
      __int16 v10 = (void *)MEMORY[0x1D9452090]();
      id v11 = self;
      uint64_t v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        int v13 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        int v39 = v13;
        _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_ERROR, "%{public}@Attempting to remove current user", buf, 0xCu);
      }
      currentUser = self->_currentUser;
      self->_currentUser = 0;
    }
    [(HMDHome *)self _removeUserFromContainer:v9];
    id v15 = [(HMDHome *)self usersPendingUserManagementOperations];
    [v15 removeObject:v9];

    [(HMDUser *)v9 setHome:0];
    uint32_t v16 = [v7 transactionResult];
    [v16 markChanged];
    if ([v16 source] == 1)
    {
      uint64_t v17 = +[HMDRemovedUser removedUserWithUser:v9];
      double v18 = [(HMDHome *)self removedUsers];
      [v18 addObject:v17];

      unint64_t v19 = (void *)MEMORY[0x1D9452090]();
      uint64_t v20 = self;
      uint64_t v21 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        long long v22 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        int v39 = v22;
        __int16 v40 = 2112;
        uint64_t v41 = v17;
        _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@Sending message to removed user: %@", buf, 0x16u);
      }
      [v17 setRemovalInProgress:1];
      objc_initWeak((id *)buf, v20);
      id v23 = [(HMDHome *)v20 homeManager];
      id v24 = [(HMDUser *)v9 pairingUsername];
      v35[0] = MEMORY[0x1E4F143A8];
      v35[1] = 3221225472;
      v35[2] = __42__HMDHome__handleRemoveUserModel_message___block_invoke;
      v35[3] = &unk_1E6A17958;
      objc_copyWeak(&v37, (id *)buf);
      id v25 = v17;
      id v36 = v25;
      [v23 sendUserRemoved:v9 fromHome:v20 pairingUsername:v24 pushToCloud:1 completionHandler:v35];

      objc_destroyWeak(&v37);
      objc_destroyWeak((id *)buf);
    }
    else
    {
      id v31 = (void *)MEMORY[0x1D9452090]();
      __int16 v32 = self;
      char v33 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
      {
        __int16 v34 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        int v39 = v34;
        _os_log_impl(&dword_1D49D5000, v33, OS_LOG_TYPE_DEBUG, "%{public}@Skipping remove user due to non-xpc backingstore transaction", buf, 0xCu);
      }
      [v7 respondWithPayload:0];
    }
  }
  else
  {
    id v26 = (void *)MEMORY[0x1D9452090]();
    id v27 = self;
    uint64_t v28 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      uint64_t v29 = HMFGetLogIdentifier();
      __int16 v30 = [v6 uuid];
      *(_DWORD *)buf = 138543618;
      int v39 = v29;
      __int16 v40 = 2112;
      uint64_t v41 = v30;
      _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_ERROR, "%{public}@Cannot find the user with UUID %@", buf, 0x16u);
    }
    uint32_t v16 = [MEMORY[0x1E4F28C58] hmfErrorWithCode:2];
    [v7 respondWithError:v16];
  }
}

void __42__HMDHome__handleRemoveUserModel_message___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v5 && [v5 code] != 2)
    {
      uint64_t v21 = (void *)MEMORY[0x1D9452090]();
      id v22 = WeakRetained;
      id v23 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        id v24 = HMFGetLogIdentifier();
        int v25 = 138543618;
        id v26 = v24;
        __int16 v27 = 2112;
        id v28 = v5;
        _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_ERROR, "%{public}@Unable to remove user: %@", (uint8_t *)&v25, 0x16u);
      }
    }
    else
    {
      if ([v5 code] == 2)
      {
        BOOL v8 = (void *)MEMORY[0x1D9452090]();
        id v9 = WeakRetained;
        __int16 v10 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          id v11 = HMFGetLogIdentifier();
          int v25 = 138543618;
          id v26 = v11;
          __int16 v27 = 2112;
          id v28 = v5;
          _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Treating user removed message error as success: %@", (uint8_t *)&v25, 0x16u);
        }
      }
      uint64_t v12 = (void *)MEMORY[0x1D9452090]();
      id v13 = WeakRetained;
      id v14 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        id v15 = HMFGetLogIdentifier();
        uint32_t v16 = *(void **)(a1 + 32);
        int v25 = 138543618;
        id v26 = v15;
        __int16 v27 = 2112;
        id v28 = v16;
        _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Successfully sent removed user message for user: %@", (uint8_t *)&v25, 0x16u);
      }
      uint64_t v17 = [v13 removedUsers];
      [v17 removeObject:*(void *)(a1 + 32)];
    }
    [*(id *)(a1 + 32) setRemovalInProgress:0];
  }
  else
  {
    double v18 = (void *)MEMORY[0x1D9452090]();
    unint64_t v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = HMFGetLogIdentifier();
      int v25 = 138543362;
      id v26 = v20;
      _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_ERROR, "%{public}@Lost reference to home during user removal", (uint8_t *)&v25, 0xCu);
    }
  }
}

- (void)_handleAddUserModel:(id)a3 message:(id)a4
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  BOOL v8 = [v6 uuid];
  id v9 = [(HMDHome *)self userWithUUID:v8];

  __int16 v10 = (void *)MEMORY[0x1D9452090]();
  id v11 = self;
  uint64_t v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v13 = HMFGetLogIdentifier();
    id v14 = [v6 debugString:1];
    *(_DWORD *)buf = 138543618;
    uint64_t v94 = v13;
    __int16 v95 = 2112;
    long long v96 = v14;
    _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Adding HMDUserModel: %@", buf, 0x16u);
  }
  if (!v9)
  {
    long long v85 = v11;
    uint64_t v20 = [(HMDHome *)v11 homeManager];
    id v21 = v6;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v22 = v21;
    }
    else {
      id v22 = 0;
    }
    id v23 = v22;

    if (v23)
    {
      id v24 = [[HMDResidentUser alloc] initWithModelObject:v23];
      if (v24)
      {
LABEL_12:
        id v81 = v23;
        id v82 = v6;
        uint64_t v83 = v7;
        [(HMDResidentUser *)v24 configureWithHome:v85];
        [(HMDHome *)v85 _addUserToContainer:v24];
        [(HMDHome *)v85 _cleanRemovedUsers:v24];
        uint64_t v84 = v20;
        [v20 reprocessUserManagementModels];
        long long v88 = 0u;
        long long v89 = 0u;
        long long v86 = 0u;
        long long v87 = 0u;
        int v25 = [(HMDHome *)v85 outgoingInvitations];
        uint64_t v26 = [v25 countByEnumeratingWithState:&v86 objects:v92 count:16];
        if (v26)
        {
          uint64_t v27 = v26;
          uint64_t v28 = *(void *)v87;
          while (2)
          {
            for (uint64_t i = 0; i != v27; ++i)
            {
              if (*(void *)v87 != v28) {
                objc_enumerationMutation(v25);
              }
              __int16 v30 = *(void **)(*((void *)&v86 + 1) + 8 * i);
              id v31 = [v30 user];
              __int16 v32 = [v31 pairingIdentity];
              char v33 = [(HMDUser *)v24 pairingIdentity];
              int v34 = [v32 isEqual:v33];

              if (v34)
              {
                [v30 setUser:v24];
                goto LABEL_26;
              }
            }
            uint64_t v27 = [v25 countByEnumeratingWithState:&v86 objects:v92 count:16];
            if (v27) {
              continue;
            }
            break;
          }
        }
LABEL_26:

        [(HMDHome *)v85 _addUserToIdentityRegistry:v24];
        id v9 = v24;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          unint64_t v38 = v9;
        }
        else {
          unint64_t v38 = 0;
        }
        id v37 = v38;

        if (v37)
        {
          int v39 = (void *)MEMORY[0x1D9452090]([(HMDHome *)v85 _updateConfigurationStateForResidentDevice:v37 desiredConfigState:2 message:0]);
          __int16 v40 = v85;
          uint64_t v41 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
          {
            uint64_t v42 = HMFGetLogIdentifier();
            uint64_t v43 = [(HMDUser *)v9 userID];
            *(_DWORD *)buf = 138543618;
            uint64_t v94 = v42;
            __int16 v95 = 2112;
            long long v96 = v43;
            _os_log_impl(&dword_1D49D5000, v41, OS_LOG_TYPE_INFO, "%{public}@Removing resident user %@ from unassociated list", buf, 0x16u);
          }
          long long v44 = [(__CFString *)v37 userID];
          [v84 removeFromUnassociatedPeers:v44 home:v40];

          char v45 = (void *)MEMORY[0x1D9452090]();
          id v46 = v40;
          int v47 = HMFGetOSLogHandle();
          id v6 = v82;
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
          {
            id v48 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543362;
            uint64_t v94 = v48;
            _os_log_impl(&dword_1D49D5000, v47, OS_LOG_TYPE_DEBUG, "%{public}@Add resident device", buf, 0xCu);
          }
          id v49 = v81;
        }
        else
        {
          if ([(HMDUser *)v9 isCurrentUser])
          {
            id v50 = (void *)MEMORY[0x1D9452090]();
            long long v51 = v85;
            long long v52 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
            {
              long long v53 = HMFGetLogIdentifier();
              uint64_t v54 = (__CFString *)v51[6];
              *(_DWORD *)buf = 138543874;
              uint64_t v94 = v53;
              __int16 v95 = 2112;
              long long v96 = v54;
              __int16 v97 = 2112;
              id v98 = v9;
              _os_log_impl(&dword_1D49D5000, v52, OS_LOG_TYPE_INFO, "%{public}@Newly added user is current user, updating _currentUser from %@ to %@", buf, 0x20u);
            }
            objc_storeStrong(v51 + 6, v24);
            uint64_t v55 = [v51 presenceAuthStatus];
            [v51[6] setPresenceAuthStatus:v55];
          }
          v90[0] = @"kUserUUIDKey";
          uint64_t v56 = [(HMDUser *)v9 uuid];
          __int16 v57 = [v56 UUIDString];
          v91[0] = v57;
          v90[1] = @"kUserIDKey";
          long long v58 = [(HMDUser *)v9 userID];
          v91[1] = v58;
          v90[2] = @"kUserDisplayNameKey";
          uint64_t v59 = [(HMDUser *)v9 displayName];
          v91[2] = v59;
          long long v60 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v91 forKeys:v90 count:3];

          uint64_t v61 = (void *)[v60 mutableCopy];
          id v62 = [(HMDUser *)v9 userID];
          [v61 setObject:v62 forKeyedSubscript:@"kUserIDKey"];

          __int16 v63 = [v83 identifier];
          id v49 = v81;
          id v6 = v82;
          if (v63) {
            [v83 identifier];
          }
          else {
          id v71 = [MEMORY[0x1E4F29128] UUID];
          }

          uint64_t v72 = [MEMORY[0x1E4F65480] entitledMessageWithName:@"kUserAddedNotificationKey" identifier:v71 messagePayload:v61];
          uint64_t v73 = [(HMDHome *)v85 msgDispatcher];
          uint64_t v74 = [(HMDHome *)v85 uuid];
          [v73 sendMessage:v72 target:v74];
        }
        id v7 = v83;
        long long v75 = [v83 transactionResult];
        [v75 markChanged];

        uint64_t v20 = v84;
        goto LABEL_54;
      }
    }
    else
    {
      id v9 = [[HMDUser alloc] initWithModelObject:v21];
      [(HMDUser *)v9 refreshDisplayName];
      id v35 = [(HMDUser *)v9 userID];

      if (!v35)
      {
        id v69 = v20;
        id v70 = v7;
        if (shouldLogPrivateInformation())
        {
          id v37 = [v21 userID];
        }
        else
        {
          id v37 = @"...";
          long long v76 = @"...";
        }
        id v77 = (void *)MEMORY[0x1D9452090]();
        id v78 = v85;
        long long v79 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
        {
          id v80 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          uint64_t v94 = v80;
          __int16 v95 = 2112;
          long long v96 = v37;
          _os_log_impl(&dword_1D49D5000, v79, OS_LOG_TYPE_ERROR, "%{public}@User created from model no longer has userID, model userID invalid %@", buf, 0x16u);
        }
        id v7 = v70;
        uint64_t v20 = v69;
        id v49 = 0;
        goto LABEL_54;
      }
      id v24 = (HMDResidentUser *)v9;
      if (v9) {
        goto LABEL_12;
      }
    }
    id v36 = v23;
    if (shouldLogPrivateInformation())
    {
      id v37 = [v21 userID];
    }
    else
    {
      id v37 = @"...";
      unint64_t v64 = @"...";
    }
    __int16 v65 = (void *)MEMORY[0x1D9452090]();
    id v66 = v85;
    uint64_t v67 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
    {
      uint64_t v68 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v94 = v68;
      __int16 v95 = 2112;
      long long v96 = v37;
      _os_log_impl(&dword_1D49D5000, v67, OS_LOG_TYPE_ERROR, "%{public}@Failed to create new user %@", buf, 0x16u);
    }
    id v9 = 0;
    id v49 = v36;
LABEL_54:

    goto LABEL_55;
  }
  id v15 = (void *)MEMORY[0x1D9452090]();
  uint32_t v16 = v11;
  uint64_t v17 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    double v18 = HMFGetLogIdentifier();
    unint64_t v19 = [v6 uuid];
    *(_DWORD *)buf = 138543874;
    uint64_t v94 = v18;
    __int16 v95 = 2112;
    long long v96 = v19;
    __int16 v97 = 2112;
    id v98 = v9;
    _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_ERROR, "%{public}@HMDUserModel %@ passed as add for existing user %@", buf, 0x20u);
  }
  [(HMDUser *)v9 transactionObjectUpdated:0 newValues:v6 message:v7];
LABEL_55:
}

- (void)_updateOutgoingInvitationsWithCompleteUserManagementOperation:(id)a3
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v5 = [(HMDHome *)self outgoingInvitations];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v24 objects:v28 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v25;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v25 != v8) {
          objc_enumerationMutation(v5);
        }
        __int16 v10 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        id v11 = [v10 operations];
        if ([v11 containsObject:v4])
        {
          int v12 = [v10 isComplete];

          if (v12)
          {
            uint64_t v17 = [(HMDHome *)self backingStore];
            double v18 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
            unint64_t v19 = [v17 transaction:@"kUpdateInvitationStateRequestKey" options:v18];

            uint64_t v20 = [HMDOutgoingHomeInvitationModel alloc];
            id v21 = [v10 identifier];
            id v22 = [(HMDHome *)self uuid];
            id v23 = [(HMDBackingStoreModelObject *)v20 initWithObjectChangeType:3 uuid:v21 parentUUID:v22];

            [v19 add:v23];
            [v19 run];

            goto LABEL_13;
          }
        }
        else
        {
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v24 objects:v28 count:16];
    }
    while (v7);
  }

  id v13 = [(HMDHome *)self homeManager];
  id v14 = [v13 backingStore];
  id v15 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  id v5 = [v14 transaction:@"kUserManagementOperationRemovedKey" options:v15];

  uint32_t v16 = [v4 modelObjectWithChangeType:3];
  [v5 add:v16];

  [v5 run];
LABEL_13:
}

- (void)_handleUpdateRequestForHomeInvitation:(id)a3 controllerPublicKey:(id)a4 controllerUsername:(id)a5 invitationState:(int64_t)a6 presenceAuthStatus:(id)a7 preferredUserID:(id)a8 fromHandle:(id)a9 fromAddress:(id)a10 issuerPublicKeyER:(id)a11 message:(id)a12 messageResponseHandler:(id)a13
{
  uint64_t v146 = *MEMORY[0x1E4F143B8];
  id v17 = a3;
  id v102 = a4;
  id v101 = a5;
  id v97 = a7;
  id v100 = a8;
  id v98 = a9;
  id v99 = a10;
  id v96 = a11;
  id v103 = a12;
  id v106 = (void (**)(void))a13;
  long long v105 = v17;
  if (![v17 isExpired])
  {
    if ([v17 responseReceived])
    {
      id v23 = (void *)MEMORY[0x1D9452090]();
      long long v24 = self;
      long long v25 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        long long v26 = HMFGetLogIdentifier();
        long long v27 = [v105 identifier];
        int v28 = [v105 isDeclined];
        uint64_t v29 = @"accepted";
        *(_DWORD *)buf = 138543874;
        __int16 v141 = v26;
        __int16 v142 = 2112;
        if (v28) {
          uint64_t v29 = @"declined";
        }
        int64_t v143 = (int64_t)v27;
        __int16 v144 = 2112;
        uint64_t v145 = v29;
        _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_INFO, "%{public}@Invitation (%@) has already been %@, invitee cannot accept or decline", buf, 0x20u);
      }
      __int16 v30 = (void *)MEMORY[0x1E4F28C58];
      if ([v105 isDeclined]) {
        uint64_t v31 = 1008;
      }
      else {
        uint64_t v31 = 1007;
      }
      long long v104 = [v30 errorWithDomain:*MEMORY[0x1E4F2D140] code:v31 userInfo:0];
      if (v106) {
        goto LABEL_25;
      }
      goto LABEL_72;
    }
    if ((unint64_t)(a6 - 3) > 1)
    {
      unint64_t v38 = (void *)MEMORY[0x1D9452090]();
      int v39 = self;
      __int16 v40 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        uint64_t v41 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        __int16 v141 = v41;
        __int16 v142 = 2048;
        int64_t v143 = a6;
        _os_log_impl(&dword_1D49D5000, v40, OS_LOG_TYPE_INFO, "%{public}@Failed to update invite state since the value %ld was incorrect", buf, 0x16u);
      }
      long long v104 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:43 userInfo:0];
      if (v106) {
        goto LABEL_25;
      }
      goto LABEL_72;
    }
    if (a6 != 3)
    {
      if (shouldLogPrivateInformation())
      {
        uint64_t v42 = [v17 user];
        long long v104 = [v42 userID];
      }
      else
      {
        long long v104 = @"...";
        uint64_t v43 = @"...";
      }
      long long v44 = (void *)MEMORY[0x1D9452090](v43);
      char v45 = self;
      id v46 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
      {
        int v47 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        __int16 v141 = v47;
        __int16 v142 = 2112;
        int64_t v143 = (int64_t)v104;
        _os_log_impl(&dword_1D49D5000, v46, OS_LOG_TYPE_INFO, "%{public}@User %@ declined invite", buf, 0x16u);
      }
      uint64_t v48 = [v103 name];
      id v49 = (void *)v48;
      id v50 = @"UpdateOutgoingInvitationToAccept";
      if (v48) {
        id v50 = (__CFString *)v48;
      }
      long long v51 = v50;

      long long v52 = [(HMDHome *)v45 backingStore];
      long long v53 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      uint64_t v54 = [v52 transaction:v51 options:v53];

      uint64_t v55 = [v105 emptyModelObjectWithChangeType:2];
      uint64_t v56 = [NSNumber numberWithInteger:a6];
      [v55 setInvitationState:v56];

      if (v103) {
        objc_msgSend(v54, "add:withMessage:", v55);
      }
      else {
        [v54 add:v55];
      }
      [v54 run];

      goto LABEL_72;
    }
    __int16 v32 = [HMDSharedUserInviteOwnerResponseLogEventBuilder alloc];
    char v33 = [v17 identifier];
    int v34 = [v105 user];
    id v35 = -[HMDSharedUserInviteOwnerResponseLogEventBuilder initWithHome:sessionIdentifier:invitationType:](v32, "initWithHome:sessionIdentifier:invitationType:", self, v33, [v34 privilege]);

    long long v104 = (__CFString *)v35;
    [(HMDHome *)self addSharedUserResponseEventBuilder:v35];
    if (!v102 || !v101)
    {
      __int16 v57 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:3 userInfo:0];
      [(HMDSharedUserInviteLogEventBuilder *)v35 markError:v57];
      if (v106) {
        v106[2]();
      }

      goto LABEL_72;
    }
    if (v100)
    {
      id v36 = +[HMDAccountHandleFormatter defaultFormatter];
      id v37 = [v36 accountHandleFromString:v100];
    }
    else
    {
      id v37 = 0;
    }
    [(HMDSharedUserInviteOwnerResponseLogEventBuilder *)v35 markAuthenticateUserBegin];
    v111[0] = MEMORY[0x1E4F143A8];
    v111[1] = 3221225472;
    long long v112 = __211__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_issuerPublicKeyER_message_messageResponseHandler___block_invoke;
    long long v113 = &unk_1E6A06DF8;
    long long v104 = v35;
    long long v114 = v104;
    id v123 = v106;
    id v115 = v98;
    long long v116 = self;
    id v117 = v105;
    id v118 = v37;
    id v119 = v102;
    id v120 = v101;
    id v121 = v99;
    id v122 = v97;
    vala = self;
    id v58 = v117;
    id v91 = v115;
    id v94 = v118;
    id v92 = v111;
    id v90 = v58;
    uint64_t v59 = [v58 user];
    id v93 = [v59 accountHandle];

    if (!v93)
    {
      id v77 = (void *)MEMORY[0x1D9452090]();
      id v78 = vala;
      long long v79 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
      {
        id v80 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        __int16 v141 = v80;
        _os_log_impl(&dword_1D49D5000, v79, OS_LOG_TYPE_ERROR, "%{public}@Invalid invitee destination", buf, 0xCu);
      }
      long long v110 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
      v112((uint64_t)v92, v110);
      goto LABEL_71;
    }
    long long v60 = +[HMDAccountRegistry sharedRegistry];
    long long v110 = [v60 accountForHandle:v91];

    long long v89 = [MEMORY[0x1E4F1CA80] setWithCapacity:2];
    if ([v110 isAuthenticated])
    {
      uint64_t v61 = [v110 handles];
      char v62 = [v61 containsObject:v93];

      if ((v62 & 1) == 0)
      {
        __int16 v63 = (void *)MEMORY[0x1D9452090]();
        unint64_t v64 = vala;
        __int16 v65 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
        {
          id v66 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          __int16 v141 = v66;
          __int16 v142 = 2112;
          int64_t v143 = (int64_t)v93;
          _os_log_impl(&dword_1D49D5000, v65, OS_LOG_TYPE_INFO, "%{public}@Authenticating the invitation handle: %@", buf, 0x16u);
        }
        [v89 addObject:v93];
      }
      if (v94)
      {
        uint64_t v67 = [v110 handles];
        char v68 = [v67 containsObject:v94];

        if ((v68 & 1) == 0)
        {
          id v69 = (void *)MEMORY[0x1D9452090]();
          id v70 = vala;
          id v71 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
          {
            uint64_t v72 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            __int16 v141 = v72;
            __int16 v142 = 2112;
            int64_t v143 = (int64_t)v94;
            _os_log_impl(&dword_1D49D5000, v71, OS_LOG_TYPE_INFO, "%{public}@Authenticating the preferred account handle: %@", buf, 0x16u);
          }
          [v89 addObject:v94];
        }
      }
      if (!objc_msgSend(v89, "hmf_isEmpty"))
      {
        v138[0] = 0;
        v138[1] = v138;
        v138[2] = 0x3032000000;
        v138[3] = __Block_byref_object_copy__10691;
        v138[4] = __Block_byref_object_dispose__10692;
        id v139 = 0;
        id v82 = dispatch_group_create();
        long long v134 = 0u;
        long long v135 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        id obj = v89;
        uint64_t v83 = [obj countByEnumeratingWithState:&v134 objects:buf count:16];
        if (v83)
        {
          uint64_t v84 = *(void *)v135;
          do
          {
            for (uint64_t i = 0; i != v83; ++i)
            {
              if (*(void *)v135 != v84) {
                objc_enumerationMutation(obj);
              }
              uint64_t v86 = *(void *)(*((void *)&v134 + 1) + 8 * i);
              dispatch_group_enter(v82);
              objc_initWeak(location, vala);
              long long v87 = +[HMDAccountRegistry sharedRegistry];
              v128[0] = MEMORY[0x1E4F143A8];
              v128[1] = 3221225472;
              v128[2] = ____authenticateAcceptedOutgoingInvitation_block_invoke;
              v128[3] = &unk_1E6A07668;
              objc_copyWeak(&v133, location);
              long long v129 = v82;
              uint64_t v130 = v86;
              id v132 = v138;
              id v131 = v110;
              [v87 _resolveAccountForHandle:v86 completionHandler:v128];

              objc_destroyWeak(&v133);
              objc_destroyWeak(location);
            }
            uint64_t v83 = [obj countByEnumeratingWithState:&v134 objects:buf count:16];
          }
          while (v83);
        }

        long long v88 = [(HMDHome *)vala workQueue];
        location[0] = (id)MEMORY[0x1E4F143A8];
        location[1] = (id)3221225472;
        id location[2] = ____authenticateAcceptedOutgoingInvitation_block_invoke_4303;
        location[3] = &unk_1E6A15CC8;
        long long v127 = v138;
        uint64_t v125 = vala;
        long long v126 = v92;
        dispatch_group_notify(v82, v88, location);

        _Block_object_dispose(v138, 8);
        goto LABEL_70;
      }
      uint64_t v73 = (void *)MEMORY[0x1D9452090]();
      uint64_t v74 = vala;
      long long v75 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
      {
        long long v76 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        __int16 v141 = v76;
        _os_log_impl(&dword_1D49D5000, v75, OS_LOG_TYPE_DEFAULT, "%{public}@Authenticated invitation without resolving", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v73 = (void *)MEMORY[0x1D9452090]();
      uint64_t v74 = vala;
      long long v75 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
      {
        id v81 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        __int16 v141 = v81;
        _os_log_impl(&dword_1D49D5000, v75, OS_LOG_TYPE_INFO, "%{public}@Accepting invitation from unauthenticated user", buf, 0xCu);
      }
    }

    v112((uint64_t)v92, 0);
LABEL_70:

LABEL_71:
    goto LABEL_72;
  }
  double v18 = (void *)MEMORY[0x1D9452090]();
  unint64_t v19 = self;
  uint64_t v20 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    id v21 = HMFGetLogIdentifier();
    id v22 = [v105 identifier];
    *(_DWORD *)buf = 138543618;
    __int16 v141 = v21;
    __int16 v142 = 2112;
    int64_t v143 = (int64_t)v22;
    _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@Invitation (%@) has already expired, invitee cannot accept or decline", buf, 0x16u);
  }
  long long v104 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:1006 userInfo:0];
  if (v106) {
LABEL_25:
  }
    v106[2]();
LABEL_72:
}

void __211__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_issuerPublicKeyER_message_messageResponseHandler___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  if (!v3)
  {
    [v4 markAuthenticateUserEnd];
    uint64_t v6 = +[HMDAccountRegistry sharedRegistry];
    uint64_t v7 = [v6 accountForHandle:*(void *)(a1 + 40)];

    if ([v7 isAuthenticated])
    {
      uint64_t v8 = (void *)MEMORY[0x1D9452090]();
      id v9 = *(id *)(a1 + 48);
      __int16 v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        id v11 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        unint64_t v38 = v11;
        _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_DEBUG, "%{public}@Received authenticated invitation response", buf, 0xCu);
      }
      int v12 = [*(id *)(a1 + 56) user];
      id v13 = [v7 identifier];
      [v12 setAccountIdentifier:v13];
    }
    if (*(void *)(a1 + 64))
    {
      id v14 = [*(id *)(a1 + 56) user];
      id v15 = +[HMDUser userIDForAccountHandle:*(void *)(a1 + 64)];
      [v14 setUserID:v15];
    }
    char v33 = (void *)[objc_alloc(MEMORY[0x1E4F65510]) initWithPairingKeyData:*(void *)(a1 + 72)];
    uint64_t v16 = [objc_alloc(MEMORY[0x1E4F5BE00]) initWithIdentifier:*(void *)(a1 + 80) publicKey:v33 privateKey:0 permissions:0];
    id v17 = [*(id *)(a1 + 48) homeManager];
    double v18 = [*(id *)(a1 + 56) user];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      unint64_t v19 = v18;
    }
    else {
      unint64_t v19 = 0;
    }
    id v20 = v19;

    int v34 = v7;
    uint64_t v31 = v17;
    __int16 v32 = (void *)v16;
    if (v20)
    {
      id v21 = [v20 device];
      if (v21)
      {
        id v22 = [v17 identityRegistry];
        id v23 = [*(id *)(a1 + 56) user];
        [v22 registerIdentity:v16 device:v21 object:v23];

LABEL_18:
      }
    }
    else
    {
      long long v24 = [*(id *)(a1 + 56) user];
      id v21 = [v24 account];

      if (v21)
      {
        id v22 = [v17 identityRegistry];
        [v22 registerIdentity:v16 account:v21 object:*(void *)(a1 + 56)];
        goto LABEL_18;
      }
    }

    long long v25 = *(void **)(a1 + 48);
    uint64_t v26 = *(void *)(a1 + 56);
    uint64_t v28 = *(void *)(a1 + 72);
    uint64_t v27 = *(void *)(a1 + 80);
    uint64_t v30 = *(void *)(a1 + 88);
    uint64_t v29 = *(void *)(a1 + 96);
    v35[0] = MEMORY[0x1E4F143A8];
    v35[1] = 3221225472;
    v35[2] = __211__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_issuerPublicKeyER_message_messageResponseHandler___block_invoke_1422;
    v35[3] = &unk_1E6A19358;
    id v36 = *(id *)(a1 + 104);
    objc_msgSend(v25, "__handleAcceptedOutgoingInvitationResponse:destinationAddress:publicKey:username:issuerPublicKeyER:presenceAuthStatus:completionHandler:", v26, v30, v28, v27, 0, v29, v35);

    goto LABEL_20;
  }
  [v4 markError:v3];
  uint64_t v5 = *(void *)(a1 + 104);
  if (v5) {
    (*(void (**)(uint64_t, id, void))(v5 + 16))(v5, v3, 0);
  }
LABEL_20:
}

uint64_t __211__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_issuerPublicKeyER_message_messageResponseHandler___block_invoke_1422(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, a2, 0);
  }
  return result;
}

- (void)_handleUpdateRequestForHomeInvitationFromInvitee:(id)a3
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [v4 uuidForKey:@"kInvitationIdentifierKey"];
  uint64_t v34 = [v4 dataForKey:@"kControllerPublicKey"];
  uint64_t v6 = [v4 stringForKey:@"kControllerPairingNameKey"];
  uint64_t v7 = [v4 numberForKey:@"kInvitationStateKey"];
  uint64_t v8 = [MEMORY[0x1E4F2EBC0] authWithMessage:v4];
  id v9 = [v4 stringForKey:@"kUserIDKey"];
  __int16 v10 = [v4 remoteSourceID];
  id v11 = +[HMDAccountHandle accountHandleForDestination:v10];
  if (v7)
  {
    char v33 = v6;
    uint64_t v12 = [v7 integerValue];
    id v13 = [(HMDHome *)self outgoingInvitations];
    __int16 v32 = v5;
    id v14 = objc_msgSend(v13, "hmf_firstObjectWithValue:forKeyPath:", v5, @"identifier");

    if (v14)
    {
      id v15 = [v4 responseHandler];
      uint64_t v16 = self;
      id v17 = (void *)v34;
      [(HMDHome *)v16 _handleUpdateRequestForHomeInvitation:v14 controllerPublicKey:v34 controllerUsername:v33 invitationState:v12 presenceAuthStatus:v8 preferredUserID:v9 fromHandle:v11 fromAddress:v10 issuerPublicKeyER:0 message:v4 messageResponseHandler:v15];
    }
    else
    {
      id v21 = (void *)MEMORY[0x1D9452090]();
      id v22 = self;
      id v23 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        long long v24 = v30 = v8;
        uint64_t v29 = [0 identifier];
        [v29 UUIDString];
        v25 = uint64_t v31 = v21;
        *(_DWORD *)buf = 138543618;
        id v36 = v24;
        __int16 v37 = 2112;
        unint64_t v38 = v25;
        _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_INFO, "%{public}@Invalid invite identifier %@ specified from remote user", buf, 0x16u);

        id v21 = v31;
        uint64_t v8 = v30;
      }

      uint64_t v26 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:2 userInfo:0];
      uint64_t v27 = [v4 responseHandler];

      if (v27)
      {
        uint64_t v28 = [v4 responseHandler];
        ((void (**)(void, void *, void))v28)[2](v28, v26, 0);
      }
      id v17 = (void *)v34;
    }

    uint64_t v5 = v32;
    uint64_t v6 = v33;
  }
  else
  {
    double v18 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:3 userInfo:0];
    unint64_t v19 = [v4 responseHandler];

    if (v19)
    {
      id v20 = [v4 responseHandler];
      ((void (**)(void, void *, void))v20)[2](v20, v18, 0);
    }
    id v17 = (void *)v34;
  }
}

- (void)_handleUpdateOutgoingInvitationState:(id)a3
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [v4 uuidForKey:@"kInvitationIdentifierKey"];
  uint64_t v6 = [v4 numberForKey:@"kInvitationStateKey"];
  uint64_t v7 = (void *)v6;
  if (!v5 || !v6)
  {
    id v22 = (void *)MEMORY[0x1D9452090]();
    id v23 = self;
    long long v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      long long v25 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      __int16 v37 = v25;
      _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_ERROR, "%{public}@Unable to accept the invitation as could not find the invite", buf, 0xCu);
    }
    id v9 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:3 userInfo:0];
    uint64_t v26 = [v4 responseHandler];
    ((void (**)(void, void *, void))v26)[2](v26, v9, 0);
    goto LABEL_17;
  }
  uint64_t v8 = [(HMDHome *)self outgoingInvitations];
  id v9 = objc_msgSend(v8, "hmf_firstObjectWithValue:forKeyPath:", v5, @"identifier");

  if (v9)
  {
    if ([v7 integerValue] == 1)
    {
      __int16 v10 = (void *)MEMORY[0x1D9452090]();
      id v11 = self;
      uint64_t v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        id v13 = HMFGetLogIdentifier();
        id v14 = [v9 identifier];
        id v15 = [v14 UUIDString];
        [MEMORY[0x1E4F2E818] homeInvitationStateDescription:1];
        uint64_t v16 = v35 = v10;
        *(_DWORD *)buf = 138543874;
        __int16 v37 = v13;
        __int16 v38 = 2112;
        uint64_t v39 = v15;
        __int16 v40 = 2112;
        uint64_t v41 = v16;
        _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@[Home] Processing request to update invitation %@ to state %@", buf, 0x20u);

        __int16 v10 = v35;
      }

      if (([v9 invitationState] & 0xFFFFFFFFFFFFFFFDLL) != 4) {
        [(HMDHome *)v11 _sendInvitationCancelationRequestToInvitee:v9];
      }
      id v17 = [(HMDHome *)v11 backingStore];
      double v18 = [v4 name];
      unint64_t v19 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      id v20 = [v17 transaction:v18 options:v19];

      id v21 = [v9 emptyModelObjectWithChangeType:3];
      [v20 add:v21 withMessage:v4];

      [v20 run];
      goto LABEL_18;
    }
    uint64_t v26 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:43 userInfo:0];
    uint64_t v34 = [v4 responseHandler];
    v34[2](v34, v26, 0);

LABEL_17:
    goto LABEL_18;
  }
  uint64_t v27 = (void *)MEMORY[0x1D9452090]();
  uint64_t v28 = self;
  uint64_t v29 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    uint64_t v30 = HMFGetLogIdentifier();
    uint64_t v31 = [v5 UUIDString];
    *(_DWORD *)buf = 138543618;
    __int16 v37 = v30;
    __int16 v38 = 2112;
    uint64_t v39 = v31;
    _os_log_impl(&dword_1D49D5000, v29, OS_LOG_TYPE_ERROR, "%{public}@Invalid invite identifier specified %@", buf, 0x16u);
  }
  __int16 v32 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:2 userInfo:0];
  char v33 = [v4 responseHandler];
  ((void (**)(void, void *, void))v33)[2](v33, v32, 0);

  id v9 = 0;
LABEL_18:
}

- (BOOL)doesThisHomeHaveCameras
{
  uint64_t v2 = [(HMDHome *)self accessories];
  char v3 = objc_msgSend(v2, "na_any:", &__block_literal_global_1411);

  return v3;
}

uint64_t __34__HMDHome_doesThisHomeHaveCameras__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  id v4 = v3;
  uint64_t v5 = v4;
  if (v4) {
    uint64_t v6 = [v4 hasCameraStreamService];
  }
  else {
    uint64_t v6 = 0;
  }

  return v6;
}

- (void)_sendInvitation:(id)a3 message:(id)a4 shareURL:(id)a5 shareToken:(id)a6 suppressHomeInviteNotification:(BOOL)a7 logEventBuilder:(id)a8
{
  LODWORD(v57) = a7;
  v99[2] = *MEMORY[0x1E4F143B8];
  id v13 = a3;
  id v14 = a4;
  id v71 = a5;
  id v15 = a6;
  id v16 = a8;
  id val = v13;
  id v17 = [v13 user];
  double v18 = [v17 accountHandle];

  unint64_t v19 = [v13 identifier];
  id v20 = [val endDate];
  objc_initWeak(&location, self);
  id v21 = [val expirationHandler];
  LODWORD(v17) = v21 == 0;

  if (v17)
  {
    id v22 = [(HMDHome *)self workQueue];
    [val setClientQueue:v22];

    objc_initWeak((id *)from, val);
    v81[0] = MEMORY[0x1E4F143A8];
    v81[1] = 3221225472;
    v81[2] = __102__HMDHome__sendInvitation_message_shareURL_shareToken_suppressHomeInviteNotification_logEventBuilder___block_invoke;
    v81[3] = &unk_1E6A177A8;
    objc_copyWeak(&v83, &location);
    objc_copyWeak(&v84, (id *)from);
    id v82 = v14;
    [val setExpirationHandler:v81];

    objc_destroyWeak(&v84);
    objc_destroyWeak(&v83);
    objc_destroyWeak((id *)from);
  }
  objc_msgSend(v16, "markSendInviteBegin", v57);
  id v23 = [val user];
  v74[0] = MEMORY[0x1E4F143A8];
  v74[1] = 3221225472;
  long long v75 = __102__HMDHome__sendInvitation_message_shareURL_shareToken_suppressHomeInviteNotification_logEventBuilder___block_invoke_1408;
  long long v76 = &unk_1E6A137D0;
  objc_copyWeak(&v80, &location);
  id v24 = v18;
  id v77 = v24;
  id v62 = v16;
  id v78 = v62;
  id v61 = v14;
  id v79 = v61;
  id v25 = v24;
  id v69 = v19;
  id v70 = v20;
  id v66 = v71;
  id v67 = v15;
  id v72 = v23;
  char v68 = v74;
  if (self)
  {
    uint64_t v26 = (void *)MEMORY[0x1D9452090]();
    uint64_t v27 = self;
    uint64_t v28 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      uint64_t v29 = HMFGetLogIdentifier();
      *(_DWORD *)frouint64_t m = 138543874;
      *(void *)&from[4] = v29;
      *(_WORD *)&from[12] = 2112;
      *(void *)&from[14] = v25;
      *(_WORD *)&from[22] = 2112;
      id v93 = v72;
      _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_INFO, "%{public}@Sending invite to: %@ for user: %@", from, 0x20u);
    }
    uint64_t v30 = +[HMDAppleAccountManager sharedManager];
    uint64_t v31 = [v30 account];
    __int16 v32 = [v31 handles];
    int v33 = [v32 containsObject:v25];

    if (v33)
    {
      uint64_t v34 = (void *)MEMORY[0x1D9452090]();
      id v35 = v27;
      id v36 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v37 = HMFGetLogIdentifier();
        *(_DWORD *)frouint64_t m = 138543618;
        *(void *)&from[4] = v37;
        *(_WORD *)&from[12] = 2112;
        *(void *)&from[14] = v25;
        _os_log_impl(&dword_1D49D5000, v36, OS_LOG_TYPE_DEFAULT, "%{public}@Attempt to add local user: %@", from, 0x16u);
      }
      unint64_t v64 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:3 userInfo:0];
      v75((uint64_t)v68, v64);
    }
    else
    {
      __int16 v38 = [(HMDHome *)v27 keychainStore];
      id v90 = 0;
      __int16 v63 = [v38 getLocalPairingIdentity:&v90];
      id v65 = v90;

      if (v63)
      {
        v98[0] = @"kHomedVersionKey";
        id v39 = (id)homedVersion;
        v98[1] = @"kHomedSupportedFeaturesKey";
        v99[0] = v39;
        v99[1] = &unk_1F2DC69D0;
        long long v60 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v99 forKeys:v98 count:2];

        v91[0] = @"kHomeName";
        __int16 v40 = [(HMDHome *)v27 name];
        *(void *)frouint64_t m = v40;
        v91[1] = @"kHomeUUID";
        uint64_t v41 = [(HMDHome *)v27 uuid];
        uint64_t v42 = [v41 UUIDString];
        *(void *)&from[8] = v42;
        *(void *)&from[16] = v70;
        v91[2] = @"kInvitationExpiryDateKey";
        void v91[3] = @"kControllerPublicKey";
        uint64_t v43 = [v63 publicKey];
        long long v44 = [v43 data];
        id v93 = v44;
        v91[4] = @"kControllerPairingNameKey";
        char v45 = [v63 identifier];
        id v94 = v45;
        void v91[5] = @"kInvitationIdentifierKey";
        id v46 = [v69 UUIDString];
        __int16 v95 = v46;
        id v96 = v60;
        v91[6] = @"kRequestedCapabilitiesKey";
        v91[7] = @"HMDHomeSuppressInviteNotificationKey";
        int v47 = [NSNumber numberWithBool:v58];
        id v97 = v47;
        uint64_t v59 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:from forKeys:v91 count:8];

        uint64_t v48 = [HMDRemoteAccountMessageDestination alloc];
        id v49 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:@"1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938"];
        id v50 = [(HMDRemoteAccountMessageDestination *)v48 initWithTarget:v49 handle:v25 multicast:1];

        long long v51 = [MEMORY[0x1E4F654B0] messageWithName:@"kAccessHomeInviteRequestKey" destination:v50 payload:v59];
        objc_initWeak(&v89, v27);
        v86[0] = MEMORY[0x1E4F143A8];
        v86[1] = 3221225472;
        v86[2] = __148__HMDHome__sendInviteToUserWithHandle_inviteIdentifier_expiryDate_shareURL_shareToken_suppressHomeInviteNotification_invitedUser_completionHandler___block_invoke;
        v86[3] = &unk_1E6A17958;
        objc_copyWeak(&v88, &v89);
        id v87 = v25;
        [v51 setResponseHandler:v86];
        long long v52 = +[HMDSecureRemoteMessageTransport defaultTransport];
        [v52 sendMessage:v51 completionHandler:v68];

        objc_destroyWeak(&v88);
        objc_destroyWeak(&v89);
      }
      else
      {
        long long v53 = (void *)MEMORY[0x1D9452090]();
        uint64_t v54 = v27;
        uint64_t v55 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
        {
          uint64_t v56 = HMFGetLogIdentifier();
          *(_DWORD *)frouint64_t m = 138543362;
          *(void *)&from[4] = v56;
          _os_log_impl(&dword_1D49D5000, v55, OS_LOG_TYPE_ERROR, "%{public}@Failed to get local identity", from, 0xCu);
        }
        v75((uint64_t)v68, v65);
      }
    }
  }

  objc_destroyWeak(&v80);
  objc_destroyWeak(&location);
}

void __102__HMDHome__sendInvitation_message_shareURL_shareToken_suppressHomeInviteNotification_logEventBuilder___block_invoke(id *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained(a1 + 5);
  id v3 = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    id v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = WeakRetained;
    uint64_t v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = HMFGetLogIdentifier();
      uint64_t v8 = [v3 identifier];
      int v10 = 138543618;
      id v11 = v7;
      __int16 v12 = 2112;
      id v13 = v8;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Expiring invitation %@", (uint8_t *)&v10, 0x16u);
    }
    objc_msgSend(v3, "updateInvitationState:", objc_msgSend(v3, "invitationState"));
    id v9 = [a1[4] name];
    [v5 saveWithReason:v9 postSyncNotification:0];
  }
}

void __102__HMDHome__sendInvitation_message_shareURL_shareToken_suppressHomeInviteNotification_logEventBuilder___block_invoke_1408(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = WeakRetained;
  uint64_t v7 = HMFGetOSLogHandle();
  uint64_t v8 = v7;
  if (v3)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v9 = HMFGetLogIdentifier();
      uint64_t v10 = *(void *)(a1 + 32);
      int v17 = 138543874;
      double v18 = v9;
      __int16 v19 = 2112;
      uint64_t v20 = v10;
      __int16 v21 = 2112;
      id v22 = v3;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to send invite to user, %@, with error: %@", (uint8_t *)&v17, 0x20u);
    }
    id v11 = *(void **)(a1 + 40);
    __int16 v12 = [MEMORY[0x1E4F28C58] hmInternalErrorWithCode:3503 underlyingError:v3];
    [v11 markError:v12];
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      uint64_t v14 = *(void *)(a1 + 32);
      int v17 = 138543618;
      double v18 = v13;
      __int16 v19 = 2112;
      uint64_t v20 = v14;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Successfully sent invite to user: %@", (uint8_t *)&v17, 0x16u);
    }
    [*(id *)(a1 + 40) markSendInviteEnd];
  }
  id v15 = [*(id *)(a1 + 48) responseHandler];

  if (v15)
  {
    id v16 = [*(id *)(a1 + 48) responseHandler];
    ((void (**)(void, id, void))v16)[2](v16, v3, 0);
  }
}

void __148__HMDHome__sendInviteToUserWithHandle_inviteIdentifier_expiryDate_shareURL_shareToken_suppressHomeInviteNotification_invitedUser_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v5 && [v5 code] != 8)
  {
    uint64_t v8 = (void *)MEMORY[0x1D9452090]();
    id v17 = WeakRetained;
    uint64_t v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = HMFGetLogIdentifier();
      uint64_t v18 = *(void *)(a1 + 32);
      int v19 = 138543874;
      uint64_t v20 = v11;
      __int16 v21 = 2112;
      uint64_t v22 = v18;
      __int16 v23 = 2112;
      id v24 = v5;
      id v13 = "%{public}@Failed to send invitation request to user, %@, due to error: %@";
      uint64_t v14 = v10;
      os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
      uint32_t v16 = 32;
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = WeakRetained;
    uint64_t v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v11 = HMFGetLogIdentifier();
      uint64_t v12 = *(void *)(a1 + 32);
      int v19 = 138543618;
      uint64_t v20 = v11;
      __int16 v21 = 2112;
      uint64_t v22 = v12;
      id v13 = "%{public}@Successfully sent invitation to: %@";
      uint64_t v14 = v10;
      os_log_type_t v15 = OS_LOG_TYPE_INFO;
      uint32_t v16 = 22;
LABEL_7:
      _os_log_impl(&dword_1D49D5000, v14, v15, v13, (uint8_t *)&v19, v16);
    }
  }
}

- (void)_addOutgoingInvitations:(id)a3 message:(id)a4 transactionCompleted:(id)a5
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = [(HMDHome *)self backingStore];
  uint64_t v12 = [v9 name];
  id v13 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  uint64_t v14 = [v11 transaction:v12 options:v13];

  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v15 = v8;
  uint64_t v16 = [v15 countByEnumeratingWithState:&v27 objects:v31 count:16];
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = *(void *)v28;
    do
    {
      for (uint64_t i = 0; i != v17; ++i)
      {
        if (*(void *)v28 != v18) {
          objc_enumerationMutation(v15);
        }
        uint64_t v20 = *(void **)(*((void *)&v27 + 1) + 8 * i);
        [v20 setHome:self];
        __int16 v21 = [v20 modelObjectWithChangeType:1 version:4];
        [v14 add:v21 withMessage:v9];
      }
      uint64_t v17 = [v15 countByEnumeratingWithState:&v27 objects:v31 count:16];
    }
    while (v17);
  }

  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = __64__HMDHome__addOutgoingInvitations_message_transactionCompleted___block_invoke;
  v24[3] = &unk_1E6A17D78;
  id v25 = v9;
  id v26 = v10;
  id v22 = v9;
  id v23 = v10;
  [v14 run:v24];
}

void __64__HMDHome__addOutgoingInvitations_message_transactionCompleted___block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = _Block_copy(*(const void **)(a1 + 40));
  id v4 = v3;
  if (v3) {
    (*((void (**)(void *, id))v3 + 2))(v3, v5);
  }

  [*(id *)(a1 + 32) respondWithPayload:0];
}

- (id)_outgoingInvitationForUserWithHandle:(id)a3
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v5 = [(HMDHome *)self outgoingInvitations];
  id v6 = (id)[v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v15;
    while (2)
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v5);
        }
        id v9 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        id v10 = [v9 user];
        id v11 = [v10 accountHandle];
        char v12 = [v11 isEqual:v4];

        if (v12)
        {
          id v6 = v9;
          goto LABEL_11;
        }
      }
      id v6 = (id)[v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v6;
}

- (void)_processOutgoingInvitationsRequest:(id)a3
{
  void v36[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 dataForKey:@"HM.invitations"];
  if (v5)
  {
    id v6 = (void *)MEMORY[0x1E4F28DC0];
    uint64_t v7 = (void *)MEMORY[0x1E4F1CAD0];
    v36[0] = objc_opt_class();
    v36[1] = objc_opt_class();
    id v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v36 count:2];
    id v9 = [v7 setWithArray:v8];
    id v30 = 0;
    id v10 = [v6 unarchivedObjectOfClasses:v9 fromData:v5 error:&v30];
    id v11 = v30;

    if (v10)
    {
      char v12 = [v4 BOOLForKey:@"HMDHomeSuppressInviteNotificationKey"];
      objc_initWeak((id *)location, self);
      v26[0] = MEMORY[0x1E4F143A8];
      v26[1] = 3221225472;
      void v26[2] = __46__HMDHome__processOutgoingInvitationsRequest___block_invoke;
      v26[3] = &unk_1E6A09008;
      objc_copyWeak(&v28, (id *)location);
      id v27 = v10;
      char v29 = v12;
      [(HMDHome *)self _addOutgoingInvitations:v27 message:v4 transactionCompleted:v26];

      objc_destroyWeak(&v28);
      objc_destroyWeak((id *)location);
    }
    else
    {
      uint64_t v19 = (void *)MEMORY[0x1D9452090]();
      uint64_t v20 = self;
      __int16 v21 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        id v22 = HMFGetLogIdentifier();
        id v23 = [v4 identifier];
        id v24 = [v23 UUIDString];
        *(_DWORD *)locatiouint64_t n = 138543874;
        *(void *)&id location[4] = v22;
        __int16 v32 = 2112;
        int v33 = v24;
        __int16 v34 = 2112;
        id v35 = v11;
        _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@Failed to unarchive outgoing home invitations from serialized outgoing home invitation data: %@: %@", location, 0x20u);
      }
      id v25 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:2 userInfo:0];
      [v4 respondWithError:v25];
    }
  }
  else
  {
    id v13 = (void *)MEMORY[0x1D9452090]();
    long long v14 = self;
    long long v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      long long v16 = HMFGetLogIdentifier();
      long long v17 = [v4 identifier];
      uint64_t v18 = [v17 UUIDString];
      *(_DWORD *)locatiouint64_t n = 138543618;
      *(void *)&id location[4] = v16;
      __int16 v32 = 2112;
      int v33 = v18;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@Unable to find outgoing invitations to add for message: %@", location, 0x16u);
    }
    id v11 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:2 userInfo:0];
    [v4 respondWithError:v11];
  }
}

void __46__HMDHome__processOutgoingInvitationsRequest___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = [WeakRetained workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __46__HMDHome__processOutgoingInvitationsRequest___block_invoke_2;
  block[3] = &unk_1E6A18708;
  void block[4] = WeakRetained;
  id v5 = *(id *)(a1 + 32);
  char v6 = *(unsigned char *)(a1 + 48);
  dispatch_async(v3, block);
}

uint64_t __46__HMDHome__processOutgoingInvitationsRequest___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "__sendOutgoingInvitations:suppressHomeInviteNotification:", *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

- (void)handleCATUpdate
{
  id v6 = [(HMDHome *)self homeManager];
  id v3 = [v6 accessoryBrowser];
  id v4 = [v3 chipAccessoryServerBrowser];
  id v5 = [(HMDHome *)self fabric];
  [v4 updateAccessoryACLAndGetNOCFromResidentForSharedUserForFabric:v5];
}

- (void)setOverriddenHomeAccessControl:(id)a3
{
  id v4 = (NSNumber *)a3;
  os_unfair_recursive_lock_lock_with_options();
  overriddenHomeAccessControl = self->_overriddenHomeAccessControl;
  self->_overriddenHomeAccessControl = v4;

  os_unfair_recursive_lock_unlock();
}

- (void)handleCurrentUserPrivilegeChanged:(id)a3
{
  id v4 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __45__HMDHome_handleCurrentUserPrivilegeChanged___block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v4, block);
}

uint64_t __45__HMDHome_handleCurrentUserPrivilegeChanged___block_invoke(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (isFeatureMatterLocalFabricConfigEnabled())
  {
    id v2 = (void *)MEMORY[0x1D9452090]();
    id v3 = *(id *)(a1 + 32);
    id v4 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      id v5 = HMFGetLogIdentifier();
      id v6 = [*(id *)(a1 + 32) currentUser];
      unint64_t v7 = [v6 privilege];
      if (v7 > 4) {
        id v8 = @"None";
      }
      else {
        id v8 = off_1E6A14D48[v7];
      }
      id v9 = v8;
      id v10 = [*(id *)(a1 + 32) fabric];
      id v11 = [v10 accessControl];
      [v11 currentUserPrivilege];
      char v12 = HMMTRUserPrivilegeAsString();
      int v18 = 138543874;
      uint64_t v19 = v5;
      __int16 v20 = 2112;
      __int16 v21 = v9;
      __int16 v22 = 2112;
      id v23 = v12;
      _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@Updating Fabric user privilege to %@ from priv %@", (uint8_t *)&v18, 0x20u);
    }
    id v13 = [*(id *)(a1 + 32) currentUser];
    unint64_t v14 = +[HMDUser hmmtrUserPrivilegeFromHMDUserPrivilege:](HMDUser, "hmmtrUserPrivilegeFromHMDUserPrivilege:", [v13 privilege]);
    long long v15 = [*(id *)(a1 + 32) fabric];
    long long v16 = [v15 accessControl];
    [v16 setCurrentUserPrivilege:v14];
  }
  return [*(id *)(a1 + 32) _evaluateNetworkProtectionAndRouterManagement];
}

- (BOOL)containsRemovedUser:(id)a3
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHome *)self removedUsers];
  id v6 = (void *)[v5 copy];

  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v7 = v6;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v13;
    while (2)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v13 != v9) {
          objc_enumerationMutation(v7);
        }
        if (objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * i), "isEqualToUser:", v4, (void)v12))
        {
          LOBYTE(v8) = 1;
          goto LABEL_11;
        }
      }
      uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v8) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v8;
}

- (void)_refreshUserDisplayNames
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v3 = [MEMORY[0x1E4F1CA80] set];
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  int v33 = self;
  id v4 = [(HMDHome *)self outgoingInvitations];
  uint64_t v5 = [v4 countByEnumeratingWithState:&v38 objects:v47 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v39;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v39 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v38 + 1) + 8 * i);
        if ([v9 refreshDisplayName])
        {
          if (isInternalBuild())
          {
            id v10 = NSString;
            id v11 = [v9 uuid];
            long long v12 = [v10 stringWithFormat:@"OutgoingInviteDisplayNameUpdate_%@", v11];
            [v3 addObject:v12];
          }
          else
          {
            [v3 addObject:@"OutgoingInviteDisplayNameUpdate"];
          }
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v38 objects:v47 count:16];
    }
    while (v6);
  }

  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v13 = [(HMDHome *)v33 users];
  uint64_t v14 = [v13 countByEnumeratingWithState:&v34 objects:v46 count:16];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)v35;
    do
    {
      for (uint64_t j = 0; j != v15; ++j)
      {
        if (*(void *)v35 != v16) {
          objc_enumerationMutation(v13);
        }
        id v18 = *(id *)(*((void *)&v34 + 1) + 8 * j);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v19 = v18;
        }
        else {
          uint64_t v19 = 0;
        }
        id v20 = v19;

        if (!v20 && [v18 refreshDisplayName])
        {
          if (isInternalBuild())
          {
            __int16 v21 = NSString;
            __int16 v22 = [v18 uuid];
            id v23 = [v21 stringWithFormat:@"UserDisplayNameUpdate_%@", v22];
            [v3 addObject:v23];
          }
          else
          {
            [v3 addObject:@"UserDisplayNameUpdate"];
          }
        }
      }
      uint64_t v15 = [v13 countByEnumeratingWithState:&v34 objects:v46 count:16];
    }
    while (v15);
  }

  if ([v3 count])
  {
    uint64_t v24 = (void *)MEMORY[0x1D9452090]();
    id v25 = v33;
    id v26 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      id v27 = HMFGetLogIdentifier();
      id v28 = [v3 allObjects];
      char v29 = [v28 componentsJoinedByString:@", "];
      *(_DWORD *)buf = 138543618;
      uint64_t v43 = v27;
      __int16 v44 = 2112;
      char v45 = v29;
      _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_INFO, "%{public}@User display names updated: %@", buf, 0x16u);
    }
    [(HMDHome *)v25 saveToCurrentAccountWithReason:@"userDisplayNameUpdated"];
    id v30 = [(HMDHome *)v25 home];
    uint64_t v31 = [v30 homeManager];
    __int16 v32 = [(HMDHome *)v25 uuid];
    [v31 updateGenerationCounterWithReason:@"userDisplayNameUpdated" sourceUUID:v32 shouldNotifyClients:1];
  }
}

- (void)refreshUserDisplayNames
{
  id v3 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __34__HMDHome_refreshUserDisplayNames__block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v3, block);
}

uint64_t __34__HMDHome_refreshUserDisplayNames__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _refreshUserDisplayNames];
}

- (void)_addUserToContainer:(id)a3
{
  v10[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  [(HMDHome *)self addUser:v4];
  uint64_t v5 = [(HMDHome *)self presenceMonitor];
  [v5 addNewUser:v4];

  uint64_t v6 = [(HMDHome *)self notificationCenter];
  uint64_t v9 = @"HMDUserNotificationKey";
  v10[0] = v4;
  uint64_t v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:&v9 count:1];

  [v6 postNotificationName:@"HMDHomeUserAddedNotification" object:self userInfo:v7];
  if ([(HMDHome *)self isOwnerUser])
  {
    uint64_t v8 = [(HMDHome *)self homeManager];
    [v8 setLastUserAddRemoveTimestamp];
  }
}

- (void)_removeUserFromContainer:(id)a3
{
  v10[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self presenceMonitor];
  [v5 removeUser:v4];

  [v4 removeCloudData];
  [(HMDHome *)self _removeUser:v4];
  [v4 unconfigure];
  uint64_t v6 = [(HMDHome *)self notificationCenter];
  uint64_t v9 = @"HMDUserNotificationKey";
  v10[0] = v4;
  uint64_t v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:&v9 count:1];

  [v6 postNotificationName:@"HMDHomeUserRemovedNotification" object:self userInfo:v7];
  if ([(HMDHome *)self isOwnerUser])
  {
    uint64_t v8 = [(HMDHome *)self homeManager];
    [v8 setLastUserAddRemoveTimestamp];
  }
}

- (void)_removeUser:(id)a3 message:(id)a4
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = a4;
  if (shouldLogPrivateInformation())
  {
    long long v53 = [v5 userID];
  }
  else
  {
    long long v53 = @"...";
    uint64_t v7 = @"...";
  }
  uint64_t v8 = [v5 pairingIdentity];

  if (v8)
  {
    long long v60 = [(HMDHome *)self homeManager];
    if (isFeatureMatterLocalFabricConfigEnabled()
      && (![v5 privilege] || objc_msgSend(v5, "privilege") == 4))
    {
      v73[0] = MEMORY[0x1E4F143A8];
      v73[1] = 3221225472;
      v73[2] = __31__HMDHome__removeUser_message___block_invoke;
      v73[3] = &unk_1E6A15138;
      v73[4] = self;
      [(HMDHome *)self incrementOperatePrivilegeCATVersion:v73];
    }
    uint64_t v9 = [v60 backingStore];
    id v10 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    uint64_t v54 = [v9 transaction:@"kUserManagementOperationAddedKey" options:v10];

    id v11 = [(HMDHome *)self accessories];
    id v72 = 0;
    long long v12 = [(HMDHome *)self prepareUserManagementOperationForUser:v5 accessories:v11 type:2 error:&v72];
    id v13 = v72;

    long long v51 = v12;
    id v52 = v13;
    if (v13)
    {
      uint64_t v14 = (void *)MEMORY[0x1D9452090]();
      uint64_t v15 = self;
      uint64_t v16 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = HMFGetLogIdentifier();
        id v18 = (__CFString *)objc_opt_class();
        uint64_t v19 = v18;
        id v20 = [(HMDHome *)v15 name];
        *(_DWORD *)buf = 138544386;
        long long v76 = v17;
        __int16 v77 = 2112;
        id v78 = v18;
        __int16 v79 = 2112;
        id v80 = v20;
        __int16 v81 = 2112;
        id v82 = v53;
        __int16 v83 = 2112;
        id v84 = v52;
        _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_ERROR, "%{public}@[%@ %@] Failed to prepare remove operations for user '%@' with error: %@", buf, 0x34u);
      }
      __int16 v21 = [v6 responseHandler];
      __int16 v22 = v52;
      ((void (**)(void, id, void))v21)[2](v21, v52, 0);
      id v23 = (void (**)(void, void, void))v54;
    }
    else
    {
      id v49 = v6;
      id v50 = v5;
      char v29 = [(HMDHome *)self owner];
      __int16 v21 = [v29 pairingIdentity];

      dispatch_group_t group = dispatch_group_create();
      long long v68 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      id obj = v12;
      id v23 = (void (**)(void, void, void))v54;
      id v30 = self;
      uint64_t v61 = [obj countByEnumeratingWithState:&v68 objects:v74 count:16];
      if (v61)
      {
        uint64_t v57 = *(void *)v69;
        unsigned int v58 = v21;
        do
        {
          for (uint64_t i = 0; i != v61; ++i)
          {
            if (*(void *)v69 != v57) {
              objc_enumerationMutation(obj);
            }
            __int16 v32 = *(void **)(*((void *)&v68 + 1) + 8 * i);
            if (shouldLogPrivateInformation())
            {
              int v33 = [v32 user];
              long long v34 = [v33 userID];
            }
            else
            {
              long long v34 = @"...";
              long long v35 = @"...";
            }
            long long v36 = (void *)MEMORY[0x1D9452090](v35);
            long long v37 = v30;
            long long v38 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
            {
              long long v39 = HMFGetLogIdentifier();
              long long v40 = [v32 identifier];
              long long v41 = [v32 accessory];
              uint64_t v42 = [v41 shortDescription];
              *(_DWORD *)buf = 138544130;
              long long v76 = v39;
              __int16 v77 = 2112;
              id v78 = v40;
              __int16 v79 = 2112;
              id v80 = v34;
              __int16 v81 = 2112;
              id v82 = v42;
              _os_log_impl(&dword_1D49D5000, v38, OS_LOG_TYPE_INFO, "%{public}@Adding operation '%@' to manager tracking remove user '%@' from accessory '%@'", buf, 0x2Au);

              id v30 = self;
              id v23 = (void (**)(void, void, void))v54;
            }
            dispatch_group_enter(group);
            uint64_t v43 = [v32 accessory];
            __int16 v44 = [v43 identifier];
            char v45 = [v32 user];
            id v46 = [v45 pairingIdentity];
            v66[0] = MEMORY[0x1E4F143A8];
            v66[1] = 3221225472;
            void v66[2] = __31__HMDHome__removeUser_message___block_invoke_1390;
            v66[3] = &unk_1E6A197F0;
            id v67 = group;
            [v60 cleanupOperationsForAccessory:v44 user:v46 completion:v66];

            __int16 v21 = v58;
            [v32 setOwnerPairingIdentity:v58];
            int v47 = [v32 modelObjectWithChangeType:1];
            [v23 add:v47];
          }
          uint64_t v61 = [obj countByEnumeratingWithState:&v68 objects:v74 count:16];
        }
        while (v61);
      }

      uint64_t v48 = [(HMDHome *)v30 workQueue];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __31__HMDHome__removeUser_message___block_invoke_2;
      block[3] = &unk_1E6A18668;
      void block[4] = v30;
      __int16 v63 = v23;
      id v5 = v50;
      id v64 = v50;
      id v6 = v49;
      id v65 = v49;
      dispatch_group_notify(group, v48, block);

      __int16 v22 = 0;
    }

    goto LABEL_31;
  }
  uint64_t v24 = (void *)MEMORY[0x1D9452090]();
  id v25 = self;
  id v26 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    id v27 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    long long v76 = v27;
    __int16 v77 = 2112;
    id v78 = v53;
    _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_ERROR, "%{public}@Unable to retrieve user with name: %@", buf, 0x16u);
  }
  if (v6)
  {
    uint64_t v28 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:3 userInfo:0];
    id v23 = [v6 responseHandler];
    long long v60 = (void *)v28;
    v23[2](v23, v28, 0);
LABEL_31:
  }
}

uint64_t __31__HMDHome__removeUser_message___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) updateUserCATWithOperatePrivilege:a2 administerPrivilege:0];
}

void __31__HMDHome__removeUser_message___block_invoke_1390(uint64_t a1)
{
}

void __31__HMDHome__removeUser_message___block_invoke_2(uint64_t a1)
{
  objc_initWeak(&location, *(id *)(a1 + 32));
  id v2 = *(void **)(a1 + 40);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __31__HMDHome__removeUser_message___block_invoke_3;
  v3[3] = &unk_1E6A15888;
  objc_copyWeak(&v6, &location);
  id v4 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 56);
  [v2 run:v3];

  objc_destroyWeak(&v6);
  objc_destroyWeak(&location);
}

void __31__HMDHome__removeUser_message___block_invoke_3(id *a1, void *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    id v26 = v3;
    id v6 = [WeakRetained backingStore];
    uint64_t v7 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    uint64_t v8 = [v6 transaction:@"kRemoveUserRequestKey" options:v7];

    uint64_t v9 = objc_msgSend(v5, "__modelObjectsForRemovingOutgoingInvitationForUser:", a1[4]);
    [v8 addObjects:v9];

    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v10 = [v5 triggers];
    uint64_t v11 = [v10 countByEnumeratingWithState:&v29 objects:v33 count:16];
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = *(void *)v30;
      do
      {
        for (uint64_t i = 0; i != v12; ++i)
        {
          if (*(void *)v30 != v13) {
            objc_enumerationMutation(v10);
          }
          id v15 = *(id *)(*((void *)&v29 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            uint64_t v16 = v15;
          }
          else {
            uint64_t v16 = 0;
          }
          id v17 = v16;

          [v17 handleRemovalOfUser:a1[4] transaction:v8];
        }
        uint64_t v12 = [v10 countByEnumeratingWithState:&v29 objects:v33 count:16];
      }
      while (v12);
    }

    id v18 = [HMDUserModel alloc];
    uint64_t v19 = [a1[4] uuid];
    id v20 = [v5 uuid];
    __int16 v21 = [(HMDBackingStoreModelObject *)v18 initWithObjectChangeType:3 uuid:v19 parentUUID:v20];

    [v8 add:v21];
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    void v27[2] = __31__HMDHome__removeUser_message___block_invoke_1392;
    v27[3] = &unk_1E6A196E0;
    void v27[4] = v5;
    id v28 = a1[5];
    [v8 run:v27];

    id v3 = v26;
  }
  else
  {
    __int16 v22 = (void *)MEMORY[0x1D9452090]();
    id v23 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = HMFGetLogIdentifier();
      id v25 = a1[4];
      *(_DWORD *)buf = 138543618;
      long long v35 = v24;
      __int16 v36 = 2112;
      id v37 = v25;
      _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_ERROR, "%{public}@Home disappeared, cannot remove user %@", buf, 0x16u);
    }
  }
}

void __31__HMDHome__removeUser_message___block_invoke_1392(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = *(id *)(a1 + 32);
    id v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = HMFGetLogIdentifier();
      int v8 = 138543618;
      uint64_t v9 = v7;
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Failed to commit removeUser transaction with error: %@", (uint8_t *)&v8, 0x16u);
    }
  }
  [*(id *)(a1 + 40) respondWithPayload:0 error:v3];
}

- (id)__modelObjectsForRemovingOutgoingInvitationForUser:(id)a3
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (v4)
  {
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id v5 = [(HMDHome *)self outgoingInvitations];
    uint64_t v6 = [v5 countByEnumeratingWithState:&v24 objects:v28 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      id v23 = self;
      uint64_t v8 = *(void *)v25;
LABEL_4:
      uint64_t v9 = 0;
      while (1)
      {
        if (*(void *)v25 != v8) {
          objc_enumerationMutation(v5);
        }
        __int16 v10 = *(void **)(*((void *)&v24 + 1) + 8 * v9);
        id v11 = [v10 user];
        if (v11)
        {
          uint64_t v12 = [v4 userID];
          uint64_t v13 = [v11 userID];
          char v14 = [v12 isEqualToString:v13];

          if (v14) {
            break;
          }
        }

        if (v7 == ++v9)
        {
          uint64_t v7 = [v5 countByEnumeratingWithState:&v24 objects:v28 count:16];
          if (v7) {
            goto LABEL_4;
          }
          goto LABEL_11;
        }
      }
      id v16 = v10;

      if (!v16) {
        goto LABEL_15;
      }
      id v17 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:2];
      id v18 = [HMDOutgoingHomeInvitationModel alloc];
      uint64_t v19 = [v16 identifier];
      id v20 = [(HMDHome *)v23 uuid];
      __int16 v21 = [(HMDBackingStoreModelObject *)v18 initWithObjectChangeType:3 uuid:v19 parentUUID:v20];

      [v17 addObject:v21];
      id v15 = (void *)[v17 copy];

      id v5 = v16;
    }
    else
    {
LABEL_11:
      id v15 = (void *)MEMORY[0x1E4F1CBF0];
    }
  }
  else
  {
LABEL_15:
    id v15 = (void *)MEMORY[0x1E4F1CBF0];
  }

  return v15;
}

- (void)_removeOutgoingInvitationForUser:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self __modelObjectsForRemovingOutgoingInvitationForUser:v4];
  if ((objc_msgSend(v5, "hmf_isEmpty") & 1) == 0)
  {
    uint64_t v6 = [(HMDHome *)self backingStore];
    uint64_t v7 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    uint64_t v8 = [v6 transaction:@"removeOutgoingInvitation" options:v7];

    [v8 addObjects:v5];
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __44__HMDHome__removeOutgoingInvitationForUser___block_invoke;
    void v9[3] = &unk_1E6A18BA0;
    void v9[4] = self;
    id v10 = v4;
    id v11 = v5;
    [v8 run:v9];
  }
}

void __44__HMDHome__removeOutgoingInvitationForUser___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    int v10 = 138543874;
    id v11 = v7;
    __int16 v12 = 2112;
    uint64_t v13 = v8;
    __int16 v14 = 2112;
    uint64_t v15 = v9;
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Error occurred while removing the invitation for the user : %@ / %@", (uint8_t *)&v10, 0x20u);
  }
}

- (void)removeUser:(id)a3
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  uint64_t v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    __int16 v12 = v8;
    __int16 v13 = 2112;
    id v14 = v4;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Attempting to remove user: %@", buf, 0x16u);
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = __22__HMDHome_removeUser___block_invoke;
  v10[3] = &unk_1E6A18C18;
  void v10[4] = v6;
  uint64_t v9 = [MEMORY[0x1E4F65480] messageWithName:@"kDataSyncResponseNAckKey" messagePayload:0 responseHandler:v10];
  [(HMDHome *)v6 _removeUser:v4 message:v9];
}

void __22__HMDHome_removeUser___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = (void *)MEMORY[0x1D9452090]();
    id v8 = *(id *)(a1 + 32);
    uint64_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v10 = HMFGetLogIdentifier();
      int v11 = 138543618;
      __int16 v12 = v10;
      __int16 v13 = 2112;
      id v14 = v5;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Failed to remove user due to %@", (uint8_t *)&v11, 0x16u);
    }
  }
}

- (void)removeUserWithUserID:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __32__HMDHome_removeUserWithUserID___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __32__HMDHome_removeUserWithUserID___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) users];
  objc_msgSend(v2, "hmf_firstObjectWithValue:forKeyPath:", *(void *)(a1 + 40), @"userID");
  id v4 = (id)objc_claimAutoreleasedReturnValue();

  id v3 = v4;
  if (v4)
  {
    [*(id *)(a1 + 32) removeUser:v4];
    id v3 = v4;
  }
}

- (void)_handleRemoveUser:(id)a3
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([v4 isEntitledForSPIAccess] & 1) != 0 || (objc_msgSend(v4, "isRemote"))
  {
    uint64_t v5 = [v4 uuidForKey:@"kUserUUIDKey"];
    if (!v5)
    {
      id v18 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:20 userInfo:0];
      uint64_t v19 = [v4 responseHandler];
      ((void (**)(void, void *, void))v19)[2](v19, v18, 0);

      id v6 = 0;
LABEL_20:

      goto LABEL_21;
    }
    id v6 = (void *)v5;
    uint64_t v7 = [(HMDHome *)self users];
    objc_msgSend(v7, "hmf_firstObjectWithUUID:", v6);
    id v8 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      int v9 = [v8 isOwner];
      int v10 = (void *)MEMORY[0x1D9452090]();
      int v11 = self;
      __int16 v12 = HMFGetOSLogHandle();
      __int16 v13 = v12;
      if (!v9)
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          long long v27 = HMFGetLogIdentifier();
          int v28 = 138543618;
          uint64_t v29 = v27;
          __int16 v30 = 2112;
          long long v31 = v8;
          _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_DEFAULT, "%{public}@Removing user: %@", (uint8_t *)&v28, 0x16u);
        }
        [(HMDHome *)v11 _removeUser:v8 message:v4];
        goto LABEL_19;
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        id v14 = HMFGetLogIdentifier();
        int v28 = 138543362;
        uint64_t v29 = v14;
        _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_ERROR, "%{public}@Owner cannot be removed from home", (uint8_t *)&v28, 0xCu);
      }
      uint64_t v15 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v16 = *MEMORY[0x1E4F2D140];
      uint64_t v17 = 17;
    }
    else
    {
      uint64_t v15 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v16 = *MEMORY[0x1E4F2D140];
      uint64_t v17 = 2;
    }
    long long v25 = [v15 errorWithDomain:v16 code:v17 userInfo:0];
    long long v26 = [v4 responseHandler];
    ((void (**)(void, void *, void))v26)[2](v26, v25, 0);

LABEL_19:
    goto LABEL_20;
  }
  id v20 = (void *)MEMORY[0x1D9452090]();
  __int16 v21 = self;
  __int16 v22 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    id v23 = HMFGetLogIdentifier();
    int v28 = 138543362;
    uint64_t v29 = v23;
    _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_ERROR, "%{public}@User management (remove) not supported for non-SPI clients", (uint8_t *)&v28, 0xCu);
  }
  long long v24 = [v4 responseHandler];

  if (v24)
  {
    id v6 = [MEMORY[0x1E4F28C58] hmErrorWithCode:48];
    id v8 = [v4 responseHandler];
    ((void (**)(void, void *, void))v8)[2](v8, v6, 0);
    goto LABEL_19;
  }
LABEL_21:
}

- (void)_handleUpdatePresenceConsent:(id)a3
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [MEMORY[0x1E4F2EBC0] authWithMessage:v4];
  if (!v5)
  {
    __int16 v12 = (void *)MEMORY[0x1D9452090]();
    __int16 v13 = self;
    id v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      __int16 v36 = v15;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_ERROR, "%{public}@Received nil presence auth", buf, 0xCu);
    }
    uint64_t v16 = [v4 responseHandler];
    uint64_t v17 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:17 userInfo:0];
    goto LABEL_15;
  }
  id v6 = [(HMDHome *)self presenceAuthStatus];
  int v7 = HMFEqualObjects();

  if (v7)
  {
    id v8 = (void *)MEMORY[0x1D9452090]();
    int v9 = self;
    int v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v36 = v11;
      __int16 v37 = 2112;
      uint64_t v38 = v5;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_ERROR, "%{public}@Presence auth status is already set to %@", buf, 0x16u);
    }
LABEL_14:
    uint64_t v16 = [v4 responseHandler];
    uint64_t v17 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
LABEL_15:
    long long v26 = (void *)v17;
    (*(void (**)(HMDHomeModel *, uint64_t, void))&v16->super._bsoDataVersionOverride)(v16, v17, 0);
    goto LABEL_16;
  }
  if ((unint64_t)([v5 value] - 1) < 2)
  {
    id v18 = [HMDHomeModel alloc];
    uint64_t v19 = [(HMDHome *)self uuid];
    id v20 = [(HMDHome *)self homeManager];
    __int16 v21 = [v20 uuid];
    uint64_t v16 = [(HMDBackingStoreModelObject *)v18 initWithObjectChangeType:2 uuid:v19 parentUUID:v21];

    __int16 v22 = [v5 number];
    [(HMDHomeModel *)v16 setPresenceAuthorizationStatus:v22];

    id v23 = [(HMDHome *)self backingStore];
    long long v24 = [v4 name];
    long long v25 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    long long v26 = [v23 transaction:v24 options:v25];

    [v26 add:v16];
    v32[0] = MEMORY[0x1E4F143A8];
    v32[1] = 3221225472;
    void v32[2] = __40__HMDHome__handleUpdatePresenceConsent___block_invoke;
    v32[3] = &unk_1E6A196E0;
    id v33 = v4;
    long long v34 = self;
    [v26 run:v32];

LABEL_16:
    goto LABEL_17;
  }
  long long v27 = (void *)MEMORY[0x1D9452090]();
  int v28 = self;
  uint64_t v29 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    __int16 v30 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    __int16 v36 = v30;
    __int16 v37 = 2112;
    uint64_t v38 = v5;
    _os_log_impl(&dword_1D49D5000, v29, OS_LOG_TYPE_ERROR, "%{public}@Received invalid parameter for presence authorization: %@", buf, 0x16u);
  }
  long long v31 = [v4 responseHandler];

  if (v31) {
    goto LABEL_14;
  }
LABEL_17:
}

void __40__HMDHome__handleUpdatePresenceConsent___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    [v3 respondWithError:a2];
  }
  else
  {
    id v8 = [MEMORY[0x1E4F1CA60] dictionary];
    id v4 = [*(id *)(a1 + 40) currentUser];
    uint64_t v5 = [v4 presenceAuthStatus];
    [v5 addToPayload:v8];

    id v6 = *(void **)(a1 + 32);
    int v7 = (void *)[v8 copy];
    [v6 respondWithPayload:v7];
  }
}

- (void)_handleUpdateUserAnnounceAccess:(id)a3
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([v4 isEntitledForSPIAccess] & 1) != 0 || (objc_msgSend(v4, "isRemote"))
  {
    uint64_t v5 = [v4 stringForKey:@"kUserIDKey"];
    id v6 = [(HMDHome *)self users];
    int v7 = objc_msgSend(v6, "hmf_firstObjectWithValue:forKeyPath:", v5, @"userID");

    if (v7)
    {
      id v8 = [(HMDHome *)self currentUser];
      if ([v8 isAdministrator])
      {
        int v9 = (void *)[v7 newModelWithChangeType:2];
        int v10 = [v4 numberForKey:*MEMORY[0x1E4F2D7A8]];
        if (v10)
        {
          [v9 setAnnounceAccessAllowed:v10];
          if ([v10 BOOLValue]) {
            int v11 = &unk_1F2DC75A0;
          }
          else {
            int v11 = &unk_1F2DC75B8;
          }
          [v9 setAnnounceAccessLevel:v11];
        }
        __int16 v12 = [(HMDHome *)self backingStore];
        __int16 v13 = [v4 name];
        id v14 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
        uint64_t v15 = [v12 transaction:v13 options:v14];

        [v15 add:v9 withMessage:v4];
        [v15 run];

        goto LABEL_21;
      }
      long long v25 = (void *)MEMORY[0x1D9452090]();
      long long v26 = self;
      long long v27 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        int v28 = HMFGetLogIdentifier();
        int v30 = 138543618;
        long long v31 = v28;
        __int16 v32 = 2112;
        id v33 = v8;
        _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_ERROR, "%{public}@Current user is not an administrator, cannot modify access: %@", (uint8_t *)&v30, 0x16u);
      }
      id v20 = [v4 responseHandler];
      uint64_t v29 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:17 userInfo:0];
      ((void (**)(void, void *, void))v20)[2](v20, v29, 0);
    }
    else
    {
      uint64_t v16 = (void *)MEMORY[0x1D9452090]();
      uint64_t v17 = self;
      id v18 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        uint64_t v19 = HMFGetLogIdentifier();
        int v30 = 138543618;
        long long v31 = v19;
        __int16 v32 = 2112;
        id v33 = v5;
        _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@Failed to find user %@", (uint8_t *)&v30, 0x16u);
      }
      id v8 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:2 userInfo:0];
      id v20 = [v4 responseHandler];
      ((void (**)(void, void *, void))v20)[2](v20, v8, 0);
    }

LABEL_21:
    goto LABEL_22;
  }
  __int16 v21 = (void *)MEMORY[0x1D9452090]();
  __int16 v22 = self;
  id v23 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    long long v24 = HMFGetLogIdentifier();
    int v30 = 138543362;
    long long v31 = v24;
    _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_ERROR, "%{public}@Client does not have entitlement to update users to home", (uint8_t *)&v30, 0xCu);
  }
  uint64_t v5 = [v4 responseHandler];
  int v7 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:17 userInfo:0];
  ((void (**)(void, void *, void))v5)[2](v5, v7, 0);
LABEL_22:
}

- (void)_handleUpdateUserAccess:(id)a3
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([v4 isEntitledForSPIAccess] & 1) != 0 || (objc_msgSend(v4, "isRemote"))
  {
    uint64_t v5 = [v4 stringForKey:@"kUserIDKey"];
    id v6 = [(HMDHome *)self users];
    int v7 = objc_msgSend(v6, "hmf_firstObjectWithValue:forKeyPath:", v5, @"userID");

    if (!v7)
    {
      uint64_t v15 = (void *)MEMORY[0x1D9452090]();
      uint64_t v16 = self;
      uint64_t v17 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        id v18 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v56 = v18;
        __int16 v57 = 2112;
        unsigned int v58 = v5;
        _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Failed to find user %@", buf, 0x16u);
      }
      __int16 v12 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v13 = *MEMORY[0x1E4F2D140];
      uint64_t v14 = 2;
      goto LABEL_11;
    }
    if ([v7 isOwner])
    {
      id v8 = (void *)MEMORY[0x1D9452090]();
      int v9 = self;
      int v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        int v11 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v56 = v11;
        __int16 v57 = 2112;
        unsigned int v58 = v5;
        _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Cannot modify the owner of the home: %@", buf, 0x16u);
      }
      __int16 v12 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v13 = *MEMORY[0x1E4F2D140];
      uint64_t v14 = 17;
LABEL_11:
      uint64_t v19 = [v12 errorWithDomain:v13 code:v14 userInfo:0];
      id v20 = [v4 responseHandler];
      ((void (**)(void, void *, void))v20)[2](v20, v19, 0);
LABEL_42:

      goto LABEL_43;
    }
    uint64_t v19 = [(HMDHome *)self currentUser];
    if (([v19 isAdministrator] & 1) == 0)
    {
      uint64_t v34 = (void *)MEMORY[0x1D9452090]();
      long long v35 = self;
      __int16 v36 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        __int16 v37 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v56 = v37;
        __int16 v57 = 2112;
        unsigned int v58 = v19;
        _os_log_impl(&dword_1D49D5000, v36, OS_LOG_TYPE_ERROR, "%{public}@Current user is not an administrator, cannot modify access: %@", buf, 0x16u);
      }
      id v20 = [v4 responseHandler];
      long long v26 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:17 userInfo:0];
      ((void (**)(void, void *, void))v20)[2](v20, v26, 0);
      goto LABEL_41;
    }
    id v20 = (void (**)(void, void, void))[v7 newModelWithChangeType:2];
    long long v25 = [v4 numberForKey:@"kUserAdministratorInformationKey"];
    long long v26 = v25;
    if (!v25) {
      goto LABEL_25;
    }
    int v27 = [v25 BOOLValue];
    if (v27 && ![(HMDHome *)self isResidentSupported])
    {
      uint64_t v38 = (void *)MEMORY[0x1D9452090]();
      uint64_t v39 = self;
      long long v40 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        long long v41 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v56 = v41;
        __int16 v57 = 2112;
        unsigned int v58 = v5;
        _os_log_impl(&dword_1D49D5000, v40, OS_LOG_TYPE_INFO, "%{public}@Cannot update user %@ to administrator because it requires a resident", buf, 0x16u);
      }
      uint64_t v42 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v43 = *MEMORY[0x1E4F2D140];
      uint64_t v44 = 48;
    }
    else
    {
      if (![v7 privilege] || objc_msgSend(v7, "privilege") == 4)
      {
        if (v27) {
          int v28 = &unk_1F2DC7588;
        }
        else {
          int v28 = &unk_1F2DC7540;
        }
        [v20 setPrivilege:v28];
        [v7 privilege];
LABEL_25:
        id v50 = v26;
        uint64_t v29 = [v4 numberForKey:@"kUserRemoteAccessInformationKey"];
        if (v29) {
          [v20 setRemoteAccessAllowed:v29];
        }
        int v30 = [(HMDHome *)self backingStore];
        long long v31 = [v4 name];
        __int16 v32 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
        id v33 = [v30 transaction:v31 options:v32];

        [v33 add:v20];
        v52[0] = MEMORY[0x1E4F143A8];
        v52[1] = 3221225472;
        v52[2] = __35__HMDHome__handleUpdateUserAccess___block_invoke;
        v52[3] = &unk_1E6A196E0;
        id v53 = v4;
        id v54 = v7;
        [v33 run:v52];

        long long v26 = v50;
        goto LABEL_40;
      }
      char v45 = (void *)MEMORY[0x1D9452090]();
      id v46 = self;
      int v47 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        uint64_t v48 = v51 = v45;
        id v49 = @"non-";
        *(_DWORD *)buf = 138543874;
        uint64_t v56 = v48;
        __int16 v57 = 2112;
        if (v27) {
          id v49 = &stru_1F2C9F1A8;
        }
        unsigned int v58 = v5;
        __int16 v59 = 2112;
        long long v60 = v49;
        _os_log_impl(&dword_1D49D5000, v47, OS_LOG_TYPE_INFO, "%{public}@Failed to update user %@ to %@administrator", buf, 0x20u);

        char v45 = v51;
      }

      uint64_t v42 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v43 = *MEMORY[0x1E4F2D140];
      uint64_t v44 = 10;
    }
    uint64_t v29 = [v42 errorWithDomain:v43 code:v44 userInfo:0];
    id v33 = [v4 responseHandler];
    ((void (**)(void, void *, void))v33)[2](v33, v29, 0);
LABEL_40:

LABEL_41:
    goto LABEL_42;
  }
  __int16 v21 = (void *)MEMORY[0x1D9452090]();
  __int16 v22 = self;
  id v23 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    long long v24 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    uint64_t v56 = v24;
    _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_ERROR, "%{public}@Client does not have entitlement to update users to home", buf, 0xCu);
  }
  uint64_t v5 = [v4 responseHandler];
  int v7 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:17 userInfo:0];
  ((void (**)(void, void *, void))v5)[2](v5, v7, 0);
LABEL_43:
}

void __35__HMDHome__handleUpdateUserAccess___block_invoke(uint64_t a1, uint64_t a2)
{
  void v10[4] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    [v3 respondWithError:a2];
  }
  else
  {
    v9[0] = @"kUserAdministratorInformationKey";
    id v4 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "isAdministrator"));
    v10[0] = v4;
    v9[1] = @"kUserRemoteAccessInformationKey";
    uint64_t v5 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "isRemoteAccessAllowed"));
    v10[1] = v5;
    v9[2] = @"kUserCamerasAccessLevelInformationKey";
    id v6 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 40), "camerasAccessLevel"));
    void v10[2] = v6;
    void v9[3] = *MEMORY[0x1E4F2D7A8];
    int v7 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "isAnnounceAccessAllowed"));
    v10[3] = v7;
    id v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:v9 count:4];

    [*(id *)(a1 + 32) respondWithPayload:v8];
  }
}

- (void)_handleUpdateUserCamerasAccessLevel:(id)a3
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [v4 stringForKey:@"kUserIDKey"];
  id v6 = [(HMDHome *)self users];
  int v7 = objc_msgSend(v6, "hmf_firstObjectWithValue:forKeyPath:", v5, @"userID");

  if (!v7)
  {
    uint64_t v14 = (void *)MEMORY[0x1D9452090]();
    uint64_t v15 = self;
    uint64_t v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      int v47 = v17;
      __int16 v48 = 2112;
      id v49 = v5;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, "%{public}@Failed to find user %@", buf, 0x16u);
    }
    __int16 v12 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v13 = 2;
    goto LABEL_9;
  }
  if (![v7 isOwner])
  {
    id v18 = (void *)[v7 newModelWithChangeType:2];
    uint64_t v19 = [v4 numberForKey:@"kUserCamerasAccessLevelInformationKey"];
    id v20 = v19;
    if (v19)
    {
      uint64_t v21 = [v19 integerValue];
      if (HMUserIsValidCameraAccessLevel())
      {
        uint64_t v22 = [v7 camerasAccessLevel];
        id v23 = (void *)MEMORY[0x1D9452090]();
        long long v24 = self;
        long long v25 = HMFGetOSLogHandle();
        long long v26 = v25;
        if (v22 != v21)
        {
          if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
          {
            uint64_t v38 = HMFGetLogIdentifier();
            HMUserCameraAccessLevelAsString();
            uint64_t v39 = (__CFString *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            int v47 = v38;
            __int16 v48 = 2112;
            id v49 = v39;
            __int16 v50 = 2112;
            long long v51 = v7;
            _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_INFO, "%{public}@Updating cameras access level to %@ for user: %@", buf, 0x20u);
          }
          [v18 setCamerasAccessLevel:v20];
          long long v40 = [(HMDHome *)v24 backingStore];
          long long v41 = [v4 name];
          uint64_t v42 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
          __int16 v37 = [v40 transaction:v41 options:v42];

          [v37 add:v18];
          v43[0] = MEMORY[0x1E4F143A8];
          v43[1] = 3221225472;
          void v43[2] = __47__HMDHome__handleUpdateUserCamerasAccessLevel___block_invoke;
          v43[3] = &unk_1E6A196E0;
          id v44 = v4;
          id v45 = v20;
          [v37 run:v43];

          goto LABEL_24;
        }
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          int v27 = HMFGetLogIdentifier();
          HMUserCameraAccessLevelAsString();
          int v28 = (__CFString *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          int v47 = v27;
          __int16 v48 = 2112;
          id v49 = v28;
          _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_ERROR, "%{public}@Cameras access level: %@ already set", buf, 0x16u);
        }
        uint64_t v29 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v30 = 1;
LABEL_23:
        __int16 v37 = [v29 hmErrorWithCode:v30];
        [v4 respondWithError:v37];
LABEL_24:

        goto LABEL_25;
      }
      long long v31 = (void *)MEMORY[0x1D9452090]();
      __int16 v32 = self;
      long long v35 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        __int16 v36 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        int v47 = v36;
        __int16 v48 = 2048;
        id v49 = (__CFString *)v21;
        _os_log_impl(&dword_1D49D5000, v35, OS_LOG_TYPE_ERROR, "%{public}@Invalid cameras access level value: %ld", buf, 0x16u);
      }
    }
    else
    {
      long long v31 = (void *)MEMORY[0x1D9452090]();
      __int16 v32 = self;
      id v33 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        uint64_t v34 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        int v47 = v34;
        __int16 v48 = 2112;
        id v49 = @"kUserCamerasAccessLevelInformationKey";
        _os_log_impl(&dword_1D49D5000, v33, OS_LOG_TYPE_ERROR, "%{public}@Missing value for key: %@", buf, 0x16u);
      }
    }

    uint64_t v29 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v30 = 3;
    goto LABEL_23;
  }
  id v8 = (void *)MEMORY[0x1D9452090]();
  int v9 = self;
  int v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    int v11 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    int v47 = v11;
    __int16 v48 = 2112;
    id v49 = v5;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Cannot modify cameras access level for owner of the home: %@", buf, 0x16u);
  }
  __int16 v12 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v13 = 48;
LABEL_9:
  id v18 = [v12 hmErrorWithCode:v13];
  [v4 respondWithError:v18];
LABEL_25:
}

void __47__HMDHome__handleUpdateUserCamerasAccessLevel___block_invoke(uint64_t a1, uint64_t a2)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    [v3 respondWithError:a2];
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 40);
    id v6 = @"kUserCamerasAccessLevelInformationKey";
    v7[0] = v4;
    uint64_t v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v7 forKeys:&v6 count:1];
    [*(id *)(a1 + 32) respondWithPayload:v5];
  }
}

- (void)_addUsersWithInviteInformations:(id)a3 message:(id)a4
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v34 = a4;
  int v7 = [MEMORY[0x1E4F1CA48] array];
  __int16 v36 = [MEMORY[0x1E4F1CA48] array];
  long long v48 = 0u;
  long long v49 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  id obj = v6;
  uint64_t v8 = [obj countByEnumeratingWithState:&v46 objects:v52 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v47;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v47 != v9) {
          objc_enumerationMutation(obj);
        }
        int v11 = *(void **)(*((void *)&v46 + 1) + 8 * i);
        uint64_t v12 = [(id)objc_opt_class() privilegeFromUserInviteInformation:v11];
        uint64_t v13 = +[HMDAccountHandleFormatter defaultFormatter];
        uint64_t v14 = [v11 userID];
        uint64_t v15 = [v13 accountHandleFromString:v14];

        uint64_t v16 = [[HMDUser alloc] initWithAccountHandle:v15 home:self pairingIdentity:0 privilege:v12];
        [(HMDUser *)v16 refreshDisplayName];
        -[HMDUser setRemoteAccessAllowed:](v16, "setRemoteAccessAllowed:", [v11 isRemoteAccessAllowed]);
        -[HMDUser setCamerasAccessLevel:](v16, "setCamerasAccessLevel:", [v11 camerasAccessLevel]);
        if ([v11 isAnnounceAccessAllowed]) {
          uint64_t v17 = 2;
        }
        else {
          uint64_t v17 = 1;
        }
        [(HMDUser *)v16 setAnnounceAccessLevel:v17];
        id v18 = [[HMDOutgoingHomeInvitation alloc] initWithInvitee:v16 invitationState:2 forHome:self expiryDate:0 messageIdentifier:0];
        [v7 addObject:v18];
        uint64_t v19 = [(HMDHomeInvitation *)v18 invitationData];
        [v36 addObject:v19];
      }
      uint64_t v8 = [obj countByEnumeratingWithState:&v46 objects:v52 count:16];
    }
    while (v8);
  }

  uint64_t v20 = _os_feature_enabled_impl();
  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __51__HMDHome__addUsersWithInviteInformations_message___block_invoke;
  aBlock[3] = &unk_1E6A13588;
  objc_copyWeak(&v43, &location);
  id v21 = v7;
  id v42 = v21;
  char v44 = v20;
  uint64_t v22 = (void (**)(void))_Block_copy(aBlock);
  [(HMDHome *)self _addOutgoingInvitations:v21 message:v34 transactionCompleted:0];
  id v23 = [(HMDHome *)self administratorHandler];
  if ([v23 shouldRelayMessages])
  {
    long long v24 = encodeRootObject();
    v50[0] = @"HM.invitations";
    v50[1] = @"HMDHomeSuppressInviteNotificationKey";
    v51[0] = v24;
    long long v25 = [NSNumber numberWithBool:v20];
    v51[1] = v25;
    id v33 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v51 forKeys:v50 count:2];

    long long v26 = (void *)MEMORY[0x1E4F654B0];
    v38[0] = MEMORY[0x1E4F143A8];
    v38[1] = 3221225472;
    v38[2] = __51__HMDHome__addUsersWithInviteInformations_message___block_invoke_2;
    void v38[3] = &unk_1E6A17958;
    objc_copyWeak(&v40, &location);
    id v39 = v21;
    int v27 = [v26 messageWithName:@"kAddHomeInvitesInternalRequestKey" messagePayload:v33 responseHandler:v38];
    id v28 = objc_alloc(MEMORY[0x1E4F65488]);
    uint64_t v29 = [(HMDHome *)self uuid];
    uint64_t v30 = (void *)[v28 initWithTarget:v29];

    [v27 setDestination:v30];
    [v27 setQualityOfService:33];
    id v37 = 0;
    long long v31 = [v23 operationForMessage:v27 error:&v37];
    id v32 = v37;
    if (v31) {
      [v23 addOperation:v31];
    }

    objc_destroyWeak(&v40);
  }
  else
  {
    v22[2](v22);
  }

  objc_destroyWeak(&v43);
  objc_destroyWeak(&location);
}

void __51__HMDHome__addUsersWithInviteInformations_message___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "__sendOutgoingInvitations:suppressHomeInviteNotification:", *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 48));
}

void __51__HMDHome__addUsersWithInviteInformations_message___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = WeakRetained;
    int v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      int v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      uint64_t v16 = v11;
      __int16 v17 = 2112;
      id v18 = @"kAddHomeInvitesInternalRequestKey";
      __int16 v19 = 2112;
      id v20 = v5;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Relayed message %@ with error %@", buf, 0x20u);
    }
    if (v5)
    {
      uint64_t v12 = [v9 workQueue];
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      void v13[2] = __51__HMDHome__addUsersWithInviteInformations_message___block_invoke_1376;
      v13[3] = &unk_1E6A197C8;
      void v13[4] = v9;
      id v14 = *(id *)(a1 + 32);
      dispatch_async(v12, v13);
    }
  }
}

void __51__HMDHome__addUsersWithInviteInformations_message___block_invoke_1376(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = *(id *)(a1 + 32);
  uint64_t v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    uint64_t v6 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    __int16 v19 = v5;
    __int16 v20 = 2112;
    uint64_t v21 = v6;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@Removing invites that were not added to resident: %@", buf, 0x16u);
  }
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v7 = *(id *)(a1 + 40);
  uint64_t v8 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v14 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        objc_msgSend(*(id *)(a1 + 32), "removeOutgoingInvitation:", v12, (void)v13);
        objc_msgSend(*(id *)(a1 + 32), "__handleCancelledOutgoingInvitation:", v12);
        [v12 updateInvitationState:1];
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v9);
  }
}

- (void)__sendOutgoingInvitations:(id)a3 suppressHomeInviteNotification:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v14;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v6);
        }
        if (self)
        {
          id v11 = *(id *)(*((void *)&v13 + 1) + 8 * v10);
          uint64_t v12 = [v11 user];
          [(HMDHome *)self _cleanRemovedUsers:v12];

          [(HMDHome *)self _sendInvitation:v11 message:0 shareURL:0 shareToken:0 suppressHomeInviteNotification:v4 logEventBuilder:0];
        }
        ++v10;
      }
      while (v8 != v10);
      uint64_t v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v8);
  }
}

- (void)_handleRemoveOutgoingHomeInvitationModel:(id)a3 message:(id)a4
{
  id v13 = a4;
  id v6 = [a3 uuid];
  uint64_t v7 = [(HMDHome *)self outgoingInvitationWithUUID:v6];

  if (v7)
  {
    [(HMDHome *)self removeOutgoingInvitation:v7];
    uint64_t v8 = [v13 transactionResult];
    [v8 markChanged];
    uint64_t v9 = [v7 user];
    uint64_t v10 = [v9 uuid];
    id v11 = [(HMDHome *)self userWithUUID:v10];

    if (v11)
    {
      [(HMDHome *)self __handleCompletedOutgoingInvitation:v7];
    }
    else
    {
      if ([v8 source] == 2 || objc_msgSend(v8, "source") == 3) {
        [v7 cancel];
      }
      else {
        [(HMDHome *)self __handleCancelledOutgoingInvitation:v7];
      }
      [v7 updateInvitationState:1];
    }
    if ([(HMDHome *)self isOwnerUser])
    {
      uint64_t v12 = [(HMDHome *)self homeManager];
      [v12 setLastUserAddRemoveTimestamp];
    }
  }
  [v13 respondWithPayload:0];
}

- (void)_handleAddOutgoingHomeInvitationModel:(id)a3 message:(id)a4
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v6 uuid];
  uint64_t v9 = [(HMDHome *)self outgoingInvitationWithUUID:v8];

  if (!v9)
  {
    uint64_t v10 = [v6 user];
    uint64_t v30 = +[HMDUser userWithDictionary:v10 home:self];

    [v30 refreshDisplayName];
    id v11 = [HMDOutgoingHomeInvitation alloc];
    uint64_t v12 = [v6 uuid];
    id v13 = [v6 invitationState];
    uint64_t v14 = [v13 integerValue];
    long long v15 = [v6 expiryDate];
    long long v16 = [(HMDOutgoingHomeInvitation *)v11 initWithUUID:v12 invitee:v30 invitationState:v14 forHome:self expiryDate:v15 messageIdentifier:0];

    __int16 v17 = (void *)MEMORY[0x1D9452090]();
    uint64_t v18 = self;
    __int16 v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      __int16 v20 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138544130;
      id v37 = v20;
      __int16 v38 = 2112;
      id v39 = v30;
      __int16 v40 = 2112;
      uint64_t v41 = 0;
      __int16 v42 = 2112;
      id v43 = v16;
      _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_INFO, "%{public}@Created user [%@] from outgoing invitation: %@ / %@", buf, 0x2Au);
    }
    id v21 = objc_alloc(MEMORY[0x1E4F65480]);
    uint64_t v22 = [MEMORY[0x1E4F65488] allMessageDestinations];
    id v23 = (void *)[v21 initWithName:@"kTransactionUpdate" destination:v22 payload:0];
    [(HMDOutgoingHomeInvitation *)v16 transactionObjectUpdated:0 newValues:v6 message:v23];

    long long v24 = [(HMDHome *)v18 workQueue];
    [(HMDHomeInvitation *)v16 setClientQueue:v24];

    objc_initWeak((id *)buf, v18);
    objc_initWeak(&location, v16);
    v31[0] = MEMORY[0x1E4F143A8];
    v31[1] = 3221225472;
    void v31[2] = __57__HMDHome__handleAddOutgoingHomeInvitationModel_message___block_invoke;
    void v31[3] = &unk_1E6A177A8;
    objc_copyWeak(&v33, (id *)buf);
    objc_copyWeak(&v34, &location);
    id v25 = v7;
    id v32 = v25;
    [(HMDHomeInvitation *)v16 setExpirationHandler:v31];
    [(HMDHome *)v18 addOutgoingInvitation:v16];
    [(HMDHome *)v18 _cleanRemovedUsers:v30];
    [(HMDOutgoingHomeInvitation *)v16 notifyStateChangedForMessage:v25];
    if ([(HMDHome *)v18 isOwnerUser])
    {
      long long v26 = [(HMDHome *)v18 home];
      int v27 = [v26 homeManager];
      [v27 updateCurrentUserEligibleForOwnerToAutoMigration];

      id v28 = [(HMDHome *)v18 homeManager];
      [v28 setLastUserAddRemoveTimestamp];
    }
    uint64_t v29 = [v25 transactionResult];
    [v29 markChanged];

    objc_destroyWeak(&v34);
    objc_destroyWeak(&v33);
    objc_destroyWeak(&location);
    objc_destroyWeak((id *)buf);
  }
}

void __57__HMDHome__handleAddOutgoingHomeInvitationModel_message___block_invoke(id *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained(a1 + 5);
  id v3 = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    BOOL v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = WeakRetained;
    id v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = HMFGetLogIdentifier();
      uint64_t v8 = [v3 identifier];
      int v10 = 138543618;
      id v11 = v7;
      __int16 v12 = 2112;
      id v13 = v8;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Expiring invitation %@", (uint8_t *)&v10, 0x16u);
    }
    [v5 removeOutgoingInvitation:v3];
    objc_msgSend(v5, "__handleCancelledOutgoingInvitation:", v3);
    objc_msgSend(v3, "updateInvitationState:", objc_msgSend(v3, "invitationState"));
    uint64_t v9 = [a1[4] name];
    [v5 saveWithReason:v9 postSyncNotification:0];
  }
}

- (void)_handleUserInvitations:(id)a3
{
  v78[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 dataForKey:*MEMORY[0x1E4F2D7C0]];
  if (!v5)
  {
    id v37 = (void *)MEMORY[0x1D9452090]();
    __int16 v38 = self;
    id v39 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      __int16 v40 = HMFGetLogIdentifier();
      uint64_t v41 = [v4 messagePayload];
      *(_DWORD *)buf = 138543618;
      uint64_t v73 = v40;
      __int16 v74 = 2112;
      uint64_t v75 = (uint64_t)v41;
      _os_log_impl(&dword_1D49D5000, v39, OS_LOG_TYPE_ERROR, "%{public}@Failed to send invitations, missing user invite information: %@", buf, 0x16u);
    }
    id v11 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:3 userInfo:0];
    [v4 respondWithError:v11];
    goto LABEL_38;
  }
  id v6 = (void *)MEMORY[0x1E4F28DC0];
  id v7 = (void *)MEMORY[0x1E4F1CAD0];
  v78[0] = objc_opt_class();
  v78[1] = objc_opt_class();
  uint64_t v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v78 count:2];
  uint64_t v9 = [v7 setWithArray:v8];
  id v70 = 0;
  uint64_t v10 = [v6 unarchivedObjectOfClasses:v9 fromData:v5 error:&v70];
  id v11 = v70;

  __int16 v12 = (void *)v10;
  id v13 = (void *)MEMORY[0x1D9452090]();
  uint64_t v14 = self;
  long long v15 = HMFGetOSLogHandle();
  long long v16 = v15;
  if (!v10)
  {
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      __int16 v42 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v73 = v42;
      __int16 v74 = 2112;
      uint64_t v75 = (uint64_t)v11;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to decode user invite information: %@", buf, 0x16u);
    }
    id v43 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:3 userInfo:0];
    [v4 respondWithError:v43];

    goto LABEL_37;
  }
  id v64 = v11;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    __int16 v17 = HMFGetLogIdentifier();
    uint64_t v18 = [(HMDHome *)v14 users];
    uint64_t v19 = [v18 count];
    *(_DWORD *)buf = 138543874;
    uint64_t v73 = v17;
    __int16 v74 = 2048;
    uint64_t v75 = v19;
    __int16 v76 = 2048;
    __int16 v77 = getHMMaximumUsersPerHome;
    _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, "%{public}@Adding users; current user count is %ld and max is %ld",
      buf,
      0x20u);

    __int16 v12 = (void *)v10;
  }

  __int16 v20 = [(HMDHome *)v14 users];
  uint64_t v21 = [v20 count];
  unint64_t v22 = [v12 count] + v21;
  unint64_t v23 = maximumUsersPerHome;

  if (v22 >= v23)
  {
    uint64_t v44 = (void *)MEMORY[0x1D9452090]();
    id v45 = v14;
    long long v46 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      long long v48 = v47 = v12;
      *(_DWORD *)buf = 138543362;
      uint64_t v73 = v48;
      _os_log_impl(&dword_1D49D5000, v46, OS_LOG_TYPE_INFO, "%{public}@Can't add users; already at maximum users for home",
        buf,
        0xCu);

      __int16 v12 = v47;
    }

    long long v49 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:49 userInfo:0];
    __int16 v50 = [v4 responseHandler];
    ((void (**)(void, void *, void))v50)[2](v50, v49, 0);

    goto LABEL_29;
  }
  __int16 v63 = v4;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  id obj = v12;
  uint64_t v24 = [obj countByEnumeratingWithState:&v66 objects:v71 count:16];
  if (!v24) {
    goto LABEL_19;
  }
  uint64_t v25 = v24;
  uint64_t v26 = *(void *)v67;
  id v62 = v12;
  while (2)
  {
    for (uint64_t i = 0; i != v25; ++i)
    {
      if (*(void *)v67 != v26) {
        objc_enumerationMutation(obj);
      }
      id v28 = *(void **)(*((void *)&v66 + 1) + 8 * i);
      uint64_t v29 = (void *)MEMORY[0x1D9452090]();
      uint64_t v30 = v14;
      long long v31 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        id v32 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v73 = v32;
        __int16 v74 = 2112;
        uint64_t v75 = (uint64_t)v28;
        _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_INFO, "%{public}@Processing invite information : %@", buf, 0x16u);
      }
      id v33 = [v28 userID];
      id v34 = [(HMDHome *)v30 users];
      long long v35 = objc_msgSend(v34, "hmf_firstObjectWithValue:forKeyPath:", v33, @"userID");

      if (v35)
      {
        long long v51 = (void *)MEMORY[0x1D9452090]();
        uint64_t v52 = v30;
        uint64_t v53 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
        {
          id v54 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          uint64_t v73 = v54;
          __int16 v74 = 2112;
          uint64_t v75 = (uint64_t)v33;
          uint64_t v55 = "%{public}@Failed to invite user %@ since the user is already part of the home";
LABEL_34:
          _os_log_impl(&dword_1D49D5000, v53, OS_LOG_TYPE_INFO, v55, buf, 0x16u);
        }
LABEL_35:

        uint64_t v56 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:1 userInfo:0];
        id v4 = v63;
        __int16 v57 = [v63 responseHandler];
        v57[2](v57, v56, 0);

LABEL_36:
        id v11 = v64;

        __int16 v12 = v62;
        goto LABEL_37;
      }
      __int16 v36 = [(HMDHome *)v30 outgoingInvitations];
      long long v35 = objc_msgSend(v36, "hmf_firstObjectWithValue:forKeyPath:", v33, @"user.userID");

      if (v35)
      {
        long long v51 = (void *)MEMORY[0x1D9452090]();
        uint64_t v52 = v30;
        uint64_t v53 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
        {
          id v54 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          uint64_t v73 = v54;
          __int16 v74 = 2112;
          uint64_t v75 = (uint64_t)v33;
          uint64_t v55 = "%{public}@Failed to invite user %@ since the user is already invited to the home";
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      if ([v28 isAdministrator]
        && ![(HMDHome *)v30 isResidentSupported])
      {
        unsigned int v58 = (void *)MEMORY[0x1D9452090]();
        __int16 v59 = v30;
        long long v60 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
        {
          uint64_t v61 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          uint64_t v73 = v61;
          __int16 v74 = 2112;
          uint64_t v75 = (uint64_t)v33;
          _os_log_impl(&dword_1D49D5000, v60, OS_LOG_TYPE_INFO, "%{public}@Cannot invite admin user %@ because it requires a resident", buf, 0x16u);
        }
        long long v35 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:48 userInfo:0];
        id v4 = v63;
        uint64_t v56 = [v63 responseHandler];
        ((void (**)(void, void *, void))v56)[2](v56, v35, 0);
        goto LABEL_36;
      }
    }
    uint64_t v25 = [obj countByEnumeratingWithState:&v66 objects:v71 count:16];
    __int16 v12 = v62;
    if (v25) {
      continue;
    }
    break;
  }
LABEL_19:

  id v4 = v63;
  [(HMDHome *)v14 _addUsersWithInviteInformations:obj message:v63];
LABEL_29:
  id v11 = v64;
LABEL_37:

LABEL_38:
}

- (void)_cleanRemovedUsers:(id)a3
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [MEMORY[0x1E4F1CA48] array];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v6 = [(HMDHome *)self removedUsers];
  uint64_t v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        if ([v11 isEqualToUser:v4]) {
          [v5 addObject:v11];
        }
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v8);
  }

  __int16 v12 = [(HMDHome *)self removedUsers];
  [v12 removeObjectsInArray:v5];
}

- (id)prepareUserManagementOperationForUser:(id)a3 accessory:(id)a4 type:(unint64_t)a5 model:(id)a6 error:(id *)a7
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  id v12 = a3;
  id v13 = a4;
  id v38 = a6;
  if (shouldLogPrivateInformation())
  {
    long long v14 = [v12 userID];
  }
  else
  {
    long long v14 = @"...";
    long long v15 = @"...";
  }
  id v39 = a7;
  long long v16 = (void *)MEMORY[0x1D9452090]();
  __int16 v17 = self;
  uint64_t v18 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    uint64_t v19 = HMFGetLogIdentifier();
    if (a5 - 1 > 2) {
      __int16 v20 = @"unknown";
    }
    else {
      __int16 v20 = off_1E6A0F7A8[a5 - 1];
    }
    uint64_t v21 = v20;
    unint64_t v22 = [v13 name];
    *(_DWORD *)buf = 138544130;
    id v43 = v19;
    __int16 v44 = 2112;
    id v45 = v21;
    __int16 v46 = 2112;
    long long v47 = v14;
    __int16 v48 = 2112;
    long long v49 = v22;
    _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@Preparing %@ user operation for user '%@' and accessory '%@'", buf, 0x2Au);
  }
  id v41 = 0;
  BOOL v23 = [(HMDHome *)v17 _verifyUserManagementPermissionForAccessory:v13 error:&v41];
  id v24 = v41;
  uint64_t v25 = v24;
  if (!v23
    || (id v40 = v24,
        BOOL v26 = [(HMDHome *)v17 _isUserValid:v12 error:&v40],
        id v27 = v40,
        v25,
        uint64_t v25 = v27,
        !v26))
  {
    id v28 = (void *)MEMORY[0x1D9452090]();
    uint64_t v29 = v17;
    uint64_t v30 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      long long v31 = HMFGetLogIdentifier();
      id v32 = [v13 name];
      *(_DWORD *)buf = 138544130;
      id v43 = v31;
      __int16 v44 = 2112;
      id v45 = v14;
      __int16 v46 = 2112;
      long long v47 = v32;
      __int16 v48 = 2112;
      long long v49 = v25;
      _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_ERROR, "%{public}@Unable to prepare user operation for user '%@' and accessory '%@' due to error: %@", buf, 0x2Au);
    }
  }
  if (v25)
  {
    id v33 = 0;
    long long v35 = v38;
    id v34 = v39;
    goto LABEL_23;
  }
  long long v35 = v38;
  id v34 = v39;
  if (a5 == 2)
  {
    uint64_t v36 = +[HMDUserManagementOperation removeUserManagementOperationForUser:v12 accessory:v13 model:v38];
  }
  else
  {
    if (a5 != 1) {
      goto LABEL_22;
    }
    uint64_t v36 = +[HMDUserManagementOperation addUserManagementOperationForUser:v12 accessory:v13 model:v38];
  }
  id v33 = (void *)v36;
  if (v36)
  {
    uint64_t v25 = 0;
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v25 = objc_msgSend(MEMORY[0x1E4F28C58], "hmErrorWithCode:description:reason:suggestion:", 3, @"Failed to create user operation", 0, 0, v38);
  id v33 = 0;
LABEL_23:
  if (v34) {
    id *v34 = v25;
  }

  return v33;
}

- (id)prepareUserManagementOperationForUser:(id)a3 accessories:(id)a4 type:(unint64_t)a5 error:(id *)a6
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v37 = a3;
  id v9 = a4;
  objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v9, "count"));
  id v34 = (id)objc_claimAutoreleasedReturnValue();
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  id obj = v9;
  uint64_t v10 = [obj countByEnumeratingWithState:&v39 objects:v51 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    id v33 = 0;
    uint64_t v12 = *(void *)v40;
    long long v35 = self;
    unint64_t v32 = a5;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v40 != v12) {
          objc_enumerationMutation(obj);
        }
        long long v14 = *(void **)(*((void *)&v39 + 1) + 8 * i);
        if ([v14 supportsUserManagement])
        {
          uint64_t v15 = v12;
          id v38 = 0;
          long long v16 = [(HMDHome *)self prepareUserManagementOperationForUser:v37 accessory:v14 type:a5 model:0 error:&v38];
          id v17 = v38;
          if (v16)
          {
            [v34 addObject:v16];
          }
          else
          {
            unint64_t v22 = (void *)MEMORY[0x1D9452090]();
            BOOL v23 = self;
            id v24 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            {
              uint64_t v25 = HMFGetLogIdentifier();
              [v37 userID];
              v26 = long long v31 = v22;
              id v27 = [v14 name];
              *(_DWORD *)buf = 138544130;
              __int16 v44 = v25;
              __int16 v45 = 2112;
              __int16 v46 = v26;
              __int16 v47 = 2112;
              __int16 v48 = v27;
              __int16 v49 = 2112;
              id v50 = v17;
              _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_ERROR, "%{public}@Failed to prepare user management operation for user '%@', accessory '%@ with error: %@", buf, 0x2Au);

              unint64_t v22 = v31;
              self = v35;
            }

            if (v17)
            {
              id v28 = v17;

              id v33 = v28;
            }
            a5 = v32;
          }

          uint64_t v12 = v15;
        }
        else
        {
          uint64_t v18 = (void *)MEMORY[0x1D9452090]();
          uint64_t v19 = self;
          __int16 v20 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            uint64_t v21 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            __int16 v44 = v21;
            __int16 v45 = 2112;
            __int16 v46 = v14;
            _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@Skipping creation of user management operation for unmanageable accessory: %@", buf, 0x16u);

            self = v35;
          }
        }
      }
      uint64_t v11 = [obj countByEnumeratingWithState:&v39 objects:v51 count:16];
    }
    while (v11);
  }
  else
  {
    id v33 = 0;
  }

  if (a6) {
    *a6 = v33;
  }

  return v34;
}

- (void)_addAllUsersToAccessory:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self users];
  [(HMDHome *)self _addUsers:v5 accessory:v4];
}

- (void)_addUsers:(id)a3 accessory:(id)a4
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v45 = a4;
  uint64_t v7 = [(HMDHome *)self homeManager];
  uint64_t v8 = [v7 backingStore];
  id v9 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  long long v42 = [v8 transaction:@"kUserManagementOperationAddedKey" options:v9];

  __int16 v48 = self;
  uint64_t v10 = [(HMDHome *)self owner];
  long long v41 = [v10 pairingIdentity];

  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  id obj = v6;
  uint64_t v11 = [obj countByEnumeratingWithState:&v50 objects:v62 count:16];
  if (v11)
  {
    uint64_t v13 = v11;
    *(void *)&long long v12 = 138543874;
    long long v37 = v12;
    uint64_t v14 = *(void *)v51;
    uint64_t v43 = *(void *)v51;
    do
    {
      uint64_t v15 = 0;
      uint64_t v44 = v13;
      do
      {
        if (*(void *)v51 != v14) {
          objc_enumerationMutation(obj);
        }
        long long v16 = *(void **)(*((void *)&v50 + 1) + 8 * v15);
        id v17 = [(HMDHome *)v48 currentUser];
        char v18 = [v16 isEqual:v17];

        if ((v18 & 1) == 0)
        {
          uint64_t v19 = (void *)MEMORY[0x1D9452090]();
          __int16 v20 = v48;
          uint64_t v21 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            unint64_t v22 = HMFGetLogIdentifier();
            BOOL v23 = [v16 userID];
            *(_DWORD *)buf = 138543618;
            uint64_t v55 = v22;
            __int16 v56 = 2112;
            __int16 v57 = v23;
            _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@Adding user '%@' to all accessories in the home", buf, 0x16u);

            uint64_t v13 = v44;
            uint64_t v14 = v43;
          }

          id v49 = 0;
          id v24 = [(HMDHome *)v20 prepareUserManagementOperationForUser:v16 accessory:v45 type:1 model:0 error:&v49];
          id v47 = v49;
          uint64_t v25 = (void *)MEMORY[0x1D9452090]();
          BOOL v26 = v20;
          id v27 = HMFGetOSLogHandle();
          id v28 = v27;
          if (v24)
          {
            if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
            {
              long long v39 = HMFGetLogIdentifier();
              long long v40 = [v24 identifier];
              uint64_t v29 = [v40 UUIDString];
              id v38 = [v24 user];
              uint64_t v30 = [v38 userID];
              long long v31 = [v24 accessory];
              unint64_t v32 = [v31 shortDescription];
              *(_DWORD *)buf = 138544130;
              uint64_t v55 = v39;
              __int16 v56 = 2112;
              __int16 v57 = v29;
              __int16 v58 = 2112;
              id v59 = v30;
              __int16 v60 = 2112;
              uint64_t v61 = v32;
              _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_INFO, "%{public}@Adding operation '%@' to manager tracking adding user '%@' to accessory '%@'", buf, 0x2Au);

              uint64_t v14 = v43;
              uint64_t v13 = v44;
            }
            [v24 setOwnerPairingIdentity:v41];
            id v33 = [v24 modelObjectWithChangeType:1];
            [v42 add:v33];
          }
          else
          {
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              long long v35 = v34 = v25;
              uint64_t v36 = [v16 userID];
              *(_DWORD *)buf = v37;
              uint64_t v55 = v35;
              __int16 v56 = 2112;
              __int16 v57 = v36;
              __int16 v58 = 2112;
              id v59 = v47;
              _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_ERROR, "%{public}@Failed to prepare add operations for user '%@' with error: %@", buf, 0x20u);

              uint64_t v25 = v34;
            }
          }
        }
        ++v15;
      }
      while (v13 != v15);
      uint64_t v13 = [obj countByEnumeratingWithState:&v50 objects:v62 count:16];
    }
    while (v13);
  }

  [v42 run];
}

- (void)removeAllUsersAndCloudDataFromAccessory:(id)a3 completionHandler:(id)a4
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  aBlocuint64_t k = (void (**)(void))a4;
  BOOL v7 = [(HMDHome *)self isOwnerUser];
  uint64_t v8 = (void *)MEMORY[0x1D9452090]();
  id v9 = self;
  uint64_t v10 = HMFGetOSLogHandle();
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
  if (v7)
  {
    if (v11)
    {
      long long v12 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      long long v112 = v12;
      __int16 v113 = 2112;
      id v114 = v6;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Removing cloud data from primary accessory %@", buf, 0x16u);
    }
    id v77 = v6;
    id v13 = v6;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    id v15 = v14;

    long long v109 = 0u;
    long long v110 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    id v76 = v15;
    long long v16 = [v15 identifiersForBridgedAccessories];
    uint64_t v17 = [v16 countByEnumeratingWithState:&v107 objects:v120 count:16];
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = *(void *)v108;
      do
      {
        for (uint64_t i = 0; i != v18; ++i)
        {
          if (*(void *)v108 != v19) {
            objc_enumerationMutation(v16);
          }
          uint64_t v21 = [(HMDHome *)v9 accessoryWithUUID:*(void *)(*((void *)&v107 + 1) + 8 * i)];
          [v21 removeCloudData];
        }
        uint64_t v18 = [v16 countByEnumeratingWithState:&v107 objects:v120 count:16];
      }
      while (v18);
    }

    [v13 removeCloudData];
    id v82 = [(HMDHome *)v9 homeManager];
    unint64_t v22 = [v82 backingStore];
    BOOL v23 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    __int16 v81 = [v22 transaction:@"kUserManagementOperationAddedKey" options:v23];

    id v24 = v13;
    if ([v24 conformsToProtocol:&unk_1F2E59C30]) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = 0;
    }
    id v26 = v25;
    id v87 = v24;

    char v27 = [v26 supportsDisassociation];
    __int16 v83 = 0;
    if (v27) {
      goto LABEL_30;
    }
    id v28 = (void *)MEMORY[0x1D9452090]();
    uint64_t v29 = v9;
    uint64_t v30 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      long long v31 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v112 = v31;
      _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_INFO, "%{public}@Creating remove operation for ourselves because accessory does not support disassociation", buf, 0xCu);
    }
    unint64_t v32 = [(HMDHome *)v29 currentUser];
    id v106 = 0;
    __int16 v83 = [(HMDHome *)v29 prepareUserManagementOperationForUser:v32 accessory:v87 type:2 model:0 error:&v106];
    id v33 = v106;

    if (!v33)
    {
LABEL_30:
      dispatch_group_t group = dispatch_group_create();
      __int16 v48 = [(HMDHome *)v9 owner];
      __int16 v79 = [v48 pairingIdentity];

      long long v104 = 0u;
      long long v105 = 0u;
      long long v102 = 0u;
      long long v103 = 0u;
      id obj = [(HMDHome *)v9 users];
      id v49 = v87;
      uint64_t v86 = [obj countByEnumeratingWithState:&v102 objects:v119 count:16];
      if (v86)
      {
        uint64_t v85 = *(void *)v103;
        do
        {
          for (uint64_t j = 0; j != v86; ++j)
          {
            if (*(void *)v103 != v85) {
              objc_enumerationMutation(obj);
            }
            long long v51 = *(void **)(*((void *)&v102 + 1) + 8 * j);
            long long v52 = [(HMDHome *)v9 currentUser];
            int v53 = [v51 isEqual:v52];

            id v54 = (void *)MEMORY[0x1D9452090]();
            uint64_t v55 = v9;
            __int16 v56 = HMFGetOSLogHandle();
            BOOL v57 = os_log_type_enabled(v56, OS_LOG_TYPE_INFO);
            if (v53)
            {
              if (v57)
              {
                __int16 v58 = HMFGetLogIdentifier();
                id v59 = [v51 userID];
                __int16 v60 = [v49 name];
                *(_DWORD *)buf = 138543874;
                long long v112 = v58;
                __int16 v113 = 2112;
                id v114 = v59;
                __int16 v115 = 2112;
                long long v116 = v60;
                _os_log_impl(&dword_1D49D5000, v56, OS_LOG_TYPE_INFO, "%{public}@Skipping removing current user %@ from accessory %@", buf, 0x20u);
              }
            }
            else
            {
              if (v57)
              {
                uint64_t v61 = HMFGetLogIdentifier();
                id v62 = [v51 userID];
                uint64_t v63 = [v49 shortDescription];
                *(_DWORD *)buf = 138543874;
                long long v112 = v61;
                __int16 v113 = 2112;
                id v114 = v62;
                __int16 v115 = 2112;
                long long v116 = v63;
                _os_log_impl(&dword_1D49D5000, v56, OS_LOG_TYPE_INFO, "%{public}@Removing user %@ from accessory %@", buf, 0x20u);

                id v49 = v87;
              }

              id v101 = 0;
              id v64 = [(HMDHome *)v55 prepareUserManagementOperationForUser:v51 accessory:v49 type:2 model:0 error:&v101];
              id v65 = v101;
              if (v64)
              {
                [v64 setOwnerPairingIdentity:v79];
                [v83 addDependency:v64];
                dispatch_group_enter(group);
                long long v66 = [v49 identifier];
                long long v67 = [v51 pairingIdentity];
                v94[0] = MEMORY[0x1E4F143A8];
                v94[1] = 3221225472;
                v94[2] = __69__HMDHome_removeAllUsersAndCloudDataFromAccessory_completionHandler___block_invoke;
                v94[3] = &unk_1E6A09030;
                id v95 = v64;
                id v96 = v55;
                id v97 = v51;
                id v98 = v87;
                id v99 = v81;
                id v100 = group;
                [v82 cleanupOperationsForAccessory:v66 user:v67 completion:v94];

                id v49 = v87;
              }
              else
              {
                long long v68 = (void *)MEMORY[0x1D9452090]();
                long long v69 = v55;
                id v70 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
                {
                  long long v71 = HMFGetLogIdentifier();
                  id v72 = [v51 userID];
                  uint64_t v73 = [v87 shortDescription];
                  *(_DWORD *)buf = 138544130;
                  long long v112 = v71;
                  __int16 v113 = 2112;
                  id v114 = v72;
                  __int16 v115 = 2112;
                  long long v116 = v73;
                  __int16 v117 = 2112;
                  id v118 = v65;
                  _os_log_impl(&dword_1D49D5000, v70, OS_LOG_TYPE_INFO, "%{public}@Failed to create remove user operation for user '%@' and accessory '%@': %@", buf, 0x2Au);

                  id v49 = v87;
                }
              }
            }
          }
          uint64_t v86 = [obj countByEnumeratingWithState:&v102 objects:v119 count:16];
        }
        while (v86);
      }

      [v83 setOwnerPairingIdentity:v79];
      [(HMDHome *)v9 workQueue];
      uint64_t v75 = v74 = v49;
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __69__HMDHome_removeAllUsersAndCloudDataFromAccessory_completionHandler___block_invoke_1362;
      block[3] = &unk_1E6A18488;
      id v43 = v83;
      id v89 = v43;
      id v90 = v9;
      id v91 = v74;
      long long v42 = v81;
      id v92 = v81;
      long long v40 = aBlock;
      id v93 = aBlock;
      uint64_t v44 = group;
      dispatch_group_notify(group, v75, block);

      long long v41 = v76;
      id v6 = v77;
    }
    else
    {
      id v34 = v33;
      long long v35 = (void *)MEMORY[0x1D9452090]();
      uint64_t v36 = v29;
      long long v37 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        id v38 = HMFGetLogIdentifier();
        long long v39 = [v87 shortDescription];
        *(_DWORD *)buf = 138543874;
        long long v112 = v38;
        __int16 v113 = 2112;
        id v114 = v39;
        __int16 v115 = 2112;
        long long v116 = v34;
        _os_log_impl(&dword_1D49D5000, v37, OS_LOG_TYPE_ERROR, "%{public}@Failed to create remove operation for accessory %@: %@", buf, 0x20u);
      }
      id v6 = v77;
      long long v40 = aBlock;
      if (aBlock) {
        aBlock[2](aBlock);
      }
      long long v41 = v76;
      long long v42 = v81;
      id v43 = v83;
      uint64_t v44 = v34;
    }
  }
  else
  {
    if (v11)
    {
      id v45 = HMFGetLogIdentifier();
      __int16 v46 = [v6 shortDescription];
      *(_DWORD *)buf = 138543618;
      long long v112 = v45;
      __int16 v113 = 2112;
      id v114 = v46;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Not owner of home - bypassing removing users from accessory %@", buf, 0x16u);
    }
    long long v40 = aBlock;
    id v47 = _Block_copy(aBlock);
    long long v41 = v47;
    if (v47) {
      (*((void (**)(void *))v47 + 2))(v47);
    }
  }
}

void __69__HMDHome_removeAllUsersAndCloudDataFromAccessory_completionHandler___block_invoke(id *a1)
{
  id v2 = a1[4];
  id v3 = [a1[5] workQueue];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __69__HMDHome_removeAllUsersAndCloudDataFromAccessory_completionHandler___block_invoke_2;
  v4[3] = &unk_1E6A09030;
  long long v5 = *(_OWORD *)(a1 + 5);
  id v6 = a1[7];
  id v7 = a1[8];
  id v8 = a1[4];
  id v9 = a1[9];
  [v2 executeWithCompletionQueue:v3 completionHandler:v4];
}

void __69__HMDHome_removeAllUsersAndCloudDataFromAccessory_completionHandler___block_invoke_1362(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    id v3 = [*(id *)(a1 + 40) workQueue];
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __69__HMDHome_removeAllUsersAndCloudDataFromAccessory_completionHandler___block_invoke_2_1363;
    void v9[3] = &unk_1E6A16978;
    id v4 = *(void **)(a1 + 48);
    void v9[4] = *(void *)(a1 + 40);
    id v10 = v4;
    id v11 = *(id *)(a1 + 56);
    id v12 = *(id *)(a1 + 32);
    id v13 = *(id *)(a1 + 64);
    [v2 executeWithCompletionQueue:v3 completionHandler:v9];

    long long v5 = v10;
  }
  else
  {
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = __69__HMDHome_removeAllUsersAndCloudDataFromAccessory_completionHandler___block_invoke_2_1365;
    v7[3] = &unk_1E6A19358;
    id v6 = *(void **)(a1 + 56);
    id v8 = *(id *)(a1 + 64);
    [v6 run:v7];
    long long v5 = v8;
  }
}

void __69__HMDHome_removeAllUsersAndCloudDataFromAccessory_completionHandler___block_invoke_2_1363(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = *(id *)(a1 + 32);
    id v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v7 = HMFGetLogIdentifier();
      id v8 = [*(id *)(a1 + 32) currentUser];
      id v9 = [v8 userID];
      id v10 = [*(id *)(a1 + 40) shortDescription];
      *(_DWORD *)buf = 138544130;
      uint64_t v17 = v7;
      __int16 v18 = 2112;
      uint64_t v19 = v9;
      __int16 v20 = 2112;
      uint64_t v21 = v10;
      __int16 v22 = 2112;
      id v23 = v3;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove user '%@' from accessory '%@': %@", buf, 0x2Au);
    }
    id v11 = *(void **)(a1 + 48);
    id v12 = [*(id *)(a1 + 56) modelObjectWithChangeType:1];
    [v11 add:v12];
  }
  id v13 = *(void **)(a1 + 48);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = __69__HMDHome_removeAllUsersAndCloudDataFromAccessory_completionHandler___block_invoke_1364;
  v14[3] = &unk_1E6A19358;
  id v15 = *(id *)(a1 + 64);
  [v13 run:v14];
}

uint64_t __69__HMDHome_removeAllUsersAndCloudDataFromAccessory_completionHandler___block_invoke_2_1365(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t __69__HMDHome_removeAllUsersAndCloudDataFromAccessory_completionHandler___block_invoke_1364(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void __69__HMDHome_removeAllUsersAndCloudDataFromAccessory_completionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = *(id *)(a1 + 32);
    id v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v7 = HMFGetLogIdentifier();
      id v8 = [*(id *)(a1 + 40) userID];
      id v9 = [*(id *)(a1 + 48) shortDescription];
      int v12 = 138544130;
      id v13 = v7;
      __int16 v14 = 2112;
      id v15 = v8;
      __int16 v16 = 2112;
      uint64_t v17 = v9;
      __int16 v18 = 2112;
      id v19 = v3;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove user '%@' from accessory '%@': %@", (uint8_t *)&v12, 0x2Au);
    }
    id v10 = *(void **)(a1 + 56);
    id v11 = [*(id *)(a1 + 64) modelObjectWithChangeType:1];
    [v10 add:v11];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
}

- (BOOL)_isUserValid:(id)a3 error:(id *)a4
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = v6;
  if (!v6)
  {
    if (a4)
    {
      id v10 = (void *)MEMORY[0x1E4F28C58];
      id v11 = @"Missing required parameter to validate user";
      uint64_t v12 = 3;
LABEL_10:
      [v10 hmErrorWithCode:v12 description:v11 reason:0 suggestion:0];
      BOOL v9 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_12;
    }
LABEL_11:
    BOOL v9 = 0;
    goto LABEL_12;
  }
  id v8 = [v6 pairingIdentity];

  if (!v8)
  {
    id v13 = (void *)MEMORY[0x1D9452090]();
    __int16 v14 = self;
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      __int16 v16 = HMFGetLogIdentifier();
      uint64_t v17 = [v7 userID];
      int v19 = 138543618;
      uint64_t v20 = v16;
      __int16 v21 = 2112;
      __int16 v22 = v17;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_ERROR, "%{public}@Invalid user '%@', missing either pairing username or public key", (uint8_t *)&v19, 0x16u);
    }
    if (a4)
    {
      id v10 = (void *)MEMORY[0x1E4F28C58];
      id v11 = @"Invalid user information";
      uint64_t v12 = 21;
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  BOOL v9 = 1;
LABEL_12:

  return v9;
}

- (BOOL)_verifyUserManagementPermissionForAccessory:(id)a3 error:(id *)a4
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  if (![(HMDHome *)self isAdminUser])
  {
    id v8 = (void *)MEMORY[0x1D9452090]();
    BOOL v9 = self;
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      char v27 = v11;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Non administrator cannot perform user management", buf, 0xCu);
    }
    if (a4)
    {
      [MEMORY[0x1E4F28C58] hmErrorWithCode:17 description:@"Must be administrator to perform user management" reason:0 suggestion:0];
      BOOL v7 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_13;
    }
LABEL_12:
    BOOL v7 = 0;
    goto LABEL_13;
  }
  if (([v6 supportsUserManagement] & 1) == 0)
  {
    uint64_t v12 = (void *)MEMORY[0x1D9452090]();
    id v13 = self;
    __int16 v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      id v15 = HMFGetLogIdentifier();
      __int16 v16 = [v6 name];
      *(_DWORD *)buf = 138543618;
      char v27 = v15;
      __int16 v28 = 2112;
      uint64_t v29 = v16;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_ERROR, "%{public}@Cannot perform user management on '%@' since it is does not support user management operations", buf, 0x16u);
    }
    if (a4)
    {
      v24[0] = *MEMORY[0x1E4F28568];
      uint64_t v17 = NSString;
      __int16 v18 = [v6 name];
      int v19 = [v17 stringWithFormat:@"Cannot perform user management on '%@'", v18];
      v25[0] = v19;
      v24[1] = *MEMORY[0x1E4F28588];
      uint64_t v20 = [MEMORY[0x1E4F28B50] mainBundle];
      __int16 v21 = [v20 localizedStringForKey:@"Accessory is not a primary accessory." value:&stru_1F2C9F1A8 table:0];
      v25[1] = v21;
      __int16 v22 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:v24 count:2];

      *a4 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:48 userInfo:v22];
    }
    goto LABEL_12;
  }
  BOOL v7 = 1;
LABEL_13:

  return v7;
}

- (void)_purgeResidentUsers
{
  id v2 = self;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v3 = [(HMDHome *)self residentCapableDevices];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v4 = [(HMDHome *)v2 _residentUsers];
  id v5 = (void *)[v4 copy];

  uint64_t v22 = [v5 countByEnumeratingWithState:&v23 objects:v31 count:16];
  if (v22)
  {
    uint64_t v7 = *(void *)v24;
    p_superclass = HMDBackingStoreLocal.superclass;
    *(void *)&long long v6 = 138543618;
    long long v20 = v6;
    uint64_t v21 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v22; ++i)
      {
        if (*(void *)v24 != v7) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v23 + 1) + 8 * i);
        id v11 = objc_msgSend(v10, "userID", v20);
        uint64_t v12 = [p_superclass + 454 deviceWithDestination:v11];

        if (v12 && [v3 containsObject:v12])
        {
          id v13 = (void *)MEMORY[0x1D9452090]();
          __int16 v14 = v2;
          id v15 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            __int16 v16 = v5;
            uint64_t v17 = v3;
            int v19 = v18 = v2;
            *(_DWORD *)buf = v20;
            __int16 v28 = v19;
            __int16 v29 = 2112;
            uint64_t v30 = v10;
            _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@Removing non-legacy resident user from home: %@", buf, 0x16u);

            id v2 = v18;
            id v3 = v17;
            id v5 = v16;
            uint64_t v7 = v21;
          }

          [(HMDHome *)v14 _removeUser:v10];
          p_superclass = (__objc2_class **)(HMDBackingStoreLocal + 8);
        }
      }
      uint64_t v22 = [v5 countByEnumeratingWithState:&v23 objects:v31 count:16];
    }
    while (v22);
  }
}

- (void)_notifyClientsOfUpdatedResidentUser:(id)a3
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHome *)self _residentDeviceForResidentUser:v4];
  long long v6 = (void *)MEMORY[0x1D9452090]();
  uint64_t v7 = self;
  id v8 = HMFGetOSLogHandle();
  BOOL v9 = v8;
  if (v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v10 = HMFGetLogIdentifier();
      int v14 = 138543618;
      id v15 = v10;
      __int16 v16 = 2112;
      id v17 = v4;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Notifying clients of updated remote access gateway: %@", (uint8_t *)&v14, 0x16u);
    }
    id v11 = [(HMDHome *)v7 homeManager];
    uint64_t v12 = [v5 identifier];
    [v11 updateGenerationCounterWithReason:@"ResidentUserUpdated" sourceUUID:v12 shouldNotifyClients:1];
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v13 = HMFGetLogIdentifier();
      int v14 = 138543618;
      id v15 = v13;
      __int16 v16 = 2112;
      id v17 = v4;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to find resident for resident user: %@", (uint8_t *)&v14, 0x16u);
    }
  }
}

- (id)_residentDeviceForResidentUser:(id)a3
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 device];
  if (v5)
  {
    long long v6 = [HMDResidentDevice alloc];
    uint64_t v7 = [v4 uuid];
    id v8 = [(HMDResidentDevice *)v6 initWithDevice:v5 identifier:v7];

    if (-[HMDHome isResidentSupported](self, "isResidentSupported") || [v4 configurationState] != 2) {
      [(HMDResidentDevice *)v8 setEnabled:0];
    }
    BOOL v9 = [(HMDHome *)self homeManager];
    id v10 = [v9 messageDispatcher];
    id v11 = [v10 remoteAccessDeviceForHome:self];

    if (([v11 isEqual:v5] & 1) == 0) {
      [(HMDResidentDevice *)v8 setReachable:0];
    }
  }
  else
  {
    uint64_t v12 = (void *)MEMORY[0x1D9452090]();
    id v13 = self;
    int v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      id v15 = HMFGetLogIdentifier();
      int v17 = 138543618;
      uint64_t v18 = v15;
      __int16 v19 = 2112;
      id v20 = v4;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Unable to find matching device for resident user: %@", (uint8_t *)&v17, 0x16u);
    }
    id v8 = 0;
  }

  return v8;
}

- (id)_residentUserForResidentDevice:(id)a3
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHome *)self owner];
  long long v6 = [v5 pairingIdentity];

  if (v6)
  {
    uint64_t v7 = [v4 device];
    if (v7)
    {
      id v8 = objc_alloc(MEMORY[0x1E4F5BE00]);
      BOOL v9 = [v7 identifier];
      id v10 = [v9 UUIDString];
      id v11 = [v6 publicKey];
      uint64_t v12 = [v6 privateKey];
      id v13 = objc_msgSend(v8, "initWithIdentifier:publicKey:privateKey:permissions:", v10, v11, v12, objc_msgSend(v6, "permissions"));

      if ([v4 isEnabled]) {
        uint64_t v14 = 2;
      }
      else {
        uint64_t v14 = 3;
      }
      id v15 = [HMDResidentUser alloc];
      __int16 v16 = [v4 home];
      int v17 = [(HMDResidentUser *)v15 initWithDevice:v7 home:v16 pairingIdentity:v13 configurationState:v14];

      [(HMDUser *)v17 setHome:self];
      if ([(HMDResidentUser *)v17 isBlocked]) {
        [(HMDResidentUser *)v17 setConfigurationState:3];
      }
    }
    else
    {
      int v17 = 0;
    }
  }
  else
  {
    uint64_t v18 = (void *)MEMORY[0x1D9452090]();
    __int16 v19 = self;
    id v20 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = HMFGetLogIdentifier();
      int v23 = 138543618;
      long long v24 = v21;
      __int16 v25 = 2112;
      id v26 = v4;
      _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_DEFAULT, "%{public}@Unable to retrieve owner's pairing identity to create legacy resident user for device: %@", (uint8_t *)&v23, 0x16u);
    }
    int v17 = 0;
  }

  return v17;
}

- (id)userWithMergeID:(id)a3
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (v4)
  {
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id v5 = [(HMDHome *)self users];
    uint64_t v6 = [v5 countByEnumeratingWithState:&v24 objects:v34 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v25;
      while (2)
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v25 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = *(void **)(*((void *)&v24 + 1) + 8 * i);
          id v11 = [v10 account];
          uint64_t v12 = [v11 senderCorrelationIdentifier];
          int v13 = [v12 isEqualToString:v4];

          if (v13)
          {
            __int16 v19 = (void *)MEMORY[0x1D9452090]();
            id v20 = self;
            uint64_t v21 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v22 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543874;
              __int16 v29 = v22;
              __int16 v30 = 2112;
              id v31 = v4;
              __int16 v32 = 2112;
              id v33 = v10;
              _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_DEBUG, "%{public}@Found user with mergeID %@: %@", buf, 0x20u);
            }
            id v18 = v10;

            goto LABEL_17;
          }
        }
        uint64_t v7 = [v5 countByEnumeratingWithState:&v24 objects:v34 count:16];
        if (v7) {
          continue;
        }
        break;
      }
    }
  }
  uint64_t v14 = (void *)MEMORY[0x1D9452090]();
  id v15 = self;
  __int16 v16 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    int v17 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    __int16 v29 = v17;
    __int16 v30 = 2112;
    id v31 = v4;
    _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_DEBUG, "%{public}@No user found with mergeID %@", buf, 0x16u);
  }
  id v18 = 0;
LABEL_17:

  return v18;
}

- (id)userWithPairingIdentityIdentifier:(id)a3
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (v4)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v5 = [(HMDHome *)self users];
    id v6 = (id)[v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v12;
      while (2)
      {
        for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v12 != v7) {
            objc_enumerationMutation(v5);
          }
          BOOL v9 = *(void **)(*((void *)&v11 + 1) + 8 * i);
          if ([v9 matchingPairingIdentityIdentifier:v4])
          {
            id v6 = v9;
            goto LABEL_12;
          }
        }
        id v6 = (id)[v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

- (id)userWithPairingIdentity:(id)a3
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (v4)
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v5 = [(HMDHome *)self users];
    id v6 = (id)[v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v14;
      while (2)
      {
        for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v14 != v7) {
            objc_enumerationMutation(v5);
          }
          BOOL v9 = *(void **)(*((void *)&v13 + 1) + 8 * i);
          id v10 = [v9 pairingIdentity];
          char v11 = [v4 isEqual:v10];

          if (v11)
          {
            id v6 = v9;
            goto LABEL_12;
          }
        }
        id v6 = (id)[v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

- (void)_updateCurrentUserForSharedHome
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = [(HMDHome *)self currentUser];

  if (!v3)
  {
    id v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = self;
    id v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = HMFGetLogIdentifier();
      int v13 = 138543362;
      long long v14 = v7;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Did not find the current user so adding user for shared home", (uint8_t *)&v13, 0xCu);
    }
    uint64_t v8 = [(HMDHome *)v5 currentUserFactory];
    ((void (**)(void, void, HMDHome *))v8)[2](v8, 0, v5);
    BOOL v9 = (HMDUser *)objc_claimAutoreleasedReturnValue();

    currentUser = v5->_currentUser;
    v5->_currentUser = v9;
    char v11 = v9;

    long long v12 = [(HMDHome *)v5 presenceAuthStatus];
    [(HMDUser *)v5->_currentUser setPresenceAuthStatus:v12];

    [(HMDHome *)v5 addUser:v11];
    [(HMDUser *)v11 setHome:v5];
  }
}

- (BOOL)isSiriPhraseOptionsJustSiriEnabled
{
  os_unfair_recursive_lock_lock_with_options();
  unint64_t v3 = (self->_siriPhraseOptions >> 1) & 1;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (BOOL)isSiriPhraseOptionsHeySiriEnabled
{
  LODWORD(self) = self->_siriPhraseOptions & 1;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (BOOL)isSmokeAlarmEnabled
{
  LODWORD(self) = self->_audioAnalysisClassifierOptions & 1;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)setOwnerUser:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_ownerUser = a3;
  os_unfair_recursive_lock_unlock();
}

- (BOOL)isSharedAdmin
{
  BOOL v3 = [(HMDHome *)self isAdminUser];
  if (v3) {
    LOBYTE(v3) = ![(HMDHome *)self isOwnerUser];
  }
  return v3;
}

- (void)_removeUser:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    id v5 = v4;
    os_unfair_recursive_lock_lock_with_options();
    if ([(NSMutableArray *)self->_users containsObject:v5]) {
      [(NSMutableArray *)self->_users removeObject:v5];
    }
    os_unfair_recursive_lock_unlock();
    id v4 = v5;
  }
}

- (void)addUser:(id)a3
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHome *)self homeManager];
  if (v4)
  {
    os_unfair_recursive_lock_lock_with_options();
    if (([(NSMutableArray *)self->_users containsObject:v4] & 1) == 0)
    {
      id v6 = (void *)MEMORY[0x1D9452090]();
      uint64_t v7 = self;
      HMFGetOSLogHandle();
      uint64_t v8 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        BOOL v9 = HMFGetLogIdentifier();
        int v10 = 138543618;
        char v11 = v9;
        __int16 v12 = 2112;
        id v13 = v4;
        _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Adding a new user : %@", (uint8_t *)&v10, 0x16u);
      }
      [(NSMutableArray *)self->_users addObject:v4];
    }
    os_unfair_recursive_lock_unlock();
    if ([(HMDHome *)self isOwnerUser]) {
      [v5 updateCurrentUserEligibleForOwnerToAutoMigration];
    }
  }
}

- (NSArray)usersSupportingPresence
{
  id v2 = [(HMDHome *)self users];
  BOOL v3 = +[HMDHome filterUsersSupportingPresence:v2];

  return (NSArray *)v3;
}

- (id)sharedUsers
{
  id v2 = [(HMDHome *)self users];
  BOOL v3 = objc_msgSend(v2, "na_map:", &__block_literal_global_1340);

  return v3;
}

id __22__HMDHome_sharedUsers__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 privilege] == 3) {
    id v3 = 0;
  }
  else {
    id v3 = v2;
  }

  return v3;
}

- (void)_handleRemoveAppDataModel:(id)a3 message:(id)a4
{
  id v5 = a4;
  [(HMDHome *)self setAppData:0];
  id v6 = [v5 transactionResult];
  [v6 markChanged];
  [v5 respondWithPayload:0];
}

- (void)_handleUpdateAppDataModel:(id)a3 message:(id)a4
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [(HMDHome *)self appData];

  if (v8)
  {
    BOOL v9 = [(HMDHome *)self appData];
    [v9 updateWithModel:v6];
  }
  else
  {
    int v10 = [HMDApplicationData alloc];
    char v11 = [v6 appDataDictionary];
    __int16 v12 = [(HMDHome *)self uuid];
    id v13 = [(HMDApplicationData *)v10 initWithDictionary:v11 parentUUID:v12];
    [(HMDHome *)self setAppData:v13];

    uint64_t v14 = (void *)MEMORY[0x1D9452090]();
    uint64_t v15 = self;
    long long v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      int v17 = HMFGetLogIdentifier();
      uint64_t v18 = [v6 appDataDictionary];
      int v20 = 138543618;
      uint64_t v21 = v17;
      __int16 v22 = 2112;
      int v23 = v18;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_DEBUG, "%{public}@Updating the application data : %@", (uint8_t *)&v20, 0x16u);
    }
  }
  __int16 v19 = [v7 transactionResult];
  [v19 markChanged];
  [v7 respondWithPayload:0];
}

- (id)createModelForAppDataPayload:(id)a3 existingAppData:(id)a4 parentUUID:(id)a5
{
  id v7 = a3;
  id v8 = a5;
  BOOL v9 = (HMDApplicationData *)[a4 copy];
  int v10 = v9;
  if (v7)
  {
    if (!v9) {
      int v10 = [[HMDApplicationData alloc] initWithParentUUID:v8];
    }
    [(HMDApplicationData *)v10 setApplicationData:v7 forIdentifier:@"com.apple.homekit-entitledclient.identifer"];
    char v11 = [(HMDApplicationData *)v10 modelObjectWithChangeType:1];
    __int16 v12 = v11;
    if (!a4) {
      [v11 setObjectChangeType:1];
    }
  }
  else
  {
    [(HMDApplicationData *)v9 removeApplicationDataForIdentifier:@"com.apple.homekit-entitledclient.identifer"];
    if (v10)
    {
      __int16 v12 = [(HMDApplicationData *)v10 modelObjectWithChangeType:1];
    }
    else
    {
      __int16 v12 = 0;
    }
  }

  return v12;
}

- (void)_handleSetAppData:(id)a3
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 dictionaryForKey:@"kAppDataInformationKey"];
  id v6 = (void *)MEMORY[0x1E4F1CA60];
  id v7 = [v4 messagePayload];
  id v8 = objc_msgSend(v6, "dictionaryWithCapacity:", objc_msgSend(v7, "count"));

  id v30 = 0;
  BOOL v9 = [(HMDHome *)self _getContainerForAppData:v4 keyName:&v30];
  id v10 = v30;
  char v11 = v10;
  if (v9)
  {
    if (v10)
    {
      __int16 v12 = [v9 uuid];
      id v13 = [v12 UUIDString];
      [v8 setObject:v13 forKey:v11];
    }
    uint64_t v14 = (void *)MEMORY[0x1D9452090]();
    uint64_t v15 = self;
    long long v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      int v17 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      __int16 v32 = v17;
      __int16 v33 = 2112;
      id v34 = v9;
      __int16 v35 = 2112;
      uint64_t v36 = v5;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, "%{public}@Going to update appData for %@ to: %@", buf, 0x20u);
    }
    uint64_t v18 = [v9 appData];
    __int16 v19 = [v9 uuid];
    int v20 = [(HMDHome *)v15 createModelForAppDataPayload:v5 existingAppData:v18 parentUUID:v19];
    if (v5) {
      [v8 setObject:v5 forKey:@"kAppDataInformationKey"];
    }
    if (v20)
    {
      uint64_t v21 = [(HMDHome *)v15 backingStore];
      __int16 v22 = [v4 name];
      +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      id v29 = v4;
      int v23 = v9;
      uint64_t v24 = v5;
      v26 = long long v25 = v8;
      [v21 transaction:v22 options:v26];
      long long v27 = v28 = v11;

      id v8 = v25;
      id v5 = v24;
      BOOL v9 = v23;
      id v4 = v29;

      [v27 add:v20 withMessage:v29];
      [v27 run];

      char v11 = v28;
    }
    else
    {
      [v4 respondWithPayload:0];
    }
  }
  else
  {
    uint64_t v18 = [v4 responseHandler];
    __int16 v19 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    ((void (**)(void, void *, void))v18)[2](v18, v19, 0);
  }
}

- (id)_getContainerForAppData:(id)a3 keyName:(id *)a4
{
  id v6 = a3;
  id v7 = [v6 uuidForKey:@"kRoomUUID"];
  if (v7)
  {
    if (a4)
    {
      id v8 = @"kRoomUUID";
      *a4 = @"kRoomUUID";
    }
    BOOL v9 = [(HMDHome *)self roomWithUUID:v7];
  }
  else
  {
    id v10 = (void *)*MEMORY[0x1E4F2EE28];
    char v11 = [v6 uuidForKey:*MEMORY[0x1E4F2EE28]];
    if (v11)
    {
      if (a4) {
        *a4 = v10;
      }
      BOOL v9 = [(HMDHome *)self serviceGroupWithUUID:v11];
    }
    else
    {
      __int16 v12 = [v6 uuidForKey:@"kActionSetUUID"];
      if (v12)
      {
        if (a4)
        {
          id v13 = @"kActionSetUUID";
          *a4 = @"kActionSetUUID";
        }
        uint64_t v14 = [(HMDHome *)self actionSetWithUUID:v12];
      }
      else
      {
        uint64_t v14 = self;
      }
      BOOL v9 = v14;
    }
  }

  return v9;
}

- (void)_handleAllowUserManagementMessage:(id)a3
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([(HMDHome *)self isAdminUser])
  {
    id v5 = [v4 responseHandler];
    v5[2](v5, 0, MEMORY[0x1E4F1CC08]);
  }
  else
  {
    id v6 = (void *)MEMORY[0x1D9452090]();
    id v7 = self;
    id v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      BOOL v9 = HMFGetLogIdentifier();
      int v11 = 138543362;
      __int16 v12 = v9;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_ERROR, "%{public}@Unable to allow user management, insufficient privileges", (uint8_t *)&v11, 0xCu);
    }
    id v5 = [MEMORY[0x1E4F28C58] hmErrorWithCode:17];
    id v10 = [v4 responseHandler];
    v10[2](v10, v5, MEMORY[0x1E4F1CC08]);
  }
}

- (void)_handleExecuteConfirmationOfTrigger:(id)a3
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  id v4 = (__CFString *)a3;
  if (([(__CFString *)v4 isEntitledForSPIAccess] & 1) != 0
    || ([(__CFString *)v4 isRemote] & 1) != 0)
  {
    id v5 = [(__CFString *)v4 uuidForKey:@"kTriggerUUID"];
    id v6 = [(HMDHome *)self triggers];
    id v7 = objc_msgSend(v6, "hmf_firstObjectWithSPIUniqueIdentifier:", v5);

    id v8 = v7;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      BOOL v9 = v8;
    }
    else {
      BOOL v9 = 0;
    }
    id v10 = v9;

    if (isWatch() || isWatch() && ([v10 hasUserConfirmationSession] & 1) == 0)
    {
      int v20 = (void *)MEMORY[0x1D9452090]();
      uint64_t v21 = self;
      __int16 v22 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        int v23 = HMFGetLogIdentifier();
        BOOL v24 = isWatch();
        long long v25 = @"non-Tinker HH2";
        *(_DWORD *)buf = 138543874;
        uint64_t v55 = v23;
        __int16 v56 = 2112;
        if (v24) {
          long long v25 = @"Legacy";
        }
        BOOL v57 = v25;
        __int16 v58 = 2112;
        id v59 = v4;
        _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_INFO, "%{public}@Received trigger execution confirmation for relay in %@ Watch, %@", buf, 0x20u);
      }
      id v19 = [(HMDHome *)v21 homeManager];
      long long v26 = [v19 companionDevice];
      if (v26 && [v19 companionReachable])
      {
        id v47 = v10;
        __int16 v48 = v5;
        long long v27 = [HMDRemoteDeviceMessageDestination alloc];
        __int16 v28 = [(HMDHome *)v21 uuid];
        id v29 = [(HMDRemoteDeviceMessageDestination *)v27 initWithTarget:v28 device:v26];

        id v30 = (void *)MEMORY[0x1E4F65480];
        id v31 = [(__CFString *)v4 messagePayload];
        __int16 v32 = (void *)[v31 copy];
        __int16 v33 = [v30 messageWithName:@"kConfirmExecuteTriggerRequestKey" qualityOfService:25 destination:v29 payload:v32];

        v52[0] = MEMORY[0x1E4F143A8];
        v52[1] = 3221225472;
        v52[2] = __47__HMDHome__handleExecuteConfirmationOfTrigger___block_invoke;
        v52[3] = &unk_1E6A18C18;
        int v53 = v4;
        id v34 = (void *)MEMORY[0x1D9452090]([v33 setResponseHandler:v52]);
        __int16 v35 = v21;
        uint64_t v36 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
        {
          uint64_t v37 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          uint64_t v55 = v37;
          _os_log_impl(&dword_1D49D5000, v36, OS_LOG_TYPE_INFO, "%{public}@Sending confirmation to companion", buf, 0xCu);
        }
        id v38 = [v19 messageDispatcher];
        [v38 sendMessage:v33 completionHandler:0];

        id v10 = v47;
        id v5 = v48;
      }
      else
      {
        id v29 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:63 userInfo:0];
        uint64_t v39 = [(__CFString *)v4 responseHandler];
        __int16 v33 = (void *)v39;
        if (v39) {
          (*(void (**)(uint64_t, HMDRemoteDeviceMessageDestination *, void))(v39 + 16))(v39, v29, 0);
        }
      }
    }
    else
    {
      int v11 = (void *)MEMORY[0x1D9452090]();
      __int16 v12 = self;
      uint64_t v13 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v15 = id v14 = v10;
        *(_DWORD *)buf = 138543618;
        uint64_t v55 = v15;
        __int16 v56 = 2112;
        BOOL v57 = v4;
        _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Received trigger execution confirmation on iOS or HH2 Watch: %@", buf, 0x16u);

        id v10 = v14;
      }

      if (v8)
      {
        id v16 = v10;
        uint64_t v17 = [(__CFString *)v4 BOOLForKey:@"kTriggerExecuteConfirmationKey"];
        v49[0] = MEMORY[0x1E4F143A8];
        v49[1] = 3221225472;
        void v49[2] = __47__HMDHome__handleExecuteConfirmationOfTrigger___block_invoke_1336;
        v49[3] = &unk_1E6A196E0;
        id v50 = v8;
        long long v51 = v4;
        uint64_t v18 = v17;
        id v10 = v16;
        [v50 userDidConfirmExecute:v18 completionHandler:v49];

        id v19 = v50;
      }
      else
      {
        id v19 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:2 userInfo:0];
        uint64_t v45 = [(__CFString *)v4 responseHandler];
        __int16 v46 = (void *)v45;
        if (v45) {
          (*(void (**)(uint64_t, id, void))(v45 + 16))(v45, v19, 0);
        }
      }
    }

    goto LABEL_26;
  }
  long long v40 = (void *)MEMORY[0x1D9452090]();
  long long v41 = self;
  long long v42 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
  {
    id v43 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    uint64_t v55 = v43;
    _os_log_impl(&dword_1D49D5000, v42, OS_LOG_TYPE_ERROR, "%{public}@Client does not have entitlement to use SPI and it's not relayed from watch.", buf, 0xCu);
  }
  uint64_t v44 = [(__CFString *)v4 responseHandler];

  if (v44)
  {
    id v5 = [(__CFString *)v4 responseHandler];
    id v8 = [MEMORY[0x1E4F28C58] hmErrorWithCode:17];
    ((void (**)(void, id, void))v5)[2](v5, v8, 0);
LABEL_26:
  }
}

void __47__HMDHome__handleExecuteConfirmationOfTrigger___block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [*(id *)(a1 + 32) responseHandler];
  id v4 = (void *)v3;
  if (v3) {
    (*(void (**)(uint64_t, id, void))(v3 + 16))(v3, v5, 0);
  }
}

void __47__HMDHome__handleExecuteConfirmationOfTrigger___block_invoke_1336(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (v5 && isiOSDevice()) {
    +[HMDBulletinUIManager presentExecutionErrorDialogForTrigger:partialSuccess:](HMDBulletinUIManager, "presentExecutionErrorDialogForTrigger:partialSuccess:", *(void *)(a1 + 32), [v5 code] == 64);
  }
  uint64_t v3 = [*(id *)(a1 + 40) responseHandler];
  id v4 = (void *)v3;
  if (v3) {
    (*(void (**)(uint64_t, id, void))(v3 + 16))(v3, v5, 0);
  }
}

- (void)_removeTrigger:(id)a3 message:(id)a4
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  if (v6)
  {
    [(HMDHome *)self removeTriggerNoNotification:v6];
    id v8 = [v7 transactionResult];
    BOOL v9 = (void *)MEMORY[0x1D9452090]([v8 markChanged]);
    id v10 = self;
    int v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      __int16 v12 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v30 = v12;
      __int16 v31 = 2112;
      id v32 = v6;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Remove trigger: %@", buf, 0x16u);
    }
    uint64_t v13 = [(HMDHome *)v10 uuid];
    id v14 = [v13 UUIDString];
    v28[0] = v14;
    v27[1] = @"kTriggerName";
    uint64_t v15 = [v6 name];
    v28[1] = v15;
    void v27[2] = @"kTriggerUUID";
    id v16 = [v6 uuid];
    uint64_t v17 = [v16 UUIDString];
    void v28[2] = v17;
    uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v28 forKeys:v27 count:3];

    id v19 = (void *)MEMORY[0x1D9452090]();
    int v20 = v10;
    uint64_t v21 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      __int16 v22 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v30 = v22;
      __int16 v31 = 2112;
      id v32 = v18;
      _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@Successfully Removed trigger : sending back the result: %@", buf, 0x16u);
    }
    [v7 respondWithPayload:v18];
  }
  else
  {
    int v23 = (void *)MEMORY[0x1D9452090]();
    BOOL v24 = self;
    long long v25 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      long long v26 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v30 = v26;
      __int16 v31 = 2112;
      id v32 = 0;
      _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_ERROR, "%{public}@Could not find the Trigger : %@", buf, 0x16u);
    }
    id v8 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:2 userInfo:0];
    [v7 respondWithError:v8];
  }
}

- (void)removeTriggerNoNotification:(id)a3
{
  if (a3)
  {
    id v4 = a3;
    [v4 invalidate];
    id v5 = [v4 name];
    id v6 = [(HMDHome *)self removeName:v5];

    [(HMDHome *)self removeFromCurrentTriggers:v4];
    id v8 = [(HMDHome *)self ownedTriggers];
    id v7 = [v4 uuid];

    [v8 removeObject:v7];
  }
}

- (void)removeTrigger:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __25__HMDHome_removeTrigger___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __25__HMDHome_removeTrigger___block_invoke(uint64_t a1)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1E4F65480];
  id v3 = objc_alloc(MEMORY[0x1E4F65488]);
  id v4 = [*(id *)(a1 + 32) uuid];
  id v5 = (void *)[v3 initWithTarget:v4];
  id v10 = @"kTriggerUUID";
  id v6 = [*(id *)(a1 + 40) uuid];
  id v7 = [v6 UUIDString];
  v11[0] = v7;
  id v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:&v10 count:1];
  BOOL v9 = [v2 messageWithName:@"kRemoveTriggerRequestKey" destination:v5 payload:v8];

  [*(id *)(a1 + 32) _handleRemoveTrigger:v9];
}

- (void)_handleRemoveTriggerModel:(id)a3 message:(id)a4
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = [v6 uuid];
  BOOL v9 = [(HMDHome *)self triggerWithUUID:v8];

  if (v9)
  {
    [(HMDHome *)self _removeTrigger:v9 message:v7];
    id v10 = [v7 transactionResult];
    [v10 markChanged];
  }
  else
  {
    int v11 = (void *)MEMORY[0x1D9452090]();
    __int16 v12 = self;
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      id v14 = HMFGetLogIdentifier();
      uint64_t v15 = [v6 uuid];
      int v16 = 138543618;
      uint64_t v17 = v14;
      __int16 v18 = 2112;
      id v19 = v15;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_ERROR, "%{public}@Couldn't find trigger with UUID %@ to remove.", (uint8_t *)&v16, 0x16u);
    }
    id v10 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    [v7 respondWithError:v10];
  }
}

- (void)_handleRemoveTrigger:(id)a3
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 uuidForKey:@"kTriggerUUID"];
  id v6 = [(HMDHome *)self triggerWithUUID:v5];
  if (v6)
  {
    id v7 = [HMDTriggerModel alloc];
    id v8 = [v6 uuid];
    BOOL v9 = [(HMDHome *)self uuid];
    id v10 = [(HMDBackingStoreModelObject *)v7 initWithObjectChangeType:3 uuid:v8 parentUUID:v9];

    int v11 = [(HMDHome *)self backingStore];
    __int16 v12 = [v4 name];
    uint64_t v13 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    id v14 = [v11 transaction:v12 options:v13];

    [v14 add:v10 withMessage:v4];
    [v14 run];
  }
  else
  {
    uint64_t v15 = (void *)MEMORY[0x1D9452090]();
    int v16 = self;
    uint64_t v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      __int16 v18 = HMFGetLogIdentifier();
      int v20 = 138543618;
      uint64_t v21 = v18;
      __int16 v22 = 2112;
      int v23 = v5;
      _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_ERROR, "%{public}@Cannot find the trigger with UUID %@", (uint8_t *)&v20, 0x16u);
    }
    id v19 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    [v4 respondWithError:v19];
  }
}

- (void)_addNewTrigger:(id)a3 message:(id)a4 payloadAnnex:(id)a5 triggerModel:(id)a6
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  [(HMDHome *)self addToCurrentTriggers:v10];
  id v14 = [(HMDHome *)self ownedTriggers];
  uint64_t v15 = [v10 uuid];
  if (([v14 containsObject:v15] & 1) == 0)
  {
    int v16 = [v10 owner];
    int v17 = [v16 isOwner];

    if (!v17) {
      goto LABEL_5;
    }
    id v14 = [(HMDHome *)self ownedTriggers];
    uint64_t v15 = [v10 uuid];
    [v14 addObject:v15];
  }

LABEL_5:
  __int16 v18 = [(HMDHome *)self msgDispatcher];
  id v19 = [(HMDHome *)self workQueue];
  [v10 configure:self messageDispatcher:v18 queue:v19];

  int v20 = [v11 transactionResult];
  [v20 markChanged];
  uint64_t v21 = [v11 name];
  if ([v21 isEqualToString:@"kAddEventTriggerRequestKey"])
  {
  }
  else
  {
    __int16 v22 = [v11 name];
    char v23 = [v22 isEqualToString:@"kAddTimerTriggerRequestKey"];

    if ((v23 & 1) == 0)
    {
      [v11 respondWithSuccess];
      goto LABEL_14;
    }
  }
  uint64_t v24 = (void *)MEMORY[0x1D9452090]();
  long long v25 = self;
  long long v26 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
  {
    long long v27 = HMFGetLogIdentifier();
    __int16 v28 = [v10 name];
    int v35 = 138543874;
    uint64_t v36 = v27;
    __int16 v37 = 2112;
    id v38 = v28;
    __int16 v39 = 2112;
    id v40 = v11;
    _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_INFO, "%{public}@Add trigger Transaction marked for change. The client will be updated next: %@, %@", (uint8_t *)&v35, 0x20u);
  }
  id v29 = (void *)MEMORY[0x1E4F1CA60];
  id v30 = [v11 messagePayload];
  __int16 v31 = [v29 dictionaryWithDictionary:v30];

  id v32 = HMDRemoteMessagePayloadKeysForTransportMetadata();
  [v31 removeObjectsForKeys:v32];

  uint64_t v33 = [v10 uuid];
  id v34 = [v33 UUIDString];
  [v31 setObject:v34 forKey:@"kTriggerUUID"];

  if (v12) {
    [v31 addEntriesFromDictionary:v12];
  }
  [v11 respondWithPayload:v31];

LABEL_14:
}

- (void)_handleAddTriggers:(id)a3
{
  v105[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 dataForKey:@"HM.triggers"];
  long long v71 = v4;
  if (v5)
  {
    id v6 = (void *)MEMORY[0x1E4F28DC0];
    id v7 = (void *)MEMORY[0x1E4F1CAD0];
    v105[0] = objc_opt_class();
    v105[1] = objc_opt_class();
    id v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v105 count:2];
    BOOL v9 = [v7 setWithArray:v8];
    id v95 = 0;
    long long v69 = v5;
    id v10 = [v6 unarchivedObjectOfClasses:v9 fromData:v5 error:&v95];
    id v70 = v95;

    id v11 = v10;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v12 = v11;
    }
    else {
      id v12 = 0;
    }
    id v13 = v12;

    id v14 = (void *)MEMORY[0x1D9452090]();
    id v80 = self;
    uint64_t v15 = HMFGetOSLogHandle();
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_INFO);
    long long v68 = (void (**)(void, void, void))v13;
    if (v13)
    {
      id v67 = v11;
      if (v16)
      {
        int v17 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v100 = v17;
        __int16 v101 = 2112;
        id v102 = v13;
        _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@Received triggers %@ from shared admin to add", buf, 0x16u);
      }
      __int16 v18 = [(HMDHome *)v80 backingStore];
      id v19 = [v71 name];
      int v20 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      uint64_t v21 = [v18 transaction:v19 options:v20];

      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      id obj = v13;
      uint64_t v74 = [obj countByEnumeratingWithState:&v91 objects:v98 count:16];
      if (v74)
      {
        uint64_t v73 = *(void *)v92;
        __int16 v79 = v21;
        do
        {
          uint64_t v22 = 0;
          do
          {
            if (*(void *)v92 != v73) {
              objc_enumerationMutation(obj);
            }
            uint64_t v76 = v22;
            char v23 = *(void **)(*((void *)&v91 + 1) + 8 * v22);
            objc_msgSend(v23, "setHome:", v80, v67);
            long long v89 = 0u;
            long long v90 = 0u;
            long long v87 = 0u;
            long long v88 = 0u;
            uint64_t v24 = [(HMDHome *)v80 accessories];
            uint64_t v25 = [v24 countByEnumeratingWithState:&v87 objects:v97 count:16];
            if (v25)
            {
              uint64_t v26 = v25;
              uint64_t v27 = *(void *)v88;
              do
              {
                for (uint64_t i = 0; i != v26; ++i)
                {
                  if (*(void *)v88 != v27) {
                    objc_enumerationMutation(v24);
                  }
                  [v23 fixupForReplacementAccessory:*(void *)(*((void *)&v87 + 1) + 8 * i) transaction:v21];
                }
                uint64_t v26 = [v24 countByEnumeratingWithState:&v87 objects:v97 count:16];
              }
              while (v26);
            }

            id v29 = [v23 modelObjectWithChangeType:1];
            [v21 add:v29 withMessage:0];
            id v30 = v23;
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              __int16 v31 = v30;
            }
            else {
              __int16 v31 = 0;
            }
            id v32 = v31;
            id v77 = v30;

            long long v85 = 0u;
            long long v86 = 0u;
            long long v83 = 0u;
            long long v84 = 0u;
            id v78 = [v32 events];
            uint64_t v33 = [v78 countByEnumeratingWithState:&v83 objects:v96 count:16];
            uint64_t v75 = v32;
            if (v33)
            {
              uint64_t v34 = v33;
              uint64_t v35 = *(void *)v84;
              do
              {
                uint64_t v36 = 0;
                __int16 v37 = v29;
                do
                {
                  if (*(void *)v84 != v35) {
                    objc_enumerationMutation(v78);
                  }
                  id v38 = *(void **)(*((void *)&v83 + 1) + 8 * v36);
                  __int16 v39 = (void *)MEMORY[0x1D9452090]();
                  id v40 = v80;
                  uint64_t v41 = HMFGetOSLogHandle();
                  if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
                  {
                    HMFGetLogIdentifier();
                    uint64_t v42 = v34;
                    v44 = uint64_t v43 = v35;
                    uint64_t v45 = [v77 name];
                    *(_DWORD *)buf = 138543874;
                    id v100 = v44;
                    __int16 v101 = 2112;
                    id v102 = v38;
                    __int16 v103 = 2112;
                    id v104 = v45;
                    _os_log_impl(&dword_1D49D5000, v41, OS_LOG_TYPE_INFO, "%{public}@Adding %@ to trigger %@", buf, 0x20u);

                    uint64_t v35 = v43;
                    uint64_t v34 = v42;
                  }

                  id v29 = [v38 modelObjectWithChangeType:1];

                  uint64_t v21 = v79;
                  [v79 add:v29 withMessage:0];
                  ++v36;
                  __int16 v37 = v29;
                }
                while (v34 != v36);
                uint64_t v34 = [v78 countByEnumeratingWithState:&v83 objects:v96 count:16];
              }
              while (v34);
            }

            __int16 v46 = [HomeKitEventTriggerAddLogEvent alloc];
            id v47 = [(HMDHome *)v80 uuid];
            __int16 v48 = [(HomeKitEventTriggerAddLogEvent *)v46 initWithHomeUUID:v47];

            id v49 = [[HMDAnalyticsEventTriggerData alloc] initWithEventTrigger:v75 isAdding:1];
            id v50 = [(HomeKitEventTriggerAddLogEvent *)v48 analyticsData];
            [v50 setEventTrigger:v49];

            long long v51 = [(HomeKitEventTriggerAddLogEvent *)v48 analyticsData];
            [v51 setResultErrorCode:0];

            long long v52 = [(HomeKitEventTriggerAddLogEvent *)v48 analyticsData];
            [v52 setRequestOrigin:3];

            int v53 = [(HMDHome *)v80 logEventSubmitter];
            [v53 submitLogEvent:v48];

            uint64_t v22 = v76 + 1;
          }
          while (v76 + 1 != v74);
          uint64_t v74 = [obj countByEnumeratingWithState:&v91 objects:v98 count:16];
        }
        while (v74);
      }

      v81[0] = MEMORY[0x1E4F143A8];
      v81[1] = 3221225472;
      v81[2] = __30__HMDHome__handleAddTriggers___block_invoke;
      v81[3] = &unk_1E6A197F0;
      id v4 = v71;
      id v82 = v71;
      [v21 run:v81];
      id v54 = v82;
      id v11 = v67;
    }
    else
    {
      id v4 = v71;
      if (v16)
      {
        uint64_t v63 = HMFGetLogIdentifier();
        [v71 identifier];
        v65 = id v64 = v11;
        long long v66 = [v65 UUIDString];
        *(_DWORD *)buf = 138543874;
        id v100 = v63;
        __int16 v101 = 2112;
        id v102 = v66;
        __int16 v103 = 2112;
        id v104 = v70;
        _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@Failed to unarchive triggers from encoded triggers data: %@: %@", buf, 0x20u);

        id v11 = v64;
        id v4 = v71;
      }
      uint64_t v21 = [v4 responseHandler];
      id v54 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
      ((void (**)(void, void *, void))v21)[2](v21, v54, 0);
    }

    id v5 = v69;
    id v62 = v70;
    uint64_t v61 = v68;
  }
  else
  {
    uint64_t v55 = (void *)MEMORY[0x1D9452090]();
    __int16 v56 = self;
    BOOL v57 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
    {
      __int16 v58 = HMFGetLogIdentifier();
      id v59 = [v4 identifier];
      uint64_t v60 = [v59 UUIDString];
      *(_DWORD *)buf = 138543618;
      id v100 = v58;
      __int16 v101 = 2112;
      id v102 = v60;
      _os_log_impl(&dword_1D49D5000, v57, OS_LOG_TYPE_INFO, "%{public}@Unable to find triggers to add for message: %@", buf, 0x16u);

      id v4 = v71;
      id v5 = 0;
    }

    uint64_t v61 = [v4 responseHandler];
    id v62 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    ((void (**)(void, void *, void))v61)[2](v61, v62, 0);
  }
}

uint64_t __30__HMDHome__handleAddTriggers___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) respondWithPayload:0];
}

- (void)_handleAddTimerTriggerModel:(id)a3 message:(id)a4
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = [[HMDTimerTrigger alloc] initWithModel:v6 home:self];
  if (v8)
  {
    BOOL v9 = [v6 createPayload];
    [(HMDHome *)self _addNewTrigger:v8 message:v7 payloadAnnex:v9 triggerModel:v6];
LABEL_7:

    goto LABEL_8;
  }
  id v10 = (void *)MEMORY[0x1D9452090]();
  id v11 = self;
  id v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v13 = HMFGetLogIdentifier();
    int v16 = 138543362;
    int v17 = v13;
    _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Could not create timer trigger object from model", (uint8_t *)&v16, 0xCu);
  }
  id v14 = [v7 responseHandler];

  if (v14)
  {
    BOOL v9 = [v7 responseHandler];
    uint64_t v15 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    ((void (**)(void, void *, void))v9)[2](v9, v15, 0);

    goto LABEL_7;
  }
LABEL_8:
}

- (void)_handleAddTimerTrigger:(id)a3
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 name];
  int v6 = [v5 isEqualToString:*MEMORY[0x1E4F2C998]];

  id v7 = [v4 stringForKey:@"kTriggerName"];
  if ([(HMDHome *)self _validateAddingNewTriggerWithName:v7 message:v4])
  {
    id v8 = [v4 stringForKey:*MEMORY[0x1E4F2E1E0]];
    BOOL v9 = [MEMORY[0x1E4F29128] UUID];
    id v10 = [HMDTimerTriggerModel alloc];
    id v11 = [(HMDHome *)self uuid];
    id v12 = [(HMDBackingStoreModelObject *)v10 initWithObjectChangeType:1 uuid:v9 parentUUID:v11];

    [(HMDTimerTriggerModel *)v12 setName:v7];
    [(HMDTimerTriggerModel *)v12 setConfiguredName:v8];
    [(HMDTimerTriggerModel *)v12 setActive:MEMORY[0x1E4F1CC28]];
    id v13 = +[HMDTimerTrigger validateTriggerModel:v12 message:v4 currentFireDate:0];

    if (!v13)
    {
LABEL_21:

      goto LABEL_22;
    }
    uint64_t v34 = v9;
    id v14 = v8;
    uint64_t v15 = [(HMDHome *)self backingStore];
    int v16 = [v4 name];
    int v17 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    uint64_t v18 = [v15 transaction:v16 options:v17];

    int v19 = v6;
    if (v6)
    {
      id v20 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      BOOL v21 = [(HMDHome *)self _populateTriggerModel:v13 fromBuilderMessage:v4 transaction:v18 responsePayload:v20];
      uint64_t v22 = (void *)v18;
      id v8 = v14;
      BOOL v9 = v34;
      if (!v21)
      {
LABEL_20:

        goto LABEL_21;
      }
    }
    else
    {
      id v20 = 0;
      uint64_t v22 = (void *)v18;
      id v8 = v14;
      BOOL v9 = v34;
    }
    uint64_t v27 = [(HMDHome *)self currentUser];
    [v13 setOwner:v27];

    __int16 v28 = [(HMDHome *)self currentDevice];
    [v13 setOwningDevice:v28];

    if ([(HMDHome *)self isOwnerUser])
    {
      if (v19)
      {
        [v22 add:v13];
        v35[0] = MEMORY[0x1E4F143A8];
        v35[1] = 3221225472;
        v35[2] = __34__HMDHome__handleAddTimerTrigger___block_invoke;
        v35[3] = &unk_1E6A18BA0;
        id v36 = v4;
        id v20 = v20;
        id v37 = v20;
        id v38 = v13;
        [v22 run:v35];
      }
      else
      {
        [v22 add:v13 withMessage:v4];
        [v22 run];
      }
    }
    else if ([(HMDHome *)self isAdminUser])
    {
      id v29 = v22;
      [(HMDHome *)self transactionObjectUpdated:0 newValues:v13 message:v4];
      id v30 = [v13 uuid];
      __int16 v31 = [(HMDHome *)self triggerWithUUID:v30];

      if (v31) {
        [(HMDHome *)self _relayAddTriggerToResident:v31];
      }

      uint64_t v22 = v29;
    }
    else
    {
      id v32 = [v4 responseHandler];

      if (v32)
      {
        uint64_t v33 = [MEMORY[0x1E4F28C58] hmErrorWithCode:17];
        [v4 respondWithError:v33];
      }
    }
    goto LABEL_20;
  }
  char v23 = (void *)MEMORY[0x1D9452090]();
  uint64_t v24 = self;
  uint64_t v25 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    uint64_t v26 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v40 = v26;
    _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_ERROR, "%{public}@Trigger name is not valid", buf, 0xCu);
  }
LABEL_22:
}

void __34__HMDHome__handleAddTimerTrigger___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    [v3 respondWithError:a2];
  }
  else
  {
    id v4 = *(void **)(a1 + 40);
    id v5 = [*(id *)(a1 + 48) createPayload];
    [v4 addEntriesFromDictionary:v5];

    int v6 = *(void **)(a1 + 32);
    id v7 = (id)[*(id *)(a1 + 40) copy];
    [v6 respondWithPayload:v7];
  }
}

- (void)_relayAddTriggerToResident:(id)a3
{
  v23[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  v23[0] = v4;
  id v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v23 count:1];
  int v6 = encodeRootObject();

  BOOL v21 = @"HM.triggers";
  uint64_t v22 = v6;
  id v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v22 forKeys:&v21 count:1];
  objc_initWeak(&location, self);
  id v8 = (void *)MEMORY[0x1E4F654B0];
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  void v17[2] = __38__HMDHome__relayAddTriggerToResident___block_invoke;
  v17[3] = &unk_1E6A17958;
  objc_copyWeak(&v19, &location);
  id v9 = v4;
  id v18 = v9;
  id v10 = [v8 messageWithName:@"kAddTriggersInternalRequestKey" messagePayload:v7 responseHandler:v17];
  id v11 = objc_alloc(MEMORY[0x1E4F65488]);
  id v12 = [(HMDHome *)self uuid];
  id v13 = (void *)[v11 initWithTarget:v12];

  [v10 setDestination:v13];
  [v10 setQualityOfService:33];
  id v14 = [(HMDHome *)self administratorHandler];
  uint64_t v15 = (void *)[v10 copy];
  int v16 = [v14 operationForMessage:v15 error:0];

  if (v16) {
    [v14 addOperation:v16];
  }

  objc_destroyWeak(&v19);
  objc_destroyWeak(&location);
}

void __38__HMDHome__relayAddTriggerToResident___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = WeakRetained;
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      int v16 = v11;
      __int16 v17 = 2112;
      id v18 = @"kAddTriggersInternalRequestKey";
      __int16 v19 = 2112;
      id v20 = v5;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Relayed message %@ with error %@", buf, 0x20u);
    }
    if (v5)
    {
      id v12 = [v9 workQueue];
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      void v13[2] = __38__HMDHome__relayAddTriggerToResident___block_invoke_1324;
      v13[3] = &unk_1E6A197C8;
      void v13[4] = v9;
      id v14 = *(id *)(a1 + 32);
      dispatch_async(v12, v13);
    }
  }
}

void __38__HMDHome__relayAddTriggerToResident___block_invoke_1324(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    uint64_t v6 = *(void *)(a1 + 40);
    int v14 = 138543618;
    uint64_t v15 = v5;
    __int16 v16 = 2112;
    uint64_t v17 = v6;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@Removing trigger that was not added to resident: %@", (uint8_t *)&v14, 0x16u);
  }
  id v7 = [HMDTriggerModel alloc];
  id v8 = [*(id *)(a1 + 40) uuid];
  id v9 = [*(id *)(a1 + 32) uuid];
  id v10 = [(HMDBackingStoreModelObject *)v7 initWithObjectChangeType:3 uuid:v8 parentUUID:v9];

  id v11 = [*(id *)(a1 + 32) backingStore];
  id v12 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  id v13 = [v11 transaction:@"relayAddTrigger" options:v12];

  [v13 add:v10 withMessage:0];
  [v13 run];
}

- (BOOL)_validateAddingNewTriggerWithName:(id)a3 message:(id)a4
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  if (v6)
  {
    if ([v6 length])
    {
      unint64_t v8 = HMMaxLengthForNaming();
      if ([v6 length] > v8)
      {
        id v9 = (void *)MEMORY[0x1D9452090]();
        id v10 = self;
        id v11 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          id v12 = HMFGetLogIdentifier();
          int v29 = 138543362;
          id v30 = v12;
          _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", (uint8_t *)&v29, 0xCu);
        }
        id v13 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v14 = 46;
        goto LABEL_9;
      }
      uint64_t v18 = [(HMDHome *)self triggerWithName:v6];
      if (v18)
      {
        __int16 v19 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v20 = 1;
      }
      else
      {
        uint64_t v21 = [(HMDHome *)self triggers];
        unint64_t v22 = [v21 count];
        unint64_t v23 = maximumTriggersPerHome;

        if (v22 < v23)
        {
          BOOL v16 = 1;
LABEL_19:

          goto LABEL_10;
        }
        uint64_t v24 = (void *)MEMORY[0x1D9452090]();
        uint64_t v25 = self;
        uint64_t v26 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          uint64_t v27 = HMFGetLogIdentifier();
          int v29 = 138543618;
          id v30 = v27;
          __int16 v31 = 2112;
          id v32 = v6;
          _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_INFO, "%{public}@Can't add trigger %@; already at maximum triggers for home",
            (uint8_t *)&v29,
            0x16u);
        }
        __int16 v19 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v20 = 49;
      }
      __int16 v28 = [v19 hmErrorWithCode:v20];
      [v7 respondWithError:v28];

      BOOL v16 = 0;
      goto LABEL_19;
    }
    id v13 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v14 = 3;
  }
  else
  {
    id v13 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v14 = 20;
  }
LABEL_9:
  uint64_t v15 = [v13 hmErrorWithCode:v14];
  [v7 respondWithError:v15];

  BOOL v16 = 0;
LABEL_10:

  return v16;
}

- (void)_handleAddEventTriggerModel:(id)a3 message:(id)a4
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  unint64_t v8 = [[HMDEventTrigger alloc] initWithModel:v6 home:self message:v7];
  if (v8)
  {
    id v9 = [v6 createPayload];
    [(HMDHome *)self _addNewTrigger:v8 message:v7 payloadAnnex:v9 triggerModel:v6];
LABEL_7:

    goto LABEL_8;
  }
  id v10 = (void *)MEMORY[0x1D9452090]();
  id v11 = self;
  id v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v13 = HMFGetLogIdentifier();
    int v16 = 138543362;
    uint64_t v17 = v13;
    _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Could not create event trigger object from model", (uint8_t *)&v16, 0xCu);
  }
  uint64_t v14 = [v7 responseHandler];

  if (v14)
  {
    id v9 = [v7 responseHandler];
    uint64_t v15 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    ((void (**)(void, void *, void))v9)[2](v9, v15, 0);

    goto LABEL_7;
  }
LABEL_8:
}

- (BOOL)_populateTriggerModel:(id)a3 fromBuilderMessage:(id)a4 transaction:(id)a5 responsePayload:(id)a6
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v11 = a4;
  id v55 = a5;
  id v57 = a6;
  id v12 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v11, "BOOLForKey:", @"kTriggerActivate"));
  [v10 setActive:v12];

  id v13 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v11, "BOOLForKey:", *MEMORY[0x1E4F2E1F0]));
  [v10 setAutoDelete:v13];

  id v59 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  __int16 v56 = v11;
  id obj = [v11 arrayForKey:@"kTriggerActionSetUUIDKey"];
  uint64_t v14 = [obj countByEnumeratingWithState:&v62 objects:v70 count:16];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)v63;
    id v53 = v10;
    while (2)
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        if (*(void *)v63 != v16) {
          objc_enumerationMutation(obj);
        }
        id v18 = *(id *)(*((void *)&v62 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          __int16 v19 = v18;
        }
        else {
          __int16 v19 = 0;
        }
        id v20 = v19;

        if (!v20) {
          goto LABEL_18;
        }
        uint64_t v21 = [objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v20];
        if (!v21)
        {
          id v20 = v18;
LABEL_18:
          id v37 = (void *)MEMORY[0x1D9452090]();
          id v38 = self;
          __int16 v39 = HMFGetOSLogHandle();
          __int16 v28 = v55;
          uint64_t v27 = v56;
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          {
            id v40 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            id v67 = v40;
            __int16 v68 = 2112;
            id v69 = v20;
            _os_log_impl(&dword_1D49D5000, v39, OS_LOG_TYPE_ERROR, "%{public}@Invalid ActionSet reference: '%@'", buf, 0x16u);
          }
          uint64_t v41 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
          [v56 respondWithError:v41];

          BOOL v42 = 0;
          id v10 = v53;
          goto LABEL_29;
        }
        unint64_t v22 = (void *)v21;
        unint64_t v23 = [(HMDHome *)self actionSetWithUUID:v21];
        if (!v23)
        {
          uint64_t v43 = (void *)MEMORY[0x1D9452090]();
          uint64_t v44 = self;
          uint64_t v45 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
          {
            __int16 v46 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            id v67 = v46;
            __int16 v68 = 2112;
            id v69 = v22;
            _os_log_impl(&dword_1D49D5000, v45, OS_LOG_TYPE_ERROR, "%{public}@Failed to resolve ActionSet reference: %@", buf, 0x16u);
          }
          id v47 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
          uint64_t v27 = v56;
          [v56 respondWithError:v47];

          BOOL v42 = 0;
          id v10 = v53;
          __int16 v28 = v55;
          goto LABEL_29;
        }
        uint64_t v24 = v23;
        uint64_t v25 = [v23 uuid];
        uint64_t v26 = [v25 UUIDString];
        [v59 addObject:v26];
      }
      uint64_t v15 = [obj countByEnumeratingWithState:&v62 objects:v70 count:16];
      id v10 = v53;
      if (v15) {
        continue;
      }
      break;
    }
  }

  uint64_t v27 = v56;
  [v56 dictionaryForKey:@"kTriggerOwnedActionSetKey"];
  __int16 v28 = v55;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  if (!obj) {
    goto LABEL_28;
  }
  int v29 = [MEMORY[0x1E4F29128] UUID];
  id v30 = objc_msgSend(MEMORY[0x1E4F29128], "hm_deriveUUIDFromBaseUUID:", v29);
  __int16 v31 = [v30 UUIDString];

  id v32 = (void *)*MEMORY[0x1E4F2C950];
  id v60 = 0;
  id v61 = 0;
  uint64_t v33 = -[HMDHome _createActionSetWithUUID:name:type:fromDictionary:transaction:response:error:](self, v29, v31, v32, obj, v55, &v61, &v60);
  id v34 = v61;
  id v35 = v60;

  if (v33)
  {
    [v57 setObject:v34 forKeyedSubscript:@"kTriggerOwnedActionSetKey"];
    id v36 = [v29 UUIDString];
    [v59 addObject:v36];
  }
  else
  {
    id v54 = v10;
    context = (void *)MEMORY[0x1D9452090]();
    __int16 v48 = self;
    id v49 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      id v50 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v67 = v50;
      _os_log_impl(&dword_1D49D5000, v49, OS_LOG_TYPE_ERROR, "%{public}@Failed to create trigger-owned action set", buf, 0xCu);
    }
    [v56 respondWithError:v35];
    id v10 = v54;
  }

  if (!v33)
  {
    BOOL v42 = 0;
  }
  else
  {
LABEL_28:
    id v20 = (id)[v59 copy];
    [v10 setCurrentActionSets:v20];
    BOOL v42 = 1;
LABEL_29:
  }
  return v42;
}

- (HMDActionSet)_createActionSetWithUUID:(void *)a3 name:(void *)a4 type:(void *)a5 fromDictionary:(void *)a6 transaction:(void *)a7 response:(void *)a8 error:
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  id v13 = a2;
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  if (a1)
  {
    id v55 = v15;
    id v18 = [[HMDActionSet alloc] initWithName:v14 uuid:v13 type:v15 home:a1 queue:0];
    __int16 v19 = [(HMDActionSet *)v18 modelObjectWithChangeType:1];
    __int16 v58 = v17;
    [v17 add:v19];

    __int16 v56 = v16;
    id v20 = objc_msgSend(v16, "hmf_arrayForKey:", @"kActionSetActions");
    uint64_t v21 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v20, "count"));
    long long v59 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    id obj = v20;
    uint64_t v22 = [obj countByEnumeratingWithState:&v59 objects:v67 count:16];
    if (v22)
    {
      uint64_t v23 = v22;
      uint64_t v24 = *(void *)v60;
      id v53 = v13;
LABEL_4:
      uint64_t v25 = 0;
      while (1)
      {
        if (*(void *)v60 != v24) {
          objc_enumerationMutation(obj);
        }
        id v26 = *(id *)(*((void *)&v59 + 1) + 8 * v25);
        objc_opt_class();
        id v27 = (objc_opt_isKindOfClass() & 1) != 0 ? v26 : 0;
        id v28 = v27;

        if (!v28) {
          break;
        }
        uint64_t v29 = [a1 actionWithDictionaryRepresentation:v28];
        if (!v29)
        {
          uint64_t v43 = (void *)MEMORY[0x1D9452090]();
          id v44 = a1;
          uint64_t v45 = HMFGetOSLogHandle();
          id v13 = v53;
          id v15 = v55;
          if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
          {
            __int16 v46 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            long long v64 = v46;
            __int16 v65 = 2112;
            id v66 = v28;
            _os_log_impl(&dword_1D49D5000, v45, OS_LOG_TYPE_ERROR, "%{public}@Failed to deserialize action: %@", buf, 0x16u);
          }
          if (a8)
          {
            *a8 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
          }

          id v16 = v56;
          id v35 = obj;
          id v17 = v58;
LABEL_29:

          id v38 = 0;
          goto LABEL_36;
        }
        id v30 = (void *)v29;
        [v21 addObject:v29];
        [v30 updateActionSetIfNil:v18];
        __int16 v31 = [v30 modelObjectWithChangeType:1];
        [v58 add:v31];

        if (v23 == ++v25)
        {
          uint64_t v23 = [obj countByEnumeratingWithState:&v59 objects:v67 count:16];
          id v13 = v53;
          if (v23) {
            goto LABEL_4;
          }
          goto LABEL_14;
        }
      }
      __int16 v39 = (void *)MEMORY[0x1D9452090]();
      id v40 = a1;
      uint64_t v41 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        BOOL v42 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        long long v64 = v42;
        __int16 v65 = 2112;
        id v66 = v14;
        _os_log_impl(&dword_1D49D5000, v41, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@; invalid serialized action",
          buf,
          0x16u);
      }
      id v13 = v53;
      id v15 = v55;
      id v16 = v56;
      id v35 = obj;
      id v17 = v58;
      if (a8)
      {
        *a8 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
      }
      goto LABEL_29;
    }
LABEL_14:

    [(HMDActionSet *)v18 setActions:v21];
    if ([a1 validateActionsDoNotConflict:v21])
    {
      id v32 = objc_msgSend(v56, "hmf_dictionaryForKey:", @"kAppDataInformationKey");
      if ([v32 count])
      {
        uint64_t v33 = [[HMDApplicationData alloc] initWithParentUUID:v13];
        [(HMDApplicationData *)v33 setApplicationData:v32 forIdentifier:@"com.apple.homekit-entitledclient.identifer"];
        id v34 = [(HMDApplicationData *)v33 modelObjectWithChangeType:1];
        [v58 add:v34];
      }
      id v35 = obj;
      if (a7)
      {
        id v36 = [(HMDActionSet *)v18 createPayload];
        id v37 = (void *)[v36 mutableCopy];

        [v37 setObject:v32 forKeyedSubscript:@"kAppDataInformationKey"];
        *a7 = (id)[v37 copy];
      }
      id v38 = v18;
    }
    else
    {
      id v47 = (void *)MEMORY[0x1D9452090]();
      id v48 = a1;
      id v49 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        id v50 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        long long v64 = v50;
        __int16 v65 = 2112;
        id v66 = v14;
        _os_log_impl(&dword_1D49D5000, v49, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@; conflicting actions",
          buf,
          0x16u);
      }
      id v35 = obj;
      if (a8)
      {
        [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
        id v38 = 0;
        *a8 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        id v38 = 0;
      }
    }
    id v15 = v55;
    id v16 = v56;
    id v17 = v58;
LABEL_36:
  }
  else
  {
    id v38 = 0;
  }

  return v38;
}

- (void)_handleAddEventTrigger:(id)a3
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    unint64_t v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    id v70 = v8;
    __int16 v71 = 2112;
    id v72 = v4;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Received message %@", buf, 0x16u);
  }
  id v9 = [v4 name];
  int v10 = [v9 isEqualToString:*MEMORY[0x1E4F2C990]];

  id v54 = [v4 stringForKey:@"kTriggerName"];
  id v50 = [v4 stringForKey:*MEMORY[0x1E4F2E1E0]];
  long long v51 = [v4 uuidForKey:@"kNewObjectUUIDKey"];
  long long v52 = [v4 predicateForKey:@"kEventTriggerConditionKey"];
  id v11 = [v4 numberForKey:@"kEventTriggerRecurrencesKey"];
  id v12 = v11;
  if (v11)
  {
    if ([v11 unsignedIntegerValue] == 127)
    {
      id v53 = 0;
    }
    else
    {
      id v53 = HMDaysOfTheWeekToDateComponents();
    }
  }
  else
  {
    id v53 = [v4 arrayOfDateComponentsForKey:@"kEventTriggerRecurrencesKey"];
  }
  id v49 = [(HMDHome *)v6 currentUser];
  id v13 = [HMDEventTriggerModel alloc];
  id v14 = [(HMDHome *)v6 uuid];
  id v15 = [(HMDBackingStoreModelObject *)v13 initWithObjectChangeType:1 uuid:v51 parentUUID:v14];

  [(HMDEventTriggerModel *)v15 setName:v54];
  [(HMDEventTriggerModel *)v15 setConfiguredName:v50];
  [(HMDEventTriggerModel *)v15 setActive:MEMORY[0x1E4F1CC28]];
  [(HMDEventTriggerModel *)v15 setOwner:v49];
  id v16 = [(HMDHome *)v6 currentDevice];
  [(HMDEventTriggerModel *)v15 setOwningDevice:v16];

  id v17 = [(HMDHome *)v6 predicateUtility];
  id v48 = [v17 rewritePredicateForDaemon:v52 message:v4];

  id v18 = [MEMORY[0x1E4F28DB0] archivedDataWithRootObject:v48 requiringSecureCoding:1 error:0];
  [(HMDEventTriggerModel *)v15 setEvaluationCondition:v18];

  __int16 v19 = [MEMORY[0x1E4F28DB0] archivedDataWithRootObject:v53 requiringSecureCoding:1 error:0];
  [(HMDEventTriggerModel *)v15 setRecurrences:v19];

  id v20 = (void *)[v4 mutableCopy];
  objc_initWeak(&location, v6);
  v63[0] = MEMORY[0x1E4F143A8];
  v63[1] = 3221225472;
  void v63[2] = __34__HMDHome__handleAddEventTrigger___block_invoke;
  v63[3] = &unk_1E6A06DB0;
  objc_copyWeak(&v66, &location);
  id v21 = v4;
  id v64 = v21;
  uint64_t v22 = v15;
  __int16 v65 = v22;
  char v67 = v10;
  [v20 setResponseHandler:v63];
  if ([(HMDHome *)v6 _validateAddingNewTriggerWithName:v54 message:v20])
  {
    if (!v12
      && !+[HMDEventTrigger __validateRecurrences:v53])
    {
      uint64_t v33 = (void *)MEMORY[0x1D9452090]();
      id v34 = v6;
      HMFGetOSLogHandle();
      id v35 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        id v36 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v70 = v36;
        __int16 v71 = 2112;
        id v72 = v53;
        _os_log_impl(&dword_1D49D5000, v35, OS_LOG_TYPE_ERROR, "%{public}@Received invalid values for recurrences: %@", buf, 0x16u);
      }
      id v26 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
      [v20 respondWithError:v26];
      goto LABEL_38;
    }
    uint64_t v23 = [(HMDHome *)v6 backingStore];
    uint64_t v24 = [v21 name];
    uint64_t v25 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    id v47 = [v23 transaction:v24 options:v25];

    if (v10)
    {
      id v26 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      if (![(HMDHome *)v6 _populateTriggerModel:v22 fromBuilderMessage:v20 transaction:v47 responsePayload:v26])
      {
LABEL_37:

LABEL_38:
        goto LABEL_39;
      }
      id v27 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v21, "BOOLForKey:", @"kEventTriggerExecuteOnce"));
      [(HMDEventTriggerModel *)v22 setExecuteOnce:v27];
    }
    else
    {
      id v26 = 0;
    }
    id v28 = [[HMDEventTrigger alloc] initWithModel:v22 home:v6 message:v21];
    __int16 v46 = v28;
    if (v10) {
      uint64_t v29 = v47;
    }
    else {
      uint64_t v29 = 0;
    }
    id v62 = 0;
    BOOL v30 = [(HMDEventTrigger *)v28 addEventsFromMessage:v21 preserveUUIDs:v10 ^ 1u transaction:v29 error:&v62];
    id v31 = v62;
    uint64_t v45 = v31;
    if (v30)
    {
      if ([(HMDEventTrigger *)v46 requiresDataVersion4]
        && ![(HMDEventTrigger *)v46 checkSharedEventTriggerActivationResidentRequirement:v21])
      {
        context = (void *)MEMORY[0x1D9452090]();
        id v38 = v6;
        HMFGetOSLogHandle();
        __int16 v39 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
        {
          id v43 = v26;
          HMFGetLogIdentifier();
          id v40 = (id)objc_claimAutoreleasedReturnValue();
          uint64_t v41 = [(HMDHome *)v38 primaryResident];
          BOOL v42 = [v41 device];
          *(_DWORD *)buf = 138543874;
          id v70 = v40;
          __int16 v71 = 2112;
          id v72 = v42;
          __int16 v73 = 2112;
          uint64_t v74 = v46;
          _os_log_impl(&dword_1D49D5000, v39, OS_LOG_TYPE_INFO, "%{public}@Current resident device %@ does not support shared activation, cannot add the trigger %@", buf, 0x20u);

          id v26 = v43;
        }

        goto LABEL_36;
      }
      if ([(HMDHome *)v6 isOwnerUser])
      {
        if (!v10)
        {
          [v47 add:v22 withMessage:v20];
          [v47 run];
          goto LABEL_36;
        }
        [v47 add:v22];
        v55[0] = MEMORY[0x1E4F143A8];
        v55[1] = 3221225472;
        v55[2] = __34__HMDHome__handleAddEventTrigger___block_invoke_1323;
        v55[3] = &unk_1E6A09030;
        id v56 = v20;
        id v57 = v26;
        __int16 v58 = v22;
        id v59 = v52;
        long long v60 = v6;
        long long v61 = v46;
        [v47 run:v55];

        id v32 = v56;
        goto LABEL_31;
      }
      if ([(HMDHome *)v6 isAdminUser])
      {
        [(HMDHome *)v6 transactionObjectUpdated:0 newValues:v22 message:v20];
        id v37 = [(HMDBackingStoreModelObject *)v22 uuid];
        id v32 = [(HMDHome *)v6 triggerWithUUID:v37];

        if (v32) {
          [(HMDHome *)v6 _relayAddTriggerToResident:v32];
        }
LABEL_31:
      }
    }
    else
    {
      [v20 respondWithError:v31];
    }
LABEL_36:

    goto LABEL_37;
  }
LABEL_39:

  objc_destroyWeak(&v66);
  objc_destroyWeak(&location);
}

void __34__HMDHome__handleAddEventTrigger___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  unint64_t v8 = (void *)MEMORY[0x1D9452090]();
  id v9 = WeakRetained;
  int v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    id v11 = HMFGetLogIdentifier();
    int v28 = 138543874;
    uint64_t v29 = v11;
    __int16 v30 = 2112;
    id v31 = v6;
    __int16 v32 = 2112;
    id v33 = v5;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Responding to the client about add event trigger status : Payload : [%@], error : [%@]", (uint8_t *)&v28, 0x20u);
  }
  [*(id *)(a1 + 32) respondWithPayload:v6 error:v5];
  if (v9)
  {
    id v12 = [[HMDEventTrigger alloc] initWithModel:*(void *)(a1 + 40) home:v9 message:*(void *)(a1 + 32)];
    [(HMDEventTrigger *)v12 addEventsFromMessage:*(void *)(a1 + 32) preserveUUIDs:*(unsigned char *)(a1 + 56) == 0 transaction:0 error:0];
    id v13 = [HomeKitEventTriggerAddLogEvent alloc];
    id v14 = [v9 uuid];
    id v15 = [(HomeKitEventTriggerAddLogEvent *)v13 initWithHomeUUID:v14];

    id v16 = [[HMDAnalyticsEventTriggerData alloc] initWithEventTrigger:v12 isAdding:1];
    id v17 = [(HomeKitEventTriggerAddLogEvent *)v15 analyticsData];
    [v17 setEventTrigger:v16];

    uint64_t v18 = [v5 code];
    __int16 v19 = [(HomeKitEventTriggerAddLogEvent *)v15 analyticsData];
    [v19 setResultErrorCode:v18];

    if ([v9 isOwnerUser])
    {
      id v20 = [(HomeKitEventTriggerAddLogEvent *)v15 analyticsData];
      id v21 = v20;
      uint64_t v22 = 1;
    }
    else
    {
      if (![v9 isAdminUser])
      {
LABEL_9:
        uint64_t v23 = (void *)MEMORY[0x1D9452090]();
        id v24 = v9;
        uint64_t v25 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
        {
          id v26 = HMFGetLogIdentifier();
          int v28 = 138543618;
          uint64_t v29 = v26;
          __int16 v30 = 2112;
          id v31 = v15;
          _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_INFO, "%{public}@Prepared the metric %@, submitting", (uint8_t *)&v28, 0x16u);
        }
        id v27 = [v24 logEventSubmitter];
        [v27 submitLogEvent:v15];

        goto LABEL_12;
      }
      id v20 = [(HomeKitEventTriggerAddLogEvent *)v15 analyticsData];
      id v21 = v20;
      uint64_t v22 = 2;
    }
    [v20 setRequestOrigin:v22];

    goto LABEL_9;
  }
LABEL_12:
}

void __34__HMDHome__handleAddEventTrigger___block_invoke_1323(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    [v3 respondWithError:a2];
  }
  else
  {
    id v4 = *(void **)(a1 + 40);
    id v5 = [*(id *)(a1 + 48) createPayloadWithCondition:*(void *)(a1 + 56)];
    [v4 addEntriesFromDictionary:v5];

    uint64_t v6 = *(void *)(a1 + 64);
    id v7 = [*(id *)(a1 + 72) triggerEvents];
    unint64_t v8 = -[HMDHome _createEventsPayload:](v6, v7);
    [*(id *)(a1 + 40) setObject:v8 forKeyedSubscript:@"kEventTriggerEventsKey"];

    uint64_t v9 = *(void *)(a1 + 64);
    int v10 = [*(id *)(a1 + 72) endEvents];
    id v11 = -[HMDHome _createEventsPayload:](v9, v10);
    [*(id *)(a1 + 40) setObject:v11 forKeyedSubscript:@"kEventTriggerEndEventsKey"];

    id v12 = *(void **)(a1 + 32);
    id v13 = (id)[*(id *)(a1 + 40) copy];
    [v12 respondWithPayload:v13];
  }
}

- (id)_createEventsPayload:(uint64_t)a1
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (a1)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v5 = v3;
    uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v14;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v14 != v8) {
            objc_enumerationMutation(v5);
          }
          int v10 = objc_msgSend(*(id *)(*((void *)&v13 + 1) + 8 * i), "createPayload", (void)v13);
          [v4 addObject:v10];
        }
        uint64_t v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v7);
    }

    id v11 = (void *)[v4 copy];
  }
  else
  {
    id v11 = 0;
  }

  return v11;
}

- (void)_updateOwnedTriggers
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = [MEMORY[0x1E4F1CA48] array];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v4 = [(HMDHome *)self triggers];
  uint64_t v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        if ([v9 isOwnedByThisDevice])
        {
          int v10 = [v9 uuid];
          [v3 addObject:v10];
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v6);
  }

  id v11 = [(HMDHome *)self ownedTriggers];
  [v11 setArray:v3];
}

- (void)_handleExecuteActionSet:(id)a3
{
  id v10 = a3;
  id v4 = [v10 uuidForKey:@"kActionSetUUID"];
  uint64_t v5 = [(HMDHome *)self actionSetWithUUID:v4];
  if (v5
    || isInternalBuild()
    && ([(HMDHome *)self triggerOwnedActionSetWithUUID:v4],
        (uint64_t v5 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    uint64_t v6 = [v5 type];
    if ([v6 isEqualToString:*MEMORY[0x1E4F2C950]])
    {
      char v7 = isInternalBuild();

      if ((v7 & 1) == 0)
      {
        uint64_t v8 = [v10 responseHandler];
        uint64_t v9 = [MEMORY[0x1E4F28C58] hmErrorWithCode:48];
        ((void (**)(void, void *, void))v8)[2](v8, v9, 0);

        goto LABEL_10;
      }
    }
    else
    {
    }
    uint64_t v8 = +[HMDDonationHandler sharedDonationHandler];
    [v8 donateActionSet:v5 withMessage:v10];
    [v5 execute:v10];
  }
  else
  {
    uint64_t v5 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:2 userInfo:0];
    uint64_t v8 = [v10 responseHandler];
    ((void (**)(void, void *, void))v8)[2](v8, v5, 0);
  }
LABEL_10:
}

- (void)executeActionSet:(id)a3
{
  id v5 = a3;
  id v6 = objc_alloc(MEMORY[0x1E4F653F0]);
  char v7 = NSString;
  uint64_t v8 = MEMORY[0x1D94505D0](self, a2);
  uint64_t v9 = [v7 stringWithFormat:@"%@, %s:%ld", v8, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/Home/HMDHome.m", 17234];
  id v10 = (void *)[v6 initWithName:v9];

  id v11 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __28__HMDHome_executeActionSet___block_invoke;
  block[3] = &unk_1E6A19668;
  void block[4] = self;
  id v15 = v5;
  id v16 = v10;
  id v12 = v10;
  id v13 = v5;
  dispatch_async(v11, block);
}

void __28__HMDHome_executeActionSet___block_invoke(id *a1)
{
  objc_initWeak(&location, a1[4]);
  uint64_t v7 = MEMORY[0x1E4F143A8];
  uint64_t v8 = 3221225472;
  uint64_t v9 = __28__HMDHome_executeActionSet___block_invoke_2;
  id v10 = &unk_1E6A16550;
  objc_copyWeak(&v13, &location);
  id v11 = a1[5];
  id v12 = a1[6];
  id v2 = (void (**)(void))_Block_copy(&v7);
  if (objc_msgSend(a1[4], "_shouldWaitForAccessoriesToBeReachable", v7, v8, v9, v10))
  {
    id v3 = [a1[5] uuidForKey:@"kActionSetUUID"];
    id v4 = [a1[4] actionSetWithUUID:v3];
    id v5 = [a1[4] workQueue];
    id v6 = +[HMDHomeAssistantOperation homeAssistantOperationWithActionSet:v4 queue:v5];

    [a1[4] _performOperation:v6 completion:v2];
  }
  else
  {
    v2[2](v2);
  }

  objc_destroyWeak(&v13);
  objc_destroyWeak(&location);
}

void __28__HMDHome_executeActionSet___block_invoke_2(id *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    [a1[5] begin];
    [WeakRetained _handleExecuteActionSet:a1[4]];
    [a1[5] end];
  }
  else
  {
    id v3 = [a1[4] responseHandler];

    if (v3)
    {
      id v4 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:3 userInfo:0];
      id v5 = [a1[4] responseHandler];
      ((void (**)(void, void *, void))v5)[2](v5, v4, 0);
    }
    id v6 = (void *)MEMORY[0x1D9452090]();
    uint64_t v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = HMFGetLogIdentifier();
      int v9 = 138543362;
      id v10 = v8;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Home does not exist anymore, cannot execute action set", (uint8_t *)&v9, 0xCu);
    }
  }
}

- (void)_handleRemoveActionSetModel:(id)a3 message:(id)a4
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v6 uuid];
  int v9 = [(HMDHome *)self actionSetWithUUID:v8];
  if (v9
    || ([(HMDHome *)self triggerOwnedActionSetWithUUID:v8],
        (int v9 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    id v44 = v6;
    id v10 = [v9 name];
    id v11 = [(HMDHome *)self removeName:v10];

    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    id v12 = [(HMDHome *)self triggers];
    uint64_t v13 = [v12 countByEnumeratingWithState:&v45 objects:v51 count:16];
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = *(void *)v46;
      do
      {
        uint64_t v16 = 0;
        do
        {
          if (*(void *)v46 != v15) {
            objc_enumerationMutation(v12);
          }
          [*(id *)(*((void *)&v45 + 1) + 8 * v16++) removeActionSet:v9 postUpdate:1];
        }
        while (v14 != v16);
        uint64_t v14 = [v12 countByEnumeratingWithState:&v45 objects:v51 count:16];
      }
      while (v14);
    }

    uint64_t v17 = [v7 transactionResult];
    [v17 markChanged];
    uint64_t v18 = [v9 type];
    int v19 = [v18 isEqualToString:*MEMORY[0x1E4F2C950]];

    id v20 = (void *)MEMORY[0x1D9452090]();
    id v21 = self;
    uint64_t v22 = HMFGetOSLogHandle();
    BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_INFO);
    if (v19)
    {
      if (v23)
      {
        id v24 = HMFGetLogIdentifier();
        uint64_t v25 = [v9 name];
        *(_DWORD *)buf = 138543618;
        id v53 = v24;
        __int16 v54 = 2112;
        id v55 = v25;
        _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_INFO, "%{public}@Remove trigger owned action set: %@", buf, 0x16u);
      }
      id v26 = [(HMDHome *)v21 triggerOwnedActionSets];
      [v26 removeObject:v9];
    }
    else
    {
      if (v23)
      {
        id v27 = HMFGetLogIdentifier();
        int v28 = [v9 name];
        *(_DWORD *)buf = 138543618;
        id v53 = v27;
        __int16 v54 = 2112;
        id v55 = v28;
        _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_INFO, "%{public}@Remove action set: %@", buf, 0x16u);
      }
      uint64_t v29 = [(HMDHome *)v21 actionSets];
      [v29 removeObject:v9];

      [v17 markSaveToAssistant];
    }
    [v9 invalidate];
    v49[0] = @"kHomeUUID";
    __int16 v30 = [(HMDHome *)v21 uuid];
    id v31 = [v30 UUIDString];
    v50[0] = v31;
    v49[1] = @"kActionSetName";
    __int16 v32 = [v9 name];
    v50[1] = v32;
    void v49[2] = @"kActionSetUUID";
    id v33 = [v8 UUIDString];
    void v50[2] = v33;
    uint64_t v34 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v50 forKeys:v49 count:3];

    id v35 = (void *)MEMORY[0x1D9452090]([v7 respondWithPayload:v34]);
    id v36 = v21;
    id v37 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      id v38 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v53 = v38;
      __int16 v54 = 2112;
      id v55 = v34;
      _os_log_impl(&dword_1D49D5000, v37, OS_LOG_TYPE_INFO, "%{public}@Responding back to clients after removing actionSet: %@", buf, 0x16u);
    }

    id v6 = v44;
  }
  else
  {
    __int16 v39 = (void *)MEMORY[0x1D9452090]();
    id v40 = self;
    uint64_t v41 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      BOOL v42 = HMFGetLogIdentifier();
      id v43 = [v8 UUIDString];
      *(_DWORD *)buf = 138543618;
      id v53 = v42;
      __int16 v54 = 2112;
      id v55 = v43;
      _os_log_impl(&dword_1D49D5000, v41, OS_LOG_TYPE_ERROR, "%{public}@Count not find action set with UUID: %@", buf, 0x16u);
    }
    int v9 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    [v7 respondWithError:v9];
  }
}

- (void)_handleRemoveActionSet:(id)a3
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 uuidForKey:@"kActionSetUUID"];
  id v6 = [(HMDHome *)self actionSetWithUUID:v5];
  id v7 = v6;
  if (!v6)
  {
    uint64_t v16 = (void *)MEMORY[0x1D9452090]();
    uint64_t v17 = self;
    uint64_t v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v19 = HMFGetLogIdentifier();
      int v36 = 138543618;
      id v37 = v19;
      __int16 v38 = 2112;
      __int16 v39 = v5;
      _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_ERROR, "%{public}@Did not find the action set with UUID : %@", (uint8_t *)&v36, 0x16u);
    }
    uint64_t v14 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v15 = 2;
    goto LABEL_9;
  }
  uint64_t v8 = [v6 type];
  int v9 = [v8 isEqualToString:*MEMORY[0x1E4F2C950]];

  if (v9)
  {
    id v10 = (void *)MEMORY[0x1D9452090]();
    id v11 = self;
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = HMFGetLogIdentifier();
      int v36 = 138543618;
      id v37 = v13;
      __int16 v38 = 2112;
      __int16 v39 = v7;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_ERROR, "%{public}@Removing this action Set is not supported. : %@", (uint8_t *)&v36, 0x16u);
    }
    uint64_t v14 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v15 = 48;
LABEL_9:
    id v20 = [v14 hmErrorWithCode:v15];
    [v4 respondWithError:v20];
    goto LABEL_16;
  }
  id v20 = +[HMDHome getBuiltinActionSets];
  id v21 = [v7 type];
  uint64_t v22 = [v20 objectForKey:v21];

  if (v22)
  {
    BOOL v23 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:83 userInfo:0];
    id v24 = [v4 responseHandler];
    ((void (**)(void, HMDActionSetModel *, void))v24)[2](v24, v23, 0);

    uint64_t v25 = (void *)MEMORY[0x1D9452090]();
    id v26 = self;
    id v27 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      int v28 = HMFGetLogIdentifier();
      uint64_t v29 = [v7 type];
      int v36 = 138543618;
      id v37 = v28;
      __int16 v38 = 2112;
      __int16 v39 = v29;
      _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_ERROR, "%{public}@Cannot remove built in action set : %@", (uint8_t *)&v36, 0x16u);
    }
    [v4 respondWithError:v23];
  }
  else
  {
    __int16 v30 = [HMDActionSetModel alloc];
    id v31 = [(HMDHome *)self uuid];
    BOOL v23 = [(HMDBackingStoreModelObject *)v30 initWithObjectChangeType:3 uuid:v5 parentUUID:v31];

    __int16 v32 = [(HMDHome *)self backingStore];
    id v33 = [v4 name];
    uint64_t v34 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    id v35 = [v32 transaction:v33 options:v34];

    [v35 add:v23 withMessage:v4];
    [v35 run];
  }
LABEL_16:
}

- (void)_handleAddActionSetModel:(id)a3 message:(id)a4
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = v6;
  int v9 = self;
  id v10 = [v8 name];
  id v11 = [v8 uuid];
  id v12 = [v8 type];
  if (v12)
  {
    id v13 = [v8 type];
  }
  else
  {
    id v13 = (id)*MEMORY[0x1E4F2C958];
  }
  uint64_t v14 = v13;

  uint64_t v15 = [(HMDHome *)v9 createActionSetWithName:v10 uuid:v11 type:v14];

  if (v15)
  {
    uint64_t v16 = [v7 transactionResult];
    [v16 markChanged];
    uint64_t v17 = [v8 type];
    int v18 = [v17 isEqualToString:*MEMORY[0x1E4F2C950]];

    if (v18)
    {
      int v19 = [(HMDHome *)v9 triggerOwnedActionSets];
      [v19 addObject:v15];
    }
    else
    {
      id v24 = [(HMDHome *)v9 actionSets];
      [v24 addObject:v15];

      uint64_t v25 = [v15 actions];
      uint64_t v26 = [v25 count];

      if (v26) {
        [v16 markSaveToAssistant];
      }
    }
    id v43 = v16;
    id v27 = v9;
    id v44 = v15;
    id v28 = v15;
    id v45 = v7;
    id v42 = v7;
    v50[0] = @"kHomeUUID";
    uint64_t v29 = [(HMDHome *)v27 uuid];
    __int16 v30 = [v29 UUIDString];
    *(void *)buf = v30;
    v50[1] = @"kActionSetName";
    id v31 = [v28 name];
    *(void *)&buf[8] = v31;
    void v50[2] = @"kActionSetUUID";
    __int16 v32 = [v28 uuid];
    id v33 = [v32 UUIDString];
    *(void *)&buf[16] = v33;
    void v50[3] = @"kActionSetType";
    uint64_t v34 = [v28 type];
    long long v52 = v34;
    id v35 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:buf forKeys:v50 count:4];

    int v36 = (void *)MEMORY[0x1D9452090]();
    id v37 = v27;
    __int16 v38 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
    {
      __int16 v39 = HMFGetLogIdentifier();
      *(_DWORD *)long long v47 = 138543618;
      *(void *)&void v47[4] = v39;
      __int16 v48 = 2112;
      id v49 = v35;
      _os_log_impl(&dword_1D49D5000, v38, OS_LOG_TYPE_INFO, "%{public}@Add action set finished. Responding to clients with : %@", v47, 0x16u);
    }
    uint64_t v40 = [(HMDHome *)v37 notificationCenter];
    long long v46 = @"HMDActionSetNotificationKey";
    *(void *)long long v47 = v28;
    uint64_t v41 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v47 forKeys:&v46 count:1];
    [v40 postNotificationName:@"HMDActionSetAddedNotification" object:v37 userInfo:v41];

    [v42 respondWithPayload:v35];
    uint64_t v15 = v44;
    id v7 = v45;
  }
  else
  {
    id v20 = (void *)MEMORY[0x1D9452090]();
    id v21 = v9;
    uint64_t v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      BOOL v23 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      *(void *)&uint8_t buf[4] = v23;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v7;
      _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_ERROR, "%{public}@Unable to create action set model. %@", buf, 0x16u);
    }
  }
}

- (void)_handleAddHomeOwnedActionSet:(id)a3
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    int v42 = 138543362;
    id v43 = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Adding Home owned action set", (uint8_t *)&v42, 0xCu);
  }
  int v9 = [v4 stringForKey:@"kActionSetName"];
  id v10 = [(HMDHome *)v6 actionSetWithName:v9];
  if (v10)
  {
    id v11 = (void *)MEMORY[0x1D9452090]();
    id v12 = v6;
    id v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      int v42 = 138543618;
      id v43 = v14;
      __int16 v44 = 2112;
      id v45 = v9;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@ as it already exists.", (uint8_t *)&v42, 0x16u);
    }
    uint64_t v15 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v16 = 1;
LABEL_15:
    id v21 = [v15 hmErrorWithCode:v16];
LABEL_16:
    [v4 respondWithError:v21];
    goto LABEL_17;
  }
  uint64_t v17 = [(HMDHome *)v6 actionSets];
  unint64_t v18 = [v17 count];
  unint64_t v19 = maximumActionSetsPerHome;

  if (v18 >= v19)
  {
    uint64_t v26 = (void *)MEMORY[0x1D9452090]();
    id v27 = v6;
    id v28 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      uint64_t v29 = HMFGetLogIdentifier();
      int v42 = 138543618;
      id v43 = v29;
      __int16 v44 = 2112;
      id v45 = v9;
      _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@; already at maximum action sets for home",
        (uint8_t *)&v42,
        0x16u);
    }
    uint64_t v15 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v16 = 49;
    goto LABEL_15;
  }
  uint64_t v20 = [(HMDHome *)v6 addActionSetName:v9];
  if (v20)
  {
    id v21 = (void *)v20;
    uint64_t v22 = (void *)MEMORY[0x1D9452090]();
    BOOL v23 = v6;
    id v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = HMFGetLogIdentifier();
      int v42 = 138543874;
      id v43 = v25;
      __int16 v44 = 2112;
      id v45 = v9;
      __int16 v46 = 2112;
      long long v47 = v21;
      _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@; namespace error %@",
        (uint8_t *)&v42,
        0x20u);
    }
    goto LABEL_16;
  }
  __int16 v30 = [HMDActionSetModel alloc];
  id v31 = [v4 uuidForKey:@"kNewObjectUUIDKey"];
  __int16 v32 = [(HMDHome *)v6 uuid];
  id v33 = [(HMDBackingStoreModelObject *)v30 initWithObjectChangeType:1 uuid:v31 parentUUID:v32];

  uint64_t v34 = [v4 stringForKey:@"kActionSetName"];
  [(HMDActionSetModel *)v33 setName:v34];

  uint64_t v35 = [v4 stringForKey:@"kActionSetType"];
  int v36 = (void *)v35;
  if (v35) {
    uint64_t v37 = v35;
  }
  else {
    uint64_t v37 = *MEMORY[0x1E4F2C958];
  }
  [(HMDActionSetModel *)v33 setType:v37];
  __int16 v38 = [(HMDHome *)v6 backingStore];
  __int16 v39 = [v4 name];
  uint64_t v40 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  uint64_t v41 = [v38 transaction:v39 options:v40];

  [v41 add:v33 withMessage:v4];
  [v41 run];

  id v21 = 0;
LABEL_17:
}

- (void)_handleAddTriggerOwnedActionSet:(id)a3
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    int v18 = 138543362;
    unint64_t v19 = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Adding trigger owned action set", (uint8_t *)&v18, 0xCu);
  }
  int v9 = [HMDActionSetModel alloc];
  id v10 = [v4 uuidForKey:@"kNewObjectUUIDKey"];
  id v11 = [(HMDHome *)v6 uuid];
  id v12 = [(HMDBackingStoreModelObject *)v9 initWithObjectChangeType:1 uuid:v10 parentUUID:v11];

  id v13 = [v4 stringForKey:@"kActionSetName"];
  [(HMDActionSetModel *)v12 setName:v13];

  [(HMDActionSetModel *)v12 setType:*MEMORY[0x1E4F2C950]];
  uint64_t v14 = [(HMDHome *)v6 backingStore];
  uint64_t v15 = [v4 name];
  uint64_t v16 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  uint64_t v17 = [v14 transaction:v15 options:v16];

  [v17 add:v12 withMessage:v4];
  [v17 run];
}

- (void)_handleAddActionSetFromBuilder:(id)a3
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    long long v52 = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Adding Home owned action set (from builder)", buf, 0xCu);
  }
  int v9 = [v4 uuidForKey:@"kNewObjectUUIDKey"];
  id v10 = v9;
  if (v9)
  {
    id v11 = v9;
  }
  else
  {
    id v11 = [MEMORY[0x1E4F29128] UUID];
  }
  id v12 = v11;

  uint64_t v13 = [v4 stringForKey:@"kActionSetType"];
  uint64_t v14 = (void *)v13;
  uint64_t v15 = (void *)*MEMORY[0x1E4F2C958];
  if (v13) {
    uint64_t v15 = (void *)v13;
  }
  id v16 = v15;

  uint64_t v17 = [v4 stringForKey:@"kActionSetName"];
  uint64_t v18 = [(HMDHome *)v6 actionSetWithName:v17];
  if (!v18)
  {
    uint64_t v25 = [(HMDHome *)v6 actionSets];
    unint64_t v26 = [v25 count];
    unint64_t v27 = maximumActionSetsPerHome;

    if (v26 >= v27)
    {
      id v33 = (void *)MEMORY[0x1D9452090]();
      uint64_t v34 = v6;
      uint64_t v35 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        int v36 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        long long v52 = v36;
        __int16 v53 = 2112;
        __int16 v54 = v17;
        _os_log_impl(&dword_1D49D5000, v35, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@; already at maximum action sets for home",
          buf,
          0x16u);
      }
      id v19 = [MEMORY[0x1E4F28C58] hmErrorWithCode:49];
    }
    else
    {
      uint64_t v28 = [(HMDHome *)v6 addActionSetName:v17];
      if (!v28)
      {
        uint64_t v37 = [(HMDHome *)v6 backingStore];
        __int16 v38 = [v4 name];
        __int16 v39 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
        uint64_t v40 = [v37 transaction:v38 options:v39];

        uint64_t v41 = [v4 messagePayload];
        id v49 = 0;
        id v50 = 0;
        int v42 = -[HMDHome _createActionSetWithUUID:name:type:fromDictionary:transaction:response:error:](v6, v12, v17, v16, v41, v40, &v50, &v49);
        id v43 = v50;
        id v19 = v49;

        if (v42)
        {
          v45[0] = MEMORY[0x1E4F143A8];
          v45[1] = 3221225472;
          v45[2] = __42__HMDHome__handleAddActionSetFromBuilder___block_invoke;
          v45[3] = &unk_1E6A143D0;
          void v45[4] = v6;
          id v46 = v17;
          id v47 = v4;
          id v48 = v43;
          [v40 run:v45];
        }
        else
        {
          id v44 = [(HMDHome *)v6 removeName:v17];
          [v4 respondWithError:v19];
        }

        goto LABEL_21;
      }
      id v19 = (id)v28;
      uint64_t v29 = (void *)MEMORY[0x1D9452090]();
      __int16 v30 = v6;
      id v31 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        __int16 v32 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543874;
        long long v52 = v32;
        __int16 v53 = 2112;
        __int16 v54 = v17;
        __int16 v55 = 2112;
        id v56 = v19;
        _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@; namespace error %@",
          buf,
          0x20u);
      }
    }
    [v4 respondWithError:v19];
    goto LABEL_21;
  }
  id v19 = (id)v18;
  uint64_t v20 = (void *)MEMORY[0x1D9452090]();
  id v21 = v6;
  uint64_t v22 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    BOOL v23 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    long long v52 = v23;
    __int16 v53 = 2112;
    __int16 v54 = v17;
    _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@ as it already exists.", buf, 0x16u);
  }
  id v24 = [MEMORY[0x1E4F28C58] hmErrorWithCode:1];
  [v4 respondWithError:v24];

LABEL_21:
}

void __42__HMDHome__handleAddActionSetFromBuilder___block_invoke(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    id v3 = (id)[*(id *)(a1 + 32) removeName:*(void *)(a1 + 40)];
    [*(id *)(a1 + 48) respondWithError:v4];
  }
  else
  {
    [*(id *)(a1 + 48) respondWithPayload:*(void *)(a1 + 56)];
  }
}

- (void)_handleAddActionSet:(id)a3
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    int v22 = 138543618;
    BOOL v23 = v8;
    __int16 v24 = 2112;
    id v25 = v4;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Received a request to add a new action set : %@", (uint8_t *)&v22, 0x16u);
  }
  id v9 = [v4 stringForKey:@"kActionSetType"];
  if (!v9) {
    id v9 = (id)*MEMORY[0x1E4F2C958];
  }
  id v10 = [v4 stringForKey:@"kActionSetName"];
  unint64_t v11 = HMMaxLengthForNaming();
  if ([v10 length] <= v11)
  {
    uint64_t v17 = [(HMDHome *)v6 logEventSubmitter];
    uint64_t v18 = [HMDAddActionSetLogEvent alloc];
    id v19 = [(HMDHome *)v6 uuid];
    uint64_t v20 = [(HMDAddActionSetLogEvent *)v18 initWithActionSetType:v9 homeUUID:v19];
    [v17 submitLogEvent:v20];

    id v21 = [v4 name];
    LODWORD(v20) = [v21 isEqualToString:*MEMORY[0x1E4F2C988]];

    if (v20)
    {
      [(HMDHome *)v6 _handleAddActionSetFromBuilder:v4];
    }
    else if ([v9 isEqualToString:*MEMORY[0x1E4F2C950]])
    {
      [(HMDHome *)v6 _handleAddTriggerOwnedActionSet:v4];
    }
    else
    {
      [(HMDHome *)v6 _handleAddHomeOwnedActionSet:v4];
    }
  }
  else
  {
    id v12 = (void *)MEMORY[0x1D9452090]();
    uint64_t v13 = v6;
    uint64_t v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = HMFGetLogIdentifier();
      int v22 = 138543362;
      BOOL v23 = v15;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", (uint8_t *)&v22, 0xCu);
    }
    id v16 = [MEMORY[0x1E4F28C58] hmErrorWithCode:46];
    [v4 respondWithError:v16];
  }
}

- (id)builtInActionSetInfo
{
  id v3 = [MEMORY[0x1E4F1CA48] array];
  id v4 = [(HMDHome *)self workQueue];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __31__HMDHome_builtInActionSetInfo__block_invoke;
  void v9[3] = &unk_1E6A197C8;
  void v9[4] = self;
  id v5 = v3;
  id v10 = v5;
  dispatch_sync(v4, v9);

  id v6 = v10;
  id v7 = v5;

  return v7;
}

void __31__HMDHome_builtInActionSetInfo__block_invoke(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v1 = [*(id *)(a1 + 32) actionSets];
  uint64_t v2 = [v1 countByEnumeratingWithState:&v18 objects:v24 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v19;
    uint64_t v5 = *MEMORY[0x1E4F2C958];
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v19 != v4) {
          objc_enumerationMutation(v1);
        }
        id v7 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        uint64_t v8 = [v7 type];
        if (v8)
        {
          id v9 = (void *)v8;
          id v10 = [v7 type];
          char v11 = [v10 isEqualToString:v5];

          if ((v11 & 1) == 0)
          {
            v22[0] = @"kActionSetName";
            id v12 = [v7 name];
            v23[0] = v12;
            v22[1] = @"kActionSetType";
            uint64_t v13 = [v7 type];
            v23[1] = v13;
            v22[2] = @"kActionSetUUID";
            uint64_t v14 = [v7 uuid];
            uint64_t v15 = [v14 UUIDString];
            void v23[2] = v15;
            id v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v23 forKeys:v22 count:3];

            [*(id *)(a1 + 40) addObject:v16];
          }
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v18 objects:v24 count:16];
    }
    while (v3);
  }
}

- (void)_handleRemoveServiceGroupModel:(id)a3 message:(id)a4
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v6 uuid];
  id v9 = [(HMDHome *)self serviceGroupWithUUID:v8];
  id v10 = v9;
  if (v9)
  {
    char v11 = [v9 name];
    id v12 = [(HMDHome *)self removeName:v11];

    uint64_t v13 = [(HMDHome *)self serviceGroups];
    [v13 removeObject:v10];

    uint64_t v14 = [v7 transactionResult];
    [v14 markChanged];
    uint64_t v15 = (void *)MEMORY[0x1D9452090]([v14 markSaveToAssistant]);
    id v16 = self;
    uint64_t v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      long long v18 = HMFGetLogIdentifier();
      long long v19 = [v10 name];
      int v20 = 138543618;
      long long v21 = v18;
      __int16 v22 = 2112;
      BOOL v23 = v19;
      _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Remove service group: %@", (uint8_t *)&v20, 0x16u);
    }
    [v7 respondWithSuccess];
  }
  else
  {
    uint64_t v14 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    [v7 respondWithError:v14];
  }
}

- (void)_handleRemoveServiceGroup:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [v4 uuidForKey:*MEMORY[0x1E4F2EE28]];
  id v6 = [(HMDHome *)self serviceGroupWithUUID:v5];
  if (v6)
  {
    id v7 = [HMDServiceGroupModel alloc];
    uint64_t v8 = [(HMDHome *)self uuid];
    id v9 = [(HMDBackingStoreModelObject *)v7 initWithObjectChangeType:3 uuid:v5 parentUUID:v8];

    id v10 = [(HMDHome *)self backingStore];
    char v11 = [v4 name];
    id v12 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    uint64_t v13 = [v10 transaction:v11 options:v12];

    [v13 add:v9];
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    void v14[2] = __37__HMDHome__handleRemoveServiceGroup___block_invoke;
    v14[3] = &unk_1E6A197F0;
    id v15 = v4;
    [v13 run:v14];
  }
  else
  {
    id v9 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    [v4 respondWithError:v9];
  }
}

uint64_t __37__HMDHome__handleRemoveServiceGroup___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) respondWithPayload:0 error:a2];
}

- (void)_handleAddServiceGroupModel:(id)a3 message:(id)a4
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v6 name];
  uint64_t v9 = [v6 uuid];
  id v10 = (void *)v9;
  if (v8 && v9)
  {
    uint64_t v11 = objc_msgSend(v8, "hm_truncatedNameString");

    id v12 = [HMDServiceGroup alloc];
    uint64_t v13 = [(HMDHome *)self workQueue];
    uint64_t v14 = [(HMDServiceGroup *)v12 initWithName:v11 uuid:v10 home:self queue:v13];

    id v15 = [(HMDHome *)self serviceGroups];
    [v15 addObject:v14];

    id v16 = [(HMDHome *)self msgDispatcher];
    uint64_t v17 = [(HMDHome *)self workQueue];
    [(HMDServiceGroup *)v14 configure:v16 queue:v17];

    long long v18 = [(HMDServiceGroup *)v14 updateServiceGroupWithModel:v6 message:v7];
    long long v19 = [v7 transactionResult];
    [v19 markChanged];
    int v20 = [(HMDServiceGroup *)v14 serviceUUIDs];
    uint64_t v21 = [v20 count];

    if (v21) {
      uint64_t v22 = [v19 markSaveToAssistant];
    }
    BOOL v23 = (void *)MEMORY[0x1D9452090](v22);
    uint64_t v24 = self;
    uint64_t v25 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      __int16 v32 = v10;
      unint64_t v27 = v26 = v11;
      *(_DWORD *)buf = 138543618;
      uint64_t v34 = v27;
      __int16 v35 = 2112;
      uint64_t v36 = v26;
      _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_INFO, "%{public}@Add service group: %@", buf, 0x16u);

      uint64_t v11 = v26;
      id v10 = v32;
    }

    [v7 respondWithPayload:0 error:v18];

    uint64_t v8 = (void *)v11;
  }
  else
  {
    uint64_t v28 = (void *)MEMORY[0x1D9452090]();
    uint64_t v29 = self;
    __int16 v30 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      id v31 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v34 = v31;
      __int16 v35 = 2112;
      uint64_t v36 = (uint64_t)v8;
      _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_ERROR, "%{public}@Can't add service group %@; invalid parameter",
        buf,
        0x16u);
    }
    uint64_t v14 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    [v7 respondWithError:v14];
  }
}

- (void)_handleAddServiceGroup:(id)a3
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [v4 stringForKey:*MEMORY[0x1E4F2EE08]];
  if (v5)
  {
    unint64_t v6 = HMMaxLengthForNaming();
    if ([v5 length] > v6)
    {
      id v7 = (void *)MEMORY[0x1D9452090]();
      uint64_t v8 = self;
      uint64_t v9 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        id v10 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        uint64_t v41 = v10;
        _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", buf, 0xCu);
      }
      uint64_t v11 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v12 = 46;
      goto LABEL_7;
    }
    uint64_t v13 = [(HMDHome *)self serviceGroupWithName:v5];
    if (v13)
    {
      uint64_t v14 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v15 = 1;
    }
    else
    {
      id v16 = [(HMDHome *)self serviceGroups];
      unint64_t v17 = [v16 count];
      unint64_t v18 = maximumServiceGroupsPerHome;

      if (v17 < v18)
      {
        long long v19 = [(HMDHome *)self addName:v5];
        if (!v19)
        {
          uint64_t v28 = [HMDServiceGroupModel alloc];
          uint64_t v29 = [v4 uuidForKey:@"kNewObjectUUIDKey"];
          __int16 v30 = [(HMDHome *)self uuid];
          id v31 = [(HMDBackingStoreModelObject *)v28 initWithObjectChangeType:1 uuid:v29 parentUUID:v30];

          [(HMDServiceGroupModel *)v31 setName:v5];
          __int16 v32 = [(HMDHome *)self backingStore];
          id v33 = [v4 name];
          uint64_t v34 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
          __int16 v35 = [v32 transaction:v33 options:v34];

          [v35 add:v31];
          v37[0] = MEMORY[0x1E4F143A8];
          v37[1] = 3221225472;
          void v37[2] = __34__HMDHome__handleAddServiceGroup___block_invoke;
          v37[3] = &unk_1E6A196E0;
          id v38 = v4;
          __int16 v39 = v31;
          uint64_t v36 = v31;
          [v35 run:v37];

          goto LABEL_20;
        }
        int v20 = (void *)MEMORY[0x1D9452090]();
        uint64_t v21 = self;
        uint64_t v22 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          BOOL v23 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543874;
          uint64_t v41 = v23;
          __int16 v42 = 2112;
          id v43 = v5;
          __int16 v44 = 2112;
          id v45 = v19;
          _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_ERROR, "%{public}@Can't add service group %@; namespace error %@",
            buf,
            0x20u);
        }
LABEL_19:
        [v4 respondWithError:v19];
LABEL_20:

        goto LABEL_21;
      }
      uint64_t v24 = (void *)MEMORY[0x1D9452090]();
      uint64_t v25 = self;
      uint64_t v26 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        unint64_t v27 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v41 = v27;
        __int16 v42 = 2112;
        id v43 = v5;
        _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_ERROR, "%{public}@Can't add service group %@; already at maximum service groups for home",
          buf,
          0x16u);
      }
      uint64_t v14 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v15 = 49;
    }
    long long v19 = [v14 hmErrorWithCode:v15];
    goto LABEL_19;
  }
  uint64_t v11 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v12 = 20;
LABEL_7:
  uint64_t v13 = [v11 hmErrorWithCode:v12];
  [v4 respondWithError:v13];
LABEL_21:
}

void __34__HMDHome__handleAddServiceGroup___block_invoke(uint64_t a1, uint64_t a2)
{
  void v10[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  if (a2)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    [v3 respondWithError:a2];
  }
  else
  {
    v9[0] = *MEMORY[0x1E4F2EE08];
    uint64_t v5 = [*(id *)(a1 + 40) name];
    v10[0] = v5;
    v9[1] = *MEMORY[0x1E4F2EE28];
    unint64_t v6 = [*(id *)(a1 + 40) uuid];
    id v7 = [v6 UUIDString];
    v10[1] = v7;
    uint64_t v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:v9 count:2];
    [v2 respondWithPayload:v8];
  }
}

- (void)updateHomeFirstHAPAccessoryAddedDateToNow
{
  uint64_t v3 = [HMDHomeModel alloc];
  id v4 = [(HMDHome *)self uuid];
  uint64_t v5 = [(HMDHome *)self homeManager];
  unint64_t v6 = [v5 uuid];
  uint64_t v11 = [(HMDBackingStoreModelObject *)v3 initWithObjectChangeType:2 uuid:v4 parentUUID:v6];

  id v7 = objc_alloc_init(MEMORY[0x1E4F1C9C8]);
  [(HMDHomeModel *)v11 setFirstHAPAccessoryAddedDate:v7];

  uint64_t v8 = [(HMDHome *)self backingStore];
  uint64_t v9 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  id v10 = [v8 transaction:@"updateHomeFirstHAPAccessoryAddedDate" options:v9];

  [v10 add:v11];
  [v10 run];
}

- (void)_processAccessoriesToAddForUnpairedAccessory:(id)a3 certificationStatus:(int64_t)a4 accessoryServer:(id)a5 networkCredential:(id)a6 pairingEvent:(id)a7 message:(id)a8 completionHandler:(id)a9
{
  uint64_t v224 = *MEMORY[0x1E4F143B8];
  id v15 = a3;
  id v172 = a5;
  id v173 = a6;
  id v161 = a7;
  id v164 = a8;
  id v155 = a9;
  id v16 = objc_alloc(MEMORY[0x1E4F653F0]);
  unint64_t v17 = NSString;
  unint64_t v18 = MEMORY[0x1D94505D0](self, a2);
  long long v19 = [v17 stringWithFormat:@"%@, %s:%ld", v18, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/Home/HMDHome.m", 16322];
  id v210 = (id)[v16 initWithName:v19];

  int v20 = [v172 primaryAccessory];
  [v161 updateEventPropertiesWithHAPAccessory:v20];

  id v171 = v15;
  if (self)
  {
    uint64_t v21 = [(HMDHome *)self currentAccessory];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    id v23 = v22;

    __int16 v170 = 0;
    if (v171 && v23)
    {
      uint64_t v24 = [v23 sensorAccessoryUUID];
      int v25 = objc_msgSend(v24, "hmf_isEqualToUUID:", v171);

      if (v25)
      {
        __int16 v170 = [v23 uuid];
      }
      else
      {
        __int16 v170 = 0;
      }
    }
  }
  else
  {
    __int16 v170 = 0;
  }

  uint64_t v26 = (void *)MEMORY[0x1D9452090]();
  long long v179 = self;
  HMFGetOSLogHandle();
  unint64_t v27 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v28 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v29 = [v172 accessories];
    uint64_t v30 = [v29 count];
    id v31 = [v172 identifier];
    *(_DWORD *)buf = 138543874;
    id v216 = v28;
    __int16 v217 = 2048;
    uint64_t v218 = v30;
    __int16 v219 = 2112;
    id v220 = v31;
    _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_INFO, "%{public}@Creating %tu new accessory objects for a newly paired accessory server: %@", buf, 0x20u);
  }
  uint64_t v157 = [MEMORY[0x1E4F1CA48] array];
  __int16 v32 = (void *)MEMORY[0x1E4F1CA48];
  id v33 = [v172 accessories];
  objc_msgSend(v32, "arrayWithCapacity:", objc_msgSend(v33, "count"));
  id v165 = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v34 = (void *)MEMORY[0x1E4F1CA48];
  __int16 v35 = [v172 accessories];
  objc_msgSend(v34, "arrayWithCapacity:", objc_msgSend(v35, "count"));
  id v177 = (id)objc_claimAutoreleasedReturnValue();

  long long v208 = 0u;
  long long v209 = 0u;
  long long v206 = 0u;
  long long v207 = 0u;
  uint64_t v36 = [v172 accessories];
  uint64_t v37 = [v36 countByEnumeratingWithState:&v206 objects:v223 count:16];
  if (v37)
  {
    uint64_t v178 = 0;
    uint64_t v167 = *(void *)v207;
    id obj = v36;
    do
    {
      uint64_t v38 = 0;
      uint64_t v162 = v37;
      do
      {
        if (*(void *)v207 != v167) {
          objc_enumerationMutation(obj);
        }
        __int16 v39 = *(void **)(*((void *)&v206 + 1) + 8 * v38);
        uint64_t v40 = [v39 uniqueIdentifier];
        uint64_t v41 = [v172 primaryAccessory];
        __int16 v42 = [v41 uniqueIdentifier];
        int v43 = [v40 isEqual:v42];

        if (v43)
        {
          if (v178)
          {
            __int16 v44 = (void *)MEMORY[0x1D9452090]();
            id v45 = v179;
            HMFGetOSLogHandle();
            uint64_t v46 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              id v47 = (id)objc_claimAutoreleasedReturnValue();
              id v48 = [v178 uuid];
              id v49 = [v172 primaryAccessory];
              *(_DWORD *)buf = 138543874;
              id v216 = v47;
              __int16 v217 = 2112;
              uint64_t v218 = (uint64_t)v48;
              __int16 v219 = 2112;
              id v220 = v49;
              _os_log_impl(&dword_1D49D5000, v46, OS_LOG_TYPE_DEFAULT, "%{public}@#### Multiple primary accessories: %@  new %@", buf, 0x20u);

              uint64_t v37 = v162;
            }
          }
          id v50 = v171;
          if (!v171)
          {
            id v159 = [MEMORY[0x1E4F29128] UUID];
            id v50 = v159;
          }
          long long v51 = [(HMDHome *)v179 getTransactionFromHAPAccessory:v39 hmdAccessory:0 uuid:v50 hostAccessoryUUID:v170 objectChangeType:1];
          if (!v171) {

          }
          id v52 = v51;
          id v53 = v39;
          __int16 v54 = [v53 manufacturer];
          [v52 setInitialManufacturer:v54];

          __int16 v55 = [v53 model];
          [v52 setInitialModel:v55];

          id v56 = [v53 category];
          [v52 setInitialCategoryIdentifier:v56];

          uint64_t v57 = serviceTypeUUIDsForAccessory(v53);
          [v52 setInitialServiceTypeUUIDs:v57];

          __int16 v58 = [v53 server];

          +[HMDHome updateCHIPPropertiesOnAccessoryModel:v52 forAddedHAPAccessoryServer:v58];
          id v59 = v172;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            long long v60 = v59;
          }
          else {
            long long v60 = 0;
          }
          id v174 = v60;

          long long v61 = [v173 clientIdentifier];
          [v52 setNetworkClientIdentifier:v61];

          [v52 setNetworkClientLAN:&unk_1F2DC7570];
          id v62 = [v173 networkRouterUUID];
          long long v63 = [v62 UUIDString];
          [v52 setNetworkRouterUUID:v63];

          id v64 = [v173 wiFiPSK];
          [v52 setWiFiUniquePreSharedKey:v64];

          __int16 v65 = [v173 wiFiPSK];

          if (v65)
          {
            uint64_t v66 = 3;
          }
          else if ([v174 isWacComplete])
          {
            uint64_t v66 = 2;
          }
          else
          {
            uint64_t v66 = 0;
          }
          id v72 = [NSNumber numberWithInteger:v66];
          [v52 setWiFiCredentialType:v72];

          __int16 v73 = [NSNumber numberWithInteger:a4];
          [v52 setCertificationStatus:v73];

          if (v170)
          {
            uint64_t v74 = [v170 UUIDString];
            [v52 setHostAccessoryUUID:v74];
          }
          uint64_t v75 = [(HMDHome *)v179 uuidToHAPAccessoryConfigTable];
          uint64_t v76 = [v52 uuid];
          [v75 setObject:v53 forKey:v76];

          id v77 = v52;
          id v78 = [(HMDHome *)v179 homeManager];
          __int16 v79 = v78;
          if (v171)
          {
            id v80 = (void *)MEMORY[0x1D9452090]();
            __int16 v81 = v179;
            HMFGetOSLogHandle();
            id v82 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              id v83 = (id)objc_claimAutoreleasedReturnValue();
              long long v84 = [v53 uniqueIdentifier];
              [v174 isWacComplete];
              HMFBooleanToString();
              id v85 = (id)objc_claimAutoreleasedReturnValue();
              long long v86 = [v77 wiFiCredentialType];
              *(_DWORD *)buf = 138544130;
              id v216 = v83;
              __int16 v217 = 2112;
              uint64_t v218 = (uint64_t)v84;
              __int16 v219 = 2112;
              id v220 = v85;
              __int16 v221 = 2112;
              uint64_t v222 = v86;
              _os_log_impl(&dword_1D49D5000, v82, OS_LOG_TYPE_INFO, "%{public}@Creating primary accessory for unpaired accessory with identifier %@ isWacComplete: %@ wiFiCredentialType: %@", buf, 0x2Au);

              uint64_t v37 = v162;
            }
          }
          else
          {
            id v80 = (void *)MEMORY[0x1D9452090]([v78 processAnyPendingRequestsForRemoteAccess]);
            long long v87 = v179;
            HMFGetOSLogHandle();
            id v82 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              id v88 = (id)objc_claimAutoreleasedReturnValue();
              long long v89 = [v53 uniqueIdentifier];
              [v174 isWacComplete];
              HMFBooleanToString();
              id v90 = (id)objc_claimAutoreleasedReturnValue();
              long long v91 = [v77 wiFiCredentialType];
              *(_DWORD *)buf = 138544130;
              id v216 = v88;
              __int16 v217 = 2112;
              uint64_t v218 = (uint64_t)v89;
              __int16 v219 = 2112;
              id v220 = v90;
              __int16 v221 = 2112;
              uint64_t v222 = v91;
              _os_log_impl(&dword_1D49D5000, v82, OS_LOG_TYPE_INFO, "%{public}@Creating primary accessory with identifier %@ isWacComplete: %@ wiFiCredentialType: %@", buf, 0x2Au);

              uint64_t v37 = v162;
            }
          }

          id v205 = v177;
          [(HMDHome *)v179 getUpdateTransactionForAccessory:0 hapAccessory:v53 accessoryTransaction:v77 addSvcTransactions:&v205 updateSvcTransactions:0 removeSvcTransactions:0];
          id v92 = v205;

          [(HMDHome *)v179 _processProductDataForNewlyAddedAccessory:v53 transaction:v77];
          if ([(HMDHome *)v179 hasNeverAddedAnyHAPAccessory])
          {
            [v161 setFirstHAPAccessoryInHome:1];
            [(HMDHome *)v179 updateHomeFirstHAPAccessoryAddedDateToNow];
            [v161 setFirstHAPAccessoryInAnyHome:1];
            if ([v79 hasHAPAccessoryInAnyHome]) {
              [v161 setFirstHAPAccessoryInAnyHome:0];
            }
          }

          id v177 = v92;
          uint64_t v178 = v77;
        }
        else
        {
          char v67 = (void *)MEMORY[0x1D9452090]();
          uint64_t v68 = v179;
          HMFGetOSLogHandle();
          id v69 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            id v70 = (id)objc_claimAutoreleasedReturnValue();
            __int16 v71 = [v39 uniqueIdentifier];
            *(_DWORD *)buf = 138543618;
            id v216 = v70;
            __int16 v217 = 2112;
            uint64_t v218 = (uint64_t)v71;
            _os_log_impl(&dword_1D49D5000, v69, OS_LOG_TYPE_INFO, "%{public}@Non-primary accessory with identifier %@", buf, 0x16u);

            uint64_t v37 = v162;
          }

          [v157 addObject:v39];
        }
        ++v38;
      }
      while (v37 != v38);
      uint64_t v36 = obj;
      uint64_t v37 = [obj countByEnumeratingWithState:&v206 objects:v223 count:16];
    }
    while (v37);
  }
  else
  {
    uint64_t v178 = 0;
  }

  long long v203 = 0u;
  long long v204 = 0u;
  long long v201 = 0u;
  long long v202 = 0u;
  id v160 = v157;
  uint64_t v93 = [v160 countByEnumeratingWithState:&v201 objects:v214 count:16];
  if (v93)
  {
    uint64_t v163 = *(void *)v202;
    do
    {
      uint64_t v168 = v93;
      uint64_t v94 = 0;
      long long v175 = v177;
      do
      {
        if (*(void *)v202 != v163) {
          objc_enumerationMutation(v160);
        }
        id v95 = *(void **)(*((void *)&v201 + 1) + 8 * v94);
        id v96 = (void *)MEMORY[0x1D9452090]();
        id v97 = v179;
        HMFGetOSLogHandle();
        id v98 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v98, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          id v99 = (id)objc_claimAutoreleasedReturnValue();
          id v100 = [v95 uniqueIdentifier];
          *(_DWORD *)buf = 138543618;
          id v216 = v99;
          __int16 v217 = 2112;
          uint64_t v218 = (uint64_t)v100;
          _os_log_impl(&dword_1D49D5000, v98, OS_LOG_TYPE_INFO, "%{public}@Non-primary accessory with identifier %@", buf, 0x16u);
        }
        __int16 v101 = [v95 instanceID];
        id v102 = [v101 stringValue];
        id v213 = v102;
        __int16 v103 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v213 count:1];

        id v104 = (void *)MEMORY[0x1E4F29128];
        long long v105 = [v178 uuid];
        id v106 = objc_msgSend(v104, "hm_deriveUUIDFromBaseUUID:withSalts:", v105, v103);

        long long v107 = (void *)MEMORY[0x1D9452090]();
        long long v108 = v97;
        HMFGetOSLogHandle();
        long long v109 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v109, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          id v110 = (id)objc_claimAutoreleasedReturnValue();
          long long v111 = [v95 uniqueIdentifier];
          long long v112 = [v106 UUIDString];
          *(_DWORD *)buf = 138543874;
          id v216 = v110;
          __int16 v217 = 2112;
          uint64_t v218 = (uint64_t)v111;
          __int16 v219 = 2112;
          id v220 = v112;
          _os_log_impl(&dword_1D49D5000, v109, OS_LOG_TYPE_INFO, "%{public}@Creating secondary accessory with identifier %@ and uuid %@", buf, 0x20u);
        }
        __int16 v113 = [v178 uuid];
        id v114 = [(HMDHome *)v108 getTransactionFromHAPAccessory:v95 hmdAccessory:0 uuid:v106 hostAccessoryUUID:v113 objectChangeType:1];

        [v114 setWiFiCredentialType:&unk_1F2DC7570];
        [v165 addObject:v114];
        __int16 v115 = [(HMDHome *)v108 uuidToHAPAccessoryConfigTable];
        [v115 setObject:v95 forKey:v106];

        id v200 = v175;
        [(HMDHome *)v108 getUpdateTransactionForAccessory:0 hapAccessory:v95 accessoryTransaction:v114 addSvcTransactions:&v200 updateSvcTransactions:0 removeSvcTransactions:0];
        id v177 = v200;

        ++v94;
        long long v175 = v177;
      }
      while (v168 != v94);
      uint64_t v93 = [v160 countByEnumeratingWithState:&v201 objects:v214 count:16];
    }
    while (v93);
  }

  long long v116 = [(HMDHome *)v179 backingStore];
  __int16 v117 = [v164 name];
  id v118 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  int v176 = [v116 transaction:v117 options:v118];

  [v176 add:v178 withMessage:v164];
  dispatch_group_t v119 = dispatch_group_create();
  [v178 setConfigurationTracker:v119];
  long long v198 = 0u;
  long long v199 = 0u;
  long long v196 = 0u;
  long long v197 = 0u;
  id v166 = v165;
  uint64_t v120 = [v166 countByEnumeratingWithState:&v196 objects:v212 count:16];
  if (v120)
  {
    uint64_t v169 = *(void *)v197;
    do
    {
      for (uint64_t i = 0; i != v120; ++i)
      {
        if (*(void *)v197 != v169) {
          objc_enumerationMutation(v166);
        }
        id v122 = *(void **)(*((void *)&v196 + 1) + 8 * i);
        [v122 setConfigurationTracker:v119];
        id v123 = [v178 certificationStatus];
        [v122 setCertificationStatus:v123];

        unint64_t v124 = [v178 uuid];
        uint64_t v125 = [(HMDHome *)v179 accessoryWithUUID:v124];

        id v126 = v125;
        objc_opt_class();
        LOBYTE(v125) = objc_opt_isKindOfClass();

        if ((v125 & (v126 != 0)) == 1)
        {
          long long v127 = [v178 uuid];
          long long v128 = [v127 UUIDString];
          [v122 setBridgeUUID:v128];
LABEL_73:

          goto LABEL_77;
        }
        id v129 = v126;
        objc_opt_class();
        unsigned __int8 isKindOfClass = objc_opt_isKindOfClass();

        if ((isKindOfClass & (v126 != 0)) == 1)
        {
          long long v127 = [v178 uuid];
          long long v128 = [v127 UUIDString];
          [v122 setHostAccessoryUUID:v128];
          goto LABEL_73;
        }
        id v131 = (void *)MEMORY[0x1D9452090]();
        id v132 = v179;
        HMFGetOSLogHandle();
        id v133 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR))
        {
          long long v134 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          id v216 = v134;
          __int16 v217 = 2112;
          uint64_t v218 = (uint64_t)v129;
          _os_log_impl(&dword_1D49D5000, v133, OS_LOG_TYPE_ERROR, "%{public}@Unexpected type of host accessory %@", buf, 0x16u);
        }
LABEL_77:
        [v176 add:v122 withMessage:v164];
      }
      uint64_t v120 = [v166 countByEnumeratingWithState:&v196 objects:v212 count:16];
    }
    while (v120);
  }

  long long v194 = 0u;
  long long v195 = 0u;
  long long v192 = 0u;
  long long v193 = 0u;
  id v135 = v177;
  uint64_t v136 = [v135 countByEnumeratingWithState:&v192 objects:v211 count:16];
  if (v136)
  {
    uint64_t v137 = *(void *)v193;
    do
    {
      for (uint64_t j = 0; j != v136; ++j)
      {
        if (*(void *)v193 != v137) {
          objc_enumerationMutation(v135);
        }
        id v139 = *(void **)(*((void *)&v192 + 1) + 8 * j);
        [v139 setConfigurationTracker:v119];
        [v176 add:v139 withMessage:0];
      }
      uint64_t v136 = [v135 countByEnumeratingWithState:&v192 objects:v211 count:16];
    }
    while (v136);
  }

  uint64_t v140 = [(HMDHome *)v179 emptyModelObjectWithChangeType:2];
  if ([(id)objc_opt_class() updateCHIPPropertiesOnHomeModel:v140 forAddedHAPAccessoryServer:v172])
  {
    uint64_t v141 = v140;
    __int16 v142 = (void *)MEMORY[0x1D9452090]();
    int64_t v143 = v179;
    HMFGetOSLogHandle();
    __int16 v144 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v144, OS_LOG_TYPE_INFO))
    {
      uint64_t v145 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v216 = v145;
      __int16 v217 = 2112;
      uint64_t v218 = v141;
      _os_log_impl(&dword_1D49D5000, v144, OS_LOG_TYPE_INFO, "%{public}@Adding updated home model for CHIP-related properties: %@", buf, 0x16u);
    }
    uint64_t v140 = v141;
    [v176 add:v141];
  }
  uint64_t v146 = (void *)v140;
  uint64_t v147 = [(HMDHome *)v179 wiFiRouterAccessories];
  objc_initWeak((id *)buf, v179);
  v181[0] = MEMORY[0x1E4F143A8];
  v181[1] = 3221225472;
  v181[2] = __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke;
  v181[3] = &unk_1E6A06E20;
  objc_copyWeak(&v191, (id *)buf);
  id v148 = v155;
  id v190 = v148;
  long long v149 = v119;
  uint64_t v182 = v149;
  id v150 = v178;
  id v183 = v150;
  id v180 = v172;
  id v184 = v180;
  id v151 = v166;
  id v185 = v151;
  id v152 = v164;
  id v186 = v152;
  id v187 = v210;
  id v153 = v147;
  id v188 = v153;
  id v154 = v161;
  id v189 = v154;
  [v176 run:v181];

  objc_destroyWeak(&v191);
  objc_destroyWeak((id *)buf);

  __HMFActivityScopeLeave();
}

void __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    unint64_t v6 = *(NSObject **)(a1 + 32);
    id v7 = [WeakRetained workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_2;
    block[3] = &unk_1E6A06D88;
    void block[4] = v5;
    id v15 = *(id *)(a1 + 40);
    id v16 = *(id *)(a1 + 48);
    id v17 = *(id *)(a1 + 56);
    id v18 = *(id *)(a1 + 64);
    id v23 = *(id *)(a1 + 96);
    id v19 = *(id *)(a1 + 72);
    id v20 = *(id *)(a1 + 80);
    id v21 = v3;
    id v22 = *(id *)(a1 + 88);
    dispatch_group_notify(v6, v7, block);

    uint64_t v8 = v15;
LABEL_7:

    goto LABEL_8;
  }
  uint64_t v9 = (void *)MEMORY[0x1D9452090]();
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    unint64_t v27 = v11;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_ERROR, "%{public}@Home missing; failed to add accessory", buf, 0xCu);
  }
  uint64_t v12 = *(void **)(a1 + 96);
  if (v12)
  {
    uint64_t v13 = dispatch_get_global_queue(0, 0);
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    void v24[2] = __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_1300;
    v24[3] = &unk_1E6A186E0;
    id v25 = v12;
    dispatch_async(v13, v24);

    uint64_t v8 = v25;
    goto LABEL_7;
  }
LABEL_8:
}

void __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_1300(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_2(uint64_t a1)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  id v3 = (id *)(a1 + 32);
  id v2 = *(void **)(a1 + 32);
  id v4 = (id *)(a1 + 40);
  uint64_t v5 = [*(id *)(a1 + 40) uuid];
  unint64_t v6 = [v2 accessoryWithUUID:v5];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v7 = v6;
  }
  else {
    id v7 = 0;
  }
  id v61 = v7;

  uint64_t v8 = [*v3 notificationRegistrations];
  uint64_t v64 = [v8 count];

  uint64_t v9 = [*v4 hapAccessoryLocal];
  [v61 enableNotificationsWithHAPAccessory:v9 homeNotificationsEnabled:v64 != 0];

  logAndPostNotification(@"HMDAccessoryConnectedNotification", v61, 0);
  [v61 updateBridgedAccessoryLightProfilesSettings];
  [*v3 finishPairingForServer:*(void *)(a1 + 48)];
  long long v101 = 0u;
  long long v102 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  id v10 = *(id *)(a1 + 56);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v99 objects:v108 count:16];
  if (v11)
  {
    uint64_t v12 = *(void *)v100;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v100 != v12) {
          objc_enumerationMutation(v10);
        }
        uint64_t v14 = *(void **)(*((void *)&v99 + 1) + 8 * i);
        id v15 = *(void **)(a1 + 32);
        id v16 = [v14 uuid];
        id v17 = [v15 accessoryWithUUID:v16];

        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v18 = v17;
        }
        else {
          id v18 = 0;
        }
        id v19 = v18;

        id v20 = [v14 hapAccessoryLocal];
        [v19 enableNotificationsWithHAPAccessory:v20 homeNotificationsEnabled:v64 != 0];

        logAndPostNotification(@"HMDAccessoryConnectedNotification", v19, 0);
      }
      uint64_t v11 = [v10 countByEnumeratingWithState:&v99 objects:v108 count:16];
    }
    while (v11);
  }

  id v21 = *(void **)(a1 + 32);
  id v22 = [*(id *)(a1 + 64) identifier];
  long long v60 = [v21 retrieveAndResetNewlyConfiguredAccessoriesForAddSessionIdentifier:v22];

  if ([*(id *)(a1 + 32) isOwnerUser]) {
    goto LABEL_25;
  }
  id v93 = 0;
  uint64_t v94 = &v93;
  uint64_t v95 = 0x3032000000;
  id v96 = __Block_byref_object_copy__10691;
  id v97 = __Block_byref_object_dispose__10692;
  id v98 = 0;
  id v23 = dispatch_group_create();
  dispatch_group_enter(v23);
  uint64_t v24 = [*(id *)(a1 + 32) homeManager];
  id v25 = [v61 identifier];
  v87[0] = MEMORY[0x1E4F143A8];
  v87[1] = 3221225472;
  v87[2] = __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_3;
  v87[3] = &unk_1E6A06D60;
  id v26 = v61;
  uint64_t v27 = *(void *)(a1 + 32);
  id v88 = v26;
  uint64_t v89 = v27;
  id v92 = &v93;
  id v28 = v60;
  id v90 = v28;
  uint64_t v29 = v23;
  long long v91 = v29;
  [v24 cleanupOperationsForAccessory:v25 user:0 completion:v87];

  dispatch_time_t v30 = dispatch_time(0, 180000000000);
  if (dispatch_group_wait(v29, v30))
  {
    id v31 = (void *)MEMORY[0x1D9452090]();
    id v32 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    id v33 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      uint64_t v34 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      long long v105 = v34;
      __int16 v106 = 2112;
      id v107 = v26;
      _os_log_impl(&dword_1D49D5000, v33, OS_LOG_TYPE_ERROR, "%{public}@Timed out waiting for resident to respond to add accessory request: %@", buf, 0x16u);
    }
    uint64_t v35 = [MEMORY[0x1E4F28C58] hmErrorWithCode:8];
    id v36 = v94[5];
    v94[5] = (id)v35;
  }
  id v37 = v94[5];
  if (v37)
  {
    [*(id *)(a1 + 32) _sharedAdminDidFailToAddAccessories:v28];
    uint64_t v38 = [*(id *)(a1 + 64) responseHandler];

    if (v38)
    {
      __int16 v39 = [*(id *)(a1 + 64) responseHandler];
      ((void (**)(void, id, void))v39)[2](v39, v94[5], 0);
    }
    uint64_t v40 = *(void *)(a1 + 104);
    if (v40) {
      (*(void (**)(uint64_t, id))(v40 + 16))(v40, v94[5]);
    }
  }

  _Block_object_dispose(&v93, 8);
  if (!v37)
  {
LABEL_25:
    dispatch_group_t group = dispatch_group_create();
    if (v61)
    {
      dispatch_group_enter(group);
      v83[0] = MEMORY[0x1E4F143A8];
      v83[1] = 3221225472;
      v83[2] = __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_1301;
      v83[3] = &unk_1E6A143D0;
      v83[4] = *(void *)(a1 + 32);
      id v41 = v61;
      id v84 = v41;
      id v85 = *(id *)(a1 + 72);
      long long v86 = group;
      [v41 readInitialRequiredCharacteristicsForAccessory:v83];
      __int16 v42 = [*(id *)(a1 + 40) hapAccessoryLocal];
      [v41 enableNotificationsWithHAPAccessory:v42 homeNotificationsEnabled:v64 != 0];
    }
    long long v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    id obj = *(id *)(a1 + 56);
    uint64_t v43 = [obj countByEnumeratingWithState:&v79 objects:v103 count:16];
    if (v43)
    {
      uint64_t v44 = *(void *)v80;
      do
      {
        for (uint64_t j = 0; j != v43; ++j)
        {
          if (*(void *)v80 != v44) {
            objc_enumerationMutation(obj);
          }
          uint64_t v46 = *(void **)(*((void *)&v79 + 1) + 8 * j);
          id v47 = *(void **)(a1 + 32);
          id v48 = [v46 uuid];
          id v49 = [v47 accessoryWithUUID:v48];

          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v50 = v49;
          }
          else {
            id v50 = 0;
          }
          id v51 = v50;

          if (v51)
          {
            dispatch_group_enter(group);
            v76[0] = MEMORY[0x1E4F143A8];
            v76[1] = 3221225472;
            v76[2] = __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_2_1303;
            v76[3] = &unk_1E6A18BA0;
            v76[4] = *(void *)(a1 + 32);
            id v52 = v51;
            id v77 = v52;
            id v78 = group;
            [v52 readInitialRequiredCharacteristicsForAccessory:v76];
            id v53 = [v46 hapAccessoryLocal];
            [v52 enableNotificationsWithHAPAccessory:v53 homeNotificationsEnabled:v64 != 0];
          }
        }
        uint64_t v43 = [obj countByEnumeratingWithState:&v79 objects:v103 count:16];
      }
      while (v43);
    }

    dispatch_time_t v54 = dispatch_time(0, 3000000000);
    dispatch_group_wait(group, v54);
    if ([*(id *)(a1 + 32) isOwnerUser]) {
      [*(id *)(a1 + 32) _setupActiveNetworkRouterAccessory:v60 existingRouterAccessories:*(void *)(a1 + 80)];
    }
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_1304;
    aBlock[3] = &unk_1E6A18488;
    void aBlock[4] = *(void *)(a1 + 32);
    id v72 = v60;
    id v73 = *(id *)(a1 + 64);
    id v75 = *(id *)(a1 + 104);
    id v74 = *(id *)(a1 + 88);
    __int16 v55 = _Block_copy(aBlock);
    id v56 = v55;
    if (v61)
    {
      [*(id *)(a1 + 72) begin];
      id v93 = *(id *)(a1 + 72);
      uint64_t v57 = [MEMORY[0x1E4F1C9C8] date];
      uint64_t v58 = *(void *)(a1 + 96);
      v65[0] = MEMORY[0x1E4F143A8];
      v65[1] = 3221225472;
      void v65[2] = __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_2_1305;
      void v65[3] = &unk_1E6A16978;
      id v59 = v57;
      id v66 = v59;
      id v67 = *(id *)(a1 + 72);
      id v68 = v61;
      id v69 = *(id *)(a1 + 96);
      id v70 = v56;
      [v68 commissionToThreadNetworkWithPairingEvent:v58 completion:v65];

      __HMFActivityScopeLeave();
    }
    else
    {
      (*((void (**)(void *))v55 + 2))(v55);
    }
  }
}

void __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_3(uint64_t a1)
{
  if (([*(id *)(a1 + 32) supportsCHIP] & 1) != 0
    || (uint64_t v3 = *(void *)(a1 + 32),
        id v2 = *(void **)(a1 + 40),
        uint64_t v4 = *(void *)(*(void *)(a1 + 64) + 8),
        id v12 = *(id *)(v4 + 40),
        int v5 = [v2 _addOwnerToPrimaryAccessory:v3 error:&v12],
        objc_storeStrong((id *)(v4 + 40), v12),
        v5))
  {
    unint64_t v6 = *(void **)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    void v10[2] = __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_4;
    void v10[3] = &unk_1E6A10A30;
    long long v9 = *(_OWORD *)(a1 + 56);
    id v8 = (id)v9;
    long long v11 = v9;
    [v6 _notifyOwnerOfAddedAccessories:v7 completion:v10];
  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
  }
}

void __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_1301(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  unint64_t v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    id v8 = [*(id *)(a1 + 40) name];
    long long v9 = [*(id *)(a1 + 40) uuid];
    id v10 = [v9 UUIDString];
    [*(id *)(a1 + 40) supportsTargetController];
    long long v11 = HMFBooleanToString();
    *(_DWORD *)buf = 138544130;
    *(void *)&uint8_t buf[4] = v7;
    __int16 v16 = 2112;
    id v17 = v8;
    __int16 v18 = 2112;
    id v19 = v10;
    __int16 v20 = 2112;
    id v21 = v11;
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Primary accessory %@/%@ (supportsTargetController %@) being added to home", buf, 0x2Au);
  }
  [*(id *)(a1 + 40) autoConfigureTargetController];
  [*(id *)(a1 + 48) begin];
  *(void *)buf = *(id *)(a1 + 48);
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 56));
  id v12 = *(void **)(a1 + 40);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_1302;
  v13[3] = &unk_1E6A19B30;
  id v14 = *(id *)(a1 + 56);
  [v12 handleUpdatedServicesForThreadManagementWithCompletion:v13];

  __HMFActivityScopeLeave();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_2_1303(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  unint64_t v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    id v8 = [*(id *)(a1 + 40) name];
    long long v9 = [*(id *)(a1 + 40) uuid];
    id v10 = [v9 UUIDString];
    [*(id *)(a1 + 40) supportsTargetController];
    long long v11 = HMFBooleanToString();
    int v12 = 138544130;
    uint64_t v13 = v7;
    __int16 v14 = 2112;
    id v15 = v8;
    __int16 v16 = 2112;
    id v17 = v10;
    __int16 v18 = 2112;
    id v19 = v11;
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Bridged accessory %@/%@ (supportsTargetController %@) being added to home", (uint8_t *)&v12, 0x2Au);
  }
  [*(id *)(a1 + 40) autoConfigureTargetController];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

uint64_t __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_1304(uint64_t a1)
{
  [*(id *)(a1 + 32) _notifyClientOfNewlyAddedAccessories:*(void *)(a1 + 40) requestMessage:*(void *)(a1 + 48)];
  uint64_t result = *(void *)(a1 + 64);
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

uint64_t __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_2_1305(uint64_t a1, void *a2)
{
  id v3 = (void *)MEMORY[0x1E4F1C9C8];
  id v4 = a2;
  id v5 = [v3 date];
  [v5 timeIntervalSinceDate:*(void *)(a1 + 32)];
  double v7 = v6;

  [*(id *)(a1 + 48) uuid];
  id v8 = (id)[NSNumber numberWithDouble:v7];
  [v4 domain];

  [v4 code];
  [*(id *)(a1 + 56) setThreadCommissioningDuration:v7];
  [*(id *)(a1 + 56) setThreadCommissioningError:v4];

  long long v9 = *(uint64_t (**)(void))(*(void *)(a1 + 64) + 16);
  return v9();
}

void __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_1302(uint64_t a1)
{
}

void __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_4(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

- (HMDBackgroundTaskManager)backgroundTaskManager
{
  return +[HMDBackgroundTaskManager sharedManager];
}

- (BOOL)hasNeverAddedAnyHAPAccessory
{
  id v3 = [(HMDHome *)self firstHAPAccessoryAddedDate];
  if (v3)
  {
    BOOL v4 = 0;
  }
  else
  {
    id v5 = [(HMDHome *)self hapAccessories];
    BOOL v4 = [v5 count] == 0;
  }
  return v4;
}

- (void)_processLegacyPairingRequestForMessage:(id)a3 cancelPairing:(BOOL)a4 context:(id)a5
{
  BOOL v6 = a4;
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v50 = a5;
  long long v9 = [v8 uuidForKey:@"kAccessoryUUID"];
  if (v9)
  {
    if (v6)
    {
      id v10 = [v8 responseHandler];
      [(HMDHome *)self _cancelPairingWithAccessoryUUID:v9 context:v50 completionHandler:v10];
    }
    else
    {
      id v49 = [v8 stringForKey:@"kAccessoryPairingPasswordKey"];
      id v48 = [v8 stringForKey:@"kAccessoryOnboardingSetupPayloadStringKey"];
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      id v17 = [(HMDHome *)self addPendingAccessories];
      __int16 v18 = objc_msgSend(v17, "hm_allKeys");

      uint64_t v19 = [v18 countByEnumeratingWithState:&v51 objects:v55 count:16];
      if (v19)
      {
        uint64_t v20 = *(void *)v52;
LABEL_9:
        uint64_t v21 = 0;
        while (1)
        {
          if (*(void *)v52 != v20) {
            objc_enumerationMutation(v18);
          }
          uint64_t v22 = *(void **)(*((void *)&v51 + 1) + 8 * v21);
          id v23 = [v22 accessoryUUID];
          char v24 = [v23 isEqual:v9];

          if (v24) {
            break;
          }
          if (v19 == ++v21)
          {
            uint64_t v19 = [v18 countByEnumeratingWithState:&v51 objects:v55 count:16];
            if (v19) {
              goto LABEL_9;
            }
            goto LABEL_15;
          }
        }
        id v25 = v22;

        if (!v25) {
          goto LABEL_24;
        }
        id v26 = (void *)MEMORY[0x1D9452090]();
        uint64_t v27 = self;
        id v28 = HMFGetOSLogHandle();
        BOOL v29 = os_log_type_enabled(v28, OS_LOG_TYPE_INFO);
        if (v49)
        {
          if (v29)
          {
            dispatch_time_t v30 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            uint64_t v57 = v30;
            __int16 v58 = 2112;
            id v59 = v9;
            _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_INFO, "%{public}@Storing the setupCode for accessory %@", buf, 0x16u);
          }
          id v31 = [(HMDHome *)v27 addPendingAccessorySetupCodes];
          [v31 setObject:v49 forKey:v9];

          id v32 = [(HMDHome *)v27 addPendingAccessoryOnboardingSetupPayloadStrings];
          [v32 setObject:v48 forKeyedSubscript:v9];

          id v33 = [(HMDHome *)v27 accessoryBrowser];
          uint64_t v34 = [v33 unpairedAccessoryWithUUID:v9];

          if (v34)
          {
            uint64_t v35 = [(HMDHome *)v27 accessoryBrowser];
            [v35 handleSetupCodeAvailable:v34];
          }
          id v36 = [(HMDHome *)v27 addPendingAccessorySetupCodeHandlers];
          id v37 = [v36 objectForKeyedSubscript:v9];

          if (v37)
          {
            os_unfair_recursive_lock_lock_with_options();
            [(NSMutableDictionary *)v27->_addPendingAccessorySetupCodeHandlers removeObjectForKey:v9];
            os_unfair_recursive_lock_unlock();
            ((void (**)(void, void *, void *, void))v37)[2](v37, v49, v48, 0);
          }
          else
          {
            uint64_t v44 = (void *)MEMORY[0x1D9452090]();
            id v45 = v27;
            uint64_t v46 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
            {
              id v47 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543618;
              uint64_t v57 = v47;
              __int16 v58 = 2112;
              id v59 = v9;
              _os_log_impl(&dword_1D49D5000, v46, OS_LOG_TYPE_INFO, "%{public}@No handler to provide the setup code to for accessory: %@", buf, 0x16u);
            }
          }
          [v8 respondWithSuccess];
        }
        else
        {
          if (v29)
          {
            __int16 v42 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            uint64_t v57 = v42;
            __int16 v58 = 2112;
            id v59 = v9;
            _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_INFO, "%{public}@No setupCode specified to continue pairing with accessory %@", buf, 0x16u);
          }
          uint64_t v43 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
          [v8 respondWithError:v43];
        }
      }
      else
      {
LABEL_15:

LABEL_24:
        uint64_t v38 = (void *)MEMORY[0x1D9452090]();
        __int16 v39 = self;
        uint64_t v40 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
        {
          id v41 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          uint64_t v57 = v41;
          __int16 v58 = 2112;
          id v59 = v9;
          _os_log_impl(&dword_1D49D5000, v40, OS_LOG_TYPE_INFO, "%{public}@Accessory with UUID %@ not being added to the home", buf, 0x16u);
        }
        id v25 = [MEMORY[0x1E4F28C58] hmErrorWithCode:79];
        [v8 respondWithError:v25];
      }
    }
  }
  else
  {
    long long v11 = (void *)MEMORY[0x1D9452090]();
    int v12 = self;
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      __int16 v14 = HMFGetLogIdentifier();
      id v15 = [v8 messagePayload];
      *(_DWORD *)buf = 138543618;
      uint64_t v57 = v14;
      __int16 v58 = 2112;
      id v59 = v15;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@No accessory UUID found in payload: %@", buf, 0x16u);
    }
    __int16 v16 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    [v8 respondWithError:v16];
  }
}

- (void)_cancelPairingWithAccessoryUUID:(id)a3 context:(id)a4 completionHandler:(id)a5
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v39 = a4;
  id v9 = a5;
  id v10 = [(HMDHome *)self accessoryBrowser];
  long long v11 = [v10 unassociatedAccessories];
  int v12 = objc_msgSend(v11, "hmf_firstObjectWithUUID:", v8);

  id v13 = v12;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    __int16 v14 = v13;
  }
  else {
    __int16 v14 = 0;
  }
  id v15 = v14;

  if (v15)
  {
    v42[0] = MEMORY[0x1E4F143A8];
    v42[1] = 3221225472;
    void v42[2] = __69__HMDHome__cancelPairingWithAccessoryUUID_context_completionHandler___block_invoke;
    v42[3] = &unk_1E6A186E0;
    id v43 = v9;
    [v15 cancelConfigurationWithCompletionHandler:v42];
    __int16 v16 = v43;
  }
  else
  {
    id v17 = [(HMDHome *)self accessoryBrowser];
    uint64_t v38 = [v17 unpairedAccessoryWithUUID:v8];

    __int16 v18 = [(HMDHome *)self addPendingAccessorySetupCodeHandlers];
    id v37 = [v18 objectForKeyedSubscript:v8];

    uint64_t v19 = (void *)MEMORY[0x1D9452090]();
    uint64_t v20 = self;
    uint64_t v21 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      uint64_t v22 = HMFGetLogIdentifier();
      id v23 = [v8 UUIDString];
      *(_DWORD *)buf = 138543618;
      id v45 = v22;
      __int16 v46 = 2112;
      id v47 = v23;
      _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@Canceling pairing and removing all state for accessory %@", buf, 0x16u);
    }
    os_unfair_recursive_lock_lock_with_options();
    char v24 = [(NSMapTable *)v20->_addPendingAccessories hm_allKeys];
    v40[0] = MEMORY[0x1E4F143A8];
    v40[1] = 3221225472;
    v40[2] = __69__HMDHome__cancelPairingWithAccessoryUUID_context_completionHandler___block_invoke_1296;
    v40[3] = &unk_1E6A06D10;
    id v25 = v8;
    id v41 = v25;
    id v26 = objc_msgSend(v24, "na_firstObjectPassingTest:", v40);

    [(NSMutableDictionary *)v20->_addPendingAccessorySetupCodeHandlers removeObjectForKey:v25];
    if (v26) {
      [(NSMapTable *)v20->_addPendingAccessories removeObjectForKey:v26];
    }

    uint64_t v27 = os_unfair_recursive_lock_unlock();
    if (v38)
    {
      id v28 = [(HMDHome *)v20 accessoryBrowser];
      BOOL v29 = [MEMORY[0x1E4F28C58] hmErrorWithCode:23];
      [v28 cancelPairingWithAccessory:v38 error:v29 context:v39];
    }
    if (v37)
    {
      dispatch_time_t v30 = [MEMORY[0x1E4F28C58] hmErrorWithCode:23];
      ((void (**)(void, void, void, void *))v37)[2](v37, 0, 0, v30);

      if (v9) {
        (*((void (**)(id, void, void))v9 + 2))(v9, 0, 0);
      }
    }
    else
    {
      context = (void *)MEMORY[0x1D9452090](v27);
      id v31 = v20;
      id v32 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        id v33 = HMFGetLogIdentifier();
        uint64_t v34 = objc_msgSend(v25, "UUIDString", context);
        *(_DWORD *)buf = 138543618;
        id v45 = v33;
        __int16 v46 = 2112;
        id v47 = v34;
        _os_log_impl(&dword_1D49D5000, v32, OS_LOG_TYPE_INFO, "%{public}@Unable to find setup available completion handler for accessory %@", buf, 0x16u);
      }
      if (v9)
      {
        uint64_t v35 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
        (*((void (**)(id, void *, void))v9 + 2))(v9, v35, 0);
      }
    }

    __int16 v16 = (void *)v38;
  }
}

uint64_t __69__HMDHome__cancelPairingWithAccessoryUUID_context_completionHandler___block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, 0, 0);
  }
  return result;
}

uint64_t __69__HMDHome__cancelPairingWithAccessoryUUID_context_completionHandler___block_invoke_1296(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 accessoryUUID];
  uint64_t v4 = [v2 isEqual:v3];

  return v4;
}

- (void)_processPairingRequestForMessage:(id)a3 cancelPairing:(BOOL)a4 context:(id)a5
{
  BOOL v6 = a4;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a5;
  id v10 = [v8 dataForKey:@"kAccessoryDescriptionDataKey"];
  id v18 = 0;
  long long v11 = [(HMDHome *)self _setupDescriptionFromData:v10 error:&v18];
  id v12 = v18;
  if (v11)
  {
    if (v6)
    {
      [(HMDHome *)self _cancelPairingWithAccessoryDescription:v11 context:v9];
      [v8 respondWithPayload:0];
    }
  }
  else
  {
    id v13 = (void *)MEMORY[0x1D9452090]();
    __int16 v14 = self;
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      __int16 v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v20 = v16;
      __int16 v21 = 2112;
      id v22 = v12;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive setup accessory description from accessory description data: %@", buf, 0x16u);
    }
    id v17 = [MEMORY[0x1E4F28C58] hmErrorWithCode:20];
    [v8 respondWithError:v17];
  }
}

- (void)_cancelPairingWithAccessoryDescription:(id)a3 context:(id)a4
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = [v6 accessoryUUID];
  id v9 = (void *)MEMORY[0x1D9452090]();
  id v10 = self;
  long long v11 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    id v12 = HMFGetLogIdentifier();
    int v15 = 138543618;
    __int16 v16 = v12;
    __int16 v17 = 2112;
    id v18 = v6;
    _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Canceling pairing and removing all state for accessory with description %@", (uint8_t *)&v15, 0x16u);
  }
  os_unfair_recursive_lock_lock_with_options();
  [(NSMapTable *)v10->_addPendingAccessories removeObjectForKey:v6];
  if (v8)
  {
    [(NSMutableDictionary *)v10->_addPendingAccessorySetupCodes removeObjectForKey:v8];
    [(NSMutableDictionary *)v10->_addPendingAccessoryOnboardingSetupPayloadStrings removeObjectForKey:v8];
    [(NSMutableDictionary *)v10->_addPendingAccessorySetupCodeHandlers removeObjectForKey:v8];
  }
  os_unfair_recursive_lock_unlock();
  id v13 = [(HMDHome *)v10 accessoryBrowser];
  __int16 v14 = [MEMORY[0x1E4F28C58] hmErrorWithCode:23];
  [v13 cancelPairingWithAccessoryDescription:v6 error:v14 context:v7];
}

- (void)_handleContinuePairingAccessory:(id)a3
{
}

- (void)_handleCancelPairingAccessory:(id)a3
{
  uint64_t v4 = (void *)MEMORY[0x1E4F28C58];
  id v5 = a3;
  id v6 = [v4 hmInternalErrorWithCode:1090];
  id v8 = +[HMDMatterAccessoryPairingEndContext hmContextWithCancelledError:v6];

  id v7 = [v5 dataForKey:@"kAccessoryDescriptionDataKey"];

  if (v7) {
    [(HMDHome *)self _processPairingRequestForMessage:v5 cancelPairing:1 context:v8];
  }
  else {
    [(HMDHome *)self _processLegacyPairingRequestForMessage:v5 cancelPairing:1 context:v8];
  }
}

- (id)_setupCodeProviderForMessage:(id)a3
{
  id v4 = a3;
  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __40__HMDHome__setupCodeProviderForMessage___block_invoke;
  aBlock[3] = &unk_1E6A06D38;
  objc_copyWeak(&v11, &location);
  id v5 = v4;
  id v10 = v5;
  id v6 = _Block_copy(aBlock);
  id v7 = (void *)[v6 copy];

  objc_destroyWeak(&v11);
  objc_destroyWeak(&location);

  return v7;
}

void __40__HMDHome__setupCodeProviderForMessage___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v11 = WeakRetained;
  if (WeakRetained)
  {
    id v12 = [WeakRetained workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __40__HMDHome__setupCodeProviderForMessage___block_invoke_2;
    block[3] = &unk_1E6A18488;
    void block[4] = v11;
    id v15 = v7;
    id v16 = v8;
    id v18 = v9;
    id v17 = *(id *)(a1 + 32);
    dispatch_async(v12, block);
  }
  else
  {
    id v13 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    (*((void (**)(id, void, void, void *))v9 + 2))(v9, 0, 0, v13);
  }
}

void __40__HMDHome__setupCodeProviderForMessage___block_invoke_2(id *a1)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  id v2 = [a1[4] homeManager];
  id v3 = [a1[5] uuid];
  uint64_t v4 = [a1[5] name];
  id v5 = (void *)v4;
  if (v3) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6 || (id v7 = a1[6]) == 0)
  {
    id v15 = (void *)MEMORY[0x1D9452090]();
    id v16 = a1[4];
    id v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      id v18 = HMFGetLogIdentifier();
      uint64_t v19 = [v3 UUIDString];
      *(_DWORD *)buf = 138543874;
      __int16 v71 = v18;
      __int16 v72 = 2112;
      id v73 = v5;
      __int16 v74 = 2112;
      id v75 = v19;
      _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Accessory %@/%@ went away while being added to home", buf, 0x20u);
    }
    id v20 = a1[8];
    __int16 v21 = [MEMORY[0x1E4F28C58] hmErrorWithCode:4];
    (*((void (**)(id, void, void, void *))v20 + 2))(v20, 0, 0, v21);
  }
  else
  {
    if ([v7 isEqualToString:@"HMSetupCodeProviderReasonBadPassword"])
    {
      id v8 = (void *)MEMORY[0x1D9452090]();
      id v9 = a1[4];
      id v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        id v11 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        __int16 v71 = v11;
        __int16 v72 = 2112;
        id v73 = v3;
        _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Clearing previous password on bad-password error for accessory: %@", buf, 0x16u);
      }
      id v12 = [a1[4] addPendingAccessorySetupCodes];
      [v12 removeObjectForKey:v3];

      id v13 = [a1[4] addPendingAccessoryOnboardingSetupPayloadStrings];
      [v13 removeObjectForKey:v3];
    }
    __int16 v14 = [a1[7] stringForKey:@"kAccessoryPairingPasswordKey"];
    if (v14 && [a1[7] isEntitledForSPIAccess])
    {
      if ([a1[6] isEqualToString:@"HMSetupCodeProviderReasonBadPassword"])
      {

LABEL_27:
        id v43 = (void *)MEMORY[0x1D9452090]();
        id v44 = a1[4];
        id v45 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
        {
          __int16 v46 = HMFGetLogIdentifier();
          id v47 = [a1[7] stringForKey:@"kAccessoryPairingPasswordKey"];
          uint64_t v48 = [v3 UUIDString];
          *(_DWORD *)buf = 138544130;
          __int16 v71 = v46;
          __int16 v72 = 2112;
          id v73 = v47;
          __int16 v74 = 2112;
          id v75 = v5;
          __int16 v76 = 2112;
          id v77 = v48;
          _os_log_impl(&dword_1D49D5000, v45, OS_LOG_TYPE_INFO, "%{public}@Provided password %@ incorrect for accessory %@/%@", buf, 0x2Au);
        }
        id v49 = a1[8];
        __int16 v21 = [MEMORY[0x1E4F28C58] hmPrivateErrorWithCode:2002];
        (*((void (**)(id, void, void, void *))v49 + 2))(v49, 0, 0, v21);
        goto LABEL_17;
      }
      char v42 = [a1[6] isEqualToString:@"HMSetupCodeProviderReasontTimeoutRetry"];

      if (v42) {
        goto LABEL_27;
      }
    }
    else
    {
    }
    os_unfair_recursive_lock_lock_with_options();
    id v22 = (void *)[a1[8] copy];
    uint64_t v23 = _Block_copy(v22);
    [*((id *)a1[4] + 94) setObject:v23 forKeyedSubscript:v3];

    os_unfair_recursive_lock_unlock();
    if ([a1[6] isEqualToString:@"HMSetupCodeProviderReasonInitial"])
    {
      char v24 = [a1[4] addPendingAccessorySetupCodes];
      __int16 v21 = [v24 objectForKey:v3];

      id v25 = [a1[4] addPendingAccessoryOnboardingSetupPayloadStrings];
      id v26 = [v25 objectForKeyedSubscript:v3];

      uint64_t v27 = (void *)MEMORY[0x1D9452090]();
      id v28 = a1[4];
      BOOL v29 = HMFGetOSLogHandle();
      BOOL v30 = os_log_type_enabled(v29, OS_LOG_TYPE_INFO);
      if (v21)
      {
        if (v30)
        {
          id v31 = HMFGetLogIdentifier();
          id v32 = a1[5];
          *(_DWORD *)buf = 138543618;
          __int16 v71 = v31;
          __int16 v72 = 2112;
          id v73 = v32;
          _os_log_impl(&dword_1D49D5000, v29, OS_LOG_TYPE_INFO, "%{public}@Providing setupCode for accessory %@ and removing from tracking", buf, 0x16u);
        }
        (*((void (**)(void))a1[8] + 2))();
      }
      else
      {
        if (v30)
        {
          id v50 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543874;
          __int16 v71 = v50;
          __int16 v72 = 2112;
          id v73 = v5;
          __int16 v74 = 2112;
          id v75 = v3;
          _os_log_impl(&dword_1D49D5000, v29, OS_LOG_TYPE_INFO, "%{public}@Accessory %@/%@ prompted for pairing setupCode but did not receive it from HomeUIService", buf, 0x20u);
        }
        if ([a1[7] BOOLForKey:@"kAccessorySetupCodeDeferredKey"])
        {
          long long v51 = (void *)MEMORY[0x1D9452090]();
          id v52 = a1[4];
          long long v53 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
          {
            long long v54 = HMFGetLogIdentifier();
            __int16 v55 = [v3 UUIDString];
            *(_DWORD *)buf = 138543874;
            __int16 v71 = v54;
            __int16 v72 = 2112;
            id v73 = v5;
            __int16 v74 = 2112;
            id v75 = v55;
            _os_log_impl(&dword_1D49D5000, v53, OS_LOG_TYPE_INFO, "%{public}@addAccessory request from HomeUIService - waiting for setupCode for accessory %@/%@", buf, 0x20u);
          }
        }
        else
        {
          id v61 = [v2 accessorySetupManager];
          id v62 = [a1[4] uuid];
          long long v63 = [a1[7] proxyConnection];
          v65[0] = MEMORY[0x1E4F143A8];
          v65[1] = 3221225472;
          void v65[2] = __40__HMDHome__setupCodeProviderForMessage___block_invoke_1291;
          void v65[3] = &unk_1E6A18F68;
          void v65[4] = a1[4];
          id v67 = a1[8];
          id v66 = v3;
          [v61 launchAccessorySetupHostToRequestSetupCodeForAccessoryWithUUID:v66 accessoryName:v5 homeUUID:v62 clientConnection:v63 completionHandler:v65];
        }
      }
    }
    else
    {
      id v33 = objc_alloc(MEMORY[0x1E4F65488]);
      uint64_t v34 = [a1[4] uuid];
      __int16 v21 = (void *)[v33 initWithTarget:v34];

      id v35 = objc_alloc(MEMORY[0x1E4F654B0]);
      id v36 = a1[6];
      id v68 = @"kAccessorySetupCodeReasonKey";
      id v69 = v36;
      id v37 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v69 forKeys:&v68 count:1];
      uint64_t v38 = (void *)[v35 initWithName:*MEMORY[0x1E4F2D198] qualityOfService:33 destination:v21 payload:v37];

      id v39 = [v2 accessorySetupManager];
      uint64_t v40 = [v39 accessorySetupHostClientConnection];

      if (v40)
      {
        [v38 setTransport:v40];
        id v41 = [a1[4] msgDispatcher];
        [v41 sendMessage:v38];
      }
      else
      {
        context = (void *)MEMORY[0x1D9452090]();
        id v56 = a1[4];
        uint64_t v57 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
        {
          __int16 v58 = HMFGetLogIdentifier();
          id v59 = a1[5];
          *(_DWORD *)buf = 138543618;
          __int16 v71 = v58;
          __int16 v72 = 2112;
          id v73 = v59;
          _os_log_impl(&dword_1D49D5000, v57, OS_LOG_TYPE_INFO, "%{public}@No HomeUIService connection for accessory %@", buf, 0x16u);
        }
        id v60 = a1[8];
        id v41 = [MEMORY[0x1E4F28C58] hmPrivateErrorWithCode:2002];
        (*((void (**)(id, void, void, void *))v60 + 2))(v60, 0, 0, v41);
      }
    }
  }
LABEL_17:
}

void __40__HMDHome__setupCodeProviderForMessage___block_invoke_1291(id *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = [a1[4] workQueue];
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    void v5[2] = __40__HMDHome__setupCodeProviderForMessage___block_invoke_2_1292;
    v5[3] = &unk_1E6A18398;
    void v5[4] = a1[4];
    id v6 = v3;
    id v8 = a1[6];
    id v7 = a1[5];
    dispatch_async(v4, v5);
  }
}

uint64_t __40__HMDHome__setupCodeProviderForMessage___block_invoke_2_1292(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = *(id *)(a1 + 32);
  uint64_t v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    id v5 = HMFGetLogIdentifier();
    uint64_t v6 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    id v13 = v5;
    __int16 v14 = 2112;
    uint64_t v15 = v6;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_ERROR, "%{public}@Failed to request setup code for accessory: %@", buf, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  os_unfair_recursive_lock_lock_with_options();
  id v7 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 776), "hm_allKeys");
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = __40__HMDHome__setupCodeProviderForMessage___block_invoke_1293;
  void v10[3] = &unk_1E6A06D10;
  id v11 = *(id *)(a1 + 48);
  id v8 = objc_msgSend(v7, "na_firstObjectPassingTest:", v10);

  if (v8) {
    [*(id *)(*(void *)(a1 + 32) + 776) removeObjectForKey:v8];
  }
  [*(id *)(*(void *)(a1 + 32) + 752) removeObjectForKey:*(void *)(a1 + 48)];
  [*(id *)(*(void *)(a1 + 32) + 760) removeObjectForKey:*(void *)(a1 + 48)];
  [*(id *)(*(void *)(a1 + 32) + 768) removeObjectForKey:*(void *)(a1 + 48)];

  return os_unfair_recursive_lock_unlock();
}

uint64_t __40__HMDHome__setupCodeProviderForMessage___block_invoke_1293(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 accessoryUUID];
  uint64_t v4 = [v2 isEqual:v3];

  return v4;
}

- (void)getReachableIPAccessories:(unint64_t *)a3 btleAccessories:(unint64_t *)a4 mediaAccessories:(unint64_t *)a5
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)a3 | (unint64_t)a4)
  {
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id obj = [(HMDHome *)self accessories];
    uint64_t v5 = [obj countByEnumeratingWithState:&v25 objects:v29 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      unint64_t v7 = 0;
      unint64_t v8 = 0;
      unint64_t v9 = 0;
      uint64_t v10 = *(void *)v26;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v26 != v10) {
            objc_enumerationMutation(obj);
          }
          id v12 = *(id *)(*((void *)&v25 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v13 = v12;
          }
          else {
            id v13 = 0;
          }
          id v14 = v13;

          if (v14)
          {
            uint64_t v15 = [v14 matchingHAPAccessoryWithLinkType:1];
            v9 += [v15 isReachable];
            uint64_t v16 = [v14 matchingHAPAccessoryWithLinkType:2];

            v8 += [v16 isReachable];
          }
          id v17 = v12;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v18 = v17;
          }
          else {
            id v18 = 0;
          }
          id v19 = v18;

          unsigned int v20 = [v19 isReachable];
          v7 += v20;
        }
        uint64_t v6 = [obj countByEnumeratingWithState:&v25 objects:v29 count:16];
      }
      while (v6);
    }
    else
    {
      unint64_t v7 = 0;
      unint64_t v8 = 0;
      unint64_t v9 = 0;
    }

    if (a3) {
      *a3 = v9;
    }
    if (a4) {
      *a4 = v8;
    }
    if (a5) {
      *a5 = v7;
    }
  }
}

- (int64_t)reachableAppleMediaAccessoriesCount
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v2 = [(HMDHome *)self accessories];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    int64_t v5 = 0;
    uint64_t v6 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v2);
        }
        id v8 = *(id *)(*((void *)&v12 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          unint64_t v9 = v8;
        }
        else {
          unint64_t v9 = 0;
        }
        id v10 = v9;

        if (v10) {
          v5 += [v8 isReachable];
        }
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v4);
  }
  else
  {
    int64_t v5 = 0;
  }

  return v5;
}

- (int64_t)reachableAccessoriesCountExcludingMatter
{
  id v2 = self;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v3 = [(HMDHome *)self accessories];
  uint64_t v4 = [v3 countByEnumeratingWithState:&v29 objects:v39 count:16];
  if (v4)
  {
    uint64_t v6 = v4;
    int64_t v28 = 0;
    uint64_t v7 = *(void *)v30;
    *(void *)&long long v5 = 138543618;
    long long v25 = v5;
    long long v26 = v3;
    long long v27 = v2;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v30 != v7) {
          objc_enumerationMutation(v3);
        }
        id v9 = *(id *)(*((void *)&v29 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v10 = v9;
        }
        else {
          id v10 = 0;
        }
        id v11 = v10;

        if (v11)
        {
          if ([v11 isReachable] && (objc_msgSend(v11, "supportsCHIP") & 1) == 0)
          {
            long long v12 = (void *)MEMORY[0x1D9452090]();
            long long v13 = v2;
            long long v14 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
            {
              long long v15 = HMFGetLogIdentifier();
              uint64_t v16 = [v11 name];
              *(_DWORD *)buf = v25;
              uint64_t v34 = v15;
              __int16 v35 = 2112;
              id v36 = v16;
              _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_DEBUG, "%{public}@Accessory: %@ is reachable", buf, 0x16u);

              id v2 = v27;
              uint64_t v3 = v26;
            }

            ++v28;
          }
          if (objc_msgSend(v11, "supportsCHIP", v25))
          {
            uint64_t v17 = (void *)MEMORY[0x1D9452090]();
            id v18 = v2;
            id v19 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
            {
              unsigned int v20 = HMFGetLogIdentifier();
              __int16 v21 = [v11 name];
              int v22 = [v11 isReachable];
              *(_DWORD *)buf = 138543874;
              uint64_t v23 = @"NO";
              if (v22) {
                uint64_t v23 = @"YES";
              }
              uint64_t v34 = v20;
              __int16 v35 = 2112;
              id v36 = v21;
              __int16 v37 = 2112;
              uint64_t v38 = v23;
              _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_DEBUG, "%{public}@Ignoring Matter Accessory: %@ isReachable: %@", buf, 0x20u);

              uint64_t v3 = v26;
              id v2 = v27;
            }
          }
        }
      }
      uint64_t v6 = [v3 countByEnumeratingWithState:&v29 objects:v39 count:16];
    }
    while (v6);
  }
  else
  {
    int64_t v28 = 0;
  }

  return v28;
}

- (int64_t)reachableAccessoriesCount
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id obj = [(HMDHome *)self accessories];
  uint64_t v2 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    int64_t v4 = 0;
    uint64_t v5 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v16 != v5) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(id *)(*((void *)&v15 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v8 = v7;
        }
        else {
          id v8 = 0;
        }
        id v9 = v8;

        id v10 = v7;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v11 = v10;
        }
        else {
          id v11 = 0;
        }
        id v12 = v11;

        if (v9 && [v9 isReachable])
        {
          ++v4;
        }
        else if (v12 && [v12 isCurrentAccessory])
        {
          v4 += [v12 isReachable];
        }
      }
      uint64_t v3 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v3);
  }
  else
  {
    int64_t v4 = 0;
  }

  return v4;
}

- (void)_reachabilityChangedForAccessory:(id)a3 reachable:(BOOL)a4
{
  BOOL v56 = a4;
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v6);

  uint64_t v7 = [(HMDHome *)self reachableAccessoriesCount];
  int64_t v8 = [(HMDHome *)self previousReachableAccessoriesCount];
  int64_t v9 = [(HMDHome *)self reachableAppleMediaAccessoriesCount];
  int64_t v10 = [(HMDHome *)self previousReachableAppleMediaAccessoriesCount];
  [(HMDHome *)self setPreviousReachableAccessoriesCount:v7];
  uint64_t v11 = [(HMDHome *)self setPreviousReachableAppleMediaAccessoriesCount:v9];
  BOOL v12 = v9 + v7 < 1;
  uint64_t v57 = v8;
  uint64_t v55 = v10 + v8;
  if ((v10 + v8 < 0) ^ __OFADD__(v10, v8) | (v10 + v8 == 0)) {
    int v13 = 0;
  }
  else {
    int v13 = 1;
  }
  if ((v10 + v8 < 0) ^ __OFADD__(v10, v8) | (v10 + v8 == 0)) {
    BOOL v14 = v9 + v7 < 1;
  }
  else {
    BOOL v14 = 1;
  }
  char v15 = v12 ^ v13;
  if (((v12 ^ v13) & 1) == 0)
  {
    char v53 = v12 ^ v13;
    id v54 = v5;
    long long v16 = (void *)MEMORY[0x1D9452090](v11);
    long long v17 = self;
    long long v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      id v19 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138544642;
      uint64_t v60 = (uint64_t)v19;
      __int16 v61 = 2048;
      uint64_t v62 = v7;
      __int16 v63 = 2048;
      int64_t v64 = v9;
      __int16 v65 = 1024;
      BOOL v66 = v56;
      __int16 v67 = 2048;
      uint64_t v68 = v57;
      __int16 v69 = 2048;
      int64_t v70 = v10;
      _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@Total reachable accessories %ld, apple media accessories: %ld, reachable = %d,                      last known reachable = %ld, last known apple media reachable = %ld", buf, 0x3Au);
    }
    id v5 = v54;
    char v15 = v53;
  }
  uint64_t v20 = [(HMDHome *)self localCapabilitiesDataSource];
  int v21 = [v20 supportsRemoteAccess];

  if (v21)
  {
    uint64_t v58 = 0;
    [(HMDHome *)self getReachableIPAccessories:&v58 btleAccessories:0 mediaAccessories:0];
    if (v14)
    {
      if (v9 + v7 > 0 || v55 < 1) {
        goto LABEL_18;
      }
      int v22 = [(HMDHome *)self homeLocationHandler];
      [v22 accessoriesBecomeUnreachable];
    }
    else
    {
      int v22 = [(HMDHome *)self homeLocationHandler];
      [v22 accessoriesBecomeReachable];
    }

LABEL_18:
    uint64_t v23 = (void *)MEMORY[0x1D9452090]();
    char v24 = self;
    long long v25 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      uint64_t v26 = HMFGetLogIdentifier();
      long long v27 = (void *)v26;
      int64_t v28 = @"don't ";
      if (v7 > 0) {
        int64_t v28 = &stru_1F2C9F1A8;
      }
      *(_DWORD *)buf = 138543618;
      uint64_t v60 = v26;
      __int16 v61 = 2112;
      uint64_t v62 = (uint64_t)v28;
      _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_INFO, "%{public}@Notifying home manager that we %@have locally reachable accessories", buf, 0x16u);
    }
    long long v29 = [(HMDHome *)v24 homeManager];
    long long v30 = [(HMDHome *)v24 uuid];
    [v29 accessoriesAreLocallyReachableOnTransientDevice:v7 > 0 forHome:v30];

    if ([v5 accessoryReprovisionState] && v56)
    {
      char v31 = v15;
      long long v32 = (void *)MEMORY[0x1D9452090]();
      id v33 = v24;
      uint64_t v34 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        __int16 v35 = HMFGetLogIdentifier();
        [v5 name];
        v37 = id v36 = v5;
        *(_DWORD *)buf = 138543618;
        uint64_t v60 = (uint64_t)v35;
        __int16 v61 = 2112;
        uint64_t v62 = (uint64_t)v37;
        _os_log_impl(&dword_1D49D5000, v34, OS_LOG_TYPE_INFO, "%{public}@Accessory %@ reprovision state is updated to Not Required", buf, 0x16u);

        id v5 = v36;
      }

      [v5 setAccessoryReprovisionState:0];
      uint64_t v38 = [v5 uuid];
      [v29 updateGenerationCounterWithReason:@"ReprovisionStateChange" sourceUUID:v38 shouldNotifyClients:0];

      id v39 = [MEMORY[0x1E4F1CA60] dictionary];
      uint64_t v40 = [v5 uuid];
      id v41 = [v40 UUIDString];
      [v39 setObject:v41 forKeyedSubscript:@"kAccessoryUUID"];

      [v39 setObject:&unk_1F2DC7540 forKeyedSubscript:*MEMORY[0x1E4F2EC50]];
      char v42 = (void *)MEMORY[0x1E4F654B0];
      uint64_t v43 = *MEMORY[0x1E4F2EC40];
      [(HMDHome *)v33 messageDestination];
      id v45 = v44 = v5;
      __int16 v46 = [v42 messageWithName:v43 destination:v45 payload:v39];

      id v5 = v44;
      id v47 = [(HMDHome *)v33 msgDispatcher];
      [v47 sendMessage:v46 completionHandler:0];

      char v15 = v31;
    }
  }
  if (v7 >= 1 && v57 <= 0)
  {
    uint64_t v48 = (void *)MEMORY[0x1D9452090]();
    id v49 = self;
    id v50 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
    {
      long long v51 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v60 = (uint64_t)v51;
      _os_log_impl(&dword_1D49D5000, v50, OS_LOG_TYPE_INFO, "%{public}@Notifying that we see at least one reachable accessory", buf, 0xCu);
    }
    id v52 = [(HMDHome *)v49 notificationCenter];
    [v52 postNotificationName:@"HMDHomeCurrentDeviceHasReachableAccessories" object:v49];
  }
  if ((v15 & 1) == 0) {
    [(HMFTimer *)self->_homeLocationTimer resume];
  }
}

- (void)_handleAccessoryReachabilityChange:(id)a3
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 stringForKey:@"kHomeUUID"];
  uint64_t v6 = [(HMDHome *)self uuid];
  uint64_t v7 = [v6 UUIDString];
  char v8 = [v5 isEqualToString:v7];

  id v75 = self;
  __int16 v63 = v5;
  if (v8)
  {
    uint64_t v62 = 0;
  }
  else
  {
    int64_t v9 = (void *)MEMORY[0x1D9452090]();
    int64_t v10 = self;
    uint64_t v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      BOOL v12 = HMFGetLogIdentifier();
      int v13 = [(HMDHome *)v10 uuid];
      BOOL v14 = [v13 UUIDString];
      *(_DWORD *)buf = 138543874;
      id v88 = v12;
      __int16 v89 = 2112;
      id v90 = v5;
      __int16 v91 = 2112;
      id v92 = v14;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_ERROR, "%{public}@Home does not match, received: %@, current: %@", buf, 0x20u);
    }
    uint64_t v62 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:2 userInfo:0];
  }
  int64_t v64 = v4;
  char v15 = [v4 messagePayload];
  long long v16 = objc_msgSend(v15, "hmf_arrayForKey:", @"kAccessoriesListKey");

  long long v83 = 0u;
  long long v84 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  id obj = v16;
  uint64_t v67 = [obj countByEnumeratingWithState:&v81 objects:v96 count:16];
  if (v67)
  {
    uint64_t v66 = *(void *)v82;
    do
    {
      uint64_t v17 = 0;
      do
      {
        if (*(void *)v82 != v66) {
          objc_enumerationMutation(obj);
        }
        uint64_t v68 = v17;
        long long v18 = *(void **)(*((void *)&v81 + 1) + 8 * v17);
        long long v77 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        id v71 = [(HMDHome *)v75 accessories];
        uint64_t v76 = [v71 countByEnumeratingWithState:&v77 objects:v95 count:16];
        if (v76)
        {
          uint64_t v74 = *(void *)v78;
          __int16 v72 = v18;
          do
          {
            for (uint64_t i = 0; i != v76; ++i)
            {
              if (*(void *)v78 != v74) {
                objc_enumerationMutation(v71);
              }
              uint64_t v20 = *(void **)(*((void *)&v77 + 1) + 8 * i);
              int v21 = [v20 uuid];
              int v22 = [v21 UUIDString];

              uint64_t v23 = [v18 objectForKeyedSubscript:v22];
              if (v23)
              {
                char v24 = (void *)MEMORY[0x1D9452090]();
                long long v25 = v75;
                uint64_t v26 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
                {
                  long long v27 = HMFGetLogIdentifier();
                  *(_DWORD *)buf = 138543874;
                  id v88 = v27;
                  __int16 v89 = 2112;
                  id v90 = v22;
                  __int16 v91 = 2112;
                  id v92 = v23;
                  _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_INFO, "%{public}@Setting remote reachability for accessory: %@ to: %@", buf, 0x20u);
                }
                objc_msgSend(v20, "setRemotelyReachable:", objc_msgSend(v23, "BOOLValue"));
              }
              id v28 = v20;
              objc_opt_class();
              if (objc_opt_isKindOfClass()) {
                long long v29 = v28;
              }
              else {
                long long v29 = 0;
              }
              id v30 = v29;

              char v31 = [v30 identifier];

              if (v31)
              {
                long long v32 = [v30 identifier];
                id v33 = [v18 objectForKeyedSubscript:v32];

                if (v33)
                {
                  uint64_t v34 = [v33 unsignedIntegerValue];
                  context = (void *)MEMORY[0x1D9452090]();
                  __int16 v35 = v75;
                  id v36 = HMFGetOSLogHandle();
                  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
                  {
                    __int16 v37 = HMFGetLogIdentifier();
                    uint64_t v38 = [v28 identifier];
                    [v30 suspendedState];
                    HAPAccessorySuspendedStateDescription();
                    id v39 = v69 = v22;
                    HAPAccessorySuspendedStateDescription();
                    uint64_t v40 = v70 = v34;
                    *(_DWORD *)buf = 138544130;
                    id v88 = v37;
                    __int16 v89 = 2112;
                    id v90 = v38;
                    __int16 v91 = 2112;
                    id v92 = v39;
                    __int16 v93 = 2112;
                    uint64_t v94 = v40;
                    _os_log_impl(&dword_1D49D5000, v36, OS_LOG_TYPE_DEBUG, "%{public}@Handle Reachability change. Setting suspended state of accessory: %@ from '%@' to '%@'", buf, 0x2Au);

                    uint64_t v34 = v70;
                    int v22 = v69;
                  }
                  [v30 setSuspendedState:v34 shouldNotify:0];
                }

                long long v18 = v72;
              }
            }
            uint64_t v76 = [v71 countByEnumeratingWithState:&v77 objects:v95 count:16];
          }
          while (v76);
        }

        uint64_t v17 = v68 + 1;
      }
      while (v68 + 1 != v67);
      uint64_t v67 = [obj countByEnumeratingWithState:&v81 objects:v96 count:16];
    }
    while (v67);
  }

  id v41 = [v64 responseHandler];

  if (v41)
  {
    char v42 = [v64 responseHandler];
    ((void (**)(void, void *, void))v42)[2](v42, v62, 0);
  }
  uint64_t v43 = [v64 remoteSourceDevice];
  id v44 = [(HMDHome *)v75 primaryResident];
  id v45 = [v44 device];
  if ([v43 isEqual:v45])
  {
    BOOL v46 = [(HMDHome *)v75 currentRemoteReachabilityRegistration];

    if (v46) {
      goto LABEL_42;
    }
  }
  else
  {
  }
  id v47 = (void *)MEMORY[0x1D9452090]();
  uint64_t v48 = v75;
  id v49 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
  {
    id v50 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    id v88 = v50;
    __int16 v89 = 2112;
    id v90 = v43;
    _os_log_impl(&dword_1D49D5000, v49, OS_LOG_TYPE_INFO, "%{public}@De-registering stale remote reachability for accessories with device = %@", buf, 0x16u);
  }
  id v51 = objc_alloc(MEMORY[0x1E4F65480]);
  id v52 = [MEMORY[0x1E4F65488] allMessageDestinations];
  id v85 = @"kHomeUUID";
  char v53 = [(HMDHome *)v48 uuid];
  id v54 = [v53 UUIDString];
  long long v86 = v54;
  uint64_t v55 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v86 forKeys:&v85 count:1];
  BOOL v56 = (void *)[v51 initWithName:@"kDisableAccessoryReachabilityNotificationRequestKey" destination:v52 payload:v55];

  uint64_t v57 = [(HMDHome *)v48 homeManager];
  uint64_t v58 = [v57 messageDispatcher];
  id v59 = [(HMDHome *)v48 uuid];
  uint64_t v60 = [v43 remoteDestinationString];
  __int16 v61 = [(HMDHome *)v48 workQueue];
  [v58 sendSecureMessage:v56 target:v59 userID:0 destination:v60 responseQueue:v61 responseHandler:0];

LABEL_42:
}

- (void)_handleRemoteReachabilityNotificationTimerFired
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)MEMORY[0x1D9452090](self, a2);
  id v4 = self;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = HMFGetLogIdentifier();
    uint64_t v7 = [(HMDHome *)v4 remoteReachabilityNotificationPendingAccessories];
    *(_DWORD *)buf = 138543618;
    id v71 = v6;
    __int16 v72 = 2112;
    uint64_t v73 = (uint64_t)v7;
    _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Reachability notification timer fired, pending list: %@", buf, 0x16u);
  }
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  id obj = [(HMDHome *)v4 reachabilityRegisteredDevices];
  uint64_t v54 = [obj countByEnumeratingWithState:&v64 objects:v77 count:16];
  if (v54)
  {
    uint64_t v53 = *(void *)v65;
    *(void *)&long long v8 = 138543874;
    long long v51 = v8;
    unint64_t v9 = 0x1E4F28000uLL;
    uint64_t v58 = v4;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v65 != v53) {
          objc_enumerationMutation(obj);
        }
        uint64_t v55 = *(void **)(*((void *)&v64 + 1) + 8 * v10);
        uint64_t v56 = v10;
        uint64_t v11 = (void *)MEMORY[0x1E4F1CA48];
        BOOL v12 = [(HMDHome *)v4 remoteReachabilityNotificationPendingAccessories];
        id v59 = objc_msgSend(v11, "arrayWithCapacity:", objc_msgSend(v12, "count"));

        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        id v57 = [(HMDHome *)v4 accessories];
        uint64_t v13 = [v57 countByEnumeratingWithState:&v60 objects:v76 count:16];
        if (v13)
        {
          uint64_t v14 = v13;
          uint64_t v15 = *(void *)v61;
          do
          {
            for (uint64_t i = 0; i != v14; ++i)
            {
              if (*(void *)v61 != v15) {
                objc_enumerationMutation(v57);
              }
              uint64_t v17 = *(void **)(*((void *)&v60 + 1) + 8 * i);
              long long v18 = [v17 uuid];
              id v19 = [v18 UUIDString];
              uint64_t v20 = [(HMDHome *)v4 getReachabilityTupleForAccessoryUUID:v19];

              if (v20)
              {
                int v21 = (void *)MEMORY[0x1E4F1CA60];
                int v22 = objc_msgSend(*(id *)(v9 + 3792), "numberWithBool:", objc_msgSend(v20, "currentReachability"));
                uint64_t v23 = [v20 accessoryUUID];
                char v24 = [v21 dictionaryWithObject:v22 forKey:v23];

                id v25 = v17;
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  uint64_t v26 = v25;
                }
                else {
                  uint64_t v26 = 0;
                }
                id v27 = v26;

                id v28 = [v27 identifier];

                if (v28)
                {
                  long long v29 = objc_msgSend(*(id *)(v9 + 3792), "numberWithUnsignedInteger:", objc_msgSend(v27, "suspendedState"));
                  id v30 = [v27 identifier];
                  [v24 setObject:v29 forKey:v30];
                }
                [v59 addObject:v24];

                id v4 = v58;
              }
            }
            uint64_t v14 = [v57 countByEnumeratingWithState:&v60 objects:v76 count:16];
          }
          while (v14);
        }

        if ([v59 count])
        {
          unint64_t v31 = v9;
          long long v32 = (void *)MEMORY[0x1D9452090]();
          id v33 = v4;
          uint64_t v34 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
          {
            __int16 v35 = HMFGetLogIdentifier();
            uint64_t v36 = [v59 count];
            __int16 v37 = [v55 device];
            uint64_t v38 = [v37 remoteDestinationString];
            *(_DWORD *)buf = v51;
            id v71 = v35;
            __int16 v72 = 2048;
            uint64_t v73 = v36;
            __int16 v74 = 2112;
            id v75 = v38;
            _os_log_impl(&dword_1D49D5000, v34, OS_LOG_TYPE_INFO, "%{public}@Sending current reachability for %tu accessories to destination:%@", buf, 0x20u);
          }
          v68[0] = @"kAccessoriesListKey";
          id v39 = (void *)[v59 copy];
          v68[1] = @"kHomeUUID";
          v69[0] = v39;
          uint64_t v40 = [(HMDHome *)v33 uuid];
          id v41 = [v40 UUIDString];
          v69[1] = v41;
          char v42 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v69 forKeys:v68 count:2];

          uint64_t v43 = [MEMORY[0x1E4F65480] messageWithName:@"kRemoteReachabilityChangedNotificationKey" identifier:0 messagePayload:v42];
          id v44 = [(HMDHome *)v33 homeManager];
          id v45 = [v44 messageDispatcher];
          BOOL v46 = [(HMDHome *)v33 uuid];
          id v47 = [v55 device];
          uint64_t v48 = [v47 remoteDestinationString];
          id v49 = [(HMDHome *)v33 workQueue];
          [v45 sendSecureMessage:v43 target:v46 userID:0 destination:v48 responseQueue:v49 responseHandler:0];

          id v4 = v58;
          unint64_t v9 = v31;
        }

        uint64_t v10 = v56 + 1;
      }
      while (v56 + 1 != v54);
      uint64_t v54 = [obj countByEnumeratingWithState:&v64 objects:v77 count:16];
    }
    while (v54);
  }

  id v50 = [(HMDHome *)v4 remoteReachabilityNotificationPendingAccessories];
  [v50 removeAllObjects];

  [(HMDHome *)v4 setReachabilityNotificationTimer:0];
}

- (void)_updateReachabilityChangeToRegisteredDevices:(id)a3
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 uuid];
  uint64_t v6 = [v5 UUIDString];

  uint64_t v7 = [(HMDHome *)self getReachabilityTupleForAccessoryUUID:v6];
  if ([v4 isReachable])
  {
    BOOL v8 = 1;
  }
  else
  {
    unint64_t v9 = [(HMDHome *)self homeManager];
    uint64_t v10 = [v9 residentMesh];
    uint64_t v11 = [v10 deviceForAccessory:v4 residentOrder:1 reachableResidents:0];
    BOOL v8 = v11 != 0;
  }
  id v12 = v4;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  id v14 = v13;

  if (v14)
  {
    objc_msgSend(v7, "setPreviouslySentSuspendedState:", objc_msgSend(v7, "currentSuspendedState"));
    objc_msgSend(v7, "setCurrentSuspendedState:", objc_msgSend(v14, "suspendedState"));
  }
  if (!v7)
  {
    int v22 = +[HMDAccessoryReachabilityTuple tupleWithAccessoryUUID:v6 reachable:v8];
    objc_msgSend(v22, "setCurrentSuspendedState:", objc_msgSend(v14, "suspendedState"));
    uint64_t v23 = [(HMDHome *)self remoteReachabilityNotificationPendingAccessories];
    [v23 addObject:v22];

    char v24 = [(HMDHome *)self reachabilityNotificationTimer];

    if (!v24)
    {
      id v25 = (void *)[objc_alloc(MEMORY[0x1E4F65580]) initWithTimeInterval:1 options:*(double *)&remoteReachabilityNotificationsDeferPeriod];
      [(HMDHome *)self setReachabilityNotificationTimer:v25];

      uint64_t v26 = [(HMDHome *)self workQueue];
      id v27 = [(HMDHome *)self reachabilityNotificationTimer];
      [v27 setDelegateQueue:v26];

      id v28 = [(HMDHome *)self reachabilityNotificationTimer];
      [v28 setDelegate:self];

      long long v29 = [(HMDHome *)self reachabilityNotificationTimer];
      [v29 resume];

      id v30 = (void *)MEMORY[0x1D9452090]();
      unint64_t v31 = self;
      long long v32 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        id v33 = HMFGetLogIdentifier();
        uint64_t v34 = [(HMDHome *)v31 reachabilityNotificationTimer];
        int v35 = 138543874;
        uint64_t v36 = v33;
        __int16 v37 = 2048;
        id v38 = v34;
        __int16 v39 = 2048;
        uint64_t v40 = remoteReachabilityNotificationsDeferPeriod;
        _os_log_impl(&dword_1D49D5000, v32, OS_LOG_TYPE_INFO, "%{public}@Started reachability notification defer timer %p for %f sec", (uint8_t *)&v35, 0x20u);
      }
    }
    goto LABEL_19;
  }
  [v7 setCurrentReachability:v8];
  int v15 = [v7 previouslySentReachability];
  if (v15 == [v7 currentReachability])
  {
    uint64_t v16 = [v7 previouslySentSuspendedState];
    if (v16 == [v7 currentSuspendedState])
    {
      uint64_t v17 = (void *)MEMORY[0x1D9452090]();
      long long v18 = self;
      id v19 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        uint64_t v20 = HMFGetLogIdentifier();
        int v21 = HMFBooleanToString();
        int v35 = 138543874;
        uint64_t v36 = v20;
        __int16 v37 = 2112;
        id v38 = v12;
        __int16 v39 = 2112;
        uint64_t v40 = (uint64_t)v21;
        _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_INFO, "%{public}@Accessory %@ toggled reachability back to %@ ignoring", (uint8_t *)&v35, 0x20u);
      }
      int v22 = [(HMDHome *)v18 remoteReachabilityNotificationPendingAccessories];
      [v22 removeObject:v7];
LABEL_19:
    }
  }
}

- (id)getReachabilityTupleForAccessoryUUID:(id)a3
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v5 = [(HMDHome *)self remoteReachabilityNotificationPendingAccessories];
  id v6 = (id)[v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v14;
    while (2)
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v5);
        }
        unint64_t v9 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        uint64_t v10 = [v9 accessoryUUID];
        char v11 = [v10 isEqual:v4];

        if (v11)
        {
          id v6 = v9;
          goto LABEL_11;
        }
      }
      id v6 = (id)[v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v6;
}

- (void)_deregisterDeviceForReachabilityNotification:(id)a3
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    BOOL v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    id v25 = v8;
    __int16 v26 = 2112;
    id v27 = v4;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@De-registering device %@ for reachability notification", buf, 0x16u);
  }
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  unint64_t v9 = [(HMDHome *)v6 reachabilityRegisteredDevices];
  uint64_t v10 = (void *)[v9 copy];

  uint64_t v11 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v20 != v13) {
          objc_enumerationMutation(v10);
        }
        long long v15 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        long long v16 = [v15 device];
        int v17 = [v16 isEqual:v4];

        if (v17)
        {
          uint64_t v18 = [(HMDHome *)v6 reachabilityRegisteredDevices];
          [v18 removeObject:v15];
        }
      }
      uint64_t v12 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v12);
  }
}

- (void)_registerDeviceForReachabilityNotification:(id)a3 accessoryList:(id)a4
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  BOOL v8 = (void *)MEMORY[0x1D9452090]([(HMDHome *)self _deregisterDeviceForReachabilityNotification:v6]);
  unint64_t v9 = self;
  uint64_t v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    int v14 = 138543618;
    long long v15 = v11;
    __int16 v16 = 2112;
    id v17 = v6;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Registering device %@ for reachability notification", (uint8_t *)&v14, 0x16u);
  }
  uint64_t v12 = [[HMDDeviceRegistrationEntry alloc] initWithDevice:v6 accessoryList:v7];
  if (v12)
  {
    uint64_t v13 = [(HMDHome *)v9 reachabilityRegisteredDevices];
    [v13 addObject:v12];
  }
}

- (void)_handleAccessoryReachabilityRegistration:(id)a3
{
}

- (void)_handleAccessoryReachabilityRegistrationAndEnable:(id)a3
{
}

- (void)resetAccessoryHashedRouteIdentifiers
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v2 = [(HMDHome *)self accessories];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v7 + 1) + 8 * v6++) resetHashedRoute];
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

- (void)btleAccessoryReachabilityProbeTimer:(BOOL)a3
{
  uint64_t v5 = [(HMDHome *)self workQueue];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __47__HMDHome_btleAccessoryReachabilityProbeTimer___block_invoke;
  v6[3] = &unk_1E6A19B58;
  void v6[4] = self;
  BOOL v7 = a3;
  dispatch_async(v5, v6);
}

void __47__HMDHome_btleAccessoryReachabilityProbeTimer___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) accessoryBrowser];
  [v2 btleAccessoryReachabilityProbeTimer:*(unsigned __int8 *)(a1 + 40)];
}

- (BOOL)evaluatePredicate:(id)a3
{
  v26[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self predicateUtility];
  uint64_t v6 = [v5 rewritePredicate:v4 currentCharacteristicInPredicate:0 characteristicsToRead:0 homePresence:0];

  id v25 = @"THIS_OBJECT";
  BOOL v7 = [(HMDHome *)self predicateUtility];
  v26[0] = v7;
  long long v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:&v25 count:1];

  [v6 allowEvaluation];
  long long v9 = [(HMDHome *)self predicateUtility];
  char v10 = [v6 evaluateWithObject:v9 substitutionVariables:v8];

  uint64_t v11 = (void *)MEMORY[0x1D9452090]();
  uint64_t v12 = self;
  uint64_t v13 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    int v14 = HMFGetLogIdentifier();
    long long v15 = HMFBooleanToString();
    int v17 = 138544130;
    uint64_t v18 = v14;
    __int16 v19 = 2112;
    id v20 = v4;
    __int16 v21 = 2112;
    long long v22 = v6;
    __int16 v23 = 2112;
    char v24 = v15;
    _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Evaluating predicate %@ (rewritten %@) with result %@", (uint8_t *)&v17, 0x2Au);
  }

  return v10;
}

- (void)handleEvaluatePredicateMessage:(id)a3
{
  v36[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [v4 predicateForKey:@"kPredicateEvaluatePredicateDataKey"];
  uint64_t v6 = [v4 stringForKey:@"serviceUUID"];
  BOOL v7 = (void *)v6;
  if (v5 && v6)
  {
    BOOL v8 = [(HMDHome *)self evaluatePredicate:v5];
    long long v9 = [v4 responseHandler];

    if (v9)
    {
      char v10 = [v4 responseHandler];
      int v35 = @"kPredicateEvaluateResultKey";
      uint64_t v11 = [NSNumber numberWithBool:v8];
      v36[0] = v11;
      uint64_t v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v36 forKeys:&v35 count:1];
      ((void (**)(void, void, void *))v10)[2](v10, 0, v12);
    }
    long long v29 = v7;
    uint64_t v13 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v7];
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    int v14 = [(HMDHome *)self accessories];
    uint64_t v15 = [v14 countByEnumeratingWithState:&v30 objects:v34 count:16];
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = *(void *)v31;
      while (2)
      {
        for (uint64_t i = 0; i != v16; ++i)
        {
          if (*(void *)v31 != v17) {
            objc_enumerationMutation(v14);
          }
          id v19 = *(id *)(*((void *)&v30 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v20 = v19;
          }
          else {
            id v20 = 0;
          }
          id v21 = v20;

          uint64_t v22 = [v21 serviceWithUUID:v13];
          if (v22)
          {
            __int16 v26 = (void *)v22;
            id v27 = [v4 remoteSourceDevice];
            uint64_t v28 = [v27 remoteDestinationString];
            [v26 updatePresenceRequestTimeForDeviceWithDestination:v28];

            goto LABEL_20;
          }
        }
        uint64_t v16 = [v14 countByEnumeratingWithState:&v30 objects:v34 count:16];
        if (v16) {
          continue;
        }
        break;
      }
    }
LABEL_20:

    BOOL v7 = v29;
  }
  else
  {
    __int16 v23 = [v4 responseHandler];

    if (v23)
    {
      char v24 = [v4 responseHandler];
      id v25 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
      ((void (**)(void, void *, void))v24)[2](v24, v25, 0);
    }
  }
}

- (void)dispatchRequestToEvaluateCondition:(id)a3 forCharacteristics:(id)a4 completion:(id)a5
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  char v10 = (void (**)(id, void, id))a5;
  if (v10 && [v9 count])
  {
    uint64_t v11 = [(HMDHome *)self primaryResident];
    int v12 = [v11 isCurrentDevice];

    if (v12)
    {
      uint64_t v13 = (void *)MEMORY[0x1D9452090]();
      int v14 = self;
      uint64_t v15 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        uint64_t v16 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v59 = v16;
        _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@Current device is the resident device itself, evaluating locally.", buf, 0xCu);
      }
      if ([(HMDHome *)v14 evaluatePredicate:v8]) {
        v10[2](v10, 0, v9);
      }
    }
    else
    {
      uint64_t v17 = [(HMDHome *)self primaryResident];
      uint64_t v48 = [v17 device];

      uint64_t v18 = [(HMDHome *)self primaryResident];
      int v19 = [v18 supportsSharedEventTriggerActivation];

      if (v19)
      {
        id v20 = NSString;
        id v21 = [(HMDHome *)self logIdentifier];
        id v47 = [v20 stringWithFormat:@"Bulletin-%@", v21];

        uint64_t v43 = [[HMDPredicateUtilities alloc] initWithHome:self logIdentifier:v47];
        BOOL v46 = [(HMDPredicateUtilities *)v43 rewritePredicateForDaemon:v8 message:0];
        v56[0] = @"kPredicateEvaluatePredicateDataKey";
        uint64_t v22 = encodeRootObject();
        v57[0] = v22;
        v56[1] = @"serviceUUID";
        __int16 v23 = [v9 firstObject];
        char v24 = [v23 service];
        id v25 = [v24 uuid];
        __int16 v26 = [v25 UUIDString];
        v57[1] = v26;
        id v45 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v57 forKeys:v56 count:2];

        id v27 = [HMDRemoteDeviceMessageDestination alloc];
        uint64_t v28 = [(HMDHome *)self uuid];
        id v44 = [(HMDRemoteDeviceMessageDestination *)v27 initWithTarget:v28 device:v48];

        long long v29 = +[HMDRemoteMessage secureMessageWithName:@"kPredicateEvaluatePredicateRequestKey" destination:v44 messagePayload:v45];
        long long v30 = [v29 identifier];
        objc_initWeak(&location, self);
        v49[0] = MEMORY[0x1E4F143A8];
        v49[1] = 3221225472;
        void v49[2] = __76__HMDHome_dispatchRequestToEvaluateCondition_forCharacteristics_completion___block_invoke;
        void v49[3] = &unk_1E6A077B8;
        objc_copyWeak(&v54, &location);
        id v31 = v30;
        id v50 = v31;
        id v51 = v8;
        id v52 = v9;
        uint64_t v53 = v10;
        long long v32 = (void *)MEMORY[0x1D9452090]([v29 setResponseHandler:v49]);
        long long v33 = self;
        HMFGetOSLogHandle();
        uint64_t v34 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
        {
          int v35 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          id v59 = v35;
          __int16 v60 = 2114;
          id v61 = v31;
          _os_log_impl(&dword_1D49D5000, v34, OS_LOG_TYPE_INFO, "%{public}@Sending message with identifier %{public}@ to evaluate bulletin condition to resident", buf, 0x16u);
        }
        uint64_t v36 = [(HMDHome *)v33 homeManager];
        __int16 v37 = [v36 messageDispatcher];

        [v37 sendMessage:v29 completionHandler:0];
        objc_destroyWeak(&v54);
        objc_destroyWeak(&location);
      }
      else
      {
        id v38 = (void *)MEMORY[0x1D9452090]();
        __int16 v39 = self;
        uint64_t v40 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
        {
          uint64_t v41 = HMFGetLogIdentifier();
          char v42 = [(HMDHome *)v39 primaryResident];
          *(_DWORD *)buf = 138543618;
          id v59 = v41;
          __int16 v60 = 2112;
          id v61 = v42;
          _os_log_impl(&dword_1D49D5000, v40, OS_LOG_TYPE_INFO, "%{public}@Remote access device %@ is not capable of presence status. Directly send the notification.", buf, 0x16u);
        }
        v10[2](v10, 0, v9);
      }
    }
  }
}

void __76__HMDHome_dispatchRequestToEvaluateCondition_forCharacteristics_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  id v8 = (void *)MEMORY[0x1D9452090]();
  id v9 = WeakRetained;
  char v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void **)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138544386;
    char v24 = v11;
    __int16 v25 = 2112;
    uint64_t v26 = v12;
    __int16 v27 = 2112;
    uint64_t v28 = v13;
    __int16 v29 = 2112;
    uint64_t v30 = v14;
    __int16 v31 = 2112;
    id v32 = v5;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Message with identifier %@ to evaluate condition %@ for characteristics %@ has been sent with error %@", buf, 0x34u);
  }
  if (v5) {
    goto LABEL_7;
  }
  int v15 = objc_msgSend(v6, "hmf_BOOLForKey:", @"kPredicateEvaluateResultKey");
  uint64_t v16 = (void *)MEMORY[0x1D9452090]();
  id v17 = v9;
  uint64_t v18 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    int v19 = HMFGetLogIdentifier();
    uint64_t v20 = *(void *)(a1 + 40);
    HMFBooleanToString();
    id v21 = v22 = v15;
    *(_DWORD *)buf = 138543874;
    char v24 = v19;
    __int16 v25 = 2112;
    uint64_t v26 = v20;
    __int16 v27 = 2112;
    uint64_t v28 = v21;
    _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@Resident evaluate predicate %@ to %@.", buf, 0x20u);

    int v15 = v22;
  }

  if (v15) {
LABEL_7:
  }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

- (void)evaluateNotificationConditionForCharacteristics:(id)a3 homePresence:(id)a4 completion:(id)a5
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  if (v10)
  {
    if ([(HMDHome *)self bulletinNotificationsSupported])
    {
      id v61 = v10;
      long long v63 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(v8, "count"));
      long long v65 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v8, "count"));
      long long v75 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      id v62 = v8;
      id obj = v8;
      uint64_t v11 = [obj countByEnumeratingWithState:&v75 objects:v88 count:16];
      id v64 = v9;
      uint64_t v70 = self;
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)v76;
        uint64_t v67 = *(void *)v76;
        do
        {
          uint64_t v14 = 0;
          uint64_t v68 = v12;
          do
          {
            if (*(void *)v76 != v13) {
              objc_enumerationMutation(obj);
            }
            int v15 = *(void **)(*((void *)&v75 + 1) + 8 * v14);
            uint64_t v16 = [v15 service];
            id v17 = [v16 bulletinBoardNotification];
            int v18 = [v17 isEnabled];

            if (v18)
            {
              int v19 = (void *)MEMORY[0x1D9452090]();
              uint64_t v20 = self;
              id v21 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
              {
                int v22 = HMFGetLogIdentifier();
                *(_DWORD *)buf = 138543618;
                long long v81 = v22;
                __int16 v82 = 2112;
                id v83 = v15;
                _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@Notification is enabled for characteristic %@.", buf, 0x16u);
              }
              __int16 v23 = [v16 bulletinBoardNotification];
              char v24 = [v23 condition];

              if (v24)
              {
                __int16 v25 = [(HMDHome *)v20 predicateUtility];
                char v26 = [v25 containsPresenceEvents:v24];
                if (v9 || (v26 & 1) == 0)
                {
                  id v32 = [v25 rewritePredicate:v24 currentCharacteristicInPredicate:0 characteristicsToRead:0 homePresence:v9];
                  long long v86 = @"THIS_OBJECT";
                  long long v87 = v25;
                  id v38 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v87 forKeys:&v86 count:1];
                  [v32 allowEvaluation];
                  int v39 = [v32 evaluateWithObject:v25 substitutionVariables:v38];
                  context = (void *)MEMORY[0x1D9452090]();
                  uint64_t v40 = v20;
                  uint64_t v41 = HMFGetOSLogHandle();
                  BOOL v42 = os_log_type_enabled(v41, OS_LOG_TYPE_INFO);
                  if (v39)
                  {
                    if (v42)
                    {
                      uint64_t v43 = HMFGetLogIdentifier();
                      *(_DWORD *)buf = 138543874;
                      long long v81 = v43;
                      __int16 v82 = 2112;
                      id v83 = v24;
                      __int16 v84 = 2112;
                      id v85 = v15;
                      _os_log_impl(&dword_1D49D5000, v41, OS_LOG_TYPE_INFO, "%{public}@Condition %@ for characteristic (%@) evaluates to true, posting bulletin for it.", buf, 0x20u);
                    }
                    [v65 addObject:v15];
                  }
                  else
                  {
                    if (v42)
                    {
                      id v44 = HMFGetLogIdentifier();
                      *(_DWORD *)buf = 138543874;
                      long long v81 = v44;
                      __int16 v82 = 2112;
                      id v83 = v24;
                      __int16 v84 = 2112;
                      id v85 = v15;
                      _os_log_impl(&dword_1D49D5000, v41, OS_LOG_TYPE_INFO, "%{public}@Condition %@ for characteristic (%@) evaluates to false, not posting bulletin for it.", buf, 0x20u);
                    }
                  }

                  id v9 = v64;
                }
                else
                {
                  __int16 v27 = (void *)MEMORY[0x1D9452090]();
                  uint64_t v28 = v20;
                  __int16 v29 = HMFGetOSLogHandle();
                  if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v30 = HMFGetLogIdentifier();
                    *(_DWORD *)buf = 138543874;
                    long long v81 = v30;
                    __int16 v82 = 2112;
                    id v83 = v24;
                    __int16 v84 = 2112;
                    id v85 = v15;
                    _os_log_impl(&dword_1D49D5000, v29, OS_LOG_TYPE_INFO, "%{public}@Condition %@ contains presence and no homePresence presents, delaying bulletin for characteristic %@", buf, 0x20u);

                    id v9 = v64;
                  }

                  __int16 v31 = [v16 uuid];
                  id v32 = [v63 objectForKeyedSubscript:v31];

                  if (!v32)
                  {
                    id v32 = [MEMORY[0x1E4F1CA48] array];
                    uint64_t v33 = [v16 uuid];
                    [v63 setObject:v32 forKeyedSubscript:v33];
                  }
                  [v32 addObject:v15];
                }
                uint64_t v12 = v68;

                self = v70;
                uint64_t v13 = v67;
              }
              else
              {
                uint64_t v34 = (void *)MEMORY[0x1D9452090]();
                int v35 = v20;
                uint64_t v36 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
                {
                  __int16 v37 = HMFGetLogIdentifier();
                  *(_DWORD *)buf = 138543618;
                  long long v81 = v37;
                  __int16 v82 = 2112;
                  id v83 = v15;
                  _os_log_impl(&dword_1D49D5000, v36, OS_LOG_TYPE_INFO, "%{public}@No condition is present in chr (%@)", buf, 0x16u);

                  uint64_t v13 = v67;
                }

                [v65 addObject:v15];
                uint64_t v12 = v68;
              }
            }
            ++v14;
          }
          while (v12 != v14);
          uint64_t v12 = [obj countByEnumeratingWithState:&v75 objects:v88 count:16];
        }
        while (v12);
      }

      id v45 = v65;
      id v10 = v61;
      if ([v65 count]) {
        (*((void (**)(id, void, void *))v61 + 2))(v61, 0, v65);
      }
      BOOL v46 = v63;
      if ([v63 count])
      {
        long long v73 = 0u;
        long long v74 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        id v47 = [v63 allValues];
        uint64_t v48 = [v47 countByEnumeratingWithState:&v71 objects:v79 count:16];
        if (v48)
        {
          uint64_t v49 = v48;
          uint64_t v50 = *(void *)v72;
          do
          {
            for (uint64_t i = 0; i != v49; ++i)
            {
              if (*(void *)v72 != v50) {
                objc_enumerationMutation(v47);
              }
              id v52 = *(void **)(*((void *)&v71 + 1) + 8 * i);
              uint64_t v53 = [v52 firstObject];
              id v54 = [v53 service];
              uint64_t v55 = [v54 bulletinBoardNotification];
              uint64_t v56 = [v55 condition];
              [(HMDHome *)v70 dispatchRequestToEvaluateCondition:v56 forCharacteristics:v52 completion:v61];
            }
            uint64_t v49 = [v47 countByEnumeratingWithState:&v71 objects:v79 count:16];
          }
          while (v49);
        }

        BOOL v46 = v63;
        id v9 = v64;
        id v45 = v65;
      }

      id v8 = v62;
    }
    else
    {
      id v57 = (void *)MEMORY[0x1D9452090]();
      uint64_t v58 = self;
      id v59 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
      {
        __int16 v60 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        long long v81 = v60;
        __int16 v82 = 2112;
        id v83 = v8;
        _os_log_impl(&dword_1D49D5000, v59, OS_LOG_TYPE_DEBUG, "%{public}@Bulletin notifications are not supported, skipping evaluating bulletin for characteristics: %@", buf, 0x16u);
      }
      (*((void (**)(id, void, void))v10 + 2))(v10, 0, MEMORY[0x1E4F1CBF0]);
    }
  }
}

- (void)reevaluateAccessoryInfo
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)MEMORY[0x1D9452090](self, a2);
  id v4 = self;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v10 = v6;
    _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Re-evaluating accessory info", buf, 0xCu);
  }
  BOOL v7 = [(HMDHome *)v4 workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __34__HMDHome_reevaluateAccessoryInfo__block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = v4;
  dispatch_async(v7, block);
}

uint64_t __34__HMDHome_reevaluateAccessoryInfo__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reevaluateAccessoryInfoWithBadgeRefresh:1];
}

- (void)_reevaluateAccessoryInfoWithBadgeRefresh:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  BOOL v5 = [(HMDHome *)self isOwnerUser];
  BOOL v6 = [(HMDHome *)self isSharedAdmin];
  BOOL v7 = (void *)MEMORY[0x1D9452090]();
  id v8 = self;
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    id v10 = HMFGetLogIdentifier();
    uint64_t v11 = HMFBooleanToString();
    uint64_t v12 = HMFBooleanToString();
    uint64_t v13 = HMFBooleanToString();
    int v18 = 138544130;
    int v19 = v10;
    __int16 v20 = 2112;
    id v21 = v11;
    __int16 v22 = 2112;
    __int16 v23 = v12;
    __int16 v24 = 2112;
    __int16 v25 = v13;
    _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Re-evaluating accessory info with shouldRefreshBadge: %@, isOwnerUser: %@, isSharedAdminUser:%@ ", (uint8_t *)&v18, 0x2Au);
  }
  if (v5)
  {
    uint64_t v14 = +[HMDBulletinBoard sharedBulletinBoard];
    id v15 = (id)[v14 updateBulletinForFirmwareUpdateInHome:v8];
  }
  else if (!v6)
  {
    goto LABEL_7;
  }
  uint64_t v16 = +[HMDBulletinBoard sharedBulletinBoard];
  [v16 insertBulletinsForMatterFirmwareUpdateInstalledInHome:v8];

LABEL_7:
  if (v3)
  {
    id v17 = +[HMDBulletinBoard sharedBulletinBoard];
    [v17 refreshHomeBadgeNumber];
  }
}

- (void)_notifyClientsOfAccessoryInfoUpdatedForAccessories:(id)a3 shouldRefreshBadge:(BOOL)a4 withCompletion:(id)a5
{
  BOOL v6 = a4;
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = (void (**)(id, void))a5;
  if ([v8 count])
  {
    __int16 v60 = self;
    BOOL v61 = v6;
    id v62 = v9;
    long long v65 = [MEMORY[0x1E4F1CA60] dictionary];
    long long v66 = [MEMORY[0x1E4F1CA60] dictionary];
    long long v69 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    id v63 = v8;
    id obj = v8;
    uint64_t v10 = [obj countByEnumeratingWithState:&v69 objects:v79 count:16];
    uint64_t v58 = v10;
    char v11 = 0;
    if (!v10) {
      goto LABEL_36;
    }
    uint64_t v67 = *(void *)v70;
    uint64_t v68 = v10;
    while (1)
    {
      for (uint64_t i = 0; i != v68; ++i)
      {
        if (*(void *)v70 != v67) {
          objc_enumerationMutation(obj);
        }
        uint64_t v13 = *(void **)(*((void *)&v69 + 1) + 8 * i);
        uint64_t v14 = objc_msgSend(v13, "vendorInfo", v58);
        id v15 = [v13 firmwareVersion];
        if (v15)
        {
          uint64_t v16 = [v14 firmwareVersion];
          id v17 = [v13 firmwareVersion];
          uint64_t v18 = [v16 isGreaterThanVersion:v17];
        }
        else
        {
          uint64_t v18 = 0;
        }

        int v19 = [MEMORY[0x1E4F1CA60] dictionary];
        __int16 v20 = [MEMORY[0x1E4F1CA60] dictionary];
        id v21 = [v14 appBundleID];

        if (v21)
        {
          __int16 v22 = [v14 appBundleID];
          [v20 setObject:v22 forKeyedSubscript:@"kAccessoryVendorInfoBundleIDKey"];

          char v11 = 1;
        }
        __int16 v23 = [v14 appStoreID];

        if (v23)
        {
          __int16 v24 = [v14 appStoreID];
          [v20 setObject:v24 forKeyedSubscript:@"kAccessoryVendorInfoStoreIDKey"];

          char v11 = 1;
        }
        __int16 v25 = [NSNumber numberWithBool:v18];
        [v20 setObject:v25 forKeyedSubscript:@"kAccessoryVendorInfoFirmwareUpdateAvailableKey"];

        uint64_t v26 = [v13 serialNumber];

        if (v26)
        {
          __int16 v27 = [v13 serialNumber];
          [v20 setObject:v27 forKeyedSubscript:@"kAccessoryInfoSerialNumberKey"];

          char v11 = 1;
        }
        uint64_t v28 = [v13 manufacturer];

        if (v28)
        {
          __int16 v29 = [v13 manufacturer];
          [v19 setObject:v29 forKeyedSubscript:@"kAccessoryInfoManufacturerKey"];

          uint64_t v30 = [v13 manufacturer];
          [v20 setObject:v30 forKeyedSubscript:@"kAccessoryInfoManufacturerKey"];
        }
        __int16 v31 = [v13 model];

        if (v31)
        {
          id v32 = [v13 model];
          [v19 setObject:v32 forKeyedSubscript:@"kAccessoryInfoModelKey"];

          uint64_t v33 = [v13 model];
          [v20 setObject:v33 forKeyedSubscript:@"kAccessoryInfoModelKey"];
        }
        id v34 = v13;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          int v35 = v34;
        }
        else {
          int v35 = 0;
        }
        id v36 = v35;

        if (v36 && [v36 supportsCHIP])
        {
          __int16 v37 = [v34 displayableFirmwareVersion];

          if (!v37) {
            goto LABEL_30;
          }
          id v38 = [v34 displayableFirmwareVersion];
          [v19 setObject:v38 forKeyedSubscript:@"kAccessoryInfoFirmwareVersionKey"];

          int v39 = [v34 displayableFirmwareVersion];
          [v20 setObject:v39 forKeyedSubscript:@"kAccessoryInfoFirmwareVersionKey"];
        }
        else
        {
          uint64_t v40 = [v34 firmwareVersion];

          if (!v40) {
            goto LABEL_30;
          }
          uint64_t v41 = [v34 firmwareVersion];
          BOOL v42 = [v41 shortVersionString];
          [v19 setObject:v42 forKeyedSubscript:@"kAccessoryInfoFirmwareVersionKey"];

          int v39 = [v34 firmwareVersion];
          uint64_t v43 = [v39 shortVersionString];
          [v20 setObject:v43 forKeyedSubscript:@"kAccessoryInfoFirmwareVersionKey"];
        }
LABEL_30:
        if ([v20 count])
        {
          id v44 = [v34 uuid];
          id v45 = [v44 UUIDString];
          [v66 setObject:v20 forKeyedSubscript:v45];
        }
        if ([v19 count])
        {
          BOOL v46 = [v34 uuid];
          id v47 = [v46 UUIDString];
          [v65 setObject:v19 forKeyedSubscript:v47];
        }
      }
      uint64_t v68 = [obj countByEnumeratingWithState:&v69 objects:v79 count:16];
      if (!v68)
      {
LABEL_36:

        uint64_t v48 = (void *)MEMORY[0x1D9452090]();
        uint64_t v49 = v60;
        uint64_t v50 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
        {
          id v51 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543874;
          long long v74 = v51;
          __int16 v75 = 2112;
          long long v76 = v65;
          __int16 v77 = 2112;
          long long v78 = v66;
          _os_log_impl(&dword_1D49D5000, v50, OS_LOG_TYPE_INFO, "%{public}@Notify clients that vendor info has updated: %@  entitledInfo %@", buf, 0x20u);
        }
        if ([v65 count])
        {
          id v52 = [MEMORY[0x1E4F65480] messageWithName:@"kAccessoryInfoUpdatedNotificationKey" messagePayload:v65];
          uint64_t v53 = [(HMDHome *)v49 msgDispatcher];
          id v54 = [(HMDHome *)v49 messageTargetUUID];
          [v53 sendMessage:v52 target:v54];
        }
        if (v11)
        {
          uint64_t v55 = [MEMORY[0x1E4F65480] entitledMessageWithName:@"kAccessoryInfoUpdatedNotificationKey" messagePayload:v66];
          uint64_t v56 = [(HMDHome *)v49 msgDispatcher];
          id v57 = [(HMDHome *)v49 messageTargetUUID];
          [v56 sendMessage:v55 target:v57];
        }
        -[HMDHome _reevaluateAccessoryInfoWithBadgeRefresh:](v49, "_reevaluateAccessoryInfoWithBadgeRefresh:", v61, v58);
        id v9 = v62;
        if (v62) {
          ((void (**)(id, BOOL))v62)[2](v62, v59 != 0);
        }

        id v8 = v63;
        goto LABEL_47;
      }
    }
  }
  if (v9) {
    v9[2](v9, 0);
  }
LABEL_47:
}

- (void)notifyClientsOfAccessoryInfoUpdatedForAccessories:(id)a3
{
  id v4 = a3;
  BOOL v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __61__HMDHome_notifyClientsOfAccessoryInfoUpdatedForAccessories___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

uint64_t __61__HMDHome_notifyClientsOfAccessoryInfoUpdatedForAccessories___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _notifyClientsOfAccessoryInfoUpdatedForAccessories:*(void *)(a1 + 40) shouldRefreshBadge:1 withCompletion:0];
}

- (void)_removeCloudData
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  BOOL v3 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v3);

  id v4 = +[HMDCameraProfileSettingsManager zoneNameForHome:self];
  BOOL v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  BOOL v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    __int16 v22 = v8;
    __int16 v23 = 2112;
    __int16 v24 = v4;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Removing camera profile settings manager zone named %@", buf, 0x16u);
  }
  id v9 = +[HMDDatabase defaultDatabase];
  uint64_t v10 = [v9 removePrivateZonesWithName:v4];
  uint64_t v15 = MEMORY[0x1E4F143A8];
  uint64_t v16 = 3221225472;
  id v17 = __27__HMDHome__removeCloudData__block_invoke;
  uint64_t v18 = &unk_1E6A196E0;
  int v19 = v6;
  id v20 = v4;
  id v11 = v4;
  id v12 = (id)[v10 addFailureBlock:&v15];

  uint64_t v13 = [(HMDHome *)v6 userActionPredictionManager];
  [v13 removeZones];

  uint64_t v14 = [(HMDHome *)v6 personDataManager];
  [v14 removeCloudDataDueToHomeRemoval];
}

void __27__HMDHome__removeCloudData__block_invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    BOOL v7 = HMFGetLogIdentifier();
    uint64_t v8 = *(void *)(a1 + 40);
    int v9 = 138543874;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    uint64_t v12 = v8;
    __int16 v13 = 2112;
    id v14 = v3;
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove camera profile settings manager zone named %@: %@", (uint8_t *)&v9, 0x20u);
  }
}

- (void)handleHomeWasRemoved
{
  id v2 = [(HMDHome *)self walletKeyManager];
  [v2 handleHomeWasRemoved];
}

- (void)_removeAllHomeContentsAndAccessoryPairings:(BOOL)a3 queue:(id)a4 completionHandler:(id)a5
{
  BOOL v44 = a3;
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v41 = a4;
  id v42 = a5;
  BOOL v7 = (void *)MEMORY[0x1D9452090]();
  id val = self;
  uint64_t v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    int v9 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    uint64_t v68 = v9;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Removing all home contents and accessory pairings", buf, 0xCu);
  }
  uint64_t v10 = [(HMDHome *)val walletKeyManager];
  [v10 handleHomeWillBeRemoved];

  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  __int16 v11 = [(HMDHome *)val triggers];
  uint64_t v12 = [v11 countByEnumeratingWithState:&v63 objects:v74 count:16];
  if (v12)
  {
    uint64_t v13 = *(void *)v64;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v64 != v13) {
          objc_enumerationMutation(v11);
        }
        [*(id *)(*((void *)&v63 + 1) + 8 * i) invalidate];
      }
      uint64_t v12 = [v11 countByEnumeratingWithState:&v63 objects:v74 count:16];
    }
    while (v12);
  }

  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  uint64_t v15 = (void *)[(NSMutableArray *)val->_actionSets copy];
  uint64_t v16 = [v15 countByEnumeratingWithState:&v59 objects:v73 count:16];
  if (v16)
  {
    uint64_t v17 = *(void *)v60;
    do
    {
      for (uint64_t j = 0; j != v16; ++j)
      {
        if (*(void *)v60 != v17) {
          objc_enumerationMutation(v15);
        }
        [*(id *)(*((void *)&v59 + 1) + 8 * j) invalidate];
      }
      uint64_t v16 = [v15 countByEnumeratingWithState:&v59 objects:v73 count:16];
    }
    while (v16);
  }

  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  int v19 = [(HMDHome *)val users];
  id v20 = (void *)[v19 copy];

  uint64_t v21 = [v20 countByEnumeratingWithState:&v55 objects:v72 count:16];
  if (v21)
  {
    uint64_t v22 = *(void *)v56;
    do
    {
      for (uint64_t k = 0; k != v21; ++k)
      {
        if (*(void *)v56 != v22) {
          objc_enumerationMutation(v20);
        }
        __int16 v24 = *(void **)(*((void *)&v55 + 1) + 8 * k);
        [v24 removeCloudData];
        [v24 unconfigure];
      }
      uint64_t v21 = [v20 countByEnumeratingWithState:&v55 objects:v72 count:16];
    }
    while (v21);
  }

  uint64_t v25 = [(HMDHome *)val accessories];
  uint64_t v43 = objc_msgSend(v25, "na_map:", &__block_literal_global_1270);

  [(HMDHome *)val _registerResidentReachabilityNotificationWithEnableAccessories:MEMORY[0x1E4F1CBF0] disableAccessories:v43 completionHandler:0];
  objc_initWeak(&location, val);
  dispatch_group_t group = dispatch_group_create();
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  uint64_t v26 = [(HMDHome *)val accessories];
  uint64_t v27 = [v26 countByEnumeratingWithState:&v50 objects:v71 count:16];
  if (v27)
  {
    uint64_t v28 = *(void *)v51;
    do
    {
      for (uint64_t m = 0; m != v27; ++m)
      {
        if (*(void *)v51 != v28) {
          objc_enumerationMutation(v26);
        }
        uint64_t v30 = *(void **)(*((void *)&v50 + 1) + 8 * m);
        if ([v30 isPrimary])
        {
          __int16 v31 = (void *)MEMORY[0x1D9452090]();
          id v32 = val;
          HMFGetOSLogHandle();
          uint64_t v33 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
          {
            id v34 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            uint64_t v68 = v34;
            __int16 v69 = 2112;
            long long v70 = v30;
            _os_log_impl(&dword_1D49D5000, v33, OS_LOG_TYPE_INFO, "%{public}@Removing primary accessory %@", buf, 0x16u);
          }
          dispatch_group_enter(group);
          aBlock[0] = MEMORY[0x1E4F143A8];
          aBlock[1] = 3221225472;
          aBlock[2] = __78__HMDHome__removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke_1271;
          aBlock[3] = &unk_1E6A16550;
          objc_copyWeak(&v49, &location);
          void aBlock[4] = v30;
          uint64_t v48 = group;
          int v35 = _Block_copy(aBlock);
          id v36 = v35;
          if (v44) {
            [(HMDHome *)v32 removeAllUsersAndCloudDataFromAccessory:v30 completionHandler:v35];
          }
          else {
            (*((void (**)(void *))v35 + 2))(v35);
          }

          objc_destroyWeak(&v49);
        }
      }
      uint64_t v27 = [v26 countByEnumeratingWithState:&v50 objects:v71 count:16];
    }
    while (v27);
  }

  [(HMDHome *)val _removeCloudData];
  dispatch_group_notify(group, v41, v42);
  __int16 v37 = (void *)MEMORY[0x1D9452090]();
  id v38 = val;
  HMFGetOSLogHandle();
  int v39 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
  {
    uint64_t v40 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    uint64_t v68 = v40;
    _os_log_impl(&dword_1D49D5000, v39, OS_LOG_TYPE_INFO, "%{public}@Removed all accessories", buf, 0xCu);
  }

  objc_destroyWeak(&location);
}

void __78__HMDHome__removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke_1271(uint64_t a1)
{
  id v2 = (id *)(a1 + 48);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __78__HMDHome__removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke_2;
    v6[3] = &unk_1E6A190E8;
    objc_copyWeak(&v8, v2);
    id v5 = *(void **)(a1 + 40);
    void v6[4] = *(void *)(a1 + 32);
    id v7 = v5;
    [WeakRetained _removeAccessory:v4 completionHandler:v6];

    objc_destroyWeak(&v8);
  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }
}

void __78__HMDHome__removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v8 = (void *)MEMORY[0x1D9452090]();
  id v9 = WeakRetained;
  uint64_t v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    __int16 v11 = HMFGetLogIdentifier();
    uint64_t v12 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543874;
    __int16 v24 = v11;
    __int16 v25 = 2112;
    uint64_t v26 = v12;
    __int16 v27 = 2112;
    id v28 = v6;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Removed primary accessory, %@, with error: %@", buf, 0x20u);
  }
  if (v9)
  {
    uint64_t v13 = [v9 workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __78__HMDHome__removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke_1272;
    block[3] = &unk_1E6A190C0;
    id v18 = v6;
    id v19 = v9;
    id v14 = v5;
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = *(void **)(a1 + 40);
    id v20 = v14;
    uint64_t v21 = v15;
    id v22 = v16;
    dispatch_async(v13, block);
  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }
}

void __78__HMDHome__removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke_1272(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32))
  {
    id v2 = (void *)MEMORY[0x1D9452090]();
    id v3 = *(id *)(a1 + 40);
    uint64_t v4 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = HMFGetLogIdentifier();
      uint64_t v6 = *(void *)(a1 + 56);
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = 138543874;
      id v9 = v5;
      __int16 v10 = 2112;
      uint64_t v11 = v6;
      __int16 v12 = 2112;
      uint64_t v13 = v7;
      _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to remove accessory %@ with error: %@", (uint8_t *)&v8, 0x20u);
    }
  }
  else
  {
    [*(id *)(a1 + 40) _removeAccessories:*(void *)(a1 + 48) message:0];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

id __78__HMDHome__removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;
  id v5 = [v4 cameraProfiles];
  uint64_t v6 = [v5 count];

  if (v6) {
    id v7 = v4;
  }
  else {
    id v7 = 0;
  }

  return v7;
}

- (void)_removeAccessories:(id)a3 message:(id)a4
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [(HMDHome *)self _removeAccessoriesCommon:v6];
  id v9 = [v7 name];
  int v10 = [v9 isEqualToString:@"kRemoveAccessoryRequestKey"];

  if (v10)
  {
    uint64_t v11 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionary", v8, v7);
    [v11 setObject:v8 forKeyedSubscript:@"kAccessoriesListKey"];
    __int16 v12 = (void *)[v11 copy];
    [v7 respondWithPayload:v12];
  }
  else
  {
    objc_msgSend(v7, "respondWithSuccess", v8, v7);
  }
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id obj = v6;
  uint64_t v13 = [obj countByEnumeratingWithState:&v44 objects:v54 count:16];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v45;
    do
    {
      uint64_t v16 = 0;
      uint64_t v42 = v14;
      do
      {
        if (*(void *)v45 != v15) {
          objc_enumerationMutation(obj);
        }
        uint64_t v17 = *(void **)(*((void *)&v44 + 1) + 8 * v16);
        id v18 = (void *)MEMORY[0x1D9452090]();
        id v19 = self;
        id v20 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v21 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          long long v51 = v21;
          __int16 v52 = 2112;
          id v53 = v17;
          _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_DEBUG, "%{public}@Removing accessory %@", buf, 0x16u);
        }
        id v22 = v17;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          __int16 v23 = v22;
        }
        else {
          __int16 v23 = 0;
        }
        id v24 = v23;

        if (v24)
        {
          if ([v24 isCurrentAccessory])
          {
            uint64_t v25 = v15;
            uint64_t v26 = self;
            __int16 v27 = (void *)MEMORY[0x1D9452090]();
            id v28 = v19;
            uint64_t v29 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v30 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543618;
              long long v51 = v30;
              __int16 v52 = 2112;
              id v53 = v22;
              _os_log_impl(&dword_1D49D5000, v29, OS_LOG_TYPE_DEFAULT, "%{public}@Posting notification about current accessory removal %@", buf, 0x16u);
            }
            __int16 v31 = [(HMDHome *)v28 notificationCenter];
            uint64_t v48 = @"HMDLastRemovedCurrentAccessoryUUIDKey";
            id v32 = [v24 uuid];
            id v49 = v32;
            uint64_t v33 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v49 forKeys:&v48 count:1];
            [v31 postNotificationName:@"HMDHomeManagerDidRemoveCurrentAccessoryNotification" object:v28 userInfo:v33];

            self = v26;
            uint64_t v15 = v25;
            uint64_t v14 = v42;
          }
          id v34 = [(HMDHome *)v19 homeManager];
          int v35 = [(HMDHome *)v19 capabilitiesAggregator];
          id v36 = [v24 uuid];
          [v35 didRemoveAccessory:v36];

          __int16 v37 = [v24 uuid];
          id v38 = [v34 accessorySetupMetricDispatcherForAccessoryUUID:v37];

          [v38 markAccessoryRemoved];
        }
        if ([v22 isPrimary])
        {
          int v39 = [v22 identifier];
          [(HMDHome *)v19 _deregisterPairedAccessory:v39];
        }
        [v22 setHome:0];
        [v22 unconfigure];

        ++v16;
      }
      while (v14 != v16);
      uint64_t v14 = [obj countByEnumeratingWithState:&v44 objects:v54 count:16];
    }
    while (v14);
  }
}

- (id)_removeAccessoriesCommon:(id)a3
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v4, "count"));
  id v28 = (id)objc_claimAutoreleasedReturnValue();
  [(HMDHome *)self _removeAccessoriesFromContainers:v4];
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id obj = v4;
  uint64_t v29 = [obj countByEnumeratingWithState:&v34 objects:v41 count:16];
  if (v29)
  {
    uint64_t v27 = *(void *)v35;
    do
    {
      for (uint64_t i = 0; i != v29; ++i)
      {
        if (*(void *)v35 != v27) {
          objc_enumerationMutation(obj);
        }
        id v6 = *(void **)(*((void *)&v34 + 1) + 8 * i);
        [(HMDHome *)self removeAccessory:v6];
        id v7 = [v6 getConfiguredName];

        if (v7)
        {
          uint64_t v8 = [v6 getConfiguredName];
          id v9 = [(HMDHome *)self removeName:v8];
        }
        id v10 = v6;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v11 = v10;
        }
        else {
          uint64_t v11 = 0;
        }
        id v12 = v11;

        if (v12)
        {
          long long v32 = 0u;
          long long v33 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          uint64_t v13 = [v12 services];
          uint64_t v14 = [v13 countByEnumeratingWithState:&v30 objects:v40 count:16];
          if (v14)
          {
            uint64_t v15 = v14;
            uint64_t v16 = *(void *)v31;
            do
            {
              for (uint64_t j = 0; j != v15; ++j)
              {
                if (*(void *)v31 != v16) {
                  objc_enumerationMutation(v13);
                }
                id v18 = *(void **)(*((void *)&v30 + 1) + 8 * j);
                id v19 = [v18 getConfiguredName];

                if (v19)
                {
                  id v20 = [v18 getConfiguredName];
                  id v21 = [(HMDHome *)self removeName:v20];
                }
              }
              uint64_t v15 = [v13 countByEnumeratingWithState:&v30 objects:v40 count:16];
            }
            while (v15);
          }
        }
        id v38 = @"kAccessoryUUID";
        id v22 = [v10 uuid];
        __int16 v23 = [v22 UUIDString];
        int v39 = v23;
        id v24 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v39 forKeys:&v38 count:1];
        [v28 addObject:v24];
      }
      uint64_t v29 = [obj countByEnumeratingWithState:&v34 objects:v41 count:16];
    }
    while (v29);
  }

  return v28;
}

- (void)_removeAccessoriesFromContainers:(id)a3
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([v4 count])
  {
    id v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = self;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      long long v73 = v8;
      __int16 v74 = 2112;
      id v75 = v4;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Removing accessories from containers : [%@]", buf, 0x16u);
    }
    id v9 = [(HMDHome *)v6 backingStore];
    id v10 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    uint64_t v11 = [v9 transaction:@"kRemoveAccessoryFromContainersRequestKey" options:v10];

    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    id v42 = v4;
    id obj = v4;
    uint64_t v12 = [obj countByEnumeratingWithState:&v63 objects:v71 count:16];
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v44 = *(void *)v64;
      do
      {
        uint64_t v14 = 0;
        do
        {
          if (*(void *)v64 != v44) {
            objc_enumerationMutation(obj);
          }
          id v15 = *(id *)(*((void *)&v63 + 1) + 8 * v14);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            uint64_t v16 = v15;
          }
          else {
            uint64_t v16 = 0;
          }
          id v17 = v16;

          if (v17)
          {
            long long v61 = 0u;
            long long v62 = 0u;
            long long v59 = 0u;
            long long v60 = 0u;
            id v18 = [(HMDHome *)v6 serviceGroups];
            id v19 = (void *)[v18 copy];

            uint64_t v20 = [v19 countByEnumeratingWithState:&v59 objects:v70 count:16];
            if (v20)
            {
              uint64_t v21 = v20;
              uint64_t v22 = *(void *)v60;
              do
              {
                uint64_t v23 = 0;
                do
                {
                  if (*(void *)v60 != v22) {
                    objc_enumerationMutation(v19);
                  }
                  objc_msgSend(*(id *)(*((void *)&v59 + 1) + 8 * v23++), "removeServicesForAccessory:", v17, v42);
                }
                while (v21 != v23);
                uint64_t v21 = [v19 countByEnumeratingWithState:&v59 objects:v70 count:16];
              }
              while (v21);
            }
          }
          long long v57 = 0u;
          long long v58 = 0u;
          long long v55 = 0u;
          long long v56 = 0u;
          id v24 = [(HMDHome *)v6 actionSets];
          uint64_t v25 = (void *)[v24 copy];

          uint64_t v26 = [v25 countByEnumeratingWithState:&v55 objects:v69 count:16];
          if (v26)
          {
            uint64_t v27 = v26;
            uint64_t v28 = *(void *)v56;
            do
            {
              uint64_t v29 = 0;
              do
              {
                if (*(void *)v56 != v28) {
                  objc_enumerationMutation(v25);
                }
                [*(id *)(*((void *)&v55 + 1) + 8 * v29++) handleRemovalOfAccessory:v15 transaction:v11];
              }
              while (v27 != v29);
              uint64_t v27 = [v25 countByEnumeratingWithState:&v55 objects:v69 count:16];
            }
            while (v27);
          }

          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v30 = [(HMDHome *)v6 triggerOwnedActionSets];
          long long v31 = (void *)[v30 copy];

          uint64_t v32 = [v31 countByEnumeratingWithState:&v51 objects:v68 count:16];
          if (v32)
          {
            uint64_t v33 = v32;
            uint64_t v34 = *(void *)v52;
            do
            {
              uint64_t v35 = 0;
              do
              {
                if (*(void *)v52 != v34) {
                  objc_enumerationMutation(v31);
                }
                [*(id *)(*((void *)&v51 + 1) + 8 * v35++) handleRemovalOfAccessory:v15 transaction:v11];
              }
              while (v33 != v35);
              uint64_t v33 = [v31 countByEnumeratingWithState:&v51 objects:v68 count:16];
            }
            while (v33);
          }

          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v36 = [(HMDHome *)v6 triggers];
          uint64_t v37 = [v36 countByEnumeratingWithState:&v47 objects:v67 count:16];
          if (v37)
          {
            uint64_t v38 = v37;
            uint64_t v39 = *(void *)v48;
            do
            {
              uint64_t v40 = 0;
              do
              {
                if (*(void *)v48 != v39) {
                  objc_enumerationMutation(v36);
                }
                [*(id *)(*((void *)&v47 + 1) + 8 * v40++) handleRemovalOfAccessory:v15 transaction:v11];
              }
              while (v38 != v40);
              uint64_t v38 = [v36 countByEnumeratingWithState:&v47 objects:v67 count:16];
            }
            while (v38);
          }

          v45[0] = MEMORY[0x1E4F143A8];
          v45[1] = 3221225472;
          v45[2] = __44__HMDHome__removeAccessoriesFromContainers___block_invoke;
          v45[3] = &unk_1E6A196E0;
          void v45[4] = v6;
          id v46 = v17;
          id v41 = v17;
          [v11 run:v45];

          ++v14;
        }
        while (v14 != v13);
        uint64_t v13 = [obj countByEnumeratingWithState:&v63 objects:v71 count:16];
      }
      while (v13);
    }

    [(HMDHome *)v6 _evaluateShouldRelaunchAndSetRelaunch];
    id v4 = v42;
  }
}

void __44__HMDHome__removeAccessoriesFromContainers___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  id v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = HMFGetLogIdentifier();
      uint64_t v9 = *(void *)(a1 + 40);
      int v15 = 138543874;
      uint64_t v16 = v8;
      __int16 v17 = 2112;
      uint64_t v18 = v9;
      __int16 v19 = 2112;
      id v20 = v3;
      id v10 = "%{public}@Failed to commit removeAccessoriesFromContainersTransaction [%@] with error: %@";
      uint64_t v11 = v7;
      os_log_type_t v12 = OS_LOG_TYPE_ERROR;
      uint32_t v13 = 32;
LABEL_6:
      _os_log_impl(&dword_1D49D5000, v11, v12, v10, (uint8_t *)&v15, v13);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    uint64_t v14 = *(void *)(a1 + 40);
    int v15 = 138543618;
    uint64_t v16 = v8;
    __int16 v17 = 2112;
    uint64_t v18 = v14;
    id v10 = "%{public}@Successfully finished running removeAccessoriesFromContainersTransaction : %@";
    uint64_t v11 = v7;
    os_log_type_t v12 = OS_LOG_TYPE_INFO;
    uint32_t v13 = 22;
    goto LABEL_6;
  }
}

- (void)_removeService:(id)a3
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHome *)self backingStore];
  uint64_t v6 = *MEMORY[0x1E4F2EDA8];
  id v7 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  uint64_t v8 = [v5 transaction:v6 options:v7];

  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  uint64_t v9 = [(HMDHome *)self serviceGroups];
  id v10 = (void *)[v9 copy];

  uint64_t v11 = [v10 countByEnumeratingWithState:&v52 objects:v61 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v53;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v53 != v13) {
          objc_enumerationMutation(v10);
        }
        [*(id *)(*((void *)&v52 + 1) + 8 * v14++) removeService:v4];
      }
      while (v12 != v14);
      uint64_t v12 = [v10 countByEnumeratingWithState:&v52 objects:v61 count:16];
    }
    while (v12);
  }

  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  int v15 = [(HMDHome *)self actionSets];
  uint64_t v16 = (void *)[v15 copy];

  uint64_t v17 = [v16 countByEnumeratingWithState:&v48 objects:v60 count:16];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)v49;
    do
    {
      uint64_t v20 = 0;
      do
      {
        if (*(void *)v49 != v19) {
          objc_enumerationMutation(v16);
        }
        [*(id *)(*((void *)&v48 + 1) + 8 * v20++) handleRemovalOfService:v4 transaction:v8];
      }
      while (v18 != v20);
      uint64_t v18 = [v16 countByEnumeratingWithState:&v48 objects:v60 count:16];
    }
    while (v18);
  }

  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  uint64_t v21 = [(HMDHome *)self triggerOwnedActionSets];
  uint64_t v22 = (void *)[v21 copy];

  uint64_t v23 = [v22 countByEnumeratingWithState:&v44 objects:v59 count:16];
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = *(void *)v45;
    do
    {
      uint64_t v26 = 0;
      do
      {
        if (*(void *)v45 != v25) {
          objc_enumerationMutation(v22);
        }
        [*(id *)(*((void *)&v44 + 1) + 8 * v26++) handleRemovalOfService:v4 transaction:v8];
      }
      while (v24 != v26);
      uint64_t v24 = [v22 countByEnumeratingWithState:&v44 objects:v59 count:16];
    }
    while (v24);
  }

  uint64_t v27 = [v4 getConfiguredName];

  if (v27)
  {
    uint64_t v28 = [v4 getConfiguredName];
    id v29 = [(HMDHome *)self removeName:v28];
  }
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v30 = [(HMDHome *)self triggers];
  uint64_t v31 = [v30 countByEnumeratingWithState:&v40 objects:v58 count:16];
  if (v31)
  {
    uint64_t v32 = v31;
    uint64_t v33 = *(void *)v41;
    do
    {
      uint64_t v34 = 0;
      do
      {
        if (*(void *)v41 != v33) {
          objc_enumerationMutation(v30);
        }
        [*(id *)(*((void *)&v40 + 1) + 8 * v34++) handleRemovalOfService:v4 transaction:v8];
      }
      while (v32 != v34);
      uint64_t v32 = [v30 countByEnumeratingWithState:&v40 objects:v58 count:16];
    }
    while (v32);
  }

  v39[0] = MEMORY[0x1E4F143A8];
  v39[1] = 3221225472;
  v39[2] = __26__HMDHome__removeService___block_invoke;
  void v39[3] = &unk_1E6A197F0;
  void v39[4] = self;
  [v8 run:v39];
  uint64_t v35 = [(HMDHome *)self notificationCenter];
  long long v56 = @"HMDServiceNotificationKey";
  id v57 = v4;
  long long v36 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v57 forKeys:&v56 count:1];
  [v35 postNotificationName:@"HMDHomeServiceRemovedNotification" object:self userInfo:v36];

  uint64_t v37 = [(HMDHome *)self notificationRegistry];
  uint64_t v38 = [v4 characteristics];
  [v37 removeRegistrationsForCharacteristics:v38];
}

void __26__HMDHome__removeService___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = *(id *)(a1 + 32);
    uint64_t v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = HMFGetLogIdentifier();
      int v8 = 138543618;
      uint64_t v9 = v7;
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Failed to commit removeServiceTransaction with error: %@", (uint8_t *)&v8, 0x16u);
    }
  }
}

- (void)_removeCharacteristic:(id)a3
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHome *)self backingStore];
  uint64_t v6 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  id v7 = [v5 transaction:@"kRemoveCharacteristicRequestKey" options:v6];

  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  int v8 = [(HMDHome *)self actionSets];
  uint64_t v9 = (void *)[v8 copy];

  uint64_t v10 = [v9 countByEnumeratingWithState:&v34 objects:v40 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v35;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v35 != v12) {
          objc_enumerationMutation(v9);
        }
        [*(id *)(*((void *)&v34 + 1) + 8 * v13++) handleRemovalOfActionForCharacteristic:v4 transaction:v7];
      }
      while (v11 != v13);
      uint64_t v11 = [v9 countByEnumeratingWithState:&v34 objects:v40 count:16];
    }
    while (v11);
  }

  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v14 = [(HMDHome *)self triggerOwnedActionSets];
  int v15 = (void *)[v14 copy];

  uint64_t v16 = [v15 countByEnumeratingWithState:&v30 objects:v39 count:16];
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = *(void *)v31;
    do
    {
      uint64_t v19 = 0;
      do
      {
        if (*(void *)v31 != v18) {
          objc_enumerationMutation(v15);
        }
        [*(id *)(*((void *)&v30 + 1) + 8 * v19++) handleRemovalOfActionForCharacteristic:v4 transaction:v7];
      }
      while (v17 != v19);
      uint64_t v17 = [v15 countByEnumeratingWithState:&v30 objects:v39 count:16];
    }
    while (v17);
  }

  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  uint64_t v20 = [(HMDHome *)self triggers];
  uint64_t v21 = [v20 countByEnumeratingWithState:&v26 objects:v38 count:16];
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = *(void *)v27;
    do
    {
      uint64_t v24 = 0;
      do
      {
        if (*(void *)v27 != v23) {
          objc_enumerationMutation(v20);
        }
        [*(id *)(*((void *)&v26 + 1) + 8 * v24++) handleRemovalOfCharacteristic:v4 transaction:v7];
      }
      while (v22 != v24);
      uint64_t v22 = [v20 countByEnumeratingWithState:&v26 objects:v38 count:16];
    }
    while (v22);
  }

  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  void v25[2] = __33__HMDHome__removeCharacteristic___block_invoke;
  v25[3] = &unk_1E6A197F0;
  v25[4] = self;
  [v7 run:v25];
}

void __33__HMDHome__removeCharacteristic___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = *(id *)(a1 + 32);
    uint64_t v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = HMFGetLogIdentifier();
      int v8 = 138543618;
      uint64_t v9 = v7;
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Failed to commit removeCharacteristicTransaction with error: %@", (uint8_t *)&v8, 0x16u);
    }
  }
}

- (void)_removeAccessoryWithUUID:(id)a3 message:(id)a4
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  objc_initWeak(&location, self);
  int v8 = [(HMDHome *)self accessoryWithUUID:v6];
  if (v8)
  {
    uint64_t v9 = (void *)MEMORY[0x1D9452090]();
    __int16 v10 = self;
    HMFGetOSLogHandle();
    id v11 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v26 = 2112;
      long long v27 = v8;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Remove accessory name: %@", buf, 0x16u);
    }
    id v13 = v8;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    id v15 = v14;

    *(void *)buf = 0;
    uint64_t v16 = [v15 preferredHAPAccessoryForOperation:8 linkType:buf];
    uint64_t v17 = +[HMDAccessoryPairingEvent removingAccessory:v13 hapAccessory:v16];
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    void v19[2] = __44__HMDHome__removeAccessoryWithUUID_message___block_invoke;
    v19[3] = &unk_1E6A06CE8;
    objc_copyWeak(&v23, &location);
    id v20 = v7;
    id v18 = v17;
    id v21 = v18;
    id v22 = v13;
    [(HMDHome *)v10 _removeAccessory:v22 completionHandler:v19];

    objc_destroyWeak(&v23);
  }
  else
  {
    id v15 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    [v7 respondWithError:v15];
  }

  objc_destroyWeak(&location);
}

void __44__HMDHome__removeAccessoryWithUUID_message___block_invoke(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 7);
  int v8 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v9 = [WeakRetained workQueue];
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    void v12[2] = __44__HMDHome__removeAccessoryWithUUID_message___block_invoke_2;
    v12[3] = &unk_1E6A11380;
    void v12[4] = v8;
    id v13 = a1[5];
    id v14 = v6;
    id v15 = v5;
    id v16 = a1[4];
    id v17 = a1[6];
    dispatch_async(v9, v12);
  }
  else
  {
    id v10 = a1[4];
    id v11 = [MEMORY[0x1E4F28C58] hmErrorWithCode:52];
    [v10 respondWithError:v11];
  }
}

void __44__HMDHome__removeAccessoryWithUUID_message___block_invoke_2(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v2 = [*(id *)(a1 + 32) logEventSubmitter];
  [v2 submitLogEvent:*(void *)(a1 + 40) error:*(void *)(a1 + 48)];

  if (*(void *)(a1 + 48))
  {
    id v3 = (void *)MEMORY[0x1D9452090]();
    id v4 = *(id *)(a1 + 32);
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = HMFGetLogIdentifier();
      id v7 = [*(id *)(a1 + 72) name];
      uint64_t v8 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138543874;
      uint64_t v12 = v6;
      __int16 v13 = 2112;
      id v14 = v7;
      __int16 v15 = 2112;
      uint64_t v16 = v8;
      _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to remove accessory %@ with error: %@", buf, 0x20u);
    }
    [*(id *)(a1 + 64) respondWithError:*(void *)(a1 + 48)];
  }
  else
  {
    [*(id *)(a1 + 32) _removeAccessories:*(void *)(a1 + 56) message:*(void *)(a1 + 64)];
    [*(id *)(a1 + 32) updateHomeLocation];
    uint64_t v9 = *(void **)(a1 + 32);
    id v10 = [*(id *)(a1 + 64) name];
    objc_msgSend(v9, "saveWithReason:postSyncNotification:");
  }
}

- (void)_removeAccessory:(id)a3 completionHandler:(id)a4
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = (void (**)(id, void, void *))a4;
  if ([v6 isPrimary])
  {
    uint64_t v8 = [(HMDHome *)self removeAccessoryInProgressForHMDAccessories];
    int v9 = [v8 containsObject:v6];

    if (v9)
    {
      id v10 = (void *)MEMORY[0x1D9452090]();
      id v11 = self;
      uint64_t v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        __int16 v13 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v39 = v13;
        __int16 v40 = 2112;
        id v41 = v6;
        _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_ERROR, "%{public}@Already have a remove operation queued for accessory %@", buf, 0x16u);
      }
      v36[0] = *MEMORY[0x1E4F28568];
      id v14 = NSString;
      __int16 v15 = [v6 name];
      uint64_t v16 = [v6 uuid];
      uint64_t v17 = [v14 stringWithFormat:@"Failed to remove accessory %@(%@)", v15, v16];
      v36[1] = *MEMORY[0x1E4F28588];
      v37[0] = v17;
      id v18 = NSString;
      uint64_t v19 = [MEMORY[0x1E4F28C58] hmStringFromErrorCode:15];
      id v20 = [v18 stringWithFormat:@"%ld (%@) This accessory is already being removed from the home.", 15, v19];
      v37[1] = v20;
      id v21 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v37 forKeys:v36 count:2];

      id v22 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:15 userInfo:v21];
      if (v7) {
        v7[2](v7, 0, v22);
      }
    }
    else
    {
      id v27 = v6;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      id v21 = v28;

      long long v29 = [v27 home];
      if ([v29 isAdminUser])
      {
        char v30 = [v21 isPaired];

        if (v30)
        {
          os_unfair_recursive_lock_lock_with_options();
          [(NSHashTable *)self->_removeAccessoryInProgressForHMDAccessories addObject:v21];
          uint64_t v31 = os_unfair_recursive_lock_unlock();
          long long v32 = (void *)MEMORY[0x1D9452090](v31);
          long long v33 = self;
          long long v34 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
          {
            long long v35 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            uint64_t v39 = v35;
            __int16 v40 = 2112;
            id v41 = v21;
            _os_log_impl(&dword_1D49D5000, v34, OS_LOG_TYPE_INFO, "%{public}@Removing accessory %@. Also added accessory in removal-in-progress array", buf, 0x16u);
          }
          [(HMDHome *)v33 _removeAccessoriesForPrimaryAccessory:v21 error:0 completionHandler:v7];
          goto LABEL_22;
        }
      }
      else
      {
      }
      [(HMDHome *)self _removeAccessoriesForPrimaryAccessory:v27 error:0 completionHandler:v7];
    }
LABEL_22:

    goto LABEL_23;
  }
  id v23 = (void *)MEMORY[0x1D9452090]();
  uint64_t v24 = self;
  uint64_t v25 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    __int16 v26 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    uint64_t v39 = v26;
    __int16 v40 = 2112;
    id v41 = v6;
    _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_ERROR, "%{public}@cannot remove non-primary accessory %@", buf, 0x16u);
  }
  if (v7)
  {
    id v21 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:34 userInfo:0];
    v7[2](v7, 0, v21);
    goto LABEL_22;
  }
LABEL_23:
}

- (void)removeAccessory:(id)a3 completionHandler:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __45__HMDHome_removeAccessory_completionHandler___block_invoke;
  block[3] = &unk_1E6A193D0;
  void block[4] = self;
  id v12 = v6;
  id v13 = v7;
  id v9 = v7;
  id v10 = v6;
  dispatch_async(v8, block);
}

uint64_t __45__HMDHome_removeAccessory_completionHandler___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeAccessory:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 48)];
}

- (void)_removeAccessoriesForPrimaryAccessory:(id)a3 error:(id)a4 completionHandler:(id)a5
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  if (!v8)
  {
    long long v53 = (void *)MEMORY[0x1D9452090]();
    long long v54 = self;
    long long v55 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      long long v56 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v76 = v56;
      _os_log_impl(&dword_1D49D5000, v55, OS_LOG_TYPE_ERROR, "%{public}@Nil accessory was passed to remove it from the home.", buf, 0xCu);
    }
    id v57 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v58 = *MEMORY[0x1E4F2D140];
    uint64_t v59 = 20;
    goto LABEL_50;
  }
  if (([v8 isPrimary] & 1) == 0)
  {
    long long v60 = (void *)MEMORY[0x1D9452090]();
    long long v54 = self;
    long long v61 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
    {
      uint64_t v62 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v76 = v62;
      __int16 v77 = 2112;
      id v78 = v8;
      _os_log_impl(&dword_1D49D5000, v61, OS_LOG_TYPE_ERROR, "%{public}@Accessory is not primary (Bridged). Not moving further. [%@]", buf, 0x16u);
    }
    id v57 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v58 = *MEMORY[0x1E4F2D140];
    uint64_t v59 = 34;
LABEL_50:
    id v11 = [v57 errorWithDomain:v58 code:v59 userInfo:0];
    [(HMDHome *)v54 _sendRemoveCompletionStatusForHMDAccessories:0 withCompletion:v10 error:v11];
    goto LABEL_51;
  }
  id v11 = [MEMORY[0x1E4F1CA48] array];
  [(HMDHome *)self removeAccessory:v8];
  [v11 addObject:v8];
  id v12 = +[HMDBulletinBoard sharedBulletinBoard];
  [v12 removeBulletinsForAccessory:v8];

  id v13 = v8;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass) {
    __int16 v15 = v13;
  }
  else {
    __int16 v15 = 0;
  }
  id v69 = v15;

  if (isKindOfClass)
  {
    long long v65 = v13;
    id v66 = v9;
    uint64_t v67 = self;
    uint64_t v68 = v11;
    id v63 = v10;
    id v64 = v8;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    uint64_t v16 = [(HMDHome *)self accessories];
    uint64_t v17 = [v16 countByEnumeratingWithState:&v71 objects:v81 count:16];
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = *(void *)v72;
      do
      {
        for (uint64_t i = 0; i != v18; ++i)
        {
          if (*(void *)v72 != v19) {
            objc_enumerationMutation(v16);
          }
          id v21 = *(id *)(*((void *)&v71 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v22 = v21;
          }
          else {
            id v22 = 0;
          }
          id v23 = v22;

          uint64_t v24 = [v23 identifier];
          uint64_t v25 = [v69 identifier];
          if (([v24 isEqualToString:v25] & 1) == 0)
          {

            goto LABEL_20;
          }
          __int16 v26 = [v23 hostAccessory];
          objc_opt_class();
          char v27 = objc_opt_isKindOfClass();

          if ((v27 & 1) == 0 || !v26)
          {
            [(HMDHome *)v67 removeAccessory:v21];
            [v68 addObject:v21];
            uint64_t v24 = +[HMDBulletinBoard sharedBulletinBoard];
            [v24 removeBulletinsForAccessory:v21];
LABEL_20:
          }
        }
        uint64_t v18 = [v16 countByEnumeratingWithState:&v71 objects:v81 count:16];
      }
      while (v18);
    }

    id v13 = v65;
    int v28 = [v65 isReachable];
    id v8 = v64;
    id v9 = v66;
    self = v67;
    id v11 = v68;
    if (v66
      || !v28
      || ([v65 home],
          long long v29 = objc_claimAutoreleasedReturnValue(),
          char v30 = [v29 isAdminUser],
          v29,
          (v30 & 1) == 0))
    {
      uint64_t v31 = [(HMDHome *)v67 keychainStore];
      long long v32 = [v69 identifier];
      id v70 = 0;
      [v31 removeAccessoryKeyForName:v32 error:&v70];
      id v33 = v70;

      if (v33)
      {
        long long v34 = (void *)MEMORY[0x1D9452090]();
        long long v35 = v67;
        long long v36 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          long long v37 = HMFGetLogIdentifier();
          uint64_t v38 = [v65 name];
          uint64_t v39 = [v69 identifier];
          *(_DWORD *)buf = 138543874;
          uint64_t v76 = v37;
          __int16 v77 = 2112;
          id v78 = v38;
          __int16 v79 = 2112;
          uint64_t v80 = v39;
          _os_log_impl(&dword_1D49D5000, v36, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove keychain entry for accessory %@ with identifier: %@", buf, 0x20u);

          id v11 = v68;
          id v13 = v65;
        }
        id v9 = v66;
      }
    }
    __int16 v40 = [v69 identifier];
    [(HMDHome *)v67 _deregisterPairedAccessory:v40];

    id v10 = v63;
  }
  id v41 = v13;
  objc_opt_class();
  char v42 = objc_opt_isKindOfClass();
  if (v42) {
    long long v43 = v41;
  }
  else {
    long long v43 = 0;
  }
  id v44 = v43;

  if (v42)
  {
    long long v45 = [v41 mediaProfile];
    if (v45)
    {
      long long v46 = [(HMDHome *)self notificationRegistry];
      [v46 removeRegistrationsForMediaProfile:v45];

      long long v47 = [v41 identifier];
      long long v48 = [(HMDHome *)self mediaSessionStateWithIdentifier:v47];

      if (v48) {
        [(HMDHome *)self removeMediaSessionState:v48];
      }
    }
  }
  long long v49 = (void *)MEMORY[0x1D9452090]();
  long long v50 = self;
  long long v51 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
  {
    long long v52 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    uint64_t v76 = v52;
    __int16 v77 = 2112;
    id v78 = v11;
    _os_log_impl(&dword_1D49D5000, v51, OS_LOG_TYPE_INFO, "%{public}@removedAccessories %@", buf, 0x16u);
  }
  [(HMDHome *)v50 _sendRemoveCompletionStatusForHMDAccessories:v11 withCompletion:v10 error:0];

LABEL_51:
}

- (void)_sendRemoveCompletionStatusForHMDAccessories:(id)a3 withCompletion:(id)a4 error:(id)a5
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  char v27 = (void (**)(id, id, id))a4;
  id v28 = a5;
  id v9 = (void *)MEMORY[0x1D9452090]();
  id v10 = self;
  id v11 = HMFGetOSLogHandle();
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_INFO);
  if (v27)
  {
    if (v12)
    {
      id v13 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      long long v36 = v13;
      __int16 v37 = 2112;
      id v38 = v28;
      __int16 v39 = 2112;
      id v40 = v8;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Sending removal completion with error %@, accessories %@", buf, 0x20u);
    }
    v27[2](v27, v8, v28);
  }
  else
  {
    if (v12)
    {
      id v14 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v36 = v14;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@sending removal completion for accessory removal: no completion found", buf, 0xCu);
    }
  }
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id obj = v8;
  uint64_t v15 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
  if (v15)
  {
    uint64_t v16 = *(void *)v31;
    do
    {
      uint64_t v17 = 0;
      do
      {
        if (*(void *)v31 != v16) {
          objc_enumerationMutation(obj);
        }
        uint64_t v18 = *(void **)(*((void *)&v30 + 1) + 8 * v17);
        os_unfair_recursive_lock_lock_with_options();
        [(NSHashTable *)v10->_removeAccessoryInProgressForHMDAccessories removeObject:v18];
        os_unfair_recursive_lock_unlock();
        id v19 = v18;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v20 = v19;
        }
        else {
          id v20 = 0;
        }
        id v21 = v20;

        if (v21 && [v19 isPrimary])
        {
          id v22 = [v21 getPrimaryHAPAccessories];
          id v23 = [v22 firstObject];
          uint64_t v24 = [v23 server];

          uint64_t v25 = [(HMDHome *)v10 accessoryBrowser];
          __int16 v26 = [v21 identifier];
          [v25 addUnpairedAccessoryServer:v24 identifier:v26];
        }
        ++v17;
      }
      while (v15 != v17);
      uint64_t v15 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
    }
    while (v15);
  }

  if ([obj count]) {
    [(HMDHome *)v10 _reevaluateAccessoryInfoWithBadgeRefresh:1];
  }
}

- (void)_notifyClientOfNewlyAddedAccessories:(id)a3 requestMessage:(id)a4
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v57 = a4;
  uint64_t v58 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v59 = [MEMORY[0x1E4F1CA48] array];
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  id obj = v6;
  uint64_t v7 = [obj countByEnumeratingWithState:&v63 objects:v75 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v64;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v64 != v9) {
          objc_enumerationMutation(obj);
        }
        id v11 = *(void **)(*((void *)&v63 + 1) + 8 * i);
        BOOL v12 = accessoryToEncodeForXPCTransportForAccessory(v11);
        if (v12 == v11)
        {
          v69[0] = @"kAccessoryUUID";
          uint64_t v17 = [v11 uuid];
          v69[1] = @"kAccessoryDataKey";
          v70[0] = v17;
          uint64_t v18 = encodeRootObjectForSPIClients(v11);
          v70[1] = v18;
          id v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v70 forKeys:v69 count:2];

          id v20 = (void *)[v19 copy];
          [v59 addObject:v20];

          id v21 = v11;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v22 = v21;
          }
          else {
            id v22 = 0;
          }
          id v23 = v22;

          id v24 = v21;
          objc_opt_class();
          unsigned __int8 isKindOfClass = objc_opt_isKindOfClass();

          if (v23 || (isKindOfClass & (v24 != 0)) != 0) {
            [v58 addObject:v19];
          }
        }
        else
        {
          id v13 = (void *)MEMORY[0x1D9452090]();
          id v14 = self;
          uint64_t v15 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            uint64_t v16 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            long long v72 = v16;
            __int16 v73 = 2112;
            long long v74 = v11;
            _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@Skipping notifying clients of added accessory: %@", buf, 0x16u);
          }
        }
      }
      uint64_t v8 = [obj countByEnumeratingWithState:&v63 objects:v75 count:16];
    }
    while (v8);
  }

  uint64_t v67 = @"kHomeUUID";
  __int16 v26 = [(HMDHome *)self uuid];
  uint64_t v68 = v26;
  char v27 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v68 forKeys:&v67 count:1];

  uint64_t v28 = [v58 count];
  long long v29 = (uint64_t *)MEMORY[0x1E4F2D180];
  if (v28)
  {
    long long v30 = (void *)[v27 mutableCopy];
    long long v31 = (void *)[v58 copy];
    [v30 setObject:v31 forKeyedSubscript:@"kAccessoriesListKey"];

    long long v32 = (void *)MEMORY[0x1D9452090]();
    long long v33 = self;
    long long v34 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
    {
      long long v35 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      long long v72 = v35;
      __int16 v73 = 2112;
      long long v74 = v30;
      _os_log_impl(&dword_1D49D5000, v34, OS_LOG_TYPE_INFO, "%{public}@Notifying non-SPI-entitled clients of added accessories using payload: %@", buf, 0x16u);
    }
    long long v36 = [MEMORY[0x1E4F654B0] nonSPIEntitledMessageWithName:*v29 messagePayload:v30];
    __int16 v37 = [v57 identifier];
    [v36 setIdentifier:v37];

    id v38 = [(HMDHome *)v33 msgDispatcher];
    __int16 v39 = [(HMDHome *)v33 uuid];
    [v38 sendMessage:v36 target:v39];
  }
  else
  {
    id v40 = (void *)MEMORY[0x1D9452090]();
    uint64_t v41 = self;
    char v42 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
    {
      long long v43 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v72 = v43;
      _os_log_impl(&dword_1D49D5000, v42, OS_LOG_TYPE_INFO, "%{public}@Not notifying non-SPI-entitled clients of empty list of added accessories", buf, 0xCu);
    }
  }
  id v44 = (void *)[v27 mutableCopy];
  long long v45 = (void *)[v59 copy];
  [v44 setObject:v45 forKeyedSubscript:@"kAccessoriesListKey"];

  long long v46 = (void *)MEMORY[0x1D9452090]();
  long long v47 = self;
  long long v48 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
  {
    long long v49 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    long long v72 = v49;
    __int16 v73 = 2112;
    long long v74 = v44;
    _os_log_impl(&dword_1D49D5000, v48, OS_LOG_TYPE_INFO, "%{public}@Notifying SPI-entitled clients of added accessories using payload: %@", buf, 0x16u);
  }
  long long v50 = (void *)MEMORY[0x1E4F654B0];
  uint64_t v51 = *v29;
  long long v52 = [v57 identifier];
  long long v53 = [v50 entitledMessageWithName:v51 identifier:v52 messagePayload:v44];

  long long v54 = [(HMDHome *)v47 msgDispatcher];
  long long v55 = [(HMDHome *)v47 uuid];
  v61[0] = MEMORY[0x1E4F143A8];
  v61[1] = 3221225472;
  void v61[2] = __63__HMDHome__notifyClientOfNewlyAddedAccessories_requestMessage___block_invoke;
  v61[3] = &unk_1E6A19B30;
  id v62 = v57;
  id v56 = v57;
  [v54 sendMessage:v53 target:v55 andInvokeCompletionHandler:v61];
}

uint64_t __63__HMDHome__notifyClientOfNewlyAddedAccessories_requestMessage___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) respondWithPayload:0];
}

- (void)_sharedAdminDidFailToAddAccessories:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __47__HMDHome__sharedAdminDidFailToAddAccessories___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __47__HMDHome__sharedAdminDidFailToAddAccessories___block_invoke(uint64_t a1)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1D9452090]();
  uint64_t v70 = a1;
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    id v6 = *(void **)(v70 + 40);
    *(_DWORD *)buf = 138543618;
    __int16 v93 = v5;
    __int16 v94 = 2112;
    uint64_t v95 = v6;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@Removing accessories that were not added to resident: %@", buf, 0x16u);
  }
  long long v88 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  id obj = *(id *)(v70 + 40);
  uint64_t v63 = [obj countByEnumeratingWithState:&v86 objects:v102 count:16];
  if (v63)
  {
    uint64_t v62 = *(void *)v87;
    *(void *)&long long v7 = 138544386;
    long long v59 = v7;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v87 != v62)
        {
          uint64_t v9 = v8;
          objc_enumerationMutation(obj);
          uint64_t v8 = v9;
        }
        uint64_t v66 = v8;
        id v10 = *(void **)(*((void *)&v86 + 1) + 8 * v8);
        if (objc_msgSend(v10, "isPrimary", v59))
        {
          long long v65 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:2];
          id v11 = *(void **)(v70 + 32);
          BOOL v12 = [v11 owner];
          id v85 = 0;
          long long v64 = [v11 prepareUserManagementOperationForUser:v12 accessory:v10 type:2 model:0 error:&v85];
          id v67 = v85;

          if (v67)
          {
            id v13 = (void *)MEMORY[0x1D9452090]();
            id v14 = *(id *)(v70 + 32);
            uint64_t v15 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            {
              uint64_t v16 = HMFGetLogIdentifier();
              uint64_t v17 = objc_opt_class();
              uint64_t v18 = *(void **)(v70 + 32);
              id v19 = v17;
              id v20 = [v18 name];
              id v21 = [*(id *)(v70 + 32) owner];
              id v22 = [v21 userID];
              *(_DWORD *)buf = v59;
              __int16 v93 = v16;
              __int16 v94 = 2112;
              uint64_t v95 = v17;
              __int16 v96 = 2112;
              uint64_t v97 = v20;
              __int16 v98 = 2112;
              long long v99 = v22;
              __int16 v100 = 2112;
              id v101 = v67;
              _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_ERROR, "%{public}@[%@ %@] Failed to prepare remove operations for user '%@' with error: %@", buf, 0x34u);
            }
          }
          else
          {
            [v65 addObject:v64];
            id v23 = *(void **)(v70 + 32);
            id v24 = [v23 currentUser];
            id v84 = 0;
            long long v60 = [v23 prepareUserManagementOperationForUser:v24 accessory:v10 type:2 model:0 error:&v84];
            id v67 = v84;

            if (v67)
            {
              uint64_t v25 = (void *)MEMORY[0x1D9452090]();
              id v26 = *(id *)(v70 + 32);
              char v27 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
              {
                uint64_t v28 = HMFGetLogIdentifier();
                long long v29 = objc_opt_class();
                long long v30 = *(void **)(v70 + 32);
                id v31 = v29;
                long long v32 = [v30 name];
                long long v33 = [*(id *)(v70 + 32) currentUser];
                long long v34 = [v33 userID];
                *(_DWORD *)buf = v59;
                __int16 v93 = v28;
                __int16 v94 = 2112;
                uint64_t v95 = v29;
                __int16 v96 = 2112;
                uint64_t v97 = v32;
                __int16 v98 = 2112;
                long long v99 = v34;
                __int16 v100 = 2112;
                id v101 = v67;
                _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_ERROR, "%{public}@[%@ %@] Failed to prepare remove operations for user '%@' with error: %@", buf, 0x34u);
              }
            }
            else
            {
              [v60 addDependency:v64];
              [v65 addObject:v60];
            }
            long long v82 = 0u;
            long long v83 = 0u;
            long long v81 = 0u;
            long long v80 = 0u;
            id v68 = v65;
            uint64_t v71 = [v68 countByEnumeratingWithState:&v80 objects:v91 count:16];
            if (v71)
            {
              uint64_t v69 = *(void *)v81;
              do
              {
                for (uint64_t i = 0; i != v71; ++i)
                {
                  if (*(void *)v81 != v69) {
                    objc_enumerationMutation(v68);
                  }
                  long long v36 = *(void **)(*((void *)&v80 + 1) + 8 * i);
                  if (shouldLogPrivateInformation())
                  {
                    __int16 v37 = [v36 user];
                    id v38 = [v37 userID];
                  }
                  else
                  {
                    id v38 = @"...";
                    __int16 v39 = @"...";
                  }
                  id v40 = (void *)MEMORY[0x1D9452090](v39);
                  id v41 = *(id *)(v70 + 32);
                  char v42 = HMFGetOSLogHandle();
                  if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
                  {
                    long long v43 = HMFGetLogIdentifier();
                    id v44 = [v36 identifier];
                    long long v45 = [v36 accessory];
                    long long v46 = [v45 shortDescription];
                    *(_DWORD *)buf = 138544130;
                    __int16 v93 = v43;
                    __int16 v94 = 2112;
                    uint64_t v95 = v44;
                    __int16 v96 = 2112;
                    uint64_t v97 = v38;
                    __int16 v98 = 2112;
                    long long v99 = v46;
                    _os_log_impl(&dword_1D49D5000, v42, OS_LOG_TYPE_INFO, "%{public}@Adding operation '%@' to manager tracking remove user '%@' from accessory '%@'", buf, 0x2Au);
                  }
                  long long v47 = +[HMDUserManagementOperationManager sharedManager];
                  [v47 addOperation:v36];
                }
                uint64_t v71 = [v68 countByEnumeratingWithState:&v80 objects:v91 count:16];
              }
              while (v71);
            }
          }
        }
        uint64_t v8 = v66 + 1;
      }
      while (v66 + 1 != v63);
      uint64_t v63 = [obj countByEnumeratingWithState:&v86 objects:v102 count:16];
    }
    while (v63);
  }

  long long v78 = 0u;
  long long v79 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  id v48 = *(id *)(v70 + 40);
  uint64_t v49 = [v48 countByEnumeratingWithState:&v76 objects:v90 count:16];
  if (!v49) {
    goto LABEL_47;
  }
  long long v50 = 0;
  uint64_t v51 = *(void *)v77;
  do
  {
    for (uint64_t j = 0; j != v49; ++j)
    {
      if (*(void *)v77 != v51) {
        objc_enumerationMutation(v48);
      }
      long long v53 = *(void **)(*((void *)&v76 + 1) + 8 * j);
      if ([v53 isPrimary])
      {
        id v54 = v53;

        long long v55 = [v54 networkClientIdentifier];

        if (v55)
        {
          id v56 = *(void **)(v70 + 32);
          id v57 = [v54 networkClientIdentifier];
          [v56 _removeClientConfigurationWithIdentifier:v57];
        }
        long long v50 = v54;
      }
    }
    uint64_t v49 = [v48 countByEnumeratingWithState:&v76 objects:v90 count:16];
  }
  while (v49);

  if (v50)
  {
    objc_initWeak((id *)buf, *(id *)(v70 + 32));
    uint64_t v58 = *(void **)(v70 + 32);
    v72[0] = MEMORY[0x1E4F143A8];
    v72[1] = 3221225472;
    v72[2] = __47__HMDHome__sharedAdminDidFailToAddAccessories___block_invoke_1260;
    void v72[3] = &unk_1E6A190E8;
    objc_copyWeak(&v75, (id *)buf);
    id v73 = *(id *)(v70 + 40);
    id v48 = v50;
    id v74 = v48;
    [v58 _removeAccessory:v48 completionHandler:v72];

    objc_destroyWeak(&v75);
    objc_destroyWeak((id *)buf);
LABEL_47:
  }
}

void __47__HMDHome__sharedAdminDidFailToAddAccessories___block_invoke_1260(id *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v6 = WeakRetained;
  if (WeakRetained)
  {
    long long v7 = [WeakRetained workQueue];
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    void v8[2] = __47__HMDHome__sharedAdminDidFailToAddAccessories___block_invoke_2;
    v8[3] = &unk_1E6A18668;
    id v9 = v4;
    id v10 = v6;
    id v11 = a1[4];
    id v12 = a1[5];
    dispatch_async(v7, v8);
  }
}

void __47__HMDHome__sharedAdminDidFailToAddAccessories___block_invoke_2(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32))
  {
    id v2 = (void *)MEMORY[0x1D9452090]();
    id v3 = *(id *)(a1 + 40);
    id v4 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = HMFGetLogIdentifier();
      id v6 = [*(id *)(a1 + 56) name];
      uint64_t v7 = *(void *)(a1 + 32);
      int v10 = 138543874;
      id v11 = v5;
      __int16 v12 = 2112;
      id v13 = v6;
      __int16 v14 = 2112;
      uint64_t v15 = v7;
      _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to remove accessory %@ with error: %@", (uint8_t *)&v10, 0x20u);
    }
  }
  else
  {
    uint64_t v8 = *(void **)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    [v8 _removeAccessories:v9 message:0];
  }
}

- (void)_notifyOwnerOfAddedAccessories:(id)a3 completion:(id)a4
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v31 = a4;
  id v32 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v7 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v8 = (void *)[v6 mutableCopy];
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id v9 = v6;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v37 objects:v41 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v38;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v38 != v11) {
          objc_enumerationMutation(v9);
        }
        id v13 = *(id *)(*((void *)&v37 + 1) + 8 * v12);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          __int16 v14 = v13;
        }
        else {
          __int16 v14 = 0;
        }
        id v15 = v14;

        if (v15)
        {
          [v7 addObject:v15];
          [v8 removeObject:v15];
        }

        ++v12;
      }
      while (v10 != v12);
      uint64_t v10 = [v9 countByEnumeratingWithState:&v37 objects:v41 count:16];
    }
    while (v10);
  }

  uint64_t v16 = (void *)[v8 copy];
  [v32 setObject:v7 forKey:@"accessories.airplay"];
  uint64_t v17 = encodeRootObject();
  [v32 setObject:v17 forKey:@"accessories"];
  uint64_t v18 = [(HMDHome *)self chipStorage];
  id v19 = [v18 fabricID];
  [v32 setObject:v19 forKeyedSubscript:@"HMDHomeCHIPFabricIndexMessageKey"];

  id v20 = [(HMDHome *)self chipStorage];
  id v21 = [v20 fabricID];
  [v32 setObject:v21 forKeyedSubscript:@"HMDHomeCHIPFabricIDMessageKey"];

  objc_initWeak(&location, self);
  id v22 = (void *)MEMORY[0x1E4F654B0];
  id v23 = (void *)[v32 copy];
  v33[0] = MEMORY[0x1E4F143A8];
  v33[1] = 3221225472;
  void v33[2] = __53__HMDHome__notifyOwnerOfAddedAccessories_completion___block_invoke;
  v33[3] = &unk_1E6A193F8;
  objc_copyWeak(&v35, &location);
  id v24 = v31;
  id v34 = v24;
  uint64_t v25 = [v22 messageWithName:@"kAddAccessoriesInternalRequestKey" messagePayload:v23 responseHandler:v33];

  id v26 = objc_alloc(MEMORY[0x1E4F65488]);
  char v27 = [(HMDHome *)self uuid];
  uint64_t v28 = (void *)[v26 initWithTarget:v27];

  [v25 setDestination:v28];
  [v25 setQualityOfService:33];
  long long v29 = [(HMDHome *)self administratorHandler];
  long long v30 = [v29 operationForMessage:v25 error:0];
  if (v30) {
    [v29 addOperation:v30];
  }

  objc_destroyWeak(&v35);
  objc_destroyWeak(&location);
}

void __53__HMDHome__notifyOwnerOfAddedAccessories_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = WeakRetained;
    uint64_t v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      int v13 = 138543874;
      __int16 v14 = v11;
      __int16 v15 = 2112;
      uint64_t v16 = @"kAddAccessoriesInternalRequestKey";
      __int16 v17 = 2112;
      id v18 = v5;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Relayed message %@ with error %@", (uint8_t *)&v13, 0x20u);
    }
    uint64_t v12 = *(void *)(a1 + 32);
    if (v12) {
      (*(void (**)(uint64_t, id))(v12 + 16))(v12, v5);
    }
  }
}

- (BOOL)_addOwnerToPrimaryAccessory:(id)a3 error:(id *)a4
{
  id v6 = a3;
  if ([v6 isPrimary])
  {
    uint64_t v20 = 0;
    id v21 = &v20;
    uint64_t v22 = 0x3032000000;
    id v23 = __Block_byref_object_copy__10691;
    id v24 = __Block_byref_object_dispose__10692;
    id v25 = 0;
    id v7 = [(HMDHome *)self owner];
    uint64_t v8 = (id *)(v21 + 5);
    id obj = (id)v21[5];
    id v9 = [(HMDHome *)self prepareUserManagementOperationForUser:v7 accessory:v6 type:1 model:0 error:&obj];
    objc_storeStrong(v8, obj);

    uint64_t v10 = (void *)v21[5];
    if (!v10)
    {
      uint64_t v11 = dispatch_group_create();
      dispatch_group_enter(v11);
      uint64_t v12 = dispatch_get_global_queue(0, 0);
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 3221225472;
      void v16[2] = __45__HMDHome__addOwnerToPrimaryAccessory_error___block_invoke;
      v16[3] = &unk_1E6A10A30;
      id v18 = &v20;
      int v13 = v11;
      __int16 v17 = v13;
      [v9 executeWithCompletionQueue:v12 completionHandler:v16];

      dispatch_group_wait(v13, 0xFFFFFFFFFFFFFFFFLL);
      uint64_t v10 = (void *)v21[5];
    }
    BOOL v14 = v10 == 0;
    if (a4 && v10) {
      *a4 = v10;
    }

    _Block_object_dispose(&v20, 8);
  }
  else
  {
    BOOL v14 = 1;
  }

  return v14;
}

void __45__HMDHome__addOwnerToPrimaryAccessory_error___block_invoke(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

- (void)_deregisterPairedAccessory:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self accessoryBrowser];
  [v5 deregisterPairedAccessory:v4];
}

- (id)hapAccessoryUniqueIdentifiers
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v2 = [(HMDHome *)self accessories];
  id v3 = objc_msgSend(MEMORY[0x1E4F1CA80], "setWithCapacity:", objc_msgSend(v2, "count"));
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v4 = v2;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(id *)(*((void *)&v15 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v10 = v9;
        }
        else {
          uint64_t v10 = 0;
        }
        id v11 = v10;

        if (v11)
        {
          uint64_t v12 = objc_msgSend(v11, "uniqueIdentifier", (void)v15);
          [v3 addObject:v12];
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v6);
  }

  int v13 = (void *)[v3 copy];
  return v13;
}

- (id)hapAccessoryServerIdentifiers
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v2 = [(HMDHome *)self accessories];
  id v3 = objc_msgSend(MEMORY[0x1E4F1CA80], "setWithCapacity:", objc_msgSend(v2, "count"));
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v4 = v2;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(id *)(*((void *)&v15 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v10 = v9;
        }
        else {
          uint64_t v10 = 0;
        }
        id v11 = v10;

        if (v11 && objc_msgSend(v11, "isPrimary", (void)v15))
        {
          uint64_t v12 = [v11 identifier];
          [v3 addObject:v12];
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v6);
  }

  int v13 = (void *)[v3 copy];
  return v13;
}

- (unint64_t)accessoryCountForRoom:(id)a3
{
  id v4 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"room == %@", a3];
  uint64_t v5 = [(HMDHome *)self accessories];
  uint64_t v6 = [v5 filteredArrayUsingPredicate:v4];

  unint64_t v7 = [v6 count];
  return v7;
}

- (void)scheduleRemoval
{
  id v4 = [(HMDHome *)self homeManager];
  id v3 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  [v4 scheduleRemovalForHome:self message:0 options:v3];
}

- (id)hmdHAPAccessoryWithHAPAccessory:(id)a3
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v5 = [(HMDHome *)self accessories];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v15;
LABEL_3:
    uint64_t v9 = 0;
    while (1)
    {
      if (*(void *)v15 != v8) {
        objc_enumerationMutation(v5);
      }
      id v10 = *(id *)(*((void *)&v14 + 1) + 8 * v9);
      objc_opt_class();
      id v11 = (objc_opt_isKindOfClass() & 1) != 0 ? v10 : 0;
      id v12 = v11;

      if ([v12 matchesHAPAccessory:v4]) {
        break;
      }

      if (v7 == ++v9)
      {
        uint64_t v7 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
        if (v7) {
          goto LABEL_3;
        }
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    id v12 = 0;
  }

  return v12;
}

- (id)hapAccessoryWithIdentifier:(id)a3 instanceID:(id)a4
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v8 = [(HMDHome *)self accessories];
  uint64_t v9 = [v8 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v23 != v11) {
          objc_enumerationMutation(v8);
        }
        int v13 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        long long v14 = [v13 identifier];
        int v15 = [v14 isEqualToString:v6];

        if (v15)
        {
          id v16 = v13;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            long long v17 = v16;
          }
          else {
            long long v17 = 0;
          }
          id v18 = v17;

          if (v18)
          {
            if (!v7) {
              goto LABEL_17;
            }
            uint64_t v19 = [v18 hapInstanceId];
            char v20 = [v19 isEqualToNumber:v7];

            if (v20) {
              goto LABEL_17;
            }
          }
        }
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v22 objects:v26 count:16];
    }
    while (v10);
  }
  id v16 = 0;
LABEL_17:

  return v16;
}

- (void)_removeWithMergeSecondaryAccessory:(id)a3 removedFromBridgeAccessory:(id)a4 completionHandler:(id)a5
{
  v12[1] = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  uint64_t v9 = (void (**)(id, void *, void))a5;
  [a4 removeHostedAccessory:v8];
  [(HMDHome *)self removeAccessory:v8];
  uint64_t v10 = +[HMDBulletinBoard sharedBulletinBoard];
  [v10 removeBulletinsForAccessory:v8];

  [(HMDHome *)self _reevaluateAccessoryInfoWithBadgeRefresh:1];
  if (v9)
  {
    v12[0] = v8;
    uint64_t v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v12 count:1];
    v9[2](v9, v11, 0);
  }
}

- (void)removeWithMergeSecondaryAccessory:(id)a3 removedFromBridgeAccessory:(id)a4 completionHandler:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = [(HMDHome *)self workQueue];
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  void v15[2] = __90__HMDHome_removeWithMergeSecondaryAccessory_removedFromBridgeAccessory_completionHandler___block_invoke;
  v15[3] = &unk_1E6A18398;
  void v15[4] = self;
  id v16 = v8;
  id v17 = v9;
  id v18 = v10;
  id v12 = v10;
  id v13 = v9;
  id v14 = v8;
  dispatch_async(v11, v15);
}

uint64_t __90__HMDHome_removeWithMergeSecondaryAccessory_removedFromBridgeAccessory_completionHandler___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeWithMergeSecondaryAccessory:*(void *)(a1 + 40) removedFromBridgeAccessory:*(void *)(a1 + 48) completionHandler:*(void *)(a1 + 56)];
}

- (void)notifyOfNewlyAddedAccessoryByThisOwnerDevice:(id)a3
{
  v16[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = v5;
  if (v6)
  {
    id v7 = v6;
    BOOL v8 = [(HMDHome *)self isOwnerUser];

    if (!v8) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  id v9 = v4;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v10 = v9;
  }
  else {
    id v10 = 0;
  }
  id v11 = v10;

  if (v11)
  {
    BOOL v12 = [(HMDHome *)self isOwnerUser];

    if (v12)
    {
LABEL_12:
      id v13 = [(HMDHome *)self notificationCenter];
      int v15 = @"HMDAccessoryNotificationKey";
      v16[0] = v4;
      id v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v16 forKeys:&v15 count:1];
      [v13 postNotificationName:@"HMDHomeThisOwnerDeviceAddedAccessoryNotification" object:self userInfo:v14];
    }
  }
LABEL_13:
}

- (void)notifyOfAddedAccessory:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __34__HMDHome_notifyOfAddedAccessory___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __34__HMDHome_notifyOfAddedAccessory___block_invoke(uint64_t a1)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  id v2 = *(void **)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  id v4 = @"HMDNotificationAddedAccessoryKey";
  v5[0] = v1;
  id v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v5 forKeys:&v4 count:1];
  logAndPostNotification(@"HMDNotificationHomeAddedAccessory", v2, v3);
}

- (void)notifyOfRemovedAccessory:(id)a3 source:(unint64_t)a4
{
  id v6 = a3;
  id v7 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __43__HMDHome_notifyOfRemovedAccessory_source___block_invoke;
  block[3] = &unk_1E6A16D78;
  void block[4] = self;
  id v10 = v6;
  unint64_t v11 = a4;
  id v8 = v6;
  dispatch_async(v7, block);
}

void __43__HMDHome_notifyOfRemovedAccessory_source___block_invoke(uint64_t a1)
{
  void v8[2] = *MEMORY[0x1E4F143B8];
  id v2 = [*(id *)(a1 + 32) notificationCenter];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v7[1] = @"HMDNotificationSourceKey";
  v8[0] = v3;
  v7[0] = @"HMDAccessoryNotificationKey";
  uint64_t v5 = [NSNumber numberWithUnsignedInteger:*(void *)(a1 + 48)];
  v8[1] = v5;
  id v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v8 forKeys:v7 count:2];
  [v2 postNotificationName:@"HMDHomeAccessoryRemovedNotification" object:v4 userInfo:v6];
}

- (void)_handleRemoveAccessoryModel:(id)a3 message:(id)a4
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = [v6 uuid];

  if (v8)
  {
    id v9 = [v7 transactionResult];
    id v10 = [v6 uuid];
    unint64_t v11 = [(HMDHome *)self accessoryWithUUID:v10];

    BOOL v12 = (void *)MEMORY[0x1D9452090]();
    id v13 = self;
    id v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      int v15 = HMFGetLogIdentifier();
      id v16 = [v6 debugString:1];
      *(_DWORD *)buf = 138543618;
      uint64_t v42 = v15;
      __int16 v43 = 2112;
      id v44 = v16;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Going to remove accessory : %@", buf, 0x16u);
    }
    id v17 = v11;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v18 = v17;
    }
    else {
      id v18 = 0;
    }
    id v19 = v18;

    if (v17)
    {
      if (isInternalBuild() && ([v17 shouldProcessTransactionRemoval] & 1) == 0)
      {
        long long v36 = (void *)MEMORY[0x1D9452090]();
        long long v37 = v13;
        long long v38 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          long long v39 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          uint64_t v42 = v39;
          _os_log_impl(&dword_1D49D5000, v38, OS_LOG_TYPE_ERROR, "%{public}@Failed to process transaction removal due to internal flag set to simulate this failure", buf, 0xCu);
        }
        [v7 respondWithSuccess];
        goto LABEL_20;
      }
      if ([v17 isPrimary])
      {
        char v20 = [v6 uuid];
        [(HMDHome *)v13 _removeAccessoryWithUUID:v20 message:v7];

        id v21 = [(HMDHome *)v13 networkProtectionGroupRegistry];
        [v21 handleRemovedAccessory:v17];

        long long v22 = [v17 uuid];
        long long v23 = [(HMDHome *)v13 activeNetworkRouterUUID];
        int v24 = [v22 isEqual:v23];

        if (v24) {
          [(HMDHome *)v13 _evaluateNetworkRouterManagementForTransaction:v9];
        }
      }
      else
      {
        long long v25 = [v19 bridge];
        [v25 removeHostedAccessory:v17];
        [(HMDHome *)v13 removeAccessory:v17];
        id v40 = v17;
        id v26 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v40 count:1];
        [(HMDHome *)v13 _removeAccessories:v26 message:0];
      }
      uint64_t v27 = [v7 transactionResult];
      -[HMDHome notifyOfRemovedAccessory:source:](v13, "notifyOfRemovedAccessory:source:", v17, [v27 source]);
      uint64_t v28 = [(HMDHome *)v13 homeManager];
      if ([v19 isPrimary])
      {
        long long v29 = [v19 matterNodeID];
        int v30 = [v29 unsignedIntValue];

        if (v30)
        {
          id v31 = [v28 accessoryBrowser];
          id v32 = [v31 chipAccessoryServerBrowser];
          long long v33 = [v19 matterNodeID];
          [v32 handleHomeRemovedAccessoryWithNodeID:v33];
        }
      }
      id v34 = [v28 lastEventStoreController];
      id v35 = [v17 uuid];
      [v34 didRemoveAccessory:v35];
    }
    [v9 markChanged];
    [v9 markSaveToAssistant];
LABEL_20:

    goto LABEL_21;
  }
  id v9 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:3 userInfo:0];
  id v17 = [v7 responseHandler];
  (*((void (**)(id, void *, void))v17 + 2))(v17, v9, 0);
LABEL_21:
}

- (void)_submitRemovalLogEventForAccessory:(id)a3 isLocalRemoval:(BOOL)a4 isLocalFallback:(BOOL)a5 isDuplicate:(BOOL)a6 duplicateCount:(int64_t)a7 error:(id)a8
{
  BOOL v10 = a6;
  BOOL v11 = a5;
  BOOL v12 = a4;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v14 = a3;
  id v15 = a8;
  id v16 = v14;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v17 = v16;
  }
  else {
    id v17 = 0;
  }
  id v18 = v17;

  if (v18 && [v18 isHomePod])
  {
    id v19 = [[HMDAppleMediaAccessoryRemovalLogEvent alloc] initWithIsLocalRemoval:v12 isLocalFallback:v11 isDuplicate:v10 duplicateCount:a7];
    char v20 = (void *)MEMORY[0x1D9452090]();
    id v21 = self;
    long long v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      long long v23 = HMFGetLogIdentifier();
      int v24 = [(HMDAppleMediaAccessoryRemovalLogEvent *)v19 coreAnalyticsEventDictionary];
      int v26 = 138543874;
      uint64_t v27 = v23;
      __int16 v28 = 2112;
      long long v29 = v24;
      __int16 v30 = 2112;
      id v31 = v15;
      _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_INFO, "%{public}@Submitting apple media accessory removal log event: %@ error: %@", (uint8_t *)&v26, 0x20u);
    }
    long long v25 = [(HMDHome *)v21 logEventSubmitter];
    [v25 submitLogEvent:v19 error:v15];
  }
}

- (void)_handleRemoveAccessoryAfterUserConsent:(id)a3 message:(id)a4
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  if ([(HMDHome *)self isAdminUser])
  {
    id v8 = [(HMDHome *)self administratorHandler];
    if (([v8 shouldRelayMessages] & 1) != 0
      || [v6 requiresRemovalOnPrimaryResident]
      && ![(HMDHome *)self isCurrentDevicePrimaryResident])
    {
      id v17 = (void *)MEMORY[0x1D9452090]();
      id v18 = self;
      id v19 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        char v20 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v34 = v20;
        _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_INFO, "%{public}@Sending remove accessory request to owner / primary resident", buf, 0xCu);
      }
      id v32 = 0;
      id v21 = [v8 operationForMessage:v7 error:&v32];
      id v22 = v32;
      if (v21)
      {
        long long v23 = (void *)MEMORY[0x1D9452090]([v8 addOperation:v21]);
        int v24 = v18;
        long long v25 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
        {
          int v26 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          id v34 = v26;
          _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_INFO, "%{public}@Also removing accessory locally", buf, 0xCu);
        }
        -[HMDHome __removeAccessory:isBeingReplaced:isForceUpdate:message:](v24, v6, 0, v7);
        [(HMDHome *)v24 _submitRemovalLogEventForAccessory:v6 isLocalRemoval:1 isLocalFallback:1 isDuplicate:0 duplicateCount:0 error:v22];
      }
      else
      {
        uint64_t v27 = (void *)MEMORY[0x1D9452090]();
        __int16 v28 = v18;
        long long v29 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          __int16 v30 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          id v34 = v30;
          __int16 v35 = 2112;
          id v36 = v22;
          _os_log_impl(&dword_1D49D5000, v29, OS_LOG_TYPE_ERROR, "%{public}@Failed to create home administrator configuration operation for accessory removal: %@", buf, 0x16u);
        }
        id v31 = [MEMORY[0x1E4F28C58] hmErrorWithCode:52];
        [v7 respondWithError:v31];
      }
    }
    else
    {
      id v9 = (void *)MEMORY[0x1D9452090]();
      BOOL v10 = self;
      BOOL v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        BOOL v12 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v34 = v12;
        _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Removing accessory locally", buf, 0xCu);
      }
      -[HMDHome __removeAccessory:isBeingReplaced:isForceUpdate:message:](v10, v6, 0, v7);
      [(HMDHome *)v10 _submitRemovalLogEventForAccessory:v6 isLocalRemoval:1 isLocalFallback:0 isDuplicate:0 duplicateCount:0 error:0];
    }
  }
  else
  {
    id v13 = (void *)MEMORY[0x1D9452090]();
    id v14 = self;
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      id v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v34 = v16;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_ERROR, "%{public}@Not removing accessory due to insufficient privileges", buf, 0xCu);
    }
    id v8 = [MEMORY[0x1E4F28C58] hmErrorWithCode:17];
    [v7 respondWithError:v8];
  }
}

- (void)__removeAccessory:(void *)a1 isBeingReplaced:(void *)a2 isForceUpdate:(char)a3 message:(void *)a4
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a4;
  if (a1)
  {
    uint64_t v8 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    id v9 = [a1 backingStore];
    BOOL v10 = [v7 name];
    uint64_t v42 = (void *)v8;
    BOOL v11 = [v9 transaction:v10 options:v8];

    BOOL v12 = [MEMORY[0x1E4F1CA48] arrayWithObject:v6];
    id v13 = v6;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v14 = v13;
    }
    else {
      id v14 = 0;
    }
    id v15 = v14;

    if (v15)
    {
      id v16 = [a1 accessories];
      v67[0] = MEMORY[0x1E4F143A8];
      v67[1] = 3221225472;
      void v67[2] = __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke;
      v67[3] = &unk_1E6A10BD0;
      id v68 = v15;
      id v17 = objc_msgSend(v16, "na_filter:", v67);

      [v12 addObjectsFromArray:v17];
    }
    long long v46 = a1;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    id v18 = v12;
    uint64_t v19 = [v18 countByEnumeratingWithState:&v63 objects:v70 count:16];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = *(void *)v64;
      do
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          if (*(void *)v64 != v21) {
            objc_enumerationMutation(v18);
          }
          long long v23 = [*(id *)(*((void *)&v63 + 1) + 8 * i) transactionWithObjectChangeType:3];
          [v11 add:v23 withMessage:v7];
        }
        uint64_t v20 = [v18 countByEnumeratingWithState:&v63 objects:v70 count:16];
      }
      while (v20);
    }
    id v41 = v15;
    id v43 = v7;
    id v44 = v6;

    dispatch_group_t v24 = dispatch_group_create();
    long long v59 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    id v25 = v18;
    int v26 = v24;
    id obj = v25;
    uint64_t v27 = v46;
    uint64_t v50 = [v25 countByEnumeratingWithState:&v59 objects:v69 count:16];
    if (v50)
    {
      uint64_t v48 = *(void *)v60;
      uint64_t v45 = v24;
      do
      {
        for (uint64_t j = 0; j != v50; ++j)
        {
          if (*(void *)v60 != v48) {
            objc_enumerationMutation(obj);
          }
          long long v29 = *(void **)(*((void *)&v59 + 1) + 8 * j);
          dispatch_group_enter(v26);
          v53[0] = MEMORY[0x1E4F143A8];
          v53[1] = 3221225472;
          __int16 v30 = __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_2;
          id v54 = __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_2;
          long long v55 = &unk_1E6A19668;
          id v56 = v27;
          id v57 = v29;
          uint64_t v58 = v26;
          id v31 = v27;
          id v32 = v29;
          long long v33 = v11;
          id v34 = v11;
          __int16 v35 = v53;
          if ((a3 & 1) == 0)
          {
            id v36 = [v32 uuid];
            uint64_t v37 = [v31 activeNetworkRouterUUID];
            char v38 = [v36 isEqual:v37];

            if (v38)
            {
              [v31 _updateActiveNetworkRouterAccessory:0 isReplacement:0 withTransaction:v34];
              [v31 _clearAccessoryNetworkProtectionStateWithTransaction:v34];
              [v31 _reconfigureAccessoriesOnRouterRemovalWithCompletion:v35];
              uint64_t v27 = v46;
              int v26 = v45;
              goto LABEL_24;
            }
            __int16 v30 = v54;
            uint64_t v27 = v46;
            int v26 = v45;
          }
          v30((uint64_t)v35);
LABEL_24:

          BOOL v11 = v33;
        }
        uint64_t v50 = [obj countByEnumeratingWithState:&v59 objects:v69 count:16];
      }
      while (v50);
    }

    long long v39 = [v27 workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_5;
    block[3] = &unk_1E6A19B30;
    id v52 = v11;
    id v40 = v11;
    dispatch_group_notify(v26, v39, block);

    id v7 = v43;
    id v6 = v44;
  }
}

BOOL __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 hostAccessory];
  BOOL v4 = v3 == *(void **)(a1 + 32);

  return v4;
}

void __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = *(void **)(a1 + 40);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  id v7 = __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_3;
  uint64_t v8 = &unk_1E6A19668;
  id v9 = v1;
  BOOL v10 = v2;
  id v11 = *(id *)(a1 + 48);
  id v3 = v1;
  id v4 = v2;
  uint64_t v5 = v6;
  if (([v4 isPrimary] & 1) != 0
    || [v4 conformsToProtocol:&unk_1F2E2B960]
    && [v4 supportsUserManagement])
  {
    [v3 removeAllUsersAndCloudDataFromAccessory:v4 completionHandler:v5];
  }
  else
  {
    v7((uint64_t)v5);
  }
}

uint64_t __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_5(uint64_t a1)
{
  return [*(id *)(a1 + 32) run];
}

void __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_3(uint64_t a1)
{
  uint64_t v5 = MEMORY[0x1E4F143A8];
  uint64_t v6 = 3221225472;
  id v7 = __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_4;
  uint64_t v8 = &unk_1E6A19B30;
  uint64_t v1 = *(void **)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v2 = v1;
  id v3 = &v5;
  if (objc_msgSend(v2, "conformsToProtocol:", &unk_1F2E59C30, v5, v6)) {
    id v4 = v2;
  }
  else {
    id v4 = 0;
  }
  if ([v4 supportsDisassociation])
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    void v10[2] = ____disassociateAccessoryIfSupported_block_invoke;
    void v10[3] = &unk_1E6A19358;
    id v11 = v3;
    [v2 disassociateWithCompletionHandler:v10];
  }
  else
  {
    v7((uint64_t)v3);
  }
}

void __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_4(uint64_t a1)
{
}

- (BOOL)shouldAccessoryRemovalFallbackToLocalRemovalOnError:(id)a3 accessory:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if ([v6 isHMError] && objc_msgSend(v6, "code") == 8
    || [v6 isHMFError] && objc_msgSend(v6, "code") == 13
    || [v6 isHMError] && objc_msgSend(v6, "code") == 91)
  {
    uint64_t v8 = [(HMDHome *)self homeManager];
    if ([v8 isNetworkConnectionAvailable]
      && ((v9 = v7, objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0) ? (BOOL v10 = 0) : (BOOL v10 = v9),
          id v11 = v10,
          v9,
          v11))
    {
      BOOL v12 = [(HMDHome *)self owner];
      char v13 = [v12 isCurrentUser];
    }
    else
    {
      char v13 = 0;
    }
  }
  else
  {
    char v13 = 0;
  }

  return v13;
}

- (void)_handleRemoveAccessoryMessage:(id)a3
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = [v4 uuidForKey:@"kAccessoryUUID"];
  if (v6)
  {
    id v7 = [(HMDHome *)self accessoryWithUUID:v6];
    if (!v7)
    {
      long long v23 = (void *)MEMORY[0x1D9452090]();
      dispatch_group_t v24 = self;
      id v25 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        int v26 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v58 = v26;
        __int16 v59 = 2112;
        id v60 = v6;
        _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to find accessory with UUID: %@", buf, 0x16u);
      }
      id v8 = [v4 responseHandler];

      if (v8)
      {
        uint64_t v27 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
        __int16 v28 = [v4 responseHandler];
        ((void (**)(void, void *, void))v28)[2](v28, v27, 0);

        id v8 = 0;
      }
      goto LABEL_26;
    }
    id v8 = v7;
    if ([v8 conformsToProtocol:&unk_1F2E59C30]) {
      id v9 = v8;
    }
    else {
      id v9 = 0;
    }
    id v10 = v9;

    char v11 = [v10 supportsDisassociation];
    if (v11 & 1) != 0 || ([v8 isPrimary])
    {
      BOOL v12 = (void *)MEMORY[0x1D9452090]();
      char v13 = self;
      id v14 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        id v15 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v58 = v15;
        __int16 v59 = 2112;
        id v60 = v8;
        _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Received request to remove accessory: %@", buf, 0x16u);
      }
      if ([v4 isRemote] & 1) != 0 || (objc_msgSend(v4, "isEntitledForSPIAccess")) {
        goto LABEL_12;
      }
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = __41__HMDHome__handleRemoveAccessoryMessage___block_invoke;
      aBlock[3] = &unk_1E6A08220;
      void aBlock[4] = v13;
      id v55 = v4;
      id v35 = v8;
      id v56 = v35;
      id v36 = _Block_copy(aBlock);
      uint64_t v37 = [v35 uuid];
      char v38 = [(HMDHome *)v13 activeNetworkRouterUUID];
      int v39 = [v37 isEqual:v38];

      if (v39)
      {
        id v40 = [(HMDHome *)v13 accessoriesRequiringManualReconfigurationOnRouterRemoval];
        id v41 = objc_msgSend(v40, "na_map:", &__block_literal_global_1252);

        uint64_t v42 = (void *)MEMORY[0x1D9452090]();
        id v43 = v13;
        id v44 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
        {
          uint64_t v45 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          uint64_t v58 = v45;
          _os_log_impl(&dword_1D49D5000, v44, OS_LOG_TYPE_INFO, "%{public}@Requesting permission to remove active network router accessory", buf, 0xCu);
        }
        long long v46 = +[HMDUIDialogPresenter sharedUIDialogPresenter];
        long long v47 = [v35 name];
        uint64_t v48 = [v35 uuid];
        uint64_t v49 = [(HMDHome *)v43 workQueue];
        [v46 requestUserPermissionForRemovalOfRouter:v47 accessoriesRequiringManualReconfiguration:v41 withContext:v48 queue:v49 completionHandler:v36];
      }
      else
      {
        if ([v35 wiFiCredentialType] != 3)
        {

LABEL_12:
          [(HMDHome *)v13 _handleRemoveAccessoryAfterUserConsent:v8 message:v4];
LABEL_26:

          goto LABEL_27;
        }
        uint64_t v50 = (void *)MEMORY[0x1D9452090]();
        uint64_t v51 = v13;
        id v52 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
        {
          long long v53 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          uint64_t v58 = v53;
          _os_log_impl(&dword_1D49D5000, v52, OS_LOG_TYPE_INFO, "%{public}@Requesting permission to remove accessory with specific WiFi credential", buf, 0xCu);
        }
        id v41 = +[HMDUIDialogPresenter sharedUIDialogPresenter];
        long long v46 = [v35 name];
        long long v47 = [v35 uuid];
        uint64_t v48 = [(HMDHome *)v51 workQueue];
        [v41 requestUserPermissionForRemovalOfSpecificWiFiCredentialedAccessory:v46 withContext:v47 queue:v48 completionHandler:v36];
      }

      id v8 = v35;
      goto LABEL_26;
    }
    long long v29 = (void *)MEMORY[0x1D9452090]();
    __int16 v30 = self;
    id v31 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      id v32 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v58 = v32;
      __int16 v59 = 2112;
      id v60 = v8;
      _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_ERROR, "%{public}@cannot remove non-primary accessory %@", buf, 0x16u);
    }
    long long v33 = [v4 responseHandler];

    if (!v33) {
      goto LABEL_26;
    }
    id v22 = [v4 responseHandler];
    id v34 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:34 userInfo:0];
    ((void (**)(void, void *, void))v22)[2](v22, v34, 0);

LABEL_25:
    goto LABEL_26;
  }
  id v16 = (void *)MEMORY[0x1D9452090]();
  id v17 = self;
  id v18 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = HMFGetLogIdentifier();
    uint64_t v20 = [v4 messagePayload];
    *(_DWORD *)buf = 138543618;
    uint64_t v58 = v19;
    __int16 v59 = 2112;
    id v60 = v20;
    _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_DEFAULT, "%{public}@Missing target accessory UUID from message payload: %@", buf, 0x16u);
  }
  uint64_t v21 = [v4 responseHandler];

  if (v21)
  {
    id v8 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    id v22 = [v4 responseHandler];
    ((void (**)(void, id, void))v22)[2](v22, v8, 0);
    goto LABEL_25;
  }
LABEL_27:
}

void __41__HMDHome__handleRemoveAccessoryMessage___block_invoke(uint64_t a1, int a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (a2)
  {
    if (v7)
    {
      id v8 = HMFGetLogIdentifier();
      int v12 = 138543362;
      char v13 = v8;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@User canceled consent for removing accessory", (uint8_t *)&v12, 0xCu);
    }
    id v9 = *(void **)(a1 + 40);
    id v10 = [MEMORY[0x1E4F28C58] hmErrorWithCode:23];
    [v9 respondWithError:v10];
  }
  else
  {
    if (v7)
    {
      char v11 = HMFGetLogIdentifier();
      int v12 = 138543362;
      char v13 = v11;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@User accepted consent for removing accessory", (uint8_t *)&v12, 0xCu);
    }
    [*(id *)(a1 + 32) _handleRemoveAccessoryAfterUserConsent:*(void *)(a1 + 48) message:*(void *)(a1 + 40)];
  }
}

uint64_t __41__HMDHome__handleRemoveAccessoryMessage___block_invoke_1249(uint64_t a1, void *a2)
{
  return [a2 name];
}

- (void)handleRemoveAccessoryMessage:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __40__HMDHome_handleRemoveAccessoryMessage___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

uint64_t __40__HMDHome_handleRemoveAccessoryMessage___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleRemoveAccessoryMessage:*(void *)(a1 + 40)];
}

- (void)handleRemoveAccessory:(id)a3 completion:(id)a4
{
  v24[1] = *MEMORY[0x1E4F143B8];
  id v6 = a4;
  BOOL v7 = (objc_class *)MEMORY[0x1E4F654B0];
  id v8 = a3;
  id v9 = [v7 alloc];
  id v10 = objc_alloc(MEMORY[0x1E4F65488]);
  char v11 = [(HMDHome *)self uuid];
  int v12 = (void *)[v10 initWithTarget:v11];
  long long v23 = @"kAccessoryUUID";
  char v13 = [v8 uuid];

  uint64_t v14 = [v13 UUIDString];
  v24[0] = v14;
  id v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:&v23 count:1];
  id v16 = (void *)[v9 initWithName:@"kRemoveAccessoryRequestKey" destination:v12 payload:v15];

  uint64_t v18 = MEMORY[0x1E4F143A8];
  uint64_t v19 = 3221225472;
  uint64_t v20 = __44__HMDHome_handleRemoveAccessory_completion___block_invoke;
  uint64_t v21 = &unk_1E6A0DD88;
  id v22 = v6;
  id v17 = v6;
  [v16 setResponseHandler:&v18];
  -[HMDHome handleRemoveAccessoryMessage:](self, "handleRemoveAccessoryMessage:", v16, v18, v19, v20, v21);
}

void __44__HMDHome_handleRemoveAccessory_completion___block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = _Block_copy(*(const void **)(a1 + 32));
  id v4 = v3;
  if (v3) {
    (*((void (**)(void *, id))v3 + 2))(v3, v5);
  }
}

- (void)__handleAddMediaAccessoryModel:(id)a3 message:(id)a4
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = HMFGetOSLogHandle();
  if (os_signpost_enabled(v8))
  {
    id v9 = [v6 uuid];
    id v10 = [v6 parentUUID];
    char v11 = [v6 bsoRecord];
    int v12 = [v11 recordID];
    uint64_t v13 = [v12 recordName];
    uint64_t v14 = (void *)v13;
    id v15 = &stru_1F2C9F1A8;
    *(_DWORD *)buf = 138412802;
    long long v76 = v9;
    if (v13) {
      id v15 = (__CFString *)v13;
    }
    __int16 v77 = 2112;
    id v78 = v10;
    __int16 v79 = 2112;
    long long v80 = v15;
    _os_signpost_emit_with_name_impl(&dword_1D49D5000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "AddMediaAccessoryModel", "Identifier=%{signpost.description:attribute}@ parentUUID=%{signpost.description:attribute}@ recordName=%{signpost.description:attribute}@ ", buf, 0x20u);
  }
  id v16 = (void *)MEMORY[0x1D9452090]();
  id v17 = self;
  uint64_t v18 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    uint64_t v19 = HMFGetLogIdentifier();
    uint64_t v20 = [v6 uuid];
    *(_DWORD *)buf = 138543618;
    long long v76 = v19;
    __int16 v77 = 2112;
    id v78 = v20;
    _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@Creating new media accessory from model with UUID %@", buf, 0x16u);
  }
  id v21 = v6;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v22 = v21;
  }
  else {
    id v22 = 0;
  }
  id v23 = v22;

  id v24 = v21;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v25 = v24;
  }
  else {
    id v25 = 0;
  }
  id v26 = v25;

  if (v23)
  {
    id v27 = v23;
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    if (isKindOfClass) {
      long long v29 = v27;
    }
    else {
      long long v29 = 0;
    }
    if (isKindOfClass) {
      __int16 v30 = off_1E6A033F8;
    }
    else {
      __int16 v30 = off_1E6A03418;
    }
    id v31 = v29;

    id v32 = v27;
    objc_opt_class();
    char v33 = objc_opt_isKindOfClass();
    if (v33) {
      id v34 = v32;
    }
    else {
      id v34 = 0;
    }
    if (v33) {
      __int16 v30 = off_1E6A03408;
    }
    id v35 = v34;

    id v36 = (HMDAirPlayAccessory *)[objc_alloc(*v30) initWithTransaction:v32 home:v17];
    BOOL v37 = 0;
    if (!v36) {
      goto LABEL_39;
    }
LABEL_29:
    id v63 = v26;
    id v64 = v24;
    long long v65 = v23;
    char v38 = v36;
    objc_opt_class();
    char v39 = objc_opt_isKindOfClass();
    if (v39) {
      id v40 = v38;
    }
    else {
      id v40 = 0;
    }
    id v41 = v40;

    [(HMDAirPlayAccessory *)v41 setDataSource:v17];
    [(HMDHome *)v17 addAccessory:v38];
    uint64_t v42 = [(HMDHome *)v17 homeManager];
    id v43 = [(HMDAccessory *)v38 uuid];
    id v44 = [v42 accessorySetupMetricDispatcherForAccessoryUUID:v43];

    long long v62 = v44;
    [v44 markAccessoryAddCompleted];
    uint64_t v45 = dispatch_group_create();
    long long v46 = [(HMDHome *)v17 msgDispatcher];
    [(HMDAirPlayAccessory *)v38 configureWithHome:v17 msgDispatcher:v46 configurationTracker:v45 initialConfiguration:0];

    long long v47 = [(HMDHome *)v17 homeManager];
    if ((v39 & 1) != 0 && [(HMDAccessory *)v38 isCurrentAccessory])
    {
      uint64_t v48 = [v47 currentAccessorySetupMetricDispatcher];
      [v48 markSetupBeginStage:7 error:0];
    }
    id v74 = v38;
    uint64_t v49 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v74 count:1];
    uint64_t v50 = [v7 identifier];
    [(HMDHome *)v17 addNewlyConfiguredAccessories:v49 addSessionIdentifier:v50];

    uint64_t v51 = [v7 transactionResult];
    [v51 markChanged];
    [v51 markSaveToAssistant];
    id v52 = [(HMDHome *)v17 workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __50__HMDHome___handleAddMediaAccessoryModel_message___block_invoke;
    block[3] = &unk_1E6A06CC0;
    void block[4] = v17;
    id v67 = v38;
    id v68 = v7;
    id v69 = v47;
    id v23 = v65;
    id v70 = v65;
    uint64_t v71 = v41;
    BOOL v73 = v37;
    id v72 = v51;
    id v53 = v51;
    id v54 = v41;
    id v55 = v47;
    id v56 = v38;
    dispatch_group_notify(v45, v52, block);

    id v26 = v63;
    id v24 = v64;
    goto LABEL_39;
  }
  if (v26)
  {
    id v36 = [[HMDAirPlayAccessory alloc] initWithTransaction:v26 home:v17];
    BOOL v37 = [(HMDHome *)v17 isCurrentDevicePrimaryResident];
    if (!v36) {
      goto LABEL_39;
    }
    goto LABEL_29;
  }
  id v57 = (void *)MEMORY[0x1D9452090]();
  uint64_t v58 = v17;
  __int16 v59 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
  {
    id v60 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    long long v76 = v60;
    __int16 v77 = 2112;
    id v78 = v24;
    _os_log_impl(&dword_1D49D5000, v59, OS_LOG_TYPE_DEFAULT, "%{public}@Invalid WHA accessory: %@", buf, 0x16u);
  }
LABEL_39:
  uint64_t v61 = HMFGetOSLogHandle();
  if (os_signpost_enabled(v61))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D49D5000, v61, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "AddMediaAccessoryModel", "", buf, 2u);
  }
}

void __50__HMDHome___handleAddMediaAccessoryModel_message___block_invoke(uint64_t a1)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  id v2 = [*(id *)(a1 + 32) accessoryBrowser];
  id v3 = [*(id *)(a1 + 40) identifier];
  objc_msgSend(v2, "registerPairedAccessory:transports:setupHash:delegate:", v3, objc_msgSend(*(id *)(a1 + 40), "supportedTransports"), 0, *(void *)(a1 + 32));

  long long v80 = 0u;
  long long v81 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  id v4 = [*(id *)(a1 + 32) accessoryBrowser];
  id v5 = [v4 mediaBrowser];
  id v6 = [v5 accessoryAdvertisements];

  uint64_t v7 = [v6 countByEnumeratingWithState:&v78 objects:v93 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v79;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v79 != v9) {
          objc_enumerationMutation(v6);
        }
        char v11 = *(void **)(*((void *)&v78 + 1) + 8 * i);
        int v12 = [v11 identifier];
        uint64_t v13 = [*(id *)(a1 + 40) identifier];
        int v14 = [v12 isEqualToString:v13];

        if (v14) {
          [*(id *)(a1 + 40) addAdvertisement:v11];
        }
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v78 objects:v93 count:16];
    }
    while (v8);
  }

  objc_msgSend(*(id *)(a1 + 32), "_reachabilityChangedForAccessory:reachable:", *(void *)(a1 + 40), objc_msgSend(*(id *)(a1 + 40), "isReachable"));
  if ([*(id *)(a1 + 32) remoteAccessIsEnabled])
  {
    id v15 = (void *)MEMORY[0x1D9452090]();
    id v16 = *(id *)(a1 + 32);
    id v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = HMFGetLogIdentifier();
      uint64_t v19 = [*(id *)(a1 + 40) name];
      *(_DWORD *)buf = 138543618;
      long long v86 = v18;
      __int16 v87 = 2112;
      long long v88 = v19;
      _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Accessory %@ setting remote access enabled", buf, 0x16u);
    }
    [*(id *)(a1 + 40) remoteAccessEnabled:1];
  }
  uint64_t v20 = [*(id *)(a1 + 48) transactionResult];
  unint64_t v21 = [v20 source];

  if ((v21 & 0xFFFFFFFFFFFFFFFDLL) == 1)
  {
    uint64_t v22 = [*(id *)(a1 + 32) isOwnerUser];
    if (v22)
    {
      id v27 = *(void **)(a1 + 56);
      __int16 v28 = [*(id *)(a1 + 40) identifier];
      uint64_t v72 = MEMORY[0x1E4F143A8];
      uint64_t v73 = 3221225472;
      id v74 = __50__HMDHome___handleAddMediaAccessoryModel_message___block_invoke_1243;
      id v75 = &unk_1E6A196E0;
      long long v29 = *(void **)(a1 + 40);
      uint64_t v76 = *(void *)(a1 + 32);
      id v77 = v29;
      [v27 cleanupOperationsForAccessory:v28 user:0 completion:&v72];
    }
  }
  __int16 v30 = (void *)MEMORY[0x1D9452090](v22, v23, v24, v25, v26);
  id v31 = *(id *)(a1 + 32);
  id v32 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
  {
    char v33 = HMFGetLogIdentifier();
    id v34 = [*(id *)(a1 + 40) shortDescription];
    [*(id *)(a1 + 32) isCurrentDeviceConfirmedPrimaryResident];
    id v35 = HMFBooleanToString();
    *(_DWORD *)buf = 138544130;
    long long v86 = v33;
    __int16 v87 = 2112;
    long long v88 = v34;
    __int16 v89 = 2048;
    unint64_t v90 = v21;
    __int16 v91 = 2112;
    id v92 = v35;
    _os_log_impl(&dword_1D49D5000, v32, OS_LOG_TYPE_INFO, "%{public}@Apple media accessory %@ being added to home - source %tu. IsPrimary: %@", buf, 0x2Au);
  }
  if ([*(id *)(a1 + 40) supportsTargetControl])
  {
    if (v21 <= 1)
    {
      if ([*(id *)(a1 + 40) isCurrentAccessory])
      {
        id v36 = [MEMORY[0x1E4F65530] sharedPreferences];
        BOOL v37 = [v36 preferenceForKey:@"autoConfigureNewTargets"];
        int v38 = [v37 BOOLValue];

        if (v38) {
          [*(id *)(a1 + 40) autoConfigureTargetControllers];
        }
      }
    }
  }
  if (*(void *)(a1 + 64))
  {
    uint64_t v39 = [*(id *)(a1 + 40) isCurrentAccessory];
    if (v39)
    {
      id v44 = (void *)MEMORY[0x1D9452090](v39, v40, v41, v42, v43);
      id v45 = *(id *)(a1 + 32);
      long long v46 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
      {
        long long v47 = HMFGetLogIdentifier();
        uint64_t v48 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138543618;
        long long v86 = v47;
        __int16 v87 = 2112;
        long long v88 = v48;
        _os_log_impl(&dword_1D49D5000, v46, OS_LOG_TYPE_INFO, "%{public}@Setting up media session for current accessory during add - %@", buf, 0x16u);
      }
      id v49 = (id)[*(id *)(a1 + 32) _addMediaSessionForCurrentAccessory:*(void *)(a1 + 40)];
    }
  }
  uint64_t v50 = *(void **)(a1 + 72);
  if (v50)
  {
    [v50 configureAudioDestinationController];
    if ([*(id *)(a1 + 72) isCurrentAccessory])
    {
      [*(id *)(a1 + 32) createRemoteEventRouterServerIfNeeded];
      uint64_t v51 = [*(id *)(a1 + 32) notificationCenter];
      uint64_t v52 = *(void *)(a1 + 32);
      uint64_t v53 = *(void *)(a1 + 72);
      long long v83 = @"HMDAccessoryNotificationKey";
      uint64_t v84 = v53;
      id v54 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v84 forKeys:&v83 count:1];
      [v51 postNotificationName:@"HMDHomeManagerDidAddCurrentAccessoryNotification" object:v52 userInfo:v54];

      id v55 = [*(id *)(a1 + 56) currentAccessorySetupMetricDispatcher];
      [v55 markSetupEndStage:7 error:0];
    }
    id v56 = *(void **)(a1 + 32);
    uint64_t v82 = *(void *)(a1 + 72);
    id v57 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", &v82, 1, v72, v73, v74, v75, v76);
    [v56 configureRemoteEventRouterClientControllerForAccessories:v57];

    uint64_t v58 = [*(id *)(a1 + 32) capabilitiesAggregator];
    __int16 v59 = [*(id *)(a1 + 72) uuid];
    [v58 didAddAccessory:v59];
  }
  if (objc_msgSend(*(id *)(a1 + 40), "isCurrentAccessory", v72, v73, v74, v75, v76))
  {
    id v60 = (void *)MEMORY[0x1D9452090]();
    id v61 = *(id *)(a1 + 32);
    long long v62 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
    {
      id v63 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v86 = v63;
      _os_log_impl(&dword_1D49D5000, v62, OS_LOG_TYPE_INFO, "%{public}@Notifying that we are a reachable accessory", buf, 0xCu);
    }
    id v64 = [*(id *)(a1 + 32) notificationCenter];
    [v64 postNotificationName:@"HMDHomeCurrentDeviceHasReachableAccessories" object:*(void *)(a1 + 32)];

    long long v65 = *(void **)(a1 + 72);
    if (v65) {
      [v65 configureSensors];
    }
  }
  if (*(unsigned char *)(a1 + 88))
  {
    long long v66 = [*(id *)(a1 + 32) residentDeviceManager];
    [v66 confirmWithCompletionHandler:0];
  }
  id v67 = *(void **)(a1 + 32);
  id v68 = [*(id *)(a1 + 48) identifier];
  id v69 = [v67 retrieveAndResetNewlyConfiguredAccessoriesForAddSessionIdentifier:v68];

  if ([*(id *)(a1 + 80) source] == 1)
  {
    [*(id *)(a1 + 32) _notifyClientOfNewlyAddedAccessories:v69 requestMessage:*(void *)(a1 + 48)];
    [*(id *)(a1 + 32) notifyOfNewlyAddedAccessoryByThisOwnerDevice:*(void *)(a1 + 40)];
  }
  else
  {
    [*(id *)(a1 + 48) respondWithPayload:0];
  }
  id v70 = [*(id *)(a1 + 32) accessoryBrowser];
  uint64_t v71 = [*(id *)(a1 + 40) identifier];
  [v70 removeUnassociatedAccessoryWithIdentifier:v71];

  [*(id *)(a1 + 32) notifyOfAddedAccessory:*(void *)(a1 + 40)];
}

uint64_t __50__HMDHome___handleAddMediaAccessoryModel_message___block_invoke_1243(uint64_t a1)
{
  return [*(id *)(a1 + 32) _addAllUsersToAccessory:*(void *)(a1 + 40)];
}

- (void)__handleAddHAPAccessoryModel:(id)a3 message:(id)a4
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v6 bridgeUUID];
  if (!v8) {
    goto LABEL_3;
  }
  uint64_t v9 = (void *)v8;
  id v10 = objc_alloc(MEMORY[0x1E4F29128]);
  char v11 = [v6 bridgeUUID];
  int v12 = (void *)[v10 initWithUUIDString:v11];
  uint64_t v13 = [(HMDHome *)self accessoryWithUUID:v12];

  if (!v13)
  {
    id v55 = (void *)MEMORY[0x1D9452090]();
    id v56 = self;
    id v57 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      uint64_t v58 = HMFGetLogIdentifier();
      __int16 v59 = [v6 bridgeUUID];
      id v60 = [v6 uuid];
      *(_DWORD *)buf = 138543874;
      uint64_t v82 = v58;
      __int16 v83 = 2112;
      uint64_t v84 = v59;
      __int16 v85 = 2112;
      long long v86 = v60;
      _os_log_impl(&dword_1D49D5000, v57, OS_LOG_TYPE_ERROR, "%{public}@No bridge accessory %@ for added bridged accessory %@", buf, 0x20u);
    }
  }
  else
  {
LABEL_3:
    int v14 = (void *)MEMORY[0x1D9452090]();
    id v15 = self;
    id v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      id v17 = HMFGetLogIdentifier();
      uint64_t v18 = [v6 uuid];
      uint64_t v19 = [v6 name];
      uint64_t v20 = [v6 uniqueIdentifier];
      [v7 shortDescription];
      id v70 = v14;
      v22 = id v21 = v7;
      *(_DWORD *)buf = 138544386;
      uint64_t v82 = v17;
      __int16 v83 = 2112;
      uint64_t v84 = v18;
      __int16 v85 = 2112;
      long long v86 = v19;
      __int16 v87 = 2112;
      long long v88 = v20;
      __int16 v89 = 2112;
      unint64_t v90 = v22;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, "%{public}@Creating new HAP accessory from model with UUID %@/%@/%@ from message: %@", buf, 0x34u);

      id v7 = v21;
      int v14 = v70;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0
      && (uint64_t v23 = [(HMDHAPAccessory *)[HMDAppleMediaAccessorySensor alloc] initWithTransaction:v6 home:v15]) != 0|| (uint64_t v23 = [[HMDHAPAccessory alloc] initWithTransaction:v6 home:v15]) != 0)
    {
      uint64_t v24 = [v6 configurationTracker];
      if (!v24) {
        uint64_t v24 = dispatch_group_create();
      }
      uint64_t v25 = [(HMDHome *)v15 notificationRegistrations];
      uint64_t v26 = [v25 count];
      BOOL v71 = v26 != 0;

      id v27 = [(HMDHome *)v15 uuidToHAPAccessoryConfigTable];
      __int16 v28 = [v6 uuid];
      long long v29 = [v27 objectForKey:v28];

      if (v29)
      {
        __int16 v30 = [(HMDHome *)v15 uuidToHAPAccessoryConfigTable];
        id v31 = [v6 uuid];
        [v30 removeObjectForKey:v31];

        dispatch_group_enter(v24);
        id v32 = [(HMDHome *)v15 workQueue];
        v78[0] = MEMORY[0x1E4F143A8];
        v78[1] = 3221225472;
        v78[2] = __48__HMDHome___handleAddHAPAccessoryModel_message___block_invoke;
        v78[3] = &unk_1E6A19B30;
        long long v79 = v24;
        [(HMDHAPAccessory *)v23 configureWithAccessory:v29 homeNotificationsEnabled:v26 != 0 queue:v32 completion:v78];
      }
      if ([(HMDHAPAccessory *)v23 isPrimary])
      {
        char v33 = [v7 name];
        char v34 = [v33 isEqualToString:@"kAddAccessoryRequestKey"];

        if ((v34 & 1) == 0) {
          [(HMDHAPAccessory *)v23 savePublicKeyToKeychain];
        }
        id v35 = [(HMDAccessory *)v23 identifier];
        uint64_t v36 = [(HMDHAPAccessory *)v23 supportedTransports];
        BOOL v37 = [(HMDHAPAccessory *)v23 setupHash];
        [(HMDHome *)v15 _registerPairedAccessory:v35 transports:v36 setupHash:v37];
      }
      [(HMDHome *)v15 addAccessory:v23];
      int v38 = [(HMDHome *)v15 msgDispatcher];
      [(HMDHAPAccessory *)v23 configureWithHome:v15 msgDispatcher:v38 configurationTracker:v24 initialConfiguration:0];

      long long v80 = v23;
      uint64_t v39 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v80 count:1];
      uint64_t v40 = [v7 identifier];
      [(HMDHome *)v15 addNewlyConfiguredAccessories:v39 addSessionIdentifier:v40];

      uint64_t v41 = [(HMDHome *)v15 accessoryBrowser];
      [v41 evaluateAccessoryDiscoveryState];

      uint64_t v42 = [(HMDHAPAccessory *)v23 matterNodeID];
      if (v42)
      {
        uint64_t v43 = (void *)v42;
        id v44 = [(HMDHAPAccessory *)v23 matterNodeID];
        char v45 = [v44 isEqual:&unk_1F2DC7558];

        if ((v45 & 1) == 0)
        {
          id v68 = [(HMDHome *)v15 homeManager];
          long long v46 = [v68 accessoryBrowser];
          long long v47 = [v46 chipAccessoryServerBrowser];
          [(HMDHAPAccessory *)v23 matterNodeID];
          uint64_t v48 = v69 = v7;
          id v49 = [(HMDHome *)v15 home];
          uint64_t v50 = [v49 fabric];
          [v47 handleHomeAddedAccessoryWithNodeID:v48 fabric:v50];

          id v7 = v69;
        }
      }
      uint64_t v51 = [v7 transactionResult];
      [v51 markChanged];
      [v51 markSaveToAssistant];
      uint64_t v52 = [(HMDHome *)v15 workQueue];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __48__HMDHome___handleAddHAPAccessoryModel_message___block_invoke_1235;
      block[3] = &unk_1E6A11E78;
      void block[4] = v15;
      uint64_t v73 = v23;
      id v74 = v7;
      id v75 = v29;
      id v76 = v6;
      BOOL v77 = v71;
      id v53 = v29;
      id v54 = v23;
      dispatch_group_notify(v24, v52, block);

      goto LABEL_20;
    }
    id v61 = (void *)MEMORY[0x1D9452090]();
    long long v62 = v15;
    id v63 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
    {
      id v64 = HMFGetLogIdentifier();
      long long v65 = [v6 uuid];
      long long v66 = [v65 UUIDString];
      *(_DWORD *)buf = 138543618;
      uint64_t v82 = v64;
      __int16 v83 = 2112;
      uint64_t v84 = v66;
      _os_log_impl(&dword_1D49D5000, v63, OS_LOG_TYPE_ERROR, "%{public}@Unable to create accessory from object (null accessory) %@", buf, 0x16u);
    }
    id v67 = [v7 responseHandler];

    if (v67)
    {
      id v54 = [v7 responseHandler];
      uint64_t v24 = [MEMORY[0x1E4F28C58] hmErrorWithCode:20];
      (*(void (**)(HMDAppleMediaAccessorySensor *, NSObject *, void))&v54->super.super._primary)(v54, v24, 0);
LABEL_20:
    }
  }
}

void __48__HMDHome___handleAddHAPAccessoryModel_message___block_invoke(uint64_t a1)
{
}

uint64_t __48__HMDHome___handleAddHAPAccessoryModel_message___block_invoke_1235(uint64_t a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if ([*(id *)(a1 + 32) remoteAccessIsEnabled])
  {
    id v2 = (void *)MEMORY[0x1D9452090]();
    id v3 = *(id *)(a1 + 32);
    id v4 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      id v5 = HMFGetLogIdentifier();
      id v6 = [*(id *)(a1 + 40) shortDescription];
      *(_DWORD *)buf = 138543618;
      *(void *)&uint8_t buf[4] = v5;
      __int16 v38 = 2112;
      uint64_t v39 = v6;
      _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@accessory %@ setting remote access enabled", buf, 0x16u);
    }
    [*(id *)(a1 + 40) remoteAccessEnabled:1];
  }
  objc_msgSend(*(id *)(a1 + 32), "_reachabilityChangedForAccessory:reachable:", *(void *)(a1 + 40), objc_msgSend(*(id *)(a1 + 40), "isReachable"));
  id v7 = [*(id *)(a1 + 48) transactionResult];
  uint64_t v8 = [v7 source];

  if ([*(id *)(a1 + 40) isPrimary])
  {
    uint64_t v9 = (void *)MEMORY[0x1D9452090]();
    id v10 = *(id *)(a1 + 32);
    char v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = HMFGetLogIdentifier();
      uint64_t v13 = [*(id *)(a1 + 40) shortDescription];
      uint64_t v14 = *(void *)(a1 + 56);
      *(_DWORD *)buf = 138543874;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v38 = 2112;
      uint64_t v39 = v13;
      __int16 v40 = 2112;
      uint64_t v41 = v14;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@accessory %@ handling added primary HAPAccessory: %@", buf, 0x20u);
    }
    if (!*(void *)(a1 + 56))
    {
      id v15 = [*(id *)(a1 + 40) identifier];
      *(void *)buf = 0;
      [*(id *)(a1 + 40) matchesHAPAccessoryWithServerIdentifier:v15 linkType:buf];
      id v16 = [*(id *)(a1 + 32) accessoryBrowser];
      [v16 handleNewlyPairedAccessory:v15 linkType:*(void *)buf];

      if (!isWatch()) {
        objc_msgSend(*(id *)(a1 + 32), "__requestAccessoryBrowsing");
      }
    }
    if ((v8 & 0xFFFFFFFFFFFFFFFDLL) == 1)
    {
      if ([*(id *)(a1 + 32) isOwnerUser])
      {
        id v17 = [*(id *)(a1 + 64) sharedAdminAddedTimestamp];

        if (!v17)
        {
          uint64_t v18 = [*(id *)(a1 + 32) homeManager];
          uint64_t v19 = [*(id *)(a1 + 40) identifier];
          v34[0] = MEMORY[0x1E4F143A8];
          v34[1] = 3221225472;
          v34[2] = __48__HMDHome___handleAddHAPAccessoryModel_message___block_invoke_1236;
          v34[3] = &unk_1E6A196E0;
          uint64_t v20 = *(void **)(a1 + 40);
          void v34[4] = *(void *)(a1 + 32);
          id v35 = v20;
          [v18 cleanupOperationsForAccessory:v19 user:0 completion:v34];
        }
      }
    }
    id v21 = [*(id *)(a1 + 32) accessoryBrowser];
    uint64_t v22 = [*(id *)(a1 + 40) identifier];
    [v21 removeUnassociatedAccessoryWithIdentifier:v22];

    uint64_t v23 = [*(id *)(a1 + 32) networkProtectionGroupRegistry];
    [v23 handleAddedAccessory:*(void *)(a1 + 40)];
  }
  uint64_t v24 = *(void *)(a1 + 56);
  if (v24)
  {
    [*(id *)(a1 + 40) enableNotificationsWithHAPAccessory:v24 homeNotificationsEnabled:*(unsigned __int8 *)(a1 + 72)];
  }
  else if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v25 = *(void **)(a1 + 32);
    uint64_t v36 = *(void *)(a1 + 40);
    uint64_t v26 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v36 count:1];
    [v25 _subscribeForHomeNotificationsFromRemoteGateway:1 accessories:v26];
  }
  id v27 = [*(id *)(a1 + 48) name];
  if ([v27 isEqualToString:@"kAddAccessoryRequestKey"])
  {
  }
  else
  {
    __int16 v28 = [*(id *)(a1 + 48) name];
    char v29 = [v28 isEqualToString:@"kAddAccessoriesInternalRequestKey"];

    if ((v29 & 1) == 0)
    {
      __int16 v30 = *(void **)(a1 + 32);
      id v31 = [*(id *)(a1 + 48) identifier];
      id v32 = (id)[v30 retrieveAndResetNewlyConfiguredAccessoriesForAddSessionIdentifier:v31];

      [*(id *)(a1 + 48) respondWithPayload:0];
    }
  }
  if (v8 == 1) {
    [*(id *)(a1 + 32) notifyOfNewlyAddedAccessoryByThisOwnerDevice:*(void *)(a1 + 40)];
  }
  [*(id *)(a1 + 32) notifyOfAddedAccessory:*(void *)(a1 + 40)];
  return [*(id *)(a1 + 32) reevaluateAccessoryInfo];
}

uint64_t __48__HMDHome___handleAddHAPAccessoryModel_message___block_invoke_1236(uint64_t a1)
{
  return [*(id *)(a1 + 32) _addAllUsersToAccessory:*(void *)(a1 + 40)];
}

- (void)__requestAccessoryBrowsing
{
  id v2 = [(HMDHome *)self accessoryBrowser];
  [v2 startDiscoveringPairedAccessories];
}

- (void)_handleAddAccessoryModel:(id)a3 message:(id)a4
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  id v9 = v8;
  id v10 = v6;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    char v11 = v10;
  }
  else {
    char v11 = 0;
  }
  id v12 = v11;

  uint64_t v13 = [v10 identifier];

  if (!v13)
  {
    uint64_t v14 = (void *)MEMORY[0x1D9452090]();
    id v15 = self;
    id v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      id v17 = HMFGetLogIdentifier();
      uint64_t v18 = [v10 uuid];
      uint64_t v19 = [v18 UUIDString];
      int v29 = 138543618;
      __int16 v30 = v17;
      __int16 v31 = 2112;
      id v32 = v19;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_ERROR, "%{public}@Unable to create accessory from object (null identifier) %@", (uint8_t *)&v29, 0x16u);
    }
    uint64_t v20 = [MEMORY[0x1E4F28C58] hmErrorWithCode:20];
    [v7 respondWithError:v20];
    goto LABEL_21;
  }
  if (v9)
  {
    [(HMDHome *)self __handleAddHAPAccessoryModel:v9 message:v7];
  }
  else if (v12)
  {
    [(HMDHome *)self __handleAddMediaAccessoryModel:v12 message:v7];
  }
  else
  {
    id v21 = (void *)MEMORY[0x1D9452090]();
    uint64_t v22 = self;
    uint64_t v23 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = HMFGetLogIdentifier();
      int v29 = 138543362;
      __int16 v30 = v24;
      _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_ERROR, "%{public}@Only HAP accessories can be added to the home currently", (uint8_t *)&v29, 0xCu);
    }
    uint64_t v25 = [v7 responseHandler];

    if (v25)
    {
      uint64_t v26 = [MEMORY[0x1E4F28C58] hmErrorWithCode:48];
      id v27 = [v7 responseHandler];
      ((void (**)(void, void *, void))v27)[2](v27, v26, 0);
    }
  }
  if ([(HMDHome *)self isOwnerUser])
  {
    uint64_t v20 = [(HMDHome *)self home];
    __int16 v28 = [v20 homeManager];
    [v28 updateCurrentUserEligibleForOwnerToAutoMigration];

LABEL_21:
  }
}

- (void)_handleUserConsentResponseForAccessory:(id)a3
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([v4 isEntitledForSPIAccess])
  {
    id v5 = [v4 dataForKey:@"kAccessoryDescriptionDataKey"];
    id v29 = 0;
    id v6 = [(HMDHome *)self _setupDescriptionFromData:v5 error:&v29];
    id v7 = v29;
    if (v6)
    {
      uint64_t v8 = [v4 numberForKey:*MEMORY[0x1E4F2D7B8]];
      if (v8)
      {
        id v9 = [(HMDHome *)self addPendingAccessories];
        id v10 = [v9 objectForKey:v6];

        unint64_t v11 = [v8 integerValue];
        if (v11 > 1)
        {
          if ((v11 & 0xFFFFFFFFFFFFFFFELL) == 2)
          {
            [(HMDHome *)self _handleUserConsentForAccessoryReplacement:v6 consent:v11 == 3 message:v10];
          }
          else
          {
            uint64_t v26 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];

            id v7 = (id)v26;
          }
        }
        else
        {
          BOOL v12 = v11 == 1;
          uint64_t v13 = [(HMDHome *)self accessoryBrowser];
          [v13 didReceiveUserConsentResponseForSetupAccessoryDetail:v6 consent:v12];
        }
        id v27 = [v4 responseHandler];

        if (v27)
        {
          __int16 v28 = [v4 responseHandler];
          ((void (**)(void, id, void))v28)[2](v28, v7, 0);
        }
      }
      else
      {
        uint64_t v22 = (void *)MEMORY[0x1D9452090]();
        uint64_t v23 = self;
        uint64_t v24 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          uint64_t v25 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          __int16 v31 = v25;
          _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_ERROR, "%{public}@user consent response is absent", buf, 0xCu);
        }
      }
    }
    else
    {
      uint64_t v18 = (void *)MEMORY[0x1D9452090]();
      uint64_t v19 = self;
      uint64_t v20 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        id v21 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        __int16 v31 = v21;
        __int16 v32 = 2112;
        id v33 = v7;
        _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive setup accessory description from accessory description data: %@", buf, 0x16u);
      }
    }
  }
  else
  {
    uint64_t v14 = (void *)MEMORY[0x1D9452090]();
    id v15 = self;
    id v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      id v17 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      __int16 v31 = v17;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_ERROR, "%{public}@Client does not have entitlement to use SPI for user consent response", buf, 0xCu);
    }
  }
}

- (void)_handleUserConsentForAccessoryReplacement:(id)a3 consent:(BOOL)a4 message:(id)a5
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a5;
  id v10 = (void *)MEMORY[0x1D9452090]();
  unint64_t v11 = self;
  BOOL v12 = HMFGetOSLogHandle();
  BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
  if (a4)
  {
    if (v13)
    {
      uint64_t v14 = HMFGetLogIdentifier();
      id v15 = [v9 name];
      id v16 = [v9 identifier];
      id v17 = [v9 messagePayload];
      int v27 = 138544130;
      __int16 v28 = v14;
      __int16 v29 = 2112;
      __int16 v30 = v15;
      __int16 v31 = 2112;
      __int16 v32 = v16;
      __int16 v33 = 2112;
      uint64_t v34 = v17;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@User consented to Wi-Fi router replacement; continue to adding new Wi-Fi router - message %@/%@/%@",
        (uint8_t *)&v27,
        0x2Au);
    }
    [v8 setUserConsentedForReplace:1];
    uint64_t v18 = [v8 accessoryUUID];

    if (v18)
    {
      uint64_t v19 = [v8 accessoryUUID];
      [(HMDHome *)v11 _continuePairingAfterUserConsentWithAccessoryUUID:v19 orUnassociatedAccessory:0 message:v9];
    }
    else
    {
      [(HMDHome *)v11 _continuePairingAfterUserConsentWithAccessoryDescription:v8 progressHandlerDelegate:0 message:v9];
    }
  }
  else
  {
    if (v13)
    {
      uint64_t v20 = HMFGetLogIdentifier();
      id v21 = [v9 name];
      uint64_t v22 = [v9 identifier];
      uint64_t v23 = [v9 messagePayload];
      int v27 = 138544130;
      __int16 v28 = v20;
      __int16 v29 = 2112;
      __int16 v30 = v21;
      __int16 v31 = 2112;
      __int16 v32 = v22;
      __int16 v33 = 2112;
      uint64_t v34 = v23;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@User did not consent to Wi-Fi router replacement; cancelling adding new Wi-Fi router - message %@/%@/%@",
        (uint8_t *)&v27,
        0x2Au);
    }
    uint64_t v24 = [MEMORY[0x1E4F28C58] hmInternalErrorWithCode:1091];
    uint64_t v25 = +[HMDMatterAccessoryPairingEndContext hmContextWithCancelledError:v24];
    [(HMDHome *)v11 _cancelPairingWithAccessoryDescription:v8 context:v25];

    uint64_t v26 = [MEMORY[0x1E4F28C58] hmErrorWithCode:23];
    [v9 respondWithError:v26];
  }
}

- (void)_handleAddAccessories:(id)a3
{
  v154[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHome *)self localCapabilitiesDataSource];
  char v6 = [v5 supportsAddingAccessory];

  if (v6)
  {
    uint64_t v7 = [v4 dataForKey:@"accessories"];
    if (!v7)
    {
      id v8 = (void *)MEMORY[0x1D9452090]();
      id v9 = self;
      id v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        unint64_t v11 = HMFGetLogIdentifier();
        BOOL v12 = [v4 identifier];
        BOOL v13 = [v12 UUIDString];
        *(_DWORD *)buf = 138543618;
        __int16 v144 = v11;
        __int16 v145 = 2112;
        uint64_t v146 = v13;
        _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Unable to find accessories to add for message: %@", buf, 0x16u);
      }
      uint64_t v14 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:2 userInfo:0];
      id v15 = [v4 responseHandler];
      ((void (**)(void, void *, void))v15)[2](v15, v14, 0);
    }
    id v142 = 0;
    long long v112 = (void *)v7;
    id v16 = (void *)[objc_alloc(MEMORY[0x1E4F28DC0]) initForReadingFromData:v7 error:&v142];
    id v17 = v142;
    [v16 _allowDecodingCyclesInSecureMode];
    uint64_t v18 = (void *)MEMORY[0x1E4F1CAD0];
    v154[0] = objc_opt_class();
    v154[1] = objc_opt_class();
    uint64_t v19 = [MEMORY[0x1E4F1C978] arrayWithObjects:v154 count:2];
    uint64_t v20 = [v18 setWithArray:v19];
    uint64_t v21 = *MEMORY[0x1E4F284E8];
    id v141 = v17;
    long long v111 = v16;
    uint64_t v22 = [v16 decodeTopLevelObjectOfClasses:v20 forKey:v21 error:&v141];
    id v113 = v141;

    id v23 = v22;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    id v25 = v24;

    if (!v25)
    {
      __int16 v93 = (void *)MEMORY[0x1D9452090]();
      uint64_t v94 = self;
      uint64_t v95 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        uint64_t v97 = v96 = v23;
        __int16 v98 = [v4 identifier];
        long long v99 = [v98 UUIDString];
        *(_DWORD *)buf = 138543874;
        __int16 v144 = v97;
        __int16 v145 = 2112;
        uint64_t v146 = v99;
        __int16 v147 = 2112;
        id v148 = v113;
        _os_log_impl(&dword_1D49D5000, v95, OS_LOG_TYPE_INFO, "%{public}@Failed to unarchive accessories from encoded accessories data: %@: %@", buf, 0x20u);

        id v23 = v96;
      }

      __int16 v100 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:2 userInfo:0];
      id v101 = [v4 responseHandler];
      ((void (**)(void, void *, void))v101)[2](v101, v100, 0);
      __int16 v89 = 0;
      long long v80 = v112;
      goto LABEL_67;
    }
    [v4 dataForKey:@"accessories.airplay"];
    uint64_t v110 = v109 = v23;
    uint64_t v26 = v23;
    if (v110)
    {
      int v27 = (void *)MEMORY[0x1E4F28DC0];
      __int16 v28 = (void *)MEMORY[0x1E4F1CAD0];
      v153[0] = objc_opt_class();
      v153[1] = objc_opt_class();
      __int16 v29 = [MEMORY[0x1E4F1C978] arrayWithObjects:v153 count:2];
      __int16 v30 = [v28 setWithArray:v29];
      id v140 = 0;
      __int16 v31 = [v27 unarchivedObjectOfClasses:v30 fromData:v110 error:&v140];
      id v32 = v140;

      if (!v31)
      {
        dispatch_group_t v119 = v32;
        long long v102 = (void *)MEMORY[0x1D9452090]();
        uint64_t v103 = self;
        id v104 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v104, OS_LOG_TYPE_INFO))
        {
          long long v105 = HMFGetLogIdentifier();
          __int16 v106 = [v4 identifier];
          id v107 = [v106 UUIDString];
          *(_DWORD *)buf = 138543874;
          __int16 v144 = v105;
          __int16 v145 = 2112;
          uint64_t v146 = v107;
          __int16 v147 = 2112;
          id v148 = v119;
          _os_log_impl(&dword_1D49D5000, v104, OS_LOG_TYPE_INFO, "%{public}@Failed to unarchive airplay accessories from encoded airplay accessories data: %@: %@", buf, 0x20u);
        }
        BOOL v77 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:2 userInfo:0];
        long long v78 = [v4 responseHandler];
        ((void (**)(void, void *, void))v78)[2](v78, v77, 0);
        id v23 = v109;
        __int16 v89 = v109;
        long long v80 = (void *)v7;
        goto LABEL_66;
      }
      uint64_t v26 = [v25 arrayByAddingObjectsFromArray:v31];
    }
    long long v108 = [(HMDHome *)self wiFiRouterAccessories];
    dispatch_group_t v123 = dispatch_group_create();
    __int16 v33 = [(HMDHome *)self backingStore];
    uint64_t v34 = [v4 name];
    uint64_t v35 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    uint64_t v36 = [v33 transaction:v34 options:v35];

    long long v138 = 0u;
    long long v139 = 0u;
    long long v136 = 0u;
    long long v137 = 0u;
    id obj = v26;
    dispatch_group_t v119 = v36;
    uint64_t v116 = [obj countByEnumeratingWithState:&v136 objects:v152 count:16];
    if (v116)
    {
      uint64_t v115 = *(void *)v137;
      id v118 = self;
      do
      {
        uint64_t v37 = 0;
        do
        {
          if (*(void *)v137 != v115) {
            objc_enumerationMutation(obj);
          }
          uint64_t v117 = v37;
          __int16 v38 = *(void **)(*((void *)&v136 + 1) + 8 * v37);
          [v38 setHome:self];
          unint64_t v124 = v38;
          uint64_t v39 = [v38 backingStoreObjects:4];
          long long v132 = 0u;
          long long v133 = 0u;
          long long v134 = 0u;
          long long v135 = 0u;
          id v120 = v39;
          uint64_t v126 = [v120 countByEnumeratingWithState:&v132 objects:v151 count:16];
          if (v126)
          {
            uint64_t v125 = *(void *)v133;
            do
            {
              for (uint64_t i = 0; i != v126; ++i)
              {
                if (*(void *)v133 != v125) {
                  objc_enumerationMutation(v120);
                }
                uint64_t v41 = *(void **)(*((void *)&v132 + 1) + 8 * i);
                [v41 setObjectChangeType:1];
                id v42 = v41;
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  uint64_t v43 = v42;
                }
                else {
                  uint64_t v43 = 0;
                }
                id v44 = v43;

                id v45 = v42;
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  long long v46 = v45;
                }
                else {
                  long long v46 = 0;
                }
                id v47 = v46;

                if (v44)
                {
                  [v44 setConfigurationTracker:v123];
                  uint64_t v48 = [HMDUserManagementOperationTimestamp alloc];
                  id v49 = [v4 remoteSourceDevice];
                  uint64_t v50 = [(HMDUserManagementOperationTimestamp *)v48 initWithDevice:v49 state:0];
                  [v44 setSharedAdminAddedTimestamp:v50];

                  uint64_t v51 = (void *)MEMORY[0x1D9452090]();
                  uint64_t v52 = self;
                  id v53 = HMFGetOSLogHandle();
                  if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
                  {
                    HMFGetLogIdentifier();
                    uint64_t v121 = v51;
                    id v54 = v122 = v47;
                    id v55 = [v124 name];
                    id v56 = [v124 uuid];
                    id v57 = [v56 UUIDString];
                    [v44 sharedAdminAddedTimestamp];
                    __int16 v59 = v58 = v4;
                    *(_DWORD *)buf = 138544130;
                    __int16 v144 = v54;
                    __int16 v145 = 2112;
                    uint64_t v146 = v55;
                    __int16 v147 = 2112;
                    id v148 = v57;
                    __int16 v149 = 2112;
                    id v150 = v59;
                    _os_log_impl(&dword_1D49D5000, v53, OS_LOG_TYPE_INFO, "%{public}@Accessory %@/%@ shared admin added %@", buf, 0x2Au);

                    id v4 = v58;
                    self = v118;

                    uint64_t v36 = v119;
                    uint64_t v51 = v121;

                    id v47 = v122;
                  }

                  [v36 add:v44 withMessage:v4];
                  id v60 = v124;
                  objc_opt_class();
                  if (objc_opt_isKindOfClass()) {
                    id v61 = v60;
                  }
                  else {
                    id v61 = 0;
                  }
                  id v62 = v61;

                  if ([v62 isPrimary])
                  {
                    id v63 = +[HMDUserManagementOperation auditUserManagementOperationAccessory:v60 model:0];
                    id v64 = [v44 uuid];
                    long long v65 = [v63 modelObjectWithChangeType:1 parentUUID:v64];

                    if (v65) {
                      [v36 add:v65 withMessage:v4];
                    }
                  }
                }
                else if (v47)
                {
                  [v47 setConfigurationTracker:v123];
                  [v36 add:v45 withMessage:0];
                }
              }
              uint64_t v126 = [v120 countByEnumeratingWithState:&v132 objects:v151 count:16];
            }
            while (v126);
          }

          long long v66 = (void *)MEMORY[0x1D9452090]();
          id v67 = self;
          id v68 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
          {
            id v69 = HMFGetLogIdentifier();
            id v70 = [v124 name];
            BOOL v71 = [v124 uuid];
            uint64_t v72 = [v71 UUIDString];
            [v124 supportsTargetController];
            uint64_t v73 = HMFBooleanToString();
            *(_DWORD *)buf = 138544130;
            __int16 v144 = v69;
            __int16 v145 = 2112;
            uint64_t v146 = v70;
            __int16 v147 = 2112;
            id v148 = v72;
            __int16 v149 = 2112;
            id v150 = v73;
            _os_log_impl(&dword_1D49D5000, v68, OS_LOG_TYPE_INFO, "%{public}@Accessory %@/%@ (supportsTargetController %@) being added to home through shared admin", buf, 0x2Au);

            uint64_t v36 = v119;
          }

          id v74 = v124;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v75 = v74;
          }
          else {
            id v75 = 0;
          }
          id v76 = v75;

          [v76 autoConfigureTargetController];
          uint64_t v37 = v117 + 1;
        }
        while (v117 + 1 != v116);
        uint64_t v116 = [obj countByEnumeratingWithState:&v136 objects:v152 count:16];
      }
      while (v116);
    }

    BOOL v77 = [v4 numberForKey:@"HMDHomeCHIPFabricIDMessageKey"];
    long long v78 = [v4 numberForKey:@"HMDHomeCHIPFabricIndexMessageKey"];
    long long v79 = [(HMDHome *)self emptyModelObjectWithChangeType:2];
    long long v80 = v112;
    if (v77)
    {
      if (v78)
      {
        long long v81 = [(HMDHome *)self chipStorage];
        uint64_t v82 = [v81 fabricID];

        if (!v82)
        {
          [v79 setChipFabricID:v77];
          __int16 v83 = (void *)MEMORY[0x1D9452090]([v79 setChipFabricIndex:v78]);
          uint64_t v84 = self;
          __int16 v85 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
          {
            long long v86 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543874;
            __int16 v144 = v86;
            __int16 v145 = 2112;
            uint64_t v146 = v78;
            __int16 v147 = 2112;
            id v148 = v77;
            _os_log_impl(&dword_1D49D5000, v85, OS_LOG_TYPE_INFO, "%{public}@Updating home model with fabric index %@ and fabric ID %@", buf, 0x20u);
          }
          [v119 add:v79];
        }
      }
    }
    v127[0] = MEMORY[0x1E4F143A8];
    v127[1] = 3221225472;
    v127[2] = __33__HMDHome__handleAddAccessories___block_invoke;
    v127[3] = &unk_1E6A143D0;
    dispatch_group_t v128 = v123;
    id v129 = self;
    id v130 = v4;
    id v131 = v108;
    id v87 = v108;
    long long v88 = v123;
    [v119 run:v127];

    id v23 = v109;
    __int16 v89 = obj;
LABEL_66:

    __int16 v100 = (void *)v110;
    id v101 = (void (**)(void, void, void))v119;
LABEL_67:

    goto LABEL_68;
  }
  unint64_t v90 = [v4 responseHandler];

  if (v90)
  {
    uint64_t v91 = [v4 responseHandler];
    id v92 = [MEMORY[0x1E4F28C58] hmErrorWithCode:48];
    ((void (**)(void, void *, void))v91)[2](v91, v92, 0);
  }
LABEL_68:
}

void __33__HMDHome__handleAddAccessories___block_invoke(uint64_t a1)
{
  id v2 = *(NSObject **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __33__HMDHome__handleAddAccessories___block_invoke_2;
  block[3] = &unk_1E6A19668;
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 40);
  id v7 = v4;
  uint64_t v8 = v5;
  id v9 = *(id *)(a1 + 56);
  dispatch_group_notify(v2, v3, block);
}

void __33__HMDHome__handleAddAccessories___block_invoke_2(uint64_t a1)
{
  [*(id *)(a1 + 32) respondWithPayload:0];
  id v2 = *(void **)(a1 + 40);
  id v3 = [*(id *)(a1 + 32) identifier];
  id v4 = [v2 retrieveAndResetNewlyConfiguredAccessoriesForAddSessionIdentifier:v3];

  [*(id *)(a1 + 40) _setupActiveNetworkRouterAccessory:v4 existingRouterAccessories:*(void *)(a1 + 48)];
}

- (void)_pairAccessoryWithAccessoryDescription:(id)a3 configuration:(id)a4 pairingEvent:(id)a5 progressHandler:(id)a6 requestMessage:(id)a7
{
  id v12 = a6;
  id v13 = a4;
  id v14 = a3;
  __createAccessoryBrowserAddAccessoryCompletionHandler(self, v14, v13, a5, a7);
  id v16 = (id)objc_claimAutoreleasedReturnValue();
  id v15 = [(HMDHome *)self accessoryBrowser];
  [v15 pairAccessoryWithDescription:v14 configuration:v13 progressHandler:v12 completionHandler:v16];
}

- (void)_continuePairingAfterUserConsentWithAccessoryDescription:(id)a3 progressHandlerDelegate:(id)a4 message:(id)a5
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  id v41 = a4;
  id v42 = a5;
  id v10 = (void *)MEMORY[0x1D9452090]();
  unint64_t v11 = self;
  id v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v13 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    *(void *)&uint8_t buf[4] = v13;
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&buf[14] = v9;
    _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Continue pairing after user consent with accessoryDescription %@", buf, 0x16u);
  }
  id v14 = objc_alloc_init(HMDUnpairedHAPAccessoryConfiguration);
  [(HMDUnpairedHAPAccessoryConfiguration *)v14 setRequiresUserConsent:1];
  id v15 = [(HMDHome *)v11 homeLocationHandler];
  id v16 = [v15 isoCountryCode];
  [(HMDUnpairedHAPAccessoryConfiguration *)v14 setIsoCountryCode:v16];

  id v17 = [(HMDHome *)v11 matterFabricID];
  [(HMDUnpairedHAPAccessoryConfiguration *)v14 setChipFabricID:v17];

  uint64_t v18 = [(HMDHome *)v11 uuid];
  [(HMDUnpairedHAPAccessoryConfiguration *)v14 setHomeUUID:v18];

  uint64_t v19 = +[HMDAccessoryPairingEvent pairingAccessoryWithDescription:v9 home:v11];
  if ([v19 isMatterAccessory]) {
    notifyMatterMetricPairingStep(v11, 2uLL);
  }
  uint64_t v43 = [v9 setupAccessoryPayload];
  id v20 = objc_alloc(MEMORY[0x1E4F653F0]);
  uint64_t v21 = NSString;
  uint64_t v22 = MEMORY[0x1D94505D0](v11, a2);
  id v23 = [v21 stringWithFormat:@"%@, %s:%ld", v22, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/Home/HMDHome.m", 12018];
  uint64_t v24 = (void *)[v20 initWithName:v23];

  id v44 = v24;
  [v9 accessoryUUID];

  [v43 categoryNumber];
  [v19 linkType];
  id v25 = (id)HAPLinkTypeDescription();
  [v19 communicationProtocol];
  id v26 = (id)HAPCommunicationProtocolDescription();
  [v43 supportsWAC];
  id v27 = (id)HMFBooleanToString();
  [(HMDUnpairedHAPAccessoryConfiguration *)v14 requiresUserConsent];
  id v28 = (id)HMFBooleanToString();
  id v29 = HMDNetworkRouterSupportAsString([(HMDHome *)v11 networkRouterSupport]);
  id v30 = (id)objc_msgSend(NSNumber, "numberWithUnsignedInteger:", -[HMDHome networkRouterSupportDisableReason](v11, "networkRouterSupportDisableReason"));
  [v9 appIdentifier];

  [v19 isThreadAccessory];
  id v31 = (id)HMFBooleanToString();

  if (v41)
  {
    id v32 = v41;
    if (v11)
    {
      objc_initWeak(&location, v11);
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = __74__HMDHome_createLocalAddAccessoryProgressHandler_progressHandlerDelegate___block_invoke;
      id v54 = &unk_1E6A06BA8;
      objc_copyWeak((id *)&v55[8], &location);
      *(void *)id v55 = v32;
      __int16 v40 = _Block_copy(buf);

      objc_destroyWeak((id *)&v55[8]);
      objc_destroyWeak(&location);
    }
    else
    {
      __int16 v40 = 0;
    }
  }
  else
  {
    __int16 v40 = HMDHomeCreateAddAccessoryProgressHandler(v11, v9, v42);
  }
  __int16 v33 = (void *)MEMORY[0x1D9452090]();
  uint64_t v34 = v11;
  uint64_t v35 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
  {
    uint64_t v36 = HMFGetLogIdentifier();
    [v9 supportsWAC];
    uint64_t v37 = HMFBooleanToString();
    __int16 v38 = HMDNetworkRouterSupportAsString([(HMDHome *)v34 networkRouterSupport]);
    [(HMDHome *)v34 networkRouterSupportDisableReason];
    uint64_t v39 = HMNetworkRouterSupportDisableReasonAsString();
    *(_DWORD *)buf = 138544386;
    *(void *)&uint8_t buf[4] = v36;
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&buf[14] = v9;
    *(_WORD *)&buf[22] = 2112;
    id v54 = v37;
    *(_WORD *)id v55 = 2112;
    *(void *)&v55[2] = v38;
    __int16 v56 = 2112;
    id v57 = v39;
    _os_log_impl(&dword_1D49D5000, v35, OS_LOG_TYPE_INFO, "%{public}@Adding unpaired accessory with description: %@, supports WAC: %@, network router support: %@ (Reason: %@)", buf, 0x34u);
  }
  if ([v9 supportsWAC]
    && ([(HMDHome *)v34 networkRouterSupport] & 8) != 0)
  {
    v45[0] = MEMORY[0x1E4F143A8];
    v45[1] = 3221225472;
    v45[2] = __100__HMDHome__continuePairingAfterUserConsentWithAccessoryDescription_progressHandlerDelegate_message___block_invoke;
    v45[3] = &unk_1E6A06C98;
    void v45[4] = v34;
    id v46 = v44;
    id v47 = v9;
    id v48 = v19;
    id v49 = v42;
    uint64_t v50 = v14;
    id v51 = v40;
    [(HMDHome *)v34 _createUniquePSKClientConfigurationWithRequestMessage:v49 pairingEvent:v48 completion:v45];
  }
  else
  {
    [v44 begin];
    *(void *)buf = v44;
    [(HMDHome *)v34 _pairAccessoryWithAccessoryDescription:v9 configuration:v14 pairingEvent:v19 progressHandler:v40 requestMessage:v42];
    __HMFActivityScopeLeave();
  }
}

void __100__HMDHome__continuePairingAfterUserConsentWithAccessoryDescription_progressHandlerDelegate_message___block_invoke(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [a1[4] workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __100__HMDHome__continuePairingAfterUserConsentWithAccessoryDescription_progressHandlerDelegate_message___block_invoke_2;
  block[3] = &unk_1E6A12EE0;
  id v11 = a1[5];
  id v12 = a1[6];
  id v13 = v6;
  id v14 = a1[4];
  id v15 = a1[7];
  id v16 = a1[8];
  id v17 = a1[9];
  id v18 = v5;
  id v19 = a1[10];
  id v8 = v5;
  id v9 = v6;
  dispatch_async(v7, block);
}

void __100__HMDHome__continuePairingAfterUserConsentWithAccessoryDescription_progressHandlerDelegate_message___block_invoke_2(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v2 = *(void **)(a1 + 40);
  id v3 = *(id *)(a1 + 32);
  [v2 accessoryUUID];

  [*(id *)(a1 + 48) domain];
  [*(id *)(a1 + 48) code];

  BOOL v4 = *(void *)(a1 + 48) == 0;
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = *(id *)(a1 + 56);
  id v7 = HMFGetOSLogHandle();
  id v8 = v7;
  if (v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      *(_DWORD *)id v14 = 138543362;
      *(void *)&void v14[4] = v13;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Client configuration with WiFi unique PSK created successfully", v14, 0xCu);
    }
    [*(id *)(a1 + 80) setNetworkCredential:*(void *)(a1 + 88)];
    [*(id *)(a1 + 64) setUsedWiFiPPSK:1];
    [*(id *)(a1 + 32) begin];
    *(void *)id v14 = *(id *)(a1 + 32);
    [*(id *)(a1 + 56) _pairAccessoryWithAccessoryDescription:*(void *)(a1 + 40) configuration:*(void *)(a1 + 80) pairingEvent:*(void *)(a1 + 64) progressHandler:*(void *)(a1 + 96) requestMessage:*(void *)(a1 + 72)];
    __HMFActivityScopeLeave();
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v9 = HMFGetLogIdentifier();
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v11 = *(void *)(a1 + 48);
      *(_DWORD *)id v14 = 138543874;
      *(void *)&void v14[4] = v9;
      __int16 v15 = 2112;
      uint64_t v16 = v10;
      __int16 v17 = 2112;
      uint64_t v18 = v11;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to generate WiFi credential for accessory %@ with error: %@", v14, 0x20u);
    }
    id v12 = [*(id *)(a1 + 56) logEventSubmitter];
    [v12 submitLogEvent:*(void *)(a1 + 64) error:*(void *)(a1 + 48)];

    [*(id *)(a1 + 72) respondWithError:*(void *)(a1 + 48)];
    [*(id *)(a1 + 56) _removePendingAccessoryAdd:*(void *)(a1 + 40)];
  }
}

void __74__HMDHome_createLocalAddAccessoryProgressHandler_progressHandlerDelegate___block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v7 = (void *)MEMORY[0x1D9452090]();
  id v8 = WeakRetained;
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = HMFGetLogIdentifier();
    uint64_t v11 = HMSetupAccessoryProgressAsString();
    int v15 = 138543618;
    uint64_t v16 = v10;
    __int16 v17 = 2112;
    uint64_t v18 = v11;
    _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Local add accessory progress handler called with progress: %@", (uint8_t *)&v15, 0x16u);
  }
  if (v8)
  {
    if (*(void *)(a1 + 32))
    {
      id v12 = [v5 accessoryUUID];

      if (a2 == 6)
      {
        if (v12)
        {
          id v13 = *(void **)(a1 + 32);
          id v14 = [v5 accessoryUUID];
          [v13 localAccessoryAddRequiresConsent:v14];
        }
      }
    }
  }
}

- (void)_handleAddAccessoryWithDescription:(id)a3
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 dataForKey:@"kAccessoryDescriptionDataKey"];
  id v13 = 0;
  id v6 = [(HMDHome *)self _setupDescriptionFromData:v5 error:&v13];
  id v7 = v13;
  if (v6)
  {
    -[HMDHome _handleAddAccessoryWithDescription:progressHandlerDelegate:message:]((id *)&self->super.super.isa, v6, 0, v4);
  }
  else
  {
    id v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = self;
    uint64_t v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      int v15 = v11;
      __int16 v16 = 2112;
      id v17 = v7;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive setup accessory description from accessory description data: %@", buf, 0x16u);
    }
    id v12 = [MEMORY[0x1E4F28C58] hmErrorWithCode:20];
    [v4 respondWithError:v12];
  }
}

- (void)_handleAddAccessoryWithDescription:(void *)a3 progressHandlerDelegate:(void *)a4 message:
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v53 = a3;
  id v8 = a4;
  id v9 = v8;
  if (a1)
  {
    if (([v8 isEntitledForSPIAccess] & 1) == 0)
    {
      uint64_t v36 = (void *)MEMORY[0x1D9452090]();
      uint64_t v37 = a1;
      __int16 v38 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        uint64_t v39 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        __int16 v56 = v39;
        _os_log_impl(&dword_1D49D5000, v38, OS_LOG_TYPE_ERROR, "%{public}@Client does not have entitlement to use SPI", buf, 0xCu);
      }
      id v14 = [MEMORY[0x1E4F28C58] hmErrorWithCode:17];
      [v9 respondWithError:v14];
      goto LABEL_31;
    }
    uint64_t v10 = [a1 accessories];
    unint64_t v11 = [v10 count];
    unint64_t v12 = maximumAccessoriesPerHome;

    if (v11 >= v12)
    {
      __int16 v40 = (void *)MEMORY[0x1D9452090]();
      id v41 = a1;
      id v42 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        uint64_t v43 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        __int16 v56 = v43;
        _os_log_impl(&dword_1D49D5000, v42, OS_LOG_TYPE_INFO, "%{public}@Can't add additional accessories; already at maximum accessories for home",
          buf,
          0xCu);
      }
      id v14 = [MEMORY[0x1E4F28C58] hmErrorWithCode:49];
      [v9 respondWithError:v14];
      goto LABEL_31;
    }
    id v54 = 0;
    int v52 = [a1 _shouldAllowAddingAccessoryWithDescription:v7 requestMessage:v9 error:&v54];
    id v13 = v54;
    id v14 = v13;
    if (v52) {
      goto LABEL_5;
    }
    id v44 = [v13 domain];
    if ([v44 isEqualToString:*MEMORY[0x1E4F2D140]])
    {
      BOOL v45 = [v14 code] == 97;

      if (v45)
      {
LABEL_5:
        int v15 = [v7 appIdentifier];
        BOOL v16 = v15 == 0;

        if (v16)
        {
          uint64_t v17 = [v9 clientIdentifier];
          uint64_t v18 = (void *)v17;
          if (v17) {
            uint64_t v19 = (__CFString *)v17;
          }
          else {
            uint64_t v19 = &stru_1F2C9F1A8;
          }
          [v7 updateAppIdentifier:v19];
        }
        os_unfair_recursive_lock_lock_with_options();
        [a1[97] setObject:v9 forKey:v7];
        os_unfair_recursive_lock_unlock();
        id v20 = [a1 accessoryBrowser];
        uint64_t v21 = [v20 unpairedHAPAccessoryWithAccessoryDescription:v7];

        uint64_t v22 = [v21 category];
        if (!v22)
        {
          id v23 = (void *)MEMORY[0x1E4F2E520];
          uint64_t v24 = [v7 setupAccessoryPayload];
          id v25 = [v24 categoryNumber];
          uint64_t v22 = [v23 categoryWithCategoryIdentifier:v25];
        }
        id v26 = [v21 uuid];
        HMDHomeCreateAddAccessoryProgressHandler(a1, v7, v9);
        id v27 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue();

        id v28 = [HMDAddAccessoryProgressState alloc];
        id v29 = [v21 uuid];
        id v30 = [v21 name];
        id v31 = [(HMDAddAccessoryProgressState *)v28 initWithUUID:v29 accessoryName:v30 manufacturerName:0 category:v22 certificationStatus:0 productData:0];

        id v32 = [a1 accessoryBrowser];
        __int16 v33 = [v21 uuid];
        [v32 registerProgressHandler:v27 unpairedAccessoryUUID:v33];

        if (v52)
        {
          uint64_t v34 = [v7 accessoryUUID];

          if (v34)
          {
            uint64_t v35 = [v7 accessoryUUID];
            [a1 _continuePairingAfterUserConsentWithAccessoryUUID:v35 orUnassociatedAccessory:0 message:v9];
          }
          else
          {
            [a1 _continuePairingAfterUserConsentWithAccessoryDescription:v7 progressHandlerDelegate:v53 message:v9];
          }
        }
        else
        {
          ((void (**)(void, uint64_t, HMDAddAccessoryProgressState *))v27)[2](v27, 9, v31);
        }

LABEL_31:
        goto LABEL_32;
      }
    }
    else
    {
    }
    id v46 = (void *)MEMORY[0x1D9452090]();
    id v47 = a1;
    id v48 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
    {
      id v49 = HMFGetLogIdentifier();
      uint64_t v50 = [v7 category];
      id v51 = [v50 localizedDescription];
      *(_DWORD *)buf = 138543874;
      __int16 v56 = v49;
      __int16 v57 = 2112;
      uint64_t v58 = v51;
      __int16 v59 = 2112;
      id v60 = v14;
      _os_log_impl(&dword_1D49D5000, v48, OS_LOG_TYPE_INFO, "%{public}@Cannot add an accessory of category '%@', error %@", buf, 0x20u);
    }
    [v9 respondWithError:v14];
    goto LABEL_31;
  }
LABEL_32:
}

- (void)_testOnlyAddMediaAccessory:(id)a3 message:(id)a4
{
}

- (void)_addMediaAccessory:(void *)a3 message:
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v34 = a3;
  if (a1)
  {
    id v6 = [v5 identifier];
    int v7 = [v6 isEqualToString:@"00000000-0000-0000-0000-C2EE6102B308"];

    if (v7)
    {
      id v8 = (void *)MEMORY[0x1D9452090]();
      id v9 = a1;
      uint64_t v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        unint64_t v11 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        *(void *)&uint8_t buf[4] = v11;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v5;
        _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_ERROR, "%{public}@The accessory %@ has an unknown media route identifier", buf, 0x16u);
      }
      unint64_t v12 = [MEMORY[0x1E4F28C58] hmPrivateErrorWithCode:9001];
      [v34 respondWithError:v12];
    }
    else
    {
      uint64_t v42 = 0;
      uint64_t v43 = &v42;
      uint64_t v44 = 0x2020000000;
      uint64_t v45 = 0;
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      id v47 = __Block_byref_object_copy__10691;
      id v48 = __Block_byref_object_dispose__10692;
      id v49 = 0;
      id v13 = [a1 appleMediaAccessories];
      uint64_t v35 = MEMORY[0x1E4F143A8];
      uint64_t v36 = 3221225472;
      uint64_t v37 = __38__HMDHome__addMediaAccessory_message___block_invoke;
      __int16 v38 = &unk_1E6A06C70;
      id v14 = v5;
      id v39 = v14;
      __int16 v40 = &v42;
      id v41 = buf;
      objc_msgSend(v13, "na_each:", &v35);

      if (v43[3] >= 1)
      {
        uint64_t v15 = *(void *)(*(void *)&buf[8] + 40);
        if (v15) {
          objc_msgSend(a1, "_submitRemovalLogEventForAccessory:isLocalRemoval:isLocalFallback:isDuplicate:duplicateCount:error:", v15, 0, 0, 1);
        }
      }
      id v16 = v14;
      id v17 = v34;
      uint64_t v18 = (void *)MEMORY[0x1D9452090]();
      id v19 = a1;
      id v20 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        uint64_t v21 = HMFGetLogIdentifier();
        uint64_t v22 = [v17 shortDescription];
        [v19 isCurrentDevicePrimaryResident];
        id v23 = HMFBooleanToString();
        *(_DWORD *)uint64_t v50 = 138544130;
        id v51 = v21;
        __int16 v52 = 2112;
        id v53 = v16;
        __int16 v54 = 2112;
        id v55 = v22;
        __int16 v56 = 2112;
        __int16 v57 = v23;
        _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@Performing local add of media accessory: %@. Message: %@ - isPrimaryResident: %@", v50, 0x2Au);
      }
      uint64_t v24 = HMFGetOSLogHandle();
      if (os_signpost_enabled(v24))
      {
        id v25 = [v16 uuid];
        *(_DWORD *)uint64_t v50 = 138412290;
        id v51 = v25;
        _os_signpost_emit_with_name_impl(&dword_1D49D5000, v24, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "AddAccessory", "accessoryUUID=%{signpost.description:attribute}@ ", v50, 0xCu);
      }
      id v26 = objc_msgSend(v16, "addTransactionForHome:", v19, v34, v35, v36, v37, v38);
      id v27 = [v19 roomForEntireHome];
      id v28 = [v27 uuid];
      id v29 = [v28 UUIDString];
      [v26 setRoomUUID:v29];

      id v30 = [v19 backingStore];
      id v31 = [v17 name];
      id v32 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      __int16 v33 = [v30 transaction:v31 options:v32];

      [v33 add:v26 withMessage:v17];
      [v33 run];
      if (os_signpost_enabled(v24))
      {
        *(_WORD *)uint64_t v50 = 0;
        _os_signpost_emit_with_name_impl(&dword_1D49D5000, v24, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "AddAccessory", "", v50, 2u);
      }

      _Block_object_dispose(buf, 8);
      _Block_object_dispose(&v42, 8);
    }
  }
}

void __38__HMDHome__addMediaAccessory_message___block_invoke(uint64_t a1, void *a2)
{
  id v7 = a2;
  if ([v7 isHomePod])
  {
    id v4 = [*(id *)(a1 + 32) serialNumber];
    id v5 = [v7 serialNumber];
    int v6 = [v4 isEqualToString:v5];

    if (v6)
    {
      ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
    }
  }
}

- (void)_removePendingAccessoryAdd:(id)a3
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 accessoryUUID];
  int v6 = (void *)MEMORY[0x1D9452090]();
  id v7 = self;
  id v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    uint64_t v10 = [v5 UUIDString];
    int v11 = 138543618;
    unint64_t v12 = v9;
    __int16 v13 = 2112;
    id v14 = v10;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Removing accessoryDescription, setupCode and handlers for accessory %@", (uint8_t *)&v11, 0x16u);
  }
  os_unfair_recursive_lock_lock_with_options();
  [(NSMapTable *)v7->_addPendingAccessories removeObjectForKey:v4];
  if (v5)
  {
    [(NSMutableDictionary *)v7->_addPendingAccessorySetupCodeHandlers removeObjectForKey:v5];
    [(NSMutableDictionary *)v7->_addPendingAccessorySetupCodes removeObjectForKey:v5];
    [(NSMutableDictionary *)v7->_addPendingAccessoryOnboardingSetupPayloadStrings removeObjectForKey:v5];
  }
  os_unfair_recursive_lock_unlock();
}

- (void)_accessoryPairingDidComplete:(id)a3 configuration:(id)a4 pairingEvent:(id)a5 accessoryServer:(id)a6 certificationStatus:(int64_t)a7 requestMessage:(id)a8
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v14 = a3;
  id v32 = a4;
  id v15 = a5;
  id v16 = a6;
  id v33 = a8;
  [(HMDHome *)self _removePendingAccessoryAdd:v14];
  id v17 = v16;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  id v19 = v18;

  id v31 = v19;
  id v20 = 0;
  if ([v19 isWacComplete])
  {
    uint64_t v21 = (void *)MEMORY[0x1D9452090]();
    uint64_t v22 = self;
    id v23 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      uint64_t v24 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v41 = v24;
      _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_INFO, "%{public}@WAC was completed as part of accessory pairing.", buf, 0xCu);
    }
    id v20 = [v32 networkCredential];
  }
  if ([v15 isMatterAccessory]) {
    notifyMatterMetricPairingStep(self, 0x18uLL);
  }
  id v25 = [MEMORY[0x1E4F653F0] currentActivity];
  objc_initWeak((id *)buf, self);
  id v26 = [v14 accessoryUUID];
  v34[0] = MEMORY[0x1E4F143A8];
  v34[1] = 3221225472;
  v34[2] = __118__HMDHome__accessoryPairingDidComplete_configuration_pairingEvent_accessoryServer_certificationStatus_requestMessage___block_invoke;
  v34[3] = &unk_1E6A06C20;
  objc_copyWeak(v39, (id *)buf);
  id v27 = v17;
  id v35 = v27;
  id v28 = v15;
  id v36 = v28;
  id v29 = v14;
  id v37 = v29;
  id v30 = v25;
  id v38 = v30;
  v39[1] = (id)a7;
  [(HMDHome *)self _processAccessoriesToAddForUnpairedAccessory:v26 certificationStatus:a7 accessoryServer:v27 networkCredential:v20 pairingEvent:v28 message:v33 completionHandler:v34];

  objc_destroyWeak(v39);
  objc_destroyWeak((id *)buf);
}

void __118__HMDHome__accessoryPairingDidComplete_configuration_pairingEvent_accessoryServer_certificationStatus_requestMessage___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  id v5 = [WeakRetained _primaryAccessoryForServer:*(void *)(a1 + 32)];
  uint64_t v27 = 0;
  int v6 = [v5 preferredHAPAccessoryForOperation:1 linkType:&v27];
  id v7 = [*(id *)(a1 + 32) pairingMetricDictionary];
  id v8 = (void *)[v7 copy];
  [*(id *)(a1 + 40) setMatterMetrics:v8];

  [*(id *)(a1 + 32) clearPairingMetrics];
  [*(id *)(a1 + 40) updateEventPropertiesWithPairedAccessory:v5];
  if ([*(id *)(a1 + 40) isMatterAccessory]
    && [*(id *)(a1 + 40) isAddOperation])
  {
    if (v3) {
      +[HMDMatterAccessoryPairingEndContext hmdContextWithStep:24 error:v3];
    }
    else {
    id v9 = +[HMDMatterAccessoryPairingEndContext pairingCompletedContext];
    }
    notifyMatterMetricPairingEnded(WeakRetained, v9);
  }
  else
  {
    id v9 = [WeakRetained logEventSubmitter];
    [v9 submitLogEvent:*(void *)(a1 + 40) error:v3];
  }

  uint64_t v10 = (void *)MEMORY[0x1D9452090]();
  id v11 = WeakRetained;
  unint64_t v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    __int16 v13 = HMFGetLogIdentifier();
    id v14 = [*(id *)(a1 + 48) accessoryName];
    *(_DWORD *)buf = 138543618;
    id v29 = v13;
    __int16 v30 = 2112;
    id v31 = v14;
    _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@_handleAddAccessory: added accessories for accessory %@", buf, 0x16u);
  }
  id v15 = [v5 metricLoggingVendorDetails];
  id v16 = [v6 server];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v17 = v16;
  }
  else {
    id v17 = 0;
  }
  id v18 = v17;

  id v19 = *(void **)(a1 + 48);
  id v20 = *(id *)(a1 + 56);
  [v19 accessoryUUID];

  [*(id *)(a1 + 32) category];
  [v15 model];

  [v15 manufacturer];
  [v15 firmwareVersion];

  id v21 = (id)HAPLinkTypeDescription();
  [v18 isWacAccessory];

  id v22 = (id)HMFBooleanToString();
  id v23 = (id)[NSNumber numberWithInteger:*(void *)(a1 + 72)];
  [*(id *)(a1 + 40) isThreadAccessory];
  id v24 = (id)HMFBooleanToString();
  [*(id *)(a1 + 40) accessorySupportsWoL];

  id v25 = (id)HMFBooleanToString();
  id v26 = [v11 homeLocationHandler];
  [v26 updateHomeLocation];

  [v11 _evaluateShouldRelaunchAndSetRelaunch];
}

- (void)_pairAccessoryWithAccessoryDescription:(id)a3 unpairedAccessory:(id)a4 configuration:(id)a5 pairingEvent:(id)a6 requestMessage:(id)a7
{
  id v12 = a7;
  id v13 = a6;
  id v14 = a5;
  id v15 = a4;
  id v16 = a3;
  id v18 = [(HMDHome *)self accessoryBrowser];
  id v17 = __createAccessoryBrowserAddAccessoryCompletionHandler(self, v16, v14, v13, v12);

  [v18 pairAccessory:v15 configuration:v14 completionHandler:v17];
}

- (void)_continuePairingAfterUserConsentWithAccessoryUUID:(id)a3 orUnassociatedAccessory:(id)a4 message:(id)a5
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v93 = a5;
  uint64_t v10 = (void *)MEMORY[0x1D9452090]();
  id v11 = self;
  id v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v13 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    *(void *)&uint8_t buf[4] = v13;
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&buf[14] = v8;
    _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Continue pairing after user consent with accessoryUUID %@", buf, 0x16u);
  }
  if (v9) {
    goto LABEL_5;
  }
  id v14 = [(HMDHome *)v11 accessoryBrowser];
  id v15 = [v14 unassociatedAccessories];
  objc_msgSend(v15, "hmf_firstObjectWithUUID:", v8);
  id v9 = (id)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
LABEL_5:
    id v92 = v9;
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    if (isKindOfClass) {
      id v17 = v92;
    }
    else {
      id v17 = 0;
    }
    id v91 = v17;

    if (isKindOfClass)
    {
      long long v104 = 0u;
      long long v102 = 0u;
      long long v103 = 0u;
      long long v101 = 0u;
      id v18 = [(HMDHome *)v11 addPendingAccessories];
      id v19 = objc_msgSend(v18, "hm_allKeys");

      uint64_t v20 = [v19 countByEnumeratingWithState:&v101 objects:v106 count:16];
      if (v20)
      {
        uint64_t v21 = *(void *)v102;
        while (2)
        {
          for (uint64_t i = 0; i != v20; ++i)
          {
            if (*(void *)v102 != v21) {
              objc_enumerationMutation(v19);
            }
            id v23 = *(void **)(*((void *)&v101 + 1) + 8 * i);
            id v24 = [v23 accessoryUUID];
            int v25 = [v24 isEqual:v8];

            if (v25)
            {
              id v90 = v23;
              id v33 = [(HMDHome *)v11 addPendingAccessories];
              uint64_t v34 = [v33 objectForKey:v90];

              id v93 = (id)v34;
              goto LABEL_27;
            }
          }
          uint64_t v20 = [v19 countByEnumeratingWithState:&v101 objects:v106 count:16];
          if (v20) {
            continue;
          }
          break;
        }
      }
      id v90 = 0;
LABEL_27:

      long long v88 = [v93 stringForKey:@"kAccessoryPairingPasswordKey"];
      if (v88)
      {
        id v35 = (void *)MEMORY[0x1D9452090]();
        id v36 = v11;
        id v37 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          id v38 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          *(void *)&uint8_t buf[4] = v38;
          *(_WORD *)&unsigned char buf[12] = 2112;
          *(void *)&buf[14] = v91;
          _os_log_impl(&dword_1D49D5000, v37, OS_LOG_TYPE_INFO, "%{public}@Storing setupCode accessory %@", buf, 0x16u);
        }
        id v39 = [(HMDHome *)v36 addPendingAccessorySetupCodes];
        [v39 setObject:v88 forKey:v8];
      }
      else
      {
        long long v88 = [v90 setupCode];
      }
      uint64_t v43 = [v90 appIdentifier];
      __int16 v89 = +[HMDAccessoryPairingEvent pairingAccessory:home:appIdentifier:retry:](HMDAccessoryPairingEvent, "pairingAccessory:home:appIdentifier:retry:", v91, v11, v43, [v90 retry]);

      if ([v89 isMatterAccessory]) {
        notifyMatterMetricPairingStep(v11, 2uLL);
      }
      uint64_t v44 = objc_alloc_init(HMDUnpairedHAPAccessoryConfiguration);
      [(HMDUnpairedHAPAccessoryConfiguration *)v44 setSetupCode:v88];
      uint64_t v45 = [(HMDHome *)v11 _setupCodeProviderForMessage:v93];
      [(HMDUnpairedHAPAccessoryConfiguration *)v44 setSetupCodeProvider:v45];

      id v46 = [(HMDHome *)v11 homeLocationHandler];
      id v47 = [v46 isoCountryCode];
      [(HMDUnpairedHAPAccessoryConfiguration *)v44 setIsoCountryCode:v47];

      id v48 = [(HMDHome *)v11 matterFabricID];
      [(HMDUnpairedHAPAccessoryConfiguration *)v44 setChipFabricID:v48];

      id v49 = [(HMDHome *)v11 uuid];
      [(HMDUnpairedHAPAccessoryConfiguration *)v44 setHomeUUID:v49];

      uint64_t v50 = [v91 preferredAccessoryServer];
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v51 = v50;
      }
      else {
        id v51 = 0;
      }
      id v87 = v51;

      __int16 v52 = (void *)MEMORY[0x1D9452090]();
      id v53 = v11;
      __int16 v54 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
      {
        id v55 = HMFGetLogIdentifier();
        __int16 v56 = [v8 UUIDString];
        [v87 isWacNeeded];
        __int16 v57 = HMFBooleanToString();
        uint64_t v58 = HMDNetworkRouterSupportAsString([(HMDHome *)v53 networkRouterSupport]);
        [(HMDHome *)v53 networkRouterSupportDisableReason];
        __int16 v59 = HMNetworkRouterSupportDisableReasonAsString();
        *(_DWORD *)buf = 138544386;
        *(void *)&uint8_t buf[4] = v55;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v56;
        *(_WORD *)&buf[22] = 2112;
        long long v108 = v57;
        *(_WORD *)id v109 = 2112;
        *(void *)&v109[2] = v58;
        *(_WORD *)&v109[10] = 2112;
        *(void *)&v109[12] = v59;
        _os_log_impl(&dword_1D49D5000, v54, OS_LOG_TYPE_INFO, "%{public}@Adding unpaired accessory with uuid: %@, WAC needed: %@, network router support: %@ (Reason %@)", buf, 0x34u);
      }
      id v60 = [MEMORY[0x1E4F653F0] currentActivity];
      [v90 accessoryUUID];

      uint64_t v61 = [v91 preferredAccessoryServer];
      [v61 category];

      id v62 = HMDNetworkRouterSupportAsString([(HMDHome *)v53 networkRouterSupport]);
      id v63 = (id)objc_msgSend(NSNumber, "numberWithUnsignedInteger:", -[HMDHome networkRouterSupportDisableReason](v53, "networkRouterSupportDisableReason"));
      [v89 linkType];
      id v64 = (id)HAPLinkTypeDescription();
      [v89 communicationProtocol];
      id v65 = (id)HAPCommunicationProtocolDescription();
      [v87 isWacNeeded];
      id v66 = (id)HMFBooleanToString();
      [(HMDUnpairedHAPAccessoryConfiguration *)v44 requiresUserConsent];
      id v67 = (id)HMFBooleanToString();
      [v90 appIdentifier];

      [v89 isThreadAccessory];
      id v68 = (id)HMFBooleanToString();
      if ([v87 isWacNeeded]
        && ([(HMDHome *)v53 networkRouterSupport] & 8) != 0)
      {
        v94[0] = MEMORY[0x1E4F143A8];
        v94[1] = 3221225472;
        v94[2] = __93__HMDHome__continuePairingAfterUserConsentWithAccessoryUUID_orUnassociatedAccessory_message___block_invoke;
        v94[3] = &unk_1E6A06BF8;
        void v94[4] = v53;
        id v95 = v60;
        id v96 = v90;
        id v97 = v89;
        id v98 = v93;
        long long v99 = v44;
        id v100 = v91;
        [(HMDHome *)v53 _createUniquePSKClientConfigurationWithRequestMessage:v98 pairingEvent:v97 completion:v94];
      }
      else
      {
        objc_msgSend(v60, "begin", v87);
        *(void *)buf = v60;
        [(HMDHome *)v53 _pairAccessoryWithAccessoryDescription:v90 unpairedAccessory:v91 configuration:v44 pairingEvent:v89 requestMessage:v93];
        __HMFActivityScopeLeave();
      }
    }
    else
    {
      id v92 = v92;
      id v93 = v93;
      if (v11)
      {
        objc_initWeak(&location, v11);
        id v26 = v92;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v27 = v26;
        }
        else {
          uint64_t v27 = 0;
        }
        id v28 = v27;

        if (v28)
        {
          id v29 = (void *)MEMORY[0x1D9452090]();
          __int16 v30 = v11;
          HMFGetOSLogHandle();
          id v31 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v32 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            *(void *)&uint8_t buf[4] = v32;
            *(_WORD *)&unsigned char buf[12] = 2112;
            *(void *)&buf[14] = v28;
            _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_DEFAULT, "%{public}@Starting WAC for %@", buf, 0x16u);
          }
          *(void *)buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = __49__HMDHome__addAndMaybeWACMediaAccessory_message___block_invoke;
          long long v108 = &unk_1E6A06C48;
          objc_copyWeak((id *)&v109[16], &location);
          *(void *)id v109 = v93;
          *(void *)&v109[8] = v28;
          [*(id *)&v109[8] startConfigurationWithCompletionHandler:buf];

          objc_destroyWeak((id *)&v109[16]);
        }
        else
        {
          id v40 = v26;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v41 = v40;
          }
          else {
            id v41 = 0;
          }
          id v42 = v41;

          if (v42)
          {
            -[HMDHome _addAndMaybeAssociateMediaAccessory:message:](v11, v42, v93);
          }
          else
          {
            uint64_t v82 = (void *)MEMORY[0x1D9452090]();
            __int16 v83 = v11;
            HMFGetOSLogHandle();
            uint64_t v84 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
            {
              __int16 v85 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543618;
              *(void *)&uint8_t buf[4] = v85;
              *(_WORD *)&unsigned char buf[12] = 2112;
              *(void *)&buf[14] = v40;
              _os_log_impl(&dword_1D49D5000, v84, OS_LOG_TYPE_DEFAULT, "%{public}@Unable to add unknown unassociated accessory: %@", buf, 0x16u);
            }
            long long v86 = [MEMORY[0x1E4F28C58] hmErrorWithCode:48];
            [v93 respondWithError:v86];
          }
        }

        objc_destroyWeak(&location);
      }
    }
    goto LABEL_61;
  }
  id v69 = (void *)MEMORY[0x1D9452090]();
  id v70 = v11;
  BOOL v71 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v72 = HMFGetLogIdentifier();
    uint64_t v73 = [v8 UUIDString];
    *(_DWORD *)buf = 138543618;
    *(void *)&uint8_t buf[4] = v72;
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&buf[14] = v73;
    _os_log_impl(&dword_1D49D5000, v71, OS_LOG_TYPE_DEFAULT, "%{public}@Unknown accessory with identifier: %@", buf, 0x16u);
  }
  id v74 = (void *)MEMORY[0x1D9452090]();
  id v75 = v70;
  id v76 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v77 = HMFGetLogIdentifier();
    long long v78 = [(HMDHome *)v75 accessoryBrowser];
    long long v79 = [(HMDHome *)v75 accessoryBrowser];
    long long v80 = [v79 unassociatedAccessories];
    *(_DWORD *)buf = 138543874;
    *(void *)&uint8_t buf[4] = v77;
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&buf[14] = v78;
    *(_WORD *)&buf[22] = 2112;
    long long v108 = v80;
    _os_log_impl(&dword_1D49D5000, v76, OS_LOG_TYPE_DEFAULT, "%{public}@AccessoryBrowser %@, Unassociated accessories: %@", buf, 0x20u);
  }
  long long v81 = [v93 responseHandler];

  if (v81)
  {
    id v92 = [v93 responseHandler];
    id v91 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    (*((void (**)(id, id, void))v92 + 2))(v92, v91, 0);
LABEL_61:
  }
}

void __93__HMDHome__continuePairingAfterUserConsentWithAccessoryUUID_orUnassociatedAccessory_message___block_invoke(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [a1[4] workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __93__HMDHome__continuePairingAfterUserConsentWithAccessoryUUID_orUnassociatedAccessory_message___block_invoke_2;
  block[3] = &unk_1E6A06BD0;
  id v11 = a1[5];
  id v12 = a1[6];
  id v13 = v6;
  id v14 = a1[4];
  id v15 = a1[7];
  id v16 = a1[8];
  id v17 = a1[9];
  id v18 = v5;
  id v19 = a1[10];
  id v8 = v5;
  id v9 = v6;
  dispatch_async(v7, block);
}

void __49__HMDHome__addAndMaybeWACMediaAccessory_message___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (!WeakRetained)
  {
    id v13 = *(void **)(a1 + 32);
    id v14 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v15 = 2;
LABEL_7:
    id v16 = [v14 hmErrorWithCode:v15];
    [v13 respondWithError:v16];
    goto LABEL_8;
  }
  if (v5)
  {
    id v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = WeakRetained;
    uint64_t v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      id v11 = HMFGetLogIdentifier();
      id v12 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      id v31 = v11;
      __int16 v32 = 2112;
      id v33 = v12;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_ERROR, "%{public}@WAC failed for %@", buf, 0x16u);
    }
    id v13 = *(void **)(a1 + 32);
    id v14 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v15 = 48;
    goto LABEL_7;
  }
  id v17 = v6;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v18 = v17;
  }
  else {
    id v18 = 0;
  }
  id v16 = v18;

  if (v16)
  {
    id v19 = [WeakRetained workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __49__HMDHome__addAndMaybeWACMediaAccessory_message___block_invoke_1176;
    block[3] = &unk_1E6A19668;
    void block[4] = WeakRetained;
    id v28 = v16;
    id v29 = *(id *)(a1 + 32);
    dispatch_async(v19, block);
  }
  else
  {
    uint64_t v20 = (void *)MEMORY[0x1D9452090]();
    id v21 = WeakRetained;
    id v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      id v23 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v31 = v23;
      __int16 v32 = 2112;
      id v33 = (id)objc_opt_class();
      id v24 = v33;
      _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_ERROR, "%{public}@Post-WAC not supported for type %@", buf, 0x16u);
    }
    int v25 = *(void **)(a1 + 32);
    id v26 = [MEMORY[0x1E4F28C58] hmErrorWithCode:48];
    [v25 respondWithError:v26];
  }
LABEL_8:
}

- (void)_addAndMaybeAssociateMediaAccessory:(void *)a3 message:
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    if ([a1 isOwnerUser])
    {
      id v7 = [a1 homeManager];
      id v8 = [v5 uuid];
      id v9 = [v7 accessorySetupMetricDispatcherForAccessoryUUID:v8];

      [v9 addHome:a1];
      if ([v5 conformsToProtocol:&unk_1F2E1C598]
        && [v5 supportsAssociation])
      {
        id inited = objc_initWeak(&location, a1);
        id v11 = (void *)MEMORY[0x1D9452090](inited);
        id v12 = a1;
        HMFGetOSLogHandle();
        id v13 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          id v14 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          int v25 = v14;
          __int16 v26 = 2112;
          id v27 = v5;
          _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Starting association for media accessory: %@", buf, 0x16u);
        }
        v19[0] = MEMORY[0x1E4F143A8];
        v19[1] = 3221225472;
        void v19[2] = __55__HMDHome__addAndMaybeAssociateMediaAccessory_message___block_invoke;
        v19[3] = &unk_1E6A15888;
        objc_copyWeak(&v22, &location);
        id v20 = v5;
        id v21 = v6;
        [v20 associateToHome:v12 completionHandler:v19];

        objc_destroyWeak(&v22);
        objc_destroyWeak(&location);
      }
      else
      {
        -[HMDHome _addMediaAccessory:message:](a1, v5, v6);
      }
    }
    else
    {
      uint64_t v15 = (void *)MEMORY[0x1D9452090]();
      id v16 = a1;
      id v17 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        id v18 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        int v25 = v18;
        _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_DEFAULT, "%{public}@Must be owner to add WHA accessory", buf, 0xCu);
      }
      id v9 = [MEMORY[0x1E4F28C58] hmErrorWithCode:17];
      [v6 respondWithError:v9];
    }
  }
}

void __55__HMDHome__addAndMaybeAssociateMediaAccessory_message___block_invoke(id *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v5 = WeakRetained;
  if (v3)
  {
    id v6 = (void *)MEMORY[0x1D9452090]();
    id v7 = v5;
    id v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = HMFGetLogIdentifier();
      id v10 = a1[4];
      *(_DWORD *)buf = 138543874;
      id v19 = v9;
      __int16 v20 = 2112;
      id v21 = v10;
      __int16 v22 = 2112;
      id v23 = v3;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to add accessory, %@, with error: %@", buf, 0x20u);
    }
    [a1[5] respondWithError:v3];
  }
  else if (WeakRetained)
  {
    id v11 = [WeakRetained workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __55__HMDHome__addAndMaybeAssociateMediaAccessory_message___block_invoke_1221;
    block[3] = &unk_1E6A16550;
    objc_copyWeak(&v17, a1 + 6);
    id v15 = a1[5];
    id v16 = a1[4];
    dispatch_async(v11, block);

    objc_destroyWeak(&v17);
  }
  else
  {
    id v12 = a1[5];
    id v13 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    [v12 respondWithError:v13];
  }
}

void __55__HMDHome__addAndMaybeAssociateMediaAccessory_message___block_invoke_1221(void **a1)
{
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    -[HMDHome _addMediaAccessory:message:](WeakRetained, a1[5], a1[4]);
  }
  else
  {
    id v3 = a1[4];
    id v4 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    [v3 respondWithError:v4];
  }
}

void __49__HMDHome__addAndMaybeWACMediaAccessory_message___block_invoke_1176(id *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = a1[4];
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = HMFGetLogIdentifier();
    int v6 = 138543362;
    id v7 = v5;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Continuing to add accessory post-WAC", (uint8_t *)&v6, 0xCu);
  }
  -[HMDHome _addAndMaybeAssociateMediaAccessory:message:](a1[4], a1[5], a1[6]);
}

void __93__HMDHome__continuePairingAfterUserConsentWithAccessoryUUID_orUnassociatedAccessory_message___block_invoke_2(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v2 = *(void **)(a1 + 40);
  id v3 = *(id *)(a1 + 32);
  [v2 accessoryUUID];

  [*(id *)(a1 + 48) domain];
  [*(id *)(a1 + 48) code];

  BOOL v4 = *(void *)(a1 + 48) == 0;
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = *(id *)(a1 + 56);
  id v7 = HMFGetOSLogHandle();
  uint64_t v8 = v7;
  if (v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      *(_DWORD *)id v14 = 138543362;
      *(void *)&void v14[4] = v13;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Client configuration with WiFi unique PSK created successfully", v14, 0xCu);
    }
    [*(id *)(a1 + 80) setNetworkCredential:*(void *)(a1 + 88)];
    [*(id *)(a1 + 64) setUsedWiFiPPSK:1];
    [*(id *)(a1 + 32) begin];
    *(void *)id v14 = *(id *)(a1 + 32);
    [*(id *)(a1 + 56) _pairAccessoryWithAccessoryDescription:*(void *)(a1 + 40) unpairedAccessory:*(void *)(a1 + 96) configuration:*(void *)(a1 + 80) pairingEvent:*(void *)(a1 + 64) requestMessage:*(void *)(a1 + 72)];
    __HMFActivityScopeLeave();
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v9 = HMFGetLogIdentifier();
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v11 = *(void *)(a1 + 48);
      *(_DWORD *)id v14 = 138543874;
      *(void *)&void v14[4] = v9;
      __int16 v15 = 2112;
      uint64_t v16 = v10;
      __int16 v17 = 2112;
      uint64_t v18 = v11;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to generate WiFi credential for accessory %@ with error: %@", v14, 0x20u);
    }
    id v12 = [*(id *)(a1 + 56) logEventSubmitter];
    [v12 submitLogEvent:*(void *)(a1 + 64) error:*(void *)(a1 + 48)];

    [*(id *)(a1 + 72) respondWithError:*(void *)(a1 + 48)];
    [*(id *)(a1 + 56) _removePendingAccessoryAdd:*(void *)(a1 + 40)];
  }
}

- (void)_continueLegacyAddAccessoryWithUUID:(id)a3 unassociatedAccessory:(id)a4 setupCode:(id)a5 appID:(id)a6 message:(id)a7
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  id v12 = a3;
  id v82 = a4;
  id v80 = a5;
  id v81 = a6;
  id v13 = a7;
  id v14 = [(HMDHome *)self accessoryWithUUID:v12];
  if (v14)
  {
    __int16 v15 = (void *)MEMORY[0x1D9452090]();
    uint64_t v16 = self;
    __int16 v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      __int16 v85 = v18;
      __int16 v86 = 2112;
      id v87 = v12;
      __int16 v88 = 2112;
      id v89 = v14;
      _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_ERROR, "%{public}@Can't add unassociated accessory: this home already has an accessory with UUID %@: %@", buf, 0x20u);
    }
    if (_os_feature_enabled_impl()
      && [v13 isEntitledForSPIAccess]
      && [v13 isEntitledToProvideAccessorySetupPayload])
    {
      uint64_t v19 = (void *)MEMORY[0x1D9452090]();
      __int16 v20 = v16;
      id v21 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v22 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        __int16 v85 = v22;
        _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Creating temporary progress handler to invoke with already-associated error", buf, 0xCu);
      }
      id v23 = objc_alloc(MEMORY[0x1E4F2EAD0]);
      uint64_t v24 = [(HMDHome *)v20 uuid];
      long long v78 = (void *)[v23 initWithAccessoryUUID:v12 accessoryName:0 appID:v81 homeUUID:v24];

      HMDHomeCreateAddAccessoryProgressHandler(v20, v78, v13);
      int v25 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue();
      __int16 v26 = [HMDAddAccessoryProgressState alloc];
      id v27 = [v14 uuid];
      uint64_t v28 = [v14 name];
      id v29 = [v14 manufacturer];
      __int16 v30 = [v14 category];
      id v31 = [v14 productData];
      __int16 v32 = [(HMDAddAccessoryProgressState *)v26 initWithUUID:v27 accessoryName:v28 manufacturerName:v29 category:v30 certificationStatus:0 productData:v31];

      ((void (**)(void, uint64_t, HMDAddAccessoryProgressState *))v25)[2](v25, 47, v32);
    }
    id v33 = [MEMORY[0x1E4F28C58] hmErrorWithCode:13];
    [v13 respondWithError:v33];
    goto LABEL_47;
  }
  uint64_t v34 = [(HMDHome *)self accessories];
  unint64_t v35 = [v34 count];
  unint64_t v36 = maximumAccessoriesPerHome;

  if (v35 >= v36)
  {
    uint64_t v43 = (void *)MEMORY[0x1D9452090]();
    uint64_t v44 = self;
    uint64_t v45 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      id v46 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      __int16 v85 = v46;
      _os_log_impl(&dword_1D49D5000, v45, OS_LOG_TYPE_ERROR, "%{public}@Can't add unassociated accessory: already at maximum accessories for home", buf, 0xCu);
    }
    id v33 = [MEMORY[0x1E4F28C58] hmErrorWithCode:49];
    [v13 respondWithError:v33];
  }
  else if (([v82 associationOptions] & 2) != 0)
  {
    id v47 = (void *)MEMORY[0x1D9452090]();
    id v48 = self;
    id v49 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
    {
      uint64_t v50 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      __int16 v85 = v50;
      _os_log_impl(&dword_1D49D5000, v49, OS_LOG_TYPE_INFO, "%{public}@Can't add unassociated accessory: software update needed on the accessory", buf, 0xCu);
    }
    id v33 = [MEMORY[0x1E4F28C58] hmErrorWithCode:48];
    [v13 respondWithError:v33];
  }
  else
  {
    id v37 = [v82 category];
    id v83 = 0;
    BOOL v38 = [(HMDHome *)self _shouldAllowAddingAccessoryOfCategory:v37 requestMessage:v13 error:&v83];
    id v33 = v83;

    if (v38)
    {
LABEL_14:
      id v39 = v82;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v40 = v39;
      }
      else {
        id v40 = 0;
      }
      id v79 = v40;

      if (v79)
      {
        id v41 = objc_alloc(MEMORY[0x1E4F2EAD0]);
        id v42 = [(HMDHome *)self uuid];
        BOOL v77 = (void *)[v41 initWithAccessoryUUID:v12 accessoryName:0 appID:v81 homeUUID:v42];

        [v77 setSetupCode:v80];
        os_unfair_recursive_lock_lock_with_options();
        [(NSMapTable *)self->_addPendingAccessories setObject:v13 forKey:v77];
        os_unfair_recursive_lock_unlock();
      }
      else
      {
        BOOL v77 = 0;
      }
      if ([v13 isEntitledForSPIAccess]
        && [v13 isEntitledToProvideAccessorySetupPayload])
      {
        context = (void *)MEMORY[0x1D9452090]();
        __int16 v59 = self;
        id v60 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v61 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          __int16 v85 = v61;
          _os_log_impl(&dword_1D49D5000, v60, OS_LOG_TYPE_DEBUG, "%{public}@Registering Progress Handler", buf, 0xCu);
        }
        uint64_t v62 = HMDHomeCreateAddAccessoryProgressHandler(v59, v77, v13);
        id v63 = v59;
        id v64 = (void (**)(void, void, void))v62;
        id v65 = [(HMDHome *)v63 accessoryBrowser];
        [v65 registerProgressHandler:v64 unpairedAccessoryUUID:v12];
      }
      else
      {
        id v64 = 0;
      }
      if (v38)
      {
        [(HMDHome *)self _continuePairingAfterUserConsentWithAccessoryUUID:v12 orUnassociatedAccessory:v39 message:v13];
      }
      else if (v64)
      {
        id v66 = [HMDAddAccessoryProgressState alloc];
        id v67 = [v79 uuid];
        id v68 = [v79 name];
        id v69 = [v79 category];
        id v70 = [(HMDAddAccessoryProgressState *)v66 initWithUUID:v67 accessoryName:v68 manufacturerName:0 category:v69 certificationStatus:0 productData:0];

        ((void (**)(void, uint64_t, HMDAddAccessoryProgressState *))v64)[2](v64, 9, v70);
      }
      else
      {
        BOOL v71 = (void *)MEMORY[0x1D9452090]();
        uint64_t v72 = self;
        uint64_t v73 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
        {
          id v74 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          __int16 v85 = v74;
          _os_log_impl(&dword_1D49D5000, v73, OS_LOG_TYPE_INFO, "%{public}@No progress handler but need to request user consent to replace accessory in home", buf, 0xCu);
        }
        id v75 = [MEMORY[0x1E4F28C58] hmErrorWithCode:48];
        [v13 respondWithError:v75];
      }
      goto LABEL_47;
    }
    id v51 = [v33 domain];
    if ([v51 isEqualToString:*MEMORY[0x1E4F2D140]])
    {
      BOOL v52 = [v33 code] == 97;

      if (v52) {
        goto LABEL_14;
      }
    }
    else
    {
    }
    id v53 = (void *)MEMORY[0x1D9452090]();
    __int16 v54 = self;
    id v55 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      __int16 v56 = HMFGetLogIdentifier();
      __int16 v57 = [v82 category];
      uint64_t v58 = [v57 localizedDescription];
      *(_DWORD *)buf = 138543874;
      __int16 v85 = v56;
      __int16 v86 = 2112;
      id v87 = v58;
      __int16 v88 = 2112;
      id v89 = v33;
      _os_log_impl(&dword_1D49D5000, v55, OS_LOG_TYPE_ERROR, "%{public}@Can't add an accessory of category %@: %@", buf, 0x20u);
    }
    [v13 respondWithError:v33];
  }
LABEL_47:
}

- (BOOL)_shouldUseDeprecatedAddAccessoryMessage:(id)a3 minimumVersion:(id)a4 primaryResident:(id)a5 shouldRelayMessages:(BOOL)a6
{
  id v9 = a4;
  uint64_t v10 = [a5 device];
  uint64_t v11 = [v10 version];

  LOBYTE(v12) = 0;
  if (v9 && a5) {
    int v12 = [v11 isAtLeastVersion:v9] ^ 1;
  }
  BOOL v13 = v12 & a6;
  if (a3) {
    BOOL v14 = v13;
  }
  else {
    BOOL v14 = 0;
  }

  return v14;
}

- (void)_handleLegacyAddAccessory:(id)a3
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    int v36 = 138543362;
    id v37 = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Handling legacy add accessory", (uint8_t *)&v36, 0xCu);
  }
  id v9 = [v4 uuidForKey:@"kAccessoryUUID"];
  if (v9)
  {
    uint64_t v10 = [v4 stringForKey:@"kAccessoryPairingPasswordKey"];
    if (v10 && ([v4 isEntitledForSPIAccess] & 1) == 0)
    {
      id v29 = (void *)MEMORY[0x1D9452090]();
      __int16 v30 = v6;
      id v31 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        __int16 v32 = HMFGetLogIdentifier();
        int v36 = 138543362;
        id v37 = v32;
        _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_ERROR, "%{public}@Client provided a setup code but does not have entitlement to use SPI", (uint8_t *)&v36, 0xCu);
      }
      BOOL v13 = [MEMORY[0x1E4F28C58] hmErrorWithCode:17];
      [v4 respondWithError:v13];
    }
    else
    {
      uint64_t v11 = [(HMDHome *)v6 accessoryBrowser];
      int v12 = [v11 unassociatedAccessories];
      BOOL v13 = objc_msgSend(v12, "hmf_firstObjectWithUUID:", v9);

      BOOL v14 = (void *)MEMORY[0x1D9452090]();
      __int16 v15 = v6;
      uint64_t v16 = HMFGetOSLogHandle();
      __int16 v17 = v16;
      if (v13)
      {
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          uint64_t v18 = HMFGetLogIdentifier();
          int v36 = 138543618;
          id v37 = v18;
          __int16 v38 = 2112;
          id v39 = v13;
          _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Found matching unassociated accessory: %@", (uint8_t *)&v36, 0x16u);
        }
        uint64_t v19 = (void *)MEMORY[0x1D9452090]();
        __int16 v20 = v15;
        id v21 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          __int16 v22 = HMFGetLogIdentifier();
          int v36 = 138543618;
          id v37 = v22;
          __int16 v38 = 2112;
          id v39 = v13;
          _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@Continuing legacy add for unassociated accessory: %@", (uint8_t *)&v36, 0x16u);
        }
        id v23 = [v4 clientIdentifier];
        [(HMDHome *)v20 _continueLegacyAddAccessoryWithUUID:v9 unassociatedAccessory:v13 setupCode:v10 appID:v23 message:v4];
      }
      else
      {
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          id v33 = HMFGetLogIdentifier();
          uint64_t v34 = [(HMDHome *)v15 accessoryBrowser];
          unint64_t v35 = [v34 unassociatedAccessories];
          int v36 = 138543874;
          id v37 = v33;
          __int16 v38 = 2112;
          id v39 = v9;
          __int16 v40 = 2112;
          id v41 = v35;
          _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_ERROR, "%{public}@Could not find unassociated accessory with UUID %@ for legacy add accessory flow. All unassociated accessories: %@", (uint8_t *)&v36, 0x20u);
        }
        id v23 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
        [v4 respondWithError:v23];
      }
    }
  }
  else
  {
    uint64_t v24 = (void *)MEMORY[0x1D9452090]();
    int v25 = v6;
    __int16 v26 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      id v27 = HMFGetLogIdentifier();
      uint64_t v28 = [v4 shortDescription];
      int v36 = 138543618;
      id v37 = v27;
      __int16 v38 = 2112;
      id v39 = v28;
      _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_ERROR, "%{public}@Legacy add accessory message is missing accessory uuid: %@", (uint8_t *)&v36, 0x16u);
    }
    uint64_t v10 = [MEMORY[0x1E4F28C58] hmErrorWithCode:20];
    [v4 respondWithError:v10];
  }
}

- (BOOL)_shouldAllowAddingAccessoryWithDescription:(id)a3 requestMessage:(id)a4 error:(id *)a5
{
  id v8 = a4;
  id v9 = (void *)MEMORY[0x1E4F2E520];
  id v10 = a3;
  uint64_t v11 = [v10 setupAccessoryPayload];
  int v12 = [v11 categoryNumber];
  BOOL v13 = [v9 categoryWithCategoryIdentifier:v12];

  BOOL v14 = [v10 category];

  if ([v14 isWiFiRouterAccessoryCategory])
  {
  }
  else
  {
    char v15 = [v13 isWiFiRouterAccessoryCategory];

    if ((v15 & 1) == 0)
    {
      BOOL v16 = 1;
      goto LABEL_6;
    }
  }
  BOOL v16 = [(HMDHome *)self __shouldAllowAddingWiFiRouterAccessoryWithRequestMessage:v8 error:a5];
LABEL_6:

  return v16;
}

- (BOOL)_shouldAllowAddingAccessoryOfCategory:(id)a3 requestMessage:(id)a4 error:(id *)a5
{
  id v8 = a4;
  if ([a3 isWiFiRouterAccessoryCategory]) {
    BOOL v9 = [(HMDHome *)self __shouldAllowAddingWiFiRouterAccessoryWithRequestMessage:v8 error:a5];
  }
  else {
    BOOL v9 = 1;
  }

  return v9;
}

- (id)_setupDescriptionFromData:(id)a3 error:(id *)a4
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = [MEMORY[0x1E4F28DC0] unarchivedObjectOfClass:objc_opt_class() fromData:v6 error:a4];
  id v8 = v7;
  if (v7)
  {
    id v27 = [v7 addRequestIdentifier];
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    BOOL v9 = [(HMDHome *)self addPendingAccessories];
    id v10 = objc_msgSend(v9, "hm_allKeys");

    id obj = v10;
    uint64_t v25 = [v10 countByEnumeratingWithState:&v29 objects:v33 count:16];
    if (v25)
    {
      uint64_t v26 = *(void *)v30;
      id v23 = v6;
      while (2)
      {
        for (uint64_t i = 0; i != v25; ++i)
        {
          if (*(void *)v30 != v26) {
            objc_enumerationMutation(obj);
          }
          int v12 = *(void **)(*((void *)&v29 + 1) + 8 * i);
          BOOL v13 = objc_msgSend(v12, "setupAccessoryPayload", v23);
          BOOL v14 = [v13 setupID];
          char v15 = [v8 setupAccessoryPayload];
          BOOL v16 = [v15 setupID];
          if ([v14 isEqual:v16]) {
            goto LABEL_15;
          }
          __int16 v17 = [v12 accessoryUUID];
          uint64_t v18 = [v8 accessoryUUID];
          if ([v17 isEqual:v18])
          {

LABEL_15:
LABEL_16:
            id v21 = [v8 cancellationReason];
            [v12 setCancellationReason:v21];

            id v20 = v12;
            id v6 = v23;
            goto LABEL_17;
          }
          uint64_t v19 = [v12 addRequestIdentifier];
          char v28 = [v19 isEqual:v27];

          if (v28) {
            goto LABEL_16;
          }
        }
        id v6 = v23;
        uint64_t v25 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
        if (v25) {
          continue;
        }
        break;
      }
    }

    id v20 = v8;
LABEL_17:
  }
  else
  {
    id v20 = 0;
  }

  return v20;
}

- (BOOL)__shouldAllowAddingWiFiRouterAccessoryWithRequestMessage:(id)a3 error:(id *)a4
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  if (![(HMDHome *)self checkForNetworkRouterSupport:4 error:a4])
  {
    id v10 = (void *)MEMORY[0x1D9452090]();
    uint64_t v11 = self;
    int v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      BOOL v13 = HMFGetLogIdentifier();
      uint64_t v14 = HMDNetworkRouterSupportAsString([(HMDHome *)v11 networkRouterSupport]);
      char v15 = (void *)v14;
      if (a4) {
        id v16 = *a4;
      }
      else {
        id v16 = 0;
      }
      int v18 = 138543874;
      uint64_t v19 = v13;
      __int16 v20 = 2112;
      uint64_t v21 = v14;
      __int16 v22 = 2112;
      id v23 = v16;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Cannot add network router to the home - networkRouterSupport %@ error %@", (uint8_t *)&v18, 0x20u);
    }
    goto LABEL_12;
  }
  id v7 = [(HMDHome *)self wiFiRouterAccessories];
  uint64_t v8 = [v7 count];

  if (!v8)
  {
    BOOL v9 = 1;
    goto LABEL_13;
  }
  if (!a4)
  {
LABEL_12:
    BOOL v9 = 0;
    goto LABEL_13;
  }
  [MEMORY[0x1E4F28C58] hmErrorWithCode:97];
  BOOL v9 = 0;
  *a4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_13:

  return v9;
}

- (void)performLocalAddAccessoryWithDescription:(id)a3 progressHandlerDelegate:(id)a4 completion:(id)a5
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = [(HMDHome *)self localCapabilitiesDataSource];
  char v12 = [v11 supportsAddingAccessory];

  if (v12)
  {
    BOOL v13 = [(HMDHome *)self currentAccessory];
    uint64_t v14 = (void *)MEMORY[0x1D9452090]();
    char v15 = self;
    id v16 = HMFGetOSLogHandle();
    __int16 v17 = v16;
    if (v13)
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        int v18 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v26 = v18;
        __int16 v27 = 2112;
        id v28 = v8;
        _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Performing local add accessory with setup description %@", buf, 0x16u);
      }
      uint64_t v19 = [MEMORY[0x1E4F654B0] internalMessageWithName:@"kAddAccessoryRequestKey" messagePayload:0];
      objc_initWeak((id *)buf, v15);
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = __86__HMDHome_performLocalAddAccessoryWithDescription_progressHandlerDelegate_completion___block_invoke;
      void v22[3] = &unk_1E6A193F8;
      objc_copyWeak(&v24, (id *)buf);
      id v23 = v10;
      [v19 setResponseHandler:v22];
      -[HMDHome _handleAddAccessoryWithDescription:progressHandlerDelegate:message:]((id *)&v15->super.super.isa, v8, v9, v19);

      objc_destroyWeak(&v24);
      objc_destroyWeak((id *)buf);
    }
    else
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v26 = v21;
        __int16 v27 = 2112;
        id v28 = v8;
        _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_ERROR, "%{public}@Will not perform local add accessory with setup description %@ without current accessory present", buf, 0x16u);
      }
      if (!v10) {
        goto LABEL_13;
      }
      uint64_t v19 = [MEMORY[0x1E4F28C58] hmPrivateErrorWithCode:2020];
      (*((void (**)(id, void *))v10 + 2))(v10, v19);
    }

LABEL_13:
    goto LABEL_14;
  }
  if (v10)
  {
    __int16 v20 = [MEMORY[0x1E4F28C58] hmErrorWithCode:48];
    (*((void (**)(id, void *))v10 + 2))(v10, v20);
  }
LABEL_14:
}

void __86__HMDHome_performLocalAddAccessoryWithDescription_progressHandlerDelegate_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v8 = (void *)MEMORY[0x1D9452090]();
  id v9 = WeakRetained;
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v11 = (id)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      char v12 = [NSString stringWithFormat:@"failed with error: %@", v5];
    }
    else
    {
      char v12 = @"completed";
    }
    *(_DWORD *)buf = 138543618;
    id v15 = v11;
    __int16 v16 = 2112;
    __int16 v17 = v12;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Perform local add accessory %@", buf, 0x16u);
    if (v5) {
  }
    }
  uint64_t v13 = *(void *)(a1 + 32);
  if (v13) {
    (*(void (**)(uint64_t, id))(v13 + 16))(v13, v5);
  }
}

- (void)_handleAddAccessory:(id)a3
{
  id v10 = a3;
  id v4 = [(HMDHome *)self localCapabilitiesDataSource];
  char v5 = [v4 supportsAddingAccessory];

  if (v5)
  {
    id v6 = [v10 dataForKey:@"kAccessoryDescriptionDataKey"];

    if (v6) {
      [(HMDHome *)self _handleAddAccessoryWithDescription:v10];
    }
    else {
      [(HMDHome *)self _handleLegacyAddAccessory:v10];
    }
  }
  else
  {
    id v7 = [v10 responseHandler];

    if (v7)
    {
      id v8 = [v10 responseHandler];
      id v9 = [MEMORY[0x1E4F28C58] hmErrorWithCode:48];
      ((void (**)(void, void *, void))v8)[2](v8, v9, 0);
    }
  }
}

- (BOOL)_removeAccessory:(id)a3
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  accessories = self->_accessories;
  id v6 = [v4 uuid];
  id v7 = [(NSMutableDictionary *)accessories objectForKey:v6];

  if (v7)
  {
    id v8 = self->_accessories;
    id v9 = [v4 uuid];
    [(NSMutableDictionary *)v8 removeObjectForKey:v9];

    id v10 = (void *)MEMORY[0x1D9452090]();
    id v11 = self;
    HMFGetOSLogHandle();
    char v12 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v13 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v14 = [v4 uuid];
      int v19 = 138543618;
      id v20 = v13;
      __int16 v21 = 2112;
      __int16 v22 = v14;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Successfully removed accessory from home's list: %@", (uint8_t *)&v19, 0x16u);
    }
  }
  else
  {
    id v10 = (void *)MEMORY[0x1D9452090]();
    id v15 = self;
    HMFGetOSLogHandle();
    char v12 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      id v16 = (id)objc_claimAutoreleasedReturnValue();
      __int16 v17 = [v4 uuid];
      int v19 = 138543618;
      id v20 = v16;
      __int16 v21 = 2112;
      __int16 v22 = v17;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_ERROR, "%{public}@Unable to remove accessory from home's list: %@", (uint8_t *)&v19, 0x16u);
    }
  }

  os_unfair_recursive_lock_unlock();

  return v7 != 0;
}

- (void)removeAccessory:(id)a3
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (v4 && [(HMDHome *)self _removeAccessory:v4])
  {
    char v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = self;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v25 = v8;
      __int16 v26 = 2112;
      id v27 = v4;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Removed accessory: %@", buf, 0x16u);
    }
    if ([v4 isPrimary])
    {
      id v9 = v4;
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();
      if (isKindOfClass) {
        id v11 = v9;
      }
      else {
        id v11 = 0;
      }
      id v12 = v11;

      id v13 = v9;
      objc_opt_class();
      char v14 = objc_opt_isKindOfClass();
      if (v14) {
        id v15 = v13;
      }
      else {
        id v15 = 0;
      }
      id v16 = v15;

      if (isKindOfClass)
      {
        workQueue = v6->_workQueue;
        v22[0] = MEMORY[0x1E4F143A8];
        v22[1] = 3221225472;
        v22[2] = __27__HMDHome_removeAccessory___block_invoke;
        void v22[3] = &unk_1E6A197C8;
        void v22[4] = v6;
        uint64_t v18 = &v23;
        id v23 = v13;
        int v19 = v22;
      }
      else
      {
        if ((v14 & 1) == 0)
        {
LABEL_17:

          goto LABEL_18;
        }
        workQueue = v6->_workQueue;
        v20[0] = MEMORY[0x1E4F143A8];
        v20[1] = 3221225472;
        id v20[2] = __27__HMDHome_removeAccessory___block_invoke_2;
        v20[3] = &unk_1E6A197C8;
        void v20[4] = v6;
        uint64_t v18 = &v21;
        id v21 = v13;
        int v19 = v20;
      }
      dispatch_async(workQueue, v19);

      goto LABEL_17;
    }
  }
LABEL_18:
}

void __27__HMDHome_removeAccessory___block_invoke(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v2 = [MEMORY[0x1E4F28C58] hmErrorWithCode:23, @"Retrieval cancelled, accessory removed", 0, 0 description reason suggestion];
  id v3 = *(void **)(a1 + 32);
  id v4 = [*(id *)(a1 + 40) identifier];
  [v3 _notifyRetrievalError:v2 accessoryServer:v4 linkType:0 accessoryOperationBlock:0];

  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  char v5 = objc_msgSend(*(id *)(a1 + 40), "services", 0);
  id v6 = (void *)[v5 copy];

  uint64_t v7 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v12;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(v6);
        }
        [*(id *)(a1 + 32) _removeService:*(void *)(*((void *)&v11 + 1) + 8 * v10++)];
      }
      while (v8 != v10);
      uint64_t v8 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v8);
  }
}

void __27__HMDHome_removeAccessory___block_invoke_2(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) remoteEventRouterClientController];
  id v2 = [*(id *)(a1 + 40) uuid];
  [v3 removeResidentRouterForAccessoryUUID:v2];
}

- (void)_addAccessories:(id)a3
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __27__HMDHome__addAccessories___block_invoke;
  v3[3] = &unk_1E6A175A8;
  void v3[4] = self;
  objc_msgSend(a3, "na_each:", v3);
}

uint64_t __27__HMDHome__addAccessories___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addAccessory:a2];
}

- (BOOL)_addAccessory:(id)a3
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  accessories = self->_accessories;
  id v6 = [v4 uuid];
  uint64_t v7 = [(NSMutableDictionary *)accessories objectForKey:v6];

  if (!v7)
  {
    uint64_t v8 = (void *)MEMORY[0x1D9452090]();
    uint64_t v9 = self;
    HMFGetOSLogHandle();
    uint64_t v10 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v11 = (id)objc_claimAutoreleasedReturnValue();
      long long v12 = [v4 uuid];
      int v16 = 138543618;
      id v17 = v11;
      __int16 v18 = 2112;
      int v19 = v12;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Added accessory to the home's list: %@", (uint8_t *)&v16, 0x16u);
    }
    long long v13 = self->_accessories;
    long long v14 = [v4 uuid];
    [(NSMutableDictionary *)v13 setObject:v4 forKey:v14];
  }
  os_unfair_recursive_lock_unlock();

  return v7 == 0;
}

- (void)addAccessory:(id)a3
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  char v5 = v4;
  if (!v4)
  {
    uint64_t v7 = (void *)MEMORY[0x1D9452090]();
    uint64_t v8 = self;
    uint64_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v25 = v10;
      id v11 = "%{public}@Attempting to add a nil accessory";
      long long v12 = v9;
      uint32_t v13 = 12;
      goto LABEL_8;
    }
LABEL_9:

    goto LABEL_11;
  }
  id v6 = [v4 uuid];

  if (v6)
  {
    if (![(HMDHome *)self _addAccessory:v5])
    {
      uint64_t v7 = (void *)MEMORY[0x1D9452090]();
      uint64_t v8 = self;
      uint64_t v9 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v25 = v10;
        __int16 v26 = 2112;
        id v27 = v5;
        id v11 = "%{public}@Attempted to add an accessory that is already present: %@";
        long long v12 = v9;
        uint32_t v13 = 22;
LABEL_8:
        _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_ERROR, v11, buf, v13);

        goto LABEL_9;
      }
      goto LABEL_9;
    }
  }
  else
  {
    long long v14 = [v5 uuid];

    if (!v14)
    {
      id v15 = (void *)MEMORY[0x1D9452090]();
      int v16 = self;
      id v17 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
      {
        __int16 v18 = HMFGetLogIdentifier();
        int v19 = [v5 shortDescription];
        *(_DWORD *)buf = 138543618;
        uint64_t v25 = v18;
        __int16 v26 = 2112;
        id v27 = v19;
        _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_FAULT, "%{public}@Submitting ABC event for failure: Attempted to add an accessory that does not have an uuid: %@", buf, 0x16u);
      }
      uint64_t v20 = [HMDAssertionLogEvent alloc];
      id v21 = [v5 shortDescription];
      __int16 v22 = [(HMDAssertionLogEvent *)v20 initWithReason:@"Attempted to add an accessory that does not have an uuid: %@", v21];

      id v23 = +[HMDMetricsManager sharedLogEventSubmitter];
      [v23 submitLogEvent:v22];
    }
  }
LABEL_11:
}

- (unint64_t)assistantAccessCapableAccessoryCount
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v2 = [(HMDHome *)self accessories];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    unint64_t v5 = 0;
    uint64_t v6 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v2);
        }
        v5 += +[HMDAssistantAccessControl isAccessorySupported:*(void *)(*((void *)&v9 + 1) + 8 * i)];
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
  else
  {
    unint64_t v5 = 0;
  }

  return v5;
}

- (BOOL)shouldEncodeLegacyLocationServiceSettingForSettingsParentUUID:(id)a3
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  unint64_t v5 = [(HMDHome *)self mediaSystemWithUUID:v4];
  uint64_t v6 = v5;
  if (v5)
  {
    LODWORD(v7) = [v5 componentsSupportsHomeLevelLocationServiceSetting] ^ 1;
  }
  else
  {
    uint64_t v8 = [(HMDHome *)self accessoryWithUUID:v4];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      long long v9 = v8;
    }
    else {
      long long v9 = 0;
    }
    id v10 = v9;

    if (v10)
    {
      LODWORD(v7) = [v10 supportsHomeLevelLocationServiceSetting] ^ 1;
    }
    else
    {
      uint64_t v7 = (void *)MEMORY[0x1D9452090]();
      long long v11 = self;
      long long v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        uint32_t v13 = HMFGetLogIdentifier();
        int v15 = 138543618;
        int v16 = v13;
        __int16 v17 = 2112;
        id v18 = v4;
        _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to filter legacy location service setting due to no parent found with uuid: %@", (uint8_t *)&v15, 0x16u);
      }
      LOBYTE(v7) = 0;
    }
  }
  return (char)v7;
}

- (id)destinationControllerWithCommittedDestinationIdentifier:(id)a3
{
  id v4 = a3;
  unint64_t v5 = [(HMDHome *)self destinationControllers];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __67__HMDHome_destinationControllerWithCommittedDestinationIdentifier___block_invoke;
  void v9[3] = &unk_1E6A06B58;
  id v10 = v4;
  id v6 = v4;
  uint64_t v7 = objc_msgSend(v5, "na_firstObjectPassingTest:", v9);

  return v7;
}

uint64_t __67__HMDHome_destinationControllerWithCommittedDestinationIdentifier___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 committedData];
  id v4 = [v3 destinationIdentifier];
  uint64_t v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v5;
}

- (id)destinationControllerWithDestinationIdentifier:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self destinationControllers];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __58__HMDHome_destinationControllerWithDestinationIdentifier___block_invoke;
  void v9[3] = &unk_1E6A06B58;
  id v10 = v4;
  id v6 = v4;
  uint64_t v7 = objc_msgSend(v5, "na_firstObjectPassingTest:", v9);

  return v7;
}

uint64_t __58__HMDHome_destinationControllerWithDestinationIdentifier___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 data];
  id v4 = [v3 destinationIdentifier];
  uint64_t v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v5;
}

- (id)destinationControllerWithIdentifier:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self destinationControllers];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __47__HMDHome_destinationControllerWithIdentifier___block_invoke;
  void v9[3] = &unk_1E6A06B58;
  id v10 = v4;
  id v6 = v4;
  uint64_t v7 = objc_msgSend(v5, "na_firstObjectPassingTest:", v9);

  return v7;
}

uint64_t __47__HMDHome_destinationControllerWithIdentifier___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 identifier];
  uint64_t v4 = objc_msgSend(v3, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v4;
}

- (id)destinationControllers
{
  id v2 = [(HMDHome *)self appleMediaAccessories];
  uint64_t v3 = objc_msgSend(v2, "na_map:", &__block_literal_global_1134);

  return v3;
}

uint64_t __33__HMDHome_destinationControllers__block_invoke(uint64_t a1, void *a2)
{
  return [a2 audioDestinationController];
}

- (int64_t)destinationTypeForDestinationWithIdentifier:(id)a3
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  [(HMDHome *)self appleMediaAccessories];
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = [v5 countByEnumeratingWithState:&v33 objects:v38 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v34;
    int64_t v9 = 3;
    while (2)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v34 != v8) {
          objc_enumerationMutation(v5);
        }
        long long v11 = *(void **)(*((void *)&v33 + 1) + 8 * i);
        long long v12 = [v11 uuid];
        char v13 = objc_msgSend(v12, "hmf_isEqualToUUID:", v4);

        if (v13)
        {
          id v17 = v5;
          goto LABEL_26;
        }
        uint64_t v14 = [v11 audioDestination];
        int v15 = [v14 uniqueIdentifier];
        char v16 = objc_msgSend(v15, "hmf_isEqualToUUID:", v4);

        if (v16)
        {
          id v17 = v5;
          int64_t v9 = 1;
          goto LABEL_26;
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v33 objects:v38 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }

  [(HMDHome *)self mediaSystems];
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v17 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v18 = [v17 countByEnumeratingWithState:&v29 objects:v37 count:16];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = *(void *)v30;
    while (2)
    {
      for (uint64_t j = 0; j != v19; ++j)
      {
        if (*(void *)v30 != v20) {
          objc_enumerationMutation(v17);
        }
        __int16 v22 = *(void **)(*((void *)&v29 + 1) + 8 * j);
        id v23 = objc_msgSend(v22, "uuid", (void)v29);
        char v24 = objc_msgSend(v23, "hmf_isEqualToUUID:", v4);

        if (v24)
        {
          int64_t v9 = 4;
          goto LABEL_25;
        }
        uint64_t v25 = [v22 audioDestination];
        __int16 v26 = [v25 uniqueIdentifier];
        char v27 = objc_msgSend(v26, "hmf_isEqualToUUID:", v4);

        if (v27)
        {
          int64_t v9 = 2;
          goto LABEL_25;
        }
      }
      uint64_t v19 = [v17 countByEnumeratingWithState:&v29 objects:v37 count:16];
      int64_t v9 = 0;
      if (v19) {
        continue;
      }
      break;
    }
  }
  else
  {
    int64_t v9 = 0;
  }
LABEL_25:

LABEL_26:
  return v9;
}

- (id)mediaDestinationsInRoom:(id)a3
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHome *)self appleMediaAccessories];
  uint64_t v6 = [(HMDHome *)self mediaSystems];
  long long v31 = v5;
  long long v33 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v6, "count") + objc_msgSend(v5, "count"));
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id v7 = v6;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v38 objects:v43 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v39;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v39 != v10) {
          objc_enumerationMutation(v7);
        }
        long long v12 = *(void **)(*((void *)&v38 + 1) + 8 * i);
        char v13 = [v12 audioDestination];
        if (v13)
        {
          if (!v4) {
            goto LABEL_9;
          }
          uint64_t v14 = [v12 room];
          int v15 = [v14 uuid];
          char v16 = [v4 uuid];
          int v17 = objc_msgSend(v15, "hmf_isEqualToUUID:", v16);

          if (v17) {
LABEL_9:
          }
            [v33 addObject:v13];
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v38 objects:v43 count:16];
    }
    while (v9);
  }
  long long v32 = v7;

  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id v18 = v31;
  uint64_t v19 = [v18 countByEnumeratingWithState:&v34 objects:v42 count:16];
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = *(void *)v35;
    do
    {
      for (uint64_t j = 0; j != v20; ++j)
      {
        if (*(void *)v35 != v21) {
          objc_enumerationMutation(v18);
        }
        id v23 = *(void **)(*((void *)&v34 + 1) + 8 * j);
        char v24 = [v23 audioDestination];
        if (v24)
        {
          if (!v4)
          {
            if (_mediaSystemsContainsAccessory(v32, v23)) {
              goto LABEL_25;
            }
LABEL_23:
            [v33 addObject:v24];
            goto LABEL_25;
          }
          uint64_t v25 = [v23 room];
          __int16 v26 = [v25 uuid];
          char v27 = [v4 uuid];
          if (objc_msgSend(v26, "hmf_isEqualToUUID:", v27))
          {
            char v28 = _mediaSystemsContainsAccessory(v32, v23);

            if ((v28 & 1) == 0) {
              goto LABEL_23;
            }
          }
          else
          {
          }
        }
LABEL_25:
      }
      uint64_t v20 = [v18 countByEnumeratingWithState:&v34 objects:v42 count:16];
    }
    while (v20);
  }

  long long v29 = (void *)[v33 copy];
  return v29;
}

- (NSArray)mediaDestinations
{
  return (NSArray *)[(HMDHome *)self mediaDestinationsInRoom:0];
}

- (id)mediaDestinationManagersWithSupportedOptions:(unint64_t)a3
{
  id v5 = [(HMDHome *)self appleMediaAccessories];
  uint64_t v6 = [(HMDHome *)self mediaSystems];
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  void v15[2] = __56__HMDHome_mediaDestinationManagersWithSupportedOptions___block_invoke;
  v15[3] = &__block_descriptor_40_e54____HMDMediaDestinationManager__16__0__HMDMediaSystem_8l;
  void v15[4] = a3;
  id v7 = objc_msgSend(v6, "na_map:", v15);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  void v12[2] = __56__HMDHome_mediaDestinationManagersWithSupportedOptions___block_invoke_2;
  v12[3] = &unk_1E6A06B10;
  id v13 = v6;
  unint64_t v14 = a3;
  id v8 = v6;
  uint64_t v9 = objc_msgSend(v5, "na_map:", v12);
  uint64_t v10 = [v9 arrayByAddingObjectsFromArray:v7];

  return v10;
}

id __56__HMDHome_mediaDestinationManagersWithSupportedOptions___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 audioDestinationManager];
  id v4 = [v3 destination];
  LODWORD(a1) = [v4 containsSupportedOptions:*(void *)(a1 + 32)];

  if (a1) {
    id v5 = v3;
  }
  else {
    id v5 = 0;
  }

  return v5;
}

id __56__HMDHome_mediaDestinationManagersWithSupportedOptions___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 audioDestinationManager];
  id v5 = [v4 destination];
  if ([v5 containsSupportedOptions:*(void *)(a1 + 40)])
  {
    char v6 = _mediaSystemsContainsAccessory(*(void **)(a1 + 32), v3);

    if ((v6 & 1) == 0)
    {
      id v7 = v4;
      goto LABEL_6;
    }
  }
  else
  {
  }
  id v7 = 0;
LABEL_6:

  return v7;
}

- (id)mediaDestinationManagersWithHomeTheaterSupportedOptions
{
  id v3 = [(HMDHome *)self appleMediaAccessories];
  id v4 = [(HMDHome *)self mediaSystems];
  id v5 = objc_msgSend(v4, "na_map:", &__block_literal_global_1129);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = __66__HMDHome_mediaDestinationManagersWithHomeTheaterSupportedOptions__block_invoke_2;
  void v10[3] = &unk_1E6A06AC8;
  id v11 = v4;
  id v6 = v4;
  id v7 = objc_msgSend(v3, "na_map:", v10);
  id v8 = [v7 arrayByAddingObjectsFromArray:v5];

  return v8;
}

id __66__HMDHome_mediaDestinationManagersWithHomeTheaterSupportedOptions__block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 audioDestinationManager];
  id v5 = [v4 destination];
  if ([v5 containsHomeTheaterSupportedOptions])
  {
    char v6 = _mediaSystemsContainsAccessory(*(void **)(a1 + 32), v3);

    if ((v6 & 1) == 0)
    {
      id v7 = v4;
      goto LABEL_6;
    }
  }
  else
  {
  }
  id v7 = 0;
LABEL_6:

  return v7;
}

id __66__HMDHome_mediaDestinationManagersWithHomeTheaterSupportedOptions__block_invoke(uint64_t a1, void *a2)
{
  id v2 = [a2 audioDestinationManager];
  id v3 = [v2 destination];
  int v4 = [v3 containsHomeTheaterSupportedOptions];

  if (v4) {
    id v5 = v2;
  }
  else {
    id v5 = 0;
  }

  return v5;
}

- (id)destinationManagerPassingTest:(id)a3
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int v4 = (uint64_t (**)(id, void *))a3;
  [(HMDHome *)self appleMediaAccessories];
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = [v5 countByEnumeratingWithState:&v21 objects:v26 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v22;
    while (2)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v22 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = [*(id *)(*((void *)&v21 + 1) + 8 * i) audioDestinationManager];
        if (v10 && (v4[2](v4, v10) & 1) != 0)
        {
          id v11 = v5;
          goto LABEL_22;
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v21 objects:v26 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }

  [(HMDHome *)self mediaSystems];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v12 = [v11 countByEnumeratingWithState:&v17 objects:v25 count:16];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v18;
LABEL_12:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(void *)v18 != v14) {
        objc_enumerationMutation(v11);
      }
      uint64_t v10 = objc_msgSend(*(id *)(*((void *)&v17 + 1) + 8 * v15), "audioDestinationManager", (void)v17);
      if (v10)
      {
        if (v4[2](v4, v10)) {
          break;
        }
      }

      if (v13 == ++v15)
      {
        uint64_t v13 = [v11 countByEnumeratingWithState:&v17 objects:v25 count:16];
        if (v13) {
          goto LABEL_12;
        }
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    uint64_t v10 = 0;
  }

LABEL_22:
  return v10;
}

- (id)destinationManagerWithDestinationIdentifier:(id)a3
{
  id v4 = a3;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = __55__HMDHome_destinationManagerWithDestinationIdentifier___block_invoke;
  void v8[3] = &unk_1E6A0E450;
  id v9 = v4;
  id v5 = v4;
  uint64_t v6 = [(HMDHome *)self destinationManagerPassingTest:v8];

  return v6;
}

uint64_t __55__HMDHome_destinationManagerWithDestinationIdentifier___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 destination];
  id v4 = [v3 uniqueIdentifier];
  uint64_t v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v5;
}

- (id)destinationManagerWithParentIdentifier:(id)a3
{
  id v4 = a3;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = __50__HMDHome_destinationManagerWithParentIdentifier___block_invoke;
  void v8[3] = &unk_1E6A0E450;
  id v9 = v4;
  id v5 = v4;
  uint64_t v6 = [(HMDHome *)self destinationManagerPassingTest:v8];

  return v6;
}

uint64_t __50__HMDHome_destinationManagerWithParentIdentifier___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 destination];
  id v4 = [v3 parentIdentifier];
  uint64_t v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v5;
}

- (id)rootDestinationManagerWithDescendantDestinationIdentifier:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self mediaSystems];
  uint64_t v10 = MEMORY[0x1E4F143A8];
  uint64_t v11 = 3221225472;
  uint64_t v12 = __69__HMDHome_rootDestinationManagerWithDescendantDestinationIdentifier___block_invoke;
  uint64_t v13 = &unk_1E6A086C0;
  uint64_t v14 = self;
  id v15 = v4;
  id v6 = v4;
  uint64_t v7 = objc_msgSend(v5, "na_firstObjectPassingTest:", &v10);
  uint64_t v8 = objc_msgSend(v7, "audioDestinationManager", v10, v11, v12, v13, v14);

  return v8;
}

uint64_t __69__HMDHome_rootDestinationManagerWithDescendantDestinationIdentifier___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 components];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __69__HMDHome_rootDestinationManagerWithDescendantDestinationIdentifier___block_invoke_2;
  v7[3] = &unk_1E6A06A80;
  id v4 = *(void **)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v4;
  uint64_t v5 = objc_msgSend(v3, "na_any:", v7);

  return v5;
}

uint64_t __69__HMDHome_rootDestinationManagerWithDescendantDestinationIdentifier___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [v3 accessory];
  uint64_t v5 = [v3 accessory];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v6 = v5;
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;

  if (v7)
  {
    id v8 = *(void **)(a1 + 40);
    id v9 = [v7 audioDestination];
    uint64_t v10 = [v9 uniqueIdentifier];
    uint64_t v11 = objc_msgSend(v8, "hmf_isEqualToUUID:", v10);
  }
  else
  {
    uint64_t v12 = (void *)MEMORY[0x1D9452090]();
    id v13 = *(id *)(a1 + 32);
    uint64_t v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      id v15 = HMFGetLogIdentifier();
      int v17 = 138543874;
      long long v18 = v15;
      __int16 v19 = 2112;
      id v20 = v3;
      __int16 v21 = 2112;
      long long v22 = v4;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_ERROR, "%{public}@Failed to apple media accessory from component: %@ accessory: %@", (uint8_t *)&v17, 0x20u);
    }
    uint64_t v11 = 0;
  }

  return v11;
}

- (id)destinationManagersWithDestinationIdentifiers:(id)a3 supportedOptions:(unint64_t)a4
{
  id v6 = a3;
  id v7 = [(HMDHome *)self mediaDestinationManagersWithSupportedOptions:a4];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __74__HMDHome_destinationManagersWithDestinationIdentifiers_supportedOptions___block_invoke;
  v11[3] = &unk_1E6A0E450;
  id v12 = v6;
  id v8 = v6;
  id v9 = objc_msgSend(v7, "na_filter:", v11);

  return v9;
}

uint64_t __74__HMDHome_destinationManagersWithDestinationIdentifiers_supportedOptions___block_invoke(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 identifier];
  uint64_t v4 = [v2 containsObject:v3];

  return v4;
}

- (id)targetAccessoriesWithDestinationIdentifiers:(id)a3
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self appleMediaAccessories];
  id v6 = [(HMDHome *)self mediaSystems];
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  void v23[2] = __55__HMDHome_targetAccessoriesWithDestinationIdentifiers___block_invoke;
  void v23[3] = &unk_1E6A06A30;
  id v7 = v4;
  id v24 = v7;
  id v8 = objc_msgSend(v6, "na_map:", v23);
  uint64_t v18 = MEMORY[0x1E4F143A8];
  uint64_t v19 = 3221225472;
  id v20 = __55__HMDHome_targetAccessoriesWithDestinationIdentifiers___block_invoke_2;
  __int16 v21 = &unk_1E6A06A58;
  id v9 = v7;
  id v22 = v9;
  uint64_t v10 = objc_msgSend(v5, "na_map:", &v18);
  uint64_t v11 = objc_msgSend(v8, "arrayByAddingObjectsFromArray:", v10, v18, v19, v20, v21);
  uint64_t v12 = [v11 count];
  if (v12 != [v9 count])
  {
    id v13 = (void *)MEMORY[0x1D9452090]();
    uint64_t v14 = self;
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      char v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      __int16 v26 = v16;
      __int16 v27 = 2112;
      id v28 = v9;
      __int16 v29 = 2112;
      long long v30 = v11;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_ERROR, "%{public}@Failed to get target accessories for destination identifiers: %@ targets: %@", buf, 0x20u);
    }

    uint64_t v11 = (void *)MEMORY[0x1E4F1CBF0];
  }

  return v11;
}

id __55__HMDHome_targetAccessoriesWithDestinationIdentifiers___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 audioDestinationManager];
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = [v4 identifier];
  LODWORD(v5) = [v5 containsObject:v6];

  if (v5)
  {
    id v7 = [v3 targetAccessory];
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

id __55__HMDHome_targetAccessoriesWithDestinationIdentifiers___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 audioDestinationManager];
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = [v4 identifier];
  LODWORD(v5) = [v5 containsObject:v6];

  if (v5) {
    id v7 = v3;
  }
  else {
    id v7 = 0;
  }

  return v7;
}

- (id)audioDestinationControllerDataForDestination:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self appleMediaAccessories];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = __56__HMDHome_audioDestinationControllerDataForDestination___block_invoke;
  void v10[3] = &unk_1E6A18D10;
  id v11 = v4;
  id v6 = v4;
  id v7 = objc_msgSend(v5, "na_firstObjectPassingTest:", v10);

  id v8 = [v7 audioDestinationControllerData];

  return v8;
}

uint64_t __56__HMDHome_audioDestinationControllerDataForDestination___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 audioDestinationControllerData];
  id v4 = [v3 destinationIdentifier];
  uint64_t v5 = [*(id *)(a1 + 32) uniqueIdentifier];
  uint64_t v6 = objc_msgSend(v4, "hmf_isEqualToUUID:", v5);

  return v6;
}

- (id)mediaSystemForAppleMediaAccessory:(id)a3
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v5 = [(HMDHome *)self mediaSystems];
  id v6 = (id)[v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v12;
    while (2)
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v5);
        }
        id v9 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        if (_mediaSystemContainsAccessory(v9, v4))
        {
          id v6 = v9;
          goto LABEL_11;
        }
      }
      id v6 = (id)[v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v6;
}

- (NSArray)appleMediaAccessories
{
  id v2 = [(HMDHome *)self accessories];
  id v3 = objc_msgSend(v2, "na_map:", &__block_literal_global_1122);

  return (NSArray *)v3;
}

id __32__HMDHome_appleMediaAccessories__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;

  return v4;
}

- (void)_setAccessories:(id)a3
{
  id v7 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if (v7)
  {
    id v4 = objc_msgSend(v7, "na_dictionaryWithKeyGenerator:", &__block_literal_global_1120);
    uint64_t v5 = (NSMutableDictionary *)[v4 mutableCopy];
    accessories = self->_accessories;
    self->_accessories = v5;
  }
  else
  {
    [(NSMutableDictionary *)self->_accessories removeAllObjects];
  }
  os_unfair_recursive_lock_unlock();
}

uint64_t __27__HMDHome__setAccessories___block_invoke(uint64_t a1, void *a2)
{
  return [a2 uuid];
}

- (void)setAccessories:(id)a3
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  [(HMDHome *)self _setAccessories:v4];
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v5 = v4;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v22 objects:v27 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v23;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v23 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(id *)(*((void *)&v22 + 1) + 8 * v9);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          long long v11 = v10;
        }
        else {
          long long v11 = 0;
        }
        id v12 = v11;

        if (v12)
        {
          long long v20 = 0u;
          long long v21 = 0u;
          long long v18 = 0u;
          long long v19 = 0u;
          long long v13 = [(HMDHome *)self serviceGroups];
          uint64_t v14 = [v13 countByEnumeratingWithState:&v18 objects:v26 count:16];
          if (v14)
          {
            uint64_t v15 = v14;
            uint64_t v16 = *(void *)v19;
            do
            {
              uint64_t v17 = 0;
              do
              {
                if (*(void *)v19 != v16) {
                  objc_enumerationMutation(v13);
                }
                [*(id *)(*((void *)&v18 + 1) + 8 * v17++) fixupServicesForReplacementAccessory:v12];
              }
              while (v15 != v17);
              uint64_t v15 = [v13 countByEnumeratingWithState:&v18 objects:v26 count:16];
            }
            while (v15);
          }
        }
        ++v9;
      }
      while (v9 != v7);
      uint64_t v7 = [v5 countByEnumeratingWithState:&v22 objects:v27 count:16];
    }
    while (v7);
  }
}

- (void)_handleRemoveZoneModel:(id)a3 message:(id)a4
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v6 uuid];
  uint64_t v9 = [(HMDHome *)self zoneWithUUID:v8];
  id v10 = v9;
  if (v9)
  {
    long long v11 = [v9 name];
    id v12 = [(HMDHome *)self removeName:v11];

    long long v13 = [(HMDHome *)self zones];
    [v13 removeObject:v10];

    uint64_t v14 = [v7 transactionResult];
    [v14 markChanged];
    uint64_t v15 = (void *)MEMORY[0x1D9452090]([v14 markSaveToAssistant]);
    uint64_t v16 = self;
    uint64_t v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      long long v18 = HMFGetLogIdentifier();
      long long v19 = [v10 name];
      int v20 = 138543618;
      long long v21 = v18;
      __int16 v22 = 2112;
      long long v23 = v19;
      _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Remove zone: %@", (uint8_t *)&v20, 0x16u);
    }
  }
  else
  {
    uint64_t v14 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    [v7 respondWithError:v14];
  }
}

- (void)_handleRemoveZone:(id)a3
{
  id v4 = a3;
  id v5 = [v4 uuidForKey:@"kZoneUUID"];
  id v6 = [(HMDHome *)self zoneWithUUID:v5];
  if (v6)
  {
    id v7 = [HMDZoneModel alloc];
    uint64_t v8 = [(HMDHome *)self uuid];
    uint64_t v9 = [(HMDBackingStoreModelObject *)v7 initWithObjectChangeType:3 uuid:v5 parentUUID:v8];

    id v10 = [(HMDHome *)self backingStore];
    long long v11 = [v4 name];
    id v12 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    long long v13 = [v10 transaction:v11 options:v12];

    [v13 add:v9];
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    void v14[2] = __29__HMDHome__handleRemoveZone___block_invoke;
    v14[3] = &unk_1E6A197F0;
    id v15 = v4;
    [v13 run:v14];
  }
  else
  {
    uint64_t v9 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    [v4 respondWithError:v9];
  }
}

uint64_t __29__HMDHome__handleRemoveZone___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) respondWithPayload:0 error:a2];
}

- (void)_handleAddZoneModel:(id)a3 message:(id)a4
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v6 name];
  uint64_t v9 = objc_msgSend(v8, "hm_truncatedNameString");

  uint64_t v10 = [v6 uuid];
  long long v11 = (void *)v10;
  if (v9 && v10)
  {
    id v12 = [[HMDZone alloc] initWithName:v9 uuid:v10 home:self];
    long long v13 = [(HMDHome *)self zones];
    [v13 addObject:v12];

    uint64_t v14 = [(HMDHome *)self msgDispatcher];
    id v15 = [(HMDHome *)self workQueue];
    [(HMDZone *)v12 configure:v14 queue:v15];

    [(HMDZone *)v12 updateZoneWithModel:v6 message:v7 error:0];
    uint64_t v16 = [v7 transactionResult];
    [v16 markChanged];
    uint64_t v17 = [(HMDZone *)v12 roomUUIDs];
    uint64_t v18 = [v17 count];

    if (v18) {
      [v16 markSaveToAssistant];
    }
    [v7 respondWithPayload:0];
  }
  else
  {
    long long v19 = (void *)MEMORY[0x1D9452090]();
    int v20 = self;
    long long v21 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      __int16 v22 = HMFGetLogIdentifier();
      int v23 = 138543618;
      uint64_t v24 = v22;
      __int16 v25 = 2112;
      __int16 v26 = v9;
      _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_ERROR, "%{public}@Can't add zone %@; invalid parameter",
        (uint8_t *)&v23,
        0x16u);
    }
    id v12 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    [v7 respondWithError:v12];
  }
}

- (void)_handleAddZone:(id)a3
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 stringForKey:@"kZoneName"];
  uint64_t v6 = [v4 uuidForKey:@"kNewObjectUUIDKey"];
  id v7 = (void *)v6;
  if (v5 && v6)
  {
    unint64_t v8 = HMMaxLengthForNaming();
    if ([v5 length] > v8)
    {
      uint64_t v9 = (void *)MEMORY[0x1D9452090]();
      uint64_t v10 = self;
      long long v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        id v12 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        uint64_t v42 = v12;
        _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", buf, 0xCu);
      }
      long long v13 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v14 = 46;
      goto LABEL_8;
    }
    id v15 = [(HMDHome *)self zoneWithName:v5];
    if (v15)
    {
      uint64_t v16 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v17 = 1;
    }
    else
    {
      uint64_t v18 = [(HMDHome *)self zones];
      unint64_t v19 = [v18 count];
      unint64_t v20 = maximumZonesPerHome;

      if (v19 < v20)
      {
        long long v21 = [(HMDHome *)self addName:v5];
        if (!v21)
        {
          long long v30 = [HMDZoneModel alloc];
          uint64_t v31 = [(HMDHome *)self uuid];
          long long v32 = [(HMDBackingStoreModelObject *)v30 initWithObjectChangeType:1 uuid:v7 parentUUID:v31];

          [(HMDZoneModel *)v32 setName:v5];
          long long v33 = [(HMDHome *)self backingStore];
          long long v34 = [v4 name];
          long long v35 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
          long long v36 = [v33 transaction:v34 options:v35];

          [v36 add:v32];
          v37[0] = MEMORY[0x1E4F143A8];
          v37[1] = 3221225472;
          void v37[2] = __26__HMDHome__handleAddZone___block_invoke;
          v37[3] = &unk_1E6A18BA0;
          id v38 = v4;
          id v39 = v7;
          id v40 = v5;
          [v36 run:v37];

          goto LABEL_21;
        }
        __int16 v22 = (void *)MEMORY[0x1D9452090]();
        int v23 = self;
        uint64_t v24 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          __int16 v25 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          uint64_t v42 = v25;
          __int16 v43 = 2112;
          uint64_t v44 = v5;
          _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_ERROR, "%{public}@Can't add zone %@; invalid parameter",
            buf,
            0x16u);
        }
LABEL_20:
        [v4 respondWithError:v21];
LABEL_21:

        goto LABEL_22;
      }
      __int16 v26 = (void *)MEMORY[0x1D9452090]();
      uint64_t v27 = self;
      uint64_t v28 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        __int16 v29 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v42 = v29;
        __int16 v43 = 2112;
        uint64_t v44 = v5;
        _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_ERROR, "%{public}@Can't add zone %@; already at maximum zones for home",
          buf,
          0x16u);
      }
      uint64_t v16 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v17 = 49;
    }
    long long v21 = [v16 hmErrorWithCode:v17];
    goto LABEL_20;
  }
  long long v13 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v14 = 20;
LABEL_8:
  id v15 = [v13 hmErrorWithCode:v14];
  [v4 respondWithError:v15];
LABEL_22:
}

void __26__HMDHome__handleAddZone___block_invoke(uint64_t a1, uint64_t a2)
{
  void v8[2] = *MEMORY[0x1E4F143B8];
  id v2 = *(void **)(a1 + 32);
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    [v3 respondWithError:a2];
  }
  else
  {
    v7[0] = @"kZoneUUID";
    id v5 = [*(id *)(a1 + 40) UUIDString];
    v7[1] = @"kZoneName";
    v8[0] = v5;
    v8[1] = *(void *)(a1 + 48);
    uint64_t v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v8 forKeys:v7 count:2];
    [v2 respondWithPayload:v6];
  }
}

- (void)_handleRemoveRoomModel:(id)a3 message:(id)a4
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  unint64_t v8 = [v6 uuid];
  uint64_t v9 = [(HMDHome *)self roomWithUUID:v8];
  uint64_t v10 = v9;
  if (v9)
  {
    id v51 = v8;
    long long v11 = [v9 uuid];
    id v12 = [(HMDHome *)self roomForEntireHome];
    long long v13 = [v12 uuid];
    int v14 = [v11 isEqual:v13];

    if (v14)
    {
      id v15 = [v7 responseHandler];

      unint64_t v8 = v51;
      if (v15)
      {
        uint64_t v16 = [MEMORY[0x1E4F28C58] hmErrorWithCode:29];
        uint64_t v17 = [v7 responseHandler];
        ((void (**)(void, void *, void))v17)[2](v17, v16, 0);
      }
    }
    else
    {
      id v53 = v7;
      unint64_t v19 = (void *)MEMORY[0x1D9452090]();
      unint64_t v20 = self;
      long long v21 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        __int16 v22 = HMFGetLogIdentifier();
        int v23 = [v10 name];
        *(_DWORD *)buf = 138543618;
        id v67 = v22;
        __int16 v68 = 2112;
        id v69 = v23;
        _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@Remove room: %@", buf, 0x16u);
      }
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      uint64_t v24 = [(HMDHome *)v20 zones];
      uint64_t v25 = [v24 countByEnumeratingWithState:&v58 objects:v65 count:16];
      if (v25)
      {
        uint64_t v26 = v25;
        uint64_t v27 = *(void *)v59;
        do
        {
          for (uint64_t i = 0; i != v26; ++i)
          {
            if (*(void *)v59 != v27) {
              objc_enumerationMutation(v24);
            }
            [*(id *)(*((void *)&v58 + 1) + 8 * i) removeRoom:v10];
          }
          uint64_t v26 = [v24 countByEnumeratingWithState:&v58 objects:v65 count:16];
        }
        while (v26);
      }
      id v50 = v6;

      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      BOOL v52 = v20;
      __int16 v29 = [(HMDHome *)v20 accessories];
      uint64_t v30 = [v29 countByEnumeratingWithState:&v54 objects:v64 count:16];
      if (v30)
      {
        uint64_t v31 = v30;
        uint64_t v32 = *(void *)v55;
        do
        {
          for (uint64_t j = 0; j != v31; ++j)
          {
            if (*(void *)v55 != v32) {
              objc_enumerationMutation(v29);
            }
            long long v34 = *(void **)(*((void *)&v54 + 1) + 8 * j);
            long long v35 = objc_msgSend(v10, "uuid", v50);
            long long v36 = [v34 room];
            long long v37 = [v36 uuid];
            int v38 = [v35 isEqual:v37];

            if (v38)
            {
              id v39 = [v53 transactionResult];
              id v40 = [(HMDHome *)v52 roomForEntireHome];
              objc_msgSend(v34, "updateRoom:source:", v40, objc_msgSend(v39, "source"));
            }
          }
          uint64_t v31 = [v29 countByEnumeratingWithState:&v54 objects:v64 count:16];
        }
        while (v31);
      }

      long long v41 = [v10 name];
      id v42 = [(HMDHome *)v52 removeName:v41];

      __int16 v43 = [(HMDHome *)v52 rooms];
      [v43 removeObject:v10];

      id v7 = v53;
      uint64_t v44 = [v53 transactionResult];
      [v44 markChanged];
      [v44 markSaveToAssistant];
      v62[0] = @"kHomeUUID";
      uint64_t v45 = [(HMDHome *)v52 uuid];
      id v46 = [v45 UUIDString];
      v63[0] = v46;
      v62[1] = @"kRoomName";
      id v47 = [v10 name];
      v63[1] = v47;
      void v62[2] = @"kRoomUUID";
      unint64_t v8 = v51;
      id v48 = [v51 UUIDString];
      void v63[2] = v48;
      id v49 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v63 forKeys:v62 count:3];

      [v53 respondWithPayload:v49];
      id v6 = v50;
    }
  }
  else
  {
    uint64_t v18 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    [v7 respondWithError:v18];
  }
}

- (void)_handleRemoveRoom:(id)a3
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 uuidForKey:@"kRoomUUID"];
  if (!v5)
  {
    uint64_t v16 = (void *)MEMORY[0x1D9452090]();
    uint64_t v17 = self;
    uint64_t v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      unint64_t v19 = HMFGetLogIdentifier();
      unint64_t v20 = [v4 messagePayload];
      *(_DWORD *)buf = 138543618;
      long long v57 = v19;
      __int16 v58 = 2112;
      long long v59 = v20;
      _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_ERROR, "%{public}@Cannot find room UUID in remove room message payload: %@", buf, 0x16u);
    }
    int v14 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v15 = 2;
    goto LABEL_9;
  }
  id v6 = [(HMDHome *)self roomForEntireHome];
  id v7 = [v6 uuid];
  int v8 = [v5 isEqual:v7];

  if (v8)
  {
    uint64_t v9 = (void *)MEMORY[0x1D9452090]();
    uint64_t v10 = self;
    long long v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      id v12 = HMFGetLogIdentifier();
      long long v13 = [(HMDHome *)v10 roomForEntireHome];
      *(_DWORD *)buf = 138543618;
      long long v57 = v12;
      __int16 v58 = 2112;
      long long v59 = v13;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_ERROR, "%{public}@Cannot handle request to remove roomForEntireHome: %@", buf, 0x16u);
    }
    int v14 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v15 = 29;
LABEL_9:
    long long v21 = [v14 hmErrorWithCode:v15];
    [v4 respondWithError:v21];
    goto LABEL_29;
  }
  long long v21 = [(HMDHome *)self roomWithUUID:v5];
  __int16 v22 = (void *)MEMORY[0x1D9452090]();
  id v50 = self;
  int v23 = HMFGetOSLogHandle();
  uint64_t v24 = v23;
  if (v21)
  {
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      uint64_t v25 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      long long v57 = v25;
      __int16 v58 = 2112;
      long long v59 = v21;
      _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_INFO, "%{public}@Removing room: %@", buf, 0x16u);
    }
    id v48 = v21;

    uint64_t v26 = [HMDRoomModel alloc];
    uint64_t v27 = [(HMDHome *)v50 uuid];
    uint64_t v28 = [(HMDBackingStoreModelObject *)v26 initWithObjectChangeType:3 uuid:v5 parentUUID:v27];

    __int16 v29 = [(HMDHome *)v50 backingStore];
    [v4 name];
    v31 = id v30 = v4;
    uint64_t v32 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    long long v33 = [v29 transaction:v31 options:v32];

    id v47 = (void *)v28;
    id v49 = v30;
    [v33 add:v28 withMessage:v30];
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v34 = [(HMDHome *)v50 accessories];
    uint64_t v35 = [v34 countByEnumeratingWithState:&v51 objects:v55 count:16];
    if (v35)
    {
      uint64_t v36 = v35;
      uint64_t v37 = *(void *)v52;
      do
      {
        for (uint64_t i = 0; i != v36; ++i)
        {
          if (*(void *)v52 != v37) {
            objc_enumerationMutation(v34);
          }
          id v39 = *(void **)(*((void *)&v51 + 1) + 8 * i);
          id v40 = [v39 room];
          long long v41 = [v40 uuid];
          int v42 = [v5 isEqual:v41];

          if (v42)
          {
            __int16 v43 = [(HMDHome *)v50 roomForEntireHome];
            uint64_t v44 = [v39 modelWithUpdatedRoom:v43];

            if (v44) {
              [v33 add:v44];
            }
          }
        }
        uint64_t v36 = [v34 countByEnumeratingWithState:&v51 objects:v55 count:16];
      }
      while (v36);
    }

    [v33 run];
    long long v21 = v48;
    id v4 = v49;
    uint64_t v45 = v47;
  }
  else
  {
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      id v46 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      long long v57 = v46;
      __int16 v58 = 2112;
      long long v59 = v5;
      _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_ERROR, "%{public}@Could not find room to remove with UUID: %@", buf, 0x16u);
    }
    uint64_t v45 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    [v4 respondWithError:v45];
  }

LABEL_29:
}

- (void)_handleAddRoomModel:(id)a3 message:(id)a4
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  int v8 = [v6 name];
  uint64_t v9 = [v6 uuid];
  uint64_t v10 = (void *)v9;
  if (v8 && v9)
  {
    uint64_t v11 = objc_msgSend(v8, "hm_truncatedNameString");

    id v12 = (void *)MEMORY[0x1D9452090]();
    long long v13 = self;
    int v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      int v38 = v15;
      __int16 v39 = 2112;
      uint64_t v40 = v11;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Add room: %@", buf, 0x16u);
    }
    long long v34 = v10;
    uint64_t v16 = [[HMDRoom alloc] initWithName:v11 uuid:v10 home:v13];
    uint64_t v17 = [(HMDHome *)v13 rooms];
    [v17 addObject:v16];

    uint64_t v18 = [(HMDHome *)v13 msgDispatcher];
    unint64_t v19 = [(HMDHome *)v13 workQueue];
    [(HMDRoom *)v16 configure:v18 queue:v19];

    unint64_t v20 = [v7 transactionResult];
    [v20 markChanged];
    [v20 markSaveToAssistant];
    v35[0] = @"kHomeUUID";
    long long v21 = [(HMDHome *)v13 uuid];
    __int16 v22 = [v21 UUIDString];
    v36[0] = v22;
    v36[1] = v11;
    long long v33 = (void *)v11;
    v35[1] = @"kRoomName";
    v35[2] = @"kRoomUUID";
    int v23 = [(HMDRoom *)v16 uuid];
    uint64_t v24 = [v23 UUIDString];
    void v36[2] = v24;
    uint64_t v25 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v36 forKeys:v35 count:3];

    [v7 respondWithPayload:v25];
    if ([(HMDHome *)v13 isOwnerUser])
    {
      uint64_t v26 = [(HMDHome *)v13 home];
      uint64_t v27 = [v26 homeManager];
      [v27 updateCurrentUserEligibleForOwnerToAutoMigration];
    }
    int v8 = v33;
    uint64_t v10 = v34;
    goto LABEL_12;
  }
  uint64_t v28 = (void *)MEMORY[0x1D9452090]();
  __int16 v29 = self;
  id v30 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
  {
    uint64_t v31 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    int v38 = v31;
    __int16 v39 = 2112;
    uint64_t v40 = (uint64_t)v8;
    _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_ERROR, "%{public}@Can't add room %@; invalid parameter", buf, 0x16u);
  }
  uint64_t v32 = [v7 responseHandler];

  if (v32)
  {
    uint64_t v16 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    unint64_t v20 = [v7 responseHandler];
    ((void (**)(void, HMDRoom *, void))v20)[2](v20, v16, 0);
LABEL_12:
  }
}

- (void)_handleAddRoom:(id)a3
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 stringForKey:@"kRoomName"];
  unint64_t v6 = HMMaxLengthForNaming();
  if ([v5 length] <= v6)
  {
    uint64_t v12 = [(HMDHome *)self roomWithName:v5];
    if (v12)
    {
      uint64_t v11 = (void *)v12;
      long long v13 = [MEMORY[0x1E4F28C58] hmErrorWithCode:1];
      [v4 respondWithError:v13];

      goto LABEL_17;
    }
    int v14 = [(HMDHome *)self rooms];
    unint64_t v15 = [v14 count];
    unint64_t v16 = maximumRoomsPerHome;

    if (v15 >= v16)
    {
      __int16 v22 = (void *)MEMORY[0x1D9452090]();
      int v23 = self;
      uint64_t v24 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = HMFGetLogIdentifier();
        int v34 = 138543618;
        uint64_t v35 = v25;
        __int16 v36 = 2112;
        uint64_t v37 = v5;
        _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_ERROR, "%{public}@Can't add room %@ to home; already at maximum rooms for home",
          (uint8_t *)&v34,
          0x16u);
      }
      uint64_t v17 = [MEMORY[0x1E4F28C58] hmErrorWithCode:49];
    }
    else
    {
      uint64_t v17 = [(HMDHome *)self addName:v5];
      if (!v17)
      {
        uint64_t v26 = [HMDRoomModel alloc];
        uint64_t v27 = [v4 uuidForKey:@"kNewObjectUUIDKey"];
        uint64_t v28 = [(HMDHome *)self uuid];
        __int16 v29 = [(HMDBackingStoreModelObject *)v26 initWithObjectChangeType:1 uuid:v27 parentUUID:v28];

        [(HMDRoomModel *)v29 setName:v5];
        id v30 = [(HMDHome *)self backingStore];
        uint64_t v31 = [v4 name];
        uint64_t v32 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
        long long v33 = [v30 transaction:v31 options:v32];

        [v33 add:v29 withMessage:v4];
        [v33 run];

        goto LABEL_16;
      }
      uint64_t v18 = (void *)MEMORY[0x1D9452090]();
      unint64_t v19 = self;
      unint64_t v20 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        long long v21 = HMFGetLogIdentifier();
        int v34 = 138543874;
        uint64_t v35 = v21;
        __int16 v36 = 2112;
        uint64_t v37 = v5;
        __int16 v38 = 2112;
        __int16 v39 = v17;
        _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_ERROR, "%{public}@Can't add room %@ to home; namespace error %@",
          (uint8_t *)&v34,
          0x20u);
      }
    }
    [v4 respondWithError:v17];
LABEL_16:

    uint64_t v11 = 0;
    goto LABEL_17;
  }
  id v7 = (void *)MEMORY[0x1D9452090]();
  int v8 = self;
  uint64_t v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = HMFGetLogIdentifier();
    int v34 = 138543362;
    uint64_t v35 = v10;
    _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", (uint8_t *)&v34, 0xCu);
  }
  uint64_t v11 = [MEMORY[0x1E4F28C58] hmErrorWithCode:46];
  [v4 respondWithError:v11];
LABEL_17:
}

- (void)_handleHomeDataRequest:(id)a3
{
  id v3 = (void *)MEMORY[0x1E4F28C58];
  id v4 = a3;
  id v5 = [v3 hmErrorWithCode:48];
  [v4 respondWithError:v5];
}

- (id)_handleRenameHomeModel:(id)a3 message:(id)a4
{
  void v23[2] = *MEMORY[0x1E4F143B8];
  id v6 = a4;
  id v7 = [a3 name];
  int v8 = objc_msgSend(v7, "hm_truncatedNameString");

  if (v8 && [v8 length])
  {
    uint64_t v9 = [v6 transactionResult];
    uint64_t v10 = [v9 label];
    char v11 = [v10 isEqualToString:@"kRenameHomeRequestKey"];

    if ((v11 & 1) == 0)
    {
      uint64_t v12 = [(HMDHome *)self homeManager];
      long long v13 = [(HMDHome *)self name];
      int v14 = [v12 uuid];
      v23[0] = v14;
      unint64_t v15 = [(HMDHome *)self uuid];
      v23[1] = v15;
      unint64_t v16 = [MEMORY[0x1E4F1C978] arrayWithObjects:v23 count:2];
      id v17 = (id)[v12 replaceName:v13 withNewName:v8 inNamespaces:v16];
    }
    [(HMDHome *)self setName:v8];
    long long v21 = @"HMDHomeNameNotificationKey";
    __int16 v22 = v8;
    uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v22 forKeys:&v21 count:1];
    logAndPostNotification(@"HMDHomeNameChangedNotification", self, v18);

    unint64_t v19 = 0;
  }
  else
  {
    unint64_t v19 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:20 userInfo:0];
  }

  return v19;
}

- (void)_handleRename:(id)a3
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 stringForKey:@"kHomeName"];
  unint64_t v6 = HMMaxLengthForNaming();
  if ([v5 length] <= v6)
  {
    char v11 = [(HMDHome *)self homeManager];
    uint64_t v12 = [(HMDHome *)self name];
    long long v13 = [v11 uuid];
    v31[0] = v13;
    int v14 = [(HMDHome *)self uuid];
    v31[1] = v14;
    unint64_t v15 = [MEMORY[0x1E4F1C978] arrayWithObjects:v31 count:2];
    unint64_t v16 = [v11 replaceName:v12 withNewName:v5 inNamespaces:v15];

    if (v16)
    {
      if ([(HMDHomeModel *)v16 code] == 31)
      {
        id v17 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v18 = *MEMORY[0x1E4F2D140];
        unint64_t v19 = [(HMDHomeModel *)v16 userInfo];
        uint64_t v20 = [v17 errorWithDomain:v18 code:32 userInfo:v19];

        unint64_t v16 = (HMDHomeModel *)v20;
      }
      [v4 respondWithError:v16];
    }
    else
    {
      long long v21 = [HMDHomeModel alloc];
      __int16 v22 = [(HMDHome *)self uuid];
      int v23 = [v11 uuid];
      unint64_t v16 = [(HMDBackingStoreModelObject *)v21 initWithObjectChangeType:2 uuid:v22 parentUUID:v23];

      [(HMDHomeModel *)v16 setName:v5];
      uint64_t v24 = [(HMDHome *)self backingStore];
      uint64_t v25 = [v4 name];
      uint64_t v26 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      uint64_t v27 = [v24 transaction:v25 options:v26];

      [v27 add:v16];
      v28[0] = MEMORY[0x1E4F143A8];
      v28[1] = 3221225472;
      void v28[2] = __25__HMDHome__handleRename___block_invoke;
      void v28[3] = &unk_1E6A196E0;
      id v29 = v4;
      id v30 = v5;
      [v27 run:v28];
    }
  }
  else
  {
    id v7 = (void *)MEMORY[0x1D9452090]();
    int v8 = self;
    uint64_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v33 = v10;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", buf, 0xCu);
    }
    char v11 = [MEMORY[0x1E4F28C58] hmErrorWithCode:46];
    [v4 respondWithError:v11];
  }
}

void __25__HMDHome__handleRename___block_invoke(uint64_t a1, uint64_t a2)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  id v2 = *(void **)(a1 + 32);
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    [v3 respondWithError:a2];
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 40);
    unint64_t v6 = @"kHomeName";
    v7[0] = v4;
    id v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v7 forKeys:&v6 count:1];
    [v2 respondWithPayload:v5];
  }
}

- (id)_unexpectedCharacteristicsFromCharacteristicNotifications:(id)a3
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHome *)self notificationRegistrations];
  uint64_t v6 = [v5 count];

  if (v6)
  {
    id v7 = (void *)MEMORY[0x1E4F1CBF0];
    goto LABEL_37;
  }
  int v8 = [MEMORY[0x1E4F1CA48] array];
  context = (void *)MEMORY[0x1D9452090]();
  uint64_t v9 = [v4 allKeys];
  v76[0] = MEMORY[0x1E4F143A8];
  v76[1] = 3221225472;
  v76[2] = __69__HMDHome__unexpectedCharacteristicsFromCharacteristicNotifications___block_invoke;
  v76[3] = &unk_1E6A06A08;
  id v42 = v4;
  id v45 = v4;
  id v77 = v45;
  long long v78 = self;
  uint64_t v40 = v9;
  uint64_t v10 = objc_msgSend(v9, "na_map:", v76);
  id v74 = 0;
  id v75 = 0;
  -[HMDHome _notificationPayloadsForRemoteGateway:accessories:enableCharacteristicNotificationPayload:characteristicNotificationThresholdsPayload:disableCharacteristicNotificationPayload:enableMediaNotificationPayload:disableMediaNotificationPayload:](self, 0, v10, &v75, 0, &v74, 0, 0);
  id v47 = v75;
  id v46 = v74;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  id obj = v10;
  uint64_t v48 = [obj countByEnumeratingWithState:&v70 objects:v87 count:16];
  if (!v48) {
    goto LABEL_36;
  }
  uint64_t v44 = *(void *)v71;
  long long v56 = self;
  do
  {
    uint64_t v11 = 0;
    do
    {
      if (*(void *)v71 != v44) {
        objc_enumerationMutation(obj);
      }
      uint64_t v49 = v11;
      uint64_t v12 = *(void **)(*((void *)&v70 + 1) + 8 * v11);
      long long v13 = [v12 uuid];
      uint64_t v14 = [v13 UUIDString];

      long long v52 = objc_msgSend(v45, "hmf_dictionaryForKey:", v14);
      long long v61 = objc_msgSend(v47, "hmf_arrayForKey:", v14);
      long long v57 = (void *)v14;
      __int16 v58 = objc_msgSend(v46, "hmf_arrayForKey:", v14);
      long long v66 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      id v50 = [v12 services];
      uint64_t v53 = [v50 countByEnumeratingWithState:&v66 objects:v86 count:16];
      if (v53)
      {
        uint64_t v51 = *(void *)v67;
        do
        {
          for (uint64_t i = 0; i != v53; ++i)
          {
            if (*(void *)v67 != v51) {
              objc_enumerationMutation(v50);
            }
            unint64_t v16 = *(void **)(*((void *)&v66 + 1) + 8 * i);
            id v17 = [v16 instanceID];
            uint64_t v18 = [v17 stringValue];
            unint64_t v19 = objc_msgSend(v52, "hmf_dictionaryForKey:", v18);

            if (v19)
            {
              uint64_t v54 = i;
              long long v64 = 0u;
              long long v65 = 0u;
              long long v62 = 0u;
              long long v63 = 0u;
              id v60 = [v16 characteristics];
              uint64_t v20 = [v60 countByEnumeratingWithState:&v62 objects:v85 count:16];
              if (!v20) {
                goto LABEL_31;
              }
              uint64_t v21 = v20;
              uint64_t v22 = *(void *)v63;
              long long v59 = v19;
              while (1)
              {
                for (uint64_t j = 0; j != v21; ++j)
                {
                  if (*(void *)v63 != v22) {
                    objc_enumerationMutation(v60);
                  }
                  uint64_t v24 = *(void **)(*((void *)&v62 + 1) + 8 * j);
                  uint64_t v25 = [v24 instanceID];
                  uint64_t v26 = [v25 stringValue];
                  uint64_t v27 = [v19 objectForKey:v26];

                  if (v27)
                  {
                    if ([v61 containsObject:v25])
                    {
                      uint64_t v28 = (void *)MEMORY[0x1D9452090]();
                      id v29 = self;
                      id v30 = HMFGetOSLogHandle();
                      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
                      {
                        uint64_t v31 = HMFGetLogIdentifier();
                        uint64_t v32 = [v24 shortDescription];
                        *(_DWORD *)buf = 138543874;
                        id v80 = v31;
                        __int16 v81 = 2112;
                        id v82 = v32;
                        __int16 v83 = 2112;
                        uint64_t v84 = v57;
                        _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_DEBUG, "%{public}@Received persistent characteristic changed notification for characteristic (%@), accessoryUUID %@", buf, 0x20u);

                        self = v56;
                      }
                    }
                    else
                    {
                      if (![v58 containsObject:v25]) {
                        goto LABEL_29;
                      }
                      long long v33 = (void *)MEMORY[0x1D9452090]();
                      uint64_t v34 = self;
                      uint64_t v35 = HMFGetOSLogHandle();
                      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
                      {
                        __int16 v36 = HMFGetLogIdentifier();
                        [v24 shortDescription];
                        long long v55 = v33;
                        v38 = uint64_t v37 = v8;
                        *(_DWORD *)buf = 138543874;
                        id v80 = v36;
                        __int16 v81 = 2112;
                        id v82 = v38;
                        __int16 v83 = 2112;
                        uint64_t v84 = v57;
                        _os_log_impl(&dword_1D49D5000, v35, OS_LOG_TYPE_ERROR, "%{public}@Received unexpected characteristic changed notification for characteristic (%@), accessoryUUID %@", buf, 0x20u);

                        int v8 = v37;
                        long long v33 = v55;

                        self = v56;
                      }

                      [v8 addObject:v24];
                    }
                    unint64_t v19 = v59;
                  }
LABEL_29:
                }
                uint64_t v21 = [v60 countByEnumeratingWithState:&v62 objects:v85 count:16];
                if (!v21)
                {
LABEL_31:

                  uint64_t i = v54;
                  break;
                }
              }
            }
          }
          uint64_t v53 = [v50 countByEnumeratingWithState:&v66 objects:v86 count:16];
        }
        while (v53);
      }

      uint64_t v11 = v49 + 1;
    }
    while (v49 + 1 != v48);
    uint64_t v48 = [obj countByEnumeratingWithState:&v70 objects:v87 count:16];
  }
  while (v48);
LABEL_36:

  id v7 = (void *)[v8 copy];

  id v4 = v42;
LABEL_37:

  return v7;
}

id __69__HMDHome__unexpectedCharacteristicsFromCharacteristicNotifications___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:v3];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  id v6 = 0;
  if ((isKindOfClass & 1) != 0 && v4)
  {
    id v7 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v3];
    int v8 = [*(id *)(a1 + 40) accessoryWithUUID:v7];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    id v6 = v9;
  }
  return v6;
}

- (void)_updateWoWState:(id)a3
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        uint64_t v10 = [v9 identifier];
        uint64_t v11 = [v9 matchingHAPAccessoryWithServerIdentifier:v10 linkType:1];

        if ([v9 isReachable]) {
          BOOL v12 = v11 == 0;
        }
        else {
          BOOL v12 = 1;
        }
        if (v12 || ![v9 isNonClientNotificationEnabled])
        {
          long long v13 = [(HMDHome *)self netManagerFactory];
          uint64_t v14 = v13[2]();
          [v14 deregisterWoWAssertionForObject:v9];
        }
        else
        {
          long long v13 = [(HMDHome *)self netManagerFactory];
          uint64_t v14 = v13[2]();
          [v14 registerWoWAssertionForObject:v9];
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v6);
  }
}

- (void)_handleFetchPresenceMapMessage:(id)a3
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([(HMDHome *)self isCurrentDeviceConfirmedPrimaryResident])
  {
    uint64_t v40 = v4;
    uint64_t v5 = [v4 messagePayload];
    uint64_t v6 = objc_msgSend(v5, "hmf_setForKey:", *MEMORY[0x1E4F2D7C8]);

    uint64_t v41 = [MEMORY[0x1E4F1CA60] dictionary];
    __int16 v39 = (void *)v6;
    uint64_t v7 = [MEMORY[0x1E4F1CA80] setWithSet:v6];
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    int v8 = [(HMDHome *)self home];
    uint64_t v9 = [v8 usersSupportingPresence];

    id obj = v9;
    uint64_t v10 = [v9 countByEnumeratingWithState:&v47 objects:v54 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v48;
      do
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v48 != v12) {
            objc_enumerationMutation(obj);
          }
          uint64_t v14 = *(void **)(*((void *)&v47 + 1) + 8 * i);
          long long v15 = [v14 uuid];
          int v16 = [v7 containsObject:v15];

          if (v16)
          {
            long long v17 = [(HMDHome *)self presenceMonitor];
            long long v18 = [v17 presenceMap];
            [v14 uuid];
            unint64_t v19 = v7;
            v21 = uint64_t v20 = self;
            uint64_t v22 = [v18 objectForKeyedSubscript:v21];

            int v23 = NSNumber;
            uint64_t v24 = [v22 presenceRegionStatus];
            uint64_t v25 = objc_msgSend(v23, "numberWithUnsignedInteger:", objc_msgSend(v24, "value"));
            uint64_t v26 = [v14 uuid];
            [v41 setObject:v25 forKeyedSubscript:v26];

            self = v20;
            uint64_t v7 = v19;
          }
        }
        uint64_t v11 = [obj countByEnumeratingWithState:&v47 objects:v54 count:16];
      }
      while (v11);
    }

    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id v27 = v39;
    uint64_t v28 = [v27 countByEnumeratingWithState:&v43 objects:v53 count:16];
    if (v28)
    {
      uint64_t v29 = v28;
      uint64_t v30 = *(void *)v44;
      do
      {
        for (uint64_t j = 0; j != v29; ++j)
        {
          if (*(void *)v44 != v30) {
            objc_enumerationMutation(v27);
          }
          uint64_t v32 = *(void *)(*((void *)&v43 + 1) + 8 * j);
          long long v33 = [v41 objectForKeyedSubscript:v32];

          if (!v33) {
            [v41 setObject:&unk_1F2DC7540 forKeyedSubscript:v32];
          }
        }
        uint64_t v29 = [v27 countByEnumeratingWithState:&v43 objects:v53 count:16];
      }
      while (v29);
    }

    uint64_t v51 = *MEMORY[0x1E4F2E340];
    long long v52 = v41;
    uint64_t v34 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v52 forKeys:&v51 count:1];
    id v4 = v40;
    [v40 respondWithPayload:v34];
  }
  else
  {
    uint64_t v35 = (void *)MEMORY[0x1D9452090]();
    __int16 v36 = self;
    uint64_t v37 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      __int16 v38 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v56 = v38;
      _os_log_impl(&dword_1D49D5000, v37, OS_LOG_TYPE_ERROR, "%{public}@presence map fetch error: not primary resident", buf, 0xCu);
    }
    id v27 = [MEMORY[0x1E4F28C58] hmPrivateErrorWithCode:2708];
    [v4 respondWithError:v27];
  }
}

- (HMDUserPresenceFeeder)presenceFeeder
{
  return self->_presenceFeeder;
}

- (void)_registerForNotifications
{
  id v6 = [(HMDHome *)self notificationCenter];
  id v3 = [(HMDHome *)self homeManager];
  [v6 addObserver:self selector:sel_handleFirstProcessDidBecomeActiveNotification_ name:@"HMDHomeManagerFirstProcessDidBecomeActiveNotification" object:v3];
  [v6 addObserver:self selector:sel_handleLastProcessDidBecomeInactiveNotification_ name:@"HMDHomeManagerLastProcessDidBecomeInactiveNotification" object:v3];
  [v6 addObserver:self selector:sel_handleClientProcessDisconnectedNotification_ name:@"HMDHomeManagerClientProcessDisconnectedNotification" object:0];
  [v6 addObserver:self selector:sel_handleAccessoryDidAddNetworkRouterControllerNotification_ name:@"HMDAccessoryDidAddNetworkRouterControllerNotification" object:self];
  [v6 addObserver:self selector:sel_handleAccessoryDidRemoveNetworkRouterControllerNotification_ name:@"HMDAccessoryDidRemoveNetworkRouterControllerNotification" object:self];
  id v4 = [(HMDHome *)self currentUser];
  [v6 addObserver:self selector:sel_handleCurrentUserPrivilegeChanged_ name:@"HMDUserPrivilegeDidChangeNotification" object:v4];

  uint64_t v5 = +[HMDAppleAccountManager sharedManager];
  [v6 addObserver:self selector:sel_handleActiveAccountChanged_ name:@"HMDAppleAccountManagerAccountUpdatedNotification" object:v5];

  [v6 addObserver:self selector:sel_handleAccountHandlesUpdated_ name:@"HMDAccountHandlesUpdatedNotification" object:0];
  [v6 addObserver:self selector:sel___handleProcessStateChange_ name:HMDProcessMonitorProcessStateDidChangeNotification object:0];
  [v6 addObserver:self selector:sel_handleAccessoryReachabilityChangeNotification_ name:@"HMDAccessoryIsReachableNotification" object:0];
  [v6 addObserver:self selector:sel_handleAccessoryReachabilityChangeNotification_ name:@"HMDAccessoryIsNotReachableNotification" object:0];
  [v6 addObserver:self selector:sel_handleRemovedMediaSessions_ name:@"HMDMediaSessionsRemovedNotification" object:0];
  [v6 addObserver:self selector:sel_handleXPCConnectionInvalidated_ name:@"HMDXPCClientConnectionDidInvalidateNotification" object:0];
  [v6 addObserver:self selector:sel_handleDeviceCapabilitiesUpdated_ name:@"HMDDeviceCapabilitiiesUpdatedNotification" object:0];
  [v6 addObserver:self selector:sel_handlePrimaryResidentChangeNotification_ name:@"HMDResidentDeviceConfirmedStateChangedNotification" object:0];
  if (isiOSDevice()) {
    [v6 addObserver:self selector:sel_handleDidReceiveIDSMessageWithNoListener_ name:@"HMDDidReceiveRemoteMessageWithNoListenerNotification" object:0];
  }
  [v6 addObserver:self selector:sel_handleSiriEndPointAddedNotification_ name:@"HMDSiriEndpointProfileAddedNotification" object:0];
  [v6 addObserver:self selector:sel_handleRemoteDeviceBecameReachableNotification_ name:@"HMDRemoteDeviceIsReachableNotification" object:0];
}

- (void)_registerForMessages
{
  v475[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = +[HMDUserMessagePolicy userMessagePolicyWithHome:self userPrivilege:3 remoteAccessRequired:0];
  uint64_t v383 = +[HMDUserMessagePolicy userMessagePolicyWithHome:self userPrivilege:0 remoteAccessRequired:0];
  v384 = +[HMDUserMessagePolicy userMessagePolicyWithHome:self userPrivilege:0 remoteAccessRequired:1];
  id v4 = [(HMDHome *)self administratorHandler];
  uint64_t v5 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v475[0] = v5;
  id v6 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v475[1] = v6;
  uint64_t v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v475 count:2];
  [v4 registerForMessage:@"kRenameHomeRequestKey" receiver:self policies:v7 selector:sel__handleRename_];

  int v8 = [(HMDHome *)self msgDispatcher];
  uint64_t v9 = *MEMORY[0x1E4F2E1A8];
  uint64_t v10 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v474 = v10;
  uint64_t v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v474 count:1];
  [v8 registerForMessage:v9 receiver:self policies:v11 selector:sel__handleHomeDataRequest_];

  uint64_t v12 = [(HMDHome *)self administratorHandler];
  long long v13 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v473[0] = v13;
  uint64_t v14 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
  v473[1] = v14;
  long long v15 = [MEMORY[0x1E4F1C978] arrayWithObjects:v473 count:2];
  [v12 registerForMessage:@"kAddRoomRequestKey" receiver:self policies:v15 selector:sel__handleAddRoom_];

  int v16 = [(HMDHome *)self administratorHandler];
  long long v17 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v472[0] = v17;
  long long v18 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:4];
  v472[1] = v18;
  unint64_t v19 = [MEMORY[0x1E4F1C978] arrayWithObjects:v472 count:2];
  [v16 registerForMessage:@"kRemoveRoomRequestKey" receiver:self policies:v19 selector:sel__handleRemoveRoom_];

  uint64_t v20 = [(HMDHome *)self administratorHandler];
  uint64_t v21 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v471[0] = v21;
  uint64_t v22 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
  v471[1] = v22;
  int v23 = [MEMORY[0x1E4F1C978] arrayWithObjects:v471 count:2];
  [v20 registerForMessage:@"kAddZoneRequestKey" receiver:self policies:v23 selector:sel__handleAddZone_];

  uint64_t v24 = [(HMDHome *)self administratorHandler];
  uint64_t v25 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v470[0] = v25;
  uint64_t v26 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:4];
  v470[1] = v26;
  id v27 = [MEMORY[0x1E4F1C978] arrayWithObjects:v470 count:2];
  [v24 registerForMessage:@"kRemoveZoneRequestKey" receiver:self policies:v27 selector:sel__handleRemoveZone_];

  uint64_t v28 = [(HMDHome *)self administratorHandler];
  uint64_t v29 = *MEMORY[0x1E4F2EC68];
  uint64_t v30 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v469[0] = v30;
  uint64_t v31 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
  v469[1] = v31;
  uint64_t v32 = [MEMORY[0x1E4F1C978] arrayWithObjects:v469 count:2];
  [v28 registerForMessage:v29 receiver:self policies:v32 selector:sel__handleAddServiceGroup_];

  long long v33 = [(HMDHome *)self administratorHandler];
  uint64_t v34 = *MEMORY[0x1E4F2EDA0];
  uint64_t v35 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v468[0] = v35;
  __int16 v36 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:4];
  v468[1] = v36;
  uint64_t v37 = [MEMORY[0x1E4F1C978] arrayWithObjects:v468 count:2];
  [v33 registerForMessage:v34 receiver:self policies:v37 selector:sel__handleRemoveServiceGroup_];

  __int16 v38 = [(HMDHome *)self administratorHandler];
  __int16 v39 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v467[0] = v39;
  uint64_t v40 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
  v467[1] = v40;
  uint64_t v41 = [MEMORY[0x1E4F1C978] arrayWithObjects:v467 count:2];
  [v38 registerForMessage:@"kAddActionSetRequestKey" receiver:self policies:v41 selector:sel__handleAddActionSet_];

  id v42 = [(HMDHome *)self administratorHandler];
  long long v43 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v466[0] = v43;
  long long v44 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:4];
  v466[1] = v44;
  long long v45 = [MEMORY[0x1E4F1C978] arrayWithObjects:v466 count:2];
  [v42 registerForMessage:@"kRemoveActionSetRequestKey" receiver:self policies:v45 selector:sel__handleRemoveActionSet_];

  long long v46 = [(HMDHome *)self administratorHandler];
  long long v47 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v465[0] = v47;
  long long v48 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:4];
  v465[1] = v48;
  long long v49 = [MEMORY[0x1E4F1C978] arrayWithObjects:v465 count:2];
  [v46 registerForMessage:@"kRemoveTriggerRequestKey" receiver:self policies:v49 selector:sel__handleRemoveTrigger_];

  long long v50 = [(HMDHome *)self administratorHandler];
  uint64_t v51 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v464[0] = v51;
  long long v52 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v464[1] = v52;
  uint64_t v53 = [MEMORY[0x1E4F1C978] arrayWithObjects:v464 count:2];
  [v50 registerForMessage:@"kUpdateUserAccessRequestKey" receiver:self policies:v53 selector:sel__handleUpdateUserAccess_];

  uint64_t v54 = [(HMDHome *)self administratorHandler];
  uint64_t v55 = *MEMORY[0x1E4F2EEA0];
  long long v56 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v463[0] = v56;
  uint64_t v57 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v463[1] = v57;
  v382 = (void *)v3;
  v463[2] = v3;
  __int16 v58 = [MEMORY[0x1E4F1C978] arrayWithObjects:v463 count:3];
  [v54 registerForMessage:v55 receiver:self policies:v58 selector:sel__handleUpdateUserCamerasAccessLevel_];

  long long v59 = [(HMDHome *)self administratorHandler];
  id v60 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v462[0] = v60;
  long long v61 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:4];
  v462[1] = v61;
  long long v62 = [MEMORY[0x1E4F1C978] arrayWithObjects:v462 count:2];
  [v59 registerForMessage:@"kRemoveUserRequestKey" receiver:self policies:v62 selector:sel__handleRemoveUser_];

  long long v63 = [(HMDHome *)self administratorHandler];
  long long v64 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v461[0] = v64;
  long long v65 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:7];
  v461[1] = v65;
  long long v66 = [MEMORY[0x1E4F1C978] arrayWithObjects:v461 count:2];
  [v63 registerForMessage:@"kSetAppDataRequestKey" receiver:self policies:v66 selector:sel__handleSetAppData_];

  long long v67 = [(HMDHome *)self administratorHandler];
  uint64_t v68 = *MEMORY[0x1E4F2D780];
  long long v69 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v460[0] = v69;
  long long v70 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v460[1] = v70;
  long long v71 = [MEMORY[0x1E4F1C978] arrayWithObjects:v460 count:2];
  [v67 registerForMessage:v68 receiver:self policies:v71 selector:sel__handleUpdateMinimumMediaUserPrivilege_];

  long long v72 = [(HMDHome *)self administratorHandler];
  uint64_t v73 = *MEMORY[0x1E4F2D778];
  id v74 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v459[0] = v74;
  id v75 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v459[1] = v75;
  id v76 = [MEMORY[0x1E4F1C978] arrayWithObjects:v459 count:2];
  [v72 registerForMessage:v73 receiver:self policies:v76 selector:sel__handleUpdateMediaPeerToPeerEnabled_];

  id v77 = [(HMDHome *)self administratorHandler];
  uint64_t v78 = *MEMORY[0x1E4F2D770];
  id v79 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v458[0] = v79;
  id v80 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v458[1] = v80;
  __int16 v81 = [MEMORY[0x1E4F1C978] arrayWithObjects:v458 count:2];
  [v77 registerForMessage:v78 receiver:self policies:v81 selector:sel__handleUpdateMediaPassword_];

  id v82 = [(HMDHome *)self administratorHandler];
  uint64_t v83 = *MEMORY[0x1E4F2D6D8];
  uint64_t v84 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v457[0] = v84;
  __int16 v85 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v457[1] = v85;
  __int16 v86 = [MEMORY[0x1E4F1C978] arrayWithObjects:v457 count:2];
  [v82 registerForMessage:v83 receiver:self policies:v86 selector:sel__handleSetHasAnyUserAcknowledgedCameraRecordingOnboardingRequest_];

  id v87 = [(HMDHome *)self administratorHandler];
  uint64_t v88 = *MEMORY[0x1E4F2D6E0];
  id v89 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v456[0] = v89;
  uint64_t v90 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v456[1] = v90;
  id v91 = [MEMORY[0x1E4F1C978] arrayWithObjects:v456 count:2];
  [v87 registerForMessage:v88 receiver:self policies:v91 selector:sel__handleSetHasOnboardedForAccessCodeMessage_];

  id v92 = [(HMDHome *)self administratorHandler];
  uint64_t v93 = *MEMORY[0x1E4F2D6E8];
  uint64_t v94 = +[HMDXPCMessagePolicy policyWithEntitlements:131077];
  v455[0] = v94;
  id v95 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v455[1] = v95;
  id v96 = [MEMORY[0x1E4F1C978] arrayWithObjects:v455 count:2];
  [v92 registerForMessage:v93 receiver:self policies:v96 selector:sel__handleSetHasOnboardedForWalletKeyMessage_];

  id v97 = [(HMDHome *)self administratorHandler];
  uint64_t v98 = *MEMORY[0x1E4F2D788];
  long long v99 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v454[0] = v99;
  id v100 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v454[1] = v100;
  long long v101 = [MEMORY[0x1E4F1C978] arrayWithObjects:v454 count:2];
  [v97 registerForMessage:v98 receiver:self policies:v101 selector:sel__handleUpdateNetworkProtection_];

  long long v102 = [(HMDHome *)self administratorHandler];
  uint64_t v103 = *MEMORY[0x1E4F2D798];
  long long v104 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v453[0] = v104;
  long long v105 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v453[1] = v105;
  __int16 v106 = [MEMORY[0x1E4F1C978] arrayWithObjects:v453 count:2];
  [v102 registerForMessage:v103 receiver:self policies:v106 selector:sel__handleUpdateUserAnnounceAccess_];

  id v107 = [(HMDHome *)self administratorHandler];
  uint64_t v108 = *MEMORY[0x1E4F2D6C0];
  id v109 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v452[0] = v109;
  uint64_t v110 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v452[1] = v110;
  long long v111 = [MEMORY[0x1E4F1C978] arrayWithObjects:v452 count:2];
  [v107 registerForMessage:v108 receiver:self policies:v111 selector:sel__handleResolveThreadNetworkRequest_];

  long long v112 = [(HMDHome *)self administratorHandler];
  uint64_t v113 = *MEMORY[0x1E4F2D710];
  id v114 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v451[0] = v114;
  uint64_t v115 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v451[1] = v115;
  uint64_t v116 = [MEMORY[0x1E4F1C978] arrayWithObjects:v451 count:2];
  [v112 registerForMessage:v113 receiver:self policies:v116 selector:sel__handleSiriPhraseOptionsUpdateRequest_];

  uint64_t v117 = [(HMDHome *)self administratorHandler];
  uint64_t v118 = *MEMORY[0x1E4F2D6F8];
  dispatch_group_t v119 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v450[0] = v119;
  id v120 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v450[1] = v120;
  uint64_t v121 = [MEMORY[0x1E4F1C978] arrayWithObjects:v450 count:2];
  [v117 registerForMessage:v118 receiver:self policies:v121 selector:sel__handleSoundCheckUpdateRequest_];

  id v122 = [(HMDHome *)self administratorHandler];
  uint64_t v123 = *MEMORY[0x1E4F2D768];
  unint64_t v124 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v449[0] = v124;
  uint64_t v125 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v449[1] = v125;
  uint64_t v126 = [MEMORY[0x1E4F1C978] arrayWithObjects:v449 count:2];
  [v122 registerForMessage:v123 receiver:self policies:v126 selector:sel__handleHomeUpdateLocationServicesEnabledRequest_];

  if (isInternalBuild())
  {
    long long v127 = [(HMDHome *)self administratorHandler];
    uint64_t v128 = *MEMORY[0x1E4F2D760];
    id v129 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v448[0] = v129;
    id v130 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
    v448[1] = v130;
    id v131 = [MEMORY[0x1E4F1C978] arrayWithObjects:v448 count:2];
    [v127 registerForMessage:v128 receiver:self policies:v131 selector:sel__handleHomeUpdateDidOnboardLocationServicesRequest_];
  }
  if (!isWatch())
  {
    long long v132 = [(HMDHome *)self administratorHandler];
    long long v133 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v447[0] = v133;
    long long v134 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:6];
    v447[1] = v134;
    long long v135 = [MEMORY[0x1E4F1C978] arrayWithObjects:v447 count:2];
    [v132 registerForMessage:@"kUpdateInvitationStateRequestKey" receiver:self policies:v135 selector:sel__handleUpdateOutgoingInvitationState_];
  }
  long long v136 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  objc_msgSend(v136, "setRoles:", objc_msgSend(v136, "roles") | 4);
  v380 = v136;
  long long v137 = (void *)[v136 copy];
  long long v138 = +[HMDUserMessagePolicy userMessagePolicyWithHome:self userPrivilege:4 remoteAccessRequired:0];
  long long v139 = [(HMDHome *)self msgDispatcher];
  id v140 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v446[0] = v140;
  v446[1] = v138;
  id v141 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
  v446[2] = v141;
  id v142 = [MEMORY[0x1E4F1C978] arrayWithObjects:v446 count:3];
  [v139 registerForMessage:@"kAddEventTriggerRequestKey" receiver:self policies:v142 selector:sel__handleAddEventTrigger_];

  int64_t v143 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v445[0] = v143;
  v445[1] = v138;
  __int16 v144 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
  v445[2] = v144;
  __int16 v145 = [MEMORY[0x1E4F1C978] arrayWithObjects:v445 count:3];
  v378 = v139;
  [v139 registerForMessage:@"kAddTimerTriggerRequestKey" receiver:self policies:v145 selector:sel__handleAddTimerTrigger_];

  uint64_t v146 = [(HMDHome *)self msgDispatcher];
  v444[0] = v137;
  v444[1] = v138;
  __int16 v147 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
  v444[2] = v147;
  id v148 = [MEMORY[0x1E4F1C978] arrayWithObjects:v444 count:3];
  [v146 registerForMessage:@"kAddTriggersInternalRequestKey" receiver:self policies:v148 selector:sel__handleAddTriggers_];

  __int16 v149 = [MEMORY[0x1E4F65548] productInfo];
  uint64_t v150 = [v149 productPlatform];

  if (v150 == 1) {
    uint64_t v151 = 5;
  }
  else {
    uint64_t v151 = 1;
  }
  id v152 = [(HMDHome *)self msgDispatcher];
  v443[0] = v137;
  v443[1] = v138;
  id v153 = +[HMDXPCMessagePolicy policyWithEntitlements:v151];
  v443[2] = v153;
  id v154 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
  v443[3] = v154;
  id v155 = [MEMORY[0x1E4F1C978] arrayWithObjects:v443 count:4];
  [v152 registerForMessage:@"kAddAccessoryRequestKey" receiver:self policies:v155 selector:sel__handleAddAccessory_];

  long long v156 = [(HMDHome *)self msgDispatcher];
  v442[0] = v137;
  v442[1] = v138;
  uint64_t v157 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
  v442[2] = v157;
  uint64_t v158 = [MEMORY[0x1E4F1C978] arrayWithObjects:v442 count:3];
  [v156 registerForMessage:@"kAddAccessoriesInternalRequestKey" receiver:self policies:v158 selector:sel__handleAddAccessories_];

  id v159 = [(HMDHome *)self msgDispatcher];
  uint64_t v160 = *MEMORY[0x1E4F2D7B0];
  id v161 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v441[0] = v161;
  v441[1] = v138;
  uint64_t v162 = [MEMORY[0x1E4F1C978] arrayWithObjects:v441 count:2];
  [v159 registerForMessage:v160 receiver:self policies:v162 selector:sel__handleUserConsentResponseForAccessory_];

  uint64_t v163 = [(HMDHome *)self msgDispatcher];
  id v164 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v440[0] = v164;
  v440[1] = v138;
  id v165 = [MEMORY[0x1E4F1C978] arrayWithObjects:v440 count:2];
  [v163 registerForMessage:@"kContinuePairingAccessoryRequestKey" receiver:self policies:v165 selector:sel__handleContinuePairingAccessory_];

  id v166 = [(HMDHome *)self msgDispatcher];
  uint64_t v167 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v439[0] = v167;
  v439[1] = v138;
  uint64_t v168 = [MEMORY[0x1E4F1C978] arrayWithObjects:v439 count:2];
  [v166 registerForMessage:@"kCancelPairingAccessoryRequestKey" receiver:self policies:v168 selector:sel__handleCancelPairingAccessory_];

  uint64_t v169 = [(HMDHome *)self msgDispatcher];
  __int16 v170 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v438[0] = v170;
  v438[1] = v137;
  v438[2] = v138;
  id v171 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:4];
  v438[3] = v171;
  id v172 = [MEMORY[0x1E4F1C978] arrayWithObjects:v438 count:4];
  [v169 registerForMessage:@"kRemoveAccessoryRequestKey" receiver:self policies:v172 selector:sel__handleRemoveAccessoryMessage_];

  id v173 = [(HMDHome *)self administratorHandler];
  uint64_t v174 = *MEMORY[0x1E4F2D690];
  long long v175 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v437[0] = v175;
  v437[1] = v137;
  v437[2] = v138;
  int v176 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:4];
  v437[3] = v176;
  id v177 = [MEMORY[0x1E4F1C978] arrayWithObjects:v437 count:4];
  [v173 registerForMessage:v174 receiver:self policies:v177 selector:sel_handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage_];

  uint64_t v178 = [(HMDHome *)self msgDispatcher];
  v436[0] = v137;
  v436[1] = v384;
  long long v179 = [MEMORY[0x1E4F1C978] arrayWithObjects:v436 count:2];
  [v178 registerForMessage:@"HMDHomeRequestCommissioningCertificatesMessage" receiver:self policies:v179 selector:sel_handleCommissioningCertificateRequest_];

  id v180 = [(HMDHome *)self msgDispatcher];
  v435[0] = v137;
  v435[1] = v138;
  long long v181 = [MEMORY[0x1E4F1C978] arrayWithObjects:v435 count:2];
  [v180 registerForMessage:@"HMDHomeNotificationPairingCompletionMessage" receiver:self policies:v181 selector:sel_handleMatterPairingCompletionNotification_];

  uint64_t v182 = [(HMDHome *)self msgDispatcher];
  id v183 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v434[0] = v183;
  v434[1] = v138;
  id v184 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
  v434[2] = v184;
  id v185 = [MEMORY[0x1E4F1C978] arrayWithObjects:v434 count:3];
  [v182 registerForMessage:@"kInviteUsersRequestKey" receiver:self policies:v185 selector:sel__handleUserInvitations_];

  id v186 = [(HMDHome *)self administratorHandler];
  uint64_t v187 = *MEMORY[0x1E4F2D218];
  id v188 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v433[0] = v188;
  id v189 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v433[1] = v189;
  v433[2] = v384;
  v433[3] = v137;
  id v190 = [MEMORY[0x1E4F1C978] arrayWithObjects:v433 count:4];
  [v186 registerForMessage:v187 receiver:self policies:v190 selector:sel__handleEnableMultiUserRequest_];

  id v191 = [(HMDHome *)self localCapabilitiesDataSource];
  LODWORD(v187) = [v191 isResidentCapable];

  if (v187)
  {
    long long v192 = [(HMDHome *)self msgDispatcher];
    v432[0] = v137;
    v432[1] = v138;
    long long v193 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
    v432[2] = v193;
    long long v194 = [MEMORY[0x1E4F1C978] arrayWithObjects:v432 count:3];
    [v192 registerForMessage:@"kAddHomeInvitesInternalRequestKey" receiver:self policies:v194 selector:sel__handleOutgoingInvitations_];

    long long v195 = [(HMDHome *)self msgDispatcher];
    v431[0] = v137;
    v431[1] = v138;
    long long v196 = [MEMORY[0x1E4F1C978] arrayWithObjects:v431 count:2];
    [v195 registerForMessage:@"HMDHomeCreateUniquePSKClientConfigurationRequestKey" receiver:self policies:v196 selector:sel__handleCreateUniquePSKClientConfiguration_];

    long long v197 = [(HMDHome *)self msgDispatcher];
    v430[0] = v137;
    v430[1] = v138;
    long long v198 = [MEMORY[0x1E4F1C978] arrayWithObjects:v430 count:2];
    [v197 registerForMessage:@"HMDHomeRemoveClientConfigurationRequestKey" receiver:self policies:v198 selector:sel__handleRemoveClientConfiguration_];
  }
  if (!isWatch())
  {
    long long v199 = [(HMDHome *)self msgDispatcher];
    id v200 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
    v429[0] = v200;
    v429[1] = v138;
    long long v201 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
    v429[2] = v201;
    long long v202 = [MEMORY[0x1E4F1C978] arrayWithObjects:v429 count:3];
    [v199 registerForMessage:@"kHomeLocationUpdatedNotificationKey" receiver:self policies:v202 selector:sel__handleHomeLocationUpdateFromSharedAdmin_];
  }
  if (isInternalBuild())
  {
    long long v203 = [(HMDHome *)self msgDispatcher];
    uint64_t v204 = *MEMORY[0x1E4F2D2B0];
    id v205 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v428[0] = v205;
    long long v206 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
    v428[1] = v206;
    long long v207 = [MEMORY[0x1E4F1C978] arrayWithObjects:v428 count:2];
    [v203 registerForMessage:v204 receiver:self policies:v207 selector:sel__handleSetMinimumNetworkRouterHomeKitVersion_];

    long long v208 = [(HMDHome *)self msgDispatcher];
    uint64_t v209 = *MEMORY[0x1E4F2D2A8];
    id v210 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v427[0] = v210;
    uint64_t v211 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
    v427[1] = v211;
    v212 = [MEMORY[0x1E4F1C978] arrayWithObjects:v427 count:2];
    [v208 registerForMessage:v209 receiver:self policies:v212 selector:sel__handleSetMinHomeKitVersionForAccessoryNetworkProtectionChange_];
  }
  uint64_t v213 = v383;
  v214 = v384;
  if (isInternalBuild() && isiOSDevice())
  {
    v215 = [(HMDHome *)self msgDispatcher];
    uint64_t v216 = *MEMORY[0x1E4F2D6D0];
    __int16 v217 = +[HMDXPCMessagePolicy policyWithEntitlements:1049605];
    v426[0] = v217;
    uint64_t v218 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
    v426[1] = v218;
    __int16 v219 = [MEMORY[0x1E4F1C978] arrayWithObjects:v426 count:2];
    [v215 registerForMessage:v216 receiver:self policies:v219 selector:sel__handleRetrieveHomeLocationForFeedback_];

    uint64_t v213 = v383;
    v214 = v384;
  }

  id v220 = [(HMDHome *)self msgDispatcher];
  __int16 v221 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v425[0] = v221;
  v425[1] = v213;
  uint64_t v222 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v425[2] = v222;
  id v223 = [MEMORY[0x1E4F1C978] arrayWithObjects:v425 count:3];
  [v220 registerForMessage:@"kUpdateUserPresenceStatusConsentRequestKey" receiver:self policies:v223 selector:sel__handleUpdatePresenceConsent_];

  uint64_t v224 = [(HMDHome *)self msgDispatcher];
  uint64_t v225 = *MEMORY[0x1E4F2D6C8];
  uint64_t v226 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v424[0] = v226;
  uint64_t v227 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v424[1] = v227;
  uint64_t v228 = [MEMORY[0x1E4F1C978] arrayWithObjects:v424 count:2];
  [v224 registerForMessage:v225 receiver:self policies:v228 selector:sel__handleRetrieveAsyncResults_];

  uint64_t v229 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  objc_msgSend(v229, "setRoles:", objc_msgSend(v229, "roles") | 6);
  id v230 = (void *)[v229 copy];
  uint64_t v231 = [(HMDHome *)self msgDispatcher];
  id v232 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v423[0] = v232;
  v423[1] = v230;
  v423[2] = v214;
  id v233 = +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:1];
  v423[3] = v233;
  long long v234 = [MEMORY[0x1E4F1C978] arrayWithObjects:v423 count:4];
  [v231 registerForMessage:@"kExecuteActionSetRequestKey" receiver:self policies:v234 selector:sel__handleExecuteActionSet_];

  int v235 = [(HMDHome *)self msgDispatcher];
  uint64_t v236 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v422[0] = v236;
  v422[1] = v230;
  v422[2] = v384;
  uint64_t v237 = +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:1];
  v422[3] = v237;
  long long v238 = [MEMORY[0x1E4F1C978] arrayWithObjects:v422 count:4];
  [v235 registerForMessage:@"kMultipleCharacteristicWriteRequestKey" receiver:self policies:v238 selector:sel__handleMultipleCharacteristicWrite_];

  long long v239 = [(HMDHome *)self msgDispatcher];
  id v240 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v421[0] = v240;
  v421[1] = v230;
  v421[2] = v384;
  long long v241 = +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:1];
  v421[3] = v241;
  long long v242 = [MEMORY[0x1E4F1C978] arrayWithObjects:v421 count:4];
  [v239 registerForMessage:@"kMultipleCharacteristicReadRequestKey" receiver:self policies:v242 selector:sel__handleMultipleCharacteristicRead_];

  id v243 = [(HMDHome *)self msgDispatcher];
  v420[0] = v230;
  v420[1] = v384;
  uint64_t v244 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v420[2] = v244;
  id v245 = +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:1];
  v420[3] = v245;
  uint64_t v246 = [MEMORY[0x1E4F1C978] arrayWithObjects:v420 count:4];
  [v243 registerForMessage:@"kCharacteristicWriteRequestKey" receiver:self policies:v246 selector:sel__handleCharacteristicWrite_];

  id v247 = [(HMDHome *)self msgDispatcher];
  v419[0] = v230;
  v419[1] = v384;
  int v248 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v419[2] = v248;
  int v249 = +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:1];
  v419[3] = v249;
  __int16 v250 = [MEMORY[0x1E4F1C978] arrayWithObjects:v419 count:4];
  [v247 registerForMessage:@"kCharacteristicReadRequestKey" receiver:self policies:v250 selector:sel__handleCharacteristicRead_];

  int v251 = [(HMDHome *)self msgDispatcher];
  int v252 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v418[0] = v252;
  v418[1] = v230;
  v418[2] = v383;
  uint64_t v253 = +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:1];
  v418[3] = v253;
  uint64_t v254 = [MEMORY[0x1E4F1C978] arrayWithObjects:v418 count:4];
  [v251 registerForMessage:@"kCharacteristicEnableNotificationRequestKey" receiver:self policies:v254 selector:sel__handleCharacteristicEnableNotification_];

  if (!isWatch())
  {
    id v255 = [(HMDHome *)self msgDispatcher];
    v417[0] = v230;
    v417[1] = v384;
    long long v256 = [MEMORY[0x1E4F1C978] arrayWithObjects:v417 count:2];
    [v255 registerForMessage:@"kModifyCharacterisiticNotificationsRequestKey" receiver:self policies:v256 selector:sel__handleModifyCharacteristicNotifications_];
  }
  id v257 = [(HMDHome *)self msgDispatcher];
  v416[0] = v230;
  v416[1] = v384;
  long long v258 = [MEMORY[0x1E4F1C978] arrayWithObjects:v416 count:2];
  [v257 registerForMessage:@"kEnableAccessoryReachabilityNotificationRequestKey" receiver:self policies:v258 selector:sel__handleAccessoryReachabilityRegistrationAndEnable_];

  id v259 = [(HMDHome *)self msgDispatcher];
  v415[0] = v230;
  v415[1] = v384;
  id v260 = [MEMORY[0x1E4F1C978] arrayWithObjects:v415 count:2];
  [v259 registerForMessage:@"kDisableAccessoryReachabilityNotificationRequestKey" receiver:self policies:v260 selector:sel__handleAccessoryReachabilityRegistration_];

  uint64_t v261 = [(HMDHome *)self msgDispatcher];
  v414[0] = v230;
  v414[1] = v383;
  id v262 = [MEMORY[0x1E4F1C978] arrayWithObjects:v414 count:2];
  [v261 registerForMessage:@"kRequestHomeDataSyncRequestKey" receiver:self policies:v262 selector:sel__handleRequestHomeDataSync_];

  uint64_t v263 = [(HMDHome *)self msgDispatcher];
  id v264 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  v413[0] = v264;
  v413[1] = v383;
  uint64_t v265 = [MEMORY[0x1E4F1C978] arrayWithObjects:v413 count:2];
  [v263 registerForMessage:@"kCharacterisiticsChangedInternalNotificationKey" receiver:self policies:v265 selector:sel__handleCharacteristicsChangedNotification_];

  id v266 = [(HMDHome *)self msgDispatcher];
  uint64_t v267 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v412[0] = v267;
  v412[1] = v383;
  id v268 = [MEMORY[0x1E4F1C978] arrayWithObjects:v412 count:2];
  [v266 registerForMessage:@"HMHomeAllowUserManagementMessage" receiver:self policies:v268 selector:sel__handleAllowUserManagementMessage_];

  long long v269 = [(HMDHome *)self msgDispatcher];
  long long v270 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  v411[0] = v270;
  v411[1] = v383;
  long long v271 = [MEMORY[0x1E4F1C978] arrayWithObjects:v411 count:2];
  [v269 registerForMessage:@"kRemoteReachabilityChangedNotificationKey" receiver:self policies:v271 selector:sel__handleAccessoryReachabilityChange_];

  long long v272 = [(HMDHome *)self msgDispatcher];
  uint64_t v273 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  v410[0] = v273;
  v410[1] = v383;
  id v274 = [MEMORY[0x1E4F1C978] arrayWithObjects:v410 count:2];
  [v272 registerForMessage:@"HMDAccessoryResidentReachabilityNotificationRegistrationMessage" receiver:self policies:v274 selector:sel__handleAccessoryReachabilityEventNotificationsRegistration_];

  long long v275 = +[HMDRemoteMessagePolicy defaultPolicy];
  [v275 setRequiresSecureMessage:1];
  [v275 setRoles:3];
  v381 = v275;
  uint64_t v276 = [v275 copy];
  long long v277 = [(HMDHome *)self msgDispatcher];
  long long v278 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v409[0] = v278;
  v409[1] = v276;
  v379 = (void *)v276;
  v409[2] = v384;
  uint64_t v279 = [MEMORY[0x1E4F1C978] arrayWithObjects:v409 count:3];
  [v277 registerForMessage:@"kConfirmExecuteTriggerRequestKey" receiver:self policies:v279 selector:sel__handleExecuteConfirmationOfTrigger_];

  id v280 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  [v280 setRoles:4];
  uint64_t v281 = (void *)[v280 copy];
  id v282 = [(HMDHome *)self msgDispatcher];
  v408[0] = v281;
  v408[1] = v383;
  long long v283 = [MEMORY[0x1E4F1C978] arrayWithObjects:v408 count:2];
  [v282 registerForMessage:@"kPredicateEvaluatePredicateRequestKey" receiver:self policies:v283 selector:sel_handleEvaluatePredicateMessage_];

  long long v284 = [(HMDHome *)self msgDispatcher];
  uint64_t v285 = *MEMORY[0x1E4F2D750];
  long long v286 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v407[0] = v286;
  v407[1] = v382;
  long long v287 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v407[2] = v287;
  long long v288 = [MEMORY[0x1E4F1C978] arrayWithObjects:v407 count:3];
  [v284 registerForMessage:v285 receiver:self policies:v288 selector:sel__handleUpdateAutomaticSoftwareUpdate_];

  uint64_t v289 = *MEMORY[0x1E4F2D758];
  int v290 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v406[0] = v290;
  v406[1] = v382;
  long long v291 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v406[2] = v291;
  long long v292 = [MEMORY[0x1E4F1C978] arrayWithObjects:v406 count:3];
  [v284 registerForMessage:v289 receiver:self policies:v292 selector:sel__handleUpdateAutomaticThirdPartyAccessorySoftwareUpdate_];

  long long v293 = [(HMDHome *)self msgDispatcher];
  long long v294 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  v405[0] = v294;
  v405[1] = v384;
  long long v295 = [MEMORY[0x1E4F1C978] arrayWithObjects:v405 count:2];
  [v293 registerForMessage:@"HMDHomeQueryResidentReachabilityForAccessoriesMessageKey" receiver:self policies:v295 selector:sel__handleQueryResidentReachabilityForAccessories_];

  long long v296 = [(HMDHome *)self msgDispatcher];
  uint64_t v297 = *MEMORY[0x1E4F2D238];
  long long v298 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v404[0] = v298;
  v404[1] = v383;
  long long v299 = [MEMORY[0x1E4F1C978] arrayWithObjects:v404 count:2];
  [v296 registerForMessage:v297 receiver:self policies:v299 selector:sel_executeActionsFromMessage_];

  long long v300 = [(HMDHome *)self localCapabilitiesDataSource];
  LODWORD(v297) = [v300 supportsHomeInvitation];

  if (v297)
  {
    long long v301 = +[HMDRemoteMessagePolicy defaultPolicy];
    [v301 setRequiresSecureMessage:0];
    [v301 setRequiresAccountMessage:0];
    [v301 setTransportRestriction:-1];
    v302 = (void *)[v301 copy];
    v303 = [(HMDHome *)self msgDispatcher];
    v403[0] = v302;
    id v304 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
    v403[1] = v304;
    __int16 v305 = [MEMORY[0x1E4F1C978] arrayWithObjects:v403 count:2];
    [v303 registerForMessage:@"kUpdateHomeInvitationStateInternalRequestKey" receiver:self policies:v305 selector:sel__handleUpdateRequestForHomeInvitationFromInvitee_];
  }
  id v306 = [(HMDHome *)self localCapabilitiesDataSource];
  int v307 = [v306 supportsHomeNotificationEnablement];

  if (v307)
  {
    v308 = [(HMDHome *)self msgDispatcher];
    uint64_t v309 = *MEMORY[0x1E4F2ECB8];
    id v310 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v402[0] = v310;
    v402[1] = v383;
    v311 = [MEMORY[0x1E4F1C978] arrayWithObjects:v402 count:2];
    [v308 registerForMessage:v309 receiver:self policies:v311 selector:sel__handleEnableNotifications_];
  }
  v312 = [(HMDHome *)self msgDispatcher];
  v313 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  v401[0] = v313;
  v401[1] = v384;
  id v314 = [MEMORY[0x1E4F1C978] arrayWithObjects:v401 count:2];
  [v312 registerForMessage:@"kMediaPropertiesWriteRequestKey" receiver:self policies:v314 selector:sel__handleMediaPropertiesWrite_];

  id v315 = [(HMDHome *)self msgDispatcher];
  id v316 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  v400[0] = v316;
  v400[1] = v384;
  id v317 = [MEMORY[0x1E4F1C978] arrayWithObjects:v400 count:2];
  [v315 registerForMessage:@"kMediaPropertiesReadRequestKey" receiver:self policies:v317 selector:sel__handleMediaPropertiesRead_];

  v318 = [(HMDHome *)self msgDispatcher];
  long long v319 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v399[0] = v319;
  v399[1] = v382;
  long long v320 = [MEMORY[0x1E4F1C978] arrayWithObjects:v399 count:2];
  [v318 registerForMessage:@"kStartDiscoveringSymptomsForNearbyDevicesRequestKey" receiver:self policies:v320 selector:sel__handleStartDiscoveringSymptomsForNearbyDevicesMessage_];

  long long v321 = [(HMDHome *)self msgDispatcher];
  long long v322 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v398[0] = v322;
  v398[1] = v382;
  long long v323 = [MEMORY[0x1E4F1C978] arrayWithObjects:v398 count:2];
  [v321 registerForMessage:@"kStopDiscoveringSymptomsForNearbyDevicesRequestKey" receiver:self policies:v323 selector:sel__handleStopDiscoveringSymptomsForNearbyDevicesMessage_];

  long long v324 = [(HMDHome *)self msgDispatcher];
  long long v325 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v397[0] = v325;
  long long v326 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v397[1] = v326;
  v397[2] = v383;
  long long v327 = [MEMORY[0x1E4F1C978] arrayWithObjects:v397 count:3];

  [v324 registerForMessage:*MEMORY[0x1E4F2E260] receiver:self policies:v327 selector:sel__handleAssistantAccessControlUpdate_];
  [v324 registerForMessage:*MEMORY[0x1E4F2E2F0] receiver:self policies:v327 selector:sel__handleMediaContentProfileAccessControlUpdate_];
  v377 = v324;
  [v324 registerForMessage:*MEMORY[0x1E4F2E2D8] receiver:self policies:v327 selector:sel__handleUserListeningHistoryUpdateControlUpdatedAccessoryUUIDs_];
  long long v328 = [(HMDHome *)self msgDispatcher];
  long long v329 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  v396[0] = v329;
  v396[1] = v383;
  long long v330 = [MEMORY[0x1E4F1C978] arrayWithObjects:v396 count:2];
  [v328 registerForMessage:@"HMDUCM.rsr" receiver:self policies:v330 selector:sel__handleRemoteUserClientCloudShareRequest_];

  long long v331 = [(HMDHome *)self msgDispatcher];
  long long v332 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  v395[0] = v332;
  v395[1] = v383;
  long long v333 = [MEMORY[0x1E4F1C978] arrayWithObjects:v395 count:2];
  [v331 registerForMessage:@"HMDUCM.rRepr" receiver:self policies:v333 selector:sel__handleRemoteUserClientCloudShareRepairRequest_];

  if (isInternalBuild())
  {
    long long v334 = [(HMDHome *)self msgDispatcher];
    uint64_t v335 = *MEMORY[0x1E4F2D1E8];
    long long v336 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v394[0] = v336;
    v394[1] = v382;
    long long v337 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
    v394[2] = v337;
    long long v338 = [MEMORY[0x1E4F1C978] arrayWithObjects:v394 count:3];
    [v334 registerForMessage:v335 receiver:self policies:v338 selector:sel__handleConfirmResidentRequest_];
  }
  [(HMDHome *)self _registerThreadResidentCommissioningMessageHandlers];
  long long v339 = [(HMDHome *)self msgDispatcher];
  uint64_t v340 = *MEMORY[0x1E4F2D250];
  long long v341 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v393 = v341;
  long long v342 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v393 count:1];
  [v339 registerForMessage:v340 receiver:self policies:v342 selector:sel__handleFetchLastModifiedServiceOfType_];

  if (isInternalBuild())
  {
    v343 = [(HMDHome *)self msgDispatcher];
    uint64_t v344 = *MEMORY[0x1E4F2D728];
    v345 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v392 = v345;
    v346 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v392 count:1];
    [v343 registerForMessage:v344 receiver:self policies:v346 selector:sel__handleTestUpgradeToROAR_];
  }
  v347 = [(HMDHome *)self msgDispatcher];
  uint64_t v348 = *MEMORY[0x1E4F2D258];
  v349 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v391 = v349;
  v350 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v391 count:1];
  [v347 registerForMessage:v348 receiver:self policies:v350 selector:sel_handleFetchLightProfileSettingsMessage_];

  v351 = [(HMDHome *)self msgDispatcher];
  v352 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  v353 = (void *)v383;
  v390[0] = v352;
  v390[1] = v383;
  v354 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v390[2] = v354;
  v355 = [MEMORY[0x1E4F1C978] arrayWithObjects:v390 count:3];
  [v351 registerForMessage:@"HMDHomeCHIPSendRemoteRequestMessage" receiver:self policies:v355 selector:sel_handleCHIPSendRemoteRequestMessage_];

  if (isInternalBuild())
  {
    v356 = +[HMDUserMessagePolicy userMessagePolicyWithHome:self userPrivilege:4 remoteAccessRequired:0];
    v357 = [(HMDHome *)self msgDispatcher];
    uint64_t v358 = *MEMORY[0x1E4F2D6B0];
    v359 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
    v389[0] = v359;
    v389[1] = v356;
    v360 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v389[2] = v360;
    v361 = [MEMORY[0x1E4F1C978] arrayWithObjects:v389 count:3];
    [v357 registerForMessage:v358 receiver:self policies:v361 selector:sel_handleResetMatterStorageRequest_];

    v353 = (void *)v383;
  }
  v362 = [(HMDHome *)self msgDispatcher];
  id v363 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  v388[0] = v363;
  v388[1] = v353;
  __int16 v364 = [MEMORY[0x1E4F1C978] arrayWithObjects:v388 count:2];
  [v362 registerForMessage:@"HMDHomeCHIPSendReportMessage" receiver:self policies:v364 selector:sel_handleCHIPSendReportMessage_];

  if (isInternalBuild())
  {
    uint64_t v365 = [(HMDHome *)self msgDispatcher];
    uint64_t v366 = *MEMORY[0x1E4F2D6F0];
    v367 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
    v387[0] = v367;
    v368 = +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:1];
    v387[1] = v368;
    v369 = [MEMORY[0x1E4F1C978] arrayWithObjects:v387 count:2];
    [v365 registerForMessage:v366 receiver:self policies:v369 selector:sel_handleSetPreferredPrimaryMessage_];
  }
  v370 = [(HMDHome *)self msgDispatcher];
  uint64_t v371 = *MEMORY[0x1E4F2D260];
  v372 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v386 = v372;
  v373 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v386 count:1];
  [v370 registerForMessage:v371 receiver:self policies:v373 selector:sel__handleFetchTriggerNameRequest_];

  if (isInternalBuild())
  {
    v374 = [(HMDHome *)self msgDispatcher];
    v375 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v385 = v375;
    v376 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v385 count:1];
    [v374 registerForMessage:@"HomeUtil.Command.Wallet.RollReaderKey" receiver:self policies:v376 selector:sel__handleRollReaderKey_];
  }
}

- (id)resolveReceiverForMessageTargetUUID:(id)a3
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self uuid];
  int v6 = [v5 isEqual:v4];

  if (v6)
  {
    uint64_t v7 = self;
  }
  else
  {
    int v8 = [(HMDHome *)self roomWithUUID:v4];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v7 = v9;
    }
    else
    {
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      uint64_t v10 = [(HMDHome *)self appleMediaAccessories];
      uint64_t v11 = [v10 countByEnumeratingWithState:&v37 objects:v42 count:16];
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v9 = 0;
        uint64_t v13 = *(void *)v38;
        while (2)
        {
          uint64_t v14 = 0;
          long long v15 = v9;
          do
          {
            if (*(void *)v38 != v13) {
              objc_enumerationMutation(v10);
            }
            int v16 = *(void **)(*((void *)&v37 + 1) + 8 * v14);
            long long v17 = [v16 settingsController];
            uint64_t v9 = [v17 messageHandler];

            long long v18 = [(HMDHome *)v9 messageTargetUUID];
            if ([v18 isEqual:v4])
            {

LABEL_27:
              uint64_t v9 = v9;

LABEL_30:
              uint64_t v7 = v9;
              goto LABEL_31;
            }
            unint64_t v19 = [v16 settingsController];
            uint64_t v20 = [v19 settingForUUID:v4];

            if (v20) {
              goto LABEL_27;
            }
            ++v14;
            long long v15 = v9;
          }
          while (v12 != v14);
          uint64_t v12 = [v10 countByEnumeratingWithState:&v37 objects:v42 count:16];
          if (v12) {
            continue;
          }
          break;
        }
      }
      else
      {
        uint64_t v9 = 0;
      }

      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      uint64_t v21 = [(HMDHome *)self mediaSystems];
      uint64_t v22 = [v21 countByEnumeratingWithState:&v33 objects:v41 count:16];
      if (v22)
      {
        uint64_t v23 = v22;
        uint64_t v24 = *(void *)v34;
        while (2)
        {
          uint64_t v25 = 0;
          uint64_t v26 = v9;
          do
          {
            if (*(void *)v34 != v24) {
              objc_enumerationMutation(v21);
            }
            id v27 = *(void **)(*((void *)&v33 + 1) + 8 * v25);
            uint64_t v28 = [v27 settingsController];
            uint64_t v9 = [v28 messageHandler];

            uint64_t v29 = [(HMDHome *)v9 messageTargetUUID];
            if ([v29 isEqual:v4])
            {

LABEL_29:
              uint64_t v9 = v9;

              goto LABEL_30;
            }
            uint64_t v30 = [v27 settingsController];
            uint64_t v31 = [v30 settingForUUID:v4];

            if (v31) {
              goto LABEL_29;
            }
            ++v25;
            uint64_t v26 = v9;
          }
          while (v23 != v25);
          uint64_t v23 = [v21 countByEnumeratingWithState:&v33 objects:v41 count:16];
          if (v23) {
            continue;
          }
          break;
        }
      }

      uint64_t v7 = 0;
    }
LABEL_31:
  }
  return v7;
}

- (void)notifyClientOfVendorInfoUpdatedForManufacturers:(id)a3 withCompletion:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  int v8 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __74__HMDHome_notifyClientOfVendorInfoUpdatedForManufacturers_withCompletion___block_invoke;
  block[3] = &unk_1E6A193D0;
  void block[4] = self;
  id v12 = v6;
  id v13 = v7;
  id v9 = v7;
  id v10 = v6;
  dispatch_async(v8, block);
}

void __74__HMDHome_notifyClientOfVendorInfoUpdatedForManufacturers_withCompletion___block_invoke(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v2 = [*(id *)(a1 + 32) accessories];
  long long v17 = (void *)[v2 copy];

  uint64_t v3 = [MEMORY[0x1E4F1CA48] array];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v14 = a1;
  id obj = *(id *)(a1 + 40);
  uint64_t v18 = [obj countByEnumeratingWithState:&v23 objects:v28 count:16];
  if (v18)
  {
    uint64_t v16 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        if (*(void *)v24 != v16) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void *)(*((void *)&v23 + 1) + 8 * i);
        long long v19 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        id v6 = v17;
        uint64_t v7 = [v6 countByEnumeratingWithState:&v19 objects:v27 count:16];
        if (v7)
        {
          uint64_t v8 = v7;
          uint64_t v9 = *(void *)v20;
          do
          {
            for (uint64_t j = 0; j != v8; ++j)
            {
              if (*(void *)v20 != v9) {
                objc_enumerationMutation(v6);
              }
              uint64_t v11 = *(void **)(*((void *)&v19 + 1) + 8 * j);
              id v12 = [v11 manufacturer];
              uint64_t v13 = [v12 caseInsensitiveCompare:v5];

              if (!v13) {
                [v3 addObject:v11];
              }
            }
            uint64_t v8 = [v6 countByEnumeratingWithState:&v19 objects:v27 count:16];
          }
          while (v8);
        }
      }
      uint64_t v18 = [obj countByEnumeratingWithState:&v23 objects:v28 count:16];
    }
    while (v18);
  }

  [*(id *)(v14 + 32) _notifyClientsOfAccessoryInfoUpdatedForAccessories:v3 shouldRefreshBadge:0 withCompletion:*(void *)(v14 + 48)];
}

- (void)resetConfiguration
{
  [(HMDHome *)self unconfigure];
  uint64_t v3 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __29__HMDHome_resetConfiguration__block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v3, block);
}

void __29__HMDHome_resetConfiguration__block_invoke(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v2 = [*(id *)(a1 + 32) accessories];
  uint64_t v3 = (void *)MEMORY[0x1D9452090]();
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    long long v19 = v6;
    __int16 v20 = 2112;
    long long v21 = v2;
    _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@resetConfiguration - removing accessories %@", buf, 0x16u);
  }
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v7 = v2;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v14 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        objc_msgSend(*(id *)(a1 + 32), "removeAccessory:", v12, (void)v13);
        [v12 unconfigure];
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v9);
  }
}

- (void)evaluateShouldRelaunchAndSetRelaunch
{
  uint64_t v3 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __47__HMDHome_evaluateShouldRelaunchAndSetRelaunch__block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v3, block);
}

uint64_t __47__HMDHome_evaluateShouldRelaunchAndSetRelaunch__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _evaluateShouldRelaunchAndSetRelaunch];
}

- (void)evaluateResidentUpdate
{
  uint64_t v3 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __33__HMDHome_evaluateResidentUpdate__block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v3, block);
}

uint64_t __33__HMDHome_evaluateResidentUpdate__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _evaluateNetworkProtectionAndRouterManagement];
}

- (void)reEvaluateHomeHubState
{
  uint64_t v3 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __33__HMDHome_reEvaluateHomeHubState__block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v3, block);
}

void __33__HMDHome_reEvaluateHomeHubState__block_invoke(uint64_t a1)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  id v2 = [*(id *)(a1 + 32) residentDeviceManager];
  uint64_t v3 = [v2 residentDevices];

  uint64_t v4 = 2 * ([v3 count] != 0);
  uint64_t v5 = [*(id *)(a1 + 32) residentDeviceManager];
  id v6 = [v5 primaryResidentDevice];

  if ([v6 isEnabled] && objc_msgSend(v6, "isReachable")) {
    uint64_t v4 = 1;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (*(void *)(v7 + 736) != v4)
  {
    *(void *)(v7 + 736) = v4;
    uint64_t v8 = (void *)MEMORY[0x1E4F65480];
    uint64_t v9 = *MEMORY[0x1E4F2D2A0];
    uint64_t v15 = *MEMORY[0x1E4F2D298];
    uint64_t v10 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "homeHubState"));
    v16[0] = v10;
    uint64_t v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v16 forKeys:&v15 count:1];
    id v12 = [v8 messageWithName:v9 messagePayload:v11];

    long long v13 = [*(id *)(a1 + 32) msgDispatcher];
    long long v14 = [*(id *)(a1 + 32) uuid];
    [v13 sendMessage:v12 target:v14];
  }
}

- (id)matterAccessoriesWithNewFirmwareInstalledInHome
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v23 = [MEMORY[0x1E4F1CA48] array];
  if (([(HMDHome *)self isOwnerUser] || [(HMDHome *)self isSharedAdmin])
    && ![(HMDHome *)self isAutomaticThirdPartyAccessorySoftwareUpdateEnabled])
  {
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    uint64_t v3 = [(HMDHome *)self accessories];
    uint64_t v4 = (void *)[v3 copy];

    uint64_t v5 = [v4 countByEnumeratingWithState:&v25 objects:v35 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v26;
      long long v19 = self;
      uint64_t v22 = v4;
      do
      {
        uint64_t v8 = 0;
        uint64_t v20 = v6;
        do
        {
          if (*(void *)v26 != v7) {
            objc_enumerationMutation(v4);
          }
          id v9 = *(id *)(*((void *)&v25 + 1) + 8 * v8);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            uint64_t v10 = v9;
          }
          else {
            uint64_t v10 = 0;
          }
          id v11 = v10;

          if ([v11 supportsCHIP])
          {
            id v12 = [v9 softwareUpdate];
            long long v13 = v12;
            if (v12 && [v12 state] == 4)
            {
              context = (void *)MEMORY[0x1D9452090]();
              long long v14 = self;
              uint64_t v15 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
              {
                long long v16 = HMFGetLogIdentifier();
                long long v21 = [v9 uuid];
                long long v17 = [v21 UUIDString];
                *(_DWORD *)buf = 138543874;
                uint64_t v30 = v16;
                __int16 v31 = 2114;
                uint64_t v32 = v17;
                __int16 v33 = 2112;
                long long v34 = v13;
                _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@Accessory %{public}@ has a firmware recently installed, softwareUpdate %@", buf, 0x20u);

                self = v19;
                uint64_t v6 = v20;
              }

              [v23 addObject:v9];
              uint64_t v4 = v22;
            }
          }
          ++v8;
        }
        while (v6 != v8);
        uint64_t v6 = [v4 countByEnumeratingWithState:&v25 objects:v35 count:16];
      }
      while (v6);
    }
  }
  return v23;
}

- (void)_handleConfirmResidentRequest:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self residentDeviceManager];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __41__HMDHome__handleConfirmResidentRequest___block_invoke;
  v7[3] = &unk_1E6A197F0;
  id v8 = v4;
  id v6 = v4;
  [v5 confirmWithCompletionHandler:v7];
}

uint64_t __41__HMDHome__handleConfirmResidentRequest___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) respondWithPayload:0 error:a2];
}

- (id)namesOfServicesWithNewFirmwareAvailableInHome
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  id v65 = [MEMORY[0x1E4F1CA48] array];
  if ([(HMDHome *)self isOwnerUser])
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    uint64_t v3 = [(HMDHome *)self accessories];
    id v4 = (void *)[v3 copy];

    id obj = v4;
    uint64_t v5 = [v4 countByEnumeratingWithState:&v69 objects:v81 count:16];
    if (!v5) {
      goto LABEL_56;
    }
    uint64_t v7 = v5;
    uint64_t v8 = *(void *)v70;
    *(void *)&long long v6 = 138544130;
    long long v57 = v6;
    uint64_t v66 = *(void *)v70;
    while (1)
    {
      uint64_t v9 = 0;
      uint64_t v67 = v7;
      do
      {
        if (*(void *)v70 != v8) {
          objc_enumerationMutation(obj);
        }
        id v10 = *(id *)(*((void *)&v69 + 1) + 8 * v9);
        objc_opt_class();
        char isKindOfClass = objc_opt_isKindOfClass();

        if ((isKindOfClass & 1) != 0 && v10)
        {
          if (!-[HMDHome isAutomaticThirdPartyAccessorySoftwareUpdateEnabled](self, "isAutomaticThirdPartyAccessorySoftwareUpdateEnabled")|| (-[HMDHome residentDeviceManager](self, "residentDeviceManager"), v12 = objc_claimAutoreleasedReturnValue(), [v12 availableResidentDevices], long long v13 = objc_claimAutoreleasedReturnValue(), v14 = objc_msgSend(v13, "count"), v13, v12, !v14))
          {
            uint64_t v15 = self;
            id v16 = v10;
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              long long v17 = v16;
            }
            else {
              long long v17 = 0;
            }
            id v18 = v17;

            if (![v18 supportsCHIP])
            {
              uint64_t v20 = [v16 vendorInfo];
              long long v34 = [v16 firmwareVersion];
              if (v34 && [v16 isPrimary])
              {
                long long v35 = [v20 firmwareVersion];
                uint64_t v36 = [v16 firmwareVersion];
                int v37 = [v35 isGreaterThanVersion:v36];
              }
              else
              {
                int v37 = 0;
              }

              if (v20
                && ([v20 firmwareVersion], (uint64_t v38 = objc_claimAutoreleasedReturnValue()) != 0)
                && (long long v39 = (void *)v38, v40 = [v16 isPrimary], v39, (v40 & 1) != 0))
              {
                if (!v37)
                {
                  self = v15;
                  uint64_t v8 = v66;
                  goto LABEL_51;
                }
                uint64_t v41 = (void *)MEMORY[0x1D9452090]();
                id v42 = v15;
                uint64_t v43 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                {
                  long long v44 = HMFGetLogIdentifier();
                  id v60 = [v16 uuid];
                  long long v45 = [v60 UUIDString];
                  [v20 firmwareVersion];
                  long long v46 = v63 = v41;
                  [v20 productData];
                  long long v47 = v58 = v42;
                  *(_DWORD *)buf = v57;
                  id v74 = v44;
                  __int16 v75 = 2114;
                  id v76 = v45;
                  __int16 v77 = 2114;
                  uint64_t v78 = v46;
                  __int16 v79 = 2112;
                  id v80 = v47;
                  _os_log_impl(&dword_1D49D5000, v43, OS_LOG_TYPE_INFO, "%{public}@Accessory %{public}@ has a firmware update, vendor database indicates available firmware version %{public}@ for product data %@", buf, 0x2Au);

                  id v42 = v58;
                  uint64_t v41 = v63;
                }
                long long v27 = [v16 namesOfServicesShowingTilesInHomeApp];
                [v65 addObjectsFromArray:v27];
              }
              else
              {
                long long v48 = objc_msgSend(v16, "softwareUpdate", v57);
                long long v27 = v48;
                if (v48 && [v48 state] == 2)
                {
                  long long v49 = (void *)MEMORY[0x1D9452090]();
                  long long v50 = v15;
                  uint64_t v51 = HMFGetOSLogHandle();
                  if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
                  {
                    long long v64 = HMFGetLogIdentifier();
                    long long v59 = [v16 uuid];
                    [v59 UUIDString];
                    long long v52 = v61 = v49;
                    uint64_t v53 = [v16 firmwareVersion];
                    *(_DWORD *)buf = 138543874;
                    id v74 = v64;
                    __int16 v75 = 2114;
                    id v76 = v52;
                    __int16 v77 = 2114;
                    uint64_t v78 = v53;
                    _os_log_impl(&dword_1D49D5000, v51, OS_LOG_TYPE_INFO, "%{public}@Accessory %{public}@ currentFirmwareVersion %{public}@ has a firmware update", buf, 0x20u);

                    long long v49 = v61;
                  }

                  uint64_t v54 = [v16 name];
                  [v65 addObject:v54];
                }
              }
              self = v15;
              uint64_t v8 = v66;
              goto LABEL_50;
            }
            long long v19 = [v16 softwareUpdate];
            uint64_t v20 = v19;
            if (v19 && [v19 state] == 2)
            {
              long long v21 = (void *)MEMORY[0x1D9452090]();
              uint64_t v22 = v15;
              id v23 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
              {
                long long v24 = HMFGetLogIdentifier();
                [v16 uuid];
                long long v25 = v62 = v21;
                long long v26 = [v25 UUIDString];
                *(_DWORD *)buf = 138543618;
                id v74 = v24;
                __int16 v75 = 2114;
                id v76 = v26;
                _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_INFO, "%{public}@Matter accessory %{public}@ has a firmware update", buf, 0x16u);

                long long v21 = v62;
              }

              long long v27 = [v16 name];
              [v65 addObject:v27];
              self = v15;
              uint64_t v8 = v66;
              goto LABEL_50;
            }
            self = v15;
            uint64_t v8 = v66;
LABEL_51:

            uint64_t v7 = v67;
          }
        }
        else
        {
          id v28 = v10;
          objc_opt_class();
          char v29 = objc_opt_isKindOfClass();

          if ((v29 & 1) != 0
            && v10
            && ![(HMDHome *)self isAutomaticSoftwareUpdateEnabled])
          {
            id v30 = v28;
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              __int16 v31 = v30;
            }
            else {
              __int16 v31 = 0;
            }
            id v18 = v31;

            uint64_t v32 = [v18 softwareUpdate];
            uint64_t v20 = v32;
            if (!v32) {
              goto LABEL_51;
            }
            unint64_t v33 = [v32 state];
            if (v33 >= 2)
            {
              if (v33 == 2) {
                goto LABEL_49;
              }
            }
            else
            {
              if (![v18 supportsTVOSUpdateManualUpdateAvailableNotification]) {
                goto LABEL_51;
              }
LABEL_49:
              long long v27 = objc_msgSend(v18, "name", v57);
              [v65 addObject:v27];
LABEL_50:
            }
            goto LABEL_51;
          }
        }
        ++v9;
      }
      while (v7 != v9);
      uint64_t v55 = [obj countByEnumeratingWithState:&v69 objects:v81 count:16];
      uint64_t v7 = v55;
      if (!v55)
      {
LABEL_56:

        break;
      }
    }
  }
  return v65;
}

- (BOOL)_hasPairedReachableBTLEAccessories
{
  id v2 = [(HMDHome *)self hapAccessories];
  char v3 = objc_msgSend(v2, "na_any:", &__block_literal_global_872);

  return v3;
}

unint64_t __45__HMDHome__hasPairedReachableBTLEAccessories__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 hasBTLELink]) {
    unint64_t v3 = ((unint64_t)[v2 reachableTransports] >> 1) & 1;
  }
  else {
    unint64_t v3 = 0;
  }

  return v3;
}

- (void)_registerForReachabilityChangeNotificationsEnabled:(BOOL)a3 completionHandler:(id)a4
{
  BOOL v4 = a3;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  long long v6 = (void (**)(id, uint64_t))a4;
  BOOL v7 = [(HMDHome *)self isCurrentDevicePrimaryResident];
  uint64_t v8 = (void *)MEMORY[0x1D9452090]();
  uint64_t v9 = self;
  id v10 = HMFGetOSLogHandle();
  id v11 = v10;
  if (v7)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      id v12 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      char v29 = v12;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_DEBUG, "%{public}@Not updating remote accessory reachability notifications because we are the primary resident", buf, 0xCu);
    }
    v6[2](v6, 1);
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      long long v13 = HMFGetLogIdentifier();
      uint64_t v14 = HMFBooleanToString();
      *(_DWORD *)buf = 138543618;
      char v29 = v13;
      __int16 v30 = 2112;
      __int16 v31 = v14;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Setting remote accessory reachability notifications enabled to %@", buf, 0x16u);
    }
    uint64_t v15 = [(HMDHome *)v9 uuid];
    id v16 = [v15 UUIDString];

    long long v26 = @"kHomeUUID";
    long long v27 = v16;
    long long v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v27 forKeys:&v26 count:1];
    objc_initWeak((id *)buf, v9);
    if (v4) {
      id v18 = @"kEnableAccessoryReachabilityNotificationRequestKey";
    }
    else {
      id v18 = @"kDisableAccessoryReachabilityNotificationRequestKey";
    }
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __80__HMDHome__registerForReachabilityChangeNotificationsEnabled_completionHandler___block_invoke;
    void v22[3] = &unk_1E6A06990;
    objc_copyWeak(&v24, (id *)buf);
    BOOL v25 = v4;
    id v23 = v6;
    long long v19 = +[HMDRemoteMessage messageWithName:v18 messagePayload:v17 responseHandler:v22];
    uint64_t v20 = [(HMDHome *)v9 uuid];
    long long v21 = [(HMDHome *)v9 workQueue];
    [(HMDHome *)v9 redispatchToResidentMessage:v19 target:v20 responseQueue:v21];

    objc_destroyWeak(&v24);
    objc_destroyWeak((id *)buf);
  }
}

void __80__HMDHome__registerForReachabilityChangeNotificationsEnabled_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!WeakRetained) {
    goto LABEL_15;
  }
  uint64_t v8 = (void *)MEMORY[0x1D9452090]();
  id v9 = WeakRetained;
  id v10 = HMFGetOSLogHandle();
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
  if (v5)
  {
    if (!v11) {
      goto LABEL_13;
    }
    id v12 = HMFGetLogIdentifier();
    int v13 = *(unsigned __int8 *)(a1 + 48);
    int v21 = 138543874;
    uint64_t v22 = (uint64_t)v12;
    if (v13) {
      uint64_t v14 = "register";
    }
    else {
      uint64_t v14 = "de-register";
    }
    __int16 v23 = 2080;
    id v24 = v14;
    __int16 v25 = 2112;
    id v26 = v5;
    uint64_t v15 = "%{public}@Failed to %s remote accessory reachability notification with error: %@";
    id v16 = v10;
    uint32_t v17 = 32;
  }
  else
  {
    if (!v11) {
      goto LABEL_13;
    }
    uint64_t v18 = HMFGetLogIdentifier();
    id v12 = (void *)v18;
    long long v19 = "registered";
    if (!*(unsigned char *)(a1 + 48)) {
      long long v19 = "de-registered";
    }
    int v21 = 138543618;
    uint64_t v22 = v18;
    __int16 v23 = 2080;
    id v24 = v19;
    uint64_t v15 = "%{public}@Successfully %s remote accessory reachability notification";
    id v16 = v10;
    uint32_t v17 = 22;
  }
  _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, v15, (uint8_t *)&v21, v17);

LABEL_13:
  uint64_t v20 = *(void *)(a1 + 32);
  if (v20) {
    (*(void (**)(uint64_t, BOOL))(v20 + 16))(v20, v5 == 0);
  }
LABEL_15:
}

- (void)__registerForRemoteAccessoryReachabilityNotifications:(BOOL)a3 clientIdentifier:(id)a4
{
  BOOL v4 = a3;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v6 = a4;
  BOOL v7 = [(HMDHome *)self primaryResident];

  if (!v7)
  {
    id v10 = (void *)MEMORY[0x1D9452090]();
    BOOL v11 = self;
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      int v13 = HMFGetLogIdentifier();
      uint64_t v14 = [(HMDHome *)v11 name];
      int v24 = 138543618;
      __int16 v25 = v13;
      __int16 v26 = 2112;
      uint64_t v27 = v14;
      uint64_t v15 = "%{public}@No resident for home: %@, skipping remote reachability";
      goto LABEL_11;
    }
LABEL_12:

    goto LABEL_13;
  }
  if (v4)
  {
    uint64_t v8 = [(HMDHome *)self accessories];
    int v9 = objc_msgSend(v8, "hmf_isEmpty");

    if (v9)
    {
      id v10 = (void *)MEMORY[0x1D9452090]();
      BOOL v11 = self;
      id v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        int v13 = HMFGetLogIdentifier();
        uint64_t v14 = [(HMDHome *)v11 name];
        int v24 = 138543618;
        __int16 v25 = v13;
        __int16 v26 = 2112;
        uint64_t v27 = v14;
        uint64_t v15 = "%{public}@No accessories in home: %@";
LABEL_11:
        _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, v15, (uint8_t *)&v24, 0x16u);

        goto LABEL_12;
      }
      goto LABEL_12;
    }
  }
  id v16 = (void *)MEMORY[0x1D9452090]();
  uint32_t v17 = self;
  uint64_t v18 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    long long v19 = HMFGetLogIdentifier();
    uint64_t v20 = HMFEnabledStatusToString();
    int v24 = 138543874;
    __int16 v25 = v19;
    __int16 v26 = 2112;
    uint64_t v27 = v20;
    __int16 v28 = 2112;
    id v29 = v6;
    _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@Remote accessory reachability notification: %@ clientIdentifier: %@", (uint8_t *)&v24, 0x20u);
  }
  int v21 = [(HMDHome *)v17 stagedRemoteReachabilityRegistration];
  uint64_t v22 = [MEMORY[0x1E4F65408] BOOLeanWithBool:v4];
  [v21 stageValue:v22];

  __int16 v23 = [MEMORY[0x1E4F65520] sharedPowerLogger];
  [v23 reportRemoteReachabilityRegistrationEvent:v4 clientIdentifier:v6];

LABEL_13:
}

- (BOOL)currentRemoteReachabilityRegistration
{
  id v2 = [(HMDHome *)self stagedRemoteReachabilityRegistration];
  unint64_t v3 = [v2 value];

  LOBYTE(v2) = [v3 BOOLValue];
  return (char)v2;
}

- (void)readProfileState:(id)a3 viaDevice:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __38__HMDHome_readProfileState_viaDevice___block_invoke;
  block[3] = &unk_1E6A19668;
  void block[4] = self;
  id v12 = v6;
  id v13 = v7;
  id v9 = v7;
  id v10 = v6;
  dispatch_async(v8, block);
}

void __38__HMDHome_readProfileState_viaDevice___block_invoke(void **a1)
{
}

- (void)checkTimerTriggers
{
  unint64_t v3 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __29__HMDHome_checkTimerTriggers__block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v3, block);
}

void __29__HMDHome_checkTimerTriggers__block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v1 = objc_msgSend(*(id *)(a1 + 32), "triggers", 0);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v8;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v8 != v4) {
          objc_enumerationMutation(v1);
        }
        id v6 = *(void **)(*((void *)&v7 + 1) + 8 * v5);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          [v6 completeConfiguration];
        }
        ++v5;
      }
      while (v3 != v5);
      uint64_t v3 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v3);
  }
}

- (id)migrateOwnedTriggers
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  __int16 v28 = [MEMORY[0x1E4F1CA48] array];
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v3 = [(HMDHome *)self triggers];
  uint64_t v4 = [v3 countByEnumeratingWithState:&v29 objects:v39 count:16];
  if (!v4) {
    goto LABEL_17;
  }
  uint64_t v6 = v4;
  uint64_t v7 = *(void *)v30;
  *(void *)&long long v5 = 138543618;
  long long v27 = v5;
  do
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      if (*(void *)v30 != v7) {
        objc_enumerationMutation(v3);
      }
      long long v9 = *(void **)(*((void *)&v29 + 1) + 8 * i);
      long long v10 = [(HMDHome *)self ownedTriggers];
      BOOL v11 = [v9 uuid];
      if (([v10 containsObject:v11] & 1) == 0)
      {

        continue;
      }
      uint64_t v12 = [v9 owningDevice];
      if (v12)
      {
        id v13 = (void *)v12;
        char v14 = [v9 isOwnedByThisDevice];

        if (v14) {
          continue;
        }
      }
      else
      {
      }
      uint64_t v15 = [(HMDHome *)self currentUser];
      [v9 setOwner:v15];

      id v16 = [(HMDHome *)self currentDevice];
      [v9 setOwningDevice:v16];

      uint32_t v17 = [v9 uuid];
      uint64_t v18 = [v17 UUIDString];
      [v28 addObject:v18];

      long long v19 = (void *)MEMORY[0x1D9452090]();
      uint64_t v20 = self;
      int v21 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        uint64_t v22 = HMFGetLogIdentifier();
        *(_DWORD *)buf = v27;
        uint64_t v36 = v22;
        __int16 v37 = 2112;
        uint64_t v38 = v9;
        _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@Updating owning device for trigger %@", buf, 0x16u);
      }
    }
    uint64_t v6 = [v3 countByEnumeratingWithState:&v29 objects:v39 count:16];
  }
  while (v6);
LABEL_17:

  if ([v28 count])
  {
    v33[0] = @"triggerUUID";
    v33[1] = @"kHomeUUID";
    v34[0] = v28;
    __int16 v23 = [(HMDHome *)self uuid];
    int v24 = [v23 UUIDString];
    v34[1] = v24;
    __int16 v25 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v34 forKeys:v33 count:2];
  }
  else
  {
    __int16 v25 = 0;
  }

  return v25;
}

- (id)performReadRequests:(id)a3 withRetries:(int64_t)a4 timeInterval:(double)a5 loggingObject:(id)a6
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v33 = a6;
  long long v9 = [MEMORY[0x1E4F1CA60] dictionary];
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id v10 = v8;
  uint64_t v11 = [v10 countByEnumeratingWithState:&v42 objects:v46 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v43;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v43 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = *(void **)(*((void *)&v42 + 1) + 8 * i);
        id v16 = [v15 characteristic];
        uint32_t v17 = [v16 service];
        uint64_t v18 = [v17 accessory];
        long long v19 = [v18 uuid];

        uint64_t v20 = [v9 objectForKeyedSubscript:v19];

        if (v20)
        {
          int v21 = [v9 objectForKeyedSubscript:v19];
          [v21 addObject:v15];
        }
        else
        {
          int v21 = [MEMORY[0x1E4F1CA48] arrayWithObject:v15];
          [v9 setObject:v21 forKeyedSubscript:v19];
        }
      }
      uint64_t v12 = [v10 countByEnumeratingWithState:&v42 objects:v46 count:16];
    }
    while (v12);
  }

  uint64_t v22 = [v9 allValues];
  v38[0] = MEMORY[0x1E4F143A8];
  v38[1] = 3221225472;
  v38[2] = __70__HMDHome_performReadRequests_withRetries_timeInterval_loggingObject___block_invoke;
  void v38[3] = &unk_1E6A06920;
  double v41 = a5;
  int64_t v40 = a4;
  void v38[4] = self;
  id v23 = v33;
  id v39 = v23;
  int v24 = objc_msgSend(v22, "na_map:", v38);

  __int16 v25 = (void *)MEMORY[0x1E4F7A0D8];
  __int16 v26 = (void *)MEMORY[0x1E4F7A0F0];
  long long v27 = [(HMDHome *)self workQueue];
  __int16 v28 = [v26 schedulerWithDispatchQueue:v27];
  long long v29 = [v25 combineAllFutures:v24 ignoringErrors:1 scheduler:v28];
  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 3221225472;
  void v36[2] = __70__HMDHome_performReadRequests_withRetries_timeInterval_loggingObject___block_invoke_856;
  void v36[3] = &unk_1E6A14358;
  id v37 = v23;
  id v30 = v23;
  long long v31 = [v29 flatMap:v36];

  return v31;
}

id __70__HMDHome_performReadRequests_withRetries_timeInterval_loggingObject___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)MEMORY[0x1E4F7A0D8];
  uint64_t v5 = *(void *)(a1 + 48);
  double v6 = *(double *)(a1 + 56);
  uint64_t v7 = [*(id *)(a1 + 32) workQueue];
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = __70__HMDHome_performReadRequests_withRetries_timeInterval_loggingObject___block_invoke_2;
  v13[3] = &unk_1E6A068F8;
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  id v14 = v8;
  uint64_t v15 = v9;
  id v16 = v3;
  id v10 = v3;
  uint64_t v11 = [v4 futureWithRetries:v5 timeInterval:v7 workQueue:v13 block:v6];

  return v11;
}

id __70__HMDHome_performReadRequests_withRetries_timeInterval_loggingObject___block_invoke_856(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = objc_msgSend(v3, "na_map:", &__block_literal_global_859);
  if (objc_msgSend(v4, "hmf_isEmpty"))
  {
    uint64_t v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = *(id *)(a1 + 32);
    uint64_t v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = HMFGetLogIdentifier();
      int v15 = 138543362;
      id v16 = v8;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@All read request retries failed.", (uint8_t *)&v15, 0xCu);
    }
    uint64_t v9 = (void *)MEMORY[0x1E4F7A0D8];
    id v10 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    uint64_t v11 = [v9 futureWithError:v10];
  }
  else
  {
    uint64_t v12 = (void *)MEMORY[0x1E4F7A0D8];
    id v10 = [MEMORY[0x1E4F1C9E8] dictionaryByCombiningNonOverlappingDictionaries:v4];
    uint64_t v11 = [v12 futureWithResult:v10];
  }
  uint64_t v13 = (void *)v11;

  return v13;
}

id __70__HMDHome_performReadRequests_withRetries_timeInterval_loggingObject___block_invoke_2_857(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;

  return v4;
}

id __70__HMDHome_performReadRequests_withRetries_timeInterval_loggingObject___block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    int v10 = 138543618;
    uint64_t v11 = v7;
    __int16 v12 = 2048;
    uint64_t v13 = a2;
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Performing characteristic read requests with remaining retries: %ld", (uint8_t *)&v10, 0x16u);
  }
  id v8 = [*(id *)(a1 + 40) performReadRequests:*(void *)(a1 + 48) loggingObject:*(void *)(a1 + 32)];
  return v8;
}

- (id)performWriteRequests:(id)a3 withRetries:(int64_t)a4 timeInterval:(double)a5 loggingObject:(id)a6
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v33 = a6;
  uint64_t v9 = [MEMORY[0x1E4F1CA60] dictionary];
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id v10 = v8;
  uint64_t v11 = [v10 countByEnumeratingWithState:&v42 objects:v46 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v43;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v43 != v13) {
          objc_enumerationMutation(v10);
        }
        int v15 = *(void **)(*((void *)&v42 + 1) + 8 * i);
        id v16 = [v15 characteristic];
        uint64_t v17 = [v16 service];
        uint64_t v18 = [v17 accessory];
        long long v19 = [v18 uuid];

        uint64_t v20 = [v9 objectForKeyedSubscript:v19];

        if (v20)
        {
          int v21 = [v9 objectForKeyedSubscript:v19];
          [v21 addObject:v15];
        }
        else
        {
          int v21 = [MEMORY[0x1E4F1CA48] arrayWithObject:v15];
          [v9 setObject:v21 forKeyedSubscript:v19];
        }
      }
      uint64_t v12 = [v10 countByEnumeratingWithState:&v42 objects:v46 count:16];
    }
    while (v12);
  }

  uint64_t v22 = [v9 allValues];
  v38[0] = MEMORY[0x1E4F143A8];
  v38[1] = 3221225472;
  v38[2] = __71__HMDHome_performWriteRequests_withRetries_timeInterval_loggingObject___block_invoke;
  void v38[3] = &unk_1E6A06920;
  double v41 = a5;
  int64_t v40 = a4;
  void v38[4] = self;
  id v23 = v33;
  id v39 = v23;
  int v24 = objc_msgSend(v22, "na_map:", v38);

  __int16 v25 = (void *)MEMORY[0x1E4F7A0D8];
  __int16 v26 = (void *)MEMORY[0x1E4F7A0F0];
  long long v27 = [(HMDHome *)self workQueue];
  __int16 v28 = [v26 schedulerWithDispatchQueue:v27];
  long long v29 = [v25 combineAllFutures:v24 ignoringErrors:1 scheduler:v28];
  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 3221225472;
  void v36[2] = __71__HMDHome_performWriteRequests_withRetries_timeInterval_loggingObject___block_invoke_850;
  void v36[3] = &unk_1E6A14358;
  id v37 = v23;
  id v30 = v23;
  long long v31 = [v29 flatMap:v36];

  return v31;
}

id __71__HMDHome_performWriteRequests_withRetries_timeInterval_loggingObject___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1E4F7A0D8];
  uint64_t v5 = *(void *)(a1 + 48);
  double v6 = *(double *)(a1 + 56);
  uint64_t v7 = [*(id *)(a1 + 32) workQueue];
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = __71__HMDHome_performWriteRequests_withRetries_timeInterval_loggingObject___block_invoke_2;
  v13[3] = &unk_1E6A068F8;
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  id v14 = v8;
  uint64_t v15 = v9;
  id v16 = v3;
  id v10 = v3;
  uint64_t v11 = [v4 futureWithRetries:v5 timeInterval:v7 workQueue:v13 block:v6];

  return v11;
}

id __71__HMDHome_performWriteRequests_withRetries_timeInterval_loggingObject___block_invoke_850(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = objc_msgSend(v3, "na_map:", &__block_literal_global_854);
  if (objc_msgSend(v4, "hmf_isEmpty"))
  {
    uint64_t v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = *(id *)(a1 + 32);
    uint64_t v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = HMFGetLogIdentifier();
      int v15 = 138543362;
      id v16 = v8;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@All write request retries failed.", (uint8_t *)&v15, 0xCu);
    }
    uint64_t v9 = (void *)MEMORY[0x1E4F7A0D8];
    id v10 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    uint64_t v11 = [v9 futureWithError:v10];
  }
  else
  {
    uint64_t v12 = (void *)MEMORY[0x1E4F7A0D8];
    id v10 = [MEMORY[0x1E4F1C9E8] dictionaryByCombiningNonOverlappingDictionaries:v4];
    uint64_t v11 = [v12 futureWithResult:v10];
  }
  uint64_t v13 = (void *)v11;

  return v13;
}

id __71__HMDHome_performWriteRequests_withRetries_timeInterval_loggingObject___block_invoke_2_851(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;

  return v4;
}

id __71__HMDHome_performWriteRequests_withRetries_timeInterval_loggingObject___block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    int v10 = 138543618;
    uint64_t v11 = v7;
    __int16 v12 = 2048;
    uint64_t v13 = a2;
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Performing characteristic write requests with remaining retries: %ld", (uint8_t *)&v10, 0x16u);
  }
  id v8 = [*(id *)(a1 + 40) performWriteRequests:*(void *)(a1 + 48) loggingObject:*(void *)(a1 + 32)];
  return v8;
}

- (id)performReadRequests:(id)a3 loggingObject:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = objc_alloc_init(MEMORY[0x1E4F7A0D8]);
  uint64_t v9 = [(HMDHome *)self description];
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  void v16[2] = __45__HMDHome_performReadRequests_loggingObject___block_invoke;
  v16[3] = &unk_1E6A149B8;
  id v17 = v7;
  id v10 = v8;
  id v18 = v10;
  id v19 = v6;
  id v11 = v6;
  id v12 = v7;
  [(HMDHome *)self readCharacteristicValues:v11 source:7 sourceForLogging:v9 qualityOfService:-1 withCompletionHandler:v16];

  uint64_t v13 = v19;
  id v14 = v10;

  return v14;
}

void __45__HMDHome_performReadRequests_loggingObject___block_invoke(id *a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = [a1[6] firstObject];
    id v8 = [v7 characteristic];

    id v20 = 0;
    uint64_t v9 = objc_msgSend(v6, "hmd_valueOfCharacteristic:error:", v8, &v20);
    id v10 = v20;
    if (v9)
    {
      [a1[5] finishWithResult:v6];
    }
    else
    {
      id v16 = (void *)MEMORY[0x1D9452090]();
      id v17 = a1[4];
      id v18 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        id v19 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v22 = v19;
        __int16 v23 = 2112;
        id v24 = v10;
        _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@Failed to perform read requests with error: %@", buf, 0x16u);
      }
      [a1[5] finishWithError:v10];
    }
  }
  else
  {
    id v11 = (void *)MEMORY[0x1D9452090]();
    id v12 = a1[4];
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      id v14 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v22 = v14;
      __int16 v23 = 2112;
      id v24 = v5;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Failed to perform read requests (no response payload) with error: %@", buf, 0x16u);
    }
    id v15 = a1[5];
    id v8 = [MEMORY[0x1E4F1CA98] null];
    [v15 finishWithResult:v8];
  }
}

- (id)performWriteRequests:(id)a3 loggingObject:(id)a4
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = objc_alloc_init(MEMORY[0x1E4F7A0D8]);
  uint64_t v9 = [MEMORY[0x1E4F29128] UUID];
  id v10 = (void *)MEMORY[0x1D9452090]();
  id v11 = self;
  id v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = HMFGetLogIdentifier();
    *(void *)buf = 0;
    *(void *)&buf[8] = 0;
    if (v9) {
      [v9 getUUIDBytes:buf];
    }
    else {
      *(_OWORD *)buf = *MEMORY[0x1E4F655A8];
    }
    long long v25 = *(_OWORD *)buf;
    uint64_t v14 = [v6 count];
    *(_DWORD *)buf = 138544386;
    *(void *)&uint8_t buf[4] = v13;
    *(_WORD *)&unsigned char buf[12] = 1042;
    *(_DWORD *)&buf[14] = 16;
    __int16 v27 = 2098;
    __int16 v28 = &v25;
    __int16 v29 = 2114;
    id v30 = v11;
    __int16 v31 = 2048;
    uint64_t v32 = v14;
    _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Executing write requests for request identifier: %{public,uuid_t}.16P from home: %{public}@ count: %lu for perform write requests", buf, 0x30u);
  }
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  v21[2] = __46__HMDHome_performWriteRequests_loggingObject___block_invoke;
  v21[3] = &unk_1E6A149B8;
  id v22 = v7;
  id v15 = v8;
  id v23 = v15;
  id v24 = v6;
  id v16 = v6;
  id v17 = v7;
  [(HMDHome *)v11 writeCharacteristicValues:v16 source:7 identifier:v9 transport:0 qualityOfService:-1 withCompletionHandler:v21];
  id v18 = v24;
  id v19 = v15;

  return v19;
}

void __46__HMDHome_performWriteRequests_loggingObject___block_invoke(id *a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = [a1[6] firstObject];
    id v8 = [v7 characteristic];

    id v20 = 0;
    uint64_t v9 = objc_msgSend(v6, "hmd_valueOfCharacteristic:error:", v8, &v20);
    id v10 = v20;
    if (v9)
    {
      [a1[5] finishWithResult:v6];
    }
    else
    {
      id v16 = (void *)MEMORY[0x1D9452090]();
      id v17 = a1[4];
      id v18 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        id v19 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v22 = v19;
        __int16 v23 = 2112;
        id v24 = v10;
        _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@Failed to perform write requests with error: %@", buf, 0x16u);
      }
      [a1[5] finishWithError:v10];
    }
  }
  else
  {
    id v11 = (void *)MEMORY[0x1D9452090]();
    id v12 = a1[4];
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v22 = v14;
      __int16 v23 = 2112;
      id v24 = v5;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Failed to perform write requests (no response payload) with error: %@", buf, 0x16u);
    }
    id v15 = a1[5];
    id v8 = [MEMORY[0x1E4F1CA98] null];
    [v15 finishWithResult:v8];
  }
}

- (void)writeCharacteristicValues:(id)a3 source:(unint64_t)a4 identifier:(id)a5 transport:(id)a6 qualityOfService:(int64_t)a7 withCompletionHandler:(id)a8
{
  id v15 = a3;
  id v16 = a5;
  id v17 = a6;
  id v18 = a8;
  id v19 = objc_alloc(MEMORY[0x1E4F653F0]);
  id v20 = NSString;
  int v21 = MEMORY[0x1D94505D0](self, a2);
  id v22 = [v20 stringWithFormat:@"%@, %s:%ld", v21, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/Home/HMDHome.m", 7208];
  id v37 = (id)[v19 initWithName:v22];

  __int16 v23 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __104__HMDHome_writeCharacteristicValues_source_identifier_transport_qualityOfService_withCompletionHandler___block_invoke;
  block[3] = &unk_1E6A068D0;
  unint64_t v35 = a4;
  int64_t v36 = a7;
  id v29 = v37;
  id v30 = v16;
  id v31 = v17;
  uint64_t v32 = self;
  id v33 = v15;
  id v34 = v18;
  id v24 = v18;
  id v25 = v15;
  id v26 = v17;
  id v27 = v16;
  dispatch_async(v23, block);

  __HMFActivityScopeLeave();
}

void __104__HMDHome_writeCharacteristicValues_source_identifier_transport_qualityOfService_withCompletionHandler___block_invoke(uint64_t a1)
{
  void v24[2] = *MEMORY[0x1E4F143B8];
  v23[0] = @"sourceType";
  id v2 = [NSNumber numberWithUnsignedInteger:*(void *)(a1 + 80)];
  v23[1] = @"kMultiPartResponseKey";
  v24[0] = v2;
  v24[1] = MEMORY[0x1E4F1CC28];
  id v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:v23 count:2];

  id v4 = objc_alloc(MEMORY[0x1E4F654B0]);
  uint64_t v5 = *(void *)(a1 + 88);
  id v6 = [MEMORY[0x1E4F65488] allMessageDestinations];
  id v7 = (void *)[v4 initWithName:@"kMultipleCharacteristicWriteRequestKey" qualityOfService:v5 destination:v6 payload:v3];

  [v7 setIdentifier:*(void *)(a1 + 40)];
  id v8 = (void *)MEMORY[0x1D9452090]([v7 setTransport:*(void *)(a1 + 48)]);
  id v9 = *(id *)(a1 + 56);
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    id v11 = HMFGetLogIdentifier();
    *(void *)buf = 0;
    *(void *)&buf[8] = 0;
    id v12 = [v7 identifier];

    if (v12)
    {
      uint64_t v13 = [v7 identifier];
      [v13 getUUIDBytes:buf];
    }
    else
    {
      *(_OWORD *)buf = *MEMORY[0x1E4F655A8];
    }
    long long v17 = *(_OWORD *)buf;
    unint64_t v14 = *(void *)(a1 + 80);
    if (v14 > 9) {
      id v15 = @"Unknown";
    }
    else {
      id v15 = off_1E6A07FB8[v14];
    }
    id v16 = v15;
    *(_DWORD *)buf = 138544130;
    *(void *)&uint8_t buf[4] = v11;
    *(_WORD *)&unsigned char buf[12] = 1042;
    *(_DWORD *)&buf[14] = 16;
    __int16 v19 = 2098;
    id v20 = &v17;
    __int16 v21 = 2114;
    id v22 = v16;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Issuing write requests with identifier: %{public,uuid_t}.16P, source: %{public}@", buf, 0x26u);
  }
  [*(id *)(a1 + 56) _writeCharacteristicValues:*(void *)(a1 + 64) requestMessage:v7 source:*(void *)(a1 + 80) withCompletionHandler:*(void *)(a1 + 72)];
}

- (void)regionStateUpdated
{
  id v3 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __29__HMDHome_regionStateUpdated__block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v3, block);
}

uint64_t __29__HMDHome_regionStateUpdated__block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) homeLocationHandler];
  uint64_t v3 = [v2 regionStateAtHome];

  if (v3 == 1)
  {
    id v4 = [*(id *)(a1 + 32) presenceFeeder];
    [v4 notifyDidEnterHomeRegion];
  }
  else
  {
    if (v3 != 2) {
      goto LABEL_6;
    }
    id v4 = [*(id *)(a1 + 32) presenceFeeder];
    [v4 notifyDidLeaveHomeRegion];
  }

LABEL_6:
  uint64_t v5 = *(void **)(a1 + 32);
  return [v5 _updateHomeLocation];
}

- (void)suspendedStateChangedForAccessory:(id)a3 suspendedState:(unint64_t)a4
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v7 = v6;
  }
  else {
    id v7 = 0;
  }
  id v8 = v7;

  if (v8)
  {
    if (a4 == 2)
    {
      id v9 = (void *)MEMORY[0x1D9452090]();
      id v10 = self;
      id v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        id v12 = HMFGetLogIdentifier();
        uint64_t v13 = HAPAccessorySuspendedStateDescription();
        *(_DWORD *)buf = 138543874;
        id v20 = v12;
        __int16 v21 = 2112;
        id v22 = v13;
        __int16 v23 = 2112;
        id v24 = v6;
        _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_DEBUG, "%{public}@Skipping suspended state update: '%@' for accessory %@", buf, 0x20u);
      }
    }
    else
    {
      unint64_t v14 = [(HMDHome *)self workQueue];
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      void v15[2] = __60__HMDHome_suspendedStateChangedForAccessory_suspendedState___block_invoke;
      v15[3] = &unk_1E6A17018;
      void v15[4] = self;
      unint64_t v18 = a4;
      id v16 = v8;
      id v17 = v6;
      dispatch_async(v14, v15);
    }
  }
}

uint64_t __60__HMDHome_suspendedStateChangedForAccessory_suspendedState___block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v2 = [*(id *)(a1 + 32) reachabilityRegisteredDevices];
  uint64_t v3 = [v2 count];

  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  id v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v8 = HMFGetLogIdentifier();
      id v9 = HAPAccessorySuspendedStateDescription();
      uint64_t v10 = *(void *)(a1 + 40);
      int v15 = 138543874;
      id v16 = v8;
      __int16 v17 = 2112;
      unint64_t v18 = v9;
      __int16 v19 = 2112;
      uint64_t v20 = v10;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Notify registered devices of suspended state change to '%@' for accessory: %@", (uint8_t *)&v15, 0x20u);
    }
    [*(id *)(a1 + 32) _updateReachabilityChangeToRegisteredDevices:*(void *)(a1 + 48)];
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      id v11 = HMFGetLogIdentifier();
      id v12 = HAPAccessorySuspendedStateDescription();
      uint64_t v13 = *(void *)(a1 + 48);
      int v15 = 138543874;
      id v16 = v11;
      __int16 v17 = 2112;
      unint64_t v18 = v12;
      __int16 v19 = 2112;
      uint64_t v20 = v13;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEBUG, "%{public}@No registered devices to send the suspended state change '%@' for accessory %@", (uint8_t *)&v15, 0x20u);
    }
  }
  return [*(id *)(a1 + 32) notifyClientsOfReachabilityUpdateForAccessory:*(void *)(a1 + 48)];
}

- (void)reachabilityChangedForAccessory:(id)a3 reachable:(BOOL)a4
{
  id v6 = a3;
  if (v6)
  {
    id v7 = [(HMDHome *)self workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __53__HMDHome_reachabilityChangedForAccessory_reachable___block_invoke;
    block[3] = &unk_1E6A18708;
    id v9 = v6;
    uint64_t v10 = self;
    BOOL v11 = a4;
    dispatch_async(v7, block);
  }
}

void __53__HMDHome_reachabilityChangedForAccessory_reachable___block_invoke(uint64_t a1)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  id v2 = *(id *)(a1 + 32);
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = v3;

  if (v4)
  {
    id v5 = *(void **)(a1 + 40);
    v21[0] = v4;
    id v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v21 count:1];
    [v5 _updateWoWState:v6];
  }
  [*(id *)(a1 + 40) _reachabilityChangedForAccessory:*(void *)(a1 + 32) reachable:*(unsigned __int8 *)(a1 + 48)];
  id v7 = [*(id *)(a1 + 40) reachabilityRegisteredDevices];
  uint64_t v8 = [v7 count];

  id v9 = (void *)MEMORY[0x1D9452090]();
  id v10 = *(id *)(a1 + 40);
  BOOL v11 = HMFGetOSLogHandle();
  id v12 = v11;
  if (v8)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = HMFGetLogIdentifier();
      uint64_t v14 = *(void *)(a1 + 32);
      int v17 = 138543618;
      unint64_t v18 = v13;
      __int16 v19 = 2112;
      uint64_t v20 = v14;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Notify registered devices of reachability change for accessory: %@", (uint8_t *)&v17, 0x16u);
    }
    [*(id *)(a1 + 40) _updateReachabilityChangeToRegisteredDevices:*(void *)(a1 + 32)];
  }
  else
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      int v15 = HMFGetLogIdentifier();
      uint64_t v16 = *(void *)(a1 + 32);
      int v17 = 138543618;
      unint64_t v18 = v15;
      __int16 v19 = 2112;
      uint64_t v20 = v16;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_DEBUG, "%{public}@No registered devices available to notify reachability change update for accessory: %@", (uint8_t *)&v17, 0x16u);
    }
  }
}

- (id)replaceActionSetName:(id)a3 withNewName:(id)a4
{
  v14[1] = *MEMORY[0x1E4F143B8];
  id v6 = a4;
  id v7 = a3;
  uint64_t v8 = [(HMDHome *)self homeManager];
  id v9 = [v8 nameValidator];
  id v10 = [(HMDHome *)self uuid];
  v14[0] = v10;
  BOOL v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:1];
  id v12 = [v9 replaceActionSetName:v7 withNewName:v6 inNamespaces:v11];

  return v12;
}

- (id)replaceName:(id)a3 withNewName:(id)a4
{
  v14[1] = *MEMORY[0x1E4F143B8];
  id v6 = a4;
  id v7 = a3;
  uint64_t v8 = [(HMDHome *)self homeManager];
  id v9 = [v8 nameValidator];
  id v10 = [(HMDHome *)self uuid];
  v14[0] = v10;
  BOOL v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:1];
  id v12 = [v9 replaceName:v7 withNewName:v6 inNamespaces:v11];

  return v12;
}

- (id)removeName:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self homeManager];
  id v6 = [v5 nameValidator];
  id v7 = [(HMDHome *)self uuid];
  uint64_t v8 = [v6 removeName:v4 namespace:v7];

  return v8;
}

- (id)addActionSetName:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self homeManager];
  id v6 = [v5 nameValidator];
  id v7 = [(HMDHome *)self uuid];
  uint64_t v8 = [v6 addActionSetName:v4 namespace:v7];

  return v8;
}

- (id)addName:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self homeManager];
  id v6 = [v5 nameValidator];
  id v7 = [(HMDHome *)self uuid];
  uint64_t v8 = [v6 addName:v4 namespace:v7];

  return v8;
}

- (id)validateName:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self homeManager];
  id v6 = [v5 nameValidator];
  id v7 = [v6 validateName:v4];

  return v7;
}

- (void)removeAllHomeContentsAndAccessoryPairings:(BOOL)a3 queue:(id)a4 completionHandler:(id)a5
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v8 = a4;
  id v9 = a5;
  id v10 = (void *)MEMORY[0x1D9452090]();
  BOOL v11 = self;
  id v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v22 = v13;
    _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Removed all home content and accessory pairings", buf, 0xCu);
  }
  uint64_t v14 = [(HMDHome *)v11 workQueue];
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  void v17[2] = __77__HMDHome_removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke;
  v17[3] = &unk_1E6A16328;
  BOOL v20 = a3;
  void v17[4] = v11;
  id v18 = v8;
  id v19 = v9;
  id v15 = v9;
  id v16 = v8;
  dispatch_async(v14, v17);
}

uint64_t __77__HMDHome_removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeAllHomeContentsAndAccessoryPairings:*(unsigned __int8 *)(a1 + 56) queue:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 48)];
}

- (void)removeCharacteristic:(id)a3
{
  id v4 = a3;
  objc_initWeak(&location, self);
  id v5 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __32__HMDHome_removeCharacteristic___block_invoke;
  block[3] = &unk_1E6A16CE0;
  objc_copyWeak(&v9, &location);
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, block);

  objc_destroyWeak(&v9);
  objc_destroyWeak(&location);
}

void __32__HMDHome_removeCharacteristic___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && *(void *)(a1 + 32))
  {
    id v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_removeCharacteristic:");
    id WeakRetained = v3;
  }
}

- (void)removeService:(id)a3
{
  id v5 = a3;
  objc_initWeak(&location, self);
  id v6 = [(HMDHome *)self workQueue];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = __25__HMDHome_removeService___block_invoke;
  void v8[3] = &unk_1E6A15DE0;
  objc_copyWeak(v10, &location);
  id v9 = v5;
  v10[1] = (id)a2;
  id v7 = v5;
  dispatch_async(v6, v8);

  objc_destroyWeak(v10);
  objc_destroyWeak(&location);
}

void __25__HMDHome_removeService___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && *(void *)(a1 + 32))
  {
    id v4 = WeakRetained;
    objc_msgSend(WeakRetained, "_removeService:");
    id v3 = NSStringFromSelector(*(SEL *)(a1 + 48));
    [v4 saveWithReason:v3 postSyncNotification:1];

    id WeakRetained = v4;
  }
}

- (void)handleSignificantTimeChange
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = (void *)MEMORY[0x1D9452090](self, a2);
  id v4 = self;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v18 = v6;
    _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Going to re-evaluate all the triggers as time has changed significantly", buf, 0xCu);
  }
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v7 = [(HMDHome *)v4 triggers];
  uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v13;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v13 != v10) {
          objc_enumerationMutation(v7);
        }
        [*(id *)(*((void *)&v12 + 1) + 8 * v11++) reEvaluate:1];
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v9);
  }
}

- (void)reEvaluateTriggers
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = [(HMDHome *)self triggers];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v7 + 1) + 8 * v6++) reEvaluate:0];
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

- (id)mediaSystemWithUUID:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self mediaSystems];
  uint64_t v6 = objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);

  return v6;
}

- (id)mediaSystemsWithUUIDs:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self mediaSystems];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __33__HMDHome_mediaSystemsWithUUIDs___block_invoke;
  void v9[3] = &unk_1E6A0A830;
  id v10 = v4;
  id v6 = v4;
  long long v7 = objc_msgSend(v5, "na_filter:", v9);

  return v7;
}

uint64_t __33__HMDHome_mediaSystemsWithUUIDs___block_invoke(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [a2 uuid];
  uint64_t v4 = [v2 containsObject:v3];

  return v4;
}

- (void)removeOutgoingInvitation:(id)a3
{
  id v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  [(NSMutableArray *)self->_outgoingInvitations removeObject:v4];
  os_unfair_recursive_lock_unlock();
}

- (void)addOutgoingInvitation:(id)a3
{
  id v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  [(NSMutableArray *)self->_outgoingInvitations addObject:v4];
  os_unfair_recursive_lock_unlock();
}

- (void)setOutgoingInvitations:(id)a3
{
  id v4 = (NSMutableArray *)a3;
  os_unfair_recursive_lock_lock_with_options();
  outgoingInvitations = self->_outgoingInvitations;
  self->_outgoingInvitations = v4;

  os_unfair_recursive_lock_unlock();
}

- (NSMutableArray)outgoingInvitations
{
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v3 = (void *)[(NSMutableArray *)self->_outgoingInvitations mutableCopy];
  os_unfair_recursive_lock_unlock();
  return (NSMutableArray *)v3;
}

- (id)outgoingInvitationWithUUID:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self outgoingInvitations];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithValue:forKeyPath:", v4, @"identifier");

  return v6;
}

- (id)userWithUUID:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self users];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);

  return v6;
}

- (id)serviceGroupWithUUID:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self serviceGroups];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);

  return v6;
}

- (id)serviceGroupWithName:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self serviceGroups];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithName:", v4);

  return v6;
}

- (id)triggerWithUUID:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self triggers];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);

  return v6;
}

- (id)triggerWithName:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self triggers];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithName:", v4);

  return v6;
}

- (id)triggerOwnedActionSetWithUUID:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self triggerOwnedActionSets];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);

  return v6;
}

- (id)actionSetWithUUID:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self actionSets];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);

  return v6;
}

- (id)actionSetWithName:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self actionSets];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithName:", v4);

  return v6;
}

- (void)_evaluateOwnerTrustZoneCapabilityAndNotify
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (![(HMDHome *)self isOwnerTrustZoneCapable])
  {
    if ([(HMDHome *)self _isSharedHomeVersionTrustZoneCapable]
      || ([(HMDHome *)self residentDeviceManager],
          uint64_t v3 = objc_claimAutoreleasedReturnValue(),
          int v4 = [v3 hasTrustZoneCapableResident],
          v3,
          v4))
    {
      uint64_t v5 = (void *)MEMORY[0x1D9452090]();
      id v6 = self;
      long long v7 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        long long v8 = HMFGetLogIdentifier();
        int v10 = 138543362;
        uint64_t v11 = v8;
        _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Owner became trust zone capable after evaluating owner trust zone capability", (uint8_t *)&v10, 0xCu);
      }
      [(HMDHome *)v6 setOwnerTrustZoneCapable:1];
      long long v9 = [(HMDHome *)v6 notificationCenter];
      [v9 postNotificationName:@"HMDHomeOwnerBecameTrustZoneCapableNotification" object:v6];
    }
  }
}

- (void)_handleReceivedNonCloudSourcedSharedHomeModel
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if ([(HMDHome *)self _isSharedHomeVersionTrustZoneCapable]
    || ([(HMDHome *)self residentDeviceManager],
        uint64_t v3 = objc_claimAutoreleasedReturnValue(),
        int v4 = [v3 hasTrustZoneCapableResident],
        v3,
        v4))
  {
    uint64_t v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = self;
    long long v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      long long v8 = HMFGetLogIdentifier();
      int v10 = 138543362;
      uint64_t v11 = v8;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Owner became trust zone capable after receiving shared home model", (uint8_t *)&v10, 0xCu);
    }
    [(HMDHome *)v6 setOwnerTrustZoneCapable:1];
    long long v9 = [(HMDHome *)v6 notificationCenter];
    [v9 postNotificationName:@"HMDHomeOwnerBecameTrustZoneCapableNotification" object:v6];
  }
}

- (BOOL)_isSharedHomeVersionTrustZoneCapable
{
  id v2 = [(HMDHome *)self sharedHomeSourceVersion];
  uint64_t v3 = [[HMDHomeKitVersion alloc] initWithVersionString:@"6.1"];
  char v4 = [v2 isAtLeastVersion:v3];

  return v4;
}

- (void)setOwnerTrustZoneCapable:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_ownerTrustZoneCapable = a3;
  os_unfair_recursive_lock_unlock();
}

- (BOOL)ownerTrustZoneCapable
{
  LOBYTE(self) = self->_ownerTrustZoneCapable;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (id)zoneWithUUID:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self zones];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);

  return v6;
}

- (id)zoneWithName:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self zones];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithName:", v4);

  return v6;
}

- (id)mediaProfileWithUUID:(id)a3
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v5 = [(HMDHome *)self accessories];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v21;
LABEL_3:
    uint64_t v9 = 0;
    while (1)
    {
      if (*(void *)v21 != v8) {
        objc_enumerationMutation(v5);
      }
      id v10 = *(id *)(*((void *)&v20 + 1) + 8 * v9);
      objc_opt_class();
      id v11 = (objc_opt_isKindOfClass() & 1) != 0 ? v10 : 0;
      id v12 = v11;

      if (v12)
      {
        long long v13 = [v12 mediaProfile];
      }
      else
      {
        id v14 = v10;
        objc_opt_class();
        id v15 = (objc_opt_isKindOfClass() & 1) != 0 ? v14 : 0;
        id v16 = v15;

        long long v13 = [v16 mediaProfile];
      }
      int v17 = [v13 uniqueIdentifier];
      char v18 = [v17 isEqual:v4];

      if (v18) {
        break;
      }

      if (v7 == ++v9)
      {
        uint64_t v7 = [v5 countByEnumeratingWithState:&v20 objects:v24 count:16];
        if (v7) {
          goto LABEL_3;
        }
        goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    long long v13 = 0;
  }

  return v13;
}

- (id)accessoryWithSPIClientIdentifier:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self accessories];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __44__HMDHome_accessoryWithSPIClientIdentifier___block_invoke;
  void v9[3] = &unk_1E6A10BD0;
  id v10 = v4;
  id v6 = v4;
  uint64_t v7 = objc_msgSend(v5, "na_firstObjectPassingTest:", v9);

  return v7;
}

uint64_t __44__HMDHome_accessoryWithSPIClientIdentifier___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 spiClientIdentifier];
  uint64_t v4 = objc_msgSend(v3, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v4;
}

- (id)accessoryWithDeviceIdentifier:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self accessories];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __41__HMDHome_accessoryWithDeviceIdentifier___block_invoke;
  v11[3] = &unk_1E6A10BD0;
  id v12 = v4;
  id v6 = v4;
  uint64_t v7 = objc_msgSend(v5, "na_firstObjectPassingTest:", v11);

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  id v9 = v8;

  return v9;
}

uint64_t __41__HMDHome_accessoryWithDeviceIdentifier___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;
  id v6 = [v5 deviceForDirectMessaging];

  uint64_t v7 = [v6 identifier];
  uint64_t v8 = objc_msgSend(v7, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v8;
}

- (id)accessoryWithEndpointIdentifier:(id)a3
{
  id v3 = [(HMDHome *)self accessoryWithSPIClientIdentifier:a3];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;

  return v5;
}

- (id)roomWithUniqueIdentifier:(id)a3 forClientIdentifierSalt:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [(HMDHome *)self rooms];
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = __60__HMDHome_roomWithUniqueIdentifier_forClientIdentifierSalt___block_invoke;
  v13[3] = &unk_1E6A068A8;
  id v14 = v7;
  id v15 = v6;
  id v9 = v6;
  id v10 = v7;
  id v11 = objc_msgSend(v8, "na_firstObjectPassingTest:", v13);

  return v11;
}

uint64_t __60__HMDHome_roomWithUniqueIdentifier_forClientIdentifierSalt___block_invoke(uint64_t a1, void *a2)
{
  id v3 = (void *)MEMORY[0x1E4F29128];
  id v4 = [a2 uuid];
  id v5 = objc_msgSend(v3, "hm_deriveUUIDFromBaseUUID:identifierSalt:", v4, *(void *)(a1 + 32));

  uint64_t v6 = [v5 isEqual:*(void *)(a1 + 40)];
  return v6;
}

- (id)roomWithUUID:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self roomForEntireHome];
  uint64_t v6 = [v5 uuid];
  int v7 = [v6 isEqual:v4];

  if (v7)
  {
    uint64_t v8 = [(HMDHome *)self roomForEntireHome];
  }
  else
  {
    id v9 = [(HMDHome *)self rooms];
    uint64_t v8 = objc_msgSend(v9, "hmf_firstObjectWithUUID:", v4);
  }
  return v8;
}

- (id)roomWithName:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self rooms];
  uint64_t v6 = objc_msgSend(v5, "hmf_firstObjectWithName:", v4);

  return v6;
}

- (void)_configureBulletinNotification
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = [(HMDHome *)self accessories];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(id *)(*((void *)&v10 + 1) + 8 * v6);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v8 = v7;
        }
        else {
          uint64_t v8 = 0;
        }
        id v9 = v8;

        if (v9) {
          [v9 configureBulletinNotification];
        }

        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
}

- (void)configureBulletinNotification
{
  uint64_t v3 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __40__HMDHome_configureBulletinNotification__block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v3, block);
}

uint64_t __40__HMDHome_configureBulletinNotification__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _configureBulletinNotification];
}

- (void)_performPostSaveActionsWithReason:(id)a3
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (__CFString *)a3;
  if ([(HMDHome *)self isOwnerUser])
  {
    if (+[HMDHomeManager doesSaveReasonAffectOnlyLocalData:v4])
    {
      uint64_t v5 = (void *)MEMORY[0x1D9452090]();
      uint64_t v6 = self;
      id v7 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = HMFGetLogIdentifier();
        int v25 = 138543618;
        id v26 = v8;
        __int16 v27 = 2112;
        __int16 v28 = v4;
        id v9 = "%{public}@Saving with reason %@ for a local change.";
LABEL_19:
        _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v25, 0x16u);
      }
    }
    else
    {
      uint64_t v5 = (void *)MEMORY[0x1D9452090]([(HMDHome *)self _updateConfigurationVersion]);
      id v24 = self;
      id v7 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = HMFGetLogIdentifier();
        int v25 = 138543618;
        id v26 = v8;
        __int16 v27 = 2112;
        __int16 v28 = v4;
        id v9 = "%{public}@Saving with reason %@ for a non-local change";
        goto LABEL_19;
      }
    }

    [(HMDHome *)self configureBulletinNotification];
    goto LABEL_21;
  }
  long long v10 = (void *)MEMORY[0x1D9452090]();
  long long v11 = self;
  long long v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    long long v13 = HMFGetLogIdentifier();
    int v25 = 138543618;
    id v26 = v13;
    __int16 v27 = 2112;
    __int16 v28 = v4;
    _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Dropping request to save due to %@ since the user is not owner of home", (uint8_t *)&v25, 0x16u);
  }
  if ([(HMDHome *)v11 isAdminUser]
    && !+[HMDHomeManager doesSaveReasonAffectOnlyLocalData:](HMDHomeManager, "doesSaveReasonAffectOnlyLocalData:", v4)&& !+[HMDHomeManager shouldIgnoreExpectedConfigurationVersionUpdateForReason:v4])
  {
    [(HMDHome *)v11 _updateExpectConfigurationVersion];
  }
  BOOL v14 = +[HMDHomeManager shouldIncrementGenerationCounterForReason:v4];
  uint64_t v15 = (void *)MEMORY[0x1D9452090]();
  id v16 = v11;
  int v17 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    char v18 = HMFGetLogIdentifier();
    uint64_t v19 = HMFBooleanToString();
    int v25 = 138543874;
    id v26 = v18;
    __int16 v27 = 2112;
    __int16 v28 = v4;
    __int16 v29 = 2112;
    id v30 = v19;
    _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_DEFAULT, "%{public}@Saving to persistent store due to reason: %@ (incrementing generation counter: %@)", (uint8_t *)&v25, 0x20u);
  }
  long long v20 = [(HMDHome *)v16 homeManager];
  long long v21 = [v20 backingStore];
  long long v22 = v21;
  if (v4) {
    long long v23 = v4;
  }
  else {
    long long v23 = @"Unknown Reason";
  }
  [v21 saveToPersistentStoreWithReason:v23 incrementGeneration:v14];

LABEL_21:
}

- (void)performPostSaveActionsWithReason:(id)a3
{
  id v4 = a3;
  [(HMDHome *)self _performPostSaveActionsWithReason:v4];
  uint64_t v6 = [[HMDHomeSaveRequest alloc] initWithHome:self reason:v4 information:0 postSyncNotification:0 objectChange:1];

  uint64_t v5 = [(HMDHome *)self homeManager];
  [v5 performPostSaveRequestActionsWithRequest:v6];
}

- (void)saveWithReason:(id)a3 information:(id)a4 postSyncNotification:(BOOL)a5 objectChange:(BOOL)a6
{
  BOOL v6 = a6;
  BOOL v7 = a5;
  id v17 = a3;
  id v10 = a4;
  id v11 = v17;
  id v12 = v10;
  if (v17)
  {
    BOOL v13 = +[HMDHomeManager doesSaveReasonAffectOnlyLocalData:v17];
    id v11 = v17;
    if (v13)
    {
      BOOL v14 = +[HMDHomeManager doesSaveReasonRequireForceSyncToWatch:v17];
      id v11 = v17;
      if (v14)
      {
        [(HMDHome *)self setWatchSkipVersionCheck:1];
        id v11 = v17;
      }
    }
  }
  [(HMDHome *)self _performPostSaveActionsWithReason:v11];
  uint64_t v15 = [[HMDHomeSaveRequest alloc] initWithHome:self reason:v17 information:v12 postSyncNotification:v7 objectChange:v6];
  id v16 = [(HMDHome *)self homeManager];
  [v16 saveWithRequest:v15];
}

- (void)saveWithReason:(id)a3 information:(id)a4 postSyncNotification:(BOOL)a5
{
}

- (void)saveWithReason:(id)a3 postSyncNotification:(BOOL)a4 objectChange:(BOOL)a5
{
}

- (void)saveWithReason:(id)a3 postSyncNotification:(BOOL)a4
{
}

- (void)saveToCurrentAccountWithReason:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __42__HMDHome_saveToCurrentAccountWithReason___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

uint64_t __42__HMDHome_saveToCurrentAccountWithReason___block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) saveWithReason:*(void *)(a1 + 40) information:0 postSyncNotification:0];
  id v2 = *(void **)(a1 + 32);
  return [v2 configureBulletinNotification];
}

- (void)_saveSharedHomeToAccountWithReason:(id)a3 postSyncNotification:(BOOL)a4 options:(id)a5
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a5;
  id v10 = (void *)MEMORY[0x1D9452090]();
  id v11 = self;
  id v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    BOOL v13 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    __int16 v28 = v13;
    __int16 v29 = 2112;
    id v30 = v8;
    _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Received request to save to account with reason: %@", buf, 0x16u);
  }
  if ([(HMDHome *)v11 isOwnerUser]
    || +[HMDHomeManager doesSaveReasonAffectOnlyLocalData:](HMDHomeManager, "doesSaveReasonAffectOnlyLocalData:", v8)|| ([MEMORY[0x1E4F65548] productInfo], BOOL v14 = objc_claimAutoreleasedReturnValue(), v15 = objc_msgSend(v14, "productPlatform") == 3, v14, v15))
  {
    id v16 = (void *)MEMORY[0x1D9452090]();
    id v17 = v11;
    char v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v28 = v19;
      __int16 v29 = 2112;
      id v30 = v8;
      _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_ERROR, "%{public}@Cannot save home as a shared home to cloud for reason %@", buf, 0x16u);
    }
  }
  else
  {
    long long v20 = [(HMDHome *)v11 sharedHomeModel];
    long long v21 = [(HMDHome *)v11 backingStore];
    long long v22 = [v21 transaction:v8 options:v9];

    [v22 add:v20];
    objc_initWeak((id *)buf, v11);
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    void v23[2] = __75__HMDHome__saveSharedHomeToAccountWithReason_postSyncNotification_options___block_invoke;
    void v23[3] = &unk_1E6A09008;
    objc_copyWeak(&v25, (id *)buf);
    id v24 = v8;
    BOOL v26 = a4;
    [v22 save:v23];
    [(HMDHome *)v11 configureBulletinNotification];

    objc_destroyWeak(&v25);
    objc_destroyWeak((id *)buf);
  }
}

void __75__HMDHome__saveSharedHomeToAccountWithReason_postSyncNotification_options___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v2 = [[HMDHomeSaveRequest alloc] initWithHome:WeakRetained reason:*(void *)(a1 + 32) information:0 postSyncNotification:*(unsigned __int8 *)(a1 + 48) objectChange:1];
    uint64_t v3 = [WeakRetained homeManager];
    [v3 saveWithRequest:v2];
  }
}

- (void)saveSharedHomeToAccountWithReason:(id)a3 postSyncNotification:(BOOL)a4 options:(id)a5
{
  id v8 = a3;
  id v9 = a5;
  objc_initWeak(&location, self);
  id v10 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __74__HMDHome_saveSharedHomeToAccountWithReason_postSyncNotification_options___block_invoke;
  block[3] = &unk_1E6A14DA0;
  objc_copyWeak(&v16, &location);
  BOOL v17 = a4;
  id v14 = v8;
  id v15 = v9;
  id v11 = v9;
  id v12 = v8;
  dispatch_async(v10, block);

  objc_destroyWeak(&v16);
  objc_destroyWeak(&location);
}

void __74__HMDHome_saveSharedHomeToAccountWithReason_postSyncNotification_options___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    [WeakRetained _saveSharedHomeToAccountWithReason:*(void *)(a1 + 32) postSyncNotification:*(unsigned __int8 *)(a1 + 56) options:*(void *)(a1 + 40)];
    id WeakRetained = v3;
  }
}

- (void)_updateExpectConfigurationVersion
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int64_t v3 = [(HMDHome *)self expectedConfigurationVersion];
  if (v3 < [(HMDHome *)self configurationVersion]) {
    [(HMDHome *)self setExpectedConfigurationVersion:[(HMDHome *)self configurationVersion]];
  }
  id v4 = (void *)MEMORY[0x1D9452090]([(HMDHome *)self setExpectedConfigurationVersion:[(HMDHome *)self expectedConfigurationVersion] + 1]);
  uint64_t v5 = self;
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v7 = HMFGetLogIdentifier();
    int v8 = 138543874;
    id v9 = v7;
    __int16 v10 = 2048;
    uint64_t v11 = [(HMDHome *)v5 expectedConfigurationVersion];
    __int16 v12 = 2048;
    uint64_t v13 = [(HMDHome *)v5 configurationVersion];
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Increased expected configuration counter to %lu (current configurationVersion: %lu).", (uint8_t *)&v8, 0x20u);
  }
}

- (void)_updateConfigurationVersion
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int64_t v3 = (void *)MEMORY[0x1D9452090]([(HMDHome *)self setConfigurationVersion:[(HMDHome *)self configurationVersion] + 1]);
  id v4 = self;
  uint64_t v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = HMFGetLogIdentifier();
    int v7 = 138543618;
    int v8 = v6;
    __int16 v9 = 2048;
    uint64_t v10 = [(HMDHome *)v4 configurationVersion];
    _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Incrementing configuration version to %lu", (uint8_t *)&v7, 0x16u);
  }
  [(HMDHome *)v4 __saveConfigurationVersionTransaction];
}

- (void)__saveConfigurationVersionTransaction
{
  int64_t v3 = [(HMDHome *)self backingStore];
  id v4 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  id v6 = [v3 transaction:@"kHomeConfigurationVersionKey" options:v4];

  uint64_t v5 = [(HMDHome *)self homeConfigurationModelObjectWithChangeType:1];
  [v6 add:v5 withMessage:0];
  [v6 save];
}

- (void)_handleModifyCharacteristicNotifications:(id)a3
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  if ([v3 isRemote] && (objc_msgSend(v3, "isSecureRemote") & 1) == 0)
  {
    id v16 = (void *)MEMORY[0x1D9452090]();
    BOOL v17 = self;
    char v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v80 = v19;
      __int16 v81 = 2112;
      id v82 = v3;
      _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_DEFAULT, "%{public}@Message not supported: %@", buf, 0x16u);
    }
    uint64_t v4 = [MEMORY[0x1E4F28C58] hmErrorWithCode:17];
    [v3 respondWithError:v4];
  }
  else
  {
    uint64_t v4 = [v3 dictionaryForKey:@"kCharacteristicNotificationsKey"];
    uint64_t v5 = [v3 dictionaryForKey:@"kMediaNotificationsKey"];
    char v77 = 0;
    int v6 = [v3 BOOLForKey:@"kCharacteristicNotificationEnableKey" keyPresent:&v77];
    int v7 = [v3 remoteSourceDevice];
    int v8 = [v7 remoteDestinationString];

    if (v4 | v5 && v8 && v77)
    {
      if (v6)
      {
        id v9 = [(HMDHome *)self notificationRegistry];
        [v9 setNotificationsEnabled:1 forUserID:v8 characteristicsPayload:v4 mediaPropertiesPayload:v5];
LABEL_50:

        [v3 respondWithSuccess];
      }
      else
      {
        id v20 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        [v3 remoteSourceDevice];
        long long v73 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        v61 = long long v76 = 0u;
        long long v21 = [v61 handles];
        uint64_t v22 = [v21 countByEnumeratingWithState:&v73 objects:v86 count:16];
        if (v22)
        {
          uint64_t v23 = v22;
          uint64_t v24 = *(void *)v74;
          do
          {
            for (uint64_t i = 0; i != v23; ++i)
            {
              if (*(void *)v74 != v24) {
                objc_enumerationMutation(v21);
              }
              BOOL v26 = [*(id *)(*((void *)&v73 + 1) + 8 * i) destination];
              [v20 addObject:v26];
            }
            uint64_t v23 = [v21 countByEnumeratingWithState:&v73 objects:v86 count:16];
          }
          while (v23);
        }
        id v60 = v8;

        __int16 v27 = [v61 globalHandles];
        uint64_t v28 = [v27 firstObject];

        long long v62 = (void *)v28;
        if (v28)
        {
          uint64_t v57 = v5;
          uint64_t v58 = v4;
          id v59 = v3;
          long long v71 = 0u;
          long long v72 = 0u;
          long long v69 = 0u;
          long long v70 = 0u;
          __int16 v29 = [v61 account];
          id v30 = [v29 handles];

          id obj = v30;
          uint64_t v31 = [v30 countByEnumeratingWithState:&v69 objects:v85 count:16];
          uint64_t v32 = v62;
          if (v31)
          {
            uint64_t v33 = v31;
            uint64_t v34 = *(void *)v70;
            do
            {
              for (uint64_t j = 0; j != v33; ++j)
              {
                if (*(void *)v70 != v34) {
                  objc_enumerationMutation(obj);
                }
                int64_t v36 = *(void **)(*((void *)&v69 + 1) + 8 * j);
                id v37 = [v32 pushToken];
                uint64_t v38 = [v36 URI];
                id v39 = [v38 prefixedURI];
                int64_t v40 = (void *)MEMORY[0x1D9450AC0](v37, v39);

                if (v40)
                {
                  if (([v20 containsObject:v40] & 1) == 0) {
                    [v20 addObject:v40];
                  }
                }
                else
                {
                  double v41 = (void *)MEMORY[0x1D9452090]();
                  long long v42 = self;
                  long long v43 = HMFGetOSLogHandle();
                  if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                  {
                    long long v44 = HMFGetLogIdentifier();
                    *(_DWORD *)buf = 138543874;
                    id v80 = v44;
                    __int16 v81 = 2112;
                    id v82 = v62;
                    __int16 v83 = 2112;
                    uint64_t v84 = v36;
                    _os_log_impl(&dword_1D49D5000, v43, OS_LOG_TYPE_ERROR, "%{public}@Failed to create destination with globalHandle: %@, accountHandle: %@", buf, 0x20u);

                    uint64_t v32 = v62;
                  }
                }
              }
              uint64_t v33 = [obj countByEnumeratingWithState:&v69 objects:v85 count:16];
            }
            while (v33);
          }

          uint64_t v4 = v58;
          id v3 = v59;
          uint64_t v5 = v57;
        }
        long long v45 = [v3 remoteSourceID];
        if (([v20 containsObject:v45] & 1) == 0) {
          [v20 addObject:v45];
        }
        long long v67 = 0u;
        long long v68 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        id v9 = v20;
        uint64_t v46 = [v9 countByEnumeratingWithState:&v65 objects:v78 count:16];
        if (v46)
        {
          uint64_t v47 = v46;
          uint64_t v48 = *(void *)v66;
          while (2)
          {
            for (uint64_t k = 0; k != v47; ++k)
            {
              if (*(void *)v66 != v48) {
                objc_enumerationMutation(v9);
              }
              uint64_t v50 = *(void *)(*((void *)&v65 + 1) + 8 * k);
              uint64_t v51 = [(HMDHome *)self notificationRegistry];
              LOBYTE(v50) = [v51 setNotificationsEnabled:0 forUserID:v50 characteristicsPayload:v4 mediaPropertiesPayload:v5];

              if (v50)
              {

                int v8 = v60;
                goto LABEL_50;
              }
            }
            uint64_t v47 = [v9 countByEnumeratingWithState:&v65 objects:v78 count:16];
            if (v47) {
              continue;
            }
            break;
          }
        }

        long long v52 = (void *)MEMORY[0x1D9452090]();
        uint64_t v53 = self;
        uint64_t v54 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        {
          uint64_t v55 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          id v80 = v55;
          __int16 v81 = 2112;
          id v82 = v9;
          _os_log_impl(&dword_1D49D5000, v54, OS_LOG_TYPE_ERROR, "%{public}@Failed to disable notification with destinations: %@", buf, 0x16u);
        }
        long long v56 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2 description:@"Failed to disable notification because registration was not found" reason:@"Could not find matching registration" suggestion:0];
        [v3 respondWithError:v56];

        int v8 = v60;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1D9452090]();
      uint64_t v11 = self;
      __int16 v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = HMFGetLogIdentifier();
        uint64_t v14 = [v3 messagePayload];
        *(_DWORD *)buf = 138543618;
        id v80 = v13;
        __int16 v81 = 2112;
        id v82 = v14;
        _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_ERROR, "%{public}@Cannot handle modify characteristic notifications message payload: %@", buf, 0x16u);
      }
      id v15 = [MEMORY[0x1E4F28C58] hmErrorWithCode:27];
      [v3 respondWithError:v15];
    }
  }
}

- (void)_handleAccessoryReachabilityEventNotificationsRegistration:(id)a3
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  int v6 = (void *)MEMORY[0x1D9452090]();
  int v7 = self;
  int v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    uint64_t v32 = v9;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Received message to handle accessory reachability event notification registration", buf, 0xCu);
  }
  uint64_t v10 = [v4 messagePayload];
  uint64_t v11 = objc_msgSend(v10, "hmf_arrayForKey:", @"HMDAccessoryResidentReachabilityNotificationEnableAccessoryUUIDsMessageKey");

  __int16 v12 = [v4 messagePayload];
  uint64_t v13 = objc_msgSend(v12, "hmf_arrayForKey:", @"HMDAccessoryResidentReachabilityNotificationDisableAccessoryUUIDsMessageKey");

  if ([v11 count] || objc_msgSend(v13, "count"))
  {
    uint64_t v14 = objc_msgSend(v11, "na_map:", &__block_literal_global_822);
    id v30 = objc_msgSend(v13, "na_map:", &__block_literal_global_824);
    id v15 = [v4 messagePayload];
    id v16 = objc_msgSend(v15, "hmf_stringForKey:", @"HMDAccessoryResidentReachabilityNotificationUserIDMessageKey");

    if (!v16)
    {
      id v16 = [v4 remoteSourceID];
    }
    BOOL v17 = [(HMDHome *)v7 notificationRegistry];
    if ([v17 enableReachabilityEventNotificationForAccessoryUUIDs:v14 forUserID:v16])
    {
      int v18 = 1;
    }
    else
    {
      uint64_t v19 = [(HMDHome *)v7 notificationRegistry];
      int v18 = [v19 disableReachabilityEventNotificationForAccessoryUUIDs:v30 forUserID:v16];
    }
    id v20 = (void *)MEMORY[0x1D9452090]();
    long long v21 = v7;
    uint64_t v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      uint64_t v23 = v11;
      v25 = uint64_t v24 = v13;
      *(_DWORD *)buf = 138543874;
      uint64_t v32 = v25;
      __int16 v33 = 2112;
      uint64_t v34 = v14;
      __int16 v35 = 2112;
      int64_t v36 = v30;
      _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_DEFAULT, "%{public}@Changed reachability event notification registration for enableAccessoryUUIDs : %@ and disableAccessoryUUIDs : %@", buf, 0x20u);

      uint64_t v13 = v24;
      uint64_t v11 = v23;
    }

    if (v18) {
      [(HMDHome *)v21 saveToCurrentAccountWithReason:@"HMDAccessoryResidentReachabilityNotificationRegistrationMessage"];
    }
    [v4 respondWithSuccess];
  }
  else
  {
    BOOL v26 = (void *)MEMORY[0x1D9452090]();
    __int16 v27 = v7;
    uint64_t v28 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v29 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v32 = v29;
      _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_DEFAULT, "%{public}@No accessories passed in for remote reachability event registration/deregistration", buf, 0xCu);
    }
    uint64_t v14 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:3 userInfo:0];
    [v4 respondWithError:v14];
  }
}

id __70__HMDHome__handleAccessoryReachabilityEventNotificationsRegistration___block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = (objc_class *)MEMORY[0x1E4F29128];
  id v3 = a2;
  id v4 = (void *)[[v2 alloc] initWithUUIDString:v3];

  return v4;
}

id __70__HMDHome__handleAccessoryReachabilityEventNotificationsRegistration___block_invoke(uint64_t a1, void *a2)
{
  id v2 = (objc_class *)MEMORY[0x1E4F29128];
  id v3 = a2;
  id v4 = (void *)[[v2 alloc] initWithUUIDString:v3];

  return v4;
}

- (void)auditUsersForNotifications:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __38__HMDHome_auditUsersForNotifications___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __38__HMDHome_auditUsersForNotifications___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) notificationRegistry];
  [v2 auditUsersForNotifications:*(void *)(a1 + 40) forHome:*(void *)(a1 + 32)];
}

- (void)_modifyCharacteristicNotifications:(id)a3 mediaNotifications:(id)a4 actionSetNotificationPayload:(id)a5 enableNotification:(BOOL)a6 withDevice:(id)a7 completion:(id)a8
{
  BOOL v10 = a6;
  v52[1] = *MEMORY[0x1E4F143B8];
  id v14 = a3;
  id v15 = a4;
  id v40 = a5;
  id v16 = a7;
  BOOL v17 = (void (**)(id, void))a8;
  int v18 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v18);

  uint64_t v19 = [v16 isCurrentDevice];
  if (!v19)
  {
    uint64_t v51 = @"kCharacteristicNotificationEnableKey";
    id v25 = objc_msgSend(NSNumber, "numberWithBool:", v10, v40);
    v52[0] = v25;
    BOOL v26 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v52 forKeys:&v51 count:1];
    uint64_t v24 = (void *)[v26 mutableCopy];

    if ([v14 count])
    {
      [v24 setObject:v14 forKeyedSubscript:@"kCharacteristicNotificationsKey"];
      if (![v15 count]) {
        goto LABEL_11;
      }
    }
    else if (![v15 count])
    {
      int64_t v36 = (void *)MEMORY[0x1D9452090]();
      uint64_t v37 = self;
      uint64_t v38 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        id v39 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v48 = v39;
        __int16 v49 = 2112;
        id v50 = v16;
        _os_log_impl(&dword_1D49D5000, v38, OS_LOG_TYPE_INFO, "%{public}@Skipping modifying notifications with remote gateway %@ as there is nothing to modify", buf, 0x16u);
      }
      if (v17) {
        v17[2](v17, 0);
      }
      goto LABEL_15;
    }
    [v24 setObject:v15 forKeyedSubscript:@"kMediaNotificationsKey"];
LABEL_11:
    __int16 v27 = [(HMDHome *)self currentUser];
    BOOL v28 = [(HMDHome *)self shouldRestrictAllMessagingToLocalTransportsForUser:v27];

    if (v28) {
      uint64_t v29 = 14;
    }
    else {
      uint64_t v29 = -1;
    }
    id v30 = [HMDRemoteDeviceMessageDestination alloc];
    uint64_t v31 = [(HMDHome *)self uuid];
    uint64_t v32 = [(HMDRemoteDeviceMessageDestination *)v30 initWithTarget:v31 device:v16];

    __int16 v33 = +[HMDRemoteMessage secureMessageWithName:@"kModifyCharacterisiticNotificationsRequestKey" qualityOfService:17 destination:v32 messagePayload:v24 restriction:v29];
    objc_initWeak((id *)buf, self);
    v41[0] = MEMORY[0x1E4F143A8];
    v41[1] = 3221225472;
    id v41[2] = __135__HMDHome__modifyCharacteristicNotifications_mediaNotifications_actionSetNotificationPayload_enableNotification_withDevice_completion___block_invoke;
    v41[3] = &unk_1E6A06880;
    objc_copyWeak(&v45, (id *)buf);
    long long v44 = v17;
    id v42 = v16;
    id v43 = v14;
    BOOL v46 = v10;
    [v33 setResponseHandler:v41];
    uint64_t v34 = [(HMDHome *)self homeManager];
    __int16 v35 = [v34 messageDispatcher];
    [v35 sendMessage:v33 completionHandler:0];

    objc_destroyWeak(&v45);
    objc_destroyWeak((id *)buf);

    goto LABEL_15;
  }
  id v20 = (void *)MEMORY[0x1D9452090](v19);
  long long v21 = self;
  uint64_t v22 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    uint64_t v23 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    uint64_t v48 = v23;
    _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_INFO, "%{public}@Cannot modify notifications with current device", buf, 0xCu);
  }
  if (v17)
  {
    uint64_t v24 = objc_msgSend(MEMORY[0x1E4F28C58], "hmfErrorWithCode:", 3, v40);
    ((void (**)(id, void *))v17)[2](v17, v24);
LABEL_15:
  }
}

void __135__HMDHome__modifyCharacteristicNotifications_mediaNotifications_actionSetNotificationPayload_enableNotification_withDevice_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v8 = WeakRetained;
  if (WeakRetained)
  {
    if (v5)
    {
      id v9 = (void *)MEMORY[0x1D9452090]();
      id v10 = v8;
      uint64_t v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        __int16 v12 = HMFGetLogIdentifier();
        uint64_t v13 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138543874;
        id v25 = v12;
        __int16 v26 = 2112;
        uint64_t v27 = v13;
        __int16 v28 = 2112;
        id v29 = v5;
        _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Failed to modify notifications with remote gateway %@ due to error %@", buf, 0x20u);
      }
      uint64_t v14 = *(void *)(a1 + 48);
      if (v14) {
        (*(void (**)(uint64_t, id))(v14 + 16))(v14, v5);
      }
    }
    else
    {
      BOOL v17 = [WeakRetained workQueue];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __135__HMDHome__modifyCharacteristicNotifications_mediaNotifications_actionSetNotificationPayload_enableNotification_withDevice_completion___block_invoke_819;
      block[3] = &unk_1E6A06858;
      objc_copyWeak(&v22, (id *)(a1 + 56));
      id v19 = *(id *)(a1 + 32);
      id v20 = *(id *)(a1 + 40);
      char v23 = *(unsigned char *)(a1 + 64);
      id v21 = *(id *)(a1 + 48);
      dispatch_async(v17, block);

      objc_destroyWeak(&v22);
    }
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 48);
    if (v15)
    {
      id v16 = [MEMORY[0x1E4F28C58] hmfErrorWithCode:8];
      (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v16);
    }
  }
}

void __135__HMDHome__modifyCharacteristicNotifications_mediaNotifications_actionSetNotificationPayload_enableNotification_withDevice_completion___block_invoke_819(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v3 = (void *)MEMORY[0x1D9452090]();
  id v4 = WeakRetained;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    uint64_t v7 = *(void *)(a1 + 32);
    int v9 = 138543618;
    id v10 = v6;
    __int16 v11 = 2112;
    uint64_t v12 = v7;
    _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Modified notifications with remote gateway %@", (uint8_t *)&v9, 0x16u);
  }
  [v4 _handleRemoteGatewayNotificationRegistration:*(void *)(a1 + 40) enable:*(unsigned __int8 *)(a1 + 64)];
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    (*(void (**)(uint64_t, void))(v8 + 16))(v8, 0);
  }
}

- (void)_modifyCharacteristicNotifications:(id)a3 mediaNotifications:(id)a4 actionSetNotificationPayload:(id)a5 enableNotification:(BOOL)a6 withDevice:(id)a7
{
}

- (void)modifyCharacteristicNotifications:(id)a3 mediaNotifications:(id)a4 actionSetNotificationPayload:(id)a5 enableNotification:(BOOL)a6 withDevice:(id)a7
{
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a7;
  id v16 = [(HMDHome *)self workQueue];
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  void v21[2] = __123__HMDHome_modifyCharacteristicNotifications_mediaNotifications_actionSetNotificationPayload_enableNotification_withDevice___block_invoke;
  v21[3] = &unk_1E6A11E78;
  void v21[4] = self;
  id v22 = v12;
  id v23 = v13;
  id v24 = v14;
  BOOL v26 = a6;
  id v25 = v15;
  id v17 = v15;
  id v18 = v14;
  id v19 = v13;
  id v20 = v12;
  dispatch_async(v16, v21);
}

uint64_t __123__HMDHome_modifyCharacteristicNotifications_mediaNotifications_actionSetNotificationPayload_enableNotification_withDevice___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _modifyCharacteristicNotifications:*(void *)(a1 + 40) mediaNotifications:*(void *)(a1 + 48) actionSetNotificationPayload:*(void *)(a1 + 56) enableNotification:*(unsigned __int8 *)(a1 + 72) withDevice:*(void *)(a1 + 64)];
}

- (BOOL)shouldRestrictAllMessagingToLocalTransportsForUser:(id)a3
{
  id v4 = a3;
  if (isiOSDevice())
  {
    BOOL v5 = [(HMDHome *)self isResidentFirstAccessoryCommunicationEnabled];
    LOBYTE(self) = 0;
    if (v4 && v5) {
      LODWORD(self) = [v4 isRemoteAccessAllowed] ^ 1;
    }
  }
  else
  {
    LOBYTE(self) = 0;
  }

  return (char)self;
}

- (void)_resubscribeForNotificationsOnResident:(id)a3
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  BOOL v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = [(HMDHome *)self primaryResident];
  uint64_t v7 = [v6 device];

  uint64_t v8 = (void *)MEMORY[0x1D9452090]();
  int v9 = self;
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    __int16 v11 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543874;
    id v50 = v11;
    __int16 v51 = 2112;
    id v52 = v4;
    __int16 v53 = 2112;
    uint64_t v54 = v7;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Resubscribing for notifications - previousResidentDevice: %@, current primaryResident: %@", buf, 0x20u);
  }
  id v43 = v4;
  if (isWatch()
    && ([(HMDHome *)v9 homeManager],
        id v12 = objc_claimAutoreleasedReturnValue(),
        int v13 = [v12 companionReachable],
        v12,
        v13))
  {
    id v14 = (void *)MEMORY[0x1D9452090]();
    id v15 = v9;
    id v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      id v17 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v50 = v17;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, "%{public}@Subscribing to companion", buf, 0xCu);
    }

    id v42 = 0;
  }
  else
  {
    id v42 = v7;
  }
  double v41 = [(HMDHome *)v9 residentEnabledDevices];
  id v18 = [MEMORY[0x1E4F1CA48] array];
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  id v19 = [(HMDHome *)v9 _residentUsers];
  uint64_t v20 = [v19 countByEnumeratingWithState:&v44 objects:v48 count:16];
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = *(void *)v45;
    do
    {
      for (uint64_t i = 0; i != v21; ++i)
      {
        if (*(void *)v45 != v22) {
          objc_enumerationMutation(v19);
        }
        id v24 = *(void **)(*((void *)&v44 + 1) + 8 * i);
        if ([v24 configurationState] == 2)
        {
          id v25 = [v24 userID];
          BOOL v26 = +[HMDDevice deviceWithDestination:v25];

          if (v26 && ([v26 isCurrentDevice] & 1) == 0) {
            [v18 addObject:v26];
          }
        }
      }
      uint64_t v21 = [v19 countByEnumeratingWithState:&v44 objects:v48 count:16];
    }
    while (v21);
  }

  if ([v41 count] || objc_msgSend(v18, "count"))
  {
    uint64_t v27 = objc_msgSend(MEMORY[0x1E4F1CA80], "setWithCapacity:", objc_msgSend(v18, "count") + objc_msgSend(v41, "count"));
    __int16 v28 = objc_msgSend(MEMORY[0x1E4F1CA80], "setWithCapacity:", objc_msgSend(v18, "count") + objc_msgSend(v41, "count"));
    id v29 = v42;
    if ([v42 isCurrentDevice])
    {
      [v27 addObjectsFromArray:v41];
      [v27 addObjectsFromArray:v18];
      uint64_t v30 = v43;
    }
    else
    {
      uint64_t v30 = v43;
      if (v43) {
        [v28 addObject:v43];
      }
      else {
        [v28 addObjectsFromArray:v18];
      }
      if (v42) {
        [v27 addObject:v42];
      }
      else {
        [v27 addObjectsFromArray:v18];
      }
    }
    uint64_t v31 = (void *)MEMORY[0x1D9452090]([v28 minusSet:v27]);
    uint64_t v32 = v9;
    __int16 v33 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      uint64_t v34 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v50 = v34;
      _os_log_impl(&dword_1D49D5000, v33, OS_LOG_TYPE_INFO, "%{public}@Modifying notification registrations with resident due to initial home launch or change in primary resident.", buf, 0xCu);
    }
    if ([v28 count])
    {
      __int16 v35 = [v28 allObjects];
      [(HMDHome *)v32 _disableNotificationsForDevices:v35];
    }
    if ([v27 count])
    {
      int64_t v36 = [v27 allObjects];
      [(HMDHome *)v32 _enableNotificationsForDevices:v36];
    }
    -[HMDHome _updateDirectAppleMediaNotificationsOnResidentChange:previousResidentDevice:](v32, v42, v30);
  }
  else
  {
    uint64_t v37 = (void *)MEMORY[0x1D9452090]();
    uint64_t v38 = v9;
    id v39 = HMFGetOSLogHandle();
    id v29 = v42;
    if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      id v40 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v50 = v40;
      _os_log_impl(&dword_1D49D5000, v39, OS_LOG_TYPE_INFO, "%{public}@There are no resident devices or remote gateways to register with", buf, 0xCu);
    }
    uint64_t v30 = v43;
  }
}

- (void)resubscribeForNotificationsOnResident:(id)a3
{
  id v4 = a3;
  BOOL v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __49__HMDHome_resubscribeForNotificationsOnResident___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

uint64_t __49__HMDHome_resubscribeForNotificationsOnResident___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _resubscribeForNotificationsOnResident:*(void *)(a1 + 40)];
}

- (void)_registerResidentReachabilityNotificationWithEnableAccessories:(id)a3 disableAccessories:(id)a4 completionHandler:(id)a5
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = (void (**)(id, void *))a5;
  __int16 v11 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v11);

  if (![(HMDHome *)self _canCurrentDeviceRegisterForReachabilityEventNotification])
  {
    id v19 = (void *)MEMORY[0x1D9452090]();
    uint64_t v20 = self;
    uint64_t v21 = HMFGetOSLogHandle();
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_13;
    }
    uint64_t v22 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    long long v62 = v22;
    id v23 = "%{public}@Current device is either watch or resident, do not have to send remote message for remote reachabili"
          "ty event notification registration";
    id v24 = v21;
    os_log_type_t v25 = OS_LOG_TYPE_DEBUG;
    goto LABEL_12;
  }
  id v12 = [(HMDHome *)self residentDeviceManager];
  int v13 = [v12 availableResidentDevices];
  uint64_t v14 = [v13 count];

  if (!v14)
  {
    id v19 = (void *)MEMORY[0x1D9452090]();
    uint64_t v20 = self;
    uint64_t v21 = HMFGetOSLogHandle();
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    uint64_t v22 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    long long v62 = v22;
    id v23 = "%{public}@There is no resident available to register for reachability event notification";
    id v24 = v21;
    os_log_type_t v25 = OS_LOG_TYPE_ERROR;
LABEL_12:
    _os_log_impl(&dword_1D49D5000, v24, v25, v23, buf, 0xCu);

LABEL_13:
    BOOL v26 = [MEMORY[0x1E4F28C58] hmErrorWithCode:48];
    if (v10) {
      v10[2](v10, v26);
    }
    goto LABEL_26;
  }
  if (![(HMDHome *)self isCurrentDeviceConfirmedPrimaryResident])
  {
    BOOL v26 = [(HMDHome *)self primaryResident];
    unsigned __int8 v27 = [v26 isConfirmed];
    __int16 v28 = [(HMDHome *)self primaryResident];
    id v29 = [v28 capabilities];
    int v30 = [v29 supportsCameraRecordingReachabilityNotifications];

    if (!v26 || ((v27 ^ 1) & 1) != 0 || v30 != 1)
    {
      uint64_t v48 = (void *)MEMORY[0x1D9452090]();
      __int16 v49 = self;
      id v50 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      {
        __int16 v51 = HMFGetLogIdentifier();
        id v52 = HMFBooleanToString();
        __int16 v53 = HMFBooleanToString();
        *(_DWORD *)buf = 138544130;
        long long v62 = v51;
        __int16 v63 = 2112;
        long long v64 = v52;
        __int16 v65 = 2112;
        long long v66 = v53;
        __int16 v67 = 2112;
        long long v68 = v26;
        _os_log_impl(&dword_1D49D5000, v50, OS_LOG_TYPE_ERROR, "%{public}@Primary resident is not confirmed (%@) or does not support camera recording reachability notifications (%@): %@", buf, 0x2Au);
      }
      long long v47 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
      if (v10) {
        v10[2](v10, v47);
      }
    }
    else
    {
      uint64_t v31 = objc_msgSend(v8, "na_map:", &__block_literal_global_815);
      uint64_t v32 = [v31 copy];

      __int16 v33 = objc_msgSend(v9, "na_map:", &__block_literal_global_817);
      uint64_t v34 = [v33 copy];

      v59[0] = @"HMDAccessoryResidentReachabilityNotificationEnableAccessoryUUIDsMessageKey";
      v59[1] = @"HMDAccessoryResidentReachabilityNotificationDisableAccessoryUUIDsMessageKey";
      uint64_t v55 = (void *)v34;
      long long v56 = (void *)v32;
      v60[0] = v32;
      v60[1] = v34;
      [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v60 forKeys:v59 count:2];
      v36 = __int16 v35 = v26;
      uint64_t v37 = [HMDRemoteDeviceMessageDestination alloc];
      uint64_t v38 = [(HMDHome *)self uuid];
      uint64_t v54 = v35;
      id v39 = [v35 device];
      id v40 = [(HMDRemoteDeviceMessageDestination *)v37 initWithTarget:v38 device:v39];
      double v41 = +[HMDRemoteMessage secureMessageWithName:@"HMDAccessoryResidentReachabilityNotificationRegistrationMessage" destination:v40 messagePayload:v36];

      v57[0] = MEMORY[0x1E4F143A8];
      v57[1] = 3221225472;
      void v57[2] = __111__HMDHome__registerResidentReachabilityNotificationWithEnableAccessories_disableAccessories_completionHandler___block_invoke_3;
      v57[3] = &unk_1E6A16B58;
      void v57[4] = self;
      uint64_t v58 = v10;
      id v42 = (void *)MEMORY[0x1D9452090]([v41 setResponseHandler:v57]);
      id v43 = self;
      long long v44 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
      {
        long long v45 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543874;
        long long v62 = v45;
        __int16 v63 = 2112;
        long long v64 = v41;
        __int16 v65 = 2112;
        long long v66 = v36;
        _os_log_impl(&dword_1D49D5000, v44, OS_LOG_TYPE_INFO, "%{public}@Sending reachability notification registration message %@ with payload: %@", buf, 0x20u);
      }
      long long v46 = [(HMDHome *)v43 msgDispatcher];
      [v46 sendMessage:v41];

      long long v47 = v56;
      BOOL v26 = v54;
    }

LABEL_26:
    goto LABEL_27;
  }
  id v15 = (void *)MEMORY[0x1D9452090]();
  id v16 = self;
  id v17 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    id v18 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    long long v62 = v18;
    _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_DEFAULT, "%{public}@Current device is confirmed primary resident, do not need to register for notification on confirmed primary resident itself", buf, 0xCu);
  }
  if (v10) {
    v10[2](v10, 0);
  }
LABEL_27:
}

void __111__HMDHome__registerResidentReachabilityNotificationWithEnableAccessories_disableAccessories_completionHandler___block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)MEMORY[0x1D9452090]();
  id v8 = *(id *)(a1 + 32);
  id v9 = HMFGetOSLogHandle();
  id v10 = v9;
  if (v5)
  {
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    __int16 v11 = HMFGetLogIdentifier();
    int v17 = 138543618;
    id v18 = v11;
    __int16 v19 = 2112;
    id v20 = v5;
    id v12 = "%{public}@Failed to update accessory reachability event notification registry due to error: %@";
    int v13 = v10;
    os_log_type_t v14 = OS_LOG_TYPE_ERROR;
    uint32_t v15 = 22;
  }
  else
  {
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
      goto LABEL_7;
    }
    __int16 v11 = HMFGetLogIdentifier();
    int v17 = 138543362;
    id v18 = v11;
    id v12 = "%{public}@Successfully updated accessory reachability event notification registry";
    int v13 = v10;
    os_log_type_t v14 = OS_LOG_TYPE_INFO;
    uint32_t v15 = 12;
  }
  _os_log_impl(&dword_1D49D5000, v13, v14, v12, (uint8_t *)&v17, v15);

LABEL_7:
  uint64_t v16 = *(void *)(a1 + 40);
  if (v16) {
    (*(void (**)(uint64_t, id))(v16 + 16))(v16, v5);
  }
}

id __111__HMDHome__registerResidentReachabilityNotificationWithEnableAccessories_disableAccessories_completionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = [a2 uuid];
  id v3 = [v2 UUIDString];

  return v3;
}

id __111__HMDHome__registerResidentReachabilityNotificationWithEnableAccessories_disableAccessories_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v2 = [a2 uuid];
  id v3 = [v2 UUIDString];

  return v3;
}

- (BOOL)_canCurrentDeviceRegisterForReachabilityEventNotification
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v3);

  if (!isWatch() && !isAppleTV() && !isHomePod()) {
    return 1;
  }
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = self;
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    int v9 = 138543362;
    id v10 = v7;
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_DEBUG, "%{public}@Skipping registering for reachability notification on watch / ATV / HomePod", (uint8_t *)&v9, 0xCu);
  }
  return 0;
}

- (void)setCameraReachabilityEventNotificationsEnabled:(BOOL)a3 forAccessory:(id)a4 completionHandler:(id)a5
{
  id v8 = a4;
  id v9 = a5;
  id v10 = [(HMDHome *)self workQueue];
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = __89__HMDHome_setCameraReachabilityEventNotificationsEnabled_forAccessory_completionHandler___block_invoke;
  v13[3] = &unk_1E6A16328;
  BOOL v16 = a3;
  void v13[4] = self;
  id v14 = v8;
  id v15 = v9;
  id v11 = v9;
  id v12 = v8;
  dispatch_async(v10, v13);
}

void __89__HMDHome_setCameraReachabilityEventNotificationsEnabled_forAccessory_completionHandler___block_invoke(uint64_t a1)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  id v2 = *(void **)(a1 + 32);
  int v3 = *(unsigned __int8 *)(a1 + 56);
  if (!*(unsigned char *)(a1 + 56))
  {
    id v4 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_5:
    uint64_t v6 = *(void *)(a1 + 40);
    id v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v6 count:1];
    [v2 _registerResidentReachabilityNotificationWithEnableAccessories:v4 disableAccessories:v5 completionHandler:*(void *)(a1 + 48)];

    if (!v3) {
      return;
    }
    goto LABEL_6;
  }
  v7[0] = *(void *)(a1 + 40);
  id v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:v7 count:1];
  if (!*(unsigned char *)(a1 + 56)) {
    goto LABEL_5;
  }
  [v2 _registerResidentReachabilityNotificationWithEnableAccessories:v4 disableAccessories:MEMORY[0x1E4F1CBF0] completionHandler:*(void *)(a1 + 48)];
LABEL_6:
}

- (void)_registerCameraReachabilityEventNotificationsWithCompletionHandler:(id)a3
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v29 = a3;
  id v4 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v4);

  id v5 = objc_alloc(MEMORY[0x1E4F1CA48]);
  uint64_t v6 = [(HMDHome *)self accessories];
  uint64_t v31 = objc_msgSend(v5, "initWithCapacity:", objc_msgSend(v6, "count"));

  id v7 = objc_alloc(MEMORY[0x1E4F1CA48]);
  id v8 = [(HMDHome *)self accessories];
  uint64_t v32 = objc_msgSend(v7, "initWithCapacity:", objc_msgSend(v8, "count"));

  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id obj = [(HMDHome *)self accessories];
  uint64_t v9 = [obj countByEnumeratingWithState:&v34 objects:v38 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v35;
    p_vtable = HMDEvent.vtable;
    uint64_t v30 = *(void *)v35;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v35 != v11) {
          objc_enumerationMutation(obj);
        }
        id v14 = *(id *)(*((void *)&v34 + 1) + 8 * v13);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v15 = v14;
        }
        else {
          id v15 = 0;
        }
        id v16 = v15;

        int v17 = [v16 cameraProfiles];
        uint64_t v18 = [v17 count];

        if (v18)
        {
          __int16 v19 = [(HMDHome *)self accountSettings];
          if ([v19 isHomeEnabled])
          {
            id v20 = [v16 cameraProfileSettingsManager];
            [v20 currentSettings];
            v22 = uint64_t v21 = self;
            [v22 notificationSettings];
            id v24 = v23 = p_vtable;
            char v25 = [v24 isReachabilityEventNotificationEnabled];

            p_vtable = v23;
            self = v21;
            uint64_t v11 = v30;

            BOOL v26 = v31;
            if (v25) {
              goto LABEL_15;
            }
          }
          else
          {
          }
          BOOL v26 = v32;
LABEL_15:
          [v26 addObject:v16];
        }

        ++v13;
      }
      while (v10 != v13);
      uint64_t v10 = [obj countByEnumeratingWithState:&v34 objects:v38 count:16];
    }
    while (v10);
  }

  unsigned __int8 v27 = (void *)[v31 copy];
  __int16 v28 = (void *)[v32 copy];
  [(HMDHome *)self _registerResidentReachabilityNotificationWithEnableAccessories:v27 disableAccessories:v28 completionHandler:v29];
}

- (void)registerCameraReachabilityEventNotificationsWithCompletionHandler:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __77__HMDHome_registerCameraReachabilityEventNotificationsWithCompletionHandler___block_invoke;
  v7[3] = &unk_1E6A19530;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

uint64_t __77__HMDHome_registerCameraReachabilityEventNotificationsWithCompletionHandler___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _registerCameraReachabilityEventNotificationsWithCompletionHandler:*(void *)(a1 + 40)];
}

- (void)_disableNotificationsForDevices:(id)a3
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  if ([v4 count])
  {
    id v6 = (void *)MEMORY[0x1D9452090]();
    id v7 = self;
    id v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v108 = v9;
      __int16 v109 = 2112;
      id v110 = v4;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_DEBUG, "%{public}@Disabling Notifications on %@", buf, 0x16u);
    }
    __int16 v65 = v4;

    char v77 = [MEMORY[0x1E4F1CA60] dictionary];
    long long v68 = [MEMORY[0x1E4F1CA48] array];
    int v80 = -[HMDHome supportsUnifiedMediaNotificationsOnResidents](v7);
    long long v98 = 0u;
    long long v99 = 0u;
    long long v100 = 0u;
    long long v101 = 0u;
    id obj = [(HMDHome *)v7 accessories];
    uint64_t v10 = v7;
    __int16 v81 = v7;
    id v69 = (id)[obj countByEnumeratingWithState:&v98 objects:v106 count:16];
    if (v69)
    {
      uint64_t v67 = *(void *)v99;
      do
      {
        uint64_t v11 = 0;
        do
        {
          if (*(void *)v99 != v67) {
            objc_enumerationMutation(obj);
          }
          id v12 = *(void **)(*((void *)&v98 + 1) + 8 * (void)v11);
          uint64_t v13 = [MEMORY[0x1E4F1CA48] array];
          id v14 = v12;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v15 = v14;
          }
          else {
            id v15 = 0;
          }
          id v16 = v15;

          id v17 = v14;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = 0;
          }
          id v19 = v18;

          if (v16)
          {
            long long v71 = v17;
            id v73 = v19;
            uint64_t v78 = v11;
            long long v96 = 0u;
            long long v97 = 0u;
            long long v94 = 0u;
            long long v95 = 0u;
            id v75 = v16;
            id v20 = [v16 services];
            uint64_t v21 = [v20 countByEnumeratingWithState:&v94 objects:v105 count:16];
            if (v21)
            {
              uint64_t v22 = v21;
              uint64_t v23 = *(void *)v95;
              do
              {
                for (uint64_t i = 0; i != v22; ++i)
                {
                  if (*(void *)v95 != v23) {
                    objc_enumerationMutation(v20);
                  }
                  char v25 = *(void **)(*((void *)&v94 + 1) + 8 * i);
                  long long v90 = 0u;
                  long long v91 = 0u;
                  long long v92 = 0u;
                  long long v93 = 0u;
                  BOOL v26 = [v25 characteristics];
                  uint64_t v27 = [v26 countByEnumeratingWithState:&v90 objects:v104 count:16];
                  if (v27)
                  {
                    uint64_t v28 = v27;
                    uint64_t v29 = *(void *)v91;
                    do
                    {
                      for (uint64_t j = 0; j != v28; ++j)
                      {
                        if (*(void *)v91 != v29) {
                          objc_enumerationMutation(v26);
                        }
                        uint64_t v31 = *(void **)(*((void *)&v90 + 1) + 8 * j);
                        if ([v31 supportsNotification])
                        {
                          uint64_t v32 = [v31 instanceID];
                          [v13 addObject:v32];
                        }
                      }
                      uint64_t v28 = [v26 countByEnumeratingWithState:&v90 objects:v104 count:16];
                    }
                    while (v28);
                  }
                }
                uint64_t v22 = [v20 countByEnumeratingWithState:&v94 objects:v105 count:16];
              }
              while (v22);
            }

            __int16 v33 = [v71 uuid];
            long long v34 = [v33 UUIDString];

            if ([v13 count])
            {
              long long v35 = (void *)[v13 copy];
              [v77 setObject:v35 forKeyedSubscript:v34];
            }
            uint64_t v10 = v81;
            uint64_t v11 = v78;
            id v19 = v73;
            id v16 = v75;
LABEL_35:

            goto LABEL_36;
          }
          if (v19)
          {
            uint64_t v36 = [v19 mediaProfile];
            if (v36)
            {
              long long v34 = (void *)v36;
              [v68 addObject:v36];
            }
            else
            {
              long long v37 = (void *)MEMORY[0x1D9452090]();
              uint64_t v38 = v10;
              uint64_t v39 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
              {
                id v40 = HMFGetLogIdentifier();
                *(_DWORD *)buf = 138543618;
                uint64_t v108 = v40;
                __int16 v109 = 2112;
                id v110 = v19;
                _os_log_impl(&dword_1D49D5000, v39, OS_LOG_TYPE_INFO, "%{public}@skipping disabling notifications for apple media accessory without media profile: %@", buf, 0x16u);
              }
              long long v34 = 0;
            }
            goto LABEL_35;
          }
LABEL_36:

          uint64_t v11 = (char *)v11 + 1;
        }
        while (v11 != v69);
        uint64_t v41 = [obj countByEnumeratingWithState:&v98 objects:v106 count:16];
        id v69 = (id)v41;
      }
      while (v41);
    }

    long long v74 = [MEMORY[0x1E4F1CA48] array];
    if ([v77 count] || objc_msgSend(v68, "count"))
    {
      long long v88 = 0u;
      long long v89 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      id v70 = v65;
      uint64_t v76 = [v70 countByEnumeratingWithState:&v86 objects:v103 count:16];
      if (v76)
      {
        uint64_t v72 = *(void *)v87;
        do
        {
          uint64_t v42 = 0;
          do
          {
            if (*(void *)v87 != v72) {
              objc_enumerationMutation(v70);
            }
            uint64_t v79 = v42;
            id v43 = *(void **)(*((void *)&v86 + 1) + 8 * v42);
            long long v44 = [MEMORY[0x1E4F1CA60] dictionary];
            long long v82 = 0u;
            long long v83 = 0u;
            long long v84 = 0u;
            long long v85 = 0u;
            id v45 = v68;
            uint64_t v46 = [v45 countByEnumeratingWithState:&v82 objects:v102 count:16];
            if (v46)
            {
              uint64_t v47 = v46;
              uint64_t v48 = *(void *)v83;
              do
              {
                for (uint64_t k = 0; k != v47; ++k)
                {
                  if (*(void *)v83 != v48) {
                    objc_enumerationMutation(v45);
                  }
                  id v50 = *(void **)(*((void *)&v82 + 1) + 8 * k);
                  __int16 v51 = [v50 accessory];
                  objc_opt_class();
                  if (objc_opt_isKindOfClass()) {
                    id v52 = v51;
                  }
                  else {
                    id v52 = 0;
                  }
                  id v53 = v52;

                  if (!v53
                    || (([v53 device], uint64_t v54 = objc_claimAutoreleasedReturnValue(), v54 != v43)
                      ? (int v55 = 1)
                      : (int v55 = v80),
                        v54,
                        BOOL v56 = v55 == 1,
                        uint64_t v10 = v81,
                        v56))
                  {
                    uint64_t v57 = -[HMDHome mediaNotificationPayloadForProfile:](v10, v50);
                    [v44 addEntriesFromDictionary:v57];
                  }
                }
                uint64_t v47 = [v45 countByEnumeratingWithState:&v82 objects:v102 count:16];
              }
              while (v47);
            }

            uint64_t v58 = (void *)[v77 copy];
            id v59 = (void *)[v44 copy];
            id v60 = (void *)[v74 copy];
            [(HMDHome *)v10 _modifyCharacteristicNotifications:v58 mediaNotifications:v59 actionSetNotificationPayload:v60 enableNotification:0 withDevice:v43];

            uint64_t v42 = v79 + 1;
          }
          while (v79 + 1 != v76);
          uint64_t v76 = [v70 countByEnumeratingWithState:&v86 objects:v103 count:16];
        }
        while (v76);
      }

      id v4 = v65;
    }
    else
    {
      long long v61 = (void *)MEMORY[0x1D9452090]();
      long long v62 = v10;
      __int16 v63 = HMFGetOSLogHandle();
      id v4 = v65;
      if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
      {
        long long v64 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        uint64_t v108 = v64;
        _os_log_impl(&dword_1D49D5000, v63, OS_LOG_TYPE_INFO, "%{public}@There are no characteristics requiring deregistration", buf, 0xCu);
      }
    }
  }
}

- (void)disableNotificationsForDevices:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __42__HMDHome_disableNotificationsForDevices___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

uint64_t __42__HMDHome_disableNotificationsForDevices___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _disableNotificationsForDevices:*(void *)(a1 + 40)];
}

- (void)_enableNotificationsForDevices:(id)a3
{
  uint64_t v194 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  dispatch_group_t v119 = v4;
  if ([v4 count])
  {
    id v6 = (void *)MEMORY[0x1D9452090]();
    id v7 = self;
    id v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v191 = v9;
      __int16 v192 = 2112;
      id v193 = v119;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_DEBUG, "%{public}@Enabling Notifications on %@", buf, 0x16u);
    }
    uint64_t v10 = [(HMDHome *)v7 notificationRegistrations];
    uint64_t v143 = [v10 count];

    uint64_t v11 = [(HMDHome *)v7 primaryResident];
    id v12 = [v11 device];

    if ([(HMDHome *)v7 isCurrentDeviceAvailableResident]
      && ![(HMDHome *)v7 isCurrentDevicePrimaryResident])
    {
      long long v180 = 0u;
      long long v181 = 0u;
      long long v178 = 0u;
      long long v179 = 0u;
      id v13 = v119;
      uint64_t v14 = [v13 countByEnumeratingWithState:&v178 objects:v189 count:16];
      if (v14)
      {
        uint64_t v15 = v14;
        uint64_t v16 = *(void *)v179;
        while (2)
        {
          for (uint64_t i = 0; i != v15; ++i)
          {
            if (*(void *)v179 != v16) {
              objc_enumerationMutation(v13);
            }
            if ([*(id *)(*((void *)&v178 + 1) + 8 * i) isEqual:v12])
            {
              int v146 = 1;
              goto LABEL_17;
            }
          }
          uint64_t v15 = [v13 countByEnumeratingWithState:&v178 objects:v189 count:16];
          if (v15) {
            continue;
          }
          break;
        }
      }
      int v146 = 0;
LABEL_17:
    }
    else
    {
      int v146 = 0;
    }
    __int16 v147 = [MEMORY[0x1E4F1CA48] array];
    id v148 = v7;
    long long v174 = 0u;
    long long v175 = 0u;
    long long v176 = 0u;
    long long v177 = 0u;
    id obj = [(HMDHome *)v7 triggers];
    id v142 = v12;
    uint64_t v144 = [obj countByEnumeratingWithState:&v174 objects:v188 count:16];
    if (v144)
    {
      uint64_t v140 = *(void *)v175;
      do
      {
        uint64_t v18 = 0;
        do
        {
          if (*(void *)v175 != v140) {
            objc_enumerationMutation(obj);
          }
          uint64_t v151 = v18;
          id v19 = *(id *)(*((void *)&v174 + 1) + 8 * v18);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v20 = v19;
          }
          else {
            id v20 = 0;
          }
          id v21 = v20;

          long long v172 = 0u;
          long long v173 = 0u;
          long long v170 = 0u;
          long long v171 = 0u;
          id v149 = v21;
          uint64_t v22 = [v21 characteristicEvents];
          uint64_t v23 = [v22 countByEnumeratingWithState:&v170 objects:v187 count:16];
          if (v23)
          {
            uint64_t v24 = v23;
            uint64_t v25 = *(void *)v171;
            do
            {
              for (uint64_t j = 0; j != v24; ++j)
              {
                if (*(void *)v171 != v25) {
                  objc_enumerationMutation(v22);
                }
                uint64_t v27 = *(void **)(*((void *)&v170 + 1) + 8 * j);
                uint64_t v28 = [v27 characteristic];

                if (v28)
                {
                  uint64_t v29 = [v27 characteristic];
                  [v147 addObject:v29];
                }
                else
                {
                  uint64_t v30 = (void *)MEMORY[0x1D9452090]();
                  uint64_t v31 = v7;
                  uint64_t v32 = HMFGetOSLogHandle();
                  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
                  {
                    __int16 v33 = HMFGetLogIdentifier();
                    *(_DWORD *)buf = 138543618;
                    id v191 = v33;
                    __int16 v192 = 2112;
                    id v193 = v27;
                    _os_log_impl(&dword_1D49D5000, v32, OS_LOG_TYPE_ERROR, "%{public}@Characteristic of HMDCharacteristicEvent %@ is nil!", buf, 0x16u);
                  }
                }
                id v12 = v142;
              }
              uint64_t v24 = [v22 countByEnumeratingWithState:&v170 objects:v187 count:16];
            }
            while (v24);
          }

          uint64_t v18 = v151 + 1;
        }
        while (v151 + 1 != v144);
        uint64_t v144 = [obj countByEnumeratingWithState:&v174 objects:v188 count:16];
      }
      while (v144);
    }

    long long v127 = [MEMORY[0x1E4F1CA60] dictionary];
    id v120 = [MEMORY[0x1E4F1CA60] dictionary];
    unint64_t v124 = [MEMORY[0x1E4F1CA60] dictionary];
    long long v34 = v7;
    int v121 = -[HMDHome supportsUnifiedMediaNotificationsOnResidents](v7);
    long long v166 = 0u;
    long long v167 = 0u;
    long long v168 = 0u;
    long long v169 = 0u;
    id v125 = [(HMDHome *)v7 accessories];
    uint64_t v35 = [v125 countByEnumeratingWithState:&v166 objects:v186 count:16];
    if (v35)
    {
      uint64_t v36 = v35;
      uint64_t v37 = *(void *)v167;
      uint64_t v135 = *MEMORY[0x1E4F5BA48];
      p_vtable = HMDEvent.vtable;
      p_info = &OBJC_METACLASS___HMDMessageHandler.info;
      uint64_t v122 = *(void *)v167;
      do
      {
        uint64_t v40 = 0;
        uint64_t v123 = v36;
        do
        {
          if (*(void *)v167 != v37) {
            objc_enumerationMutation(v125);
          }
          uint64_t v130 = v40;
          id v41 = *(id *)(*((void *)&v166 + 1) + 8 * v40);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            uint64_t v42 = v41;
          }
          else {
            uint64_t v42 = 0;
          }
          id v43 = v42;

          id v44 = v41;
          id v45 = v43;
          id v46 = v44;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            uint64_t v47 = v46;
          }
          else {
            uint64_t v47 = 0;
          }
          id v48 = v47;
          id v129 = v46;

          if (!v45)
          {
            if (v48) {
              int v57 = v121;
            }
            else {
              int v57 = 0;
            }
            if (v57 != 1) {
              goto LABEL_119;
            }
            uint64_t v58 = [v48 mediaProfile];
            uint64_t v126 = 0;
            if (v58)
            {
              if (v143)
              {
                id v59 = -[HMDHome mediaNotificationPayloadForProfile:](v34, v58);
                [v124 addEntriesFromDictionary:v59];

LABEL_117:
                goto LABEL_118;
              }
              long long v94 = (void *)MEMORY[0x1D9452090]();
              long long v101 = v34;
              long long v96 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
              {
                long long v97 = HMFGetLogIdentifier();
                *(_DWORD *)buf = 138543618;
                id v191 = v97;
                __int16 v192 = 2112;
                id v193 = v48;
                long long v98 = v96;
                os_log_type_t v99 = OS_LOG_TYPE_DEBUG;
                long long v100 = "%{public}@Skipping enabling notifications for apple media accessory %@ because home notifications are disabled";
LABEL_115:
                _os_log_impl(&dword_1D49D5000, v98, v99, v100, buf, 0x16u);
              }
            }
            else
            {
              long long v94 = (void *)MEMORY[0x1D9452090]();
              long long v95 = v34;
              long long v96 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
              {
                long long v97 = HMFGetLogIdentifier();
                *(_DWORD *)buf = 138543618;
                id v191 = v97;
                __int16 v192 = 2112;
                id v193 = v48;
                long long v98 = v96;
                os_log_type_t v99 = OS_LOG_TYPE_INFO;
                long long v100 = "%{public}@Skipping enabling notifications for apple media accessory without media profile: %@";
                goto LABEL_115;
              }
            }
            uint64_t v37 = v122;

            goto LABEL_117;
          }
          id v128 = v48;
          if (shouldSkipRemoteAccessoryNotificationRegistration(v34, v45))
          {
            __int16 v49 = v45;
            id v50 = (void *)MEMORY[0x1D9452090]();
            __int16 v51 = v34;
            id v52 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              id v53 = p_info;
              uint64_t v54 = p_vtable;
              v56 = uint64_t v55 = v37;
              *(_DWORD *)buf = 138543618;
              id v191 = v56;
              __int16 v192 = 2112;
              id v193 = v49;
              _os_log_impl(&dword_1D49D5000, v52, OS_LOG_TYPE_INFO, "%{public}@Dropping all characteristics for %@ from remote notification as partitioned network is no longer supported by residents", buf, 0x16u);

              uint64_t v37 = v55;
              p_vtable = v54;
              p_info = v53;
              uint64_t v36 = v123;
            }

            id v45 = v49;
            id v48 = v128;
            goto LABEL_119;
          }
          __int16 v145 = [MEMORY[0x1E4F1CA48] array];
          id v141 = [MEMORY[0x1E4F1CA60] dictionary];
          long long v162 = 0u;
          long long v163 = 0u;
          long long v164 = 0u;
          long long v165 = 0u;
          uint64_t v126 = v45;
          id v131 = [v45 services];
          uint64_t v133 = [v131 countByEnumeratingWithState:&v162 objects:v185 count:16];
          if (!v133) {
            goto LABEL_106;
          }
          uint64_t v132 = *(void *)v163;
          do
          {
            uint64_t v60 = 0;
            do
            {
              if (*(void *)v163 != v132) {
                objc_enumerationMutation(v131);
              }
              uint64_t v134 = v60;
              long long v61 = *(void **)(*((void *)&v162 + 1) + 8 * v60);
              long long v158 = 0u;
              long long v159 = 0u;
              long long v160 = 0u;
              long long v161 = 0u;
              id v153 = v61;
              id v150 = [v61 characteristics];
              uint64_t v62 = [v150 countByEnumeratingWithState:&v158 objects:v184 count:16];
              if (v62)
              {
                uint64_t v63 = v62;
                uint64_t v64 = *(void *)v159;
                do
                {
                  uint64_t v65 = 0;
                  do
                  {
                    if (*(void *)v159 != v64) {
                      objc_enumerationMutation(v150);
                    }
                    long long v66 = *(void **)(*((void *)&v158 + 1) + 8 * v65);
                    if ([v66 supportsNotification])
                    {
                      uint64_t v67 = [(HMDHome *)v34 hapMetadata];
                      long long v68 = [v66 type];
                      id v69 = [v153 type];
                      char v70 = [v67 shouldFilterEnableNotificationsForCharacteristicType:v68 serviceType:v69];

                      if ((v70 & 1) == 0)
                      {
                        id v152 = [v66 type];
                        long long v71 = [v153 type];
                        uint64_t v72 = [(HMDHome *)v34 notificationRegistry];
                        id v183 = v66;
                        id v73 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v183 count:1];
                        long long v74 = [v72 usersRegisteredForNotificationsForCharacteristics:v73];
                        id v75 = (void *)[v74 mutableCopy];

                        uint64_t v76 = [v12 remoteDestinationString];
                        if (v76) {
                          [v75 removeObject:v76];
                        }
                        uint64_t v77 = [v75 count];
                        if (([v147 containsObject:v66] & 1) != 0
                          || ([v66 isNonHomeNotificationsEnabled] & 1) != 0)
                        {
                          goto LABEL_83;
                        }
                        uint64_t v78 = [(HMDHome *)v148 hapMetadata];
                        if (([v78 requiresDeviceUnlock:v152 forService:v71] & 1) == 0)
                        {
                          uint64_t v79 = [(HMDHome *)v148 hapMetadata];
                          if (([v79 shouldAutoEnableNotificationForCharacteristic:v152 ofService:v71] & 1) == 0
                            && (![v152 isEqualToString:@"000000A6-0000-1000-8000-0026BB765291"]|| (objc_msgSend(v71, "isEqualToString:", v135) & 1) == 0))
                          {
                            if (v143)
                            {
                              long long v136 = [(HMDHome *)v148 hapMetadata];
                              char objb = [v136 shouldEnableHomeNotificationForCharacteristicType:v152 serviceType:v71];

                              id v12 = v142;
                              if (objb) {
                                goto LABEL_83;
                              }
                            }
                            else
                            {

                              id v12 = v142;
                            }
                            if (v77)
                            {
LABEL_83:
                              if (v146
                                && [v66 isNotificationEnabledForClientIdentifierPrefix:@"com.apple.HomeKitDaemon.Local"])
                              {
                                int v80 = (void *)MEMORY[0x1D9452090]();
                                __int16 v81 = v148;
                                long long v82 = HMFGetOSLogHandle();
                                if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
                                {
                                  HMFGetLogIdentifier();
                                  long long v83 = obja = v80;
                                  *(_DWORD *)buf = 138543618;
                                  id v191 = v83;
                                  __int16 v192 = 2112;
                                  id v193 = v66;
                                  _os_log_impl(&dword_1D49D5000, v82, OS_LOG_TYPE_INFO, "%{public}@Dropping characteristic for remote notifications from primary resident because it should be local only: %@", buf, 0x16u);

                                  int v80 = obja;
                                }

                                id v12 = v142;
                              }
                              else
                              {
                                long long v84 = [v66 instanceID];
                                [v145 addObject:v84];

                                long long v85 = [v66 changeThresholdForEnabledNotifications];
                                if (v85 && !v143)
                                {
                                  long long v86 = [v66 instanceID];
                                  long long v87 = [v86 stringValue];
                                  [v141 setObject:v85 forKeyedSubscript:v87];
                                }
                              }
                            }

                            long long v34 = v148;
                            goto LABEL_93;
                          }

                          id v12 = v142;
                        }

                        goto LABEL_83;
                      }
                    }
LABEL_93:
                    ++v65;
                  }
                  while (v63 != v65);
                  uint64_t v88 = [v150 countByEnumeratingWithState:&v158 objects:v184 count:16];
                  uint64_t v63 = v88;
                }
                while (v88);
              }

              uint64_t v60 = v134 + 1;
            }
            while (v134 + 1 != v133);
            uint64_t v133 = [v131 countByEnumeratingWithState:&v162 objects:v185 count:16];
          }
          while (v133);
LABEL_106:

          long long v89 = [v129 uuid];
          long long v90 = [v89 UUIDString];

          if ([v145 count])
          {
            long long v91 = (void *)[v145 copy];
            [v127 setObject:v91 forKeyedSubscript:v90];
          }
          long long v92 = v141;
          uint64_t v37 = v122;
          uint64_t v36 = v123;
          p_vtable = (void **)(HMDEvent + 24);
          p_info = (__objc2_class_ro **)(&OBJC_METACLASS___HMDMessageHandler + 32);
          id v48 = v128;
          if ([v141 count])
          {
            long long v93 = (void *)[v141 copy];
            [v120 setObject:v93 forKeyedSubscript:v90];

            long long v92 = v141;
          }

LABEL_118:
          id v45 = v126;
LABEL_119:

          uint64_t v40 = v130 + 1;
        }
        while (v130 + 1 != v36);
        uint64_t v36 = [v125 countByEnumeratingWithState:&v166 objects:v186 count:16];
      }
      while (v36);
    }

    long long v102 = [MEMORY[0x1E4F1CA48] array];
    [v127 count];
    if ([v127 count] || objc_msgSend(v124, "count"))
    {
      long long v156 = 0u;
      long long v157 = 0u;
      long long v154 = 0u;
      long long v155 = 0u;
      id v103 = v119;
      uint64_t v104 = [v103 countByEnumeratingWithState:&v154 objects:v182 count:16];
      if (v104)
      {
        uint64_t v105 = v104;
        uint64_t v106 = *(void *)v155;
        do
        {
          for (uint64_t k = 0; k != v105; ++k)
          {
            if (*(void *)v155 != v106) {
              objc_enumerationMutation(v103);
            }
            uint64_t v108 = *(void **)(*((void *)&v154 + 1) + 8 * k);
            __int16 v109 = [v108 capabilities];
            int v110 = [v109 supportsUnifiedMediaNotifications];

            if (v110) {
              uint64_t v111 = (void *)[v124 copy];
            }
            else {
              uint64_t v111 = 0;
            }
            long long v112 = (void *)[v127 copy];
            uint64_t v113 = (void *)[v111 copy];
            id v114 = (void *)[v102 copy];
            [(HMDHome *)v148 _modifyCharacteristicNotifications:v112 mediaNotifications:v113 actionSetNotificationPayload:v114 enableNotification:1 withDevice:v108];
          }
          uint64_t v105 = [v103 countByEnumeratingWithState:&v154 objects:v182 count:16];
        }
        while (v105);
      }

      id v12 = v142;
    }
    else
    {
      uint64_t v115 = (void *)MEMORY[0x1D9452090]();
      uint64_t v116 = v34;
      uint64_t v117 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v117, OS_LOG_TYPE_INFO))
      {
        uint64_t v118 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v191 = v118;
        _os_log_impl(&dword_1D49D5000, v117, OS_LOG_TYPE_INFO, "%{public}@There are no characteristics/media properties requiring registration", buf, 0xCu);
      }
    }
  }
}

- (void)enableNotificationsForDevices:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __41__HMDHome_enableNotificationsForDevices___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

uint64_t __41__HMDHome_enableNotificationsForDevices___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _enableNotificationsForDevices:*(void *)(a1 + 40)];
}

- (void)enableMediaNotifications:(BOOL)a3 directlyOnMediaAccessory:(id)a4 completion:(id)a5
{
  id v8 = a4;
  id v9 = a5;
  uint64_t v10 = [(HMDHome *)self workQueue];
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = __72__HMDHome_enableMediaNotifications_directlyOnMediaAccessory_completion___block_invoke;
  v13[3] = &unk_1E6A16328;
  BOOL v16 = a3;
  void v13[4] = self;
  id v14 = v8;
  id v15 = v9;
  id v11 = v9;
  id v12 = v8;
  dispatch_async(v10, v13);
}

void __72__HMDHome_enableMediaNotifications_directlyOnMediaAccessory_completion___block_invoke(uint64_t a1)
{
}

- (void)enableHomeNotificationsForMediaAccessory:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __52__HMDHome_enableHomeNotificationsForMediaAccessory___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __52__HMDHome_enableHomeNotificationsForMediaAccessory___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) notificationRegistrationsForAppleMediaAccessories];
  uint64_t v3 = [v2 count];

  if (v3)
  {
    id v4 = *(void **)(a1 + 32);
    id v5 = *(void **)(a1 + 40);
    -[HMDHome _enableMediaNotifications:forMediaAccessory:](v4, 1, v5);
  }
}

- (void)subscribeForNotificationsFromRemoteGateway
{
  uint64_t v3 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __53__HMDHome_subscribeForNotificationsFromRemoteGateway__block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v3, block);
}

void __53__HMDHome_subscribeForNotificationsFromRemoteGateway__block_invoke(uint64_t a1)
{
}

- (void)redispatchToResidentMessage:(id)a3 target:(id)a4 responseQueue:(id)a5 viaDevice:(id)a6
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  id v93 = a3;
  id v10 = a4;
  id v11 = a5;
  id v12 = a6;
  long long v92 = v10;
  if (v10)
  {
    id v13 = v93;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v14 = v13;
    }
    else {
      id v14 = 0;
    }
    id v15 = v14;

    if (v15) {
      BOOL v16 = (HMDAssertionLogEvent *)v13;
    }
    else {
      BOOL v16 = (HMDAssertionLogEvent *)[v13 mutableCopy];
    }
    id v17 = v16;

    uint64_t v18 = [(HMDAssertionLogEvent *)v17 responseHandler];
    if (v18)
    {
      v94[0] = MEMORY[0x1E4F143A8];
      v94[1] = 3221225472;
      v94[2] = __70__HMDHome_redispatchToResidentMessage_target_responseQueue_viaDevice___block_invoke;
      v94[3] = &unk_1E6A16B58;
      id v95 = v11;
      id v96 = v18;
      [(HMDAssertionLogEvent *)v17 setResponseHandler:v94];
    }
    id v19 = [(HMDAssertionLogEvent *)v17 name];
    int v20 = [v19 isEqualToString:@"kMultipleCharacteristicWriteRequestKey"];

    if (!isiOSDevice()) {
      goto LABEL_15;
    }
    if (redispatchToResidentMessage_target_responseQueue_viaDevice__pred != -1) {
      dispatch_once(&redispatchToResidentMessage_target_responseQueue_viaDevice__pred, &__block_literal_global_792);
    }
    id v21 = (void *)redispatchToResidentMessage_target_responseQueue_viaDevice___restrictedToLocalMessages;
    uint64_t v22 = [(HMDAssertionLogEvent *)v17 name];
    LODWORD(v21) = [v21 containsObject:v22];

    if (!v21) {
      goto LABEL_15;
    }
    uint64_t v23 = [(HMDHome *)self currentUser];
    char v24 = [v23 isRemoteAccessAllowed];

    if ((v24 & 1) == 0)
    {
      id v91 = v11;
      BOOL v69 = [(HMDHome *)self isResidentFirstAccessoryCommunicationEnabled];
      char v70 = (void *)MEMORY[0x1D9452090]();
      long long v71 = self;
      uint64_t v72 = HMFGetOSLogHandle();
      BOOL v73 = os_log_type_enabled(v72, OS_LOG_TYPE_INFO);
      if (!v69)
      {
        if (v73)
        {
          uint64_t v77 = HMFGetLogIdentifier();
          uint64_t v78 = [(HMDHome *)v71 currentUser];
          uint64_t v79 = [v78 shortDescription];
          *(_DWORD *)buf = 138543618;
          long long v98 = v77;
          __int16 v99 = 2112;
          long long v100 = v79;
          _os_log_impl(&dword_1D49D5000, v72, OS_LOG_TYPE_INFO, "%{public}@Remote access is disabled for the current user: %@", buf, 0x16u);
        }
        uint64_t v27 = [MEMORY[0x1E4F28C58] hmErrorWithCode:4];
        [(HMDAssertionLogEvent *)v17 respondWithError:v27];
        id v11 = v91;
        goto LABEL_40;
      }
      if (v73)
      {
        HMFGetLogIdentifier();
        v74 = uint64_t v88 = v70;
        id v75 = [(HMDHome *)v71 currentUser];
        uint64_t v76 = [v75 displayName];
        *(_DWORD *)buf = 138543618;
        long long v98 = v74;
        __int16 v99 = 2112;
        long long v100 = v76;
        _os_log_impl(&dword_1D49D5000, v72, OS_LOG_TYPE_INFO, "%{public}@Remote access is disabled for the user %@, restricting to local transports...", buf, 0x16u);

        char v70 = v88;
      }

      int v25 = 1;
      id v11 = v91;
    }
    else
    {
LABEL_15:
      int v25 = 0;
    }
    BOOL v26 = [(HMDAssertionLogEvent *)v17 messagePayload];
    uint64_t v27 = (void *)[v26 mutableCopy];

    if (v25) {
      [(HMDAssertionLogEvent *)v17 setRemoteDisallowsIDSRacing:1];
    }
    uint64_t v28 = [MEMORY[0x1E4F653F0] currentActivity];
    uint64_t v29 = (void *)v28;
    if (v12)
    {
      [(HMDAssertionLogEvent *)v17 setSecureRemote:1];
      uint64_t v30 = [[HMDRemoteDeviceMessageDestination alloc] initWithTarget:v92 device:v12];
      [(HMDAssertionLogEvent *)v17 setDestination:v30];

      [v27 setObject:0 forKeyedSubscript:@"kIDSMessageSourceIDKey"];
      if (([(HMDHome *)self isResidentFirstAccessoryCommunicationEnabled] & v20) == 1)
      {
        uint64_t v31 = [v12 capabilities];
        char v32 = [v31 supportsResidentFirstAccessoryCommunication];

        if ((v32 & 1) == 0) {
          [v27 setObject:0 forKeyedSubscript:@"kMultiPartResponseKey"];
        }
      }
      __int16 v33 = (void *)MEMORY[0x1D9452090]([(HMDAssertionLogEvent *)v17 setMessagePayload:v27]);
      long long v34 = self;
      uint64_t v35 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        long long v86 = v27;
        long long v89 = v18;
        v37 = id v36 = v11;
        uint64_t v38 = [(HMDAssertionLogEvent *)v17 shortDescription];
        [v12 shortDescription];
        v40 = uint64_t v39 = v29;
        *(_DWORD *)buf = 138543874;
        long long v98 = v37;
        __int16 v99 = 2112;
        long long v100 = v38;
        __int16 v101 = 2112;
        long long v102 = v40;
        _os_log_impl(&dword_1D49D5000, v35, OS_LOG_TYPE_INFO, "%{public}@Redispatching message %@ to device: %@", buf, 0x20u);

        uint64_t v29 = v39;
        id v11 = v36;
        uint64_t v27 = v86;
        uint64_t v18 = v89;
      }

      [(HMDAssertionLogEvent *)v17 name];

      [(HMDAssertionLogEvent *)v17 identifier];
      [v12 identifier];

      id v41 = +[HMDSecureRemoteMessageTransport defaultTransport];
      uint64_t v42 = (void *)[(HMDAssertionLogEvent *)v17 copy];
      [v41 sendMessage:v42 completionHandler:0];
    }
    else
    {
      long long v85 = (void *)v28;
      id v90 = v11;
      id v43 = (void *)MEMORY[0x1D9452090]();
      id v44 = self;
      id v45 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
      {
        id v46 = HMFGetLogIdentifier();
        uint64_t v47 = [(HMDAssertionLogEvent *)v17 shortDescription];
        *(_DWORD *)buf = 138543618;
        long long v98 = v46;
        __int16 v99 = 2112;
        long long v100 = v47;
        _os_log_impl(&dword_1D49D5000, v45, OS_LOG_TYPE_INFO, "%{public}@Redispatching message %@ to resident", buf, 0x16u);
      }
      id v48 = [(HMDHome *)v44 homeManager];
      __int16 v49 = [v48 messageDispatcher];
      id v41 = [v49 residentCommunicationHandlerForHome:v44];

      uint64_t v50 = [v41 preferredDevice];
      if (v50)
      {
        uint64_t v42 = (void *)v50;
        if (v20)
        {
          if ([(HMDHome *)v44 isResidentFirstAccessoryCommunicationEnabled])
          {
            __int16 v51 = [v42 capabilities];
            char v52 = [v51 supportsResidentFirstAccessoryCommunication];

            if ((v52 & 1) == 0) {
              [v27 setObject:0 forKeyedSubscript:@"kMultiPartResponseKey"];
            }
          }
        }
        id v53 = (void *)MEMORY[0x1D9452090]([(HMDAssertionLogEvent *)v17 setMessagePayload:v27]);
        uint64_t v54 = v44;
        uint64_t v55 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v56 = long long v84 = v53;
          [(HMDAssertionLogEvent *)v17 shortDescription];
          long long v87 = v27;
          v58 = int v57 = v18;
          id v59 = [v42 shortDescription];
          *(_DWORD *)buf = 138543874;
          long long v98 = v56;
          __int16 v99 = 2112;
          long long v100 = v58;
          __int16 v101 = 2112;
          long long v102 = v59;
          _os_log_impl(&dword_1D49D5000, v55, OS_LOG_TYPE_INFO, "%{public}@Redispatching message %@ to remote device: %@", buf, 0x20u);

          id v12 = 0;
          uint64_t v18 = v57;
          uint64_t v27 = v87;

          id v53 = v84;
        }

        id v11 = v90;
        [v41 redispatchMessage:v17 target:v92 responseQueue:v90];
      }
      else
      {
        uint64_t v60 = (void *)MEMORY[0x1D9452090]();
        long long v61 = v44;
        uint64_t v62 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
        {
          uint64_t v63 = HMFGetLogIdentifier();
          uint64_t v64 = [(HMDAssertionLogEvent *)v17 shortDescription];
          [(HMDHome *)v61 shortDescription];
          uint64_t v65 = v27;
          uint64_t v67 = v66 = v18;
          *(_DWORD *)buf = 138543874;
          long long v98 = v63;
          __int16 v99 = 2112;
          long long v100 = v64;
          __int16 v101 = 2112;
          long long v102 = v67;
          _os_log_impl(&dword_1D49D5000, v62, OS_LOG_TYPE_INFO, "%{public}@Cannot redispatch message %@ because there is no resident configured for home: %@", buf, 0x20u);

          uint64_t v18 = v66;
          uint64_t v27 = v65;

          id v12 = 0;
        }

        [(HMDHome *)v61 uuid];

        long long v68 = [MEMORY[0x1E4F28C58] hmErrorWithCode:4];
        [(HMDAssertionLogEvent *)v17 respondWithError:v68];

        uint64_t v42 = 0;
        id v11 = v90;
      }
      uint64_t v29 = v85;
    }

LABEL_40:
    goto LABEL_41;
  }
  int v80 = (void *)MEMORY[0x1D9452090]();
  __int16 v81 = self;
  long long v82 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v82, OS_LOG_TYPE_FAULT))
  {
    long long v83 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    long long v98 = v83;
    _os_log_impl(&dword_1D49D5000, v82, OS_LOG_TYPE_FAULT, "%{public}@Submitting ABC event for failure: TargetUUID cannot be nil", buf, 0xCu);
  }
  id v17 = [[HMDAssertionLogEvent alloc] initWithReason:@"TargetUUID cannot be nil"];
  uint64_t v18 = +[HMDMetricsManager sharedLogEventSubmitter];
  [v18 submitLogEvent:v17];
LABEL_41:
}

void __70__HMDHome_redispatchToResidentMessage_target_responseQueue_viaDevice___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __70__HMDHome_redispatchToResidentMessage_target_responseQueue_viaDevice___block_invoke_2;
  block[3] = &unk_1E6A193D0;
  id v7 = *(NSObject **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v13 = v6;
  id v14 = v8;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

void __70__HMDHome_redispatchToResidentMessage_target_responseQueue_viaDevice___block_invoke_3()
{
  v2[8] = *MEMORY[0x1E4F143B8];
  v2[0] = @"kCharacteristicWriteRequestKey";
  v2[1] = @"kCharacteristicReadRequestKey";
  v2[2] = @"kMultipleCharacteristicWriteRequestKey";
  v2[3] = @"kMultipleCharacteristicReadRequestKey";
  v2[4] = @"kIdentifyAccessoryRequestKey";
  v2[5] = @"kMediaPropertiesWriteRequestKey";
  v2[6] = @"kMediaPropertiesReadRequestKey";
  v2[7] = @"HMDHomeSetNaturalLightingEnabledForLightProfilesMessage";
  uint64_t v0 = [MEMORY[0x1E4F1C978] arrayWithObjects:v2 count:8];
  uint64_t v1 = (void *)redispatchToResidentMessage_target_responseQueue_viaDevice___restrictedToLocalMessages;
  redispatchToResidentMessage_target_responseQueue_viaDevice___restrictedToLocalMessages = v0;
}

uint64_t __70__HMDHome_redispatchToResidentMessage_target_responseQueue_viaDevice___block_invoke_2(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

- (void)redispatchToResidentMessage:(id)a3 target:(id)a4 responseQueue:(id)a5
{
}

- (void)addCompanionAsResidentUser:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __38__HMDHome_addCompanionAsResidentUser___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __38__HMDHome_addCompanionAsResidentUser___block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v2 = [*(id *)(a1 + 32) users];
  uint64_t v3 = [*(id *)(a1 + 40) userID];
  id v4 = objc_msgSend(v2, "hmf_firstObjectWithValue:forKeyPath:", v3, @"userID");

  if (!v4)
  {
    id v5 = (void *)MEMORY[0x1D9452090]([*(id *)(a1 + 32) _addUserToContainer:*(void *)(a1 + 40)]);
    id v6 = *(id *)(a1 + 32);
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = HMFGetLogIdentifier();
      int v9 = 138543362;
      id v10 = v8;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Added a new resident user", (uint8_t *)&v9, 0xCu);
    }
  }
  -[HMDHome _subscribeForNotificationFromRemoteGateway:](*(void **)(a1 + 32), 0);
}

- (void)_handleRemoteGatewayNotificationRegistration:(id)a3 enable:(BOOL)a4
{
  BOOL v17 = a4;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v18 = [MEMORY[0x1E4F1C9C8] date];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v6 = v5;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v20;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v20 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void *)(*((void *)&v19 + 1) + 8 * v10);
        id v12 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v11];
        id v13 = [(HMDHome *)self accessoryWithUUID:v12];
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v14 = v13;
        }
        else {
          id v14 = 0;
        }
        id v15 = v14;

        if (v15)
        {
          BOOL v16 = objc_msgSend(v6, "hmf_arrayForKey:", v11);
          if ([v16 count]) {
            [v15 handleRemoteGatewayNotificationRegistration:v16 enable:v17 enableTime:v18];
          }
        }
        ++v10;
      }
      while (v8 != v10);
      uint64_t v8 = [v6 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v8);
  }
}

- (void)configureMediaGroupsAggregateConsumer
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (isFeatureHomeTheaterQFAEnabledForTests
    && ([(id)isFeatureHomeTheaterQFAEnabledForTests BOOLValue] & 1) != 0)
  {
    uint64_t v3 = [(HMDHome *)self homeManager];
    id v4 = [(HMDHome *)self uuid];
    id v5 = [(HMDHome *)self notificationCenter];
    id v6 = [v3 localAndRemoteSubscriptionProvider];
    uint64_t v7 = [v3 userDefaults];
    uint64_t v8 = (void *)v7;
    if (v6 && v4 && v5 && v7)
    {
      uint64_t v9 = [[HMDMediaGroupsStageManager alloc] initWithIdentifier:v4 userDefaults:v7];
      uint64_t v10 = [[HMDMediaGroupsAggregateConsumer alloc] initWithIdentifier:v4 subscriptionProvider:v6 notificationCenter:v5 stageManager:v9];
      mediaGroupsAggregateConsumer = self->_mediaGroupsAggregateConsumer;
      self->_mediaGroupsAggregateConsumer = v10;

      [(HMDMediaGroupsStageManager *)v9 setDelegate:self->_mediaGroupsAggregateConsumer];
      [(HMDMediaGroupsAggregateConsumer *)self->_mediaGroupsAggregateConsumer setDelegate:self];
      [(HMDMediaGroupsAggregateConsumer *)self->_mediaGroupsAggregateConsumer configureWithHome:self];
    }
    else
    {
      BOOL v16 = (void *)MEMORY[0x1D9452090]();
      BOOL v17 = self;
      uint64_t v18 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        long long v19 = HMFGetLogIdentifier();
        int v20 = 138544642;
        long long v21 = v19;
        __int16 v22 = 2112;
        uint64_t v23 = v4;
        __int16 v24 = 2112;
        int v25 = v6;
        __int16 v26 = 2112;
        uint64_t v27 = v5;
        __int16 v28 = 2112;
        uint64_t v29 = v8;
        __int16 v30 = 2112;
        uint64_t v31 = v3;
        _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_ERROR, "%{public}@Failed to configure media groups aggregate consumer with dependencies homeUUID: %@ subscriptionProvider: %@ notificationCenter: %@ userDefaults: %@ homeManager: %@", (uint8_t *)&v20, 0x3Eu);
      }
    }
  }
  else
  {
    id v12 = (void *)MEMORY[0x1D9452090]();
    id v13 = self;
    id v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      id v15 = HMFGetLogIdentifier();
      int v20 = 138543362;
      long long v21 = v15;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_ERROR, "%{public}@Home Theater QFA is disabled", (uint8_t *)&v20, 0xCu);
    }
  }
}

- (id)roomForAllDestinationParentIdentifiers:(id)a3
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([v4 count])
  {
    id v5 = [(HMDHome *)self accessoriesWithUUIDs:v4];
    id v6 = [(HMDHome *)self mediaSystemsWithUUIDs:v4];
    uint64_t v7 = [v4 count];
    uint64_t v8 = [v5 count];
    if (v7 == [v6 count] + v8)
    {
      uint64_t v9 = [v5 firstObject];
      uint64_t v10 = [v9 room];
      uint64_t v11 = v10;
      if (v10)
      {
        id v12 = v10;
      }
      else
      {
        uint64_t v18 = [v6 firstObject];
        id v12 = [v18 room];
      }
      v25[0] = MEMORY[0x1E4F143A8];
      v25[1] = 3221225472;
      void v25[2] = __50__HMDHome_roomForAllDestinationParentIdentifiers___block_invoke;
      v25[3] = &unk_1E6A10BD0;
      id v19 = v12;
      id v26 = v19;
      if (objc_msgSend(v5, "na_allObjectsPassTest:", v25))
      {
        v23[0] = MEMORY[0x1E4F143A8];
        v23[1] = 3221225472;
        void v23[2] = __50__HMDHome_roomForAllDestinationParentIdentifiers___block_invoke_2;
        void v23[3] = &unk_1E6A0A830;
        id v20 = v19;
        id v24 = v20;
        if (objc_msgSend(v6, "na_allObjectsPassTest:", v23)) {
          long long v21 = v20;
        }
        else {
          long long v21 = 0;
        }
        id v13 = v21;
      }
      else
      {
        id v13 = 0;
      }
    }
    else
    {
      id v14 = (void *)MEMORY[0x1D9452090]();
      id v15 = self;
      BOOL v16 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        BOOL v17 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138544130;
        __int16 v28 = v17;
        __int16 v29 = 2112;
        id v30 = v4;
        __int16 v31 = 2112;
        uint64_t v32 = v5;
        __int16 v33 = 2112;
        long long v34 = v6;
        _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to find room due to missing destination parent identifiers: %@ found accessories: %@ found media systems: %@", buf, 0x2Au);
      }
      id v13 = 0;
    }
  }
  else
  {
    id v13 = 0;
  }

  return v13;
}

uint64_t __50__HMDHome_roomForAllDestinationParentIdentifiers___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 room];
  id v4 = [v3 uuid];
  id v5 = [*(id *)(a1 + 32) uuid];
  uint64_t v6 = objc_msgSend(v4, "hmf_isEqualToUUID:", v5);

  return v6;
}

uint64_t __50__HMDHome_roomForAllDestinationParentIdentifiers___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 room];
  id v4 = [v3 uuid];
  id v5 = [*(id *)(a1 + 32) uuid];
  uint64_t v6 = objc_msgSend(v4, "hmf_isEqualToUUID:", v5);

  return v6;
}

- (id)roomsForMediaGroupsAggregator:(id)a3
{
  uint64_t v3 = [(HMDHome *)self rooms];
  id v4 = (void *)[v3 copy];

  return v4;
}

- (id)eventSourceForMediaGroupsAggregator:(id)a3
{
  uint64_t v3 = [(HMDHome *)self homeManager];
  id v4 = [v3 currentEventSource];

  return v4;
}

- (id)participantDataTopicForAccessory:(id)a3 mediaGroupsAggregator:(id)a4
{
  id v5 = (void *)MEMORY[0x1E4F2E580];
  uint64_t v6 = *MEMORY[0x1E4F2C380];
  id v7 = a3;
  uint64_t v8 = [(HMDHome *)self uuid];
  uint64_t v9 = [v7 uuid];

  uint64_t v10 = [v5 topicFromSuffixID:v6 homeUUID:v8 accessoryUUID:v9];

  return v10;
}

- (void)configureMediaGroupsAggregator
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (isFeatureHomeTheaterQFAEnabledForTests
    && ([(id)isFeatureHomeTheaterQFAEnabledForTests BOOLValue] & 1) != 0)
  {
    uint64_t v3 = [(HMDHome *)self uuid];
    id v4 = [(HMDHome *)self homeManager];
    id v5 = [v4 uuid];
    __int16 v29 = [(HMDHome *)self notificationCenter];
    __int16 v28 = [(HMDHome *)self primaryResidentChangeMonitor];
    uint64_t v6 = [v4 eventForwarder];
    id v7 = [v4 localAndRemoteSubscriptionProvider];
    uint64_t v8 = [v4 eventStoreReadHandle];
    uint64_t v9 = [(HMDHome *)self msgDispatcher];
    uint64_t v27 = (void *)v9;
    if (v3 && v29 && v28 && v6 && v7 && v8 && v9)
    {
      uint64_t v10 = [[HMDMediaGroupsAggregatorBackupSender alloc] initWithIdentifier:v3];
      id v24 = [[HMDMediaGroupsLocalDataStorage alloc] initWithIdentifier:v3 backupSender:v10];
      uint64_t v11 = objc_alloc_init(HMDMediaGroupsAggregatorMessenger);
      int v25 = v5;
      id v12 = [[HMDMediaGroupsAggregator alloc] initWithIdentifier:v3 messenger:v11 eventForwarder:v6 subscriptionProvider:v7 eventStoreReadHandle:v8 groupsLocalDataStorage:v24];
      [(HMDMediaGroupsAggregatorBackupSender *)v10 setDataSource:v24];
      [(HMDMediaGroupsLocalDataStorage *)v24 setDataSource:self];
      [(HMDMediaGroupsAggregatorMessenger *)v11 setDataSource:self];
      [(HMDMediaGroupsAggregatorMessenger *)v11 setDelegate:v12];
      [(HMDMediaGroupsAggregator *)v12 setDataSource:self];
      [(HMDHome *)self setMediaGroupsAggregator:v12];
      id v13 = [(HMDHome *)self mediaGroupsAggregator];
      id v14 = self;
      id v15 = v27;
      [v13 configureWithHome:v14 messageDispatcher:v27 notificationCenter:v29 primaryResidentChangeMonitor:v28];

      id v5 = v25;
    }
    else
    {
      id v26 = v8;
      id v20 = (void *)MEMORY[0x1D9452090]();
      long long v21 = self;
      __int16 v22 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138545666;
        __int16 v31 = v23;
        __int16 v32 = 2112;
        __int16 v33 = v3;
        __int16 v34 = 2112;
        uint64_t v35 = v5;
        __int16 v36 = 2112;
        uint64_t v37 = v29;
        __int16 v38 = 2112;
        uint64_t v39 = v28;
        __int16 v40 = 2112;
        id v41 = v6;
        __int16 v42 = 2112;
        id v43 = v7;
        __int16 v44 = 2112;
        id v45 = v26;
        __int16 v46 = 2112;
        uint64_t v47 = v4;
        __int16 v48 = 2112;
        __int16 v49 = v27;
        _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_ERROR, "%{public}@Failed to configure media groups aggregator with dependencies homeUUID: %@ homeManagerUUID: %@ notificationCenter: %@ primaryChangeMonitor: %@ eventForwarder: %@ subscriptionProvider: %@ eventStoreReadHandle: %@ homeManager: %@ message dispatcher: %@", buf, 0x66u);
      }
      uint64_t v8 = v26;
      id v15 = v27;
    }
  }
  else
  {
    BOOL v16 = (void *)MEMORY[0x1D9452090]();
    BOOL v17 = self;
    uint64_t v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      id v19 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      __int16 v31 = v19;
      _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_ERROR, "%{public}@Home Theater QFA is not enabled", buf, 0xCu);
    }
  }
}

- (void)configureMediaGroupsUnconfiguredParticipantOnboardingManager
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (isFeatureHomeTheaterQFAEnabledForTests
    && ([(id)isFeatureHomeTheaterQFAEnabledForTests BOOLValue] & 1) != 0)
  {
    uint64_t v3 = [(HMDHome *)self uuid];
    uint64_t v4 = [(HMDHome *)self notificationCenter];
    id v5 = (void *)v4;
    if (v3 && v4)
    {
      uint64_t v6 = [[HMDMediaGroupsUnconfiguredParticipantOnboardingManager alloc] initWithIdentifier:v3];
      [(HMDMediaGroupsUnconfiguredParticipantOnboardingManager *)v6 setDataSource:self];
      [(HMDHome *)self setMediaGroupsUnconfiguredParticipantOnboardingManager:v6];
      id v7 = [(HMDHome *)self mediaGroupsUnconfiguredParticipantOnboardingManager];
      [v7 configureWithNotificationCenter:v5];
    }
    else
    {
      id v12 = (void *)MEMORY[0x1D9452090]();
      id v13 = self;
      id v14 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        id v15 = HMFGetLogIdentifier();
        int v16 = 138543874;
        BOOL v17 = v15;
        __int16 v18 = 2112;
        id v19 = v3;
        __int16 v20 = 2112;
        long long v21 = v5;
        _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_ERROR, "%{public}@Failed to configure media groups unconfigured participant onboarding manager with dependencies homeUUID: %@ notificationCenter: %@", (uint8_t *)&v16, 0x20u);
      }
    }
  }
  else
  {
    uint64_t v8 = (void *)MEMORY[0x1D9452090]();
    uint64_t v9 = self;
    uint64_t v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      int v16 = 138543362;
      BOOL v17 = v11;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_ERROR, "%{public}@Home Theater QFA is not enabled", (uint8_t *)&v16, 0xCu);
    }
  }
}

- (id)receiverForParticipantAccessoryUUID:(id)a3 mediaGroupsLocalDataStorage:(id)a4
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [(HMDHome *)self homeManager];
  uint64_t v9 = [v8 mediaGroupParticipantDataLocalStorage];
  uint64_t v10 = [v9 groupsBackupReceiver];
  uint64_t v11 = v10;
  if (v10)
  {
    id v12 = v10;
  }
  else
  {
    id v13 = (void *)MEMORY[0x1D9452090]();
    id v14 = self;
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      int v16 = HMFGetLogIdentifier();
      int v18 = 138543874;
      id v19 = v16;
      __int16 v20 = 2112;
      long long v21 = v8;
      __int16 v22 = 2112;
      uint64_t v23 = v9;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_ERROR, "%{public}@Failed to get groups backup receiver with homeManager: %@ participantStorage: %@", (uint8_t *)&v18, 0x20u);
    }
  }

  return v11;
}

- (id)routerForParticipantAccessoryUUID:(id)a3 mediaGroupsLocalDataStorage:(id)a4
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [(HMDHome *)self accessoryWithUUID:v6];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  id v10 = v9;

  if (v10)
  {
    uint64_t v11 = [v10 messageRouter];
  }
  else
  {
    id v12 = (void *)MEMORY[0x1D9452090]();
    id v13 = self;
    id v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      id v15 = HMFGetLogIdentifier();
      int v17 = 138543618;
      int v18 = v15;
      __int16 v19 = 2112;
      id v20 = v6;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_ERROR, "%{public}@Failed to get router for unknown accessory uuid: %@", (uint8_t *)&v17, 0x16u);
    }
    uint64_t v11 = 0;
  }

  return v11;
}

- (void)mergeMediaDestinationsWithConsumer:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self appleMediaAccessories];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __46__HMDHome_mergeMediaDestinationsWithConsumer___block_invoke;
  v11[3] = &unk_1E6A153B0;
  id v6 = v4;
  id v12 = v6;
  objc_msgSend(v5, "na_each:", v11);

  id v7 = [(HMDHome *)self mediaSystems];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __46__HMDHome_mergeMediaDestinationsWithConsumer___block_invoke_2;
  void v9[3] = &unk_1E6A06808;
  id v10 = v6;
  id v8 = v6;
  objc_msgSend(v7, "na_each:", v9);
}

void __46__HMDHome_mergeMediaDestinationsWithConsumer___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v7 = v3;
  id v5 = [v3 uuid];
  id v6 = [v4 destinationWithParentIdentifier:v5];

  if (v6) {
    [v7 mergeAudioDestination:v6];
  }
}

void __46__HMDHome_mergeMediaDestinationsWithConsumer___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v7 = v3;
  id v5 = [v3 uuid];
  id v6 = [v4 destinationWithParentIdentifier:v5];

  if (v6) {
    [v7 mergeAudioDestination:v6];
  }
}

- (void)mergeMediaDestinationControllerDataWithConsumer:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self appleMediaAccessories];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __59__HMDHome_mergeMediaDestinationControllerDataWithConsumer___block_invoke;
  v7[3] = &unk_1E6A153B0;
  id v8 = v4;
  id v6 = v4;
  objc_msgSend(v5, "na_each:", v7);
}

void __59__HMDHome_mergeMediaDestinationControllerDataWithConsumer___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v7 = v3;
  id v5 = [v3 uuid];
  id v6 = [v4 destinationControllerDataWithParentIdentifier:v5];

  if (v6) {
    [v7 mergeAudioDestinationControllerData:v6];
  }
}

- (void)mergeMediaGroupsAggregateDataWithConsumer:(id)a3
{
  id v4 = a3;
  [(HMDHome *)self mergeMediaDestinationsWithConsumer:v4];
  [(HMDHome *)self mergeMediaDestinationControllerDataWithConsumer:v4];
  id v6 = [(HMDHome *)self mediaSystemController];
  id v5 = [v4 allMediaSystemData];

  [v6 mergeMediaSystemData:v5];
}

- (void)didUpdateAggregateDataForMediaGroupsAggregateConsumer:(id)a3
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    int v15 = 138543362;
    int v16 = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Updating home graph due to updated media groups aggregate data", (uint8_t *)&v15, 0xCu);
  }
  [(HMDHome *)v6 mergeMediaGroupsAggregateDataWithConsumer:v4];
  uint64_t v9 = [(HMDHome *)v6 homeManager];
  if (v9)
  {
    id v10 = [(HMDHome *)v6 uuid];
    [v9 updateGenerationCounterWithReason:@"HMDMediaGroupsAggregateConsumerDelegateUpdatedAggregateData" sourceUUID:v10 shouldNotifyClients:1];

    [v9 assistantSyncDataChanged:@"HMDMediaGroupsAggregateConsumerDelegateUpdatedAggregateData"];
  }
  else
  {
    uint64_t v11 = (void *)MEMORY[0x1D9452090]();
    id v12 = v6;
    id v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      id v14 = HMFGetLogIdentifier();
      int v15 = 138543362;
      int v16 = v14;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Failed to update home graph for media groups due to no home manager", (uint8_t *)&v15, 0xCu);
    }
  }
}

- (HMDDevice)currentDevice
{
  id v2 = +[HMDAppleAccountManager sharedManager];
  id v3 = [v2 device];

  return (HMDDevice *)v3;
}

- (HMFWiFiManager)wifiManager
{
  id v2 = [(HMDHome *)self wifiManagerFactory];
  id v3 = v2[2]();

  return (HMFWiFiManager *)v3;
}

- (void)configureMediaGroupObjects
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (isFeatureHomeTheaterQFAEnabledForTests
    && ([(id)isFeatureHomeTheaterQFAEnabledForTests BOOLValue] & 1) != 0)
  {
    [(HMDHome *)self configureMediaGroupsUnconfiguredParticipantOnboardingManager];
    [(HMDHome *)self configureMediaGroupsAggregator];
    [(HMDHome *)self configureMediaGroupsAggregateConsumer];
  }
  else
  {
    id v3 = (void *)MEMORY[0x1D9452090]();
    id v4 = self;
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      id v6 = HMFGetLogIdentifier();
      int v7 = 138543362;
      id v8 = v6;
      _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_ERROR, "%{public}@Home Theater QFA is not enabled", (uint8_t *)&v7, 0xCu);
    }
  }
}

- (id)accessoriesWithUUIDs:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self accessories];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __32__HMDHome_accessoriesWithUUIDs___block_invoke;
  void v9[3] = &unk_1E6A10BD0;
  id v10 = v4;
  id v6 = v4;
  int v7 = objc_msgSend(v5, "na_filter:", v9);

  return v7;
}

uint64_t __32__HMDHome_accessoriesWithUUIDs___block_invoke(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 uuid];
  uint64_t v4 = [v2 containsObject:v3];

  return v4;
}

- (void)configureNaturalLightingWithDemoModeEnabled:(BOOL)a3
{
  id v5 = [(HMDHome *)self workQueue];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = __55__HMDHome_configureNaturalLightingWithDemoModeEnabled___block_invoke;
  v6[3] = &unk_1E6A19B58;
  void v6[4] = self;
  BOOL v7 = a3;
  dispatch_async(v5, v6);
}

void __55__HMDHome_configureNaturalLightingWithDemoModeEnabled___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) localCapabilitiesDataSource];
  if ([v2 isResidentCapable])
  {
  }
  else
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);

    if (!v3) {
      return;
    }
  }
  uint64_t v4 = [[HMDHomeNaturalLightingContextUpdater alloc] initWithHome:*(void *)(a1 + 32) demoModeEnabled:*(unsigned __int8 *)(a1 + 40)];
  [*(id *)(a1 + 32) setNaturalLightingContextUpdater:v4];

  id v5 = [*(id *)(a1 + 32) naturalLightingContextUpdater];
  [v5 configure];
}

- (void)configureMediaDestinationControllersForAccessories:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  objc_msgSend(v4, "na_map:", &__block_literal_global_761);
  id v6 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "na_each:", &__block_literal_global_764);
}

uint64_t __62__HMDHome_configureMediaDestinationControllersForAccessories___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 configureAudioDestinationController];
}

id __62__HMDHome_configureMediaDestinationControllersForAccessories___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    int v3 = v2;
  }
  else {
    int v3 = 0;
  }
  id v4 = v3;

  return v4;
}

- (void)configureMediaSystems
{
  id v6 = [(HMDHome *)self mediaSystemController];
  int v3 = [(HMDHome *)self workQueue];
  id v4 = [(HMDHome *)self msgDispatcher];
  id v5 = [(HMDHome *)self notificationCenter];
  [v6 configure:self delegate:self dataSource:self queue:v3 messageDispatcher:v4 notificationCenter:v5];
}

- (BOOL)hasSiriEndpointAccessory
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v2 = [(HMDHome *)self accessories];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v12;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v12 != v4) {
          objc_enumerationMutation(v2);
        }
        id v6 = *(id *)(*((void *)&v11 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          BOOL v7 = v6;
        }
        else {
          BOOL v7 = 0;
        }
        id v8 = v7;

        if (v8)
        {
          uint64_t v9 = [v8 siriEndpointProfile];

          if (v9)
          {
            LOBYTE(v3) = 1;
            goto LABEL_15;
          }
        }
      }
      uint64_t v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
LABEL_15:

  return v3;
}

- (BOOL)supportsDeviceWithCapabilities:(id)a3
{
  id v4 = a3;
  if ([(HMDHome *)self hasSiriEndpointAccessory]
    && ![v4 supportsSiriEndpointSetup])
  {
    char v5 = 0;
  }
  else
  {
    char v5 = [v4 supportsResidentFirstAccessoryCommunication];
  }

  return v5;
}

- (void)registerForDeviceWithCapabilities
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)MEMORY[0x1D9452090](self, a2);
  id v4 = self;
  char v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    int v9 = 138543362;
    id v10 = v6;
    _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Registering for device with capabilities and confirming resident device", (uint8_t *)&v9, 0xCu);
  }
  BOOL v7 = [(HMDHome *)v4 residentDeviceManager];
  [v7 addDataSource:v4];

  id v8 = [(HMDHome *)v4 residentDeviceManager];
  [v8 confirmWithCompletionHandler:0];
}

- (void)migrateLegacyLocationServiceSettings
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if ([(HMDHome *)self isOwnerUser]
    && ![(HMDHome *)self didOnboardLocationServices])
  {
    uint64_t v3 = [(HMDHome *)self appleMediaAccessories];
    if ([v3 count])
    {
      id v4 = (void *)MEMORY[0x1D9452090]();
      char v5 = self;
      id v6 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        BOOL v7 = HMFGetLogIdentifier();
        int v8 = 138543362;
        int v9 = v7;
        _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Migrating legacy location service setting", (uint8_t *)&v8, 0xCu);
      }
      if (objc_msgSend(v3, "na_allObjectsPassTest:", &__block_literal_global_758)) {
        [(HMDHome *)v5 runLocationServicesEnabledUpdateWithValue:1];
      }
    }
  }
}

uint64_t __47__HMDHome_migrateLegacyLocationServiceSettings__block_invoke(uint64_t a1, void *a2)
{
  return [a2 legacyLocationServicesEnabled];
}

- (void)enableLocationServiceSettings
{
  self->_enableLocationServiceSettings = 1;
}

- (id)eventRouterServerDiagnosticInfo
{
  id v2 = [(HMDHome *)self remoteEventRouterServer];
  uint64_t v3 = [v2 diagnosticInfo];

  return v3;
}

- (void)createRemoteEventRouterServerIfNeeded
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [(HMDHome *)self homeManager];
  id v4 = [(HMDHome *)self currentAccessory];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    char v5 = v4;
  }
  else {
    char v5 = 0;
  }
  id v6 = v5;

  BOOL v7 = [(HMDHome *)self remoteEventRouterServer];
  int v8 = [v7 residentModeUUID];

  if (v6)
  {
    int v9 = [(HMDHome *)self localCapabilitiesDataSource];
    if ([v9 isResidentCapable])
    {
      if (!v8)
      {

LABEL_14:
        int v18 = [v6 uuid];
        char v19 = [v8 isEqual:v18];

        if ((v19 & 1) == 0)
        {
          id v20 = (void *)MEMORY[0x1D9452090]();
          uint64_t v21 = self;
          __int16 v22 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            uint64_t v23 = HMFGetLogIdentifier();
            uint64_t v24 = [v6 uuid];
            *(_DWORD *)buf = 138543874;
            int v57 = v23;
            __int16 v58 = 2112;
            id v59 = v8;
            __int16 v60 = 2112;
            long long v61 = v24;
            _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_ERROR, "%{public}@Overwriting stale remote event router server with uuid: %@ to current accessory uuid: %@", buf, 0x20u);
          }
        }
        int v25 = (void *)MEMORY[0x1D9452090]();
        id v26 = self;
        uint64_t v27 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
        {
          __int16 v28 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          int v57 = v28;
          __int16 v58 = 2112;
          id v59 = v6;
          _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_INFO, "%{public}@Creating remote event router server with current accessory: %@", buf, 0x16u);
        }
        __int16 v29 = [v3 localOnlySubscriptionProvider];
        if (objc_opt_respondsToSelector())
        {
          id v30 = [(HMDHome *)v26 serverDelegatingEventRouter];
          __int16 v31 = [v29 synchronousSubscriptionProvider];
          [v30 registerSubRouter:v31];

          uint64_t v32 = [(HMDHome *)v26 serverDelegatingEventRouter];

          __int16 v29 = (void *)v32;
        }
        char v52 = v29;
        id v53 = v8;
        __int16 v33 = [(HMDHome *)v26 remoteEventRouterClientController];
        uint64_t v34 = [v33 residentDelegatingEventRouter];

        if (v34)
        {
          uint64_t v35 = [(HMDHome *)v26 serverDelegatingEventRouter];
          [v35 registerSubRouter:v34];
        }
        uint64_t v50 = [HMDRemoteEventRouterServer alloc];
        __int16 v49 = [(HMDHome *)v26 uuid];
        __int16 v36 = [v6 uuid];
        uint64_t v37 = [v3 workQueue];
        __int16 v38 = [(HMDHome *)v26 msgDispatcher];
        uint64_t v39 = [(HMDHome *)v26 notificationCenter];
        [(HMDHome *)v26 serverDelegatingEventRouter];
        __int16 v40 = v54 = v3;
        [v54 eventForwarder];
        id v41 = v51 = (void *)v34;
        __int16 v42 = [v54 eventStoreReadHandle];
        id v43 = [(HMDRemoteEventRouterServer *)v50 initWithPrimaryModeUUID:v49 residentModeUUID:v36 queue:v37 messageDispatcher:v38 dataSource:v26 notificationCenter:v39 requestMessageName:@"RemoteEventRouterRequestMessage" updateMessageName:@"RemoteEventRouterUpdateMessageName" multiHopFetchResponseMessageName:@"RER.MHF.ResponseMessageName" subscriptionProvider:v40 registrationEventRouter:v41 storeReadHandle:v42];
        [(HMDHome *)v26 setRemoteEventRouterServer:v43];

        __int16 v44 = +[HMDUserMessagePolicy userMessagePolicyWithHome:v26 userPrivilege:0 remoteAccessRequired:0];
        BOOL v45 = isTVOSDevice();
        __int16 v46 = [(HMDHome *)v26 remoteEventRouterServer];
        uint64_t v47 = [(HMDHome *)v26 isCurrentDevicePrimaryResident];
        uint64_t v55 = v44;
        __int16 v48 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v55 count:1];
        [v46 configureWithHome:v26 isPrimaryResident:v47 isResidentEventProviding:v45 additionalPolicies:v48];

        uint64_t v3 = v54;
        int v8 = v53;
        goto LABEL_25;
      }
      uint64_t v10 = [v6 uuid];
      char v11 = [v8 isEqual:v10];

      if ((v11 & 1) == 0) {
        goto LABEL_14;
      }
    }
    else
    {
    }
  }
  long long v12 = (void *)MEMORY[0x1D9452090]();
  long long v13 = self;
  long long v14 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    int v15 = HMFGetLogIdentifier();
    uint64_t v16 = [(HMDHome *)v13 localCapabilitiesDataSource];
    [v16 isResidentCapable];
    uint64_t v17 = HMFBooleanToString();
    *(_DWORD *)buf = 138544130;
    int v57 = v15;
    __int16 v58 = 2112;
    id v59 = v6;
    __int16 v60 = 2112;
    long long v61 = v17;
    __int16 v62 = 2112;
    uint64_t v63 = v8;
    _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Cannot create remote event router server with currentAccessory: %@ isResidentCapable: %@ serverAccessoryUUID: %@", buf, 0x2Au);
  }
LABEL_25:
}

- (void)configureRemoteEventRouterClientControllerForAccessories:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (_os_feature_enabled_impl())
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v16 = v4;
    id v5 = v4;
    uint64_t v6 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v18;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v18 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = *(id *)(*((void *)&v17 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            char v11 = v10;
          }
          else {
            char v11 = 0;
          }
          id v12 = v11;

          if (v12)
          {
            int v13 = [v10 isCurrentAccessory];
            long long v14 = [(HMDHome *)self remoteEventRouterClientController];
            int v15 = [v10 uuid];
            if (v13) {
              [v14 updateCurrentAccessoryUUID:v15];
            }
            else {
              [v14 createResidentRouterForAccessoryUUID:v15];
            }
          }
        }
        uint64_t v7 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
      }
      while (v7);
    }

    id v4 = v16;
  }
}

- (void)configureAfterAccessoriesConfigurationTrackerNotificationsWithCurrentAccessory:(id)a3 accessories:(id)a4 uncommittedTransactions:(id)a5
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  char v11 = (void *)MEMORY[0x1D9452090]();
  id v12 = self;
  int v13 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    long long v14 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    long long v86 = v14;
    _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Configuring after accessories configuration tracker notifications", buf, 0xCu);
  }
  int v15 = [(HMDHome *)v12 workQueue];
  dispatch_assert_queue_V2(v15);

  [(HMDHome *)v12 configureBulletinNotification];
  uint64_t v16 = [(HMDHome *)v12 _evaluateNetworkProtectionAndRouterManagement];
  if (v8)
  {
    long long v17 = (void *)MEMORY[0x1D9452090](v16);
    long long v18 = v12;
    long long v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      long long v20 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      long long v86 = v20;
      __int16 v87 = 2112;
      id v88 = v8;
      _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_INFO, "%{public}@Setting up media session for current accessory during configure - %@", buf, 0x16u);
    }
    id v21 = [(HMDHome *)v18 _addMediaSessionForCurrentAccessory:v8];
    id v22 = v8;
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    if (isKindOfClass) {
      uint64_t v24 = v22;
    }
    else {
      uint64_t v24 = 0;
    }
    id v25 = v24;

    if (isKindOfClass) {
      [v22 configureSensors];
    }
  }
  id v26 = [(HMDHome *)v12 localCapabilitiesDataSource];
  int v27 = [v26 isResidentCapable];

  if (v27)
  {
    __int16 v28 = [(HMDHome *)v12 mediaStateManager];
    __int16 v29 = [(HMDHome *)v12 notificationRegistry];
    id v30 = [(HMDHome *)v12 notificationCenter];
    [v28 configureWithNotificationRegistry:v29 notificationCenter:v30];
  }
  [(HMDHome *)v12 configureMediaSystems];
  [(HMDHome *)v12 configureMediaDestinationControllersForAccessories:v9];
  [(HMDHome *)v12 registerForDeviceWithCapabilities];
  __int16 v31 = (void *)MEMORY[0x1D9452090]([(HMDHome *)v12 configureAppleMediaAccessoriesStateManagerWithStateManagerWithFactory:v12 messengerFactory:v12 metricsDispatcherFactory:v12]);
  if ([v10 count])
  {
    uint64_t v32 = [(HMDHome *)v12 backingStore];
    __int16 v33 = [v32 root];
    uint64_t v34 = [v33 encodeForKey];

    v83[0] = MEMORY[0x1E4F143A8];
    v83[1] = 3221225472;
    v83[2] = __126__HMDHome_configureAfterAccessoriesConfigurationTrackerNotificationsWithCurrentAccessory_accessories_uncommittedTransactions___block_invoke;
    v83[3] = &unk_1E6A067C0;
    id v35 = v34;
    id v84 = v35;
    __int16 v36 = objc_msgSend(v10, "na_filter:", v83);
    if ([v36 count])
    {
      id v67 = v35;
      long long v68 = v31;
      id v70 = v10;
      id v71 = v9;
      id v72 = v8;
      uint64_t v37 = (void *)MEMORY[0x1D9452090]();
      BOOL v69 = v12;
      __int16 v38 = v12;
      uint64_t v39 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v40 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        long long v86 = v40;
        __int16 v87 = 2112;
        id v88 = v36;
        _os_log_impl(&dword_1D49D5000, v39, OS_LOG_TYPE_DEFAULT, "%{public}@Obtained uncommitted transactions that need to be applied: %@", buf, 0x16u);
      }
      BOOL v73 = [MEMORY[0x1E4F1CA48] array];
      long long v79 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v66 = v36;
      id obj = v36;
      uint64_t v75 = [obj countByEnumeratingWithState:&v79 objects:v91 count:16];
      if (v75)
      {
        uint64_t v41 = *(void *)v80;
        p_superclass = HMDBackingStoreLocal.superclass;
        do
        {
          for (uint64_t i = 0; i != v75; ++i)
          {
            if (*(void *)v80 != v41) {
              objc_enumerationMutation(obj);
            }
            __int16 v44 = *(void **)(*((void *)&v79 + 1) + 8 * i);
            BOOL v45 = [v44 data];
            uint64_t v46 = [v44 encoding];
            uint64_t v47 = [v44 rowID];
            id v78 = 0;
            __int16 v48 = [p_superclass + 14 objectFromData:v45 encoding:v46 rowID:v47 error:&v78];
            id v49 = v78;

            uint64_t v50 = objc_msgSend(v48, "setObjectChangeType:", objc_msgSend(v44, "type"));
            if (v49)
            {
              __int16 v51 = (void *)MEMORY[0x1D9452090](v50);
              char v52 = v38;
              id v53 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
              {
                HMFGetLogIdentifier();
                uint64_t v54 = v41;
                v56 = uint64_t v55 = v38;
                *(_DWORD *)buf = 138543874;
                long long v86 = v56;
                __int16 v87 = 2112;
                id v88 = v44;
                __int16 v89 = 2112;
                id v90 = v49;
                _os_log_impl(&dword_1D49D5000, v53, OS_LOG_TYPE_ERROR, "%{public}@Error decoding log record %@: %@", buf, 0x20u);

                __int16 v38 = v55;
                uint64_t v41 = v54;
                p_superclass = (__objc2_class **)(HMDBackingStoreLocal + 8);
              }
            }
            else
            {
              [v73 addObject:v48];
            }
          }
          uint64_t v75 = [obj countByEnumeratingWithState:&v79 objects:v91 count:16];
        }
        while (v75);
      }

      int v57 = (void *)MEMORY[0x1D9452090]();
      __int16 v58 = v38;
      id v59 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v60 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        long long v86 = v60;
        __int16 v87 = 2112;
        id v88 = v73;
        _os_log_impl(&dword_1D49D5000, v59, OS_LOG_TYPE_DEFAULT, "%{public}@Rerunning uncommitted transaction models %@", buf, 0x16u);
      }
      long long v61 = [(HMDHome *)v58 backingStore];
      __int16 v62 = +[HMDBackingStoreTransactionOptions defaultLocalOptions];
      uint64_t v63 = [v61 transaction:@"RerunUncommitted" options:v62];

      [v63 addObjects:v73];
      v76[0] = MEMORY[0x1E4F143A8];
      v76[1] = 3221225472;
      v76[2] = __126__HMDHome_configureAfterAccessoriesConfigurationTrackerNotificationsWithCurrentAccessory_accessories_uncommittedTransactions___block_invoke_749;
      v76[3] = &unk_1E6A196E0;
      void v76[4] = v58;
      id v77 = v73;
      id v64 = v73;
      [v63 runWithoutSave:v76];

      id v9 = v71;
      id v8 = v72;
      id v12 = v69;
      id v10 = v70;
      id v35 = v67;
      __int16 v31 = v68;
      __int16 v36 = v66;
    }
  }
  [(HMDHome *)v12 migrateLegacyLocationServiceSettings];
  [(HMDHome *)v12 configureMediaGroupObjects];
  uint64_t v65 = [(HMDHome *)v12 accessories];
  [(HMDHome *)v12 configureRemoteEventRouterClientControllerForAccessories:v65];
}

uint64_t __126__HMDHome_configureAfterAccessoriesConfigurationTrackerNotificationsWithCurrentAccessory_accessories_uncommittedTransactions___block_invoke(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [a2 root];
  id v4 = [v3 encodeForKey];
  uint64_t v5 = [v2 isEqualToString:v4];

  return v5;
}

void __126__HMDHome_configureAfterAccessoriesConfigurationTrackerNotificationsWithCurrentAccessory_accessories_uncommittedTransactions___block_invoke_749(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    uint64_t v8 = *(void *)(a1 + 40);
    int v9 = 138543874;
    id v10 = v7;
    __int16 v11 = 2112;
    uint64_t v12 = v8;
    __int16 v13 = 2112;
    id v14 = v3;
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Saved uncommitted transaction models %@ with error: %@", (uint8_t *)&v9, 0x20u);
  }
}

- (BOOL)configureWithHomeManager:(id)a3 accessoriesPresent:(id)a4 uncommittedTransactions:(id)a5 source:(unint64_t)a6
{
  uint64_t v562 = *MEMORY[0x1E4F143B8];
  id v444 = a3;
  id v459 = a4;
  id v440 = a5;
  uint64_t v9 = HMFUptime();
  double v11 = v10;
  uint64_t v12 = (void *)MEMORY[0x1D9452090](v9);
  __int16 v13 = self;
  HMFGetOSLogHandle();
  id v14 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v16 = [(HMDHome *)v13 uuid];
    [(HMDHome *)v13 locationServicesEnabled];
    HMFBooleanToString();
    id v17 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138545410;
    id v520 = v15;
    __int16 v521 = 2114;
    v522 = @"homeConfigureStart";
    __int16 v523 = 2112;
    v524 = @"Configuring home with location service enabled";
    __int16 v525 = 2114;
    v526 = @"state";
    __int16 v527 = 2112;
    v528 = @"start";
    __int16 v529 = 2114;
    v530 = @"homeUUID";
    __int16 v531 = 2112;
    id v532 = v16;
    __int16 v533 = 2114;
    v534 = @"status";
    __int16 v535 = 2112;
    id v536 = v17;
    _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x5Cu);
  }
  long long v18 = [MEMORY[0x1E4F6A2A0] sharedInstance];
  id v19 = objc_alloc(MEMORY[0x1E4F6A2B0]);
  long long v20 = [(HMDHome *)v13 uuid];
  [(HMDHome *)v13 locationServicesEnabled];
  id v21 = HMFBooleanToString();
  id v22 = HMDTaggedLoggingCreateDictionary();
  uint64_t v23 = objc_msgSend(v19, "initWithTag:data:", @"homeConfigureStart", v22, @"state", @"start", @"homeUUID", v20, @"status", v21);
  uint64_t v24 = [MEMORY[0x1E4F653F0] currentTagProcessorList];
  [v18 submitTaggedEvent:v23 processorList:v24];

  [(HMDHome *)v13 setHomeManager:v444];
  id v25 = [v444 messageDispatcher];
  [(HMDHome *)v13 setMsgDispatcher:v25];

  id v26 = [v444 accessoryBrowser];
  [(HMDHome *)v13 setAccessoryBrowser:v26];

  int v27 = [v444 metricsManager];
  uint64_t v28 = [v27 logEventSubmitter];
  logEventSubmitter = v13->_logEventSubmitter;
  v13->_logEventSubmitter = (HMMLogEventSubmitting *)v28;

  id v30 = [v444 metricsManager];
  uint64_t v31 = [v30 dailyScheduler];
  dailyScheduler = v13->_dailyScheduler;
  v13->_dailyScheduler = (HMDLogEventDailyScheduler *)v31;

  if (!v13->_metricsDispatcher)
  {
    __int16 v33 = objc_alloc_init(HMDHomeMetricsDispatcherFactory);
    uuid = v13->_uuid;
    id v35 = [(HMDHome *)v13 logEventSubmitter];
    uint64_t v36 = [(HMDHomeMetricsDispatcherFactory *)v33 createHomeMetricsDispatcherWithIdentifier:uuid logEventSubmitter:v35];
    metricsDispatcher = v13->_metricsDispatcher;
    v13->_metricsDispatcher = (HMDHomeMetricsDispatcher *)v36;
  }
  uint64_t v38 = [objc_alloc(MEMORY[0x1E4F65580]) initWithTimeInterval:8 options:7.0];
  homeLocationTimer = v13->_homeLocationTimer;
  v13->_homeLocationTimer = (HMFTimer *)v38;

  [(HMFTimer *)v13->_homeLocationTimer setDelegateQueue:v13->_workQueue];
  [(HMFTimer *)v13->_homeLocationTimer setDelegate:v13];
  __int16 v40 = [MEMORY[0x1E4F65530] sharedPreferences];
  uint64_t v41 = [v40 preferenceForKey:@"accessoryReachabilityCoalescePeriod"];
  v443 = [v41 numberValue];

  LODWORD(v40) = [v443 unsignedIntValue];
  uint64_t v42 = [objc_alloc(MEMORY[0x1E4F65580]) initWithTimeInterval:0 options:(double)v40];
  accessoryReachabilityUpdatesTimer = v13->_accessoryReachabilityUpdatesTimer;
  v13->_accessoryReachabilityUpdatesTimer = (HMFTimer *)v42;

  [(HMFTimer *)v13->_accessoryReachabilityUpdatesTimer setDelegate:v13];
  [(HMFTimer *)v13->_accessoryReachabilityUpdatesTimer setDelegateQueue:v13->_workQueue];
  __int16 v44 = [(HMDHome *)v13 roomForEntireHome];
  BOOL v45 = [(HMDHome *)v13 msgDispatcher];
  uint64_t v46 = [(HMDHome *)v13 workQueue];
  [v44 configure:v45 queue:v46];

  [(HMDHome *)v13 setOwnerUser:+[HMDHomeManager isThisDeviceAdminOfHome:v13]];
  [(HMDHome *)v13 setupBackingStore];
  uint64_t v47 = [(HMDHome *)v13 periodicReader];
  [v47 configure:v13];

  __int16 v48 = [(HMDHome *)v13 presenceMonitor];
  id v49 = [(HMDHome *)v13 msgDispatcher];
  [v48 configure:v13 messageDispatcher:v49];

  uint64_t v50 = [(HMDHome *)v13 presenceFeeder];
  __int16 v51 = [(HMDHome *)v13 msgDispatcher];
  [v50 configure:v13 messageDispatcher:v51];

  char v52 = (void *)MEMORY[0x1D9452090]();
  id v53 = v13;
  HMFGetOSLogHandle();
  uint64_t v54 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v55 = (id)objc_claimAutoreleasedReturnValue();
    BOOL v56 = [(HMDHome *)v53 presenceFeeder];
    *(_DWORD *)buf = 138543618;
    id v520 = v55;
    __int16 v521 = 2112;
    v522 = v56;
    _os_log_impl(&dword_1D49D5000, v54, OS_LOG_TYPE_INFO, "%{public}@Configured presenceFeeder: %@", buf, 0x16u);
  }
  int v57 = [(HMDHome *)v53 homeLocationHandler];
  __int16 v58 = [(HMDHome *)v53 workQueue];
  id v59 = [(HMDHome *)v53 msgDispatcher];
  [v57 configure:v53 queue:v58 messageDispatcher:v59];

  __int16 v60 = [(HMDHome *)v53 homeReprovisionHandler];
  long long v61 = [(HMDHome *)v53 workQueue];
  __int16 v62 = [(HMDHome *)v53 msgDispatcher];
  [v60 configure:v53 queue:v61 messageDispatcher:v62];

  uint64_t v63 = [(HMDHome *)v53 sharedHomeUpdateHandler];
  [v63 registerForMessages];

  id v64 = [(HMDHome *)v53 reachabilityChangedLogEventManager];
  [v64 configure];

  [(HMDHome *)v53 updateHomeLocation];
  uint64_t v65 = [(HMDHome *)v53 residentDeviceManager];
  long long v66 = +[HMDMessageDispatcher defaultDispatcher];
  [v65 configureWithHome:v53 messageDispatcher:v66];

  id v67 = [(HMDHome *)v53 residentDeviceManager];
  [v67 setDelegate:v53];

  long long v68 = [(HMDHome *)v53 primaryResidentChangeMonitor];
  [v68 configureWithHome:v53];

  [(HMDHome *)v53 setResidentFirstAccessoryCommunicationEnabled:[(HMDHome *)v53 shouldEnableResidentFirstAccessoryCommunication]];
  [(HMDHome *)v53 _purgeResidentUsers];
  if ([(HMDHome *)v53 isOwnerUser])
  {
    BOOL v69 = [(HMDHome *)v53 primaryResident];
    id v70 = [v69 device];
    unsigned int v71 = [v70 isCurrentDevice];

    id v72 = [(HMDHome *)v53 accessoryBrowser];
    [v72 setQOS:v71];
  }
  BOOL v73 = [(HMDHome *)v53 name];
  id v74 = [(HMDHome *)v53 addName:v73];

  uint64_t v75 = [(HMDHome *)v53 roomForEntireHome];
  uint64_t v76 = [v75 name];
  id v77 = [(HMDHome *)v53 addName:v76];

  id v78 = [(HMDHome *)v53 notificationRegistrations];
  LOBYTE(v76) = [v78 count] == 0;

  if ((v76 & 1) == 0)
  {
    long long v517 = 0u;
    long long v518 = 0u;
    long long v515 = 0u;
    long long v516 = 0u;
    long long v79 = [(HMDHome *)v53 mediaSessions];
    uint64_t v80 = [v79 countByEnumeratingWithState:&v515 objects:v561 count:16];
    if (v80)
    {
      uint64_t v81 = *(void *)v516;
      do
      {
        for (uint64_t i = 0; i != v80; ++i)
        {
          if (*(void *)v516 != v81) {
            objc_enumerationMutation(v79);
          }
          [*(id *)(*((void *)&v515 + 1) + 8 * i) registerForSessionUpdates:1];
        }
        uint64_t v80 = [v79 countByEnumeratingWithState:&v515 objects:v561 count:16];
      }
      while (v80);
    }
  }
  dispatch_group_t group = dispatch_group_create();
  [(HMDHome *)v53 setBulletinNotificationsSupported:1];
  long long v83 = [(HMDHome *)v53 accessories];
  v451 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v83, "count"));
  uint64_t v84 = HMFUptime();
  double v86 = v85;
  __int16 v87 = (void *)MEMORY[0x1D9452090](v84);
  id v88 = v53;
  HMFGetOSLogHandle();
  __int16 v89 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    id v90 = (id)objc_claimAutoreleasedReturnValue();
    id v91 = [(HMDHome *)v88 uuid];
    *(_DWORD *)buf = 138544898;
    id v520 = v90;
    __int16 v521 = 2114;
    v522 = @"homeConfigureStart";
    __int16 v523 = 2112;
    v524 = @"Configuring accessories";
    __int16 v525 = 2114;
    v526 = @"state";
    __int16 v527 = 2112;
    v528 = @"homeConfigureAccessories";
    __int16 v529 = 2114;
    v530 = @"homeUUID";
    __int16 v531 = 2112;
    id v532 = v91;
    _os_log_impl(&dword_1D49D5000, v89, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x48u);
  }
  uint64_t v92 = [MEMORY[0x1E4F6A2A0] sharedInstance];
  id v93 = objc_alloc(MEMORY[0x1E4F6A2B0]);
  long long v94 = [(HMDHome *)v88 uuid];
  id v95 = HMDTaggedLoggingCreateDictionary();
  id v96 = objc_msgSend(v93, "initWithTag:data:", @"homeConfigureStart", v95, @"state", @"homeConfigureAccessories", @"homeUUID", v94);
  long long v97 = [MEMORY[0x1E4F653F0] currentTagProcessorList];
  [v92 submitTaggedEvent:v96 processorList:v97];

  long long v513 = 0u;
  long long v514 = 0u;
  long long v511 = 0u;
  long long v512 = 0u;
  id obj = v83;
  uint64_t v98 = [obj countByEnumeratingWithState:&v511 objects:v560 count:16];
  if (v98)
  {
    id v452 = 0;
    uint64_t v461 = *(void *)v512;
    do
    {
      for (uint64_t j = 0; j != v98; ++j)
      {
        if (*(void *)v512 != v461) {
          objc_enumerationMutation(obj);
        }
        long long v100 = *(void **)(*((void *)&v511 + 1) + 8 * j);
        __int16 v101 = (void *)MEMORY[0x1D9452090]();
        id v102 = v100;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v103 = v102;
        }
        else {
          uint64_t v103 = 0;
        }
        id v104 = v103;

        [v104 setDataSource:v88];
        id v105 = v102;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v106 = v105;
        }
        else {
          uint64_t v106 = 0;
        }
        id v107 = v106;

        if (v107)
        {
          if ([v107 isPrimary])
          {
            uint64_t v108 = [v107 identifier];
            uint64_t v109 = [v107 supportedTransports];
            int v110 = [v107 setupHash];
            [(HMDHome *)v88 _registerPairedAccessory:v108 transports:v109 setupHash:v110];
          }
          [v451 addObject:v107];
        }
        id v111 = v105;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          long long v112 = v111;
        }
        else {
          long long v112 = 0;
        }
        id v113 = v112;

        if (v113)
        {
          if (v104)
          {
            id v114 = [(HMDHome *)v88 capabilitiesAggregator];
            uint64_t v115 = [v104 uuid];
            [v114 didAddAccessory:v115];
          }
          if ([v104 isCurrentAccessory])
          {
            id v116 = v104;

            id v452 = v116;
          }
          uint64_t v117 = [v113 identifier];
          -[HMDHome _registerPairedAccessory:transports:setupHash:](v88, "_registerPairedAccessory:transports:setupHash:", v117, [v113 supportedTransports], 0);
        }
        uint64_t v118 = [(HMDHome *)v88 msgDispatcher];
        [v111 configureWithHome:v88 msgDispatcher:v118 configurationTracker:group initialConfiguration:1];

        dispatch_group_t v119 = [v111 uuid];
        id v120 = [v119 UUIDString];
        [v459 addObject:v120];
      }
      uint64_t v98 = [obj countByEnumeratingWithState:&v511 objects:v560 count:16];
    }
    while (v98);
  }
  else
  {
    id v452 = 0;
  }

  int v121 = (void *)MEMORY[0x1D9452090]();
  uint64_t v122 = v88;
  HMFGetOSLogHandle();
  uint64_t v123 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v123, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v124 = (id)objc_claimAutoreleasedReturnValue();
    id v125 = NSString;
    HMFUptime();
    objc_msgSend(v125, "stringWithFormat:", @"%.3f", v126 - v86);
    id v127 = (id)objc_claimAutoreleasedReturnValue();
    id v128 = [(HMDHome *)v122 uuid];
    id v129 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(obj, "count"));
    *(_DWORD *)buf = 138545922;
    id v520 = v124;
    __int16 v521 = 2114;
    v522 = @"homeConfigureStart";
    __int16 v523 = 2112;
    v524 = @"Configured accessories";
    __int16 v525 = 2114;
    v526 = @"state";
    __int16 v527 = 2112;
    v528 = @"homeConfiguredAccessories";
    __int16 v529 = 2114;
    v530 = @"duration";
    __int16 v531 = 2112;
    id v532 = v127;
    __int16 v533 = 2114;
    v534 = @"homeUUID";
    __int16 v535 = 2112;
    id v536 = v128;
    __int16 v537 = 2114;
    v538 = @"accessoriesCount";
    __int16 v539 = 2112;
    id v540 = v129;
    _os_log_impl(&dword_1D49D5000, v123, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x70u);
  }
  uint64_t v130 = [MEMORY[0x1E4F6A2A0] sharedInstance];
  id v131 = objc_alloc(MEMORY[0x1E4F6A2B0]);
  uint64_t v132 = NSString;
  HMFUptime();
  uint64_t v134 = objc_msgSend(v132, "stringWithFormat:", @"%.3f", v133 - v86);
  uint64_t v135 = [(HMDHome *)v122 uuid];
  long long v136 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(obj, "count"));
  long long v137 = HMDTaggedLoggingCreateDictionary();
  long long v138 = objc_msgSend(v131, "initWithTag:data:", @"homeConfigureStart", v137, @"state", @"homeConfiguredAccessories", @"duration", v134, @"homeUUID", v135, @"accessoriesCount", v136);
  long long v139 = [MEMORY[0x1E4F653F0] currentTagProcessorList];
  [v130 submitTaggedEvent:v138 processorList:v139];

  uint64_t v140 = HMFUptime();
  double v142 = v141;
  uint64_t v143 = (void *)MEMORY[0x1D9452090](v140);
  uint64_t v144 = v122;
  HMFGetOSLogHandle();
  __int16 v145 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v145, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    id v146 = (id)objc_claimAutoreleasedReturnValue();
    __int16 v147 = [(HMDHome *)v144 uuid];
    *(_DWORD *)buf = 138544898;
    id v520 = v146;
    __int16 v521 = 2114;
    v522 = @"homeConfigureStart";
    __int16 v523 = 2112;
    v524 = @"Configuring rooms, zones, groups, etc";
    __int16 v525 = 2114;
    v526 = @"state";
    __int16 v527 = 2112;
    v528 = @"homeConfigureProperties";
    __int16 v529 = 2114;
    v530 = @"homeUUID";
    __int16 v531 = 2112;
    id v532 = v147;
    _os_log_impl(&dword_1D49D5000, v145, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x48u);
  }
  id v148 = [MEMORY[0x1E4F6A2A0] sharedInstance];
  id v149 = objc_alloc(MEMORY[0x1E4F6A2B0]);
  id v150 = [(HMDHome *)v144 uuid];
  uint64_t v151 = HMDTaggedLoggingCreateDictionary();
  id v152 = objc_msgSend(v149, "initWithTag:data:", @"homeConfigureStart", v151, @"state", @"homeConfigureProperties", @"homeUUID", v150);
  id v153 = [MEMORY[0x1E4F653F0] currentTagProcessorList];
  [v148 submitTaggedEvent:v152 processorList:v153];

  long long v509 = 0u;
  long long v510 = 0u;
  long long v507 = 0u;
  long long v508 = 0u;
  long long v154 = [(HMDHome *)v144 rooms];
  uint64_t v155 = [v154 countByEnumeratingWithState:&v507 objects:v559 count:16];
  if (v155)
  {
    uint64_t v156 = *(void *)v508;
    do
    {
      for (uint64_t k = 0; k != v155; ++k)
      {
        if (*(void *)v508 != v156) {
          objc_enumerationMutation(v154);
        }
        long long v158 = *(void **)(*((void *)&v507 + 1) + 8 * k);
        long long v159 = [(HMDHome *)v144 msgDispatcher];
        long long v160 = [(HMDHome *)v144 workQueue];
        [v158 configure:v159 queue:v160];

        long long v161 = [v158 name];
        id v162 = [(HMDHome *)v144 addName:v161];
      }
      uint64_t v155 = [v154 countByEnumeratingWithState:&v507 objects:v559 count:16];
    }
    while (v155);
  }

  long long v505 = 0u;
  long long v506 = 0u;
  long long v503 = 0u;
  long long v504 = 0u;
  long long v163 = [(HMDHome *)v144 zones];
  uint64_t v164 = [v163 countByEnumeratingWithState:&v503 objects:v558 count:16];
  if (v164)
  {
    uint64_t v165 = *(void *)v504;
    do
    {
      for (uint64_t m = 0; m != v164; ++m)
      {
        if (*(void *)v504 != v165) {
          objc_enumerationMutation(v163);
        }
        long long v167 = *(void **)(*((void *)&v503 + 1) + 8 * m);
        long long v168 = [(HMDHome *)v144 msgDispatcher];
        long long v169 = [(HMDHome *)v144 workQueue];
        [v167 configure:v168 queue:v169];

        long long v170 = [v167 name];
        id v171 = [(HMDHome *)v144 addName:v170];
      }
      uint64_t v164 = [v163 countByEnumeratingWithState:&v503 objects:v558 count:16];
    }
    while (v164);
  }

  long long v501 = 0u;
  long long v502 = 0u;
  long long v499 = 0u;
  long long v500 = 0u;
  long long v172 = [(HMDHome *)v144 serviceGroups];
  uint64_t v173 = [v172 countByEnumeratingWithState:&v499 objects:v557 count:16];
  if (v173)
  {
    uint64_t v174 = *(void *)v500;
    do
    {
      for (uint64_t n = 0; n != v173; ++n)
      {
        if (*(void *)v500 != v174) {
          objc_enumerationMutation(v172);
        }
        long long v176 = *(void **)(*((void *)&v499 + 1) + 8 * n);
        long long v177 = [(HMDHome *)v144 msgDispatcher];
        long long v178 = [(HMDHome *)v144 workQueue];
        [v176 configure:v177 queue:v178];

        long long v179 = [v176 name];
        id v180 = [(HMDHome *)v144 addName:v179];
      }
      uint64_t v173 = [v172 countByEnumeratingWithState:&v499 objects:v557 count:16];
    }
    while (v173);
  }

  long long v497 = 0u;
  long long v498 = 0u;
  long long v495 = 0u;
  long long v496 = 0u;
  long long v181 = [(HMDHome *)v144 actionSets];
  uint64_t v182 = [v181 countByEnumeratingWithState:&v495 objects:v556 count:16];
  if (v182)
  {
    char v462 = 0;
    uint64_t v183 = *(void *)v496;
    do
    {
      for (iuint64_t i = 0; ii != v182; ++ii)
      {
        if (*(void *)v496 != v183) {
          objc_enumerationMutation(v181);
        }
        id v185 = *(void **)(*((void *)&v495 + 1) + 8 * ii);
        id v186 = (void *)MEMORY[0x1D9452090]();
        uint64_t v187 = [(HMDHome *)v144 msgDispatcher];
        id v188 = [(HMDHome *)v144 workQueue];
        char v189 = [v185 configure:v144 messageDispatcher:v187 queue:v188];

        id v190 = [v185 name];
        id v191 = [(HMDHome *)v144 addName:v190];

        v462 |= v189;
      }
      uint64_t v182 = [v181 countByEnumeratingWithState:&v495 objects:v556 count:16];
    }
    while (v182);
  }
  else
  {
    char v462 = 0;
  }

  long long v493 = 0u;
  long long v494 = 0u;
  long long v491 = 0u;
  long long v492 = 0u;
  __int16 v192 = [(HMDHome *)v144 triggerOwnedActionSets];
  uint64_t v193 = [v192 countByEnumeratingWithState:&v491 objects:v555 count:16];
  if (v193)
  {
    uint64_t v194 = *(void *)v492;
    do
    {
      for (juint64_t j = 0; jj != v193; ++jj)
      {
        if (*(void *)v492 != v194) {
          objc_enumerationMutation(v192);
        }
        long long v196 = *(void **)(*((void *)&v491 + 1) + 8 * jj);
        long long v197 = (void *)MEMORY[0x1D9452090]();
        long long v198 = [(HMDHome *)v144 msgDispatcher];
        long long v199 = [(HMDHome *)v144 workQueue];
        LOBYTE(v196) = [v196 configure:v144 messageDispatcher:v198 queue:v199];

        v462 |= v196;
      }
      uint64_t v193 = [v192 countByEnumeratingWithState:&v491 objects:v555 count:16];
    }
    while (v193);
  }

  if (a6 <= 1)
  {
    id v200 = [(HMDHome *)v144 actionSets];
    long long v201 = [(HMDHome *)v144 filterBuiltinActionSets:v200];
    BOOL v202 = [v201 count] == 0;

    if (v202)
    {
      BOOL v203 = [(HMDHome *)v144 isOwnerUser];
      uint64_t v204 = (void *)MEMORY[0x1D9452090]();
      id v205 = v144;
      HMFGetOSLogHandle();
      long long v206 = (id)objc_claimAutoreleasedReturnValue();
      BOOL v207 = os_log_type_enabled(v206, OS_LOG_TYPE_INFO);
      if (v203)
      {
        if (v207)
        {
          HMFGetLogIdentifier();
          id v208 = (id)objc_claimAutoreleasedReturnValue();
          uint64_t v209 = [v205[142] count];
          *(_DWORD *)buf = 138543618;
          id v520 = v208;
          __int16 v521 = 2048;
          v522 = (__CFString *)v209;
          _os_log_impl(&dword_1D49D5000, v206, OS_LOG_TYPE_INFO, "%{public}@%ld user-defined actionSets; no builtin actionSets - creating....",
            buf,
            0x16u);
        }
        id v210 = [v205 actionSets];
        uint64_t v211 = [v205 _createBuiltinActionSets];
        [v210 addObjectsFromArray:v211];

        char v462 = 1;
      }
      else
      {
        if (v207)
        {
          HMFGetLogIdentifier();
          id v212 = (id)objc_claimAutoreleasedReturnValue();
          uint64_t v213 = (__CFString *)v205[152];
          *(_DWORD *)buf = 138543618;
          id v520 = v212;
          __int16 v521 = 2112;
          v522 = v213;
          _os_log_impl(&dword_1D49D5000, v206, OS_LOG_TYPE_INFO, "%{public}@Shared home - not creating builtin actionSets %@", buf, 0x16u);
        }
      }
    }
  }
  long long v489 = 0u;
  long long v490 = 0u;
  long long v487 = 0u;
  long long v488 = 0u;
  v214 = [(HMDHome *)v144 triggers];
  uint64_t v215 = [v214 countByEnumeratingWithState:&v487 objects:v554 count:16];
  if (v215)
  {
    uint64_t v216 = *(void *)v488;
    do
    {
      for (kuint64_t k = 0; kk != v215; ++kk)
      {
        if (*(void *)v488 != v216) {
          objc_enumerationMutation(v214);
        }
        uint64_t v218 = *(void **)(*((void *)&v487 + 1) + 8 * kk);
        __int16 v219 = [(HMDHome *)v144 msgDispatcher];
        id v220 = [(HMDHome *)v144 workQueue];
        [v218 configure:v144 messageDispatcher:v219 queue:v220];

        __int16 v221 = [v218 owner];
        LODWORD(v219) = v221 == 0;

        if (v219)
        {
          uint64_t v222 = [(HMDHome *)v144 currentUser];
          [v218 setOwner:v222];
        }
        id v223 = [v218 owner];
        if ([v223 isCurrentUser])
        {
          uint64_t v224 = [v218 owningDevice];
          BOOL v225 = v224 == 0;

          if (v225)
          {
            uint64_t v226 = [(HMDHome *)v144 currentDevice];
            [v218 setOwningDevice:v226];

            uint64_t v227 = [v218 owningDevice];

            if (v227)
            {
              uint64_t v228 = (void *)MEMORY[0x1D9452090]();
              uint64_t v229 = v144;
              HMFGetOSLogHandle();
              id v230 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v230, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                id v231 = (id)objc_claimAutoreleasedReturnValue();
                id v232 = [v218 name];
                *(_DWORD *)buf = 138543618;
                id v520 = v231;
                __int16 v521 = 2112;
                v522 = v232;
                _os_log_impl(&dword_1D49D5000, v230, OS_LOG_TYPE_INFO, "%{public}@Configuration changed: Trigger %@ owner updated to current device", buf, 0x16u);
              }
              char v462 = 1;
            }
          }
        }
        else
        {
        }
      }
      uint64_t v215 = [v214 countByEnumeratingWithState:&v487 objects:v554 count:16];
    }
    while (v215);
  }

  id v233 = (void *)MEMORY[0x1D9452090]();
  long long v234 = v144;
  HMFGetOSLogHandle();
  int v235 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v235, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v236 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v237 = NSString;
    HMFUptime();
    objc_msgSend(v237, "stringWithFormat:", @"%.3f", v238 - v142);
    id v239 = (id)objc_claimAutoreleasedReturnValue();
    id v240 = [(HMDHome *)v234 uuid];
    *(_DWORD *)buf = 138545410;
    id v520 = v236;
    __int16 v521 = 2114;
    v522 = @"homeConfigureStart";
    __int16 v523 = 2112;
    v524 = @"Configured rooms, zones, triggers, etc.";
    __int16 v525 = 2114;
    v526 = @"state";
    __int16 v527 = 2112;
    v528 = @"homeConfiguredProperties";
    __int16 v529 = 2114;
    v530 = @"duration";
    __int16 v531 = 2112;
    id v532 = v239;
    __int16 v533 = 2114;
    v534 = @"homeUUID";
    __int16 v535 = 2112;
    id v536 = v240;
    _os_log_impl(&dword_1D49D5000, v235, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x5Cu);
  }
  long long v241 = [MEMORY[0x1E4F6A2A0] sharedInstance];
  id v242 = objc_alloc(MEMORY[0x1E4F6A2B0]);
  id v243 = NSString;
  HMFUptime();
  id v245 = objc_msgSend(v243, "stringWithFormat:", @"%.3f", v244 - v142);
  uint64_t v246 = [(HMDHome *)v234 uuid];
  id v247 = HMDTaggedLoggingCreateDictionary();
  int v248 = objc_msgSend(v242, "initWithTag:data:", @"homeConfigureStart", v247, @"state", @"homeConfiguredProperties", @"duration", v245, @"homeUUID", v246);
  int v249 = [MEMORY[0x1E4F653F0] currentTagProcessorList];
  [v241 submitTaggedEvent:v248 processorList:v249];

  uint64_t v250 = HMFUptime();
  double v252 = v251;
  uint64_t v253 = (void *)MEMORY[0x1D9452090](v250);
  uint64_t v254 = v234;
  HMFGetOSLogHandle();
  id v255 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v255, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    id v256 = (id)objc_claimAutoreleasedReturnValue();
    id v257 = [(HMDHome *)v254 uuid];
    *(_DWORD *)buf = 138544898;
    id v520 = v256;
    __int16 v521 = 2114;
    v522 = @"homeConfigureStart";
    __int16 v523 = 2112;
    v524 = @"Configuring users";
    __int16 v525 = 2114;
    v526 = @"state";
    __int16 v527 = 2112;
    v528 = @"homeConfigureUsers";
    __int16 v529 = 2114;
    v530 = @"homeUUID";
    __int16 v531 = 2112;
    id v532 = v257;
    _os_log_impl(&dword_1D49D5000, v255, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x48u);
  }
  long long v258 = [MEMORY[0x1E4F6A2A0] sharedInstance];
  id v259 = objc_alloc(MEMORY[0x1E4F6A2B0]);
  id v260 = [(HMDHome *)v254 uuid];
  uint64_t v261 = HMDTaggedLoggingCreateDictionary();
  id v262 = objc_msgSend(v259, "initWithTag:data:", @"homeConfigureStart", v261, @"state", @"homeConfigureUsers", @"homeUUID", v260);
  uint64_t v263 = [MEMORY[0x1E4F653F0] currentTagProcessorList];
  [v258 submitTaggedEvent:v262 processorList:v263];

  long long v485 = 0u;
  long long v486 = 0u;
  long long v483 = 0u;
  long long v484 = 0u;
  id v264 = [(HMDHome *)v254 removedUsers];
  uint64_t v265 = [v264 countByEnumeratingWithState:&v483 objects:v553 count:16];
  if (v265)
  {
    uint64_t v266 = *(void *)v484;
    do
    {
      for (muint64_t m = 0; mm != v265; ++mm)
      {
        if (*(void *)v484 != v266) {
          objc_enumerationMutation(v264);
        }
        id v268 = [*(id *)(*((void *)&v483 + 1) + 8 * mm) user];
        [(HMDHome *)v254 _addUserToIdentityRegistry:v268];
      }
      uint64_t v265 = [v264 countByEnumeratingWithState:&v483 objects:v553 count:16];
    }
    while (v265);
  }

  long long v481 = 0u;
  long long v482 = 0u;
  long long v479 = 0u;
  long long v480 = 0u;
  id v447 = [(HMDHome *)v254 users];
  uint64_t v269 = [v447 countByEnumeratingWithState:&v479 objects:v552 count:16];
  if (v269)
  {
    uint64_t v455 = *(void *)v480;
    do
    {
      for (nuint64_t n = 0; nn != v269; ++nn)
      {
        if (*(void *)v480 != v455) {
          objc_enumerationMutation(v447);
        }
        long long v271 = *(__CFString **)(*((void *)&v479 + 1) + 8 * nn);
        long long v272 = [(__CFString *)v271 userID];
        char v273 = [(__CFString *)v271 isRemoteGateway];
        if (v272) {
          char v274 = v273;
        }
        else {
          char v274 = 1;
        }
        if ((v274 & 1) == 0)
        {
          long long v275 = +[HMDDeviceHandle deviceHandleForDestination:v272];
          if (v275)
          {
            uint64_t v276 = (void *)MEMORY[0x1D9452090]();
            long long v277 = v254;
            HMFGetOSLogHandle();
            long long v278 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v278, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              id v279 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              id v520 = v279;
              __int16 v521 = 2112;
              v522 = v271;
              _os_log_impl(&dword_1D49D5000, v278, OS_LOG_TYPE_DEFAULT, "%{public}@Migrating invalid resident user: %@", buf, 0x16u);
            }
            [(HMDHome *)v277 _removeUser:v271];
            id v280 = +[HMDAccountRegistry sharedRegistry];
            uint64_t v281 = [v280 deviceForHandle:v275];

            id v282 = [HMDResidentUser alloc];
            long long v283 = [(__CFString *)v271 pairingIdentity];
            long long v284 = [(HMDResidentUser *)v282 initWithDevice:v281 home:v277 pairingIdentity:v283 configurationState:0];

            uint64_t v285 = [(__CFString *)v271 uuid];
            [(HMDUser *)v284 setUUID:v285];

            [(HMDHome *)v277 addUser:v284];
          }
        }
        [(HMDHome *)v254 _addUserToIdentityRegistry:v271];
        [(__CFString *)v271 configureWithHome:v254];
        if ([(__CFString *)v271 isOwner] && ![(HMDHome *)v254 isOwnerUser])
        {
          dispatch_time_t v286 = dispatch_time(0, 300000000000);
          long long v287 = [(HMDHome *)v254 workQueue];
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 3221225472;
          block[2] = __86__HMDHome_configureWithHomeManager_accessoriesPresent_uncommittedTransactions_source___block_invoke;
          block[3] = &unk_1E6A197C8;
          void block[4] = v271;
          void block[5] = v254;
          dispatch_after(v286, v287, block);
        }
      }
      uint64_t v269 = [v447 countByEnumeratingWithState:&v479 objects:v552 count:16];
    }
    while (v269);
  }

  long long v288 = (void *)MEMORY[0x1D9452090]();
  uint64_t v289 = v254;
  HMFGetOSLogHandle();
  int v290 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v290, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v291 = (id)objc_claimAutoreleasedReturnValue();
    long long v292 = NSString;
    HMFUptime();
    objc_msgSend(v292, "stringWithFormat:", @"%.3f", v293 - v252);
    id v294 = (id)objc_claimAutoreleasedReturnValue();
    long long v295 = NSNumber;
    long long v296 = [(HMDHome *)v289 users];
    uint64_t v297 = objc_msgSend(v295, "numberWithUnsignedInteger:", objc_msgSend(v296, "count"));
    *(_DWORD *)buf = 138545410;
    id v520 = v291;
    __int16 v521 = 2114;
    v522 = @"homeConfigureStart";
    __int16 v523 = 2112;
    v524 = @"Configured users";
    __int16 v525 = 2114;
    v526 = @"state";
    __int16 v527 = 2112;
    v528 = @"homeConfiguredUsers";
    __int16 v529 = 2114;
    v530 = @"duration";
    __int16 v531 = 2112;
    id v532 = v294;
    __int16 v533 = 2114;
    v534 = @"usersCount";
    __int16 v535 = 2112;
    id v536 = v297;
    _os_log_impl(&dword_1D49D5000, v290, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x5Cu);
  }
  long long v298 = [MEMORY[0x1E4F6A2A0] sharedInstance];
  id v299 = objc_alloc(MEMORY[0x1E4F6A2B0]);
  long long v300 = NSString;
  HMFUptime();
  v302 = objc_msgSend(v300, "stringWithFormat:", @"%.3f", v301 - v252);
  v303 = NSNumber;
  id v304 = [(HMDHome *)v289 users];
  __int16 v305 = objc_msgSend(v303, "numberWithUnsignedInteger:", objc_msgSend(v304, "count"));
  id v306 = HMDTaggedLoggingCreateDictionary();
  int v307 = objc_msgSend(v299, "initWithTag:data:", @"homeConfigureStart", v306, @"state", @"homeConfiguredUsers", @"duration", v302, @"usersCount", v305);
  v308 = [MEMORY[0x1E4F653F0] currentTagProcessorList];
  [v298 submitTaggedEvent:v307 processorList:v308];

  uint64_t v309 = [(HMDHome *)v289 networkProtectionGroupRegistry];
  [v309 configure];

  id v310 = [(HMDHome *)v289 localCapabilitiesDataSource];
  LODWORD(v302) = [v310 isResidentCapable];

  if (v302)
  {
    v311 = [(HMDHome *)v289 uuid];
    v312 = [v311 UUIDString];
    v313 = [@"Home.EventRouter.Server.Delegating." stringByAppendingString:v312];

    id v314 = objc_alloc(MEMORY[0x1E4F69F30]);
    id v315 = [v444 workQueue];
    id v316 = v313;
    uint64_t v317 = [v316 UTF8String];
    v318 = [(HMDHome *)v289 uuid];
    uint64_t v319 = [v314 initWithQueue:v315 dataSource:v289 storeReadHandle:0 logCategory:v317 identifier:v318];
    serverDelegatingEventRouter = v289->_serverDelegatingEventRouter;
    v289->_serverDelegatingEventRouter = (HMEDelegatingEventRouter *)v319;

    [(HMDHome *)v289 createRemoteEventRouterServerIfNeeded];
  }
  v446 = +[HMDUserMessagePolicy userMessagePolicyWithHome:v289 userPrivilege:3 remoteAccessRequired:0];
  v445 = [v444 eventRouterAssertionController];
  long long v321 = [HMDHomeRemoteEventRouterClientController alloc];
  long long v322 = [(HMDHome *)v289 messageTargetUUID];
  long long v323 = [v444 workQueue];
  long long v324 = [v452 uuid];
  long long v325 = [(HMDHomeRemoteEventRouterClientController *)v321 initWithMessageTargetUUID:v322 workQueue:v323 dataSource:v289 requestMessageName:@"RemoteEventRouterRequestMessage" updateMessageName:@"RemoteEventRouterUpdateMessageName" multiHopFetchResponseMessageName:@"RER.MHF.ResponseMessageName" clientUserMessagePolicy:v446 currentAccessoryUUID:v324 assertionController:v445];
  [(HMDHome *)v289 setRemoteEventRouterClientController:v325];

  long long v326 = [(HMDHome *)v289 remoteEventRouterClientController];
  [v326 setHomeManager:v444];

  long long v327 = [v444 localAndRemoteSubscriptionProvider];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    long long v328 = v327;
  }
  else {
    long long v328 = 0;
  }
  id v442 = v328;

  long long v329 = [(HMDHome *)v289 remoteEventRouterClientController];
  id v448 = [v329 residentDelegatingEventRouter];

  if (v448) {
    [v442 registerSubRouter:v448];
  }
  long long v330 = [(HMDHome *)v289 accessoryInfoFetchController];
  long long v331 = [(HMDHome *)v289 msgDispatcher];
  long long v332 = [(HMDHome *)v289 remoteEventRouterClientController];
  [v330 configureWithMessageDispatcher:v331 remoteEventRouterClientController:v332];

  objc_initWeak(&location, v289);
  long long v333 = [(HMDHome *)v289 workQueue];
  v472[0] = MEMORY[0x1E4F143A8];
  v472[1] = 3221225472;
  void v472[2] = __86__HMDHome_configureWithHomeManager_accessoriesPresent_uncommittedTransactions_source___block_invoke_728;
  v472[3] = &unk_1E6A17780;
  objc_copyWeak(&v476, &location);
  id v439 = v452;
  id v473 = v439;
  id obja = obj;
  id v474 = obja;
  id v441 = v440;
  id v475 = v441;
  dispatch_group_notify(group, v333, v472);

  long long v470 = 0u;
  long long v471 = 0u;
  long long v468 = 0u;
  long long v469 = 0u;
  long long v334 = [(HMDHome *)v289 outgoingInvitations];
  uint64_t v335 = [v334 countByEnumeratingWithState:&v468 objects:v551 count:16];
  if (v335)
  {
    id v453 = v334;
    uint64_t v456 = *(void *)v469;
    do
    {
      for (uint64_t i1 = 0; i1 != v335; ++i1)
      {
        if (*(void *)v469 != v456) {
          objc_enumerationMutation(v453);
        }
        long long v337 = *(void **)(*((void *)&v468 + 1) + 8 * i1);
        long long v464 = 0u;
        long long v465 = 0u;
        long long v466 = 0u;
        long long v467 = 0u;
        long long v338 = [v337 operations];
        uint64_t v339 = [v338 countByEnumeratingWithState:&v464 objects:v550 count:16];
        if (v339)
        {
          uint64_t v340 = *(void *)v465;
          do
          {
            for (uint64_t i2 = 0; i2 != v339; ++i2)
            {
              if (*(void *)v465 != v340) {
                objc_enumerationMutation(v338);
              }
              long long v342 = *(void **)(*((void *)&v464 + 1) + 8 * i2);
              if (([v342 isFinished] & 1) == 0)
              {
                [v342 setDelegate:v289];
                v343 = +[HMDUserManagementOperationManager sharedManager];
                [v343 addOperation:v342];
              }
            }
            uint64_t v339 = [v338 countByEnumeratingWithState:&v464 objects:v550 count:16];
          }
          while (v339);
        }
      }
      long long v334 = v453;
      uint64_t v335 = [v453 countByEnumeratingWithState:&v468 objects:v551 count:16];
    }
    while (v335);
  }

  uint64_t v344 = HMFUptime();
  double v346 = v345;
  v347 = (void *)MEMORY[0x1D9452090](v344);
  uint64_t v348 = v289;
  HMFGetOSLogHandle();
  v349 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v349, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    id v350 = (id)objc_claimAutoreleasedReturnValue();
    v351 = [(HMDHome *)v348 uuid];
    *(_DWORD *)buf = 138544898;
    id v520 = v350;
    __int16 v521 = 2114;
    v522 = @"homeConfigureStart";
    __int16 v523 = 2112;
    v524 = @"Configuring profiles and settings";
    __int16 v525 = 2114;
    v526 = @"state";
    __int16 v527 = 2112;
    v528 = @"homeConfigureProfiles";
    __int16 v529 = 2114;
    v530 = @"homeUUID";
    __int16 v531 = 2112;
    id v532 = v351;
    _os_log_impl(&dword_1D49D5000, v349, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x48u);
  }
  v352 = [MEMORY[0x1E4F6A2A0] sharedInstance];
  id v353 = objc_alloc(MEMORY[0x1E4F6A2B0]);
  v354 = [(HMDHome *)v348 uuid];
  v355 = HMDTaggedLoggingCreateDictionary();
  v356 = objc_msgSend(v353, "initWithTag:data:", @"homeConfigureStart", v355, @"state", @"homeConfigureProfiles", @"homeUUID", v354);
  v357 = [MEMORY[0x1E4F653F0] currentTagProcessorList];
  [v352 submitTaggedEvent:v356 processorList:v357];

  uint64_t v358 = (void *)MEMORY[0x1D9452090]();
  [(HMDHome *)v348 _registerForMessages];
  [(HMDHome *)v348 _registerForNotifications];
  [(HMDHome *)v348 resubscribeForNotificationsOnResident:0];
  [(HMDHome *)v348 configureMultiuserSettingsMessengerWithMessengerFactory:v348];
  [(HMDHome *)v348 _evaluateShouldRelaunchAndSetRelaunch];
  v359 = (void *)MEMORY[0x1D9452090]([(HMDHome *)v348 reEvaluateHomeHubState]);
  v360 = v348;
  HMFGetOSLogHandle();
  v361 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v361, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v362 = (id)objc_claimAutoreleasedReturnValue();
    id v363 = [v360 triggers];
    *(_DWORD *)buf = 138543618;
    id v520 = v362;
    __int16 v521 = 2112;
    v522 = v363;
    _os_log_impl(&dword_1D49D5000, v361, OS_LOG_TYPE_INFO, "%{public}@Triggers: %@", buf, 0x16u);
  }
  [v360 migrateAfterResidentChange];
  [v360 _updateWoWState:v451];
  if ((v462 & 1) != 0 && [v360 isOwnerUser]) {
    [v360 _updateConfigurationVersion];
  }
  __int16 v364 = [[HMDMediaActionRouter alloc] initWithDataSource:v360];
  [v360 setMediaActionRouter:v364];

  uint64_t v365 = [v360 personDataManager];
  [v365 configure];

  uint64_t v366 = [[HMDUserActionPredictionManager alloc] initWithHome:v360];
  [v360 setUserActionPredictionManager:v366];

  v367 = [v360 userActionPredictionManager];
  [v367 configure];

  v368 = [v360 reachabilityNotificationManager];
  v369 = [v444 messageDispatcher];
  v370 = [v369 secureRemoteTransport];
  uint64_t v371 = [v370 deviceMonitor];
  [v368 configureWithHome:v360 deviceMonitor:v371];

  [v360 configureNaturalLightingWithDemoModeEnabled:0];
  v372 = [v360 walletKeyManager];
  [v372 configureWithHome:v360];

  v373 = [v360 nfcReaderKeyManager];
  [v373 configureWithHome:v360];

  v374 = [v360 lockNotificationManager];
  [v374 configureWithHome:v360];

  v375 = [v360 analysisStatePublisher];
  [v375 configureWithHome:v360];

  [v360 configurePrimaryResidentMessageRouterWithFactory:v360 metricsDispatcherFactory:v360];
  v376 = [HMDAppleMediaAccessoryMessageRouter alloc];
  v377 = [v360 uuid];
  v378 = [v360 msgDispatcher];
  v379 = [(HMDAppleMediaAccessoryMessageRouter *)v376 initWithIdentifier:v377 messageDispatcher:v378];
  [v360 setAppleDeviceRouter:v379];

  v380 = [v360 appleDeviceRouter];
  [v380 setDataSource:v360];

  v381 = [HMDDelegatingMessageRouter alloc];
  v382 = [v360 msgDispatcher];
  uint64_t v383 = [v360 appleDeviceRouter];
  v549[0] = v383;
  v384 = [v360 primaryResidentMessageRouter];
  v549[1] = v384;
  v385 = [MEMORY[0x1E4F1C978] arrayWithObjects:v549 count:2];
  v386 = [(HMDDelegatingMessageRouter *)v381 initWithMessageDispatcher:v382 routers:v385];
  [v360 setAccessoryMessageRouterViaPrimary:v386];

  v387 = [v360 accessoryMessageRouterViaPrimary];
  [v387 setDataSource:v360];

  [v360 configureUnifiedLanguageValueListSettingDataProviderWithFactory:v360];
  [v360 configureAccessorySettingsMessengerWithMessengerFactory:v360 messageHandlerFactory:v360];
  [v360 configureSiriEndpointProfilesMessengerWithMessengerFactory:v360 messageHandlerFactory:v360];
  v388 = [v360 accessoryConnectionCoordinator];
  v389 = [v360 localCapabilitiesDataSource];
  objc_msgSend(v388, "configureWithIsResidentCapable:", objc_msgSend(v389, "isResidentCapable"));

  v390 = [v360 workQueue];
  v463[0] = MEMORY[0x1E4F143A8];
  v463[1] = 3221225472;
  v463[2] = __86__HMDHome_configureWithHomeManager_accessoriesPresent_uncommittedTransactions_source___block_invoke_736;
  void v463[3] = &unk_1E6A19B30;
  v463[4] = v360;
  dispatch_async(v390, v463);

  v391 = (void *)MEMORY[0x1D9452090]();
  v392 = v360;
  HMFGetOSLogHandle();
  v393 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v393, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v394 = (id)objc_claimAutoreleasedReturnValue();
    v395 = NSString;
    HMFUptime();
    objc_msgSend(v395, "stringWithFormat:", @"%.3f", v396 - v346);
    id v397 = (id)objc_claimAutoreleasedReturnValue();
    v398 = [v392 uuid];
    *(_DWORD *)buf = 138545410;
    id v520 = v394;
    __int16 v521 = 2114;
    v522 = @"homeConfigureStart";
    __int16 v523 = 2112;
    v524 = @"Configured profiles and settings";
    __int16 v525 = 2114;
    v526 = @"state";
    __int16 v527 = 2112;
    v528 = @"homeConfiguredProfiles";
    __int16 v529 = 2114;
    v530 = @"duration";
    __int16 v531 = 2112;
    id v532 = v397;
    __int16 v533 = 2114;
    v534 = @"homeUUID";
    __int16 v535 = 2112;
    id v536 = v398;
    _os_log_impl(&dword_1D49D5000, v393, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x5Cu);
  }
  v399 = [MEMORY[0x1E4F6A2A0] sharedInstance];
  id v400 = objc_alloc(MEMORY[0x1E4F6A2B0]);
  v401 = NSString;
  HMFUptime();
  v403 = objc_msgSend(v401, "stringWithFormat:", @"%.3f", v402 - v346);
  v404 = [v392 uuid];
  v405 = HMDTaggedLoggingCreateDictionary();
  v406 = objc_msgSend(v400, "initWithTag:data:", @"homeConfigureStart", v405, @"state", @"homeConfiguredProfiles", @"duration", v403, @"homeUUID", v404);
  v407 = [MEMORY[0x1E4F653F0] currentTagProcessorList];
  [v399 submitTaggedEvent:v406 processorList:v407];

  v408 = [v392 dailyScheduler];
  [v408 registerDailyTaskRunner:v392];

  v409 = (void *)MEMORY[0x1D9452090]();
  v410 = v392;
  HMFGetOSLogHandle();
  v411 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v411, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v457 = (id)objc_claimAutoreleasedReturnValue();
    v412 = NSString;
    HMFUptime();
    objc_msgSend(v412, "stringWithFormat:", @"%.3f", v413 - v11);
    id v414 = (id)objc_claimAutoreleasedReturnValue();
    v415 = [v410 uuid];
    HMFBooleanToString();
    id v416 = (id)objc_claimAutoreleasedReturnValue();
    v417 = NSNumber;
    v418 = [v410 accessories];
    v419 = objc_msgSend(v417, "numberWithUnsignedInteger:", objc_msgSend(v418, "count"));
    v420 = NSNumber;
    v421 = [v410 users];
    v422 = objc_msgSend(v420, "numberWithUnsignedInteger:", objc_msgSend(v421, "count"));
    *(_DWORD *)buf = 138546946;
    id v520 = v457;
    __int16 v521 = 2114;
    v522 = @"homeConfigureDone";
    __int16 v523 = 2112;
    v524 = @"Configured home";
    __int16 v525 = 2114;
    v526 = @"state";
    __int16 v527 = 2112;
    v528 = @"end";
    __int16 v529 = 2114;
    v530 = @"duration";
    __int16 v531 = 2112;
    id v532 = v414;
    __int16 v533 = 2114;
    v534 = @"homeUUID";
    __int16 v535 = 2112;
    id v536 = v415;
    __int16 v537 = 2114;
    v538 = @"configChanged";
    __int16 v539 = 2112;
    id v540 = v416;
    __int16 v541 = 2114;
    v542 = @"accessoriesCount";
    __int16 v543 = 2112;
    v544 = v419;
    __int16 v545 = 2114;
    v546 = @"usersCount";
    __int16 v547 = 2112;
    v548 = v422;
    _os_log_impl(&dword_1D49D5000, v411, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x98u);
  }
  v423 = [MEMORY[0x1E4F6A2A0] sharedInstance];
  id v424 = objc_alloc(MEMORY[0x1E4F6A2B0]);
  v425 = NSString;
  HMFUptime();
  v458 = objc_msgSend(v425, "stringWithFormat:", @"%.3f", v426 - v11);
  v427 = [v410 uuid];
  v428 = HMFBooleanToString();
  v429 = NSNumber;
  v430 = [v410 accessories];
  v431 = objc_msgSend(v429, "numberWithUnsignedInteger:", objc_msgSend(v430, "count"));
  v432 = NSNumber;
  v433 = [v410 users];
  v434 = objc_msgSend(v432, "numberWithUnsignedInteger:", objc_msgSend(v433, "count"));
  v435 = HMDTaggedLoggingCreateDictionary();
  v436 = objc_msgSend(v424, "initWithTag:data:", @"homeConfigureDone", v435, @"state", @"end", @"duration", v458, @"homeUUID", v427, @"configChanged", v428, @"accessoriesCount", v431, @"usersCount", v434);
  v437 = [MEMORY[0x1E4F653F0] currentTagProcessorList];
  [v423 submitTaggedEvent:v436 processorList:v437];

  objc_destroyWeak(&v476);
  objc_destroyWeak(&location);

  return v462 & 1;
}

void __86__HMDHome_configureWithHomeManager_accessoriesPresent_uncommittedTransactions_source___block_invoke(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v2 = [*(id *)(a1 + 32) account];
  id v3 = [v2 senderCorrelationIdentifier];

  if (!v3)
  {
    id v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = *(id *)(a1 + 40);
    uint64_t v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = HMFGetLogIdentifier();
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      id v14 = v7;
      __int16 v15 = 2112;
      uint64_t v16 = v8;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Owner for home %@ does not have a merge ID, resolving handle", buf, 0x16u);
    }
    uint64_t v9 = +[HMDRemoteAccountManager sharedManager];
    double v10 = [*(id *)(a1 + 32) accountHandle];
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    void v11[2] = __86__HMDHome_configureWithHomeManager_accessoriesPresent_uncommittedTransactions_source___block_invoke_717;
    v11[3] = &unk_1E6A06798;
    int8x16_t v12 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
    [v9 _resolveAccountForHandle:v10 completionHandler:v11];
  }
}

void __86__HMDHome_configureWithHomeManager_accessoriesPresent_uncommittedTransactions_source___block_invoke_728(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  [WeakRetained configureAfterAccessoriesConfigurationTrackerNotificationsWithCurrentAccessory:*(void *)(a1 + 32) accessories:*(void *)(a1 + 40) uncommittedTransactions:*(void *)(a1 + 48)];
}

void __86__HMDHome_configureWithHomeManager_accessoriesPresent_uncommittedTransactions_source___block_invoke_736(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) accessCodeManager];
  id v2 = [*(id *)(a1 + 32) msgDispatcher];
  [v3 configureWithMessageDispatcher:v2];
}

void __86__HMDHome_configureWithHomeManager_accessoriesPresent_uncommittedTransactions_source___block_invoke_717(uint64_t a1, void *a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = (void *)MEMORY[0x1D9452090]();
    id v8 = *(id *)(a1 + 32);
    uint64_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      double v10 = HMFGetLogIdentifier();
      double v11 = [*(id *)(a1 + 40) accountHandle];
      int v12 = 138543618;
      __int16 v13 = v10;
      __int16 v14 = 2112;
      __int16 v15 = v11;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to resolve account handle for account with no merge ID %@", (uint8_t *)&v12, 0x16u);
    }
  }
}

- (void)_setupActiveNetworkRouterAccessory:(id)a3 existingRouterAccessories:(id)a4
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  id v8 = v6;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v50 objects:v61 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v51;
    while (2)
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v51 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = *(id *)(*((void *)&v50 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          __int16 v14 = v13;
        }
        else {
          __int16 v14 = 0;
        }
        id v15 = v14;

        if ([v15 isPrimary])
        {
          uint64_t v16 = [v15 networkRouterController];

          if (v16)
          {
            id v41 = v8;
            id v42 = v7;
            long long v48 = 0u;
            long long v49 = 0u;
            long long v46 = 0u;
            long long v47 = 0u;
            id v17 = v7;
            uint64_t v18 = [v17 countByEnumeratingWithState:&v46 objects:v60 count:16];
            id v19 = v15;
            BOOL v45 = v15;
            if (v18)
            {
              uint64_t v20 = v18;
              uint64_t v21 = *(void *)v47;
              id v43 = v17;
              uint64_t v44 = *(void *)v47;
              do
              {
                for (uint64_t j = 0; j != v20; ++j)
                {
                  if (*(void *)v47 != v21) {
                    objc_enumerationMutation(v17);
                  }
                  uint64_t v23 = *(void **)(*((void *)&v46 + 1) + 8 * j);
                  if ((objc_msgSend(v23, "isEqual:", v19, v41, v42) & 1) == 0)
                  {
                    uint64_t v24 = (void *)MEMORY[0x1D9452090]();
                    id v25 = self;
                    id v26 = HMFGetOSLogHandle();
                    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
                    {
                      HMFGetLogIdentifier();
                      v28 = int v27 = self;
                      [v23 shortDescription];
                      id v30 = v29 = v20;
                      uint64_t v31 = [v19 shortDescription];
                      *(_DWORD *)buf = 138543874;
                      id v55 = v28;
                      __int16 v56 = 2112;
                      int v57 = v30;
                      __int16 v58 = 2112;
                      id v59 = v31;
                      _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_INFO, "%{public}@Removing existing Wi-Fi router accessory '%@' while adding a new Wi-Fi router accessory '%@'", buf, 0x20u);

                      id v19 = v45;
                      uint64_t v20 = v29;

                      self = v27;
                      id v17 = v43;
                      uint64_t v21 = v44;
                    }

                    -[HMDHome __removeAccessory:isBeingReplaced:isForceUpdate:message:](v25, v23, 1, 0);
                  }
                }
                uint64_t v20 = [v17 countByEnumeratingWithState:&v46 objects:v60 count:16];
              }
              while (v20);
            }

            uint64_t v32 = [v19 uuid];
            __int16 v33 = [(HMDHome *)self activeNetworkRouterUUID];
            char v34 = [v32 isEqual:v33];

            if (v34)
            {
              [(HMDHome *)self _evaluateNetworkProtectionAndRouterManagement];
              id v8 = v41;
              id v7 = v42;
              id v35 = v45;
            }
            else
            {
              uint64_t v36 = (void *)MEMORY[0x1D9452090]();
              uint64_t v37 = self;
              uint64_t v38 = HMFGetOSLogHandle();
              id v8 = v41;
              id v7 = v42;
              if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
              {
                uint64_t v39 = HMFGetLogIdentifier();
                __int16 v40 = [v45 shortDescription];
                *(_DWORD *)buf = 138543618;
                id v55 = v39;
                __int16 v56 = 2112;
                int v57 = v40;
                _os_log_impl(&dword_1D49D5000, v38, OS_LOG_TYPE_INFO, "%{public}@Adding transaction to set %@ as active network router accessory", buf, 0x16u);
              }
              id v35 = v45;
              -[HMDHome _addTransactionForActiveNetworkRouterAccessory:isReplacement:](v37, "_addTransactionForActiveNetworkRouterAccessory:isReplacement:", v45, [v17 count] != 0);
            }

            goto LABEL_31;
          }
        }
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v50 objects:v61 count:16];
      if (v10) {
        continue;
      }
      break;
    }
  }
LABEL_31:
}

- (void)setupBackingStore
{
  uint64_t v3 = [(HMDHome *)self uuid];
  if (v3)
  {
    id v4 = (void *)v3;
    id v5 = [(HMDHome *)self backingStore];

    if (!v5)
    {
      id v6 = [HMDBackingStore alloc];
      id v7 = [(HMDHome *)self uuid];
      id v8 = [(HMDBackingStore *)v6 initWithUUID:v7 home:self];
      [(HMDHome *)self setBackingStore:v8];

      id v9 = [(HMDHome *)self backingStore];
      [v9 setDelegate:self];
    }
  }
}

- (void)setBackingStore:(id)a3
{
  id v4 = (HMDBackingStore *)a3;
  os_unfair_recursive_lock_lock_with_options();
  backingStore = self->_backingStore;
  self->_backingStore = v4;

  os_unfair_recursive_lock_unlock();
}

- (void)setWatchSkipVersionCheck:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_watchSkipVersionChecuint64_t k = a3;
  os_unfair_recursive_lock_unlock();
}

- (BOOL)watchSkipVersionCheck
{
  LOBYTE(self) = self->_watchSkipVersionCheck;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)_addUserToIdentityRegistry:(id)a3
{
  id v12 = a3;
  uint64_t v3 = [v12 userID];
  id v4 = v12;
  if (v3)
  {
    id v5 = [v12 pairingIdentity];

    id v4 = v12;
    if (v5)
    {
      id v6 = v12;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v7 = v6;
      }
      else {
        id v7 = 0;
      }
      id v8 = v7;

      if (v8)
      {
        id v9 = [v8 device];
        if (v9)
        {
          uint64_t v10 = +[HMDIdentityRegistry sharedRegistry];
          uint64_t v11 = [v6 pairingIdentity];
          [v10 registerIdentity:v11 device:v9 object:v6];
LABEL_11:
        }
      }
      else
      {
        id v9 = [v6 account];
        if (v9)
        {
          uint64_t v10 = +[HMDIdentityRegistry sharedRegistry];
          uint64_t v11 = [v6 pairingIdentity];
          [v10 registerIdentity:v11 account:v9 object:v6];
          goto LABEL_11;
        }
      }

      id v4 = v12;
    }
  }
}

- (void)_removeMediaSessionWithIdentifier:(id)a3
{
  id v4 = [(HMDHome *)self mediaSessionWithIdentifier:a3];
  if (v4)
  {
    id v5 = v4;
    [v4 registerForSessionUpdates:0];
    [(HMDHome *)self removeMediaSession:v5];
    id v4 = v5;
  }
}

- (id)_createMediaSessionWithEndpoint:(id)a3
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 sessionIdentifier];
  if (v5)
  {
    id v6 = [(HMDHome *)self mediaSessionStateWithIdentifier:v5];
    if (!v6)
    {
      id v6 = [[HMDMediaSessionState alloc] initWithSessionIdentifier:v5];
      [(HMDHome *)self addMediaSessionState:v6];
    }
    id v7 = [HMDMediaSession alloc];
    id v8 = [MEMORY[0x1E4F1C978] array];
    id v9 = [(HMDMediaSession *)v7 initWithEndpoint:v4 mediaProfiles:v8 state:v6];

    [(HMDHome *)self __addMediaSession:v9];
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1D9452090]();
    uint64_t v11 = self;
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      int v15 = 138543618;
      uint64_t v16 = v13;
      __int16 v17 = 2112;
      id v18 = v4;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Cannot create a mediaSession with nil sessionIdentifier for endpoint %@", (uint8_t *)&v15, 0x16u);
    }
    id v9 = 0;
  }

  return v9;
}

- (id)_addMediaSessionForCurrentAccessory:(id)a3
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v5 = v4;
  }
  else {
    id v5 = 0;
  }
  id v6 = v5;

  id v7 = [v6 mediaProfile];
  if (v7)
  {
    id v8 = [v4 identifier];
    id v9 = +[HMDMediaSession sessionForCurrentAccessoryWithSessionIdentifier:v8 mediaProfile:v7];

    if (v9)
    {
      uint64_t v10 = [v9 state];
      [(HMDHome *)self addMediaSessionState:v10];

      [(HMDHome *)self __addMediaSession:v9];
      [v4 updateMediaSession:v9];
    }
  }
  else
  {
    uint64_t v11 = (void *)MEMORY[0x1D9452090]();
    id v12 = self;
    id v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v14 = HMFGetLogIdentifier();
      int v15 = [v4 name];
      int v17 = 138543618;
      id v18 = v14;
      __int16 v19 = 2112;
      uint64_t v20 = v15;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_DEFAULT, "%{public}@Current accessory '%@' not an Apple media accessory or no media profile", (uint8_t *)&v17, 0x16u);
    }
    id v9 = 0;
  }

  return v9;
}

- (void)__addMediaSession:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    id v7 = v4;
    id v5 = [(HMDHome *)self notificationRegistrations];
    uint64_t v6 = [v5 count];

    if (v6) {
      [v7 registerForSessionUpdates:1];
    }
    [(HMDHome *)self addMediaSession:v7];
    id v4 = v7;
  }
}

- (id)_createBuiltinActionSets
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [MEMORY[0x1E4F1CA48] array];
  +[HMDHome getBuiltinActionSets];
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v24 = [v4 countByEnumeratingWithState:&v25 objects:v35 count:16];
  if (v24)
  {
    uint64_t v23 = *(void *)v26;
    *(void *)&long long v5 = 138543874;
    long long v20 = v5;
    id v21 = v4;
    do
    {
      for (uint64_t i = 0; i != v24; ++i)
      {
        if (*(void *)v26 != v23) {
          objc_enumerationMutation(v4);
        }
        uint64_t v7 = *(void *)(*((void *)&v25 + 1) + 8 * i);
        id v8 = objc_msgSend(v4, "objectForKeyedSubscript:", v7, v20);
        id v9 = HMDLocalizedStringForKey(v8);

        uint64_t v10 = [(HMDHome *)self addName:v9];
        if (v10)
        {
          uint64_t v11 = (void *)MEMORY[0x1D9452090]();
          id v12 = self;
          id v13 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            __int16 v14 = v22 = v11;
            [(HMDHome *)v12 name];
            int v15 = self;
            v17 = uint64_t v16 = v3;
            *(_DWORD *)buf = v20;
            id v30 = v14;
            __int16 v31 = 2112;
            uint64_t v32 = v9;
            __int16 v33 = 2112;
            char v34 = v17;
            _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_DEFAULT, "%{public}@Could not add builtin actionSet '%@' to home '%@' namespace", buf, 0x20u);

            uint64_t v3 = v16;
            self = v15;
            id v4 = v21;

            uint64_t v11 = v22;
          }
        }
        id v18 = [(HMDHome *)self createActionSetWithName:v9 uuid:0 type:v7];
        [v3 addObject:v18];
      }
      uint64_t v24 = [v4 countByEnumeratingWithState:&v25 objects:v35 count:16];
    }
    while (v24);
  }

  return v3;
}

- (id)createActionSetWithName:(id)a3 uuid:(id)a4 type:(id)a5
{
  id v8 = a5;
  id v9 = a4;
  id v10 = a3;
  uint64_t v11 = [HMDActionSet alloc];
  id v12 = [(HMDHome *)self workQueue];
  id v13 = [(HMDActionSet *)v11 initWithName:v10 uuid:v9 type:v8 home:self queue:v12];

  __int16 v14 = [(HMDHome *)self msgDispatcher];
  int v15 = [(HMDHome *)self workQueue];
  [(HMDActionSet *)v13 configure:self messageDispatcher:v14 queue:v15];

  return v13;
}

- (void)updateActionSetExecutionDates:(id)a3
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v5 = [(HMDHome *)self actionSets];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v27 objects:v32 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v28;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v28 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v27 + 1) + 8 * i);
        uint64_t v11 = [v10 uuid];
        id v12 = [v4 actionSetWithUUID:v11];

        id v13 = [v12 lastExecutionDate];
        [v10 setLastExecutionDate:v13];
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v27 objects:v32 count:16];
    }
    while (v7);
  }

  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  __int16 v14 = [(HMDHome *)self triggerOwnedActionSets];
  uint64_t v15 = [v14 countByEnumeratingWithState:&v23 objects:v31 count:16];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v24;
    do
    {
      for (uint64_t j = 0; j != v16; ++j)
      {
        if (*(void *)v24 != v17) {
          objc_enumerationMutation(v14);
        }
        __int16 v19 = *(void **)(*((void *)&v23 + 1) + 8 * j);
        long long v20 = [v19 uuid];
        id v21 = [v4 triggerOwnedActionSetWithUUID:v20];

        id v22 = [v21 lastExecutionDate];
        [v19 setLastExecutionDate:v22];
      }
      uint64_t v16 = [v14 countByEnumeratingWithState:&v23 objects:v31 count:16];
    }
    while (v16);
  }
}

- (id)filterBuiltinActionSets:(id)a3
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  id v4 = +[HMDHome getBuiltinActionSets];
  long long v5 = [v4 allKeys];

  uint64_t v6 = [MEMORY[0x1E4F1CA48] array];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v7 = v3;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v17;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v17 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        id v13 = objc_msgSend(v12, "type", (void)v16);
        int v14 = [v5 containsObject:v13];

        if (v14) {
          [v6 addObject:v12];
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v9);
  }

  return v6;
}

- (void)computeBridgedAccessoriesForAllBridges
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v3 = [MEMORY[0x1E4F1CA60] dictionary];
  id v4 = [(HMDHome *)self accessories];
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v33 objects:v38 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v34;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v34 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(id *)(*((void *)&v33 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v10 = v9;
        }
        else {
          uint64_t v10 = 0;
        }
        id v11 = v10;

        id v12 = [v11 bridge];
        id v13 = v12;
        if (v12)
        {
          int v14 = [v12 uuid];
          uint64_t v15 = objc_msgSend(v3, "hmf_mutableSetForKey:", v14);

          if (!v15)
          {
            uint64_t v15 = [MEMORY[0x1E4F1CA80] set];
            long long v16 = [v13 uuid];
            [v3 setObject:v15 forKey:v16];
          }
          long long v17 = [v9 uuid];
          [v15 addObject:v17];
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v33 objects:v38 count:16];
    }
    while (v6);
  }
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v18 = v3;
  uint64_t v19 = [v18 countByEnumeratingWithState:&v29 objects:v37 count:16];
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = *(void *)v30;
    do
    {
      for (uint64_t j = 0; j != v20; ++j)
      {
        if (*(void *)v30 != v21) {
          objc_enumerationMutation(v18);
        }
        uint64_t v23 = *(void *)(*((void *)&v29 + 1) + 8 * j);
        long long v24 = objc_msgSend(v18, "hmf_mutableSetForKey:", v23, (void)v29);
        long long v25 = objc_msgSend(v4, "hmf_firstObjectWithUUID:", v23);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          long long v26 = v25;
        }
        else {
          long long v26 = 0;
        }
        id v27 = v26;

        if (v27) {
          BOOL v28 = v24 == 0;
        }
        else {
          BOOL v28 = 1;
        }
        if (!v28) {
          [v27 setIdentifiersForBridgedAccessories:v24];
        }
      }
      uint64_t v20 = [v18 countByEnumeratingWithState:&v29 objects:v37 count:16];
    }
    while (v20);
  }
}

uint64_t __38__HMDHome___handleProcessStateChange___block_invoke(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = +[HMDAccessorySetupManager accessorySetupHostBundleIdentifier];
  LODWORD(v2) = [v2 isEqualToString:v3];

  if (v2) {
    [*(id *)(a1 + 40) _cleanAddAccessoryOperations];
  }
  uint64_t v5 = *(void *)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  return [v4 _disableNotificationsForClient:v5];
}

- (void)_startHomeNotificationDeregistrationTimer
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = [(HMDHome *)self disableNotificationTimer];

  if (v3)
  {
    id v4 = (void *)MEMORY[0x1D9452090]();
    uint64_t v5 = self;
    uint64_t v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = HMFGetLogIdentifier();
      uint64_t v8 = [(HMDHome *)v5 disableNotificationTimer];
      int v21 = 138543618;
      id v22 = v7;
      __int16 v23 = 2112;
      long long v24 = v8;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Kicking notification disable timer: %@", (uint8_t *)&v21, 0x16u);
    }
    id v9 = [(HMDHome *)v5 disableNotificationTimer];
    [v9 kick];
  }
  else
  {
    id v10 = objc_alloc(MEMORY[0x1E4F65580]);
    id v11 = (void *)[v10 initWithTimeInterval:1 options:*(double *)&disableNotificationsDeferPeriod];
    [(HMDHome *)self setDisableNotificationTimer:v11];

    id v12 = [(HMDHome *)self workQueue];
    id v13 = [(HMDHome *)self disableNotificationTimer];
    [v13 setDelegateQueue:v12];

    int v14 = [(HMDHome *)self disableNotificationTimer];
    [v14 setDelegate:self];

    uint64_t v15 = [(HMDHome *)self disableNotificationTimer];
    [v15 resume];

    long long v16 = (void *)MEMORY[0x1D9452090]();
    long long v17 = self;
    id v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = HMFGetLogIdentifier();
      uint64_t v20 = [(HMDHome *)v17 disableNotificationTimer];
      int v21 = 138543618;
      id v22 = v19;
      __int16 v23 = 2112;
      long long v24 = v20;
      _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@Started notification disable timer: %@", (uint8_t *)&v21, 0x16u);
    }
  }
}

- (void)_disableDirectCharacteristicNotificationsForClient:(id)a3
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  v24[0] = 0;
  v24[1] = v24;
  void v24[2] = 0x2020000000;
  char v25 = 0;
  uint64_t v5 = dispatch_group_create();
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v6 = [(HMDHome *)self accessories];
  uint64_t v7 = (void *)[v6 copy];

  uint64_t v8 = [v7 countByEnumeratingWithState:&v20 objects:v26 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v21 != v9) {
          objc_enumerationMutation(v7);
        }
        id v11 = *(id *)(*((void *)&v20 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v12 = v11;
        }
        else {
          id v12 = 0;
        }
        id v13 = v12;

        if (v13)
        {
          dispatch_group_enter(v5);
          aBlock[0] = MEMORY[0x1E4F143A8];
          aBlock[1] = 3221225472;
          aBlock[2] = __62__HMDHome__disableDirectCharacteristicNotificationsForClient___block_invoke;
          aBlock[3] = &unk_1E6A16438;
          uint64_t v19 = v24;
          id v18 = v5;
          int v14 = _Block_copy(aBlock);
          [v13 disableNotificationsForBundleID:v4 completionHandler:v14];
        }
      }
      uint64_t v8 = [v7 countByEnumeratingWithState:&v20 objects:v26 count:16];
    }
    while (v8);
  }

  uint64_t v15 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __62__HMDHome__disableDirectCharacteristicNotificationsForClient___block_invoke_2;
  block[3] = &unk_1E6A18690;
  void block[4] = self;
  void block[5] = v24;
  dispatch_group_notify(v5, v15, block);

  _Block_object_dispose(v24, 8);
}

void __62__HMDHome__disableDirectCharacteristicNotificationsForClient___block_invoke(uint64_t a1, int a2)
{
  if (a2) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t __62__HMDHome__disableDirectCharacteristicNotificationsForClient___block_invoke_2(uint64_t result)
{
  if (*(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24)) {
    return [*(id *)(result + 32) saveToCurrentAccountWithReason:@"HMDApplicationTerminatedSaveReason"];
  }
  return result;
}

- (void)_disableNotificationsForClient:(id)a3
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  uint64_t v6 = (void *)MEMORY[0x1D9452090]();
  uint64_t v7 = self;
  uint64_t v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = HMFGetLogIdentifier();
    int v14 = 138543618;
    uint64_t v15 = v9;
    __int16 v16 = 2112;
    id v17 = v4;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Disabling notification for client %@", (uint8_t *)&v14, 0x16u);
  }
  id v10 = [(HMDHome *)v7 notificationRegistrations];
  if ([v10 containsObject:v4])
  {
    id v11 = [(HMDHome *)v7 notificationDeregistrations];
    char v12 = [v11 containsObject:v4];

    if ((v12 & 1) == 0)
    {
      [(HMDHome *)v7 addNotificationDeregistrationForClientIdentifier:v4];
      [(HMDHome *)v7 _startHomeNotificationDeregistrationTimer];
    }
  }
  else
  {
  }
  id v13 = [@"com.apple.HomeKit.client." stringByAppendingString:v4];
  [(HMDHome *)v7 _disableDirectCharacteristicNotificationsForClient:v13];
}

- (void)_cleanAddAccessoryOperations
{
  os_unfair_recursive_lock_lock_with_options();
  [(NSMapTable *)self->_addPendingAccessories removeAllObjects];
  [(NSMutableDictionary *)self->_addPendingAccessorySetupCodeHandlers removeAllObjects];
  [(NSMutableDictionary *)self->_addPendingAccessorySetupCodes removeAllObjects];
  [(NSMutableDictionary *)self->_addPendingAccessoryOnboardingSetupPayloadStrings removeAllObjects];
  os_unfair_recursive_lock_unlock();
}

- (void)handleAccessoryReachabilityChangeNotification:(id)a3
{
  id v4 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __57__HMDHome_handleAccessoryReachabilityChangeNotification___block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v4, block);
}

uint64_t __57__HMDHome_handleAccessoryReachabilityChangeNotification___block_invoke(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _hasPairedReachableBTLEAccessories];
  id v3 = *(void **)(a1 + 32);
  return [v3 setAnyBTLEAccessoryReachable:v2];
}

- (void)handleClientProcessDisconnectedNotification:(id)a3
{
  id v4 = [a3 object];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = v5;

  if (v6)
  {
    uint64_t v7 = [v6 bundleIdentifier];
    if (v7)
    {
      uint64_t v8 = [(HMDHome *)self workQueue];
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 3221225472;
      void v9[2] = __55__HMDHome_handleClientProcessDisconnectedNotification___block_invoke;
      void v9[3] = &unk_1E6A197C8;
      void v9[4] = self;
      id v10 = v7;
      dispatch_async(v8, v9);
    }
  }
}

uint64_t __55__HMDHome_handleClientProcessDisconnectedNotification___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _disableNotificationsForClient:*(void *)(a1 + 40)];
}

- (void)_registerForMatterFabricNotifications:(BOOL)a3 registrationIdentifier:(id)a4 clientIdentifier:(id)a5
{
  BOOL v6 = a3;
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v8 = a4;
  id v9 = a5;
  id v10 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v10);

  if ([(HMDHome *)self isFeatureMatteriPhoneOnlyPairingControlEnabled])
  {
    if (v9) {
      id v11 = v9;
    }
    else {
      id v11 = v8;
    }
    id v12 = v11;
    if (([v12 isEqualToString:*MEMORY[0x1E4F2D1C8]] & 1) != 0
      || ([v12 isEqualToString:*MEMORY[0x1E4F2DA38]] & 1) != 0
      || ([v12 isEqualToString:*MEMORY[0x1E4F2E168]] & 1) != 0
      || ([v12 isEqualToString:*MEMORY[0x1E4F2D7D0]] & 1) != 0
      || [v12 isEqualToString:*MEMORY[0x1E4F2D748]])
    {
      id v13 = (void *)MEMORY[0x1D9452090]();
      int v14 = self;
      uint64_t v15 = HMFGetOSLogHandle();
      BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
      if (v6)
      {
        if (v16)
        {
          id v17 = HMFGetLogIdentifier();
          int v42 = 138543874;
          id v43 = v17;
          __int16 v44 = 2112;
          id v45 = v9;
          __int16 v46 = 2112;
          id v47 = v8;
          _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_DEBUG, "%{public}@registerForMatterFabricNotifications:YES - skip registering client %@, registrationIdentifier = %@", (uint8_t *)&v42, 0x20u);
        }
        goto LABEL_35;
      }
      if (v16)
      {
        uint64_t v18 = HMFGetLogIdentifier();
        int v42 = 138543874;
        id v43 = v18;
        __int16 v44 = 2112;
        id v45 = v9;
        __int16 v46 = 2112;
        id v47 = v8;
        _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_DEBUG, "%{public}@registerForMatterFabricNotifications:NO - allow deregistration for client %@, registrationIdentifier = %@", (uint8_t *)&v42, 0x20u);
      }
    }
    else if (v6)
    {
      __int16 v40 = [(HMDHome *)self matterFabricEnabledClients];
      char v41 = [v40 containsObject:v8];

      if (v41)
      {
LABEL_19:
        long long v20 = [(HMDHome *)self homeManager];
        long long v21 = [(HMDHome *)self matterFabricEnabledClients];
        uint64_t v22 = [v21 count];

        if (v22)
        {
          BOOL v23 = [(HMDHome *)self currentMatterClientRegistration];
          long long v24 = (void *)MEMORY[0x1D9452090]();
          char v25 = self;
          long long v26 = HMFGetOSLogHandle();
          uint64_t v27 = v26;
          if (v23)
          {
            if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
            {
LABEL_24:

LABEL_34:

LABEL_35:
              goto LABEL_36;
            }
            BOOL v28 = HMFGetLogIdentifier();
            long long v29 = [(HMDHome *)v25 matterFabricEnabledClients];
            int v42 = 138543618;
            id v43 = v28;
            __int16 v44 = 2112;
            id v45 = v29;
            _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_DEBUG, "%{public}@Not updating matter fabric registration as we are registered and have the clients %@", (uint8_t *)&v42, 0x16u);

LABEL_23:
            goto LABEL_24;
          }
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v38 = HMFGetLogIdentifier();
            int v42 = 138543362;
            id v43 = v38;
            _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@Updating matter fabric registration as we are not registered but have clients", (uint8_t *)&v42, 0xCu);
          }
          uint64_t v39 = [v20 chipDataSource];
          [v39 updateNotificationsEnabled:1 forHome:v25 keepAliveOnly:1];

          long long v36 = v25;
          uint64_t v37 = 1;
        }
        else
        {
          long long v30 = [(HMDHome *)self matterFabricEnabledClients];
          uint64_t v31 = [v30 count];

          if (v31) {
            goto LABEL_34;
          }
          BOOL v32 = [(HMDHome *)self currentMatterClientRegistration];
          long long v24 = (void *)MEMORY[0x1D9452090]();
          char v25 = self;
          long long v33 = HMFGetOSLogHandle();
          uint64_t v27 = v33;
          if (!v32)
          {
            if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_24;
            }
            BOOL v28 = HMFGetLogIdentifier();
            int v42 = 138543362;
            id v43 = v28;
            _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_DEBUG, "%{public}@Not updating matter fabric registration as we are not registered and have no clients", (uint8_t *)&v42, 0xCu);
            goto LABEL_23;
          }
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          {
            long long v34 = HMFGetLogIdentifier();
            int v42 = 138543362;
            id v43 = v34;
            _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@Updating matter fabric registration as we are registered but have no clients", (uint8_t *)&v42, 0xCu);
          }
          long long v35 = [v20 chipDataSource];
          [v35 updateNotificationsEnabled:0 forHome:v25 keepAliveOnly:1];

          long long v36 = v25;
          uint64_t v37 = 0;
        }
        [(HMDHome *)v36 setCurrentMatterClientRegistration:v37];
        goto LABEL_34;
      }
      uint64_t v19 = [(HMDHome *)self matterFabricEnabledClients];
      [v19 addObject:v8];
LABEL_18:

      goto LABEL_19;
    }
    uint64_t v19 = [(HMDHome *)self matterFabricEnabledClients];
    [v19 removeObject:v8];
    goto LABEL_18;
  }
LABEL_36:
}

- (void)registerForMatterFabricNotifications:(BOOL)a3 registrationIdentifier:(id)a4 clientIdentifier:(id)a5
{
  id v8 = a5;
  id v9 = a4;
  id v10 = [(HMDHome *)self workQueue];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __88__HMDHome_registerForMatterFabricNotifications_registrationIdentifier_clientIdentifier___block_invoke;
  v11[3] = &unk_1E6A15B38;
  BOOL v12 = a3;
  void v11[4] = self;
  void v11[5] = v9;
  v11[6] = v8;
  dispatch_async(v10, v11);
}

uint64_t __88__HMDHome_registerForMatterFabricNotifications_registrationIdentifier_clientIdentifier___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _registerForMatterFabricNotifications:*(unsigned __int8 *)(a1 + 56) registrationIdentifier:*(void *)(a1 + 40) clientIdentifier:*(void *)(a1 + 48)];
}

- (void)registerForMatterFabricNotifications:(BOOL)a3 registrationIdentifier:(id)a4
{
  id v6 = a4;
  uint64_t v7 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __71__HMDHome_registerForMatterFabricNotifications_registrationIdentifier___block_invoke;
  block[3] = &unk_1E6A18708;
  BOOL v9 = a3;
  void block[4] = self;
  void block[5] = v6;
  dispatch_async(v7, block);
}

uint64_t __71__HMDHome_registerForMatterFabricNotifications_registrationIdentifier___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _registerForMatterFabricNotifications:*(unsigned __int8 *)(a1 + 48) registrationIdentifier:*(void *)(a1 + 40) clientIdentifier:0];
}

- (void)_registerForAccessoryReachabilityNotifications:(BOOL)a3 registrationIdentifier:(id)a4 clientIdentifier:(id)a5
{
  BOOL v6 = a3;
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v8 = a4;
  id v9 = a5;
  id v10 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v10);

  id v11 = [(HMDHome *)self accessoryRemoteReachabilityEnabledClients];
  BOOL v12 = v11;
  if (v6)
  {
    char v13 = [v11 containsObject:v8];

    if (v13) {
      goto LABEL_6;
    }
    BOOL v12 = [(HMDHome *)self accessoryRemoteReachabilityEnabledClients];
    [v12 addObject:v8];
  }
  else
  {
    [v11 removeObject:v8];
  }

LABEL_6:
  int v14 = [(HMDHome *)self accessoryRemoteReachabilityEnabledClients];
  uint64_t v15 = [v14 count];

  if (v15)
  {
    BOOL v16 = [(HMDHome *)self currentRemoteReachabilityRegistration];
    id v17 = (void *)MEMORY[0x1D9452090]();
    uint64_t v18 = self;
    uint64_t v19 = HMFGetOSLogHandle();
    long long v20 = v19;
    if (v16)
    {
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        long long v21 = HMFGetLogIdentifier();
        uint64_t v22 = [(HMDHome *)v18 accessoryRemoteReachabilityEnabledClients];
        int v35 = 138543618;
        long long v36 = v21;
        __int16 v37 = 2112;
        uint64_t v38 = v22;
        _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_DEBUG, "%{public}@Not updating remote accessory reachability registration as we are registered and have the clients %@", (uint8_t *)&v35, 0x16u);
      }
    }
    else
    {
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v23 = HMFGetLogIdentifier();
        int v35 = 138543362;
        long long v36 = v23;
        _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_DEFAULT, "%{public}@Updating remote accessory reachability registration as we are not registered but have clients", (uint8_t *)&v35, 0xCu);
      }
      if (v9) {
        id v24 = v9;
      }
      else {
        id v24 = v8;
      }
      [(HMDHome *)v18 __registerForRemoteAccessoryReachabilityNotifications:1 clientIdentifier:v24];
    }
  }
  char v25 = [(HMDHome *)self accessoryRemoteReachabilityEnabledClients];
  uint64_t v26 = [v25 count];

  if (!v26)
  {
    BOOL v27 = [(HMDHome *)self currentRemoteReachabilityRegistration];
    BOOL v28 = (void *)MEMORY[0x1D9452090]();
    long long v29 = self;
    long long v30 = HMFGetOSLogHandle();
    uint64_t v31 = v30;
    if (v27)
    {
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v32 = HMFGetLogIdentifier();
        int v35 = 138543362;
        long long v36 = v32;
        _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_DEFAULT, "%{public}@Updating remote accessory reachability registration as we are registered but have no clients", (uint8_t *)&v35, 0xCu);
      }
      if (v9) {
        id v33 = v9;
      }
      else {
        id v33 = v8;
      }
      [(HMDHome *)v29 __registerForRemoteAccessoryReachabilityNotifications:0 clientIdentifier:v33];
    }
    else
    {
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        long long v34 = HMFGetLogIdentifier();
        int v35 = 138543362;
        long long v36 = v34;
        _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_DEBUG, "%{public}@Not updating remote accessory reachability registration as we are not registered and have no clients", (uint8_t *)&v35, 0xCu);
      }
    }
  }
}

- (void)registerForAccessoryReachabilityNotifications:(BOOL)a3 registrationIdentifier:(id)a4
{
  id v6 = a4;
  uint64_t v7 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __80__HMDHome_registerForAccessoryReachabilityNotifications_registrationIdentifier___block_invoke;
  block[3] = &unk_1E6A18708;
  BOOL v9 = a3;
  void block[4] = self;
  void block[5] = v6;
  dispatch_async(v7, block);
}

uint64_t __80__HMDHome_registerForAccessoryReachabilityNotifications_registrationIdentifier___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _registerForAccessoryReachabilityNotifications:*(unsigned __int8 *)(a1 + 48) registrationIdentifier:*(void *)(a1 + 40) clientIdentifier:0];
}

- (void)handleLastProcessDidBecomeInactiveNotification:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __58__HMDHome_handleLastProcessDidBecomeInactiveNotification___block_invoke;
  v7[3] = &unk_1E6A197C8;
  id v8 = v4;
  BOOL v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __58__HMDHome_handleLastProcessDidBecomeInactiveNotification___block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  id v3 = objc_msgSend(v2, "hmf_stringForKey:", @"HMDXPCConnectionClientIdentifierKey");

  [*(id *)(a1 + 40) _registerForAccessoryReachabilityNotifications:0 registrationIdentifier:@"HMDAccessoryActiveClientRemoteRegistrationIdentifierKey" clientIdentifier:v3];
  [*(id *)(a1 + 40) _registerForMatterFabricNotifications:0 registrationIdentifier:@"HMDAccessoryActiveClientRemoteRegistrationIdentifierKey" clientIdentifier:v3];
  id v4 = [*(id *)(a1 + 40) WiFiAssertion];

  if (v4)
  {
    uint64_t v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = *(id *)(a1 + 40);
    uint64_t v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = HMFGetLogIdentifier();
      int v12 = 138543362;
      char v13 = v8;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Releasing WiFi assertion", (uint8_t *)&v12, 0xCu);
    }
    BOOL v9 = [*(id *)(a1 + 40) wifiManager];
    id v10 = [*(id *)(a1 + 40) WiFiAssertion];
    [v9 endActiveAssertion:v10];

    id v11 = [*(id *)(a1 + 40) wifiManager];
    [v11 releaseWoWAssertion];

    [*(id *)(a1 + 40) setWiFiAssertion:0];
  }
}

- (void)handleFirstProcessDidBecomeActiveNotification:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __57__HMDHome_handleFirstProcessDidBecomeActiveNotification___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __57__HMDHome_handleFirstProcessDidBecomeActiveNotification___block_invoke(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (isWatch())
  {
    if ([*(id *)(a1 + 32) remoteAccessIsEnabled])
    {
      uint64_t v2 = [*(id *)(a1 + 32) WiFiAssertion];

      if (!v2)
      {
        id v3 = (void *)MEMORY[0x1D9452090]();
        id v4 = *(id *)(a1 + 32);
        uint64_t v5 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          id v6 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          BOOL v16 = v6;
          _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Taking WiFi assertion", buf, 0xCu);
        }
        uint64_t v7 = [*(id *)(a1 + 32) wifiManager];
        id v8 = NSString;
        BOOL v9 = [*(id *)(a1 + 32) shortDescription];
        id v10 = [v8 stringWithFormat:@"Remote Access for %@", v9];
        id v11 = [v7 beginActiveAssertionWithOptions:0 reason:v10];
        [*(id *)(a1 + 32) setWiFiAssertion:v11];

        int v12 = [*(id *)(a1 + 32) wifiManager];
        [v12 takeWoWAssertion];
      }
    }
  }
  char v13 = [*(id *)(a1 + 40) userInfo];
  uint64_t v14 = objc_msgSend(v13, "hmf_stringForKey:", @"HMDXPCConnectionClientIdentifierKey");

  [*(id *)(a1 + 32) _registerForAccessoryReachabilityNotifications:1 registrationIdentifier:@"HMDAccessoryActiveClientRemoteRegistrationIdentifierKey" clientIdentifier:v14];
  [*(id *)(a1 + 32) _registerForMatterFabricNotifications:1 registrationIdentifier:@"HMDAccessoryActiveClientRemoteRegistrationIdentifierKey" clientIdentifier:v14];
}

- (void)setPrimaryNetworkRouterManagingDeviceUUID:(id)a3
{
  id v4 = (NSUUID *)a3;
  os_unfair_recursive_lock_lock_with_options();
  primaryNetworkRouterManagingDeviceUUID = self->_primaryNetworkRouterManagingDeviceUUID;
  self->_primaryNetworkRouterManagingDeviceUUID = v4;

  os_unfair_recursive_lock_unlock();
}

- (NSUUID)primaryNetworkRouterManagingDeviceUUID
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = self->_primaryNetworkRouterManagingDeviceUUID;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setActiveNetworkRouterInitialSetupNeeded:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_activeNetworkRouterInitialSetupNeeded = a3;
  os_unfair_recursive_lock_unlock();
}

- (BOOL)isActiveNetworkRouterInitialSetupNeeded
{
  LOBYTE(self) = self->_activeNetworkRouterInitialSetupNeeded;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)setActiveNetworkRouterUUID:(id)a3
{
  id v4 = (NSUUID *)a3;
  os_unfair_recursive_lock_lock_with_options();
  activeNetworkRouterUUID = self->_activeNetworkRouterUUID;
  self->_activeNetworkRouterUUID = v4;

  os_unfair_recursive_lock_unlock();
}

- (NSUUID)activeNetworkRouterUUID
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = self->_activeNetworkRouterUUID;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setRouterClientManager:(id)a3
{
  id v4 = (HMDNetworkRouterClientManager *)a3;
  os_unfair_recursive_lock_lock_with_options();
  routerClientManager = self->_routerClientManager;
  self->_routerClientManager = v4;

  os_unfair_recursive_lock_unlock();
}

- (HMDNetworkRouterClientManager)routerClientManager
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = self->_routerClientManager;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setMinHomeKitVersionForAccessoryNetworkProtectionChange:(id)a3
{
  id v4 = (HMDHomeKitVersion *)a3;
  os_unfair_recursive_lock_lock_with_options();
  minHomeKitVersionForAccessoryNetworkProtectionChange = self->_minHomeKitVersionForAccessoryNetworkProtectionChange;
  self->_minHomeKitVersionForAccessoryNetworkProtectionChange = v4;

  os_unfair_recursive_lock_unlock();
}

- (HMDHomeKitVersion)minHomeKitVersionForAccessoryNetworkProtectionChange
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = self->_minHomeKitVersionForAccessoryNetworkProtectionChange;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setMinimumNetworkRouterSupportHomeKitVersion:(id)a3
{
  id v4 = (HMDHomeKitVersion *)a3;
  os_unfair_recursive_lock_lock_with_options();
  minimumNetworkRouterSupportHomeKitVersiouint64_t n = self->_minimumNetworkRouterSupportHomeKitVersion;
  self->_minimumNetworkRouterSupportHomeKitVersiouint64_t n = v4;

  os_unfair_recursive_lock_unlock();
}

- (HMDHomeKitVersion)minimumNetworkRouterSupportHomeKitVersion
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = self->_minimumNetworkRouterSupportHomeKitVersion;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setNetworkRouterSupport:(unint64_t)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_unint64_t networkRouterSupport = a3;
  os_unfair_recursive_lock_unlock();
}

- (void)setNetworkRouterSupportDisableReason:(unint64_t)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_networkRouterSupportDisableReasouint64_t n = a3;
  os_unfair_recursive_lock_unlock();
}

- (void)setProtectionMode:(int64_t)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_int64_t protectionMode = a3;
  os_unfair_recursive_lock_unlock();
}

- (id)retrieveAndResetNewlyConfiguredAccessoriesForAddSessionIdentifier:(id)a3
{
  id v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v5 = [(NSMutableDictionary *)self->_newlyConfiguredAccessories objectForKeyedSubscript:v4];
  id v6 = (void *)[v5 copy];

  if (v6)
  {
    [(NSMutableDictionary *)self->_newlyConfiguredAccessories removeObjectForKey:v4];
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v7 = (void *)MEMORY[0x1E4F1CBF0];
  }
  id v8 = v7;

  os_unfair_recursive_lock_unlock();
  return v8;
}

- (void)removeFromCurrentTriggers:(id)a3
{
  id v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if ([(NSMutableArray *)self->_currentTriggers containsObject:v4]) {
    [(NSMutableArray *)self->_currentTriggers removeObject:v4];
  }
  os_unfair_recursive_lock_unlock();
}

- (void)addToCurrentTriggers:(id)a3
{
  id v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if (([(NSMutableArray *)self->_currentTriggers containsObject:v4] & 1) == 0) {
    [(NSMutableArray *)self->_currentTriggers addObject:v4];
  }
  os_unfair_recursive_lock_unlock();
}

- (void)addNewlyConfiguredAccessories:(id)a3 addSessionIdentifier:(id)a4
{
  id v8 = a3;
  id v6 = a4;
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v7 = [(NSMutableDictionary *)self->_newlyConfiguredAccessories objectForKeyedSubscript:v6];
  if (!v7)
  {
    uint64_t v7 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:1];
    [(NSMutableDictionary *)self->_newlyConfiguredAccessories setObject:v7 forKeyedSubscript:v6];
  }
  [v7 addObjectsFromArray:v8];

  os_unfair_recursive_lock_unlock();
}

- (id)allNewlyConfiguredAccessories
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  os_unfair_recursive_lock_lock_with_options();
  id v3 = [MEMORY[0x1E4F1CA48] array];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v4 = [(NSMutableDictionary *)self->_newlyConfiguredAccessories allValues];
  uint64_t v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v4);
        }
        [v3 addObjectsFromArray:*(void *)(*((void *)&v10 + 1) + 8 * i)];
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }

  id v8 = (void *)[v3 copy];
  os_unfair_recursive_lock_unlock();
  return v8;
}

- (void)setAnyBTLEAccessoryReachable:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_anyBTLEAccessoryReachable = a3;
  os_unfair_recursive_lock_unlock();
}

- (BOOL)isAnyBTLEAccessoryReachable
{
  LOBYTE(self) = self->_anyBTLEAccessoryReachable;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)setName:(id)a3
{
  id v6 = a3;
  os_unfair_recursive_lock_lock_with_options();
  objc_msgSend(v6, "hm_truncatedNameString");
  id v4 = (NSString *)objc_claimAutoreleasedReturnValue();
  name = self->_name;
  self->_name = v4;

  os_unfair_recursive_lock_unlock();
}

- (id)dumpState
{
  uint64_t v190 = *MEMORY[0x1E4F143B8];
  id v150 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:12];
  uint64_t v144 = NSString;
  id v3 = [(HMDHome *)self name];
  uint64_t v151 = [(HMDHome *)self uuid];
  id v4 = [v151 UUIDString];
  __int16 v147 = [(HMDHome *)self spiClientIdentifier];
  uint64_t v5 = [v147 UUIDString];
  id v6 = [(HMDHome *)self zoneID];
  uint64_t v7 = [v6 UUIDString];
  [(HMDHome *)self isMultiUserEnabled];
  id v8 = HMFBooleanToString();
  [(HMDHome *)self hasAnyUserAcknowledgedCameraRecordingOnboarding];
  BOOL v9 = HMFBooleanToString();
  long long v10 = [(HMDHome *)self urlString];
  uint64_t v11 = [v144 stringWithFormat:@"name: %@, uuid: %@, spiClientIdentifier: %@, zoneID: %@, multiUserEnabled: %@, acknowledgedCameraOnboarding: %@, assistantIdentifier: %@", v3, v4, v5, v7, v8, v9, v10];

  long long v139 = (void *)v11;
  [v150 setObject:v11 forKeyedSubscript:*MEMORY[0x1E4F64EA0]];
  long long v12 = [(HMDHome *)self appData];
  long long v13 = [v12 dumpState];
  [v150 setObject:v13 forKeyedSubscript:*MEMORY[0x1E4F64D80]];

  __int16 v145 = NSString;
  id v148 = [(HMDHome *)self homeLocationHandler];
  uint64_t v14 = [v148 location];
  if (v14)
  {
    double v142 = [(HMDHome *)self homeLocationHandler];
    uint64_t v15 = [v142 location];
  }
  else
  {
    uint64_t v15 = @"Unknown";
  }
  [(HMDHome *)self homeLocationHandler];
  v17 = BOOL v16 = self;
  [v17 regionStateAtHome];
  uint64_t v18 = HMDRegionStateString();
  uint64_t v19 = [(HMDHome *)v16 homeLocationHandler];
  [v19 regionStateNearbyHome];
  long long v20 = HMDRegionStateString();
  id v152 = v16;
  unint64_t v21 = [(HMDHome *)v16 atHomeLevel];
  if (v21 > 3) {
    uint64_t v22 = @"HMDAtHomeLevelNotAtHome";
  }
  else {
    uint64_t v22 = off_1E6A07688[v21];
  }
  [(HMDHome *)v16 homeLocation];
  BOOL v23 = HMStringFromHomeLocation();
  id v24 = [(HMDHome *)v152 homeLocationHandler];
  char v25 = HMDHomeLocationSourceToString([v24 locationSource]);
  uint64_t v26 = [v145 stringWithFormat:@"Location: %@, At Home Region State: %@, Nearby Home Region State: %@, At Home Level: %@, State: %@, Source: %@", v15, v18, v20, v22, v23, v25];

  if (v14)
  {
  }
  BOOL v27 = v150;
  long long v138 = (void *)v26;
  [v150 setObject:v26 forKeyedSubscript:*MEMORY[0x1E4F64E28]];
  BOOL v28 = NSString;
  long long v29 = v152;
  [(HMDHome *)v152 minimumMediaUserPrivilege];
  long long v30 = HMUserPrivilegeToString();
  [(HMDHome *)v152 isMediaPeerToPeerEnabled];
  uint64_t v31 = HMFBooleanToString();
  BOOL v32 = [(HMDHome *)v152 mediaPassword];
  id v33 = @"<set>";
  if (!v32) {
    id v33 = @"<null>";
  }
  uint64_t v34 = [v28 stringWithFormat:@"Minimum Media User Privilege: %@, Media Peer to Peer Enabled: %@, has Media Password: %@", v30, v31, v33];

  long long v137 = (void *)v34;
  [v150 setObject:v34 forKeyedSubscript:@"User Privilege"];
  int v35 = [(HMDHome *)v152 rooms];
  long long v36 = (void *)[v35 copy];

  __int16 v37 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v36, "count") + 1);
  uint64_t v38 = [(HMDHome *)v152 roomForEntireHome];

  if (v38)
  {
    uint64_t v39 = [(HMDHome *)v152 roomForEntireHome];
    __int16 v40 = [v39 dumpState];
    [v37 addObject:v40];
  }
  long long v179 = 0u;
  long long v180 = 0u;
  long long v177 = 0u;
  long long v178 = 0u;
  id v41 = v36;
  uint64_t v42 = [v41 countByEnumeratingWithState:&v177 objects:v189 count:16];
  if (v42)
  {
    uint64_t v43 = v42;
    uint64_t v44 = *(void *)v178;
    do
    {
      for (uint64_t i = 0; i != v43; ++i)
      {
        if (*(void *)v178 != v44) {
          objc_enumerationMutation(v41);
        }
        __int16 v46 = [*(id *)(*((void *)&v177 + 1) + 8 * i) dumpState];
        [v37 addObject:v46];
      }
      uint64_t v43 = [v41 countByEnumeratingWithState:&v177 objects:v189 count:16];
    }
    while (v43);
  }

  if ([v37 count]) {
    [v150 setObject:v37 forKeyedSubscript:*MEMORY[0x1E4F64E70]];
  }
  id v47 = [(HMDHome *)v152 zones];
  uint64_t v48 = (void *)[v47 copy];

  id v149 = v48;
  if ([v48 count])
  {
    long long v49 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v48, "count"));
    long long v173 = 0u;
    long long v174 = 0u;
    long long v175 = 0u;
    long long v176 = 0u;
    id v50 = v48;
    uint64_t v51 = [v50 countByEnumeratingWithState:&v173 objects:v188 count:16];
    if (v51)
    {
      uint64_t v52 = v51;
      uint64_t v53 = *(void *)v174;
      do
      {
        for (uint64_t j = 0; j != v52; ++j)
        {
          if (*(void *)v174 != v53) {
            objc_enumerationMutation(v50);
          }
          id v55 = [*(id *)(*((void *)&v173 + 1) + 8 * j) dumpState];
          [v49 addObject:v55];
        }
        uint64_t v52 = [v50 countByEnumeratingWithState:&v173 objects:v188 count:16];
      }
      while (v52);
    }

    [v150 setObject:v49 forKeyedSubscript:*MEMORY[0x1E4F64EC8]];
    long long v29 = v152;
  }
  __int16 v56 = [(HMDHome *)v29 accessories];
  int v57 = (void *)[v56 copy];

  id v146 = v57;
  if ([v57 count])
  {
    __int16 v58 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v57, "count"));
    long long v169 = 0u;
    long long v170 = 0u;
    long long v171 = 0u;
    long long v172 = 0u;
    id v59 = v57;
    uint64_t v60 = [v59 countByEnumeratingWithState:&v169 objects:v187 count:16];
    if (v60)
    {
      uint64_t v61 = v60;
      uint64_t v62 = *(void *)v170;
      do
      {
        for (uint64_t k = 0; k != v61; ++k)
        {
          if (*(void *)v170 != v62) {
            objc_enumerationMutation(v59);
          }
          id v64 = *(void **)(*((void *)&v169 + 1) + 8 * k);
          uint64_t v65 = (void *)MEMORY[0x1D9452090]();
          long long v66 = [v64 dumpState];
          [v58 addObject:v66];
        }
        uint64_t v61 = [v59 countByEnumeratingWithState:&v169 objects:v187 count:16];
      }
      while (v61);
    }

    BOOL v27 = v150;
    [v150 setObject:v58 forKeyedSubscript:*MEMORY[0x1E4F64D58]];

    long long v29 = v152;
  }
  id v67 = [(HMDHome *)v29 serviceGroups];
  long long v68 = (void *)[v67 copy];

  uint64_t v143 = v68;
  if ([v68 count])
  {
    BOOL v69 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v68, "count"));
    long long v165 = 0u;
    long long v166 = 0u;
    long long v167 = 0u;
    long long v168 = 0u;
    id v70 = v68;
    uint64_t v71 = [v70 countByEnumeratingWithState:&v165 objects:v186 count:16];
    if (v71)
    {
      uint64_t v72 = v71;
      uint64_t v73 = *(void *)v166;
      do
      {
        for (uint64_t m = 0; m != v72; ++m)
        {
          if (*(void *)v166 != v73) {
            objc_enumerationMutation(v70);
          }
          uint64_t v75 = [*(id *)(*((void *)&v165 + 1) + 8 * m) dumpState];
          [v69 addObject:v75];
        }
        uint64_t v72 = [v70 countByEnumeratingWithState:&v165 objects:v186 count:16];
      }
      while (v72);
    }

    [v27 setObject:v69 forKeyedSubscript:*MEMORY[0x1E4F64E78]];
    long long v29 = v152;
  }
  double v141 = [(HMDHome *)v29 triggers];
  if ([v141 count])
  {
    uint64_t v76 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v141, "count"));
    long long v161 = 0u;
    long long v162 = 0u;
    long long v163 = 0u;
    long long v164 = 0u;
    id v77 = v141;
    uint64_t v78 = [v77 countByEnumeratingWithState:&v161 objects:v185 count:16];
    if (v78)
    {
      uint64_t v79 = v78;
      uint64_t v80 = *(void *)v162;
      do
      {
        for (uint64_t n = 0; n != v79; ++n)
        {
          if (*(void *)v162 != v80) {
            objc_enumerationMutation(v77);
          }
          long long v82 = [*(id *)(*((void *)&v161 + 1) + 8 * n) dumpState];
          [v76 addObject:v82];
        }
        uint64_t v79 = [v77 countByEnumeratingWithState:&v161 objects:v185 count:16];
      }
      while (v79);
    }

    [v27 setObject:v76 forKeyedSubscript:*MEMORY[0x1E4F64EB8]];
    long long v29 = v152;
  }
  long long v83 = [(HMDHome *)v29 currentUser];
  uint64_t v84 = [v83 dumpState];
  [v27 setObject:v84 forKeyedSubscript:*MEMORY[0x1E4F64DC0]];

  double v85 = [(HMDHome *)v29 users];
  double v86 = (void *)[v85 copy];

  uint64_t v140 = v86;
  if ([v86 count])
  {
    __int16 v87 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v86, "count"));
    long long v157 = 0u;
    long long v158 = 0u;
    long long v159 = 0u;
    long long v160 = 0u;
    id v88 = v86;
    uint64_t v89 = [v88 countByEnumeratingWithState:&v157 objects:v184 count:16];
    if (v89)
    {
      uint64_t v90 = v89;
      uint64_t v91 = *(void *)v158;
      do
      {
        for (iuint64_t i = 0; ii != v90; ++ii)
        {
          if (*(void *)v158 != v91) {
            objc_enumerationMutation(v88);
          }
          id v93 = [*(id *)(*((void *)&v157 + 1) + 8 * ii) dumpState];
          [v87 addObject:v93];
        }
        uint64_t v90 = [v88 countByEnumeratingWithState:&v157 objects:v184 count:16];
      }
      while (v90);
    }

    [v27 setObject:v87 forKeyedSubscript:*MEMORY[0x1E4F64EC0]];
    long long v29 = v152;
  }
  long long v94 = [(HMDHome *)v29 removedUsers];
  id v95 = (void *)[v94 copy];

  if ([v95 count])
  {
    id v96 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v95, "count"));
    long long v153 = 0u;
    long long v154 = 0u;
    long long v155 = 0u;
    long long v156 = 0u;
    id v97 = v95;
    uint64_t v98 = [v97 countByEnumeratingWithState:&v153 objects:v183 count:16];
    if (v98)
    {
      uint64_t v99 = v98;
      uint64_t v100 = *(void *)v154;
      do
      {
        for (juint64_t j = 0; jj != v99; ++jj)
        {
          if (*(void *)v154 != v100) {
            objc_enumerationMutation(v97);
          }
          id v102 = [*(id *)(*((void *)&v153 + 1) + 8 * jj) user];
          uint64_t v103 = [v102 dumpState];
          [v96 addObject:v103];
        }
        uint64_t v99 = [v97 countByEnumeratingWithState:&v153 objects:v183 count:16];
      }
      while (v99);
    }

    BOOL v27 = v150;
    [v150 setObject:v96 forKeyedSubscript:*MEMORY[0x1E4F64E60]];

    long long v29 = v152;
  }
  long long v136 = v95;
  id v104 = [(HMDHome *)v29 residentDeviceManager];

  if (v104)
  {
    id v105 = [(HMDHome *)v29 residentDeviceManager];
    uint64_t v106 = [v105 dumpState];
    [v27 setObject:v106 forKeyedSubscript:*MEMORY[0x1E4F64E68]];
  }
  id v107 = (void *)MEMORY[0x1E4F1CA60];
  v181[0] = @"Registered";
  uint64_t v108 = [(HMDHome *)v29 notificationRegistrations];
  uint64_t v109 = [v108 allObjects];
  v182[0] = v109;
  v181[1] = @"Apple Media Registered";
  int v110 = [(HMDHome *)v29 notificationRegistrationsForAppleMediaAccessories];
  id v111 = [v110 allObjects];
  v182[1] = v111;
  v181[2] = @"Deregistered";
  long long v112 = [(HMDHome *)v29 notificationDeregistrations];
  id v113 = [v112 allObjects];
  v182[2] = v113;
  id v114 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v182 forKeys:v181 count:3];
  uint64_t v115 = [v107 dictionaryWithDictionary:v114];

  id v116 = [(HMDHome *)v152 notificationsUpdatedTime];

  if (v116)
  {
    uint64_t v117 = [(HMDHome *)v152 notificationsUpdatedTime];
    uint64_t v118 = [v117 shortDescription];
    [v115 setObject:v118 forKey:@"UpdateTime"];
  }
  [v150 setObject:v115 forKeyedSubscript:*MEMORY[0x1E4F64DF8]];
  dispatch_group_t v119 = [(HMDHome *)v152 pendingResponses];
  id v120 = [v119 description];
  [v150 setObject:v120 forKeyedSubscript:*MEMORY[0x1E4F64E48]];

  int v121 = [(HMDHome *)v152 sharedHomeUpdateHandler];
  uint64_t v122 = [v121 dumpState];
  [v150 setObject:v122 forKeyedSubscript:*MEMORY[0x1E4F64E90]];

  uint64_t v123 = [(HMDHome *)v152 sharedHomeSourceVersion];
  id v124 = [v123 versionString];
  [v150 setObject:v124 forKeyedSubscript:*MEMORY[0x1E4F64E88]];

  id v125 = NSString;
  double v126 = [(HMDHome *)v152 unfilteredThreadNetworkID];
  id v127 = [v125 stringWithFormat:@"threadNetworkID=%@", v126];
  [v150 setObject:v127 forKeyedSubscript:@"ThreadNetwork"];

  id v128 = [(HMDHome *)v152 personManagerSettings];
  id v129 = [v128 description];
  [v150 setObject:v129 forKeyedSubscript:@"Person Manager Settings"];

  uint64_t v130 = [(HMDHome *)v152 labelsByAccessCode];
  id v131 = [v130 description];
  [v150 setObject:v131 forKeyedSubscript:@"Simple Label Access Codes"];

  uint64_t v132 = [(HMDHome *)v152 chipStorage];
  double v133 = [v132 debugDictionaryRepresentation];
  [v150 setObject:v133 forKeyedSubscript:@"CHIP Home Storage"];

  [(HMDHome *)v152 isResidentFirstAccessoryCommunicationEnabled];
  uint64_t v134 = HMFBooleanToString();
  [v150 setObject:v134 forKeyedSubscript:@"Is Resident First Accessory Communication Enabled"];

  return v150;
}

- (NSString)debugDescription
{
  return (NSString *)[(HMDHome *)self descriptionWithPointer:1];
}

- (void)dealloc
{
  [(HMDHome *)self unconfigure];
  v3.receiver = self;
  v3.super_class = (Class)HMDHome;
  [(HMDHome *)&v3 dealloc];
}

- (void)unconfigure
{
  objc_super v3 = [(HMDHome *)self notificationCenter];
  [v3 removeObserver:self];

  id v4 = [(HMDHome *)self msgDispatcher];
  [v4 deregisterReceiver:self];

  uint64_t v5 = [(HMDHome *)self mediaGroupsAggregateConsumer];
  [v5 unconfigure];

  id v6 = [(HMDHome *)self accessCodeManager];
  [v6 unconfigure];
}

- (HMDHome)initWithName:(id)a3 uuid:(id)a4 defaultRoomUUID:(id)a5 owner:(id)a6 homeManager:(id)a7 presenceAuth:(id)a8 metricsDispatcherFactory:(id)a9 logEventSubmitter:(id)a10 dailyScheduler:(id)a11 currentUserFactory:(id)a12 residentDeviceManagerFactory:(id)a13 locationHandlerFactory:(id)a14 hapMetadata:(id)a15 siriSecureAccessoryAccessController:(id)a16 carPlayDataSource:(id)a17 deviceLockStateDataSource:(id)a18 notificationRegistry:(id)a19 administratorHandlerFactory:(id)a20 netManagerFactory:(id)a21 wifiManagerFactory:(id)a22 xpcMessageTransportFactory:(id)a23 localCapabilitiesDataSource:(id)a24 notificationCenter:(id)a25 keychainStore:(id)a26 reportingSessionManager:(id)a27
{
  uint64_t v324 = *MEMORY[0x1E4F143B8];
  id v303 = a3;
  id v309 = a4;
  id v302 = a5;
  id v282 = a6;
  id v313 = a6;
  id v312 = a7;
  id v308 = a8;
  id v31 = a9;
  id v311 = a10;
  id v291 = a11;
  aBlocuint64_t k = a12;
  long long v300 = (void (**)(id, id))a13;
  long long v298 = (void (**)(void))a14;
  id v32 = a15;
  id v33 = a16;
  id v34 = a17;
  id v35 = a18;
  id v36 = a19;
  double v301 = (void (**)(id, id))a20;
  id v305 = a21;
  id v304 = a22;
  id v292 = a23;
  id v293 = a24;
  id v306 = a25;
  id v294 = a26;
  id v37 = a27;
  id v299 = v31;
  if (!v31) {
    _HMFPreconditionFailure();
  }
  uint64_t v289 = v36;
  int v290 = v37;
  long long v288 = v34;
  dispatch_time_t v286 = v32;
  long long v287 = v33;
  v319.receiver = self;
  v319.super_class = (Class)HMDHome;
  uint64_t v38 = [(HMDHome *)&v319 init];
  if (v38)
  {
    +[HMDHome _initialize];
    uint64_t v285 = [v312 sharedUserAcceptEventBuilderForHomeUuid:v309];
    [v285 markCreatedHome];
    uint64_t v39 = +[HMDFeaturesDataSource defaultDataSource];
    featureDataSource = v38->_featureDataSource;
    v38->_featureDataSource = (HMDFeaturesDataSource *)v39;

    p_localCapabilitiesDataSource = (id *)&v38->_localCapabilitiesDataSource;
    objc_storeStrong((id *)&v38->_localCapabilitiesDataSource, a24);
    id v41 = _Block_copy(aBlock);
    id currentUserFactory = v38->_currentUserFactory;
    v38->_id currentUserFactory = v41;

    objc_storeStrong((id *)&v38->_xpcMessageTransportFactory, a23);
    uint64_t v43 = HMFGetOSLogHandle();
    logger = v38->_logger;
    v38->_logger = (OS_os_log *)v43;

    if (v309)
    {
      long long v295 = (void *)[v309 copy];
    }
    else
    {
      long long v295 = [MEMORY[0x1E4F29128] UUID];
    }
    uint64_t v45 = objc_msgSend(MEMORY[0x1E4F654F0], "hmf_cachedInstanceForNSUUID:", v295);
    uuid = v38->_uuid;
    v38->_uuid = (NSUUID *)v45;

    long long v284 = spiClientIdentifierForUUID(v38->_uuid);
    uint64_t v47 = objc_msgSend(MEMORY[0x1E4F654F0], "hmf_cachedInstanceForNSUUID:", v284);
    spiClientIdentifier = v38->_spiClientIdentifier;
    v38->_spiClientIdentifier = (NSUUID *)v47;

    long long v49 = [(NSUUID *)v38->_uuid UUIDString];
    id v50 = [@"com.apple.hmd.home" stringByAppendingString:v49];

    id v283 = v50;
    uint64_t v51 = (const char *)[v283 UTF8String];
    uint64_t v52 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    dispatch_queue_t v53 = dispatch_queue_create(v51, v52);
    workQueue = v38->_workQueue;
    v38->_workQueue = (OS_dispatch_queue *)v53;

    [MEMORY[0x1E4F65420] blessWithImplicitContext:v38->_workQueue];
    objc_storeStrong((id *)&v38->_notificationCenter, a25);
    id v55 = [[HMDPrimaryResidentChangeMonitor alloc] initWithIdentifier:v38->_uuid notificationCenter:v306];
    primaryResidentChangeMonitor = v38->_primaryResidentChangeMonitor;
    v38->_primaryResidentChangeMonitor = v55;

    [(HMDPrimaryResidentChangeMonitor *)v38->_primaryResidentChangeMonitor setDataSource:v38];
    objc_storeStrong((id *)&v38->_logEventSubmitter, a10);
    objc_storeStrong((id *)&v38->_dailyScheduler, a11);
    int v57 = _Block_copy(v305);
    id netManagerFactory = v38->_netManagerFactory;
    v38->_id netManagerFactory = v57;

    id v59 = _Block_copy(v304);
    id wifiManagerFactory = v38->_wifiManagerFactory;
    v38->_id wifiManagerFactory = v59;

    objc_storeStrong((id *)&v38->_keychainStore, a26);
    objc_storeStrong((id *)&v38->_reportingSessionManager, a27);
    uint64_t v61 = [[HMDAccessoryInfoFetchController alloc] initWithHomeUUID:v38->_uuid workQueue:v38->_workQueue];
    accessoryInfoFetchController = v38->_accessoryInfoFetchController;
    v38->_accessoryInfoFetchController = v61;

    if (v311)
    {
      uint64_t v63 = [v31 createHomeMetricsDispatcherWithIdentifier:v38->_uuid logEventSubmitter:v311];
      metricsDispatcher = v38->_metricsDispatcher;
      v38->_metricsDispatcher = (HMDHomeMetricsDispatcher *)v63;
    }
    uint64_t v65 = objc_msgSend(v303, "hm_truncatedNameString");
    uint64_t v66 = [v65 copy];
    name = v38->_name;
    v38->_name = (NSString *)v66;

    uint64_t v68 = +[HMDHome zoneIDFromHomeUUID:v38->_uuid];
    zoneID = v38->_zoneID;
    v38->_zoneID = (NSUUID *)v68;

    objc_storeWeak((id *)&v38->_homeManager, v312);
    uint64_t v70 = [v312 messageDispatcher];
    msgDispatcher = v38->_msgDispatcher;
    v38->_msgDispatcher = (HMFMessageDispatcher *)v70;

    objc_storeStrong((id *)&v38->_owner, v282);
    v38->_ownerTrustZoneCapable = [v313 isCurrentUser];
    uint64_t v72 = [v313 pairingUsername];
    ownerName = v38->_ownerName;
    v38->_ownerName = (NSString *)v72;

    char v74 = (char)v313;
    if (v313) {
      char v74 = [v313 isCurrentUser];
    }
    v38->_ownerUser = v74;
    v38->_allowsRemoteAccess = 1;
    uint64_t v75 = +[HMDHomeKitVersion currentVersion];
    currentHomeKitVersiouint64_t n = v38->_currentHomeKitVersion;
    v38->_currentHomeKitVersiouint64_t n = (HMDHomeKitVersion *)v75;

    id v77 = (void *)MEMORY[0x1D9452090]();
    uint64_t v78 = v38;
    uint64_t v79 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
    {
      uint64_t v80 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v321 = v80;
      __int16 v322 = 2112;
      id v323 = v308;
      _os_log_impl(&dword_1D49D5000, v79, OS_LOG_TYPE_INFO, "%{public}@Home Presence auth : %@", buf, 0x16u);
    }
    if (v308)
    {
      uint64_t v81 = (HMUserPresenceAuthorization *)v308;
      presenceAuthStatus = v78->_presenceAuthStatus;
      v78->_presenceAuthStatus = v81;
    }
    else
    {
      BOOL v83 = +[HMDHomeManager isThisDeviceAdminOfHome:v78];
      if (v83)
      {
        presenceAuthStatus = [MEMORY[0x1E4F2EBC0] authWithValue:1];
      }
      else
      {
        presenceAuthStatus = 0;
      }
      objc_storeStrong((id *)&v78->_presenceAuthStatus, presenceAuthStatus);
      if (!v83) {
        goto LABEL_19;
      }
    }

LABEL_19:
    presenceComputeStatus = v78->_presenceComputeStatus;
    v78->_presenceComputeStatus = 0;

    v78->_homeLocatiouint64_t n = 0;
    uint64_t v85 = [MEMORY[0x1E4F1CA80] set];
    reachabilityUpdatedAccessories = v78->_reachabilityUpdatedAccessories;
    v78->_reachabilityUpdatedAccessories = (NSMutableSet *)v85;

    __int16 v87 = [[HMDHomeObjectChangeHandler alloc] initWithHome:v78];
    homeObjectChangeHandler = v78->_homeObjectChangeHandler;
    v78->_homeObjectChangeHandler = v87;

    uint64_t v89 = [v312 accessoryBrowser];
    accessoryBrowser = v78->_accessoryBrowser;
    v78->_accessoryBrowser = (HMDAccessoryBrowserProtocol *)v89;

    uint64_t v91 = [MEMORY[0x1E4F1CA48] array];
    rooms = v78->_rooms;
    v78->_rooms = (NSMutableArray *)v91;

    uint64_t v93 = [MEMORY[0x1E4F1CA48] array];
    zones = v78->_zones;
    v78->_zones = (NSMutableArray *)v93;

    uint64_t v95 = [MEMORY[0x1E4F1CA60] dictionary];
    accessories = v78->_accessories;
    v78->_accessories = (NSMutableDictionary *)v95;

    uint64_t v97 = [MEMORY[0x1E4F1CA48] array];
    discoveredAccessories = v78->_discoveredAccessories;
    v78->_discoveredAccessories = (NSMutableArray *)v97;

    uint64_t v99 = [MEMORY[0x1E4F1CA48] array];
    serviceGroups = v78->_serviceGroups;
    v78->_serviceGroups = (NSMutableArray *)v99;

    uint64_t v101 = [MEMORY[0x1E4F1CA48] array];
    actionSets = v78->_actionSets;
    v78->_actionSets = (NSMutableArray *)v101;

    uint64_t v103 = [MEMORY[0x1E4F1CA48] array];
    currentTriggers = v78->_currentTriggers;
    v78->_currentTriggers = (NSMutableArray *)v103;

    uint64_t v105 = [MEMORY[0x1E4F1CA48] array];
    triggerOwnedActionSets = v78->_triggerOwnedActionSets;
    v78->_triggerOwnedActionSets = (NSMutableArray *)v105;

    uint64_t v107 = [MEMORY[0x1E4F1CA48] array];
    users = v78->_users;
    v78->_users = (NSMutableArray *)v107;

    uint64_t v109 = [MEMORY[0x1E4F1CA48] array];
    usersPendingUserManagementOperations = v78->_usersPendingUserManagementOperations;
    v78->_usersPendingUserManagementOperations = (NSMutableArray *)v109;

    uint64_t v111 = [MEMORY[0x1E4F1CA48] array];
    removedUsers = v78->_removedUsers;
    v78->_removedUsers = (NSMutableArray *)v111;

    uint64_t v113 = [MEMORY[0x1E4F1CA48] array];
    outgoingInvitations = v78->_outgoingInvitations;
    v78->_outgoingInvitations = (NSMutableArray *)v113;

    uint64_t v115 = [MEMORY[0x1E4F1CA48] array];
    ownedTriggers = v78->_ownedTriggers;
    v78->_ownedTriggers = (NSMutableArray *)v115;

    uint64_t v117 = [MEMORY[0x1E4F1CA80] set];
    pendingResponsesForRemoteAccessSetup = v78->_pendingResponsesForRemoteAccessSetup;
    v78->_pendingResponsesForRemoteAccessSetup = (NSMutableSet *)v117;

    uint64_t v119 = [MEMORY[0x1E4F1CA60] dictionary];
    enableNotificationPayload = v78->_enableNotificationPayload;
    v78->_enableNotificationPayload = (NSMutableDictionary *)v119;

    uint64_t v121 = [MEMORY[0x1E4F1CA60] dictionary];
    disableNotificationPayload = v78->_disableNotificationPayload;
    v78->_disableNotificationPayload = (NSMutableDictionary *)v121;

    uint64_t v123 = [MEMORY[0x1E4F1CA60] dictionary];
    notificationHandlerMap = v78->_notificationHandlerMap;
    v78->_notificationHandlerMap = (NSMutableDictionary *)v123;

    uint64_t v125 = [MEMORY[0x1E4F1CA80] set];
    notificationRegistrations = v78->_notificationRegistrations;
    v78->_notificationRegistrations = (NSMutableSet *)v125;

    uint64_t v127 = [MEMORY[0x1E4F1CA80] set];
    notificationRegistrationsForAppleMediaAccessories = v78->_notificationRegistrationsForAppleMediaAccessories;
    v78->_notificationRegistrationsForAppleMediaAccessories = (NSMutableSet *)v127;

    uint64_t v129 = [MEMORY[0x1E4F1CA80] set];
    notificationDeregistrations = v78->_notificationDeregistrations;
    v78->_notificationDeregistrations = (NSMutableSet *)v129;

    uint64_t v131 = [MEMORY[0x1E4F1C9C8] distantFuture];
    notificationsUpdatedTime = v78->_notificationsUpdatedTime;
    v78->_notificationsUpdatedTime = (NSDate *)v131;

    uint64_t v133 = [MEMORY[0x1E4F28E10] strongToStrongObjectsMapTable];
    uuidToHAPAccessoryConfigTable = v78->_uuidToHAPAccessoryConfigTable;
    v78->_uuidToHAPAccessoryConfigTable = (NSMapTable *)v133;

    uint64_t v135 = +[HMDAppleAccountSettings sharedSettings];
    accountSettings = v78->_accountSettings;
    v78->_accountSettings = (HMDAppleAccountSettings *)v135;

    objc_storeStrong((id *)&v78->_hapMetadata, a15);
    objc_storeStrong((id *)&v78->_deviceLockStateDataSource, a18);
    objc_storeStrong((id *)&v78->_siriSecureAccessoryAccessController, a16);
    objc_storeStrong((id *)&v78->_carPlayDataSource, a17);
    if (isiOSDevice())
    {
      uint64_t v137 = [MEMORY[0x1E4F1CA80] set];
      heartbeatPingMessagesQueuedWithServer = v78->_heartbeatPingMessagesQueuedWithServer;
      v78->_heartbeatPingMessagesQueuedWithServer = (NSMutableSet *)v137;
    }
    if (v313)
    {
      [(NSMutableArray *)v78->_users addObject:v313];
      [v313 setHome:v78];
      if (!v38->_ownerUser) {
        [(HMDHome *)v78 _updateCurrentUserForSharedHome];
      }
    }
    long long v139 = [HMDRoom alloc];
    uint64_t v140 = HMDDefaultRoomName();
    uint64_t v141 = [(HMDRoom *)v139 initWithName:v140 uuid:v302 home:v78];
    roomForEntireHome = v78->_roomForEntireHome;
    v78->_roomForEntireHome = (HMDRoom *)v141;

    v78->_configurationVersiouint64_t n = 0;
    v78->_previousReachableAccessoriesCount = 0;
    v78->_previousReachableAppleMediaAccessoriesCount = 0;
    uint64_t v143 = [MEMORY[0x1E4F1CA48] array];
    unconfiguredResidentDevices = v78->_unconfiguredResidentDevices;
    v78->_unconfiguredResidentDevices = (NSMutableArray *)v143;

    uint64_t v145 = [MEMORY[0x1E4F28D30] weakObjectsHashTable];
    removeAccessoryInProgressForHMDAccessories = v78->_removeAccessoryInProgressForHMDAccessories;
    v78->_removeAccessoryInProgressForHMDAccessories = (NSHashTable *)v145;

    uint64_t v147 = [MEMORY[0x1E4F1CA48] array];
    retrievalAccessoryCompletionTuples = v78->_retrievalAccessoryCompletionTuples;
    v78->_retrievalAccessoryCompletionTuples = (NSMutableArray *)v147;

    uint64_t v149 = [MEMORY[0x1E4F1CA48] array];
    accessoryRemoteReachabilityEnabledClients = v78->_accessoryRemoteReachabilityEnabledClients;
    v78->_accessoryRemoteReachabilityEnabledClients = (NSMutableArray *)v149;

    objc_initWeak(&location, v78);
    uint64_t v151 = [HMDManagedStagedValue alloc];
    id v152 = [MEMORY[0x1E4F65408] BOOLeanWithBool:0];
    v316[0] = MEMORY[0x1E4F143A8];
    v316[1] = 3221225472;
    v316[2] = __495__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth_metricsDispatcherFactory_logEventSubmitter_dailyScheduler_currentUserFactory_residentDeviceManagerFactory_locationHandlerFactory_hapMetadata_siriSecureAccessoryAccessController_carPlayDataSource_deviceLockStateDataSource_notificationRegistry_administratorHandlerFactory_netManagerFactory_wifiManagerFactory_xpcMessageTransportFactory_localCapabilitiesDataSource_notificationCenter_keychainStore_reportingSessionManager___block_invoke;
    v316[3] = &unk_1E6A06728;
    objc_copyWeak(&v317, &location);
    uint64_t v153 = [(HMDManagedStagedValue *)v151 initWithValue:v152 commitBlock:v316];
    stagedRemoteReachabilityRegistratiouint64_t n = v78->_stagedRemoteReachabilityRegistration;
    v78->_stagedRemoteReachabilityRegistratiouint64_t n = (HMDManagedStagedValue *)v153;

    uint64_t v155 = [MEMORY[0x1E4F1CA48] array];
    reachabilityRegisteredDevices = v78->_reachabilityRegisteredDevices;
    v78->_reachabilityRegisteredDevices = (NSMutableArray *)v155;

    uint64_t v157 = [MEMORY[0x1E4F1CA48] array];
    remoteReachabilityNotificationPendingAccessories = v78->_remoteReachabilityNotificationPendingAccessories;
    v78->_remoteReachabilityNotificationPendingAccessories = (NSMutableArray *)v157;

    uint64_t v159 = [MEMORY[0x1E4F1CA60] dictionary];
    pendingResponses = v78->_pendingResponses;
    v78->_pendingResponses = (NSMutableDictionary *)v159;

    if (!isWatch())
    {
      uint64_t v161 = v298[2]();
      homeLocationHandler = v78->_homeLocationHandler;
      v78->_homeLocationHandler = (HMDHomeLocationHandler *)v161;
    }
    if (!isWatch())
    {
      long long v163 = objc_alloc_init(HMDHomeReprovisionHandler);
      homeReprovisionHandler = v78->_homeReprovisionHandler;
      v78->_homeReprovisionHandler = v163;
    }
    uint64_t v165 = [MEMORY[0x1E4F1CA60] dictionary];
    newlyConfiguredAccessories = v78->_newlyConfiguredAccessories;
    v78->_newlyConfiguredAccessories = (NSMutableDictionary *)v165;

    uint64_t v167 = [MEMORY[0x1E4F28E10] mapTableWithStrongToStrongObjects];
    addPendingAccessories = v78->_addPendingAccessories;
    v78->_addPendingAccessories = (NSMapTable *)v167;

    uint64_t v169 = [MEMORY[0x1E4F1CA60] dictionary];
    addPendingAccessorySetupCodes = v78->_addPendingAccessorySetupCodes;
    v78->_addPendingAccessorySetupCodes = (NSMutableDictionary *)v169;

    uint64_t v171 = [MEMORY[0x1E4F1CA60] dictionary];
    addPendingAccessoryOnboardingSetupPayloadStrings = v78->_addPendingAccessoryOnboardingSetupPayloadStrings;
    v78->_addPendingAccessoryOnboardingSetupPayloadStrings = (NSMutableDictionary *)v171;

    uint64_t v173 = [MEMORY[0x1E4F1CA60] dictionary];
    addPendingAccessorySetupCodeHandlers = v78->_addPendingAccessorySetupCodeHandlers;
    v78->_addPendingAccessorySetupCodeHandlers = (NSMutableDictionary *)v173;

    v78->_anyBTLEAccessoryReachable = 0;
    uint64_t v175 = v300[2](v300, v78);
    residentDeviceManager = v78->_residentDeviceManager;
    v78->_residentDeviceManager = (HMDResidentDeviceManager *)v175;

    if (!v38->_ownerUser && !isWatch())
    {
      long long v177 = objc_alloc_init(HMDSharedHomeUpdateHandler);
      sharedHomeUpdateHandler = v78->_sharedHomeUpdateHandler;
      v78->_sharedHomeUpdateHandler = v177;

      [(HMDSharedHomeUpdateHandler *)v78->_sharedHomeUpdateHandler configureWithHome:v78];
    }
    uint64_t v179 = v301[2](v301, v78);
    administratorHandler = v78->_administratorHandler;
    v78->_administratorHandler = (HMDHomeAdministratorHandler *)v179;

    long long v181 = [HMDHomeMediaSystemHandler alloc];
    uint64_t v182 = [(HMDHomeMediaSystemHandler *)v181 initWithMediaSystems:MEMORY[0x1E4F1CBF0]];
    mediaSystemController = v78->_mediaSystemController;
    v78->_mediaSystemController = (HMDHomeMediaSystemHandler *)v182;

    v78->_automaticSoftwareUpdateEnabled = 1;
    v78->_automaticThirdPartyAccessorySoftwareUpdateEnabled = 0;
    v78->_int64_t protectionMode = 0;
    v78->_networkRouterSupportDisableReasouint64_t n = 0;
    v78->_unint64_t networkRouterSupport = [(HMDHome *)v78 deriveNetworkRouterSupport:0];
    v78->_mediaPeerToPeerEnabled = 0;
    v78->_soundCheckEnabled = 1;
    objc_storeStrong((id *)&v78->_notificationRegistry, a19);
    [(HMDNotificationRegistry *)v78->_notificationRegistry configureWithHome:v78];
    if ([*p_localCapabilitiesDataSource isResidentCapable])
    {
      id v184 = [[HMDResidentAppleMediaStateManager alloc] initWithDataSource:v78 delegate:v78];
      mediaStateManager = v78->_mediaStateManager;
      v78->_mediaStateManager = v184;
    }
    uint64_t v186 = [MEMORY[0x1E4F1CA48] array];
    mediaSessions = v78->_mediaSessions;
    v78->_mediaSessions = (NSMutableArray *)v186;

    uint64_t v188 = [MEMORY[0x1E4F1CA48] array];
    mediaSessionStates = v78->_mediaSessionStates;
    v78->_mediaSessionStates = (NSMutableArray *)v188;

    uint64_t v190 = [MEMORY[0x1E4F28D30] weakObjectsHashTable];
    connectionsDiscoveringSymptomsForNearbyDevices = v78->_connectionsDiscoveringSymptomsForNearbyDevices;
    v78->_connectionsDiscoveringSymptomsForNearbyDevices = (NSHashTable *)v190;

    if (!isWatch())
    {
      if (v313 && [*p_localCapabilitiesDataSource isResidentCapable])
      {
        __int16 v192 = objc_alloc_init(HMDHomePresenceMonitor);
        presenceMonitor = v78->_presenceMonitor;
        v78->_presenceMonitor = v192;

        uint64_t v194 = objc_alloc_init(HMDHomePeriodicReader);
        periodicReader = v78->_periodicReader;
        v78->_periodicReader = v194;
      }
      long long v196 = objc_alloc_init(HMDUserPresenceFeeder);
      presenceFeeder = v78->_presenceFeeder;
      v78->_presenceFeeder = v196;

      long long v198 = (void *)MEMORY[0x1D9452090]();
      long long v199 = v78;
      HMFGetOSLogHandle();
      id v200 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v200, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v201 = (id)objc_claimAutoreleasedReturnValue();
        BOOL v202 = [(HMDHome *)v199 presenceFeeder];
        *(_DWORD *)buf = 138543618;
        id v321 = v201;
        __int16 v322 = 2112;
        id v323 = v202;
        _os_log_impl(&dword_1D49D5000, v200, OS_LOG_TYPE_INFO, "%{public}@Allocated presenceFeeder on HMDHome: %@", buf, 0x16u);
      }
    }
    BOOL v203 = [HMDPredicateUtilities alloc];
    uint64_t v204 = [(HMDHome *)v78 name];
    uint64_t v205 = [(HMDPredicateUtilities *)v203 initWithHome:v78 logIdentifier:v204];
    predicateUtility = v78->_predicateUtility;
    v78->_predicateUtility = (HMDPredicateUtilities *)v205;

    BOOL v207 = [[HMDMediaActionRouter alloc] initWithDataSource:v78];
    mediaActionRouter = v78->_mediaActionRouter;
    v78->_mediaActionRouter = v207;

    v78->_multiUserEnabled = 1;
    v78->_hasAnyUserAcknowledgedCameraRecordingOnboarding = 0;
    uint64_t v209 = [HMDAccessoryNetworkProtectionGroupRegistry alloc];
    id v210 = [(HMDHome *)v78 notificationCenter];
    uint64_t v211 = [(HMDAccessoryNetworkProtectionGroupRegistry *)v209 initWithHome:v78 notificationCenter:v210];
    networkProtectionGroupRegistry = v78->_networkProtectionGroupRegistry;
    v78->_networkProtectionGroupRegistry = (HMDAccessoryNetworkProtectionGroupRegistry *)v211;

    uint64_t v213 = [HMDResidentReachabilityNotificationManager alloc];
    v214 = objc_alloc_init(HMDResidentReachabilityContext);
    uint64_t v215 = [(HMDResidentReachabilityNotificationManager *)v213 initWithResidentReachabilityContext:v214 workQueue:v38->_workQueue];
    reachabilityNotificationManager = v78->_reachabilityNotificationManager;
    v78->_reachabilityNotificationManager = (HMDResidentReachabilityNotificationManager *)v215;

    __int16 v217 = [[HMDAccessoryReachabilityChangedLogEventManager alloc] initWithHome:v78];
    reachabilityChangedLogEventManager = v78->_reachabilityChangedLogEventManager;
    v78->_reachabilityChangedLogEventManager = v217;

    __int16 v219 = [[HMDHomeNaturalLightingCurveWriter alloc] initWithHome:v78];
    naturalLightingCurveWriter = v78->_naturalLightingCurveWriter;
    v78->_naturalLightingCurveWriter = v219;

    __int16 v221 = [HMDHAPAccessoryConnectionCoordinator alloc];
    uint64_t v222 = [(HMDHome *)v78 notificationCenter];
    uint64_t v223 = [(HMDHAPAccessoryConnectionCoordinator *)v221 initWithHome:v78 notificationCenter:v222];
    accessoryConnectionCoordinator = v78->_accessoryConnectionCoordinator;
    v78->_accessoryConnectionCoordinator = (HMDHAPAccessoryConnectionCoordinator *)v223;

    BOOL v225 = [[HMDHAPAccessoryReaderWriter alloc] initWithHome:v78];
    accessoryReaderWriter = v78->_accessoryReaderWriter;
    v78->_accessoryReaderWriter = v225;

    uint64_t v227 = [[HMDHomePersonDataManager alloc] initWithHome:v78 workQueue:v38->_workQueue];
    personDataManager = v78->_personDataManager;
    v78->_personDataManager = v227;

    uint64_t v229 = [[HMDHomeWalletKeyManager alloc] initWithUUID:v38->_uuid workQueue:v38->_workQueue];
    walletKeyManager = v78->_walletKeyManager;
    v78->_walletKeyManager = v229;

    id v231 = (void *)MEMORY[0x1D9452090]();
    id v232 = v78;
    HMFGetOSLogHandle();
    id v233 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v233, OS_LOG_TYPE_DEFAULT))
    {
      long long v234 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v321 = v234;
      _os_log_impl(&dword_1D49D5000, v233, OS_LOG_TYPE_DEFAULT, "%{public}@Created wallet key manager", buf, 0xCu);
    }
    int v235 = [[HMDHomeNFCReaderKeyManager alloc] initWithUUID:v38->_uuid workQueue:v38->_workQueue];
    nfcReaderKeyManager = v232->_nfcReaderKeyManager;
    v232->_nfcReaderKeyManager = v235;

    uint64_t v237 = (void *)MEMORY[0x1D9452090]();
    double v238 = v232;
    HMFGetOSLogHandle();
    id v239 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v239, OS_LOG_TYPE_DEFAULT))
    {
      id v240 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v321 = v240;
      _os_log_impl(&dword_1D49D5000, v239, OS_LOG_TYPE_DEFAULT, "%{public}@Created nfc reader key manager", buf, 0xCu);
    }
    v238->_shouldEncodeHasOnboardedForWalletKey = 1;
    v238->_shouldEncodeNFCReaderKey = 1;
    uint64_t v241 = [MEMORY[0x1E4F1CA60] dictionary];
    labelsByAccessCode = v238->_labelsByAccessCode;
    v238->_labelsByAccessCode = (NSMutableDictionary *)v241;

    uint64_t v243 = [MEMORY[0x1E4F1CA60] dictionary];
    removedUserInfoByAccessCode = v238->_removedUserInfoByAccessCode;
    v238->_removedUserInfoByAccessCode = (NSMutableDictionary *)v243;

    id v245 = [HMDAccessCodeManagerContext alloc];
    uint64_t v246 = [(HMDHome *)v238 workQueue];
    id v247 = [(HMDAccessCodeManagerContext *)v245 initWithHome:v238 workQueue:v246];

    int v248 = [[HMDAccessCodeManager alloc] initWithContext:v247];
    accessCodeManager = v238->_accessCodeManager;
    v238->_accessCodeManager = v248;

    uint64_t v250 = [[HMDHomeLockNotificationManager alloc] initWithUUID:v38->_uuid workQueue:v38->_workQueue];
    lockNotificationManager = v238->_lockNotificationManager;
    v238->_lockNotificationManager = v250;

    double v252 = [[HMDCameraAnalysisStatePublisher alloc] initWithHome:v238];
    analysisStatePublisher = v238->_analysisStatePublisher;
    v238->_analysisStatePublisher = v252;

    if ([*p_localCapabilitiesDataSource isResidentCapable])
    {
      uint64_t v254 = [[HMDHomeRemoteEventAccessController alloc] initWithDataSource:v238];
      homeRemoteEventAccessController = v238->_homeRemoteEventAccessController;
      v238->_homeRemoteEventAccessController = v254;
    }
    id v256 = (void *)MEMORY[0x1D9452090]();
    id v257 = v238;
    HMFGetOSLogHandle();
    long long v258 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v258, OS_LOG_TYPE_DEFAULT))
    {
      id v259 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v321 = v259;
      _os_log_impl(&dword_1D49D5000, v258, OS_LOG_TYPE_DEFAULT, "%{public}@Creating setup metric dispatchers for media system and home theater", buf, 0xCu);
    }
    id v260 = [[HMDMediaGroupSetupMetricDispatcher alloc] initWithDataSource:v257 logEventSubmitter:v311];
    id v261 = v257[191];
    v257[191] = v260;

    id v262 = [[HMDMediaGroupSetupMetricDispatcher alloc] initWithDataSource:v257 logEventSubmitter:v311];
    id v263 = v257[192];
    v257[192] = v262;

    id v264 = objc_alloc_init(HMDCHIPHomeStorage);
    id v265 = v257[183];
    v257[183] = v264;

    if ([v257 isFeatureMatterLocalFabricConfigEnabled])
    {
      uint64_t v266 = [MEMORY[0x1E4F1CA48] array];
      id v267 = v257[120];
      v257[120] = (id)v266;

      id v268 = objc_alloc(MEMORY[0x1E4F6A0D0]);
      uint64_t v269 = [v257 workQueue];
      uint64_t v270 = [v268 initWithDelegate:v257 queue:v269];
      id v271 = v257[184];
      v257[184] = (id)v270;

      [v257[184] setControllerEntityIdentifier:v38->_uuid];
      long long v272 = [v257 homeManager];
      char v273 = [v272 accessoryBrowser];
      char v274 = [v273 chipAccessoryServerBrowser];
      long long v275 = [v274 storage];
      [v257[184] setStorage:v275];

      LODWORD(v273) = [v313 isCurrentUser];
      uint64_t v276 = [v257[184] accessControl];
      [v276 setCurrentUserPrivilege:v273];

      long long v277 = [v257[184] accessControl];
      LODWORD(v273) = [v277 currentUserPrivilege] == 0;

      if (v273)
      {
        objc_initWeak((id *)buf, v257);
        v314[0] = MEMORY[0x1E4F143A8];
        v314[1] = 3221225472;
        v314[2] = __495__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth_metricsDispatcherFactory_logEventSubmitter_dailyScheduler_currentUserFactory_residentDeviceManagerFactory_locationHandlerFactory_hapMetadata_siriSecureAccessoryAccessController_carPlayDataSource_deviceLockStateDataSource_notificationRegistry_administratorHandlerFactory_netManagerFactory_wifiManagerFactory_xpcMessageTransportFactory_localCapabilitiesDataSource_notificationCenter_keychainStore_reportingSessionManager___block_invoke_611;
        v314[3] = &unk_1E6A06750;
        objc_copyWeak(&v315, (id *)buf);
        long long v278 = [v257[184] accessControl];
        [v278 setPrivilegeGetter:v314];

        objc_destroyWeak(&v315);
        objc_destroyWeak((id *)buf);
      }
    }
    v257[196] = 0;
    v257[197] = 0;
    uint64_t v279 = [MEMORY[0x1E4F29128] UUID];
    id v280 = v257[188];
    v257[188] = (id)v279;

    objc_destroyWeak(&v317);
    objc_destroyWeak(&location);
  }
  return v38;
}

void __495__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth_metricsDispatcherFactory_logEventSubmitter_dailyScheduler_currentUserFactory_residentDeviceManagerFactory_locationHandlerFactory_hapMetadata_siriSecureAccessoryAccessController_carPlayDataSource_deviceLockStateDataSource_notificationRegistry_administratorHandlerFactory_netManagerFactory_wifiManagerFactory_xpcMessageTransportFactory_localCapabilitiesDataSource_notificationCenter_keychainStore_reportingSessionManager___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (v7) {
    objc_msgSend(WeakRetained, "_registerForReachabilityChangeNotificationsEnabled:completionHandler:", objc_msgSend(v7, "BOOLValue"), v5);
  }
}

unint64_t __495__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth_metricsDispatcherFactory_logEventSubmitter_dailyScheduler_currentUserFactory_residentDeviceManagerFactory_locationHandlerFactory_hapMetadata_siriSecureAccessoryAccessController_carPlayDataSource_deviceLockStateDataSource_notificationRegistry_administratorHandlerFactory_netManagerFactory_wifiManagerFactory_xpcMessageTransportFactory_localCapabilitiesDataSource_notificationCenter_keychainStore_reportingSessionManager___block_invoke_611(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_super v3 = [WeakRetained currentUser];
    unint64_t v4 = +[HMDUser hmmtrUserPrivilegeFromHMDUserPrivilege:](HMDUser, "hmmtrUserPrivilegeFromHMDUserPrivilege:", [v3 privilege]);
  }
  else
  {
    unint64_t v4 = 0;
  }

  return v4;
}

- (HMDHome)initWithName:(id)a3 uuid:(id)a4 defaultRoomUUID:(id)a5 owner:(id)a6 homeManager:(id)a7 presenceAuth:(id)a8
{
  id v32 = a8;
  id v14 = a7;
  id v31 = a6;
  id v28 = a5;
  id v30 = a4;
  id v27 = a3;
  if (isWatch()) {
    id v36 = 0;
  }
  else {
    id v36 = objc_alloc_init(HMDNotificationRegistry);
  }
  id v35 = objc_alloc_init(HMDHomeMetricsDispatcherFactory);
  id v33 = [v14 metricsManager];
  uint64_t v26 = [v33 logEventSubmitter];
  long long v29 = [v14 metricsManager];
  id v34 = [v29 dailyScheduler];
  char v25 = +[HMDHAPMetadata getSharedInstance];
  id v24 = [[HMDSiriSecureAccessoryAccessController alloc] initWithDataSource:self];
  BOOL v23 = objc_alloc_init(HMDCarPlayDataSource);
  unint64_t v21 = objc_alloc_init(HMDDeviceLockStateDataSource);
  uint64_t v22 = objc_alloc_init(HMDXPCMessageTransportFactory);
  uint64_t v19 = objc_alloc_init(HMDHomeLocalDeviceCapabilitiesDataSource);
  long long v20 = [MEMORY[0x1E4F28EB8] defaultCenter];
  uint64_t v15 = [MEMORY[0x1E4F5BE48] systemStore];
  BOOL v16 = objc_alloc_init(HMDXPCMessageReportingSessionManager);
  uint64_t v17 = -[HMDHome initWithName:uuid:defaultRoomUUID:owner:homeManager:presenceAuth:metricsDispatcherFactory:logEventSubmitter:dailyScheduler:currentUserFactory:residentDeviceManagerFactory:locationHandlerFactory:hapMetadata:siriSecureAccessoryAccessController:carPlayDataSource:deviceLockStateDataSource:notificationRegistry:administratorHandlerFactory:netManagerFactory:wifiManagerFactory:xpcMessageTransportFactory:localCapabilitiesDataSource:notificationCenter:keychainStore:reportingSessionManager:](self, "initWithName:uuid:defaultRoomUUID:owner:homeManager:presenceAuth:metricsDispatcherFactory:logEventSubmitter:dailyScheduler:currentUserFactory:residentDeviceManagerFactory:locationHandlerFactory:hapMetadata:siriSecureAccessoryAccessController:carPlayDataSource:deviceLockStateDataSource:notificationRegistry:administratorHandlerFactory:netManagerFactory:wifiManagerFactory:xpcMessageTransportFactory:localCapabilitiesDataSource:notificationCenter:keychainStore:reportingSessionManager:", v27, v30, v28, v31, v14, v32, v35, v26, v34, &__block_literal_global_526, &__block_literal_global_530, &__block_literal_global_538, v25,
          v24,
          v23,
          v21,
          v36,
          &__block_literal_global_534,
          &__block_literal_global_542,
          &__block_literal_global_546,
          v22,
          v19,
          v20,
          v15,
          v16);

  return v17;
}

uint64_t __76__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth___block_invoke_6()
{
  return [MEMORY[0x1E4F65598] sharedManager];
}

uint64_t __76__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth___block_invoke_5()
{
  return [MEMORY[0x1E4F654C0] sharedManager];
}

HMDHomeLocationHandler *__76__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth___block_invoke_4()
{
  uint64_t v0 = objc_alloc_init(HMDHomeLocationHandler);
  return v0;
}

HMDHomeAdministratorHandler *__76__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth___block_invoke_3(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_super v3 = [[HMDHomeAdministratorHandler alloc] initWithHome:v2];

  return v3;
}

id __76__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth___block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = [a2 uuid];
  objc_super v3 = +[HMDResidentDeviceManagerFactory createManagerForHomeUUID:v2];

  return v3;
}

id __76__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[HMDUser currentUserWithPrivilege:a2 forHome:a3];
}

+ (id)filterAllowedToPostBulletinFromCharacteristics:(id)a3
{
  return (id)objc_msgSend(a3, "na_filter:", &__block_literal_global_2054);
}

uint64_t __58__HMDHome_filterAllowedToPostBulletinFromCharacteristics___block_invoke(uint64_t a1, void *a2)
{
  id v2 = [a2 service];
  objc_super v3 = [v2 accessory];
  unint64_t v4 = [v3 home];
  uint64_t v5 = [v4 shouldPostBulletin];

  return v5;
}

uint64_t __22__HMDHome_logCategory__block_invoke()
{
  logCategory__hmf_once_v1330 = HMFCreateOSLogHandle();
  return MEMORY[0x1F41817F8]();
}

+ (id)supportedAccessoryClasses
{
  if (supportedAccessoryClasses_onceToken != -1) {
    dispatch_once(&supportedAccessoryClasses_onceToken, &__block_literal_global_1686);
  }
  id v2 = (void *)supportedAccessoryClasses_supportedAccessoryClasses;
  return v2;
}

void __36__HMDHome_supportedAccessoryClasses__block_invoke()
{
  v4[2] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = (void *)MEMORY[0x1E4F1CAD0];
  v4[0] = objc_opt_class();
  v4[1] = objc_opt_class();
  uint64_t v1 = [MEMORY[0x1E4F1C978] arrayWithObjects:v4 count:2];
  uint64_t v2 = [v0 setWithArray:v1];
  objc_super v3 = (void *)supportedAccessoryClasses_supportedAccessoryClasses;
  supportedAccessoryClasses_supportedAccessoryClasses = v2;
}

+ (void)appendCharacteristicsToAccessoryList:(id)a3 responseTuples:(id)a4 forMultipleCharacteristicsRemoteRead:(id)a5
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v32 = a3;
  id v29 = a4;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id obj = a5;
  uint64_t v7 = [obj countByEnumeratingWithState:&v33 objects:v37 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v34;
    uint64_t v28 = *MEMORY[0x1E4F2D140];
    do
    {
      uint64_t v10 = 0;
      uint64_t v30 = v8;
      do
      {
        if (*(void *)v34 != v9) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void **)(*((void *)&v33 + 1) + 8 * v10);
        long long v12 = [v11 characteristic];
        long long v13 = [v12 service];
        id v14 = [v13 accessory];
        uint64_t v15 = v14;
        if (v12) {
          BOOL v16 = v13 == 0;
        }
        else {
          BOOL v16 = 1;
        }
        if (v16 || v14 == 0)
        {
          long long v20 = [MEMORY[0x1E4F28C58] errorWithDomain:v28 code:4 userInfo:0];
          uint64_t v18 = +[HMDCharacteristicResponse responseWithRequest:v11 error:v20];
          [v29 addObject:v18];
        }
        else
        {
          uint64_t v19 = [v14 uuid];
          long long v20 = [v19 UUIDString];

          uint64_t v21 = objc_msgSend(v32, "hmf_mutableDictionaryForKey:", v20);
          uint64_t v18 = (void *)v21;
          if (!v21)
          {
            uint64_t v18 = [MEMORY[0x1E4F1CA60] dictionary];
            [v32 setObject:v18 forKey:v20];
          }
          uint64_t v22 = [v13 instanceID];
          BOOL v23 = [v22 stringValue];
          id v24 = objc_msgSend(v18, "hmf_mutableArrayForKey:", v23);

          if (!v24)
          {
            id v24 = [MEMORY[0x1E4F1CA48] array];
            char v25 = [v13 instanceID];
            uint64_t v26 = [v25 stringValue];
            [v18 setObject:v24 forKey:v26];
          }
          id v27 = [v12 instanceID];
          [v24 addObject:v27];

          uint64_t v8 = v30;
        }

        ++v10;
      }
      while (v8 != v10);
      uint64_t v8 = [obj countByEnumeratingWithState:&v33 objects:v37 count:16];
    }
    while (v8);
  }
}

+ (void)appendCharacteristicsToAccessoryList:(id)a3 responseTuples:(id)a4 forMultipleCharacteristicsRemoteWrite:(id)a5 message:(id)a6
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  id v48 = a3;
  id v45 = a4;
  id v9 = a5;
  id v44 = a6;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  id obj = v9;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v54 objects:v58 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v55;
    uint64_t v42 = *MEMORY[0x1E4F2D140];
    uint64_t v43 = *(void *)v55;
    do
    {
      uint64_t v13 = 0;
      uint64_t v46 = v11;
      do
      {
        if (*(void *)v55 != v12) {
          objc_enumerationMutation(obj);
        }
        id v14 = *(void **)(*((void *)&v54 + 1) + 8 * v13);
        uint64_t v15 = [v14 characteristic];
        BOOL v16 = [v15 service];
        uint64_t v17 = [v16 accessory];
        uint64_t v18 = v17;
        if (v15) {
          BOOL v19 = v16 == 0;
        }
        else {
          BOOL v19 = 1;
        }
        if (v19 || v17 == 0)
        {
          uint64_t v21 = [MEMORY[0x1E4F28C58] errorWithDomain:v42 code:4 userInfo:0];
          uint64_t v22 = +[HMDCharacteristicResponse responseWithRequest:v14 error:v21];
          [v45 addObject:v22];
        }
        else
        {
          BOOL v23 = [v17 uuid];
          uint64_t v24 = [v23 UUIDString];

          char v25 = [v16 instanceID];
          uint64_t v26 = [v25 stringValue];

          id v27 = [v15 instanceID];
          dispatch_queue_t v53 = [v27 stringValue];

          uint64_t v28 = objc_msgSend(v48, "hmf_mutableDictionaryForKey:", v24);
          id v29 = (void *)v28;
          if (!v28)
          {
            id v29 = [MEMORY[0x1E4F1CA60] dictionary];
            [v48 setObject:v29 forKeyedSubscript:v24];
          }
          uint64_t v52 = (void *)v24;
          uint64_t v30 = objc_msgSend(v29, "hmf_mutableDictionaryForKey:", v26);
          if (!v30)
          {
            uint64_t v30 = [MEMORY[0x1E4F1CA60] dictionary];
            [v29 setObject:v30 forKeyedSubscript:v26];
          }
          id v50 = v29;
          uint64_t v51 = (void *)v26;
          uint64_t v31 = [v15 authorizationData];
          if (v31)
          {
            id v32 = [NSString stringWithFormat:@"%@-%@", v53, @"kAuthorizationDataKey"];
            [v30 setObject:v31 forKeyedSubscript:v32];
          }
          long long v49 = (void *)v31;
          long long v33 = [v18 home];
          long long v34 = [v33 currentUser];
          long long v35 = [v34 notificationContextHAPIdentifier];
          long long v36 = [v15 contextDataForWriteRequestWithIdentifier:v35];

          if (v36)
          {
            id v37 = [NSString stringWithFormat:@"%@-%@", v53, @"kCharacteristicContextDataForWriteKey"];
            [v30 setObject:v36 forKeyedSubscript:v37];
          }
          uint64_t v38 = [v44 uuidForKey:@"kActionSetUUID"];
          int v39 = [v44 BOOLForKey:@"kShortActionKey"];
          uint64_t v22 = v51;
          if (v38 || v39) {
            [v48 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"kShortActionKey"];
          }
          __int16 v40 = [v14 value];
          [v30 setObject:v40 forKeyedSubscript:v53];

          id v41 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v14, "includeResponseValue"));
          [v30 setObject:v41 forKeyedSubscript:@"HMDCharacteristicWriteRequestIncludeResponseValueKey"];

          uint64_t v12 = v43;
          uint64_t v11 = v46;
          uint64_t v21 = v52;
        }

        ++v13;
      }
      while (v11 != v13);
      uint64_t v11 = [obj countByEnumeratingWithState:&v54 objects:v58 count:16];
    }
    while (v11);
  }
}

+ (id)notificationPayloadForChangedCharacteristics:(id)a3 destinationIsXPCTransport:(BOOL)a4
{
  BOOL v63 = a4;
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v53 = [MEMORY[0x1E4F1CA60] dictionary];
  uint64_t v5 = +[HMDHAPMetadata getSharedInstance];
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id obj = v4;
  uint64_t v6 = [obj countByEnumeratingWithState:&v67 objects:v77 count:16];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(void *)v68;
    *(void *)&long long v7 = 138543618;
    long long v48 = v7;
    uint64_t v61 = v5;
    uint64_t v57 = *(void *)v68;
    do
    {
      uint64_t v10 = 0;
      uint64_t v59 = v8;
      do
      {
        if (*(void *)v68 != v9) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void **)(*((void *)&v67 + 1) + 8 * v10);
        uint64_t v12 = objc_msgSend(v11, "characteristic", v48);
        uint64_t v13 = [v12 service];
        id v14 = [v13 accessory];
        uint64_t v15 = [v14 home];
        BOOL v16 = (void *)v15;
        if (v12) {
          BOOL v17 = v13 == 0;
        }
        else {
          BOOL v17 = 1;
        }
        if (!v17 && v14 != 0 && v15 != 0)
        {
          long long v20 = [v11 updatedValue];
          uint64_t v21 = v20;
          if (v20) {
            BOOL v22 = !v63;
          }
          else {
            BOOL v22 = 1;
          }
          if (!v22)
          {
            id v23 = v20;
            objc_opt_class();
            char isKindOfClass = objc_opt_isKindOfClass();

            if (isKindOfClass) {
              goto LABEL_44;
            }
LABEL_24:
            if (v63)
            {
              char v25 = [v12 type];
              if ([v61 shouldFilterCharacteristicOfTypeFromApp:v25])
              {

                goto LABEL_44;
              }
              uint64_t v26 = [v13 type];
              char v27 = [v61 shouldFilterServiceOfTypeFromApp:v26];

              if (v27) {
                goto LABEL_44;
              }
            }
            uint64_t v28 = [v14 uuid];
            uint64_t v29 = [v28 UUIDString];

            uint64_t v30 = objc_msgSend(v53, "hmf_mutableDictionaryForKey:", v29);
            if (!v30)
            {
              uint64_t v30 = [MEMORY[0x1E4F1CA60] dictionary];
              [v53 setObject:v30 forKey:v29];
            }
            long long v56 = (void *)v29;
            uint64_t v31 = [v13 instanceID];
            id v32 = [v31 stringValue];
            long long v55 = v30;
            uint64_t v33 = objc_msgSend(v30, "hmf_mutableDictionaryForKey:", v32);

            long long v34 = (void *)v33;
            if (!v33)
            {
              long long v34 = [MEMORY[0x1E4F1CA60] dictionary];
              long long v35 = [v13 instanceID];
              long long v36 = [v35 stringValue];
              [v55 setObject:v34 forKey:v36];
            }
            uint64_t v75 = @"kCharacteristicValue";
            uint64_t v76 = v21;
            id v37 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v76 forKeys:&v75 count:1];
            uint64_t v38 = (void *)[v37 mutableCopy];

            id v65 = 0;
            id v66 = 0;
            id v64 = 0;
            [v12 getLastKnownValueUpdateTime:&v66 stateNumber:&v65 notificationContext:&v64];
            id v39 = v66;
            id v58 = v65;
            id v62 = v64;
            if (v39) {
              [v38 setObject:v39 forKey:@"kCharacteristicValueUpdateTime"];
            }
            long long v54 = v39;
            if (v58) {
              [v38 setObject:v58 forKey:@"kCharacteristicValueUpdateStateNumberKey"];
            }
            if (v62)
            {
              uint64_t v52 = v34;
              context = (void *)MEMORY[0x1D9452090]();
              id v40 = a1;
              id v41 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
              {
                long long v49 = HMFGetLogIdentifier();
                *(_DWORD *)buf = v48;
                uint64_t v72 = v49;
                __int16 v73 = 2112;
                id v74 = v62;
                _os_log_impl(&dword_1D49D5000, v41, OS_LOG_TYPE_INFO, "%{public}@Setting notification context in notification payload to %@ ", buf, 0x16u);
              }
              [v38 setObject:v62 forKey:@"kCharacteristicNotificationContextKey"];
              long long v34 = v52;
            }
            char v42 = [v11 isBroadcast];
            uint64_t v43 = MEMORY[0x1E4F1CC38];
            if ((v42 & 1) != 0
              || (v44 = objc_msgSend(v14, "isBLELinkConnected", MEMORY[0x1E4F1CC38]), uint64_t v43 = MEMORY[0x1E4F1CC28], v44))
            {
              [v38 setObject:v43 forKey:@"kCharacteristicBroadcastValueUpdateKey"];
            }
            id v45 = objc_msgSend(v12, "instanceID", v43);
            uint64_t v46 = [v45 stringValue];
            [v34 setObject:v38 forKey:v46];

            goto LABEL_44;
          }
          if (v20) {
            goto LABEL_24;
          }
LABEL_44:

          uint64_t v5 = v61;
          uint64_t v9 = v57;
          uint64_t v8 = v59;
        }

        ++v10;
      }
      while (v8 != v10);
      uint64_t v8 = [obj countByEnumeratingWithState:&v67 objects:v77 count:16];
    }
    while (v8);
  }

  return v53;
}

+ (unint64_t)privilegeFromUserInviteInformation:(id)a3
{
  if ([a3 isAdministrator]) {
    return 4;
  }
  else {
    return 0;
  }
}

+ (id)filterUsersSupportingPresence:(id)a3
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  id v4 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v3, "count"));
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v12 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          objc_msgSend(v4, "addObject:", v10, (void)v12);
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v7);
  }

  return v4;
}

+ (id)zoneIDFromHomeUUID:(id)a3
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v3 = (void *)MEMORY[0x1E4F29128];
  uint64_t v9 = @"1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938";
  id v4 = (void *)MEMORY[0x1E4F1C978];
  id v5 = a3;
  uint64_t v6 = [v4 arrayWithObjects:&v9 count:1];
  uint64_t v7 = objc_msgSend(v3, "hm_deriveUUIDFromBaseUUID:identifierSalt:withSalts:", v5, 0, v6, v9, v10);

  return v7;
}

+ (BOOL)isObjectContainedInHome:(id)a3
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  +[HMDHome _initialize];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v4 = (id)allowedClasses;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v4);
        }
        if (objc_opt_isKindOfClass())
        {
          LOBYTE(v5) = 1;
          goto LABEL_11;
        }
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v5;
}

+ (id)getBuiltinActionSets
{
  if (getBuiltinActionSets_onceToken != -1) {
    dispatch_once(&getBuiltinActionSets_onceToken, &__block_literal_global_520);
  }
  uint64_t v2 = (void *)getBuiltinActionSets_builtinActionSets;
  return v2;
}

void __31__HMDHome_getBuiltinActionSets__block_invoke()
{
  void v8[4] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = *MEMORY[0x1E4F2C900];
  uint64_t v1 = *MEMORY[0x1E4F2C948];
  v7[0] = *MEMORY[0x1E4F2C960];
  v7[1] = v1;
  uint64_t v2 = *MEMORY[0x1E4F2C8F8];
  v8[0] = v0;
  v8[1] = v2;
  uint64_t v3 = *MEMORY[0x1E4F2C938];
  void v7[2] = *MEMORY[0x1E4F2C930];
  v7[3] = v3;
  uint64_t v4 = *MEMORY[0x1E4F2C8F0];
  void v8[2] = *MEMORY[0x1E4F2C8E8];
  void v8[3] = v4;
  uint64_t v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v8 forKeys:v7 count:4];
  uint64_t v6 = (void *)getBuiltinActionSets_builtinActionSets;
  getBuiltinActionSets_builtinActionSets = v5;
}

+ (void)_initialize
{
  if (_initialize_onceToken != -1) {
    dispatch_once(&_initialize_onceToken, &__block_literal_global_11089);
  }
}

void __22__HMDHome__initialize__block_invoke()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = objc_opt_class();
  uint64_t v11 = objc_opt_class();
  uint64_t v12 = objc_opt_class();
  uint64_t v13 = objc_opt_class();
  uint64_t v14 = objc_opt_class();
  uint64_t v1 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v4 count:11];
  uint64_t v2 = objc_msgSend(v0, "setWithArray:", v1, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v3 = (void *)allowedClasses;
  allowedClasses = v2;
}

- (void)setMediaSettingsValue:(int64_t)a3 mediaPassword:(id)a4 enabled:(BOOL)a5
{
  BOOL v5 = a5;
  id v8 = a4;
  [(HMDHome *)self setMinimumMediaUserPrivilege:a3];
  [(HMDHome *)self setMediaPassword:v8];

  [(HMDHome *)self setMediaPeerToPeerEnabled:v5];
}

- (void)_notifyThreadLayerOfResidentChange
{
  uint64_t v3 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v3);

  uint64_t v4 = [(HMDHome *)self home];
  if (v4)
  {
    uint64_t v10 = v4;
    if ([v4 isCurrentDeviceAvailableResident])
    {
      BOOL v5 = +[HMDThreadResidentCommissioner sharedCommissioner];
      uint64_t v6 = [v10 primaryResident];
      uint64_t v7 = [v6 isCurrentDevice];
      id v8 = [v10 primaryResident];
      uint64_t v9 = [v8 capabilities];
      objc_msgSend(v5, "informThreadLayerOfResidentChange:primaryResidentIsThreadCapable:", v7, objc_msgSend(v9, "supportsThreadBorderRouter"));
    }
  }
  MEMORY[0x1F41817F8]();
}

- (void)_updateThreadNetworkWithModel:(id)a3 message:(id)a4
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = [v6 setProperties];
  int v9 = [v8 containsObject:@"threadNetworkID"];

  if (!v9)
  {
LABEL_13:
    [v7 respondWithPayload:0];
    goto LABEL_14;
  }
  uint64_t v10 = [(HMDHome *)self unfilteredThreadNetworkID];
  uint64_t v11 = [v6 threadNetworkID];
  uint64_t v12 = [(HMDHome *)self threadNetworkID];

  if (!v12)
  {
    uint64_t v18 = [v7 transactionResult];
    uint64_t v19 = [v18 source];

    if (v19 == 2 && v11 && [(HMDHome *)self attemptToUpdateThreadNetworkID:v11])
    {
      long long v20 = (void *)MEMORY[0x1D9452090]();
      uint64_t v21 = self;
      BOOL v22 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        id v23 = HMFGetLogIdentifier();
        int v25 = 138543874;
        uint64_t v26 = v23;
        __int16 v27 = 2112;
        uint64_t v28 = v10;
        __int16 v29 = 2112;
        uint64_t v30 = v11;
        _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_DEFAULT, "%{public}@threadNetworkID updated from cloud: %@ -> %@", (uint8_t *)&v25, 0x20u);
      }
      [(HMDHome *)v21 startThreadNetwork:0];
    }
    uint64_t v24 = [v7 transactionResult];
    [v24 markChanged];

    goto LABEL_13;
  }
  uint64_t v13 = (void *)MEMORY[0x1D9452090]();
  uint64_t v14 = self;
  uint64_t v15 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v16 = HMFGetLogIdentifier();
    int v25 = 138543874;
    uint64_t v26 = v16;
    __int16 v27 = 2112;
    uint64_t v28 = v10;
    __int16 v29 = 2112;
    uint64_t v30 = v11;
    _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_DEFAULT, "%{public}@Ignoring threadNetworkID update from cloud: %@ -> %@", (uint8_t *)&v25, 0x20u);
  }
  uint64_t v17 = [v7 transactionResult];
  [v17 markChanged];

  [v7 respondWithPayload:0];
LABEL_14:
}

- (void)saveAndSyncWithThreadOperationalDataset:(id)a3
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  BOOL v5 = [(HMDHome *)self home];
  id v6 = v5;
  if (v4)
  {
    id v7 = [v5 residentDeviceManager];
    id v8 = [v7 residentDevices];
    if ([v8 count]
      && ![(HMDHome *)self isCurrentDeviceConfirmedPrimaryResident])
    {
      uint64_t v11 = (void *)MEMORY[0x1D9452090]();
      uint64_t v12 = self;
      uint64_t v13 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v28 = v14;
        __int16 v29 = 2112;
        uint64_t v30 = v6;
        uint64_t v15 = "%{public}@There are residents for home: %@, but we are not the primary. Not saving ThreadOperationalDataset.";
        BOOL v16 = v13;
        uint32_t v17 = 22;
        goto LABEL_13;
      }
    }
    else
    {
      int v9 = [(HMDHome *)self threadOperationalDataset];
      int v10 = HMFEqualObjects();

      if (!v10)
      {
        BOOL v22 = [(HMDHome *)self emptyModelObjectWithChangeType:2];
        [v22 setThreadOperationalDataset:v4];
        [(HMDHome *)self setThreadOperationalDataset:v4];
        id v23 = [(HMDHome *)self backingStore];
        uint64_t v24 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
        int v25 = [v23 transaction:@"Update thread operational dataset" options:v24];

        [v25 add:v22];
        v26[0] = MEMORY[0x1E4F143A8];
        v26[1] = 3221225472;
        void v26[2] = __80__HMDHome_ThreadResidentCommissioning__saveAndSyncWithThreadOperationalDataset___block_invoke;
        v26[3] = &unk_1E6A197F0;
        void v26[4] = self;
        [v25 run:v26];
        [(HMDHome *)self setThreadOperationalDataset:v4];

LABEL_15:
        goto LABEL_16;
      }
      uint64_t v11 = (void *)MEMORY[0x1D9452090]();
      uint64_t v12 = self;
      uint64_t v13 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        uint64_t v28 = v14;
        uint64_t v15 = "%{public}@Thread operational dataset has not changed, ignoring request to save and sync";
        BOOL v16 = v13;
        uint32_t v17 = 12;
LABEL_13:
        _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, v15, buf, v17);
      }
    }

    goto LABEL_15;
  }
  uint64_t v18 = (void *)MEMORY[0x1D9452090]();
  uint64_t v19 = self;
  long long v20 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    uint64_t v21 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    uint64_t v28 = v21;
    __int16 v29 = 2112;
    uint64_t v30 = v6;
    _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_ERROR, "%{public}@threadOperationalDataset is null for home %@, not saving...", buf, 0x16u);
  }
LABEL_16:
}

void __80__HMDHome_ThreadResidentCommissioning__saveAndSyncWithThreadOperationalDataset___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  id v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v8 = HMFGetLogIdentifier();
      int v11 = 138543618;
      uint64_t v12 = v8;
      __int16 v13 = 2112;
      uint64_t v14 = (uint64_t)v3;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to sync thread operational dataset, error: %@", (uint8_t *)&v11, 0x16u);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v9 = HMFGetLogIdentifier();
    int v10 = [*(id *)(a1 + 32) threadOperationalDataset];
    int v11 = 138543618;
    uint64_t v12 = v9;
    __int16 v13 = 2048;
    uint64_t v14 = [v10 length];
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Successfully sync'ed thread operational dataset, Length: %lu", (uint8_t *)&v11, 0x16u);
  }
}

- (void)updateThreadOperationalDatasetWithHomeModel:(id)a3 message:(id)a4
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    id v8 = [v6 threadOperationalDataset];
    [(HMDHome *)self setThreadOperationalDataset:v8];

    int v9 = (void *)MEMORY[0x1D9452090]();
    int v10 = self;
    int v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = HMFGetLogIdentifier();
      __int16 v13 = [(HMDHome *)v10 threadOperationalDataset];
      int v14 = 138543618;
      uint64_t v15 = v12;
      __int16 v16 = 2048;
      uint64_t v17 = [v13 length];
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Updated thread operational dataset, Length: %lu", (uint8_t *)&v14, 0x16u);
    }
  }
}

- (void)stopThreadAccessoryFirmwareUpdateWithCompletion:(id)a3
{
  id v3 = a3;
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled()
    && (+[HMDDeviceCapabilities deviceCapabilities],
        id v4 = objc_claimAutoreleasedReturnValue(),
        char v5 = [v4 supportsThreadService],
        v4,
        (v5 & 1) != 0))
  {
    id v6 = +[HMDThreadResidentCommissioner sharedCommissioner];
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = __88__HMDHome_ThreadResidentCommissioning__stopThreadAccessoryFirmwareUpdateWithCompletion___block_invoke;
    v7[3] = &unk_1E6A19358;
    id v8 = v3;
    [v6 stopThreadAccessoryFirmwareUpdateWithCompletion:v7];
  }
  else
  {
    id v6 = [MEMORY[0x1E4F28C58] hmErrorWithCode:48];
    (*((void (**)(id, void *))v3 + 2))(v3, v6);
  }
}

uint64_t __88__HMDHome_ThreadResidentCommissioning__stopThreadAccessoryFirmwareUpdateWithCompletion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

- (void)startThreadAccessoryFirmwareUpdateWithExtendedMACAddress:(id)a3 isWedDevice:(BOOL)a4 completion:(id)a5
{
  BOOL v6 = a4;
  id v7 = a3;
  id v8 = a5;
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled()
    && (+[HMDDeviceCapabilities deviceCapabilities],
        int v9 = objc_claimAutoreleasedReturnValue(),
        char v10 = [v9 supportsThreadService],
        v9,
        (v10 & 1) != 0))
  {
    int v11 = +[HMDThreadResidentCommissioner sharedCommissioner];
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    void v13[2] = __120__HMDHome_ThreadResidentCommissioning__startThreadAccessoryFirmwareUpdateWithExtendedMACAddress_isWedDevice_completion___block_invoke;
    v13[3] = &unk_1E6A19358;
    id v14 = v8;
    [v11 startThreadAccessoryFirmwareUpdateWithExtendedMACAddress:v7 isWedDevice:v6 completion:v13];
  }
  else
  {
    uint64_t v12 = [MEMORY[0x1E4F28C58] hmErrorWithCode:48];
    (*((void (**)(id, void *))v8 + 2))(v8, v12);
  }
}

uint64_t __120__HMDHome_ThreadResidentCommissioning__startThreadAccessoryFirmwareUpdateWithExtendedMACAddress_isWedDevice_completion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

- (void)stopThreadAccessoryPairingWithCompletion:(id)a3
{
  id v3 = a3;
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled()
    && (+[HMDDeviceCapabilities deviceCapabilities],
        id v4 = objc_claimAutoreleasedReturnValue(),
        char v5 = [v4 supportsThreadService],
        v4,
        (v5 & 1) != 0))
  {
    BOOL v6 = +[HMDThreadResidentCommissioner sharedCommissioner];
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = __81__HMDHome_ThreadResidentCommissioning__stopThreadAccessoryPairingWithCompletion___block_invoke;
    v7[3] = &unk_1E6A19358;
    id v8 = v3;
    [v6 stopThreadAccessoryPairingWithCompletion:v7];
  }
  else
  {
    BOOL v6 = [MEMORY[0x1E4F28C58] hmErrorWithCode:48];
    (*((void (**)(id, void *))v3 + 2))(v3, v6);
  }
}

uint64_t __81__HMDHome_ThreadResidentCommissioning__stopThreadAccessoryPairingWithCompletion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

- (void)startThreadAccessoryPairingWithExtendedMACAddress:(id)a3 isWedDevice:(BOOL)a4 completion:(id)a5
{
  BOOL v6 = a4;
  id v7 = a3;
  id v8 = a5;
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled()
    && (+[HMDDeviceCapabilities deviceCapabilities],
        int v9 = objc_claimAutoreleasedReturnValue(),
        char v10 = [v9 supportsThreadService],
        v9,
        (v10 & 1) != 0))
  {
    int v11 = +[HMDThreadResidentCommissioner sharedCommissioner];
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    void v13[2] = __113__HMDHome_ThreadResidentCommissioning__startThreadAccessoryPairingWithExtendedMACAddress_isWedDevice_completion___block_invoke;
    v13[3] = &unk_1E6A19358;
    id v14 = v8;
    [v11 startThreadAccessoryPairingWithExtendedMACAddress:v7 isWedDevice:v6 completion:v13];
  }
  else
  {
    uint64_t v12 = [MEMORY[0x1E4F28C58] hmErrorWithCode:48];
    (*((void (**)(id, void *))v8 + 2))(v8, v12);
  }
}

uint64_t __113__HMDHome_ThreadResidentCommissioning__startThreadAccessoryPairingWithExtendedMACAddress_isWedDevice_completion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

- (void)onThreadNetworkCallStateChange:(BOOL)a3
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!a3 && [(HMDHome *)self threadNetworkShouldRestartOnNetworkChange])
  {
    id v4 = (void *)MEMORY[0x1D9452090]();
    char v5 = self;
    BOOL v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = HMFGetLogIdentifier();
      int v8 = 138543362;
      int v9 = v7;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Restarting thread network after call end", (uint8_t *)&v8, 0xCu);
    }
    [(HMDHome *)v5 startThreadNetwork:1];
  }
}

- (void)onThreadNetworkPeripheralDeviceNodeTypeChange:(id)a3
{
  id v3 = (void *)MEMORY[0x1E4F28EB8];
  id v4 = a3;
  id v5 = [v3 defaultCenter];
  [v5 postNotificationName:@"HMDHomeThreadNetworkPeripheralDeviceNodeTypeChangedNotification" object:v4];
}

- (void)onThreadNetworkWakeOnDeviceConnectionStateChange:(id)a3
{
  id v3 = (void *)MEMORY[0x1E4F28EB8];
  id v4 = a3;
  id v5 = [v3 defaultCenter];
  [v5 postNotificationName:@"HMDHomeThreadNetworkWakeOnConnectionStateChangeNotification" object:v4];
}

- (void)onThreadNetworkNodeTypeStateChange:(int64_t)a3
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if ([(HMDHome *)self threadNetworkNodeType] != a3)
  {
    id v5 = (void *)MEMORY[0x1D9452090]();
    BOOL v6 = self;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v8 = HMFGetLogIdentifier();
      int v10 = 138543618;
      int v11 = v8;
      __int16 v12 = 2048;
      int64_t v13 = a3;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Thread network node type changed to %ld", (uint8_t *)&v10, 0x16u);
    }
    [(HMDHome *)v6 setThreadNetworkNodeType:a3];
    int v9 = [MEMORY[0x1E4F28EB8] defaultCenter];
    [v9 postNotificationName:@"HMDHomeThreadNetworkNodeTypeChangeNotification" object:v6];
  }
}

- (void)onThreadNetworkConnectionStateChange:(int64_t)a3
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if ([(HMDHome *)self threadNetworkConnectionState] != a3)
  {
    id v5 = (void *)MEMORY[0x1D9452090]();
    BOOL v6 = self;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v8 = HMFGetLogIdentifier();
      int v10 = 138543618;
      int v11 = v8;
      __int16 v12 = 2048;
      int64_t v13 = a3;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Thread network connection state changed to %ld", (uint8_t *)&v10, 0x16u);
    }
    [(HMDHome *)v6 setThreadNetworkConnectionState:a3];
    int v9 = [MEMORY[0x1E4F28EB8] defaultCenter];
    [v9 postNotificationName:@"HMDHomeThreadNetworkConnectionStateChangeNotification" object:v6];
  }
}

- (void)connectToThreadAccessoryWithExtendedMACAddress:(id)a3 completion:(id)a4
{
  id v5 = a3;
  id v6 = a4;
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled()
    && (+[HMDDeviceCapabilities deviceCapabilities],
        id v7 = objc_claimAutoreleasedReturnValue(),
        char v8 = [v7 supportsThreadService],
        v7,
        (v8 & 1) != 0))
  {
    int v9 = +[HMDThreadResidentCommissioner sharedCommissioner];
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    id v10[2] = __98__HMDHome_ThreadResidentCommissioning__connectToThreadAccessoryWithExtendedMACAddress_completion___block_invoke;
    void v10[3] = &unk_1E6A19358;
    id v11 = v6;
    [v9 connectToThreadAccessoryWithExtendedMACAddress:v5 completion:v10];
  }
  else
  {
    int v9 = [MEMORY[0x1E4F28C58] hmErrorWithCode:48];
    (*((void (**)(id, void *))v6 + 2))(v6, v9);
  }
}

uint64_t __98__HMDHome_ThreadResidentCommissioning__connectToThreadAccessoryWithExtendedMACAddress_completion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

- (void)_unjoinThreadNetworkWithCompletion:(id)a3
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = (void *)MEMORY[0x1D9452090]();
  id v7 = self;
  char v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = HMFGetLogIdentifier();
    int v10 = [(HMDHome *)v7 threadNetworkID];
    *(_DWORD *)buf = 138543618;
    uint64_t v15 = v9;
    __int16 v16 = 2112;
    uint64_t v17 = v10;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Request to unjoin previous thread network: %@", buf, 0x16u);
  }
  [(HMDHome *)v7 setThreadNetworkID:@"770E5B2E-0BAD-0BAD-0BAD-EE86505EFF8F"];
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  void v12[2] = __75__HMDHome_ThreadResidentCommissioning___unjoinThreadNetworkWithCompletion___block_invoke;
  v12[3] = &unk_1E6A17D78;
  void v12[4] = v7;
  id v13 = v4;
  id v11 = v4;
  [(HMDHome *)v7 _stopThreadNetworkWithCompletion:v12];
}

void __75__HMDHome_ThreadResidentCommissioning___unjoinThreadNetworkWithCompletion___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  id v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      char v8 = HMFGetLogIdentifier();
      int v15 = 138543618;
      __int16 v16 = v8;
      __int16 v17 = 2112;
      id v18 = v3;
      int v9 = "%{public}@Failed to leave previous thread network: %@";
      int v10 = v7;
      os_log_type_t v11 = OS_LOG_TYPE_ERROR;
      uint32_t v12 = 22;
LABEL_6:
      _os_log_impl(&dword_1D49D5000, v10, v11, v9, (uint8_t *)&v15, v12);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    char v8 = HMFGetLogIdentifier();
    int v15 = 138543362;
    __int16 v16 = v8;
    int v9 = "%{public}@Successfully left previous thread network";
    int v10 = v7;
    os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
    uint32_t v12 = 12;
    goto LABEL_6;
  }

  (*(void (**)(void, id, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v3, v13, v14);
}

- (void)_stopThreadNetworkWithCompletion:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  [(HMDHome *)self setThreadNetworkShouldRestartOnNetworkChange:0];
  [(HMDHome *)self _incrementCurrentSequenceNumber];
  id v6 = +[HMDThreadResidentCommissioner sharedCommissioner];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = __73__HMDHome_ThreadResidentCommissioning___stopThreadNetworkWithCompletion___block_invoke;
  void v8[3] = &unk_1E6A17D78;
  void v8[4] = self;
  id v9 = v4;
  id v7 = v4;
  [v6 stopThreadNetworkWithCompletion:v8];
}

void __73__HMDHome_ThreadResidentCommissioning___stopThreadNetworkWithCompletion___block_invoke(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 _unregisterForThreadNetworkEvents];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

- (void)stopThreadNetworkWithCompletion:(BOOL)a3 completion:(id)a4
{
  id v5 = a4;
  id v6 = [(HMDHome *)self workQueue];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = __83__HMDHome_ThreadResidentCommissioning__stopThreadNetworkWithCompletion_completion___block_invoke;
  void v8[3] = &unk_1E6A19530;
  void v8[4] = self;
  id v9 = v5;
  id v7 = v5;
  dispatch_async(v6, v8);
}

void __83__HMDHome_ThreadResidentCommissioning__stopThreadNetworkWithCompletion_completion___block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)MEMORY[0x1D9452090]([*(id *)(a1 + 32) setStartThreadNetworkInProgress:0]);
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = HMFGetLogIdentifier();
    id v6 = [*(id *)(a1 + 32) threadNetworkID];
    *(_DWORD *)buf = 138543618;
    os_log_type_t v11 = v5;
    __int16 v12 = 2112;
    uint64_t v13 = v6;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Stop thread network: %@", buf, 0x16u);
  }
  id v7 = *(void **)(a1 + 32);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = __83__HMDHome_ThreadResidentCommissioning__stopThreadNetworkWithCompletion_completion___block_invoke_57;
  void v8[3] = &unk_1E6A17D78;
  void v8[4] = v7;
  id v9 = *(id *)(a1 + 40);
  [v7 _stopThreadNetworkWithCompletion:v8];
}

void __83__HMDHome_ThreadResidentCommissioning__stopThreadNetworkWithCompletion_completion___block_invoke_57(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  id v7 = v6;
  if (v3)
  {
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    char v8 = HMFGetLogIdentifier();
    int v15 = 138543618;
    __int16 v16 = v8;
    __int16 v17 = 2112;
    id v18 = v3;
    id v9 = "%{public}@Failed to stop thread network: %@";
    int v10 = v7;
    os_log_type_t v11 = OS_LOG_TYPE_ERROR;
    uint32_t v12 = 22;
  }
  else
  {
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    char v8 = HMFGetLogIdentifier();
    int v15 = 138543362;
    __int16 v16 = v8;
    id v9 = "%{public}@Successfully stopped thread network";
    int v10 = v7;
    os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
    uint32_t v12 = 12;
  }
  _os_log_impl(&dword_1D49D5000, v10, v11, v9, (uint8_t *)&v15, v12);

LABEL_7:
  uint64_t v13 = _Block_copy(*(const void **)(a1 + 40));
  uint64_t v14 = v13;
  if (v13) {
    (*((void (**)(void *))v13 + 2))(v13);
  }
}

- (void)stopThreadNetwork:(BOOL)a3
{
}

- (void)_startThreadNetworkWithCompletion:(id)a3
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v4 = (void (**)(id, void *))a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled())
  {
    id v6 = (void *)MEMORY[0x1D9452090]();
    id v7 = self;
    char v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = HMFGetLogIdentifier();
      int v11 = 138543618;
      uint32_t v12 = v9;
      __int16 v13 = 2112;
      uint64_t v14 = v7;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Thread start starting for home %@", (uint8_t *)&v11, 0x16u);
    }
    [(HMDHome *)v7 setStartThreadNetworkInProgress:1];
    [(HMDHome *)v7 setThreadNetworkShouldRestartOnNetworkChange:1];
    [(HMDHome *)v7 _startThreadNetworkOnIOSWithCompletion:v4];
  }
  else
  {
    int v10 = [MEMORY[0x1E4F28C58] hmErrorWithCode:48];
    v4[2](v4, v10);
  }
}

- (void)_startThreadNetworkOnIOSWithCompletion:(id)a3
{
  id v4 = a3;
  v20[0] = 0;
  v20[1] = v20;
  id v20[2] = 0x2020000000;
  char v21 = 0;
  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke;
  aBlock[3] = &unk_1E6A15D18;
  objc_copyWeak(&v18, &location);
  __int16 v17 = v20;
  id v5 = v4;
  id v16 = v5;
  id v6 = _Block_copy(aBlock);
  if (![(HMDHome *)self _overrideStartThreadTimeout])
  {
    dispatch_time_t v7 = dispatch_time(0, 20000000000);
    char v8 = [(HMDHome *)self workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_2;
    block[3] = &unk_1E6A186E0;
    id v14 = v6;
    dispatch_after(v7, v8, block);
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  id v10[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_3;
  void v10[3] = &unk_1E6A16F80;
  objc_copyWeak(&v12, &location);
  id v9 = v6;
  id v11 = v9;
  [(HMDHome *)self _retrievePreferredNetworkWithCompletion:v10];

  objc_destroyWeak(&v12);
  objc_destroyWeak(&v18);
  objc_destroyWeak(&location);
  _Block_object_dispose(v20, 8);
}

void __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (v3)
  {
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
    {
      id v5 = (void *)MEMORY[0x1D9452090]();
      id v6 = WeakRetained;
      dispatch_time_t v7 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        char v8 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543874;
        long long v36 = v8;
        __int16 v37 = 2112;
        id v38 = v6;
        __int16 v39 = 2112;
        id v40 = v3;
        _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_ERROR, "%{public}@Error starting thread for home %@, resetting state: %@", buf, 0x20u);
      }
      if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
      {
        id v9 = (void *)MEMORY[0x1D9452090]();
        id v10 = v6;
        id v11 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          id v12 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543874;
          long long v36 = v12;
          __int16 v37 = 2112;
          id v38 = v10;
          __int16 v39 = 2112;
          id v40 = v3;
          _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Thread start completed for home %@, error = %@", buf, 0x20u);
        }
        [v10 setStartThreadNetworkInProgress:0];
        *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
        __int16 v13 = [v10 workQueue];
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_55;
        block[3] = &unk_1E6A19530;
        id v30 = *(id *)(a1 + 32);
        id v29 = v3;
        dispatch_async(v13, block);

        id v14 = v30;
LABEL_18:
      }
    }
  }
  else
  {
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
      goto LABEL_13;
    }
    uint64_t v15 = (void *)MEMORY[0x1D9452090]();
    id v16 = WeakRetained;
    __int16 v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      id v18 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      long long v36 = v18;
      __int16 v37 = 2112;
      id v38 = v16;
      _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_ERROR, "%{public}@Starting thread took longer than expected for home %@", buf, 0x16u);
    }
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
    {
LABEL_13:
      uint64_t v19 = [WeakRetained threadOperationalDataset];

      if (v19)
      {
        long long v20 = [WeakRetained threadOperationalDataset];
        v33[0] = MEMORY[0x1E4F143A8];
        v33[1] = 3221225472;
        void v33[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_52;
        v33[3] = &unk_1E6A119D8;
        void v33[4] = WeakRetained;
        long long v27 = *(_OWORD *)(a1 + 32);
        id v21 = (id)v27;
        long long v34 = v27;
        [WeakRetained _startThreadNetworkOnCommissionerForIOSWithOperationalDataset:v20 completion:v33];

        id v14 = (void *)v34;
      }
      else
      {
        BOOL v22 = (void *)MEMORY[0x1D9452090]();
        id v23 = WeakRetained;
        uint64_t v24 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          int v25 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          long long v36 = v25;
          __int16 v37 = 2112;
          id v38 = v23;
          _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_ERROR, "%{public}@Thread operational dataset not available. Cancelling thread start for home %@", buf, 0x16u);
        }
        [v23 setStartThreadNetworkInProgress:0];
        *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
        uint64_t v26 = [v23 workQueue];
        v31[0] = MEMORY[0x1E4F143A8];
        v31[1] = 3221225472;
        void v31[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_54;
        void v31[3] = &unk_1E6A186E0;
        id v32 = *(id *)(a1 + 32);
        dispatch_async(v26, v31);

        id v14 = v32;
      }
      goto LABEL_18;
    }
  }
}

void __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [MEMORY[0x1E4F28C58] hmErrorWithCode:8];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = WeakRetained;
  if (v3 || !WeakRetained)
  {
    id v6 = (void *)MEMORY[0x1D9452090]();
    id v7 = v5;
    char v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v28 = v9;
      __int16 v29 = 2112;
      id v30 = v3;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_ERROR, "%{public}@Unable to retrieve preferred thread network: %@", buf, 0x16u);
    }
    id v10 = [v7 threadOperationalDataset];

    if (!v10)
    {
      uint64_t v23 = *(void *)(a1 + 32);
      uint64_t v24 = [MEMORY[0x1E4F28C58] hmErrorWithCode:23];
      (*(void (**)(uint64_t, void *))(v23 + 16))(v23, v24);

      goto LABEL_12;
    }
    id v11 = (void *)MEMORY[0x1D9452090]();
    id v12 = v7;
    __int16 v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      id v14 = HMFGetLogIdentifier();
      uint64_t v15 = [v12 threadOperationalDataset];
      id v16 = [v12 threadNetworkID];
      __int16 v17 = [v12 home];
      *(_DWORD *)buf = 138544130;
      uint64_t v28 = v14;
      __int16 v29 = 2112;
      id v30 = v15;
      __int16 v31 = 2112;
      id v32 = v16;
      __int16 v33 = 2112;
      long long v34 = v17;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Using cached threadOperationalDataset %@ and uuid %@ from home %@", buf, 0x2Au);
    }
  }
  id v18 = (void *)MEMORY[0x1D9452090]();
  id v19 = v5;
  long long v20 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    id v21 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    uint64_t v28 = v21;
    __int16 v29 = 2112;
    id v30 = v19;
    _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@Successfully fetched preferred network, scheduling startThread for home %@", buf, 0x16u);
  }
  BOOL v22 = [v19 workQueue];
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  void v25[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_56;
  v25[3] = &unk_1E6A19530;
  void v25[4] = v19;
  id v26 = *(id *)(a1 + 32);
  dispatch_async(v22, v25);

LABEL_12:
}

void __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_56(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if ([*(id *)(a1 + 32) startThreadNetworkInProgress])
  {
    id v2 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v2();
  }
  else
  {
    id v3 = (void *)MEMORY[0x1D9452090]();
    id v4 = *(id *)(a1 + 32);
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = HMFGetLogIdentifier();
      uint64_t v7 = *(void *)(a1 + 32);
      int v10 = 138543618;
      id v11 = v6;
      __int16 v12 = 2112;
      uint64_t v13 = v7;
      _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Thread network stop was requested by the time preferred network was fetched to start Thread for home %@", (uint8_t *)&v10, 0x16u);
    }
    uint64_t v8 = *(void *)(a1 + 40);
    id v9 = [MEMORY[0x1E4F28C58] hmErrorWithCode:23];
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);
  }
}

void __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_52(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = *(id *)(a1 + 32);
    id v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      long long v20 = v7;
      __int16 v21 = 2112;
      id v22 = v3;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_ERROR, "%{public}@Unable to start thread with operational dataset: %@", buf, 0x16u);
    }
  }
  uint64_t v8 = (void *)MEMORY[0x1D9452090]();
  id v9 = *(id *)(a1 + 32);
  int v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    id v11 = HMFGetLogIdentifier();
    __int16 v12 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138543874;
    long long v20 = v11;
    __int16 v21 = 2112;
    id v22 = v12;
    __int16 v23 = 2112;
    id v24 = v3;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Thread start completed for home %@, error = %@", buf, 0x20u);
  }
  [*(id *)(a1 + 32) setStartThreadNetworkInProgress:0];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  uint64_t v13 = [*(id *)(a1 + 32) workQueue];
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  void v16[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_53;
  v16[3] = &unk_1E6A19530;
  id v14 = *(id *)(a1 + 40);
  id v17 = v3;
  id v18 = v14;
  id v15 = v3;
  dispatch_async(v13, v16);
}

void __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_54(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [MEMORY[0x1E4F28C58] hmErrorWithCode:48];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_55(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_53(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

- (BOOL)_overrideStartThreadTimeout
{
  return 0;
}

- (void)_retrievePreferredNetworkWithCompletion:(id)a3
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v26 = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Attempting to resolve request for Thread Network Credentials", buf, 0xCu);
  }
  id v9 = +[HMDThreadNetworkMetadataStore defaultStore];
  if (v9)
  {
    if ([(HMDHome *)v6 isOwnerUser])
    {
      objc_initWeak((id *)buf, v6);
      int v10 = [(HMDHome *)v6 threadOperationalDataset];
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = __80__HMDHome_ThreadResidentCommissioning___retrievePreferredNetworkWithCompletion___block_invoke;
      void v22[3] = &unk_1E6A0EB60;
      objc_copyWeak(&v24, (id *)buf);
      id v23 = v4;
      [v9 retrievePreferredNetwork:v10 completion:v22];

      objc_destroyWeak(&v24);
      objc_destroyWeak((id *)buf);
    }
    else
    {
      id v16 = (void *)MEMORY[0x1D9452090]();
      id v17 = v6;
      id v18 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        id v19 = HMFGetLogIdentifier();
        long long v20 = [(HMDHome *)v17 threadOperationalDataset];
        __int16 v21 = [(HMDHome *)v17 home];
        *(_DWORD *)buf = 138543874;
        id v26 = v19;
        __int16 v27 = 2112;
        uint64_t v28 = v20;
        __int16 v29 = 2112;
        id v30 = v21;
        _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@Shared user -  always use cached threadOperationalDataset %@ for home %@", buf, 0x20u);
      }
      (*((void (**)(id, void))v4 + 2))(v4, 0);
    }
  }
  else
  {
    id v11 = (void *)MEMORY[0x1D9452090]();
    __int16 v12 = v6;
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      id v14 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v26 = v14;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_ERROR, "%{public}@No thread network metadata store", buf, 0xCu);
    }
    id v15 = [MEMORY[0x1E4F28C58] hmErrorWithCode:58];
    (*((void (**)(id, void *))v4 + 2))(v4, v15);
  }
}

void __80__HMDHome_ThreadResidentCommissioning___retrievePreferredNetworkWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v14 = (void *)MEMORY[0x1D9452090]();
  id v15 = WeakRetained;
  if (!v12 && v9 && WeakRetained)
  {
    id v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      id v17 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138544130;
      __int16 v33 = v17;
      __int16 v34 = 2112;
      id v35 = v9;
      __int16 v36 = 2112;
      id v37 = v10;
      __int16 v38 = 2112;
      id v39 = v11;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, "%{public}@Successfully retrieved preferred thread credentials %@ with UUID %@ and operationalDataset %@ from network metadata store", buf, 0x2Au);
    }
    if (v11)
    {
      id v18 = (void *)[v11 copy];
      [v15 saveAndSyncWithThreadOperationalDataset:v18];

      id v19 = (void *)MEMORY[0x1D9452090]();
      id v20 = v15;
      __int16 v21 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v22 = v30 = v9;
        [v20 threadOperationalDataset];
        id v23 = v29 = v10;
        [v20 home];
        id v24 = v31 = v19;
        *(_DWORD *)buf = 138543874;
        __int16 v33 = v22;
        __int16 v34 = 2112;
        id v35 = v23;
        __int16 v36 = 2112;
        id v37 = v24;
        _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@threadOperationalDataset set to %@ for home %@", buf, 0x20u);

        id v19 = v31;
        id v10 = v29;

        id v9 = v30;
      }
    }
    if (v10)
    {
      uint64_t v25 = (void *)[v10 copy];
      [v15 setThreadNetworkID:v25];
    }
    id v26 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  else
  {
    __int16 v27 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v33 = v28;
      __int16 v34 = 2112;
      id v35 = v12;
      _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_ERROR, "%{public}@Unable to retrieve metadata for thread network: %@", buf, 0x16u);
    }
    id v26 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  v26();
}

- (void)_startThreadNetworkOnCommissionerForIOSWithOperationalDataset:(id)a3 completion:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v8);

  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __113__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerForIOSWithOperationalDataset_completion___block_invoke;
  aBlock[3] = &unk_1E6A13888;
  void aBlock[4] = self;
  id v9 = v6;
  id v19 = v9;
  id v10 = v7;
  id v20 = v10;
  id v11 = _Block_copy(aBlock);
  id v12 = [(HMDHome *)self homeManager];
  uint64_t v13 = [v12 chipDataSource];

  if (v13)
  {
    id v14 = [(HMDHome *)self home];
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    void v16[2] = __113__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerForIOSWithOperationalDataset_completion___block_invoke_2;
    v16[3] = &unk_1E6A16668;
    id v17 = v11;
    [v13 hasValidGeoOrPreferredNetworkForHome:v14 completion:v16];

    id v15 = v17;
  }
  else
  {
    id v15 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    (*((void (**)(void *, void, void *))v11 + 2))(v11, 0, v15);
  }
}

void __113__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerForIOSWithOperationalDataset_completion___block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = (void *)MEMORY[0x1D9452090]();
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    id v10 = [*(id *)(a1 + 32) threadNetworkID];
    uint64_t v11 = *(void *)(a1 + 40);
    id v12 = HMFBooleanToString();
    *(_DWORD *)buf = 138544386;
    id v22 = v9;
    __int16 v23 = 2112;
    id v24 = v10;
    __int16 v25 = 2112;
    uint64_t v26 = v11;
    __int16 v27 = 2112;
    uint64_t v28 = v12;
    __int16 v29 = 2112;
    id v30 = v5;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Start thread network with uuid: %@, credentials: %@, geoAvailable: %@, error %@", buf, 0x34u);
  }
  uint64_t v13 = +[HMDThreadResidentCommissioner sharedCommissioner];
  [v13 setGeoAvailable:a2];
  [*(id *)(a1 + 32) _registerForThreadNetworkEvents];
  uint64_t v14 = *(void *)(a1 + 40);
  id v15 = [*(id *)(a1 + 32) threadNetworkID];
  uint64_t v16 = [*(id *)(a1 + 32) isOwnerUser];
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  v18[2] = __113__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerForIOSWithOperationalDataset_completion___block_invoke_48;
  void v18[3] = &unk_1E6A18F68;
  id v17 = *(void **)(a1 + 40);
  void v18[4] = *(void *)(a1 + 32);
  id v19 = v17;
  id v20 = *(id *)(a1 + 48);
  [v13 startThreadNetworkWithOperationalDataset:v14 threadNetworkID:v15 isOwnerUser:v16 completion:v18];
}

uint64_t __113__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerForIOSWithOperationalDataset_completion___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __113__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerForIOSWithOperationalDataset_completion___block_invoke_48(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = *(id *)(a1 + 32);
    id v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v7 = HMFGetLogIdentifier();
      uint64_t v8 = [*(id *)(a1 + 32) threadNetworkID];
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138544130;
      id v17 = v7;
      __int16 v18 = 2112;
      id v19 = v8;
      __int16 v20 = 2112;
      uint64_t v21 = v9;
      __int16 v22 = 2112;
      id v23 = v3;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to attach to thread network %@ with operational data set%@: %@", buf, 0x2Au);
    }
  }
  id v10 = [*(id *)(a1 + 32) workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __113__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerForIOSWithOperationalDataset_completion___block_invoke_49;
  block[3] = &unk_1E6A193D0;
  void block[4] = *(void *)(a1 + 32);
  id v11 = *(id *)(a1 + 48);
  id v14 = v3;
  id v15 = v11;
  id v12 = v3;
  dispatch_async(v10, block);
}

uint64_t __113__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerForIOSWithOperationalDataset_completion___block_invoke_49(uint64_t a1)
{
  [*(id *)(a1 + 32) setStartThreadNetworkInProgress:0];
  [*(id *)(a1 + 32) _scheduleThreadNetworkUpdate];
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
  return v2();
}

- (void)_startThreadNetworkOnCommissionerWithCompletion:(id)a3
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  uint64_t v17 = 0;
  __int16 v18 = &v17;
  uint64_t v19 = 0x3032000000;
  __int16 v20 = __Block_byref_object_copy__14998;
  uint64_t v21 = __Block_byref_object_dispose__14999;
  id v22 = [(HMDHome *)self threadNetworkID];
  id v6 = (void *)MEMORY[0x1D9452090]();
  id v7 = self;
  HMFGetOSLogHandle();
  uint64_t v8 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = HMFGetLogIdentifier();
    uint64_t v10 = v18[5];
    *(_DWORD *)buf = 138543618;
    uint64_t v24 = v9;
    __int16 v25 = 2112;
    uint64_t v26 = v10;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Start thread network: %@", buf, 0x16u);
  }
  id v11 = +[HMDThreadResidentCommissioner sharedCommissioner];
  uint64_t v12 = v18[5];
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = __88__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerWithCompletion___block_invoke;
  v14[3] = &unk_1E6A07B98;
  void v14[4] = v7;
  id v13 = v4;
  id v15 = v13;
  uint64_t v16 = &v17;
  [v11 startThreadNetworkWithID:v12 completion:v14];

  _Block_object_dispose(&v17, 8);
}

void __88__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    if (v7 && ![v7 isEqualToString:v5])
    {
      uint64_t v8 = (void *)MEMORY[0x1D9452090]();
      id v9 = *(id *)(a1 + 32);
      uint64_t v10 = HMFGetOSLogHandle();
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        goto LABEL_12;
      }
      id v11 = HMFGetLogIdentifier();
      uint64_t v24 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      *(_DWORD *)buf = 138543874;
      id v32 = v11;
      __int16 v33 = 2112;
      id v34 = v5;
      __int16 v35 = 2112;
      id v36 = v24;
      uint64_t v12 = "%{public}@Attached to thread network %@, but expected to attach to %@";
      id v13 = v10;
      os_log_type_t v14 = OS_LOG_TYPE_ERROR;
      uint32_t v15 = 32;
    }
    else
    {
      uint64_t v8 = (void *)MEMORY[0x1D9452090]();
      id v9 = *(id *)(a1 + 32);
      uint64_t v10 = HMFGetOSLogHandle();
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_12;
      }
      id v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v32 = v11;
      __int16 v33 = 2112;
      id v34 = v5;
      uint64_t v12 = "%{public}@Attached to thread network %@";
      id v13 = v10;
      os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
      uint32_t v15 = 22;
    }
    _os_log_impl(&dword_1D49D5000, v13, v14, v12, buf, v15);

LABEL_12:
    if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) || (objc_msgSend(v5, "isEqualToString:") & 1) == 0) {
      [*(id *)(a1 + 32) setThreadNetworkID:v5];
    }
    id v23 = [*(id *)(a1 + 32) workQueue];
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    void v26[2] = __88__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerWithCompletion___block_invoke_46;
    v26[3] = &unk_1E6A19530;
    __int16 v25 = *(void **)(a1 + 40);
    void v26[4] = *(void *)(a1 + 32);
    id v22 = &v27;
    id v27 = v25;
    dispatch_async(v23, v26);
    goto LABEL_16;
  }
  uint64_t v16 = (void *)MEMORY[0x1D9452090]();
  id v17 = *(id *)(a1 + 32);
  __int16 v18 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    uint64_t v19 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543874;
    id v32 = v19;
    __int16 v33 = 2112;
    id v34 = 0;
    __int16 v35 = 2112;
    id v36 = v6;
    _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_ERROR, "%{public}@Failed to attach to thread network %@: %@", buf, 0x20u);
  }
  __int16 v20 = [*(id *)(a1 + 32) workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __88__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerWithCompletion___block_invoke_45;
  block[3] = &unk_1E6A193D0;
  uint64_t v21 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v22 = &v30;
  id v30 = v21;
  __int16 v29 = v6;
  dispatch_async(v20, block);

  id v23 = v29;
LABEL_16:
}

uint64_t __88__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerWithCompletion___block_invoke_45(uint64_t a1)
{
  [*(id *)(a1 + 32) setStartThreadNetworkInProgress:0];
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
  return v2();
}

uint64_t __88__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerWithCompletion___block_invoke_46(uint64_t a1)
{
  [*(id *)(a1 + 32) setStartThreadNetworkInProgress:0];
  [*(id *)(a1 + 32) _scheduleThreadNetworkUpdate];
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v2();
}

- (void)_retryStartThreadNetwork:(double)a3
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  double v6 = fabs(a3);
  double v7 = 30.0;
  if (a3 > 0.0)
  {
    double v8 = fmin(a3 + a3, 1800.0);
    if (v6 < 2.22044605e-16) {
      double v7 = 30.0;
    }
    else {
      double v7 = v8;
    }
  }
  id v9 = [(HMDHome *)self threadNetworkSequenceNumber];
  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __65__HMDHome_ThreadResidentCommissioning___retryStartThreadNetwork___block_invoke;
  aBlock[3] = &unk_1E6A07B70;
  objc_copyWeak(v20, &location);
  v20[1] = *(id *)&a3;
  id v20[2] = v9;
  void v20[3] = *(id *)&v7;
  uint64_t v10 = _Block_copy(aBlock);
  id v11 = v10;
  if (v6 < 2.22044605e-16 || a3 <= 0.0)
  {
    (*((void (**)(void *))v10 + 2))(v10);
  }
  else
  {
    id v13 = (void *)MEMORY[0x1D9452090]();
    os_log_type_t v14 = self;
    HMFGetOSLogHandle();
    uint32_t v15 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v23 = v16;
      __int16 v24 = 2048;
      unint64_t v25 = (unint64_t)a3;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_DEBUG, "%{public}@Next resident commissioning attempt will happen in %lu seconds", buf, 0x16u);
    }
    dispatch_time_t v17 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
    __int16 v18 = [(HMDHome *)v14 workQueue];
    dispatch_after(v17, v18, v11);
  }
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
}

void __65__HMDHome_ThreadResidentCommissioning___retryStartThreadNetwork___block_invoke(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!WeakRetained)
  {
    uint64_t v14 = MEMORY[0x1D9452090]();
    uint32_t v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      unint64_t v25 = v16;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_DEBUG, "%{public}@Home has died, resident commissioning canceled", buf, 0xCu);
    }
    dispatch_time_t v17 = (void *)v14;
    goto LABEL_17;
  }
  double v5 = *(double *)(a1 + 40);
  v4.n128_f64[0] = fabs(v5);
  BOOL v6 = v5 <= 0.0;
  v3.n128_u64[0] = 0x3CB0000000000000;
  if (!v6 && v4.n128_f64[0] >= 2.22044605e-16)
  {
    double v8 = (void *)MEMORY[0x1D9452090](v3, v4);
    id v9 = WeakRetained;
    uint64_t v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      unint64_t v25 = v11;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Resident commissioning timer expired", buf, 0xCu);
    }
  }
  uint64_t v12 = [WeakRetained threadNetworkSequenceNumber];
  uint64_t v13 = v12;
  if (v12 != *(void *)(a1 + 48))
  {
    uint64_t v18 = MEMORY[0x1D9452090]();
    id v19 = WeakRetained;
    __int16 v20 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      uint64_t v21 = HMFGetLogIdentifier();
      uint64_t v22 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138543874;
      unint64_t v25 = v21;
      __int16 v26 = 2048;
      uint64_t v27 = v22;
      __int16 v28 = 2048;
      uint64_t v29 = v13;
      _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@Resident commissioning sequence number no longer matches: %lu != %lu", buf, 0x20u);
    }
    dispatch_time_t v17 = (void *)v18;
LABEL_17:
    goto LABEL_18;
  }
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  void v23[2] = __65__HMDHome_ThreadResidentCommissioning___retryStartThreadNetwork___block_invoke_43;
  void v23[3] = &unk_1E6A07B48;
  void v23[4] = WeakRetained;
  v23[5] = v12;
  v23[6] = *(void *)(a1 + 56);
  [WeakRetained _startThreadNetworkWithCompletion:v23];
LABEL_18:
}

void __65__HMDHome_ThreadResidentCommissioning___retryStartThreadNetwork___block_invoke_43(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  __n128 v4 = v3;
  if (v3)
  {
    double v5 = [v3 domain];
    if ([v5 isEqualToString:*MEMORY[0x1E4F2D140]])
    {
      if ([v4 code] == 48)
      {

        goto LABEL_12;
      }
      uint64_t v13 = [v4 code];

      if (v13 == 23) {
        goto LABEL_12;
      }
    }
    else
    {
    }
    uint64_t v6 = [*(id *)(a1 + 32) threadNetworkSequenceNumber];
    if (v6 == *(void *)(a1 + 40))
    {
      [*(id *)(a1 + 32) _retryStartThreadNetwork:*(double *)(a1 + 48)];
    }
    else
    {
      uint64_t v7 = v6;
      double v8 = (void *)MEMORY[0x1D9452090]();
      id v9 = *(id *)(a1 + 32);
      uint64_t v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        id v11 = HMFGetLogIdentifier();
        uint64_t v12 = *(void *)(a1 + 40);
        int v14 = 138543874;
        uint32_t v15 = v11;
        __int16 v16 = 2048;
        uint64_t v17 = v12;
        __int16 v18 = 2048;
        uint64_t v19 = v7;
        _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Resident commissioning sequence number no longer matches: %lu != %lu", (uint8_t *)&v14, 0x20u);
      }
    }
  }
LABEL_12:
}

- (void)_incrementCurrentSequenceNumber
{
  id v3 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v3);

  unint64_t v4 = [(HMDHome *)self threadNetworkSequenceNumber];
  [(HMDHome *)self setThreadNetworkSequenceNumber:v4 + 1];
  if (v4 == -1)
  {
    unint64_t v5 = [(HMDHome *)self threadNetworkSequenceNumber] + 1;
    [(HMDHome *)self setThreadNetworkSequenceNumber:v5];
  }
}

- (void)startThreadNetwork:(BOOL)a3
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled()
    && (+[HMDDeviceCapabilities deviceCapabilities],
        unint64_t v5 = objc_claimAutoreleasedReturnValue(),
        char v6 = [v5 supportsThreadService],
        v5,
        (v6 & 1) != 0))
  {
    uint64_t v7 = (void *)MEMORY[0x1D9452090]();
    double v8 = self;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v19 = v10;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Starting resident commissioning timer", buf, 0xCu);
    }
    id v11 = [(HMDHome *)v8 workQueue];
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    void v16[2] = __59__HMDHome_ThreadResidentCommissioning__startThreadNetwork___block_invoke;
    v16[3] = &unk_1E6A19B58;
    void v16[4] = v8;
    BOOL v17 = a3;
    dispatch_async(v11, v16);
  }
  else
  {
    uint64_t v12 = (void *)MEMORY[0x1D9452090]();
    uint64_t v13 = self;
    int v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      uint32_t v15 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v19 = v15;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_DEBUG, "%{public}@Thread commissioning is not supported on this platform", buf, 0xCu);
    }
  }
}

void __59__HMDHome_ThreadResidentCommissioning__startThreadNetwork___block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v2 = [*(id *)(a1 + 32) homeManager];
  if ([v2 isStartThreadNetworkInProgress])
  {
    id v3 = (void *)MEMORY[0x1D9452090]();
    id v4 = *(id *)(a1 + 32);
    unint64_t v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      char v6 = HMFGetLogIdentifier();
      int v10 = 138543362;
      id v11 = v6;
      uint64_t v7 = "%{public}@Not starting thread network, start already in progress for another network";
LABEL_4:
      _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v10, 0xCu);
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 40)
      || ([*(id *)(a1 + 32) threadNetworkID],
          double v8 = objc_claimAutoreleasedReturnValue(),
          char v9 = [v2 isCurrentResidentDeviceRunningThreadNetwork:v8],
          v8,
          (v9 & 1) != 0))
    {
      [*(id *)(a1 + 32) _incrementCurrentSequenceNumber];
      [*(id *)(a1 + 32) _retryStartThreadNetwork:0.0];
      goto LABEL_9;
    }
    id v3 = (void *)MEMORY[0x1D9452090]();
    id v4 = *(id *)(a1 + 32);
    unint64_t v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      char v6 = HMFGetLogIdentifier();
      int v10 = 138543362;
      id v11 = v6;
      uint64_t v7 = "%{public}@Not starting thread network, not associated with thread network homes";
      goto LABEL_4;
    }
  }

LABEL_9:
}

- (void)_handleUnjoinThreadNetworkMessage:(id)a3
{
  id v4 = a3;
  unint64_t v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __74__HMDHome_ThreadResidentCommissioning___handleUnjoinThreadNetworkMessage___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __74__HMDHome_ThreadResidentCommissioning___handleUnjoinThreadNetworkMessage___block_invoke(uint64_t a1)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __74__HMDHome_ThreadResidentCommissioning___handleUnjoinThreadNetworkMessage___block_invoke_2;
  v2[3] = &unk_1E6A197F0;
  uint64_t v1 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  [v1 _unjoinThreadNetworkWithCompletion:v2];
}

uint64_t __74__HMDHome_ThreadResidentCommissioning___handleUnjoinThreadNetworkMessage___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) respondWithPayload:0 error:a2];
}

- (void)_handleJoinOrFormThreadNetworkMessage:(id)a3
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  int v5 = _os_feature_enabled_impl();
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled())
  {
    id v6 = +[HMDDeviceCapabilities deviceCapabilities];
    int v7 = [v6 supportsThreadService];

    if (((v7 | v5) & 1) == 0)
    {
LABEL_3:
      id v8 = (void *)MEMORY[0x1D9452090]();
      char v9 = self;
      int v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        id v11 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v23 = v11;
        _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_ERROR, "%{public}@Resident commissioning is disabled", buf, 0xCu);
      }
      id v12 = [MEMORY[0x1E4F28C58] hmfErrorWithCode:5];
      [v4 respondWithPayload:0 error:v12];
      goto LABEL_13;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  id v13 = [v4 messagePayload];

  if (v13)
  {
    int v14 = [v4 messagePayload];
    uint32_t v15 = [v14 objectForKey:*MEMORY[0x1E4F2D740]];

    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      __int16 v16 = v15;
    }
    else {
      __int16 v16 = 0;
    }
    id v13 = v16;
  }
  BOOL v17 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __78__HMDHome_ThreadResidentCommissioning___handleJoinOrFormThreadNetworkMessage___block_invoke;
  block[3] = &unk_1E6A19668;
  id v19 = v13;
  uint64_t v20 = self;
  id v21 = v4;
  id v12 = v13;
  dispatch_async(v17, block);

LABEL_13:
}

void __78__HMDHome_ThreadResidentCommissioning___handleJoinOrFormThreadNetworkMessage___block_invoke(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32))
  {
    id v2 = (void *)MEMORY[0x1D9452090]();
    id v3 = *(id *)(a1 + 40);
    id v4 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = HMFGetLogIdentifier();
      id v6 = [*(id *)(a1 + 40) threadNetworkID];
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543874;
      id v12 = v5;
      __int16 v13 = 2112;
      int v14 = v6;
      __int16 v15 = 2112;
      uint64_t v16 = v7;
      _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Updating thread network %@ -> %@ and starting", buf, 0x20u);
    }
    [*(id *)(a1 + 40) setThreadNetworkID:*(void *)(a1 + 32)];
  }
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __78__HMDHome_ThreadResidentCommissioning___handleJoinOrFormThreadNetworkMessage___block_invoke_41;
  void v9[3] = &unk_1E6A197F0;
  id v8 = *(void **)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  [v8 _startThreadNetworkWithCompletion:v9];
}

uint64_t __78__HMDHome_ThreadResidentCommissioning___handleJoinOrFormThreadNetworkMessage___block_invoke_41(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) respondWithPayload:0 error:a2];
}

- (void)_handleThreadNetworkCredentialsRequest:(id)a3
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  int v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    unint64_t v25 = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Attempting to resolve request for Thread Network Credentials", buf, 0xCu);
  }
  char v9 = +[HMDThreadNetworkMetadataStore defaultStore];
  if (v9)
  {
    objc_initWeak((id *)buf, v6);
    uint64_t v18 = MEMORY[0x1E4F143A8];
    uint64_t v19 = 3221225472;
    uint64_t v20 = __79__HMDHome_ThreadResidentCommissioning___handleThreadNetworkCredentialsRequest___block_invoke;
    id v21 = &unk_1E6A08060;
    objc_copyWeak(&v23, (id *)buf);
    id v22 = v4;
    id v10 = _Block_copy(&v18);
    id v11 = [(HMDHome *)v6 threadOperationalDataset];
    id v12 = [(HMDHome *)v6 home];
    objc_msgSend(v9, "retrieveMetadata:homeHasResident:completion:", v11, objc_msgSend(v12, "doesHomeContainResident"), v10);

    objc_destroyWeak(&v23);
    objc_destroyWeak((id *)buf);
  }
  else
  {
    __int16 v13 = (void *)MEMORY[0x1D9452090]();
    int v14 = v6;
    __int16 v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      unint64_t v25 = v16;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_ERROR, "%{public}@No thread network metadata store", buf, 0xCu);
    }
    uint64_t v17 = [MEMORY[0x1E4F28C58] hmfErrorWithCode:2];
    [v4 respondWithError:v17];
  }
}

void __79__HMDHome_ThreadResidentCommissioning___handleThreadNetworkCredentialsRequest___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v8 = (void *)MEMORY[0x1D9452090]();
  id v9 = WeakRetained;
  if (v5 && WeakRetained)
  {
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v27 = v11;
      __int16 v28 = 2112;
      id v29 = v5;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Successfully retrieved thread credentials %@ from network metadata store", buf, 0x16u);
    }
    id v25 = 0;
    id v12 = [MEMORY[0x1E4F28DB0] archivedDataWithRootObject:v5 requiringSecureCoding:1 error:&v25];
    id v13 = v25;
    if (v12)
    {
      int v14 = [MEMORY[0x1E4F1CA60] dictionary];
      [v14 setObject:v12 forKeyedSubscript:*MEMORY[0x1E4F2D738]];
      __int16 v15 = [v5 masterKey];
      [v14 setObject:v15 forKeyedSubscript:@"HMHomeThreadNetworkCredentialsMasterKeyMessageKey"];

      [*(id *)(a1 + 32) respondWithPayload:v14];
    }
    else
    {
      uint64_t v20 = (void *)MEMORY[0x1D9452090]();
      id v21 = v9;
      id v22 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        id v23 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v27 = v23;
        __int16 v28 = 2112;
        id v29 = v13;
        _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_ERROR, "%{public}@Unable to encode credentials: %@", buf, 0x16u);
      }
      uint64_t v24 = *(void **)(a1 + 32);
      int v14 = [MEMORY[0x1E4F28C58] hmfErrorWithCode:15];
      [v24 respondWithError:v14];
    }
  }
  else
  {
    uint64_t v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = HMFGetLogIdentifier();
      uint64_t v18 = [v9 threadNetworkID];
      *(_DWORD *)buf = 138543874;
      uint64_t v27 = v17;
      __int16 v28 = 2112;
      id v29 = v18;
      __int16 v30 = 2112;
      id v31 = v6;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_ERROR, "%{public}@Unable to retrieve metadata for thread network '%@': %@", buf, 0x20u);
    }
    uint64_t v19 = *(void **)(a1 + 32);
    id v13 = [MEMORY[0x1E4F28C58] hmfErrorWithCode:2];
    [v19 respondWithError:v13];
  }
}

- (void)handleCurrentWiFiNetworkChangedNotification:(id)a3
{
  id v4 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __84__HMDHome_ThreadResidentCommissioning__handleCurrentWiFiNetworkChangedNotification___block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v4, block);
}

void __84__HMDHome_ThreadResidentCommissioning__handleCurrentWiFiNetworkChangedNotification___block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v2 = [*(id *)(a1 + 32) threadNetworkShouldRestartOnNetworkChange];
  id v3 = (void *)MEMORY[0x1D9452090]();
  id v4 = *(id *)(a1 + 32);
  id v5 = HMFGetOSLogHandle();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
  if (v2)
  {
    if (v6)
    {
      uint64_t v7 = HMFGetLogIdentifier();
      int v9 = 138543362;
      id v10 = v7;
      _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Restarting Thread network upon WiFi network changed notification", (uint8_t *)&v9, 0xCu);
    }
    [*(id *)(a1 + 32) startThreadNetwork:1];
  }
  else
  {
    if (v6)
    {
      id v8 = HMFGetLogIdentifier();
      int v9 = 138543362;
      id v10 = v8;
      _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Ignoring WiFi network changed notification when Thread is not up", (uint8_t *)&v9, 0xCu);
    }
  }
}

- (void)_registerThreadResidentCommissioningMessageHandlers
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    id v3 = (void *)MEMORY[0x1D9452090]();
    id v4 = self;
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      BOOL v6 = HMFGetLogIdentifier();
      int v8 = 138543362;
      int v9 = v6;
      _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Registering for HMFWiFiManagerCurrentNetworkDidChangeNotification", (uint8_t *)&v8, 0xCu);
    }
    uint64_t v7 = [MEMORY[0x1E4F28EB8] defaultCenter];
    [v7 addObserver:v4 selector:sel_handleCurrentWiFiNetworkChangedNotification_ name:*MEMORY[0x1E4F653E8] object:0];
  }
}

- (BOOL)isCurrentDeviceThreadPreferredPrimaryResident
{
  int v2 = +[HMDDeviceCapabilities deviceCapabilities];
  char v3 = [v2 supportsThreadBorderRouter];

  return v3;
}

- (void)setThreadNetworkID:(id)a3
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = [(HMDHome *)self threadNetworkID];
  if (v6
    && (uint64_t v7 = (void *)v6,
        char v8 = [v5 isEqualToString:@"770E5B2E-0BAD-0BAD-0BAD-EE86505EFF8F"],
        v7,
        (v8 & 1) == 0))
  {
    int v14 = (void *)MEMORY[0x1D9452090]();
    __int16 v15 = self;
    uint64_t v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = HMFGetLogIdentifier();
      uint64_t v18 = [(HMDHome *)v15 unfilteredThreadNetworkID];
      int v19 = 138543874;
      uint64_t v20 = v17;
      __int16 v21 = 2112;
      id v22 = v5;
      __int16 v23 = 2112;
      uint64_t v24 = v18;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_ERROR, "%{public}@Unable to set threadNetworkID to %@. (current value=%@)", (uint8_t *)&v19, 0x20u);
    }
  }
  else if ([(HMDHome *)self attemptToUpdateThreadNetworkID:v5])
  {
    int v9 = +[HMDHomeThreadNetworkModel defaultModelForHome:self];
    [v9 setThreadNetworkID:v5];
    uint64_t v10 = [(HMDHome *)self backingStore];
    uint64_t v11 = NSStringFromSelector(a2);
    id v12 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    id v13 = [v10 transaction:v11 options:v12];

    [v13 add:v9 withMessage:0];
    [v13 run];
  }
}

- (void)_unregisterForThreadNetworkEvents
{
  objc_initWeak(&location, self);
  char v3 = [(HMDHome *)self workQueue];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __73__HMDHome_ThreadResidentCommissioning___unregisterForThreadNetworkEvents__block_invoke;
  void v4[3] = &unk_1E6A16E40;
  objc_copyWeak(&v5, &location);
  dispatch_async(v3, v4);

  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);
}

void __73__HMDHome_ThreadResidentCommissioning___unregisterForThreadNetworkEvents__block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  int v2 = WeakRetained;
  if (WeakRetained
    && ([WeakRetained threadNetworkPeriodicStatusReporter],
        char v3 = objc_claimAutoreleasedReturnValue(),
        v3,
        v3))
  {
    id v4 = [v2 threadNetworkPeriodicStatusReporter];
    [v4 unregisterForThreadNetworkEvents];

    [v2 setThreadNetworkPeriodicStatusReporter:0];
  }
  else
  {
    id v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = v2;
    uint64_t v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      char v8 = HMFGetLogIdentifier();
      int v9 = 138543362;
      uint64_t v10 = v8;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_ERROR, "%{public}@_unregisterForThreadNetworkEvents already unregistered", (uint8_t *)&v9, 0xCu);
    }
  }
}

- (void)_registerForThreadNetworkEvents
{
  objc_initWeak(&location, self);
  char v3 = [(HMDHome *)self workQueue];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __71__HMDHome_ThreadResidentCommissioning___registerForThreadNetworkEvents__block_invoke;
  void v4[3] = &unk_1E6A16E40;
  objc_copyWeak(&v5, &location);
  dispatch_async(v3, v4);

  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);
}

void __71__HMDHome_ThreadResidentCommissioning___registerForThreadNetworkEvents__block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  int v2 = WeakRetained;
  if (WeakRetained)
  {
    char v3 = [WeakRetained threadNetworkPeriodicStatusReporter];

    if (!v3)
    {
      id v4 = [[HMDThreadNetworkStatusReporter alloc] initWithHome:v2];
      [v2 setThreadNetworkPeriodicStatusReporter:v4];
    }
    id v5 = [v2 threadNetworkPeriodicStatusReporter];
    [v5 registerForThreadNetworkEvents];
  }
  else
  {
    id v6 = (void *)MEMORY[0x1D9452090]();
    uint64_t v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      char v8 = HMFGetLogIdentifier();
      int v9 = 138543362;
      uint64_t v10 = v8;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_ERROR, "%{public}@_registerForThreadNetworkEvents could not get a strong reference to self", (uint8_t *)&v9, 0xCu);
    }
  }
}

- (BOOL)isCurrentDeviceThreadBorderRouterCapable
{
  int v2 = +[HMDDeviceCapabilities deviceCapabilities];
  char v3 = [v2 supportsThreadBorderRouter];

  return v3;
}

- (BOOL)isThreadNetworkUp
{
  [(HMDHome *)self _scheduleThreadNetworkUpdate];
  return [(HMDHome *)self threadNetworkIsUp];
}

- (id)actionWithDictionaryRepresentation:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = v4;
  if (!v4)
  {
    int v9 = 0;
    goto LABEL_14;
  }
  id v6 = objc_msgSend(v4, "hmf_numberForKey:", @"kActionType");
  uint64_t v7 = v6;
  if (!v6)
  {
    uint64_t v10 = (void *)MEMORY[0x1D9452090]();
    uint64_t v11 = self;
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id v13 = HMFGetLogIdentifier();
      int v18 = 138543362;
      int v19 = v13;
      int v14 = "%{public}@Unable to determine the action type";
      __int16 v15 = v12;
      uint32_t v16 = 12;
      goto LABEL_11;
    }
LABEL_12:

    int v9 = 0;
    goto LABEL_13;
  }
  if ((unint64_t)[v6 integerValue] > 3
    || (objc_opt_class(), (id v8 = (id)objc_claimAutoreleasedReturnValue()) == 0))
  {
    uint64_t v10 = (void *)MEMORY[0x1D9452090]();
    uint64_t v11 = self;
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id v13 = HMFGetLogIdentifier();
      int v18 = 138543618;
      int v19 = v13;
      __int16 v20 = 2112;
      __int16 v21 = v7;
      int v14 = "%{public}@Unknown action type: %@";
      __int16 v15 = v12;
      uint32_t v16 = 22;
LABEL_11:
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v18, v16);

      goto LABEL_12;
    }
    goto LABEL_12;
  }
  int v9 = [v8 actionWithDictionaryRepresentation:v5 home:self];
LABEL_13:

LABEL_14:
  return v9;
}

- (id)createAppleMediaAccessoriesStateManagerWithIdentifier:(id)a3 messenger:(id)a4 metricsDispatcher:(id)a5
{
  id v7 = a5;
  id v8 = a4;
  id v9 = a3;
  uint64_t v10 = [[HMDAppleMediaAccessoriesStateManager alloc] initWithIdentifier:v9 messenger:v8 metricsDispatcher:v7];

  return v10;
}

- (void)configureAppleMediaAccessoriesStateManagerWithStateManagerWithFactory:(id)a3 messengerFactory:(id)a4 metricsDispatcherFactory:(id)a5
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = (void *)MEMORY[0x1D9452090]();
  id v12 = self;
  id v13 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    int v14 = HMFGetLogIdentifier();
    int v22 = 138543362;
    __int16 v23 = v14;
    _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Configuring apple media accessories state manager", (uint8_t *)&v22, 0xCu);
  }
  __int16 v15 = [(HMDHome *)v12 uuid];
  uint32_t v16 = [(HMDHome *)v12 msgDispatcher];
  uint64_t v17 = +[HMDMetricsManager sharedLogEventSubmitter];
  if (!v15)
  {
    _HMFPreconditionFailure();
    goto LABEL_8;
  }
  if (!v16)
  {
LABEL_8:
    _HMFPreconditionFailure();
LABEL_9:
    _HMFPreconditionFailure();
  }
  int v18 = (void *)v17;
  if (!v17) {
    goto LABEL_9;
  }
  int v19 = [v9 createAppleMediaAccessoriesStateMessengerWithIdentifier:v15 messageDispatcher:v16];
  __int16 v20 = [v10 createAppleMediaAccessoriesStateManagerMetricsDispatcherWithIdentifier:v15 logEventSubmitter:v18];
  __int16 v21 = [v8 createAppleMediaAccessoriesStateManagerWithIdentifier:v15 messenger:v19 metricsDispatcher:v20];
  [v19 setDelegate:v21];
  [v21 setDataSource:v12];
  [v19 registerForMessagesWithHome:v12];
  [v21 run];
  [(HMDHome *)v12 setAppleMediaAccessoriesStateManager:v21];
}

- (void)_auditChangedCharactersitics:(id)a3
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  id v4 = objc_msgSend(MEMORY[0x1E4F1CA80], "setWithCapacity:", objc_msgSend(v3, "count"));
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v33 objects:v38 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v34;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v34 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v33 + 1) + 8 * i);
        uint64_t v11 = [v10 notificationRegistrations];
        uint64_t v12 = [v11 count];

        if (!v12)
        {
          id v13 = [v10 accessory];
          int v14 = [v13 uuid];
          [v4 addObject:v14];

          if (([v13 isPrimary] & 1) == 0)
          {
            __int16 v15 = [v13 bridge];
            uint32_t v16 = [v15 identifiersForBridgedAccessories];
            [v4 unionSet:v16];
          }
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v33 objects:v38 count:16];
    }
    while (v7);
  }

  if ([v4 count] == 1)
  {
    uint64_t v17 = [v5 firstObject];
    int v18 = [v17 accessory];
    [(HMDHome *)self _auditAndDeregisterCharacteristicsForHAPAccessory:v18];
  }
  else
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    uint64_t v17 = [(HMDHome *)self accessories];
    uint64_t v19 = [v17 countByEnumeratingWithState:&v29 objects:v37 count:16];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = *(void *)v30;
      do
      {
        for (uint64_t j = 0; j != v20; ++j)
        {
          if (*(void *)v30 != v21) {
            objc_enumerationMutation(v17);
          }
          id v23 = *(id *)(*((void *)&v29 + 1) + 8 * j);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = 0;
          }
          id v25 = v24;

          if (v25)
          {
            uint64_t v26 = [v25 uuid];
            int v27 = [v4 containsObject:v26];

            if (v27) {
              [(HMDHome *)self _auditAndDeregisterCharacteristicsForHAPAccessory:v25];
            }
          }
        }
        uint64_t v20 = [v17 countByEnumeratingWithState:&v29 objects:v37 count:16];
      }
      while (v20);
    }
  }
}

- (void)_auditAndDeregisterCharacteristicsForHAPAccessory:(id)a3
{
  id v23 = self;
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  id v4 = [MEMORY[0x1E4F1CA48] array];
  id v5 = [MEMORY[0x1E4F28E78] string];
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v24 = v3;
  id obj = [v3 services];
  uint64_t v27 = [obj countByEnumeratingWithState:&v33 objects:v44 count:16];
  if (v27)
  {
    uint64_t v26 = *(void *)v34;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v34 != v26) {
          objc_enumerationMutation(obj);
        }
        uint64_t v28 = v6;
        uint64_t v7 = *(void **)(*((void *)&v33 + 1) + 8 * v6);
        long long v29 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        uint64_t v8 = objc_msgSend(v7, "characteristics", v23);
        uint64_t v9 = [v8 countByEnumeratingWithState:&v29 objects:v43 count:16];
        if (v9)
        {
          uint64_t v10 = v9;
          uint64_t v11 = *(void *)v30;
          do
          {
            for (uint64_t i = 0; i != v10; ++i)
            {
              if (*(void *)v30 != v11) {
                objc_enumerationMutation(v8);
              }
              id v13 = *(void **)(*((void *)&v29 + 1) + 8 * i);
              int v14 = [v13 notificationRegistrations];
              uint64_t v15 = [v14 count];

              if (!v15)
              {
                [v4 addObject:v13];
                uint32_t v16 = [v13 shortDescription];
                [v5 appendString:v16];

                [v5 appendString:@"\n"];
              }
            }
            uint64_t v10 = [v8 countByEnumeratingWithState:&v29 objects:v43 count:16];
          }
          while (v10);
        }

        uint64_t v6 = v28 + 1;
      }
      while (v28 + 1 != v27);
      uint64_t v27 = [obj countByEnumeratingWithState:&v33 objects:v44 count:16];
    }
    while (v27);
  }

  uint64_t v17 = (void *)MEMORY[0x1D9452090]();
  int v18 = v23;
  uint64_t v19 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    uint64_t v20 = HMFGetLogIdentifier();
    *(void *)buf = 0;
    *(void *)&buf[8] = 0;
    uint64_t v21 = [v24 uuid];

    if (v21)
    {
      int v22 = [v24 uuid];
      [v22 getUUIDBytes:buf];
    }
    else
    {
      *(_OWORD *)buf = *MEMORY[0x1E4F655A8];
    }
    long long v37 = *(_OWORD *)buf;
    *(_DWORD *)buf = 138544130;
    *(void *)&uint8_t buf[4] = v20;
    *(_WORD *)&unsigned char buf[12] = 1040;
    *(_DWORD *)&buf[14] = 16;
    __int16 v39 = 2096;
    uint64_t v40 = &v37;
    __int16 v41 = 2112;
    char v42 = v5;
    _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_INFO, "%{public}@Audit de-registering notifications accessory %{uuid_t}.16P characteristics %@", buf, 0x26u);
  }
  [v24 enableNotification:0 forCharacteristics:v4 message:0 clientIdentifier:0];
}

void __46__HMDHome_Light__updateLightProfilesSettings___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v19 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v7 = v5;
    if ([v5 count])
    {
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      id obj = *(id *)(a1 + 32);
      uint64_t v8 = [obj countByEnumeratingWithState:&v24 objects:v28 count:16];
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = *(void *)v25;
        do
        {
          for (uint64_t i = 0; i != v9; ++i)
          {
            if (*(void *)v25 != v10) {
              objc_enumerationMutation(obj);
            }
            uint64_t v12 = *(void **)(*((void *)&v24 + 1) + 8 * i);
            id v13 = [v12 workQueue];
            block[0] = MEMORY[0x1E4F143A8];
            block[1] = 3221225472;
            block[2] = __46__HMDHome_Light__updateLightProfilesSettings___block_invoke_15;
            block[3] = &unk_1E6A18668;
            void block[4] = v12;
            id v5 = v7;
            id v21 = v7;
            id v22 = WeakRetained;
            id v23 = v19;
            dispatch_async(v13, block);
          }
          uint64_t v9 = [obj countByEnumeratingWithState:&v24 objects:v28 count:16];
        }
        while (v9);
      }
    }
    else
    {
      int v14 = (void *)MEMORY[0x1D9452090]();
      uint64_t v15 = [WeakRetained lightLogCategory];
      uint32_t v16 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543874;
        long long v30 = v17;
        __int16 v31 = 2112;
        long long v32 = v7;
        __int16 v33 = 2112;
        id v34 = v19;
        _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_ERROR, "%{public}@Received empty response payload for light profile charactersitic read requests %@:%@", buf, 0x20u);
      }
      id v5 = v7;
    }
  }
}

void __46__HMDHome_Light__updateLightProfilesSettings___block_invoke_15(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v17 = 0;
  id v4 = [v2 updateSettingsWithReadCharacteristicResponsePayload:v3 error:&v17];
  id v5 = v17;
  uint64_t v6 = (void *)MEMORY[0x1D9452090]();
  uint64_t v7 = [*(id *)(a1 + 48) lightLogCategory];
  uint64_t v8 = HMFGetOSLogHandle();
  uint64_t v9 = v8;
  if (v4)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      uint64_t v11 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543874;
      id v19 = v10;
      __int16 v20 = 2112;
      uint64_t v21 = v11;
      __int16 v22 = 2112;
      id v23 = v4;
      uint64_t v12 = "%{public}@Successfully updated light profile settings %@:%@";
      id v13 = v9;
      os_log_type_t v14 = OS_LOG_TYPE_INFO;
LABEL_6:
      _os_log_impl(&dword_1D49D5000, v13, v14, v12, buf, 0x20u);
    }
  }
  else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = HMFGetLogIdentifier();
    uint64_t v15 = *(void *)(a1 + 32);
    uint32_t v16 = *(void **)(a1 + 56);
    *(_DWORD *)buf = 138543874;
    id v19 = v10;
    __int16 v20 = 2112;
    uint64_t v21 = v15;
    __int16 v22 = 2112;
    id v23 = v16;
    uint64_t v12 = "%{public}@Failed to update light profile settings %@:%@";
    id v13 = v9;
    os_log_type_t v14 = OS_LOG_TYPE_ERROR;
    goto LABEL_6;
  }
}

- (void)updateLightProfilesSettingsWithRequiresHomeNotificationsEnabled:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v5 = [MEMORY[0x1E4F1CA80] set];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v6 = [(HMDHome *)self accessories];
  uint64_t v7 = [v6 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v19;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v19 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(id *)(*((void *)&v18 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = 0;
        }
        id v13 = v12;

        if (v13)
        {
          os_log_type_t v14 = [v13 lightProfiles];
          uint64_t v15 = v14;
          if (v3)
          {
            uint64_t v16 = objc_msgSend(v14, "na_filter:", &__block_literal_global_44441);

            uint64_t v15 = (void *)v16;
          }
          id v17 = [v15 allObjects];
          [v5 addObjectsFromArray:v17];
        }
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v8);
  }

  [(HMDHome *)self updateLightProfilesSettings:v5];
}

BOOL __82__HMDHome_Light__updateLightProfilesSettingsWithRequiresHomeNotificationsEnabled___block_invoke(uint64_t a1, void *a2)
{
  int v2 = [a2 notificationEnabledCharacteristics];
  BOOL v3 = [v2 count] != 0;

  return v3;
}

- (id)createPrimaryResidentMessageRouterWithHomeUUID:(id)a3 messageDispatcher:(id)a4 metricsDispatcher:(id)a5
{
  id v7 = a5;
  id v8 = a4;
  id v9 = a3;
  uint64_t v10 = [[HMDPrimaryResidentMessageRouter alloc] initWithHomeUUID:v9 messageDispatcher:v8 metricsDispatcher:v7];

  return v10;
}

- (void)configurePrimaryResidentMessageRouterWithFactory:(id)a3 metricsDispatcherFactory:(id)a4
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)MEMORY[0x1D9452090]();
  id v9 = self;
  uint64_t v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    id v11 = HMFGetLogIdentifier();
    int v18 = 138543362;
    long long v19 = v11;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Configuring primary resident message router", (uint8_t *)&v18, 0xCu);
  }
  uint64_t v12 = [(HMDHome *)v9 msgDispatcher];
  id v13 = [(HMDHome *)v9 msgDispatcher];

  if (!v13) {
    _HMFPreconditionFailure();
  }
  os_log_type_t v14 = +[HMDMetricsManager sharedLogEventSubmitter];
  uint64_t v15 = [v7 createPrimaryResidentMessageRouterMetricsDispatcherWithLogEventSubmitter:v14];
  uint64_t v16 = [(HMDHome *)v9 uuid];
  id v17 = [v6 createPrimaryResidentMessageRouterWithHomeUUID:v16 messageDispatcher:v12 metricsDispatcher:v15];

  [v17 setDataSource:v9];
  [(HMDHome *)v9 setPrimaryResidentMessageRouter:v17];
}

- (id)createAccessorySettingsLocalMessageHandlerWithHomeUUID:(id)a3 languageValuesDataProvider:(id)a4
{
  id v5 = a4;
  id v6 = a3;
  id v7 = [[HMDAccessorySettingsLocalMessageHandler alloc] initWithHomeUUID:v6 languageValuesDataProvider:v5];

  return v7;
}

- (HMDAccessoryCount)accessoryCount
{
  int v2 = [[HMDAccessoryCount alloc] initWithHome:self];
  return v2;
}

- (id)createSiriEndpointProfileMessageHandlerWithHomeUUID:(id)a3
{
  id v3 = a3;
  id v4 = [[HMDSiriEndpointProfileMessageHandler alloc] initWithHomeUUID:v3];

  return v4;
}

- (id)createPrimaryResidentMessageRouterMetricsDispatcherWithLogEventSubmitter:(id)a3
{
  id v3 = a3;
  id v4 = [[HMDPrimaryResidentMessageRouterMetricsDispatcher alloc] initWithLogEventSubmitter:v3];

  return v4;
}

- (void)_reconfigureAccessoriesOnRouterRemovalWithCompletion:(id)a3
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v4 = (void (**)(void))a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = [(HMDHome *)self accessories];
  id v7 = objc_msgSend(v6, "hmf_objectsPassingTest:", &__block_literal_global_2);

  if ([v7 count])
  {
    id v8 = [(HMDHome *)self activeNetworkRouterAccessory];
    id v9 = [v8 networkRouterController];
    uint64_t v10 = [v9 wiFiSSID];

    uint64_t v11 = +[HMDWiFiManagementController sharedPSKForNetworkWithSSID:v10];
    uint64_t v12 = (void *)v11;
    __int16 v31 = (void *)v10;
    if (v10 && v11)
    {
      blocuint64_t k = v4;
      long long v30 = (void *)v11;
      id v13 = (void *)MEMORY[0x1D9452090]();
      os_log_type_t v14 = self;
      uint64_t v15 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        uint64_t v16 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543874;
        uint64_t v40 = v16;
        __int16 v41 = 2048;
        uint64_t v42 = [v7 count];
        __int16 v43 = 2112;
        int v44 = v31;
        _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@Reconfiguring %ld accessories on '%@' due to router removal", buf, 0x20u);
      }
      id v17 = dispatch_group_create();
      long long v34 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      id v18 = v7;
      uint64_t v19 = [v18 countByEnumeratingWithState:&v34 objects:v38 count:16];
      if (v19)
      {
        uint64_t v20 = v19;
        uint64_t v21 = *(void *)v35;
        do
        {
          for (uint64_t i = 0; i != v20; ++i)
          {
            if (*(void *)v35 != v21) {
              objc_enumerationMutation(v18);
            }
            id v23 = *(id *)(*((void *)&v34 + 1) + 8 * i);
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              uint64_t v24 = v23;
            }
            else {
              uint64_t v24 = 0;
            }
            id v25 = v24;

            long long v26 = [v25 wiFiManagementController];

            if (v26)
            {
              dispatch_group_enter(v17);
              long long v27 = objc_alloc_init(HMDWiFiReconfigurationLogEvent);
              [(HMDWiFiReconfigurationLogEvent *)v27 setCredentialType:2];
              v32[0] = MEMORY[0x1E4F143A8];
              v32[1] = 3221225472;
              void v32[2] = __80__HMDHome_WiFiManagement___reconfigureAccessoriesOnRouterRemovalWithCompletion___block_invoke_5;
              v32[3] = &unk_1E6A196E0;
              void v32[4] = v23;
              __int16 v33 = v17;
              [v26 reconfigureWithSSID:v31 PSK:v30 logEvent:v27 completion:v32];
            }
          }
          uint64_t v20 = [v18 countByEnumeratingWithState:&v34 objects:v38 count:16];
        }
        while (v20);
      }

      uint64_t v28 = [(HMDHome *)v14 workQueue];
      id v4 = block;
      dispatch_group_notify(v17, v28, block);

      uint64_t v12 = v30;
    }
    else
    {
      v4[2](v4);
    }
  }
  else
  {
    v4[2](v4);
  }
}

void __80__HMDHome_WiFiManagement___reconfigureAccessoriesOnRouterRemovalWithCompletion___block_invoke_5(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) saveWiFiUniquePreSharedKey:0 credentialType:2 * (a2 == 0)];
  id v3 = *(NSObject **)(a1 + 40);
  dispatch_group_leave(v3);
}

uint64_t __80__HMDHome_WiFiManagement___reconfigureAccessoriesOnRouterRemovalWithCompletion___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 wiFiCredentialType] == 3) {
    uint64_t v3 = isReconfigurationPossible(v2);
  }
  else {
    uint64_t v3 = 0;
  }

  return v3;
}

- (NSArray)accessoriesRequiringManualReconfigurationOnRouterRemoval
{
  id v2 = [(HMDHome *)self accessories];
  uint64_t v3 = objc_msgSend(v2, "hmf_objectsPassingTest:", &__block_literal_global_74889);

  return (NSArray *)v3;
}

uint64_t __83__HMDHome_WiFiManagement__accessoriesRequiringManualReconfigurationOnRouterRemoval__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 wiFiCredentialType] == 3) {
    uint64_t v3 = isReconfigurationPossible(v2) ^ 1;
  }
  else {
    uint64_t v3 = 0;
  }

  return v3;
}

- (id)playbackArchiveWithSessionIdentifier:(id)a3
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHome *)self actionSets];
  id v6 = [(HMDHome *)self triggerOwnedActionSets];
  id v7 = [v5 arrayByAddingObjectsFromArray:v6];

  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v8 = v7;
  uint64_t v25 = [v8 countByEnumeratingWithState:&v32 objects:v37 count:16];
  if (v25)
  {
    uint64_t v9 = *(void *)v33;
    long long v27 = v8;
    uint64_t v24 = *(void *)v33;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v33 != v9) {
          objc_enumerationMutation(v8);
        }
        uint64_t v26 = v10;
        uint64_t v11 = *(void **)(*((void *)&v32 + 1) + 8 * v10);
        long long v28 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        uint64_t v12 = objc_msgSend(v11, "actions", v24);
        uint64_t v13 = [v12 countByEnumeratingWithState:&v28 objects:v36 count:16];
        if (v13)
        {
          uint64_t v14 = v13;
          uint64_t v15 = *(void *)v29;
          while (2)
          {
            for (uint64_t i = 0; i != v14; ++i)
            {
              if (*(void *)v29 != v15) {
                objc_enumerationMutation(v12);
              }
              id v17 = *(id *)(*((void *)&v28 + 1) + 8 * i);
              objc_opt_class();
              if (objc_opt_isKindOfClass()) {
                id v18 = v17;
              }
              else {
                id v18 = 0;
              }
              id v19 = v18;

              uint64_t v20 = [v19 playbackArchive];
              uint64_t v21 = [v20 playbackSessionIdentifier];
              char v22 = [v21 isEqualToString:v4];

              if (v22)
              {

                id v8 = v27;
                goto LABEL_22;
              }
            }
            uint64_t v14 = [v12 countByEnumeratingWithState:&v28 objects:v36 count:16];
            if (v14) {
              continue;
            }
            break;
          }
        }

        uint64_t v10 = v26 + 1;
        id v8 = v27;
        uint64_t v9 = v24;
      }
      while (v26 + 1 != v25);
      uint64_t v20 = 0;
      uint64_t v25 = [v27 countByEnumeratingWithState:&v32 objects:v37 count:16];
    }
    while (v25);
  }
  else
  {
    uint64_t v20 = 0;
  }
LABEL_22:

  return v20;
}

- (id)createAccessorySettingsMessengerWithMessageTargetUUID:(id)a3 messageDispatcher:(id)a4 messageRouter:(id)a5 messageHandler:(id)a6 logEventSubmitter:(id)a7 legacyMessageReceiver:(id)a8
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  uint64_t v20 = (void *)MEMORY[0x1D9452090]();
  uint64_t v21 = self;
  char v22 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    id v23 = HMFGetLogIdentifier();
    int v26 = 138544386;
    long long v27 = v23;
    __int16 v28 = 2112;
    id v29 = v14;
    __int16 v30 = 2112;
    id v31 = v15;
    __int16 v32 = 2112;
    id v33 = v16;
    __int16 v34 = 2112;
    id v35 = v17;
    _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_INFO, "%{public}@Creating accessory settings messenger with message target UUID: %@ message dispatcher: %@ message router: %@ message handler: %@", (uint8_t *)&v26, 0x34u);
  }
  uint64_t v24 = [[HMDAccessorySettingsMessenger alloc] initWithMessageTargetUUID:v14 messageDispatcher:v15 messageRouter:v16 messageHandler:v17 logEventSubmitter:v18 legacyMessageReceiver:v19];

  return v24;
}

- (void)configureAccessorySettingsMessengerWithMessengerFactory:(id)a3 messageHandlerFactory:(id)a4
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)MEMORY[0x1D9452090]();
  uint64_t v9 = self;
  uint64_t v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v31 = v11;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Configuring accessory settings messenger", buf, 0xCu);
  }
  uint64_t v12 = [(HMDHome *)v9 msgDispatcher];
  uint64_t v13 = [(HMDHome *)v9 accessoryMessageRouterViaPrimary];
  uint64_t v14 = [(HMDHome *)v9 unifiedLanguageValueListSettingDataProvider];
  if (!v12)
  {
    _HMFPreconditionFailure();
    goto LABEL_8;
  }
  if (!v13)
  {
LABEL_8:
    _HMFPreconditionFailure();
LABEL_9:
    _HMFPreconditionFailure();
  }
  id v15 = (void *)v14;
  if (!v14) {
    goto LABEL_9;
  }
  id v16 = [(HMDHome *)v9 uuid];
  id v17 = [v7 createAccessorySettingsLocalMessageHandlerWithHomeUUID:v16 languageValuesDataProvider:v15];

  [v17 setDataSource:v9];
  id v18 = [(HMDHome *)v9 homeManager];
  id v19 = [v18 compositeSettingsControllerManager];
  [v17 setDelegate:v19];

  uint64_t v20 = (void *)MEMORY[0x1E4F2E618];
  uint64_t v21 = [(HMDHome *)v9 uuid];
  char v22 = [v20 legacyMessageTargetUUIDWithHomeUUID:v21];

  id v23 = [[HMDAccessorySettingsLegacyMessageReceiver alloc] initWithMessageTargetUUID:v22 messageDispatcher:v12];
  uint64_t v24 = [(HMDHome *)v9 accessorySettingsMessengerMessageTargetUUID];
  [(HMDHome *)v9 logEventSubmitter];
  __int16 v28 = v15;
  v26 = uint64_t v25 = v6;
  [v25 createAccessorySettingsMessengerWithMessageTargetUUID:v24 messageDispatcher:v12 messageRouter:v13 messageHandler:v17 logEventSubmitter:v26 legacyMessageReceiver:v23];
  long long v27 = v29 = v7;

  [(HMDAccessorySettingsLegacyMessageReceiver *)v23 setMessenger:v27];
  [v27 registerForMessagesWithHome:v9];
  [(HMDHome *)v9 setAccessorySettingsMessenger:v27];
}

- (id)accessorySettingsMessengerMessageTargetUUID
{
  id v2 = (void *)MEMORY[0x1E4F2E618];
  uint64_t v3 = [(HMDHome *)self uuid];
  id v4 = [v2 messageTargetUUIDWithHomeUUID:v3];

  return v4;
}

- (id)hubAccessories
{
  id v2 = [(HMDHome *)self appleMediaAccessories];
  uint64_t v3 = objc_msgSend(v2, "na_filter:", &__block_literal_global_102717);

  return v3;
}

uint64_t __51__HMDHome_SiriEndpointHubProviding__hubAccessories__block_invoke(uint64_t a1, void *a2)
{
  return [a2 supportsHomeHub];
}

- (id)createAppleMediaAccessoriesStateMessengerWithIdentifier:(id)a3 messageDispatcher:(id)a4
{
  id v5 = a4;
  id v6 = a3;
  id v7 = [[HMDAppleMediaAccessoriesStateMessenger alloc] initWithIdentifier:v6 messageDispatcher:v5];

  return v7;
}

- (BOOL)isCarPlayAccessAllowedForActionSet:(id)a3 withMessage:(id)a4 fromSource:(unint64_t)a5
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  if ((-[HMDHome isMessageEntitledForCarPlayAccess:source:]((uint64_t)self, v9, a5) & 1) == 0)
  {
    uint64_t v12 = (void *)MEMORY[0x1D9452090]();
    uint64_t v13 = self;
    uint64_t v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      id v15 = HMFGetLogIdentifier();
      *(_DWORD *)id v17 = 138543874;
      *(void *)&void v17[4] = v15;
      *(_WORD *)&v17[12] = 2112;
      *(void *)&v17[14] = v8;
      *(_WORD *)&v17[22] = 2048;
      id v18 = (void *)a5;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@CarPlay access is not allowed for action set: %@ because message from source: %lu does not have sufficient entitlements", v17, 0x20u);
    }
    goto LABEL_9;
  }
  if (self)
  {
    if ([(HMDHome *)self homeLocation] == 1 || [(HMDHome *)self homeLocation] == 3)
    {
      uint64_t v10 = [v8 actions];
      uint64_t v11 = objc_msgSend(v10, "na_filter:", &__block_literal_global_105459);

      *(void *)id v17 = MEMORY[0x1E4F143A8];
      *(void *)&v17[8] = 3221225472;
      *(void *)&v17[16] = __55__HMDHome_CarPlay__isActionSetAllowedForCarPlayAccess___block_invoke_2;
      id v18 = &unk_1E6A0F178;
      id v19 = self;
      LOBYTE(self) = objc_msgSend(v11, "na_all:", v17);

      goto LABEL_10;
    }
LABEL_9:
    LOBYTE(self) = 0;
  }
LABEL_10:

  return (char)self;
}

- (uint64_t)isMessageEntitledForCarPlayAccess:(uint64_t)a3 source:
{
  id v5 = a2;
  id v6 = v5;
  if (!a1) {
    goto LABEL_5;
  }
  if (a3 != 1)
  {
    if ([v5 isEntitledForSecureAccess])
    {
      a3 = [v6 isEntitledForSPIAccess];
      goto LABEL_6;
    }
LABEL_5:
    a3 = 0;
  }
LABEL_6:

  return a3;
}

uint64_t __55__HMDHome_CarPlay__isActionSetAllowedForCarPlayAccess___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  id v4 = v3;
  if (v2 && ![v3 type])
  {
    id v6 = v4;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v7 = v6;
    }
    else {
      id v7 = 0;
    }
    id v8 = v7;

    if (v8)
    {
      id v9 = [v8 characteristic];
      uint64_t v5 = -[HMDHome isCharacteristicAllowedForCarPlayAccess:](v9);
    }
    else
    {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

- (uint64_t)isCharacteristicAllowedForCarPlayAccess:(void *)a1
{
  uint64_t v1 = [a1 service];
  uint64_t v2 = [v1 serviceType];

  if ([v2 isEqualToString:*MEMORY[0x1E4F2DE38]]) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = [v2 isEqualToString:*MEMORY[0x1E4F2DE88]];
  }

  return v3;
}

uint64_t __55__HMDHome_CarPlay__isActionSetAllowedForCarPlayAccess___block_invoke(uint64_t a1, void *a2)
{
  return [a2 isUnsecuringAction];
}

- (BOOL)isCarPlayAccessAllowedForCharacteristic:(id)a3 withMessage:(id)a4 fromSource:(unint64_t)a5
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  if ((-[HMDHome isMessageEntitledForCarPlayAccess:source:]((uint64_t)self, v9, a5) & 1) == 0)
  {
    uint64_t v11 = (void *)MEMORY[0x1D9452090]();
    uint64_t v12 = self;
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      int v16 = 138543874;
      id v17 = v14;
      __int16 v18 = 2112;
      id v19 = v8;
      __int16 v20 = 2048;
      unint64_t v21 = a5;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@CarPlay access is not allowed for characteristic: %@ because message from source: %lu does not have sufficient entitlements", (uint8_t *)&v16, 0x20u);
    }
    goto LABEL_9;
  }
  if (!self || [(HMDHome *)self homeLocation] != 1 && [(HMDHome *)self homeLocation] != 3)
  {
LABEL_9:
    char v10 = 0;
    goto LABEL_10;
  }
  char v10 = -[HMDHome isCharacteristicAllowedForCarPlayAccess:](v8);
LABEL_10:

  return v10;
}

- (BOOL)synchronouslyFetchIsConnectedToCarPlayNetwork
{
  uint64_t v2 = [(HMDHome *)self carPlayDataSource];
  char v3 = [v2 synchronouslyFetchIsConnectedToCarPlayNetwork];

  return v3;
}

- (BOOL)synchronouslyFetchIsCarPlayConnectedStatus
{
  uint64_t v2 = [(HMDHome *)self carPlayDataSource];
  char v3 = [v2 synchronouslyFetchIsCarPlayConnectedStatus];

  return v3;
}

- (NSDictionary)assistantObject
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  char v3 = [(HMDHome *)self name];

  if (v3)
  {
    v15[0] = *MEMORY[0x1E4F96FD0];
    id v4 = [(HMDHome *)self name];
    v15[1] = v4;
    void v14[2] = @"objectIdentifier";
    uint64_t v5 = [(HMDHome *)self urlString];
    void v15[2] = v5;
    v14[3] = @"objectHomeIdentifier";
    id v6 = [(HMDHome *)self urlString];
    void v14[4] = @"objectReference";
    v15[3] = v6;
    void v15[4] = self;
    id v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v15 forKeys:v14 count:5];
  }
  else
  {
    id v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      char v10 = HMFGetLogIdentifier();
      uint64_t v11 = [(HMDHome *)self uuid];
      uint64_t v12 = [v11 UUIDString];
      *(_DWORD *)buf = 138543618;
      id v17 = v10;
      __int16 v18 = 2112;
      id v19 = v12;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Skipping because home.name is nil for %@", buf, 0x16u);
    }
    id v7 = 0;
  }
  return (NSDictionary *)v7;
}

- (NSString)urlString
{
  uint64_t v2 = [(HMDHome *)self uuid];
  char v3 = hm_assistantIdentifier();

  return (NSString *)v3;
}

- (id)multiUserSettings
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v34 = 0;
  id v35 = &v34;
  uint64_t v36 = 0x2020000000;
  uint64_t v37 = 0;
  uint64_t v30 = 0;
  id v31 = &v30;
  uint64_t v32 = 0x2020000000;
  uint64_t v33 = 0;
  uint64_t v2 = [(HMDHome *)self users];
  uint64_t v3 = [v2 count];
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v4 = v2;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v26 objects:v38 count:16];
  uint64_t v19 = v3;
  if (v5)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)v27;
    uint64_t v24 = 0;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v27 != v8) {
          objc_enumerationMutation(v4);
        }
        char v10 = *(void **)(*((void *)&v26 + 1) + 8 * v9);
        if (([v10 isOwner] & 1) == 0)
        {
          uint64_t v11 = [v10 sharedSettingValuesByKeyPath];
          uint64_t v12 = (void *)[v11 mutableCopy];

          if ([v12 count])
          {
            v25[0] = MEMORY[0x1E4F143A8];
            v25[1] = 3221225472;
            void v25[2] = __54__HMDHome_MultiUserSettingsMetrics__multiUserSettings__block_invoke;
            v25[3] = &unk_1E6A0FF38;
            void v25[4] = &v34;
            void v25[5] = &v30;
            [v12 enumerateKeysAndObjectsUsingBlock:v25];
            ++v7;
          }
          else
          {
            uint64_t v13 = [v10 cloudShareTrustManager];
            int v14 = [v13 isTrustConfigured];

            v6 += v14 ^ 1u;
            switch([v10 sharedUserSettingsLogEventBackingStoreControllerRunState])
            {
              case 0:
              case 1:
                ++v24;
                break;
              case 2:
                ++v21;
                break;
              case 3:
                ++v23;
                break;
              case 4:
                ++v22;
                break;
              case 5:
                ++v20;
                break;
              default:
                break;
            }
          }
        }
        ++v9;
      }
      while (v5 != v9);
      uint64_t v15 = [v4 countByEnumeratingWithState:&v26 objects:v38 count:16];
      uint64_t v5 = v15;
    }
    while (v15);
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v24 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }

  id v16 = objc_alloc(MEMORY[0x1E4F2E948]);
  id v17 = (void *)[v16 initWithNumSharedUsers:(v19 - 1) & ~((v19 - 1) >> 63) numUsersWithSettings:v7 numUsersWithIdentifyVoiceOff:v35[3] numUsersWithPlayBackInfluencesForYouOff:v31[3] numUsersCloudShareTrustNotConfigured:v6 numUsersSharedBackingStoreNotStarted:v24 numUsersSharedBackingStoreRunning:v21 numUsersSharedBackingStoreNotRunningDueToError:v23 numUsersSharedBackingStoreNotRunningDueToStopped:v22 numUsersSharedBackingStoreSharedZoneWaitingForShareInvitation:v20];

  _Block_object_dispose(&v30, 8);
  _Block_object_dispose(&v34, 8);
  return v17;
}

void __54__HMDHome_MultiUserSettingsMetrics__multiUserSettings__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v14 = a2;
  id v5 = a3;
  if ([v14 isEqualToString:@"shared.root.siri.identifyVoice"])
  {
    id v6 = v5;
    objc_opt_class();
    id v7 = (objc_opt_isKindOfClass() & 1) != 0 ? v6 : 0;
    id v8 = v7;

    int v9 = [v8 intValue];
    if (!v9) {
      ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    }
  }
  if ([v14 isEqualToString:@"shared.root.music.playbackInfluencesForYou"])
  {
    id v10 = v5;
    objc_opt_class();
    id v11 = (objc_opt_isKindOfClass() & 1) != 0 ? v10 : 0;
    id v12 = v11;

    int v13 = [v12 intValue];
    if (!v13) {
      ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    }
  }
}

- (void)_evaluateNetworkProtectionSupport
{
  uint64_t v2 = self;
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  uint64_t v3 = [(HMDHome *)self residentDeviceManager];
  id v4 = [v3 residentDevices];

  uint64_t v5 = [v4 countByEnumeratingWithState:&v63 objects:v82 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v64;
    while (2)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v64 != v7) {
          objc_enumerationMutation(v4);
        }
        int v9 = *(void **)(*((void *)&v63 + 1) + 8 * i);
        id v10 = [v9 device];
        if ([v9 isEnabled])
        {
          id v11 = [v9 capabilities];
          int v12 = [v11 supportsRouterManagement];

          if (v12)
          {
            uint64_t v13 = [(HMDHome *)v2 minimumNetworkRouterSupportHomeKitVersion];
            if (!v13) {
              goto LABEL_13;
            }
            id v14 = (void *)v13;
            uint64_t v15 = [v10 version];
            [(HMDHome *)v2 minimumNetworkRouterSupportHomeKitVersion];
            uint64_t v16 = v7;
            id v17 = v4;
            uint64_t v19 = v18 = v2;
            int v61 = [v15 isAtLeastVersion:v19];

            uint64_t v2 = v18;
            id v4 = v17;
            uint64_t v7 = v16;

            if (v61)
            {
LABEL_13:
              uint64_t v21 = (void *)MEMORY[0x1D9452090]();
              uint64_t v22 = v2;
              uint64_t v23 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v25 = uint64_t v24 = v2;
                *(_DWORD *)buf = 138543618;
                __int16 v73 = v25;
                __int16 v74 = 2112;
                uint64_t v75 = v9;
                _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_INFO, "%{public}@Found resident with router management support: %@", buf, 0x16u);

                uint64_t v2 = v24;
              }

              int v20 = 1;
              goto LABEL_16;
            }
          }
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v63 objects:v82 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
  int v20 = 0;
LABEL_16:

  long long v26 = [(HMDHome *)v2 activeNetworkRouterAccessory];

  BOOL v27 = [(HMDHome *)v2 _isNetworkRouterSupportEnabledForCurrentDevice];
  long long v28 = (void *)MEMORY[0x1D9452090]();
  long long v29 = v2;
  uint64_t v30 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
  {
    BOOL v31 = v27;
    uint64_t v32 = HMFGetLogIdentifier();
    uint64_t v33 = [(HMDHome *)v29 name];
    uint64_t v34 = HMFBooleanToString();
    id v35 = HMFBooleanToString();
    HMFBooleanToString();
    uint64_t v36 = v62 = v28;
    *(_DWORD *)buf = 138544386;
    __int16 v73 = v32;
    __int16 v74 = 2112;
    uint64_t v75 = v33;
    __int16 v76 = 2112;
    id v77 = v34;
    __int16 v78 = 2112;
    uint64_t v79 = v35;
    __int16 v80 = 2112;
    uint64_t v81 = v36;
    _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_INFO, "%{public}@Evaluating network protection support for home %@, Router Managing Device: %@, Active Network Router Accessory: %@, Router support enabled: %@", buf, 0x34u);

    long long v28 = v62;
    BOOL v27 = v31;
  }
  uint64_t v37 = [(HMDHome *)v29 minHomeKitVersionForAccessoryNetworkProtectionChange];
  if (v37)
  {
    uint64_t v38 = [(HMDHome *)v29 minHomeKitVersionForAccessoryNetworkProtectionChange];
    uint64_t v39 = +[HMDHomeKitVersion currentVersion];
    int v40 = [v38 isGreaterThanVersion:v39];
  }
  else
  {
    int v40 = 0;
  }

  BOOL v41 = [(HMDHome *)v29 isAdminUser];
  uint64_t v42 = 4;
  if (v41) {
    uint64_t v42 = 0;
  }
  if (!v26) {
    v42 |= 8uLL;
  }
  uint64_t v43 = v42 | v20 ^ 1u;
  if (!v27) {
    v43 |= 2uLL;
  }
  if (v40) {
    uint64_t v44 = v43 | 0x10;
  }
  else {
    uint64_t v44 = v43;
  }
  if ([(HMDHome *)v29 networkRouterSupportDisableReason] != v44)
  {
    [(HMDHome *)v29 setNetworkRouterSupportDisableReason:v44];
    [(HMDHome *)v29 setNetworkRouterSupport:[(HMDHome *)v29 deriveNetworkRouterSupport:v44]];
    unint64_t v45 = ([(HMDHome *)v29 networkRouterSupport] >> 2) & 1;
    uint64_t v46 = (void *)MEMORY[0x1E4F654B0];
    uint64_t v47 = *MEMORY[0x1E4F2D628];
    long long v48 = [(HMDHome *)v29 messageDestination];
    uint64_t v69 = *MEMORY[0x1E4F2D620];
    long long v49 = [NSNumber numberWithUnsignedInteger:v44];
    v71[0] = v49;
    uint64_t v70 = *MEMORY[0x1E4F2D1A8];
    uint64_t v50 = v70;
    uint64_t v51 = [NSNumber numberWithBool:v45];
    v71[1] = v51;
    uint64_t v52 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v71 forKeys:&v69 count:2];
    id v53 = [v46 messageWithName:v47 destination:v48 payload:v52];

    [v53 setRequiresSPIEntitlement];
    long long v54 = [(HMDHome *)v29 msgDispatcher];
    [v54 sendMessage:v53 completionHandler:0];

    long long v55 = (void *)MEMORY[0x1E4F654B0];
    long long v56 = [(HMDHome *)v29 messageDestination];
    uint64_t v67 = v50;
    uint64_t v57 = [NSNumber numberWithBool:v45];
    long long v68 = v57;
    id v58 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v68 forKeys:&v67 count:1];
    uint64_t v59 = [v55 messageWithName:v47 destination:v56 payload:v58];

    [v59 setRequiresNoSPIEntitlement];
    uint64_t v60 = [(HMDHome *)v29 msgDispatcher];
    [v60 sendMessage:v59 completionHandler:0];
  }
}

- (void)_requestRemoveClientConfigurationWithIdentifier:(id)a3
{
  location[3] = *(id *)MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self residentDeviceManager];
  uint64_t v6 = [v5 primaryResidentDevice];
  uint64_t v7 = [v6 device];

  if (v7)
  {
    id v8 = [HMDRemoteDeviceMessageDestination alloc];
    int v9 = [(HMDHome *)self uuid];
    id v10 = [(HMDRemoteDeviceMessageDestination *)v8 initWithTarget:v9 device:v7];

    id v11 = objc_alloc(MEMORY[0x1E4F654B0]);
    uint64_t v25 = @"HMDH.NetworkClientIdentifierMessageKey";
    id v26 = v4;
    int v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v26 forKeys:&v25 count:1];
    uint64_t v13 = (void *)[v11 initWithName:@"HMDHomeRemoveClientConfigurationRequestKey" destination:v10 payload:v12];

    [v13 setSecureRemote:1];
    objc_initWeak(location, self);
    uint64_t v19 = MEMORY[0x1E4F143A8];
    uint64_t v20 = 3221225472;
    uint64_t v21 = __82__HMDHome_NetworkRouterInternal___requestRemoveClientConfigurationWithIdentifier___block_invoke;
    uint64_t v22 = &unk_1E6A17958;
    objc_copyWeak(&v24, location);
    id v23 = v4;
    [v13 setResponseHandler:&v19];
    id v14 = [(HMDHome *)self msgDispatcher];
    [v14 sendMessage:v13 completionHandler:0];

    objc_destroyWeak(&v24);
    objc_destroyWeak(location);
  }
  else
  {
    uint64_t v15 = (void *)MEMORY[0x1D9452090]();
    uint64_t v16 = self;
    id v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      __int16 v18 = HMFGetLogIdentifier();
      LODWORD(location[0]) = 138543362;
      *(id *)((char *)location + 4) = v18;
      _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_ERROR, "%{public}@No primary resident device to request to remove client configuration", (uint8_t *)location, 0xCu);
    }
  }
}

void __82__HMDHome_NetworkRouterInternal___requestRemoveClientConfigurationWithIdentifier___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = WeakRetained;
    id v10 = HMFGetOSLogHandle();
    id v11 = v10;
    if (v5)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        int v12 = HMFGetLogIdentifier();
        uint64_t v13 = *(void *)(a1 + 32);
        int v19 = 138543874;
        uint64_t v20 = v12;
        __int16 v21 = 2112;
        uint64_t v22 = v13;
        __int16 v23 = 2112;
        id v24 = v5;
        id v14 = "%{public}@Request to remove client configuration %@ failed with error: %@";
        uint64_t v15 = v11;
        os_log_type_t v16 = OS_LOG_TYPE_ERROR;
        uint32_t v17 = 32;
LABEL_7:
        _os_log_impl(&dword_1D49D5000, v15, v16, v14, (uint8_t *)&v19, v17);
      }
    }
    else if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      int v12 = HMFGetLogIdentifier();
      uint64_t v18 = *(void *)(a1 + 32);
      int v19 = 138543618;
      uint64_t v20 = v12;
      __int16 v21 = 2112;
      uint64_t v22 = v18;
      id v14 = "%{public}@Request remove client configuration %@ successful";
      uint64_t v15 = v11;
      os_log_type_t v16 = OS_LOG_TYPE_INFO;
      uint32_t v17 = 22;
      goto LABEL_7;
    }
  }
}

- (void)_removeClientConfigurationWithIdentifier:(id)a3 completion:(id)a4
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHome *)self activeNetworkRouterAccessory];
  id v9 = [v8 networkRouterController];

  if (v9)
  {
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = __86__HMDHome_NetworkRouterInternal___removeClientConfigurationWithIdentifier_completion___block_invoke;
    void v18[3] = &unk_1E6A18F68;
    void v18[4] = self;
    id v19 = v6;
    id v20 = v7;
    [v9 removeClientConfigurationWithClientIdentifier:v19 completion:v18];
  }
  else
  {
    id v10 = (void *)MEMORY[0x1D9452090]();
    id v11 = self;
    int v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = HMFGetLogIdentifier();
      id v14 = [(HMDHome *)v11 activeNetworkRouterAccessory];
      uint64_t v15 = [v14 uuid];
      os_log_type_t v16 = [v15 UUIDString];
      *(_DWORD *)buf = 138543874;
      uint64_t v22 = v13;
      __int16 v23 = 2112;
      id v24 = v6;
      __int16 v25 = 2112;
      id v26 = v16;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove client configuration %@ due to no router controller found on the active network router %@", buf, 0x20u);
    }
    if (v7)
    {
      uint32_t v17 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
      (*((void (**)(id, void *))v7 + 2))(v7, v17);
    }
  }
}

void __86__HMDHome_NetworkRouterInternal___removeClientConfigurationWithIdentifier_completion___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  id v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v8 = HMFGetLogIdentifier();
      uint64_t v9 = *(void *)(a1 + 40);
      int v15 = 138543874;
      os_log_type_t v16 = v8;
      __int16 v17 = 2112;
      uint64_t v18 = v9;
      __int16 v19 = 2112;
      id v20 = v3;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove client configuration %@ due to error %@", (uint8_t *)&v15, 0x20u);
    }
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10)
    {
      id v11 = *(void (**)(void))(v10 + 16);
LABEL_10:
      v11();
    }
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v12 = HMFGetLogIdentifier();
      uint64_t v13 = *(void *)(a1 + 40);
      int v15 = 138543618;
      os_log_type_t v16 = v12;
      __int16 v17 = 2112;
      uint64_t v18 = v13;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Removed client configuration %@ successfully", (uint8_t *)&v15, 0x16u);
    }
    uint64_t v14 = *(void *)(a1 + 48);
    if (v14)
    {
      id v11 = *(void (**)(void))(v14 + 16);
      goto LABEL_10;
    }
  }
}

- (void)_removeClientConfigurationWithIdentifier:(id)a3
{
  id v4 = a3;
  if ([(HMDHome *)self isOwnerUser]) {
    [(HMDHome *)self _removeClientConfigurationWithIdentifier:v4 completion:0];
  }
  else {
    [(HMDHome *)self _requestRemoveClientConfigurationWithIdentifier:v4];
  }
}

- (void)_requestUniquePSKClientConfigurationWithCompletion:(id)a3
{
  location[3] = *(id *)MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHome *)self residentDeviceManager];
  id v6 = [v5 primaryResidentDevice];
  id v7 = [v6 device];

  if (v7)
  {
    id v8 = [HMDRemoteDeviceMessageDestination alloc];
    uint64_t v9 = [(HMDHome *)self uuid];
    uint64_t v10 = [(HMDRemoteDeviceMessageDestination *)v8 initWithTarget:v9 device:v7];

    id v11 = (void *)[objc_alloc(MEMORY[0x1E4F654B0]) initWithName:@"HMDHomeCreateUniquePSKClientConfigurationRequestKey" destination:v10 payload:0];
    [v11 setSecureRemote:1];
    objc_initWeak(location, self);
    uint64_t v17 = MEMORY[0x1E4F143A8];
    uint64_t v18 = 3221225472;
    __int16 v19 = __85__HMDHome_NetworkRouterInternal___requestUniquePSKClientConfigurationWithCompletion___block_invoke;
    id v20 = &unk_1E6A193F8;
    objc_copyWeak(&v22, location);
    id v21 = v4;
    [v11 setResponseHandler:&v17];
    int v12 = [(HMDHome *)self msgDispatcher];
    [v12 sendMessage:v11 completionHandler:0];

    objc_destroyWeak(&v22);
    objc_destroyWeak(location);
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x1D9452090]();
    uint64_t v14 = self;
    int v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      os_log_type_t v16 = HMFGetLogIdentifier();
      LODWORD(location[0]) = 138543362;
      *(id *)((char *)location + 4) = v16;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_ERROR, "%{public}@No primary resident device to request unique PSK from", (uint8_t *)location, 0xCu);
    }
    uint64_t v10 = [MEMORY[0x1E4F28C58] hmErrorWithCode:91];
    (*((void (**)(id, void, HMDRemoteDeviceMessageDestination *))v4 + 2))(v4, 0, v10);
  }
}

void __85__HMDHome_NetworkRouterInternal___requestUniquePSKClientConfigurationWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v5)
    {
      id v8 = (void *)MEMORY[0x1D9452090]();
      id v9 = WeakRetained;
      uint64_t v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        id v11 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v37 = v11;
        __int16 v38 = 2112;
        id v39 = v5;
        _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_ERROR, "%{public}@Request for unique PSK failed with error: %@", buf, 0x16u);
      }
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
    else
    {
      int v12 = objc_msgSend(v6, "hmf_dataForKey:", @"HMDH.UniquePSKMessageKey");
      uint64_t v13 = objc_msgSend(v6, "hmf_numberForKey:", @"HMDH.NetworkClientIdentifierMessageKey");
      id v14 = objc_alloc(MEMORY[0x1E4F29128]);
      int v15 = objc_msgSend(v6, "hmf_stringForKey:", @"HMDH.NetworkRouterUUIDMessageKey");
      os_log_type_t v16 = (void *)[v14 initWithUUIDString:v15];

      uint64_t v17 = (void *)MEMORY[0x1D9452090]();
      id v18 = WeakRetained;
      __int16 v19 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        uint64_t v32 = v17;
        v21 = id v20 = v13;
        HMFBooleanToString();
        id v22 = v33 = v12;
        [v16 UUIDString];
        v23 = uint64_t v34 = v16;
        *(_DWORD *)buf = 138544130;
        uint64_t v37 = v21;
        __int16 v38 = 2112;
        id v39 = v22;
        __int16 v40 = 2112;
        BOOL v41 = v20;
        __int16 v42 = 2112;
        uint64_t v43 = v23;
        _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_DEBUG, "%{public}@Request for unique PSK results successful. PSK: %@, Client Identifier: %@, Network Router UUID: %@", buf, 0x2Au);

        os_log_type_t v16 = v34;
        int v12 = v33;

        uint64_t v13 = v20;
        uint64_t v17 = v32;
      }

      if (v12 && v13 && v16)
      {
        id v24 = [[HMDAccessoryNetworkCredential alloc] initWithNetworkRouterUUID:v16 clientIdentifier:v13 wiFiPSK:v12];
        __int16 v25 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
      }
      else
      {
        id v26 = (void *)MEMORY[0x1D9452090]();
        id v27 = v18;
        long long v28 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          id v35 = v16;
          uint64_t v30 = v29 = v13;
          *(_DWORD *)buf = 138543362;
          uint64_t v37 = v30;
          _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_ERROR, "%{public}@Missing info in response", buf, 0xCu);

          uint64_t v13 = v29;
          os_log_type_t v16 = v35;
        }

        uint64_t v31 = *(void *)(a1 + 32);
        id v24 = [MEMORY[0x1E4F28C58] hmErrorWithCode:-1];
        __int16 v25 = *(void (**)(void))(v31 + 16);
      }
      v25();
    }
  }
}

- (void)_createUniquePSKClientConfigurationWithRequestMessage:(id)a3 pairingEvent:(id)a4 completion:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __112__HMDHome_NetworkRouterInternal___createUniquePSKClientConfigurationWithRequestMessage_pairingEvent_completion___block_invoke;
  aBlock[3] = &unk_1E6A10DB0;
  objc_copyWeak(&v19, &location);
  id v11 = v9;
  id v16 = v11;
  id v12 = v8;
  id v17 = v12;
  id v13 = v10;
  id v18 = v13;
  id v14 = _Block_copy(aBlock);
  [(HMDHome *)self _requestUniquePSKClientConfigurationWithCompletion:v14];

  objc_destroyWeak(&v19);
  objc_destroyWeak(&location);
}

void __112__HMDHome_NetworkRouterInternal___createUniquePSKClientConfigurationWithRequestMessage_pairingEvent_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    uint64_t v7 = *(void *)(a1 + 48);
    if (v5)
    {
      id v8 = [MEMORY[0x1E4F28C58] hmErrorWithCode:98 description:0 reason:0 suggestion:0 underlyingError:v5];
      (*(void (**)(uint64_t, id, void *))(v7 + 16))(v7, v11, v8);
    }
    else
    {
      (*(void (**)(uint64_t, id, void))(v7 + 16))(v7, v11, 0);
    }
  }
  else
  {
    id v9 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];

    if (*(void *)(a1 + 32))
    {
      id v10 = +[HMDMetricsManager sharedLogEventSubmitter];
      [v10 submitLogEvent:*(void *)(a1 + 32) error:v9];
    }
    [*(id *)(a1 + 40) respondWithError:v9];
  }
}

- (void)_evaluateNetworkProtectionAndRouterManagement
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  [(HMDHome *)self _evaluateNetworkProtectionSupport];
  id v3 = [(HMDHome *)self activeNetworkRouterAccessory];
  id v4 = [v3 networkRouterController];

  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if (v4)
  {
    if (v8)
    {
      id v9 = HMFGetLogIdentifier();
      id v10 = [v3 uuid];
      id v11 = [v10 UUIDString];
      id v12 = [v3 name];
      int v16 = 138543874;
      id v17 = v9;
      __int16 v18 = 2112;
      id v19 = v11;
      __int16 v20 = 2112;
      id v21 = v12;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Found active network router accessory %@/%@", (uint8_t *)&v16, 0x20u);
    }
    [(HMDHome *)v6 _configureNetworkRouterClientManager:v3];
  }
  else
  {
    if (v8)
    {
      id v13 = HMFGetLogIdentifier();
      id v14 = [(HMDHome *)v6 activeNetworkRouterUUID];
      int v15 = [v3 name];
      int v16 = 138543874;
      id v17 = v13;
      __int16 v18 = 2112;
      id v19 = v14;
      __int16 v20 = 2112;
      id v21 = v15;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@No active network router accessory with router info %@/%@", (uint8_t *)&v16, 0x20u);
    }
    [(HMDHome *)v6 _unconfigureNetworkRouterClientManager];
  }
}

- (void)_handleNetworkProtectionModeChangeForTransaction:(id)a3
{
  id v5 = a3;
  id v4 = [v5 userInfo];
  [v4 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"NetworkProtectionModeChanged"];

  [(HMDHome *)self _scheduleApplyNetworkRouterSettingsAction:v5];
}

- (void)_evaluateNetworkRouterManagementForTransaction:(id)a3
{
  id v5 = a3;
  id v4 = [v5 userInfo];
  [v4 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"EvaluateRouterManagement"];

  [(HMDHome *)self _scheduleApplyNetworkRouterSettingsAction:v5];
}

- (void)_scheduleApplyNetworkRouterSettingsAction:(id)a3
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __76__HMDHome_NetworkRouterInternal___scheduleApplyNetworkRouterSettingsAction___block_invoke;
  v3[3] = &unk_1E6A10D88;
  void v3[4] = self;
  [a3 addPostApplyActionIfNotPresent:@"HMDNetworkRouterApplySettingsAction" usingBlock:v3];
}

void __76__HMDHome_NetworkRouterInternal___scheduleApplyNetworkRouterSettingsAction___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __76__HMDHome_NetworkRouterInternal___scheduleApplyNetworkRouterSettingsAction___block_invoke_2;
  v7[3] = &unk_1E6A197C8;
  uint64_t v5 = *(void *)(a1 + 32);
  id v8 = v3;
  uint64_t v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

void __76__HMDHome_NetworkRouterInternal___scheduleApplyNetworkRouterSettingsAction___block_invoke_2(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  id v3 = [v2 objectForKeyedSubscript:@"EvaluateRouterManagement"];

  if (v3) {
    [*(id *)(a1 + 40) _evaluateNetworkProtectionAndRouterManagement];
  }
  id v4 = [*(id *)(a1 + 32) userInfo];
  uint64_t v5 = [v4 objectForKeyedSubscript:@"NetworkProtectionModeChanged"];

  if (v5)
  {
    id v6 = [MEMORY[0x1E4F28EB8] defaultCenter];
    [v6 postNotificationName:@"HMDHomeNetworkProtectionUpdatedNotificationKey" object:*(void *)(a1 + 40)];
  }
}

- (void)handleAccessoryDidRemoveNetworkRouterControllerNotification:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __94__HMDHome_NetworkRouterInternal__handleAccessoryDidRemoveNetworkRouterControllerNotification___block_invoke;
  v7[3] = &unk_1E6A197C8;
  id v8 = v4;
  uint64_t v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __94__HMDHome_NetworkRouterInternal__handleAccessoryDidRemoveNetworkRouterControllerNotification___block_invoke(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  id v3 = [v2 objectForKeyedSubscript:@"HMDNetworkRouterAccessoryNotificationKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;

  if (!v5) {
    _HMFPreconditionFailure();
  }
  id v6 = [*(id *)(a1 + 40) activeNetworkRouterAccessory];
  char v7 = [v6 isEqual:v5];
  id v8 = (void *)MEMORY[0x1D9452090]();
  id v9 = *(id *)(a1 + 40);
  id v10 = HMFGetOSLogHandle();
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
  if (v7)
  {
    if (v11)
    {
      id v12 = HMFGetLogIdentifier();
      int v14 = 138543362;
      int v15 = v12;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Removed network router profile for active network router accessory", (uint8_t *)&v14, 0xCu);
    }
    [*(id *)(a1 + 40) _addTransactionForActiveNetworkRouterAccessory:0 isReplacement:0];
  }
  else
  {
    if (v11)
    {
      id v13 = HMFGetLogIdentifier();
      int v14 = 138543362;
      int v15 = v13;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Removed network router profile for non-active network router accessory", (uint8_t *)&v14, 0xCu);
    }
  }
}

- (void)handleAccessoryDidAddNetworkRouterControllerNotification:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __91__HMDHome_NetworkRouterInternal__handleAccessoryDidAddNetworkRouterControllerNotification___block_invoke;
  v7[3] = &unk_1E6A197C8;
  id v8 = v4;
  id v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __91__HMDHome_NetworkRouterInternal__handleAccessoryDidAddNetworkRouterControllerNotification___block_invoke(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  id v3 = [v2 objectForKeyedSubscript:@"HMDNetworkRouterAccessoryNotificationKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;

  if (!v5) {
    _HMFPreconditionFailure();
  }
  id v6 = [v5 uuid];
  char v7 = [*(id *)(a1 + 40) activeNetworkRouterUUID];
  char v8 = [v6 isEqual:v7];

  id v9 = (void *)MEMORY[0x1D9452090]();
  id v10 = *(id *)(a1 + 40);
  BOOL v11 = HMFGetOSLogHandle();
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_INFO);
  if (v8)
  {
    if (v12)
    {
      id v13 = HMFGetLogIdentifier();
      int v14 = [v5 uuid];
      int v18 = 138543618;
      id v19 = v13;
      __int16 v20 = 2112;
      id v21 = v14;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Added network router controller is for active network router accessory %@", (uint8_t *)&v18, 0x16u);
    }
    [*(id *)(a1 + 40) _evaluateNetworkProtectionAndRouterManagement];
  }
  else
  {
    if (v12)
    {
      int v15 = HMFGetLogIdentifier();
      uint64_t v16 = [v5 uuid];
      id v17 = [*(id *)(a1 + 40) activeNetworkRouterUUID];
      int v18 = 138543874;
      id v19 = v15;
      __int16 v20 = 2112;
      id v21 = v16;
      __int16 v22 = 2112;
      __int16 v23 = v17;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Ignoring added network router controller for accessory %@ since it is not for the active network router accessory %@", (uint8_t *)&v18, 0x20u);
    }
  }
}

- (void)_unconfigureNetworkRouterClientManager
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = [(HMDHome *)self routerClientManager];
  if (v3)
  {
    id v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = self;
    id v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      char v7 = HMFGetLogIdentifier();
      int v9 = 138543362;
      id v10 = v7;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Shutting down firewall rule manager and network router client manager", (uint8_t *)&v9, 0xCu);
    }
    [v3 stop];
    [(HMDHome *)v5 setRouterClientManager:0];
    char v8 = +[HMDNetworkRouterFirewallRuleManager sharedInstance];
    [v8 shutdownForClient:v3];
  }
}

- (void)_configureNetworkRouterClientManager:(id)a3
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([(HMDHome *)self supportsRouterManagement])
  {
    id v5 = [(HMDHome *)self routerClientManager];

    if (v5)
    {
      id v6 = [(HMDHome *)self routerClientManager];
      [v6 replaceActiveNetworkRouterAccessory:v4];
    }
    else
    {
      char v7 = (void *)MEMORY[0x1D9452090]();
      char v8 = self;
      int v9 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        id v10 = HMFGetLogIdentifier();
        uint64_t v11 = [v4 name];
        BOOL v12 = [v4 uuid];
        id v13 = [v12 UUIDString];
        *(_DWORD *)buf = 138543874;
        id v26 = v10;
        __int16 v27 = 2112;
        long long v28 = v11;
        __int16 v29 = 2112;
        uint64_t v30 = v13;
        _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Creating network router client manager with accessory %@/%@", buf, 0x20u);
      }
      int v14 = +[HMDNetworkRouterFirewallRuleManager sharedInstance];
      int v15 = [HMDNetworkRouterClientManager alloc];
      uint64_t v16 = [(HMDHome *)v8 workQueue];
      id v17 = [MEMORY[0x1E4F28EB8] defaultCenter];
      int v18 = [(HMDNetworkRouterClientManager *)v15 initWithNetworkRouterAccessory:v4 workQueue:v16 firewallRuleManager:v14 notificationCenter:v17];
      [(HMDHome *)v8 setRouterClientManager:v18];

      id v19 = [(HMDHome *)v8 routerClientManager];
      v24[0] = MEMORY[0x1E4F143A8];
      v24[1] = 3221225472;
      void v24[2] = __71__HMDHome_NetworkRouterInternal___configureNetworkRouterClientManager___block_invoke;
      void v24[3] = &unk_1E6A197F0;
      void v24[4] = v8;
      [v14 startupForClient:v19 completion:v24];

      __int16 v20 = [(HMDHome *)v8 residentDeviceManager];
      id v21 = [(HMDHome *)v8 routerClientManager];
      [v20 addDataSource:v21];

      __int16 v22 = [(HMDHome *)v8 residentDeviceManager];
      v23[0] = MEMORY[0x1E4F143A8];
      v23[1] = 3221225472;
      void v23[2] = __71__HMDHome_NetworkRouterInternal___configureNetworkRouterClientManager___block_invoke_84;
      void v23[3] = &unk_1E6A197F0;
      void v23[4] = v8;
      [v22 confirmWithCompletionHandler:v23];
    }
  }
}

void __71__HMDHome_NetworkRouterInternal___configureNetworkRouterClientManager___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = *(id *)(a1 + 32);
    id v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      char v7 = HMFGetLogIdentifier();
      int v9 = 138543618;
      id v10 = v7;
      __int16 v11 = 2112;
      id v12 = v3;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_ERROR, "%{public}@Firewall rule manager failed to start with error %@", (uint8_t *)&v9, 0x16u);
    }
  }
  else
  {
    char v8 = [*(id *)(a1 + 32) routerClientManager];
    [v8 evaluateManagement];
  }
}

void __71__HMDHome_NetworkRouterInternal___configureNetworkRouterClientManager___block_invoke_84(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    char v7 = HMFGetLogIdentifier();
    int v8 = 138543618;
    int v9 = v7;
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Confirming primary resident with active network router in the home completed with %@", (uint8_t *)&v8, 0x16u);
  }
}

- (void)_handleRemoveClientConfiguration:(id)a3
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  char v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    int v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    int v14 = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Received request to remove a client configuration", buf, 0xCu);
  }
  int v9 = [v4 numberForKey:@"HMDH.NetworkClientIdentifierMessageKey"];
  if (v9)
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    void v11[2] = __67__HMDHome_NetworkRouterInternal___handleRemoveClientConfiguration___block_invoke;
    v11[3] = &unk_1E6A197F0;
    id v12 = v4;
    [(HMDHome *)v6 _removeClientConfigurationWithIdentifier:v9 completion:v11];
    __int16 v10 = v12;
  }
  else
  {
    __int16 v10 = [MEMORY[0x1E4F28C58] hmErrorWithCode:27];
    [v4 respondWithError:v10];
  }
}

uint64_t __67__HMDHome_NetworkRouterInternal___handleRemoveClientConfiguration___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (a2) {
    return [v2 respondWithError:a2];
  }
  else {
    return [v2 respondWithPayload:0];
  }
}

- (void)_handleCreateUniquePSKClientConfiguration:(id)a3
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  char v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    int v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Received request to create a unique PSK client configuration", buf, 0xCu);
  }
  int v9 = [(HMDHome *)v6 activeNetworkRouterAccessory];
  uint64_t v27 = MEMORY[0x1E4F143A8];
  uint64_t v28 = 3221225472;
  __int16 v29 = __76__HMDHome_NetworkRouterInternal___handleCreateUniquePSKClientConfiguration___block_invoke;
  uint64_t v30 = &unk_1E6A10D60;
  uint64_t v31 = v6;
  id v32 = v4;
  id v10 = v4;
  id v11 = v9;
  id v12 = &v27;
  uint64_t v13 = generateWiFiUniquePreSharedKey();
  int v14 = objc_msgSend(v13, "dataUsingEncoding:", 1, v27, v28);

  uint64_t v15 = [v11 networkRouterController];
  uint64_t v16 = (void *)v15;
  if (v14 && v15)
  {
    id v17 = +[HMDNetworkRouterClientConfiguration configurationForOpenProtectionWithClientIdentifier:0];
    int v18 = objc_alloc_init(HMDNetworkRouterCredential);
    [v17 setCredential:v18];

    id v19 = [v17 credential];
    [v19 setPsk:v14];

    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __HMDCreateUniquePSKClientConfiguration_block_invoke;
    uint64_t v34 = &unk_1E6A16978;
    id v39 = v12;
    id v20 = v16;
    id v35 = v20;
    id v36 = v17;
    id v37 = v11;
    id v38 = v14;
    id v21 = v17;
    [v20 writeManagedNetworkEnable:1 completion:buf];
  }
  else
  {
    __int16 v22 = (void *)MEMORY[0x1D9452090]();
    __int16 v23 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = HMFGetLogIdentifier();
      __int16 v25 = (void *)v24;
      id v26 = @"no router controller found";
      if (v16) {
        id v26 = @"PSK generation";
      }
      *(_DWORD *)buf = 138543618;
      *(void *)&uint8_t buf[4] = v24;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v26;
      _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_ERROR, "%{public}@Failed to create unique PSK client configuration due to %@", buf, 0x16u);
    }
    id v21 = [MEMORY[0x1E4F28C58] hmErrorWithCode:-1];
    v29((uint64_t)v12, 0, v21);
  }
}

void __76__HMDHome_NetworkRouterInternal___handleCreateUniquePSKClientConfiguration___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  char v7 = (void *)MEMORY[0x1D9452090]();
  id v8 = *(id *)(a1 + 32);
  int v9 = HMFGetOSLogHandle();
  id v10 = v9;
  if (v6)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v25 = v11;
      __int16 v26 = 2112;
      id v27 = v6;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to create a unique PSK client configuration with error: %@", buf, 0x16u);
    }
    [*(id *)(a1 + 40) respondWithError:v6];
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      id v12 = HMFGetLogIdentifier();
      uint64_t v13 = [v5 clientIdentifier];
      int v14 = [v5 networkRouterUUID];
      uint64_t v15 = [v14 UUIDString];
      *(_DWORD *)buf = 138543874;
      __int16 v25 = v12;
      __int16 v26 = 2112;
      id v27 = v13;
      __int16 v28 = 2112;
      __int16 v29 = v15;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Created unique PSK client configuration with client identifier %@ on network router %@ for remote request", buf, 0x20u);
    }
    uint64_t v16 = *(void **)(a1 + 40);
    id v17 = objc_msgSend(v5, "clientIdentifier", @"HMDH.NetworkClientIdentifierMessageKey");
    v23[0] = v17;
    v22[1] = @"HMDH.UniquePSKMessageKey";
    int v18 = [v5 wiFiPSK];
    v23[1] = v18;
    v22[2] = @"HMDH.NetworkRouterUUIDMessageKey";
    id v19 = [v5 networkRouterUUID];
    id v20 = [v19 UUIDString];
    void v23[2] = v20;
    id v21 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v23 forKeys:v22 count:3];
    [v16 respondWithPayload:v21];
  }
}

- (void)_handleSetMinHomeKitVersionForAccessoryNetworkProtectionChange:(id)a3
{
  id v7 = a3;
  id v4 = [v7 stringForKey:@"kHomedVersionKey"];
  if (v4)
  {
    id v5 = [[HMDHomeKitVersion alloc] initWithVersionString:v4];
    if (v5)
    {
      [(HMDHome *)self _addTransactionForMinimumHomeKitVersionForAccessoryNetworkProtectionChange:v5 message:v7];
    }
    else
    {
      id v6 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
      [v7 respondWithError:v6];
    }
  }
  else
  {
    id v5 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    [v7 respondWithError:v5];
  }
}

- (void)_handleSetMinimumNetworkRouterHomeKitVersion:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 stringForKey:@"kHomedVersionKey"];
  id v6 = [[HMDHomeKitVersion alloc] initWithVersionString:v5];
  if (v6)
  {
    id v7 = +[HMDHomeKitVersion currentVersion];
    if ([v7 isGreaterThanVersion:v6])
    {
      id v8 = (void *)MEMORY[0x1D9452090]();
      int v9 = self;
      id v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        id v11 = HMFGetLogIdentifier();
        id v12 = [(HMDHomeKitVersion *)v6 versionString];
        [v7 versionString];
        uint64_t v13 = v15 = v8;
        *(_DWORD *)buf = 138543874;
        id v17 = v11;
        __int16 v18 = 2112;
        id v19 = v12;
        __int16 v20 = 2112;
        id v21 = v13;
        _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Attempting to set the network router support HomeKit version to %@ - lower than version of HomeKit on this device - %@", buf, 0x20u);

        id v8 = v15;
      }
    }
    [(HMDHome *)self _addTransactionForMinimumNetworkRouterHomeKitVersion:v6 message:v4];
  }
  else
  {
    int v14 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    [v4 respondWithError:v14];
  }
}

- (void)_handleUpdateNetworkProtection:(id)a3
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 numberForKey:*MEMORY[0x1E4F2ED18]];
  if (!v5)
  {
    id v7 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
LABEL_9:
    [v4 respondWithError:v7];
    goto LABEL_10;
  }
  id v14 = 0;
  BOOL v6 = [(HMDHome *)self checkForNetworkRouterSupport:1 error:&v14];
  id v7 = v14;
  if (!v6)
  {
    id v8 = (void *)MEMORY[0x1D9452090]();
    int v9 = self;
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v11 = HMFGetLogIdentifier();
      id v12 = HMDNetworkRouterSupportAsString([(HMDHome *)v9 networkRouterSupport]);
      *(_DWORD *)buf = 138543874;
      uint64_t v16 = v11;
      __int16 v17 = 2112;
      __int16 v18 = v12;
      __int16 v19 = 2112;
      id v20 = v7;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Cannot update home network protection mode - networkRouterSupport %@ error %@", buf, 0x20u);
    }
    goto LABEL_9;
  }
  if ((unint64_t)[v5 integerValue] > 1)
  {
    uint64_t v13 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    [v4 respondWithError:v13];
  }
  else
  {
    [(HMDHome *)self _addTransactionWithProtectionMode:v5 message:v4];
  }
LABEL_10:
}

- (void)_addTransactionForMinimumHomeKitVersionForAccessoryNetworkProtectionChange:(id)a3 message:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  id v8 = [HMDHomeNetworkRouterSettingsModel alloc];
  int v9 = [(HMDHome *)self uuid];
  id v10 = +[HMDHomeNetworkRouterSettingsModel modelIDForHomeUUID:v9];
  id v11 = [(HMDHome *)self uuid];
  uint64_t v16 = [(HMDBackingStoreModelObject *)v8 initWithObjectChangeType:2 uuid:v10 parentUUID:v11];

  id v12 = [v7 versionString];

  [(HMDHomeNetworkRouterSettingsModel *)v16 setMinHomeKitVersionForAccessoryNetworkProtectionChange:v12];
  uint64_t v13 = [(HMDHome *)self backingStore];
  id v14 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  uint64_t v15 = [v13 transaction:@"Update Minimum HomeKit Version For Accessory Network Protection Change" options:v14];

  [v15 add:v16 withMessage:v6];
  [v15 run];
}

- (void)_addTransactionForMinimumNetworkRouterHomeKitVersion:(id)a3 message:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  id v8 = [HMDHomeNetworkRouterSettingsModel alloc];
  int v9 = [(HMDHome *)self uuid];
  id v10 = +[HMDHomeNetworkRouterSettingsModel modelIDForHomeUUID:v9];
  id v11 = [(HMDHome *)self uuid];
  uint64_t v16 = [(HMDBackingStoreModelObject *)v8 initWithObjectChangeType:2 uuid:v10 parentUUID:v11];

  id v12 = [v7 versionString];

  [(HMDHomeNetworkRouterSettingsModel *)v16 setMinimumNetworkRouterSupportHomeKitVersion:v12];
  uint64_t v13 = [(HMDHome *)self backingStore];
  id v14 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  uint64_t v15 = [v13 transaction:@"Update Minimum Network Router Support HomeKit Version" options:v14];

  [v15 add:v16 withMessage:v6];
  [v15 run];
}

- (void)_clearAccessoryNetworkProtectionStateWithTransaction:(id)a3
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v5 = [(HMDHome *)self accessories];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v15 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        id v11 = [v10 networkRouterUUID];
        if (v11)
        {
        }
        else
        {
          id v12 = [v10 networkClientIdentifier];

          if (!v12) {
            continue;
          }
        }
        uint64_t v13 = [v10 transactionWithObjectChangeType:2];
        [v13 setNetworkRouterUUID:0];
        [v13 setNetworkClientIdentifier:0];
        [v13 setNetworkClientProfileFingerprint:0];
        [v13 setAppliedFirewallWANRules:0];
        [v13 setNetworkClientLAN:&unk_1F2DC8B90];
        [v13 setCurrentNetworkProtectionMode:&unk_1F2DC8BA8];
        [v4 add:v13];
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v7);
  }
}

- (void)_updateActiveNetworkRouterAccessory:(id)a3 isReplacement:(BOOL)a4 withTransaction:(id)a5
{
  BOOL v5 = a4;
  id v22 = a5;
  id v8 = a3;
  int v9 = [HMDHomeNetworkRouterSettingsModel alloc];
  id v10 = [(HMDHome *)self uuid];
  id v11 = +[HMDHomeNetworkRouterSettingsModel modelIDForHomeUUID:v10];
  id v12 = [(HMDHome *)self uuid];
  uint64_t v13 = [(HMDBackingStoreModelObject *)v9 initWithObjectChangeType:2 uuid:v11 parentUUID:v12];

  long long v14 = [v8 uuid];

  long long v15 = [v14 UUIDString];

  [(HMDHomeNetworkRouterSettingsModel *)v13 setActiveNetworkRouterAccessoryUUID:v15];
  if (v5) {
    long long v16 = 0;
  }
  else {
    long long v16 = v15;
  }
  [(HMDHomeNetworkRouterSettingsModel *)v13 setActiveNetworkRouterInitialSetupNeededUUID:v16];
  [v22 add:v13];
  if (!v5)
  {
    long long v17 = [HMDHomeModel alloc];
    __int16 v18 = [(HMDHome *)self uuid];
    uint64_t v19 = [(HMDHome *)self homeManager];
    id v20 = [v19 uuid];
    uint64_t v21 = [(HMDBackingStoreModelObject *)v17 initWithObjectChangeType:2 uuid:v18 parentUUID:v20];

    [(HMDHomeModel *)v21 setNetworkProtectionMode:&unk_1F2DC8B78];
    [v22 add:v21];
  }
}

- (void)_addTransactionForActiveNetworkRouterAccessory:(id)a3 isReplacement:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  uint64_t v7 = [(HMDHome *)self backingStore];
  id v8 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  id v9 = [v7 transaction:@"Update Active Network Router Accessory" options:v8];

  [(HMDHome *)self _updateActiveNetworkRouterAccessory:v6 isReplacement:v4 withTransaction:v9];
  [v9 run];
}

- (void)_addTransactionWithProtectionMode:(id)a3 message:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  id v8 = [HMDHomeModel alloc];
  id v9 = [(HMDHome *)self uuid];
  id v10 = [(HMDHome *)self homeManager];
  id v11 = [v10 uuid];
  id v12 = [(HMDBackingStoreModelObject *)v8 initWithObjectChangeType:2 uuid:v9 parentUUID:v11];

  [(HMDHomeModel *)v12 setNetworkProtectionMode:v7];
  uint64_t v13 = [(HMDHome *)self backingStore];
  long long v14 = [v6 name];
  long long v15 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  long long v16 = [v13 transaction:v14 options:v15];

  [v16 add:v12 withMessage:v6];
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  v18[2] = __76__HMDHome_NetworkRouterInternal___addTransactionWithProtectionMode_message___block_invoke;
  void v18[3] = &unk_1E6A196E0;
  id v19 = v6;
  id v20 = self;
  id v17 = v6;
  [v16 run:v18];
}

void __76__HMDHome_NetworkRouterInternal___addTransactionWithProtectionMode_message___block_invoke(uint64_t a1, uint64_t a2)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    [v3 respondWithError:a2];
  }
  else
  {
    uint64_t v6 = *MEMORY[0x1E4F2ED18];
    BOOL v4 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 40), "protectionMode"));
    v7[0] = v4;
    BOOL v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v7 forKeys:&v6 count:1];
    [v2 respondWithPayload:v5];
  }
}

- (unint64_t)deriveNetworkRouterSupport:(unint64_t)a3
{
  char v3 = a3;
  unint64_t v4 = 4;
  if ((a3 & 8) == 0) {
    unint64_t v4 = 15;
  }
  if (a3)
  {
    unint64_t v5 = v4 & 8;
    if ([(HMDHome *)self isOwnerUser]) {
      unint64_t v4 = v5;
    }
    else {
      unint64_t v4 = 0;
    }
  }
  if ((v3 & 2) != 0) {
    unint64_t v4 = 0;
  }
  if ((v3 & 4) != 0) {
    v4 &= 9u;
  }
  if ((v3 & 0x10) != 0) {
    return v4 & 0xFFFFFFFFFFFFFFFDLL;
  }
  else {
    return v4;
  }
}

- (BOOL)checkForNetworkRouterSupport:(unint64_t)a3 error:(id *)a4
{
  char v5 = a3;
  char v6 = [(HMDHome *)self networkRouterSupportDisableReason];
  if ((v5 & 4) != 0)
  {
    if ((v6 & 4) != 0) {
      goto LABEL_16;
    }
    if ((v6 & 2) != 0) {
      goto LABEL_22;
    }
    if (v6) {
      goto LABEL_14;
    }
  }
  if ((v5 & 3) == 0) {
    goto LABEL_7;
  }
  if ((v6 & 4) == 0)
  {
    if ((v6 & 8) != 0 || (v6 & 2) != 0) {
      goto LABEL_22;
    }
    if (v6) {
      goto LABEL_14;
    }
LABEL_7:
    if ((v5 & 2) == 0 || (v6 & 0x10) == 0)
    {
      if ((v5 & 8) == 0) {
        return 1;
      }
      if ((v6 & 8) == 0 && (v6 & 2) == 0)
      {
        if ((v6 & 1) == 0) {
          return 1;
        }
LABEL_14:
        if (a4)
        {
          uint64_t v8 = 92;
LABEL_24:
          id v9 = [MEMORY[0x1E4F28C58] hmErrorWithCode:v8];
          BOOL result = 0;
          *a4 = v9;
          return result;
        }
        return 0;
      }
    }
LABEL_22:
    if (a4)
    {
      uint64_t v8 = 48;
      goto LABEL_24;
    }
    return 0;
  }
LABEL_16:
  if (a4)
  {
    uint64_t v8 = 17;
    goto LABEL_24;
  }
  return 0;
}

- (HMDHAPAccessory)activeNetworkRouterAccessory
{
  char v3 = [(HMDHome *)self activeNetworkRouterUUID];
  unint64_t v4 = [(HMDHome *)self accessoryWithUUID:v3];

  id v5 = v4;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    char v6 = v5;
  }
  else {
    char v6 = 0;
  }
  id v7 = v6;

  return v7;
}

- (NSArray)wiFiRouterAccessories
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  char v3 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:1];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  unint64_t v4 = [(HMDHome *)self accessories];
  uint64_t v5 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(id *)(*((void *)&v15 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v10 = v9;
        }
        else {
          id v10 = 0;
        }
        id v11 = v10;

        id v12 = [v11 networkRouterController];

        if (v12) {
          [v3 addObject:v11];
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v6);
  }

  uint64_t v13 = (void *)[v3 copy];
  return (NSArray *)v13;
}

- (BOOL)supportsRouterManagement
{
  if (![(HMDHome *)self _isNetworkRouterSupportEnabledForCurrentDevice]|| ![(HMDHome *)self isOwnerUser])
  {
    return 0;
  }
  char v3 = [(HMDHome *)self _currentDeviceCapabilities];
  char v4 = [v3 supportsRouterManagement];

  return v4;
}

- (BOOL)_isNetworkRouterSupportEnabledForCurrentDevice
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  char v3 = +[HMDHomeKitVersion currentVersion];
  uint64_t v4 = [(HMDHome *)self minimumNetworkRouterSupportHomeKitVersion];
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    uint64_t v6 = [(HMDHome *)self minimumNetworkRouterSupportHomeKitVersion];
    int v7 = [v6 isGreaterThanVersion:v3];

    if (v7)
    {
      uint64_t v8 = (void *)MEMORY[0x1D9452090]();
      id v9 = self;
      id v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        id v11 = HMFGetLogIdentifier();
        id v12 = [(HMDHome *)v9 minimumNetworkRouterSupportHomeKitVersion];
        uint64_t v13 = [v12 versionString];
        long long v14 = [v3 versionString];
        int v29 = 138543874;
        uint64_t v30 = v11;
        __int16 v31 = 2112;
        id v32 = v13;
        __int16 v33 = 2112;
        uint64_t v34 = v14;
        _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Network router support requires minimum HomeKit version of %@ - current %@; disabling",
          (uint8_t *)&v29,
          0x20u);

LABEL_9:
        goto LABEL_10;
      }
      goto LABEL_10;
    }
  }
  long long v15 = [(HMDHome *)self activeNetworkRouterAccessory];
  uint64_t v16 = [v15 primaryProfileVersion];
  if (v16)
  {
    long long v17 = (void *)v16;
    long long v18 = [(HMDHome *)self activeNetworkRouterAccessory];
    id v19 = [v18 primaryProfileVersion];
    unint64_t v20 = [v19 majorVersion];

    if (v20 >= 2)
    {
      uint64_t v8 = (void *)MEMORY[0x1D9452090]();
      id v9 = self;
      id v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        id v11 = HMFGetLogIdentifier();
        uint64_t v21 = NSNumber;
        id v22 = [(HMDHome *)v9 activeNetworkRouterAccessory];
        __int16 v23 = [v22 primaryProfileVersion];
        uint64_t v24 = objc_msgSend(v21, "numberWithUnsignedInteger:", objc_msgSend(v23, "majorVersion"));
        int v29 = 138543874;
        uint64_t v30 = v11;
        __int16 v31 = 2112;
        id v32 = v24;
        __int16 v33 = 2112;
        uint64_t v34 = &unk_1F2DC8B60;
        _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Network router major version %@ not supported on this device - only supports up to major version %@; disabling",
          (uint8_t *)&v29,
          0x20u);

        goto LABEL_9;
      }
LABEL_10:

      BOOL v25 = 0;
      goto LABEL_17;
    }
  }
  else
  {
  }
  __int16 v26 = [MEMORY[0x1E4F65530] sharedPreferences];
  id v27 = [v26 preferenceForKey:@"enableNetworkRouterSupport"];

  BOOL v25 = !v27 || [v27 BOOLValue];
LABEL_17:

  return v25;
}

- (id)_currentDeviceCapabilities
{
  return +[HMDDeviceCapabilities deviceCapabilities];
}

- (id)createAppleMediaAccessoriesStateManagerMetricsDispatcherWithIdentifier:(id)a3 logEventSubmitter:(id)a4
{
  id v5 = a4;
  id v6 = a3;
  int v7 = [[HMDAppleMediaAccessoriesStateManagerMetricsDispatcher alloc] initWithIdentifier:v6 logEventSubmitter:v5];

  return v7;
}

- (id)createMultiuserSettingsMessenger:(id)a3 messageDispatcher:(id)a4
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)MEMORY[0x1D9452090]();
  id v9 = self;
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    id v11 = HMFGetLogIdentifier();
    id v12 = [v6 uuid];
    int v15 = 138543874;
    uint64_t v16 = v11;
    __int16 v17 = 2112;
    long long v18 = v12;
    __int16 v19 = 2112;
    id v20 = v7;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Creating Multiuser settings messenger with current home UUID: %@ message dispatcher: %@", (uint8_t *)&v15, 0x20u);
  }
  uint64_t v13 = [[HMDMultiuserSettingsMessenger alloc] initWithHome:v6 messageDispatcher:v7];

  return v13;
}

- (void)configureMultiuserSettingsMessengerWithMessengerFactory:(id)a3
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    id v9 = [(HMDHome *)v6 home];
    int v13 = 138543618;
    long long v14 = v8;
    __int16 v15 = 2112;
    uint64_t v16 = v9;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Configuring Multiuser settings messenger %@", (uint8_t *)&v13, 0x16u);
  }
  id v10 = [(HMDHome *)v6 home];
  id v11 = [(HMDHome *)v6 msgDispatcher];
  id v12 = [v4 createMultiuserSettingsMessenger:v10 messageDispatcher:v11];

  [v12 registerForMessages];
  [(HMDHome *)v6 setMultiuserSettingsMessenger:v12];
}

- (id)_processTestModeSkipHH2MigrationOverride:(id)a3
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090](-[HMDHome setOverrideSentinelZoneForConvergencePeriod:](self, "setOverrideSentinelZoneForConvergencePeriod:", objc_msgSend(v4, "hmf_BOOLForKey:", @"kConfigTestingSkipMigrationCheckOverrideKey")));
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    [(HMDHome *)v6 overrideSentinelZoneForConvergencePeriod];
    id v9 = HMFBooleanToString();
    int v11 = 138543618;
    id v12 = v8;
    __int16 v13 = 2112;
    long long v14 = v9;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Override for HH2 Migration Skip is set to : %@", (uint8_t *)&v11, 0x16u);
  }

  return 0;
}

- (unint64_t)accessNotAllowedReasonCode
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if ([(HMDHome *)self isAccessToHomeAllowed])
  {
    unint64_t v3 = 1;
  }
  else
  {
    id v4 = [(HMDHome *)self currentHomeKitVersion];
    id v5 = HMDMinimumHomeKitVersionSupportingHH2();
    int v6 = [v4 isAtLeastVersion:v5];

    if (v6) {
      unint64_t v3 = 4;
    }
    else {
      unint64_t v3 = 2;
    }
  }
  id v7 = (void *)MEMORY[0x1D9452090]();
  uint64_t v8 = self;
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    id v10 = HMFGetLogIdentifier();
    int v12 = 138543618;
    __int16 v13 = v10;
    __int16 v14 = 2048;
    unint64_t v15 = v3;
    _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Home access is not allowed with reason code : %lu", (uint8_t *)&v12, 0x16u);
  }
  return v3;
}

- (void)storeMigrationCharacteristicsAuthorizationData
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (void *)MEMORY[0x1D9452090](self, a2);
  id v4 = [(HMDHome *)self currentUser];
  int v5 = [v4 isOwner];

  if (v5)
  {
    int v6 = (void *)MEMORY[0x1D9452090]();
    id v7 = self;
    uint64_t v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = HMFGetLogIdentifier();
      id v10 = [(HMDHome *)v7 name];
      *(_DWORD *)buf = 138543618;
      BOOL v41 = v9;
      __int16 v42 = 2112;
      uint64_t v43 = v10;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Skipping characteristic authorization archiving for home: %@", buf, 0x16u);
    }
  }
  else
  {
    int v11 = [MEMORY[0x1E4F1CA60] dictionary];
    int v12 = [(HMDHome *)self hapAccessories];
    v38[0] = MEMORY[0x1E4F143A8];
    v38[1] = 3221225472;
    v38[2] = __90__HMDHome_CharacteristicAuthorizationData__storeMigrationCharacteristicsAuthorizationData__block_invoke;
    void v38[3] = &unk_1E6A13600;
    id v13 = v11;
    id v39 = v13;
    objc_msgSend(v12, "na_each:", v38);

    uint64_t v14 = [v13 count];
    unint64_t v15 = (void *)MEMORY[0x1D9452090]();
    uint64_t v16 = self;
    uint64_t v17 = HMFGetOSLogHandle();
    long long v18 = v17;
    if (v14)
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        __int16 v19 = HMFGetLogIdentifier();
        id v20 = [(HMDHome *)v16 name];
        *(_DWORD *)buf = 138543874;
        BOOL v41 = v19;
        __int16 v42 = 2112;
        uint64_t v43 = v20;
        __int16 v44 = 2112;
        id v45 = v13;
        _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@Archiving characteristic authorization data for migration for home: %@, [%@]", buf, 0x20u);
      }
      uint64_t v21 = (void *)[objc_alloc(MEMORY[0x1E4F28DB0]) initRequiringSecureCoding:1];
      [v21 encodeObject:v13 forKey:*MEMORY[0x1E4F284E8]];
      [v21 finishEncoding];
      id v22 = [v21 encodedData];
      if (v22)
      {
        __int16 v23 = [(HMDHome *)v16 uuid];
        uint64_t v24 = NSString;
        id v25 = (id)hh1ToHH2PerDeviceMigrationDirectoryPath;
        __int16 v26 = [v24 stringWithFormat:@"%@/HMDHome-Authorization-Data-%@.plist", v25, v23];

        id v27 = +[HMDPersistentStore writeData:v22 toStorePath:v26 dataLabel:@"CharacteristicAuthorizationData"];
        __int16 v28 = (void *)MEMORY[0x1D9452090]();
        int v29 = v16;
        uint64_t v30 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
        {
          __int16 v31 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543874;
          BOOL v41 = v31;
          __int16 v42 = 2112;
          uint64_t v43 = v27;
          __int16 v44 = 2112;
          id v45 = v26;
          _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_DEBUG, "%{public}@Stored characteristic authorization data ([%@] bytes) to [%@]", buf, 0x20u);
        }
      }
      else
      {
        uint64_t v34 = (void *)MEMORY[0x1D9452090]();
        uint64_t v35 = v16;
        id v36 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          id v37 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          BOOL v41 = v37;
          _os_log_impl(&dword_1D49D5000, v36, OS_LOG_TYPE_ERROR, "%{public}@Unable to store characteristic authorization data during migration, archived data is nil", buf, 0xCu);
        }
      }
    }
    else
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        id v32 = HMFGetLogIdentifier();
        __int16 v33 = [(HMDHome *)v16 name];
        *(_DWORD *)buf = 138543618;
        BOOL v41 = v32;
        __int16 v42 = 2112;
        uint64_t v43 = v33;
        _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_DEBUG, "%{public}@No characteristic authorization data to migrate for home: %@", buf, 0x16u);
      }
    }
  }
}

void __90__HMDHome_CharacteristicAuthorizationData__storeMigrationCharacteristicsAuthorizationData__block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 services];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = __90__HMDHome_CharacteristicAuthorizationData__storeMigrationCharacteristicsAuthorizationData__block_invoke_2;
  v6[3] = &unk_1E6A135D8;
  id v7 = *(id *)(a1 + 32);
  id v8 = v3;
  id v5 = v3;
  objc_msgSend(v4, "na_each:", v6);
}

void __90__HMDHome_CharacteristicAuthorizationData__storeMigrationCharacteristicsAuthorizationData__block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = [a2 characteristics];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __90__HMDHome_CharacteristicAuthorizationData__storeMigrationCharacteristicsAuthorizationData__block_invoke_3;
  void v4[3] = &unk_1E6A135B0;
  id v5 = *(id *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  objc_msgSend(v3, "na_each:", v4);
}

void __90__HMDHome_CharacteristicAuthorizationData__storeMigrationCharacteristicsAuthorizationData__block_invoke_3(uint64_t a1, void *a2)
{
  id v15 = a2;
  id v3 = [v15 getCharacteristicDictionary];
  id v4 = [v3 objectForKeyedSubscript:@"kCharacteristicAuthorizationDataCodingKey"];

  if (v4)
  {
    id v5 = *(void **)(a1 + 32);
    id v6 = [*(id *)(a1 + 40) uuid];
    id v7 = [v5 objectForKeyedSubscript:v6];

    if (!v7)
    {
      id v8 = [MEMORY[0x1E4F1CA60] dictionary];
      id v9 = *(void **)(a1 + 32);
      id v10 = [*(id *)(a1 + 40) uuid];
      [v9 setObject:v8 forKeyedSubscript:v10];
    }
    int v11 = *(void **)(a1 + 32);
    int v12 = [*(id *)(a1 + 40) uuid];
    id v13 = [v11 objectForKeyedSubscript:v12];
    uint64_t v14 = [v15 instanceID];
    [v13 setObject:v4 forKeyedSubscript:v14];
  }
}

- (id)createSiriEndpointProfilesMessengerWithMessageTargetUUID:(id)a3 messageDispatcher:(id)a4 messageRouter:(id)a5 messageHandler:(id)a6
{
  id v9 = a6;
  id v10 = a5;
  id v11 = a4;
  id v12 = a3;
  id v13 = [[HMDSiriEndpointProfilesMessenger alloc] initWithMessageTargetUUID:v12 messageDispatcher:v11 messageRouter:v10 messageHandler:v9];

  return v13;
}

- (void)configureSiriEndpointProfilesMessengerWithMessengerFactory:(id)a3 messageHandlerFactory:(id)a4
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)MEMORY[0x1D9452090]();
  id v9 = self;
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    id v11 = HMFGetLogIdentifier();
    int v22 = 138543362;
    __int16 v23 = v11;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Configuring siri endpoint profiles messenger", (uint8_t *)&v22, 0xCu);
  }
  id v12 = [(HMDHome *)v9 msgDispatcher];
  uint64_t v13 = [(HMDHome *)v9 primaryResidentMessageRouter];
  if (!v12)
  {
    _HMFPreconditionFailure();
LABEL_7:
    _HMFPreconditionFailure();
  }
  uint64_t v14 = (void *)v13;
  if (!v13) {
    goto LABEL_7;
  }
  id v15 = (void *)MEMORY[0x1E4F2EB10];
  uint64_t v16 = [(HMDHome *)v9 uuid];
  uint64_t v17 = [v15 messageTargetUUIDWithHomeUUID:v16];

  long long v18 = [(HMDHome *)v9 uuid];
  __int16 v19 = [v7 createSiriEndpointProfileMessageHandlerWithHomeUUID:v18];

  id v20 = [(HMDHome *)v9 homeManager];
  [v19 setDataSource:v20];

  uint64_t v21 = [v6 createSiriEndpointProfilesMessengerWithMessageTargetUUID:v17 messageDispatcher:v12 messageRouter:v14 messageHandler:v19];
  [v21 registerForMessagesWithHome:v9];
  [(HMDHome *)v9 setSiriEndpointProfilesMessenger:v21];
}

- (void)_unitTest_setRetrievalCompletionsTimeout:(double)a3
{
  id v5 = [(HMDHome *)self retrievalAccessoryCompletionTuples];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = __72__HMDHome_AccessoryRetrieval___unitTest_setRetrievalCompletionsTimeout___block_invoke;
  v6[3] = &unk_1E6A17090;
  void v6[4] = self;
  *(double *)&void v6[5] = a3;
  objc_msgSend(v5, "na_each:", v6);
}

void __72__HMDHome_AccessoryRetrieval___unitTest_setRetrievalCompletionsTimeout___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) workQueue];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = __72__HMDHome_AccessoryRetrieval___unitTest_setRetrievalCompletionsTimeout___block_invoke_2;
  v6[3] = &unk_1E6A189D0;
  id v7 = v3;
  uint64_t v8 = *(void *)(a1 + 40);
  id v5 = v3;
  dispatch_async(v4, v6);
}

uint64_t __72__HMDHome_AccessoryRetrieval___unitTest_setRetrievalCompletionsTimeout___block_invoke_2(uint64_t a1)
{
  [*(id *)(a1 + 32) stop];
  [*(id *)(a1 + 32) setRetrievalTimeout:*(double *)(a1 + 40)];
  uint64_t v2 = *(void **)(a1 + 32);
  return [v2 start];
}

uint64_t __105__HMDHome_AccessoryRetrieval___retrieveHAPAccessoryForHMDHAPAccessory_linkType_forceRetrieve_completion___block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) _dequeueRetrievalForAccessory:*(void *)(a1 + 40) linkType:*(void *)(a1 + 56) error:*(void *)(a1 + 48)];
}

- (unint64_t)accessorySettingsLocalMessageHandler:(id)a3 callerPrivilegeWithMessage:(id)a4
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v7 userForHome:self];
  id v9 = v8;
  if (v8)
  {
    unint64_t v10 = [v8 privilege];
  }
  else
  {
    id v11 = (void *)MEMORY[0x1D9452090]();
    id v12 = self;
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      int v16 = 138543618;
      uint64_t v17 = v14;
      __int16 v18 = 2112;
      id v19 = v7;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to get accessory settings local message handler caller privilege from message: %@", (uint8_t *)&v16, 0x16u);
    }
    unint64_t v10 = 2;
  }

  return v10;
}

- (id)createUnifiedLanguageValueListSettingDataProvider
{
  uint64_t v2 = objc_alloc_init(HMDUnifiedLanguageValueListSettingDataProvider);
  return v2;
}

- (void)configureUnifiedLanguageValueListSettingDataProviderWithFactory:(id)a3
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    int v10 = 138543362;
    id v11 = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Configuring unified language value list setting data provider", (uint8_t *)&v10, 0xCu);
  }
  id v9 = [v4 createUnifiedLanguageValueListSettingDataProvider];
  [v9 setDataSource:v6];
  [(HMDHome *)v6 setUnifiedLanguageValueListSettingDataProvider:v9];
}

- (BOOL)validateActionsDoNotConflict:(id)a3
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([v4 count])
  {
    id v5 = [MEMORY[0x1E4F1CA80] set];
    id v6 = [MEMORY[0x1E4F1CA80] set];
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    id v7 = v4;
    uint64_t v8 = [v7 countByEnumeratingWithState:&v44 objects:v53 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v35 = self;
      id v36 = v4;
      id v38 = v7;
      uint64_t v39 = *(void *)v45;
      id v37 = v5;
      while (2)
      {
        uint64_t v10 = 0;
        uint64_t v11 = v39;
        do
        {
          if (*(void *)v45 != v11) {
            objc_enumerationMutation(v7);
          }
          id v12 = *(id *)(*((void *)&v44 + 1) + 8 * v10);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            uint64_t v13 = v12;
          }
          else {
            uint64_t v13 = 0;
          }
          id v14 = v13;

          if (v14)
          {
            id v15 = [v14 characteristic];
            if ([v5 containsObject:v15])
            {
              __int16 v31 = (void *)MEMORY[0x1D9452090]();
              id v32 = v35;
              __int16 v33 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
              {
                uint64_t v34 = HMFGetLogIdentifier();
                *(_DWORD *)buf = 138543618;
                uint64_t v50 = v34;
                __int16 v51 = 2112;
                id v52 = v12;
                _os_log_impl(&dword_1D49D5000, v33, OS_LOG_TYPE_ERROR, "%{public}@Conflicting action detected: %@", buf, 0x16u);
              }
LABEL_34:

              BOOL v25 = 0;
              id v4 = v36;
              id v7 = v38;
              goto LABEL_36;
            }
            [v5 addObject:v15];
          }
          else
          {
            id v16 = v12;
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              uint64_t v17 = v16;
            }
            else {
              uint64_t v17 = 0;
            }
            id v15 = v17;

            if (v15)
            {
              long long v42 = 0u;
              long long v43 = 0u;
              long long v40 = 0u;
              long long v41 = 0u;
              __int16 v18 = [v15 mediaProfiles];
              uint64_t v19 = [v18 countByEnumeratingWithState:&v40 objects:v48 count:16];
              if (v19)
              {
                uint64_t v20 = v19;
                uint64_t v21 = *(void *)v41;
                while (2)
                {
                  for (uint64_t i = 0; i != v20; ++i)
                  {
                    if (*(void *)v41 != v21) {
                      objc_enumerationMutation(v18);
                    }
                    uint64_t v23 = *(void *)(*((void *)&v40 + 1) + 8 * i);
                    if ([v6 containsObject:v23])
                    {
                      __int16 v26 = (void *)MEMORY[0x1D9452090]();
                      id v27 = v35;
                      __int16 v28 = HMFGetOSLogHandle();
                      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
                      {
                        int v29 = HMFGetLogIdentifier();
                        *(_DWORD *)buf = 138543618;
                        uint64_t v50 = v29;
                        __int16 v51 = 2112;
                        id v52 = v16;
                        _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_ERROR, "%{public}@Conflicting action detected: %@", buf, 0x16u);
                      }

                      id v14 = 0;
                      id v5 = v37;
                      goto LABEL_34;
                    }
                    [v6 addObject:v23];
                  }
                  uint64_t v20 = [v18 countByEnumeratingWithState:&v40 objects:v48 count:16];
                  if (v20) {
                    continue;
                  }
                  break;
                }
              }

              id v14 = 0;
              id v5 = v37;
              id v7 = v38;
              uint64_t v11 = v39;
            }
          }

          ++v10;
        }
        while (v10 != v9);
        uint64_t v24 = [v7 countByEnumeratingWithState:&v44 objects:v53 count:16];
        uint64_t v9 = v24;
        BOOL v25 = 1;
        id v4 = v36;
        if (v24) {
          continue;
        }
        break;
      }
    }
    else
    {
      BOOL v25 = 1;
    }
LABEL_36:
  }
  else
  {
    BOOL v25 = 1;
  }

  return v25;
}

- (void)executeActionsFromMessage:(id)a3
{
  uint64_t v162 = *MEMORY[0x1E4F143B8];
  id v106 = a3;
  uint64_t v97 = [v106 arrayForKey:*MEMORY[0x1E4F2D230]];
  if ([v97 count])
  {
    if (objc_msgSend(v97, "hmf_objectsAreKindOfClass:", objc_opt_class()))
    {
      uint64_t v105 = [MEMORY[0x1E4F1C9C8] date];
      uint64_t v96 = [v106 source];
      uint64_t v95 = [v106 transport];
      uint64_t v98 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v97, "count"));
      long long v143 = 0u;
      long long v144 = 0u;
      long long v141 = 0u;
      long long v142 = 0u;
      id v4 = v97;
      uint64_t v5 = [v4 countByEnumeratingWithState:&v141 objects:v161 count:16];
      if (!v5) {
        goto LABEL_17;
      }
      uint64_t v6 = *(void *)v142;
      while (2)
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v142 != v6) {
            objc_enumerationMutation(v4);
          }
          uint64_t v8 = *(void *)(*((void *)&v141 + 1) + 8 * i);
          uint64_t v9 = [(HMDHome *)self actionWithDictionaryRepresentation:v8];
          if (!v9)
          {
            __int16 v78 = (void *)MEMORY[0x1D9452090]();
            uint64_t v79 = self;
            __int16 v80 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
            {
              uint64_t v81 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543618;
              *(void *)&uint8_t buf[4] = v81;
              *(_WORD *)&unsigned char buf[12] = 2112;
              *(void *)&buf[14] = v8;
              _os_log_impl(&dword_1D49D5000, v80, OS_LOG_TYPE_ERROR, "%{public}@Failed to deserialize action: %@", buf, 0x16u);
            }
            id v10 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
            [v106 respondWithError:v10];
LABEL_88:

            goto LABEL_93;
          }
          id v10 = v9;
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass) {
            id v12 = v10;
          }
          else {
            id v12 = 0;
          }
          id v13 = v12;

          if (isKindOfClass)
          {
            id v14 = [v106 proxyConnection];
            if (v14)
            {
              char v15 = [v106 isEntitledForShortcutsAutomationAccess];

              if ((v15 & 1) == 0)
              {
                uint64_t v84 = (void *)MEMORY[0x1D9452090]();
                uint64_t v85 = self;
                double v86 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
                {
                  __int16 v87 = HMFGetLogIdentifier();
                  *(_DWORD *)buf = 138543362;
                  *(void *)&uint8_t buf[4] = v87;
                  _os_log_impl(&dword_1D49D5000, v86, OS_LOG_TYPE_ERROR, "%{public}@Missing ShortcutsAutomationAccess Entitlement for Execute", buf, 0xCu);
                }
                id v88 = [MEMORY[0x1E4F28C58] hmErrorWithCode:80 description:@"Missing Entitlement" reason:0 suggestion:0];
                [v106 respondWithError:v88];

                goto LABEL_88;
              }
            }
          }
          [v98 addObject:v10];
        }
        uint64_t v5 = [v4 countByEnumeratingWithState:&v141 objects:v161 count:16];
        if (v5) {
          continue;
        }
        break;
      }
LABEL_17:

      BOOL v16 = [(HMDHome *)self validateActionsDoNotConflict:v98];
      uint64_t v17 = (void *)MEMORY[0x1D9452090]();
      id val = self;
      __int16 v18 = HMFGetOSLogHandle();
      uint64_t v19 = v18;
      if (v16)
      {
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v20 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          *(void *)&uint8_t buf[4] = v20;
          *(_WORD *)&unsigned char buf[12] = 2112;
          *(void *)&buf[14] = v98;
          _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_DEFAULT, "%{public}@Executing actions: %@", buf, 0x16u);
        }
        *(void *)buf = 0;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x3032000000;
        long long v158 = __Block_byref_object_copy__191465;
        uint64_t v159 = __Block_byref_object_dispose__191466;
        id v160 = 0;
        uint64_t v99 = [(HMDHome *)val workQueue];
        dispatch_group_t group = dispatch_group_create();
        uint64_t v108 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v98, "count"));
        id v104 = [MEMORY[0x1E4F28E10] strongToStrongObjectsMapTable];
        uint64_t v101 = [MEMORY[0x1E4F28E10] strongToStrongObjectsMapTable];
        long long v139 = 0u;
        long long v140 = 0u;
        long long v137 = 0u;
        long long v138 = 0u;
        id obj = v98;
        uint64_t v21 = [obj countByEnumeratingWithState:&v137 objects:v156 count:16];
        if (!v21)
        {
LABEL_69:

          if ([v108 count])
          {
            objc_initWeak(&location, val);
            dispatch_group_enter(group);
            long long v64 = (void *)MEMORY[0x1D9452090]();
            long long v65 = val;
            HMFGetOSLogHandle();
            long long v66 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              id v67 = (id)objc_claimAutoreleasedReturnValue();
              long long v146 = 0uLL;
              long long v68 = [v106 identifier];

              if (v68)
              {
                uint64_t v69 = [v106 identifier];
                [v69 getUUIDBytes:&v146];
              }
              else
              {
                long long v146 = *MEMORY[0x1E4F655A8];
              }
              long long v145 = v146;
              uint64_t v89 = [v108 count];
              *(_DWORD *)id v148 = 138544386;
              id v149 = v67;
              __int16 v150 = 1042;
              *(_DWORD *)uint64_t v151 = 16;
              *(_WORD *)&v151[4] = 2098;
              *(void *)&v151[6] = &v145;
              __int16 v152 = 2114;
              uint64_t v153 = v65;
              __int16 v154 = 2048;
              uint64_t v155 = v89;
              _os_log_impl(&dword_1D49D5000, v66, OS_LOG_TYPE_INFO, "%{public}@Executing write requests for request identifier %{public,uuid_t}.16P from home: %{public}@ count: %lu for characteristic write actions", v148, 0x30u);
            }
            uint64_t v90 = [v106 identifier];
            uint64_t v91 = [v106 qualityOfService];
            v116[0] = MEMORY[0x1E4F143A8];
            v116[1] = 3221225472;
            v116[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_28;
            v116[3] = &unk_1E6A199D8;
            id v117 = v99;
            objc_copyWeak(&v123, &location);
            id v118 = v108;
            id v119 = v101;
            id v120 = v104;
            uint64_t v122 = buf;
            uint64_t v121 = group;
            [(HMDHome *)v65 writeCharacteristicValues:v118 source:v96 identifier:v90 transport:v95 qualityOfService:v91 withCompletionHandler:v116];

            objc_destroyWeak(&v123);
            objc_destroyWeak(&location);
          }
          uint64_t v92 = [(HMDHome *)val workQueue];
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 3221225472;
          block[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_30;
          block[3] = &unk_1E6A19A00;
          id v113 = v106;
          uint64_t v115 = buf;
          id v114 = obj;
          dispatch_group_notify(group, v92, block);

          _Block_object_dispose(buf, 8);
          goto LABEL_93;
        }
        long long v94 = v130;
        uint64_t v109 = *(void *)v138;
        *(void *)&long long v22 = 138544386;
        long long v93 = v22;
        while (2)
        {
          uint64_t v110 = v21;
          uint64_t v23 = 0;
LABEL_23:
          if (*(void *)v138 != v109) {
            objc_enumerationMutation(obj);
          }
          uint64_t v24 = *(void **)(*((void *)&v137 + 1) + 8 * v23);
          objc_msgSend(v24, "configureWithHome:", val, v93, v94);
          id v25 = v24;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            __int16 v26 = v25;
          }
          else {
            __int16 v26 = 0;
          }
          id v27 = v26;

          if (v27)
          {
            id v28 = [v27 characteristic];
            int v29 = [v27 targetValue];
            uint64_t v30 = [v28 authorizationData];
            __int16 v31 = +[HMDCharacteristicWriteRequest writeRequestWithCharacteristic:v28 value:v29 authorizationData:v30 type:1];

            if (v31)
            {
              [v108 addObject:v31];
              [v104 setObject:v27 forKey:v31];
              goto LABEL_67;
            }
          }
          id v32 = v25;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            __int16 v33 = v32;
          }
          else {
            __int16 v33 = 0;
          }
          id v28 = v33;

          __int16 v31 = [v28 lightProfile];
          if (v31)
          {
            uint64_t v34 = [v28 writeRequestForTransitionStartWithLightProfile:v31 startDate:v105 type:1];
            if (v34)
            {
              [v101 setObject:v28 forKey:v34];
              [v108 addObject:v34];
            }
            else
            {
              long long v40 = (void *)MEMORY[0x1D9452090]();
              long long v41 = val;
              HMFGetOSLogHandle();
              long long v42 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
              {
                long long v43 = HMFGetLogIdentifier();
                *(_DWORD *)id v148 = 138543618;
                id v149 = v43;
                __int16 v150 = 2112;
                *(void *)uint64_t v151 = v28;
                _os_log_impl(&dword_1D49D5000, v42, OS_LOG_TYPE_ERROR, "%{public}@Failed to create characteristic write request for natural lighting action: %@", v148, 0x16u);
              }
              uint64_t v34 = 0;
            }
LABEL_66:

LABEL_67:
            if (v110 == ++v23)
            {
              uint64_t v21 = [obj countByEnumeratingWithState:&v137 objects:v156 count:16];
              if (!v21) {
                goto LABEL_69;
              }
              continue;
            }
            goto LABEL_23;
          }
          break;
        }
        if (v28)
        {
          uint64_t v35 = (void *)MEMORY[0x1D9452090]();
          id v36 = val;
          HMFGetOSLogHandle();
          id v37 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            id v38 = HMFGetLogIdentifier();
            *(_DWORD *)id v148 = 138543618;
            id v149 = v38;
            __int16 v150 = 2112;
            *(void *)uint64_t v151 = v28;
            _os_log_impl(&dword_1D49D5000, v37, OS_LOG_TYPE_ERROR, "%{public}@Skipping executing natural lighting action, missing light profile: %@", v148, 0x16u);
          }
          uint64_t v39 = [MEMORY[0x1E4F28C58] hmErrorWithCode:-1];
          uint64_t v34 = *(void **)(*(void *)&buf[8] + 40);
          *(void *)(*(void *)&buf[8] + 40) = v39;
          goto LABEL_66;
        }
        id v44 = v32;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          long long v45 = v44;
        }
        else {
          long long v45 = 0;
        }
        id v46 = v45;
        uint64_t v100 = v44;

        if (v46)
        {
          long long v47 = [v46 convertedCharacteristicWriteRequests];
          long long v48 = v47;
          if (v47)
          {
            uint64_t v34 = [v47 residualAction];

            uint64_t v103 = [v48 characteristicWriteRequests];
            if (!v34)
            {
LABEL_55:

              goto LABEL_56;
            }
          }
          else
          {
            uint64_t v103 = 0;
            uint64_t v34 = v44;
          }
          [v34 setEncodePlaybackArchiveForExecution:1];
          goto LABEL_55;
        }
        uint64_t v34 = 0;
        uint64_t v103 = 0;
LABEL_56:
        objc_initWeak(&location, val);
        if ([v103 count])
        {
          dispatch_group_enter(group);
          long long v49 = (void *)MEMORY[0x1D9452090]();
          uint64_t v50 = val;
          HMFGetOSLogHandle();
          __int16 v51 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            id v52 = (id)objc_claimAutoreleasedReturnValue();
            long long v146 = 0uLL;
            id v53 = [v106 identifier];

            if (v53)
            {
              uint64_t v54 = [v106 identifier];
              [v54 getUUIDBytes:&v146];
            }
            else
            {
              long long v146 = *MEMORY[0x1E4F655A8];
            }
            long long v147 = v146;
            uint64_t v55 = [v103 count];
            *(_DWORD *)id v148 = v93;
            id v149 = v52;
            __int16 v150 = 1042;
            *(_DWORD *)uint64_t v151 = 16;
            *(_WORD *)&v151[4] = 2098;
            *(void *)&v151[6] = &v147;
            __int16 v152 = 2114;
            uint64_t v153 = val;
            __int16 v154 = 2048;
            uint64_t v155 = v55;
            _os_log_impl(&dword_1D49D5000, v51, OS_LOG_TYPE_INFO, "%{public}@Executing write requests for request identifier %{public,uuid_t}.16P from home: %{public}@ count: %lu for media actions", v148, 0x30u);
          }
          uint64_t v56 = [v106 source];
          uint64_t v57 = [v106 identifier];
          uint64_t v58 = [v106 qualityOfService];
          v129[0] = MEMORY[0x1E4F143A8];
          v129[1] = 3221225472;
          v130[0] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke;
          v130[1] = &unk_1E6A19938;
          id v131 = v99;
          objc_copyWeak(&v135, &location);
          id v59 = v103;
          id v132 = v59;
          uint64_t v134 = buf;
          uint64_t v133 = group;
          [(HMDHome *)v50 writeCharacteristicValues:v59 source:v56 identifier:v57 transport:v95 qualityOfService:v58 withCompletionHandler:v129];

          objc_destroyWeak(&v135);
        }
        uint64_t v60 = [v106 clientName];
        int v61 = (void *)v60;
        id v62 = @"Unknown";
        if (v60) {
          id v62 = (__CFString *)v60;
        }
        long long v63 = v62;

        dispatch_group_enter(group);
        v124[0] = MEMORY[0x1E4F143A8];
        v124[1] = 3221225472;
        v124[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_25;
        v124[3] = &unk_1E6A19988;
        id v125 = v99;
        objc_copyWeak(&v128, &location);
        uint64_t v127 = buf;
        double v126 = group;
        [v100 executeWithSource:v96 clientName:v63 completionHandler:v124];

        objc_destroyWeak(&v128);
        objc_destroyWeak(&location);

        goto LABEL_66;
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        long long v82 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v82;
        _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_ERROR, "%{public}@Failed to validate actions", buf, 0xCu);
      }
      uint64_t v83 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
      [v106 respondWithError:v83];

LABEL_93:
    }
    else
    {
      __int16 v74 = (void *)MEMORY[0x1D9452090]();
      uint64_t v75 = self;
      __int16 v76 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
      {
        id v77 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        *(void *)&uint8_t buf[4] = v77;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v106;
        _os_log_impl(&dword_1D49D5000, v76, OS_LOG_TYPE_ERROR, "%{public}@Invalid actions payload: %@", buf, 0x16u);
      }
      uint64_t v105 = [MEMORY[0x1E4F28C58] hmErrorWithCode:22];
      [v106 respondWithError:v105];
    }
  }
  else
  {
    uint64_t v70 = (void *)MEMORY[0x1D9452090]();
    uint64_t v71 = self;
    uint64_t v72 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
    {
      __int16 v73 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      *(void *)&uint8_t buf[4] = v73;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v106;
      _os_log_impl(&dword_1D49D5000, v72, OS_LOG_TYPE_ERROR, "%{public}@No Actions in message:(%@)", buf, 0x16u);
    }
    uint64_t v105 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    [v106 respondWithError:v105];
  }
}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_2;
  block[3] = &unk_1E6A19910;
  objc_copyWeak(&v17, (id *)(a1 + 64));
  id v13 = v5;
  id v14 = *(id *)(a1 + 40);
  id v15 = v6;
  long long v11 = *(_OWORD *)(a1 + 48);
  id v8 = (id)v11;
  long long v16 = v11;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);

  objc_destroyWeak(&v17);
}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_25(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_2_26;
  block[3] = &unk_1E6A19960;
  objc_copyWeak(&v11, (id *)(a1 + 56));
  id v9 = v3;
  long long v7 = *(_OWORD *)(a1 + 40);
  id v5 = (id)v7;
  long long v10 = v7;
  id v6 = v3;
  dispatch_async(v4, block);

  objc_destroyWeak(&v11);
}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_28(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  long long v7 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_2_29;
  block[3] = &unk_1E6A199B0;
  objc_copyWeak(&v19, (id *)(a1 + 80));
  id v13 = v5;
  id v14 = *(id *)(a1 + 40);
  id v15 = *(id *)(a1 + 48);
  id v16 = v6;
  id v17 = *(id *)(a1 + 56);
  long long v11 = *(_OWORD *)(a1 + 64);
  id v8 = (id)v11;
  long long v18 = v11;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);

  objc_destroyWeak(&v19);
}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_30(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) responseHandler];

  if (v2)
  {
    id v3 = [*(id *)(a1 + 32) responseHandler];
    (*((void (**)(id, void, void))v3 + 2))(v3, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), 0);
  }
}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_2_29(uint64_t a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));
  id v3 = *(id *)(a1 + 32);
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  id obj = *(id *)(a1 + 40);
  uint64_t v41 = [obj countByEnumeratingWithState:&v44 objects:v54 count:16];
  if (v41)
  {
    uint64_t v40 = *(void *)v45;
    id v37 = WeakRetained;
    do
    {
      for (uint64_t i = 0; i != v41; ++i)
      {
        if (*(void *)v45 != v40) {
          objc_enumerationMutation(obj);
        }
        id v5 = *(void **)(*((void *)&v44 + 1) + 8 * i);
        id v6 = [*(id *)(a1 + 48) objectForKey:v5];
        long long v7 = v6;
        if (v6)
        {
          id v8 = *(void **)(a1 + 56);
          uint64_t v9 = [v6 isNaturalLightingEnabled];
          id v43 = 0;
          char v10 = objc_msgSend(v8, "hmd_isValidResponseForWriteRequest:naturalLightingEnabled:error:", v5, v9, &v43);
          id v11 = v43;
          id v12 = (void *)MEMORY[0x1D9452090]();
          id v13 = WeakRetained;
          id v14 = HMFGetOSLogHandle();
          id v15 = v14;
          if (v10)
          {
            if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
            {
              id v16 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543618;
              long long v49 = v16;
              __int16 v50 = 2112;
              __int16 v51 = v7;
              id v17 = v15;
              os_log_type_t v18 = OS_LOG_TYPE_INFO;
              id v19 = "%{public}@Successfully executed natural lighting action: %@";
              uint32_t v20 = 22;
              goto LABEL_15;
            }
          }
          else if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            id v16 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543874;
            long long v49 = v16;
            __int16 v50 = 2112;
            __int16 v51 = v7;
            __int16 v52 = 2112;
            id v53 = v11;
            id v17 = v15;
            os_log_type_t v18 = OS_LOG_TYPE_ERROR;
            id v19 = "%{public}@Failed to execute natural lighting action %@:%@";
            uint32_t v20 = 32;
LABEL_15:
            _os_log_impl(&dword_1D49D5000, v17, v18, v19, buf, v20);
          }
          if (v3) {
            goto LABEL_24;
          }
          goto LABEL_22;
        }
        id v39 = v3;
        uint64_t v21 = [*(id *)(a1 + 64) objectForKey:v5];
        long long v22 = *(void **)(a1 + 56);
        uint64_t v23 = [v5 characteristic];
        id v42 = 0;
        uint64_t v24 = objc_msgSend(v22, "hmd_valueOfCharacteristic:error:", v23, &v42);
        id v11 = v42;

        id v25 = (void *)MEMORY[0x1D9452090]();
        id v26 = WeakRetained;
        id v27 = HMFGetOSLogHandle();
        id v28 = v27;
        if (v24)
        {
          if (!os_log_type_enabled(v27, OS_LOG_TYPE_INFO)) {
            goto LABEL_21;
          }
          int v29 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          long long v49 = v29;
          __int16 v50 = 2112;
          __int16 v51 = v21;
          uint64_t v30 = v28;
          os_log_type_t v31 = OS_LOG_TYPE_INFO;
          id v32 = "%{public}@Successfully executed characteristic write action: %@";
          uint32_t v33 = 22;
        }
        else
        {
          if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
            goto LABEL_21;
          }
          int v29 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543874;
          long long v49 = v29;
          __int16 v50 = 2112;
          __int16 v51 = v21;
          __int16 v52 = 2112;
          id v53 = v11;
          uint64_t v30 = v28;
          os_log_type_t v31 = OS_LOG_TYPE_ERROR;
          id v32 = "%{public}@Failed to execute characteristic write action %@:%@";
          uint32_t v33 = 32;
        }
        _os_log_impl(&dword_1D49D5000, v30, v31, v32, buf, v33);

        id WeakRetained = v37;
LABEL_21:

        id v3 = v39;
        if (v39) {
          goto LABEL_24;
        }
LABEL_22:
        if (v11) {
          id v3 = v11;
        }
LABEL_24:
      }
      uint64_t v41 = [obj countByEnumeratingWithState:&v44 objects:v54 count:16];
    }
    while (v41);
  }

  if (v3)
  {
    uint64_t v34 = *(void *)(*(void *)(a1 + 80) + 8);
    uint64_t v36 = *(void *)(v34 + 40);
    uint64_t v35 = (id *)(v34 + 40);
    if (!v36) {
      objc_storeStrong(v35, v3);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_2_26(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (*(void *)(a1 + 32))
  {
    id v3 = (void *)MEMORY[0x1D9452090]();
    id v4 = WeakRetained;
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      id v6 = HMFGetLogIdentifier();
      uint64_t v7 = *(void *)(a1 + 32);
      int v11 = 138543618;
      id v12 = v6;
      __int16 v13 = 2112;
      uint64_t v14 = v7;
      _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_ERROR, "%{public}@Failed to execute action with error: %@", (uint8_t *)&v11, 0x16u);
    }
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v10 = *(void *)(v8 + 40);
    uint64_t v9 = (id *)(v8 + 40);
    if (!v10) {
      objc_storeStrong(v9, *(id *)(a1 + 32));
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_2(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  id v3 = *(id *)(v1 + 32);
  id v38 = WeakRetained;
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = MEMORY[0x1D9452090]();
    id v6 = WeakRetained;
    uint64_t v7 = (void *)v5;
    id v8 = v6;
    uint64_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v57 = v10;
      __int16 v58 = 2112;
      id v59 = v4;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to execute write requests for converted media action with error: %@", buf, 0x16u);
    }
  }
  else
  {
    uint64_t v28 = [*(id *)(v1 + 40) count];
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    id v12 = *(id *)(v1 + 48);
    uint64_t v32 = [v12 countByEnumeratingWithState:&v52 objects:v68 count:16];
    if (!v32)
    {

      id v4 = 0;
      id v27 = 0;
      goto LABEL_38;
    }
    uint64_t v43 = 0;
    id v4 = 0;
    id obj = v12;
    uint64_t v30 = *(void *)v53;
    uint64_t v31 = v1;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v53 != v30) {
          objc_enumerationMutation(obj);
        }
        uint64_t v33 = v13;
        id v39 = *(void **)(*((void *)&v52 + 1) + 8 * v13);
        uint64_t v14 = objc_msgSend(*(id *)(v1 + 48), "hmf_dictionaryForKey:", v28);
        long long v48 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        id v36 = v14;
        uint64_t v35 = [v36 countByEnumeratingWithState:&v48 objects:v67 count:16];
        if (v35)
        {
          uint64_t v34 = *(void *)v49;
          do
          {
            uint64_t v15 = 0;
            do
            {
              if (*(void *)v49 != v34) {
                objc_enumerationMutation(v36);
              }
              uint64_t v37 = v15;
              uint64_t v40 = *(void *)(*((void *)&v48 + 1) + 8 * v15);
              id v16 = objc_msgSend(v36, "hmf_dictionaryForKey:");
              long long v44 = 0u;
              long long v45 = 0u;
              long long v46 = 0u;
              long long v47 = 0u;
              id v17 = v16;
              uint64_t v42 = [v17 countByEnumeratingWithState:&v44 objects:v66 count:16];
              if (v42)
              {
                uint64_t v41 = *(void *)v45;
                do
                {
                  for (uint64_t i = 0; i != v42; ++i)
                  {
                    if (*(void *)v45 != v41) {
                      objc_enumerationMutation(v17);
                    }
                    uint64_t v19 = *(void *)(*((void *)&v44 + 1) + 8 * i);
                    uint32_t v20 = objc_msgSend(v17, "hmf_dictionaryForKey:", v19);
                    uint64_t v21 = objc_msgSend(v20, "hmf_dataForKey:", @"kCharacteristicErrorDataKey");
                    if (v21)
                    {
                      uint64_t v22 = [MEMORY[0x1E4F28DC0] unarchivedObjectOfClass:objc_opt_class() fromData:v21 error:0];

                      uint64_t v23 = (void *)MEMORY[0x1D9452090]();
                      id v24 = WeakRetained;
                      id v25 = HMFGetOSLogHandle();
                      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
                      {
                        id v26 = HMFGetLogIdentifier();
                        *(_DWORD *)buf = 138544386;
                        uint64_t v57 = v26;
                        __int16 v58 = 2112;
                        id v59 = v39;
                        __int16 v60 = 2112;
                        uint64_t v61 = v40;
                        __int16 v62 = 2112;
                        uint64_t v63 = v19;
                        __int16 v64 = 2112;
                        uint64_t v65 = v22;
                        _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_ERROR, "%{public}@Failed to execute write requests for %@/%@/%@ with error: %@", buf, 0x34u);

                        id WeakRetained = v38;
                      }
                      ++v43;

                      id v4 = (void *)v22;
                    }
                  }
                  uint64_t v42 = [v17 countByEnumeratingWithState:&v44 objects:v66 count:16];
                }
                while (v42);
              }

              uint64_t v15 = v37 + 1;
            }
            while (v37 + 1 != v35);
            uint64_t v35 = [v36 countByEnumeratingWithState:&v48 objects:v67 count:16];
          }
          while (v35);
        }

        uint64_t v13 = v33 + 1;
        uint64_t v1 = v31;
      }
      while (v33 + 1 != v32);
      uint64_t v32 = [obj countByEnumeratingWithState:&v52 objects:v68 count:16];
    }
    while (v32);

    id v27 = 0;
    if (!v28 || v28 != v43) {
      goto LABEL_38;
    }
    if (!v4) {
      goto LABEL_6;
    }
  }
  uint64_t v11 = *(void *)(*(void *)(v1 + 64) + 8);
  if (!*(void *)(v11 + 40))
  {
    id v27 = v4;
    id v4 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v27;
    id WeakRetained = v38;
LABEL_38:

    id v4 = v27;
    goto LABEL_39;
  }
LABEL_6:
  id WeakRetained = v38;
LABEL_39:
  dispatch_group_leave(*(dispatch_group_t *)(v1 + 56));
}

@end