@interface HMDHomeManager
+ (BOOL)doesSaveReasonAffectHomeManager:(id)a3;
+ (BOOL)doesSaveReasonAffectOnlyLocalData:(id)a3;
+ (BOOL)doesSaveReasonNotAffectLocalData:(id)a3;
+ (BOOL)doesSaveReasonRequireForceSyncToWatch:(id)a3;
+ (BOOL)isThisDeviceAdminOfHome:(id)a3;
+ (BOOL)shouldIgnoreExpectedConfigurationVersionUpdateForReason:(id)a3;
+ (BOOL)shouldIncrementGenerationCounterForReason:(id)a3;
+ (id)_getIntentGroupClientIdentifierSalt;
+ (id)convertSaveReasonToTransationReason:(id)a3;
+ (id)createIdentifierSalt:(id)a3 deviceSpecific:(BOOL)a4;
+ (id)deriveIntentGroupIdentifierFromBaseUUID:(id)a3;
+ (id)emptyModelObjectWithChangeType:(unint64_t)a3 homeManagerUUID:(id)a4;
+ (id)getAccessoryCacheForIdentifier:(id)a3;
+ (id)getAllBackingStoreObjects:(int64_t)a3 primaryHomeUUID:(id)a4 cloudZone:(id)a5 appData:(id)a6;
+ (id)getContainersToCleanUp;
+ (id)getUniqueDeviceIdSalt;
+ (id)logCategory;
+ (id)remotePeerDeviceAddress:(id)a3;
+ (id)saltForDeviceSpecificIdentifier;
+ (unint64_t)legacyDataSizeLimit;
+ (void)_eraseAllAccessoryKeysAndIdentifiers;
+ (void)relaunchHomedDueToResetConfigurationWithDelay:(double)a3;
+ (void)removeAccessoryCacheForIdentifier:(id)a3;
+ (void)saveAccessoryCache:(id)a3 forIdentifier:(id)a4;
- (BOOL)_addWatch:(id)a3 toAssociatedList:(id)a4;
- (BOOL)_associateAccessories:(id)a3 withHomes:(id)a4;
- (BOOL)_capabilitiesAreSupported:(id)a3;
- (BOOL)_configureHomes:(id)a3 uncommittedTransactions:(id)a4;
- (BOOL)_configureHomesImpl:(id)a3 uncommittedTransactions:(id)a4;
- (BOOL)_findAnyAccessoryWithIdentities:(id)a3 inAccessoryServers:(id)a4;
- (BOOL)_handleAccessoryDiagnosticStateQueryWithResponse:(id)a3 hasAdditionalRequest:(BOOL)a4 error:(id)a5 completion:(id)a6;
- (BOOL)_handleControllerKeyAvailable;
- (BOOL)_onlyHH2SharedHomesExist;
- (BOOL)_removeAndAddKeyPair:(id)a3 userName:(id)a4 eraseReason:(unint64_t)a5;
- (BOOL)_removeLegacyHomeArchive:(id *)a3;
- (BOOL)_setPrimaryHome:(id)a3 idsDataSync:(BOOL)a4;
- (BOOL)_shouldDecodeMessage:(id)a3 error:(id *)a4;
- (BOOL)_shouldHandleHomeDataSync:(id)a3 remoteHome:(id)a4 sourceDeviceVersion:(id)a5;
- (BOOL)_shouldNotifyClientsAboutGenerationCounterUpdate;
- (BOOL)_submitSpamReportToIDS:(id)a3;
- (BOOL)_updateAccessoriesConfigured;
- (BOOL)_updateIncomingInvitesPresent;
- (BOOL)_updatePreferencesForConfiguredHomes;
- (BOOL)_updatePreferencesForCurrentHome;
- (BOOL)_zonesFetched;
- (BOOL)accountActive;
- (BOOL)accountStatusFailedDueToNetworkFailure;
- (BOOL)accountStatusIsAuthenticated;
- (BOOL)areThereAnyTTSUSessionsOngoing;
- (BOOL)assistantIdentifierChanged;
- (BOOL)backOffOperationInProgress;
- (BOOL)cacheUseAllowed;
- (BOOL)canHH2MigrationBeStarted:(id *)a3;
- (BOOL)canPerformDryRunOfHH2Migration;
- (BOOL)checkConflictInHomeNamespaceWithName:(id)a3 options:(unint64_t)a4 namespaceUUID:(id)a5 error:(id *)a6;
- (BOOL)cloudkitAccountStatusDetermined;
- (BOOL)companionReachable;
- (BOOL)dataSyncInProgressWithState:(unint64_t *)a3 withMessage:(id)a4;
- (BOOL)demoFinalized;
- (BOOL)didCreateAddACWGKeysOperation;
- (BOOL)expectingInvitationResponseForIdentifier:(id)a3;
- (BOOL)forceFetchHomeManagerZone;
- (BOOL)getOrCreateControllerPublicKey:(id *)a3 controllerUsername:(id *)a4 error:(id *)a5;
- (BOOL)hasClientRequestedMediaAccessoryControl:(id)a3;
- (BOOL)hasFinishedStartingUp;
- (BOOL)hasHAPAccessoryInAnyHome;
- (BOOL)hasLoadedData;
- (BOOL)hasValidControllerKeyToSave;
- (BOOL)hasiCloudAndControllerKey;
- (BOOL)homeDataLoadedFromArchive;
- (BOOL)ignoreFirstTimeReachabilityChanged;
- (BOOL)initialPCSStatusFetchCompleted;
- (BOOL)isAccessAllowedWhenLocked;
- (BOOL)isActive;
- (BOOL)isCloudAccountActive;
- (BOOL)isCurrentResidentDeviceRunningThreadNetwork:(id)a3;
- (BOOL)isDataSyncInProgress;
- (BOOL)isDataSyncInProgressWithMessage:(id)a3;
- (BOOL)isFirstCloudImportComplete;
- (BOOL)isHH2MigrationInProgress;
- (BOOL)isHomeManagerZoneFirstFetch;
- (BOOL)isNetworkConnectionAvailable;
- (BOOL)isPairedWithWatch;
- (BOOL)isResidentCapable;
- (BOOL)isResidentEnabled;
- (BOOL)isSignedIntoiCloud;
- (BOOL)isStartThreadNetworkInProgress;
- (BOOL)lastAnswerForShouldCloudSyncData;
- (BOOL)legacyZoneHasRecordsAvailable;
- (BOOL)missingHomeDataRecord;
- (BOOL)moveDirectlyToHH2;
- (BOOL)moveDirectlyToHH2IfOnlyHH2SharedHomesExist;
- (BOOL)needToCleanUpKeys;
- (BOOL)operationsWithIdentifiers:(id)a3 outOperations:(id *)a4;
- (BOOL)pcsEnabled;
- (BOOL)postSyncDataUpdatedNotification;
- (BOOL)setLocalPairingIdentity:(id)a3 error:(id *)a4;
- (BOOL)shouldAcceptInvitationPayload:(id)a3 error:(id *)a4;
- (BOOL)shouldAcceptInvitationWithHomeName:(id)a3;
- (BOOL)shouldClearDeviceSetupFollowUp;
- (BOOL)speakersAreConfigured;
- (BOOL)speakersAreConfiguredInOwnedHomes;
- (BOOL)uploadHomeDataToCloud;
- (BOOL)uploadMetadataToCloud;
- (BOOL)uploadToCloudIsPending;
- (BOOL)userWithMergeIdIsMemberOfAHome:(id)a3;
- (BOOL)zoneFetchFailed;
- (HAPKeyStore)hapKeyStore;
- (HMDAccessoryBrowser)accessoryBrowserInternal;
- (HMDAccessoryFirmwareUpdateManager)accessoryFirmwareUpdateManager;
- (HMDAccessorySetupCoordinator)accessorySetupCoordinator;
- (HMDAccessorySetupManager)accessorySetupManager;
- (HMDAccountRegistry)accountRegistry;
- (HMDAppleAccessoryPairingController)legacyAccessoryPairingController;
- (HMDAppleAccountManager)appleAccountManager;
- (HMDAppleMediaAccessoryDiagnosticInfoController)appleMediaAccessoryDiagnosticInfoController;
- (HMDApplicationData)appData;
- (HMDAssistantGather)gatherer;
- (HMDBackingStore)backingStore;
- (HMDBiomeEventManager)biomeEventManager;
- (HMDBiomeLogEventObserver)biomeLogEventObserver;
- (HMDBonjourBrowserHelper)bonjourBrowser;
- (HMDCHIPDataSource)chipDataSource;
- (HMDCHIPXPCListener)chipXPCListener;
- (HMDCameraClipsQuotaMessenger)cameraClipsQuotaMessenger;
- (HMDCameraRecordingLoadBalancer)cameraLoadBalancer;
- (HMDCapabilitiesController)capabilitiesController;
- (HMDClientConnection)clientConnection;
- (HMDCloudAccount)cloudAccount;
- (HMDCloudDataSyncStateFilter)cloudDataSyncStateFilter;
- (HMDCloudManager)cloudDataSyncManager;
- (HMDCloudManagerDataSource)cloudDataSource;
- (HMDCompanionManager)companionManager;
- (HMDCompositeSettingsControllerManager)compositeSettingsControllerManager;
- (HMDCurrentAccessorySetupMetricDispatcher)currentAccessorySetupMetricDispatcher;
- (HMDDatabase)defaultDatabase;
- (HMDDevice)companionDevice;
- (HMDDeviceSetupConfiguringController)configuringStateController;
- (HMDDuetPredictionSubscriber)duetSubscriber;
- (HMDFMFHandler)fmfHandler;
- (HMDHH1IDSInvitationManager)idsInvitationManager;
- (HMDHH2AutoMigrationEligibilityChecker)hh2AutoMigrationEligibilityChecker;
- (HMDHH2AutoMigrationMonitor)hh2AutoMigrationMonitor;
- (HMDHH2FrameworkSwitch)hh2FrameworkSwitch;
- (HMDHomeManager)init;
- (HMDHomeManager)initWithMessageDispatcher:(id)a3 accessoryBrowser:(id)a4 messageFilterChain:(id)a5 homeData:(id)a6 localDataDecryptionFailed:(BOOL)a7 identityRegistry:(id)a8 accountRegistry:(id)a9 metricsManager:(id)a10 configuringStateController:(id)a11 diagnosticInfoController:(id)a12 currentAccessorySetupMetricDispatcher:(id)a13 uncommittedTransactions:(id)a14;
- (HMDHomeManager)initWithMessageDispatcher:(id)a3 accessoryBrowser:(id)a4 messageFilterChain:(id)a5 homeData:(id)a6 localDataDecryptionFailed:(BOOL)a7 identityRegistry:(id)a8 accountRegistry:(id)a9 metricsManager:(id)a10 darwinNotificationProvider:(id)a11 notificationCenter:(id)a12 backingStoreFactory:(id)a13 wifiManagerFactory:(id)a14 appleAccountManager:(id)a15 remoteAccountManager:(id)a16 userDefaults:(id)a17 biomeEventManager:(id)a18 logEventSubmitter:(id)a19 widgetConfigurationReader:(id)a20 configuringStateController:(id)a21 diagnosticInfoController:(id)a22 currentAccessorySetupMetricDispatcher:(id)a23 uncommittedTransactions:(id)a24;
- (HMDHomeManagerObjectChangeHandler)homeManagerObjectChangeHandler;
- (HMDHomeManagerObjectLookup)lookup;
- (HMDHomeManagerXPCClientConnectionsManager)connectionsManager;
- (HMDIDSFirewallManager)idsFirewallManager;
- (HMDIDSServerBag)idsServerBag;
- (HMDIdentityRegistry)identityRegistry;
- (HMDKeyTransferAgent)keyTransferAgent;
- (HMDLastEventStoreController)lastEventStoreController;
- (HMDLocation)locationHandler;
- (HMDLoggingEventForwarder)loggingMemoryEventForwarder;
- (HMDMTSXPCServer)mtsXPCServer;
- (HMDMatterSoftwareUpdateProviderDelegate)matterSoftwareUpdateProviderDelegate;
- (HMDMediaGroupParticipantLocalDataStorage)mediaGroupParticipantDataLocalStorage;
- (HMDMemoryUtilizationTracker)memoryTracker;
- (HMDMessageDispatcher)messageDispatcher;
- (HMDMessageFilterChain)msgFilterChain;
- (HMDMetricsManager)metricsManager;
- (HMDMicroLocationLogEventObserver)microLocationLogEventObserver;
- (HMDMicroLocationManager)microLocationManager;
- (HMDMobileAssetManager)mobileAssetManager;
- (HMDMultiUserSettingsMetricsEventDispatcher)multiUserSettingsMetricEventDispatcher;
- (HMDMultiUserStatusController)multiUserStatusController;
- (HMDNameValidator)nameValidator;
- (HMDPairedSync)pairedSync;
- (HMDPowerManager)powerManager;
- (HMDRemoteAccountManager)remoteAccountManager;
- (HMDRemoteEventRouterAssertionController)eventRouterAssertionController;
- (HMDResidentMesh)residentMesh;
- (HMDSiriEndpointOnboardingManager)siriEndpointOnboardingManager;
- (HMDSiriEndpointSettingsSyncManager)siriEndPointSettingsSyncManager;
- (HMDSoftwareUpdateManager)softwareUpdateManager;
- (HMDSyncOperationManager)syncManager;
- (HMDUserCloudShareManager)userCloudShareManager;
- (HMDWatchManager)watchManager;
- (HMDWidgetConfigurationReader)widgetConfigurationReader;
- (HMDWidgetTimelineRefresher)widgetTimelineRefresher;
- (HMDXPCEventRouterServer)eventRouterXPCServer;
- (HMDarwinNotificationProvider)darwinNotificationProvider;
- (HMEDelegatingEventRouter)registrationForwardingEventRouter;
- (HMELastEventStore)lastEventStore;
- (HMEMemoryEventBus)memoryEventRouter;
- (HMFActivity)setupActivity;
- (HMFBoolean)overrideCurrentHomeUUIDToNil;
- (HMFNetMonitor)cloudReachabilityMonitor;
- (HMFNetMonitor)reachabilityMonitor;
- (HMFTimer)debounceHomesUpdateTimer;
- (HMFTimer)debounceRegenerateAssistantSyncDataTimer;
- (HMFTimer)memoryMonitorLogEventTimer;
- (HMFTimer)periodicMobileCatalogUpdateTimer;
- (HMFTimer)remoteAccessHealthMonitorTimer;
- (HMFTimer)sharedHomesPushDelayTimer;
- (HMFTimer)watchPushDelayTimer;
- (HMMLogEventSubmitting)logEventSubmitter;
- (NSArray)homes;
- (NSDate)bonjourBrowserHelperLastCompletionDate;
- (NSDictionary)demoAccessories;
- (NSMapTable)homeUUIDsByWalletKeyAssertionXPCConnection;
- (NSMapTable)watchSyncRetryContextByRetryTimer;
- (NSMutableArray)accessorySetupMetricDispatchers;
- (NSMutableArray)cloudZones;
- (NSMutableArray)deviceSetupSessions;
- (NSMutableArray)incomingInvitations;
- (NSMutableArray)pendingResponsesForAccessoryFinder;
- (NSMutableArray)uuidsOfRemovedHomes;
- (NSMutableDictionary)associatedRemotePeers;
- (NSMutableDictionary)associatedWatchPeers;
- (NSMutableDictionary)currentHomeConfigurations;
- (NSMutableDictionary)pendingDataSyncAcks;
- (NSMutableDictionary)pendingFragmentationStream;
- (NSMutableDictionary)pendingRemoteSessions;
- (NSMutableDictionary)pendingSharedUserAcceptLogEventBuilders;
- (NSMutableDictionary)userPushCacheMap;
- (NSMutableDictionary)watchSyncRetryContextBySyncIdentifier;
- (NSMutableDictionary)watchSyncStateMap;
- (NSMutableSet)dialogCancelationContexts;
- (NSMutableSet)fullSyncedWatchPeers;
- (NSMutableSet)mergeIDsOfUsersOfRemovedSharedHomes;
- (NSMutableSet)pendingHomesBeingRemoved;
- (NSMutableSet)pendingResidentSetupSessions;
- (NSMutableSet)unassociatedRemotePeers;
- (NSMutableSet)unprocessedOperationModelIdentifiers;
- (NSNotificationCenter)notificationCenter;
- (NSSet)homeUUIDsWithAutoAddWalletKeySuppressed;
- (NSString)currentEventSource;
- (NSUUID)currentHomeUUID;
- (NSUUID)currentHomeUUIDOverride;
- (NSUUID)dataTag;
- (NSUUID)lastCurrentHomeUUID;
- (NSUUID)lastRemovedCurrentAccessoryUUID;
- (NSUUID)primaryHomeUUID;
- (NSUUID)uuid;
- (NSUserDefaults)userDefaults;
- (OS_dispatch_queue)clientConnectionQueue;
- (OS_dispatch_queue)workQueue;
- (OS_dispatch_source)accessoryFinderTimer;
- (OS_dispatch_source)cloudOperationRetryTimer;
- (double)setupEndTimestamp;
- (double)setupStartTimestamp;
- (id)__computedCurrentHomeUUID;
- (id)__generateAssistantTeamIdentifier;
- (id)_accessoryOfCurrentDevice;
- (id)_appleMediaAccessoryOfCurrentDevice;
- (id)_checkActionSetNameConflict:(id)a3 withNamespaceUUIDs:(id)a4;
- (id)_checkNameConflict:(id)a3 withNamespaceUUIDs:(id)a4;
- (id)_compressHomeData:(id)a3;
- (id)_computedCurrentHomeUUID;
- (id)_currentHome;
- (id)_dataForPersistentStoreIncrementingGeneration:(BOOL)a3 reason:(id)a4;
- (id)_decodeDiagnosticInfoFromLocalResponse:(id)a3;
- (id)_destinationFromMessage:(id)a3;
- (id)_deviceForIdentifier:(id)a3;
- (id)_diagnosticInfoFromRemoteResponse:(id)a3;
- (id)_dumpHomeManagerData;
- (id)_filterAccessories:(id)a3 inHome:(id)a4;
- (id)_filterAccessories:(id)a3 withIdentifiers:(id)a4;
- (id)_findHomeConfigurationModelChange:(id)a3;
- (id)_findHomeModel:(id)a3;
- (id)_findHomeModelChange:(id)a3;
- (id)_findHomeOwnerModelChange:(id)a3;
- (id)_findHomeSharedUserModelChange:(id)a3;
- (id)_getAssistantHashingData;
- (id)_getListOfUsersToPushMetadataChangesTo;
- (id)_getRequestedState:(id)a3 activity:(id)a4;
- (id)_homeDataForPersistentStoreIncrementingGeneration:(BOOL)a3 reason:(id)a4;
- (id)_homeFromEventIdentifier:(id)a3;
- (id)_homeWithAssistantIdentifier:(id)a3;
- (id)_homeWithName:(id)a3;
- (id)_homeWithUUID:(id)a3;
- (id)_homeWithUniqueIdentifier:(id)a3 forClientIdentifierSalt:(id)a4;
- (id)_homeWithZoneID:(id)a3;
- (id)_homesWithName:(id)a3;
- (id)_legacyContainer;
- (id)_legacyHomeAcceptedZoneIDFromHomeUUID:(id)a3;
- (id)_legacyHomeZoneIDFromHomeUUID:(id)a3;
- (id)_loadCloudTransactionForRemoteHome:(id)a3 localHome:(id)a4 cachedHome:(id)a5 version:(int64_t)a6;
- (id)_mediaRouteIdentifierForAccessory:(id)a3;
- (id)_performPreHH2RebootTasks;
- (id)_prepareAnswerForRequestedCapabilities:(id)a3;
- (id)_prepareDataForDevicesOnSameAccountForHome:(id)a3 remoteGateway:(BOOL)a4 isAtLeastV4:(BOOL)a5;
- (id)_prepareDataForDevicesOnSameAccountForHome:(id)a3 remoteGateway:(BOOL)a4 isAtLeastV4:(BOOL)a5 migrateToHH2:(BOOL)a6;
- (id)_prepareHomesVersionDict;
- (id)_processTestModeConfiguration:(id)a3;
- (id)_processTestModeCurrentHomeOverride:(id)a3;
- (id)_processTestModeHomeAccessControlOverride:(id)a3;
- (id)_processTestModeHomeLocationStatusOverride:(id)a3;
- (id)_processTestModeSkipHH2MigrationOverride:(id)a3;
- (id)_processTestModeUpdateHomeLocation:(id)a3;
- (id)_pushChangesToAllUsersOfAllHomesForMigration;
- (id)_remotePeers;
- (id)_runtimeState;
- (id)_scrubRequestedCapabilities:(id)a3 fromMessage:(id)a4;
- (id)_statusPayloadForMessage:(id)a3;
- (id)_trackIncomingInvitationFromAccount:(id)a3 mergeID:(id)a4 idsInvitationIdentifier:(id)a5 payload:(id)a6 invitationState:(int64_t)a7 error:(id *)a8;
- (id)_userPushCachedGetDeviceForUser:(id)a3;
- (id)_zoneInformationWithUUID:(id)a3;
- (id)accessAllowedWhenLockedSettingFileName;
- (id)accessoriesMatchingIdentifier:(id)a3;
- (id)accessorySetupMetricDispatcherForAccessoryUUID:(id)a3;
- (id)accessorySetupMetricDispatchersForHome:(id)a3;
- (id)accessoryWithHomeUUID:(id)a3 accessoryUUID:(id)a4;
- (id)accessoryWithIDSIdentifier:(id)a3;
- (id)accessoryWithUUID:(id)a3;
- (id)activeAccountIdentifier;
- (id)addName:(id)a3 namespace:(id)a4;
- (id)backingStoreObjects:(int64_t)a3;
- (id)createCloudDatabaseAndPerformInitialSync:(id)a3;
- (id)createCurrentAccessoryCapabilities;
- (id)createCurrentResidentCapabilities;
- (id)currentAccessory;
- (id)currentAccessoryHome;
- (id)currentAccessoryHomeUUID;
- (id)currentAccessoryUUID;
- (id)currentMediaGroupsAggregateCunsumer;
- (id)delegatingRouter:(id)a3 filteredTopics:(id)a4 forRouter:(id)a5;
- (id)delegatingRouter:(id)a3 upstreamTopicsFor:(id)a4;
- (id)deleteLocalZone:(id)a3 localDatabase:(id)a4 containerID:(id)a5;
- (id)destinationIdentifierForMediaSystem:(id)a3 role:(unint64_t)a4;
- (id)eventRouterServerDiagnosticInfo;
- (id)expandedTopicsForTopics:(id)a3;
- (id)filterHomes:(id)a3 isSPIEntitled:(BOOL)a4;
- (id)firstSetupSessionIdentifierOutputStartTime:(double *)a3;
- (id)generateDataForSharedHomeModel:(id)a3;
- (id)generatePayloadFromHome:(id)a3 forAdmin:(BOOL)a4 user:(id)a5 supportedFeatures:(id)a6;
- (id)getOrCreateLocalPairingIdentity:(id *)a3;
- (id)hapMetadataForBiomeLogEventObserver:(id)a3;
- (id)hapMetadataForMicroLocationLogEventObserver:(id)a3;
- (id)homeUUIDsWithAutoAddWalletKeySuppressedSync;
- (id)homeUserFromMessage:(id)a3 home:(id)a4;
- (id)homesToSendForNonSPIClients;
- (id)hubAccessoriesWithHomeUUID:(id)a3 forSiriEndpointProfileMessageHandler:(id)a4;
- (id)identifiersOfAccessories:(id)a3;
- (id)identifiersOfAccessoriesForHome:(id)a3;
- (id)languageListProviderForHomeUUID:(id)a3;
- (id)lastUserAddRemoveTimestamp;
- (id)mediaSystemForAppleMediaAccessory:(id)a3;
- (id)messageDestination;
- (id)modelObjectWithChangeType:(unint64_t)a3;
- (id)modelObjectWithChangeType:(unint64_t)a3 version:(int64_t)a4;
- (id)multiUserSettingsForMultiUserSettingsMetricsEventDispatcherDataSource;
- (id)needsOnboardingForHomeUUID:(id)a3 accessoryUUID:(id)a4;
- (id)pairedAccessories;
- (id)removeName:(id)a3 namespace:(id)a4;
- (id)replaceName:(id)a3 withNewName:(id)a4 inNamespaces:(id)a5;
- (id)settingsControllerForAccessoryUUID:(id)a3 homeUUID:(id)a4;
- (id)sharedUserAcceptEventBuilderForHomeUuid:(id)a3;
- (id)topicNameForMediaGroupParticipantDataLocalStorage:(id)a3;
- (id)updatedUUIDForDiscoveredUnpairedAccessory:(id)a3;
- (id)upstreamTopicsForTopic:(id)a3;
- (id)userUUIDForMessage:(id)a3 homeUUID:(id)a4;
- (id)userWithMergeID:(id)a3;
- (id)validateHomeName:(id)a3;
- (id)wifiManagerFactory;
- (id)writeMigrationRecordWithShouldSkipKeyRollOperations:(BOOL)a3 forceMigrationFailureForTesting:(BOOL)a4 migrateFromTestDirectory:(BOOL)a5 dryRun:(BOOL)a6;
- (int)generationCounterToken;
- (int64_t)numberOfAccessoryWithNewFirmwareAvailable;
- (int64_t)numberOfPendingIncomingInvitation;
- (int64_t)recoveryVersion;
- (int64_t)residentEnabledState;
- (unint64_t)assistantGenerationCounter;
- (unint64_t)cloudOperationRetryCount;
- (unint64_t)generationCounter;
- (unint64_t)homeDatabaseSize;
- (unint64_t)homepodSetupRetryCount;
- (unint64_t)numHomes;
- (unint64_t)siriSyncNotificationTime;
- (unint64_t)status;
- (unint64_t)statusForMessage:(id)a3;
- (unsigned)_nextTransactionIdentifier;
- (unsigned)nextRequestTransactionIdentifier;
- (void)__accountAddedDevice:(id)a3;
- (void)__accountRegistryAddedAccount:(id)a3;
- (void)__accountRegistryRemovedAccount:(id)a3;
- (void)__accountRemovedDevice:(id)a3;
- (void)__handleAppleAccountUpdated:(id)a3;
- (void)__handleAppleAccountUpdated:(id)a3 previousAccount:(id)a4;
- (void)__handleCompanionUpdated:(id)a3;
- (void)__handleDeviceCapabilitiesUpdated:(id)a3;
- (void)__handleDeviceUpdatedNotification:(id)a3;
- (void)__handleInitialFetch:(id)a3;
- (void)__handleProcessMemoryPressureEvent:(id)a3;
- (void)__handleRequestFetchHomeConfiguration:(id)a3;
- (void)__handleUpdatedCurrentDevice:(id)a3;
- (void)__handleWatchConnected:(id)a3;
- (void)__handleWatchDisconnected:(id)a3;
- (void)__sendUpdateRequestToAdminForInvitation:(id)a3 homeUUID:(id)a4 invitationState:(int64_t)a5 authStatus:(id)a6;
- (void)__setLastSyncedAssistantConfigurationVersion:(unint64_t)a3;
- (void)__startupFirewallRuleManagerForMessage:(id)a3 completion:(id)a4;
- (void)_acceptHomeInviteFromAccount:(id)a3 message:(id)a4 trackInvite:(BOOL)a5;
- (void)_accessoriesAreLocallyReachableOnTransientDevice:(BOOL)a3 forHome:(id)a4;
- (void)_accountAvailabilityChanged:(BOOL)a3;
- (void)_addCloudZone:(id)a3 ownerName:(id)a4;
- (void)_addCurrentResidentDeviceToHomes:(id)a3;
- (void)_addIncomingInvitation:(id)a3;
- (void)_addPendingDataSyncAcksForUser:(id)a3 forHome:(id)a4;
- (void)_addSyncOperation:(id)a3;
- (void)_addSyncOperation:(id)a3 forWatchWithIdentifier:(id)a4;
- (void)_addWatch:(id)a3 completionHandler:(id)a4;
- (void)_archiveSyncDataForHome:(id)a3;
- (void)_archiveSyncDataForHome:(id)a3 toUser:(id)a4;
- (void)_assistantSyncDataChanged:(id)a3;
- (void)_auditDuplicatePreviouslyAddedAccessory:(id)a3;
- (void)_auditKeychainEntries;
- (void)_cancelAccessoryFinderTimer;
- (void)_changePrimaryHome:(id)a3;
- (void)_checkAndAddWatchDevices:(id)a3 resend:(BOOL)a4 requestFromWatch:(BOOL)a5;
- (void)_checkAndAddWatchDevicesWithResend:(BOOL)a3;
- (void)_checkAndInformCompanionDevice;
- (void)_checkForAccountChanged;
- (void)_checkForRemotePeers;
- (void)_checkForRemotePeersAndRegisterForRemoteNotifications:(BOOL)a3;
- (void)_cleanChangesIfNoAddChangeObjectID:(id)a3 completion:(id)a4;
- (void)_cleanHomeManagerZoneInformationWithoutHome;
- (void)_cloudReachabilityMonitorChanged:(BOOL)a3;
- (void)_determineEmptyHomesForOwnersWithCompletionHandler:(id)a3;
- (void)_determineLegacyLocalChanges:(id)a3;
- (void)_determineLocalChangesAndSchedulePush;
- (void)_dumpToLog:(id)a3 withState:(id)a4;
- (void)_electCompanionForRemoteAccess:(id)a3;
- (void)_electRemoteAccessDeviceForHome:(id)a3 retryCount:(unint64_t)a4;
- (void)_electRemoteAccessPeerForHome:(id)a3;
- (void)_electRemoteAccessPeerForHome:(id)a3 retryCount:(unint64_t)a4;
- (void)_electRemoteGatewayForHomesAfterReachabilityChanges;
- (void)_eraseConfiguration:(BOOL)a3 completionHandler:(id)a4;
- (void)_eraseLocalHomeConfiguration;
- (void)_eraseLocalHomeConfigurationAfterSignOut;
- (void)_eraseLocalHomeConfigurationAndDeleteMetadata:(BOOL)a3 completionQueue:(id)a4 completion:(id)a5;
- (void)_eraseLocalHomeConfigurationAndDeleteMetadata:(BOOL)a3 reason:(unint64_t)a4 completionQueue:(id)a5 completion:(id)a6;
- (void)_eraseLocalHomeConfigurationWithReason:(unint64_t)a3;
- (void)_eraseLocalHomeData;
- (void)_eraseLocalMetadata;
- (void)_fetchAllZones:(id)a3;
- (void)_fetchDataFromCloud;
- (void)_fetchHasOnlyEmptyHomesWithCompletion:(id)a3;
- (void)_fetchHomeDataFromCloudWithCloudConflict:(BOOL)a3 forceFetch:(BOOL)a4 withDelay:(double)a5 accountCompletion:(id)a6;
- (void)_fetchHomeFromCloudZone:(id)a3 cloudConflict:(BOOL)a4 withDelay:(double)a5 completionHandler:(id)a6;
- (void)_fetchHomeManagerCloudConflict:(BOOL)a3 withDelay:(double)a4 completionHandler:(id)a5;
- (void)_findCloudHomeZonesToIgnore:(id)a3;
- (void)_findRemotePeerContainingAccessories:(id)a3 forHome:(id)a4;
- (void)_findZoneInformationWithoutHome:(id)a3;
- (void)_fragmentationStream:(id)a3 didCloseWithError:(id)a4;
- (void)_fragmentationStream:(id)a3 didReceiveData:(id)a4 transactionIdentifier:(unsigned __int16)a5 error:(id)a6;
- (void)_generateAssistantSyncDataAndIncrementVersion:(BOOL)a3 requestSync:(BOOL)a4 urgent:(BOOL)a5 completion:(id)a6;
- (void)_getRuntimeStateUpdateForHomeManager:(BOOL)a3 includeMediaAccessorySessionState:(BOOL)a4 options:(unint64_t)a5 includeResidentDeviceState:(BOOL)a6 completion:(id)a7;
- (void)_handleAccessAllowedWhenLockedRequest:(id)a3;
- (void)_handleAccessHomeInvite:(id)a3;
- (void)_handleAccessHomeInviteFromAccount:(id)a3 mergeID:(id)a4 idsInvitationIdentifier:(id)a5 payload:(id)a6 messageResponseHandler:(id)a7;
- (void)_handleAccessoryDiagnosticQueryWithOptions:(unint64_t)a3 accessory:(id)a4 accessoryUUID:(id)a5 mediaRouteID:(id)a6 additionalFetchKeys:(id)a7 remoteMessageTimeout:(double)a8 remoteMessageRestriction:(unint64_t)a9 completion:(id)a10;
- (void)_handleAccessoryDiagnosticStateQuery:(id)a3;
- (void)_handleAccountAvailabilityChanged:(id)a3;
- (void)_handleAccountStatusDeterminedWithError:(id)a3 homeDataRecordExists:(BOOL)a4 metadataRecordExists:(BOOL)a5 completion:(id)a6;
- (void)_handleAddRemoteAccessRequest:(id)a3;
- (void)_handleAreYouAtHome:(id)a3;
- (void)_handleAssistantSyncDataRequest:(id)a3;
- (void)_handleAttemptHH2AutoMigrationMessage:(id)a3;
- (void)_handleClearMobileAssetsInfoRequest:(id)a3;
- (void)_handleCompanionKeysSync:(id)a3;
- (void)_handleConnectivityInfoRequest:(id)a3;
- (void)_handleContactStoreChanged;
- (void)_handleCurrentAccessoryAddedNotification:(id)a3;
- (void)_handleCurrentAccessoryRemovedNotification:(id)a3;
- (void)_handleCurrentHomeChanged:(id)a3;
- (void)_handleDeviceSetupConfiguringStateQuery:(id)a3;
- (void)_handleDeviceSetupSessionClose:(id)a3;
- (void)_handleDeviceSetupSessionOpen:(id)a3;
- (void)_handleDiagnosticInfo:(id)a3;
- (void)_handleDismissBulletinRequest:(id)a3;
- (void)_handleDismissDialogRequest:(id)a3;
- (void)_handleDoYouSeeUnpairedAccessories:(id)a3;
- (void)_handleDumpDatabase:(id)a3;
- (void)_handleDumpState:(id)a3;
- (void)_handleElectDeviceForIDSSession:(id)a3;
- (void)_handleEnableResidentForThisDeviceRequest:(id)a3;
- (void)_handleEnableUARPPacketCaptureRequest:(id)a3;
- (void)_handleFetchCurrentUserPairingIdentityForHomeContainingAccessoryRequest:(id)a3;
- (void)_handleFetchDevicesMessage:(id)a3;
- (void)_handleFetchModifyHome:(id)a3 isLegacyTransaction:(BOOL)a4 completion:(id)a5;
- (void)_handleFetchObjectChange:(id)a3 home:(id)a4 isLegacyTransaction:(BOOL)a5 completion:(id)a6;
- (void)_handleFetchSetupMode:(id)a3;
- (void)_handleGetTLVForJSON:(id)a3;
- (void)_handleHH2SentinelZonePresent:(id)a3;
- (void)_handleHomeDataSync:(id)a3;
- (void)_handleHomeManagerSyncWalletKeysPassSerialNumbersMessage:(id)a3;
- (void)_handleHomeManagerTransactionsFetched:(id)a3 stagedTransaction:(id)a4 mustReplay:(id)a5 cloudConflict:(BOOL)a6 transactionError:(id)a7 syncCompletion:(id)a8;
- (void)_handleHomeUtilRemoteMessageRequest:(id)a3;
- (void)_handleHomesConfigSync:(id)a3;
- (void)_handleMetadataSync:(id)a3;
- (void)_handleNetworkFirewallAddOverridesRequest:(id)a3;
- (void)_handleNetworkFirewallDumpCloudRecordsRequest:(id)a3;
- (void)_handleNetworkFirewallDumpLocalRulesRequest:(id)a3;
- (void)_handleNetworkFirewallDumpPairedMetadataRequest:(id)a3;
- (void)_handleNetworkFirewallFetchCloudChangesRequest:(id)a3;
- (void)_handleNetworkFirewallRemoveLocalRulesRequest:(id)a3;
- (void)_handleNetworkFirewallRemoveOverridesRequest:(id)a3;
- (void)_handleNetworkMismatchInfo:(id)a3;
- (void)_handlePairingIdentityRequest:(id)a3;
- (void)_handlePing:(id)a3;
- (void)_handlePrepareForDiagnosticExtension:(id)a3;
- (void)_handleQueryHomeNamespace:(id)a3;
- (void)_handleQueryMetadata:(id)a3;
- (void)_handleQueryVersionInformation:(id)a3;
- (void)_handleQueryiCloudSwitchState:(id)a3;
- (void)_handleRemoteSessionTornDownNotification:(id)a3;
- (void)_handleRemoveAccount:(id)a3;
- (void)_handleRemoveAllHomeKitPairingIdentities:(id)a3;
- (void)_handleRemoveHomeOperation:(id)a3 message:(id)a4;
- (void)_handleRequestAddHome:(id)a3;
- (void)_handleRequestFetchHomeConfiguration:(id)a3;
- (void)_handleRequestForCompanionKeysSync:(id)a3;
- (void)_handleRequestIsUserUsingHomeKit:(id)a3;
- (void)_handleRequestRemoveHome:(id)a3;
- (void)_handleRequestRuntimeStateUpdate:(id)a3;
- (void)_handleRequestSetPrimaryHome:(id)a3;
- (void)_handleRequestToCancelHomeInvitation:(id)a3 saveReason:(id)a4;
- (void)_handleRequestToUpdateHomeInvitationFromInviter:(id)a3;
- (void)_handleRequestToUpdateHomeInvitationFromLocalUser:(id)a3;
- (void)_handleResetConfiguration:(id)a3;
- (void)_handleResetHome:(id)a3;
- (void)_handleResolveAccount:(id)a3;
- (void)_handleRetrieveVendorIdentifier:(id)a3;
- (void)_handleSaveRequest:(id)a3;
- (void)_handleSetMetadata:(id)a3;
- (void)_handleSignificantTimeChange;
- (void)_handleSwitchSetupMode:(id)a3;
- (void)_handleSysdiagnoseRequest:(id)a3;
- (void)_handleTestHH2Migration:(id)a3;
- (void)_handleTestModeConfigRequest:(id)a3;
- (void)_handleTransactionsFetched:(id)a3 stagedTransaction:(id)a4 mustReplay:(id)a5 zoneID:(id)a6 cloudConflict:(BOOL)a7 transactionError:(id)a8 syncCompletion:(id)a9;
- (void)_handleUpdateMobileAssetsRequest:(id)a3;
- (void)_handleUpdatedCurrentDevice:(id)a3;
- (void)_handleUpdateiCloudSwitchState:(id)a3;
- (void)_handleUpgradeToHH2Message:(id)a3;
- (void)_handleUpgradeToHH2Message:(id)a3 autoMigration:(BOOL)a4;
- (void)_handleUserRemoved:(id)a3;
- (void)_incrementAssistantGenerationCounter;
- (void)_initializeAutoMigration;
- (void)_loadHomeManagerHomeModelChanges:(id)a3 mustReplay:(id)a4 legacyPush:(BOOL)a5 home:(id)a6 completion:(id)a7;
- (void)_loadHomeManagerTransactionsToPush:(id)a3 mustReplay:(id)a4 forLegacyPush:(BOOL)a5 includeAllChanges:(BOOL)a6 completion:(id)a7;
- (void)_loadHomeModelChanges:(id)a3 mustReplay:(id)a4 legacyPush:(BOOL)a5 home:(id)a6 completion:(id)a7;
- (void)_loadHomeZonesFromCache:(id)a3 completion:(id)a4;
- (void)_loadMessageDispatcher:(id)a3 accessoryBrowser:(id)a4 messageFilterChain:(id)a5 homeData:(id)a6 localDataDecryptionFailed:(BOOL)a7 identityRegistry:(id)a8 accountRegistry:(id)a9 uncommittedTransactions:(id)a10 backingStoreFactory:(id)a11 reloadData:(BOOL)a12;
- (void)_logState:(id)a3 key:(id)a4 indent:(id)a5;
- (void)_maybeCreateLegacyHomeAcceptedZone:(id)a3;
- (void)_migrateUniqueIdentifierPrefsIfNeeded;
- (void)_monitorMemoryUsage;
- (void)_monitorReachability;
- (void)_notifyClientsOfUpdatedStatus;
- (void)_notifyCurrentHomeUpdated:(id)a3 isLocalUpdate:(BOOL)a4;
- (void)_notifyMetadata:(id)a3 limitToSPIClients:(BOOL)a4 message:(id)a5 invokeResponseHandler:(BOOL)a6;
- (void)_notifyMetricsManagerOfConfigurationChange;
- (void)_notifyXPCClientsOfHomeConfigurationChange;
- (void)_notifyXPCClientsOfUpdatedDevices;
- (void)_pairedSyncDidStart;
- (void)_performAutoMigrationToHH2WithIsDryRun:(BOOL)a3 completionHandler:(id)a4;
- (void)_performPostSaveRequestActionsWithRequest:(id)a3;
- (void)_postIncomingInvitationStateChangedNotification:(id)a3 newInvitationState:(int64_t)a4;
- (void)_postMergeWatchPush;
- (void)_postPreferencesChangedNotification;
- (void)_processAnyPendingRequestsForRemoteAccess:(BOOL)a3;
- (void)_processLocalRequestToUpdateHomeInvitation:(id)a3 newState:(int64_t)a4 authStatus:(id)a5 logEventBuilder:(id)a6;
- (void)_processRemoveHomeModels:(id)a3 processIndex:(unint64_t)a4 completion:(id)a5;
- (void)_processRemoveUserManagementOperationModel:(id)a3 message:(id)a4;
- (void)_processRequestToUpdateHomeInvitation:(id)a3 invitationState:(int64_t)a4 homeUUID:(id)a5 authStatus:(id)a6 messageName:(id)a7 message:(id)a8;
- (void)_processSharedHomeModel:(id)a3 message:(id)a4;
- (void)_processUserManagementOperationModel:(id)a3 message:(id)a4;
- (void)_pruneExpiredIncomingInvitations;
- (void)_pushChangesForHome:(id)a3 toRegularUsersOfHome:(id)a4 adminUsersOfHome:(id)a5;
- (void)_pushChangesForHome:(id)a3 toRemoteDevicesOnSameAccount:(id)a4 addedUser:(id)a5;
- (void)_pushChangesToAllUsersOfAllHomes;
- (void)_pushChangesToCloud:(BOOL)a3 withDelay:(double)a4;
- (void)_pushChangesToCloud:(BOOL)a3 withDelay:(double)a4 reason:(id)a5;
- (void)_pushChangesToUsers:(id)a3 forHome:(id)a4;
- (void)_pushChangesToUsersThatHaveNotAcknowledged;
- (void)_pushChangesToWatch:(id)a3 payload:(id)a4 group:(id)a5 completionHandler:(id)a6;
- (void)_pushMetadataChangesToUsers;
- (void)_pushMetadataToCloud;
- (void)_pushUserRemovedForHome:(id)a3;
- (void)_pushZoneInfromationForHome:(id)a3;
- (void)_queryLegacyHomeAndAcceptedZoneExists:(id)a3 completion:(id)a4;
- (void)_reachabilityMonitorChanged:(BOOL)a3;
- (void)_registerForConfiguringStateMessages;
- (void)_registerForFrameworkSwitch;
- (void)_registerForMessages;
- (void)_reloadHomeDataFromLocalStore:(BOOL)a3;
- (void)_remoteAccessHealthMonitorTimerDidFire:(id)a3;
- (void)_removeAllUsersOfHome:(id)a3;
- (void)_removeCloudZone:(id)a3 updateHomeManager:(BOOL)a4;
- (void)_removeConfigurationVersionForHome:(id)a3;
- (void)_removeCurrentResidentDeviceFromHomes:(id)a3;
- (void)_removeFromAssociatedPeers:(id)a3 home:(id)a4;
- (void)_removeFromUnassociatedPeers:(id)a3 home:(id)a4;
- (void)_removeHome:(id)a3 withMessage:(id)a4 saveToStore:(BOOL)a5 notifyUsers:(BOOL)a6 shouldRemovePairings:(BOOL)a7;
- (void)_removeIncomingInvitation:(id)a3;
- (void)_removePendingDataSyncAcksForUser:(id)a3 forHome:(id)a4;
- (void)_requestHomeDataSync;
- (void)_resetCloudOperationRetryCounters;
- (void)_resetSiriSyncNotification;
- (void)_retryCloudOperationWithName:(id)a3 completionHandler:(id)a4;
- (void)_runFetchHomeDataFromCloudWithCloudConflict:(BOOL)a3 forceFetch:(BOOL)a4 accountCompletion:(id)a5 syncCompletion:(id)a6;
- (void)_runFetchHomeFromCloudZone:(id)a3 cloudConflict:(BOOL)a4 syncCompletion:(id)a5;
- (void)_runFetchHomeManagerCloudConflict:(BOOL)a3 syncCompletion:(id)a4;
- (void)_runUploadHomeConfigToCloud:(id)a3 rowIDs:(id)a4 reasons:(id)a5 forcePush:(BOOL)a6 syncCompletion:(id)a7;
- (void)_runUploadHomeConfigToCloudForcePush:(BOOL)a3 reason:(id)a4 syncCompletion:(id)a5;
- (void)_runUploadHomeToCloud:(id)a3 syncCompletion:(id)a4;
- (void)_saveAssistantHashingData:(id)a3;
- (void)_saveToPersistentStore:(BOOL)a3 reason:(id)a4;
- (void)_saveWithReason:(id)a3 information:(id)a4 postSyncNotification:(BOOL)a5;
- (void)_saveWithReason:(id)a3 information:(id)a4 saveOptions:(unint64_t)a5;
- (void)_saveWithReason:(id)a3 postSyncNotification:(BOOL)a4;
- (void)_saveWithRequest:(id)a3;
- (void)_schedulePostFetch;
- (void)_schedulePushChangesToAllUsersOfAllHomes;
- (void)_scheduleSendHomeDataToAllWatches;
- (void)_sendCurrentHomeToWatch:(id)a3;
- (void)_sendFragmentedMessage:(id)a3 messageIndex:(unint64_t)a4 messageIdentity:(id)a5 userID:(id)a6 destination:(id)a7 completionHandler:(id)a8;
- (void)_sendHomeDataToAllWatchesMigrateToHH2:(BOOL)a3 completionHandler:(id)a4;
- (void)_sendHomeDataToAllWatchesWithCompletion:(id)a3;
- (void)_sendHomeDataToWatch:(id)a3 completionHandler:(id)a4;
- (void)_sendHomeDataToWatch:(id)a3 migrateToHH2:(BOOL)a4 completionHandler:(id)a5;
- (void)_sendKeysToWatch:(id)a3 completionHandler:(id)a4;
- (void)_sendUserAdded:(id)a3 destination:(id)a4 toHome:(id)a5;
- (void)_sendUserRemoved:(id)a3 fromHome:(id)a4 pairingUsername:(id)a5 pushToCloud:(BOOL)a6 completionHandler:(id)a7;
- (void)_setAccountAvailabilityChanged;
- (void)_setAppDataWithMessage:(id)a3;
- (void)_setAssistantHashingData:(id)a3;
- (void)_setAssistantSyncRequest:(id)a3;
- (void)_setHomeConfigurationKey:(id)a3 value:(void *)a4;
- (void)_setHomeConfigurationKey:(id)a3 value:(void *)a4 applicationIdentifier:(__CFString *)a5;
- (void)_setHomekitAssistantConfigurationVersion:(unint64_t)a3;
- (void)_setHomekitAssistantNumEntities:(unint64_t)a3;
- (void)_setUniqueDeviceIdSalt:(id)a3;
- (void)_signpostAssistantSyncDataNotification;
- (void)_signpostAssistantSyncDataRequestHandled;
- (void)_startAccessoryFinderTimer;
- (void)_startAccessoryFinderTimerExpired;
- (void)_startCloudOperationRetryWithTimeout:(unint64_t)a3 completionHandler:(id)a4;
- (void)_startHH2MigrationWithRequestMessage:(id)a3 isAutoMigration:(BOOL)a4;
- (void)_startHH2MigrationWithShouldSkipKeyRollOperations:(BOOL)a3 forceMigrationFailureForTesting:(BOOL)a4 isAutoMigration:(BOOL)a5 dryRun:(BOOL)a6 completionHandler:(id)a7;
- (void)_startScanningForAccessories:(id)a3;
- (void)_startTimerToResetCloudOperationRetryCounter;
- (void)_stopCloudOperationRetryTimer;
- (void)_stopTrackingRemovedHomeUserMergeId:(id)a3;
- (void)_storeAllLocalSettingsForThisDevice;
- (void)_teardownRemoteAccessForHome:(id)a3;
- (void)_teardownRemoteAccessForHomeCommon:(id)a3 isCompanion:(BOOL)a4;
- (void)_teardownRemoteAccessForHomeThroughCompanion:(id)a3;
- (void)_trackRemovedHomeUserMergeId:(id)a3;
- (void)_updateAccessAllowedWhenLocked:(BOOL)a3 message:(id)a4;
- (void)_updateCloudDataSyncWithAccountState:(BOOL)a3;
- (void)_updateCloudDataSyncWithAccountState:(BOOL)a3 completion:(id)a4;
- (void)_updateCurrentHomeIfNecessary;
- (void)_updateCurrentUserEligibleForOwnerToAutoMigration;
- (void)_updateGenerationCounterWithReason:(id)a3 sourceUUID:(id)a4 shouldNotifyClients:(BOOL)a5;
- (void)_updateHome:(id)a3 configurationVersion:(int64_t)a4;
- (void)_updateHomeManagerModelChangesAsPushed:(id)a3 legacyPush:(BOOL)a4;
- (void)_updateHomeManagerModelChangesAsPushed:(id)a3 pushMask:(unint64_t)a4 completion:(id)a5;
- (void)_updateHomesAboutNetworkConnectivity:(BOOL)a3;
- (void)_updateHomesDiscoveredBonjourServicesMetrics;
- (void)_updateModelChangesAsPushed:(id)a3 home:(id)a4 pushMask:(unint64_t)a5 completion:(id)a6;
- (void)_updateResidentEnabledOnThisDevice:(BOOL)a3 forceNotify:(BOOL)a4 message:(id)a5;
- (void)_updateUserPushCachedForUser:(id)a3 device:(id)a4;
- (void)_uploadHomeConfigToCloud:(BOOL)a3 withDelay:(double)a4;
- (void)_uploadHomeConfigToCloud:(BOOL)a3 withDelay:(double)a4 reason:(id)a5;
- (void)_uploadHomeManagerToCloudSyncCompletion:(id)a3;
- (void)_uploadHomeManagerToCloudWithDelay:(double)a3;
- (void)_uploadHomeToCloud:(id)a3 withDelay:(double)a4;
- (void)_uploadTransaction:(id)a3 home:(id)a4 completion:(id)a5;
- (void)accessoriesAreLocallyReachableOnTransientDevice:(BOOL)a3 forHome:(id)a4;
- (void)accessoryBrowserDidFindNewAccessory;
- (void)accountAvailabilityChanged:(id)a3;
- (void)addAccessorySetupMetricDispatcher:(id)a3;
- (void)addHome:(id)a3;
- (void)addIssuerKeyToMessagePayload:(id)a3 invitation:(id)a4 completion:(id)a5;
- (void)addSharedUserAcceptEventBuilder:(id)a3 forHomeUuid:(id)a4;
- (void)addTransactionAfterPush:(id)a3;
- (void)addWalletKeyWithHomeUUID:(id)a3 reason:(id)a4;
- (void)applyOnboardingSelections:(id)a3 accessoryUUID:(id)a4 homeUUID:(id)a5 completion:(id)a6;
- (void)archiveServerToken:(id)a3;
- (void)assistantSyncDataChanged:(id)a3;
- (void)atHomeLevelChanged:(int64_t)a3 formerLevel:(int64_t)a4 home:(id)a5;
- (void)auditDuplicatePreviouslyAddedAccessory:(id)a3;
- (void)autoAddWalletKeysOncePerDeviceSetup;
- (void)autoMigrateToHH2WithCompletionHandler:(id)a3;
- (void)checkAndMoveDirectlyToHH2IfOnlyHH2SharedHomesExistAllowEmptyOwnedHomes:(BOOL)a3;
- (void)checkAndPushMetadataToUser:(id)a3 destination:(id)a4 userInfo:(id)a5;
- (void)checkForRemotePeers;
- (void)cleanupOperationsForAccessory:(id)a3 user:(id)a4 completion:(id)a5;
- (void)cloudHomeSettingsUpdated:(id)a3;
- (void)configureForWalletKey;
- (void)configureRetailDemoModeWithKeyPair:(id)a3 controllerName:(id)a4 demoAccessories:(id)a5 completionHandler:(id)a6;
- (void)controllerKeyPairGenerated:(id)a3;
- (void)dataSyncInProgressUpdatedNotification:(id)a3;
- (void)dealloc;
- (void)deleteAllZonesFromContainer:(id)a3;
- (void)deleteZonesFromLegacyAndCameraContainers;
- (void)deregisterForSignificantTimeChangeNotification;
- (void)determineEmptyHomesForSharedUsersWithCompletionHandler:(id)a3;
- (void)determineLocalChangesAndSchedulePush;
- (void)dismissBulletinOnAllMyTransientDevicesWithContext:(id)a3;
- (void)dismissDialogOnAllMyTransientDevicesWithContext:(id)a3 selection:(BOOL)a4;
- (void)dryRunHH2MigrationWithCompletionHandler:(id)a3;
- (void)electDeviceForUser:(id)a3 destination:(id)a4 deviceCapabilities:(id)a5 queue:(id)a6 completionHandler:(id)a7;
- (void)electRemoteAccessPeerForHome:(id)a3;
- (void)enableUserListeningHistoryForHomeUUID:(id)a3 accessoryUUID:(id)a4 userUUID:(id)a5;
- (void)eraseLocalHomeData;
- (void)evaluateToPushMetadataWhenHomeKitInUse;
- (void)fetchAllZones;
- (void)fetchAndUpdatePCSStatus;
- (void)fetchHasOnlyEmptyHomesWithCompletion:(id)a3;
- (void)fetchHomeDataFromCloudWithCloudConflict:(BOOL)a3 withDelay:(double)a4;
- (void)fetchHomeFromCloudZone:(id)a3 cloudConflict:(BOOL)a4 withDelay:(double)a5;
- (void)fetchHomeManagerCloudConflict:(BOOL)a3 withDelay:(double)a4;
- (void)fetchSetupDiagnosticStateForAccessoryUUID:(id)a3 completion:(id)a4;
- (void)fetchSetupDiagnosticStateWithOptions:(unint64_t)a3 accessoryUUID:(id)a4 remoteMessageTimeout:(double)a5 remoteMessageRestriction:(unint64_t)a6 completion:(id)a7;
- (void)finalizeRetailDemoModeWithAllowEditing:(BOOL)a3 completionHandler:(id)a4;
- (void)findAccessoriesNotOnWiFiWithCurrentWiFi:(HMFWiFiNetworkInfo *)a3 completionHandler:(id)a4;
- (void)forceCloudFetch;
- (void)forcePushLocalDataToCloud:(id)a3;
- (void)fragmentationStream:(id)a3 didCloseWithError:(id)a4;
- (void)fragmentationStream:(id)a3 didReceiveData:(id)a4 transactionIdentifier:(unsigned __int16)a5 error:(id)a6;
- (void)handleAccountSettingsUpdate:(id)a3;
- (void)handleAutoAddWalletKeySupressionAssertionAcquireMessage:(id)a3;
- (void)handleAutoAddWalletKeySupressionAssertionReleaseMessage:(id)a3;
- (void)handleContactStoreChanged:(id)a3;
- (void)handleDataFragmentedSync:(id)a3;
- (void)handleHomeCurrentDeviceResidentEligibleNotification:(id)a3;
- (void)handleMetadataDictionary:(id)a3 message:(id)a4;
- (void)handleRemoteUserClientCloudShareRepairRequest:(id)a3;
- (void)handleRemoteUserClientCloudShareRequest:(id)a3;
- (void)handleSiriSyncDataRequest:(id)a3;
- (void)handleVendorInfoUpdated:(id)a3;
- (void)handleXPCConnectionDeactivatedNotification:(id)a3;
- (void)idsServerBagDidUpdate:(id)a3;
- (void)initalizeMediaGroupParticipantDataLocalStorage;
- (void)initializeHH2FrameworkSwitch;
- (void)invalidate;
- (void)kickAccountAvailabilityCheck;
- (void)makeSureWeAreRunningInRightEnvironment:(BOOL)a3;
- (void)maybeStashOwnerMetadataForPostMigrationPingUsingMigratorRecord:(id)a3;
- (void)mediaGroupParticipantLocalDataStorage:(id)a3 didChangeDestinationIdentifier:(id)a4 forDestinationControllerIdentifier:(id)a5;
- (void)migrateLocalHomeTheaterDataForCurrentAccessory:(id)a3 currentMediaSystem:(id)a4;
- (void)migrateLocalMediaGroupParticipantData;
- (void)migrateLocalStereoPairDataForCurrentMediaSystem:(id)a3;
- (void)migrateModelObjectsToCloud:(int64_t)a3 schemaVersion:(int64_t)a4;
- (void)mobileAssetManager:(id)a3 didReceiveMetadata:(id)a4;
- (void)multiUserStatusController:(id)a3 statusDidChange:(int64_t)a4;
- (void)networkMonitorIsReachable:(id)a3;
- (void)networkMonitorIsUnreachable:(id)a3;
- (void)notifyClientsOfUserSettingsChangeWithReason:(id)a3 sourceUUID:(id)a4;
- (void)notifyClientsResidentCapable:(BOOL)a3;
- (void)notifySPIClientsAboutAccessAllowedWhenLocked:(BOOL)a3;
- (void)notifyZonesCloudZoneReady:(id)a3;
- (void)pairedSyncDidStart:(id)a3;
- (void)performPostSaveRequestActionsWithReason:(id)a3;
- (void)performPostSaveRequestActionsWithRequest:(id)a3;
- (void)pingDevice:(id)a3 secure:(BOOL)a4 restrictToLocalNetwork:(BOOL)a5 completionHandler:(id)a6;
- (void)postFinishSetupForCurrentAccessoryFollowUpIfNeeded;
- (void)prepareForDiagnosticExtension:(id)a3;
- (void)processAnyPendingRequestsForRemoteAccess;
- (void)processAppDataModelRemove:(id)a3 message:(id)a4;
- (void)processAppDataModelUpdate:(id)a3 message:(id)a4;
- (void)processCloudZoneModelAdd:(id)a3 message:(id)a4;
- (void)processCloudZoneModelRemoved:(id)a3 message:(id)a4;
- (void)processHomeManagerModelUpdate:(id)a3 message:(id)a4;
- (void)processHomeModelAdd:(id)a3 message:(id)a4;
- (void)processHomeModelRemoved:(id)a3 message:(id)a4;
- (void)processMetadataModel:(id)a3 message:(id)a4;
- (void)processRequestToUpdateHomeInvitation:(id)a3 invitationState:(int64_t)a4 homeUUID:(id)a5 authStatus:(id)a6 messageName:(id)a7 message:(id)a8;
- (void)processSharedHomeModelRemoved:(id)a3 message:(id)a4;
- (void)processSharedHomeModelUpdate:(id)a3 message:(id)a4;
- (void)processTransactionsFromHomeDataSync:(id)a3 accessories:(id)a4 version:(int64_t)a5 completion:(id)a6;
- (void)pushMetadataToAllWatches;
- (void)refreshHomeDataAndArchiveLocallyWithIsAutoMigration:(BOOL)a3 completion:(id)a4;
- (void)registerForSignificantTimeChangeNotification;
- (void)reloadHomeDataFromLocalStore:(BOOL)a3;
- (void)removeAccessorySetupMetricDispatcherForAccessoryUUID:(id)a3;
- (void)removeAllHomeKitPairingIdentitiesAfterSignOut;
- (void)removeFromUnassociatedPeers:(id)a3 home:(id)a4;
- (void)removeHome:(id)a3;
- (void)removeHomeWalletKeysExcludingSerialNumbers:(id)a3 flow:(id)a4;
- (void)removeSharedUserAcceptEventBuilderForHomeUuid:(id)a3;
- (void)reprocessUserManagementModels;
- (void)resetTTSUHH2SettingsMigrationKey;
- (void)saveAccessAllowedWhenLockedSettingToLocalDisk;
- (void)saveAssociatedGroupDataForPostMigrationStagingWithCurrentAccessory:(id)a3;
- (void)saveToPersistentStoreForHH2MigrationWithCompletionHandler:(id)a3;
- (void)saveWithRequest:(id)a3;
- (void)schedulePostFetch;
- (void)scheduleRemovalForHome:(id)a3 message:(id)a4 options:(id)a5;
- (void)sendFragmentedMessageForData:(id)a3 objectUUID:(id)a4 withMessageName:(id)a5 toUser:(id)a6 destination:(id)a7 completionHandler:(id)a8;
- (void)sendHomeDataToAllWatchesWithCompletion:(id)a3;
- (void)sendPairingIdentity:(id)a3 includePrivateKey:(BOOL)a4 requestMessage:(id)a5;
- (void)sendRequestForInvitation:(id)a3 homeUUID:(id)a4 payload:(id)a5 invitationState:(int64_t)a6 responseHandler:(id)a7;
- (void)sendSecureMessage:(id)a3 target:(id)a4 userID:(id)a5 destination:(id)a6 responseQueue:(id)a7 responseHandler:(id)a8;
- (void)sendUnsecureMessage:(id)a3 target:(id)a4 userID:(id)a5 responseQueue:(id)a6 responseHandler:(id)a7;
- (void)sendUserAdded:(id)a3 destination:(id)a4 toHome:(id)a5;
- (void)sendUserRemoved:(id)a3 fromHome:(id)a4 pairingUsername:(id)a5 pushToCloud:(BOOL)a6 completionHandler:(id)a7;
- (void)setAccessAllowedWhenLocked:(BOOL)a3;
- (void)setAccessoryBrowserInternal:(id)a3;
- (void)setAccessoryFinderTimer:(id)a3;
- (void)setAccountActive:(BOOL)a3;
- (void)setAccountStatusFailedDueToNetworkFailure:(BOOL)a3;
- (void)setAccountStatusIsAuthenticated:(BOOL)a3;
- (void)setAppData:(id)a3;
- (void)setAppDataWithMessage:(id)a3;
- (void)setAppleAccountManager:(id)a3;
- (void)setAssistantGenerationCounter:(unint64_t)a3;
- (void)setAssistantIdentifierChanged:(BOOL)a3;
- (void)setAssociatedRemotePeers:(id)a3;
- (void)setBackOffOperationInProgress:(BOOL)a3;
- (void)setBackingStore:(id)a3;
- (void)setBiomeEventManager:(id)a3;
- (void)setBiomeLogEventObserver:(id)a3;
- (void)setBonjourBrowser:(id)a3;
- (void)setBonjourBrowserHelperLastCompletionDate:(id)a3;
- (void)setCacheUseAllowed:(BOOL)a3;
- (void)setClientConnection:(id)a3;
- (void)setClientConnectionQueue:(id)a3;
- (void)setCloudDataSyncManager:(id)a3;
- (void)setCloudDataSyncStateFilter:(id)a3;
- (void)setCloudOperationRetryCount:(unint64_t)a3;
- (void)setCloudOperationRetryTimer:(id)a3;
- (void)setCloudReachabilityMonitor:(id)a3;
- (void)setCloudZones:(id)a3;
- (void)setCloudkitAccountStatusDetermined:(BOOL)a3;
- (void)setCompanionReachable:(BOOL)a3;
- (void)setConfiguringStateController:(id)a3;
- (void)setCurrentAccessorySetupMetricDispatcher:(id)a3;
- (void)setCurrentHomeConfigurations:(id)a3;
- (void)setCurrentHomeUUID:(id)a3;
- (void)setCurrentHomeUUIDOverride:(id)a3;
- (void)setDataTag:(id)a3;
- (void)setDebounceHomesUpdateTimer:(id)a3;
- (void)setDefaultDatabase:(id)a3;
- (void)setDemoAccessories:(id)a3;
- (void)setDialogCancelationContexts:(id)a3;
- (void)setDidCreateAddACWGKeysOperation:(BOOL)a3;
- (void)setDuetSubscriber:(id)a3;
- (void)setEventRouterAssertionController:(id)a3;
- (void)setEventRouterXPCServer:(id)a3;
- (void)setFmfHandler:(id)a3;
- (void)setForceFetchHomeManagerZone:(BOOL)a3;
- (void)setFullSyncedWatchPeers:(id)a3;
- (void)setGatherer:(id)a3;
- (void)setGenerationCounter:(unint64_t)a3;
- (void)setGenerationCounterToken:(int)a3;
- (void)setHapKeyStore:(id)a3;
- (void)setHasFinishedStartingUp:(BOOL)a3;
- (void)setHasLoadedData:(BOOL)a3;
- (void)setHh2AutoMigrationEligibilityChecker:(id)a3;
- (void)setHh2AutoMigrationMonitor:(id)a3;
- (void)setHh2FrameworkSwitch:(id)a3;
- (void)setHh2MigrationInProgress:(BOOL)a3;
- (void)setHomeDataLoadedFromArchive:(BOOL)a3;
- (void)setHomeManagerZoneFirstFetch:(BOOL)a3;
- (void)setHomePodsPresent:(BOOL)a3 inOwnedHomes:(BOOL)a4;
- (void)setHomepodSetupRetryCount:(unint64_t)a3;
- (void)setHomes:(id)a3;
- (void)setIdentityRegistry:(id)a3;
- (void)setIdsFirewallManager:(id)a3;
- (void)setIdsInvitationManager:(id)a3;
- (void)setIdsServerBag:(id)a3;
- (void)setIgnoreFirstTimeReachabilityChanged:(BOOL)a3;
- (void)setIncomingInvitations:(id)a3;
- (void)setInitialPCSStatusFetchCompleted:(BOOL)a3;
- (void)setLastAnswerForShouldCloudSyncData:(BOOL)a3;
- (void)setLastCurrentHomeUUID:(id)a3;
- (void)setLastEventStore:(id)a3;
- (void)setLastEventStoreController:(id)a3;
- (void)setLastRemovedCurrentAccessoryUUID:(id)a3;
- (void)setLastUserAddRemoveTimestamp;
- (void)setLocationHandler:(id)a3;
- (void)setLogEventSubmitter:(id)a3;
- (void)setLoggingMemoryEventForwarder:(id)a3;
- (void)setMediaGroupParticipantDataLocalStorage:(id)a3;
- (void)setMemoryEventRouter:(id)a3;
- (void)setMemoryMonitorLogEventTimer:(id)a3;
- (void)setMessageDispatcher:(id)a3;
- (void)setMicroLocationLogEventObserver:(id)a3;
- (void)setMicroLocationManager:(id)a3;
- (void)setMissingHomeDataRecord:(BOOL)a3;
- (void)setMobileAssetManager:(id)a3;
- (void)setMsgFilterChain:(id)a3;
- (void)setNameValidator:(id)a3;
- (void)setNeedToCleanUpKeys:(BOOL)a3;
- (void)setNeedsOnboardingCompleteWitHomeUUID:(id)a3 accessoryUUID:(id)a4 completion:(id)a5;
- (void)setNotificationCenter:(id)a3;
- (void)setOverrideCurrentHomeUUIDToNil:(id)a3;
- (void)setPcsEnabled:(BOOL)a3;
- (void)setPendingDataSyncAcks:(id)a3;
- (void)setPendingFragmentationStream:(id)a3;
- (void)setPendingHomesBeingRemoved:(id)a3;
- (void)setPendingRemoteSessions:(id)a3;
- (void)setPendingResidentSetupSessions:(id)a3;
- (void)setPendingResponsesForAccessoryFinder:(id)a3;
- (void)setPendingSharedUserAcceptLogEventBuilders:(id)a3;
- (void)setPeriodicMobileCatalogUpdateTimer:(id)a3;
- (void)setPostSyncDataUpdatedNotification:(BOOL)a3;
- (void)setPowerManager:(id)a3;
- (void)setPrimaryHomeUUID:(id)a3;
- (void)setReachabilityMonitor:(id)a3;
- (void)setRecoveryVersion:(int64_t)a3;
- (void)setRegistrationForwardingEventRouter:(id)a3;
- (void)setRemoteAccessHealthMonitorTimer:(id)a3;
- (void)setResidentEnabledState:(int64_t)a3;
- (void)setResidentMesh:(id)a3;
- (void)setSetupActivity:(id)a3;
- (void)setSetupEndTimestamp:(double)a3;
- (void)setSetupStartTimestamp:(double)a3;
- (void)setSiriEndPointSettingsSyncManager:(id)a3;
- (void)setSiriSyncNotificationTime:(unint64_t)a3;
- (void)setSpeakersAreConfigured:(BOOL)a3;
- (void)setSpeakersAreConfiguredInOwnedHomes:(BOOL)a3;
- (void)setUnassociatedRemotePeers:(id)a3;
- (void)setUnprocessedOperationModelIdentifiers:(id)a3;
- (void)setUploadHomeDataToCloud:(BOOL)a3;
- (void)setUploadMetadataToCloud:(BOOL)a3;
- (void)setUploadToCloudIsPending:(BOOL)a3;
- (void)setUuidsOfRemovedHomes:(id)a3;
- (void)setWorkQueue:(id)a3;
- (void)setupSession:(id)a3 didCloseWithError:(id)a4;
- (void)setupSession:(id)a3 didReceiveAccessoryWithUUID:(id)a4;
- (void)startLocalTransport;
- (void)startWithCompletionHandler:(id)a3;
- (void)stashSharedHomeInfoNotYetMigrated;
- (void)stopLocalTransport;
- (void)syncWalletKeyPassSerialNumbersToWatch:(id)a3 withCompletion:(id)a4;
- (void)teardownRemoteAccessForHome:(id)a3;
- (void)timerDidFire:(id)a3;
- (void)transactionObjectRemoved:(id)a3 message:(id)a4;
- (void)transactionObjectUpdated:(id)a3 newValues:(id)a4 message:(id)a5;
- (void)updateAccountAvailabilityChanged:(id)a3;
- (void)updateCurrentUserEligibleForOwnerToAutoMigration;
- (void)updateGenerationCounterWithReason:(id)a3 sourceUUID:(id)a4 shouldNotifyClients:(BOOL)a5;
- (void)updateHomeKitInUsePreferences;
- (void)updatePowerAssertion;
- (void)updateUserPushCachedForUser:(id)a3 device:(id)a4;
- (void)uploadHomeConfigToCloud:(BOOL)a3 withDelay:(double)a4;
- (void)uploadHomeManagerToCloudWithDelay:(double)a3;
- (void)uploadHomeToCloudZone:(id)a3 withDelay:(double)a4;
- (void)userManagementOperationDidFinish:(id)a3;
- (void)verifyCurrentDeviceResidentStatus;
- (void)verifyHomeDataFromCloud:(id)a3;
- (void)waitForHH2SentinelZoneToBeRemoved;
- (void)writeAssistantCurrentHome:(id)a3;
@end

@implementation HMDHomeManager

- (HMDAccessoryFirmwareUpdateManager)accessoryFirmwareUpdateManager
{
  return self->_accessoryFirmwareUpdateManager;
}

- (BOOL)demoFinalized
{
  return self->_demoFinalized;
}

uint64_t __83__HMDHomeManager_SiriEndpointOnboarding__needsOnboardingForHomeUUID_accessoryUUID___block_invoke(uint64_t a1, void *a2)
{
  v3 = [a2 uuid];
  uint64_t v4 = objc_msgSend(v3, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v4;
}

uint64_t __83__HMDHomeManager_SiriEndpointOnboarding__needsOnboardingForHomeUUID_accessoryUUID___block_invoke_1(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  id v5 = v4;
  if (v5)
  {
    v6 = [v3 uuid];
    uint64_t v7 = objc_msgSend(v6, "hmf_isEqualToUUID:", *(void *)(a1 + 32));
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

- (NSUUID)uuid
{
  return self->_uuid;
}

+ (id)logCategory
{
  if (logCategory__hmf_once_t14_171186 != -1) {
    dispatch_once(&logCategory__hmf_once_t14_171186, &__block_literal_global_433);
  }
  v2 = (void *)logCategory__hmf_once_v15_171187;
  return v2;
}

uint64_t __58__HMDHomeManager_hasClientRequestedMediaAccessoryControl___block_invoke(uint64_t a1, void *a2)
{
  return [a2 isClientIdentifierSubscribedToAppleMediaAccessoryState:*(void *)(a1 + 32)];
}

- (id)needsOnboardingForHomeUUID:(id)a3 accessoryUUID:(id)a4
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  v8 = [(HMDHomeManager *)self homes];
  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 3221225472;
  v37[2] = __83__HMDHomeManager_SiriEndpointOnboarding__needsOnboardingForHomeUUID_accessoryUUID___block_invoke;
  v37[3] = &unk_1E6A162B8;
  id v9 = v6;
  id v38 = v9;
  v10 = objc_msgSend(v8, "na_firstObjectPassingTest:", v37);

  if (v10)
  {
    v11 = [v10 accessories];
    v12 = (void *)[v11 copy];

    uint64_t v32 = MEMORY[0x1E4F143A8];
    uint64_t v33 = 3221225472;
    v34 = __83__HMDHomeManager_SiriEndpointOnboarding__needsOnboardingForHomeUUID_accessoryUUID___block_invoke_1;
    v35 = &unk_1E6A10BD0;
    id v13 = v7;
    id v36 = v13;
    v17 = objc_msgSend(v12, "na_firstObjectPassingTest:", &v32);
    if (v17)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        v18 = v17;
      }
      else {
        v18 = 0;
      }
      id v19 = v18;
      v20 = objc_msgSend(v19, "needsOnboarding", v32, v33, v34, v35);

      if (v20) {
        BOOL v21 = [v20 integerValue] == 0;
      }
      else {
        BOOL v21 = 1;
      }
      v26 = [NSNumber numberWithBool:v21];
    }
    else
    {
      v27 = (void *)MEMORY[0x1D9452090](0, v14, v15, v16);
      v28 = self;
      v29 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        v30 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        v40 = v30;
        __int16 v41 = 2112;
        id v42 = v13;
        _os_log_impl(&dword_1D49D5000, v29, OS_LOG_TYPE_INFO, "%{public}@Accessory is not found. accessoryUUID: %@", buf, 0x16u);
      }
      v26 = (void *)MEMORY[0x1E4F1CC38];
    }
  }
  else
  {
    v22 = (void *)MEMORY[0x1D9452090]();
    v23 = self;
    v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v25 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      v40 = v25;
      __int16 v41 = 2112;
      id v42 = v9;
      _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_ERROR, "%{public}@Home is not found. homeUUID: %@", buf, 0x16u);
    }
    v26 = 0;
  }

  return v26;
}

- (NSArray)homes
{
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  uint64_t v4 = (void *)[(NSMutableArray *)self->_homes copy];
  os_unfair_lock_unlock(p_lock);
  return (NSArray *)v4;
}

- (void)_handleFetchDevicesMessage:(id)a3
{
  v14[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v5);

  uint64_t v13 = *MEMORY[0x1E4F2D368];
  id v6 = (void *)MEMORY[0x1E4F1CAD0];
  id v7 = [(HMDHomeManager *)self appleAccountManager];
  v8 = [v7 account];
  id v9 = [v8 devices];
  v10 = [v6 setWithArray:v9];
  v11 = encodeRootObjectForIncomingXPCMessage(v10, 0);
  v14[0] = v11;
  v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:&v13 count:1];
  [v4 respondWithPayload:v12];
}

- (id)_runtimeState
{
  v15[4] = *MEMORY[0x1E4F143B8];
  id v3 = [(HMDHomeManager *)self currentHomeUUID];

  if (v3)
  {
    id v4 = @"kCurrentHomeUUIDKey";
    id v5 = @"kCurrentHomeUUIDKey";
    id v6 = [(HMDHomeManager *)self currentHomeUUID];
    id v7 = [v6 UUIDString];
  }
  else
  {
    id v4 = @"kNoCurrentHomeKey";
    v8 = @"kNoCurrentHomeKey";
    id v7 = (void *)MEMORY[0x1E4F1CC38];
  }
  v14[0] = @"kResidentCapableDeviceKey";
  id v9 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHomeManager isResidentCapable](self, "isResidentCapable"));
  v15[0] = v9;
  v14[1] = @"kResidentEnabledKey";
  v10 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHomeManager isResidentEnabled](self, "isResidentEnabled"));
  v15[1] = v10;
  void v14[2] = @"kAccessAllowedWhenLockedKey";
  v11 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHomeManager isAccessAllowedWhenLocked](self, "isAccessAllowedWhenLocked"));
  v14[3] = v4;
  v15[2] = v11;
  v15[3] = v7;
  v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v15 forKeys:v14 count:4];

  return v12;
}

- (BOOL)isResidentCapable
{
  v2 = +[HMDDeviceCapabilities deviceCapabilities];
  char v3 = [v2 isResidentCapable];

  return v3;
}

- (NSUUID)currentHomeUUID
{
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  id v4 = self->_currentHomeUUID;
  os_unfair_lock_unlock(p_lock);
  return v4;
}

- (BOOL)isResidentEnabled
{
  BOOL v3 = [(HMDHomeManager *)self isResidentCapable];
  if (v3) {
    LOBYTE(v3) = [(HMDHomeManager *)self residentEnabledState] == 2;
  }
  return v3;
}

- (BOOL)isAccessAllowedWhenLocked
{
  v2 = self;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  LOBYTE(v2) = v2->_accessAllowedWhenLocked;
  os_unfair_lock_unlock(p_lock);
  return (char)v2;
}

- (void)_handleRequestRuntimeStateUpdate:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [v4 homeManagerOptions];
  uint64_t v6 = [v4 isEntitledForSPIAccess];
  if ((v5 & 0x8741) != 0)
  {
    uint64_t v7 = v6;
    BOOL v8 = [(HMDHomeManager *)self hasClientRequestedMediaAccessoryControl:v4];
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __51__HMDHomeManager__handleRequestRuntimeStateUpdate___block_invoke;
    v9[3] = &unk_1E6A16350;
    id v10 = v4;
    [(HMDHomeManager *)self _getRuntimeStateUpdateForHomeManager:v7 includeMediaAccessorySessionState:v8 options:v5 includeResidentDeviceState:v7 completion:v9];
  }
  else
  {
    [v4 respondWithPayload:0];
  }
}

- (void)_getRuntimeStateUpdateForHomeManager:(BOOL)a3 includeMediaAccessorySessionState:(BOOL)a4 options:(unint64_t)a5 includeResidentDeviceState:(BOOL)a6 completion:(id)a7
{
  BOOL v27 = a6;
  BOOL v25 = a4;
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v9 = a7;
  if (v9)
  {
    BOOL v22 = a3;
    id v23 = v9;
    id v10 = dispatch_group_create();
    val = self;
    v11 = [(HMDHomeManager *)self homes];
    v12 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(v11, "count"));
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    id obj = v11;
    uint64_t v13 = [obj countByEnumeratingWithState:&v40 objects:v44 count:16];
    if (v13)
    {
      uint64_t v14 = *(void *)v41;
      do
      {
        uint64_t v15 = 0;
        do
        {
          if (*(void *)v41 != v14) {
            objc_enumerationMutation(obj);
          }
          uint64_t v16 = *(void **)(*((void *)&v40 + 1) + 8 * v15);
          dispatch_group_enter(v10);
          v17 = [v16 uuid];
          v18 = [v17 UUIDString];

          objc_initWeak(&location, val);
          v34[0] = MEMORY[0x1E4F143A8];
          v34[1] = 3221225472;
          v34[2] = __135__HMDHomeManager__getRuntimeStateUpdateForHomeManager_includeMediaAccessorySessionState_options_includeResidentDeviceState_completion___block_invoke;
          v34[3] = &unk_1E6A16300;
          objc_copyWeak(&v38, &location);
          id v35 = v12;
          id v19 = v18;
          id v36 = v19;
          v37 = v10;
          [v16 getRunTimeStateUpdateWithOptions:a5 includeMediaAccessorySessionState:v25 includeResidentDeviceState:v27 completion:v34];

          objc_destroyWeak(&v38);
          objc_destroyWeak(&location);

          ++v15;
        }
        while (v13 != v15);
        uint64_t v13 = [obj countByEnumeratingWithState:&v40 objects:v44 count:16];
      }
      while (v13);
    }

    v20 = [(HMDHomeManager *)val workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __135__HMDHomeManager__getRuntimeStateUpdateForHomeManager_includeMediaAccessorySessionState_options_includeResidentDeviceState_completion___block_invoke_3;
    block[3] = &unk_1E6A16328;
    BOOL v33 = v22;
    id v30 = v12;
    v31 = val;
    id v32 = v23;
    id v21 = v12;
    dispatch_group_notify(v10, v20, block);

    id v9 = v23;
  }
}

- (OS_dispatch_queue)workQueue
{
  return self->_workQueue;
}

- (void)_handleRequestFetchHomeConfiguration:(id)a3
{
  id v6 = a3;
  id v4 = (void *)MEMORY[0x1D9452090]();
  uint64_t v5 = (void *)[objc_alloc(MEMORY[0x1E4F654E0]) initWithName:@"homed.xpc.fetch.homeConfiguration."];
  [(HMDHomeManager *)self __handleRequestFetchHomeConfiguration:v6];
}

- (void)__handleRequestFetchHomeConfiguration:(id)a3
{
  v255[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [v4 homeManagerOptions];
  unsigned int v231 = [v4 isEntitledForSPIAccess];
  id v6 = (void *)MEMORY[0x1D9452090]();
  uint64_t v7 = self;
  BOOL v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    double v10 = [v4 clientName];
    v11 = HMHomeManagerOptionsShortDescription();
    *(_DWORD *)buf = 138543874;
    uint64_t v242 = (uint64_t)v9;
    __int16 v243 = 2112;
    double v244 = v10;
    __int16 v245 = 2112;
    v246 = v11;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Received fetch from client, %@, with options: %@", buf, 0x20u);
  }
  v12 = (void *)MEMORY[0x1E4F1CA60];
  uint64_t v254 = *MEMORY[0x1E4F2D4E0];
  uint64_t v13 = [NSNumber numberWithUnsignedInteger:v5];
  v255[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v255 forKeys:&v254 count:1];
  uint64_t v15 = [v12 dictionaryWithDictionary:v14];

  uint64_t v239 = 0;
  BOOL v16 = [(HMDHomeManager *)v7 dataSyncInProgressWithState:&v239 withMessage:v4];
  v17 = (void *)MEMORY[0x1D9452090]();
  v18 = v7;
  id v19 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v21 = v20 = v15;
    HMFBooleanToString();
    double v22 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
    HMHomeManagerDataSyncStateToString();
    BOOL v23 = v16;
    id v24 = v4;
    v26 = uint64_t v25 = v5;
    *(_DWORD *)buf = 138543874;
    uint64_t v242 = (uint64_t)v21;
    __int16 v243 = 2112;
    double v244 = v22;
    __int16 v245 = 2112;
    v246 = v26;
    _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_INFO, "%{public}@Handling fetch home configuration request, data sync in progress : %@ data sync state: %@", buf, 0x20u);

    uint64_t v5 = v25;
    id v4 = v24;
    BOOL v16 = v23;

    uint64_t v15 = v20;
  }

  if (![v4 BOOLForKey:@"kCanUseCachedHomeConfigurationKey"])
  {
    v34 = [v4 numberForKey:@"kConfigGenerationCounterKey"];
    uint64_t v35 = [v4 numberForKey:@"kHAPMetadataVersionKey"];
    id v36 = (void *)v35;
    if (!v34 || !v35)
    {
      double v38 = [MEMORY[0x1E4F28C58] hmErrorWithCode:20];
      [v4 respondWithError:*(void *)&v38];
      goto LABEL_121;
    }
    if (isAppleTV() && v16)
    {
      v37 = (void *)MEMORY[0x1E4F28C58];
      double v38 = [(HMDHomeManager *)v18 _statusPayloadForMessage:v4];
      v39 = [v37 hmErrorWithCode:77 userInfo:*(void *)&v38];
      [v4 respondWithError:v39];

LABEL_121:
      goto LABEL_122;
    }
    int v227 = v5;
    v230 = v15;
    long long v40 = [v4 proxyConnection];
    long long v41 = [v40 processInfo];
    id v238 = 0;
    long long v42 = [v41 clientIdentifierSalt:&v238];
    double v38 = COERCE_DOUBLE(v238);

    if (!v42)
    {
      v55 = (void *)MEMORY[0x1D9452090]();
      v56 = v18;
      v57 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      {
        v58 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v242 = (uint64_t)v58;
        __int16 v243 = 2112;
        double v244 = v38;
        _os_log_impl(&dword_1D49D5000, v57, OS_LOG_TYPE_ERROR, "%{public}@Cannot send out home data because client identifier salt could not be determined: %@", buf, 0x16u);

        long long v42 = 0;
      }

      [v4 respondWithError:*(void *)&v38];
      uint64_t v15 = v230;
      goto LABEL_120;
    }
    [v230 setObject:v42 forKeyedSubscript:@"kIdentifierSaltKey"];
    if ([v4 isEntitledForAssistantIdentifiers])
    {
      long long v43 = [(HMDHomeManager *)v18 _getAssistantHashingData];
      [v230 setObject:v43 forKeyedSubscript:*MEMORY[0x1E4F2D308]];
    }
    BOOL v226 = v16;
    v219 = v42;
    double v220 = v38;
    v44 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", -[HMDHomeManager generationCounter](v18, "generationCounter"));
    [v230 setObject:v44 forKeyedSubscript:@"kConfigGenerationCounterKey"];

    uint64_t v45 = +[HMDHAPMetadata getSharedInstance];
    v46 = [v45 version];

    if (v46)
    {
      v47 = [v45 version];
      [v230 setObject:v47 forKeyedSubscript:@"kHAPMetadataVersionKey"];
    }
    v48 = [(HMDHomeManager *)v18 _statusPayloadForMessage:v4];
    [v230 addEntriesFromDictionary:v48];

    v225 = v34;
    uint64_t v49 = [v34 unsignedIntegerValue];
    uint64_t v50 = [(HMDHomeManager *)v18 generationCounter];
    v223 = v36;
    uint64_t v51 = [v36 unsignedIntegerValue];
    v224 = v45;
    v52 = [v45 version];
    uint64_t v53 = [v52 unsignedIntegerValue];

    if (v231) {
      int v54 = ![(HMDHomeManager *)v18 cacheUseAllowed];
    }
    else {
      int v54 = 0;
    }
    uint64_t v59 = [(HMDHomeManager *)v18 hasClientRequestedMediaAccessoryControl:v4];
    v229 = v18;
    int v222 = v54;
    if (v54)
    {
      int v218 = v59;
      v60 = (void *)MEMORY[0x1D9452090]();
      v61 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
      {
        v62 = HMFGetLogIdentifier();
        HMFBooleanToString();
        double v63 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
        v64 = HMFBooleanToString();
        *(_DWORD *)buf = 138543874;
        uint64_t v242 = (uint64_t)v62;
        __int16 v243 = 2112;
        double v244 = v63;
        __int16 v245 = 2112;
        v246 = v64;
        _os_log_impl(&dword_1D49D5000, v61, OS_LOG_TYPE_INFO, "%{public}@Forcing SPI entitled client to not use cached home configuration homeCounterMatch %@  metadataVersionMatch %@", buf, 0x20u);
      }
      BOOL v217 = v51 != v53;

      unint64_t v65 = 0x1E4F28000;
      int v66 = v227;
      BOOL v67 = v226;
    }
    else
    {
      int v66 = v227;
      if (v49 == v50 && v51 == v53)
      {
        v68 = (void *)MEMORY[0x1D9452090](v59);
        v69 = v18;
        v70 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
        {
          v71 = HMFGetLogIdentifier();
          double v72 = COERCE_DOUBLE([(HMDHomeManager *)v69 generationCounter]);
          v73 = [v224 version];
          double v74 = [v4 clientIdentifier];
          *(_DWORD *)buf = 138544130;
          uint64_t v242 = (uint64_t)v71;
          __int16 v243 = 2048;
          double v244 = v72;
          __int16 v245 = 2112;
          v246 = v73;
          __int16 v247 = 2112;
          double v248 = v74;
          _os_log_impl(&dword_1D49D5000, v70, OS_LOG_TYPE_DEFAULT, "%{public}@Home manager generation counter %lu/metadata version %@ matches the client(%@)", buf, 0x2Au);
        }
        int v75 = 1;
        unint64_t v65 = 0x1E4F28000;
        uint64_t v15 = v230;
        goto LABEL_101;
      }
      BOOL v217 = v51 != v53;
      int v218 = v59;
      unint64_t v65 = 0x1E4F28000;
      BOOL v67 = v226;
      if (v49 == v50)
      {
LABEL_91:
        int v75 = v218 & v66 & !v67;
        uint64_t v15 = v230;
        if ((v217 | v222) == 1)
        {
          int v162 = HMIsHAPMetadataNeededForHMHomeManagerOptions();
          v163 = (void *)MEMORY[0x1D9452090]();
          v164 = v229;
          v165 = HMFGetOSLogHandle();
          BOOL v166 = os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT);
          if (v162)
          {
            int v228 = v75;
            if (v166)
            {
              v167 = HMFGetLogIdentifier();
              double v168 = [v224 version];
              *(_DWORD *)buf = 138543874;
              uint64_t v242 = (uint64_t)v167;
              __int16 v243 = 2112;
              double v244 = v168;
              __int16 v245 = 2112;
              v246 = v223;
              _os_log_impl(&dword_1D49D5000, v165, OS_LOG_TYPE_DEFAULT, "%{public}@Home manager HAP metadata version %@ does not match client's value of %@", buf, 0x20u);
            }
            [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
            double v170 = v169;
            v171 = +[HMDHAPMetadata getSharedInstance];
            v172 = objc_msgSend(v171, "xpcData:", objc_msgSend(v4, "isEntitledForSPIAccess"));
            uint64_t v173 = [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
            double v175 = v174;
            v176 = (void *)MEMORY[0x1D9452090](v173);
            v177 = v164;
            v178 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v178, OS_LOG_TYPE_DEFAULT))
            {
              v179 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543618;
              uint64_t v242 = (uint64_t)v179;
              __int16 v243 = 2048;
              double v244 = v175 - v170;
              _os_log_impl(&dword_1D49D5000, v178, OS_LOG_TYPE_DEFAULT, "%{public}@Time to encode metadata: %.4f s", buf, 0x16u);
            }
            [v230 setObject:v172 forKeyedSubscript:@"kHAPMetadataDataKey"];
            v180 = v177;
            uint64_t v15 = v230;
            [(HMDHomeManager *)v180 setCacheUseAllowed:0];

            int v75 = v228;
          }
          else
          {
            if (v166)
            {
              v181 = HMFGetLogIdentifier();
              HMHomeManagerOptionsToString();
              double v182 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
              [v4 clientName];
              v184 = int v183 = v75;
              *(_DWORD *)buf = 138543874;
              uint64_t v242 = (uint64_t)v181;
              __int16 v243 = 2112;
              double v244 = v182;
              __int16 v245 = 2112;
              v246 = v184;
              _os_log_impl(&dword_1D49D5000, v165, OS_LOG_TYPE_DEFAULT, "%{public}@Client has not requested access to HAP accessories (options %@) - not sending metadata to [%@]", buf, 0x20u);

              int v75 = v183;
            }

            unint64_t v65 = 0x1E4F28000uLL;
          }
        }
LABEL_101:
        if (v231)
        {
          v185 = @"com.apple.homekit-entitledclient.identifer";
          v186 = [(HMDHomeManager *)v229 _runtimeState];
          [v15 addEntriesFromDictionary:v186];

          [v15 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"kCanCacheHomeConfigurationKey"];
          v187 = objc_msgSend(*(id *)(v65 + 3792), "numberWithBool:", -[HMDHomeManager cacheUseAllowed](v229, "cacheUseAllowed"));
          [v15 setObject:v187 forKeyedSubscript:@"kCanUseCachedHomeConfigurationKey"];

          if (![(HMDHomeManager *)v229 cacheUseAllowed]) {
            [(HMDHomeManager *)v229 setCacheUseAllowed:1];
          }
          v188 = *(void **)(v65 + 3792);
          v189 = [(HMDHomeManager *)v229 keyTransferAgent];
          v190 = objc_msgSend(v188, "numberWithUnsignedInteger:", objc_msgSend(v189, "residentProvisioningStatus"));
          [v15 setObject:v190 forKeyedSubscript:@"kProvisioningStatusKey"];

          if (v75) {
            [v15 setObject:MEMORY[0x1E4F1CC38] forKey:*MEMORY[0x1E4F2D548]];
          }
          v191 = @"com.apple.homekit-entitledclient.identifer";
        }
        else
        {
          v191 = [v4 clientIdentifier];
        }
        v192 = [(HMDHomeManager *)v229 appData];
        v193 = [v192 applicationDataForIdentifier:v191];

        if (v193)
        {
          v194 = (void *)[v193 copy];
          [v15 setObject:v194 forKeyedSubscript:@"kAppDataInformationKey"];
        }
        v195 = [*(id *)(v65 + 3792) numberWithBool:0];
        [v15 setObject:v195 forKeyedSubscript:*MEMORY[0x1E4F2D478]];

        v196 = [(HMDHomeManager *)v229 hh2FrameworkSwitch];

        if (v196)
        {
          v197 = *(void **)(v65 + 3792);
          v198 = [(HMDHomeManager *)v229 hh2FrameworkSwitch];
          v199 = objc_msgSend(v197, "numberWithBool:", objc_msgSend(v198, "checkExistenceOfHH2SentinelZone"));
          [v15 setObject:v199 forKeyedSubscript:*MEMORY[0x1E4F2D5C0]];
        }
        v200 = objc_msgSend(*(id *)(v65 + 3792), "numberWithBool:", -[HMDHomeManager isHH2MigrationInProgress](v229, "isHH2MigrationInProgress"));
        [v15 setObject:v200 forKeyedSubscript:*MEMORY[0x1E4F2D450]];

        v201 = +[HMDHH2MigratorRecord lastMigrationFailure];
        [v15 setObject:v201 forKeyedSubscript:*MEMORY[0x1E4F2D448]];

        if (_os_feature_enabled_impl())
        {
          v202 = [(HMDHomeManager *)v229 idsServerBag];
          uint64_t v203 = [v202 isHH2ManualMigrationEnabled];
        }
        else
        {
          uint64_t v203 = 0;
        }
        v204 = [MEMORY[0x1E4F65530] sharedPreferences];
        v205 = [v204 preferenceForKey:@"hh2ManualMigrationAvailableOverride"];

        v206 = [v205 value];

        if (v206)
        {
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 3221225472;
          block[2] = __56__HMDHomeManager___handleRequestFetchHomeConfiguration___block_invoke;
          block[3] = &unk_1E6A197C8;
          void block[4] = v229;
          id v207 = v205;
          id v233 = v207;
          if (__handleRequestFetchHomeConfiguration__onceToken != -1) {
            dispatch_once(&__handleRequestFetchHomeConfiguration__onceToken, block);
          }
          uint64_t v203 = [v207 BOOLValue];
        }
        v208 = [*(id *)(v65 + 3792) numberWithBool:v203];
        [v15 setObject:v208 forKeyedSubscript:*MEMORY[0x1E4F2D438]];

        v209 = [(HMDHomeManager *)v229 idsServerBag];
        uint64_t v210 = [v209 homeSafetySecurityEnabled];

        v211 = [*(id *)(v65 + 3792) numberWithBool:v210];
        [v15 setObject:v211 forKeyedSubscript:*MEMORY[0x1E4F2D468]];

        v212 = (void *)[v15 copy];
        [v4 respondWithPayload:v212];

        v34 = v225;
        id v36 = v223;
        long long v42 = v219;
        double v38 = v220;
LABEL_120:

        goto LABEL_121;
      }
    }
    v76 = (void *)MEMORY[0x1D9452090]();
    v77 = v229;
    v78 = HMFGetOSLogHandle();
    v221 = v77;
    if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
    {
      v79 = HMFGetLogIdentifier();
      double v80 = COERCE_DOUBLE([(HMDHomeManager *)v221 generationCounter]);
      v81 = [v4 clientIdentifier];
      double v82 = COERCE_DOUBLE([v225 unsignedIntegerValue]);
      *(_DWORD *)buf = 138544386;
      v83 = "";
      uint64_t v242 = (uint64_t)v79;
      if (v222) {
        v83 = " (forced to update anyways)";
      }
      __int16 v243 = 2048;
      double v244 = v80;
      int v66 = v227;
      __int16 v245 = 2112;
      v246 = v81;
      __int16 v247 = 2048;
      double v248 = v82;
      __int16 v249 = 2080;
      v250 = v83;
      _os_log_impl(&dword_1D49D5000, v78, OS_LOG_TYPE_DEFAULT, "%{public}@Home manager generation counter %lu does not match client's (%@) value of %lu%s.", buf, 0x34u);

      BOOL v67 = v226;
      v77 = v221;
    }

    if ((v66 & 0x9FCD) == 0)
    {
      if ((v66 & 0x10) != 0)
      {
        v92 = [(HMDHomeManager *)v77 _accessoryOfCurrentDevice];
        double v93 = [v92 home];

        if (v93 != 0.0)
        {
          v94 = (void *)MEMORY[0x1D9452090]();
          v95 = v221;
          v96 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
          {
            v97 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            uint64_t v242 = (uint64_t)v97;
            __int16 v243 = 2112;
            double v244 = v93;
            _os_log_impl(&dword_1D49D5000, v96, OS_LOG_TYPE_INFO, "%{public}@Encoding home containing current device's accessory: %@", buf, 0x16u);
          }
          double v240 = v93;
          v98 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v240 count:1];
          v99 = encodeRootObjectForIncomingXPCMessage(v98, v4);
          [v230 setObject:v99 forKeyedSubscript:@"kHomeDataKey"];

          if (v231)
          {
            v100 = [(HMDHomeManager *)v95 currentHomeUUID];
            v101 = [*(id *)&v93 uuid];
            int v102 = [v100 isEqual:v101];

            if (v102)
            {
              v103 = [(HMDHomeManager *)v95 currentHomeUUID];
              v104 = [v103 UUIDString];
              [v230 setObject:v104 forKeyedSubscript:@"kCurrentHomeUUIDKey"];
            }
          }
        }

        BOOL v67 = v226;
      }
      else
      {
        v87 = (void *)MEMORY[0x1D9452090]();
        v88 = v77;
        v89 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
        {
          v90 = HMFGetLogIdentifier();
          HMHomeManagerOptionsToString();
          double v91 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
          *(_DWORD *)buf = 138543618;
          uint64_t v242 = (uint64_t)v90;
          __int16 v243 = 2112;
          double v244 = v91;
          _os_log_impl(&dword_1D49D5000, v89, OS_LOG_TYPE_DEFAULT, "%{public}@Not sending home data as the client has not requested it in their options: %@", buf, 0x16u);
        }
      }
      goto LABEL_90;
    }
    v84 = [(HMDHomeManager *)v77 homes];
    v85 = v230;
    if (!isAppleTV() || ([v4 isEntitledForSPIAccess] & 1) != 0)
    {
      v86 = v84;
      goto LABEL_74;
    }
    v105 = [(HMDHomeManager *)v77 currentHomeUUID];
    v106 = v105;
    if (v105)
    {
      id v107 = v105;
    }
    else
    {
      id v107 = [(HMDHomeManager *)v77 lastCurrentHomeUUID];
    }
    v108 = v77;
    v109 = v107;

    v110 = (void *)MEMORY[0x1E4F1CA48];
    v111 = [(HMDHomeManager *)v108 homes];
    v86 = objc_msgSend(v110, "arrayWithCapacity:", objc_msgSend(v111, "count"));

    long long v236 = 0u;
    long long v237 = 0u;
    long long v234 = 0u;
    long long v235 = 0u;
    id v112 = v84;
    uint64_t v113 = [v112 countByEnumeratingWithState:&v234 objects:v253 count:16];
    if (!v113)
    {
LABEL_73:

      v85 = v230;
      int v66 = v227;
      v77 = v221;
LABEL_74:
      v121 = [(HMDHomeManager *)v77 filterHomes:v86 isSPIEntitled:v231];

      [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
      double v123 = v122;
      v216 = v121;
      uint64_t v124 = encodeRootObjectForIncomingXPCMessage(v121, v4);
      v125 = [(HMDHomeManager *)v77 incomingInvitations];
      v126 = (void *)[v125 copy];
      v127 = encodeRootObjectForIncomingXPCMessage(v126, 0);

      uint64_t v128 = [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
      double v130 = v129;
      v131 = (void *)MEMORY[0x1D9452090](v128);
      v132 = v77;
      v133 = HMFGetOSLogHandle();
      v215 = (void *)v124;
      if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v134 = HMFGetLogIdentifier();
        v214 = v131;
        objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v216, "count"));
        double v135 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
        v136 = NSNumber;
        v137 = [(HMDHomeManager *)v132 homes];
        v138 = objc_msgSend(v136, "numberWithUnsignedInteger:", objc_msgSend(v137, "count"));
        objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v127, "length") + objc_msgSend(v215, "length"));
        v139 = (char *)objc_claimAutoreleasedReturnValue();
        v140 = [v4 clientIdentifier];
        *(_DWORD *)buf = 138544642;
        uint64_t v242 = v134;
        v213 = v127;
        v141 = (void *)v134;
        __int16 v243 = 2112;
        double v244 = v135;
        __int16 v245 = 2112;
        v246 = v138;
        __int16 v247 = 2048;
        double v248 = v130 - v123;
        __int16 v249 = 2112;
        v250 = v139;
        __int16 v251 = 2112;
        v252 = v140;
        _os_log_impl(&dword_1D49D5000, v133, OS_LOG_TYPE_DEFAULT, "%{public}@Number of homes - %@ / %@, Time to encode homes: %.4f s, Size: %@ bytes, client: %@", buf, 0x3Eu);

        v131 = v214;
        int v66 = v227;

        v85 = v230;
        uint64_t v124 = (uint64_t)v215;

        v127 = v213;
      }

      [v85 setObject:v124 forKeyedSubscript:@"kHomeDataKey"];
      [v85 setObject:v127 forKeyedSubscript:@"kIncomingHomeInvitationsKey"];
      v142 = [(HMDHomeManager *)v132 lastRemovedCurrentAccessoryUUID];
      v143 = [v142 UUIDString];
      [v85 setObject:v143 forKeyedSubscript:*MEMORY[0x1E4F2D4A8]];

      v144 = [(HMDHomeManager *)v132 userDefaults];
      v145 = [v144 objectForKey:@"HMDHomeManagerSharedHomesNotYetMigratedKey"];

      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        v146 = v145;
      }
      else {
        v146 = 0;
      }
      id v147 = v146;

      v148 = [v147 allKeys];

      [v85 setObject:v148 forKeyedSubscript:*MEMORY[0x1E4F2D570]];
      v149 = [(HMDHomeManager *)v132 primaryHomeUUID];

      unint64_t v65 = 0x1E4F28000uLL;
      BOOL v67 = v226;
      v150 = v127;
      v151 = v216;
      if (!v149) {
        goto LABEL_85;
      }
      v152 = [(HMDHomeManager *)v132 primaryHomeUUID];
      v153 = objc_msgSend(v216, "hmf_firstObjectWithUUID:", v152);

      if (v153)
      {
        v154 = v85;
        v155 = [(HMDHomeManager *)v132 primaryHomeUUID];
      }
      else
      {
        v150 = v127;
        if (![v216 count])
        {
LABEL_85:
          if (v231)
          {
            v158 = [(HMDHomeManager *)v132 currentHomeUUID];

            if (v158)
            {
              v159 = [(HMDHomeManager *)v132 currentHomeUUID];
              v160 = [v159 UUIDString];
              [v85 setObject:v160 forKeyedSubscript:@"kCurrentHomeUUIDKey"];

              v151 = v216;
            }
            v161 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v151, "count"));
            [v85 setObject:v161 forKeyedSubscript:@"kHomeCountKey"];
          }
LABEL_90:
          [(HMDHomeManager *)v221 setCacheUseAllowed:0];
          goto LABEL_91;
        }
        v154 = v85;
        v153 = [v216 firstObject];
        v155 = [v153 uuid];
      }
      v156 = v155;
      v157 = [v155 UUIDString];
      [v154 setObject:v157 forKeyedSubscript:@"kPrimaryHomeUUIDKey"];

      v85 = v154;
      v150 = v127;
      v151 = v216;
      goto LABEL_85;
    }
    uint64_t v114 = v113;
    uint64_t v115 = *(void *)v235;
LABEL_62:
    uint64_t v116 = 0;
    while (1)
    {
      if (*(void *)v235 != v115) {
        objc_enumerationMutation(v112);
      }
      v117 = *(void **)(*((void *)&v234 + 1) + 8 * v116);
      if (!v109) {
        break;
      }
      v118 = [v117 uuid];
      char v119 = [v118 isEqual:v109];

      if (v119) {
        goto LABEL_67;
      }
LABEL_68:
      if (v114 == ++v116)
      {
        uint64_t v120 = [v112 countByEnumeratingWithState:&v234 objects:v253 count:16];
        uint64_t v114 = v120;
        if (!v120) {
          goto LABEL_73;
        }
        goto LABEL_62;
      }
    }
    if (![v117 isOwnerUser]) {
      goto LABEL_68;
    }
LABEL_67:
    [v86 addObject:v117];
    goto LABEL_68;
  }
  uint64_t v27 = [v4 isEntitledForSPIAccess];
  if (v27 && v5 != -1)
  {
    v28 = (void *)MEMORY[0x1D9452090]();
    v29 = v18;
    id v30 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v32 = v31 = v15;
      *(_DWORD *)buf = 138543362;
      uint64_t v242 = (uint64_t)v32;
      _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_INFO, "%{public}@Client has specified partial options, not using cache", buf, 0xCu);

      uint64_t v15 = v31;
    }

    uint64_t v27 = 0;
  }
  BOOL v33 = [NSNumber numberWithBool:v27];
  [v15 setObject:v33 forKeyedSubscript:@"kCanUseCachedHomeConfigurationKey"];

  v34 = (void *)[v15 copy];
  [v4 respondWithPayload:v34];
LABEL_122:
}

- (unint64_t)generationCounter
{
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  unint64_t generationCounter = self->_generationCounter;
  os_unfair_lock_unlock(p_lock);
  return generationCounter;
}

- (HMDIDSServerBag)idsServerBag
{
  return (HMDIDSServerBag *)objc_getProperty(self, a2, 176, 1);
}

- (BOOL)cacheUseAllowed
{
  return self->_cacheUseAllowed;
}

- (BOOL)dataSyncInProgressWithState:(unint64_t *)a3 withMessage:(id)a4
{
  id v6 = a4;
  uint64_t v7 = [(HMDHomeManager *)self cloudDataSyncStateFilter];

  if (v7)
  {
    BOOL v8 = [(HMDHomeManager *)self cloudDataSyncStateFilter];
    char v9 = [v8 dataSyncInProgressWithState:a3 withMessage:v6];
  }
  else
  {
    char v9 = 0;
    if (a3) {
      *a3 = 1;
    }
  }

  return v9;
}

- (HMDCloudDataSyncStateFilter)cloudDataSyncStateFilter
{
  return self->_cloudDataSyncStateFilter;
}

- (HMDHH2FrameworkSwitch)hh2FrameworkSwitch
{
  return self->_hh2FrameworkSwitch;
}

- (BOOL)hasClientRequestedMediaAccessoryControl:(id)a3
{
  id v4 = [a3 clientIdentifier];
  if (v4)
  {
    uint64_t v5 = [(HMDHomeManager *)self homes];
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = __58__HMDHomeManager_hasClientRequestedMediaAccessoryControl___block_invoke;
    v8[3] = &unk_1E6A162B8;
    id v9 = v4;
    char v6 = objc_msgSend(v5, "na_any:", v8);
  }
  else
  {
    char v6 = 0;
  }

  return v6;
}

- (BOOL)areThereAnyTTSUSessionsOngoing
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  p_lock = &self->_lock;
  uint64_t v4 = os_unfair_lock_lock_with_options();
  uint64_t v5 = (void *)MEMORY[0x1D9452090](v4);
  char v6 = self;
  HMFGetOSLogHandle();
  uint64_t v7 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    id v9 = NSNumber;
    double v10 = [(HMDHomeManager *)v6 deviceSetupSessions];
    v11 = objc_msgSend(v9, "numberWithUnsignedInteger:", objc_msgSend(v10, "count"));
    int v15 = 138543618;
    id v16 = v8;
    __int16 v17 = 2112;
    v18 = v11;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Ongoing TTSU sessions : %@", (uint8_t *)&v15, 0x16u);
  }
  v12 = [(HMDHomeManager *)v6 deviceSetupSessions];
  char v13 = objc_msgSend(v12, "hmf_isEmpty");

  os_unfair_lock_unlock(p_lock);
  return v13 ^ 1;
}

- (NSMutableArray)deviceSetupSessions
{
  return self->_deviceSetupSessions;
}

- (void)setCacheUseAllowed:(BOOL)a3
{
  self->_cacheUseAllowed = a3;
}

- (HMDKeyTransferAgent)keyTransferAgent
{
  return self->_keyTransferAgent;
}

- (BOOL)isHH2MigrationInProgress
{
  return self->_hh2MigrationInProgress;
}

- (HMDApplicationData)appData
{
  return self->_appData;
}

- (id)_statusPayloadForMessage:(id)a3
{
  v30[4] = *MEMORY[0x1E4F143B8];
  uint64_t v28 = 0;
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self statusForMessage:v4];
  [(HMDHomeManager *)self dataSyncInProgressWithState:&v28 withMessage:v4];

  char v6 = [(HMDHomeManager *)self multiUserStatusController];
  [v6 didUpdateDataSyncState:v28];

  if (enableRetailDemoSetup || [(HMDHomeManager *)self demoFinalized])
  {
    uint64_t v5 = 0;
    uint64_t v28 = 1;
  }
  if (isInternalBuild())
  {
    uint64_t v7 = [MEMORY[0x1E4F65530] sharedPreferences];
    id v8 = [v7 preferenceForKey:@"HMDHomeManagerForceOverrideDataSyncStateAndStatus"];
    int v9 = [v8 BOOLValue];

    if (v9)
    {
      double v10 = [MEMORY[0x1E4F65530] sharedPreferences];
      v11 = [v10 preferenceForKey:@"HMDHomeManagerDataSyncStateOverride"];
      v12 = [v11 numberValue];
      uint64_t v28 = [v12 unsignedIntegerValue];

      char v13 = [MEMORY[0x1E4F65530] sharedPreferences];
      uint64_t v14 = [v13 preferenceForKey:@"HMDHomeManagerStatusOverride"];
      int v15 = [v14 numberValue];
      uint64_t v5 = [v15 unsignedIntegerValue];
    }
  }
  id v16 = [(HMDHomeManager *)self metricsManager];
  __int16 v17 = [v16 deviceStateManager];
  [v17 updateWithDataSyncState:v28];

  v18 = [(HMDHomeManager *)self metricsManager];
  uint64_t v19 = [v18 deviceStateManager];
  [v19 updateWithHomeManagerStatus:v5];

  v29[0] = *MEMORY[0x1E4F2D350];
  v20 = [NSNumber numberWithUnsignedInteger:v28];
  v30[0] = v20;
  v29[1] = *MEMORY[0x1E4F2D588];
  id v21 = [NSNumber numberWithUnsignedInteger:v5];
  v30[1] = v21;
  v29[2] = @"kConfigGenerationCounterKey";
  double v22 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", -[HMDHomeManager generationCounter](self, "generationCounter"));
  v30[2] = v22;
  v29[3] = *MEMORY[0x1E4F2D4C8];
  BOOL v23 = NSNumber;
  id v24 = [(HMDHomeManager *)self multiUserStatusController];
  uint64_t v25 = objc_msgSend(v23, "numberWithInteger:", objc_msgSend(v24, "multiUserState"));
  v30[3] = v25;
  v26 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:v29 count:4];

  return v26;
}

- (HMDMultiUserStatusController)multiUserStatusController
{
  return self->_multiUserStatusController;
}

- (HMDMetricsManager)metricsManager
{
  return self->_metricsManager;
}

- (unint64_t)statusForMessage:(id)a3
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self appleAccountManager];
  char v6 = +[HMDDeviceCapabilities deviceCapabilities];
  int v7 = [v6 supportsDeviceSetup];

  if (!v7) {
    goto LABEL_7;
  }
  id v8 = [v5 accountContext];

  if (v8)
  {
    int v9 = [MEMORY[0x1E4F5BE48] systemStore];
    double v10 = [v9 getLocalPairingIdentity:0];

    if (!v10)
    {
      char v13 = (void *)MEMORY[0x1D9452090]();
      id v21 = self;
      int v15 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        id v16 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        long long v42 = v16;
        __int16 v17 = "%{public}@Device setup required, no account pairing identity";
        goto LABEL_12;
      }
      goto LABEL_13;
    }
    v11 = [(HMDHomeManager *)self cloudDataSyncStateFilter];
    int v12 = [v11 decryptionFailed];

    if (v12)
    {
      char v13 = (void *)MEMORY[0x1D9452090]();
      uint64_t v14 = self;
      int v15 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        id v16 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        long long v42 = v16;
        __int16 v17 = "%{public}@Device setup required, unable to decrypt cloud data";
LABEL_12:
        _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, v17, buf, 0xCu);

        goto LABEL_13;
      }
      goto LABEL_13;
    }
LABEL_7:
    unint64_t v18 = 0;
    char v19 = 1;
    goto LABEL_14;
  }
  char v13 = (void *)MEMORY[0x1D9452090]();
  v20 = self;
  int v15 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    id v16 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    long long v42 = v16;
    __int16 v17 = "%{public}@Device setup required, no active account";
    goto LABEL_12;
  }
LABEL_13:

  char v19 = 0;
  unint64_t v18 = 16;
LABEL_14:
  uint64_t v40 = 0;
  if ([(HMDHomeManager *)self dataSyncInProgressWithState:&v40 withMessage:v4])
  {
    double v22 = (void *)MEMORY[0x1D9452090]();
    BOOL v23 = self;
    id v24 = HMFGetOSLogHandle();
    BOOL v25 = os_log_type_enabled(v24, OS_LOG_TYPE_INFO);
    if (v19)
    {
      if (v25)
      {
        v26 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        long long v42 = v26;
        _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_INFO, "%{public}@Busy, data sync in progress", buf, 0xCu);
      }
      v18 |= 1uLL;
    }
    else
    {
      if (v25)
      {
        uint64_t v27 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        long long v42 = v27;
        _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_INFO, "%{public}@Suppressing busy status while device setup required", buf, 0xCu);
      }
    }
  }
  uint64_t v28 = [v5 accountContext];

  if (!v28)
  {
    v29 = (void *)MEMORY[0x1D9452090]();
    id v30 = self;
    v31 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      id v32 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v42 = v32;
      _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_INFO, "%{public}@No account", buf, 0xCu);
    }
    v18 |= 0x20uLL;
  }
  BOOL v33 = (void *)MEMORY[0x1D9452090]();
  v34 = self;
  uint64_t v35 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
  {
    id v36 = HMFGetLogIdentifier();
    v37 = [NSNumber numberWithUnsignedInteger:v18];
    [v5 isLoggedInToPrimaryAccount];
    double v38 = HMFBooleanToString();
    *(_DWORD *)buf = 138543874;
    long long v42 = v36;
    __int16 v43 = 2112;
    v44 = v37;
    __int16 v45 = 2112;
    v46 = v38;
    _os_log_impl(&dword_1D49D5000, v35, OS_LOG_TYPE_INFO, "%{public}@status : %@, %@", buf, 0x20u);
  }

  return v18;
}

- (HMDAppleAccountManager)appleAccountManager
{
  return self->_appleAccountManager;
}

- (NSUUID)primaryHomeUUID
{
  return self->_primaryHomeUUID;
}

- (NSUserDefaults)userDefaults
{
  return self->_userDefaults;
}

- (NSUUID)lastRemovedCurrentAccessoryUUID
{
  return (NSUUID *)objc_getProperty(self, a2, 512, 1);
}

- (NSMutableArray)incomingInvitations
{
  return self->_incomingInvitations;
}

- (id)filterHomes:(id)a3 isSPIEntitled:(BOOL)a4
{
  BOOL v4 = a4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __44__HMDHomeManager_filterHomes_isSPIEntitled___block_invoke;
  v10[3] = &unk_1E6A162B8;
  v10[4] = self;
  uint64_t v5 = objc_msgSend(a3, "na_filter:", v10);
  char v6 = v5;
  if (v4)
  {
    id v7 = v5;
  }
  else
  {
    objc_msgSend(v5, "na_filter:", &__block_literal_global_1098);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
  }
  id v8 = v7;

  return v8;
}

void __135__HMDHomeManager__getRuntimeStateUpdateForHomeManager_includeMediaAccessorySessionState_options_includeResidentDeviceState_completion___block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    [*(id *)(a1 + 40) setObject:v2 forKey:*(void *)(a1 + 48)];
  }
  BOOL v3 = *(NSObject **)(a1 + 56);
  dispatch_group_leave(v3);
}

- (HMDCHIPDataSource)chipDataSource
{
  return (HMDCHIPDataSource *)objc_getProperty(self, a2, 160, 1);
}

void __135__HMDHomeManager__getRuntimeStateUpdateForHomeManager_includeMediaAccessorySessionState_options_includeResidentDeviceState_completion___block_invoke(id *a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 7);
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    char v6 = [WeakRetained workQueue];
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = __135__HMDHomeManager__getRuntimeStateUpdateForHomeManager_includeMediaAccessorySessionState_options_includeResidentDeviceState_completion___block_invoke_2;
    v7[3] = &unk_1E6A18668;
    id v8 = v3;
    id v9 = a1[4];
    id v10 = a1[5];
    id v11 = a1[6];
    dispatch_async(v6, v7);
  }
}

void __135__HMDHomeManager__getRuntimeStateUpdateForHomeManager_includeMediaAccessorySessionState_options_includeResidentDeviceState_completion___block_invoke_3(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v2 = *(void **)(a1 + 32);
    id v3 = [*(id *)(a1 + 40) _runtimeState];
    [v2 addEntriesFromDictionary:v3];
  }
  uint64_t v4 = *(void *)(a1 + 48);
  id v5 = (id)[*(id *)(a1 + 32) copy];
  (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
}

void __51__HMDHomeManager__handleRequestRuntimeStateUpdate___block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = [*(id *)(a1 + 32) responseHandler];

  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) responseHandler];
    ((void (**)(void, void, id))v4)[2](v4, 0, v5);
  }
}

BOOL __44__HMDHomeManager_filterHomes_isSPIEntitled___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [v3 currentUser];

  if (!v4)
  {
    id v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = *(id *)(a1 + 32);
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = HMFGetLogIdentifier();
      int v10 = 138543618;
      id v11 = v8;
      __int16 v12 = 2112;
      id v13 = v3;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@There is no current user for : %@", (uint8_t *)&v10, 0x16u);
    }
  }

  return v4 != 0;
}

- (void)findAccessoriesNotOnWiFiWithCurrentWiFi:(HMFWiFiNetworkInfo *)a3 completionHandler:(id)a4
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD99988);
  MEMORY[0x1F4188790](v7 - 8);
  id v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v10 = _Block_copy(a4);
  id v11 = (void *)swift_allocObject();
  v11[2] = a3;
  v11[3] = v10;
  v11[4] = self;
  uint64_t v12 = sub_1D5459D28();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v9, 1, 1, v12);
  id v13 = (void *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = &unk_1EA70F728;
  v13[5] = v11;
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = 0;
  v14[3] = 0;
  void v14[4] = &unk_1EA70F6F8;
  v14[5] = v13;
  int v15 = a3;
  id v16 = self;
  sub_1D4A5EFA8((uint64_t)v9, (uint64_t)&unk_1EA70F700, (uint64_t)v14);
  swift_release();
}

- (void)_handleSignificantTimeChange
{
  id v3 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __69__HMDHomeManager_SignificantTimeChange___handleSignificantTimeChange__block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v3, block);
}

void __69__HMDHomeManager_SignificantTimeChange___handleSignificantTimeChange__block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  v1 = [*(id *)(a1 + 32) homes];
  uint64_t v2 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v1);
        }
        id v6 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        uint64_t v7 = [v6 workQueue];
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = __69__HMDHomeManager_SignificantTimeChange___handleSignificantTimeChange__block_invoke_2;
        block[3] = &unk_1E6A19B30;
        void block[4] = v6;
        dispatch_async(v7, block);
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v3);
  }
}

uint64_t __69__HMDHomeManager_SignificantTimeChange___handleSignificantTimeChange__block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleSignificantTimeChange];
}

- (void)deregisterForSignificantTimeChangeNotification
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)MEMORY[0x1D9452090](self, a2);
  uint64_t v4 = self;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    id v6 = HMFGetLogIdentifier();
    int v8 = 138543362;
    long long v9 = v6;
    _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_DEBUG, "%{public}@De-Registering for Significant time change event.", (uint8_t *)&v8, 0xCu);
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, v4, @"SignificantTimeChangeNotification", 0);
}

- (void)registerForSignificantTimeChangeNotification
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)MEMORY[0x1D9452090](self, a2);
  uint64_t v4 = self;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    id v6 = HMFGetLogIdentifier();
    int v8 = 138543362;
    long long v9 = v6;
    _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_DEBUG, "%{public}@Registering for Significant time change event.", (uint8_t *)&v8, 0xCu);
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, v4, (CFNotificationCallback)significantTimeDidChangeNotification, @"SignificantTimeChangeNotification", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

- (id)lastUserAddRemoveTimestamp
{
  uint64_t v2 = [(HMDHomeManager *)self userDefaults];
  uint64_t v3 = [v2 objectForKey:@"hh1LastSharedUserAddRemoveTimestamp"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  id v5 = v4;

  return v5;
}

- (void)setLastUserAddRemoveTimestamp
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [(HMDHomeManager *)self userDefaults];
  uint64_t v4 = [MEMORY[0x1E4F1C9C8] now];
  [v3 setObject:v4 forKey:@"hh1LastSharedUserAddRemoveTimestamp"];

  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v8 = HMFGetLogIdentifier();
    int v9 = 138543362;
    uint64_t v10 = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Updating last shared user add/remove timestamp", (uint8_t *)&v9, 0xCu);
  }
}

- (void)updatePowerAssertion
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [(HMDHomeManager *)self homes];
  uint64_t v4 = [v3 count];
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    int v8 = HMFGetLogIdentifier();
    int v9 = HMFBooleanToString();
    int v11 = 138543618;
    long long v12 = v8;
    __int16 v13 = 2112;
    uint64_t v14 = v9;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Setting network access required (power assertion) to %@", (uint8_t *)&v11, 0x16u);
  }
  uint64_t v10 = [(HMDHomeManager *)v6 powerManager];
  [v10 setNetworkAccessRequired:v4 != 0];
}

- (id)userUUIDForMessage:(id)a3 homeUUID:(id)a4
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  int v8 = [(HMDHomeManager *)self _homeWithUUID:v7];
  if (v8)
  {
    int v9 = [v6 userForHome:v8];
    if (v9)
    {
      uint64_t v10 = (void *)MEMORY[0x1D9452090]();
      int v11 = self;
      long long v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        __int16 v13 = HMFGetLogIdentifier();
        int v20 = 138543874;
        id v21 = v13;
        __int16 v22 = 2112;
        id v23 = v9;
        __int16 v24 = 2112;
        id v25 = v6;
        _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Getting user %@ from message %@", (uint8_t *)&v20, 0x20u);
      }
      uint64_t v14 = [v9 uuid];
    }
    else
    {
      uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v15 = (void *)MEMORY[0x1D9452090]();
    id v16 = self;
    uint64_t v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      unint64_t v18 = HMFGetLogIdentifier();
      int v20 = 138543618;
      id v21 = v18;
      __int16 v22 = 2112;
      id v23 = v7;
      _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_ERROR, "%{public}@Failed to get user from message due to no home with uuid: %@", (uint8_t *)&v20, 0x16u);
    }
    uint64_t v14 = 0;
  }

  return v14;
}

- (void)enableUserListeningHistoryForHomeUUID:(id)a3 accessoryUUID:(id)a4 userUUID:(id)a5
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  int v11 = [(HMDHomeManager *)self _homeWithUUID:v8];
  long long v12 = v11;
  if (v11)
  {
    [v11 enableUserListeningHistoryForAccessoryUUID:v9 userUUID:v10];
  }
  else
  {
    __int16 v13 = (void *)MEMORY[0x1D9452090]();
    uint64_t v14 = self;
    uint64_t v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      id v16 = HMFGetLogIdentifier();
      int v17 = 138543618;
      unint64_t v18 = v16;
      __int16 v19 = 2112;
      id v20 = v8;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_ERROR, "%{public}@Failed to enable ULH due to no home with uuid: %@", (uint8_t *)&v17, 0x16u);
    }
  }
}

- (id)hubAccessoriesWithHomeUUID:(id)a3 forSiriEndpointProfileMessageHandler:(id)a4
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHomeManager *)self _homeWithUUID:v6];
  id v9 = v8;
  if (v8)
  {
    id v10 = [v8 hubAccessories];
  }
  else
  {
    int v11 = (void *)MEMORY[0x1D9452090]();
    long long v12 = self;
    __int16 v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      int v16 = 138543618;
      int v17 = v14;
      __int16 v18 = 2112;
      id v19 = v6;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to get hub accessories due to no home with uuid: %@", (uint8_t *)&v16, 0x16u);
    }
    id v10 = 0;
  }

  return v10;
}

- (id)accessoryWithHomeUUID:(id)a3 accessoryUUID:(id)a4
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHomeManager *)self homes];
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  v21[2] = __78__HMDHomeManager_SiriEndpointOnboarding__accessoryWithHomeUUID_accessoryUUID___block_invoke;
  v21[3] = &unk_1E6A162B8;
  id v9 = v6;
  id v22 = v9;
  id v10 = objc_msgSend(v8, "na_firstObjectPassingTest:", v21);

  if (v10)
  {
    int v11 = [v10 accessories];
    long long v12 = (void *)[v11 copy];

    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = __78__HMDHomeManager_SiriEndpointOnboarding__accessoryWithHomeUUID_accessoryUUID___block_invoke_11;
    v19[3] = &unk_1E6A10BD0;
    id v20 = v7;
    __int16 v13 = objc_msgSend(v12, "na_firstObjectPassingTest:", v19);
  }
  else
  {
    uint64_t v14 = (void *)MEMORY[0x1D9452090]();
    uint64_t v15 = self;
    int v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      int v17 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v24 = v17;
      __int16 v25 = 2112;
      id v26 = v9;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_ERROR, "%{public}@Home is not found. homeUUID: %@", buf, 0x16u);
    }
    __int16 v13 = 0;
  }

  return v13;
}

uint64_t __78__HMDHomeManager_SiriEndpointOnboarding__accessoryWithHomeUUID_accessoryUUID___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 uuid];
  uint64_t v4 = objc_msgSend(v3, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v4;
}

uint64_t __78__HMDHomeManager_SiriEndpointOnboarding__accessoryWithHomeUUID_accessoryUUID___block_invoke_11(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  id v5 = v4;
  if (v5)
  {
    id v6 = [v3 uuid];
    uint64_t v7 = objc_msgSend(v6, "hmf_isEqualToUUID:", *(void *)(a1 + 32));
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

- (void)applyOnboardingSelections:(id)a3 accessoryUUID:(id)a4 homeUUID:(id)a5 completion:(id)a6
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  uint64_t v14 = (void *)MEMORY[0x1D9452090]();
  uint64_t v15 = self;
  int v16 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    int v17 = HMFGetLogIdentifier();
    int v19 = 138543618;
    id v20 = v17;
    __int16 v21 = 2112;
    id v22 = v10;
    _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, "%{public}@Apply onboarding selections to the controller manager: %@", (uint8_t *)&v19, 0x16u);
  }
  __int16 v18 = [(HMDHomeManager *)v15 compositeSettingsControllerManager];
  [v18 applyOnboardingSelections:v10 accessoryUUID:v11 homeUUID:v12 completion:v13];
}

- (void)setNeedsOnboardingCompleteWitHomeUUID:(id)a3 accessoryUUID:(id)a4 completion:(id)a5
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = (void (**)(id, void))a5;
  id v11 = [(HMDHomeManager *)self homes];
  v52[0] = MEMORY[0x1E4F143A8];
  v52[1] = 3221225472;
  v52[2] = __105__HMDHomeManager_SiriEndpointOnboarding__setNeedsOnboardingCompleteWitHomeUUID_accessoryUUID_completion___block_invoke;
  v52[3] = &unk_1E6A162B8;
  id v12 = v8;
  id v53 = v12;
  id v13 = objc_msgSend(v11, "na_firstObjectPassingTest:", v52);

  if (v13)
  {
    uint64_t v14 = [v13 accessories];
    uint64_t v15 = (void *)[v14 copy];

    v50[0] = MEMORY[0x1E4F143A8];
    v50[1] = 3221225472;
    v50[2] = __105__HMDHomeManager_SiriEndpointOnboarding__setNeedsOnboardingCompleteWitHomeUUID_accessoryUUID_completion___block_invoke_5;
    v50[3] = &unk_1E6A10BD0;
    id v16 = v9;
    id v51 = v16;
    int v17 = objc_msgSend(v15, "na_firstObjectPassingTest:", v50);
    __int16 v18 = v17;
    if (v17)
    {
      id v46 = v9;
      id v19 = v17;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v20 = v19;
      }
      else {
        id v20 = 0;
      }
      id v21 = v20;

      uint64_t v22 = [v21 needsOnboarding];
      if (v22
        && (uint64_t v23 = (void *)v22,
            [v21 needsOnboarding],
            __int16 v24 = objc_claimAutoreleasedReturnValue(),
            uint64_t v25 = [v24 integerValue],
            v24,
            v23,
            v25 == 2))
      {
        id v26 = (void *)MEMORY[0x1D9452090]();
        uint64_t v27 = self;
        uint64_t v28 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          v29 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          v55 = v29;
          _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_INFO, "%{public}@Skipping needsOnboarding transaction since there's no change.", buf, 0xCu);
        }
        v10[2](v10, 0);
      }
      else
      {
        v34 = (void *)MEMORY[0x1D9452090]();
        uint64_t v35 = self;
        id v36 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
        {
          v37 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          v55 = v37;
          _os_log_impl(&dword_1D49D5000, v36, OS_LOG_TYPE_INFO, "%{public}@Starting Updating needsOnboarding", buf, 0xCu);
        }
        double v38 = [v13 backingStore];
        v39 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
        uint64_t v40 = [v38 transaction:@"Updating needsOnboarding" options:v39];

        long long v41 = [v21 transactionWithObjectChangeType:2];
        [v41 setNeedsOnboarding:&unk_1F2DC7AF8];
        [v40 add:v41];
        v48[0] = MEMORY[0x1E4F143A8];
        v48[1] = 3221225472;
        v48[2] = __105__HMDHomeManager_SiriEndpointOnboarding__setNeedsOnboardingCompleteWitHomeUUID_accessoryUUID_completion___block_invoke_9;
        v48[3] = &unk_1E6A17D78;
        v48[4] = v35;
        uint64_t v49 = v10;
        [v40 run:v48];
      }
      id v9 = v46;
    }
    else
    {
      long long v42 = (void *)MEMORY[0x1D9452090]();
      __int16 v43 = self;
      v44 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        __int16 v45 = v47 = v9;
        *(_DWORD *)buf = 138543618;
        v55 = v45;
        __int16 v56 = 2112;
        id v57 = v16;
        _os_log_impl(&dword_1D49D5000, v44, OS_LOG_TYPE_ERROR, "%{public}@Accessory is not found. accessoryUUID: %@", buf, 0x16u);

        id v9 = v47;
      }

      id v21 = [MEMORY[0x1E4F28C58] hmfErrorWithCode:2];
      ((void (**)(id, id))v10)[2](v10, v21);
    }
  }
  else
  {
    id v30 = (void *)MEMORY[0x1D9452090]();
    v31 = self;
    id v32 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      BOOL v33 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      v55 = v33;
      __int16 v56 = 2112;
      id v57 = v12;
      _os_log_impl(&dword_1D49D5000, v32, OS_LOG_TYPE_ERROR, "%{public}@Home is not found. homeUUID: %@", buf, 0x16u);
    }
    uint64_t v15 = [MEMORY[0x1E4F28C58] hmfErrorWithCode:2];
    ((void (**)(id, void *))v10)[2](v10, v15);
  }
}

uint64_t __105__HMDHomeManager_SiriEndpointOnboarding__setNeedsOnboardingCompleteWitHomeUUID_accessoryUUID_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 uuid];
  uint64_t v4 = objc_msgSend(v3, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v4;
}

uint64_t __105__HMDHomeManager_SiriEndpointOnboarding__setNeedsOnboardingCompleteWitHomeUUID_accessoryUUID_completion___block_invoke_5(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  id v5 = v4;
  if (v5)
  {
    id v6 = [v3 uuid];
    uint64_t v7 = objc_msgSend(v6, "hmf_isEqualToUUID:", *(void *)(a1 + 32));
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void __105__HMDHomeManager_SiriEndpointOnboarding__setNeedsOnboardingCompleteWitHomeUUID_accessoryUUID_completion___block_invoke_9(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  uint64_t v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v8 = HMFGetLogIdentifier();
      int v10 = 138543618;
      id v11 = v8;
      __int16 v12 = 2112;
      id v13 = v3;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_ERROR, "%{public}@Updating needsOnboarding reported error: %@", (uint8_t *)&v10, 0x16u);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    int v10 = 138543362;
    id v11 = v9;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Updating needsOnboarding success", (uint8_t *)&v10, 0xCu);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

- (id)_mediaRouteIdentifierForAccessory:(id)a3
{
  id v3 = [(HMDHomeManager *)self accessoryWithUUID:a3];
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = [v3 identifier];
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

- (id)_decodeDiagnosticInfoFromLocalResponse:(id)a3
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = objc_msgSend(v4, "hmf_dataForKey:", *MEMORY[0x1E4F2D390]);
  if (v5)
  {
    id v6 = (void *)[objc_alloc(MEMORY[0x1E4F2E548]) initWithData:v5];
  }
  else
  {
    uint64_t v7 = (void *)MEMORY[0x1D9452090]();
    id v8 = self;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v10 = HMFGetLogIdentifier();
      uint64_t v11 = *MEMORY[0x1E4F2D0B0];
      int v13 = 138543618;
      uint64_t v14 = v10;
      __int16 v15 = 2112;
      uint64_t v16 = v11;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_ERROR, "%{public}@Response does not contain key %@", (uint8_t *)&v13, 0x16u);
    }
    id v6 = 0;
  }

  return v6;
}

- (id)_diagnosticInfoFromRemoteResponse:(id)a3
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = *MEMORY[0x1E4F2D0B0];
  id v6 = objc_msgSend(v4, "hmf_dataForKey:", *MEMORY[0x1E4F2D0B0]);
  uint64_t v7 = v6;
  if (v6)
  {
    id v8 = v6;
  }
  else
  {
    id v9 = (void *)MEMORY[0x1D9452090]();
    int v10 = self;
    uint64_t v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      __int16 v12 = HMFGetLogIdentifier();
      int v14 = 138543618;
      __int16 v15 = v12;
      __int16 v16 = 2112;
      uint64_t v17 = v5;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_ERROR, "%{public}@Response does not contain key %@", (uint8_t *)&v14, 0x16u);
    }
  }

  return v7;
}

- (void)_handleAccessoryDiagnosticQueryWithOptions:(unint64_t)a3 accessory:(id)a4 accessoryUUID:(id)a5 mediaRouteID:(id)a6 additionalFetchKeys:(id)a7 remoteMessageTimeout:(double)a8 remoteMessageRestriction:(unint64_t)a9 completion:(id)a10
{
  char v14 = a3;
  id v16 = a4;
  id v31 = a5;
  id v17 = a6;
  id v30 = a7;
  id v18 = a10;
  id v19 = [v16 deviceForDirectMessaging];
  id v20 = [v16 home];
  id v21 = [v20 currentUser];

  uint64_t v22 = @"HMD.accessoryDiagnosticInfo.o";
  if (v21 && ![v21 isOwner]) {
    uint64_t v22 = @"HMD.accessoryDiagnosticInfo";
  }
  uint64_t v23 = dispatch_group_create();
  __int16 v24 = v23;
  v49[0] = 0;
  v49[1] = v49;
  v49[2] = 0x2020000000;
  char v50 = 0;
  unint64_t v25 = v14 & 2;
  if ((v14 & 1) != 0 && v19)
  {
    dispatch_group_enter(v23);
    id v26 = [(HMDHomeManager *)self workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke;
    block[3] = &unk_1E6A0A558;
    void block[4] = self;
    id v38 = v19;
    v39 = v22;
    id v40 = v31;
    id v41 = v17;
    double v47 = a8;
    id v42 = v30;
    __int16 v45 = v49;
    unint64_t v46 = a9;
    char v48 = v25 >> 1;
    id v44 = v18;
    __int16 v43 = v24;
    dispatch_async(v26, block);

    if (!v25) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if ((v14 & 2) != 0)
  {
LABEL_10:
    uint64_t v28 = [(HMDHomeManager *)self workQueue];
    v32[0] = MEMORY[0x1E4F143A8];
    v32[1] = 3221225472;
    v32[2] = __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke_2;
    v32[3] = &unk_1E6A11530;
    id v36 = v49;
    v32[4] = self;
    id v33 = v31;
    id v34 = v17;
    id v35 = v18;
    dispatch_group_notify(v24, v28, v32);

    goto LABEL_11;
  }
  uint64_t v27 = [MEMORY[0x1E4F28C58] hmfErrorWithCode:2];
  (*((void (**)(id, void, void *))v18 + 2))(v18, 0, v27);

LABEL_11:
  _Block_object_dispose(v49, 8);
}

void __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke(uint64_t a1)
{
  v30[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [HMDRemoteDeviceMessageDestination alloc];
  id v3 = [*(id *)(a1 + 32) uuid];
  id v4 = [(HMDRemoteDeviceMessageDestination *)v2 initWithTarget:v3 device:*(void *)(a1 + 40)];

  v29[0] = @"uuid";
  uint64_t v5 = *(void *)(a1 + 48);
  id v6 = [*(id *)(a1 + 56) UUIDString];
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  v30[0] = v6;
  v30[1] = v7;
  uint64_t v9 = *MEMORY[0x1E4F2D380];
  v29[1] = @"identifier";
  v29[2] = v9;
  v30[2] = v8;
  int v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:v29 count:3];
  uint64_t v11 = +[HMDRemoteMessage secureMessageWithName:v5 qualityOfService:-1 destination:v4 messagePayload:v10 restriction:*(void *)(a1 + 104)];
  __int16 v12 = (void *)[v11 mutableCopy];

  int v13 = (void *)MEMORY[0x1D9452090]([v12 setTimeout:*(double *)(a1 + 112)]);
  id v14 = *(id *)(a1 + 32);
  __int16 v15 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    id v16 = HMFGetLogIdentifier();
    uint64_t v17 = *(void *)(a1 + 56);
    *(_DWORD *)buf = 138543618;
    id v26 = v16;
    __int16 v27 = 2112;
    uint64_t v28 = v17;
    _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@Performing accessory diagnostic fetch for accessory %@", buf, 0x16u);
  }
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  v21[2] = __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke_21;
  v21[3] = &unk_1E6A0A530;
  void v21[4] = *(void *)(a1 + 32);
  char v24 = *(unsigned char *)(a1 + 120);
  long long v20 = *(_OWORD *)(a1 + 88);
  id v18 = (id)v20;
  long long v23 = v20;
  id v22 = *(id *)(a1 + 80);
  [v12 setResponseHandler:v21];
  id v19 = [*(id *)(a1 + 32) messageDispatcher];
  [v19 sendMessage:v12];
}

void __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke_2(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
    uint64_t v2 = (void *)MEMORY[0x1D9452090]();
    id v3 = *(id *)(a1 + 32);
    id v4 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = HMFGetLogIdentifier();
      uint64_t v6 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      __int16 v12 = v5;
      __int16 v13 = 2112;
      uint64_t v14 = v6;
      _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@Performing accessory diagnostic fetch using rapport %@", buf, 0x16u);
    }
    uint64_t v7 = [*(id *)(a1 + 32) configuringStateController];
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke_23;
    v9[3] = &unk_1E6A0A508;
    void v9[4] = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 48);
    id v10 = *(id *)(a1 + 56);
    [v7 queryConfiguringState:v8 additionalKeys:MEMORY[0x1E4F1CBF0] withCompletion:v9];
  }
}

uint64_t __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke_23(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _handleAccessoryDiagnosticStateQueryWithResponse:a2 hasAdditionalRequest:0 error:a3 completion:*(void *)(a1 + 40)];
}

void __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke_21(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [*(id *)(a1 + 32) _handleAccessoryDiagnosticStateQueryWithResponse:a3 hasAdditionalRequest:*(unsigned __int8 *)(a1 + 64) error:a2 completion:*(void *)(a1 + 48)];
  id v4 = *(NSObject **)(a1 + 40);
  dispatch_group_leave(v4);
}

- (void)_handleAccessoryDiagnosticStateQuery:(id)a3
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [v4 messagePayload];
  uint64_t v6 = objc_msgSend(v5, "hmf_numberForKey:", *MEMORY[0x1E4F2D398]);
  uint64_t v7 = [v6 integerValue];

  if (v7)
  {
    uint64_t v8 = [v4 uuidForKey:*MEMORY[0x1E4F2D378]];
    if (v8)
    {
      uint64_t v9 = [(HMDHomeManager *)self accessoryWithUUID:v8];
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v10 = v9;
      }
      else {
        id v10 = 0;
      }
      id v11 = v10;

      __int16 v12 = [v11 identifier];
      if (v12)
      {
        v26[0] = MEMORY[0x1E4F143A8];
        v26[1] = 3221225472;
        v26[2] = __73__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticStateQuery___block_invoke;
        v26[3] = &unk_1E6A18CB8;
        id v27 = v4;
        [(HMDHomeManager *)self _handleAccessoryDiagnosticQueryWithOptions:v7 accessory:v11 accessoryUUID:v8 mediaRouteID:v12 additionalFetchKeys:MEMORY[0x1E4F1CBF0] remoteMessageTimeout:9 remoteMessageRestriction:10.0 completion:v26];
        __int16 v13 = v27;
      }
      else
      {
        id v22 = (void *)MEMORY[0x1D9452090]();
        long long v23 = self;
        char v24 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          unint64_t v25 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          v29 = v25;
          _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_ERROR, "%{public}@mediaRouteIdentifier is nil", buf, 0xCu);
        }
        __int16 v13 = [MEMORY[0x1E4F28C58] hmfErrorWithCode:2];
        [v4 respondWithError:v13];
      }
    }
    else
    {
      id v18 = (void *)MEMORY[0x1D9452090]();
      id v19 = self;
      long long v20 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        id v21 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        v29 = v21;
        _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_ERROR, "%{public}@Could not determine accessory UUID", buf, 0xCu);
      }
      id v11 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
      [v4 respondWithError:v11];
    }
  }
  else
  {
    uint64_t v14 = (void *)MEMORY[0x1D9452090]();
    uint64_t v15 = self;
    id v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      v29 = v17;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_ERROR, "%{public}@Invalid fetch options", buf, 0xCu);
    }
    uint64_t v8 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    [v4 respondWithError:v8];
  }
}

uint64_t __73__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticStateQuery___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = *(void **)(a1 + 32);
  if (a3) {
    return objc_msgSend(v3, "respondWithError:");
  }
  else {
    return [v3 respondWithPayload:a2];
  }
}

- (BOOL)_handleAccessoryDiagnosticStateQueryWithResponse:(id)a3 hasAdditionalRequest:(BOOL)a4 error:(id)a5 completion:(id)a6
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v11 = a5;
  __int16 v12 = (void (**)(id, void *, void))a6;
  if (!v11)
  {
    id v18 = [(HMDHomeManager *)self _diagnosticInfoFromRemoteResponse:v10];
    BOOL v17 = v18 != 0;
    id v19 = (void *)MEMORY[0x1D9452090]();
    long long v20 = self;
    id v21 = HMFGetOSLogHandle();
    id v22 = v21;
    if (v18)
    {
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        long long v23 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        uint64_t v30 = v23;
        _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_INFO, "%{public}@Responding with diagnostic Info", buf, 0xCu);
      }
      uint64_t v27 = *MEMORY[0x1E4F2D390];
      uint64_t v28 = v18;
      char v24 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v28 forKeys:&v27 count:1];
      v12[2](v12, v24, 0);
    }
    else
    {
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        unint64_t v25 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        uint64_t v30 = v25;
        _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_ERROR, "%{public}@Failed to decode the response", buf, 0xCu);
      }
      if (a4) {
        goto LABEL_16;
      }
      char v24 = [MEMORY[0x1E4F28C58] hmfErrorWithCode:2];
      ((void (**)(id, void *, void *))v12)[2](v12, 0, v24);
    }

LABEL_16:
    goto LABEL_17;
  }
  __int16 v13 = (void *)MEMORY[0x1D9452090]();
  uint64_t v14 = self;
  uint64_t v15 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    id v16 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    uint64_t v30 = v16;
    __int16 v31 = 2112;
    id v32 = v11;
    _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_ERROR, "%{public}@Query message failed, error: (%@): ", buf, 0x16u);
  }
  if (!a4) {
    ((void (**)(id, void *, id))v12)[2](v12, 0, v11);
  }
  BOOL v17 = 0;
LABEL_17:

  return v17;
}

- (void)_handleDeviceSetupConfiguringStateQuery:(id)a3
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [v4 uuidForKey:@"kAccessoryPeerIdentifierKey"];
  uint64_t v6 = (void *)MEMORY[0x1D9452090]();
  uint64_t v7 = self;
  uint64_t v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543874;
    id v22 = v9;
    __int16 v23 = 2112;
    id v24 = v4;
    __int16 v25 = 2112;
    id v26 = v5;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Handle query message %@ with mediaRouteID %@", buf, 0x20u);
  }
  if (!v5)
  {
    __int16 v13 = (void *)MEMORY[0x1D9452090]();
    uint64_t v14 = v7;
    uint64_t v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      id v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v22 = v16;
      BOOL v17 = "%{public}@mediaRouteIdentifier is nil";
LABEL_10:
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_ERROR, v17, buf, 0xCu);
    }
LABEL_11:

    id v18 = [MEMORY[0x1E4F28C58] hmfErrorWithCode:2];
    [v4 respondWithError:v18];

    goto LABEL_12;
  }
  id v10 = [(HMDHomeManager *)v7 configuringStateController];

  if (!v10)
  {
    __int16 v13 = (void *)MEMORY[0x1D9452090]();
    uint64_t v14 = v7;
    uint64_t v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      id v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v22 = v16;
      BOOL v17 = "%{public}@Configuring controller is nil";
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  id v11 = [(HMDHomeManager *)v7 configuringStateController];
  __int16 v12 = [v5 UUIDString];
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = __76__HMDHomeManager_ConfiguringState___handleDeviceSetupConfiguringStateQuery___block_invoke;
  v19[3] = &unk_1E6A192B8;
  void v19[4] = v7;
  id v20 = v4;
  [v11 queryConfiguringState:v12 additionalKeys:MEMORY[0x1E4F1CBF0] withCompletion:v19];

LABEL_12:
}

void __76__HMDHomeManager_ConfiguringState___handleDeviceSetupConfiguringStateQuery___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [*(id *)(a1 + 32) workQueue];
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __76__HMDHomeManager_ConfiguringState___handleDeviceSetupConfiguringStateQuery___block_invoke_2;
  v12[3] = &unk_1E6A18668;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(a1 + 40);
  id v13 = v6;
  uint64_t v14 = v8;
  id v15 = v9;
  id v16 = v5;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v7, v12);
}

void __76__HMDHomeManager_ConfiguringState___handleDeviceSetupConfiguringStateQuery___block_invoke_2(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = (void *)MEMORY[0x1D9452090]();
    id v3 = *(id *)(a1 + 40);
    id v4 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      id v5 = HMFGetLogIdentifier();
      id v6 = *(void **)(a1 + 32);
      int v17 = 138543618;
      id v18 = v5;
      __int16 v19 = 2112;
      id v20 = v6;
      _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_ERROR, "%{public}@Query message failed, error: (%@): ", (uint8_t *)&v17, 0x16u);
    }
    [*(id *)(a1 + 48) respondWithError:*(void *)(a1 + 32)];
  }
  else
  {
    uint64_t v7 = [*(id *)(a1 + 40) _diagnosticInfoFromRemoteResponse:*(void *)(a1 + 56)];
    uint64_t v8 = +[HMDAppleMediaAccessoryDiagnosticInfoController diagnosticInfoDescriptionWithData:v7];

    uint64_t v9 = (void *)MEMORY[0x1D9452090]();
    id v10 = *(id *)(a1 + 40);
    id v11 = HMFGetOSLogHandle();
    __int16 v12 = v11;
    if (v8)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        id v13 = HMFGetLogIdentifier();
        int v17 = 138543618;
        id v18 = v13;
        __int16 v19 = 2112;
        id v20 = v8;
        _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Query message sent, response: %@", (uint8_t *)&v17, 0x16u);
      }
      [*(id *)(a1 + 48) respondWithPayload:v8];
    }
    else
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = HMFGetLogIdentifier();
        int v17 = 138543362;
        id v18 = v14;
        _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to decode the response", (uint8_t *)&v17, 0xCu);
      }
      id v15 = *(void **)(a1 + 48);
      id v16 = [MEMORY[0x1E4F28C58] hmfErrorWithCode:2];
      [v15 respondWithError:v16];
    }
  }
}

- (void)_registerForConfiguringStateMessages
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = (void *)MEMORY[0x1D9452090](self, a2);
  id v4 = self;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    uint64_t v7 = *MEMORY[0x1E4F2D360];
    *(_DWORD *)buf = 138543618;
    id v18 = v6;
    __int16 v19 = 2112;
    uint64_t v20 = v7;
    _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Registering for %@ message for device setup configuring state query", buf, 0x16u);
  }
  else
  {
    uint64_t v7 = *MEMORY[0x1E4F2D360];
  }

  uint64_t v8 = [(HMDHomeManager *)v4 messageDispatcher];
  uint64_t v9 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  id v16 = v9;
  id v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v16 count:1];
  [v8 registerForMessage:v7 receiver:v4 policies:v10 selector:sel__handleDeviceSetupConfiguringStateQuery_];

  id v11 = [(HMDHomeManager *)v4 messageDispatcher];
  uint64_t v12 = *MEMORY[0x1E4F2D3F8];
  id v13 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  id v15 = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v15 count:1];
  [v11 registerForMessage:v12 receiver:v4 policies:v14 selector:sel__handleAccessoryDiagnosticStateQuery_];
}

- (void)fetchSetupDiagnosticStateWithOptions:(unint64_t)a3 accessoryUUID:(id)a4 remoteMessageTimeout:(double)a5 remoteMessageRestriction:(unint64_t)a6 completion:(id)a7
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v12 = a4;
  id v13 = a7;
  if (v12)
  {
    uint64_t v14 = [(HMDHomeManager *)self _mediaRouteIdentifierForAccessory:v12];
    if (v14)
    {
      id v15 = (void *)v14;
      id v16 = [(HMDHomeManager *)self configuringStateController];

      if (v16)
      {
        int v17 = [(HMDHomeManager *)self accessoryWithUUID:v12];
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v18 = v17;
        }
        else {
          id v18 = 0;
        }
        id v19 = v18;

        uint64_t v37 = *MEMORY[0x1E4F2D388];
        uint64_t v20 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v37 count:1];
        v35[0] = MEMORY[0x1E4F143A8];
        v35[1] = 3221225472;
        v35[2] = __144__HMDHomeManager_ConfiguringState__fetchSetupDiagnosticStateWithOptions_accessoryUUID_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke;
        v35[3] = &unk_1E6A0A508;
        v35[4] = self;
        id v36 = v13;
        [(HMDHomeManager *)self _handleAccessoryDiagnosticQueryWithOptions:a3 accessory:v19 accessoryUUID:v12 mediaRouteID:v15 additionalFetchKeys:v20 remoteMessageTimeout:a6 remoteMessageRestriction:a5 completion:v35];
      }
      else
      {
        uint64_t v30 = (void *)MEMORY[0x1D9452090]();
        __int16 v31 = self;
        id v32 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          uint64_t v33 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          v39 = v33;
          _os_log_impl(&dword_1D49D5000, v32, OS_LOG_TYPE_INFO, "%{public}@Cannot query configuring state as the controller is nil", buf, 0xCu);
        }
        id v34 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
        (*((void (**)(id, void, void *))v13 + 2))(v13, 0, v34);
      }
    }
    else
    {
      __int16 v25 = (void *)MEMORY[0x1D9452090]();
      id v26 = self;
      uint64_t v27 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        uint64_t v28 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        v39 = v28;
        _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_INFO, "%{public}@Cannot query configuring state as peer identifier is nil", buf, 0xCu);
      }
      v29 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
      (*((void (**)(id, void, void *))v13 + 2))(v13, 0, v29);

      id v15 = 0;
    }
  }
  else
  {
    uint64_t v21 = (void *)MEMORY[0x1D9452090]();
    id v22 = self;
    __int16 v23 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      id v24 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      v39 = v24;
      _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_INFO, "%{public}@Cannot query configuring state as accessory UUID is nil", buf, 0xCu);
    }
    id v15 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    (*((void (**)(id, void, void *))v13 + 2))(v13, 0, v15);
  }
}

void __144__HMDHomeManager_ConfiguringState__fetchSetupDiagnosticStateWithOptions_accessoryUUID_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = (void *)MEMORY[0x1D9452090]();
    id v8 = *(id *)(a1 + 32);
    uint64_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v10 = HMFGetLogIdentifier();
      int v17 = 138543618;
      id v18 = v10;
      __int16 v19 = 2112;
      id v20 = v6;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_ERROR, "%{public}@Query configuring state failed with error: (%@): ", (uint8_t *)&v17, 0x16u);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v11 = [*(id *)(a1 + 32) _decodeDiagnosticInfoFromLocalResponse:v5];
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
    id v13 = (void *)MEMORY[0x1D9452090](v12);
    id v14 = *(id *)(a1 + 32);
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      id v16 = HMFGetLogIdentifier();
      int v17 = 138543618;
      id v18 = v16;
      __int16 v19 = 2112;
      id v20 = v11;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@Query message sent, response: %@", (uint8_t *)&v17, 0x16u);
    }
  }
}

- (void)fetchSetupDiagnosticStateForAccessoryUUID:(id)a3 completion:(id)a4
{
}

- (void)_maybeCreateLegacyHomeAcceptedZone:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __69__HMDHomeManager_LegacyHomeZone___maybeCreateLegacyHomeAcceptedZone___block_invoke;
    v9[3] = &unk_1E6A0B9E0;
    void v9[4] = self;
    id v10 = v4;
    id v5 = v4;
    [(HMDHomeManager *)self _queryLegacyHomeAndAcceptedZoneExists:v5 completion:v9];
  }
  else
  {
    uint64_t v6 = _HMFPreconditionFailure();
    __69__HMDHomeManager_LegacyHomeZone___maybeCreateLegacyHomeAcceptedZone___block_invoke(v6, v7, v8);
  }
}

void __69__HMDHomeManager_LegacyHomeZone___maybeCreateLegacyHomeAcceptedZone___block_invoke(uint64_t a1, char a2, int a3)
{
  v47[1] = *MEMORY[0x1E4F143B8];
  if ((a2 & 1) == 0)
  {
    id v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = *(id *)(a1 + 32);
    uint64_t v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      char v7 = HMFGetLogIdentifier();
      uint64_t v10 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      uint64_t v40 = v7;
      __int16 v41 = 2112;
      uint64_t v42 = v10;
      uint64_t v9 = "%{public}@Skip creating home accepted zone since no legacy home %@ was found";
      goto LABEL_7;
    }
LABEL_8:

    return;
  }
  if (a3)
  {
    id v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = *(id *)(a1 + 32);
    uint64_t v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      char v7 = HMFGetLogIdentifier();
      uint64_t v8 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      uint64_t v40 = v7;
      __int16 v41 = 2112;
      uint64_t v42 = v8;
      uint64_t v9 = "%{public}@Skip creating home accepted zone for home %@ since it already exists";
LABEL_7:
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, v9, buf, 0x16u);

      goto LABEL_8;
    }
    goto LABEL_8;
  }
  id v11 = [*(id *)(a1 + 32) _legacyContainer];
  uint64_t v12 = [v11 privateCloudDatabase];
  id v13 = objc_alloc(MEMORY[0x1E4F1A310]);
  id v14 = [*(id *)(a1 + 32) _legacyHomeAcceptedZoneIDFromHomeUUID:*(void *)(a1 + 40)];
  id v15 = (void *)[v13 initWithZoneID:v14];

  if (v15)
  {
    id v16 = objc_alloc(MEMORY[0x1E4F1A180]);
    v47[0] = v15;
    int v17 = [MEMORY[0x1E4F1C978] arrayWithObjects:v47 count:1];
    id v18 = (void *)[v16 initWithRecordZonesToSave:v17 recordZoneIDsToDelete:0];

    [v18 setDatabase:v12];
    __int16 v19 = [v18 operationID];
    id v20 = (void *)MEMORY[0x1D9452090]();
    id v21 = *(id *)(a1 + 32);
    id v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      __int16 v23 = v35 = v12;
      uint64_t v24 = *(void *)(a1 + 40);
      [v15 zoneID];
      __int16 v25 = v34 = v20;
      [v25 zoneName];
      v26 = id v36 = v11;
      *(_DWORD *)buf = 138544130;
      uint64_t v40 = v23;
      __int16 v41 = 2112;
      uint64_t v42 = v24;
      __int16 v43 = 2112;
      id v44 = v26;
      __int16 v45 = 2112;
      unint64_t v46 = v19;
      _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_INFO, "%{public}@Saving legacy home accepted zone for home/zoneAccepted (%@/%@) with operation ID %@", buf, 0x2Au);

      id v11 = v36;
      id v20 = v34;

      uint64_t v12 = v35;
    }

    v37[0] = MEMORY[0x1E4F143A8];
    v37[1] = 3221225472;
    v37[2] = __69__HMDHomeManager_LegacyHomeZone___maybeCreateLegacyHomeAcceptedZone___block_invoke_13;
    v37[3] = &unk_1E6A0B9B8;
    void v37[4] = *(void *)(a1 + 32);
    id v38 = v19;
    id v27 = v19;
    [v18 setModifyRecordZonesCompletionBlock:v37];
    uint64_t v28 = [v12 operationQueue];
    [v28 addOperation:v18];
  }
  else
  {
    v29 = (void *)MEMORY[0x1D9452090]();
    id v30 = *(id *)(a1 + 32);
    __int16 v31 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      id v32 = HMFGetLogIdentifier();
      uint64_t v33 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      uint64_t v40 = v32;
      __int16 v41 = 2112;
      uint64_t v42 = v33;
      _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_INFO, "%{public}@Failed to determine legacy accepted zoneID for home %@", buf, 0x16u);
    }
  }
}

void __69__HMDHomeManager_LegacyHomeZone___maybeCreateLegacyHomeAcceptedZone___block_invoke_13(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = (void *)MEMORY[0x1D9452090]();
  id v11 = *(id *)(a1 + 32);
  uint64_t v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v13 = HMFGetLogIdentifier();
    uint64_t v14 = *(void *)(a1 + 40);
    int v15 = 138543874;
    id v16 = v13;
    __int16 v17 = 2112;
    uint64_t v18 = v14;
    __int16 v19 = 2112;
    id v20 = v9;
    _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Completed saving legacy home accepted zone with operation ID %@ and error %@", (uint8_t *)&v15, 0x20u);
  }
}

- (void)_queryLegacyHomeAndAcceptedZoneExists:(id)a3 completion:(id)a4
{
  v45[2] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  if (!v6) {
    _HMFPreconditionFailure();
  }
  id v8 = (void (**)(void, void, void))v7;
  id v9 = [(HMDHomeManager *)self _legacyContainer];
  uint64_t v10 = [v9 privateCloudDatabase];
  id v11 = [(HMDHomeManager *)self _legacyHomeZoneIDFromHomeUUID:v6];
  uint64_t v12 = [(HMDHomeManager *)self _legacyHomeAcceptedZoneIDFromHomeUUID:v6];
  id v13 = (void *)v12;
  if (v11 && v12)
  {
    __int16 v31 = v9;
    id v14 = objc_alloc(MEMORY[0x1E4F1A090]);
    v45[0] = v11;
    v45[1] = v13;
    int v15 = [MEMORY[0x1E4F1C978] arrayWithObjects:v45 count:2];
    id v16 = (void *)[v14 initWithRecordZoneIDs:v15];

    id v30 = v10;
    [v16 setDatabase:v10];
    __int16 v17 = [v16 operationID];
    uint64_t v18 = (void *)MEMORY[0x1D9452090]();
    __int16 v19 = self;
    id v20 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      uint64_t v21 = v29 = v8;
      id v22 = [v11 zoneName];
      *(_DWORD *)buf = 138544130;
      id v38 = v21;
      __int16 v39 = 2112;
      id v40 = v6;
      __int16 v41 = 2112;
      uint64_t v42 = v22;
      __int16 v43 = 2112;
      id v44 = v17;
      _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@Querying the legacy container for existing home/zone (%@/%@) with operation ID %@", buf, 0x2Au);

      id v8 = v29;
    }

    v32[0] = MEMORY[0x1E4F143A8];
    v32[1] = 3221225472;
    v32[2] = __83__HMDHomeManager_LegacyHomeZone___queryLegacyHomeAndAcceptedZoneExists_completion___block_invoke;
    v32[3] = &unk_1E6A0B990;
    v32[4] = v19;
    id v33 = v17;
    id v34 = v11;
    id v35 = v13;
    id v36 = v8;
    id v23 = v17;
    [v16 setFetchRecordZonesCompletionBlock:v32];
    uint64_t v10 = v30;
    uint64_t v24 = [v30 operationQueue];
    [v24 addOperation:v16];

    id v9 = v31;
  }
  else
  {
    __int16 v25 = (void *)MEMORY[0x1D9452090]();
    id v26 = self;
    id v27 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      uint64_t v28 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v38 = v28;
      __int16 v39 = 2112;
      id v40 = v6;
      _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_INFO, "%{public}@Failed to determine legacy zoneID for home %@", buf, 0x16u);
    }
    v8[2](v8, 0, 0);
  }
}

void __83__HMDHomeManager_LegacyHomeZone___queryLegacyHomeAndAcceptedZoneExists_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)MEMORY[0x1D9452090]();
  id v8 = *(id *)(a1 + 32);
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = HMFGetLogIdentifier();
    id v11 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138543874;
    __int16 v25 = v10;
    __int16 v26 = 2112;
    id v27 = v11;
    __int16 v28 = 2112;
    id v29 = v6;
    _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Completed fetching record zone with operation ID %@ and error %@", buf, 0x20u);
  }
  if (v5)
  {
    [v5 objectForKeyedSubscript:*(void *)(a1 + 48)];

    [v5 objectForKeyedSubscript:*(void *)(a1 + 56)];
    uint64_t v12 = (void *)MEMORY[0x1D9452090]();
    id v13 = *(id *)(a1 + 32);
    id v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      id v23 = v6;
      int v15 = HMFGetLogIdentifier();
      id v16 = HMFBooleanToString();
      __int16 v17 = HMFBooleanToString();
      *(_DWORD *)buf = 138543874;
      __int16 v25 = v15;
      __int16 v26 = 2112;
      id v27 = v16;
      __int16 v28 = 2112;
      id v29 = v17;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Legacy home zone exists = %@ and legacy home accepted zone = %@", buf, 0x20u);

      id v6 = v23;
    }

    uint64_t v18 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
  }
  else
  {
    __int16 v19 = (void *)MEMORY[0x1D9452090]();
    id v20 = *(id *)(a1 + 32);
    uint64_t v21 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      id v22 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      __int16 v25 = v22;
      _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_ERROR, "%{public}@Failed to determine legacy zones returning that neither home zone or home accepted zone exist", buf, 0xCu);
    }
    uint64_t v18 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
  }
  v18();
}

- (id)_legacyHomeAcceptedZoneIDFromHomeUUID:(id)a3
{
  id v3 = a3;
  if (v3)
  {
    id v4 = v3;
    id v5 = +[HMDHome zoneIDFromHomeUUID:v3];
    id v6 = NSString;
    id v7 = [v5 UUIDString];
    id v8 = [v6 stringWithFormat:@"%@_accepted", v7];

    id v9 = objc_alloc(MEMORY[0x1E4F1A320]);
    uint64_t v10 = (void *)[v9 initWithZoneName:v8 ownerName:*MEMORY[0x1E4F19C08]];

    return v10;
  }
  else
  {
    uint64_t v12 = (HMDHomeManager *)_HMFPreconditionFailure();
    return [(HMDHomeManager *)v12 _legacyHomeZoneIDFromHomeUUID:v14];
  }
}

- (id)_legacyHomeZoneIDFromHomeUUID:(id)a3
{
  id v3 = a3;
  if (v3)
  {
    id v4 = v3;
    id v5 = +[HMDHome zoneIDFromHomeUUID:v3];
    id v6 = objc_alloc(MEMORY[0x1E4F1A320]);
    id v7 = [v5 UUIDString];
    id v8 = (void *)[v6 initWithZoneName:v7 ownerName:*MEMORY[0x1E4F19C08]];

    return v8;
  }
  else
  {
    uint64_t v10 = (HMDHomeManager *)_HMFPreconditionFailure();
    return [(HMDHomeManager *)v10 _legacyContainer];
  }
}

- (id)_legacyContainer
{
  id v2 = objc_alloc(MEMORY[0x1E4F19ED8]);
  id v3 = (void *)[v2 initWithContainerIdentifier:@"com.apple.willow.config" environment:cloudKitContainerEnvironment];
  id v4 = (void *)[objc_alloc(MEMORY[0x1E4F19EC8]) initWithContainerID:v3];

  return v4;
}

- (void)autoAddWalletKeysOncePerDeviceSetup
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v23 = objc_alloc_init(HMDHomeWalletDataSource);
  uint64_t v21 = [(HMDHomeWalletDataSource *)v23 numberValueFromNoBackupStoreWithKey:@"HMDHomeManagerRecordInitialWalletKeysOncePerDevice"];
  if (([v21 BOOLValue] & 1) == 0)
  {
    id v3 = [HMDWalletPassLibrary alloc];
    id v4 = [(HMDHomeManager *)self workQueue];
    id v5 = [(HMDWalletPassLibrary *)v3 initWithWorkQueue:v4];

    id v6 = +[HMDHomeKeyDataRecorder sharedRecorder];
    id v7 = [(HMDWalletPassLibrary *)v5 walletKeys];
    id v8 = [v7 allObjects];
    [v6 recordInitialWalletKeys:v8];

    [(HMDHomeWalletDataSource *)v23 persistNumberValueToNoBackupStore:MEMORY[0x1E4F1CC38] withKey:@"HMDHomeManagerRecordInitialWalletKeysOncePerDevice"];
  }
  id v9 = [MEMORY[0x1E4F65430] internalOnlyInitializer];
  uint64_t v10 = (void *)MEMORY[0x1D9452090]();
  SEL v11 = self;
  uint64_t v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    SEL v13 = HMFGetLogIdentifier();
    id v14 = [v9 UUID];
    *(_DWORD *)buf = 138543618;
    id v34 = v13;
    __int16 v35 = 2112;
    id v36 = v14;
    _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@[NewFlow: %@] Auto add wallet keys once per device setup", buf, 0x16u);
  }
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id obj = [(HMDHomeManager *)v11 homes];
  uint64_t v15 = [obj countByEnumeratingWithState:&v28 objects:v32 count:16];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        if (*(void *)v29 != v17) {
          objc_enumerationMutation(obj);
        }
        __int16 v19 = *(void **)(*((void *)&v28 + 1) + 8 * i);
        id v20 = [v19 workQueue];
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = __61__HMDHomeManager_Wallet__autoAddWalletKeysOncePerDeviceSetup__block_invoke;
        block[3] = &unk_1E6A18668;
        void block[4] = v19;
        __int16 v25 = v23;
        __int16 v26 = v11;
        id v27 = v9;
        dispatch_async(v20, block);
      }
      uint64_t v16 = [obj countByEnumeratingWithState:&v28 objects:v32 count:16];
    }
    while (v16);
  }
}

void __61__HMDHomeManager_Wallet__autoAddWalletKeysOncePerDeviceSetup__block_invoke(id *a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1E4F29128];
  id v3 = [a1[4] uuid];
  id v4 = [@"D4F5EA54-226C-44B6-B7CD-45DA59BE5B1F" dataUsingEncoding:4];
  id v5 = objc_msgSend(v2, "hmf_UUIDWithNamespace:data:", v3, v4);
  id v6 = [v5 UUIDString];

  id v7 = [a1[5] numberValueFromNoBackupStoreWithKey:v6];
  id v8 = (void *)MEMORY[0x1D9452090]();
  id v9 = a1[6];
  uint64_t v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    SEL v11 = HMFGetLogIdentifier();
    uint64_t v12 = [a1[7] UUID];
    id v13 = a1[4];
    int v26 = 138544130;
    id v27 = v11;
    __int16 v28 = 2112;
    long long v29 = v12;
    __int16 v30 = 2112;
    id v31 = v13;
    __int16 v32 = 2112;
    id v33 = v6;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Auto add wallet key preference key for home %@:%@", (uint8_t *)&v26, 0x2Au);
  }
  int v14 = [v7 BOOLValue];
  uint64_t v15 = (void *)MEMORY[0x1D9452090]();
  id v16 = a1[6];
  uint64_t v17 = HMFGetOSLogHandle();
  BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_INFO);
  if (v14)
  {
    if (v18)
    {
      __int16 v19 = HMFGetLogIdentifier();
      id v20 = [a1[7] UUID];
      id v21 = a1[4];
      int v26 = 138543874;
      id v27 = v19;
      __int16 v28 = 2112;
      long long v29 = v20;
      __int16 v30 = 2112;
      id v31 = v21;
      _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Already auto added wallet key once per device setup for home: %@", (uint8_t *)&v26, 0x20u);
    }
  }
  else
  {
    if (v18)
    {
      id v22 = HMFGetLogIdentifier();
      id v23 = [a1[7] UUID];
      id v24 = a1[4];
      int v26 = 138543874;
      id v27 = v22;
      __int16 v28 = 2112;
      long long v29 = v23;
      __int16 v30 = 2112;
      id v31 = v24;
      _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Auto adding wallet key once per device setup for home: %@", (uint8_t *)&v26, 0x20u);
    }
    __int16 v25 = [a1[4] walletKeyManager];
    [v25 autoAddWalletKeyWithFlow:a1[7]];

    [a1[5] persistNumberValueToNoBackupStore:MEMORY[0x1E4F1CC38] withKey:v6];
  }
}

- (void)removeHomeWalletKeysExcludingSerialNumbers:(id)a3 flow:(id)a4
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v40 = a3;
  id v39 = a4;
  id v6 = (void *)MEMORY[0x1D9452090]();
  id v7 = self;
  id v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    uint64_t v10 = [v39 UUID];
    *(_DWORD *)buf = 138543874;
    double v47 = v9;
    __int16 v48 = 2112;
    uint64_t v49 = v10;
    __int16 v50 = 2112;
    id v51 = v40;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Removing home wallet keys with serial number not in: %@", buf, 0x20u);
  }
  SEL v11 = [HMDWalletPassLibrary alloc];
  uint64_t v12 = [(HMDHomeManager *)v7 workQueue];
  id v13 = [(HMDWalletPassLibrary *)v11 initWithWorkQueue:v12];

  uint64_t v37 = v13;
  int v14 = [(HMDWalletPassLibrary *)v13 walletKeys];
  uint64_t v15 = (void *)MEMORY[0x1D9452090]();
  id v16 = v7;
  uint64_t v17 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    BOOL v18 = HMFGetLogIdentifier();
    __int16 v19 = [v39 UUID];
    *(_DWORD *)buf = 138543874;
    double v47 = v18;
    __int16 v48 = 2112;
    uint64_t v49 = v19;
    __int16 v50 = 2112;
    id v51 = v14;
    _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Existing home keys in wallet: %@", buf, 0x20u);
  }
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  id obj = v14;
  uint64_t v20 = [obj countByEnumeratingWithState:&v41 objects:v45 count:16];
  if (v20)
  {
    uint64_t v22 = v20;
    uint64_t v23 = *(void *)v42;
    *(void *)&long long v21 = 138543874;
    long long v36 = v21;
    do
    {
      for (uint64_t i = 0; i != v22; ++i)
      {
        if (*(void *)v42 != v23) {
          objc_enumerationMutation(obj);
        }
        __int16 v25 = *(void **)(*((void *)&v41 + 1) + 8 * i);
        int v26 = objc_msgSend(v25, "serialNumber", v36);
        char v27 = [v40 containsObject:v26];

        if ((v27 & 1) == 0)
        {
          __int16 v28 = (void *)MEMORY[0x1D9452090]();
          long long v29 = v16;
          __int16 v30 = v16;
          id v31 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
          {
            __int16 v32 = HMFGetLogIdentifier();
            id v33 = [v39 UUID];
            *(_DWORD *)buf = v36;
            double v47 = v32;
            __int16 v48 = 2112;
            uint64_t v49 = v33;
            __int16 v50 = 2112;
            id v51 = v25;
            _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Removing wallet key that doesn't belong to any home: %@", buf, 0x20u);
          }
          uint64_t v34 = [v25 typeIdentifier];
          __int16 v35 = [v25 serialNumber];
          [(HMDWalletPassLibrary *)v37 removePassWithTypeIdentifier:v34 serialNumber:v35 flow:v39];

          id v16 = v29;
        }
      }
      uint64_t v22 = [obj countByEnumeratingWithState:&v41 objects:v45 count:16];
    }
    while (v22);
  }
}

- (NSSet)homeUUIDsWithAutoAddWalletKeySuppressed
{
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  id v4 = [(HMDHomeManager *)self homeUUIDsWithAutoAddWalletKeySuppressedSync];
  os_unfair_lock_unlock(p_lock);
  return (NSSet *)v4;
}

- (void)handleXPCConnectionDeactivatedNotification:(id)a3
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 userInfo];
  id v6 = [v5 objectForKeyedSubscript:@"connection"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v7 = v6;
  }
  else {
    id v7 = 0;
  }
  id v8 = v7;

  if (!v8) {
    _HMFPreconditionFailure();
  }
  id v9 = (void *)MEMORY[0x1D9452090]();
  uint64_t v10 = self;
  SEL v11 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    uint64_t v12 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    id v31 = v12;
    __int16 v32 = 2112;
    id v33 = v8;
    _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Handling wallet key assertion when xpc connection was removed: %@", buf, 0x16u);
  }
  os_unfair_lock_lock_with_options();
  id v13 = [(HMDHomeManager *)v10 homeUUIDsWithAutoAddWalletKeySuppressedSync];
  int v14 = (void *)[v13 mutableCopy];

  uint64_t v15 = [(HMDHomeManager *)v10 homeUUIDsByWalletKeyAssertionXPCConnection];
  [v15 removeObjectForKey:v8];

  id v16 = [(HMDHomeManager *)v10 homeUUIDsWithAutoAddWalletKeySuppressedSync];
  [v14 minusSet:v16];

  os_unfair_lock_unlock(&v10->_lock);
  uint64_t v17 = (void *)MEMORY[0x1D9452090]();
  BOOL v18 = v10;
  __int16 v19 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    uint64_t v20 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    id v31 = v20;
    __int16 v32 = 2112;
    id v33 = v14;
    _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_INFO, "%{public}@Auto adding wallet key for homes with uuids: %@, when xpc connection was removed", buf, 0x16u);
  }
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v21 = v14;
  uint64_t v22 = [v21 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v22)
  {
    uint64_t v23 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v22; ++i)
      {
        if (*(void *)v26 != v23) {
          objc_enumerationMutation(v21);
        }
        [(HMDHomeManager *)v18 addWalletKeyWithHomeUUID:*(void *)(*((void *)&v25 + 1) + 8 * i), @"connection removed", (void)v25 reason];
      }
      uint64_t v22 = [v21 countByEnumeratingWithState:&v25 objects:v29 count:16];
    }
    while (v22);
  }
}

- (id)homeUUIDsWithAutoAddWalletKeySuppressedSync
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_assert_owner(&self->_lock);
  id v3 = [MEMORY[0x1E4F1CA80] set];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v4 = [(HMDHomeManager *)self homeUUIDsByWalletKeyAssertionXPCConnection];
  uint64_t v5 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v15 + 1) + 8 * i);
        uint64_t v10 = [(HMDHomeManager *)self homeUUIDsByWalletKeyAssertionXPCConnection];
        SEL v11 = [v10 objectForKey:v9];
        uint64_t v12 = [v11 allObjects];
        [v3 addObjectsFromArray:v12];
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v6);
  }

  id v13 = (void *)[v3 copy];
  return v13;
}

- (void)addWalletKeyWithHomeUUID:(id)a3 reason:(id)a4
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHomeManager *)self _homeWithUUID:v6];
  if (v8)
  {
    uint64_t v9 = [MEMORY[0x1E4F65430] internalOnlyInitializer];
    uint64_t v10 = (void *)MEMORY[0x1D9452090]();
    SEL v11 = self;
    uint64_t v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      int v14 = [v9 UUID];
      *(_DWORD *)buf = 138544130;
      long long v25 = v13;
      __int16 v26 = 2112;
      id v27 = v14;
      __int16 v28 = 2112;
      id v29 = v6;
      __int16 v30 = 2112;
      id v31 = v7;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@[NewFlow: %@] Auto adding for wallet key for home with uuid: %@ reason: %@", buf, 0x2Au);
    }
    long long v15 = [v8 workQueue];
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = __58__HMDHomeManager_Wallet__addWalletKeyWithHomeUUID_reason___block_invoke;
    v21[3] = &unk_1E6A197C8;
    id v22 = v8;
    id v23 = v9;
    id v16 = v9;
    dispatch_async(v15, v21);
  }
  else
  {
    long long v17 = (void *)MEMORY[0x1D9452090]();
    long long v18 = self;
    __int16 v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      uint64_t v20 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      long long v25 = v20;
      __int16 v26 = 2112;
      id v27 = v6;
      __int16 v28 = 2112;
      id v29 = v7;
      _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_INFO, "%{public}@Not auto adding wallet key for home with uuid: %@ reason: %@", buf, 0x20u);
    }
  }
}

void __58__HMDHomeManager_Wallet__addWalletKeyWithHomeUUID_reason___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) walletKeyManager];
  [v2 autoAddWalletKeyWithFlow:*(void *)(a1 + 40)];
}

- (void)handleAutoAddWalletKeySupressionAssertionReleaseMessage:(id)a3
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = (void *)MEMORY[0x1D9452090]();
  id v7 = self;
  id v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = HMFGetLogIdentifier();
    uint64_t v10 = [v4 messagePayload];
    int v42 = 138543874;
    long long v43 = v9;
    __int16 v44 = 2112;
    id v45 = v4;
    __int16 v46 = 2112;
    id v47 = v10;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Handling auto add wallet key suppression assertion release message: %@, payload: %@", (uint8_t *)&v42, 0x20u);
  }
  SEL v11 = [v4 transport];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  id v13 = v12;

  if (v13)
  {
    int v14 = [v4 uuidForKey:*MEMORY[0x1E4F2D4B8]];
    if (v14)
    {
      os_unfair_lock_lock_with_options();
      long long v15 = [(HMDHomeManager *)v7 homeUUIDsByWalletKeyAssertionXPCConnection];
      id v16 = [v15 objectForKey:v13];

      int v17 = [v16 containsObject:v14];
      char v18 = v17;
      if (v17) {
        [v16 removeObject:v14];
      }
      __int16 v19 = [(HMDHomeManager *)v7 homeUUIDsWithAutoAddWalletKeySuppressedSync];
      int v20 = [v19 containsObject:v14];

      os_unfair_lock_unlock(&v7->_lock);
      if (v18)
      {
        uint64_t v21 = [v4 respondWithSuccess];
        if (v20)
        {
          id v22 = (void *)MEMORY[0x1D9452090](v21);
          id v23 = v7;
          id v24 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            long long v25 = HMFGetLogIdentifier();
            int v42 = 138543618;
            long long v43 = v25;
            __int16 v44 = 2112;
            id v45 = v14;
            _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_INFO, "%{public}@Not auto adding wallet key for home with uuid: %@ after assertion was released because of some other pending assertion", (uint8_t *)&v42, 0x16u);
          }
        }
        else
        {
          [(HMDHomeManager *)v7 addWalletKeyWithHomeUUID:v14 reason:@"assertion released"];
        }
      }
      else
      {
        uint64_t v37 = (void *)MEMORY[0x1D9452090]();
        id v38 = v7;
        id v39 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
        {
          id v40 = HMFGetLogIdentifier();
          int v42 = 138543874;
          long long v43 = v40;
          __int16 v44 = 2112;
          id v45 = v14;
          __int16 v46 = 2112;
          id v47 = v13;
          _os_log_impl(&dword_1D49D5000, v39, OS_LOG_TYPE_INFO, "%{public}@Could not find any any assertion for home with uuid: %@ for connection: %@", (uint8_t *)&v42, 0x20u);
        }
        long long v41 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
        [v4 respondWithError:v41];
      }
    }
    else
    {
      id v31 = (void *)MEMORY[0x1D9452090]();
      uint64_t v32 = v7;
      id v33 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        uint64_t v34 = HMFGetLogIdentifier();
        __int16 v35 = [v4 messagePayload];
        int v42 = 138543618;
        long long v43 = v34;
        __int16 v44 = 2112;
        id v45 = v35;
        _os_log_impl(&dword_1D49D5000, v33, OS_LOG_TYPE_ERROR, "%{public}@Missing home uuid parameter in message payload: %@", (uint8_t *)&v42, 0x16u);
      }
      long long v36 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
      [v4 respondWithError:v36];

      int v14 = 0;
    }
  }
  else
  {
    __int16 v26 = (void *)MEMORY[0x1D9452090]();
    id v27 = v7;
    __int16 v28 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      id v29 = HMFGetLogIdentifier();
      __int16 v30 = [v4 transport];
      int v42 = 138543618;
      long long v43 = v29;
      __int16 v44 = 2112;
      id v45 = v30;
      _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_ERROR, "%{public}@Received auto add wallet key suppression assertion release message from unknown transport: %@", (uint8_t *)&v42, 0x16u);
    }
    int v14 = [MEMORY[0x1E4F28C58] hmErrorWithCode:-1];
    [v4 respondWithError:v14];
  }
}

- (void)handleAutoAddWalletKeySupressionAssertionAcquireMessage:(id)a3
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = (void *)MEMORY[0x1D9452090]();
  id v7 = self;
  id v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = HMFGetLogIdentifier();
    uint64_t v10 = [v4 messagePayload];
    int v30 = 138543874;
    id v31 = v9;
    __int16 v32 = 2112;
    id v33 = v4;
    __int16 v34 = 2112;
    __int16 v35 = v10;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Handling auto add wallet key suppression assertion acquire message: %@, payload: %@", (uint8_t *)&v30, 0x20u);
  }
  SEL v11 = [v4 transport];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  id v13 = v12;

  if (v13)
  {
    int v14 = [v4 uuidForKey:*MEMORY[0x1E4F2D4B8]];
    if (v14)
    {
      p_lock = &v7->_lock;
      os_unfair_lock_lock_with_options();
      id v16 = [(HMDHomeManager *)v7 homeUUIDsByWalletKeyAssertionXPCConnection];
      int v17 = [v16 objectForKey:v13];

      if (!v17)
      {
        int v17 = [MEMORY[0x1E4F1CA80] set];
        char v18 = [(HMDHomeManager *)v7 homeUUIDsByWalletKeyAssertionXPCConnection];
        [v18 setObject:v17 forKey:v13];
      }
      [v17 addObject:v14];

      os_unfair_lock_unlock(p_lock);
      [v4 respondWithSuccess];
    }
    else
    {
      id v24 = (void *)MEMORY[0x1D9452090]();
      long long v25 = v7;
      __int16 v26 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        id v27 = HMFGetLogIdentifier();
        __int16 v28 = [v4 messagePayload];
        int v30 = 138543618;
        id v31 = v27;
        __int16 v32 = 2112;
        id v33 = v28;
        _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_ERROR, "%{public}@Missing home uuid parameter in message payload: %@", (uint8_t *)&v30, 0x16u);
      }
      id v29 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
      [v4 respondWithError:v29];

      int v14 = 0;
    }
  }
  else
  {
    __int16 v19 = (void *)MEMORY[0x1D9452090]();
    int v20 = v7;
    uint64_t v21 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      id v22 = HMFGetLogIdentifier();
      id v23 = [v4 transport];
      int v30 = 138543618;
      id v31 = v22;
      __int16 v32 = 2112;
      id v33 = v23;
      _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_ERROR, "%{public}@Received auto add wallet key suppression assertion acquire message from unknown transport: %@", (uint8_t *)&v30, 0x16u);
    }
    int v14 = [MEMORY[0x1E4F28C58] hmErrorWithCode:-1];
    [v4 respondWithError:v14];
  }
}

- (void)configureForWalletKey
{
  v12[1] = *MEMORY[0x1E4F143B8];
  id v3 = +[HMDXPCMessagePolicy policyWithEntitlements:131077];
  id v4 = [(HMDHomeManager *)self messageDispatcher];
  uint64_t v5 = *MEMORY[0x1E4F2D318];
  v12[0] = v3;
  id v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v12 count:1];
  [v4 registerForMessage:v5 receiver:self policies:v6 selector:sel_handleAutoAddWalletKeySupressionAssertionAcquireMessage_];

  id v7 = [(HMDHomeManager *)self messageDispatcher];
  uint64_t v8 = *MEMORY[0x1E4F2D320];
  SEL v11 = v3;
  uint64_t v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v11 count:1];
  [v7 registerForMessage:v8 receiver:self policies:v9 selector:sel_handleAutoAddWalletKeySupressionAssertionReleaseMessage_];

  uint64_t v10 = [(HMDHomeManager *)self notificationCenter];
  [v10 addObserver:self selector:sel_handleXPCConnectionDeactivatedNotification_ name:@"HMDXPCClientConnectionDidDeactivateNotification" object:0];
}

- (void)prepareForDiagnosticExtension:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    uint64_t v21 = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Triggering memory exception.", buf, 0xCu);
  }
  task_read_t v9 = *MEMORY[0x1E4F14960];
  mach_port_t corpse_task_port = 0;
  if (task_generate_corpse(v9, &corpse_task_port))
  {
    uint64_t v10 = (void *)MEMORY[0x1D9452090]();
    SEL v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v21 = v12;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Failed to generate a corpse task for memory exception reporting.", buf, 0xCu);
    }
    id v13 = [MEMORY[0x1E4F28C58] hmErrorWithCode:-1];
    [v4 respondWithError:v13];
  }
  else
  {
    int v14 = [MEMORY[0x1E4F65540] processInfo];
    long long v15 = [v14 executableURL];
    id v16 = [v15 path];
    [v16 UTF8String];
    int v17 = dispatch_get_global_queue(-32768, 0);
    id v18 = v4;
    ReportMemoryExceptionFromTask();

    id v13 = v18;
  }
}

void __69__HMDHomeManager_DiagnosticExtension__prepareForDiagnosticExtension___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1D9452090]([*(id *)(a1 + 32) respondWithPayload:0 error:v3]);
  uint64_t v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    int v7 = 138543618;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Memory exception reporting completed with error: %@", (uint8_t *)&v7, 0x16u);
  }
  mach_port_deallocate(*MEMORY[0x1E4F14960], *(_DWORD *)(a1 + 40));
}

- (void)_handleAssistantSyncDataRequest:(id)a3
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v5);

  if ([(HMDHomeManager *)self isDataSyncInProgressWithMessage:v4])
  {
    id v6 = (void *)MEMORY[0x1D9452090]();
    int v7 = self;
    uint64_t v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      __int16 v9 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      int v30 = v9;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Data sync in progress - do not sync data to Siri servers", buf, 0xCu);
    }
    [v4 respondWithPayload:0];
  }
  else
  {
    uint64_t v10 = [v4 clientIdentifier];
    if (v10) {
      uint64_t v11 = (__CFString *)v10;
    }
    else {
      uint64_t v11 = @"com.apple.homeutil";
    }
    if (hasAssistantHashingKeyChanged())
    {
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v12 = [v4 stringForKey:*MEMORY[0x1E4F2EE78]];
    }
    objc_initWeak((id *)buf, self);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __61__HMDHomeManager_Assistant___handleAssistantSyncDataRequest___block_invoke;
    aBlock[3] = &unk_1E6A17780;
    aBlock[4] = self;
    objc_copyWeak(&v27, (id *)buf);
    id v13 = v12;
    id v25 = v13;
    id v26 = v4;
    int v14 = (void (**)(void))_Block_copy(aBlock);
    if (v13 || isWatch())
    {
      v14[2](v14);
    }
    else
    {
      id v15 = [(HMDHomeManager *)self __generateAssistantTeamIdentifier];
      [(HMDHomeManager *)self _setAssistantSyncRequest:v11];
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      id v16 = [(HMDHomeManager *)self homes];
      uint64_t v17 = [v16 countByEnumeratingWithState:&v20 objects:v28 count:16];
      if (v17)
      {
        uint64_t v18 = *(void *)v21;
        do
        {
          uint64_t v19 = 0;
          do
          {
            if (*(void *)v21 != v18) {
              objc_enumerationMutation(v16);
            }
            [*(id *)(*((void *)&v20 + 1) + 8 * v19++) resetAccessoryHashedRouteIdentifiers];
          }
          while (v17 != v19);
          uint64_t v17 = [v16 countByEnumeratingWithState:&v20 objects:v28 count:16];
        }
        while (v17);
      }

      [(HMDHomeManager *)self _generateAssistantSyncDataAndIncrementVersion:1 requestSync:0 urgent:0 completion:v14];
    }

    objc_destroyWeak(&v27);
    objc_destroyWeak((id *)buf);
  }
}

void __61__HMDHomeManager_Assistant___handleAssistantSyncDataRequest___block_invoke(id *a1)
{
  id v2 = [a1[4] gatherer];
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __61__HMDHomeManager_Assistant___handleAssistantSyncDataRequest___block_invoke_2;
  v3[3] = &unk_1E6A191D0;
  objc_copyWeak(&v6, a1 + 7);
  id v4 = a1[5];
  id v5 = a1[6];
  [v2 getSyncEntityObjectsWithCompletionHandler:v3];

  objc_destroyWeak(&v6);
}

void __61__HMDHomeManager_Assistant___handleAssistantSyncDataRequest___block_invoke_2(id *a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = [WeakRetained workQueue];
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = __61__HMDHomeManager_Assistant___handleAssistantSyncDataRequest___block_invoke_3;
    v7[3] = &unk_1E6A18668;
    void v7[4] = v5;
    id v8 = a1[4];
    id v9 = v3;
    id v10 = a1[5];
    dispatch_async(v6, v7);
  }
}

void __61__HMDHomeManager_Assistant___handleAssistantSyncDataRequest___block_invoke_3(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1 + 32) assistantGenerationCounter];
  id v3 = (void *)MEMORY[0x1D9452090](objc_msgSend(*(id *)(a1 + 32), "__setLastSyncedAssistantConfigurationVersion:", v2));
  id v4 = *(id *)(a1 + 32);
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    uint64_t v7 = *(void *)(a1 + 40);
    id v8 = [*(id *)(a1 + 32) _getAssistantHashingData];
    *(_DWORD *)buf = 138544130;
    long long v23 = v6;
    __int16 v24 = 2112;
    uint64_t v25 = v7;
    __int16 v26 = 2048;
    uint64_t v27 = v2;
    __int16 v28 = 2112;
    id v29 = v8;
    _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Siri sync validity %@, assistantConfigurationVersion %tu - assistant identifier %@", buf, 0x2Au);
  }
  uint64_t v9 = *(void *)(a1 + 48);
  long long v20 = @"kSiriSyncDataEntitiesKey";
  uint64_t v21 = v9;
  id v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v21 forKeys:&v20 count:1];
  [*(id *)(a1 + 56) respondWithPayload:v10];
  uint64_t v11 = *(void **)(a1 + 40);
  if (v11)
  {
    uint64_t v12 = [v11 componentsSeparatedByString:@":"];
    id v13 = [v12 firstObject];
    int v14 = v13;
    if (v13) {
      [v13 cStringUsingEncoding:4];
    }
  }
  if ([*(id *)(a1 + 32) siriSyncNotificationTime])
  {
    mach_absolute_time();
    UpTicksToMilliseconds();
    [*(id *)(a1 + 32) siriSyncNotificationTime];
  }
  [*(id *)(a1 + 32) _resetSiriSyncNotification];
  if ([*(id *)(a1 + 32) assistantIdentifierChanged])
  {
    [*(id *)(a1 + 32) setAssistantIdentifierChanged:0];
    id v15 = *(void **)(a1 + 32);
    id v16 = [v15 uuid];
    [v15 updateGenerationCounterWithReason:@"AssistantIdentifierChanged" sourceUUID:v16 shouldNotifyClients:1];
  }
  [*(id *)(a1 + 32) _signpostAssistantSyncDataRequestHandled];
  uint64_t v17 = [*(id *)(a1 + 32) currentAccessorySetupMetricDispatcher];
  [v17 markSetupEndStage:8 error:0];

  uint64_t v18 = +[HMDHelper sharedHelper];
  uint64_t v19 = [v18 hashedRouteIDForIdentifier:@"A77C551E-C3FA-414E-ACD8-A7DF3D64E9D6"];

  CFPreferencesSetAppValue(@"HMDAssistantLastHashingKey", v19, @"com.apple.homed");
}

- (void)writeAssistantCurrentHome:(id)a3
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1E4F1CB10];
  id v6 = [v4 urlString];
  uint64_t v7 = [v5 URLWithString:v6];

  id v8 = (void *)MEMORY[0x1D9452090]();
  uint64_t v9 = self;
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    uint64_t v12 = [v4 name];
    id v13 = [(HMDHomeManager *)v9 currentHomeUUID];
    int v14 = [v13 UUIDString];
    int v15 = 138544130;
    id v16 = v11;
    __int16 v17 = 2112;
    uint64_t v18 = v7;
    __int16 v19 = 2112;
    long long v20 = v12;
    __int16 v21 = 2112;
    long long v22 = v14;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Notifying assistant that current home updated to: %@ (%@/%@)", (uint8_t *)&v15, 0x2Au);
  }
  -[HMDHomeManager _setHomeConfigurationKey:value:applicationIdentifier:](v9, "_setHomeConfigurationKey:value:applicationIdentifier:", *MEMORY[0x1E4F2EC78], [v7 absoluteString], @"com.apple.homed.notbackedup");
  -[HMDHomeManager _setHomeConfigurationKey:value:applicationIdentifier:](v9, "_setHomeConfigurationKey:value:applicationIdentifier:", *MEMORY[0x1E4F2EC80], [v4 name], @"com.apple.homed.notbackedup");
  notify_post("com.apple.homed.current-home.changed");
}

- (void)_resetSiriSyncNotification
{
  id v3 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v3);

  [(HMDHomeManager *)self setSiriSyncNotificationTime:0];
}

- (void)_setAssistantSyncRequest:(id)a3
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = (void *)MEMORY[0x1D9452090]();
  uint64_t v7 = self;
  id v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = HMFGetLogIdentifier();
    int v15 = 138543618;
    id v16 = v9;
    __int16 v17 = 2112;
    id v18 = v4;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Assistant sync data re-generation requested due to reason: %@", (uint8_t *)&v15, 0x16u);
  }
  if (![(HMDHomeManager *)v7 siriSyncNotificationTime])
  {
    mach_absolute_time();
    [(HMDHomeManager *)v7 setSiriSyncNotificationTime:UpTicksToMilliseconds()];
  }
  if (v4 && [v4 isEqual:@"SyncStateCompleted"])
  {
    id v10 = (void *)MEMORY[0x1D9452090]();
    uint64_t v11 = v7;
    uint64_t v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      uint64_t v14 = [(HMDHomeManager *)v11 assistantGenerationCounter];
      int v15 = 138543874;
      id v16 = v13;
      __int16 v17 = 2112;
      id v18 = v4;
      __int16 v19 = 2048;
      uint64_t v20 = v14;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Posting an urgent sync notification after %@: %tu", (uint8_t *)&v15, 0x20u);
    }
    [(HMDHomeManager *)v11 _generateAssistantSyncDataAndIncrementVersion:1 requestSync:1 urgent:1 completion:0];
  }
}

- (void)_assistantSyncDataChanged:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2((dispatch_queue_t)v5);

  [(HMDHomeManager *)self _setAssistantSyncRequest:v4];
  id v6 = [(HMDHomeManager *)self debounceRegenerateAssistantSyncDataTimer];
  LOBYTE(v5) = [v6 isRunning];

  if ((v5 & 1) == 0)
  {
    id v7 = [(HMDHomeManager *)self debounceRegenerateAssistantSyncDataTimer];
    [v7 resume];
  }
}

- (void)_generateAssistantSyncDataAndIncrementVersion:(BOOL)a3 requestSync:(BOOL)a4 urgent:(BOOL)a5 completion:(id)a6
{
  BOOL v8 = a3;
  id v10 = a6;
  uint64_t v11 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v11);

  if (v8) {
    [(HMDHomeManager *)self _incrementAssistantGenerationCounter];
  }
  uint64_t v12 = [(HMDHomeManager *)self currentHomeUUID];
  id v13 = [(HMDHomeManager *)self _homeWithUUID:v12];

  objc_initWeak(&location, self);
  uint64_t v14 = [(HMDHomeManager *)self gatherer];
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = __105__HMDHomeManager_Assistant___generateAssistantSyncDataAndIncrementVersion_requestSync_urgent_completion___block_invoke;
  v17[3] = &unk_1E6A10580;
  objc_copyWeak(&v20, &location);
  id v15 = v13;
  id v18 = v15;
  BOOL v21 = a4;
  BOOL v22 = a5;
  id v16 = v10;
  id v19 = v16;
  [v14 gatherHomeKitObjectsWithCompletion:v17];

  objc_destroyWeak(&v20);
  objc_destroyWeak(&location);
}

void __105__HMDHomeManager_Assistant___generateAssistantSyncDataAndIncrementVersion_requestSync_urgent_completion___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [WeakRetained writeAssistantCurrentHome:*(void *)(a1 + 32)];
  uint64_t v5 = [WeakRetained _setHomekitAssistantNumEntities:a2];
  if (*(unsigned char *)(a1 + 56))
  {
    id v6 = [WeakRetained currentAccessorySetupMetricDispatcher];
    [v6 markSetupBeginStage:8 error:0];

    id v7 = (void *)MEMORY[0x1D9452090]();
    id v8 = WeakRetained;
    uint64_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      id v10 = HMFGetLogIdentifier();
      int v17 = 138543618;
      id v18 = v10;
      __int16 v19 = 2048;
      uint64_t v20 = [v8 assistantGenerationCounter];
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Generated sync data and posted sync data changed notification with siri generation counter: %tu", (uint8_t *)&v17, 0x16u);
    }
    if (*(unsigned char *)(a1 + 57)) {
      uint64_t v11 = "com.apple.assistant.sync_homekit_urgent";
    }
    else {
      uint64_t v11 = "com.apple.assistant.sync_homekit_now";
    }
    notify_post(v11);
    [v8 _signpostAssistantSyncDataNotification];
  }
  else
  {
    uint64_t v12 = (void *)MEMORY[0x1D9452090](v5);
    id v13 = WeakRetained;
    uint64_t v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      id v15 = HMFGetLogIdentifier();
      int v17 = 138543618;
      id v18 = v15;
      __int16 v19 = 2048;
      uint64_t v20 = [v13 assistantGenerationCounter];
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Generated sync data with siri generation counter: %tu", (uint8_t *)&v17, 0x16u);
    }
  }
  uint64_t v16 = *(void *)(a1 + 40);
  if (v16) {
    (*(void (**)(void))(v16 + 16))();
  }
  [WeakRetained setPostSyncDataUpdatedNotification:1];
}

- (void)_incrementAssistantGenerationCounter
{
  id v3 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v3);

  [(HMDHomeManager *)self setAssistantGenerationCounter:[(HMDHomeManager *)self assistantGenerationCounter] + 1];
  unint64_t v4 = [(HMDHomeManager *)self assistantGenerationCounter];
  [(HMDHomeManager *)self _setHomekitAssistantConfigurationVersion:v4];
}

- (void)__setLastSyncedAssistantConfigurationVersion:(unint64_t)a3
{
  id v4 = [NSNumber numberWithUnsignedLong:a3];
  [(HMDHomeManager *)self _setHomeConfigurationKey:@"kLastSyncedAssistantConfigurationVersionKey" value:v4];
}

- (void)_setHomekitAssistantNumEntities:(unint64_t)a3
{
  uint64_t v4 = [NSNumber numberWithUnsignedInteger:a3];
  [(HMDHomeManager *)self _setHomeConfigurationKey:@"kAssistantConfigurationNumberOfEntitiesKey" value:v4];
}

- (void)_setHomekitAssistantConfigurationVersion:(unint64_t)a3
{
  id v4 = [NSNumber numberWithUnsignedLong:a3];
  [(HMDHomeManager *)self _setHomeConfigurationKey:@"kAssistantConfigurationVersionKey" value:v4];
}

- (void)_setAssistantHashingData:(id)a3
{
}

- (void)_saveAssistantHashingData:(id)a3
{
  id v4 = a3;
  [(HMDHomeManager *)self _setHomeConfigurationKey:@"kAssistantTeamIdentifier" value:v4 applicationIdentifier:@"com.apple.homed.notbackedup"];
  [(HMDHomeManager *)self _setAssistantHashingData:v4];
}

- (id)_getAssistantHashingData
{
  id v3 = (id)CFPreferencesCopyAppValue(@"kAssistantTeamIdentifier", @"com.apple.homed.notbackedup");
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;

  if (v5)
  {
    id v6 = v5;
    id v7 = v3;
  }
  else
  {
    id v7 = [(HMDHomeManager *)self __generateAssistantTeamIdentifier];
  }

  return v7;
}

- (id)__generateAssistantTeamIdentifier
{
  id v3 = [MEMORY[0x1E4F29128] UUID];
  id v4 = objc_msgSend(v3, "hm_convertToData");

  [(HMDHomeManager *)self _saveAssistantHashingData:v4];
  [(HMDHomeManager *)self setAssistantIdentifierChanged:1];
  return v4;
}

- (id)multiUserSettingsForMultiUserSettingsMetricsEventDispatcherDataSource
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  [(HMDHomeManager *)self homes];
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v25 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
  if (v25)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v26 = 0;
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v24 = *(void *)v30;
    do
    {
      for (uint64_t i = 0; i != v25; ++i)
      {
        if (*(void *)v30 != v24) {
          objc_enumerationMutation(obj);
        }
        id v10 = [*(id *)(*((void *)&v29 + 1) + 8 * i) multiUserSettings];
        uint64_t v11 = [v10 numSharedUsers];
        v8 += [v11 unsignedIntValue];

        uint64_t v12 = [v10 numUsersWithSettings];
        v7 += [v12 unsignedIntValue];

        id v13 = [v10 numUsersWithIdentifyVoiceOff];
        v6 += [v13 unsignedIntValue];

        uint64_t v14 = [v10 numUsersWithPlayBackInfluencesForYouOff];
        v5 += [v14 unsignedIntValue];

        id v15 = [v10 numUsersCloudShareTrustNotConfigured];
        v28 += [v15 unsignedIntValue];

        uint64_t v16 = [v10 numUsersSharedBackingStoreNotStarted];
        v27 += [v16 unsignedIntValue];

        int v17 = [v10 numUsersSharedBackingStoreRunning];
        v26 += [v17 unsignedIntValue];

        id v18 = [v10 numUsersSharedBackingStoreNotRunningDueToError];
        v2 += [v18 unsignedIntValue];

        __int16 v19 = [v10 numUsersSharedBackingStoreNotRunningDueToStopped];
        v3 += [v19 unsignedIntValue];

        uint64_t v20 = [v10 numUsersSharedBackingStoreSharedZoneWaitingForShareInvitation];
        v4 += [v20 unsignedIntValue];
      }
      uint64_t v25 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
    }
    while (v25);
  }
  else
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v26 = 0;
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v21 = (void *)[objc_alloc(MEMORY[0x1E4F2E948]) initWithNumSharedUsers:v8 numUsersWithSettings:v7 numUsersWithIdentifyVoiceOff:v6 numUsersWithPlayBackInfluencesForYouOff:v5 numUsersCloudShareTrustNotConfigured:v28 numUsersSharedBackingStoreNotStarted:v27 numUsersSharedBackingStoreRunning:v26 numUsersSharedBackingStoreNotRunningDueToError:v2 numUsersSharedBackingStoreNotRunningDueToStopped:v3 numUsersSharedBackingStoreSharedZoneWaitingForShareInvitation:v4];

  return v21;
}

- (void)resetTTSUHH2SettingsMigrationKey
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)MEMORY[0x1D9452090](self, a2);
  uint64_t v4 = self;
  uint64_t v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = HMFGetLogIdentifier();
    int v8 = 138543362;
    uint64_t v9 = v6;
    _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Going to delete the TTSU HH2 settings migration key", (uint8_t *)&v8, 0xCu);
  }
  uint64_t v7 = [(HMDHomeManager *)v4 userDefaults];
  [v7 removeObjectForKey:@"mi.hh2"];
}

- (id)createCloudDatabaseAndPerformInitialSync:(id)a3
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x1D9452090]();
  uint64_t v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    id v39 = v8;
    __int16 v40 = 2112;
    id v41 = v4;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Creating cloud database from container : [%@]", buf, 0x16u);
  }
  id v9 = objc_alloc(MEMORY[0x1E4F19ED8]);
  uint64_t v10 = (void *)[v9 initWithContainerIdentifier:@"com.apple.willow.config" environment:cloudKitContainerEnvironment];
  uint64_t v11 = (void *)[objc_alloc(MEMORY[0x1E4F69E40]) initWithContainerID:v10];
  id v12 = objc_alloc(MEMORY[0x1E4F69E38]);
  id v13 = +[HMDDatabase defaultDatabase];
  uint64_t v14 = [v13 localDatabase];
  id v15 = (void *)[v12 initWithLocalDatabase:v14 configuration:v11];

  uint64_t v16 = (void *)MEMORY[0x1D9452090]();
  int v17 = v6;
  id v18 = HMFGetOSLogHandle();
  __int16 v19 = v18;
  if (v15)
  {
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v39 = v20;
      __int16 v40 = 2112;
      id v41 = v15;
      _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Going to performInitialCloudSync for %@", buf, 0x16u);
    }
    uint64_t v21 = dispatch_group_create();
    dispatch_group_enter(v21);
    BOOL v22 = [v15 performInitialCloudSync];
    v35[0] = MEMORY[0x1E4F143A8];
    v35[1] = 3221225472;
    v35[2] = __72__HMDHomeManager_ResetConfig__createCloudDatabaseAndPerformInitialSync___block_invoke;
    v35[3] = &unk_1E6A17908;
    v35[4] = v17;
    id v23 = v15;
    id v36 = v23;
    uint64_t v24 = v21;
    uint64_t v37 = v24;
    id v25 = (id)[v22 addCompletionBlock:v35];
    dispatch_time_t v26 = dispatch_time(0, 30000000000);
    if (dispatch_group_wait(v24, v26))
    {
      uint64_t v27 = (void *)MEMORY[0x1D9452090]();
      uint64_t v28 = v17;
      long long v29 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        long long v30 = v34 = v4;
        *(_DWORD *)buf = 138543618;
        id v39 = v30;
        __int16 v40 = 2112;
        id v41 = v23;
        _os_log_impl(&dword_1D49D5000, v29, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] : Timed out while waiting to perform initial sync on %@", buf, 0x16u);

        id v4 = v34;
      }
    }
    id v31 = v23;
  }
  else
  {
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      long long v32 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v39 = v32;
      __int16 v40 = 2112;
      id v41 = v4;
      _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] : Failed to create cloud database with containerID %@", buf, 0x16u);
    }
  }

  return v15;
}

void __72__HMDHomeManager_ResetConfig__createCloudDatabaseAndPerformInitialSync___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)MEMORY[0x1D9452090]();
  id v8 = *(id *)(a1 + 32);
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = HMFGetLogIdentifier();
    uint64_t v11 = *(void *)(a1 + 40);
    int v12 = 138543874;
    id v13 = v10;
    __int16 v14 = 2112;
    uint64_t v15 = v11;
    __int16 v16 = 2112;
    id v17 = v6;
    _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Initial cloud sync finished on %@ with error: %@", (uint8_t *)&v12, 0x20u);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

- (id)deleteLocalZone:(id)a3 localDatabase:(id)a4 containerID:(id)a5
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = (void *)MEMORY[0x1D9452090]();
  int v12 = self;
  id v13 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    __int16 v14 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    dispatch_time_t v26 = v14;
    __int16 v27 = 2112;
    id v28 = v8;
    _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Going to open local zone [%@] and delete it", buf, 0x16u);
  }
  id v15 = objc_alloc_init(MEMORY[0x1E4F69EE0]);
  [v15 setCreateIfNeeded:0];
  id v24 = 0;
  __int16 v16 = [v9 openZoneWithZoneID:v8 configuration:v15 error:&v24];
  id v17 = v24;
  if (v16)
  {
    uint64_t v18 = [v9 removeZone:v16];
  }
  else
  {
    __int16 v19 = (void *)MEMORY[0x1D9452090]();
    uint64_t v20 = v12;
    uint64_t v21 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      BOOL v22 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      dispatch_time_t v26 = v22;
      __int16 v27 = 2112;
      id v28 = v8;
      __int16 v29 = 2112;
      id v30 = v17;
      _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] : Failed to open local zone with zoneID %@: %@", buf, 0x20u);
    }
    uint64_t v18 = 0;
  }

  return v18;
}

- (void)deleteAllZonesFromContainer:(id)a3
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    uint64_t v52 = v8;
    __int16 v53 = 2112;
    id v54 = v4;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Asked to delete all the zones from container : [%@]", buf, 0x16u);
  }
  id v9 = [(HMDHomeManager *)v6 createCloudDatabaseAndPerformInitialSync:v4];
  id v10 = (void *)MEMORY[0x1D9452090]();
  uint64_t v11 = v6;
  int v12 = HMFGetOSLogHandle();
  id v13 = v12;
  if (v9)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      __int16 v14 = HMFGetLogIdentifier();
      id v15 = NSNumber;
      __int16 v16 = [v9 privateZoneIDs];
      id v17 = objc_msgSend(v15, "numberWithUnsignedInteger:", objc_msgSend(v16, "count"));
      *(_DWORD *)buf = 138543874;
      uint64_t v52 = v14;
      __int16 v53 = 2112;
      id v54 = v4;
      __int16 v55 = 2112;
      __int16 v56 = v17;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : [%@] There are %@ zones", buf, 0x20u);
    }
    uint64_t v18 = [MEMORY[0x1E4F1CA48] array];
    __int16 v19 = [v9 privateZoneIDs];
    v48[0] = MEMORY[0x1E4F143A8];
    v48[1] = 3221225472;
    v48[2] = __59__HMDHomeManager_ResetConfig__deleteAllZonesFromContainer___block_invoke;
    v48[3] = &unk_1E6A14A30;
    v48[4] = v11;
    id v20 = v9;
    id v49 = v20;
    id v21 = v18;
    id v50 = v21;
    objc_msgSend(v19, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v48);

    BOOL v22 = [v20 localDatabase];
    id v23 = [v22 fetchZonesWithError:0];

    if ([v23 count])
    {
      id v24 = dispatch_group_create();
      dispatch_group_enter(v24);
      v44[0] = MEMORY[0x1E4F143A8];
      v44[1] = 3221225472;
      v44[2] = __59__HMDHomeManager_ResetConfig__deleteAllZonesFromContainer___block_invoke_141;
      v44[3] = &unk_1E6A14A58;
      v44[4] = v11;
      id v45 = v20;
      id v25 = v4;
      id v46 = v25;
      id v26 = v21;
      id v47 = v26;
      objc_msgSend(v23, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v44);
      __int16 v27 = (void *)MEMORY[0x1E4F7A0D8];
      id v28 = [MEMORY[0x1E4F7A0F0] immediateScheduler];
      __int16 v29 = [v27 combineAllFutures:v26 ignoringErrors:1 scheduler:v28];
      v42[0] = MEMORY[0x1E4F143A8];
      v42[1] = 3221225472;
      v42[2] = __59__HMDHomeManager_ResetConfig__deleteAllZonesFromContainer___block_invoke_2;
      v42[3] = &unk_1E6A18B30;
      v42[4] = v11;
      id v30 = v24;
      long long v43 = v30;
      id v31 = (id)[v29 addCompletionBlock:v42];

      long long v32 = (void *)MEMORY[0x1D9452090]();
      id v33 = v11;
      id v34 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v35 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v52 = v35;
        __int16 v53 = 2112;
        id v54 = v25;
        _os_log_impl(&dword_1D49D5000, v34, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Finished deleting zones for container : %@", buf, 0x16u);
      }
      dispatch_group_wait(v30, 0xFFFFFFFFFFFFFFFFLL);
    }
    else
    {
      uint64_t v37 = (void *)MEMORY[0x1D9452090]();
      id v38 = v11;
      id v39 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        __int16 v40 = HMFGetLogIdentifier();
        id v41 = [v20 containerID];
        *(_DWORD *)buf = 138543618;
        uint64_t v52 = v40;
        __int16 v53 = 2112;
        id v54 = v41;
        _os_log_impl(&dword_1D49D5000, v39, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : [%@] No local zones to delete", buf, 0x16u);
      }
    }
  }
  else
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id v36 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v52 = v36;
      __int16 v53 = 2112;
      id v54 = v4;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] : Unable to create cloud database for container : %@", buf, 0x16u);
    }
  }
}

void __59__HMDHomeManager_ResetConfig__deleteAllZonesFromContainer___block_invoke(id *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = a1[4];
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    id v8 = [a1[5] containerID];
    id v9 = [v3 name];
    int v11 = 138543874;
    int v12 = v7;
    __int16 v13 = 2112;
    __int16 v14 = v8;
    __int16 v15 = 2112;
    __int16 v16 = v9;
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : [%@] Going to delete [%@]", (uint8_t *)&v11, 0x20u);
  }
  id v10 = [a1[5] removePrivateZoneWithID:v3];
  [a1[6] addObject:v10];
}

void __59__HMDHomeManager_ResetConfig__deleteAllZonesFromContainer___block_invoke_141(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  id v5 = a2;
  id v6 = [v4 localDatabase];
  id v8 = [v3 deleteLocalZone:v5 localDatabase:v6 containerID:*(void *)(a1 + 48)];

  uint64_t v7 = v8;
  if (v8)
  {
    [*(id *)(a1 + 56) addObject:v8];
    uint64_t v7 = v8;
  }
}

void __59__HMDHomeManager_ResetConfig__deleteAllZonesFromContainer___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)MEMORY[0x1D9452090]();
  id v8 = *(id *)(a1 + 32);
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    id v10 = HMFGetLogIdentifier();
    int v11 = 138543618;
    int v12 = v10;
    __int16 v13 = 2112;
    id v14 = v6;
    _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : >> Deleting cloud & local zones finished with error: %@", (uint8_t *)&v11, 0x16u);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

- (void)deleteZonesFromLegacyAndCameraContainers
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = (void *)MEMORY[0x1D9452090](self, a2);
  id v4 = self;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v10 = v6;
    _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Asked to delete all zones from legacy & camera containers", buf, 0xCu);
  }
  uint64_t v7 = [(id)objc_opt_class() getContainersToCleanUp];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __71__HMDHomeManager_ResetConfig__deleteZonesFromLegacyAndCameraContainers__block_invoke;
  v8[3] = &unk_1E6A14A08;
  void v8[4] = v4;
  objc_msgSend(v7, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v8);
}

uint64_t __71__HMDHomeManager_ResetConfig__deleteZonesFromLegacyAndCameraContainers__block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) deleteAllZonesFromContainer:a2];
}

- (void)_eraseLocalMetadata
{
  uint64_t v2 = [(HMDHomeManager *)self mobileAssetManager];
  [v2 purgeAllInstalledAssets];

  +[HMDHAPMetadata updateLocalMetadataWithBuiltinMetadata];
}

- (void)_eraseLocalHomeConfigurationAndDeleteMetadata:(BOOL)a3 reason:(unint64_t)a4 completionQueue:(id)a5 completion:(id)a6
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v9 = a5;
  id v10 = a6;
  uint64_t v11 = (void *)MEMORY[0x1D9452090]();
  int v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    __int16 v13 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v28 = v13;
    _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Resetting local configuration, users and keys for all homes", buf, 0xCu);
  }
  id v14 = dispatch_group_create();
  dispatch_group_enter(v14);
  objc_initWeak((id *)buf, self);
  uint64_t v15 = [(HMDHomeManager *)self syncManager];
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke;
  v24[3] = &unk_1E6A16CE0;
  objc_copyWeak(&v26, (id *)buf);
  __int16 v16 = v14;
  id v25 = v16;
  [v15 pauseAndWaitForCurrentOperationCompletion:v24];

  uint64_t v17 = [(HMDHomeManager *)self workQueue];
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  v20[2] = __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_132;
  v20[3] = &unk_1E6A149E0;
  objc_copyWeak(v23, (id *)buf);
  v23[1] = (id)a4;
  id v21 = v9;
  id v22 = v10;
  id v18 = v9;
  id v19 = v10;
  dispatch_group_notify(v16, v17, v20);

  objc_destroyWeak(v23);
  objc_destroyWeak(&v26);
  objc_destroyWeak((id *)buf);
}

void __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = +[HMDUserManagementOperationManager sharedManager];
    [v3 cancelAllOperations];

    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id obj = [WeakRetained homes];
    uint64_t v4 = [obj countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v18;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v18 != v6) {
            objc_enumerationMutation(obj);
          }
          id v8 = *(void **)(*((void *)&v17 + 1) + 8 * v7);
          dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
          id v9 = [v8 name];
          id v10 = (void *)MEMORY[0x1E4F65480];
          v14[0] = MEMORY[0x1E4F143A8];
          v14[1] = 3221225472;
          void v14[2] = __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_2;
          v14[3] = &unk_1E6A149B8;
          void v14[4] = WeakRetained;
          id v15 = v9;
          id v16 = *(id *)(a1 + 32);
          id v11 = v9;
          int v12 = [v10 messageWithName:@"kResetConfigRequestKey" messagePayload:0 responseHandler:v14];
          [WeakRetained _removeHome:v8 withMessage:v12 saveToStore:0 notifyUsers:0 shouldRemovePairings:1];

          ++v7;
        }
        while (v5 != v7);
        uint64_t v5 = [obj countByEnumeratingWithState:&v17 objects:v21 count:16];
      }
      while (v5);
    }

    [WeakRetained setHomeManagerZoneFirstFetch:1];
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }
}

void __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_132(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (id *)(a1 + 48);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v4 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained setPrimaryHomeUUID:0];
    [v4 _updateCurrentHomeIfNecessary];
    uint64_t v5 = [MEMORY[0x1E4F5BE48] systemStore];
    int v6 = [v5 removeControllerKeyPairWithError:0];
    uint64_t v7 = (void *)MEMORY[0x1D9452090]();
    id v8 = HMFGetOSLogHandle();
    id v9 = v8;
    if (v6)
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        id v10 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v33 = v10;
        _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Removed controller key", buf, 0xCu);
      }
    }
    else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v33 = v11;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] : Failed removing controller key", buf, 0xCu);
    }
    [v4 _eraseLocalHomeConfigurationWithReason:*(void *)(a1 + 56)];
    int v12 = +[HMDBackingStore resetBackingStore];
    if (v12)
    {
      __int16 v13 = (void *)MEMORY[0x1D9452090]();
      id v14 = v4;
      id v15 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        id v16 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v33 = v16;
        __int16 v34 = 2112;
        __int16 v35 = v12;
        _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] : resetBackingStore completed with error: %@", buf, 0x16u);
      }
    }
    long long v17 = (void *)MEMORY[0x1D9452090]();
    long long v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      long long v19 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v33 = v19;
      _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Completed configuration reset", buf, 0xCu);
    }
    long long v20 = [v4 cloudDataSyncManager];

    if (v20)
    {
      id v21 = [v4 cloudDataSyncManager];
      v28[0] = MEMORY[0x1E4F143A8];
      v28[1] = 3221225472;
      v28[2] = __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_133;
      v28[3] = &unk_1E6A18500;
      objc_copyWeak(&v31, v2);
      id v30 = *(id *)(a1 + 40);
      id v29 = *(id *)(a1 + 32);
      [v21 resetCloudCache:v28];

      objc_destroyWeak(&v31);
    }
    else
    {
      uint64_t v22 = [v4 syncManager];
      [v22 cancelOperations];

      id v23 = [v4 syncManager];
      [v23 resume];

      id v24 = *(void **)(a1 + 40);
      if (v24)
      {
        id v25 = *(NSObject **)(a1 + 32);
        if (v25)
        {
          v26[0] = MEMORY[0x1E4F143A8];
          v26[1] = 3221225472;
          v26[2] = __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_3;
          v26[3] = &unk_1E6A186E0;
          id v27 = v24;
          dispatch_async(v25, v26);
        }
      }
    }
  }
}

void __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_133(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v4 = [WeakRetained syncManager];
    [v4 cancelOperations];

    uint64_t v5 = [v3 syncManager];
    [v5 resume];
  }
  int v6 = *(void **)(a1 + 40);
  if (v6)
  {
    uint64_t v7 = *(NSObject **)(a1 + 32);
    if (v7)
    {
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_2_134;
      block[3] = &unk_1E6A186E0;
      id v9 = v6;
      dispatch_async(v7, block);
    }
  }
}

uint64_t __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_2_134(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)MEMORY[0x1D9452090]();
  id v8 = *(id *)(a1 + 32);
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    id v10 = HMFGetLogIdentifier();
    uint64_t v11 = *(void *)(a1 + 40);
    int v12 = 138543874;
    __int16 v13 = v10;
    __int16 v14 = 2112;
    uint64_t v15 = v11;
    __int16 v16 = 2112;
    id v17 = v5;
    _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Removed home %@ - error %@", (uint8_t *)&v12, 0x20u);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

- (void)_eraseLocalHomeConfigurationAndDeleteMetadata:(BOOL)a3 completionQueue:(id)a4 completion:(id)a5
{
}

- (void)_eraseLocalHomeConfigurationAfterSignOut
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = (void *)MEMORY[0x1D9452090](self, a2);
  uint64_t v4 = self;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v23 = v6;
    _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Erase local data on this device since we signed out of iCloud", buf, 0xCu);
  }
  +[HMDPersistentStore resetConfiguration:2];
  [(HMDHomeManager *)v4 resetTTSUHH2SettingsMigrationKey];
  uint64_t v7 = +[HMDUserManagementOperationManager sharedManager];
  [v7 cancelAllOperations];

  [(HMDHomeManager *)v4 removeAllHomeKitPairingIdentitiesAfterSignOut];
  [(HMDHomeManager *)v4 _eraseLocalHomeConfiguration];
  [(HMDHomeManager *)v4 _eraseLocalMetadata];
  id v8 = +[HMDBackingStore resetBackingStore];
  if (v8)
  {
    id v9 = (void *)MEMORY[0x1D9452090]();
    id v10 = v4;
    uint64_t v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v12 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v23 = v12;
      __int16 v24 = 2112;
      id v25 = v8;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] : resetBackingStore completed with error: %@", buf, 0x16u);
    }
  }
  __int16 v13 = [(HMDHomeManager *)v4 cloudDataSyncManager];

  if (v13)
  {
    objc_initWeak((id *)buf, v4);
    __int16 v14 = [(HMDHomeManager *)v4 cloudDataSyncManager];
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = __71__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAfterSignOut__block_invoke;
    v20[3] = &unk_1E6A18528;
    objc_copyWeak(&v21, (id *)buf);
    [v14 resetCloudCache:v20];

    objc_destroyWeak(&v21);
    objc_destroyWeak((id *)buf);
  }
  else
  {
    uint64_t v15 = (void *)MEMORY[0x1D9452090]();
    __int16 v16 = v4;
    id v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v23 = v18;
      _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Posting notification kCloudServerTokenDataResetNotification to clear server token data on the cloud data sync manager", buf, 0xCu);
    }
    long long v19 = [MEMORY[0x1E4F28EB8] defaultCenter];
    [v19 postNotificationName:@"kCloudServerTokenDataResetNotification" object:v16];
  }
  [(id)objc_opt_class() relaunchHomedDueToResetConfigurationWithDelay:2.0];
}

void __71__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAfterSignOut__block_invoke(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = WeakRetained;
    uint64_t v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = HMFGetLogIdentifier();
      int v10 = 138543362;
      uint64_t v11 = v8;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Posting notification kCloudServerTokenDataResetNotification to clear server token data on the cloud data sync manager", (uint8_t *)&v10, 0xCu);
    }
    id v9 = [MEMORY[0x1E4F28EB8] defaultCenter];
    [v9 postNotificationName:@"kCloudServerTokenDataResetNotification" object:v6];
  }
}

- (void)_eraseLocalHomeConfiguration
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = (void *)MEMORY[0x1D9452090](self, a2);
  uint64_t v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v30 = v5;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Resetting local configuration and accessory keys for all homes", buf, 0xCu);
  }
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v6 = [(HMDHomeManager *)self homes];
  uint64_t v7 = [v6 countByEnumeratingWithState:&v24 objects:v28 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v25;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v25 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        uint64_t v12 = [v11 name];
        __int16 v13 = [(HMDHomeManager *)self uuid];
        id v14 = [(HMDHomeManager *)self removeName:v12 namespace:v13];

        uint64_t v15 = [(HMDHomeManager *)self nameValidator];
        __int16 v16 = [v11 uuid];
        id v17 = (id)[v15 removeNamespace:v16];

        uint64_t v18 = [v11 uuid];
        [(HMDHomeManager *)self _removeConfigurationVersionForHome:v18];
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v24 objects:v28 count:16];
    }
    while (v8);
  }

  [(HMDHomeManager *)self setPrimaryHomeUUID:0];
  [(HMDHomeManager *)self setRecoveryVersion:0];
  [(HMDHomeManager *)self _updateCurrentHomeIfNecessary];
  long long v19 = [(HMDHomeManager *)self backingStore];
  long long v20 = [v19 lookup];
  [v20 resetObjects];

  id v21 = (void *)MEMORY[0x1D9452090]([(HMDHomeManager *)self _eraseLocalHomeConfigurationWithReason:1]);
  uint64_t v22 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    id v23 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v30 = v23;
    _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Completed erasing local home configuration", buf, 0xCu);
  }
}

- (void)_eraseLocalHomeConfigurationWithReason:(unint64_t)a3
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  +[HMDHomeManager _eraseAllAccessoryKeysAndIdentifiers];
  id v51 = self;
  uint64_t v4 = [(HMDHomeManager *)self keyTransferAgent];
  [v4 resetConfig];

  id v5 = [(HMDHomeManager *)v51 messageDispatcher];
  [v5 reset];

  id v6 = [(HMDHomeManager *)v51 identityRegistry];
  [v6 reset];

  uint64_t v7 = [(HMDHomeManager *)v51 accountRegistry];
  [v7 reset];

  id v50 = [MEMORY[0x1E4F5BE48] systemStore];
  id v65 = 0;
  [v50 updateCurrentiCloudIdentifier:0 controllerPairingIdentifier:0 error:&v65];
  id v48 = v65;
  uint64_t v8 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v9 = [(HMDHomeManager *)v51 homes];
  __int16 v53 = objc_msgSend(v8, "arrayWithCapacity:", objc_msgSend(v9, "count"));

  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  id obj = [(HMDHomeManager *)v51 homes];
  uint64_t v10 = [obj countByEnumeratingWithState:&v61 objects:v69 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v62;
    uint64_t v12 = MEMORY[0x1E4F143A8];
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v62 != v11) {
          objc_enumerationMutation(obj);
        }
        id v14 = *(void **)(*((void *)&v61 + 1) + 8 * v13);
        *(void *)buf = 0;
        uint64_t v15 = [MEMORY[0x1E4F65438] futureWithPromise:buf];
        v59[0] = v12;
        v59[1] = 3221225472;
        v59[2] = __70__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationWithReason___block_invoke;
        v59[3] = &unk_1E6A19B30;
        id v60 = *(id *)buf;
        [v14 stopThreadNetworkWithCompletion:1 completion:v59];
        [v53 addObject:v15];
        [v14 resetConfiguration];

        ++v13;
      }
      while (v10 != v13);
      uint64_t v10 = [obj countByEnumeratingWithState:&v61 objects:v69 count:16];
    }
    while (v10);
  }

  [(HMDHomeManager *)v51 setHomes:MEMORY[0x1E4F1CBF0]];
  __int16 v16 = [(HMDHomeManager *)v51 cloudDataSyncStateFilter];
  id v17 = [(HMDHomeManager *)v51 homes];
  objc_msgSend(v16, "updateTotalHomes:", objc_msgSend(v17, "count"));

  uint64_t v18 = [(HMDHomeManager *)v51 accessoryBrowserInternal];
  [v18 resetConfiguration];

  long long v19 = (void *)MEMORY[0x1D9452090]();
  long long v20 = v51;
  id v21 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v22 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    *(void *)&uint8_t buf[4] = v22;
    __int16 v67 = 2048;
    unint64_t v68 = a3;
    _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@_eraseLocalHomeConfigurationWithReason: ==== reason is... %lu", buf, 0x16u);
  }
  +[HMDPersistentStore resetConfiguration:a3];
  id v23 = [(HMDHomeManager *)v20 lastEventStore];
  [v23 resetEventStore];

  long long v24 = [(HMDHomeManager *)v20 cloudZones];
  [v24 removeAllObjects];

  [(HMDHomeManager *)v20 setAppData:0];
  objc_initWeak(&location, v20);
  long long v25 = [(HMDHomeManager *)v20 msgFilterChain];
  long long v26 = [(HMDHomeManager *)v20 workQueue];
  v56[0] = MEMORY[0x1E4F143A8];
  v56[1] = 3221225472;
  v56[2] = __70__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationWithReason___block_invoke_120;
  v56[3] = &unk_1E6A16E40;
  objc_copyWeak(&v57, &location);
  [v25 resetConfiguration:v26 completionHandler:v56];

  long long v27 = [(HMDHomeManager *)v20 pendingResponsesForAccessoryFinder];
  [v27 removeAllObjects];

  id v28 = [(HMDHomeManager *)v20 associatedRemotePeers];
  [v28 removeAllObjects];

  id v29 = [(HMDHomeManager *)v20 unassociatedRemotePeers];
  [v29 removeAllObjects];

  id v30 = [(HMDHomeManager *)v20 pendingRemoteSessions];
  [v30 removeAllObjects];

  uint64_t v31 = [(HMDHomeManager *)v20 pendingResidentSetupSessions];
  [v31 removeAllObjects];

  long long v32 = [(HMDHomeManager *)v20 uuidsOfRemovedHomes];
  [v32 removeAllObjects];

  id v33 = [(HMDHomeManager *)v20 incomingInvitations];
  [v33 removeAllObjects];

  [(HMDHomeManager *)v20 updateHomeKitInUsePreferences];
  __int16 v34 = +[HMDBulletinBoard sharedBulletinBoard];
  [v34 removeAllBulletins];
  [v34 refreshHomeBadgeNumber];
  [(HMDHomeManager *)v20 _eraseLocalMetadata];
  [(HMDHomeManager *)v20 _checkForRemotePeers];
  [(HMDHomeManager *)v20 assistantSyncDataChanged:@"kResetConfigRequestKey"];
  CFPreferencesSetAppValue(@"HMDAssistantLastHashingKey", 0, @"com.apple.homed");
  __int16 v35 = [(HMDHomeManager *)v20 uuid];
  [(HMDHomeManager *)v20 updateGenerationCounterWithReason:@"Erase local home configuration" sourceUUID:v35 shouldNotifyClients:1];

  uint64_t v36 = [MEMORY[0x1E4F28EB8] defaultCenter];
  [v36 postNotificationName:@"HMDHomeManagerLocalHomeDataRemovedNotification" object:0];

  id v54 = 0;
  id v55 = 0;
  uint64_t v37 = (void *)MEMORY[0x1D9452090]();
  id v38 = v20;
  HMFGetOSLogHandle();
  id v39 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v40 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    *(void *)&uint8_t buf[4] = v40;
    _os_log_impl(&dword_1D49D5000, v39, OS_LOG_TYPE_DEFAULT, "%{public}@Waiting for thread network shutdown to complete", buf, 0xCu);
  }
  id v41 = [MEMORY[0x1E4F65438] allSettled:v53];
  char v42 = [v41 waitForResult:&v55 orError:&v54 withTimeout:4.0];

  long long v43 = (void *)MEMORY[0x1D9452090]();
  __int16 v44 = v38;
  if (v42)
  {
    HMFGetOSLogHandle();
    id v45 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      id v46 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v46;
      _os_log_impl(&dword_1D49D5000, v45, OS_LOG_TYPE_DEFAULT, "%{public}@Thread network shutdown completed - continuing with reset config", buf, 0xCu);
    }
  }
  else
  {
    HMFGetOSLogHandle();
    id v45 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      id v47 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v47;
      _os_log_impl(&dword_1D49D5000, v45, OS_LOG_TYPE_ERROR, "%{public}@Gave up waiting for thread network shutdown", buf, 0xCu);
    }
  }

  objc_destroyWeak(&v57);
  objc_destroyWeak(&location);
}

uint64_t __70__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationWithReason___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) fulfillWithValue:0];
}

void __70__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationWithReason___block_invoke_120(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    uint64_t v2 = [WeakRetained cloudDataSyncManager];
    [v2 updateServerTokenStatusOnCloudFilter];

    id WeakRetained = v3;
  }
}

- (void)_eraseConfiguration:(BOOL)a3 completionHandler:(id)a4
{
  BOOL v4 = a3;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v6 = a4;
  uint64_t v7 = [(HMDHomeManager *)self cloudDataSyncManager];
  if (!v7 || isWatch())
  {

LABEL_5:
    uint64_t v9 = (void *)MEMORY[0x1D9452090]();
    uint64_t v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v24 = v11;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Resetting local configuration for all homes and all devices", buf, 0xCu);
    }
    uint64_t v12 = [(HMDHomeManager *)self workQueue];
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = __69__HMDHomeManager_ResetConfig___eraseConfiguration_completionHandler___block_invoke_113;
    v17[3] = &unk_1E6A14990;
    id v18 = v6;
    [(HMDHomeManager *)self _eraseLocalHomeConfigurationAndDeleteMetadata:v4 completionQueue:v12 completion:v17];

    goto LABEL_8;
  }
  int v8 = disableCloudDataSync;

  if (v8) {
    goto LABEL_5;
  }
  uint64_t v13 = (void *)MEMORY[0x1D9452090]();
  id v14 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    uint64_t v15 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    long long v24 = v15;
    _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Resetting local and cloud configuration for all homes and all devices for this iCloud account", buf, 0xCu);
  }
  objc_initWeak((id *)buf, self);
  __int16 v16 = [(HMDHomeManager *)self cloudDataSyncManager];
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = __69__HMDHomeManager_ResetConfig___eraseConfiguration_completionHandler___block_invoke;
  v19[3] = &unk_1E6A18328;
  objc_copyWeak(&v21, (id *)buf);
  id v20 = v6;
  BOOL v22 = v4;
  [v16 resetCloudDataAndDeleteMetadataForCurrentAccount:v4 completionHandler:v19];

  objc_destroyWeak(&v21);
  objc_destroyWeak((id *)buf);
LABEL_8:
}

void __69__HMDHomeManager_ResetConfig___eraseConfiguration_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v5 = v3;
    id v6 = (void *)MEMORY[0x1D9452090]();
    uint64_t v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v8 = HMFGetLogIdentifier();
      uint64_t v9 = objc_msgSend(v5, "hmd_conciseCKError");
      uint64_t v10 = [v9 shortDescription];
      *(_DWORD *)buf = 138543618;
      id v18 = v8;
      __int16 v19 = 2112;
      id v20 = v10;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Cloud reset completed with error: %@", buf, 0x16u);
    }
    if (v5 && [v5 code] != 75)
    {
      if ([v5 code] != 78)
      {
        uint64_t v13 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:67 userInfo:0];

        id v5 = (id)v13;
      }
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
    else
    {
      BOOL v11 = *(unsigned char *)(a1 + 48) != 0;
      uint64_t v12 = [WeakRetained workQueue];
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 3221225472;
      void v14[2] = __69__HMDHomeManager_ResetConfig___eraseConfiguration_completionHandler___block_invoke_111;
      v14[3] = &unk_1E6A14968;
      objc_copyWeak(&v16, (id *)(a1 + 40));
      id v15 = *(id *)(a1 + 32);
      [WeakRetained _eraseLocalHomeConfigurationAndDeleteMetadata:v11 completionQueue:v12 completion:v14];

      objc_destroyWeak(&v16);
    }
  }
}

uint64_t __69__HMDHomeManager_ResetConfig___eraseConfiguration_completionHandler___block_invoke_113(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __69__HMDHomeManager_ResetConfig___eraseConfiguration_completionHandler___block_invoke_111(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    [WeakRetained updateAccountAvailabilityChanged:*(void *)(a1 + 32)];
    id WeakRetained = v3;
  }
}

- (void)_handleResetConfiguration:(id)a3
{
  id v4 = a3;
  +[HMDResetConfigPostCleanup writePostCleanupRecordWithReason:1 steps:-1];
  +[HMDHH2FrameworkSwitch setHH2EnablementPreferenceKey:0];
  uint64_t v5 = [v4 BOOLForKey:@"kResetConfigMetadataKey"];
  id v6 = (void *)[objc_alloc(MEMORY[0x1E4F653F0]) initWithName:@"Reset Config" parent:0 options:1];
  [v6 begin];
  id v7 = v6;
  id v11 = v7;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __57__HMDHomeManager_ResetConfig___handleResetConfiguration___block_invoke;
  v9[3] = &unk_1E6A196E0;
  void v9[4] = self;
  id v8 = v4;
  id v10 = v8;
  [(HMDHomeManager *)self _eraseConfiguration:v5 completionHandler:v9];

  __HMFActivityScopeLeave();
}

void __57__HMDHomeManager_ResetConfig___handleResetConfiguration___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  [*(id *)(a1 + 32) waitForHH2SentinelZoneToBeRemoved];
  id v4 = [*(id *)(a1 + 32) logEventSubmitter];
  uint64_t v5 = +[HMDConfigurationResetLogEvent configurationReset];
  [v4 submitLogEvent:v5 error:v3];

  id v6 = (void *)MEMORY[0x1D9452090]();
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    int v9 = 138543618;
    id v10 = v8;
    __int16 v11 = 2112;
    id v12 = v3;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Sending cloud reset status to client with error: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 40) respondWithPayload:0 error:v3];
  [(id)objc_opt_class() relaunchHomedDueToResetConfigurationWithDelay:2.0];
}

+ (id)getContainersToCleanUp
{
  v6[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)MEMORY[0x1E4F1CAD0];
  v6[0] = @"com.apple.homekit";
  v6[1] = @"com.apple.homekit.camera.clips";
  v6[2] = @"com.apple.willow.config";
  id v3 = [MEMORY[0x1E4F1C978] arrayWithObjects:v6 count:3];
  id v4 = [v2 setWithArray:v3];

  return v4;
}

+ (void)relaunchHomedDueToResetConfigurationWithDelay:(double)a3
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (void *)MEMORY[0x1D9452090](a1, a2);
  id v6 = a1;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v12 = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Scheduling homed relaunch due to reset configuration. (Either user logged out or user issued reset-config SPI", buf, 0xCu);
  }
  dispatch_time_t v9 = dispatch_time(0, (uint64_t)a3);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __77__HMDHomeManager_ResetConfig__relaunchHomedDueToResetConfigurationWithDelay___block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  void block[4] = v6;
  dispatch_after(v9, MEMORY[0x1E4F14428], block);
}

void __77__HMDHomeManager_ResetConfig__relaunchHomedDueToResetConfigurationWithDelay___block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = +[HMDLaunchHandler sharedHandler];
  id v3 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:@"1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938"];
  [v2 registerRelaunchClientWithUUID:v3];

  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = HMFGetLogIdentifier();
    int v8 = 138543362;
    dispatch_time_t v9 = v7;
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Going to relaunch homed due to resetConfiguration", (uint8_t *)&v8, 0xCu);
  }
  _Exit(0);
}

+ (void)_eraseAllAccessoryKeysAndIdentifiers
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = [MEMORY[0x1E4F5BE48] systemStore];
  id v26 = 0;
  int v4 = [v3 removeAllAccessoryKeys:&v26];
  id v5 = v26;
  id v6 = (void *)MEMORY[0x1D9452090]();
  id v7 = a1;
  int v8 = HMFGetOSLogHandle();
  dispatch_time_t v9 = v8;
  if (v4)
  {
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO)) {
      goto LABEL_7;
    }
    uint64_t v10 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v28 = v10;
    __int16 v11 = "%{public}@[Reset Config] : Removed all accessory keys from controller";
    id v12 = v9;
    os_log_type_t v13 = OS_LOG_TYPE_INFO;
    uint32_t v14 = 12;
  }
  else
  {
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    uint64_t v10 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    id v28 = v10;
    __int16 v29 = 2112;
    id v30 = v5;
    __int16 v11 = "%{public}@[Reset Config] : Could not remove all accessory keys from controller (%@)";
    id v12 = v9;
    os_log_type_t v13 = OS_LOG_TYPE_ERROR;
    uint32_t v14 = 22;
  }
  _os_log_impl(&dword_1D49D5000, v12, v13, v11, buf, v14);

LABEL_7:
  id v25 = v5;
  int v15 = [v3 deleteAllPeripheralIdentifiers:&v25];
  id v16 = v25;

  id v17 = (void *)MEMORY[0x1D9452090]();
  id v18 = v7;
  __int16 v19 = HMFGetOSLogHandle();
  BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
  if (v15)
  {
    if (v20)
    {
      uint64_t v21 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v28 = v21;
      BOOL v22 = "%{public}@[Reset Config] : Removed all Bluetooth peripheral identifiers.";
      id v23 = v19;
      uint32_t v24 = 12;
LABEL_12:
      _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_DEFAULT, v22, buf, v24);
    }
  }
  else if (v20)
  {
    uint64_t v21 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    id v28 = v21;
    __int16 v29 = 2112;
    id v30 = v16;
    BOOL v22 = "%{public}@[Reset Config] : Could not remove all Bluetooth peripheral identifiers (%@).";
    id v23 = v19;
    uint32_t v24 = 22;
    goto LABEL_12;
  }
}

- (void)_sendFragmentedMessage:(id)a3 messageIndex:(unint64_t)a4 messageIdentity:(id)a5 userID:(id)a6 destination:(id)a7 completionHandler:(id)a8
{
  id v14 = a3;
  id v15 = a5;
  id v16 = a6;
  id v27 = a7;
  id v17 = a8;
  objc_initWeak(&location, self);
  id v18 = [(HMDHomeManager *)self messageDispatcher];
  __int16 v19 = [v14 objectAtIndexedSubscript:a4];
  BOOL v20 = [(HMDHomeManager *)self uuid];
  uint64_t v21 = [(HMDHomeManager *)self workQueue];
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 3221225472;
  v28[2] = __124__HMDHomeManager_FragmentMessage___sendFragmentedMessage_messageIndex_messageIdentity_userID_destination_completionHandler___block_invoke;
  v28[3] = &unk_1E6A14B08;
  objc_copyWeak(v34, &location);
  v34[1] = (id)a4;
  id v22 = v14;
  id v29 = v22;
  id v23 = v15;
  id v30 = v23;
  id v24 = v17;
  id v33 = v24;
  id v25 = v16;
  id v31 = v25;
  id v26 = v27;
  id v32 = v26;
  [v18 sendSecureMessage:v19 target:v20 userID:v25 destination:v26 responseQueue:v21 responseHandler:v28];

  objc_destroyWeak(v34);
  objc_destroyWeak(&location);
}

void __124__HMDHomeManager_FragmentMessage___sendFragmentedMessage_messageIndex_messageIdentity_userID_destination_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (WeakRetained)
  {
    uint64_t v8 = *(void *)(a1 + 80);
    dispatch_time_t v9 = (void *)MEMORY[0x1D9452090]();
    uint64_t v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      __int16 v11 = HMFGetLogIdentifier();
      uint64_t v12 = [*(id *)(a1 + 32) count];
      uint64_t v13 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138544130;
      __int16 v34 = v11;
      __int16 v35 = 2048;
      uint64_t v36 = (void *)(v8 + 1);
      __int16 v37 = 2048;
      uint64_t v38 = v12;
      __int16 v39 = 2112;
      uint64_t v40 = v13;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Sent packet %tu/%tu with identity %@", buf, 0x2Au);
    }
    if (v5)
    {
      id v30 = v6;
      id v14 = (void *)MEMORY[0x1D9452090]();
      id v15 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        id v16 = HMFGetLogIdentifier();
        id v17 = [v5 localizedDescription];
        uint64_t v18 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 138543874;
        __int16 v34 = v16;
        __int16 v35 = 2112;
        uint64_t v36 = v17;
        __int16 v37 = 2112;
        uint64_t v38 = v18;
        _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@Received %@ from user %@, cancel message", buf, 0x20u);
      }
      uint64_t v19 = *(void *)(a1 + 40);
      v31[0] = @"kHomeDataFragmentIdentityKey";
      v31[1] = @"kHomeDataFragmentNumberKey";
      v32[0] = v19;
      v32[1] = &unk_1F2DC9B68;
      BOOL v20 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v32 forKeys:v31 count:2];
      uint64_t v21 = [MEMORY[0x1E4F65480] messageWithName:@"kHomeDataFragmentedSyncRequestKey" messagePayload:v20];
      id v22 = [WeakRetained messageDispatcher];
      id v23 = [WeakRetained uuid];
      uint64_t v24 = *(void *)(a1 + 48);
      uint64_t v25 = *(void *)(a1 + 56);
      id v26 = [WeakRetained workQueue];
      [v22 sendSecureMessage:v21 target:v23 userID:v24 destination:v25 responseQueue:v26 responseHandler:&__block_literal_global_159684];

      uint64_t v27 = *(void *)(a1 + 64);
      id v6 = v30;
      if (v27) {
        (*(void (**)(uint64_t, id, id))(v27 + 16))(v27, v5, v30);
      }
    }
    else
    {
      uint64_t v28 = *(void *)(a1 + 80);
      if (v28 == [*(id *)(a1 + 32) count] - 1
        || objc_msgSend(v6, "hmf_BOOLForKey:", @"kDataSyncResponseCancelKey"))
      {
        uint64_t v29 = *(void *)(a1 + 64);
        if (v29) {
          (*(void (**)(uint64_t, void, id))(v29 + 16))(v29, 0, v6);
        }
      }
      else
      {
        [WeakRetained _sendFragmentedMessage:*(void *)(a1 + 32) messageIndex:*(void *)(a1 + 80) + 1 messageIdentity:*(void *)(a1 + 40) userID:*(void *)(a1 + 48) destination:*(void *)(a1 + 56) completionHandler:*(void *)(a1 + 64)];
      }
    }
  }
}

- (void)_fragmentationStream:(id)a3 didReceiveData:(id)a4 transactionIdentifier:(unsigned __int16)a5 error:(id)a6
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  id v10 = a4;
  id v11 = a6;
  if (v10)
  {
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    uint64_t v12 = [(HMDHomeManager *)self pendingFragmentationStream];
    uint64_t v13 = [v12 allKeys];

    id v14 = (id)[v13 countByEnumeratingWithState:&v41 objects:v53 count:16];
    if (v14)
    {
      id v39 = v11;
      id v40 = v10;
      id v15 = 0;
      uint64_t v16 = *(void *)v42;
LABEL_4:
      id v17 = 0;
      uint64_t v18 = v15;
      while (1)
      {
        if (*(void *)v42 != v16) {
          objc_enumerationMutation(v13);
        }
        uint64_t v19 = *(void **)(*((void *)&v41 + 1) + 8 * (void)v17);
        BOOL v20 = [(HMDHomeManager *)self pendingFragmentationStream];
        id v15 = [v20 objectForKeyedSubscript:v19];

        id v21 = [v15 fragmentationStream];

        if (v21 == v9) {
          break;
        }
        id v17 = (char *)v17 + 1;
        uint64_t v18 = v15;
        if (v14 == v17)
        {
          id v14 = (id)[v13 countByEnumeratingWithState:&v41 objects:v53 count:16];
          if (v14) {
            goto LABEL_4;
          }
          id v11 = v39;
          id v10 = v40;
          goto LABEL_24;
        }
      }
      id v14 = v19;

      if (v14) {
        BOOL v22 = v15 == 0;
      }
      else {
        BOOL v22 = 1;
      }
      if (v22)
      {
        id v11 = v39;
        id v10 = v40;
        goto LABEL_25;
      }
      id v23 = (void *)MEMORY[0x1E4F65480];
      uint64_t v24 = [v15 lastMessage];
      uint64_t v25 = [v23 messageWithMessage:v24 messagePayload:0];
      uint64_t v13 = (void *)[v25 mutableCopy];

      id v26 = [v15 lastMessage];
      uint64_t v27 = [v26 destination];
      [v13 setDestination:v27];

      uint64_t v28 = [v15 lastMessage];
      uint64_t v29 = [v28 remoteSenderContext];
      [v13 setRemoteSenderContext:v29];

      [v15 close];
      id v30 = [(HMDHomeManager *)self pendingFragmentationStream];
      [v30 removeObjectForKey:v14];

      id v31 = [v15 lastMessage];
      id v32 = [v31 stringForKey:@"kDataFragmentMessageNameKey"];

      id v33 = (void *)MEMORY[0x1D9452090]();
      __int16 v34 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        uint64_t v36 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v50 = v36;
        __int16 v51 = 2112;
        uint64_t v52 = v32;
        _os_log_impl(&dword_1D49D5000, v34, OS_LOG_TYPE_INFO, "%{public}@Full message received with name %@, calling the handle method.", buf, 0x16u);
      }
      id v10 = v40;
      if ([v32 isEqualToString:@"kMetadataDataSyncRequestKey"])
      {
        id v47 = @"kHAPMetadataDataKey";
        id v48 = v40;
        __int16 v37 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v48 forKeys:&v47 count:1];
        [v13 setMessagePayload:v37];

        [(HMDHomeManager *)self _handleMetadataSync:v13];
      }
      else
      {
        id v45 = @"kHomeDataKey";
        id v46 = v40;
        uint64_t v38 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v46 forKeys:&v45 count:1];
        [v13 setMessagePayload:v38];

        [(HMDHomeManager *)self _handleHomeDataSync:v13];
      }
      id v11 = v39;
    }
    else
    {
      id v15 = 0;
    }
LABEL_24:

LABEL_25:
  }
}

- (void)_fragmentationStream:(id)a3 didCloseWithError:(id)a4
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v6 = [(HMDHomeManager *)self pendingFragmentationStream];
  id v7 = [v6 allKeys];

  id v8 = (id)[v7 countByEnumeratingWithState:&v17 objects:v21 count:16];
  id v9 = 0;
  if (v8)
  {
    uint64_t v10 = *(void *)v18;
LABEL_3:
    id v11 = 0;
    uint64_t v12 = v9;
    while (1)
    {
      if (*(void *)v18 != v10) {
        objc_enumerationMutation(v7);
      }
      uint64_t v13 = *(void **)(*((void *)&v17 + 1) + 8 * (void)v11);
      id v14 = [(HMDHomeManager *)self pendingFragmentationStream];
      id v9 = [v14 objectForKeyedSubscript:v13];

      id v15 = [v9 fragmentationStream];

      if (v15 == v5) {
        break;
      }
      id v11 = (char *)v11 + 1;
      uint64_t v12 = v9;
      if (v8 == v11)
      {
        id v8 = (id)[v7 countByEnumeratingWithState:&v17 objects:v21 count:16];
        if (v8) {
          goto LABEL_3;
        }
        goto LABEL_15;
      }
    }
    id v8 = v13;

    if (v8) {
      BOOL v16 = v9 == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (!v16)
    {
      [v9 close];
      id v7 = [(HMDHomeManager *)self pendingFragmentationStream];
      [v7 removeObjectForKey:v8];
      goto LABEL_15;
    }
  }
  else
  {
LABEL_15:
  }
}

- (void)handleDataFragmentedSync:(id)a3
{
  v101[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 stringForKey:@"kHomeDataFragmentIdentityKey"];
  id v6 = [v4 stringForKey:@"kHomeUUID"];
  id v7 = [v4 numberForKey:@"kHomeDataFragmentNumberKey"];
  id v8 = [v4 numberForKey:@"kHomeDataFragmentTotalCountKey"];
  if (v5 && v7)
  {
    id v84 = 0;
    BOOL v9 = [(HMDHomeManager *)self _shouldDecodeMessage:v4 error:&v84];
    id v10 = v84;
    if (!v9)
    {
      id v26 = (void *)MEMORY[0x1D9452090]();
      uint64_t v27 = self;
      uint64_t v28 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v78 = v5;
        uint64_t v29 = v6;
        id v30 = v10;
        id v32 = v31 = v8;
        [v4 remoteUserPairingIdentity];
        v34 = id v33 = v7;
        *(_DWORD *)buf = 138543618;
        v87 = v32;
        __int16 v88 = 2112;
        v89 = v34;
        _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_ERROR, "%{public}@Rejecting home data sync - Sync not from trusted account %@", buf, 0x16u);

        id v7 = v33;
        id v8 = v31;
        id v10 = v30;
        id v6 = v29;
        id v5 = v78;
      }

      __int16 v35 = [v4 responseHandler];

      if (!v35) {
        goto LABEL_28;
      }
      uint64_t v12 = [v4 responseHandler];
      v98 = @"kDataSyncResponseCancelKey";
      uint64_t v99 = MEMORY[0x1E4F1CC38];
      uint64_t v36 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v99 forKeys:&v98 count:1];
      ((void (**)(void, id, void *))v12)[2](v12, v10, v36);
      goto LABEL_26;
    }
    if (![v7 unsignedIntegerValue])
    {
      __int16 v37 = [(HMDHomeManager *)self pendingFragmentationStream];
      uint64_t v12 = [v37 objectForKeyedSubscript:v5];

      if (v12)
      {
        [v12 close];
        uint64_t v38 = [(HMDHomeManager *)self pendingFragmentationStream];
        [v38 removeObjectForKey:v5];

        [v4 respondWithPayload:0];
      }
      goto LABEL_27;
    }
    if (v6 && v8)
    {
      id v11 = [(HMDHomeManager *)self pendingFragmentationStream];
      uint64_t v12 = [v11 objectForKeyedSubscript:v5];

      if ([v7 unsignedIntegerValue] == 1)
      {
        if (v12)
        {
          uint64_t v13 = [(HMDHomeManager *)self pendingFragmentationStream];
          [v13 objectForKeyedSubscript:v5];
          id v14 = v5;
          id v15 = v6;
          id v16 = v10;
          v18 = long long v17 = v8;
          [v18 close];

          id v8 = v17;
          id v10 = v16;
          id v6 = v15;
          id v5 = v14;

          long long v19 = [(HMDHomeManager *)self pendingFragmentationStream];
          [v19 removeObjectForKey:v14];
        }
        uint64_t v20 = +[HMDFragmentationStreamTuple tupleWithFragmentationStreamForObject:v6 delegate:self];

        id v21 = [(HMDHomeManager *)self pendingFragmentationStream];
        [v21 setObject:v20 forKeyedSubscript:v5];

        uint64_t v12 = (void (**)(void, void, void))v20;
        goto LABEL_31;
      }
      if (v12)
      {
LABEL_31:
        int v75 = v8;
        v76 = v7;
        id v46 = objc_alloc(MEMORY[0x1E4F5BD50]);
        id v47 = [v4 dataForKey:@"kHomeDataFragmentKey"];
        uint64_t v48 = [v46 initWithFragmentedPacketData:v47];

        id v49 = (void *)MEMORY[0x1D9452090]();
        id v50 = HMFGetOSLogHandle();
        __int16 v51 = v50;
        if (v48)
        {
          v77 = (void *)v48;
          id v73 = v10;
          double v74 = v6;
          if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
          {
            uint64_t v52 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543874;
            v87 = v52;
            __int16 v88 = 2112;
            v89 = v5;
            __int16 v90 = 2112;
            double v91 = v77;
            _os_log_impl(&dword_1D49D5000, v51, OS_LOG_TYPE_INFO, "%{public}@Processing fragmentation packet with identity %@: %@", buf, 0x20u);
          }
          v79 = v5;

          [v12 setLastMessage:v4];
          double v72 = v12;
          __int16 v53 = [v12 fragmentationStream];
          [v53 receivedFragmentedPacket:v77];

          long long v82 = 0u;
          long long v83 = 0u;
          long long v80 = 0u;
          long long v81 = 0u;
          uint64_t v54 = [(HMDHomeManager *)self pendingFragmentationStream];
          id v55 = [v54 allKeys];

          uint64_t v56 = [v55 countByEnumeratingWithState:&v80 objects:v85 count:16];
          if (v56)
          {
            uint64_t v57 = v56;
            uint64_t v58 = *(void *)v81;
            do
            {
              uint64_t v59 = 0;
              do
              {
                if (*(void *)v81 != v58) {
                  objc_enumerationMutation(v55);
                }
                uint64_t v60 = *(void *)(*((void *)&v80 + 1) + 8 * v59);
                long long v61 = [(HMDHomeManager *)self pendingFragmentationStream];
                long long v62 = [v61 objectForKeyedSubscript:v60];
                int v63 = [v62 isExpired];

                if (v63)
                {
                  long long v64 = [(HMDHomeManager *)self pendingFragmentationStream];
                  id v65 = [v64 objectForKeyedSubscript:v60];
                  [v65 close];

                  int v66 = [(HMDHomeManager *)self pendingFragmentationStream];
                  [v66 removeObjectForKey:v60];
                }
                ++v59;
              }
              while (v57 != v59);
              uint64_t v57 = [v55 countByEnumeratingWithState:&v80 objects:v85 count:16];
            }
            while (v57);
          }

          id v7 = v76;
          uint64_t v67 = [v76 unsignedIntegerValue];
          id v8 = v75;
          if (v67 != [v75 unsignedIntegerValue]) {
            [v4 respondWithPayload:0];
          }
          uint64_t v36 = v77;
          id v5 = v79;
          id v10 = v73;
          id v6 = v74;
          uint64_t v12 = v72;
        }
        else
        {
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
          {
            unint64_t v68 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543362;
            v87 = v68;
            _os_log_impl(&dword_1D49D5000, v51, OS_LOG_TYPE_ERROR, "%{public}@Received invalid fragmented payload", buf, 0xCu);
          }
          uint64_t v36 = [v4 responseHandler];

          if (v36)
          {
            v69 = [v4 responseHandler];
            v92 = @"kDataSyncResponseCancelKey";
            uint64_t v93 = MEMORY[0x1E4F1CC38];
            uint64_t v70 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v93 forKeys:&v92 count:1];
            ((void (**)(void, void, void *))v69)[2](v69, 0, v70);

            uint64_t v36 = 0;
          }
          id v8 = v75;
          id v7 = v76;
        }
        goto LABEL_26;
      }
      v71 = [v4 responseHandler];

      if (!v71) {
        goto LABEL_28;
      }
      uint64_t v12 = [v4 responseHandler];
      v94 = @"kDataSyncResponseCancelKey";
      uint64_t v95 = MEMORY[0x1E4F1CC38];
      long long v43 = (void *)MEMORY[0x1E4F1C9E8];
      long long v44 = &v95;
      id v45 = &v94;
    }
    else
    {
      id v39 = (void *)MEMORY[0x1D9452090]();
      id v40 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        long long v41 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        v87 = v41;
        _os_log_impl(&dword_1D49D5000, v40, OS_LOG_TYPE_ERROR, "%{public}@Received fragmented message without an objectUUID or total count", buf, 0xCu);
      }
      long long v42 = [v4 responseHandler];

      if (!v42) {
        goto LABEL_28;
      }
      uint64_t v12 = [v4 responseHandler];
      v96 = @"kDataSyncResponseCancelKey";
      uint64_t v97 = MEMORY[0x1E4F1CC38];
      long long v43 = (void *)MEMORY[0x1E4F1C9E8];
      long long v44 = &v97;
      id v45 = &v96;
    }
    uint64_t v36 = [v43 dictionaryWithObjects:v44 forKeys:v45 count:1];
    ((void (**)(void, void, void *))v12)[2](v12, 0, v36);
LABEL_26:

    goto LABEL_27;
  }
  uint64_t v22 = (void *)MEMORY[0x1D9452090]();
  id v23 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    uint64_t v24 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    v87 = v24;
    _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_ERROR, "%{public}@Received fragmented message with bad header", buf, 0xCu);
  }
  uint64_t v25 = [v4 responseHandler];

  if (v25)
  {
    id v10 = [v4 responseHandler];
    v100 = @"kDataSyncResponseCancelKey";
    v101[0] = MEMORY[0x1E4F1CC38];
    uint64_t v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v101 forKeys:&v100 count:1];
    (*((void (**)(id, void, void))v10 + 2))(v10, 0, v12);
LABEL_27:

LABEL_28:
  }
}

- (void)sendFragmentedMessageForData:(id)a3 objectUUID:(id)a4 withMessageName:(id)a5 toUser:(id)a6 destination:(id)a7 completionHandler:(id)a8
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  id v14 = a3;
  id v44 = a4;
  id v43 = a5;
  id v15 = a6;
  id v16 = a7;
  long long v17 = (void (**)(id, void *, void))a8;
  long long v18 = [MEMORY[0x1E4F29128] UUID];
  id v45 = [v18 UUIDString];

  long long v19 = objc_msgSend(MEMORY[0x1E4F5BD58], "fragmentationPacketsForData:maxLength:transactionIdentifier:", v14, maximumDataSyncFragmentSize, -[HMDHomeManager _nextTransactionIdentifier](self, "_nextTransactionIdentifier"));
  if (v19)
  {
    uint64_t v36 = self;
    uint64_t v38 = v17;
    id v39 = v16;
    id v40 = v15;
    id v41 = v14;
    uint64_t v20 = [MEMORY[0x1E4F1CA48] array];
    long long v46 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    __int16 v37 = v19;
    id v21 = v19;
    uint64_t v22 = [v21 countByEnumeratingWithState:&v46 objects:v52 count:16];
    if (v22)
    {
      uint64_t v23 = v22;
      uint64_t v42 = *(void *)v47;
      uint64_t v24 = 1;
      do
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          id v26 = v20;
          if (*(void *)v47 != v42) {
            objc_enumerationMutation(v21);
          }
          uint64_t v27 = *(void **)(*((void *)&v46 + 1) + 8 * i);
          v50[0] = @"kHomeUUID";
          v50[1] = @"kHomeDataFragmentIdentityKey";
          v51[0] = v44;
          v51[1] = v45;
          v50[2] = @"kHomeDataFragmentKey";
          uint64_t v28 = [v27 serialize];
          v51[2] = v28;
          v50[3] = @"kHomeDataFragmentNumberKey";
          uint64_t v29 = [NSNumber numberWithUnsignedInteger:v24 + i];
          v51[3] = v29;
          void v50[4] = @"kHomeDataFragmentTotalCountKey";
          id v30 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v21, "count"));
          v50[5] = @"kDataFragmentMessageNameKey";
          v51[4] = v30;
          v51[5] = v43;
          id v31 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v51 forKeys:v50 count:6];

          id v32 = [MEMORY[0x1E4F654B0] messageWithName:@"kHomeDataFragmentedSyncRequestKey" messagePayload:v31];
          uint64_t v20 = v26;
          [v26 addObject:v32];
        }
        v24 += i;
        uint64_t v23 = [v21 countByEnumeratingWithState:&v46 objects:v52 count:16];
      }
      while (v23);
    }

    id v16 = v39;
    id v15 = v40;
    long long v17 = v38;
    [(HMDHomeManager *)v36 _sendFragmentedMessage:v20 messageIndex:0 messageIdentity:v45 userID:v40 destination:v39 completionHandler:v38];
    id v14 = v41;
    long long v19 = v37;
    goto LABEL_14;
  }
  id v33 = (void *)MEMORY[0x1D9452090]();
  __int16 v34 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    __int16 v35 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    uint64_t v54 = v35;
    _os_log_impl(&dword_1D49D5000, v34, OS_LOG_TYPE_ERROR, "%{public}@Failed to fragment data sync, aborting", buf, 0xCu);
  }
  if (v17)
  {
    uint64_t v20 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    v17[2](v17, v20, 0);
LABEL_14:
  }
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_cloudReachabilityMonitor, 0);
  objc_storeStrong((id *)&self->_reachabilityMonitor, 0);
  objc_storeStrong((id *)&self->_configuringStateController, 0);
  objc_storeStrong((id *)&self->_currentHomeConfigurations, 0);
  objc_storeStrong((id *)&self->_chipXPCListener, 0);
  objc_storeStrong((id *)&self->_homeUUIDsByWalletKeyAssertionXPCConnection, 0);
  objc_storeStrong((id *)&self->_mediaGroupParticipantDataLocalStorage, 0);
  objc_storeStrong((id *)&self->_mobileAssetManager, 0);
  objc_storeStrong((id *)&self->_lastEventStoreController, 0);
  objc_storeStrong((id *)&self->_lastEventStore, 0);
  objc_storeStrong((id *)&self->_accessoryBrowserInternal, 0);
  objc_storeStrong((id *)&self->_biomeEventManager, 0);
  objc_storeStrong((id *)&self->_debounceRegenerateAssistantSyncDataTimer, 0);
  objc_storeStrong((id *)&self->_matterSoftwareUpdateProviderDelegate, 0);
  objc_storeStrong((id *)&self->_accessoryFirmwareUpdateManager, 0);
  objc_storeStrong((id *)&self->_legacyAccessoryPairingController, 0);
  objc_storeStrong((id *)&self->_cloudAccount, 0);
  objc_storeStrong((id *)&self->_syncManager, 0);
  objc_storeStrong((id *)&self->_siriEndpointOnboardingManager, 0);
  objc_storeStrong((id *)&self->_hh2AutoMigrationEligibilityChecker, 0);
  objc_storeStrong((id *)&self->_hh2AutoMigrationMonitor, 0);
  objc_storeStrong((id *)&self->_hh2FrameworkSwitch, 0);
  objc_storeStrong((id *)&self->_accessorySetupManager, 0);
  objc_storeStrong((id *)&self->_keyTransferAgent, 0);
  objc_storeStrong((id *)&self->_currentAccessorySetupMetricDispatcher, 0);
  objc_storeStrong((id *)&self->_userDefaults, 0);
  objc_storeStrong((id *)&self->_residentMesh, 0);
  objc_storeStrong((id *)&self->_appData, 0);
  objc_storeStrong((id *)&self->_sharedHomesPushDelayTimer, 0);
  objc_storeStrong((id *)&self->_watchPushDelayTimer, 0);
  objc_storeStrong((id *)&self->_pendingFragmentationStream, 0);
  objc_storeStrong((id *)&self->_remoteAccessHealthMonitorTimer, 0);
  objc_storeStrong((id *)&self->_clientConnectionQueue, 0);
  objc_storeStrong((id *)&self->_clientConnection, 0);
  objc_storeStrong((id *)&self->_incomingInvitations, 0);
  objc_storeStrong((id *)&self->_accountRegistry, 0);
  objc_storeStrong((id *)&self->_fmfHandler, 0);
  objc_storeStrong((id *)&self->_locationHandler, 0);
  objc_storeStrong((id *)&self->_cloudDataSyncStateFilter, 0);
  objc_storeStrong((id *)&self->_cloudOperationRetryTimer, 0);
  objc_storeStrong((id *)&self->_identityRegistry, 0);
  objc_storeStrong((id *)&self->_dialogCancelationContexts, 0);
  objc_storeStrong((id *)&self->_msgFilterChain, 0);
  objc_storeStrong((id *)&self->_pendingResidentSetupSessions, 0);
  objc_storeStrong((id *)&self->_pendingRemoteSessions, 0);
  objc_storeStrong((id *)&self->_pendingDataSyncAcks, 0);
  objc_storeStrong((id *)&self->_dataTag, 0);
  objc_storeStrong((id *)&self->_backingStore, 0);
  objc_storeStrong((id *)&self->_watchManager, 0);
  objc_storeStrong((id *)&self->_setupActivity, 0);
  objc_storeStrong((id *)&self->_idsFirewallManager, 0);
  objc_storeStrong((id *)&self->_cloudDataSyncManager, 0);
  objc_storeStrong((id *)&self->_idsInvitationManager, 0);
  objc_storeStrong((id *)&self->_notificationCenter, 0);
  objc_storeStrong((id *)&self->_powerManager, 0);
  objc_storeStrong((id *)&self->_pendingResponsesForAccessoryFinder, 0);
  objc_storeStrong((id *)&self->_accessoryFinderTimer, 0);
  objc_storeStrong((id *)&self->_nameValidator, 0);
  objc_storeStrong((id *)&self->_pairedSync, 0);
  objc_storeStrong((id *)&self->_watchSyncRetryContextByRetryTimer, 0);
  objc_storeStrong((id *)&self->_watchSyncRetryContextBySyncIdentifier, 0);
  objc_storeStrong((id *)&self->_watchSyncStateMap, 0);
  objc_storeStrong((id *)&self->_associatedWatchPeers, 0);
  objc_storeStrong((id *)&self->_fullSyncedWatchPeers, 0);
  objc_storeStrong((id *)&self->_associatedRemotePeers, 0);
  objc_storeStrong((id *)&self->_unassociatedRemotePeers, 0);
  objc_storeStrong((id *)&self->_messageDispatcher, 0);
  objc_storeStrong((id *)&self->_workQueue, 0);
  objc_storeStrong((id *)&self->_lastCurrentHomeUUID, 0);
  objc_storeStrong((id *)&self->_primaryHomeUUID, 0);
  objc_storeStrong((id *)&self->_uuidsOfRemovedHomes, 0);
  objc_storeStrong((id *)&self->_cloudZones, 0);
  objc_storeStrong((id *)&self->_uuid, 0);
  objc_storeStrong((id *)&self->_homeManagerObjectChangeHandler, 0);
  objc_storeStrong(&self->_wifiManagerFactory, 0);
  objc_storeStrong((id *)&self->_defaultDatabase, 0);
  objc_storeStrong((id *)&self->_hapKeyStore, 0);
  objc_storeStrong((id *)&self->_pendingSharedUserAcceptLogEventBuilders, 0);
  objc_storeStrong((id *)&self->_widgetTimelineRefresher, 0);
  objc_storeStrong((id *)&self->_lastRemovedCurrentAccessoryUUID, 0);
  objc_storeStrong((id *)&self->_multiUserSettingsMetricEventDispatcher, 0);
  objc_storeStrong((id *)&self->_siriEndPointSettingsSyncManager, 0);
  objc_storeStrong((id *)&self->_eventRouterAssertionController, 0);
  objc_storeStrong((id *)&self->_eventRouterXPCServer, 0);
  objc_storeStrong((id *)&self->_loggingMemoryEventForwarder, 0);
  objc_storeStrong((id *)&self->_memoryEventRouter, 0);
  objc_storeStrong((id *)&self->_registrationForwardingEventRouter, 0);
  objc_storeStrong((id *)&self->_bonjourBrowserHelperLastCompletionDate, 0);
  objc_storeStrong((id *)&self->_connectionsManager, 0);
  objc_storeStrong((id *)&self->_microLocationManager, 0);
  objc_storeStrong((id *)&self->_microLocationLogEventObserver, 0);
  objc_storeStrong((id *)&self->_biomeLogEventObserver, 0);
  objc_storeStrong((id *)&self->_duetSubscriber, 0);
  objc_storeStrong((id *)&self->_bonjourBrowser, 0);
  objc_storeStrong((id *)&self->_cameraClipsQuotaMessenger, 0);
  objc_storeStrong((id *)&self->_memoryTracker, 0);
  objc_storeStrong((id *)&self->_accessorySetupCoordinator, 0);
  objc_storeStrong((id *)&self->_cloudDataSource, 0);
  objc_storeStrong((id *)&self->_appleMediaAccessoryDiagnosticInfoController, 0);
  objc_storeStrong((id *)&self->_multiUserStatusController, 0);
  objc_storeStrong((id *)&self->_userCloudShareManager, 0);
  objc_storeStrong((id *)&self->_unprocessedOperationModelIdentifiers, 0);
  objc_storeStrong((id *)&self->_remoteAccountManager, 0);
  objc_storeStrong((id *)&self->_darwinNotificationProvider, 0);
  objc_storeStrong((id *)&self->_demoAccessories, 0);
  objc_storeStrong((id *)&self->_mergeIDsOfUsersOfRemovedSharedHomes, 0);
  objc_storeStrong((id *)&self->_accessorySetupMetricDispatchers, 0);
  objc_storeStrong((id *)&self->_deviceSetupSessions, 0);
  objc_storeStrong((id *)&self->_userPushCacheMap, 0);
  objc_storeStrong((id *)&self->_companionManager, 0);
  objc_storeStrong((id *)&self->_pendingHomesBeingRemoved, 0);
  objc_storeStrong((id *)&self->_memoryMonitorLogEventTimer, 0);
  objc_storeStrong((id *)&self->_periodicMobileCatalogUpdateTimer, 0);
  objc_storeStrong((id *)&self->_debounceHomesUpdateTimer, 0);
  objc_storeStrong((id *)&self->_appleAccountManager, 0);
  objc_storeStrong((id *)&self->_logEventSubmitter, 0);
  objc_storeStrong((id *)&self->_metricsManager, 0);
  objc_storeStrong((id *)&self->_cameraLoadBalancer, 0);
  objc_storeStrong((id *)&self->_lookup, 0);
  objc_storeStrong((id *)&self->_capabilitiesController, 0);
  objc_storeStrong((id *)&self->_idsServerBag, 0);
  objc_storeStrong((id *)&self->_mtsXPCServer, 0);
  objc_storeStrong((id *)&self->_chipDataSource, 0);
  objc_storeStrong((id *)&self->_compositeSettingsControllerManager, 0);
  objc_storeStrong((id *)&self->_gatherer, 0);
  objc_storeStrong((id *)&self->_widgetConfigurationReader, 0);
  objc_storeStrong((id *)&self->_softwareUpdateManager, 0);
  objc_storeStrong((id *)&self->_overrideCurrentHomeUUIDToNil, 0);
  objc_storeStrong((id *)&self->_currentHomeUUIDOverride, 0);
  objc_storeStrong((id *)&self->_currentHomeUUID, 0);
  objc_storeStrong((id *)&self->_logger, 0);
  objc_storeStrong((id *)&self->_homes, 0);
}

- (void)setCloudReachabilityMonitor:(id)a3
{
}

- (HMFNetMonitor)cloudReachabilityMonitor
{
  return self->_cloudReachabilityMonitor;
}

- (void)setReachabilityMonitor:(id)a3
{
}

- (HMFNetMonitor)reachabilityMonitor
{
  return self->_reachabilityMonitor;
}

- (void)setAssistantIdentifierChanged:(BOOL)a3
{
  self->_assistantIdentifierChanged = a3;
}

- (BOOL)assistantIdentifierChanged
{
  return self->_assistantIdentifierChanged;
}

- (void)setConfiguringStateController:(id)a3
{
}

- (HMDDeviceSetupConfiguringController)configuringStateController
{
  return self->_configuringStateController;
}

- (void)setCurrentHomeConfigurations:(id)a3
{
}

- (NSMutableDictionary)currentHomeConfigurations
{
  return self->_currentHomeConfigurations;
}

- (HMDCHIPXPCListener)chipXPCListener
{
  return self->_chipXPCListener;
}

- (NSMapTable)homeUUIDsByWalletKeyAssertionXPCConnection
{
  return (NSMapTable *)objc_getProperty(self, a2, 1144, 1);
}

- (void)setMediaGroupParticipantDataLocalStorage:(id)a3
{
}

- (HMDMediaGroupParticipantLocalDataStorage)mediaGroupParticipantDataLocalStorage
{
  return (HMDMediaGroupParticipantLocalDataStorage *)objc_getProperty(self, a2, 1136, 1);
}

- (void)setMobileAssetManager:(id)a3
{
}

- (HMDMobileAssetManager)mobileAssetManager
{
  return self->_mobileAssetManager;
}

- (void)setLastEventStoreController:(id)a3
{
}

- (HMDLastEventStoreController)lastEventStoreController
{
  return self->_lastEventStoreController;
}

- (void)setLastEventStore:(id)a3
{
}

- (HMELastEventStore)lastEventStore
{
  return self->_lastEventStore;
}

- (void)setAccessoryBrowserInternal:(id)a3
{
}

- (HMDAccessoryBrowser)accessoryBrowserInternal
{
  return self->_accessoryBrowserInternal;
}

- (void)setBiomeEventManager:(id)a3
{
}

- (HMDBiomeEventManager)biomeEventManager
{
  return (HMDBiomeEventManager *)objc_getProperty(self, a2, 1096, 1);
}

- (HMFTimer)debounceRegenerateAssistantSyncDataTimer
{
  return self->_debounceRegenerateAssistantSyncDataTimer;
}

- (HMDMatterSoftwareUpdateProviderDelegate)matterSoftwareUpdateProviderDelegate
{
  return self->_matterSoftwareUpdateProviderDelegate;
}

- (void)setSiriSyncNotificationTime:(unint64_t)a3
{
  self->_siriSyncNotificationTime = a3;
}

- (unint64_t)siriSyncNotificationTime
{
  return self->_siriSyncNotificationTime;
}

- (HMDAppleAccessoryPairingController)legacyAccessoryPairingController
{
  return self->_legacyAccessoryPairingController;
}

- (HMDCloudAccount)cloudAccount
{
  return self->_cloudAccount;
}

- (HMDSyncOperationManager)syncManager
{
  return self->_syncManager;
}

- (void)setHh2MigrationInProgress:(BOOL)a3
{
  self->_hh2MigrationInProgress = a3;
}

- (HMDSiriEndpointOnboardingManager)siriEndpointOnboardingManager
{
  return (HMDSiriEndpointOnboardingManager *)objc_getProperty(self, a2, 1032, 1);
}

- (void)setHh2AutoMigrationEligibilityChecker:(id)a3
{
}

- (HMDHH2AutoMigrationEligibilityChecker)hh2AutoMigrationEligibilityChecker
{
  return self->_hh2AutoMigrationEligibilityChecker;
}

- (void)setHh2AutoMigrationMonitor:(id)a3
{
}

- (HMDHH2AutoMigrationMonitor)hh2AutoMigrationMonitor
{
  return self->_hh2AutoMigrationMonitor;
}

- (void)setHh2FrameworkSwitch:(id)a3
{
}

- (HMDAccessorySetupManager)accessorySetupManager
{
  return self->_accessorySetupManager;
}

- (void)setCurrentAccessorySetupMetricDispatcher:(id)a3
{
}

- (HMDCurrentAccessorySetupMetricDispatcher)currentAccessorySetupMetricDispatcher
{
  return self->_currentAccessorySetupMetricDispatcher;
}

- (void)setResidentMesh:(id)a3
{
}

- (HMDResidentMesh)residentMesh
{
  return self->_residentMesh;
}

- (void)setAppData:(id)a3
{
}

- (void)setNeedToCleanUpKeys:(BOOL)a3
{
  self->_needToCleanUpKeys = a3;
}

- (BOOL)needToCleanUpKeys
{
  return self->_needToCleanUpKeys;
}

- (void)setCloudkitAccountStatusDetermined:(BOOL)a3
{
  self->_cloudkitAccountStatusDetermined = a3;
}

- (BOOL)cloudkitAccountStatusDetermined
{
  return self->_cloudkitAccountStatusDetermined;
}

- (HMFTimer)sharedHomesPushDelayTimer
{
  return self->_sharedHomesPushDelayTimer;
}

- (HMFTimer)watchPushDelayTimer
{
  return self->_watchPushDelayTimer;
}

- (void)setHomeDataLoadedFromArchive:(BOOL)a3
{
  self->_homeDataLoadedFromArchive = a3;
}

- (BOOL)homeDataLoadedFromArchive
{
  return self->_homeDataLoadedFromArchive;
}

- (void)setPendingFragmentationStream:(id)a3
{
}

- (NSMutableDictionary)pendingFragmentationStream
{
  return self->_pendingFragmentationStream;
}

- (unsigned)nextRequestTransactionIdentifier
{
  return self->_nextRequestTransactionIdentifier;
}

- (void)setRemoteAccessHealthMonitorTimer:(id)a3
{
}

- (HMFTimer)remoteAccessHealthMonitorTimer
{
  return self->_remoteAccessHealthMonitorTimer;
}

- (void)setAccountStatusIsAuthenticated:(BOOL)a3
{
  self->_accountStatusIsAuthenticated = a3;
}

- (BOOL)accountStatusIsAuthenticated
{
  return self->_accountStatusIsAuthenticated;
}

- (void)setClientConnectionQueue:(id)a3
{
}

- (OS_dispatch_queue)clientConnectionQueue
{
  return self->_clientConnectionQueue;
}

- (void)setClientConnection:(id)a3
{
}

- (HMDClientConnection)clientConnection
{
  return self->_clientConnection;
}

- (void)setCompanionReachable:(BOOL)a3
{
  self->_companionReachable = a3;
}

- (BOOL)companionReachable
{
  return self->_companionReachable;
}

- (void)setIgnoreFirstTimeReachabilityChanged:(BOOL)a3
{
  self->_ignoreFirstTimeReachabilityChanged = a3;
}

- (BOOL)ignoreFirstTimeReachabilityChanged
{
  return self->_ignoreFirstTimeReachabilityChanged;
}

- (void)setIncomingInvitations:(id)a3
{
}

- (HMDAccountRegistry)accountRegistry
{
  return self->_accountRegistry;
}

- (void)setFmfHandler:(id)a3
{
}

- (HMDFMFHandler)fmfHandler
{
  return self->_fmfHandler;
}

- (void)setLocationHandler:(id)a3
{
}

- (HMDLocation)locationHandler
{
  return self->_locationHandler;
}

- (void)setUploadMetadataToCloud:(BOOL)a3
{
  self->_uploadMetadataToCloud = a3;
}

- (BOOL)uploadMetadataToCloud
{
  return self->_uploadMetadataToCloud;
}

- (void)setCloudDataSyncStateFilter:(id)a3
{
}

- (void)setCloudOperationRetryTimer:(id)a3
{
}

- (OS_dispatch_source)cloudOperationRetryTimer
{
  return self->_cloudOperationRetryTimer;
}

- (void)setLastAnswerForShouldCloudSyncData:(BOOL)a3
{
  self->_lastAnswerForShouldCloudSyncData = a3;
}

- (BOOL)lastAnswerForShouldCloudSyncData
{
  return self->_lastAnswerForShouldCloudSyncData;
}

- (void)setForceFetchHomeManagerZone:(BOOL)a3
{
  self->_forceFetchHomeManagerZone = a3;
}

- (BOOL)forceFetchHomeManagerZone
{
  return self->_forceFetchHomeManagerZone;
}

- (void)setUploadHomeDataToCloud:(BOOL)a3
{
  self->_uploadHomeDataToCloud = a3;
}

- (BOOL)uploadHomeDataToCloud
{
  return self->_uploadHomeDataToCloud;
}

- (void)setUploadToCloudIsPending:(BOOL)a3
{
  self->_uploadToCloudIsPending = a3;
}

- (BOOL)uploadToCloudIsPending
{
  return self->_uploadToCloudIsPending;
}

- (void)setCloudOperationRetryCount:(unint64_t)a3
{
  self->_cloudOperationRetryCount = a3;
}

- (unint64_t)cloudOperationRetryCount
{
  return self->_cloudOperationRetryCount;
}

- (void)setBackOffOperationInProgress:(BOOL)a3
{
  self->_backOffOperationInProgress = a3;
}

- (BOOL)backOffOperationInProgress
{
  return self->_backOffOperationInProgress;
}

- (void)setAccountStatusFailedDueToNetworkFailure:(BOOL)a3
{
  self->_accountStatusFailedDueToNetworkFailure = a3;
}

- (BOOL)accountStatusFailedDueToNetworkFailure
{
  return self->_accountStatusFailedDueToNetworkFailure;
}

- (void)setAccountActive:(BOOL)a3
{
  self->_accountActive = a3;
}

- (BOOL)accountActive
{
  return self->_accountActive;
}

- (void)setIdentityRegistry:(id)a3
{
}

- (HMDIdentityRegistry)identityRegistry
{
  return self->_identityRegistry;
}

- (void)setDialogCancelationContexts:(id)a3
{
}

- (NSMutableSet)dialogCancelationContexts
{
  return self->_dialogCancelationContexts;
}

- (void)setMsgFilterChain:(id)a3
{
}

- (HMDMessageFilterChain)msgFilterChain
{
  return self->_msgFilterChain;
}

- (void)setPendingResidentSetupSessions:(id)a3
{
}

- (NSMutableSet)pendingResidentSetupSessions
{
  return self->_pendingResidentSetupSessions;
}

- (void)setPendingRemoteSessions:(id)a3
{
}

- (NSMutableDictionary)pendingRemoteSessions
{
  return self->_pendingRemoteSessions;
}

- (void)setPendingDataSyncAcks:(id)a3
{
}

- (NSMutableDictionary)pendingDataSyncAcks
{
  return self->_pendingDataSyncAcks;
}

- (void)setRecoveryVersion:(int64_t)a3
{
  self->_recoveryVersion = a3;
}

- (int64_t)recoveryVersion
{
  return self->_recoveryVersion;
}

- (void)setDataTag:(id)a3
{
}

- (NSUUID)dataTag
{
  return self->_dataTag;
}

- (void)setBackingStore:(id)a3
{
}

- (HMDBackingStore)backingStore
{
  return self->_backingStore;
}

- (HMDWatchManager)watchManager
{
  return self->_watchManager;
}

- (void)setHomepodSetupRetryCount:(unint64_t)a3
{
  self->_homepodSetupRetryCount = a3;
}

- (unint64_t)homepodSetupRetryCount
{
  return self->_homepodSetupRetryCount;
}

- (void)setSetupActivity:(id)a3
{
}

- (HMFActivity)setupActivity
{
  return self->_setupActivity;
}

- (void)setIdsFirewallManager:(id)a3
{
}

- (HMDIDSFirewallManager)idsFirewallManager
{
  return self->_idsFirewallManager;
}

- (void)setCloudDataSyncManager:(id)a3
{
}

- (HMDCloudManager)cloudDataSyncManager
{
  return self->_cloudDataSyncManager;
}

- (void)setIdsInvitationManager:(id)a3
{
}

- (HMDHH1IDSInvitationManager)idsInvitationManager
{
  return self->_idsInvitationManager;
}

- (void)setNotificationCenter:(id)a3
{
}

- (NSNotificationCenter)notificationCenter
{
  return self->_notificationCenter;
}

- (void)setPowerManager:(id)a3
{
}

- (HMDPowerManager)powerManager
{
  return self->_powerManager;
}

- (void)setPendingResponsesForAccessoryFinder:(id)a3
{
}

- (NSMutableArray)pendingResponsesForAccessoryFinder
{
  return self->_pendingResponsesForAccessoryFinder;
}

- (void)setAccessoryFinderTimer:(id)a3
{
}

- (OS_dispatch_source)accessoryFinderTimer
{
  return self->_accessoryFinderTimer;
}

- (void)setNameValidator:(id)a3
{
}

- (HMDNameValidator)nameValidator
{
  return self->_nameValidator;
}

- (void)setAssistantGenerationCounter:(unint64_t)a3
{
  self->_assistantGenerationCounter = a3;
}

- (unint64_t)assistantGenerationCounter
{
  return self->_assistantGenerationCounter;
}

- (void)setGenerationCounterToken:(int)a3
{
  self->_generationCounterToken = a3;
}

- (int)generationCounterToken
{
  return self->_generationCounterToken;
}

- (HMDPairedSync)pairedSync
{
  return self->_pairedSync;
}

- (NSMapTable)watchSyncRetryContextByRetryTimer
{
  return (NSMapTable *)objc_getProperty(self, a2, 672, 1);
}

- (NSMutableDictionary)watchSyncRetryContextBySyncIdentifier
{
  return (NSMutableDictionary *)objc_getProperty(self, a2, 664, 1);
}

- (NSMutableDictionary)watchSyncStateMap
{
  return self->_watchSyncStateMap;
}

- (NSMutableDictionary)associatedWatchPeers
{
  return self->_associatedWatchPeers;
}

- (void)setFullSyncedWatchPeers:(id)a3
{
}

- (NSMutableSet)fullSyncedWatchPeers
{
  return self->_fullSyncedWatchPeers;
}

- (void)setAssociatedRemotePeers:(id)a3
{
}

- (NSMutableDictionary)associatedRemotePeers
{
  return self->_associatedRemotePeers;
}

- (void)setUnassociatedRemotePeers:(id)a3
{
}

- (NSMutableSet)unassociatedRemotePeers
{
  return self->_unassociatedRemotePeers;
}

- (void)setMessageDispatcher:(id)a3
{
}

- (HMDMessageDispatcher)messageDispatcher
{
  return self->_messageDispatcher;
}

- (void)setWorkQueue:(id)a3
{
}

- (void)setLastCurrentHomeUUID:(id)a3
{
}

- (NSUUID)lastCurrentHomeUUID
{
  return self->_lastCurrentHomeUUID;
}

- (void)setPrimaryHomeUUID:(id)a3
{
}

- (void)setUuidsOfRemovedHomes:(id)a3
{
}

- (NSMutableArray)uuidsOfRemovedHomes
{
  return self->_uuidsOfRemovedHomes;
}

- (void)setCloudZones:(id)a3
{
}

- (NSMutableArray)cloudZones
{
  return self->_cloudZones;
}

- (void)setHomeManagerZoneFirstFetch:(BOOL)a3
{
  self->_homeManagerZoneFirstFetch = a3;
}

- (BOOL)isHomeManagerZoneFirstFetch
{
  return self->_homeManagerZoneFirstFetch;
}

- (HMDHomeManagerObjectChangeHandler)homeManagerObjectChangeHandler
{
  return self->_homeManagerObjectChangeHandler;
}

- (id)wifiManagerFactory
{
  return objc_getProperty(self, a2, 552, 1);
}

- (void)setInitialPCSStatusFetchCompleted:(BOOL)a3
{
  self->_initialPCSStatusFetchCompleted = a3;
}

- (BOOL)initialPCSStatusFetchCompleted
{
  return self->_initialPCSStatusFetchCompleted;
}

- (void)setDefaultDatabase:(id)a3
{
}

- (HMDDatabase)defaultDatabase
{
  return self->_defaultDatabase;
}

- (void)setHapKeyStore:(id)a3
{
}

- (HAPKeyStore)hapKeyStore
{
  return self->_hapKeyStore;
}

- (void)setPendingSharedUserAcceptLogEventBuilders:(id)a3
{
}

- (NSMutableDictionary)pendingSharedUserAcceptLogEventBuilders
{
  return self->_pendingSharedUserAcceptLogEventBuilders;
}

- (void)setDidCreateAddACWGKeysOperation:(BOOL)a3
{
  self->_didCreateAddACWGKeysOperation = a3;
}

- (BOOL)didCreateAddACWGKeysOperation
{
  return self->_didCreateAddACWGKeysOperation;
}

- (HMDWidgetTimelineRefresher)widgetTimelineRefresher
{
  return (HMDWidgetTimelineRefresher *)objc_getProperty(self, a2, 520, 1);
}

- (void)setLastRemovedCurrentAccessoryUUID:(id)a3
{
}

- (void)setMissingHomeDataRecord:(BOOL)a3
{
  self->_missingHomeDataRecord = a3;
}

- (BOOL)missingHomeDataRecord
{
  return self->_missingHomeDataRecord;
}

- (HMDMultiUserSettingsMetricsEventDispatcher)multiUserSettingsMetricEventDispatcher
{
  return (HMDMultiUserSettingsMetricsEventDispatcher *)objc_getProperty(self, a2, 504, 1);
}

- (void)setSiriEndPointSettingsSyncManager:(id)a3
{
}

- (HMDSiriEndpointSettingsSyncManager)siriEndPointSettingsSyncManager
{
  return (HMDSiriEndpointSettingsSyncManager *)objc_getProperty(self, a2, 496, 1);
}

- (void)setEventRouterAssertionController:(id)a3
{
}

- (HMDRemoteEventRouterAssertionController)eventRouterAssertionController
{
  return self->_eventRouterAssertionController;
}

- (void)setEventRouterXPCServer:(id)a3
{
}

- (HMDXPCEventRouterServer)eventRouterXPCServer
{
  return self->_eventRouterXPCServer;
}

- (void)setLoggingMemoryEventForwarder:(id)a3
{
}

- (HMDLoggingEventForwarder)loggingMemoryEventForwarder
{
  return self->_loggingMemoryEventForwarder;
}

- (void)setMemoryEventRouter:(id)a3
{
}

- (HMEMemoryEventBus)memoryEventRouter
{
  return self->_memoryEventRouter;
}

- (void)setRegistrationForwardingEventRouter:(id)a3
{
}

- (HMEDelegatingEventRouter)registrationForwardingEventRouter
{
  return self->_registrationForwardingEventRouter;
}

- (void)setBonjourBrowserHelperLastCompletionDate:(id)a3
{
}

- (NSDate)bonjourBrowserHelperLastCompletionDate
{
  return self->_bonjourBrowserHelperLastCompletionDate;
}

- (HMDHomeManagerXPCClientConnectionsManager)connectionsManager
{
  return (HMDHomeManagerXPCClientConnectionsManager *)objc_getProperty(self, a2, 440, 1);
}

- (void)setMicroLocationManager:(id)a3
{
}

- (HMDMicroLocationManager)microLocationManager
{
  return (HMDMicroLocationManager *)objc_getProperty(self, a2, 432, 1);
}

- (void)setMicroLocationLogEventObserver:(id)a3
{
}

- (HMDMicroLocationLogEventObserver)microLocationLogEventObserver
{
  return (HMDMicroLocationLogEventObserver *)objc_getProperty(self, a2, 424, 1);
}

- (void)setBiomeLogEventObserver:(id)a3
{
}

- (HMDBiomeLogEventObserver)biomeLogEventObserver
{
  return (HMDBiomeLogEventObserver *)objc_getProperty(self, a2, 416, 1);
}

- (void)setDuetSubscriber:(id)a3
{
}

- (HMDDuetPredictionSubscriber)duetSubscriber
{
  return (HMDDuetPredictionSubscriber *)objc_getProperty(self, a2, 408, 1);
}

- (void)setBonjourBrowser:(id)a3
{
}

- (HMDBonjourBrowserHelper)bonjourBrowser
{
  return self->_bonjourBrowser;
}

- (HMDCameraClipsQuotaMessenger)cameraClipsQuotaMessenger
{
  return (HMDCameraClipsQuotaMessenger *)objc_getProperty(self, a2, 392, 1);
}

- (HMDMemoryUtilizationTracker)memoryTracker
{
  return self->_memoryTracker;
}

- (HMDAccessorySetupCoordinator)accessorySetupCoordinator
{
  return (HMDAccessorySetupCoordinator *)objc_getProperty(self, a2, 376, 1);
}

- (HMDCloudManagerDataSource)cloudDataSource
{
  return (HMDCloudManagerDataSource *)objc_getProperty(self, a2, 368, 1);
}

- (HMDAppleMediaAccessoryDiagnosticInfoController)appleMediaAccessoryDiagnosticInfoController
{
  return self->_appleMediaAccessoryDiagnosticInfoController;
}

- (HMDUserCloudShareManager)userCloudShareManager
{
  return self->_userCloudShareManager;
}

- (void)setUnprocessedOperationModelIdentifiers:(id)a3
{
}

- (NSMutableSet)unprocessedOperationModelIdentifiers
{
  return self->_unprocessedOperationModelIdentifiers;
}

- (HMDRemoteAccountManager)remoteAccountManager
{
  return self->_remoteAccountManager;
}

- (HMDarwinNotificationProvider)darwinNotificationProvider
{
  return self->_darwinNotificationProvider;
}

- (void)setSpeakersAreConfiguredInOwnedHomes:(BOOL)a3
{
  self->_speakersAreConfiguredInOwnedHomes = a3;
}

- (BOOL)speakersAreConfiguredInOwnedHomes
{
  return self->_speakersAreConfiguredInOwnedHomes;
}

- (void)setSpeakersAreConfigured:(BOOL)a3
{
  self->_speakersAreConfigured = a3;
}

- (BOOL)speakersAreConfigured
{
  return self->_speakersAreConfigured;
}

- (void)setDemoAccessories:(id)a3
{
}

- (NSDictionary)demoAccessories
{
  return self->_demoAccessories;
}

- (NSMutableSet)mergeIDsOfUsersOfRemovedSharedHomes
{
  return self->_mergeIDsOfUsersOfRemovedSharedHomes;
}

- (NSMutableArray)accessorySetupMetricDispatchers
{
  return self->_accessorySetupMetricDispatchers;
}

- (NSMutableDictionary)userPushCacheMap
{
  return self->_userPushCacheMap;
}

- (void)setResidentEnabledState:(int64_t)a3
{
  self->_residentEnabledState = a3;
}

- (int64_t)residentEnabledState
{
  return self->_residentEnabledState;
}

- (HMDCompanionManager)companionManager
{
  return self->_companionManager;
}

- (void)setPendingHomesBeingRemoved:(id)a3
{
}

- (NSMutableSet)pendingHomesBeingRemoved
{
  return self->_pendingHomesBeingRemoved;
}

- (void)setMemoryMonitorLogEventTimer:(id)a3
{
}

- (HMFTimer)memoryMonitorLogEventTimer
{
  return self->_memoryMonitorLogEventTimer;
}

- (void)setPeriodicMobileCatalogUpdateTimer:(id)a3
{
}

- (HMFTimer)periodicMobileCatalogUpdateTimer
{
  return self->_periodicMobileCatalogUpdateTimer;
}

- (void)setDebounceHomesUpdateTimer:(id)a3
{
}

- (HMFTimer)debounceHomesUpdateTimer
{
  return self->_debounceHomesUpdateTimer;
}

- (void)setAppleAccountManager:(id)a3
{
}

- (void)setLogEventSubmitter:(id)a3
{
}

- (HMMLogEventSubmitting)logEventSubmitter
{
  return self->_logEventSubmitter;
}

- (void)setHasFinishedStartingUp:(BOOL)a3
{
  self->_hasFinishedStartingUp = a3;
}

- (BOOL)hasFinishedStartingUp
{
  return self->_hasFinishedStartingUp;
}

- (void)setHasLoadedData:(BOOL)a3
{
  self->_hasLoadedData = a3;
}

- (BOOL)hasLoadedData
{
  return self->_hasLoadedData;
}

- (HMDCameraRecordingLoadBalancer)cameraLoadBalancer
{
  return self->_cameraLoadBalancer;
}

- (HMDHomeManagerObjectLookup)lookup
{
  return self->_lookup;
}

- (HMDCapabilitiesController)capabilitiesController
{
  return self->_capabilitiesController;
}

- (void)setIdsServerBag:(id)a3
{
}

- (HMDMTSXPCServer)mtsXPCServer
{
  return (HMDMTSXPCServer *)objc_getProperty(self, a2, 168, 1);
}

- (HMDCompositeSettingsControllerManager)compositeSettingsControllerManager
{
  return (HMDCompositeSettingsControllerManager *)objc_getProperty(self, a2, 152, 1);
}

- (void)setGatherer:(id)a3
{
}

- (HMDAssistantGather)gatherer
{
  return self->_gatherer;
}

- (unint64_t)status
{
  return self->_status;
}

- (HMDWidgetConfigurationReader)widgetConfigurationReader
{
  return self->_widgetConfigurationReader;
}

- (HMDSoftwareUpdateManager)softwareUpdateManager
{
  return self->_softwareUpdateManager;
}

- (void)setPcsEnabled:(BOOL)a3
{
  self->_pcsEnabled = a3;
}

- (BOOL)pcsEnabled
{
  return self->_pcsEnabled;
}

- (unint64_t)homeDatabaseSize
{
  return self->_homeDatabaseSize;
}

- (void)removeSharedUserAcceptEventBuilderForHomeUuid:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    id v7 = v4;
    p_lock = &self->_lock;
    os_unfair_lock_lock_with_options();
    id v6 = [(HMDHomeManager *)self pendingSharedUserAcceptLogEventBuilders];
    [v6 removeObjectForKey:v7];

    os_unfair_lock_unlock(p_lock);
    id v4 = v7;
  }
}

- (id)sharedUserAcceptEventBuilderForHomeUuid:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    p_lock = &self->_lock;
    os_unfair_lock_lock_with_options();
    id v6 = [(HMDHomeManager *)self pendingSharedUserAcceptLogEventBuilders];
    id v7 = [v6 objectForKeyedSubscript:v4];

    os_unfair_lock_unlock(p_lock);
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

- (void)addSharedUserAcceptEventBuilder:(id)a3 forHomeUuid:(id)a4
{
  id v11 = a3;
  id v6 = a4;
  if (v11 && v6)
  {
    p_lock = &self->_lock;
    os_unfair_lock_lock_with_options();
    id v8 = [(HMDHomeManager *)self pendingSharedUserAcceptLogEventBuilders];

    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      [(HMDHomeManager *)self setPendingSharedUserAcceptLogEventBuilders:v9];
    }
    id v10 = [(HMDHomeManager *)self pendingSharedUserAcceptLogEventBuilders];
    [v10 setObject:v11 forKeyedSubscript:v6];

    os_unfair_lock_unlock(p_lock);
  }
}

- (void)_signpostAssistantSyncDataRequestHandled
{
  logger = self->_logger;
  if (os_signpost_enabled(logger))
  {
    *(_WORD *)id v3 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D49D5000, logger, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "AssistantSyncDataRequestHandled", "", v3, 2u);
  }
}

- (void)_signpostAssistantSyncDataNotification
{
  logger = self->_logger;
  if (os_signpost_enabled(logger))
  {
    *(_WORD *)id v3 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D49D5000, logger, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NotifyAssistantSyncDataReadiness", "", v3, 2u);
  }
}

- (void)_handlePrepareForDiagnosticExtension:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ((isInternalBuild() & 1) == 0)
  {
    id v7 = (void *)MEMORY[0x1D9452090]();
    id v8 = self;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      id v10 = HMFGetLogIdentifier();
      int v18 = 138543618;
      long long v19 = v10;
      __int16 v20 = 2112;
      id v21 = v4;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_FAULT, "%{public}@Should never call _handlePrepareForDiagnosticExtension in non-internal builds: %@", (uint8_t *)&v18, 0x16u);
    }
    id v11 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v12 = 52;
    goto LABEL_10;
  }
  id v5 = [v4 name];
  char v6 = [v5 isEqualToString:*MEMORY[0x1E4F2D4F8]];

  if ((v6 & 1) == 0)
  {
    uint64_t v13 = (void *)MEMORY[0x1D9452090]();
    id v14 = self;
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      id v16 = HMFGetLogIdentifier();
      int v18 = 138543618;
      long long v19 = v16;
      __int16 v20 = 2112;
      id v21 = v4;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_ERROR, "%{public}@Received bad message in _handlePrepareForDiagnosticExtension: %@", (uint8_t *)&v18, 0x16u);
    }
    id v11 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v12 = 3;
LABEL_10:
    long long v17 = [v11 hmErrorWithCode:v12];
    [v4 respondWithError:v17];

    goto LABEL_11;
  }
  [(HMDHomeManager *)self prepareForDiagnosticExtension:v4];
LABEL_11:
}

- (void)_handleDumpDatabase:(id)a3
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ((isInternalBuild() & 1) == 0)
  {
    id v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = self;
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      id v11 = HMFGetLogIdentifier();
      int v19 = 138543618;
      __int16 v20 = v11;
      __int16 v21 = 2112;
      id v22 = v4;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_FAULT, "%{public}@Should never call _handleDumpDatabase in non-internal builds: %@", (uint8_t *)&v19, 0x16u);
    }
    uint64_t v12 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v13 = 52;
    goto LABEL_10;
  }
  id v5 = [v4 name];
  char v6 = [v5 isEqualToString:*MEMORY[0x1E4F2D3A0]];

  if ((v6 & 1) == 0)
  {
    id v14 = (void *)MEMORY[0x1D9452090]();
    id v15 = self;
    id v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      long long v17 = HMFGetLogIdentifier();
      int v19 = 138543618;
      __int16 v20 = v17;
      __int16 v21 = 2112;
      id v22 = v4;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_ERROR, "%{public}@Received bad message in _handleDumpDatabase: %@", (uint8_t *)&v19, 0x16u);
    }
    uint64_t v12 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v13 = 3;
LABEL_10:
    uint64_t v7 = [v12 hmErrorWithCode:v13];
    goto LABEL_11;
  }
  uint64_t v7 = [MEMORY[0x1E4F28C58] hmErrorWithCode:48 description:0 reason:@"Database dump only supported in ROAR mode" suggestion:0];
LABEL_11:
  int v18 = (void *)v7;
  [v4 respondWithError:v7];
}

- (BOOL)expectingInvitationResponseForIdentifier:(id)a3
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (v4)
  {
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v5 = [(HMDHomeManager *)self homes];
    uint64_t v6 = [v5 countByEnumeratingWithState:&v25 objects:v30 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v26;
      uint64_t v20 = *(void *)v26;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v26 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = *(void **)(*((void *)&v25 + 1) + 8 * i);
          long long v21 = 0u;
          long long v22 = 0u;
          long long v23 = 0u;
          long long v24 = 0u;
          id v11 = [v10 outgoingInvitations];
          uint64_t v12 = [v11 countByEnumeratingWithState:&v21 objects:v29 count:16];
          if (v12)
          {
            uint64_t v13 = v12;
            uint64_t v14 = *(void *)v22;
            while (2)
            {
              for (uint64_t j = 0; j != v13; ++j)
              {
                if (*(void *)v22 != v14) {
                  objc_enumerationMutation(v11);
                }
                id v16 = [*(id *)(*((void *)&v21 + 1) + 8 * j) identifier];
                char v17 = [v16 isEqual:v4];

                if (v17)
                {

                  BOOL v18 = 1;
                  goto LABEL_21;
                }
              }
              uint64_t v13 = [v11 countByEnumeratingWithState:&v21 objects:v29 count:16];
              if (v13) {
                continue;
              }
              break;
            }
          }

          uint64_t v8 = v20;
        }
        uint64_t v7 = [v5 countByEnumeratingWithState:&v25 objects:v30 count:16];
        BOOL v18 = 0;
      }
      while (v7);
    }
    else
    {
      BOOL v18 = 0;
    }
LABEL_21:
  }
  else
  {
    BOOL v18 = 0;
  }

  return v18;
}

- (BOOL)userWithMergeIdIsMemberOfAHome:(id)a3
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  uint64_t v38 = self;
  id v5 = [(HMDHomeManager *)self homes];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v47 objects:v57 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v48;
    uint64_t v37 = *(void *)v48;
    while (2)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v48 != v7) {
          objc_enumerationMutation(v5);
        }
        id v9 = *(void **)(*((void *)&v47 + 1) + 8 * i);
        id v10 = objc_msgSend(v9, "userWithMergeID:", v4, v37);
        BOOL v11 = v10 == 0;

        if (!v11)
        {
LABEL_22:

          goto LABEL_23;
        }
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        uint64_t v12 = [v9 removedUsers];
        uint64_t v13 = [v12 countByEnumeratingWithState:&v43 objects:v56 count:16];
        if (v13)
        {
          uint64_t v14 = *(void *)v44;
          while (2)
          {
            for (uint64_t j = 0; j != v13; ++j)
            {
              if (*(void *)v44 != v14) {
                objc_enumerationMutation(v12);
              }
              id v16 = [*(id *)(*((void *)&v43 + 1) + 8 * j) mergeID];
              char v17 = [v16 isEqualToString:v4];

              if (v17)
              {

                goto LABEL_22;
              }
            }
            uint64_t v13 = [v12 countByEnumeratingWithState:&v43 objects:v56 count:16];
            if (v13) {
              continue;
            }
            break;
          }
        }

        uint64_t v7 = v37;
      }
      uint64_t v6 = [v5 countByEnumeratingWithState:&v47 objects:v57 count:16];
      uint64_t v7 = v37;
      if (v6) {
        continue;
      }
      break;
    }
  }

  p_locuint64_t k = &v38->_lock;
  os_unfair_lock_lock_with_options();
  if ([(NSMutableSet *)v38->_mergeIDsOfUsersOfRemovedSharedHomes containsObject:v4])
  {
    int v19 = (void *)MEMORY[0x1D9452090]();
    uint64_t v20 = v38;
    HMFGetOSLogHandle();
    long long v21 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      long long v22 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v53 = v22;
      __int16 v54 = 2112;
      id v55 = v4;
      _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@Merge ID %@ found in list of removed homes", buf, 0x16u);
    }
    os_unfair_lock_unlock(p_lock);
LABEL_23:
    BOOL v23 = 1;
  }
  else
  {
    os_unfair_lock_unlock(p_lock);
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v25 = [(HMDHomeManager *)v38 incomingInvitations];
    long long v26 = (void *)[v25 copy];

    uint64_t v27 = [v26 countByEnumeratingWithState:&v39 objects:v51 count:16];
    if (v27)
    {
      uint64_t v28 = *(void *)v40;
      while (2)
      {
        for (uint64_t k = 0; k != v27; ++k)
        {
          if (*(void *)v40 != v28) {
            objc_enumerationMutation(v26);
          }
          id v30 = *(void **)(*((void *)&v39 + 1) + 8 * k);
          if ([v30 isAccepted])
          {
            uint64_t v31 = [v30 inviterMergeID];
            char v32 = [v31 isEqual:v4];

            if (v32)
            {

              goto LABEL_23;
            }
          }
        }
        uint64_t v27 = [v26 countByEnumeratingWithState:&v39 objects:v51 count:16];
        if (v27) {
          continue;
        }
        break;
      }
    }

    id v33 = (void *)MEMORY[0x1D9452090]();
    __int16 v34 = v38;
    __int16 v35 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v36 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v53 = v36;
      __int16 v54 = 2112;
      id v55 = v4;
      _os_log_impl(&dword_1D49D5000, v35, OS_LOG_TYPE_DEFAULT, "%{public}@Home Membership Verifier unable to find user with mergeID %@", buf, 0x16u);
    }
    BOOL v23 = 0;
  }

  return v23;
}

- (id)createCurrentResidentCapabilities
{
  uint64_t v2 = objc_alloc_init(HMDMobileGestaltClient);
  id v3 = [MEMORY[0x1E4F65548] productInfo];
  id v4 = +[HMDHomeKitVersion currentVersion];
  id v5 = v3;
  uint64_t v6 = v2;
  id v7 = v4;
  if (!productIsResidentCapable(v5))
  {
    uint64_t v59 = 0;
    goto LABEL_88;
  }
  BOOL v8 = productSupportsCameraRecording(v5);
  BOOL v9 = productSupportsRouterManagement(v5);
  uint64_t v10 = 2;
  if (!v9) {
    uint64_t v10 = 0;
  }
  uint64_t v98 = v10;
  if (productSupportsShortcutActions(v5)) {
    uint64_t v11 = 4;
  }
  else {
    uint64_t v11 = 0;
  }
  BOOL v12 = productSupportsMediaActions(v5);
  uint64_t v13 = 8;
  if (!v12) {
    uint64_t v13 = 0;
  }
  uint64_t v120 = v13;
  BOOL v14 = productSupportsFirmwareUpdate(v5);
  uint64_t v15 = 32;
  if (!v14) {
    uint64_t v15 = 0;
  }
  uint64_t v121 = v15;
  BOOL v16 = productSupportsResidentFirmwareUpdate(v5);
  uint64_t v17 = 64;
  if (!v16) {
    uint64_t v17 = 0;
  }
  uint64_t v101 = v17;
  BOOL v18 = productSupportsCameraActivityZones(v5);
  uint64_t v19 = 128;
  if (!v18) {
    uint64_t v19 = 0;
  }
  uint64_t v100 = v19;
  BOOL v20 = productSupportsCameraActivityZones(v5);
  uint64_t v21 = 256;
  if (!v20) {
    uint64_t v21 = 0;
  }
  uint64_t v99 = v21;
  BOOL v22 = productSupportsCameraActivityZones(v5);
  uint64_t v23 = 512;
  if (!v22) {
    uint64_t v23 = 0;
  }
  uint64_t v118 = v23;
  BOOL v24 = productSupportsCameraActivityZones(v5);
  uint64_t v25 = 1024;
  if (!v24) {
    uint64_t v25 = 0;
  }
  uint64_t v117 = v25;
  BOOL v26 = productSupportsAnnounce(v5);
  uint64_t v27 = 2048;
  if (!v26) {
    uint64_t v27 = 0;
  }
  uint64_t v116 = v27;
  BOOL v28 = productSupportsWakeOnLAN(v5);
  uint64_t v29 = 4096;
  if (!v28) {
    uint64_t v29 = 0;
  }
  uint64_t v115 = v29;
  BOOL v30 = productSupportsLockNotificationContext(v5);
  uint64_t v31 = 0x2000;
  if (!v30) {
    uint64_t v31 = 0;
  }
  uint64_t v114 = v31;
  BOOL v32 = productSupportsLockNotificationContext(v5);
  uint64_t v33 = 0x4000;
  if (!v32) {
    uint64_t v33 = 0;
  }
  uint64_t v113 = v33;
  BOOL v34 = productSupportsLockNotificationContext(v5);
  uint64_t v35 = 0x8000;
  if (!v34) {
    uint64_t v35 = 0;
  }
  uint64_t v112 = v35;
  BOOL v36 = productSupportsLockNotificationContext(v5);
  uint64_t v37 = 0x10000;
  if (!v36) {
    uint64_t v37 = 0;
  }
  uint64_t v111 = v37;
  BOOL v38 = productSupportsLockNotificationContext(v5);
  uint64_t v39 = 0x20000;
  if (!v38) {
    uint64_t v39 = 0;
  }
  uint64_t v110 = v39;
  BOOL v40 = productSupportsSiriEndpointSetup(v5);
  uint64_t v41 = 0x80000;
  if (!v40) {
    uint64_t v41 = 0;
  }
  uint64_t v109 = v41;
  BOOL v42 = productSupportsCustomMediaApplicationDestination(v5);
  uint64_t v43 = 0x100000;
  if (!v42) {
    uint64_t v43 = 0;
  }
  uint64_t v108 = v43;
  BOOL v44 = productSupportsUnifiedMediaNotifications(v5);
  uint64_t v45 = 0x200000;
  if (!v44) {
    uint64_t v45 = 0;
  }
  uint64_t v107 = v45;
  BOOL v46 = productSupportsHomeHub(v5, v6);
  uint64_t v47 = 0x400000;
  if (!v46) {
    uint64_t v47 = 0;
  }
  uint64_t v106 = v47;
  BOOL AccessoryCommunication = productSupportsResidentFirstAccessoryCommunication(v5);
  uint64_t v49 = 0x800000;
  if (!AccessoryCommunication) {
    uint64_t v49 = 0;
  }
  uint64_t v105 = v49;
  BOOL v50 = productSupportsThreadNetworkCredentialSharing(v5, v6, v7);
  uint64_t v51 = 0x1000000;
  if (!v50) {
    uint64_t v51 = 0;
  }
  uint64_t v104 = v51;
  BOOL v52 = productSupportsMatterSharedAdminPairing(v5, v6, v7);
  uint64_t v53 = 0x2000000;
  if (!v52) {
    uint64_t v53 = 0;
  }
  uint64_t v103 = v53;
  id v54 = v5;
  id v55 = v6;
  id v56 = v7;
  uint64_t v57 = [v54 softwareVersion];
  uint64_t v58 = v57;
  if (v57) {
    [v57 operatingSystemVersion];
  }

  if (HMFOperatingSystemVersionCompare() == 1)
  {
    uint64_t v102 = 0;
  }
  else
  {
    BOOL IsResidentCapable = productIsResidentCapable(v54);
    uint64_t v61 = 0x10000000;
    if (!IsResidentCapable) {
      uint64_t v61 = 0;
    }
    uint64_t v102 = v61;
  }

  BOOL v62 = productSupportsMatterOwnerCertFetch(v54, v55, v56);
  uint64_t v63 = 0x100000000;
  if (!v62) {
    uint64_t v63 = 0;
  }
  uint64_t v119 = v63;
  id v64 = v54;
  id v65 = [v64 softwareVersion];
  int v66 = v65;
  if (v65) {
    [v65 operatingSystemVersion];
  }

  uint64_t v67 = [v64 productPlatform];
  uint64_t v68 = [v64 productClass];

  if ((v68 | 2) == 6 && v67 == 4) {
    unint64_t v69 = (unint64_t)(HMFOperatingSystemVersionCompare() != 1) << 33;
  }
  else {
    unint64_t v69 = 0;
  }
  id v70 = v64;
  v71 = [v70 softwareVersion];
  double v72 = v71;
  if (v71) {
    [v71 operatingSystemVersion];
  }
  BOOL v73 = v8;

  uint64_t v74 = [v70 productPlatform];
  uint64_t v75 = [v70 productClass];

  if ((v75 | 2) != 6 || v74 != 4) {
    goto LABEL_72;
  }
  if (HMFOperatingSystemVersionCompare() != 1)
  {
    unint64_t v76 = 0x400000000;
    goto LABEL_73;
  }
  if (isInternalBuild()) {
    unint64_t v76 = (unint64_t)(HMFOperatingSystemVersionCompare() != 1) << 34;
  }
  else {
LABEL_72:
  }
    unint64_t v76 = 0;
LABEL_73:
  id v77 = v70;
  v78 = [v77 softwareVersion];
  v79 = v78;
  if (v78) {
    [v78 operatingSystemVersion];
  }
  uint64_t v80 = v98 | v73;
  uint64_t v81 = v11 | v120;

  uint64_t v82 = [v77 productPlatform];
  uint64_t v83 = [v77 productClass];

  if ((v83 | 2) == 6 && v82 == 4) {
    HMFOperatingSystemVersionCompare();
  }
  id v84 = v77;
  v85 = [v84 softwareVersion];
  v86 = v85;
  if (v85) {
    [v85 operatingSystemVersion];
  }
  uint64_t v87 = v80 | v81 | v121;

  uint64_t v88 = [v84 productPlatform];
  uint64_t v89 = [v84 productClass];

  if ((v89 | 2) == 6 && v88 == 4 && HMFOperatingSystemVersionCompare() != 1 && _os_feature_enabled_impl())
  {
    uint64_t v91 = v100;
    uint64_t v90 = v101;
    uint64_t v92 = v99;
    if (isInternalBuild()) {
      unint64_t v93 = 0x1000000000;
    }
    else {
      unint64_t v93 = (unint64_t)(CFPreferencesGetAppBooleanValue(@"UWBUnlock", @"/Library/Managed Preferences/mobile/com.apple.homed.plist", 0) != 0) << 36;
    }
  }
  else
  {
    unint64_t v93 = 0;
    uint64_t v91 = v100;
    uint64_t v90 = v101;
    uint64_t v92 = v99;
  }
  unint64_t v94 = v87 | v90 | v91 | v92 | v118 | v117 | v116 | v115 | v114 | v113 | v112 | v111 | v110 | v109 | v108 | v107 | v106 | v105 | v104 | v103 | v102 | v119 | v69 | v76 | v93;
  id v95 = objc_alloc(MEMORY[0x1E4F2EA60]);
  v96 = [MEMORY[0x1E4F29128] UUID];
  uint64_t v59 = (void *)[v95 initWithTagUUID:v96 capabilities:v94];

LABEL_88:
  return v59;
}

- (id)createCurrentAccessoryCapabilities
{
  uint64_t v2 = objc_alloc_init(HMDMobileGestaltClient);
  id v3 = [MEMORY[0x1E4F65548] productInfo];
  id v4 = +[HMDHomeKitVersion currentVersion];
  id v5 = v2;
  id v6 = v3;
  BOOL v105 = productSupportsKeychainSync(v6);
  BOOL v104 = productSupportsDeviceSetup(v6);
  BOOL v103 = productSupportsKeyTransferClient(v6, v5, v4);
  BOOL v101 = productSupportsKeyTransferServer(v6);
  BOOL v102 = productSupportsStandaloneMode(v6);
  int v100 = productSupportsCloudDataSync(v6);
  BOOL v99 = productSupportsWholeHouseAudio(v6);
  BOOL v98 = productSupportsAssistantAccessControl(v6);
  BOOL v97 = productSupportsHomeInvitation(v6);
  BOOL v96 = productSupportsTargetControl(v6);
  BOOL v95 = productSupportsMultiUser(v6);
  BOOL v93 = productSupportsHomeLevelLocationServiceSetting(v6);
  BOOL v91 = productSupportsCompanionInitiatedRestart(v6);
  BOOL v89 = productSupportsMusicAlarm(v6);
  BOOL v87 = productSupportsAnnounce(v6);
  BOOL v85 = productSupportsThirdPartyMusic(v6);
  BOOL v83 = productSupportsPreferredMediaUser(v6);
  BOOL v81 = productSupportsThirdPartyMusic(v6);
  BOOL v79 = productSupportsUserMediaSettings(v6);
  BOOL v76 = productSupportsCoordinationDoorbellChime(v6);
  BOOL v74 = productSupportsHomeHub(v6, v5);
  uint64_t v107 = v5;
  int v7 = productSupportsAudioReturnChannel(v6, v5);
  BOOL v72 = productSupportsUserMediaSettings(v6);
  BOOL v70 = productSupportsCaptiveNetworks(v6);
  uint64_t v106 = v4;
  BOOL v8 = productSupportsMessagedHomePodSettings(v6, v4);
  BOOL v68 = productSupportsMediaActions(v6);
  int v9 = productSupportsRMVonAppleTV(v6);
  BOOL v10 = productSupportsJustSiri(v6);
  id v11 = v6;
  BOOL v12 = [v11 softwareVersion];
  uint64_t v13 = v12;
  if (v12) {
    [v12 operatingSystemVersion];
  }

  uint64_t v14 = [v11 productPlatform];
  uint64_t v15 = [v11 productClass];

  unint64_t v16 = 0;
  if (v15 == 6 && v14 == 4) {
    unint64_t v16 = (unint64_t)(HMFOperatingSystemVersionCompare() != 1) << 31;
  }
  unint64_t v78 = v16;
  BOOL v17 = productSupportsCoordinationFreeDoorbellChime(v11);
  BOOL v18 = productSupportsCompanionInitiatedObliterate(v11);
  id v19 = v11;
  uint64_t v20 = [v19 productPlatform];
  uint64_t v21 = [v19 productClass];
  BOOL v22 = [v19 softwareVersion];

  if (v22) {
    [v22 operatingSystemVersion];
  }

  unint64_t v23 = 0;
  if (v21 == 4 && v20 == 4) {
    unint64_t v23 = (unint64_t)(HMFOperatingSystemVersionCompare() != 1) << 34;
  }
  unint64_t v67 = v23;
  if (v18) {
    uint64_t v24 = 0x200000000;
  }
  else {
    uint64_t v24 = 0;
  }
  uint64_t v25 = 0x100000000;
  if (!v17) {
    uint64_t v25 = 0;
  }
  uint64_t v65 = v25;
  uint64_t v66 = v24;
  if (v10) {
    uint64_t v26 = 0x40000000;
  }
  else {
    uint64_t v26 = 0;
  }
  uint64_t v27 = 0x20000000;
  if (!v9) {
    uint64_t v27 = 0;
  }
  uint64_t v63 = v27;
  uint64_t v64 = v26;
  if (v68) {
    uint64_t v28 = 0x8000000;
  }
  else {
    uint64_t v28 = 0;
  }
  if (v8) {
    uint64_t v29 = 0x4000000;
  }
  else {
    uint64_t v29 = 0;
  }
  uint64_t v30 = 0x2000000;
  if (!v70) {
    uint64_t v30 = 0;
  }
  uint64_t v69 = v28;
  uint64_t v71 = v30;
  if (v72) {
    uint64_t v31 = 0x1000000;
  }
  else {
    uint64_t v31 = 0;
  }
  uint64_t v32 = 0x800000;
  if (!v7) {
    uint64_t v32 = 0;
  }
  uint64_t v61 = v32;
  uint64_t v62 = v29;
  uint64_t v33 = 0x400000;
  if (!v74) {
    uint64_t v33 = 0;
  }
  uint64_t v73 = v31;
  uint64_t v75 = v33;
  uint64_t v34 = 0x200000;
  if (!v76) {
    uint64_t v34 = 0;
  }
  uint64_t v77 = v34;
  if (v79) {
    uint64_t v35 = 0x100000;
  }
  else {
    uint64_t v35 = 0;
  }
  uint64_t v36 = 0x80000;
  if (!v81) {
    uint64_t v36 = 0;
  }
  uint64_t v80 = v35;
  uint64_t v82 = v36;
  if (v83) {
    uint64_t v37 = 0x20000;
  }
  else {
    uint64_t v37 = 0;
  }
  uint64_t v38 = 0x10000;
  if (!v85) {
    uint64_t v38 = 0;
  }
  uint64_t v84 = v37;
  uint64_t v86 = v38;
  if (v87) {
    uint64_t v39 = 0x4000;
  }
  else {
    uint64_t v39 = 0;
  }
  uint64_t v40 = 0x2000;
  if (!v89) {
    uint64_t v40 = 0;
  }
  uint64_t v88 = v39;
  uint64_t v90 = v40;
  if (v91) {
    uint64_t v41 = 4096;
  }
  else {
    uint64_t v41 = 0;
  }
  uint64_t v42 = 2048;
  if (!v93) {
    uint64_t v42 = 0;
  }
  uint64_t v92 = v41;
  uint64_t v94 = v42;
  if (v95) {
    uint64_t v43 = 1024;
  }
  else {
    uint64_t v43 = 0;
  }
  if (v96) {
    uint64_t v44 = 512;
  }
  else {
    uint64_t v44 = 0;
  }
  if (v97) {
    uint64_t v45 = 256;
  }
  else {
    uint64_t v45 = 0;
  }
  if (v98) {
    uint64_t v46 = 128;
  }
  else {
    uint64_t v46 = 0;
  }
  uint64_t v47 = 2;
  if (!v104) {
    uint64_t v47 = 0;
  }
  uint64_t v48 = v47 | v105;
  uint64_t v49 = 4;
  if (!v103) {
    uint64_t v49 = 0;
  }
  uint64_t v50 = 8;
  if (!v101) {
    uint64_t v50 = 0;
  }
  uint64_t v51 = v48 | v49 | v50;
  uint64_t v52 = 16;
  if (!v102) {
    uint64_t v52 = 0;
  }
  uint64_t v53 = 32;
  if (!v100) {
    uint64_t v53 = 0;
  }
  uint64_t v54 = v52 | v53;
  if (v99) {
    uint64_t v55 = 64;
  }
  else {
    uint64_t v55 = 0;
  }
  [v19 productClass];

  uint64_t v56 = v51 | v54 | v55 | v46 | v45 | v44 | v43 | v94 | v92 | v90 | v88 | v86 | v84 | v82 | v80 | v77 | v75 | v61 | v73 | v71 | v62 | v69 | v63 | v64 | v78 | v65 | v66 | v67;
  id v57 = objc_alloc(MEMORY[0x1E4F2E518]);
  uint64_t v58 = [MEMORY[0x1E4F29128] UUID];
  uint64_t v59 = (void *)[v57 initWithTagUUID:v58 capabilities:v56];

  return v59;
}

- (id)currentAccessoryHomeUUID
{
  uint64_t v2 = [(HMDHomeManager *)self _accessoryOfCurrentDevice];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;

  if (v4)
  {
    id v5 = [v4 home];
    id v6 = [v5 uuid];
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

- (id)currentAccessoryUUID
{
  uint64_t v2 = [(HMDHomeManager *)self _accessoryOfCurrentDevice];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;

  if (v4)
  {
    id v5 = [v4 uuid];
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

- (id)currentAccessoryHome
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = [(HMDHomeManager *)self _accessoryOfCurrentDevice];
  if (v3)
  {
    id v4 = [(HMDHomeManager *)self _accessoryOfCurrentDevice];
    id v5 = [v4 home];
  }
  else
  {
    id v6 = (void *)MEMORY[0x1D9452090]();
    int v7 = self;
    BOOL v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = HMFGetLogIdentifier();
      int v11 = 138543362;
      BOOL v12 = v9;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to get current accessory home due to no current accessory", (uint8_t *)&v11, 0xCu);
    }
    id v5 = 0;
  }

  return v5;
}

- (id)currentMediaGroupsAggregateCunsumer
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = [(HMDHomeManager *)self currentAccessoryHome];
  id v4 = v3;
  if (v3)
  {
    id v5 = [v3 mediaGroupsAggregateConsumer];
  }
  else
  {
    id v6 = (void *)MEMORY[0x1D9452090]();
    int v7 = self;
    BOOL v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = HMFGetLogIdentifier();
      int v11 = 138543362;
      BOOL v12 = v9;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to get current media groups aggregate consumer due to no current accessory home", (uint8_t *)&v11, 0xCu);
    }
    id v5 = 0;
  }

  return v5;
}

- (void)mediaGroupParticipantLocalDataStorage:(id)a3 didChangeDestinationIdentifier:(id)a4 forDestinationControllerIdentifier:(id)a5
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  int v11 = [(HMDHomeManager *)self currentMediaGroupsAggregateCunsumer];
  BOOL v12 = v11;
  if (v11)
  {
    if (v9) {
      [v11 unstageNullDestinationForCurrentDestinationController];
    }
    else {
      [v11 stageNullDestinationForCurrentDestinationControllerIdentifier:v10];
    }
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x1D9452090]();
    uint64_t v14 = self;
    uint64_t v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      unint64_t v16 = HMFGetLogIdentifier();
      int v17 = 138543362;
      BOOL v18 = v16;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_ERROR, "%{public}@Failed to stage current destination controller change due to no current consumer", (uint8_t *)&v17, 0xCu);
    }
  }
}

- (id)topicNameForMediaGroupParticipantDataLocalStorage:(id)a3
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self _accessoryOfCurrentDevice];
  id v6 = v5;
  if (v5)
  {
    int v7 = [v5 home];
    id v8 = v7;
    if (v7)
    {
      id v9 = (void *)MEMORY[0x1E4F2E580];
      uint64_t v10 = *MEMORY[0x1E4F2C380];
      int v11 = [v7 uuid];
      BOOL v12 = [v6 uuid];
      uint64_t v13 = [v9 topicFromSuffixID:v10 homeUUID:v11 accessoryUUID:v12];
    }
    else
    {
      BOOL v18 = (void *)MEMORY[0x1D9452090]();
      uint64_t v19 = self;
      uint64_t v20 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        uint64_t v21 = HMFGetLogIdentifier();
        int v23 = 138543362;
        uint64_t v24 = v21;
        _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@Failed to get media group participant data topic name due to no home on current accessory", (uint8_t *)&v23, 0xCu);
      }
      uint64_t v13 = 0;
    }
  }
  else
  {
    uint64_t v14 = (void *)MEMORY[0x1D9452090]();
    uint64_t v15 = self;
    unint64_t v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      int v17 = HMFGetLogIdentifier();
      int v23 = 138543362;
      uint64_t v24 = v17;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, "%{public}@Failed to get media group participant data topic name due to no current accessory", (uint8_t *)&v23, 0xCu);
    }
    uint64_t v13 = 0;
  }

  return v13;
}

- (BOOL)isStartThreadNetworkInProgress
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v3 = [(HMDHomeManager *)self homes];
  uint64_t v4 = [v3 countByEnumeratingWithState:&v15 objects:v23 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v16;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        if ([v8 startThreadNetworkInProgress])
        {
          uint64_t v10 = (void *)MEMORY[0x1D9452090]();
          int v11 = self;
          BOOL v12 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            uint64_t v13 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            uint64_t v20 = v13;
            __int16 v21 = 2112;
            BOOL v22 = v8;
            _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@thread start in progress for %@", buf, 0x16u);
          }
          BOOL v9 = 1;
          goto LABEL_13;
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v15 objects:v23 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
  BOOL v9 = 0;
LABEL_13:

  return v9;
}

- (BOOL)isCurrentResidentDeviceRunningThreadNetwork:(id)a3
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    id v3 = [(HMDHomeManager *)self homes];
    uint64_t v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v4)
    {
      uint64_t v5 = *(void *)v9;
      while (2)
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v9 != v5) {
            objc_enumerationMutation(v3);
          }
          if ([*(id *)(*((void *)&v8 + 1) + 8 * i) isCurrentDeviceAvailableResident])
          {
            LOBYTE(v4) = 1;
            goto LABEL_12;
          }
        }
        uint64_t v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
        if (v4) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  return v4;
}

- (id)accessorySetupMetricDispatchersForHome:(id)a3
{
  id v4 = a3;
  p_locuint64_t k = &self->_lock;
  os_unfair_lock_lock_with_options();
  accessorySetupMetricDispatchers = self->_accessorySetupMetricDispatchers;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __57__HMDHomeManager_accessorySetupMetricDispatchersForHome___block_invoke;
  v10[3] = &unk_1E6A16C70;
  id v7 = v4;
  id v11 = v7;
  long long v8 = [(NSMutableArray *)accessorySetupMetricDispatchers na_filter:v10];

  os_unfair_lock_unlock(p_lock);
  return v8;
}

uint64_t __57__HMDHomeManager_accessorySetupMetricDispatchersForHome___block_invoke(uint64_t a1, void *a2)
{
  return [a2 hasHome:*(void *)(a1 + 32)];
}

- (id)firstSetupSessionIdentifierOutputStartTime:(double *)a3
{
  p_locuint64_t k = &self->_lock;
  os_unfair_lock_lock_with_options();
  if ([(NSMutableArray *)self->_accessorySetupMetricDispatchers count])
  {
    uint64_t v6 = [(NSMutableArray *)self->_accessorySetupMetricDispatchers firstObject];
    id v7 = v6;
    if (a3)
    {
      long long v8 = [v6 trackingInfo];
      *a3 = (double)(unint64_t)[v8 startTime];
    }
    long long v9 = [v7 setupSessionIdentifier];
  }
  else
  {
    long long v9 = 0;
    if (a3) {
      *a3 = 0.0;
    }
  }
  os_unfair_lock_unlock(p_lock);
  return v9;
}

- (void)removeAccessorySetupMetricDispatcherForAccessoryUUID:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    os_unfair_lock_lock_with_options();
    accessorySetupMetricDispatchers = self->_accessorySetupMetricDispatchers;
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = __71__HMDHomeManager_removeAccessorySetupMetricDispatcherForAccessoryUUID___block_invoke;
    v7[3] = &unk_1E6A16C70;
    id v8 = v4;
    uint64_t v6 = [(NSMutableArray *)accessorySetupMetricDispatchers na_firstObjectPassingTest:v7];
    if (v6) {
      [(NSMutableArray *)self->_accessorySetupMetricDispatchers removeObject:v6];
    }

    os_unfair_lock_unlock(&self->_lock);
  }
}

uint64_t __71__HMDHomeManager_removeAccessorySetupMetricDispatcherForAccessoryUUID___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 trackingInfo];
  id v4 = [v3 accessoryUUID];
  uint64_t v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v5;
}

- (void)addAccessorySetupMetricDispatcher:(id)a3
{
  id v8 = a3;
  p_locuint64_t k = &self->_lock;
  os_unfair_lock_lock_with_options();
  if (!self->_accessorySetupMetricDispatchers)
  {
    uint64_t v5 = [MEMORY[0x1E4F1CA48] array];
    accessorySetupMetricDispatchers = self->_accessorySetupMetricDispatchers;
    self->_accessorySetupMetricDispatchers = v5;
  }
  id v7 = [(HMDHomeManager *)self accessorySetupMetricDispatchers];
  [v7 addObject:v8];

  os_unfair_lock_unlock(p_lock);
}

- (id)accessorySetupMetricDispatcherForAccessoryUUID:(id)a3
{
  id v4 = a3;
  p_locuint64_t k = &self->_lock;
  os_unfair_lock_lock_with_options();
  uint64_t v6 = [(HMDHomeManager *)self accessorySetupMetricDispatchers];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __65__HMDHomeManager_accessorySetupMetricDispatcherForAccessoryUUID___block_invoke;
  v10[3] = &unk_1E6A16C70;
  id v7 = v4;
  id v11 = v7;
  id v8 = objc_msgSend(v6, "na_firstObjectPassingTest:", v10);

  os_unfair_lock_unlock(p_lock);
  return v8;
}

uint64_t __65__HMDHomeManager_accessorySetupMetricDispatcherForAccessoryUUID___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 trackingInfo];
  id v4 = [v3 accessoryUUID];
  uint64_t v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v5;
}

- (void)_handleEnableUARPPacketCaptureRequest:(id)a3
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  int v5 = [v4 BOOLForKey:*MEMORY[0x1E4F2D3D0]];
  uint64_t v6 = [v4 stringForKey:*MEMORY[0x1E4F2D3E0]];
  id v7 = (void *)v6;
  if (v5) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8)
  {
    long long v9 = [(HMDHomeManager *)self accessoryFirmwareUpdateManager];
    long long v10 = v9;
    if (v5)
    {
      char v11 = [v9 startUARPPacketCapture:v7];

      if ((v11 & 1) == 0)
      {
        BOOL v12 = (void *)MEMORY[0x1D9452090]();
        uint64_t v13 = self;
        uint64_t v14 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          long long v15 = HMFGetLogIdentifier();
          int v20 = 138543618;
          __int16 v21 = v15;
          __int16 v22 = 2112;
          int v23 = @"Request to enable UARP packet capture failed";
          long long v16 = "%{public}@%@";
          long long v17 = v14;
          uint32_t v18 = 22;
LABEL_11:
          _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_ERROR, v16, (uint8_t *)&v20, v18);

          goto LABEL_12;
        }
        goto LABEL_12;
      }
    }
    else
    {
      [v9 stopUARPPacketCapture];
    }
    [v4 respondWithSuccess];
    goto LABEL_15;
  }
  BOOL v12 = (void *)MEMORY[0x1D9452090]();
  uint64_t v13 = self;
  uint64_t v14 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    long long v15 = HMFGetLogIdentifier();
    int v20 = 138543362;
    __int16 v21 = v15;
    long long v16 = "%{public}@Request to enable UARP packet capture is missing capture path";
    long long v17 = v14;
    uint32_t v18 = 12;
    goto LABEL_11;
  }
LABEL_12:

  uint64_t v19 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
  [v4 respondWithError:v19];

LABEL_15:
}

- (void)_handleHH2SentinelZonePresent:(id)a3
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  int v5 = (void *)MEMORY[0x1D9452090]();
  uint64_t v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    BOOL v8 = HMFGetLogIdentifier();
    int v10 = 138543362;
    char v11 = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@HH2 sentinel zone detected", (uint8_t *)&v10, 0xCu);
  }
  long long v9 = [(HMDHomeManager *)v6 uuid];
  [(HMDHomeManager *)v6 updateGenerationCounterWithReason:@"HH2 sentinel zone detected" sourceUUID:v9 shouldNotifyClients:1];
}

- (id)hapMetadataForMicroLocationLogEventObserver:(id)a3
{
  return +[HMDHAPMetadata getSharedInstance];
}

- (id)hapMetadataForBiomeLogEventObserver:(id)a3
{
  return +[HMDHAPMetadata getSharedInstance];
}

- (void)handleSiriSyncDataRequest:(id)a3
{
  id v4 = a3;
  int v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __44__HMDHomeManager_handleSiriSyncDataRequest___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

uint64_t __44__HMDHomeManager_handleSiriSyncDataRequest___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleAssistantSyncDataRequest:*(void *)(a1 + 40)];
}

- (void)assistantSyncDataChanged:(id)a3
{
  id v4 = a3;
  int v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __43__HMDHomeManager_assistantSyncDataChanged___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

uint64_t __43__HMDHomeManager_assistantSyncDataChanged___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _assistantSyncDataChanged:*(void *)(a1 + 40)];
}

- (void)setPostSyncDataUpdatedNotification:(BOOL)a3
{
  p_locuint64_t k = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_postSyncDataUpdatedNotification = a3;
  os_unfair_lock_unlock(p_lock);
}

- (BOOL)postSyncDataUpdatedNotification
{
  uint64_t v2 = self;
  p_locuint64_t k = &self->_lock;
  os_unfair_lock_lock_with_options();
  LOBYTE(v2) = v2->_postSyncDataUpdatedNotification;
  os_unfair_lock_unlock(p_lock);
  return (char)v2;
}

- (void)__handleProcessMemoryPressureEvent:(id)a3
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  int v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
  {
    id v8 = HMFGetLogIdentifier();
    *(_DWORD *)int v23 = 138543362;
    *(void *)&v23[4] = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_FAULT, "%{public}@Received process memory pressure notification", v23, 0xCu);
  }
  long long v9 = [v4 userInfo];
  int v10 = objc_msgSend(v9, "hmf_stringForKey:", *MEMORY[0x1E4F64F40]);

  if (v10)
  {
    *(void *)int v23 = 0;
    [(HMDHomeManager *)v6 dataSyncInProgressWithState:v23 withMessage:0];
    char v11 = [(HMDHomeManager *)v6 logEventSubmitter];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    id v13 = v12;

    uint64_t v14 = [MEMORY[0x1E4F65478] memoryMonitor];
    objc_msgSend(v13, "handleMemoryPressureState:", objc_msgSend(v14, "lastProcessMemoryState"));

    long long v15 = [(HMDHomeManager *)v6 logEventSubmitter];
    long long v16 = HMHomeManagerDataSyncStateToString();
    long long v17 = +[HMDProcessMemoryPressureNotificationLogEvent createEventWithProcessMemoryState:v10 dataSyncState:v16];
    [v15 submitLogEvent:v17];

    uint32_t v18 = [(HMDHomeManager *)v6 memoryTracker];
    [v18 trackMemoryUsageWithReason:2];
  }
  else
  {
    uint64_t v19 = (void *)MEMORY[0x1D9452090]();
    int v20 = v6;
    __int16 v21 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      __int16 v22 = HMFGetLogIdentifier();
      *(_DWORD *)int v23 = 138543362;
      *(void *)&v23[4] = v22;
      _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_ERROR, "%{public}@Notification does not contain process memory state", v23, 0xCu);
    }
  }
}

- (void)_handleCurrentAccessoryAddedNotification:(id)a3
{
  id v4 = [(HMDHomeManager *)self capabilitiesController];
  [v4 currentAccessoryDidBecomeAvailable];

  [(HMDHomeManager *)self _updateCurrentHomeIfNecessary];
  int v5 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __59__HMDHomeManager__handleCurrentAccessoryAddedNotification___block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v5, block);
}

uint64_t __59__HMDHomeManager__handleCurrentAccessoryAddedNotification___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) postFinishSetupForCurrentAccessoryFollowUpIfNeeded];
}

- (void)_handleCurrentAccessoryRemovedNotification:(id)a3
{
  id v4 = a3;
  int v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __61__HMDHomeManager__handleCurrentAccessoryRemovedNotification___block_invoke;
  v7[3] = &unk_1E6A197C8;
  id v8 = v4;
  long long v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __61__HMDHomeManager__handleCurrentAccessoryRemovedNotification___block_invoke(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  id v3 = objc_msgSend(v2, "hmf_UUIDForKey:", @"HMDLastRemovedCurrentAccessoryUUIDKey");

  if (v3)
  {
    id v4 = (os_unfair_lock_s *)(*(void *)(a1 + 40) + 24);
    os_unfair_lock_lock_with_options();
    int v5 = [*(id *)(a1 + 40) lastRemovedCurrentAccessoryUUID];
    char v6 = objc_msgSend(v3, "hmf_isEqualToUUID:", v5);

    if (v6)
    {
      os_unfair_lock_unlock(v4);
      id v7 = [*(id *)(a1 + 40) capabilitiesController];
      [v7 didRemoveCurrentAccessory:v3];
    }
    else
    {
      [*(id *)(a1 + 40) setLastRemovedCurrentAccessoryUUID:v3];
      os_unfair_lock_unlock(v4);
      id v13 = [*(id *)(a1 + 40) capabilitiesController];
      [v13 didRemoveCurrentAccessory:v3];

      uint64_t v14 = (void *)MEMORY[0x1D9452090]();
      id v15 = *(id *)(a1 + 40);
      long long v16 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        long long v17 = HMFGetLogIdentifier();
        int v22 = 138543618;
        int v23 = v17;
        __int16 v24 = 2112;
        uint64_t v25 = v3;
        _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_DEFAULT, "%{public}@Last removed current accessory changed to %@", (uint8_t *)&v22, 0x16u);
      }
      uint32_t v18 = [*(id *)(a1 + 40) userDefaults];
      uint64_t v19 = [v3 UUIDString];
      [v18 setObject:v19 forKey:@"HMDLastRemovedCurrentAccessoryUUIDKey"];

      [*(id *)(a1 + 40) resetTTSUHH2SettingsMigrationKey];
      int v20 = *(void **)(a1 + 40);
      __int16 v21 = [v20 uuid];
      [v20 _updateGenerationCounterWithReason:@"CurrentAccessoryRemoved" sourceUUID:v21 shouldNotifyClients:1];
    }
    [*(id *)(a1 + 40) postFinishSetupForCurrentAccessoryFollowUpIfNeeded];
  }
  else
  {
    id v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = *(id *)(a1 + 40);
    int v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      char v11 = HMFGetLogIdentifier();
      uint64_t v12 = *(void **)(a1 + 32);
      int v22 = 138543618;
      int v23 = v11;
      __int16 v24 = 2112;
      uint64_t v25 = v12;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_ERROR, "%{public}@Last removed current accessory uuid missing from notification : %@", (uint8_t *)&v22, 0x16u);
    }
  }
}

- (unint64_t)numHomes
{
  uint64_t v2 = [(HMDHomeManager *)self homes];
  unint64_t v3 = [v2 count];

  return v3;
}

- (BOOL)isFirstCloudImportComplete
{
  return 0;
}

- (BOOL)isSignedIntoiCloud
{
  uint64_t v2 = +[HMDAppleAccountManager sharedManager];
  char v3 = [v2 isLoggedInToPrimaryAccount];

  return v3;
}

- (id)upstreamTopicsForTopic:(id)a3
{
  return +[HMDHomeEventsGenerated upstreamTopicsForTopic:a3];
}

- (id)expandedTopicsForTopics:(id)a3
{
  return +[HMDHomeEventsGenerated expandedTopicsWithTopics:a3 homeManager:self];
}

- (id)delegatingRouter:(id)a3 upstreamTopicsFor:(id)a4
{
  return +[HMDHomeEventsGenerated upstreamTopicsForTopic:a4];
}

- (id)delegatingRouter:(id)a3 filteredTopics:(id)a4 forRouter:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  char v11 = (void *)MEMORY[0x1D9452090]();
  uint64_t v12 = [MEMORY[0x1E4F1C978] array];
  id v13 = [(HMDHomeManager *)self registrationForwardingEventRouter];

  if (v13 == v8)
  {
    id v14 = v10;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v15 = v14;
    }
    else {
      id v15 = 0;
    }
    id v16 = v15;

    long long v17 = [(HMDHomeManager *)self memoryEventRouter];
    id v18 = [v17 synchronousSubscriptionProvider];

    if (v18 == v14)
    {
      id v21 = v9;
    }
    else
    {
      if (!v16) {
        goto LABEL_11;
      }
      uint64_t v19 = [v16 identifier];

      if (!v19) {
        goto LABEL_11;
      }
      uint64_t v20 = [v16 identifier];
      id v21 = +[HMDHomeEventsGenerated forwardingTopicsWithTopics:v9 forHomeRouterWithUUID:v20];

      uint64_t v12 = (void *)v20;
    }

    uint64_t v12 = v21;
LABEL_11:
  }

  return v12;
}

- (id)_currentHome
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  char v3 = [(HMDHomeManager *)self homes];
  uint64_t v4 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v16;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        id v9 = [v8 uuid];
        id v10 = [(HMDHomeManager *)self currentHomeUUID];
        char v11 = objc_msgSend(v9, "hmf_isEqualToUUID:", v10);

        if (v11)
        {
          id v12 = v8;
          goto LABEL_11;
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

  char v3 = [(HMDHomeManager *)self homes];
  id v12 = [v3 firstObject];
LABEL_11:
  id v13 = v12;

  return v13;
}

- (BOOL)isNetworkConnectionAvailable
{
  char v3 = [(HMDHomeManager *)self reachabilityMonitor];

  if (!v3) {
    return 0;
  }
  uint64_t v4 = [(HMDHomeManager *)self reachabilityMonitor];
  char v5 = [v4 isReachable];

  return v5;
}

- (BOOL)isCloudAccountActive
{
  uint64_t v2 = [(HMDHomeManager *)self cloudDataSyncManager];
  char v3 = [v2 accountActive];

  return v3;
}

- (BOOL)legacyZoneHasRecordsAvailable
{
  uint64_t v2 = [(HMDHomeManager *)self cloudDataSyncManager];
  char v3 = [v2 legacyZoneHasRecordsAvailable];

  return v3;
}

- (void)multiUserStatusController:(id)a3 statusDidChange:(int64_t)a4
{
  id v5 = [(HMDHomeManager *)self uuid];
  [(HMDHomeManager *)self updateGenerationCounterWithReason:@"MultiUserStatusChanged" sourceUUID:v5 shouldNotifyClients:1];
}

- (void)handleRemoteUserClientCloudShareRepairRequest:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self userCloudShareManager];
  [v5 handleRemoteUserClientCloudShareRepairRequest:v4];
}

- (void)handleRemoteUserClientCloudShareRequest:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self userCloudShareManager];
  [v5 handleRemoteUserClientCloudShareRequest:v4];
}

- (void)_cleanChangesIfNoAddChangeObjectID:(id)a3 completion:(id)a4
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  if (v6)
  {
    *(void *)&long long v41 = 0;
    *((void *)&v41 + 1) = &v41;
    uint64_t v42 = 0x2020000000;
    char v43 = 0;
    id v8 = [MEMORY[0x1E4F1CA80] set];
    objc_initWeak(&location, self);
    id v9 = [HMDBackingStoreLogFetchOperation alloc];
    v31[0] = MEMORY[0x1E4F143A8];
    v31[1] = 3221225472;
    void v31[2] = __64__HMDHomeManager__cleanChangesIfNoAddChangeObjectID_completion___block_invoke;
    v31[3] = &unk_1E6A16BF8;
    objc_copyWeak(&v35, &location);
    id v10 = v6;
    id v32 = v10;
    id v11 = v8;
    id v33 = v11;
    uint64_t v34 = &v41;
    id v12 = [(HMDBackingStoreLogFetchOperation *)v9 initWithNeedsPushTo:2 result:v31];
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 3221225472;
    v25[2] = __64__HMDHomeManager__cleanChangesIfNoAddChangeObjectID_completion___block_invoke_1503;
    v25[3] = &unk_1E6A16C48;
    objc_copyWeak(&v30, &location);
    uint64_t v29 = &v41;
    id v13 = v11;
    id v26 = v13;
    id v14 = v10;
    id v27 = v14;
    id v28 = v7;
    long long v15 = (void *)MEMORY[0x1D9452090]([(HMDBackingStoreOperation *)v12 setResultBlock:v25]);
    long long v16 = self;
    HMFGetOSLogHandle();
    long long v17 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      long long v18 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v38 = v18;
      __int16 v39 = 2112;
      id v40 = v14;
      _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_DEBUG, "%{public}@Cleaning of objects for %@ from home manager datastore started", buf, 0x16u);
    }
    uint64_t v19 = [(HMDHomeManager *)v16 backingStore];
    [v19 submit:v12];

    objc_destroyWeak(&v30);
    objc_destroyWeak(&v35);
    objc_destroyWeak(&location);

    _Block_object_dispose(&v41, 8);
  }
  else
  {
    uint64_t v20 = (void *)MEMORY[0x1D9452090]();
    id v21 = self;
    int v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      int v23 = HMFGetLogIdentifier();
      LODWORD(v41) = 138543362;
      *(void *)((char *)&v41 + 4) = v23;
      _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_ERROR, "%{public}@ObjectID must be defined", (uint8_t *)&v41, 0xCu);
    }
    __int16 v24 = [MEMORY[0x1E4F28C58] hmErrorWithCode:20];
    (*((void (**)(id, void, void *))v7 + 2))(v7, 0, v24);
  }
}

uint64_t __64__HMDHomeManager__cleanChangesIfNoAddChangeObjectID_completion___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v11 = v7;
  uint64_t v12 = [v11 countByEnumeratingWithState:&v34 objects:v42 count:16];
  if (v12)
  {
    uint64_t v13 = v12;
    id v31 = v9;
    id v32 = v8;
    uint64_t v14 = *(void *)v35;
    uint64_t v33 = a1;
    while (2)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v35 != v14) {
          objc_enumerationMutation(v11);
        }
        long long v16 = *(void **)(*((void *)&v34 + 1) + 8 * i);
        long long v17 = [v16 uuid];
        int v18 = [v17 isEqual:*(void *)(a1 + 32)];

        if (v18)
        {
          if ([v16 objectChangeType] == 1 && !objc_msgSend(*(id *)(a1 + 40), "count"))
          {
            uint64_t v29 = 0;
            *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
            goto LABEL_16;
          }
          uint64_t v19 = (void *)MEMORY[0x1D9452090]();
          id v20 = WeakRetained;
          id v21 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            uint64_t v22 = v13;
            uint64_t v23 = v14;
            id v24 = v11;
            v26 = id v25 = WeakRetained;
            *(_DWORD *)buf = 138543618;
            __int16 v39 = v26;
            __int16 v40 = 2112;
            long long v41 = v16;
            _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_DEBUG, "%{public}@Removing object change from home manager transaction store %@", buf, 0x16u);

            id WeakRetained = v25;
            id v11 = v24;
            uint64_t v14 = v23;
            uint64_t v13 = v22;
            a1 = v33;
          }

          id v27 = *(void **)(a1 + 40);
          id v28 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v16, "bsoLogRowID"));
          [v27 addObject:v28];
        }
      }
      uint64_t v13 = [v11 countByEnumeratingWithState:&v34 objects:v42 count:16];
      if (v13) {
        continue;
      }
      break;
    }
    uint64_t v29 = 1;
LABEL_16:
    id v9 = v31;
    id v8 = v32;
  }
  else
  {
    uint64_t v29 = 1;
  }

  return v29;
}

void __64__HMDHomeManager__cleanChangesIfNoAddChangeObjectID_completion___block_invoke_1503(uint64_t a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  id v5 = WeakRetained;
  if (v3
    || !WeakRetained
    || *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)
    || ![*(id *)(a1 + 32) count])
  {
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24), v3);
    }
  }
  else
  {
    id v7 = [HMDBackingStoreLogUpdateOperation alloc];
    id v8 = [*(id *)(a1 + 32) allObjects];
    id v9 = [(HMDBackingStoreLogUpdateOperation *)v7 initWithRowIDs:v8 successfullyPushedTo:3];

    uint64_t v18 = MEMORY[0x1E4F143A8];
    uint64_t v19 = 3221225472;
    id v20 = __64__HMDHomeManager__cleanChangesIfNoAddChangeObjectID_completion___block_invoke_2;
    id v21 = &unk_1E6A16C20;
    objc_copyWeak(&v25, (id *)(a1 + 64));
    id v22 = *(id *)(a1 + 40);
    id v10 = *(id *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 56);
    id v23 = v10;
    uint64_t v24 = v11;
    uint64_t v12 = (void *)MEMORY[0x1D9452090]([(HMDBackingStoreOperation *)v9 setResultBlock:&v18]);
    id v13 = v5;
    HMFGetOSLogHandle();
    uint64_t v14 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      long long v15 = HMFGetLogIdentifier();
      uint64_t v16 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      id v27 = v15;
      __int16 v28 = 2112;
      uint64_t v29 = v16;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_DEBUG, "%{public}@Scheduling cleanup of objects for %@ in home manager datastore", buf, 0x16u);
    }
    long long v17 = objc_msgSend(v13, "backingStore", v18, v19, v20, v21);
    [v17 submit:v9];

    objc_destroyWeak(&v25);
  }
}

void __64__HMDHomeManager__cleanChangesIfNoAddChangeObjectID_completion___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = WeakRetained;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    id v8 = HMFGetLogIdentifier();
    uint64_t v9 = *(void *)(a1 + 32);
    int v11 = 138543618;
    uint64_t v12 = v8;
    __int16 v13 = 2112;
    uint64_t v14 = v9;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Cleaned objects for %@ in home manager datastore", (uint8_t *)&v11, 0x16u);
  }
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(uint64_t, void, id))(v10 + 16))(v10, *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), v3);
  }
}

- (id)modelObjectWithChangeType:(unint64_t)a3 version:(int64_t)a4
{
  id v6 = objc_opt_class();
  id v7 = [(HMDHomeManager *)self uuid];
  id v8 = [v6 emptyModelObjectWithChangeType:a3 homeManagerUUID:v7];

  uint64_t v9 = [(HMDHomeManager *)self primaryHomeUUID];

  if (v9)
  {
    uint64_t v10 = [(HMDHomeManager *)self primaryHomeUUID];
    int v11 = [v10 UUIDString];
    [v8 setPrimaryHomeUUID:v11];
  }
  uint64_t v12 = [(HMDHomeManager *)self cloudZones];
  __int16 v13 = +[HMDCloudZoneInformation cloudZoneInformationWithCloudZones:v12];
  [v8 setCloudZoneInformation:v13];

  return v8;
}

- (id)modelObjectWithChangeType:(unint64_t)a3
{
  return [(HMDHomeManager *)self modelObjectWithChangeType:a3 version:4];
}

- (id)backingStoreObjects:(int64_t)a3
{
  id v5 = [MEMORY[0x1E4F1CA48] array];
  id v6 = [(HMDHomeManager *)self modelObjectWithChangeType:1 version:a3];
  [v5 addObject:v6];

  if (a3 >= 3)
  {
    id v7 = [(HMDHomeManager *)self appData];

    if (v7)
    {
      id v8 = [(HMDHomeManager *)self appData];
      uint64_t v9 = [v8 modelObjectWithChangeType:1];
      [v5 addObject:v9];
    }
  }
  return v5;
}

- (void)transactionObjectRemoved:(id)a3 message:(id)a4
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)MEMORY[0x1D9452090]();
  uint64_t v9 = self;
  uint64_t v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    int v11 = HMFGetLogIdentifier();
    int v36 = 138543618;
    long long v37 = v11;
    __int16 v38 = 2112;
    id v39 = v6;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@transactionObjectRemoved: %@", (uint8_t *)&v36, 0x16u);
  }
  id v12 = v6;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    __int16 v13 = v12;
  }
  else {
    __int16 v13 = 0;
  }
  id v14 = v13;

  if (v14)
  {
    [(HMDHomeManager *)v9 processHomeModelRemoved:v14 message:v7];
LABEL_38:

    goto LABEL_39;
  }
  id v15 = v12;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  id v17 = v16;

  if (v17)
  {
    [(HMDHomeManager *)v9 processSharedHomeModelRemoved:v17 message:v7];
    goto LABEL_38;
  }
  id v18 = v15;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  id v20 = v19;

  if (v20)
  {
    [(HMDHomeManager *)v9 _processRemoveUserManagementOperationModel:v20 message:v7];
    goto LABEL_38;
  }
  id v21 = v18;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v22 = v21;
  }
  else {
    id v22 = 0;
  }
  id v23 = v22;

  if (v23)
  {
    [(HMDHomeManager *)v9 processCloudZoneModelRemoved:v23 message:v7];
    goto LABEL_38;
  }
  id v24 = v21;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v25 = v24;
  }
  else {
    id v25 = 0;
  }
  id v26 = v25;

  if (v26)
  {
    [(HMDHomeManager *)v9 processAppDataModelRemove:v26 message:v7];
    goto LABEL_38;
  }
  id v27 = v24;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    __int16 v28 = v27;
  }
  else {
    __int16 v28 = 0;
  }
  id v29 = v28;

  if (v29)
  {
    uint64_t v30 = [(HMDHomeManager *)v9 appleAccountManager];
    id v31 = [v30 account];
    id v32 = [v31 modelIdentifier];
    uint64_t v33 = [v29 uuid];
    if ([v32 isEqual:v33])
    {
    }
    else
    {
      char v34 = [v30 isModelCurrentAccount:v29];

      if ((v34 & 1) == 0)
      {
        long long v35 = [(HMDHomeManager *)v9 remoteAccountManager];
        [v35 processAccountModelRemove:v29 message:v7];

        goto LABEL_37;
      }
    }
    [v30 processAccountModelRemove:v29 message:v7];
LABEL_37:

    goto LABEL_38;
  }
LABEL_39:
}

- (void)transactionObjectUpdated:(id)a3 newValues:(id)a4 message:(id)a5
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = v9;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v12 = v11;
  }
  else {
    id v12 = 0;
  }
  id v13 = v12;

  if (v13)
  {
    id v14 = [v13 uuid];
    id v15 = [(HMDHomeManager *)self _homeWithUUID:v14];

    if (v15)
    {
      [v15 transactionObjectUpdated:v13 newValues:v11 message:v10];
    }
    else
    {
      [(HMDHomeManager *)self processHomeModelAdd:v13 message:v10];
      if (+[HMDHAPMetadata shouldUploadToCloudAfterHomedReady])
      {
        uint64_t v19 = [(HMDHomeManager *)self homes];
        uint64_t v20 = [v19 count];

        if (v20 == 1)
        {
          id v21 = (void *)MEMORY[0x1D9452090]();
          id v22 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
          {
            id v23 = HMFGetLogIdentifier();
            int v52 = 138543362;
            uint64_t v53 = v23;
            _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_INFO, "%{public}@This is the first home being added and metadata upload flag is set.", (uint8_t *)&v52, 0xCu);
          }
          [(HMDHomeManager *)self evaluateToPushMetadataWhenHomeKitInUse];
        }
      }
    }
    goto LABEL_17;
  }
  id v16 = v11;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v17 = v16;
  }
  else {
    id v17 = 0;
  }
  id v18 = v17;

  if (v18)
  {
    [(HMDHomeManager *)self processSharedHomeModelUpdate:v18 message:v10];
LABEL_18:

    goto LABEL_19;
  }
  id v24 = v16;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v25 = v24;
  }
  else {
    id v25 = 0;
  }
  id v26 = v25;

  if (v26)
  {
    [(HMDHomeManager *)self processHomeManagerModelUpdate:v26 message:v10];
    goto LABEL_18;
  }
  id v27 = v24;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    __int16 v28 = v27;
  }
  else {
    __int16 v28 = 0;
  }
  id v29 = v28;

  if (v29)
  {
    uint64_t v30 = [v29 parentUUID];
    id v31 = [(HMDHomeManager *)self _homeWithUUID:v30];

    [v31 transactionObjectUpdated:v8 newValues:v29 message:v10];
    goto LABEL_18;
  }
  id v32 = v27;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v33 = v32;
  }
  else {
    uint64_t v33 = 0;
  }
  id v34 = v33;

  if (v34)
  {
    [(HMDHomeManager *)self _processUserManagementOperationModel:v34 message:v10];
    goto LABEL_18;
  }
  id v35 = v32;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    int v36 = v35;
  }
  else {
    int v36 = 0;
  }
  id v37 = v36;

  if (v37)
  {
    [(HMDHomeManager *)self processCloudZoneModelAdd:v37 message:v10];
    goto LABEL_18;
  }
  id v38 = v35;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v39 = v38;
  }
  else {
    id v39 = 0;
  }
  id v40 = v39;

  if (v40)
  {
    [(HMDHomeManager *)self processAppDataModelUpdate:v40 message:v10];
    goto LABEL_18;
  }
  id v41 = v38;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v42 = v41;
  }
  else {
    uint64_t v42 = 0;
  }
  id v43 = v42;

  if (v43)
  {
    [(HMDHomeManager *)self processMetadataModel:v43 message:v10];
    goto LABEL_18;
  }
  id v44 = v41;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v45 = v44;
  }
  else {
    uint64_t v45 = 0;
  }
  id v46 = v45;

  if (v46)
  {
    id v15 = [(HMDHomeManager *)self appleAccountManager];
    uint64_t v47 = [v15 account];
    uint64_t v48 = [v47 modelIdentifier];
    uint64_t v49 = [v46 uuid];
    if ([v48 isEqual:v49])
    {
    }
    else
    {
      char v50 = [v15 isModelCurrentAccount:v46];

      if ((v50 & 1) == 0)
      {
        uint64_t v51 = [(HMDHomeManager *)self remoteAccountManager];
        [v51 processAccountModel:v46 message:v10];

        goto LABEL_17;
      }
    }
    [v15 processAccountModel:v46 message:v10];
LABEL_17:

    goto LABEL_18;
  }
LABEL_19:
}

- (id)userWithMergeID:(id)a3
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v5 = [(HMDHomeManager *)self homes];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v14;
    while (2)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = [*(id *)(*((void *)&v13 + 1) + 8 * i) userWithMergeID:v4];
        if (v10)
        {
          id v11 = (void *)v10;
          goto LABEL_11;
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }
  id v11 = 0;
LABEL_11:

  return v11;
}

- (void)mobileAssetManager:(id)a3 didReceiveMetadata:(id)a4
{
}

- (void)archiveServerToken:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __37__HMDHomeManager_archiveServerToken___block_invoke;
  block[3] = &unk_1E6A19B30;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, block);
}

id __37__HMDHomeManager_archiveServerToken___block_invoke(uint64_t a1)
{
  return +[HMDPersistentStore archiveCloudServerTokenData:*(void *)(a1 + 32)];
}

- (void)_remoteAccessHealthMonitorTimerDidFire:(id)a3
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    uint64_t v19 = v7;
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Remote access health monitor timer fired, checking state for all homes", buf, 0xCu);
  }
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v8 = [(HMDHomeManager *)self homes];
  uint64_t v9 = [v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v14;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v14 != v11) {
          objc_enumerationMutation(v8);
        }
        [*(id *)(*((void *)&v13 + 1) + 8 * v12++) remoteAccessHealthMonitorTimerDidFire];
      }
      while (v10 != v12);
      uint64_t v10 = [v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v10);
  }
}

- (void)timerDidFire:(id)a3
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = [(HMDHomeManager *)self watchSyncRetryContextByRetryTimer];
  uint64_t v7 = [v6 objectForKey:v4];

  if (v7)
  {
    id v8 = (void *)MEMORY[0x1D9452090]();
    uint64_t v9 = self;
    uint64_t v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      int v45 = 138543874;
      id v46 = v11;
      __int16 v47 = 2112;
      uint64_t v48 = v7;
      __int16 v49 = 2112;
      id v50 = v4;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Retrying watch sync with retry context:%@ when timer fired: %@", (uint8_t *)&v45, 0x20u);
    }
    uint64_t v12 = [(HMDHomeManager *)v9 watchSyncRetryContextByRetryTimer];
    [v12 removeObjectForKey:v4];

    long long v13 = [HMDWatchSync alloc];
    long long v14 = [v7 watchSync];
    long long v15 = [v14 identifier];
    long long v16 = [v7 watchSync];
    id v17 = -[HMDWatchSync initWithIdentifier:syncOption:](v13, "initWithIdentifier:syncOption:", v15, [v16 syncOption]);

    uint64_t v18 = [v7 watchIdentifier];
    [(HMDHomeManager *)v9 _addSyncOperation:v17 forWatchWithIdentifier:v18];
  }
  else
  {
    id v19 = [(HMDHomeManager *)self remoteAccessHealthMonitorTimer];

    if (v19 == v4)
    {
      [(HMDHomeManager *)self _remoteAccessHealthMonitorTimerDidFire:v4];
    }
    else
    {
      id v20 = [(HMDHomeManager *)self watchPushDelayTimer];

      if (v20 == v4)
      {
        id v29 = (void *)MEMORY[0x1D9452090]();
        uint64_t v30 = self;
        id v31 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          id v32 = HMFGetLogIdentifier();
          int v45 = 138543362;
          id v46 = v32;
          _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_DEFAULT, "%{public}@Watch push delay timer fired, pushing to watches", (uint8_t *)&v45, 0xCu);
        }
        [(HMDHomeManager *)v30 _sendHomeDataToAllWatchesWithCompletion:0];
      }
      else
      {
        id v21 = [(HMDHomeManager *)self sharedHomesPushDelayTimer];

        if (v21 == v4)
        {
          uint64_t v33 = (void *)MEMORY[0x1D9452090]();
          id v34 = self;
          id v35 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = HMFGetLogIdentifier();
            int v45 = 138543362;
            id v46 = v36;
            _os_log_impl(&dword_1D49D5000, v35, OS_LOG_TYPE_DEFAULT, "%{public}@Shared homed push delay timer fired, pushing to shared users", (uint8_t *)&v45, 0xCu);
          }
          [(HMDHomeManager *)v34 _pushChangesToAllUsersOfAllHomes];
        }
        else
        {
          id v22 = [(HMDHomeManager *)self debounceHomesUpdateTimer];

          if (v22 == v4)
          {
            id v37 = (void *)MEMORY[0x1D9452090]();
            id v38 = self;
            id v39 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
            {
              id v40 = HMFGetLogIdentifier();
              int v45 = 138543362;
              id v46 = v40;
              _os_log_impl(&dword_1D49D5000, v39, OS_LOG_TYPE_DEFAULT, "%{public}@Debounce homes update timer has fired, posting homed did update notification", (uint8_t *)&v45, 0xCu);
            }
            [(HMDHomeManager *)v38 _notifyXPCClientsOfHomeConfigurationChange];
          }
          else
          {
            id v23 = [(HMDHomeManager *)self memoryMonitorLogEventTimer];

            if (v23 == v4)
            {
              id v41 = (void *)MEMORY[0x1D9452090]();
              uint64_t v42 = self;
              id v43 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
              {
                id v44 = HMFGetLogIdentifier();
                int v45 = 138543362;
                id v46 = v44;
                _os_log_impl(&dword_1D49D5000, v43, OS_LOG_TYPE_DEFAULT, "%{public}@Memory monitor log event timer has fired", (uint8_t *)&v45, 0xCu);
              }
              [(HMDHomeManager *)v42 _monitorMemoryUsage];
              [(HMDHomeManager *)v42 _updateHomesDiscoveredBonjourServicesMetrics];
            }
            else
            {
              id v24 = [(HMDHomeManager *)self debounceRegenerateAssistantSyncDataTimer];

              if (v24 == v4)
              {
                id v25 = (void *)MEMORY[0x1D9452090]();
                id v26 = self;
                id v27 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
                {
                  __int16 v28 = HMFGetLogIdentifier();
                  int v45 = 138543362;
                  id v46 = v28;
                  _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@Debounce Siri sync timer has fired, re-generating Siri sync data", (uint8_t *)&v45, 0xCu);
                }
                [(HMDHomeManager *)v26 _generateAssistantSyncDataAndIncrementVersion:1 requestSync:1 urgent:0 completion:0];
              }
            }
          }
        }
      }
    }
  }
}

- (void)__handleWatchDisconnected:(id)a3
{
  id v4 = [a3 userInfo];
  id v5 = [v4 objectForKeyedSubscript:@"HMDDeviceNotificationKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v6 = v5;
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;

  workQueue = self->_workQueue;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __44__HMDHomeManager___handleWatchDisconnected___block_invoke;
  v10[3] = &unk_1E6A197C8;
  void v10[4] = self;
  id v11 = v7;
  id v9 = v7;
  dispatch_async(workQueue, v10);
}

uint64_t __44__HMDHomeManager___handleWatchDisconnected___block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    id v5 = HMFGetLogIdentifier();
    uint64_t v6 = *(void *)(a1 + 40);
    int v8 = 138543618;
    id v9 = v5;
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_DEBUG, "%{public}@Received notification that connected watch was removed: %@", (uint8_t *)&v8, 0x16u);
  }
  return [*(id *)(a1 + 32) _checkAndAddWatchDevicesWithResend:0];
}

- (void)__handleWatchConnected:(id)a3
{
  id v4 = [a3 userInfo];
  id v5 = [v4 objectForKeyedSubscript:@"HMDDeviceNotificationKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = v6;

  workQueue = self->_workQueue;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __41__HMDHomeManager___handleWatchConnected___block_invoke;
  v10[3] = &unk_1E6A197C8;
  void v10[4] = self;
  id v11 = v7;
  id v9 = v7;
  dispatch_async(workQueue, v10);
}

uint64_t __41__HMDHomeManager___handleWatchConnected___block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    id v5 = HMFGetLogIdentifier();
    uint64_t v6 = *(void *)(a1 + 40);
    int v8 = 138543618;
    id v9 = v5;
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_DEBUG, "%{public}@Received notification that connected watch was added: %@", (uint8_t *)&v8, 0x16u);
  }
  return [*(id *)(a1 + 32) _checkAndAddWatchDevicesWithResend:0];
}

- (void)setupSession:(id)a3 didCloseWithError:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  int v8 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __49__HMDHomeManager_setupSession_didCloseWithError___block_invoke;
  block[3] = &unk_1E6A19668;
  void block[4] = self;
  id v12 = v6;
  id v13 = v7;
  id v9 = v7;
  id v10 = v6;
  dispatch_async(v8, block);
}

void __49__HMDHomeManager_setupSession_didCloseWithError___block_invoke(uint64_t a1)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = HMFGetLogIdentifier();
    id v6 = [*(id *)(a1 + 40) identifier];
    id v7 = *(void **)(a1 + 48);
    *(_DWORD *)buf = 138543874;
    BOOL v70 = v5;
    __int16 v71 = 2112;
    BOOL v72 = v6;
    __int16 v73 = 2112;
    BOOL v74 = v7;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Setup Session : %@, closed with error: %@", buf, 0x20u);
  }
  int v8 = [*(id *)(a1 + 40) setupTrackingInfo];
  id v9 = [v8 accessoryUUID];
  if (v9
    && ([*(id *)(a1 + 32) accessorySetupMetricDispatcherForAccessoryUUID:v9],
        id v10 = (HMDAccessorySetupMetricDispatcher *)objc_claimAutoreleasedReturnValue(),
        [(HMDAccessorySetupMetricDispatcher *)v10 updateTrackingInfo:v8],
        v10))
  {
    int v68 = 0;
  }
  else
  {
    uint64_t v11 = (void *)MEMORY[0x1D9452090]();
    id v12 = *(id *)(a1 + 32);
    id v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      long long v14 = HMFGetLogIdentifier();
      long long v15 = [*(id *)(a1 + 40) identifier];
      *(_DWORD *)buf = 138543874;
      BOOL v70 = v14;
      __int16 v71 = 2112;
      BOOL v72 = v15;
      __int16 v73 = 2112;
      BOOL v74 = v9;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Setup Session : %@, did not find existing setup metric dispatcher for accessory uuid: %@", buf, 0x20u);
    }
    long long v16 = [HMDAccessorySetupMetricDispatcher alloc];
    id v17 = [*(id *)(a1 + 32) workQueue];
    uint64_t v18 = [*(id *)(a1 + 40) identifier];
    id v10 = [(HMDAccessorySetupMetricDispatcher *)v16 initWithQueue:v17 trackingInfo:v8 setupSessionIdentifier:v18 homeManager:*(void *)(a1 + 32)];

    [(HMDAccessorySetupMetricDispatcher *)v10 setDelegate:*(void *)(a1 + 32)];
    int v68 = 1;
  }
  if ([*(id *)(a1 + 40) role] == 1)
  {
    id v19 = [*(id *)(a1 + 32) currentAccessorySetupMetricDispatcher];

    if (v19)
    {
      id v20 = [*(id *)(a1 + 32) currentAccessorySetupMetricDispatcher];
      [v20 markSetupBeginStage:2 error:*(void *)(a1 + 48)];
    }
  }
  if (!*(void *)(a1 + 48))
  {
    if (v9)
    {
      id v21 = [*(id *)(a1 + 32) accessoryWithUUID:v9];
      LODWORD(context) = v21 != 0;
      if (v21)
      {
        id v22 = (void *)MEMORY[0x1D9452090]();
        id v23 = *(id *)(a1 + 32);
        id v24 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          id v25 = HMFGetLogIdentifier();
          id v26 = [*(id *)(a1 + 40) identifier];
          *(_DWORD *)buf = 138543874;
          BOOL v70 = v25;
          __int16 v71 = 2112;
          BOOL v72 = v26;
          __int16 v73 = 2112;
          BOOL v74 = v21;
          _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_INFO, "%{public}@Submitting Repair Setup Session metric : %@ as accessory is already in the home %@", buf, 0x20u);
        }
        [(HMDAccessorySetupMetricDispatcher *)v10 markRepairSessionComplete];
      }
    }
    else
    {
      id v27 = (void *)MEMORY[0x1D9452090]();
      id v28 = *(id *)(a1 + 32);
      id v29 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        uint64_t v30 = HMFGetLogIdentifier();
        id v31 = [*(id *)(a1 + 40) identifier];
        *(_DWORD *)buf = 138543618;
        BOOL v70 = v30;
        __int16 v71 = 2112;
        BOOL v72 = v31;
        _os_log_impl(&dword_1D49D5000, v29, OS_LOG_TYPE_INFO, "%{public}@Submitting Setup Session metric : %@ as accessory was not provided in setup payload", buf, 0x16u);
      }
      LODWORD(context) = 1;
    }
    id v32 = objc_msgSend(v8, "accessoryIDSIdentifier", context);

    if (v32)
    {
      id v33 = objc_alloc(MEMORY[0x1E4F29128]);
      id v34 = [v8 accessoryIDSIdentifier];
      id v35 = (void *)[v33 initWithUUIDString:v34];

      if (v35)
      {
        int v36 = [*(id *)(a1 + 32) accessoryWithIDSIdentifier:v35];
        if (v36)
        {
          contexta = (void *)MEMORY[0x1D9452090]();
          id v37 = *(id *)(a1 + 32);
          id v38 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
          {
            id v39 = HMFGetLogIdentifier();
            id v40 = objc_msgSend(*(id *)(a1 + 40), "identifier", contexta);
            *(_DWORD *)buf = 138543874;
            BOOL v70 = v39;
            __int16 v71 = 2112;
            BOOL v72 = v40;
            __int16 v73 = 2112;
            BOOL v74 = v36;
            _os_log_impl(&dword_1D49D5000, v38, OS_LOG_TYPE_INFO, "%{public}@Submitting Repair Setup Session metric : %@ as accessory with matching IDS identifier is already in the home %@", buf, 0x20u);
          }
          [(HMDAccessorySetupMetricDispatcher *)v10 markRepairSessionComplete];
          LODWORD(contexta) = 1;
        }
      }
    }
    id v41 = objc_msgSend(v8, "accessoryCategory", contexta);
    uint64_t v42 = [v41 categoryType];
    int v43 = [v42 isEqualToString:*MEMORY[0x1E4F2C198]];

    if (v43)
    {
      id v44 = (void *)MEMORY[0x1D9452090]();
      id v45 = *(id *)(a1 + 32);
      id v46 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
      {
        __int16 v47 = HMFGetLogIdentifier();
        uint64_t v48 = [*(id *)(a1 + 40) identifier];
        *(_DWORD *)buf = 138543874;
        BOOL v70 = v47;
        __int16 v71 = 2112;
        BOOL v72 = v48;
        __int16 v73 = 2112;
        BOOL v74 = v9;
        _os_log_impl(&dword_1D49D5000, v46, OS_LOG_TYPE_INFO, "%{public}@Submitting Setup Session metric : %@ as accessory is an ATV %@", buf, 0x20u);
      }
    }
    else if (!contextb)
    {
      if (v68) {
        [*(id *)(a1 + 32) addAccessorySetupMetricDispatcher:v10];
      }
      goto LABEL_37;
    }
    [(HMDAccessorySetupMetricDispatcher *)v10 submit];
    [*(id *)(a1 + 32) removeAccessorySetupMetricDispatcherForAccessoryUUID:v9];
LABEL_37:
    __int16 v49 = [*(id *)(a1 + 40) setupTrackingInfo];
    objc_msgSend(*(id *)(a1 + 32), "setSetupEndTimestamp:", (double)(unint64_t)objc_msgSend(v49, "endTime"));

    goto LABEL_38;
  }
  [(HMDAccessorySetupMetricDispatcher *)v10 submit];
  [*(id *)(a1 + 32) removeAccessorySetupMetricDispatcherForAccessoryUUID:v9];
LABEL_38:
  id v50 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 24);
  os_unfair_lock_lock_with_options();
  uint64_t v51 = [*(id *)(a1 + 32) deviceSetupSessions];
  [v51 removeObject:*(void *)(a1 + 40)];

  os_unfair_lock_unlock(v50);
  if (!*(void *)(a1 + 48) && [*(id *)(a1 + 40) role] == 1)
  {
    int v52 = [MEMORY[0x1E4F5BE48] systemStore];
    uint64_t v53 = [v52 getLocalPairingIdentity:0];
    BOOL v54 = v53 == 0;

    if (!v54)
    {
      uint64_t v55 = (void *)MEMORY[0x1D9452090]();
      id v56 = *(id *)(a1 + 32);
      id v57 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
      {
        uint64_t v58 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        BOOL v70 = v58;
        _os_log_impl(&dword_1D49D5000, v57, OS_LOG_TYPE_INFO, "%{public}@Resetting legacy key transfer and starting cloud fetch", buf, 0xCu);
      }
      uint64_t v59 = [*(id *)(a1 + 32) keyTransferAgent];
      [v59 resetConfig];

      [*(id *)(a1 + 32) _updateCloudDataSyncWithAccountState:1];
      uint64_t v60 = [MEMORY[0x1E4F1CA60] dictionary];
      [v60 setObject:*(void *)(a1 + 48) forKeyedSubscript:@"TTSU.error"];
      uint64_t v61 = *(void **)(a1 + 32);
      uint64_t v62 = (void *)[v60 copy];
      logAndPostNotification(@"TTSU.Finished.NotificationKey", v61, v62);

      uint64_t v63 = [*(id *)(a1 + 32) userDefaults];
      [v63 setBool:1 forKey:@"TTSU.Finished"];
    }
  }
  if ([*(id *)(a1 + 40) role] == 1)
  {
    uint64_t v64 = [*(id *)(a1 + 32) currentAccessorySetupMetricDispatcher];
    [v64 markSetupEndStage:2 error:*(void *)(a1 + 48)];
  }
}

- (void)setupSession:(id)a3 didReceiveAccessoryWithUUID:(id)a4
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  int v8 = (void *)MEMORY[0x1D9452090]();
  id v9 = self;
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    id v12 = [v6 identifier];
    int v18 = 138543874;
    id v19 = v11;
    __int16 v20 = 2112;
    id v21 = v12;
    __int16 v22 = 2112;
    id v23 = v7;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Setup Session : %@, received accessory uuid: %@", (uint8_t *)&v18, 0x20u);
  }
  if (![v6 role])
  {
    id v13 = [HMDAccessorySetupMetricDispatcher alloc];
    long long v14 = [(HMDHomeManager *)v9 workQueue];
    long long v15 = [v6 setupTrackingInfo];
    long long v16 = [v6 identifier];
    id v17 = [(HMDAccessorySetupMetricDispatcher *)v13 initWithQueue:v14 trackingInfo:v15 setupSessionIdentifier:v16 homeManager:v9];

    [(HMDAccessorySetupMetricDispatcher *)v17 setDelegate:v9];
    [(HMDHomeManager *)v9 addAccessorySetupMetricDispatcher:v17];
  }
}

- (void)__handleCompanionUpdated:(id)a3
{
  id v4 = +[HMDCompanionManager sharedManager];
  id v5 = [v4 companion];

  id v6 = [(HMDHomeManager *)self workQueue];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __43__HMDHomeManager___handleCompanionUpdated___block_invoke;
  v8[3] = &unk_1E6A197C8;
  id v9 = v5;
  id v10 = self;
  id v7 = v5;
  dispatch_async(v6, v8);
}

void __43__HMDHomeManager___handleCompanionUpdated___block_invoke(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    id v4 = HMFGetLogIdentifier();
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543618;
    id v25 = v4;
    __int16 v26 = 2112;
    uint64_t v27 = v5;
    _os_log_impl(&dword_1D49D5000, v3, OS_LOG_TYPE_DEBUG, "%{public}@Received notification that the companion changed: %@", buf, 0x16u);
  }
  id v6 = (void *)MEMORY[0x1D9452090]([*(id *)(a1 + 40) _checkAndInformCompanionDevice]);
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v25 = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Electing companion based off of changed companion device", buf, 0xCu);
  }
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v9 = objc_msgSend(*(id *)(a1 + 40), "homes", 0);
  uint64_t v10 = [v9 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v20 != v12) {
          objc_enumerationMutation(v9);
        }
        long long v14 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        long long v15 = *(void **)(a1 + 40);
        long long v16 = [v14 uuid];
        [v15 electRemoteAccessPeerForHome:v16];

        if (*(void *)(a1 + 32))
        {
          id v17 = [v14 primaryResident];
          int v18 = [v17 device];
        }
        else
        {
          int v18 = 0;
        }
        [v14 resubscribeForNotificationsOnResident:v18];
      }
      uint64_t v11 = [v9 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v11);
  }
}

- (void)_handleUpdatedCurrentDevice:(id)a3
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = (void *)MEMORY[0x1D9452090]();
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    int v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    int v43 = v8;
    __int16 v44 = 2112;
    id v45 = v4;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Received notification that current device was updated: %@", buf, 0x16u);
  }
  if (v4) {
    [(HMDHomeManager *)self startLocalTransport];
  }
  else {
    [(HMDHomeManager *)self stopLocalTransport];
  }
  id v9 = +[HMDDeviceCapabilities deviceCapabilities];
  int v10 = [v9 isResidentCapable];

  if (v10)
  {
    if (v4)
    {
      [(HMDHomeManager *)self notifyClientsResidentCapable:1];
      if (![(HMDHomeManager *)self residentEnabledState])
      {
        uint64_t v11 = [v4 productInfo];
        uint64_t v12 = [v11 productClass];

        if (v12 == 3)
        {
          long long v38 = 0u;
          long long v39 = 0u;
          long long v36 = 0u;
          long long v37 = 0u;
          id v13 = [(HMDHomeManager *)self homes];
          uint64_t v14 = [v13 countByEnumeratingWithState:&v36 objects:v41 count:16];
          if (v14)
          {
            uint64_t v15 = *(void *)v37;
            while (2)
            {
              for (uint64_t i = 0; i != v14; ++i)
              {
                if (*(void *)v37 != v15) {
                  objc_enumerationMutation(v13);
                }
                id v17 = *(void **)(*((void *)&v36 + 1) + 8 * i);
                if ([v17 isOwnerUser])
                {
                  int v18 = [v17 residentCapableDevices];
                  int v19 = [v18 containsObject:v4];

                  if (v19)
                  {
                    long long v22 = (void *)MEMORY[0x1D9452090]();
                    id v23 = self;
                    uint64_t v24 = HMFGetOSLogHandle();
                    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
                    {
                      id v25 = HMFGetLogIdentifier();
                      *(_DWORD *)buf = 138543362;
                      int v43 = v25;
                      _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_INFO, "%{public}@Found ourselves as a resident in one or more homes, enabling ourselves as a resident device", buf, 0xCu);
                    }
                    uint64_t v14 = 1;
                    goto LABEL_25;
                  }
                }
              }
              uint64_t v14 = [v13 countByEnumeratingWithState:&v36 objects:v41 count:16];
              if (v14) {
                continue;
              }
              break;
            }
          }
LABEL_25:

          long long v20 = self;
          uint64_t v21 = v14;
        }
        else
        {
          long long v20 = self;
          uint64_t v21 = 1;
        }
        [(HMDHomeManager *)v20 _updateResidentEnabledOnThisDevice:v21 forceNotify:0 message:0];
      }
    }
    else
    {
      [(HMDHomeManager *)self notifyClientsResidentCapable:0];
    }
  }
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  __int16 v26 = [(HMDHomeManager *)self homes];
  uint64_t v27 = [v26 countByEnumeratingWithState:&v32 objects:v40 count:16];
  if (v27)
  {
    uint64_t v28 = v27;
    uint64_t v29 = *(void *)v33;
    do
    {
      for (uint64_t j = 0; j != v28; ++j)
      {
        if (*(void *)v33 != v29) {
          objc_enumerationMutation(v26);
        }
        id v31 = [*(id *)(*((void *)&v32 + 1) + 8 * j) migrateOwnedTriggers];
        if (v31) {
          [(HMDHomeManager *)self _saveWithReason:@"kAddTriggerRequestKey" information:v31 postSyncNotification:0];
        }
      }
      uint64_t v28 = [v26 countByEnumeratingWithState:&v32 objects:v40 count:16];
    }
    while (v28);
  }
}

- (void)__handleUpdatedCurrentDevice:(id)a3
{
  id v4 = [a3 userInfo];
  uint64_t v5 = [v4 objectForKeyedSubscript:@"HMDDeviceNotificationKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v6 = v5;
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;

  if ([v7 isCurrentDevice])
  {
    int v8 = [(HMDHomeManager *)self workQueue];
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __47__HMDHomeManager___handleUpdatedCurrentDevice___block_invoke;
    v9[3] = &unk_1E6A197C8;
    void v9[4] = self;
    id v10 = v7;
    dispatch_async(v8, v9);
  }
}

uint64_t __47__HMDHomeManager___handleUpdatedCurrentDevice___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleUpdatedCurrentDevice:*(void *)(a1 + 40)];
}

- (void)__handleDeviceCapabilitiesUpdated:(id)a3
{
  v19[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self appleAccountManager];
  id v6 = [v5 device];

  if (v6)
  {
    id v7 = [v4 object];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      int v8 = v7;
    }
    else {
      int v8 = 0;
    }
    id v9 = v8;

    if (v9)
    {
      id v10 = [v6 capabilities];

      if (v10 == v9)
      {
        uint64_t v11 = [v4 userInfo];
        uint64_t v12 = (void *)MEMORY[0x1E4F1CAD0];
        v19[0] = objc_opt_class();
        id v13 = [MEMORY[0x1E4F1C978] arrayWithObjects:v19 count:1];
        uint64_t v14 = [v12 setWithArray:v13];
        uint64_t v15 = objc_msgSend(v11, "hmf_arrayForKey:ofClasses:", @"HMDDeviceCapabilitiesUpdatedDifferingFieldsNotificationKey", v14);

        if ([v15 count])
        {
          long long v16 = [(HMDHomeManager *)self workQueue];
          v17[0] = MEMORY[0x1E4F143A8];
          v17[1] = 3221225472;
          v17[2] = __52__HMDHomeManager___handleDeviceCapabilitiesUpdated___block_invoke;
          v17[3] = &unk_1E6A197C8;
          void v17[4] = self;
          id v18 = v6;
          dispatch_async(v16, v17);
        }
      }
    }
  }
}

uint64_t __52__HMDHomeManager___handleDeviceCapabilitiesUpdated___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleUpdatedCurrentDevice:*(void *)(a1 + 40)];
}

- (void)verifyCurrentDeviceResidentStatus
{
  id v3 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __51__HMDHomeManager_verifyCurrentDeviceResidentStatus__block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v3, block);
}

uint64_t __51__HMDHomeManager_verifyCurrentDeviceResidentStatus__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) isResidentCapable];
  if (result)
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = [v3 isResidentEnabled];
    return [v3 _updateResidentEnabledOnThisDevice:v4 forceNotify:1 message:0];
  }
  return result;
}

- (void)__accountRegistryRemovedAccount:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __50__HMDHomeManager___accountRegistryRemovedAccount___block_invoke;
  v7[3] = &unk_1E6A197C8;
  id v8 = v4;
  id v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __50__HMDHomeManager___accountRegistryRemovedAccount___block_invoke(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  id v3 = [v2 objectForKeyedSubscript:@"HMDAccountNotificationKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;

  id v6 = (void *)MEMORY[0x1D9452090]();
  id v7 = *(id *)(a1 + 40);
  id v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    int v15 = 138543618;
    long long v16 = v9;
    __int16 v17 = 2112;
    id v18 = v5;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Received notification that account was removed: %@", (uint8_t *)&v15, 0x16u);
  }
  if ([v5 isCurrentAccount])
  {
    id v10 = (void *)MEMORY[0x1D9452090]();
    id v11 = *(id *)(a1 + 40);
    uint64_t v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      int v15 = 138543362;
      long long v16 = v13;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@The removed account is the current account", (uint8_t *)&v15, 0xCu);
    }
    [*(id *)(a1 + 40) stopLocalTransport];
    uint64_t v14 = [*(id *)(a1 + 40) cloudDataSyncStateFilter];
    [v14 updateCurrentAccount:v5];

    [*(id *)(a1 + 40) saveWithReason:@"currentAccountUpdated" information:0 saveOptions:0];
    +[HMDHH2FrameworkSwitch switchBackToHH1AndDoNotLaunchDueToPrimaryAccountRemoval];
  }
}

- (void)__accountRegistryAddedAccount:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __48__HMDHomeManager___accountRegistryAddedAccount___block_invoke;
  v7[3] = &unk_1E6A197C8;
  id v8 = v4;
  id v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __48__HMDHomeManager___accountRegistryAddedAccount___block_invoke(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  id v3 = [v2 objectForKeyedSubscript:@"HMDAccountNotificationKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;

  id v6 = (void *)MEMORY[0x1D9452090]();
  id v7 = *(id *)(a1 + 40);
  id v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    uint64_t v42 = v9;
    __int16 v43 = 2112;
    id v44 = v5;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Received notification that account was added: %@", buf, 0x16u);
  }
  if ([v5 isCurrentAccount])
  {
    id v10 = (void *)MEMORY[0x1D9452090]();
    id v11 = *(id *)(a1 + 40);
    uint64_t v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v42 = v13;
      __int16 v43 = 2112;
      id v44 = v5;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Received notification that current account changed to: %@", buf, 0x16u);
    }
    uint64_t v14 = [*(id *)(a1 + 40) cloudDataSyncStateFilter];
    id v28 = v5;
    [v14 updateCurrentAccount:v5];

    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    id obj = [*(id *)(a1 + 40) homes];
    uint64_t v15 = [obj countByEnumeratingWithState:&v35 objects:v40 count:16];
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v30 = *(void *)v36;
      do
      {
        for (uint64_t i = 0; i != v16; ++i)
        {
          if (*(void *)v36 != v30) {
            objc_enumerationMutation(obj);
          }
          id v18 = *(void **)(*((void *)&v35 + 1) + 8 * i);
          long long v31 = 0u;
          long long v32 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
          uint64_t v19 = [v18 triggers];
          uint64_t v20 = [v19 countByEnumeratingWithState:&v31 objects:v39 count:16];
          if (v20)
          {
            uint64_t v21 = v20;
            uint64_t v22 = *(void *)v32;
            do
            {
              for (uint64_t j = 0; j != v21; ++j)
              {
                if (*(void *)v32 != v22) {
                  objc_enumerationMutation(v19);
                }
                uint64_t v24 = *(void **)(*((void *)&v31 + 1) + 8 * j);
                id v25 = [v24 owningDevice];

                if (!v25)
                {
                  __int16 v26 = [*(id *)(a1 + 40) appleAccountManager];
                  uint64_t v27 = [v26 device];
                  [v24 setOwningDevice:v27];
                }
              }
              uint64_t v21 = [v19 countByEnumeratingWithState:&v31 objects:v39 count:16];
            }
            while (v21);
          }
        }
        uint64_t v16 = [obj countByEnumeratingWithState:&v35 objects:v40 count:16];
      }
      while (v16);
    }

    [*(id *)(a1 + 40) saveWithReason:@"currentAccountUpdated" information:0 saveOptions:0];
    id v5 = v28;
  }
}

- (void)_notifyXPCClientsOfUpdatedDevices
{
  v26[1] = *MEMORY[0x1E4F143B8];
  id v3 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v3);

  id v4 = (void *)MEMORY[0x1E4F65480];
  uint64_t v5 = *MEMORY[0x1E4F2D370];
  uint64_t v25 = *MEMORY[0x1E4F2D368];
  id v6 = (void *)MEMORY[0x1E4F1CAD0];
  id v7 = [(HMDHomeManager *)self appleAccountManager];
  id v8 = [v7 account];
  id v9 = [v8 devices];
  id v10 = [v6 setWithArray:v9];
  id v11 = encodeRootObjectForIncomingXPCMessage(v10, 0);
  v26[0] = v11;
  uint64_t v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:&v25 count:1];
  id v13 = [v4 entitledMessageWithName:v5 messagePayload:v12];

  uint64_t v14 = (void *)MEMORY[0x1D9452090]();
  uint64_t v15 = self;
  uint64_t v16 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    __int16 v17 = HMFGetLogIdentifier();
    id v18 = [v13 shortDescription];
    int v21 = 138543618;
    uint64_t v22 = v17;
    __int16 v23 = 2112;
    uint64_t v24 = v18;
    _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, "%{public}@Notifying clients of updated devices with message: %@", (uint8_t *)&v21, 0x16u);
  }
  uint64_t v19 = [(HMDHomeManager *)v15 messageDispatcher];
  uint64_t v20 = [(HMDHomeManager *)v15 uuid];
  [v19 sendMessage:v13 target:v20];
}

- (void)__accountRemovedDevice:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __41__HMDHomeManager___accountRemovedDevice___block_invoke;
  v7[3] = &unk_1E6A197C8;
  id v8 = v4;
  id v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __41__HMDHomeManager___accountRemovedDevice___block_invoke(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1 + 32) object];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;

  uint64_t v5 = [*(id *)(a1 + 32) userInfo];
  id v6 = [v5 objectForKeyedSubscript:@"HMDDeviceNotificationKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v7 = v6;
  }
  else {
    id v7 = 0;
  }
  id v8 = v7;

  if ([v4 isCurrentAccount])
  {
    id v9 = (void *)MEMORY[0x1D9452090]();
    id v10 = *(id *)(a1 + 40);
    id v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v26 = v12;
      __int16 v27 = 2112;
      id v28 = v8;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Received notification that device was removed from our account: %@", buf, 0x16u);
    }
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v13 = objc_msgSend(*(id *)(a1 + 40), "homes", 0);
    uint64_t v14 = [v13 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = *(void *)v21;
      do
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          if (*(void *)v21 != v16) {
            objc_enumerationMutation(v13);
          }
          id v18 = *(void **)(*((void *)&v20 + 1) + 8 * i);
          if ([v18 isOwnerUser]) {
            [v18 removeResidentCapableDevice:v8];
          }
        }
        uint64_t v15 = [v13 countByEnumeratingWithState:&v20 objects:v24 count:16];
      }
      while (v15);
    }

    [*(id *)(a1 + 40) _checkForRemotePeers];
    uint64_t v19 = [*(id *)(a1 + 40) cloudDataSyncStateFilter];
    [v19 updateCurrentAccount:v4];

    [*(id *)(a1 + 40) _notifyXPCClientsOfUpdatedDevices];
    [*(id *)(a1 + 40) _updateCurrentUserEligibleForOwnerToAutoMigration];
  }
}

- (void)__handleDeviceUpdatedNotification:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __52__HMDHomeManager___handleDeviceUpdatedNotification___block_invoke;
  v7[3] = &unk_1E6A197C8;
  id v8 = v4;
  id v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __52__HMDHomeManager___handleDeviceUpdatedNotification___block_invoke(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1 + 32) object];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;

  uint64_t v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = *(id *)(a1 + 40);
  id v7 = HMFGetOSLogHandle();
  id v8 = v7;
  if (v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v9 = HMFGetLogIdentifier();
      int v14 = 138543618;
      uint64_t v15 = v9;
      __int16 v16 = 2112;
      id v17 = v4;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Received notification that device updated: %@", (uint8_t *)&v14, 0x16u);
    }
    [*(id *)(a1 + 40) _notifyXPCClientsOfUpdatedDevices];
    [*(id *)(a1 + 40) _updateCurrentUserEligibleForOwnerToAutoMigration];
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v10 = HMFGetLogIdentifier();
      id v11 = [*(id *)(a1 + 32) object];
      uint64_t v12 = [*(id *)(a1 + 32) object];
      int v14 = 138543874;
      uint64_t v15 = v10;
      __int16 v16 = 2112;
      id v17 = v11;
      __int16 v18 = 2112;
      id v19 = (id)objc_opt_class();
      id v13 = v19;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_ERROR, "%{public}@Notification object was not an HMDDevice: %@ (%@)", (uint8_t *)&v14, 0x20u);
    }
  }
}

- (void)__accountAddedDevice:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __39__HMDHomeManager___accountAddedDevice___block_invoke;
  v7[3] = &unk_1E6A197C8;
  id v8 = v4;
  id v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __39__HMDHomeManager___accountAddedDevice___block_invoke(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1 + 32) object];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;

  uint64_t v5 = [*(id *)(a1 + 32) userInfo];
  id v6 = [v5 objectForKeyedSubscript:@"HMDDeviceNotificationKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v7 = v6;
  }
  else {
    id v7 = 0;
  }
  id v8 = v7;

  if ([v4 isCurrentAccount])
  {
    id v9 = (void *)MEMORY[0x1D9452090]();
    id v10 = *(id *)(a1 + 40);
    id v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = HMFGetLogIdentifier();
      int v14 = 138543618;
      uint64_t v15 = v12;
      __int16 v16 = 2112;
      id v17 = v8;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Received notification that device was added to our account: %@", (uint8_t *)&v14, 0x16u);
    }
    [*(id *)(a1 + 40) _checkForRemotePeers];
    id v13 = [*(id *)(a1 + 40) cloudDataSyncStateFilter];
    [v13 updateCurrentAccount:v4];

    [*(id *)(a1 + 40) _notifyXPCClientsOfUpdatedDevices];
    [*(id *)(a1 + 40) _updateCurrentUserEligibleForOwnerToAutoMigration];
  }
}

- (void)_updateCurrentUserEligibleForOwnerToAutoMigration
{
  id v3 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v3);

  id v4 = [(HMDHomeManager *)self hh2AutoMigrationEligibilityChecker];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __67__HMDHomeManager__updateCurrentUserEligibleForOwnerToAutoMigration__block_invoke;
  v5[3] = &unk_1E6A16BD0;
  v5[4] = self;
  [v4 fetchIsCurrentUserEligibleForMigrationByOwnerWithCompletion:v5];
}

void __67__HMDHomeManager__updateCurrentUserEligibleForOwnerToAutoMigration__block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v7 = objc_msgSend(*(id *)(a1 + 32), "homes", 0);
  uint64_t v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v15 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        if (([v12 isOwnerUser] & 1) == 0)
        {
          id v13 = [v12 currentUser];
          objc_msgSend(v13, "updateSupportsHH2MigrationByOwnerManual:supportsHH2MigrationByOwnerAuto:", objc_msgSend(v5, "isEligible"), objc_msgSend(v6, "isEligible"));
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v9);
  }
}

- (void)updateCurrentUserEligibleForOwnerToAutoMigration
{
  workQueue = self->_workQueue;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __66__HMDHomeManager_updateCurrentUserEligibleForOwnerToAutoMigration__block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(workQueue, block);
}

uint64_t __66__HMDHomeManager_updateCurrentUserEligibleForOwnerToAutoMigration__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateCurrentUserEligibleForOwnerToAutoMigration];
}

- (id)updatedUUIDForDiscoveredUnpairedAccessory:(id)a3
{
  return 0;
}

- (void)accessoryBrowserDidFindNewAccessory
{
  id v3 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __53__HMDHomeManager_accessoryBrowserDidFindNewAccessory__block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v3, block);
}

uint64_t __53__HMDHomeManager_accessoryBrowserDidFindNewAccessory__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _processAnyPendingRequestsForRemoteAccess:0];
}

- (void)saveAccessAllowedWhenLockedSettingToLocalDisk
{
  v29[1] = *MEMORY[0x1E4F143B8];
  id v3 = (void *)MEMORY[0x1D9452090](self, a2);
  id v28 = @"kAccessAllowedWhenLockedKey";
  id v4 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHomeManager isAccessAllowedWhenLocked](self, "isAccessAllowedWhenLocked"));
  v29[0] = v4;
  id v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v29 forKeys:&v28 count:1];

  id v6 = (void *)MEMORY[0x1D9452090]();
  id v7 = self;
  uint64_t v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = HMFGetLogIdentifier();
    int v22 = 138543618;
    long long v23 = v9;
    __int16 v24 = 2112;
    uint64_t v25 = v5;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Storing access allowed when locked :[%@]", (uint8_t *)&v22, 0x16u);
  }
  uint64_t v10 = (void *)[objc_alloc(MEMORY[0x1E4F28DB0]) initRequiringSecureCoding:1];
  [v10 encodeObject:v5 forKey:*MEMORY[0x1E4F284E8]];
  [v10 finishEncoding];
  id v11 = [v10 encodedData];
  if (v11)
  {
    uint64_t v12 = [(HMDHomeManager *)v7 accessAllowedWhenLockedSettingFileName];
    id v13 = +[HMDPersistentStore writeData:v11 toStorePath:v12 dataLabel:@"AccessAllowedWhenLockedSetting"];
    long long v14 = (void *)MEMORY[0x1D9452090]();
    long long v15 = v7;
    long long v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      long long v17 = HMFGetLogIdentifier();
      int v22 = 138543874;
      long long v23 = v17;
      __int16 v24 = 2112;
      uint64_t v25 = v13;
      __int16 v26 = 2112;
      __int16 v27 = v12;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, "%{public}@Stored [%@] bytes to [%@]", (uint8_t *)&v22, 0x20u);
    }
  }
  else
  {
    uint64_t v18 = (void *)MEMORY[0x1D9452090]();
    uint64_t v19 = v7;
    uint64_t v20 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      long long v21 = HMFGetLogIdentifier();
      int v22 = 138543618;
      long long v23 = v21;
      __int16 v24 = 2112;
      uint64_t v25 = v5;
      _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_ERROR, "%{public}@Nothing to store as there is no data after archiving %@", (uint8_t *)&v22, 0x16u);
    }
  }
}

- (void)_updateAccessAllowedWhenLocked:(BOOL)a3 message:(id)a4
{
  BOOL v4 = a3;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v6 = a4;
  if ([(HMDHomeManager *)self isAccessAllowedWhenLocked] != v4)
  {
    id v7 = (void *)MEMORY[0x1D9452090]([(HMDHomeManager *)self setAccessAllowedWhenLocked:v4]);
    uint64_t v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = HMFGetLogIdentifier();
      uint64_t v10 = HMFBooleanToString();
      int v12 = 138543618;
      id v13 = v9;
      __int16 v14 = 2112;
      long long v15 = v10;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Setting HomeKit Access when device is locked to %@", (uint8_t *)&v12, 0x16u);
    }
    id v11 = [v6 name];
    [(HMDHomeManager *)self saveWithReason:v11 information:0 saveOptions:0];
  }
  [v6 respondWithSuccess];
  [(HMDHomeManager *)self notifySPIClientsAboutAccessAllowedWhenLocked:v4];
}

- (void)notifySPIClientsAboutAccessAllowedWhenLocked:(BOOL)a3
{
  v18[1] = *MEMORY[0x1E4F143B8];
  long long v17 = @"kAccessAllowedWhenLockedKey";
  BOOL v4 = [NSNumber numberWithBool:a3];
  v18[0] = v4;
  id v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v18 forKeys:&v17 count:1];

  id v6 = [MEMORY[0x1E4F65480] entitledMessageWithName:*MEMORY[0x1E4F2D2F8] messagePayload:v5];
  id v7 = [(HMDHomeManager *)self messageDispatcher];
  uint64_t v8 = [(HMDHomeManager *)self uuid];
  [v7 sendMessage:v6 target:v8];

  uint64_t v9 = (void *)MEMORY[0x1D9452090]();
  uint64_t v10 = self;
  id v11 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    int v12 = HMFGetLogIdentifier();
    int v13 = 138543618;
    __int16 v14 = v12;
    __int16 v15 = 2112;
    uint64_t v16 = v5;
    _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Sending accessAllowedWhenLocked settings to all entitled clients : [%@]", (uint8_t *)&v13, 0x16u);
  }
}

- (id)accessAllowedWhenLockedSettingFileName
{
  uint64_t v2 = NSString;
  id v3 = (id)hh1ToHH2PerDeviceMigrationDirectoryPath;
  BOOL v4 = [v2 stringWithFormat:@"%@/AllowedAccessWhenLockedSetting.plist", v3];

  return v4;
}

- (void)_handleAccessAllowedWhenLockedRequest:(id)a3
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    long long v17 = v8;
    __int16 v18 = 2112;
    id v19 = v4;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Asked to update access allowed when locked : %@", buf, 0x16u);
  }
  char v15 = 0;
  uint64_t v9 = [v4 BOOLForKey:@"kAccessAllowedWhenLockedKey" keyPresent:&v15];
  if (v15)
  {
    [(HMDHomeManager *)v6 _updateAccessAllowedWhenLocked:v9 message:v4];
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1D9452090](v9);
    id v11 = v6;
    int v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v13 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v17 = v13;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_ERROR, "%{public}@Unable to find the key in the message", buf, 0xCu);
    }
    __int16 v14 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    [v4 respondWithError:v14];
  }
}

- (void)_notifyClientsOfUpdatedStatus
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v3);

  id v4 = [(HMDHomeManager *)self uuid];
  [(HMDHomeManager *)self _updateGenerationCounterWithReason:@"DataSyncStatusUpdate" sourceUUID:v4 shouldNotifyClients:0];

  id v5 = objc_alloc(MEMORY[0x1E4F65480]);
  uint64_t v6 = *MEMORY[0x1E4F2D590];
  id v7 = [(HMDHomeManager *)self messageDestination];
  uint64_t v8 = [(HMDHomeManager *)self _statusPayloadForMessage:0];
  uint64_t v9 = (void *)[v5 initWithName:v6 destination:v7 payload:v8];

  uint64_t v10 = (void *)MEMORY[0x1D9452090]();
  id v11 = self;
  int v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = HMFGetLogIdentifier();
    __int16 v14 = [v9 messagePayload];
    int v17 = 138543618;
    __int16 v18 = v13;
    __int16 v19 = 2112;
    uint64_t v20 = v14;
    _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Notifying clients of updated status message payload: %@", (uint8_t *)&v17, 0x16u);
  }
  char v15 = [(HMDHomeManager *)v11 messageDispatcher];
  [v15 sendMessage:v9];

  uint64_t v16 = [(HMDHomeManager *)v11 notificationCenter];
  [v16 postNotificationName:@"HMDHomeManagerDataSyncInProgressChangedNotification" object:v11];
}

- (void)_handleDeviceSetupSessionOpen:(id)a3
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v46 = [v4 uuidForKey:*MEMORY[0x1E4F2D0E8]];
  uint64_t v5 = [v4 numberForKey:*MEMORY[0x1E4F2D100]];
  __int16 v47 = (void *)v5;
  if (v46) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    id v7 = (void *)MEMORY[0x1D9452090]();
    uint64_t v8 = self;
    uint64_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v51 = v10;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Invalid message parameters", buf, 0xCu);
    }
    id v11 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    [v4 respondWithError:v11];
  }
  else
  {
    int v12 = [v4 activity];
    [(HMDHomeManager *)self setSetupActivity:v12];

    int v13 = (void *)MEMORY[0x1D9452090]();
    __int16 v14 = self;
    char v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = HMFGetLogIdentifier();
      [(HMDHomeManager *)v14 setupStartTimestamp];
      *(_DWORD *)buf = 138543618;
      uint64_t v51 = v17;
      __int16 v52 = 2048;
      uint64_t v53 = v18;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_DEFAULT, "%{public}@Noting setup start system time: %f", buf, 0x16u);
    }
    __int16 v19 = [(HMDHomeManager *)v14 setupActivity];
    [v19 begin];

    uint64_t v20 = [(HMDHomeManager *)v14 appleAccountManager];
    id v11 = [v20 device];

    uint64_t v21 = [(HMDHomeManager *)v14 setupActivity];
    v48[0] = @"currentHomeUUID";
    int v22 = [(HMDHomeManager *)v14 currentHomeUUID];
    long long v23 = HMDailyRotatedUUID();
    uint64_t v24 = [v23 UUIDString];
    uint64_t v25 = (void *)v24;
    __int16 v26 = @"nil current home UUID";
    if (v24) {
      __int16 v26 = (__CFString *)v24;
    }
    v49[0] = v26;
    v48[1] = @"productClass";
    __int16 v27 = NSNumber;
    id v28 = [v11 productInfo];
    uint64_t v29 = objc_msgSend(v27, "numberWithInteger:", objc_msgSend(v28, "productClass"));
    v49[1] = v29;
    v48[2] = @"productType";
    uint64_t v30 = [NSNumber numberWithLong:MGGetProductType()];
    v49[2] = v30;
    id v31 = (id)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v49 forKeys:v48 count:3];

    long long v32 = [(HMDHomeManager *)v14 setupActivity];
    [v32 markWithReason:@"HMDHomeManager._handleDeviceSetupSessionOpen"];

    uint64_t v33 = [v47 integerValue];
    if (+[HMDDeviceSetupSession isRoleSupported:v33])
    {
      long long v34 = [[HMDDeviceSetupSession alloc] initWithIdentifier:v46 role:v33 homeManager:v14];
      long long v35 = [(HMDDeviceSetupSession *)v34 setupTrackingInfo];
      -[HMDHomeManager setSetupStartTimestamp:](v14, "setSetupStartTimestamp:", (double)(unint64_t)[v35 startTime]);

      [(HMDDeviceSetupSession *)v34 setDelegate:v14];
      os_unfair_lock_lock_with_options();
      long long v36 = [(HMDHomeManager *)v14 deviceSetupSessions];
      [v36 addObject:v34];

      os_unfair_lock_unlock(&v14->_lock);
      long long v37 = (void *)MEMORY[0x1D9452090]();
      long long v38 = v14;
      long long v39 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        id v40 = HMFGetLogIdentifier();
        id v41 = [(HMDDeviceSetupSession *)v34 identifier];
        *(_DWORD *)buf = 138543618;
        uint64_t v51 = v40;
        __int16 v52 = 2112;
        uint64_t v53 = (uint64_t)v41;
        _os_log_impl(&dword_1D49D5000, v39, OS_LOG_TYPE_INFO, "%{public}@New TTSU session created: [%@]", buf, 0x16u);
      }
      [v4 respondWithSuccess];
    }
    else
    {
      uint64_t v42 = (void *)MEMORY[0x1D9452090]();
      __int16 v43 = v14;
      id v44 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v45 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v51 = v45;
        __int16 v52 = 2048;
        uint64_t v53 = v33;
        _os_log_impl(&dword_1D49D5000, v44, OS_LOG_TYPE_DEFAULT, "%{public}@Unsupported role: %tu", buf, 0x16u);
      }
      long long v34 = [MEMORY[0x1E4F28C58] hmErrorWithCode:48];
      [v4 respondWithError:v34];
    }
  }
}

- (void)_handleDeviceSetupSessionClose:(id)a3
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x1D9452090]();
  BOOL v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Received HMDHomeManager close session message", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v9 = [v4 uuidForKey:*MEMORY[0x1E4F2D0E8]];
  if (v9)
  {
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v50 = 0x2020000000;
    char v51 = 0;
    uint64_t v10 = (void *)MEMORY[0x1D9452090]();
    id v11 = v6;
    HMFGetOSLogHandle();
    int v12 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v13 = (id)objc_claimAutoreleasedReturnValue();
      __int16 v14 = [(HMDHomeManager *)v11 deviceSetupSessions];
      *(_DWORD *)__int16 v43 = 138543874;
      id v44 = v13;
      __int16 v45 = 2112;
      id v46 = v9;
      __int16 v47 = 2048;
      uint64_t v48 = [v14 count];
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@HMDHomeManager close session %@. Total current sessions %lu", v43, 0x20u);
    }
    char v15 = [(HMDHomeManager *)v11 deviceSetupSessions];
    uint64_t v35 = MEMORY[0x1E4F143A8];
    uint64_t v36 = 3221225472;
    long long v37 = __49__HMDHomeManager__handleDeviceSetupSessionClose___block_invoke;
    long long v38 = &unk_1E6A16BA8;
    id v16 = v9;
    id v39 = v16;
    id v40 = v11;
    id v17 = v4;
    id v41 = v17;
    p_long long buf = &buf;
    objc_msgSend(v15, "hmf_enumerateWithAutoreleasePoolUsingBlock:", &v35);

    if (!*(unsigned char *)(*((void *)&buf + 1) + 24))
    {
      uint64_t v24 = (void *)MEMORY[0x1D9452090](v18, v19, v20, v21, v22, v23);
      uint64_t v25 = v11;
      HMFGetOSLogHandle();
      __int16 v26 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        id v27 = (id)objc_claimAutoreleasedReturnValue();
        id v28 = [(HMDHomeManager *)v25 deviceSetupSessions];
        uint64_t v29 = [v28 count];
        *(_DWORD *)__int16 v43 = 138543874;
        id v44 = v27;
        __int16 v45 = 2112;
        id v46 = v16;
        __int16 v47 = 2048;
        uint64_t v48 = v29;
        _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_DEFAULT, "%{public}@Didn't close session %@ due to session not found (already closed?). Total current sessions %lu", v43, 0x20u);
      }
      [v17 respondWithSuccess];
    }

    _Block_object_dispose(&buf, 8);
  }
  else
  {
    uint64_t v30 = (void *)MEMORY[0x1D9452090]();
    id v31 = v6;
    long long v32 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = HMFGetLogIdentifier();
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v33;
      _os_log_impl(&dword_1D49D5000, v32, OS_LOG_TYPE_ERROR, "%{public}@Received close session message without UUID. Respond with error.", (uint8_t *)&buf, 0xCu);
    }
    long long v34 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    [v4 respondWithError:v34];
  }
}

void __49__HMDHomeManager__handleDeviceSetupSessionClose___block_invoke(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = [v6 identifier];
  int v8 = [v7 isEqual:*(void *)(a1 + 32)];

  if (v8)
  {
    uint64_t v9 = (void *)MEMORY[0x1D9452090]();
    id v10 = *(id *)(a1 + 40);
    id v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      int v12 = HMFGetLogIdentifier();
      id v13 = [v6 identifier];
      int v14 = 138543618;
      char v15 = v12;
      __int16 v16 = 2112;
      id v17 = v13;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Found close session: %@", (uint8_t *)&v14, 0x16u);
    }
    [v6 close:*(void *)(a1 + 48)];
    *a4 = 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  }
}

- (void)_handleRemoveAllHomeKitPairingIdentities:(id)a3
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v8 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    uint64_t v35 = v8;
    __int16 v36 = 2112;
    id v37 = v4;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Going to delete all the HomeKit pairing identities before TTSU: %@", buf, 0x16u);
  }
  uint64_t v9 = [MEMORY[0x1E4F5BE48] systemStore];
  if (!v9)
  {
    uint64_t v22 = (void *)MEMORY[0x1D9452090]();
    uint64_t v23 = v6;
    uint64_t v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v35 = v25;
      _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_ERROR, "%{public}@Could not find key chain store instance.", buf, 0xCu);
    }
    uint64_t v20 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v21 = 20;
    goto LABEL_13;
  }
  id v10 = [MEMORY[0x1E4F179C8] defaultStore];
  id v11 = objc_msgSend(v10, "aa_primaryAppleAccount");

  if (v11)
  {
    int v12 = (void *)MEMORY[0x1D9452090]();
    id v13 = v6;
    int v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      char v15 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v35 = v15;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_ERROR, "%{public}@Cannot remove all the keys as the primary account is logged in.", buf, 0xCu);
    }
    __int16 v16 = (void *)MEMORY[0x1D9452090]();
    id v17 = v13;
    uint64_t v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
    {
      uint64_t v19 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v35 = v19;
      _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_FAULT, "%{public}@Remove All HomeKit Pairing Identity was called with a logged in Account : 🤯", buf, 0xCu);
    }
    uint64_t v20 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v21 = 10;
LABEL_13:
    id v26 = [v20 hmErrorWithCode:v21];
    [v4 respondWithError:v26];
    goto LABEL_14;
  }
  id v33 = 0;
  uint64_t v27 = [v9 removeControllerKeyPairLeaveTombstone:0 error:&v33];
  id v26 = v33;
  if (v27)
  {
    [v4 respondWithSuccess];
  }
  else
  {
    id v28 = (void *)MEMORY[0x1D9452090]();
    uint64_t v29 = v6;
    uint64_t v30 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      id v31 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v35 = v31;
      __int16 v36 = 2112;
      id v37 = v26;
      _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove all the HomeKit pairing identities : %@", buf, 0x16u);
    }
    long long v32 = [MEMORY[0x1E4F28C58] hmErrorWithCode:-1];
    [v4 respondWithError:v32];
  }
LABEL_14:
}

- (void)removeAllHomeKitPairingIdentitiesAfterSignOut
{
  id v3 = [MEMORY[0x1E4F65480] messageWithName:@"removeAllHomeKitPairingIdentitiesDueToSignOut" messagePayload:MEMORY[0x1E4F1CC08]];
  [(HMDHomeManager *)self _handleRemoveAllHomeKitPairingIdentities:v3];
}

- (double)setupEndTimestamp
{
  p_locuint64_t k = &self->_lock;
  os_unfair_lock_lock_with_options();
  double setupEndTimestamp = self->_setupEndTimestamp;
  os_unfair_lock_unlock(p_lock);
  return setupEndTimestamp;
}

- (void)setSetupEndTimestamp:(double)a3
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (void *)MEMORY[0x1D9452090](self, a2);
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v8 = HMFGetLogIdentifier();
    int v12 = 138543618;
    id v13 = v8;
    __int16 v14 = 2048;
    double v15 = a3;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Saving current accessory setup end timestamp: %f", (uint8_t *)&v12, 0x16u);
  }
  uint64_t v9 = [(HMDHomeManager *)v6 userDefaults];
  id v10 = v9;
  if (fabs(a3) >= 2.22044605e-16)
  {
    id v11 = [NSNumber numberWithDouble:a3];
    [v10 setObject:v11 forKey:@"HMDCurrentAccessorySetupEndUptimeKey"];
  }
  else
  {
    [v9 removeObjectForKey:@"HMDCurrentAccessorySetupEndUptimeKey"];
  }

  os_unfair_lock_lock_with_options();
  v6->_double setupEndTimestamp = a3;
  os_unfair_lock_unlock(&v6->_lock);
}

- (double)setupStartTimestamp
{
  p_locuint64_t k = &self->_lock;
  os_unfair_lock_lock_with_options();
  double setupStartTimestamp = self->_setupStartTimestamp;
  os_unfair_lock_unlock(p_lock);
  return setupStartTimestamp;
}

- (void)setSetupStartTimestamp:(double)a3
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (void *)MEMORY[0x1D9452090](self, a2);
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v8 = HMFGetLogIdentifier();
    int v12 = 138543618;
    id v13 = v8;
    __int16 v14 = 2048;
    double v15 = a3;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Saving current accessory setup timestamp: %f", (uint8_t *)&v12, 0x16u);
  }
  uint64_t v9 = [(HMDHomeManager *)v6 userDefaults];
  id v10 = v9;
  if (fabs(a3) >= 2.22044605e-16)
  {
    id v11 = [NSNumber numberWithDouble:a3];
    [v10 setObject:v11 forKey:@"HMDCurrentAccessorySetupStartUptimeKey"];
  }
  else
  {
    [v9 removeObjectForKey:@"HMDCurrentAccessorySetupStartUptimeKey"];

    [(HMDHomeManager *)v6 setSetupEndTimestamp:0.0];
  }
  os_unfair_lock_lock_with_options();
  v6->_double setupStartTimestamp = a3;
  os_unfair_lock_unlock(&v6->_lock);
}

- (void)pingDevice:(id)a3 secure:(BOOL)a4 restrictToLocalNetwork:(BOOL)a5 completionHandler:(id)a6
{
  id v9 = a3;
  id v10 = a6;
  id v11 = [HMDRemoteDeviceMessageDestination alloc];
  int v12 = [(HMDHomeManager *)self uuid];
  id v13 = [(HMDRemoteDeviceMessageDestination *)v11 initWithTarget:v12 device:v9];

  if (a4)
  {
    uint64_t v14 = +[HMDRemoteMessage secureMessageWithName:@"kPingInternalRequestKey" qualityOfService:25 destination:v13 messagePayload:MEMORY[0x1E4F1CC08] restriction:-1];
  }
  else
  {
    double v15 = [v9 globalHandles];
    uint64_t v16 = [v15 count];

    if (v16 == 1)
    {
      id v17 = [v9 globalHandles];
      uint64_t v18 = [v17 firstObject];
      [(HMDRemoteDeviceMessageDestination *)v13 setPreferredHandle:v18];
    }
    uint64_t v14 = +[HMDRemoteMessage messageWithName:@"kPingInternalRequestKey" qualityOfService:25 destination:v13 messagePayload:MEMORY[0x1E4F1CC08] restriction:-1];
  }
  uint64_t v19 = (void *)v14;
  objc_initWeak(&location, self);
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = __77__HMDHomeManager_pingDevice_secure_restrictToLocalNetwork_completionHandler___block_invoke;
  v22[3] = &unk_1E6A193F8;
  objc_copyWeak(&v24, &location);
  id v20 = v10;
  id v23 = v20;
  [v19 setResponseHandler:v22];
  uint64_t v21 = [(HMDHomeManager *)self messageDispatcher];
  [v21 sendMessage:v19 completionHandler:0];

  objc_destroyWeak(&v24);
  objc_destroyWeak(&location);
}

void __77__HMDHomeManager_pingDevice_secure_restrictToLocalNetwork_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  int v8 = (void *)MEMORY[0x1D9452090]();
  id v9 = WeakRetained;
  id v10 = HMFGetOSLogHandle();
  id v11 = v10;
  if (v5)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v22 = v12;
      __int16 v23 = 2112;
      id v24 = v5;
      id v13 = "%{public}@Failed to respond to ping with error: %@";
      uint64_t v14 = v11;
      os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
      uint32_t v16 = 22;
LABEL_6:
      _os_log_impl(&dword_1D49D5000, v14, v15, v13, buf, v16);
    }
  }
  else if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    int v12 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    uint64_t v22 = v12;
    id v13 = "%{public}@Successfully responded to ping";
    uint64_t v14 = v11;
    os_log_type_t v15 = OS_LOG_TYPE_INFO;
    uint32_t v16 = 12;
    goto LABEL_6;
  }

  if (v9 && *(void *)(a1 + 32))
  {
    id v17 = [v9 workQueue];
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    void v18[2] = __77__HMDHomeManager_pingDevice_secure_restrictToLocalNetwork_completionHandler___block_invoke_1464;
    v18[3] = &unk_1E6A19530;
    id v20 = *(id *)(a1 + 32);
    id v19 = v5;
    dispatch_async(v17, v18);
  }
}

uint64_t __77__HMDHomeManager_pingDevice_secure_restrictToLocalNetwork_completionHandler___block_invoke_1464(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

- (void)_handlePing:(id)a3
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 uuidForKey:@"kIdentifierKey"];
  if (v5)
  {
    id v33 = v4;
    long long v34 = self;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id v6 = [(HMDHomeManager *)self accountRegistry];
    id v7 = [v6 accounts];

    id obj = v7;
    uint64_t v8 = [v7 countByEnumeratingWithState:&v43 objects:v52 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v36 = *(void *)v44;
      while (2)
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v44 != v36) {
            objc_enumerationMutation(obj);
          }
          id v11 = *(void **)(*((void *)&v43 + 1) + 8 * i);
          long long v39 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          int v12 = [v11 devices];
          uint64_t v13 = [v12 countByEnumeratingWithState:&v39 objects:v51 count:16];
          if (v13)
          {
            uint64_t v14 = v13;
            uint64_t v15 = *(void *)v40;
LABEL_9:
            uint64_t v16 = 0;
            while (1)
            {
              if (*(void *)v40 != v15) {
                objc_enumerationMutation(v12);
              }
              id v17 = *(void **)(*((void *)&v39 + 1) + 8 * v16);
              uint64_t v18 = [v17 identifier];
              char v19 = [v18 isEqual:v5];

              if (v19) {
                break;
              }
              if (v14 == ++v16)
              {
                uint64_t v14 = [v12 countByEnumeratingWithState:&v39 objects:v51 count:16];
                if (v14) {
                  goto LABEL_9;
                }
                goto LABEL_15;
              }
            }
            id v20 = v17;

            if (!v20) {
              continue;
            }

            id v4 = v33;
            if ([v33 BOOLForKey:*MEMORY[0x1E4F2D4C0]])
            {
              uint64_t v29 = +[HMDSecureRemoteMessageTransport defaultTransport];
              uint64_t v30 = [v29 deviceMonitor];

              [v30 startMonitoringDevice:v20 withInitialReachability:0 forClient:v34];
            }
            uint64_t v31 = [v33 BOOLForKey:*MEMORY[0x1E4F2D550]];
            uint64_t v32 = [v33 BOOLForKey:*MEMORY[0x1E4F2D4B0]];
            v37[0] = MEMORY[0x1E4F143A8];
            v37[1] = 3221225472;
            v37[2] = __30__HMDHomeManager__handlePing___block_invoke;
            v37[3] = &unk_1E6A197F0;
            id v38 = v33;
            [(HMDHomeManager *)v34 pingDevice:v20 secure:v31 restrictToLocalNetwork:v32 completionHandler:v37];

            goto LABEL_29;
          }
LABEL_15:
        }
        uint64_t v9 = [obj countByEnumeratingWithState:&v43 objects:v52 count:16];
        if (v9) {
          continue;
        }
        break;
      }
    }

    uint64_t v21 = (void *)MEMORY[0x1D9452090]();
    uint64_t v22 = v34;
    __int16 v23 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      id v24 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v48 = v24;
      __int16 v49 = 2112;
      uint64_t v50 = v5;
      _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_ERROR, "%{public}@Failed to find device with identifier: %@", buf, 0x16u);
    }
    id v20 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    id v4 = v33;
  }
  else
  {
    uint64_t v25 = (void *)MEMORY[0x1D9452090]();
    id v26 = self;
    uint64_t v27 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      id v28 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v48 = v28;
      _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_ERROR, "%{public}@Message is missing device identifier", buf, 0xCu);
    }
    id v20 = [MEMORY[0x1E4F28C58] hmErrorWithCode:20];
  }
  [v4 respondWithError:v20];
LABEL_29:
}

void __30__HMDHomeManager__handlePing___block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = [*(id *)(a1 + 32) responseHandler];

  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) responseHandler];
    ((void (**)(void, id, void))v4)[2](v4, v5, 0);
  }
}

- (void)_handleRemoveAccount:(id)a3
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 messagePayload];
  id v6 = [v5 valueForKey:@"kIdentifierKey"];

  if (v6)
  {
    id v7 = [v4 uuidForKey:@"kIdentifierKey"];
    if (v7)
    {
      unint64_t v67 = v4;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      uint64_t v8 = [(HMDHomeManager *)self accountRegistry];
      uint64_t v9 = [v8 accounts];

      uint64_t v10 = [v9 countByEnumeratingWithState:&v69 objects:v77 count:16];
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v12 = *(void *)v70;
LABEL_5:
        uint64_t v13 = 0;
        while (1)
        {
          if (*(void *)v70 != v12) {
            objc_enumerationMutation(v9);
          }
          uint64_t v14 = *(void **)(*((void *)&v69 + 1) + 8 * v13);
          uint64_t v15 = [v14 identifier];
          uint64_t v16 = [v15 identifier];
          char v17 = objc_msgSend(v16, "hmf_isEqualToUUID:", v7);

          if (v17) {
            break;
          }
          if (v11 == ++v13)
          {
            uint64_t v11 = [v9 countByEnumeratingWithState:&v69 objects:v77 count:16];
            if (v11) {
              goto LABEL_5;
            }
            goto LABEL_11;
          }
        }
        id v25 = v14;

        if (!v25) {
          goto LABEL_24;
        }
        id v4 = v67;
        goto LABEL_19;
      }
LABEL_11:

LABEL_24:
      long long v34 = (void *)MEMORY[0x1D9452090]();
      uint64_t v35 = self;
      uint64_t v36 = HMFGetOSLogHandle();
      id v4 = v67;
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        id v37 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        BOOL v74 = v37;
        __int16 v75 = 2112;
        BOOL v76 = v7;
        _os_log_impl(&dword_1D49D5000, v36, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to find matching account with identifier: %@", buf, 0x16u);
      }
      id v25 = [v67 responseHandler];

      if (!v25) {
        goto LABEL_45;
      }
      id v38 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v39 = 2;
    }
    else
    {
      long long v40 = (void *)MEMORY[0x1D9452090]();
      long long v41 = self;
      long long v42 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        long long v43 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        BOOL v74 = v43;
        _os_log_impl(&dword_1D49D5000, v42, OS_LOG_TYPE_ERROR, "%{public}@Message is missing account identifier", buf, 0xCu);
      }
      id v25 = [v4 responseHandler];

      if (!v25) {
        goto LABEL_45;
      }
      id v38 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v39 = 3;
    }
    goto LABEL_32;
  }
  uint64_t v18 = [v4 messagePayload];
  uint64_t v19 = *MEMORY[0x1E4F2D358];
  id v20 = [v18 valueForKey:*MEMORY[0x1E4F2D358]];

  if (!v20)
  {
    long long v46 = (void *)MEMORY[0x1D9452090]();
    __int16 v47 = self;
    uint64_t v48 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      __int16 v49 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      BOOL v74 = v49;
      uint64_t v50 = "%{public}@Message is missing account identifier";
LABEL_41:
      _os_log_impl(&dword_1D49D5000, v48, OS_LOG_TYPE_ERROR, v50, buf, 0xCu);
    }
LABEL_42:

    uint64_t v55 = [v4 responseHandler];

    if (!v55)
    {
      id v25 = 0;
      goto LABEL_46;
    }
    id v7 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    long long v44 = [v4 responseHandler];
    v44[2](v44, v7, 0);
    goto LABEL_44;
  }
  uint64_t v21 = [v4 stringForKey:v19];
  if (!v21)
  {
    long long v46 = (void *)MEMORY[0x1D9452090]();
    __int16 v47 = self;
    uint64_t v48 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      __int16 v49 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      BOOL v74 = v49;
      uint64_t v50 = "%{public}@Message is missing account handle";
      goto LABEL_41;
    }
    goto LABEL_42;
  }
  id v7 = (void (**)(void, void, void))v21;
  uint64_t v22 = +[HMDAccountHandle accountHandleForDestination:v21];
  if (!v22)
  {
    id v56 = (void *)MEMORY[0x1D9452090]();
    id v57 = self;
    uint64_t v58 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      uint64_t v59 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      BOOL v74 = v59;
      __int16 v75 = 2112;
      BOOL v76 = v7;
      _os_log_impl(&dword_1D49D5000, v58, OS_LOG_TYPE_ERROR, "%{public}@Invalid account handle: %@", buf, 0x16u);
    }
    id v25 = [v4 responseHandler];

    if (!v25) {
      goto LABEL_45;
    }
    id v38 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v39 = 19;
LABEL_32:
    long long v44 = [v38 hmErrorWithCode:v39];
    long long v45 = [v4 responseHandler];
    v45[2](v45, v44, 0);

LABEL_44:
    id v25 = 0;
    goto LABEL_45;
  }
  __int16 v23 = (void *)v22;
  char v68 = 0;
  id v24 = +[HMDAccountRegistry sharedRegistry];
  id v25 = [v24 accountForHandle:v23 exists:&v68];

  if (!v68)
  {
    uint64_t v60 = (void *)MEMORY[0x1D9452090]();
    uint64_t v61 = self;
    uint64_t v62 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      uint64_t v63 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      BOOL v74 = v63;
      __int16 v75 = 2112;
      BOOL v76 = v23;
      _os_log_impl(&dword_1D49D5000, v62, OS_LOG_TYPE_ERROR, "%{public}@Failed to find account with handle: %@", buf, 0x16u);
    }
    uint64_t v64 = [v4 responseHandler];

    if (v64)
    {
      uint64_t v65 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
      uint64_t v66 = [v4 responseHandler];
      ((void (**)(void, void *, void))v66)[2](v66, v65, 0);
    }
    goto LABEL_45;
  }

LABEL_19:
  int v26 = [v25 isCurrentAccount];
  uint64_t v27 = (void *)MEMORY[0x1D9452090]();
  id v28 = self;
  uint64_t v29 = HMFGetOSLogHandle();
  uint64_t v30 = v29;
  if (v26)
  {
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      BOOL v74 = v31;
      _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_ERROR, "%{public}@Cannot remove current account", buf, 0xCu);
    }
    uint64_t v32 = [v4 responseHandler];

    if (v32)
    {
      id v7 = [MEMORY[0x1E4F28C58] hmErrorWithCode:48];
      id v33 = [v4 responseHandler];
      v33[2](v33, v7, 0);

LABEL_45:
    }
  }
  else
  {
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      char v51 = HMFGetLogIdentifier();
      uint64_t v52 = [v25 shortDescription];
      *(_DWORD *)long long buf = 138543618;
      BOOL v74 = v51;
      __int16 v75 = 2112;
      BOOL v76 = v52;
      _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_DEFAULT, "%{public}@Removing account: %@", buf, 0x16u);
    }
    uint64_t v53 = [(HMDHomeManager *)v28 remoteAccountManager];
    [v53 removeAccount:v25];

    uint64_t v54 = [v4 responseHandler];

    if (v54)
    {
      id v7 = [v4 responseHandler];
      v7[2](v7, 0, 0);
      goto LABEL_45;
    }
  }
LABEL_46:
}

- (void)_handleResolveAccount:(id)a3
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 stringForKey:*MEMORY[0x1E4F2D358]];
  if (v5)
  {
    id v6 = +[HMDAccountHandle accountHandleForDestination:v5];
    if (v6)
    {
      objc_initWeak((id *)location, self);
      id v7 = +[HMDAccountRegistry sharedRegistry];
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = __40__HMDHomeManager__handleResolveAccount___block_invoke;
      v20[3] = &unk_1E6A16B80;
      objc_copyWeak(&v22, (id *)location);
      id v21 = v4;
      [v7 _resolveAccountForHandle:v6 completionHandler:v20];

      objc_destroyWeak(&v22);
      objc_destroyWeak((id *)location);
    }
    else
    {
      uint64_t v14 = (void *)MEMORY[0x1D9452090]();
      uint64_t v15 = self;
      uint64_t v16 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        char v17 = HMFGetLogIdentifier();
        *(_DWORD *)id location = 138543618;
        *(void *)&location[4] = v17;
        __int16 v24 = 2112;
        id v25 = v5;
        _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_ERROR, "%{public}@Invalid account handle: %@", location, 0x16u);
      }
      id v6 = [v4 responseHandler];

      if (v6)
      {
        uint64_t v18 = [MEMORY[0x1E4F28C58] hmErrorWithCode:19];
        uint64_t v19 = [v4 responseHandler];
        ((void (**)(void, void *, void))v19)[2](v19, v18, 0);

        id v6 = 0;
      }
    }
    goto LABEL_12;
  }
  uint64_t v8 = (void *)MEMORY[0x1D9452090]();
  uint64_t v9 = self;
  uint64_t v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    *(_DWORD *)id location = 138543362;
    *(void *)&location[4] = v11;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_ERROR, "%{public}@Message is missing account handle", location, 0xCu);
  }
  uint64_t v12 = [v4 responseHandler];

  if (v12)
  {
    id v6 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    uint64_t v13 = [v4 responseHandler];
    ((void (**)(void, void *, void))v13)[2](v13, v6, 0);

LABEL_12:
  }
}

void __40__HMDHomeManager__handleResolveAccount___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v8 = (void *)MEMORY[0x1D9452090]();
  id v9 = WeakRetained;
  uint64_t v10 = HMFGetOSLogHandle();
  uint64_t v11 = v10;
  if (v5)
  {
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    uint64_t v12 = HMFGetLogIdentifier();
    uint64_t v13 = [v5 shortDescription];
    int v16 = 138543618;
    char v17 = v12;
    __int16 v18 = 2112;
    id v19 = v13;
    _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Resolved account: %@", (uint8_t *)&v16, 0x16u);
  }
  else
  {
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    uint64_t v12 = HMFGetLogIdentifier();
    int v16 = 138543618;
    char v17 = v12;
    __int16 v18 = 2112;
    id v19 = v6;
    _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_ERROR, "%{public}@Failed to resolved account with error: %@", (uint8_t *)&v16, 0x16u);
  }

LABEL_7:
  uint64_t v14 = [*(id *)(a1 + 32) responseHandler];

  if (v14)
  {
    uint64_t v15 = [*(id *)(a1 + 32) responseHandler];
    ((void (**)(void, id, void))v15)[2](v15, v6, 0);
  }
}

- (void)_removeCurrentResidentDeviceFromHomes:(id)a3
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = +[HMDDeviceCapabilities deviceCapabilities];
  int v6 = [v5 isResidentCapable];

  if (v6)
  {
    id v7 = [(HMDHomeManager *)self appleAccountManager];
    id v8 = [v7 device];

    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v21 = v4;
    id v9 = v4;
    uint64_t v10 = [v9 countByEnumeratingWithState:&v26 objects:v31 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v27;
      do
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v27 != v12) {
            objc_enumerationMutation(v9);
          }
          uint64_t v14 = *(void **)(*((void *)&v26 + 1) + 8 * i);
          if (v8)
          {
LABEL_8:
            if ([v14 isOwnerUser]) {
              [v14 removeResidentCapableDevice:v8];
            }
          }
          else
          {
            long long v24 = 0u;
            long long v25 = 0u;
            long long v22 = 0u;
            long long v23 = 0u;
            uint64_t v15 = [v14 residentCapableDevices];
            uint64_t v16 = [v15 countByEnumeratingWithState:&v22 objects:v30 count:16];
            if (v16)
            {
              uint64_t v17 = v16;
              uint64_t v18 = *(void *)v23;
LABEL_12:
              uint64_t v19 = 0;
              while (1)
              {
                if (*(void *)v23 != v18) {
                  objc_enumerationMutation(v15);
                }
                uint64_t v20 = *(void **)(*((void *)&v22 + 1) + 8 * v19);
                if ([v20 isCurrentDevice]) {
                  break;
                }
                if (v17 == ++v19)
                {
                  uint64_t v17 = [v15 countByEnumeratingWithState:&v22 objects:v30 count:16];
                  if (v17) {
                    goto LABEL_12;
                  }
                  goto LABEL_18;
                }
              }
              id v8 = v20;

              if (v8) {
                goto LABEL_8;
              }
            }
            else
            {
LABEL_18:

              id v8 = 0;
            }
          }
        }
        uint64_t v11 = [v9 countByEnumeratingWithState:&v26 objects:v31 count:16];
      }
      while (v11);
    }

    id v4 = v21;
  }
}

- (void)_addCurrentResidentDeviceToHomes:(id)a3
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([(HMDHomeManager *)self isResidentEnabled])
  {
    id v5 = [(HMDHomeManager *)self appleAccountManager];
    int v6 = [v5 device];

    if (v6)
    {
      id v7 = [v6 capabilities];
      int v8 = [v7 isResidentCapable];

      if (v8)
      {
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        id v9 = v4;
        uint64_t v10 = [v9 countByEnumeratingWithState:&v18 objects:v22 count:16];
        if (v10)
        {
          uint64_t v11 = v10;
          uint64_t v12 = *(void *)v19;
          do
          {
            for (uint64_t i = 0; i != v11; ++i)
            {
              if (*(void *)v19 != v12) {
                objc_enumerationMutation(v9);
              }
              uint64_t v14 = *(void **)(*((void *)&v18 + 1) + 8 * i);
              if (objc_msgSend(v14, "isOwnerUser", (void)v18)
                && [v14 hasReachableAccessories])
              {
                [v14 addResidentCapableDevice:v6];
              }
            }
            uint64_t v11 = [v9 countByEnumeratingWithState:&v18 objects:v22 count:16];
          }
          while (v11);
        }
      }
    }
  }
  else
  {
    uint64_t v15 = (void *)MEMORY[0x1D9452090]();
    uint64_t v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      long long v24 = v17;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_DEBUG, "%{public}@Not adding ourselves as a resident as we are disabled as a resident", buf, 0xCu);
    }
  }
}

- (void)handleHomeCurrentDeviceResidentEligibleNotification:(id)a3
{
  id v4 = a3;
  id v5 = +[HMDDeviceCapabilities deviceCapabilities];
  int v6 = [v5 isResidentCapable];

  if (v6)
  {
    id v7 = [v4 object];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      int v8 = v7;
    }
    else {
      int v8 = 0;
    }
    id v9 = v8;

    if ([v9 hasReachableAccessories])
    {
      uint64_t v10 = [(HMDHomeManager *)self workQueue];
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      v11[2] = __70__HMDHomeManager_handleHomeCurrentDeviceResidentEligibleNotification___block_invoke;
      v11[3] = &unk_1E6A197C8;
      v11[4] = self;
      id v12 = v9;
      dispatch_async(v10, v11);
    }
  }
}

void __70__HMDHomeManager_handleHomeCurrentDeviceResidentEligibleNotification___block_invoke(uint64_t a1)
{
  v3[1] = *MEMORY[0x1E4F143B8];
  v1 = *(void **)(a1 + 32);
  v3[0] = *(void *)(a1 + 40);
  uint64_t v2 = [MEMORY[0x1E4F1C978] arrayWithObjects:v3 count:1];
  [v1 _addCurrentResidentDeviceToHomes:v2];
}

- (void)_updateResidentEnabledOnThisDevice:(BOOL)a3 forceNotify:(BOOL)a4 message:(id)a5
{
  BOOL v5 = a4;
  BOOL v6 = a3;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v8 = a5;
  if ([(HMDHomeManager *)self isResidentCapable])
  {
    uint64_t v9 = [(HMDHomeManager *)self residentEnabledState];
    if (v6)
    {
      if (v9 != 2)
      {
        uint64_t v9 = [(HMDHomeManager *)self setResidentEnabledState:2];
        BOOL v5 = 1;
      }
      uint64_t v10 = (void *)MEMORY[0x1D9452090](v9);
      uint64_t v11 = self;
      id v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v39 = v13;
        _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Enabled as a resident device, adding ourselves as a resident to all homes", buf, 0xCu);
      }
      uint64_t v14 = [(HMDHomeManager *)v11 homes];
      [(HMDHomeManager *)v11 _addCurrentResidentDeviceToHomes:v14];

      uint64_t v15 = [(HMDHomeManager *)v11 messageDispatcher];
      [v15 enableMessageServer];
    }
    else
    {
      if (v9 != 1)
      {
        BOOL v5 = 1;
        uint64_t v9 = [(HMDHomeManager *)self setResidentEnabledState:1];
      }
      long long v20 = (void *)MEMORY[0x1D9452090](v9);
      long long v21 = self;
      long long v22 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        long long v23 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v39 = v23;
        _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_DEFAULT, "%{public}@Disabled as a resident device, removing ourselves as a resident from all homes", buf, 0xCu);
      }
      long long v24 = [(HMDHomeManager *)v21 homes];
      [(HMDHomeManager *)v21 _removeCurrentResidentDeviceFromHomes:v24];

      uint64_t v15 = [(HMDHomeManager *)v21 messageDispatcher];
      [v15 disableMessageServer];
    }
  }
  else
  {
    uint64_t v16 = (void *)MEMORY[0x1D9452090]();
    uint64_t v17 = self;
    long long v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      long long v19 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v39 = v19;
      _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@Not resident capable, removing ourselves as a resident from all homes", buf, 0xCu);
    }
    uint64_t v15 = [(HMDHomeManager *)v17 homes];
    [(HMDHomeManager *)v17 _removeCurrentResidentDeviceFromHomes:v15];
  }

  if (v8 || v5)
  {
    uint64_t v36 = @"kResidentEnabledKey";
    uint64_t v25 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHomeManager isResidentEnabled](self, "isResidentEnabled"));
    id v37 = v25;
    long long v26 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v37 forKeys:&v36 count:1];

    long long v27 = (void *)MEMORY[0x1E4F65480];
    long long v28 = [v8 identifier];
    long long v29 = [v27 entitledMessageWithName:@"kResidentEnabledForThisDeviceUpdatedNotificationKey" identifier:v28 messagePayload:v26];

    uint64_t v30 = [(HMDHomeManager *)self messageDispatcher];
    uint64_t v31 = [(HMDHomeManager *)self uuid];
    v34[0] = MEMORY[0x1E4F143A8];
    v34[1] = 3221225472;
    id v34[2] = __73__HMDHomeManager__updateResidentEnabledOnThisDevice_forceNotify_message___block_invoke;
    v34[3] = &unk_1E6A19B30;
    id v35 = v8;
    [v30 sendMessage:v29 target:v31 andInvokeCompletionHandler:v34];

    uint64_t v32 = [(HMDHomeManager *)self notificationCenter];
    [v32 postNotificationName:@"HMDHomeManagerResidentEnabledChangedNotification" object:self userInfo:v26];
  }
  id v33 = [v8 name];
  [(HMDHomeManager *)self saveWithReason:v33 information:0 saveOptions:0];
}

void __73__HMDHomeManager__updateResidentEnabledOnThisDevice_forceNotify_message___block_invoke(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) responseHandler];

  if (v2)
  {
    id v3 = [*(id *)(a1 + 32) responseHandler];
    (*((void (**)(id, void, void))v3 + 2))(v3, 0, 0);
  }
}

- (void)_handleEnableResidentForThisDeviceRequest:(id)a3
{
  id v4 = a3;
  char v9 = 0;
  uint64_t v5 = [v4 BOOLForKey:@"kResidentEnabledKey" keyPresent:&v9];
  if (v9)
  {
    [(HMDHomeManager *)self _updateResidentEnabledOnThisDevice:v5 forceNotify:0 message:v4];
  }
  else
  {
    BOOL v6 = [v4 responseHandler];

    if (v6)
    {
      id v7 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
      id v8 = [v4 responseHandler];
      ((void (**)(void, void *, void))v8)[2](v8, v7, 0);
    }
  }
}

- (void)notifyClientsResidentCapable:(BOOL)a3
{
  BOOL v3 = a3;
  v12[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (void *)MEMORY[0x1E4F65480];
  uint64_t v11 = @"kResidentCapableDeviceKey";
  BOOL v6 = objc_msgSend(NSNumber, "numberWithBool:");
  v12[0] = v6;
  id v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v12 forKeys:&v11 count:1];
  id v8 = [v5 entitledMessageWithName:@"kResidentDeviceCapableUpdatedNotificationKey" messagePayload:v7];

  char v9 = [(HMDHomeManager *)self messageDispatcher];
  uint64_t v10 = [(HMDHomeManager *)self uuid];
  [v9 sendMessage:v8 target:v10 andInvokeCompletionHandler:0];

  if (v3 && [(HMDHomeManager *)self isResidentEnabled]) {
    [(HMDHomeManager *)self _updateResidentEnabledOnThisDevice:1 forceNotify:1 message:0];
  }
}

- (void)processAppDataModelRemove:(id)a3 message:(id)a4
{
  id v5 = a4;
  [(HMDHomeManager *)self setAppData:0];
  [v5 respondWithPayload:0];
}

- (void)processAppDataModelUpdate:(id)a3 message:(id)a4
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHomeManager *)self appData];

  if (v8)
  {
    char v9 = [(HMDHomeManager *)self appData];
    [v9 updateWithModel:v6];
  }
  else
  {
    uint64_t v10 = [HMDApplicationData alloc];
    uint64_t v11 = [v6 appDataDictionary];
    id v12 = [(HMDHomeManager *)self uuid];
    uint64_t v13 = [(HMDApplicationData *)v10 initWithDictionary:v11 parentUUID:v12];
    [(HMDHomeManager *)self setAppData:v13];

    uint64_t v14 = (void *)MEMORY[0x1D9452090]();
    uint64_t v15 = self;
    uint64_t v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = HMFGetLogIdentifier();
      long long v18 = [v6 appDataDictionary];
      int v20 = 138543618;
      long long v21 = v17;
      __int16 v22 = 2112;
      long long v23 = v18;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_DEBUG, "%{public}@Updating the application data : %@", (uint8_t *)&v20, 0x16u);
    }
  }
  long long v19 = [v7 transactionResult];
  [v19 markChanged];
  [v7 respondWithPayload:0];
}

- (void)_setAppDataWithMessage:(id)a3
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1E4F1CA60];
  id v6 = [v4 messagePayload];
  id v7 = objc_msgSend(v5, "dictionaryWithCapacity:", objc_msgSend(v6, "count"));

  id v8 = @"com.apple.homekit-entitledclient.identifer";
  char v9 = [v4 dictionaryForKey:@"kAppDataInformationKey"];
  uint64_t v10 = [(HMDHomeManager *)self appData];
  uint64_t v11 = (HMDApplicationData *)[v10 copy];
  id v12 = (void *)MEMORY[0x1D9452090]();
  uint64_t v13 = self;
  uint64_t v14 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    uint64_t v15 = HMFGetLogIdentifier();
    int v27 = 138543618;
    long long v28 = v15;
    __int16 v29 = 2112;
    uint64_t v30 = v9;
    _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Client needs to set home manager appData to %@", (uint8_t *)&v27, 0x16u);
  }
  if (v9)
  {
    if (!v11)
    {
      uint64_t v16 = [HMDApplicationData alloc];
      uint64_t v17 = [(HMDHomeManager *)v13 uuid];
      uint64_t v11 = [(HMDApplicationData *)v16 initWithParentUUID:v17];
    }
    [(HMDApplicationData *)v11 setApplicationData:v9 forIdentifier:@"com.apple.homekit-entitledclient.identifer"];
    long long v18 = [(HMDApplicationData *)v11 modelObjectWithChangeType:1];
    long long v19 = v18;
    if (!v10) {
      [v18 setObjectChangeType:1];
    }
    [v7 setObject:v9 forKey:@"kAppDataInformationKey"];
  }
  else
  {
    [(HMDApplicationData *)v11 removeApplicationDataForIdentifier:@"com.apple.homekit-entitledclient.identifer"];
    if (v11)
    {
      long long v19 = [(HMDApplicationData *)v11 modelObjectWithChangeType:1];
    }
    else
    {
      long long v19 = 0;
    }
  }
  int v20 = [(HMDHomeManager *)v13 mobileAssetManager];

  if (!v20)
  {
    long long v21 = objc_alloc_init(HMDMobileAssetManager);
    [(HMDHomeManager *)v13 setMobileAssetManager:v21];
  }
  __int16 v22 = [(HMDHomeManager *)v13 mobileAssetManager];
  [v22 handleMetadataAssetUpdated];

  if (v19)
  {
    long long v23 = [(HMDHomeManager *)v13 backingStore];
    uint64_t v24 = [v4 name];
    uint64_t v25 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    long long v26 = [v23 transaction:v24 options:v25];

    [v26 add:v19 withMessage:v4];
    [v26 run];
  }
  else
  {
    [v4 respondWithPayload:0];
  }
}

- (void)setAppDataWithMessage:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __40__HMDHomeManager_setAppDataWithMessage___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

uint64_t __40__HMDHomeManager_setAppDataWithMessage___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setAppDataWithMessage:*(void *)(a1 + 40)];
}

- (void)_teardownRemoteAccessForHomeCommon:(id)a3 isCompanion:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = [(HMDHomeManager *)self _homeWithUUID:v6];
  id v8 = (void *)MEMORY[0x1D9452090]();
  char v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = HMFGetLogIdentifier();
    uint64_t v11 = [v6 UUIDString];
    *(_DWORD *)long long buf = 138543618;
    long long v34 = v10;
    __int16 v35 = 2112;
    uint64_t v36 = v11;
    _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Tearing down any previously setup remote access for home: %@", buf, 0x16u);
  }
  id v12 = [(HMDHomeManager *)self messageDispatcher];
  uint64_t v13 = v12;
  if (v4) {
    [v12 setCompanionDevice:0 forHome:v7];
  }
  else {
    [v12 setRemoteAccessDevice:0 forHome:v7];
  }

  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  uint64_t v14 = [(HMDHomeManager *)self pendingRemoteSessions];
  uint64_t v15 = [v14 countByEnumeratingWithState:&v28 objects:v32 count:16];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v29;
LABEL_8:
    uint64_t v18 = 0;
    while (1)
    {
      if (*(void *)v29 != v17) {
        objc_enumerationMutation(v14);
      }
      long long v19 = *(void **)(*((void *)&v28 + 1) + 8 * v18);
      int v20 = [(HMDHomeManager *)self pendingRemoteSessions];
      long long v21 = [v20 objectForKeyedSubscript:v19];

      if ([v21 isEqual:v6]) {
        break;
      }

      if (v16 == ++v18)
      {
        uint64_t v16 = [v14 countByEnumeratingWithState:&v28 objects:v32 count:16];
        if (v16) {
          goto LABEL_8;
        }
        goto LABEL_14;
      }
    }
    id v22 = v19;

    if (!v22) {
      goto LABEL_20;
    }
    long long v23 = (void *)MEMORY[0x1D9452090]();
    uint64_t v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      uint64_t v25 = HMFGetLogIdentifier();
      long long v26 = [v22 UUIDString];
      *(_DWORD *)long long buf = 138543618;
      long long v34 = v25;
      __int16 v35 = 2112;
      uint64_t v36 = v26;
      _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_INFO, "%{public}@Clearing pending remote session with identifier %@", buf, 0x16u);
    }
    int v27 = [(HMDHomeManager *)self pendingRemoteSessions];
    [v27 removeObjectForKey:v22];
  }
  else
  {
LABEL_14:
    id v22 = v14;
  }

LABEL_20:
}

- (void)_teardownRemoteAccessForHomeThroughCompanion:(id)a3
{
  id v4 = a3;
  if (isWatch()) {
    [(HMDHomeManager *)self _teardownRemoteAccessForHomeCommon:v4 isCompanion:1];
  }
}

- (void)_teardownRemoteAccessForHome:(id)a3
{
  id v7 = a3;
  id v4 = -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:");
  id v5 = [v4 residentDeviceManager];
  char v6 = [v5 isResidentAvailable];

  if ((v6 & 1) == 0) {
    [(HMDHomeManager *)self _teardownRemoteAccessForHomeCommon:v7 isCompanion:0];
  }
}

- (void)teardownRemoteAccessForHome:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __46__HMDHomeManager_teardownRemoteAccessForHome___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

uint64_t __46__HMDHomeManager_teardownRemoteAccessForHome___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _teardownRemoteAccessForHome:*(void *)(a1 + 40)];
}

- (void)addIssuerKeyToMessagePayload:(id)a3 invitation:(id)a4 completion:(id)a5
{
}

- (void)sendRequestForInvitation:(id)a3 homeUUID:(id)a4 payload:(id)a5 invitationState:(int64_t)a6 responseHandler:(id)a7
{
  id v11 = a7;
  id v12 = a5;
  id v13 = a4;
  uint64_t v14 = [a3 invitationData];
  uint64_t v15 = [MEMORY[0x1E4F65480] internalMessageWithName:@"kUpdateHomeInvitationStateInternalRequestKey" messagePayload:v12];

  uint64_t v16 = [v14 inviterUserID];
  uint64_t v17 = [(HMDHomeManager *)self workQueue];
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  v20[2] = __92__HMDHomeManager_sendRequestForInvitation_homeUUID_payload_invitationState_responseHandler___block_invoke;
  v20[3] = &unk_1E6A16B58;
  id v21 = v15;
  id v22 = v11;
  id v18 = v15;
  id v19 = v11;
  [(HMDHomeManager *)self sendUnsecureMessage:v18 target:v13 userID:v16 responseQueue:v17 responseHandler:v20];
}

void __92__HMDHomeManager_sendRequestForInvitation_homeUUID_payload_invitationState_responseHandler___block_invoke(uint64_t a1, void *a2)
{
  BOOL v3 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = a2;
  id v5 = [v3 name];
  (*(void (**)(uint64_t, id, id))(v2 + 16))(v2, v5, v4);
}

- (void)__sendUpdateRequestToAdminForInvitation:(id)a3 homeUUID:(id)a4 invitationState:(int64_t)a5 authStatus:(id)a6
{
  v50[2] = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v34 = a4;
  id v33 = a6;
  v49[0] = @"kInvitationIdentifierKey";
  id v11 = [v10 identifier];
  id v12 = [v11 UUIDString];
  v49[1] = @"kInvitationStateKey";
  v50[0] = v12;
  id v13 = [NSNumber numberWithInteger:a5];
  v50[1] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v50 forKeys:v49 count:2];
  uint64_t v15 = (void *)[v14 mutableCopy];

  if (a5 == 3)
  {
    uint64_t v16 = (void *)MEMORY[0x1D9452090]();
    uint64_t v17 = self;
    id v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      id v19 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v48 = v19;
      _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@Get or create controller key before sending invite accept", buf, 0xCu);
    }
    id v45 = 0;
    id v46 = 0;
    BOOL v20 = [(HMDHomeManager *)v17 getOrCreateControllerPublicKey:&v46 controllerUsername:&v45 error:0];
    id v21 = v46;
    id v22 = v45;
    if (v20)
    {
      [v15 setObject:v21 forKeyedSubscript:@"kControllerPublicKey"];
      [v15 setObject:v22 forKeyedSubscript:@"kControllerPairingNameKey"];
    }
    long long v23 = [(HMDHomeManager *)v17 appleAccountManager];
    uint64_t v24 = [v23 account];
    uint64_t v25 = [v24 primaryHandle];

    if (v25)
    {
      long long v26 = +[HMDAccountHandleFormatter defaultFormatter];
      int v27 = [v26 stringForObjectValue:v25];

      if (v27) {
        [v15 setObject:v27 forKeyedSubscript:@"kUserIDKey"];
      }
    }
    long long v28 = [v10 inviterAccount];
    if (v28)
    {
      long long v29 = +[HMDIdentityRegistry sharedRegistry];
      long long v30 = [v10 inviterIdentity];
      [v29 registerIdentity:v30 account:v28 object:v10];
    }
    if (v33) {
      [v33 addToPayload:v15];
    }
  }
  objc_initWeak((id *)buf, self);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __94__HMDHomeManager___sendUpdateRequestToAdminForInvitation_homeUUID_invitationState_authStatus___block_invoke;
  aBlock[3] = &unk_1E6A16B08;
  objc_copyWeak(&v44, (id *)buf);
  aBlock[4] = self;
  id v31 = v10;
  id v43 = v31;
  uint64_t v32 = _Block_copy(aBlock);
  if (a5 == 3)
  {
    objc_initWeak(&location, self);
    v35[0] = MEMORY[0x1E4F143A8];
    v35[1] = 3221225472;
    v35[2] = __94__HMDHomeManager___sendUpdateRequestToAdminForInvitation_homeUUID_invitationState_authStatus___block_invoke_1461;
    v35[3] = &unk_1E6A16B30;
    objc_copyWeak(v40, &location);
    id v36 = v31;
    id v37 = v34;
    id v38 = v15;
    v40[1] = (id)3;
    id v39 = v32;
    [(HMDHomeManager *)self addIssuerKeyToMessagePayload:v38 invitation:v36 completion:v35];

    objc_destroyWeak(v40);
    objc_destroyWeak(&location);
  }
  else
  {
    [(HMDHomeManager *)self sendRequestForInvitation:v31 homeUUID:v34 payload:v15 invitationState:a5 responseHandler:v32];
  }

  objc_destroyWeak(&v44);
  objc_destroyWeak((id *)buf);
}

void __94__HMDHomeManager___sendUpdateRequestToAdminForInvitation_homeUUID_invitationState_authStatus___block_invoke(id *a1, void *a2, void *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (!WeakRetained) {
    goto LABEL_18;
  }
  id v8 = (void *)MEMORY[0x1D9452090]();
  id v9 = a1[4];
  id v10 = HMFGetOSLogHandle();
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
  if (!v6)
  {
    if (v11)
    {
      long long v23 = HMFGetLogIdentifier();
      uint64_t v24 = [a1[5] describeWithFormat];
      int v31 = 138543618;
      uint64_t v32 = v23;
      __int16 v33 = 2112;
      id v34 = v24;
      uint64_t v25 = "%{public}@Modified invitation state for invite %@";
LABEL_13:
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, v25, (uint8_t *)&v31, 0x16u);
    }
LABEL_14:

    goto LABEL_18;
  }
  if (v11)
  {
    id v12 = HMFGetLogIdentifier();
    id v13 = [a1[5] describeWithFormat];
    int v31 = 138543874;
    uint64_t v32 = v12;
    __int16 v33 = 2112;
    id v34 = v13;
    __int16 v35 = 2112;
    id v36 = v6;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Failed to modify invitation state for invite %@ due to error %@", (uint8_t *)&v31, 0x20u);
  }
  uint64_t v14 = [v6 code];
  uint64_t v15 = [v6 code];
  uint64_t v16 = [v6 code];
  uint64_t v17 = [v6 code];
  if (v15 != 1006 && v17 != 1008)
  {
    if (v16 == 1007)
    {
      id v18 = (void *)MEMORY[0x1D9452090]();
      id v19 = a1[4];
      BOOL v20 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        id v21 = HMFGetLogIdentifier();
        id v22 = [a1[5] describeWithFormat];
        int v31 = 138543618;
        uint64_t v32 = v21;
        __int16 v33 = 2112;
        id v34 = v22;
        _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@Updating invitation (%@) to accepted and pending to match sender state", (uint8_t *)&v31, 0x16u);
      }
      [WeakRetained _postIncomingInvitationStateChangedNotification:a1[5] newInvitationState:5];
      [WeakRetained saveWithReason:v5 information:0 postSyncNotification:0];
      goto LABEL_18;
    }
    if (v14 != 2) {
      goto LABEL_18;
    }
    id v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = a1[4];
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      long long v23 = HMFGetLogIdentifier();
      uint64_t v24 = [a1[5] describeWithFormat];
      int v31 = 138543618;
      uint64_t v32 = v23;
      __int16 v33 = 2112;
      id v34 = v24;
      uint64_t v25 = "%{public}@Inviter did not find invitation (%@), ignoring response";
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  long long v26 = (void *)MEMORY[0x1D9452090](v17);
  id v27 = a1[4];
  long long v28 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
  {
    long long v29 = HMFGetLogIdentifier();
    long long v30 = [a1[5] describeWithFormat];
    int v31 = 138543618;
    uint64_t v32 = v29;
    __int16 v33 = 2112;
    id v34 = v30;
    _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_INFO, "%{public}@Updating invitation (%@) to expired since sender could not find it or it was expired", (uint8_t *)&v31, 0x16u);
  }
  [a1[5] expire];
LABEL_18:
}

void __94__HMDHomeManager___sendUpdateRequestToAdminForInvitation_homeUUID_invitationState_authStatus___block_invoke_1461(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (!a2 && WeakRetained)
  {
    id v5 = WeakRetained;
    [WeakRetained sendRequestForInvitation:*(void *)(a1 + 32) homeUUID:*(void *)(a1 + 40) payload:*(void *)(a1 + 48) invitationState:*(void *)(a1 + 72) responseHandler:*(void *)(a1 + 56)];
    id WeakRetained = v5;
  }
}

- (BOOL)getOrCreateControllerPublicKey:(id *)a3 controllerUsername:(id *)a4 error:(id *)a5
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v23 = 0;
  id v9 = [(HMDHomeManager *)self getOrCreateLocalPairingIdentity:&v23];
  id v10 = v23;
  BOOL v11 = v10;
  if (v10)
  {
    if (a5) {
      *a5 = v10;
    }
    id v12 = (void *)MEMORY[0x1D9452090]();
    id v13 = self;
    uint64_t v14 = HMFGetOSLogHandle();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO)) {
      goto LABEL_7;
    }
    uint64_t v15 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    uint64_t v25 = v15;
    __int16 v26 = 2112;
    id v27 = v11;
    uint64_t v16 = "%{public}@Failed to get or create local pairing identity: %@";
    uint64_t v17 = v14;
    os_log_type_t v18 = OS_LOG_TYPE_INFO;
    uint32_t v19 = 22;
    goto LABEL_6;
  }
  if (!v9)
  {
    id v12 = (void *)MEMORY[0x1D9452090]();
    id v13 = self;
    uint64_t v14 = HMFGetOSLogHandle();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    uint64_t v15 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    uint64_t v25 = v15;
    uint64_t v16 = "%{public}@Unable to get identity but no error provided";
    uint64_t v17 = v14;
    os_log_type_t v18 = OS_LOG_TYPE_DEFAULT;
    uint32_t v19 = 12;
LABEL_6:
    _os_log_impl(&dword_1D49D5000, v17, v18, v16, buf, v19);

LABEL_7:
    BOOL v20 = 0;
    goto LABEL_14;
  }
  if (a3)
  {
    id v21 = [v9 publicKey];
    *a3 = [v21 data];
  }
  if (a4)
  {
    *a4 = [v9 identifier];
  }
  BOOL v20 = 1;
LABEL_14:

  return v20;
}

- (id)getOrCreateLocalPairingIdentity:(id *)a3
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  id v4 = [MEMORY[0x1E4F5BE48] systemStore];
  id v68 = 0;
  id v69 = 0;
  id v66 = 0;
  id v67 = 0;
  int v5 = [v4 getAllAvailableControllerPublicKeys:&v69 secretKeys:&v68 userNames:&v67 error:&v66];
  id v6 = v69;
  id v7 = v68;
  id v8 = v67;
  id v9 = (HMDHomeManagerModel *)v66;

  if (v5) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10 && v6 != 0 && v8 != 0)
  {
    if ([v8 count])
    {
      uint64_t v13 = [v8 count];
      if (v13 == [v6 count])
      {
        id v14 = [v6 objectAtIndexedSubscript:0];
        id v15 = [v7 objectAtIndexedSubscript:0];
        id v16 = [v8 objectAtIndexedSubscript:0];
        if ((unint64_t)[v8 count] < 2)
        {
          id v43 = [MEMORY[0x1E4F5BE48] systemStore];
          id v44 = [v43 activeControllerPairingIdentifier];

          if (v44)
          {
LABEL_38:
            long long v41 = a3;
            goto LABEL_39;
          }
          id v58 = v7;
          uint64_t v17 = (void *)MEMORY[0x1D9452090]();
          id v45 = self;
          uint32_t v19 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            BOOL v20 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            __int16 v73 = v20;
            __int16 v74 = 2112;
            id v75 = v16;
            id v21 = "%{public}@Setting controller key as active as none was found: %@";
            goto LABEL_36;
          }
        }
        else
        {
          id v58 = v7;
          uint64_t v17 = (void *)MEMORY[0x1D9452090]();
          os_log_type_t v18 = self;
          uint32_t v19 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            BOOL v20 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            __int16 v73 = v20;
            __int16 v74 = 2112;
            id v75 = v16;
            id v21 = "%{public}@Found multiple controller keys, using first entry as the controller username: %@";
LABEL_36:
            _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_DEFAULT, v21, buf, 0x16u);
          }
        }

        id v46 = [MEMORY[0x1E4F5BE48] systemStore];
        [v46 updateActiveControllerPairingIdentifier:v16];

        id v7 = v58;
        goto LABEL_38;
      }
    }
  }
  id v22 = +[HMDDeviceCapabilities deviceCapabilities];
  if (![v22 supportsKeychainSync])
  {
    id v23 = +[HMDDeviceCapabilities deviceCapabilities];
    if ([v23 isRemoteGatewayCapable])
    {
      BOOL v24 = +[HMDKeyTransferAgentServer isPeerAvailable];

      if (!v24) {
        goto LABEL_20;
      }
    }
    else
    {
    }
    int v31 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:2 userInfo:0];
    id v16 = 0;
    id v15 = 0;
    id v14 = 0;
    goto LABEL_29;
  }

LABEL_20:
  id v59 = v7;
  uint64_t v25 = (void *)MEMORY[0x1D9452090]();
  __int16 v26 = self;
  id v27 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v28 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    __int16 v73 = v28;
    _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@Local controller key does not exist, creating one", buf, 0xCu);
  }
  long long v29 = [MEMORY[0x1E4F5BE48] systemStore];
  id v64 = 0;
  id v65 = 0;
  uint64_t v62 = v9;
  id v63 = 0;
  int v30 = [v29 getControllerPublicKey:&v65 secretKey:&v64 username:&v63 allowCreation:1 error:&v62];
  id v14 = v65;
  id v15 = v64;
  id v16 = v63;
  int v31 = v62;

  if (!v30)
  {
    id v7 = v59;
    goto LABEL_30;
  }
  uint64_t v32 = (void *)MEMORY[0x1D9452090]();
  __int16 v33 = v26;
  id v34 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v35 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    __int16 v73 = v35;
    _os_log_impl(&dword_1D49D5000, v34, OS_LOG_TYPE_DEFAULT, "%{public}@Created new local controller key, forcing push to HomeManager zone to anchor key...", buf, 0xCu);
  }
  id v36 = [HMDHomeManagerModel alloc];
  uint64_t v37 = [(HMDHomeManager *)v33 uuid];
  id v9 = [(HMDBackingStoreModelObject *)v36 initWithObjectChangeType:1 uuid:v37 parentUUID:0];

  [(HMDHomeManagerModel *)v9 setControllerKeyIdentifier:v16];
  id v38 = [(HMDHomeManager *)v33 backingStore];
  id v39 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  uint64_t v40 = [v38 transaction:@"HMD.hm" options:v39];

  [v40 add:v9 withMessage:0];
  [v40 run];

  id v7 = v59;
LABEL_29:

LABEL_30:
  long long v41 = a3;
  if (v31)
  {
    if (a3)
    {
      int v31 = v31;
      long long v42 = 0;
      *a3 = v31;
      goto LABEL_47;
    }
    goto LABEL_46;
  }
LABEL_39:
  if (v14 && v15 && v16)
  {
    __int16 v47 = (void *)[objc_alloc(MEMORY[0x1E4F65510]) initWithPairingKeyData:v14];
    uint64_t v48 = (void *)[objc_alloc(MEMORY[0x1E4F65510]) initWithPairingKeyData:v15];
    long long v42 = (void *)[objc_alloc(MEMORY[0x1E4F5BE00]) initWithIdentifier:v16 publicKey:v47 privateKey:v48 permissions:0];

    int v31 = 0;
    goto LABEL_47;
  }
  if (v41)
  {
    uint64_t v60 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v49 = *MEMORY[0x1E4F2D140];
    uint64_t v70 = *MEMORY[0x1E4F28568];
    uint64_t v50 = [MEMORY[0x1E4F28B50] mainBundle];
    char v51 = [v50 localizedStringForKey:@"Unable to get local pairing identity" value:&stru_1F2C9F1A8 table:0];
    long long v71 = v51;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v71 forKeys:&v70 count:1];
    id v52 = v15;
    id v53 = v14;
    id v54 = v6;
    id v56 = v55 = v7;
    *a3 = [v60 errorWithDomain:v49 code:2 userInfo:v56];

    id v7 = v55;
    id v6 = v54;
    id v14 = v53;
    id v15 = v52;
  }
  int v31 = 0;
LABEL_46:
  long long v42 = 0;
LABEL_47:

  return v42;
}

- (BOOL)_submitSpamReportToIDS:(id)a3
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  int v5 = [MEMORY[0x1E4F1CA60] dictionary];
  id v6 = +[HMDAppleAccountManager sharedManager];
  id v7 = [v6 account];
  id v8 = [v7 handles];
  id v9 = [v8 firstObject];
  BOOL v10 = [v9 remoteDestinationString];

  uint64_t v11 = [v4 inviterUserID];
  if (!v11) {
    goto LABEL_15;
  }
  id v12 = (void *)v11;
  uint64_t v13 = [v4 homeName];
  if (!v13) {
    goto LABEL_14;
  }
  id v14 = (void *)v13;
  uint64_t v15 = [v4 identifier];
  if (!v15)
  {

LABEL_14:
    goto LABEL_15;
  }
  id v16 = (void *)v15;
  uint64_t v17 = [v4 startDate];

  if (v17 && v10)
  {
    os_log_type_t v18 = [v4 inviterUserID];
    [v5 setObject:v18 forKeyedSubscript:*MEMORY[0x1E4F6ABE8]];

    uint32_t v19 = [v4 homeName];
    [v5 setObject:v19 forKeyedSubscript:@"home-name"];

    BOOL v20 = [v4 identifier];
    id v21 = [v20 UUIDString];
    [v5 setObject:v21 forKeyedSubscript:*MEMORY[0x1E4F6ABD8]];

    id v22 = NSNumber;
    id v23 = [v4 startDate];
    [v23 timeIntervalSince1970];
    uint64_t v25 = [v22 numberWithInteger:(uint64_t)v24];
    [v5 setObject:v25 forKeyedSubscript:*MEMORY[0x1E4F6ABF8]];

    [v5 setObject:v10 forKeyedSubscript:*MEMORY[0x1E4F6ABE0]];
    __int16 v26 = (void *)MEMORY[0x1D9452090]([v5 setObject:@"HomeKitInviteSpam" forKeyedSubscript:*MEMORY[0x1E4F6ABF0]]);
    id v27 = self;
    uint64_t v28 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      long long v29 = HMFGetLogIdentifier();
      int v44 = 138543618;
      id v45 = v29;
      __int16 v46 = 2112;
      __int16 v47 = v5;
      _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_INFO, "%{public}@Reporting invitation as spam: %@", (uint8_t *)&v44, 0x16u);
    }
    int v30 = +[HMDIDSServiceManager sharedManager];
    int v31 = [v30 service];

    uint64_t v32 = (void *)[v5 copy];
    char v33 = [v31 reportSpamMessage:v32];

    if ((v33 & 1) == 0)
    {
      id v34 = (void *)MEMORY[0x1D9452090]();
      __int16 v35 = v27;
      id v36 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_FAULT))
      {
        uint64_t v37 = HMFGetLogIdentifier();
        int v44 = 138543362;
        id v45 = v37;
        _os_log_impl(&dword_1D49D5000, v36, OS_LOG_TYPE_FAULT, "%{public}@Spam report was rejected for some reason. Please file a bug.", (uint8_t *)&v44, 0xCu);
      }
    }

    goto LABEL_18;
  }
LABEL_15:
  id v38 = (void *)MEMORY[0x1D9452090]();
  id v39 = self;
  uint64_t v40 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
  {
    long long v41 = HMFGetLogIdentifier();
    long long v42 = [v4 identifier];
    int v44 = 138543874;
    id v45 = v41;
    __int16 v46 = 2112;
    __int16 v47 = v42;
    __int16 v48 = 2112;
    uint64_t v49 = v10;
    _os_log_impl(&dword_1D49D5000, v40, OS_LOG_TYPE_ERROR, "%{public}@Unexpected nil value for invitation %@, reporter %@", (uint8_t *)&v44, 0x20u);
  }
  char v33 = 0;
LABEL_18:

  return v33;
}

- (void)_processLocalRequestToUpdateHomeInvitation:(id)a3 newState:(int64_t)a4 authStatus:(id)a5 logEventBuilder:(id)a6
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  id v10 = a5;
  id v11 = a6;
  id v12 = [v9 identifier];
  uint64_t v13 = [v12 UUIDString];

  id v14 = (void *)MEMORY[0x1D9452090]();
  uint64_t v15 = self;
  id v16 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    uint64_t v17 = HMFGetLogIdentifier();
    [v9 identifier];
    __int16 v47 = v13;
    id v18 = v11;
    v20 = id v19 = v10;
    id v21 = [v20 UUIDString];
    id v22 = [MEMORY[0x1E4F2E818] homeInvitationStateDescription:a4];
    *(_DWORD *)long long buf = 138543874;
    id v53 = v17;
    __int16 v54 = 2112;
    id v55 = v21;
    __int16 v56 = 2112;
    id v57 = v22;
    _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, "%{public}@[HomeManager] Processing request to update invitation %@ to state %@", buf, 0x20u);

    id v10 = v19;
    id v11 = v18;
    uint64_t v13 = v47;
  }
  id v23 = +[HMDBulletinBoard sharedBulletinBoard];
  [v23 removeBulletinWithRecordID:v13];

  v50[0] = @"kBulletinRecordIDKey";
  v50[1] = @"kInvitationIdentifierKey";
  v51[0] = v13;
  v51[1] = v13;
  v50[2] = @"kInvitationStateKey";
  double v24 = [NSNumber numberWithInteger:a4];
  v51[2] = v24;
  v50[3] = @"kHomeName";
  uint64_t v25 = [v9 homeName];
  v51[3] = v25;
  void v50[4] = @"kHomeUUID";
  __int16 v26 = [v9 homeUUID];
  id v27 = [v26 UUIDString];
  v51[4] = v27;
  uint64_t v28 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v51 forKeys:v50 count:5];
  [(HMDHomeManager *)v15 dismissBulletinOnAllMyTransientDevicesWithContext:v28];

  long long v29 = [v9 resolutionHandler];

  if (v29)
  {
    if (a4 == 3) {
      [v9 accept];
    }
    else {
      [v9 decline];
    }
  }
  else
  {
    int v30 = [v9 homeUUID];
    [(HMDHomeManager *)v15 __sendUpdateRequestToAdminForInvitation:v9 homeUUID:v30 invitationState:a4 authStatus:v10];

    if (a4 == 3)
    {
      __int16 v48 = v13;
      [(HMDHomeManager *)v15 _postIncomingInvitationStateChangedNotification:v9 newInvitationState:5];
      int v31 = [(HMDHomeManager *)v15 uuidsOfRemovedHomes];
      uint64_t v32 = [v9 homeUUID];
      int v33 = [v31 containsObject:v32];

      if (v33)
      {
        id v34 = [(HMDHomeManager *)v15 uuidsOfRemovedHomes];
        __int16 v35 = [v9 homeUUID];
        [v34 removeObject:v35];

        id v36 = (void *)MEMORY[0x1D9452090]();
        uint64_t v37 = v15;
        id v38 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
        {
          id v39 = HMFGetLogIdentifier();
          uint64_t v40 = [v9 homeUUID];
          long long v41 = [v40 UUIDString];
          *(_DWORD *)long long buf = 138543618;
          id v53 = v39;
          __int16 v54 = 2112;
          id v55 = v41;
          _os_log_impl(&dword_1D49D5000, v38, OS_LOG_TYPE_INFO, "%{public}@Removing home with UUID %@ from uuids of guest homes removed locally since invite was accepted", buf, 0x16u);
        }
      }
      long long v42 = [v9 homeUUID];
      id v43 = [(HMDHomeManager *)v15 _homeWithUUID:v42];
      int v44 = [v43 owner];
      id v45 = [v44 account];
      __int16 v46 = [v45 senderCorrelationIdentifier];

      [(HMDHomeManager *)v15 _stopTrackingRemovedHomeUserMergeId:v46];
      uint64_t v13 = v48;
    }
    else
    {
      [(HMDHomeManager *)v15 _removeIncomingInvitation:v9];
      [(HMDHomeManager *)v15 _postIncomingInvitationStateChangedNotification:v9 newInvitationState:a4];
    }
    [(HMDHomeManager *)v15 _saveWithReason:@"kUpdateInvitationStateRequestKey" postSyncNotification:0];
    [(HMDHomeManager *)v15 _updateIncomingInvitesPresent];
  }
}

- (void)_processRequestToUpdateHomeInvitation:(id)a3 invitationState:(int64_t)a4 homeUUID:(id)a5 authStatus:(id)a6 messageName:(id)a7 message:(id)a8
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  id v14 = a3;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  id v18 = a8;
  id v19 = [(HMDHomeManager *)self incomingInvitations];
  BOOL v20 = objc_msgSend(v19, "hmf_firstObjectWithValue:forKeyPath:", v14, @"identifier");

  if (v20)
  {
    id v21 = +[HMDHomeInviteLogEvent updateWithInvitationState:a4 isFMFDevice:isThisDeviceDesignatedFMFDevice()];
    if (v21)
    {
      id v22 = [(HMDHomeManager *)self logEventSubmitter];
      [v22 submitLogEvent:v21];
    }
    if ((unint64_t)a4 <= 7 && ((1 << a4) & 0xD8) != 0)
    {
      id v23 = [v20 identifier];
      id v55 = [v23 UUIDString];

      int v24 = [v20 isExpired];
      if (a4 == 7 || v24)
      {
        id v50 = v17;
        id v51 = v16;
        id v52 = v15;
        int v31 = [v18 numberForKey:@"kInvitationResponseOptionsKey"];
        char v32 = [v31 integerValue];

        int v33 = (void *)MEMORY[0x1D9452090]();
        id v34 = self;
        __int16 v35 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
        {
          uint64_t v49 = v33;
          HMFGetLogIdentifier();
          id v36 = v48 = v18;
          [v20 isExpired];
          HMFBooleanToString();
          v37 = char v53 = v32;
          id v38 = HMFBooleanToString();
          id v39 = HMFBooleanToString();
          *(_DWORD *)long long buf = 138544130;
          id v59 = v36;
          __int16 v60 = 2112;
          uint64_t v61 = v37;
          __int16 v62 = 2112;
          id v63 = v38;
          __int16 v64 = 2112;
          id v65 = v39;
          _os_log_impl(&dword_1D49D5000, v35, OS_LOG_TYPE_INFO, "%{public}@Invitation has expired (%@) or was ignored (%@) / reported as spam (%@), removing and notifying clients.", buf, 0x2Au);

          int v33 = v49;
          char v32 = v53;

          id v18 = v48;
        }
        id v54 = v14;

        if (v32) {
          [(HMDHomeManager *)v34 _submitSpamReportToIDS:v20];
        }
        v56[0] = @"kBulletinRecordIDKey";
        v56[1] = @"kInvitationIdentifierKey";
        v57[0] = v55;
        v57[1] = v55;
        v56[2] = @"kInvitationStateKey";
        uint64_t v40 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v20, "invitationState"));
        v57[2] = v40;
        v56[3] = @"kHomeName";
        long long v41 = [v20 homeName];
        v57[3] = v41;
        void v56[4] = @"kHomeUUID";
        long long v42 = [v20 homeUUID];
        id v43 = [v42 UUIDString];
        v57[4] = v43;
        int v44 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v57 forKeys:v56 count:5];
        [(HMDHomeManager *)v34 dismissBulletinOnAllMyTransientDevicesWithContext:v44];

        if ([v20 isExpired]) {
          uint64_t v45 = 6;
        }
        else {
          uint64_t v45 = 7;
        }
        [(HMDHomeManager *)v34 _postIncomingInvitationStateChangedNotification:v20 newInvitationState:v45];
        [(HMDHomeManager *)v34 _removeIncomingInvitation:v20];
        id v17 = v50;
        [(HMDHomeManager *)v34 _saveWithReason:v50 postSyncNotification:0];
        if (a4 == 3)
        {
          __int16 v46 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:23 userInfo:0];
        }
        else
        {
          __int16 v46 = 0;
        }
        id v15 = v52;
        id v14 = v54;
        id v16 = v51;
        [v18 respondWithPayload:0 error:v46];
      }
      else
      {
        [(HMDHomeManager *)self _processLocalRequestToUpdateHomeInvitation:v20 newState:a4 authStatus:v16 logEventBuilder:0];
        [v18 respondWithPayload:0];
      }
    }
    else
    {
      __int16 v47 = [MEMORY[0x1E4F28C58] hmErrorWithCode:43];
      [v18 respondWithError:v47];
    }
  }
  else
  {
    id v25 = v17;
    __int16 v26 = (void *)MEMORY[0x1D9452090]();
    id v27 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v29 = id v28 = v16;
      int v30 = [v14 UUIDString];
      *(_DWORD *)long long buf = 138543618;
      id v59 = v29;
      __int16 v60 = 2112;
      uint64_t v61 = v30;
      _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_INFO, "%{public}@Invalid invite identifier specified %@", buf, 0x16u);

      id v16 = v28;
    }

    id v21 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:2 userInfo:0];
    [v18 respondWithError:v21];
    id v17 = v25;
  }
}

- (void)processRequestToUpdateHomeInvitation:(id)a3 invitationState:(int64_t)a4 homeUUID:(id)a5 authStatus:(id)a6 messageName:(id)a7 message:(id)a8
{
  id v14 = a3;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  id v18 = a8;
  id v19 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __111__HMDHomeManager_processRequestToUpdateHomeInvitation_invitationState_homeUUID_authStatus_messageName_message___block_invoke;
  block[3] = &unk_1E6A16AE0;
  void block[4] = self;
  id v26 = v14;
  id v30 = v18;
  int64_t v31 = a4;
  id v27 = v15;
  id v28 = v16;
  id v29 = v17;
  id v20 = v18;
  id v21 = v17;
  id v22 = v16;
  id v23 = v15;
  id v24 = v14;
  dispatch_async(v19, block);
}

uint64_t __111__HMDHomeManager_processRequestToUpdateHomeInvitation_invitationState_homeUUID_authStatus_messageName_message___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _processRequestToUpdateHomeInvitation:*(void *)(a1 + 40) invitationState:*(void *)(a1 + 80) homeUUID:*(void *)(a1 + 48) authStatus:*(void *)(a1 + 56) messageName:*(void *)(a1 + 64) message:*(void *)(a1 + 72)];
}

- (void)_handleRequestToUpdateHomeInvitationFromLocalUser:(id)a3
{
  id v11 = a3;
  id v4 = [v11 uuidForKey:@"kInvitationIdentifierKey"];
  int v5 = [v11 numberForKey:@"kInvitationStateKey"];
  id v6 = [v11 uuidForKey:@"kHomeUUID"];
  id v7 = [MEMORY[0x1E4F2EBC0] authWithMessage:v11];
  if (v4 && v5 && v6)
  {
    uint64_t v8 = [v5 integerValue];
    id v9 = [v11 name];
    [(HMDHomeManager *)self _processRequestToUpdateHomeInvitation:v4 invitationState:v8 homeUUID:v6 authStatus:v7 messageName:v9 message:v11];
  }
  else
  {
    id v9 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:3 userInfo:0];
    id v10 = [v11 responseHandler];
    ((void (**)(void, void *, void))v10)[2](v10, v9, 0);
  }
}

- (void)_handleRequestToCancelHomeInvitation:(id)a3 saveReason:(id)a4
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v6 identifier];
  id v9 = [v8 UUIDString];

  id v10 = (void *)MEMORY[0x1D9452090]();
  id v11 = self;
  id v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = HMFGetLogIdentifier();
    id v14 = [v6 describeWithFormat];
    int v16 = 138543618;
    id v17 = v13;
    __int16 v18 = 2112;
    id v19 = v14;
    _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Updating invitation %@ to canceled due to request from inviter", (uint8_t *)&v16, 0x16u);
  }
  id v15 = +[HMDBulletinBoard sharedBulletinBoard];
  [v15 removeBulletinWithRecordID:v9];

  [(HMDHomeManager *)v11 _postIncomingInvitationStateChangedNotification:v6 newInvitationState:1];
  [(HMDHomeManager *)v11 _removeIncomingInvitation:v6];
  [(HMDHomeManager *)v11 _saveWithReason:v7 postSyncNotification:0];
}

- (void)_handleRequestToUpdateHomeInvitationFromInviter:(id)a3
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  int v5 = [v4 uuidForKey:@"kInvitationIdentifierKey"];
  uint64_t v6 = [v4 numberForKey:@"kInvitationStateKey"];
  id v7 = (void *)v6;
  if (!v5 || !v6)
  {
    id v9 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:3 userInfo:0];
    [v4 respondWithError:v9];
    goto LABEL_12;
  }
  uint64_t v8 = [(HMDHomeManager *)self incomingInvitations];
  id v9 = objc_msgSend(v8, "hmf_firstObjectWithValue:forKeyPath:", v5, @"identifier");

  if (!v9)
  {
    id v11 = (void *)MEMORY[0x1D9452090]();
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = HMFGetLogIdentifier();
      id v14 = [v5 UUIDString];
      int v19 = 138543618;
      uint64_t v20 = v13;
      __int16 v21 = 2112;
      id v22 = v14;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Invalid invite identifier specified %@", (uint8_t *)&v19, 0x16u);
    }
    id v15 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v16 = *MEMORY[0x1E4F2D140];
    uint64_t v17 = 2;
    goto LABEL_11;
  }
  if ([v7 integerValue] != 1)
  {
    id v15 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v16 = *MEMORY[0x1E4F2D140];
    uint64_t v17 = 43;
LABEL_11:
    __int16 v18 = [v15 errorWithDomain:v16 code:v17 userInfo:0];
    [v4 respondWithError:v18];

    goto LABEL_12;
  }
  id v10 = [v4 name];
  [(HMDHomeManager *)self _handleRequestToCancelHomeInvitation:v9 saveReason:v10];

LABEL_12:
}

- (void)_pruneExpiredIncomingInvitations
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v2 = [(HMDHomeManager *)self incomingInvitations];
  BOOL v3 = (void *)[v2 copy];

  id obj = v3;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v27 objects:v35 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v26 = *(void *)v28;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v28 != v26) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v27 + 1) + 8 * i);
        uint64_t v8 = [MEMORY[0x1E4F1C9C8] date];
        id v9 = [v7 endDate];
        uint64_t v10 = [v8 compare:v9];

        if (v10 != -1)
        {
          [v7 updateInvitationState:6];
          id v11 = [v7 identifier];
          id v12 = (void *)MEMORY[0x1D9452090]();
          uint64_t v13 = self;
          id v14 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            id v15 = HMFGetLogIdentifier();
            uint64_t v16 = [v7 describeWithFormat];
            *(_DWORD *)long long buf = 138543618;
            char v32 = v15;
            __int16 v33 = 2112;
            id v34 = v16;
            _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Pruning invitation %@ as expired", buf, 0x16u);
          }
          uint64_t v17 = +[HMDBulletinBoard sharedBulletinBoard];
          __int16 v18 = [v11 UUIDString];
          [v17 removeBulletinWithRecordID:v18];

          -[HMDHomeManager _postIncomingInvitationStateChangedNotification:newInvitationState:](v13, "_postIncomingInvitationStateChangedNotification:newInvitationState:", v7, [v7 invitationState]);
          [(HMDHomeManager *)v13 _removeIncomingInvitation:v7];
          int v19 = (void *)MEMORY[0x1D9452090]([(HMDHomeManager *)v13 saveWithReason:@"kAccessHomeInviteRequestKey" information:0 postSyncNotification:0]);
          uint64_t v20 = v13;
          __int16 v21 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            id v22 = HMFGetLogIdentifier();
            uint64_t v23 = [(HMDHomeManager *)v20 incomingInvitations];
            *(_DWORD *)long long buf = 138543618;
            char v32 = v22;
            __int16 v33 = 2112;
            id v34 = v23;
            _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@Incoming invitations after pruning: %@", buf, 0x16u);
          }
        }
      }
      uint64_t v5 = [obj countByEnumeratingWithState:&v27 objects:v35 count:16];
    }
    while (v5);
  }
}

- (int64_t)numberOfPendingIncomingInvitation
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v2 = [(HMDHomeManager *)self incomingInvitations];
  BOOL v3 = (void *)[v2 copy];

  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    int64_t v6 = 0;
    uint64_t v7 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v3);
        }
        if ([*(id *)(*((void *)&v10 + 1) + 8 * i) invitationState] == 2) {
          ++v6;
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }
  else
  {
    int64_t v6 = 0;
  }

  return v6;
}

- (void)_removeIncomingInvitation:(id)a3
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (v4)
  {
    os_unfair_lock_lock_with_options();
    uint64_t v5 = [(HMDHomeManager *)self incomingInvitations];
    [v5 removeObject:v4];

    os_unfair_lock_unlock(&self->_lock);
    [(HMDHomeManager *)self _updateIncomingInvitesPresent];
  }
  else
  {
    int64_t v6 = (void *)MEMORY[0x1D9452090]();
    uint64_t v7 = self;
    uint64_t v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = HMFGetLogIdentifier();
      int v11 = 138543362;
      long long v12 = v9;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_ERROR, "%{public}@Unexpected nil invitation", (uint8_t *)&v11, 0xCu);
    }
    long long v10 = +[HMDTTRManager sharedManager];
    [v10 requestRadarWithDisplayReason:@"nil invitation detected" radarTitle:@"Unexpected nil invitation detected" componentName:@"HomeKit" componentVersion:@"Users+Invitations" componentID:938670];
  }
}

- (void)_addIncomingInvitation:(id)a3
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  p_locuint64_t k = &self->_lock;
  uint64_t v6 = os_unfair_lock_lock_with_options();
  uint64_t v7 = (void *)MEMORY[0x1D9452090](v6);
  uint64_t v8 = self;
  HMFGetOSLogHandle();
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v10 = (id)objc_claimAutoreleasedReturnValue();
    int v11 = [v4 describeWithFormat];
    int v13 = 138543618;
    id v14 = v10;
    __int16 v15 = 2112;
    uint64_t v16 = v11;
    _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Added the invitation object to the list : %@", (uint8_t *)&v13, 0x16u);
  }
  long long v12 = [(HMDHomeManager *)v8 incomingInvitations];
  [v12 addObject:v4];

  os_unfair_lock_unlock(p_lock);
  [(HMDHomeManager *)v8 _updateIncomingInvitesPresent];
}

- (void)_handleGetTLVForJSON:(id)a3
{
  v12[1] = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  id v4 = [v3 dataForKey:*MEMORY[0x1E4F2D490]];
  if (v4)
  {
    id v10 = 0;
    uint64_t v5 = +[HMDNetworkRouterFirewallRuleManagerUtils dumpTLVsFromJSONData:v4 error:&v10];
    id v6 = v10;
    uint64_t v7 = v6;
    if (v5)
    {
      uint64_t v11 = *MEMORY[0x1E4F2D498];
      v12[0] = v5;
      uint64_t v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v12 forKeys:&v11 count:1];
      [v3 respondWithPayload:v8];
    }
    else
    {
      if (!v6)
      {
        uint64_t v7 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
      }
      [v3 respondWithError:v7];
    }
  }
  else
  {
    id v9 = [MEMORY[0x1E4F28C58] hmErrorWithCode:20];
    [v3 respondWithError:v9];
  }
}

- (void)_handleNetworkFirewallFetchCloudChangesRequest:(id)a3
{
  id v4 = a3;
  char v5 = [v4 BOOLForKey:*MEMORY[0x1E4F2DB50]];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __65__HMDHomeManager__handleNetworkFirewallFetchCloudChangesRequest___block_invoke;
  v7[3] = &unk_1E6A16AB8;
  char v9 = v5;
  id v8 = v4;
  id v6 = v4;
  [(HMDHomeManager *)self __startupFirewallRuleManagerForMessage:v6 completion:v7];
}

void __65__HMDHomeManager__handleNetworkFirewallFetchCloudChangesRequest___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 40);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __65__HMDHomeManager__handleNetworkFirewallFetchCloudChangesRequest___block_invoke_2;
  v4[3] = &unk_1E6A16A90;
  id v5 = *(id *)(a1 + 32);
  [a2 forceFetchCloudChangesAndForceChangeNotifications:v3 completion:v4];
}

uint64_t __65__HMDHomeManager__handleNetworkFirewallFetchCloudChangesRequest___block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (a2) {
    a3 = 0;
  }
  return [v3 respondWithPayload:0 error:a3];
}

- (void)_handleNetworkFirewallRemoveLocalRulesRequest:(id)a3
{
  id v4 = a3;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __64__HMDHomeManager__handleNetworkFirewallRemoveLocalRulesRequest___block_invoke;
  v6[3] = &unk_1E6A16A68;
  id v7 = v4;
  id v5 = v4;
  [(HMDHomeManager *)self __startupFirewallRuleManagerForMessage:v5 completion:v6];
}

void __64__HMDHomeManager__handleNetworkFirewallRemoveLocalRulesRequest___block_invoke(uint64_t a1, void *a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  void v3[2] = __64__HMDHomeManager__handleNetworkFirewallRemoveLocalRulesRequest___block_invoke_2;
  v3[3] = &unk_1E6A197F0;
  id v4 = *(id *)(a1 + 32);
  [a2 removeAllLocalRulesWithCompletion:v3];
}

uint64_t __64__HMDHomeManager__handleNetworkFirewallRemoveLocalRulesRequest___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) respondWithPayload:0 error:a2];
}

- (void)_handleNetworkFirewallDumpPairedMetadataRequest:(id)a3
{
  id v4 = a3;
  id v5 = [v4 stringForKey:*MEMORY[0x1E4F2DB30]];
  id v6 = [v4 stringForKey:*MEMORY[0x1E4F2DB38]];
  id v7 = [v4 stringForKey:*MEMORY[0x1E4F2DB18]];
  char v8 = [v4 BOOLForKey:*MEMORY[0x1E4F2DB20]];
  char v9 = [v4 BOOLForKey:*MEMORY[0x1E4F2DB40]];
  if ((v5 != 0) != (v6 != 0)) {
    goto LABEL_8;
  }
  if (v7 && v6 == 0) {
    goto LABEL_8;
  }
  char v11 = v9;
  if (!v7)
  {
    long long v12 = 0;
    goto LABEL_11;
  }
  long long v12 = (void *)[objc_alloc(MEMORY[0x1E4F65590]) initWithVersionString:v7];
  if (v12)
  {
LABEL_11:
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __66__HMDHomeManager__handleNetworkFirewallDumpPairedMetadataRequest___block_invoke;
    v15[3] = &unk_1E6A16A40;
    id v16 = v4;
    id v17 = v5;
    id v18 = v6;
    id v19 = v12;
    char v20 = v8;
    char v21 = v11;
    id v14 = v12;
    [(HMDHomeManager *)self __startupFirewallRuleManagerForMessage:v16 completion:v15];

    goto LABEL_9;
  }
LABEL_8:
  int v13 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
  [v4 respondWithError:v13];

LABEL_9:
}

void __66__HMDHomeManager__handleNetworkFirewallDumpPairedMetadataRequest___block_invoke(uint64_t a1, void *a2)
{
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __66__HMDHomeManager__handleNetworkFirewallDumpPairedMetadataRequest___block_invoke_2;
  aBlock[3] = &unk_1E6A169A0;
  id v7 = *(id *)(a1 + 32);
  id v4 = a2;
  id v5 = _Block_copy(aBlock);
  [v4 dumpPairedMetadataForProductGroup:*(void *)(a1 + 40) productNumber:*(void *)(a1 + 48) firmwareVersion:*(void *)(a1 + 56) ignoreOverrides:*(unsigned __int8 *)(a1 + 64) rawOutput:*(unsigned __int8 *)(a1 + 65) completion:v5];
}

void __66__HMDHomeManager__handleNetworkFirewallDumpPairedMetadataRequest___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  if (v5)
  {
    id v6 = (void *)MEMORY[0x1E4F28C58];
    id v7 = a3;
    char v8 = [v5 domain];
    uint64_t v9 = [v5 code];
    uint64_t v18 = *MEMORY[0x1E4F28568];
    id v10 = [v5 debugDescription];
    v19[0] = v10;
    char v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:&v18 count:1];
    long long v12 = [v6 errorWithDomain:v8 code:v9 userInfo:v11];

    [*(id *)(a1 + 32) respondWithError:v12];
  }
  else
  {
    int v13 = *(void **)(a1 + 32);
    uint64_t v16 = *MEMORY[0x1E4F2DB48];
    id v17 = a3;
    id v14 = (void *)MEMORY[0x1E4F1C9E8];
    id v15 = a3;
    long long v12 = [v14 dictionaryWithObjects:&v17 forKeys:&v16 count:1];
    [v13 respondWithPayload:v12];
  }
}

- (void)_handleNetworkFirewallDumpLocalRulesRequest:(id)a3
{
  id v4 = a3;
  id v5 = [v4 stringForKey:*MEMORY[0x1E4F2DAF8]];
  id v6 = [v4 stringForKey:*MEMORY[0x1E4F2DB00]];
  id v7 = [v4 stringForKey:*MEMORY[0x1E4F2DAE0]];
  char v8 = [v4 BOOLForKey:*MEMORY[0x1E4F2DAE8]];
  char v9 = [v4 BOOLForKey:*MEMORY[0x1E4F2DB08]];
  if (v6) {
    BOOL v10 = v5 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10) {
    goto LABEL_11;
  }
  if (v7 && v6 == 0) {
    goto LABEL_11;
  }
  char v12 = v9;
  if (!v7)
  {
    int v13 = 0;
    goto LABEL_14;
  }
  int v13 = (void *)[objc_alloc(MEMORY[0x1E4F65590]) initWithVersionString:v7];
  if (v13)
  {
LABEL_14:
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = __62__HMDHomeManager__handleNetworkFirewallDumpLocalRulesRequest___block_invoke;
    v16[3] = &unk_1E6A16A40;
    id v17 = v4;
    id v18 = v6;
    id v19 = v5;
    id v20 = v13;
    char v21 = v8;
    char v22 = v12;
    id v15 = v13;
    [(HMDHomeManager *)self __startupFirewallRuleManagerForMessage:v17 completion:v16];

    goto LABEL_12;
  }
LABEL_11:
  id v14 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
  [v4 respondWithError:v14];

LABEL_12:
}

void __62__HMDHomeManager__handleNetworkFirewallDumpLocalRulesRequest___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __62__HMDHomeManager__handleNetworkFirewallDumpLocalRulesRequest___block_invoke_2;
  aBlock[3] = &unk_1E6A169A0;
  id v8 = *(id *)(a1 + 32);
  id v4 = _Block_copy(aBlock);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  if (v6)
  {
    [v3 dumpLocalRulesForProductGroup:v5 productNumber:v6 firmwareVersion:*(void *)(a1 + 56) ignoreOverrides:*(unsigned __int8 *)(a1 + 64) rawOutput:*(unsigned __int8 *)(a1 + 65) completion:v4];
  }
  else if (v5)
  {
    objc_msgSend(v3, "dumpLocalRulesForProductGroup:ignoreOverrides:rawOutput:completion:");
  }
  else
  {
    [v3 dumpAllLocalRulesIgnoringOverrides:*(unsigned __int8 *)(a1 + 64) != 0 rawOutput:*(unsigned __int8 *)(a1 + 65) != 0 completion:v4];
  }
}

void __62__HMDHomeManager__handleNetworkFirewallDumpLocalRulesRequest___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  if (v5)
  {
    uint64_t v6 = (void *)MEMORY[0x1E4F28C58];
    id v7 = a3;
    id v8 = [v5 domain];
    uint64_t v9 = [v5 code];
    uint64_t v18 = *MEMORY[0x1E4F28568];
    BOOL v10 = [v5 debugDescription];
    v19[0] = v10;
    char v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:&v18 count:1];
    char v12 = [v6 errorWithDomain:v8 code:v9 userInfo:v11];

    [*(id *)(a1 + 32) respondWithError:v12];
  }
  else
  {
    int v13 = *(void **)(a1 + 32);
    uint64_t v16 = *MEMORY[0x1E4F2DB10];
    id v17 = a3;
    id v14 = (void *)MEMORY[0x1E4F1C9E8];
    id v15 = a3;
    char v12 = [v14 dictionaryWithObjects:&v17 forKeys:&v16 count:1];
    [v13 respondWithPayload:v12];
  }
}

- (void)_handleNetworkFirewallRemoveOverridesRequest:(id)a3
{
  id v4 = a3;
  id v5 = [v4 stringForKey:*MEMORY[0x1E4F2DB70]];
  uint64_t v6 = [v4 stringForKey:*MEMORY[0x1E4F2DB78]];
  if (v6) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    id v8 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    [v4 respondWithError:v8];
  }
  else
  {
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __63__HMDHomeManager__handleNetworkFirewallRemoveOverridesRequest___block_invoke;
    v9[3] = &unk_1E6A16A18;
    id v10 = v4;
    id v11 = v5;
    id v12 = v6;
    [(HMDHomeManager *)self __startupFirewallRuleManagerForMessage:v10 completion:v9];
  }
}

void __63__HMDHomeManager__handleNetworkFirewallRemoveOverridesRequest___block_invoke(uint64_t a1, void *a2)
{
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __63__HMDHomeManager__handleNetworkFirewallRemoveOverridesRequest___block_invoke_2;
  aBlock[3] = &unk_1E6A197F0;
  id v8 = *(id *)(a1 + 32);
  id v4 = a2;
  id v5 = _Block_copy(aBlock);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    [v4 removeOverridesForProductGroup:v6 productNumber:*(void *)(a1 + 48) completion:v5];
  }
  else {
    [v4 removeAllOverridesWithCompletion:v5];
  }
}

uint64_t __63__HMDHomeManager__handleNetworkFirewallRemoveOverridesRequest___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) respondWithPayload:0 error:a2];
}

- (void)_handleNetworkFirewallAddOverridesRequest:(id)a3
{
  id v4 = a3;
  id v5 = [v4 dataForKey:*MEMORY[0x1E4F2DA90]];
  if (v5)
  {
    char v6 = [v4 BOOLForKey:*MEMORY[0x1E4F2DAA0]];
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = __60__HMDHomeManager__handleNetworkFirewallAddOverridesRequest___block_invoke;
    v8[3] = &unk_1E6A169F0;
    id v9 = v4;
    char v11 = v6;
    id v10 = v5;
    [(HMDHomeManager *)self __startupFirewallRuleManagerForMessage:v9 completion:v8];
  }
  else
  {
    BOOL v7 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    [v4 respondWithError:v7];
  }
}

void __60__HMDHomeManager__handleNetworkFirewallAddOverridesRequest___block_invoke(uint64_t a1, void *a2)
{
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __60__HMDHomeManager__handleNetworkFirewallAddOverridesRequest___block_invoke_2;
  aBlock[3] = &unk_1E6A197F0;
  id v8 = *(id *)(a1 + 32);
  id v4 = a2;
  id v5 = _Block_copy(aBlock);
  uint64_t v6 = *(void *)(a1 + 40);
  if (*(unsigned char *)(a1 + 48)) {
    [v4 setOverrides:v6 completion:v5];
  }
  else {
    [v4 addOverrides:v6 completion:v5];
  }
}

uint64_t __60__HMDHomeManager__handleNetworkFirewallAddOverridesRequest___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) respondWithPayload:0 error:a2];
}

- (void)_handleNetworkFirewallDumpCloudRecordsRequest:(id)a3
{
  id v4 = a3;
  id v5 = [v4 stringForKey:*MEMORY[0x1E4F2DAB8]];
  uint64_t v6 = [v4 stringForKey:*MEMORY[0x1E4F2DAC0]];
  char v7 = [v4 BOOLForKey:*MEMORY[0x1E4F2DAC8]];
  char v8 = [v4 BOOLForKey:*MEMORY[0x1E4F2DAA8]];
  char v9 = [v4 BOOLForKey:*MEMORY[0x1E4F2DAD8]];
  if (!v5 || [v5 length])
  {
    if (v6)
    {
      uint64_t v10 = [v6 length];
      if (v5) {
        char v11 = 1;
      }
      else {
        char v11 = v8;
      }
      if (v5) {
        BOOL v12 = v10 == 0;
      }
      else {
        BOOL v12 = 1;
      }
      if (v12 || (v11 & 1) == 0) {
        goto LABEL_15;
      }
LABEL_16:
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 3221225472;
      void v14[2] = __64__HMDHomeManager__handleNetworkFirewallDumpCloudRecordsRequest___block_invoke;
      v14[3] = &unk_1E6A169C8;
      id v15 = v4;
      char v18 = v8;
      id v16 = v5;
      char v19 = v7;
      id v17 = v6;
      char v20 = v9;
      [(HMDHomeManager *)self __startupFirewallRuleManagerForMessage:v15 completion:v14];

      goto LABEL_17;
    }
    if (v5 || (v8 & 1) != 0) {
      goto LABEL_16;
    }
  }
LABEL_15:
  int v13 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
  [v4 respondWithError:v13];

LABEL_17:
}

void __64__HMDHomeManager__handleNetworkFirewallDumpCloudRecordsRequest___block_invoke(uint64_t a1, void *a2)
{
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __64__HMDHomeManager__handleNetworkFirewallDumpCloudRecordsRequest___block_invoke_2;
  aBlock[3] = &unk_1E6A169A0;
  id v8 = *(id *)(a1 + 32);
  id v4 = a2;
  id v5 = _Block_copy(aBlock);
  uint64_t v6 = *(void *)(a1 + 40);
  if (*(unsigned char *)(a1 + 56)) {
    [v4 listCloudRecordsForProductGroup:v6 rawOutput:*(unsigned __int8 *)(a1 + 57) completion:v5];
  }
  else {
    [v4 dumpCloudRecordsForProductGroup:v6 productNumber:*(void *)(a1 + 48) rawOutput:*(unsigned __int8 *)(a1 + 57) verifySignatures:*(unsigned __int8 *)(a1 + 58) completion:v5];
  }
}

void __64__HMDHomeManager__handleNetworkFirewallDumpCloudRecordsRequest___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  if (v5)
  {
    uint64_t v6 = (void *)MEMORY[0x1E4F28C58];
    id v7 = a3;
    id v8 = [v5 domain];
    uint64_t v9 = [v5 code];
    uint64_t v18 = *MEMORY[0x1E4F28568];
    uint64_t v10 = [v5 debugDescription];
    v19[0] = v10;
    char v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:&v18 count:1];
    BOOL v12 = [v6 errorWithDomain:v8 code:v9 userInfo:v11];

    [*(id *)(a1 + 32) respondWithError:v12];
  }
  else
  {
    int v13 = *(void **)(a1 + 32);
    uint64_t v16 = *MEMORY[0x1E4F2DAD0];
    id v17 = a3;
    id v14 = (void *)MEMORY[0x1E4F1C9E8];
    id v15 = a3;
    BOOL v12 = [v14 dictionaryWithObjects:&v17 forKeys:&v16 count:1];
    [v13 respondWithPayload:v12];
  }
}

- (void)__startupFirewallRuleManagerForMessage:(id)a3 completion:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [HMDTransientRuleManagerClient alloc];
  uint64_t v9 = [v6 identifier];
  uint64_t v10 = [v9 UUIDString];
  char v11 = [(HMDTransientRuleManagerClient *)v8 initWithDescription:v10];

  BOOL v12 = +[HMDNetworkRouterFirewallRuleManager sharedInstance];
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = __68__HMDHomeManager___startupFirewallRuleManagerForMessage_completion___block_invoke;
  v17[3] = &unk_1E6A16978;
  void v17[4] = self;
  id v18 = v6;
  id v19 = v12;
  char v20 = v11;
  id v21 = v7;
  id v13 = v7;
  id v14 = v11;
  id v15 = v12;
  id v16 = v6;
  [v15 startupForClient:v14 completion:v17];
}

void __68__HMDHomeManager___startupFirewallRuleManagerForMessage_completion___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = *(id *)(a1 + 32);
    id v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v7 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v16 = v7;
      __int16 v17 = 2112;
      id v18 = v3;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to start up rule manager: %@", buf, 0x16u);
    }
    [*(id *)(a1 + 40) respondWithError:v3];
  }
  else
  {
    id v8 = [*(id *)(a1 + 40) responseHandler];
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __68__HMDHomeManager___startupFirewallRuleManagerForMessage_completion___block_invoke_1449;
    v11[3] = &unk_1E6A16950;
    id v12 = *(id *)(a1 + 48);
    id v13 = *(id *)(a1 + 56);
    id v14 = v8;
    uint64_t v9 = *(void **)(a1 + 40);
    id v10 = v8;
    [v9 setResponseHandler:v11];
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
}

void __68__HMDHomeManager___startupFirewallRuleManagerForMessage_completion___block_invoke_1449(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  [*(id *)(a1 + 32) shutdownForClient:*(void *)(a1 + 40)];
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v5);
  }
}

- (void)_logState:(id)a3 key:(id)a4 indent:(id)a5
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  char v11 = v10;
  if (v10) {
    [v10 indentationByLevels:1];
  }
  else {
  char v32 = [MEMORY[0x1E4F65568] indentation];
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    long long v29 = v11;
    id v30 = v9;
    id v31 = v8;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    id v12 = v8;
    uint64_t v13 = [v12 countByEnumeratingWithState:&v38 objects:v51 count:16];
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = *(void *)v39;
      uint64_t v33 = *MEMORY[0x1E4F64EA0];
      do
      {
        for (uint64_t i = 0; i != v14; ++i)
        {
          if (*(void *)v39 != v15) {
            objc_enumerationMutation(v12);
          }
          __int16 v17 = *(void **)(*((void *)&v38 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            if (([v17 isEqualToString:v33] & 1) == 0)
            {
              id v18 = [v12 objectForKey:v17];
              [(HMDHomeManager *)self _logState:v18 key:v17 indent:v32];
            }
          }
          else
          {
            uint64_t v19 = (void *)MEMORY[0x1D9452090]();
            char v20 = self;
            id v21 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              char v22 = HMFGetLogIdentifier();
              uint64_t v23 = objc_opt_class();
              *(_DWORD *)long long buf = 138544130;
              int v44 = v22;
              __int16 v45 = 2112;
              uint64_t v46 = v23;
              __int16 v47 = 2112;
              id v48 = v17;
              __int16 v49 = 2112;
              id v50 = v12;
              _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_ERROR, "%{public}@Cannot include key of non-NSString class %@: %@ in %@", buf, 0x2Au);
            }
          }
        }
        uint64_t v14 = [v12 countByEnumeratingWithState:&v38 objects:v51 count:16];
      }
      while (v14);
    }

    id v9 = v30;
    id v8 = v31;
    char v11 = v29;
LABEL_27:

    goto LABEL_28;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id v24 = v8;
    uint64_t v25 = [v24 countByEnumeratingWithState:&v34 objects:v42 count:16];
    if (v25)
    {
      uint64_t v26 = v25;
      uint64_t v27 = *(void *)v35;
      do
      {
        for (uint64_t j = 0; j != v26; ++j)
        {
          if (*(void *)v35 != v27) {
            objc_enumerationMutation(v24);
          }
          [(HMDHomeManager *)self _logState:*(void *)(*((void *)&v34 + 1) + 8 * j) key:v9 indent:v11];
        }
        uint64_t v26 = [v24 countByEnumeratingWithState:&v34 objects:v42 count:16];
      }
      while (v26);
    }
    goto LABEL_27;
  }
LABEL_28:
}

- (void)_dumpToLog:(id)a3 withState:(id)a4
{
  id v6 = a4;
  [(HMDHomeManager *)self _logState:a3 key:0 indent:0];
  [(HMDHomeManager *)self _logState:v6 key:0 indent:0];
}

- (id)_destinationFromMessage:(id)a3
{
  id v4 = a3;
  uint64_t v15 = MEMORY[0x1E4F143A8];
  uint64_t v16 = 3221225472;
  __int16 v17 = __42__HMDHomeManager__destinationFromMessage___block_invoke;
  id v18 = &unk_1E6A16928;
  uint64_t v19 = self;
  id v5 = v4;
  id v20 = v5;
  id v6 = (void (**)(void *, __CFString *))_Block_copy(&v15);
  id v7 = objc_msgSend(v5, "uuidForKey:", @"HomeUtilRemoteMessageTargetKey", v15, v16, v17, v18, v19);
  if (v7)
  {
    id v8 = [v5 stringForKey:@"HomeUtilRemoteMessageDestinationKey"];
    if (v8)
    {
      id v9 = +[HMDDeviceHandle deviceHandleForDestination:v8];
      if (v9)
      {
        id v10 = [(HMDHomeManager *)self accountRegistry];
        char v11 = [v10 deviceForHandle:v9];

        id v12 = [[HMDRemoteDeviceMessageDestination alloc] initWithTarget:v7 device:v11];
      }
      else
      {
        char v11 = +[HMDAccountHandle accountHandleForDestination:v8];
        if (v11)
        {
          uint64_t v13 = [v5 dictionaryForKey:@"HomeUtilRemoteMessageDeviceCapabilitiesKey"];
          id v12 = [[HMDRemoteAccountMessageDestination alloc] initWithTarget:v7 handle:v11 multicast:v13 == 0 deviceCapabilities:v13];
        }
        else
        {
          v6[2](v6, @"Unknown device, account or home destination");
          id v12 = 0;
        }
      }
    }
    else
    {
      v6[2](v6, @"Remote destination string is missing");
      id v12 = 0;
    }
  }
  else
  {
    v6[2](v6, @"Target UUID is missing");
    id v12 = 0;
  }

  return v12;
}

void __42__HMDHomeManager__destinationFromMessage___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    id v7 = HMFGetLogIdentifier();
    int v10 = 138543618;
    char v11 = v7;
    __int16 v12 = 2112;
    id v13 = v3;
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_ERROR, "%{public}@HomeUtilRemoteMessageRequest: Invalid parameter: %@", (uint8_t *)&v10, 0x16u);
  }
  id v8 = *(void **)(a1 + 40);
  id v9 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3 description:v3 reason:0 suggestion:0];
  [v8 respondWithError:v9];
}

- (void)_handleClearMobileAssetsInfoRequest:(id)a3
{
  id v3 = (void *)MEMORY[0x1E4F28C58];
  id v4 = a3;
  id v5 = [v3 hmErrorWithCode:48];
  [v4 respondWithError:v5];
}

- (void)_handleUpdateMobileAssetsRequest:(id)a3
{
  id v3 = (void *)MEMORY[0x1E4F28C58];
  id v4 = a3;
  id v5 = [v3 hmErrorWithCode:48];
  [v4 respondWithError:v5];
}

- (void)_handleHomeUtilRemoteMessageRequest:(id)a3
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __54__HMDHomeManager__handleHomeUtilRemoteMessageRequest___block_invoke;
  aBlock[3] = &unk_1E6A16928;
  void aBlock[4] = self;
  id v5 = v4;
  id v29 = v5;
  id v6 = (void (**)(void *, __CFString *))_Block_copy(aBlock);
  id v7 = [v5 stringForKey:@"HomeUtilRemoteMessageMessageNameKey"];
  if (v7)
  {
    id v8 = [(HMDHomeManager *)self _destinationFromMessage:v5];
    if (v8)
    {
      id v9 = [v5 dictionaryForKey:@"HomeUtilRemoteMessagePayloadKey"];
      int v10 = [v5 numberForKey:@"HomeUtilRemoteMessageRestrictionKey"];
      id v24 = v10;
      if (v10) {
        uint64_t v11 = [v10 unsignedIntegerValue];
      }
      else {
        uint64_t v11 = -1;
      }
      uint64_t v12 = [v5 BOOLForKey:@"HomeUtilRemoteMessageIsSecureKey"];
      int v13 = [v5 BOOLForKey:@"HomeUtilRemoteMessageIsOnewayKey"];
      char v14 = v13;
      if (v13) {
        uint64_t v15 = 3;
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = [[HMDRemoteMessage alloc] initWithName:v7 destination:v8 payload:v9 type:v15 timeout:v12 secure:v11 restriction:0.0];
      if ((v14 & 1) == 0)
      {
        __int16 v17 = [v5 responseHandler];
        [(HMDRemoteMessage *)v16 setResponseHandler:v17];
      }
      id v18 = (void *)MEMORY[0x1D9452090]();
      uint64_t v19 = self;
      id v20 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        id v21 = v23 = v9;
        *(_DWORD *)long long buf = 138543618;
        id v31 = v21;
        __int16 v32 = 2112;
        uint64_t v33 = v16;
        _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_DEFAULT, "%{public}@HomeUtilRemoteMessageRequest: Sending message: %@", buf, 0x16u);

        id v9 = v23;
      }

      char v22 = [(HMDHomeManager *)v19 messageDispatcher];
      v25[0] = MEMORY[0x1E4F143A8];
      v25[1] = 3221225472;
      v25[2] = __54__HMDHomeManager__handleHomeUtilRemoteMessageRequest___block_invoke_1434;
      v25[3] = &unk_1E6A19690;
      uint64_t v27 = v15;
      id v26 = v5;
      [v22 sendMessage:v16 completionHandler:v25];
    }
  }
  else
  {
    v6[2](v6, @"Message name is missing");
  }
}

void __54__HMDHomeManager__handleHomeUtilRemoteMessageRequest___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    id v7 = HMFGetLogIdentifier();
    int v10 = 138543618;
    uint64_t v11 = v7;
    __int16 v12 = 2112;
    id v13 = v3;
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_ERROR, "%{public}@HomeUtilRemoteMessageRequest: Invalid parameter: %@", (uint8_t *)&v10, 0x16u);
  }
  id v8 = *(void **)(a1 + 40);
  id v9 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3 description:v3 reason:0 suggestion:0];
  [v8 respondWithError:v9];
}

uint64_t __54__HMDHomeManager__handleHomeUtilRemoteMessageRequest___block_invoke_1434(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 40) == 3) {
    return [*(id *)(result + 32) respondWithPayload:0 error:a2];
  }
  return result;
}

- (void)_handleTestModeConfigRequest:(id)a3
{
  id v7 = a3;
  id v4 = [v7 dictionaryForKey:@"kConfigTestingOverrideKey"];
  id v5 = [(HMDHomeManager *)self _processTestModeConfiguration:v4];

  if (v5)
  {
    [v7 respondWithError:v5];
  }
  else
  {
    id v6 = [(HMDHomeManager *)self accessoryBrowserInternal];
    [v6 _handleTestModeConfigRequest:v7];
  }
}

- (id)_processTestModeConfiguration:(id)a3
{
  id v4 = a3;
  id v5 = v4;
  if (v4)
  {
    id v6 = objc_msgSend(v4, "hmf_dictionaryForKey:", @"kConfigTestingOverrideCurrentHomeKey");
    id v7 = [(HMDHomeManager *)self _processTestModeCurrentHomeOverride:v6];

    if (!v7)
    {
      id v8 = objc_msgSend(v5, "hmf_dictionaryForKey:", @"kConfigTestingOverrideHomeLocationStatusKey");
      id v7 = [(HMDHomeManager *)self _processTestModeHomeLocationStatusOverride:v8];

      if (!v7)
      {
        id v9 = objc_msgSend(v5, "hmf_dictionaryForKey:", @"kConfigTestingOverrideHomeAccessControlKey");
        id v7 = [(HMDHomeManager *)self _processTestModeHomeAccessControlOverride:v9];

        if (!v7)
        {
          int v10 = objc_msgSend(v5, "hmf_dictionaryForKey:", @"kConfigTestingOverrideSkipHH2MigrationCheckDictionaryKey");
          id v7 = [(HMDHomeManager *)self _processTestModeSkipHH2MigrationOverride:v10];

          if (!v7)
          {
            uint64_t v11 = objc_msgSend(v5, "hmf_dictionaryForKey:", @"kConfigTestingUpdateHomeLocationKey");
            id v7 = [(HMDHomeManager *)self _processTestModeUpdateHomeLocation:v11];
          }
        }
      }
    }
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

- (id)_processTestModeSkipHH2MigrationOverride:(id)a3
{
  id v4 = a3;
  id v5 = v4;
  if (v4)
  {
    id v6 = objc_msgSend(v4, "hmf_UUIDForKey:", @"kHomeUUID");
    id v7 = [(HMDHomeManager *)self _homeWithUUID:v6];
    id v8 = v7;
    if (v7) {
      [v7 _processTestModeSkipHH2MigrationOverride:v5];
    }
    else {
    id v9 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    }
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

- (id)_processTestModeHomeAccessControlOverride:(id)a3
{
  id v4 = a3;
  id v5 = v4;
  if (v4)
  {
    id v6 = objc_msgSend(v4, "hmf_UUIDForKey:", @"kHomeUUID");
    id v7 = [(HMDHomeManager *)self _homeWithUUID:v6];
    id v8 = v7;
    if (v7)
    {
      id v9 = [v7 _processTestModeHomeAccessControlOverride:v5];
      if (!v9)
      {
        int v10 = [(HMDHomeManager *)self uuid];
        [(HMDHomeManager *)self updateGenerationCounterWithReason:@"kTestModeHomeAccessControlOverride" sourceUUID:v10 shouldNotifyClients:1];

        id v9 = 0;
      }
    }
    else
    {
      id v9 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    }
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

- (id)_processTestModeUpdateHomeLocation:(id)a3
{
  id v4 = a3;
  id v5 = v4;
  if (v4)
  {
    id v6 = objc_msgSend(v4, "hmf_UUIDForKey:", @"kHomeUUID");
    id v7 = [(HMDHomeManager *)self _homeWithUUID:v6];
    id v8 = v7;
    if (v7) {
      [v7 _processTestModeUpdateHomeLocation:v5];
    }
    else {
    id v9 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    }
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

- (id)_processTestModeHomeLocationStatusOverride:(id)a3
{
  id v4 = a3;
  id v5 = v4;
  if (v4)
  {
    id v6 = objc_msgSend(v4, "hmf_UUIDForKey:", @"kHomeUUID");
    id v7 = [(HMDHomeManager *)self _homeWithUUID:v6];
    id v8 = v7;
    if (v7) {
      [v7 _processTestModeHomeLocationStatusOverride:v5];
    }
    else {
    id v9 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    }
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

- (id)_processTestModeCurrentHomeOverride:(id)a3
{
  id v4 = a3;
  id v5 = v4;
  if (!v4)
  {
    id v6 = 0;
    goto LABEL_12;
  }
  if (objc_msgSend(v4, "hmf_BOOLForKey:", @"kConfigTestingResetOverrideKey"))
  {
    [(HMDHomeManager *)self setOverrideCurrentHomeUUIDToNil:0];
  }
  else
  {
    if (objc_msgSend(v5, "hmf_BOOLForKey:", @"kConfigTestingOverrideToNilKey"))
    {
      id v7 = [MEMORY[0x1E4F65408] BOOLeanWithBool:1];
      [(HMDHomeManager *)self setOverrideCurrentHomeUUIDToNil:v7];
    }
    else
    {
      id v7 = objc_msgSend(v5, "hmf_UUIDForKey:", @"kHomeUUID");
      uint64_t v8 = [(HMDHomeManager *)self _homeWithUUID:v7];
      if (!v8)
      {
        id v6 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
        goto LABEL_11;
      }
      id v9 = (void *)v8;
      [(HMDHomeManager *)self setCurrentHomeUUIDOverride:v7];
      int v10 = [MEMORY[0x1E4F65408] BOOLeanWithBool:0];
      [(HMDHomeManager *)self setOverrideCurrentHomeUUIDToNil:v10];
    }
  }
  id v7 = [(HMDHomeManager *)self __computedCurrentHomeUUID];
  [(HMDHomeManager *)self _notifyCurrentHomeUpdated:v7 isLocalUpdate:1];
  id v6 = 0;
LABEL_11:

LABEL_12:
  return v6;
}

- (void)finalizeRetailDemoModeWithAllowEditing:(BOOL)a3 completionHandler:(id)a4
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v6 = a4;
  id v7 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v7);

  if (!a3)
  {
    id v28 = v6;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    uint64_t v8 = [(HMDHomeManager *)self homes];
    uint64_t v9 = [v8 countByEnumeratingWithState:&v39 objects:v45 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v40;
      do
      {
        uint64_t v12 = 0;
        do
        {
          if (*(void *)v40 != v11) {
            objc_enumerationMutation(v8);
          }
          id v13 = *(void **)(*((void *)&v39 + 1) + 8 * v12);
          uint64_t v14 = [MEMORY[0x1E4F29128] UUID];
          uint64_t v15 = [v14 UUIDString];
          [v13 setOwnerName:v15];

          long long v37 = 0u;
          long long v38 = 0u;
          long long v35 = 0u;
          long long v36 = 0u;
          uint64_t v16 = [v13 users];
          uint64_t v17 = [v16 countByEnumeratingWithState:&v35 objects:v44 count:16];
          if (v17)
          {
            uint64_t v18 = v17;
            uint64_t v19 = *(void *)v36;
            do
            {
              uint64_t v20 = 0;
              do
              {
                if (*(void *)v36 != v19) {
                  objc_enumerationMutation(v16);
                }
                [*(id *)(*((void *)&v35 + 1) + 8 * v20++) setPrivilege:0];
              }
              while (v18 != v20);
              uint64_t v18 = [v16 countByEnumeratingWithState:&v35 objects:v44 count:16];
            }
            while (v18);
          }

          ++v12;
        }
        while (v12 != v10);
        uint64_t v10 = [v8 countByEnumeratingWithState:&v39 objects:v45 count:16];
      }
      while (v10);
    }

    id v6 = v28;
  }
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v21 = [(HMDHomeManager *)self homes];
  uint64_t v22 = [v21 countByEnumeratingWithState:&v31 objects:v43 count:16];
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v24 = *(void *)v32;
    do
    {
      uint64_t v25 = 0;
      do
      {
        if (*(void *)v32 != v24) {
          objc_enumerationMutation(v21);
        }
        [*(id *)(*((void *)&v31 + 1) + 8 * v25++) configureNaturalLightingForDemoMode];
      }
      while (v23 != v25);
      uint64_t v23 = [v21 countByEnumeratingWithState:&v31 objects:v43 count:16];
    }
    while (v23);
  }

  self->_demoFinalized = 1;
  [(HMDHomeManager *)self _setHomeConfigurationKey:*MEMORY[0x1E4F2ECC0] value:*MEMORY[0x1E4F1CFD0]];
  [(HMDHomeManager *)self saveWithReason:@"kUpdateUserAccessRequestKey" information:0 saveOptions:0];
  dispatch_time_t v26 = dispatch_time(0, 1000000000);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __75__HMDHomeManager_finalizeRetailDemoModeWithAllowEditing_completionHandler___block_invoke;
  block[3] = &unk_1E6A19530;
  void block[4] = self;
  id v30 = v6;
  id v27 = v6;
  dispatch_after(v26, MEMORY[0x1E4F14428], block);
}

void __75__HMDHomeManager_finalizeRetailDemoModeWithAllowEditing_completionHandler___block_invoke(uint64_t a1)
{
  uint64_t v2 = [HMDBackingStoreFetchArchiveOperation alloc];
  uint64_t v6 = MEMORY[0x1E4F143A8];
  uint64_t v7 = 3221225472;
  uint64_t v8 = __75__HMDHomeManager_finalizeRetailDemoModeWithAllowEditing_completionHandler___block_invoke_2;
  uint64_t v9 = &unk_1E6A16900;
  id v3 = *(void **)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = v3;
  id v4 = [(HMDBackingStoreFetchArchiveOperation *)v2 initWithFetchResult:&v6];
  id v5 = objc_msgSend(*(id *)(a1 + 32), "backingStore", v6, v7, v8, v9, v10);
  [v5 submit:v4];

  [(HMDBackingStoreFetchArchiveOperation *)v4 waitUntilFinished];
}

void __75__HMDHomeManager_finalizeRetailDemoModeWithAllowEditing_completionHandler___block_invoke_2(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v7)
  {
    id v23 = v9;
    uint64_t v10 = +[HMDPersistentStore encryptDataWithControllerKey:v7 error:&v23];
    id v11 = v23;

    if (v10)
    {
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    else
    {
      uint64_t v17 = (void *)MEMORY[0x1D9452090]();
      id v18 = *(id *)(a1 + 32);
      uint64_t v19 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v25 = v20;
        __int16 v26 = 2112;
        id v27 = v11;
        _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_ERROR, "%{public}@Failed to encrypt home data with %@", buf, 0x16u);
      }
      uint64_t v21 = *(void *)(a1 + 40);
      uint64_t v22 = [MEMORY[0x1E4F28C58] hmErrorWithCode:-1];
      (*(void (**)(uint64_t, void, void *))(v21 + 16))(v21, 0, v22);

      uint64_t v10 = 0;
    }
    id v9 = v11;
  }
  else
  {
    uint64_t v12 = (void *)MEMORY[0x1D9452090]();
    id v13 = *(id *)(a1 + 32);
    uint64_t v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v25 = v15;
      __int16 v26 = 2112;
      id v27 = v9;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_ERROR, "%{public}@Could not load home data from archived file with error %@", buf, 0x16u);
    }
    uint64_t v16 = *(void *)(a1 + 40);
    uint64_t v10 = [MEMORY[0x1E4F28C58] hmErrorWithCode:-1];
    (*(void (**)(uint64_t, void, void *))(v16 + 16))(v16, 0, v10);
  }
}

- (void)configureRetailDemoModeWithKeyPair:(id)a3 controllerName:(id)a4 demoAccessories:(id)a5 completionHandler:(id)a6
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v27 = a3;
  id v10 = a4;
  id v11 = a5;
  id v12 = a6;
  id v13 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v13);

  objc_initWeak(&location, self);
  uint64_t v14 = (void *)MEMORY[0x1E4F28DB0];
  uint64_t v15 = (void *)[v11 copy];
  id v36 = 0;
  uint64_t v16 = [v14 archivedDataWithRootObject:v15 requiringSecureCoding:1 error:&v36];
  id v17 = v36;

  if (v17
    || (HMDHomeKitDaemonDemoModePersistencePath(),
        id v18 = objc_claimAutoreleasedReturnValue(),
        char v19 = [v16 writeToURL:v18 atomically:1],
        v18,
        (v19 & 1) == 0))
  {
    uint64_t v21 = (void *)MEMORY[0x1D9452090]();
    uint64_t v22 = self;
    HMFGetOSLogHandle();
    id v23 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      id v24 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v25 = HMDHomeKitDaemonDemoModePersistencePath();
      *(_DWORD *)long long buf = 138543874;
      id v39 = v24;
      __int16 v40 = 2112;
      long long v41 = v25;
      __int16 v42 = 2112;
      id v43 = v17;
      _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_ERROR, "%{public}@Failed to persist demo accessories to %@: %@", buf, 0x20u);
    }
    __int16 v26 = [(HMDHomeManager *)v22 workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __102__HMDHomeManager_configureRetailDemoModeWithKeyPair_controllerName_demoAccessories_completionHandler___block_invoke;
    block[3] = &unk_1E6A19530;
    id v35 = v12;
    id v34 = v17;
    dispatch_async(v26, block);
  }
  else
  {
    uint64_t v20 = [(HMDHomeManager *)self workQueue];
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    v28[2] = __102__HMDHomeManager_configureRetailDemoModeWithKeyPair_controllerName_demoAccessories_completionHandler___block_invoke_2;
    v28[3] = &unk_1E6A168D8;
    objc_copyWeak(&v32, &location);
    id v29 = v27;
    id v30 = v10;
    id v31 = v12;
    [(HMDHomeManager *)self _eraseLocalHomeConfigurationAndDeleteMetadata:1 reason:4 completionQueue:v20 completion:v28];

    objc_destroyWeak(&v32);
  }

  objc_destroyWeak(&location);
}

void __102__HMDHomeManager_configureRetailDemoModeWithKeyPair_controllerName_demoAccessories_completionHandler___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = *(void (**)(uint64_t))(v1 + 16);
    uint64_t v3 = *(void *)(a1 + 40);
    v2(v3);
  }
  else
  {
    id v4 = [MEMORY[0x1E4F28C58] hmfErrorWithCode:11];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v4);
  }
}

void __102__HMDHomeManager_configureRetailDemoModeWithKeyPair_controllerName_demoAccessories_completionHandler___block_invoke_2(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (a2
    && [WeakRetained _removeAndAddKeyPair:*(void *)(a1 + 32) userName:*(void *)(a1 + 40) eraseReason:4])
  {
    id v4 = [MEMORY[0x1E4F5BE48] systemStore];
    [v4 updateActiveControllerPairingIdentifier:*(void *)(a1 + 40)];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v6 = [MEMORY[0x1E4F28C58] hmErrorWithCode:52];
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }
}

- (void)_handleSysdiagnoseRequest:(id)a3
{
}

- (id)_dumpHomeManagerData
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  BOOL v79 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:7];
  uint64_t v3 = [MEMORY[0x1E4F28E78] string];
  uint64_t v77 = [MEMORY[0x1E4F28B50] mainBundle];
  id v4 = [v77 infoDictionary];
  uint64_t v5 = [v4 objectForKey:*MEMORY[0x1E4F1D020]];
  [v3 appendFormat:@"homed: %@  ", v5];

  uint64_t v6 = +[HMDHAPMetadata getSharedInstance];
  id v7 = +[HMDHAPMetadata getBuiltinInstance];
  id v8 = [v6 schemaVersion];
  uint64_t v76 = v6;
  id v9 = [v6 version];
  id v10 = [v7 schemaVersion];
  id v75 = v7;
  id v11 = [v7 version];
  [v3 appendFormat:@"Metadata - Current: %@/%@   Builtin: %@/%@\n", v8, v9, v10, v11];

  uint64_t v78 = v3;
  [v79 setObject:v3 forKeyedSubscript:*MEMORY[0x1E4F64DE0]];
  id v12 = NSString;
  id v13 = [(HMDHomeManager *)self primaryHomeUUID];
  uint64_t v14 = [v13 UUIDString];
  uint64_t v15 = [(HMDHomeManager *)self currentHomeUUID];
  uint64_t v16 = [v15 UUIDString];
  [(HMDHomeManager *)self isAccessAllowedWhenLocked];
  id v17 = HMFBooleanToString();
  id v18 = getLastSyncedAssistantConfigurationVersion();
  char v19 = getAssistantConfigurationSnapshot();
  uint64_t v20 = [v12 stringWithFormat:@"Primary Home: %@, Current Home: %@, Allow locked access: %@, Siri lastSyncedVersion: %@  currentSyncSnapshot: %@", v14, v16, v17, v18, v19];

  __int16 v74 = (void *)v20;
  [v79 setObject:v20 forKeyedSubscript:*MEMORY[0x1E4F64DF0]];
  uint64_t v21 = [(HMDHomeManager *)self syncManager];
  uint64_t v22 = [v21 dumpState];
  [v79 setObject:v22 forKeyedSubscript:*MEMORY[0x1E4F64EA8]];

  id v23 = [(HMDHomeManager *)self appData];
  id v24 = [v23 dumpState];
  [v79 setObject:v24 forKeyedSubscript:*MEMORY[0x1E4F64D80]];

  uint64_t v25 = [(HMDHomeManager *)self homes];
  uint64_t v26 = [v25 count];

  if (v26)
  {
    id v27 = (void *)MEMORY[0x1E4F1CA48];
    uint64_t v28 = [(HMDHomeManager *)self homes];
    id v29 = objc_msgSend(v27, "arrayWithCapacity:", objc_msgSend(v28, "count"));

    long long v94 = 0u;
    long long v95 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    id v30 = [(HMDHomeManager *)self homes];
    uint64_t v31 = [v30 countByEnumeratingWithState:&v92 objects:v99 count:16];
    if (v31)
    {
      uint64_t v32 = v31;
      uint64_t v33 = *(void *)v93;
      do
      {
        for (uint64_t i = 0; i != v32; ++i)
        {
          if (*(void *)v93 != v33) {
            objc_enumerationMutation(v30);
          }
          id v35 = [*(id *)(*((void *)&v92 + 1) + 8 * i) dumpState];
          [v29 addObject:v35];
        }
        uint64_t v32 = [v30 countByEnumeratingWithState:&v92 objects:v99 count:16];
      }
      while (v32);
    }

    [v79 setObject:v29 forKey:*MEMORY[0x1E4F64DE8]];
  }
  id v36 = [MEMORY[0x1E4F5BE48] systemStore];
  long long v37 = [v36 dumpState];
  [v79 setObject:v37 forKey:*MEMORY[0x1E4F64E20]];

  long long v38 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:2];
  id v39 = [MEMORY[0x1E4F1CA48] array];
  long long v88 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  __int16 v40 = [(HMDHomeManager *)self incomingInvitations];
  long long v41 = (void *)[v40 copy];

  uint64_t v42 = [v41 countByEnumeratingWithState:&v88 objects:v98 count:16];
  if (v42)
  {
    uint64_t v43 = v42;
    uint64_t v44 = *(void *)v89;
    do
    {
      for (uint64_t j = 0; j != v43; ++j)
      {
        if (*(void *)v89 != v44) {
          objc_enumerationMutation(v41);
        }
        uint64_t v46 = [*(id *)(*((void *)&v88 + 1) + 8 * j) describeWithFormat];
        [v39 addObject:v46];
      }
      uint64_t v43 = [v41 countByEnumeratingWithState:&v88 objects:v98 count:16];
    }
    while (v43);
  }

  long long v72 = v39;
  __int16 v73 = v38;
  [v38 setObject:v39 forKeyedSubscript:*MEMORY[0x1E4F64E08]];
  __int16 v47 = [MEMORY[0x1E4F1CA48] array];
  long long v84 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  id v48 = [(HMDHomeManager *)self homes];
  uint64_t v49 = [v48 countByEnumeratingWithState:&v84 objects:v97 count:16];
  if (v49)
  {
    uint64_t v50 = v49;
    uint64_t v51 = *(void *)v85;
    do
    {
      for (uint64_t k = 0; k != v50; ++k)
      {
        if (*(void *)v85 != v51) {
          objc_enumerationMutation(v48);
        }
        char v53 = *(void **)(*((void *)&v84 + 1) + 8 * k);
        long long v80 = 0u;
        long long v81 = 0u;
        long long v82 = 0u;
        long long v83 = 0u;
        id v54 = [v53 outgoingInvitations];
        uint64_t v55 = [v54 countByEnumeratingWithState:&v80 objects:v96 count:16];
        if (v55)
        {
          uint64_t v56 = v55;
          uint64_t v57 = *(void *)v81;
          do
          {
            for (uint64_t m = 0; m != v56; ++m)
            {
              if (*(void *)v81 != v57) {
                objc_enumerationMutation(v54);
              }
              id v59 = [*(id *)(*((void *)&v80 + 1) + 8 * m) describeWithFormat];
              [v47 addObject:v59];
            }
            uint64_t v56 = [v54 countByEnumeratingWithState:&v80 objects:v96 count:16];
          }
          while (v56);
        }
      }
      uint64_t v50 = [v48 countByEnumeratingWithState:&v84 objects:v97 count:16];
    }
    while (v50);
  }

  [v73 setObject:v47 forKeyedSubscript:*MEMORY[0x1E4F64E40]];
  [v79 setObject:v73 forKeyedSubscript:*MEMORY[0x1E4F64E10]];
  __int16 v60 = NSString;
  BOOL v61 = (_os_feature_enabled_impl() & 1) != 0
     || CFPreferencesGetAppBooleanValue(@"MatterTTU", @"/Library/Managed Preferences/mobile/com.apple.homed.plist", 0) != 0;
  __int16 v62 = objc_msgSend(v60, "stringWithFormat:", @"%d", v61);
  [v79 setObject:v62 forKeyedSubscript:@"HM_FEATURE_MATTER_TTU_ENABLED_FEATURE_OR_PROFILE"];

  id v63 = NSString;
  if (_os_feature_enabled_impl()) {
    BOOL v64 = (isInternalBuild() & 1) != 0
  }
       || CFPreferencesGetAppBooleanValue(@"UWBUnlock", @"/Library/Managed Preferences/mobile/com.apple.homed.plist", 0) != 0;
  else {
    BOOL v64 = 0;
  }
  id v65 = objc_msgSend(v63, "stringWithFormat:", @"%d", v64);
  [v79 setObject:v65 forKeyedSubscript:@"HM_FEATURE_UWB_ENABLED_FEATURE_AND_PROFILE"];

  uint64_t v66 = objc_msgSend(NSString, "stringWithFormat:", @"%d", isFeatureMatteriPhoneOnlyPairingControlEnabled());
  [v79 setObject:v66 forKeyedSubscript:@"iPhoneOnlyPairingAndControl (iPOP)"];

  id v67 = +[HMDHomeKeyDataRecorder sharedRecorder];
  id v68 = [v67 records];
  [v79 setObject:v68 forKeyedSubscript:@"Home Key Change Records"];

  id v69 = objc_alloc_init(MEMORY[0x1E4F311A8]);
  uint64_t v70 = [v69 storedValuesByKey];
  [v79 setObject:v70 forKeyedSubscript:@"System Commissioner Key-Value Store"];

  return v79;
}

- (void)_handleNetworkMismatchInfo:(id)a3
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (isInternalBuild())
  {
    uint64_t v5 = +[HMDMainDriver driver];
    uint64_t v6 = [v5 currentWiFiNetworkInfo];
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    void v12[2] = __45__HMDHomeManager__handleNetworkMismatchInfo___block_invoke;
    v12[3] = &unk_1E6A178E0;
    void v12[4] = self;
    id v13 = v4;
    [(HMDHomeManager *)self findAccessoriesNotOnWiFiWithCurrentWiFi:v6 completionHandler:v12];
  }
  else
  {
    id v7 = (void *)MEMORY[0x1D9452090]();
    id v8 = self;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v10 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v15 = v10;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_ERROR, "%{public}@Not internal build NetworkMismatchInfo message not allowed", buf, 0xCu);
    }
    id v11 = [MEMORY[0x1E4F28C58] hmErrorWithCode:10];
    [v4 respondWithError:v11];
  }
}

void __45__HMDHomeManager__handleNetworkMismatchInfo___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = HMFGetLogIdentifier();
    int v8 = 138543618;
    id v9 = v7;
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@wifi mismatch accessories %@", (uint8_t *)&v8, 0x16u);
  }
  [*(id *)(a1 + 40) respondWithSuccess];
}

- (void)_handleDiagnosticInfo:(id)a3
{
  v21[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (isInternalBuild())
  {
    id v5 = [(HMDHomeManager *)self appleMediaAccessoryDiagnosticInfoController];
    v21[0] = *MEMORY[0x1E4F2D388];
    uint64_t v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v21 count:1];
    id v7 = [v5 diagnosticInfoDataWithAdditionalKeys:v6];

    int v8 = +[HMDAppleMediaAccessoryDiagnosticInfoController diagnosticInfoDescriptionWithData:v7];
    id v9 = (void *)MEMORY[0x1D9452090]();
    __int16 v10 = self;
    id v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = HMFGetLogIdentifier();
      int v17 = 138543618;
      id v18 = v12;
      __int16 v19 = 2112;
      uint64_t v20 = v8;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Obtained diagnostic Info %@", (uint8_t *)&v17, 0x16u);
    }
    [v4 respondWithPayload:v8];
  }
  else
  {
    id v13 = (void *)MEMORY[0x1D9452090]();
    uint64_t v14 = self;
    uint64_t v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = HMFGetLogIdentifier();
      int v17 = 138543362;
      id v18 = v16;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_ERROR, "%{public}@Not internal build DiagnosticInfo message not allowed", (uint8_t *)&v17, 0xCu);
    }
    id v7 = [MEMORY[0x1E4F28C58] hmErrorWithCode:10];
    [v4 respondWithError:v7];
  }
}

- (void)_handleDumpState:(id)a3
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 arrayForKey:@"kDumpStateRequestedConfigurationKey"];
  if ([v5 count]) {
    char v6 = [v5 containsObject:*MEMORY[0x1E4F2ECA0]];
  }
  else {
    char v6 = 1;
  }
  id v7 = [v4 activity];
  int v8 = [(HMDHomeManager *)self _getRequestedState:v5 activity:v7];

  id v9 = (void *)MEMORY[0x1E4F2D3B8];
  if ((v6 & 1) != 0 || [v5 containsObject:*MEMORY[0x1E4F2D3C8]])
  {
    __int16 v10 = +[HMDXPCMessageCountTracker sharedTracker];
    id v11 = [v10 stateDump];
    [v8 setObject:v11 forKeyedSubscript:@"XPC Message Count Tracker"];

    uint64_t v12 = +[HMDXPCMessageTransport defaultTransport];
    id v13 = [v12 stateDump];
    [v8 setObject:v13 forKeyedSubscript:@"Default XPC Transport"];

    uint64_t v14 = +[HMDXPCMessageTransport accessorySetupTransport];
    uint64_t v15 = [v14 stateDump];
    [v8 setObject:v15 forKeyedSubscript:@"Accessory Setup XPC Transport"];

    if (v6)
    {
      uint64_t v16 = [(HMDHomeManager *)self compositeSettingsControllerManager];
      int v17 = [v16 dumpStateInfo];
      [v8 setObject:v17 forKeyedSubscript:*MEMORY[0x1E4F2D3A8]];

LABEL_11:
      uint64_t v21 = [MEMORY[0x1E4F1CA60] dictionary];
      uint64_t v22 = [(HMDHomeManager *)self eventRouterXPCServer];
      id v23 = [v22 dumpStateDescription];
      [v21 setObject:v23 forKeyedSubscript:@"XPCServer"];

      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      id v24 = [(HMDHomeManager *)self homes];
      uint64_t v25 = (void *)[v24 copy];

      uint64_t v26 = [v25 countByEnumeratingWithState:&v38 objects:v42 count:16];
      if (v26)
      {
        uint64_t v27 = v26;
        uint64_t v28 = *(void *)v39;
        do
        {
          uint64_t v29 = 0;
          do
          {
            if (*(void *)v39 != v28) {
              objc_enumerationMutation(v25);
            }
            id v30 = [*(id *)(*((void *)&v38 + 1) + 8 * v29) eventRouterDumpStateInfo];
            [v21 addEntriesFromDictionary:v30];

            ++v29;
          }
          while (v27 != v29);
          uint64_t v27 = [v25 countByEnumeratingWithState:&v38 objects:v42 count:16];
        }
        while (v27);
      }

      uint64_t v31 = (void *)[v21 copy];
      [v8 setObject:v31 forKeyedSubscript:*MEMORY[0x1E4F2D3B8]];

      goto LABEL_19;
    }
  }
  uint64_t v18 = *MEMORY[0x1E4F2D3A8];
  if ([v5 containsObject:*MEMORY[0x1E4F2D3A8]])
  {
    __int16 v19 = [(HMDHomeManager *)self compositeSettingsControllerManager];
    uint64_t v20 = [v19 dumpStateInfo];
    [v8 setObject:v20 forKeyedSubscript:v18];
  }
  if ([v5 containsObject:*v9]) {
    goto LABEL_11;
  }
LABEL_19:
  uint64_t v32 = [(HMDHomeManager *)self _dumpHomeManagerData];
  if ([v5 containsObject:*MEMORY[0x1E4F2D3B0]]
    && [v4 isEntitledForStateDump])
  {
    [v8 setObject:v32 forKeyedSubscript:*MEMORY[0x1E4F2ECA8]];
  }
  else
  {
    [(HMDHomeManager *)self _dumpToLog:v32 withState:v8];
  }
  uint64_t v33 = [NSNumber numberWithBool:0];
  [v8 setObject:v33 forKeyedSubscript:*MEMORY[0x1E4F2D478]];

  id v34 = NSNumber;
  id v35 = [(HMDHomeManager *)self fmfHandler];
  id v36 = objc_msgSend(v34, "numberWithBool:", objc_msgSend(v35, "isThisDesignatedFMFDevice"));
  [v8 setObject:v36 forKeyedSubscript:*MEMORY[0x1E4F2D488]];

  long long v37 = (void *)[v8 copy];
  [v4 respondWithPayload:v37];
}

- (id)_getRequestedState:(id)a3 activity:(id)a4
{
  uint64_t v388 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v293 = a4;
  v292 = (void *)[objc_alloc(MEMORY[0x1E4F653F0]) initWithName:@"getRequestedState" parent:v293];
  id v296 = (id)objc_opt_new();
  v294 = v5;
  if ([v5 count] && (objc_msgSend(v5, "containsObject:", *MEMORY[0x1E4F2ECA0]) & 1) == 0)
  {
    if (![v5 containsObject:@"kDumpStateConfigDescriptionKey"]) {
      goto LABEL_44;
    }
    char v314 = 0;
  }
  else
  {
    char v314 = 1;
  }
  char v6 = [MEMORY[0x1E4F1CA48] array];
  id v7 = [NSString stringWithFormat:@"%@: %lu", @"maximumHomes", maximumHomes];
  [v6 addObject:v7];

  int v8 = [NSString stringWithFormat:@"%@: %lu", @"maximumAccessoriesPerHome", maximumAccessoriesPerHome];
  [v6 addObject:v8];

  id v9 = [NSString stringWithFormat:@"%@: %lu", @"maximumRoomsPerHome", maximumRoomsPerHome];
  [v6 addObject:v9];

  __int16 v10 = [NSString stringWithFormat:@"%@: %lu", @"maximumZonesPerHome", maximumZonesPerHome];
  [v6 addObject:v10];

  id v11 = [NSString stringWithFormat:@"%@: %lu", @"maximumTriggersPerHome", maximumTriggersPerHome];
  [v6 addObject:v11];

  uint64_t v12 = [NSString stringWithFormat:@"%@: %lu", @"maximumActionSetsPerHome", maximumActionSetsPerHome];
  [v6 addObject:v12];

  id v13 = [NSString stringWithFormat:@"%@: %lu", @"maximumServiceGroupsPerHome", maximumServiceGroupsPerHome];
  [v6 addObject:v13];

  uint64_t v14 = [NSString stringWithFormat:@"%@: %lu", @"maximumUsersPerHome", maximumUsersPerHome];
  [v6 addObject:v14];

  uint64_t v15 = [NSString stringWithFormat:@"%@: %lu", @"maximumRoomsPerZone", maximumRoomsPerZone];
  [v6 addObject:v15];

  uint64_t v16 = [NSString stringWithFormat:@"%@: %lu", @"maximumActionsPerActionSet", maximumActionsPerActionSet];
  [v6 addObject:v16];

  int v17 = [NSString stringWithFormat:@"%@: %lu", @"maximumServicesPerServiceGroup", maximumServicesPerServiceGroup];
  [v6 addObject:v17];

  uint64_t v18 = [NSString stringWithFormat:@"%@: %lu", @"maximumAccessoriesPerBridge", maximumAccessoriesPerBridge];
  [v6 addObject:v18];

  __int16 v19 = [NSString stringWithFormat:@"%@: %lu", @"maximumServicesPerAccessory", maximumServicesPerAccessory];
  [v6 addObject:v19];

  uint64_t v20 = [NSString stringWithFormat:@"%@: %lu", @"maximumCharacteristicsPerService", maximumCharacteristicsPerService];
  [v6 addObject:v20];

  uint64_t v21 = [NSString stringWithFormat:@"%@: %lu", @"maximumDataSyncFragmentSize", maximumDataSyncFragmentSize];
  [v6 addObject:v21];

  uint64_t v22 = [NSString stringWithFormat:@"%@: %f", @"minimumTimerRecurrence", minimumTimerRecurrence];
  [v6 addObject:v22];

  id v23 = [NSString stringWithFormat:@"%@: %lu", @"cloudPushBatchLimit", cloudPushBatchLimit];
  [v6 addObject:v23];

  id v24 = [NSString stringWithFormat:@"%@: %lu", @"maxCloudOperationRetries", maxCloudOperationRetries];
  [v6 addObject:v24];

  uint64_t v25 = [NSString stringWithFormat:@"%@: %lu", @"cloudUploadTimerInterval", cloudUploadTimerInterval];
  [v6 addObject:v25];

  uint64_t v26 = [NSString stringWithFormat:@"%@: %lu", @"cloudZoneUploadTimerInitialInterval", cloudZoneUploadTimerInitialInterval];
  [v6 addObject:v26];

  uint64_t v27 = [NSString stringWithFormat:@"%@: %lu", @"cloudZoneUploadTimerInterval", cloudZoneUploadTimerInterval];
  [v6 addObject:v27];

  uint64_t v28 = [NSString stringWithFormat:@"%@: %llu", @"aggressiveControllerKeyPollInterval", aggressiveControllerKeyPollInterval];
  [v6 addObject:v28];

  uint64_t v29 = [NSString stringWithFormat:@"%@: %llu", @"watchdogControllerKeyPollTimeout", watchdogControllerKeyPollTimeout];
  [v6 addObject:v29];

  id v30 = [NSString stringWithFormat:@"%@: %llu", @"controllerKeyPollInterval", controllerKeyPollInterval];
  [v6 addObject:v30];

  uint64_t v31 = [NSString stringWithFormat:@"%@: %llu", @"keychainPopupTimerInterval", keychainPopupTimerInterval];
  [v6 addObject:v31];

  uint64_t v32 = [NSString stringWithFormat:@"%@: %llu", @"checkRemoteAccessTimeout", checkRemoteAccessTimeout];
  [v6 addObject:v32];

  uint64_t v33 = [NSString stringWithFormat:@"%@: %llu", @"hrsCommitTimeout", hrsCommitTimeoutNanoseconds];
  [v6 addObject:v33];

  id v34 = [NSString stringWithFormat:@"%@: %llu", @"hrsIdleClientTimeout", hrsIdleClientTimeoutNanoseconds];
  [v6 addObject:v34];

  id v35 = [NSString stringWithFormat:@"%@: %llu", @"hrsIdleServertTimeout", hrsIdleServertTimeoutNanoseconds];
  [v6 addObject:v35];

  id v36 = [NSString stringWithFormat:@"%@: %llu", @"hrsSendInternalRequestTimeout", hrsSendInternalRequestTimeoutNanoseconds];
  [v6 addObject:v36];

  long long v37 = [NSString stringWithFormat:@"%@: %llu", @"hrsSendInternalRequestToWatchTimeout", hrsSendInternalRequestToWatchTimeoutNanoseconds];
  [v6 addObject:v37];

  long long v38 = [NSString stringWithFormat:@"%@: %llu", @"hrsSendUserRequestTimeout", hrsSendUserRequestTimeoutNanoseconds];
  [v6 addObject:v38];

  long long v39 = [NSString stringWithFormat:@"%@: %tu", @"maximumSecureRemoteStreams", maximumSecureRemoteStreams];
  [v6 addObject:v39];

  long long v40 = [NSString stringWithFormat:@"%@: %f", @"secureSessionMessageTimeout", secureSessionMessageTimeout];
  [v6 addObject:v40];

  long long v41 = [NSString stringWithFormat:@"%@: %llu", @"DeviceConnectionKeepAliveTimerPeriod", deviceConnectionKeepAliveTimerPeriod];
  [v6 addObject:v41];

  uint64_t v42 = [NSString stringWithFormat:@"%@: %llu", @"DeviceConnectionKeepAliveResponseTimeoutPeriod", deviceConnectionKeepAliveResponseTimeoutPeriod];
  [v6 addObject:v42];

  uint64_t v43 = [NSString stringWithFormat:@"%@: %@", @"SupportedResolutions", supportedResolutions];
  [v6 addObject:v43];

  uint64_t v44 = [NSString stringWithFormat:@"%@: %@", @"SupportedVideoCodecs", supportedVideoCodecs];
  [v6 addObject:v44];

  __int16 v45 = [NSString stringWithFormat:@"%@: %@", @"SupportedAudioCodecs", supportedAudioCodecs];
  [v6 addObject:v45];

  uint64_t v46 = [NSString stringWithFormat:@"%@: %@", @"SupportedSRTPAuths", supportedSRTPAuths];
  [v6 addObject:v46];

  __int16 v47 = NSString;
  id v48 = HMFBooleanToString();
  uint64_t v49 = [v47 stringWithFormat:@"%@: %@", @"CameraStreamNetworkAdaptation", v48];
  [v6 addObject:v49];

  uint64_t v50 = [NSString stringWithFormat:@"%@: %@", @"RTPPtime", rtpPtime];
  [v6 addObject:v50];

  uint64_t v51 = [NSString stringWithFormat:@"%@: %@", @"SnapshotResolution", snapshotResolution];
  [v6 addObject:v51];

  uint64_t v52 = [NSString stringWithFormat:@"%@: %tu", @"MaximumSimultaneousRemoteStreams", maximumSimultaneousRemoteStreams];
  [v6 addObject:v52];

  char v53 = [NSString stringWithFormat:@"%@: %g", @"SnapshotCacheValidPeriod", snapshotCacheValidPeriod];
  [v6 addObject:v53];

  id v54 = [NSString stringWithFormat:@"%@: %llu", @"BulletinSecureTriggerTimeoutInSeconds", bulletinSecureTriggerTimeoutInSeconds];
  [v6 addObject:v54];

  uint64_t v55 = [NSString stringWithFormat:@"%@: %llu", @"BroadcastKeyRefreshTimeInSeconds", broadcastKeyRefreshTimeInSeconds];
  [v6 addObject:v55];

  uint64_t v56 = [NSString stringWithFormat:@"%@: %tu", @"BluetoothGSNMaxValue", bluetoothGSNMaxValue];
  [v6 addObject:v56];

  uint64_t v57 = [NSString stringWithFormat:@"%@: %llu", @"btleReachabilityTimer", btleReachabilityTimerNanoseconds];
  [v6 addObject:v57];

  uint64_t v58 = [NSString stringWithFormat:@"%@: %llu", @"btleReachabilityLeeway", btleReachabilityLeewayNanoseconds];
  [v6 addObject:v58];

  id v59 = [NSString stringWithFormat:@"%@: %lu", @"btleReachabilityProbeReduceFactor", btleReachabilityProbeReduceFactor];
  [v6 addObject:v59];

  __int16 v60 = [NSString stringWithFormat:@"%@: %llu", @"remotePendingResponseTimer", remotePendingResponseTimerNanoseconds];
  [v6 addObject:v60];

  BOOL v61 = [NSString stringWithFormat:@"%@: %llu", @"remotePendingResponseLeeway", remotePendingResponseLeewayNanoseconds];
  [v6 addObject:v61];

  __int16 v62 = [NSString stringWithFormat:@"%@: %lu", @"remotePendingResponseDecayScale", remotePendingResponseDecayScale];
  [v6 addObject:v62];

  id v63 = [NSString stringWithFormat:@"%@: %lf", @"remoteDeviceMonitorHealthTimerTimeInterval", remoteDeviceMonitorHealthTimerTimeInterval];
  [v6 addObject:v63];

  BOOL v64 = [NSString stringWithFormat:@"%@: %lf", @"remoteDeviceMonitorRetryTimerMinimumTimeInterval", remoteDeviceMonitorRetryTimerMinimumTimeInterval];
  [v6 addObject:v64];

  id v65 = [NSString stringWithFormat:@"%@: %lf", @"remoteDeviceMonitorRetryTimerMaximumTimeInterval", remoteDeviceMonitorRetryTimerMaximumTimeInterval];
  [v6 addObject:v65];

  uint64_t v66 = [NSString stringWithFormat:@"%@: %tu", @"remoteDeviceMonitorRetryTimerFactor", remoteDeviceMonitorRetryTimerFactor];
  [v6 addObject:v66];

  id v67 = [NSString stringWithFormat:@"%@: %lf", @"accessoryConnectivityWaitPeriod", accessoryConnectivityWaitPeriod];
  [v6 addObject:v67];

  id v68 = [NSString stringWithFormat:@"%@: %llu", @"cloudDataSyncInProgressWaitPeriod", cloudDataSyncInProgressWaitPeriod];
  [v6 addObject:v68];

  id v69 = [NSString stringWithFormat:@"%@: %llu", @"controllerKeyNotLandingWaitPeriod", controllerKeyNotLandingWaitPeriod];
  [v6 addObject:v69];

  uint64_t v70 = [NSString stringWithFormat:@"%@: %llu", @"controllerKeyNotLandingShortCircuitWaitPeriod", controllerKeyNotLandingShortCircuitWaitPeriod];
  [v6 addObject:v70];

  long long v71 = [NSString stringWithFormat:@"%@: %lf", @"assistantClientReadWriteTimeout", assistantClientReadWriteTimeoutSeconds];
  [v6 addObject:v71];

  long long v72 = [NSString stringWithFormat:@"%@: %lf", @"assistantClientActionSetTimeout", assistantClientActionSetTimeoutSeconds];
  [v6 addObject:v72];

  __int16 v73 = [NSString stringWithFormat:@"%@: %lf", @"disableNotificationsDeferPeriod", disableNotificationsDeferPeriod];
  [v6 addObject:v73];

  __int16 v74 = [NSString stringWithFormat:@"%@: %lf", @"coalesceNotificationsPeriod", coalesceNotificationsPeriod];
  [v6 addObject:v74];

  id v75 = [NSString stringWithFormat:@"%@: %lf", @"delayNotificationsPeriod", delayNotificationsPeriod];
  [v6 addObject:v75];

  uint64_t v76 = [NSString stringWithFormat:@"%@: %lf", @"pendingResponseTickPeriod", pendingResponseTickPeriod];
  [v6 addObject:v76];

  uint64_t v77 = [NSString stringWithFormat:@"%@: %lf", @"pendingResponseMaxPeriod", pendingResponseMaxPeriod];
  [v6 addObject:v77];

  uint64_t v78 = [NSString stringWithFormat:@"%@: %lf", @"kRemoteReachabilitNotificationsDeferPeriod", remoteReachabilityNotificationsDeferPeriod];
  [v6 addObject:v78];

  BOOL v79 = [NSString stringWithFormat:@"%@: %lf", @"kRemoteReachabilityDeregistrationDeferPeriod", remoteReachabilityDeregistrationDeferPeriod];
  [v6 addObject:v79];

  if (skipAuthPromptDialog) {
    long long v80 = @"YES";
  }
  else {
    long long v80 = @"NO";
  }
  long long v81 = [NSString stringWithFormat:@"%@: %@", @"allowSkipMFIPrompt", v80];
  [v6 addObject:v81];

  if (showAuthDialog) {
    long long v82 = @"YES";
  }
  else {
    long long v82 = @"NO";
  }
  long long v83 = [NSString stringWithFormat:@"%@: %@", @"showAuthDialog", v82];
  [v6 addObject:v83];

  if (disableCloudDataSync) {
    long long v84 = @"YES";
  }
  else {
    long long v84 = @"NO";
  }
  long long v85 = [NSString stringWithFormat:@"%@: %@", @"DisableCloudDataSync", v84];
  [v6 addObject:v85];

  if (disableLegacyCloudDataSync) {
    long long v86 = @"YES";
  }
  else {
    long long v86 = @"NO";
  }
  long long v87 = [NSString stringWithFormat:@"%@: %@", @"DisableLegacyCloudDataSync", v86];
  [v6 addObject:v87];

  if (enableWakeNotifications) {
    long long v88 = @"YES";
  }
  else {
    long long v88 = @"NO";
  }
  long long v89 = [NSString stringWithFormat:@"%@: %@", @"EnableWakeNotifications", v88];
  [v6 addObject:v89];

  long long v90 = [NSString stringWithFormat:@"%@: %lf", @"pairingInterruptionGracePeriod", pairingInterruptionGracePeriod];
  [v6 addObject:v90];

  long long v91 = [NSString stringWithFormat:@"%@: %lf", @"pairingReconfirmWaitPeriod", pairingReconfirmWaitPeriod];
  [v6 addObject:v91];

  long long v92 = [NSString stringWithFormat:@"%@: %lf", @"vendorInfoFetchPeriod", vendorInfoFetchPeriod];
  [v6 addObject:v92];

  long long v93 = [NSString stringWithFormat:@"%@: %lf", @"attestationInfoFetchPeriod", attestationInfoFetchPeriod];
  [v6 addObject:v93];

  long long v94 = [NSString stringWithFormat:@"%@: %lf", @"keyTransferBroadcastMaximumDelay", keyTransferBroadcastMaximumDelay];
  [v6 addObject:v94];

  long long v95 = [NSString stringWithFormat:@"%@: %@", @"vendorInfoDatabaseServerURLOverride", vendorInfoDatabaseServerURLOverride];
  [v6 addObject:v95];

  BOOL v96 = [NSString stringWithFormat:@"%@: %@", @"appleConfigurationServer", appleConfigurationServer];
  [v6 addObject:v96];

  BOOL v97 = [NSString stringWithFormat:@"%@: %@", @"homeKitConfigurationPath", homeKitConfigurationPath];
  [v6 addObject:v97];

  BOOL v98 = [NSString stringWithFormat:@"%@: %lf", @"mediaBrowserProcessingInterval", mediaBrowserProcessingInterval];
  [v6 addObject:v98];

  BOOL v99 = [NSString stringWithFormat:@"%@: %lf", @"disableReprivsionBrowsingPeriodInMinutes", disableReprivsionBrowsingPeriodInMinutes];
  [v6 addObject:v99];

  uint64_t v100 = [NSString stringWithFormat:@"%@: %lf", @"authServerRetryTimeIntervalInSeconds", authServerRetryTimeIntervalInSeconds];
  [v6 addObject:v100];

  BOOL v101 = [NSString stringWithFormat:@"%@: %tu", @"authServerRetryCount", authServerRetryCount];
  BOOL v102 = v6;
  [v6 addObject:v101];

  long long v374 = 0u;
  long long v372 = 0u;
  long long v373 = 0u;
  long long v371 = 0u;
  id obj = (id)preferredPrimaryForHome;
  uint64_t v103 = [obj countByEnumeratingWithState:&v371 objects:v387 count:16];
  if (v103)
  {
    uint64_t v104 = v103;
    uint64_t v105 = *(void *)v372;
    do
    {
      for (uint64_t i = 0; i != v104; ++i)
      {
        if (*(void *)v372 != v105) {
          objc_enumerationMutation(obj);
        }
        uint64_t v107 = *(void **)(*((void *)&v371 + 1) + 8 * i);
        uint64_t v108 = NSString;
        uint64_t v109 = [v107 UUIDString];
        uint64_t v110 = [(id)preferredPrimaryForHome objectForKey:v107];
        uint64_t v111 = [v110 UUIDString];
        uint64_t v112 = [v108 stringWithFormat:@"%@: %@: %@", @"preferredPrimaryForHome", v109, v111];
        [v102 addObject:v112];
      }
      uint64_t v104 = [obj countByEnumeratingWithState:&v371 objects:v387 count:16];
    }
    while (v104);
  }

  if (disableWACBrowser) {
    uint64_t v113 = @"YES";
  }
  else {
    uint64_t v113 = @"NO";
  }
  uint64_t v114 = [NSString stringWithFormat:@"%@: %@", @"disableWACBrowser", v113];
  uint64_t v115 = v102;
  [v102 addObject:v114];

  if (delayBatchedReadWrite) {
    uint64_t v116 = @"YES";
  }
  else {
    uint64_t v116 = @"NO";
  }
  uint64_t v117 = [NSString stringWithFormat:@"%@: %@", @"delayBatchedReadWrite", v116];
  [v102 addObject:v117];

  if (enableNetworkLogging) {
    uint64_t v118 = @"YES";
  }
  else {
    uint64_t v118 = @"NO";
  }
  uint64_t v119 = [NSString stringWithFormat:@"%@: %@", @"enableNetworkLogging", v118];
  [v102 addObject:v119];

  uint64_t v120 = NSString;
  uint64_t v121 = CKContainerEnvironmentString();
  double v122 = [v120 stringWithFormat:@"%@: %@", @"cloudKitEnvironment", v121];
  [v102 addObject:v122];

  if (allowAnonymousServerConnections) {
    double v123 = @"YES";
  }
  else {
    double v123 = @"NO";
  }
  uint64_t v124 = [NSString stringWithFormat:@"%@: %@", @"allowAnonymousServerConnections", v123];
  [v115 addObject:v124];

  v125 = [NSString stringWithFormat:@"%@: %tu", @"presenceFeedRefreshInMinutes", presenceFeedRefreshInMinutes];
  [v115 addObject:v125];

  v126 = [NSString stringWithFormat:@"%@: %tu", @"presenceMonitorAuditInMinutes", presenceMonitorAuditInMinutes];
  [v115 addObject:v126];

  v127 = [NSString stringWithFormat:@"%@: %tu", @"presenceMonitorRefreshGracePeriodInMinutes", presenceMonitorRefreshGracePeriodInMinutes];
  [v115 addObject:v127];

  uint64_t v128 = [NSString stringWithFormat:@"%@: %tu", @"startCharacteristicsMonitorWaitPeriod", startCharacteristicsMonitorWaitPeriod];
  [v115 addObject:v128];

  double v129 = [NSString stringWithFormat:@"%@: %tu", @"requestHomeDataSyncRetryPeriodInMinutes", requestHomeDataSyncRetryPeriodInMinutes];
  [v115 addObject:v129];

  double v130 = (void *)[v115 copy];
  if ([v130 count]) {
    [v296 setObject:v130 forKeyedSubscript:@"kDumpStateConfigDescriptionKey"];
  }

  id v5 = v294;
  if (v314)
  {
    char v131 = 1;
    goto LABEL_46;
  }
LABEL_44:
  if (![v5 containsObject:@"kDumpStateUnassociatedAccyDescriptionKey"]) {
    goto LABEL_50;
  }
  char v131 = 0;
LABEL_46:
  v132 = [(HMDHomeManager *)self accessoryBrowserInternal];
  v133 = [v132 dumpUnassociatedAccessories];

  if ([v133 count]) {
    [v296 setObject:v133 forKeyedSubscript:@"kDumpStateUnassociatedAccyDescriptionKey"];
  }

  if (v131)
  {
    char v303 = 1;
    goto LABEL_52;
  }
LABEL_50:
  if (![v5 containsObject:@"kDumpStatePairedAccyDescriptionKey"]) {
    goto LABEL_72;
  }
  char v303 = 0;
LABEL_52:
  uint64_t v134 = (void *)MEMORY[0x1E4F1CA48];
  double v135 = [(HMDHomeManager *)self homes];
  v136 = objc_msgSend(v134, "arrayWithCapacity:", objc_msgSend(v135, "count"));

  long long v369 = 0u;
  long long v370 = 0u;
  long long v367 = 0u;
  long long v368 = 0u;
  v305 = [(HMDHomeManager *)self homes];
  id obja = (id)[(__CFString *)v305 countByEnumeratingWithState:&v367 objects:v386 count:16];
  if (obja)
  {
    uint64_t v315 = *(void *)v368;
    uint64_t v312 = *MEMORY[0x1E4F64DE8];
    uint64_t v310 = *MEMORY[0x1E4F64EA0];
    uint64_t v308 = *MEMORY[0x1E4F64E68];
    uint64_t v306 = *MEMORY[0x1E4F64D58];
    do
    {
      for (uint64_t j = 0; j != obja; uint64_t j = (char *)j + 1)
      {
        v138 = v136;
        if (*(void *)v368 != v315) {
          objc_enumerationMutation(v305);
        }
        v139 = *(void **)(*((void *)&v367 + 1) + 8 * (void)j);
        v140 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:3];
        v141 = [v139 accessories];
        v142 = NSString;
        v143 = [v139 name];
        v144 = [v142 stringWithFormat:@"Home: %@", v143];
        [v140 setObject:v144 forKeyedSubscript:v312];

        v145 = [v139 primaryResident];
        v146 = [v145 dumpState];

        id v147 = NSString;
        v148 = [v146 objectForKeyedSubscript:v310];
        v149 = [v147 stringWithFormat:@"Resident: %@", v148];
        [v140 setObject:v149 forKeyedSubscript:v308];

        v150 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v141, "count"));
        long long v363 = 0u;
        long long v364 = 0u;
        long long v365 = 0u;
        long long v366 = 0u;
        id v151 = v141;
        uint64_t v152 = [v151 countByEnumeratingWithState:&v363 objects:v385 count:16];
        if (v152)
        {
          uint64_t v153 = v152;
          uint64_t v154 = *(void *)v364;
          do
          {
            for (uint64_t k = 0; k != v153; ++k)
            {
              if (*(void *)v364 != v154) {
                objc_enumerationMutation(v151);
              }
              v156 = [*(id *)(*((void *)&v363 + 1) + 8 * k) dumpSimpleState];
              [v150 addObject:v156];
            }
            uint64_t v153 = [v151 countByEnumeratingWithState:&v363 objects:v385 count:16];
          }
          while (v153);
        }

        if ([v150 count])
        {
          v157 = (void *)[v150 copy];
          [v140 setObject:v157 forKeyedSubscript:v306];
        }
        v136 = v138;
        [v138 addObject:v140];
      }
      id obja = (id)[(__CFString *)v305 countByEnumeratingWithState:&v367 objects:v386 count:16];
    }
    while (obja);
  }

  id v5 = v294;
  if ([v136 count])
  {
    v158 = (void *)[v136 copy];
    [v296 setObject:v158 forKeyedSubscript:@"kDumpStatePairedAccyDescriptionKey"];
  }
  if (v303)
  {
    char v159 = 1;
    goto LABEL_74;
  }
LABEL_72:
  if (![v5 containsObject:@"kDumpStateResidentMeshKey"]) {
    goto LABEL_79;
  }
  char v159 = 0;
LABEL_74:
  v160 = [MEMORY[0x1E4F28E78] string];
  v161 = [(HMDHomeManager *)self residentMesh];

  if (v161)
  {
    int v162 = [(HMDHomeManager *)self residentMesh];
    v163 = [v162 stateDump];
    [v160 appendString:v163];
  }
  else
  {
    [v160 appendString:@"No Resident mesh (not resident capable device, or hasn't completely started up)."];
  }
  [v296 setObject:v160 forKeyedSubscript:@"kDumpStateResidentMeshKey"];

  if (v159)
  {
    char v291 = 1;
    goto LABEL_81;
  }
LABEL_79:
  v164 = v294;
  if (![v294 containsObject:@"kDumpStateAccountsDescriptionKey"]) {
    goto LABEL_124;
  }
  char v291 = 0;
LABEL_81:
  v165 = [MEMORY[0x1E4F28E78] string];
  BOOL v166 = [(HMDHomeManager *)self appleAccountManager];
  v167 = [v166 device];

  if (v167)
  {
    double v168 = [v167 name];
    double v169 = [v167 identifier];
    double v170 = [v169 UUIDString];
    [v165 appendFormat:@"Current Device %@(%@)\n", v168, v170];
  }
  v290 = v167;
  long long v361 = 0u;
  long long v362 = 0u;
  long long v359 = 0u;
  long long v360 = 0u;
  v171 = [(HMDHomeManager *)self accountRegistry];
  v172 = [v171 accounts];

  id v297 = v172;
  uint64_t v299 = [v172 countByEnumeratingWithState:&v359 objects:v384 count:16];
  if (v299)
  {
    uint64_t v298 = *(void *)v360;
    do
    {
      uint64_t v173 = 0;
      do
      {
        if (*(void *)v360 != v298) {
          objc_enumerationMutation(v297);
        }
        uint64_t v300 = v173;
        double v174 = *(void **)(*((void *)&v359 + 1) + 8 * v173);
        double v175 = [v174 shortDescription];
        [v165 appendFormat:@"Account %@:\n", v175];

        long long v357 = 0u;
        long long v358 = 0u;
        long long v355 = 0u;
        long long v356 = 0u;
        v176 = [v174 handles];
        uint64_t v177 = [v176 countByEnumeratingWithState:&v355 objects:v383 count:16];
        if (v177)
        {
          uint64_t v178 = v177;
          uint64_t v179 = *(void *)v356;
          do
          {
            for (uint64_t m = 0; m != v178; ++m)
            {
              if (*(void *)v356 != v179) {
                objc_enumerationMutation(v176);
              }
              v181 = *(void **)(*((void *)&v355 + 1) + 8 * m);
              double v182 = [v181 remoteDestinationString];
              int v183 = [v181 identifier];
              v184 = [v183 UUIDString];
              [v165 appendFormat:@"\tHandle %@(%@)\n", v182, v184];
            }
            uint64_t v178 = [v176 countByEnumeratingWithState:&v355 objects:v383 count:16];
          }
          while (v178);
        }

        v185 = [v174 devices];
        uint64_t v186 = [v185 count];

        if (v186)
        {
          long long v353 = 0u;
          long long v354 = 0u;
          long long v351 = 0u;
          long long v352 = 0u;
          id v301 = [v174 devices];
          uint64_t v304 = [v301 countByEnumeratingWithState:&v351 objects:v382 count:16];
          if (v304)
          {
            uint64_t v302 = *(void *)v352;
            do
            {
              uint64_t v187 = 0;
              do
              {
                if (*(void *)v352 != v302) {
                  objc_enumerationMutation(v301);
                }
                v188 = *(void **)(*((void *)&v351 + 1) + 8 * v187);
                id objb = [v188 name];
                v189 = [v188 identifier];
                v316 = [v189 UUIDString];
                [v188 version];
                v311 = v189;
                v309 = uint64_t v313 = v187;
                if (v309)
                {
                  v305 = [v188 version];
                  v307 = v305;
                }
                else
                {
                  v307 = @"Unknown";
                }
                v190 = [v188 productInfo];
                [v190 productPlatform];
                v191 = HMFProductPlatformToString();
                v192 = [v188 productInfo];
                [v192 productClass];
                v193 = HMFProductClassToString();
                v194 = [v188 productInfo];
                v195 = [v194 softwareVersion];
                v196 = [v195 versionString];
                [v165 appendFormat:@"\tDevice %@(%@), Version = %@, Platforuint64_t m = %@, Class = %@, OS = %@\n", objb, v316, v307, v191, v193, v196];

                if (v309) {
                long long v349 = 0u;
                }
                long long v350 = 0u;
                long long v347 = 0u;
                long long v348 = 0u;
                v197 = [v188 handles];
                uint64_t v198 = [v197 countByEnumeratingWithState:&v347 objects:v381 count:16];
                if (v198)
                {
                  uint64_t v199 = v198;
                  uint64_t v200 = *(void *)v348;
                  do
                  {
                    for (uint64_t n = 0; n != v199; ++n)
                    {
                      if (*(void *)v348 != v200) {
                        objc_enumerationMutation(v197);
                      }
                      [v165 appendFormat:@"\t\tHandle %@\n", *(void *)(*((void *)&v347 + 1) + 8 * n)];
                    }
                    uint64_t v199 = [v197 countByEnumeratingWithState:&v347 objects:v381 count:16];
                  }
                  while (v199);
                }

                v202 = [v188 capabilities];

                if (v202)
                {
                  uint64_t v203 = [v188 capabilities];
                  [v165 appendFormat:@"\t\t%@\n", v203];
                }
                uint64_t v187 = v313 + 1;
              }
              while (v313 + 1 != v304);
              uint64_t v304 = [v301 countByEnumeratingWithState:&v351 objects:v382 count:16];
            }
            while (v304);
          }
        }
        uint64_t v173 = v300 + 1;
      }
      while (v300 + 1 != v299);
      uint64_t v299 = [v297 countByEnumeratingWithState:&v359 objects:v384 count:16];
    }
    while (v299);
  }

  if ([v165 length]) {
    [v296 setObject:v165 forKeyedSubscript:@"kDumpStateAccountsDescriptionKey"];
  }

  v164 = v294;
  if (v291)
  {
    char v204 = 1;
    goto LABEL_126;
  }
LABEL_124:
  if (![v164 containsObject:@"kDumpStateRegisteredPairedAccyDescriptionKey"]) {
    goto LABEL_130;
  }
  char v204 = 0;
LABEL_126:
  v205 = [(HMDHomeManager *)self accessoryBrowserInternal];
  v206 = [v205 dumpRegisteredPairedAccessories];

  if ([v206 length]) {
    [v296 setObject:v206 forKeyedSubscript:@"kDumpStateRegisteredPairedAccyDescriptionKey"];
  }

  if (v204)
  {
    char v207 = 1;
    goto LABEL_133;
  }
LABEL_130:
  if (([v164 containsObject:@"kDumpStateRegisteredPairedAccyDescriptionKey"] & 1) == 0
    && ![v164 containsObject:@"kDumpStateUnassociatedAccyDescriptionKey"])
  {
    goto LABEL_137;
  }
  char v207 = 0;
LABEL_133:
  v208 = [(HMDHomeManager *)self accessoryBrowser];
  v209 = [v208 dumpBrowsingConnections];

  if ([v209 length]) {
    [v296 setObject:v209 forKeyedSubscript:@"kDumpStateBrowsingConnectionsDescriptionKey"];
  }

  if (v207)
  {
    char v210 = 1;
    goto LABEL_139;
  }
LABEL_137:
  if (![v164 containsObject:@"kDumpStatePendingUserManagementOperationsDescriptionKey"])goto LABEL_152; {
  char v210 = 0;
  }
LABEL_139:
  v211 = [MEMORY[0x1E4F28E78] string];
  long long v343 = 0u;
  long long v344 = 0u;
  long long v345 = 0u;
  long long v346 = 0u;
  v212 = +[HMDUserManagementOperationManager sharedManager];
  v213 = [v212 operations];

  uint64_t v214 = [v213 countByEnumeratingWithState:&v343 objects:v380 count:16];
  if (v214)
  {
    uint64_t v215 = v214;
    uint64_t v216 = *(void *)v344;
    char v217 = 1;
    do
    {
      for (iuint64_t i = 0; ii != v215; ++ii)
      {
        if (*(void *)v344 != v216) {
          objc_enumerationMutation(v213);
        }
        uint64_t v219 = *(void *)(*((void *)&v343 + 1) + 8 * ii);
        if (v217) {
          [v211 appendFormat:@"Pending User Management Operations\n"];
        }
        [v211 appendFormat:@"\tOperatiouint64_t n = %@\n", v219];
        char v217 = 0;
      }
      uint64_t v215 = [v213 countByEnumeratingWithState:&v343 objects:v380 count:16];
      char v217 = 0;
    }
    while (v215);
  }

  if ([v211 length]) {
    [v296 setObject:v211 forKeyedSubscript:@"kDumpStatePendingUserManagementOperationsDescriptionKey"];
  }

  v164 = v294;
  if (v210)
  {
    double v220 = self;
    v221 = [(HMDHomeManager *)self messageDispatcher];
    int v222 = [v221 secureRemoteTransport];
    v223 = [v222 dumpState];
    [v296 setObject:v223 forKeyedSubscript:@"RemoteMessaging"];

    char v317 = 1;
    goto LABEL_156;
  }
LABEL_152:
  if ([v164 containsObject:@"kDumpStateRemoteMessagingKey"])
  {
    v224 = [(HMDHomeManager *)self messageDispatcher];
    v225 = [v224 secureRemoteTransport];
    BOOL v226 = [v225 dumpState];
    [v296 setObject:v226 forKeyedSubscript:@"RemoteMessaging"];
  }
  if (![v164 containsObject:@"kDumpStateActionSetDescriptionKey"])
  {
    if (isWatch()) {
      goto LABEL_196;
    }
    goto LABEL_169;
  }
  char v317 = 0;
  double v220 = self;
LABEL_156:
  int v227 = [MEMORY[0x1E4F1CA60] dictionary];
  long long v339 = 0u;
  long long v340 = 0u;
  long long v341 = 0u;
  long long v342 = 0u;
  id objc = [(HMDHomeManager *)v220 homes];
  uint64_t v228 = [objc countByEnumeratingWithState:&v339 objects:v379 count:16];
  if (v228)
  {
    uint64_t v229 = v228;
    uint64_t v230 = *(void *)v340;
    do
    {
      for (juint64_t j = 0; jj != v229; ++jj)
      {
        if (*(void *)v340 != v230) {
          objc_enumerationMutation(objc);
        }
        v232 = *(void **)(*((void *)&v339 + 1) + 8 * jj);
        id v233 = NSString;
        long long v234 = [v232 name];
        long long v235 = [v232 uuid];
        long long v236 = [v233 stringWithFormat:@"%@/%@", v234, v235];

        long long v237 = [v232 dumpActionSetDescription];
        [v227 setObject:v237 forKeyedSubscript:v236];
      }
      uint64_t v229 = [objc countByEnumeratingWithState:&v339 objects:v379 count:16];
    }
    while (v229);
  }

  if ([v227 count])
  {
    id v238 = (void *)[v227 copy];
    [v296 setObject:v238 forKeyedSubscript:@"kDumpStateActionSetDescriptionKey"];
  }
  v164 = v294;
  if (!isWatch())
  {
    if (v317)
    {
      char v239 = 1;
      goto LABEL_171;
    }
LABEL_169:
    if (![v164 containsObject:@"kDumpStateCharacteristicNotificationRegistryKey"]) {
      goto LABEL_182;
    }
    char v239 = 0;
LABEL_171:
    double v240 = [MEMORY[0x1E4F28E78] string];
    long long v335 = 0u;
    long long v336 = 0u;
    long long v337 = 0u;
    long long v338 = 0u;
    v241 = [(HMDHomeManager *)self homes];
    uint64_t v242 = [v241 countByEnumeratingWithState:&v335 objects:v378 count:16];
    if (v242)
    {
      uint64_t v243 = v242;
      uint64_t v244 = *(void *)v336;
      do
      {
        for (kuint64_t k = 0; kk != v243; ++kk)
        {
          if (*(void *)v336 != v244) {
            objc_enumerationMutation(v241);
          }
          v246 = [*(id *)(*((void *)&v335 + 1) + 8 * kk) dumpCharacteristicNotificationRegistry];
          [v240 appendString:v246];
        }
        uint64_t v243 = [v241 countByEnumeratingWithState:&v335 objects:v378 count:16];
      }
      while (v243);
    }

    if ([v240 length]) {
      [v296 setObject:v240 forKeyedSubscript:@"kDumpStateCharacteristicNotificationRegistryKey"];
    }

    v164 = v294;
    if (v239)
    {
      char v317 = 1;
LABEL_184:
      __int16 v247 = [MEMORY[0x1E4F1CA60] dictionary];
      long long v331 = 0u;
      long long v332 = 0u;
      long long v333 = 0u;
      long long v334 = 0u;
      id objd = [(HMDHomeManager *)self homes];
      uint64_t v248 = [objd countByEnumeratingWithState:&v331 objects:v377 count:16];
      if (v248)
      {
        uint64_t v249 = v248;
        uint64_t v250 = *(void *)v332;
        do
        {
          for (muint64_t m = 0; mm != v249; ++mm)
          {
            if (*(void *)v332 != v250) {
              objc_enumerationMutation(objd);
            }
            v252 = *(void **)(*((void *)&v331 + 1) + 8 * mm);
            v253 = NSString;
            uint64_t v254 = [v252 name];
            v255 = [v252 uuid];
            v256 = [v253 stringWithFormat:@"%@/%@", v254, v255];

            v257 = [v252 dumpMediaSessionDescription];
            [v247 setObject:v257 forKeyedSubscript:v256];
          }
          uint64_t v249 = [objd countByEnumeratingWithState:&v331 objects:v377 count:16];
        }
        while (v249);
      }

      v164 = v294;
      if ([v247 count])
      {
        v258 = (void *)[v247 copy];
        [v296 setObject:v258 forKeyedSubscript:@"kDumpStateMediaSessionsKey"];
      }
      goto LABEL_194;
    }
LABEL_182:
    if (![v164 containsObject:@"kDumpStateMediaSessionsKey"]) {
      goto LABEL_196;
    }
    char v317 = 0;
    goto LABEL_184;
  }
LABEL_194:
  if (v317)
  {
    v259 = [(HMDHomeManager *)self syncManager];
    v260 = [v259 dumpState];
    [v296 setObject:v260 forKeyedSubscript:*MEMORY[0x1E4F64EA8]];

    uint64_t v261 = *MEMORY[0x1E4F64D80];
    v262 = [(HMDHomeManager *)self appData];
    v263 = [v262 dumpState];
    [v296 setObject:v263 forKeyedSubscript:v261];

    v264 = [MEMORY[0x1E4F5BE48] systemStore];
    v265 = [v264 dumpState];
    [v296 setObject:v265 forKeyedSubscript:*MEMORY[0x1E4F64E20]];

LABEL_203:
    v275 = [MEMORY[0x1E4F1CA48] array];
    long long v327 = 0u;
    long long v328 = 0u;
    long long v329 = 0u;
    long long v330 = 0u;
    v276 = self->_homes;
    uint64_t v277 = [(NSMutableArray *)v276 countByEnumeratingWithState:&v327 objects:v376 count:16];
    if (v277)
    {
      uint64_t v278 = v277;
      uint64_t v279 = *(void *)v328;
      do
      {
        for (nuint64_t n = 0; nn != v278; ++nn)
        {
          if (*(void *)v328 != v279) {
            objc_enumerationMutation(v276);
          }
          v281 = *(void **)(*((void *)&v327 + 1) + 8 * nn);
          long long v323 = 0u;
          long long v324 = 0u;
          long long v325 = 0u;
          long long v326 = 0u;
          v282 = [v281 accessories];
          uint64_t v283 = [v282 countByEnumeratingWithState:&v323 objects:v375 count:16];
          if (v283)
          {
            uint64_t v284 = v283;
            uint64_t v285 = *(void *)v324;
            do
            {
              for (uint64_t i1 = 0; i1 != v284; ++i1)
              {
                if (*(void *)v324 != v285) {
                  objc_enumerationMutation(v282);
                }
                v287 = [*(id *)(*((void *)&v323 + 1) + 8 * i1) dumpNetworkState];
                if (v287) {
                  [v275 addObject:v287];
                }
              }
              uint64_t v284 = [v282 countByEnumeratingWithState:&v323 objects:v375 count:16];
            }
            while (v284);
          }
        }
        uint64_t v278 = [(NSMutableArray *)v276 countByEnumeratingWithState:&v327 objects:v376 count:16];
      }
      while (v278);
    }

    [v296 setObject:v275 forKeyedSubscript:@"kDumpStateNetworkKey"];
    v164 = v294;
    goto LABEL_220;
  }
LABEL_196:
  uint64_t v266 = *MEMORY[0x1E4F64EA8];
  if ([v164 containsObject:*MEMORY[0x1E4F64EA8]])
  {
    v267 = [(HMDHomeManager *)self syncManager];
    v268 = [v267 dumpState];
    [v296 setObject:v268 forKeyedSubscript:v266];
  }
  uint64_t v269 = *MEMORY[0x1E4F64D80];
  if ([v164 containsObject:*MEMORY[0x1E4F64D80]])
  {
    v270 = [(HMDHomeManager *)self appData];
    v271 = [v270 dumpState];
    [v296 setObject:v271 forKeyedSubscript:v269];
  }
  uint64_t v272 = *MEMORY[0x1E4F64E20];
  if ([v164 containsObject:*MEMORY[0x1E4F64E20]])
  {
    v273 = [MEMORY[0x1E4F5BE48] systemStore];
    v274 = [v273 dumpState];
    [v296 setObject:v274 forKeyedSubscript:v272];
  }
  if ([v164 containsObject:@"kDumpStateNetworkKey"]) {
    goto LABEL_203;
  }
LABEL_220:
  [v292 invalidate];
  id v288 = v296;

  return v288;
}

- (void)_handleQueryVersionInformation:(id)a3
{
  v18[1] = *MEMORY[0x1E4F143B8];
  id v3 = (void *)MEMORY[0x1E4F28E78];
  id v4 = a3;
  id v5 = [v3 string];
  char v6 = [MEMORY[0x1E4F28B50] mainBundle];
  id v7 = [v6 infoDictionary];
  int v8 = [v7 objectForKey:*MEMORY[0x1E4F1D020]];
  [v5 appendFormat:@"homed: %@\n", v8];

  id v9 = +[HMDHAPMetadata getSharedInstance];
  __int16 v10 = +[HMDHAPMetadata getBuiltinInstance];
  id v11 = [v9 schemaVersion];
  uint64_t v12 = [v9 version];
  id v13 = [v10 schemaVersion];
  uint64_t v14 = [v10 version];
  [v5 appendFormat:@"Metadata - Current: %@/%@   Builtin: %@/%@\n", v11, v12, v13, v14];

  int v17 = @"kHomeKitVersionStringKey";
  v18[0] = v5;
  uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v18 forKeys:&v17 count:1];
  uint64_t v16 = [v4 responseHandler];

  ((void (**)(void, void, void *))v16)[2](v16, 0, v15);
}

- (void)_handleContactStoreChanged
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v3 = [(HMDHomeManager *)self incomingInvitations];
  id v4 = (void *)[v3 copy];

  uint64_t v5 = [v4 countByEnumeratingWithState:&v23 objects:v32 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    int v7 = 0;
    uint64_t v8 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v24 != v8) {
          objc_enumerationMutation(v4);
        }
        v7 |= [*(id *)(*((void *)&v23 + 1) + 8 * i) refreshDisplayName];
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v23 objects:v32 count:16];
    }
    while (v6);
  }
  else
  {
    LOBYTE(v7) = 0;
  }

  __int16 v10 = (void *)MEMORY[0x1D9452090]();
  id v11 = self;
  uint64_t v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v13 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    uint64_t v29 = v13;
    __int16 v30 = 1024;
    int v31 = v7 & 1;
    _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Handling contact store changed with saveToStore: %{BOOL}d", buf, 0x12u);
  }
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v14 = [(HMDHomeManager *)v11 homes];
  uint64_t v15 = [v14 countByEnumeratingWithState:&v19 objects:v27 count:16];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v20;
    do
    {
      for (uint64_t j = 0; j != v16; ++j)
      {
        if (*(void *)v20 != v17) {
          objc_enumerationMutation(v14);
        }
        [*(id *)(*((void *)&v19 + 1) + 8 * j) refreshUserDisplayNames];
      }
      uint64_t v16 = [v14 countByEnumeratingWithState:&v19 objects:v27 count:16];
    }
    while (v16);
  }

  if (v7) {
    [(HMDHomeManager *)v11 saveWithReason:@"userDisplayNameUpdated" information:0 saveOptions:0];
  }
}

- (void)handleContactStoreChanged:(id)a3
{
  id v4 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __44__HMDHomeManager_handleContactStoreChanged___block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v4, block);
}

uint64_t __44__HMDHomeManager_handleContactStoreChanged___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleContactStoreChanged];
}

- (void)processMetadataModel:(id)a3 message:(id)a4
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v53 = a4;
  uint64_t v6 = [v53 transactionResult];
  int v7 = (void *)MEMORY[0x1D9452090]();
  uint64_t v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    __int16 v10 = +[HMDBackingStoreTransactionOptions stringForHMDBackingStoreTransactionSource:](HMDBackingStoreTransactionActions, "stringForHMDBackingStoreTransactionSource:", [v6 source]);
    *(_DWORD *)long long buf = 138543618;
    uint64_t v56 = v9;
    __int16 v57 = 2112;
    unint64_t v58 = (unint64_t)v10;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Receiving metadata model from %@", buf, 0x16u);
  }
  id v11 = [v5 metadataVersion];
  unint64_t v12 = [v11 unsignedIntegerValue];

  id v13 = [v5 schemaVersion];
  uint64_t v14 = [v13 unsignedIntegerValue];

  uint64_t v15 = +[HMDHAPMetadata getSharedInstance];
  uint64_t v16 = [v15 version];
  unint64_t v17 = [v16 unsignedIntegerValue];

  uint64_t v18 = +[HMDHAPMetadata getSharedInstance];
  long long v19 = [v18 schemaVersion];
  uint64_t v20 = [v19 unsignedIntegerValue];

  long long v21 = (void *)MEMORY[0x1D9452090]();
  long long v22 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    long long v23 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138544386;
    uint64_t v56 = v23;
    __int16 v57 = 2048;
    unint64_t v58 = v12;
    __int16 v59 = 2048;
    uint64_t v60 = v14;
    __int16 v61 = 2048;
    unint64_t v62 = v17;
    __int16 v63 = 2048;
    uint64_t v64 = v20;
    _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_INFO, "%{public}@The new metadata has version %tu, schema version %tu, current version %tu, schema %tu", buf, 0x34u);
  }
  if (v20 != v14)
  {
    long long v37 = (void *)MEMORY[0x1D9452090]();
    long long v38 = HMFGetOSLogHandle();
    long long v24 = v6;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      long long v39 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v56 = v39;
      _os_log_impl(&dword_1D49D5000, v38, OS_LOG_TYPE_ERROR, "%{public}@Schema is compatible, not processing this metadata.", buf, 0xCu);
    }
    int v31 = v53;
    goto LABEL_34;
  }
  long long v24 = v6;
  if (v12 <= v17)
  {
    if (v12 >= v17)
    {
      int v31 = v53;
      if (+[HMDHAPMetadata shouldUploadToCloudAfterHomedReady]|| v12 == v17)
      {
        __int16 v47 = (void *)MEMORY[0x1D9452090]();
        id v48 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
        {
          uint64_t v49 = HMFGetLogIdentifier();
          BOOL v50 = +[HMDHAPMetadata shouldUploadToCloudAfterHomedReady];
          uint64_t v51 = "NO";
          if (v50) {
            uint64_t v51 = "YES";
          }
          *(_DWORD *)long long buf = 138543618;
          uint64_t v56 = v49;
          __int16 v57 = 2080;
          unint64_t v58 = (unint64_t)v51;
          _os_log_impl(&dword_1D49D5000, v48, OS_LOG_TYPE_INFO, "%{public}@Metadata should be uploaded to cloud after homed is ready: %s", buf, 0x16u);
        }
        [v6 markChanged];
        goto LABEL_33;
      }
      __int16 v45 = [v53 responseHandler];

      if (v45)
      {
        id v36 = [v53 responseHandler];
        uint64_t v46 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
        ((void (**)(void, void *, void))v36)[2](v36, v46, 0);

        goto LABEL_27;
      }
    }
    else
    {
      int v31 = v53;
      if ([v6 source] == 2)
      {
        id v36 = +[HMDPersistentStore loadPlainMetadataDictionary];
        [(HMDHomeManager *)self handleMetadataDictionary:v36 message:0];
LABEL_27:
      }
    }
LABEL_33:
    +[HMDHAPMetadata resetShouldUploadToCloudAfterHomedReady];
    goto LABEL_34;
  }
  long long v25 = [v5 rawPlist];
  id v54 = 0;
  long long v26 = +[HMDHAPMetadata metadataWithDictionary:v25 error:&v54];
  id v27 = v54;

  uint64_t v28 = (void *)MEMORY[0x1D9452090]();
  uint64_t v29 = HMFGetOSLogHandle();
  __int16 v30 = v29;
  if (!v27 && v26)
  {
    int v31 = v53;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      uint64_t v32 = HMFGetLogIdentifier();
      uint64_t v33 = [v26 version];
      id v34 = [v26 schemaVersion];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v56 = v32;
      __int16 v57 = 2112;
      unint64_t v58 = (unint64_t)v33;
      __int16 v59 = 2112;
      uint64_t v60 = (uint64_t)v34;
      _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_INFO, "%{public}@Updating current metadata to the new metadata %@/%@.", buf, 0x20u);
    }
    id v35 = [v5 metadataDictionary];
    +[HMDHAPMetadata updateLocalMetadataWithMetadata:v35];

    id v36 = +[HMDHAPMetadata getSharedInstance];

    [v6 markSaveToAssistant];
    [v6 markChanged];
    [(HMDHomeManager *)self _pushMetadataChangesToUsers];
    [(HMDHomeManager *)self pushMetadataToAllWatches];
    [(HMDHomeManager *)self _notifyMetadata:v36 limitToSPIClients:0 message:v53 invokeResponseHandler:1];
    [(HMDHomeManager *)self _notifyMetadata:v36 limitToSPIClients:1 message:v53 invokeResponseHandler:0];
    goto LABEL_27;
  }
  int v31 = v53;
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    long long v40 = HMFGetLogIdentifier();
    long long v41 = [v5 rawPlist];
    *(_DWORD *)long long buf = 138543618;
    uint64_t v56 = v40;
    __int16 v57 = 2112;
    unint64_t v58 = (unint64_t)v41;
    _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_ERROR, "%{public}@Failed to init metadata with dictionary %@", buf, 0x16u);
  }
  uint64_t v42 = [v53 responseHandler];

  if (v42)
  {
    uint64_t v43 = [v53 responseHandler];
    uint64_t v44 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    ((void (**)(void, void *, void))v43)[2](v43, v44, 0);
  }
LABEL_34:
}

- (void)_notifyMetadata:(id)a3 limitToSPIClients:(BOOL)a4 message:(id)a5 invokeResponseHandler:(BOOL)a6
{
  BOOL v7 = a4;
  void v29[3] = *MEMORY[0x1E4F143B8];
  id v10 = a5;
  v28[0] = @"kMetadataInfoVersionKey";
  id v11 = a3;
  unint64_t v12 = [v11 version];
  v29[0] = v12;
  v28[1] = @"kMetadataInfoSchemaVersionKey";
  id v13 = [v11 schemaVersion];
  v29[1] = v13;
  v28[2] = @"kHAPMetadataDataKey";
  uint64_t v14 = [v11 xpcData:v7];

  void v29[2] = v14;
  uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v29 forKeys:v28 count:3];

  if (v7)
  {
    uint64_t v16 = (void *)MEMORY[0x1E4F65480];
    unint64_t v17 = [v10 identifier];
    uint64_t v18 = [v16 entitledMessageWithName:@"kMetadataChangedNotificationKey" identifier:v17 messagePayload:v15];
  }
  else
  {
    long long v19 = (void *)MEMORY[0x1E4F654B0];
    uint64_t v20 = [(HMDHomeManager *)self messageDestination];
    uint64_t v18 = [v19 messageWithName:@"kMetadataChangedNotificationKey" destination:v20 payload:v15];

    long long v21 = [v10 identifier];
    [v18 setIdentifier:v21];

    objc_msgSend(v18, "setRemote:", objc_msgSend(v10, "isRemote"));
  }
  long long v22 = [(HMDHomeManager *)self messageDispatcher];
  long long v23 = [(HMDHomeManager *)self uuid];
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  v25[2] = __82__HMDHomeManager__notifyMetadata_limitToSPIClients_message_invokeResponseHandler___block_invoke;
  v25[3] = &unk_1E6A19B58;
  BOOL v27 = a6;
  id v26 = v10;
  id v24 = v10;
  [v22 sendMessage:v18 target:v23 andInvokeCompletionHandler:v25];
}

uint64_t __82__HMDHomeManager__notifyMetadata_limitToSPIClients_message_invokeResponseHandler___block_invoke(uint64_t result)
{
  if (*(unsigned char *)(result + 40)) {
    return [*(id *)(result + 32) respondWithPayload:0];
  }
  return result;
}

- (void)handleMetadataDictionary:(id)a3 message:(id)a4
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = +[HMDHAPMetadataModel modelWithDictionary:v6];
  if (v8)
  {
    id v9 = [(HMDHomeManager *)self backingStore];
    id v10 = +[HMDBackingStoreTransactionOptions defaultMetadataCloudOptions];
    id v11 = [v9 transaction:@"MetadataUpdate" options:v10];

    [v11 add:v8 withMessage:v7];
    [v11 run];
  }
  else
  {
    unint64_t v12 = (void *)MEMORY[0x1D9452090]();
    id v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      int v18 = 138543618;
      long long v19 = v14;
      __int16 v20 = 2112;
      id v21 = v6;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to generate metadata model object from dictionary %@", (uint8_t *)&v18, 0x16u);
    }
    uint64_t v15 = [v7 responseHandler];

    if (v15)
    {
      uint64_t v16 = [v7 responseHandler];
      unint64_t v17 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
      ((void (**)(void, void *, void))v16)[2](v16, v17, 0);
    }
  }
}

- (void)evaluateToPushMetadataWhenHomeKitInUse
{
  v14[1] = *MEMORY[0x1E4F143B8];
  objc_initWeak(&location, self);
  id v3 = [HMDBackingStoreCacheFetchModelObjects alloc];
  id v4 = +[HMDHAPMetadataModel metadataModelObjectUUID];
  v14[0] = v4;
  id v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:1];
  uint64_t v8 = MEMORY[0x1E4F143A8];
  uint64_t v9 = 3221225472;
  id v10 = __56__HMDHomeManager_evaluateToPushMetadataWhenHomeKitInUse__block_invoke;
  id v11 = &unk_1E6A16460;
  objc_copyWeak(&v12, &location);
  id v6 = [(HMDBackingStoreCacheFetchModelObjects *)v3 initWithUUIDs:v5 fetchResult:&v8];

  id v7 = [(HMDHomeManager *)self backingStore];
  [v7 submit:v6];

  objc_destroyWeak(&v12);
  objc_destroyWeak(&location);
}

uint64_t __56__HMDHomeManager_evaluateToPushMetadataWhenHomeKitInUse__block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!v6)
  {
    uint64_t v8 = [v5 firstObject];
    uint64_t v9 = [v8 object];

    id v10 = [v9 metadataVersion];
    unint64_t v11 = [v10 unsignedIntegerValue];

    id v12 = [v9 schemaVersion];
    uint64_t v24 = [v12 unsignedIntegerValue];

    id v13 = +[HMDHAPMetadata getSharedInstance];
    uint64_t v14 = [v13 version];
    unint64_t v15 = [v14 unsignedIntegerValue];

    uint64_t v16 = +[HMDHAPMetadata getSharedInstance];
    unint64_t v17 = [v16 schemaVersion];
    uint64_t v18 = [v17 unsignedIntegerValue];

    long long v19 = (void *)MEMORY[0x1D9452090]();
    __int16 v20 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      id v21 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138544386;
      id v26 = v21;
      __int16 v27 = 2048;
      unint64_t v28 = v11;
      __int16 v29 = 2048;
      uint64_t v30 = v24;
      __int16 v31 = 2048;
      unint64_t v32 = v15;
      __int16 v33 = 2048;
      uint64_t v34 = v18;
      _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@The metadata in transaction store has version %tu, schema version %tu, current version %tu, schema %tu", buf, 0x34u);
    }
    if (v18 == 1 && v15 > v11)
    {
      uint64_t v22 = +[HMDPersistentStore loadPlainMetadataDictionary];
      [WeakRetained handleMetadataDictionary:v22 message:0];
    }
  }

  return 0;
}

- (void)_handleHomeManagerSyncWalletKeysPassSerialNumbersMessage:(id)a3
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v4 = (__CFString *)a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = [MEMORY[0x1E4F65430] internalOnlyInitializer];
  id v7 = (void *)MEMORY[0x1D9452090]();
  uint64_t v8 = self;
  uint64_t v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    id v10 = HMFGetLogIdentifier();
    unint64_t v11 = [v6 UUID];
    *(_DWORD *)long long buf = 138543874;
    long long v25 = v10;
    __int16 v26 = 2112;
    __int16 v27 = v11;
    __int16 v28 = 2112;
    __int16 v29 = v4;
    _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@[NewFlow: %@] Handling message to sync wallet keys pass serial numbers: %@", buf, 0x20u);
  }
  id v12 = [(__CFString *)v4 arrayForKey:@"HMDHomeMangerMessageKeyHomeWalletKeysPassSerialNumbers"];
  id v13 = objc_msgSend(v12, "na_map:", &__block_literal_global_1321);

  if (v13)
  {
    uint64_t v14 = [MEMORY[0x1E4F1CAD0] setWithArray:v13];
    [(HMDHomeManager *)v8 removeHomeWalletKeysExcludingSerialNumbers:v14 flow:v6];
    uint64_t v22 = @"kDataSyncResponseAckKey";
    uint64_t v23 = MEMORY[0x1E4F1CC38];
    unint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v23 forKeys:&v22 count:1];
    [(__CFString *)v4 respondWithPayload:v15];
  }
  else
  {
    uint64_t v16 = (void *)MEMORY[0x1D9452090]();
    unint64_t v17 = v8;
    uint64_t v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      long long v19 = HMFGetLogIdentifier();
      __int16 v20 = [v6 UUID];
      id v21 = [(__CFString *)v4 messagePayload];
      *(_DWORD *)long long buf = 138544130;
      long long v25 = v19;
      __int16 v26 = 2112;
      __int16 v27 = v20;
      __int16 v28 = 2112;
      __int16 v29 = @"HMDHomeMangerMessageKeyHomeWalletKeysPassSerialNumbers";
      __int16 v30 = 2112;
      __int16 v31 = v21;
      _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Payload of message to sync wallet keys pass serial numbers is missing key %@: %@", buf, 0x2Au);
    }
    uint64_t v14 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    [(__CFString *)v4 respondWithError:v14];
  }
}

id __75__HMDHomeManager__handleHomeManagerSyncWalletKeysPassSerialNumbersMessage___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;

  return v4;
}

- (void)_handleMetadataSync:(id)a3
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([v4 remoteRestriction] == 4)
  {
    id v5 = [v4 dataForKey:@"kHAPMetadataDataKey"];
    objc_msgSend(v5, "hmd_uncompressedData");
    id v6 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue();

    id v7 = (void *)MEMORY[0x1E4F28DC0];
    uint64_t v8 = +[HMDHAPMetadataModel allowedTypes];
    id v28 = 0;
    uint64_t v9 = [v7 unarchivedObjectOfClasses:v8 fromData:v6 error:&v28];
    id v10 = v28;

    if (v6 && v9)
    {
      [(HMDHomeManager *)self handleMetadataDictionary:v9 message:0];
      unint64_t v11 = [v4 responseHandler];

      if (!v11)
      {
LABEL_19:

        goto LABEL_20;
      }
      id v12 = [v4 responseHandler];
      __int16 v29 = @"kDataSyncResponseAckKey";
      uint64_t v30 = MEMORY[0x1E4F1CC38];
      id v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v30 forKeys:&v29 count:1];
      v12[2](v12, 0, v13);
    }
    else
    {
      long long v19 = (void *)MEMORY[0x1D9452090]();
      __int16 v20 = self;
      id v21 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v34 = v22;
        _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_ERROR, "%{public}@Failed to receive metadata update", buf, 0xCu);
      }
      if (v6)
      {
        uint64_t v23 = (void *)MEMORY[0x1D9452090]();
        uint64_t v24 = v20;
        long long v25 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          __int16 v26 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543618;
          uint64_t v34 = v26;
          __int16 v35 = 2112;
          id v36 = v10;
          _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive hap metadata model from metadata data: %@", buf, 0x16u);
        }
      }
      __int16 v27 = [v4 responseHandler];

      if (!v27) {
        goto LABEL_19;
      }
      id v12 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
      id v13 = [v4 responseHandler];
      v13[2](v13, v12, 0);
    }

    goto LABEL_19;
  }
  uint64_t v14 = (void *)MEMORY[0x1D9452090]();
  unint64_t v15 = self;
  uint64_t v16 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    unint64_t v17 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    uint64_t v34 = v17;
    __int16 v35 = 2112;
    id v36 = v4;
    _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, "%{public}@Dropping metadata sync: %@", buf, 0x16u);
  }
  uint64_t v18 = [v4 responseHandler];

  if (v18)
  {
    id v6 = [v4 responseHandler];
    __int16 v31 = @"kDataSyncResponseAckKey";
    uint64_t v32 = MEMORY[0x1E4F1CC38];
    id v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v32 forKeys:&v31 count:1];
    ((void (**)(void, void, id))v6)[2](v6, 0, v10);
LABEL_20:
  }
}

- (void)_handleSetMetadata:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [v4 stringForKey:@"kMetadataPlistPathKey"];
  id v10 = (id)v5;
  if (v5)
  {
    id v6 = (void *)MEMORY[0x1E4F1CB10];
    id v7 = [@"file://" stringByAppendingString:v5];
    uint64_t v8 = [v6 URLWithString:v7];

    uint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithContentsOfURL:v8];
    [(HMDHomeManager *)self handleMetadataDictionary:v9 message:v4];

    id v4 = (id)v8;
  }
  else
  {
    +[HMDHAPMetadata updateLocalMetadataWithBuiltinMetadata];
    [v4 respondWithPayload:0];
  }
}

- (void)_handleQueryMetadata:(id)a3
{
  v16[1] = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  id v4 = [v3 stringForKey:@"kMetadataPlistPathKey"];
  if (!v4)
  {
    uint64_t v8 = [v3 numberForKey:@"kMetadataDictionaryTypeKey"];
    int v9 = [v8 unsignedIntegerValue];
    if (v9 == 1)
    {
      uint64_t v10 = +[HMDHAPMetadata getSharedInstance];
    }
    else
    {
      if (v9)
      {
        uint64_t v5 = 0;
        goto LABEL_10;
      }
      uint64_t v10 = +[HMDHAPMetadata getBuiltinInstance];
    }
    uint64_t v5 = (void *)v10;
LABEL_10:

    goto LABEL_11;
  }
  id v14 = 0;
  uint64_t v5 = +[HMDHAPMetadata metadataWithPath:v4 error:&v14];
  id v6 = v14;
  if (v6)
  {
    id v7 = v6;
    [v3 respondWithError:v6];
    goto LABEL_15;
  }
LABEL_11:
  uint64_t v11 = [v5 rawPlist];
  id v12 = (void *)v11;
  if (v11)
  {
    unint64_t v15 = @"kMetadataDictionaryKey";
    v16[0] = v11;
    id v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v16 forKeys:&v15 count:1];
    [v3 respondWithPayload:v13];

    id v7 = 0;
  }
  else
  {
    id v7 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:1001 userInfo:0];
    [v3 respondWithError:v7];
  }

LABEL_15:
}

- (void)idsServerBagDidUpdate:(id)a3
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    int v10 = 138543362;
    uint64_t v11 = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@idsServerBagDidUpdate delegate called", (uint8_t *)&v10, 0xCu);
  }
  [(HMDHomeManager *)v6 updateCurrentUserEligibleForOwnerToAutoMigration];
  int v9 = [(HMDHomeManager *)v6 uuid];
  [(HMDHomeManager *)v6 updateGenerationCounterWithReason:@"IDS server bag updated" sourceUUID:v9 shouldNotifyClients:1];
}

- (void)_eraseLocalHomeData
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  [(HMDHomeManager *)self _eraseLocalHomeConfiguration];
  id v3 = +[HMDBackingStore resetBackingStore];
  if (v3)
  {
    id v4 = (void *)MEMORY[0x1D9452090]();
    uint64_t v5 = self;
    id v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v7 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v12 = v7;
      __int16 v13 = 2112;
      id v14 = v3;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_ERROR, "%{public}@resetBackingStore completed with error: %@", buf, 0x16u);
    }
  }
  objc_initWeak((id *)buf, self);
  uint64_t v8 = [(HMDHomeManager *)self cloudDataSyncManager];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __37__HMDHomeManager__eraseLocalHomeData__block_invoke;
  v9[3] = &unk_1E6A18528;
  objc_copyWeak(&v10, (id *)buf);
  [v8 resetCloudCache:v9];

  objc_destroyWeak(&v10);
  objc_destroyWeak((id *)buf);
}

void __37__HMDHomeManager__eraseLocalHomeData__block_invoke(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = [WeakRetained syncManager];
  [v3 cancelOperations];

  id v4 = [WeakRetained syncManager];
  [v4 resume];

  if (!a2) {
    [WeakRetained updateAccountAvailabilityChanged:0];
  }
}

- (void)eraseLocalHomeData
{
  id v3 = [(HMDHomeManager *)self syncManager];
  [v3 pause];

  id v4 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __36__HMDHomeManager_eraseLocalHomeData__block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v4, block);
}

uint64_t __36__HMDHomeManager_eraseLocalHomeData__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _eraseLocalHomeData];
}

- (void)_handleAccountAvailabilityChanged:(id)a3
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  id v4 = (void (**)(void))a3;
  uint64_t v5 = -[HMDHomeManager activeAccountIdentifier](self);
  id v6 = (void *)MEMORY[0x1D9452090]();
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    id v53 = v8;
    __int16 v54 = 2112;
    id v55 = v5;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Received CKAccountChangedNotification and current identifier is %@", buf, 0x16u);
  }
  if (v5)
  {
    int v9 = [MEMORY[0x1E4F5BE48] systemStore];
    id v50 = 0;
    id v51 = 0;
    id v49 = 0;
    int v10 = [v9 getCurrentiCloudIdentifier:&v51 controllerPairingIdentifier:&v50 error:&v49];
    id v11 = v51;
    id v12 = v50;
    id v36 = v49;
    if (v10 && [v11 length] && objc_msgSend(v12, "length"))
    {
      if ([v11 length] && (objc_msgSend(v11, "isEqualToIgnoringCase:", v5) & 1) == 0)
      {
        objc_initWeak(&location, self);
        int v22 = [v11 isEqualToString:@"__HomeKit_NoAccount_Identifier__"];
        uint64_t v23 = (void *)MEMORY[0x1D9452090]();
        if (v22)
        {
          HMFGetOSLogHandle();
          uint64_t v24 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            long long v25 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543362;
            id v53 = v25;
            _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_INFO, "%{public}@Current controller is the sentinel controller, determining what to do with local data", buf, 0xCu);
          }
          [(HMDHomeManager *)self setAccountActive:1];
          __int16 v26 = [(HMDHomeManager *)self cloudDataSyncManager];
          BOOL v27 = [(HMDHomeManager *)self accountActive];
          v41[0] = MEMORY[0x1E4F143A8];
          v41[1] = 3221225472;
          v41[2] = __52__HMDHomeManager__handleAccountAvailabilityChanged___block_invoke;
          v41[3] = &unk_1E6A16890;
          uint64_t v46 = v4;
          objc_copyWeak(&v47, &location);
          id v42 = v9;
          id v43 = v12;
          uint64_t v44 = self;
          id v45 = v5;
          [v26 updateAccountStatusChanged:v27 completionHandler:v41];

          objc_destroyWeak(&v47);
        }
        else
        {
          HMFGetOSLogHandle();
          id v28 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
          {
            __int16 v29 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            id v53 = v29;
            __int16 v54 = 2112;
            id v55 = v5;
            _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_INFO, "%{public}@Removing controller key for previous identifier %@ and deleting local home data", buf, 0x16u);
          }
          id v40 = v36;
          [v9 removeControllerKeyPairForIdentifier:v12 leaveTombstone:0 error:&v40];
          id v30 = v40;

          [(HMDHomeManager *)self _eraseLocalHomeConfiguration];
          id v36 = +[HMDBackingStore resetBackingStore];

          if (v36)
          {
            context = (void *)MEMORY[0x1D9452090]();
            __int16 v31 = self;
            HMFGetOSLogHandle();
            uint64_t v32 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
            {
              __int16 v33 = HMFGetLogIdentifier();
              *(_DWORD *)long long buf = 138543618;
              id v53 = v33;
              __int16 v54 = 2112;
              id v55 = v36;
              _os_log_impl(&dword_1D49D5000, v32, OS_LOG_TYPE_ERROR, "%{public}@resetBackingStore completed with error: %@", buf, 0x16u);
            }
          }
          objc_initWeak((id *)buf, self);
          uint64_t v34 = [(HMDHomeManager *)self cloudDataSyncManager];
          v37[0] = MEMORY[0x1E4F143A8];
          v37[1] = 3221225472;
          v37[2] = __52__HMDHomeManager__handleAccountAvailabilityChanged___block_invoke_1310;
          v37[3] = &unk_1E6A16F80;
          objc_copyWeak(&v39, (id *)buf);
          long long v38 = v4;
          [v34 resetCloudCache:v37];

          objc_destroyWeak(&v39);
          objc_destroyWeak((id *)buf);
        }
        objc_destroyWeak(&location);
      }
      else
      {
        __int16 v13 = (void *)MEMORY[0x1D9452090]();
        id v14 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          uint64_t v15 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543362;
          id v53 = v15;
          _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@User has re-signed into previously signed account, determining account status from CK", buf, 0xCu);
        }
        [(HMDHomeManager *)self _updateCloudDataSyncWithAccountState:1 completion:v4];
      }
    }
    else
    {
      uint64_t v16 = (void *)MEMORY[0x1D9452090]([(HMDHomeManager *)self _updateCloudDataSyncWithAccountState:1 completion:v4]);
      unint64_t v17 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        uint64_t v18 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        id v53 = v18;
        _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@We don't have any controller keys for current iCloud account.", buf, 0xCu);
      }
    }
  }
  else
  {
    long long v19 = (void *)MEMORY[0x1D9452090]();
    __int16 v20 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      id v21 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v53 = v21;
      _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@Dropping CKAccountChangedNotification since the current identifier is invalid", buf, 0xCu);
    }
    if (v4) {
      v4[2](v4);
    }
  }
}

- (id)activeAccountIdentifier
{
  if (a1)
  {
    uint64_t v1 = [a1 appleAccountManager];
    id v2 = [v1 accountContext];
    id v3 = [v2 identifier];
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

void __52__HMDHomeManager__handleAccountAvailabilityChanged___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v7 = a4;
  if (!v7 || (a2 & 1) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
    if (WeakRetained)
    {
      if (v7 || a2)
      {
        uint64_t v23 = (void *)MEMORY[0x1D9452090]();
        uint64_t v24 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          long long v25 = HMFGetLogIdentifier();
          __int16 v26 = "don't ";
          *(_DWORD *)long long buf = 138543874;
          uint64_t v32 = v25;
          if (a2) {
            __int16 v26 = "";
          }
          __int16 v33 = 2112;
          id v34 = v7;
          __int16 v35 = 2080;
          id v36 = v26;
          _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_INFO, "%{public}@Received account update with error: %@, and we %shave a record in the cloud, erasing local data", buf, 0x20u);
        }
        BOOL v27 = *(void **)(a1 + 32);
        uint64_t v28 = *(void *)(a1 + 40);
        id v30 = v7;
        [v27 removeControllerKeyPairForIdentifier:v28 leaveTombstone:1 error:&v30];
        id v22 = v30;

        [*(id *)(a1 + 48) _eraseLocalHomeConfiguration];
      }
      else
      {
        uint64_t v15 = *(void *)(a1 + 56);
        uint64_t v16 = *(void **)(a1 + 32);
        uint64_t v17 = *(void *)(a1 + 40);
        id v29 = 0;
        [v16 updateCurrentiCloudIdentifier:v15 controllerPairingIdentifier:v17 error:&v29];
        id v18 = v29;
        long long v19 = (void *)MEMORY[0x1D9452090]();
        __int16 v20 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          id v21 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543362;
          uint64_t v32 = v21;
          _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@Received account update that we don't have anything in the cloud, going to push local data", buf, 0xCu);
        }

        id v22 = 0;
      }
      [WeakRetained _handleAccountStatusDeterminedWithError:v22 homeDataRecordExists:a2 metadataRecordExists:a3 completion:*(void *)(a1 + 64)];
      id v7 = v22;
    }
  }
  else
  {
    uint64_t v8 = (void *)MEMORY[0x1D9452090]();
    int v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v10 = HMFGetLogIdentifier();
      id v11 = objc_msgSend(v7, "hmd_conciseCKError");
      id v12 = [v11 shortDescription];
      *(_DWORD *)long long buf = 138543618;
      uint64_t v32 = v10;
      __int16 v33 = 2112;
      id v34 = v12;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Failed to determine account status from CK due to error: %@, continuing to use sentinel controller", buf, 0x16u);
    }
    uint64_t v13 = *(void *)(a1 + 64);
    if (v13) {
      (*(void (**)(void))(v13 + 16))();
    }
  }
}

void __52__HMDHomeManager__handleAccountAvailabilityChanged___block_invoke_1310(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    [WeakRetained _updateCloudDataSyncWithAccountState:1 completion:*(void *)(a1 + 32)];
    id WeakRetained = v3;
  }
}

- (void)updateAccountAvailabilityChanged:(id)a3
{
  id v4 = a3;
  objc_initWeak(&location, self);
  uint64_t v5 = [(HMDHomeManager *)self cloudAccount];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __51__HMDHomeManager_updateAccountAvailabilityChanged___block_invoke;
  v7[3] = &unk_1E6A16868;
  objc_copyWeak(&v9, &location);
  id v6 = v4;
  id v8 = v6;
  [v5 addAccountOperation:v7];

  objc_destroyWeak(&v9);
  objc_destroyWeak(&location);
}

void __51__HMDHomeManager_updateAccountAvailabilityChanged___block_invoke(uint64_t a1, void *a2)
{
  id v8 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained _handleAccountAvailabilityChanged:v8];
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5) {
      (*(void (**)(uint64_t, void))(v5 + 16))(v5, 0);
    }
  }
  else
  {
    if (v8) {
      v8[2](v8);
    }
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      id v7 = [MEMORY[0x1E4F28C58] hmErrorWithCode:52];
      (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
    }
  }
}

- (void)_handleRemoteSessionTornDownNotification:(id)a3
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [v4 userInfo];
  uint64_t v6 = objc_msgSend(v5, "hmf_UUIDForKey:", @"kHomeUUID");

  if (v6)
  {
    id v7 = [(HMDHomeManager *)self _homeWithUUID:v6];
    id v8 = [v7 residentDeviceManager];
    char v9 = [v8 isResidentAvailable];

    if ((v9 & 1) == 0)
    {
      int v10 = (void *)MEMORY[0x1D9452090]();
      id v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        id v12 = HMFGetLogIdentifier();
        int v24 = 138543618;
        long long v25 = v12;
        __int16 v26 = 2112;
        BOOL v27 = v7;
        _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Receive notification that remote access was torn down for home %@", (uint8_t *)&v24, 0x16u);
      }
      if (v7)
      {
        uint64_t v13 = (void *)MEMORY[0x1D9452090]();
        id v14 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          uint64_t v15 = HMFGetLogIdentifier();
          uint64_t v16 = [v7 name];
          uint64_t v17 = [v7 uuid];
          id v18 = [v17 UUIDString];
          int v24 = 138543874;
          long long v25 = v15;
          __int16 v26 = 2112;
          BOOL v27 = v16;
          __int16 v28 = 2112;
          id v29 = v18;
          _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Re-electing new resident device for home: %@ (%@)", (uint8_t *)&v24, 0x20u);
        }
        long long v19 = [v7 uuid];
        [(HMDHomeManager *)self _teardownRemoteAccessForHome:v19];

        __int16 v20 = [v7 uuid];
        [(HMDHomeManager *)self _electRemoteAccessPeerForHome:v20];
      }
    }
  }
  else
  {
    id v21 = (void *)MEMORY[0x1D9452090]();
    id v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      uint64_t v23 = HMFGetLogIdentifier();
      int v24 = 138543362;
      long long v25 = v23;
      _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_INFO, "%{public}@Receive notification that remote access was torn down for an unknown home, re-checking if we need to spin up remote access for any of our homes", (uint8_t *)&v24, 0xCu);
    }
    [(HMDHomeManager *)self _checkForRemotePeers];
  }
}

- (void)_electCompanionForRemoteAccess:(id)a3
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self _homeWithUUID:v4];
  if (v5)
  {
    uint64_t v6 = [(HMDHomeManager *)self associatedRemotePeers];
    id v7 = [v6 objectForKeyedSubscript:v4];

    if ([v7 count])
    {
      id v8 = [v7 anyObject];
      char v9 = +[HMDDevice deviceWithDestination:v8];
      int v10 = [(HMDHomeManager *)self messageDispatcher];
      [v10 setCompanionDevice:v9 forHome:v5];
    }
    else
    {
      id v14 = (void *)MEMORY[0x1D9452090]();
      uint64_t v15 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        uint64_t v16 = HMFGetLogIdentifier();
        int v17 = 138543618;
        id v18 = v16;
        __int16 v19 = 2112;
        id v20 = v4;
        _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@There are no remote peers for this home: %@", (uint8_t *)&v17, 0x16u);
      }
      [(HMDHomeManager *)self _teardownRemoteAccessForHomeThroughCompanion:v4];
    }
  }
  else
  {
    id v11 = (void *)MEMORY[0x1D9452090]();
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = HMFGetLogIdentifier();
      int v17 = 138543618;
      id v18 = v13;
      __int16 v19 = 2112;
      id v20 = v4;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Home with UUID not found: %@", (uint8_t *)&v17, 0x16u);
    }
  }
}

- (void)_electRemoteAccessDeviceForHome:(id)a3 retryCount:(unint64_t)a4
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  id v48 = a3;
  id v4 = -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:");
  id v57 = v4;
  if (v4)
  {
    if ([v4 isResidentSupported])
    {
      uint64_t v5 = (void *)MEMORY[0x1D9452090]();
      uint64_t v6 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        id v7 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        *(void *)&uint8_t buf[4] = v7;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v48;
        _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Skipping electing remote access for home, %@, with a resident device", buf, 0x16u);
      }
    }
    else
    {
      id v8 = [(HMDHomeManager *)self associatedRemotePeers];
      id v47 = [v8 objectForKeyedSubscript:v48];

      if ([v47 count])
      {
        char v9 = [(HMDHomeManager *)self pendingRemoteSessions];
        uint64_t v46 = [v9 allValues];

        if ([v46 containsObject:v48])
        {
          int v10 = (void *)MEMORY[0x1D9452090]();
          id v11 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            id v12 = HMFGetLogIdentifier();
            uint64_t v13 = [v48 UUIDString];
            *(_DWORD *)long long buf = 138543618;
            *(void *)&uint8_t buf[4] = v12;
            *(_WORD *)&unsigned char buf[12] = 2112;
            *(void *)&buf[14] = v13;
            _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@We have a pending election for home: %@, dropping this request", buf, 0x16u);
          }
        }
        else
        {
          id v14 = [(HMDHomeManager *)self identifiersOfAccessoriesForHome:v57];
          id v49 = [v14 allObjects];

          id v53 = [MEMORY[0x1E4F29128] UUID];
          uint64_t v15 = [(HMDHomeManager *)self pendingRemoteSessions];
          [v15 setObject:v48 forKeyedSubscript:v53];

          uint64_t v16 = (void *)MEMORY[0x1D9452090]();
          int v17 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            id v18 = HMFGetLogIdentifier();
            __int16 v19 = [v53 UUIDString];
            *(_DWORD *)long long buf = 138544130;
            *(void *)&uint8_t buf[4] = v18;
            *(_WORD *)&unsigned char buf[12] = 2112;
            *(void *)&buf[14] = v57;
            *(_WORD *)&buf[22] = 2112;
            BOOL v99 = v19;
            LOWORD(v100) = 2048;
            *(void *)((char *)&v100 + 2) = [v47 count];
            _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Spinning up remote access for home, %@, for session %@, pinging total of %lu peers", buf, 0x2Au);
          }
          v84[0] = 0;
          v84[1] = v84;
          v84[2] = 0x2020000000;
          char v85 = 0;
          *(void *)long long buf = 0;
          *(void *)&buf[8] = buf;
          *(void *)&buf[16] = 0x3032000000;
          BOOL v99 = __Block_byref_object_copy__170059;
          *(void *)&long long v100 = __Block_byref_object_dispose__170060;
          *((void *)&v100 + 1) = 0;
          v82[0] = 0;
          v82[1] = v82;
          v82[2] = 0x3032000000;
          v82[3] = __Block_byref_object_copy__170059;
          v82[4] = __Block_byref_object_dispose__170060;
          id v83 = 0;
          group = dispatch_group_create();
          long long v78 = 0u;
          long long v79 = 0u;
          long long v80 = 0u;
          long long v81 = 0u;
          id obj = v47;
          uint64_t v20 = [obj countByEnumeratingWithState:&v78 objects:v97 count:16];
          if (v20)
          {
            int v51 = 0;
            uint64_t v56 = *(void *)v79;
            do
            {
              for (uint64_t i = 0; i != v20; ++i)
              {
                if (*(void *)v79 != v56) {
                  objc_enumerationMutation(obj);
                }
                uint64_t v22 = *(void *)(*((void *)&v78 + 1) + 8 * i);
                uint64_t v23 = [v57 users];
                int v24 = objc_msgSend(v23, "hmf_firstObjectWithValue:forKeyPath:", v22, @"userID");

                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  id v25 = v24;
                  if ([v25 configurationState] == 2)
                  {
                    long long v90 = @"kRequestedCapabilitiesKey";
                    long long v88 = @"kHomedVersionKey";
                    id v26 = (id)homedVersion;
                    id v89 = v26;
                    BOOL v27 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v89 forKeys:&v88 count:1];
                    long long v91 = v27;
                    __int16 v28 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v91 forKeys:&v90 count:1];

                    v86[0] = @"kHomeUUID";
                    id v29 = [v57 uuid];
                    uint64_t v30 = [v29 UUIDString];
                    v87[0] = v30;
                    v87[1] = v49;
                    v86[1] = @"kAccessoryIdentitiesKey";
                    v86[2] = @"kRemoteSessionIdentifierKey";
                    __int16 v31 = [v53 UUIDString];
                    v87[2] = v31;
                    uint64_t v32 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v87 forKeys:v86 count:3];

                    __int16 v33 = [MEMORY[0x1E4F65480] internalMessageWithName:@"kAreYouAtHomeRequestKey" messagePayload:v32];
                    dispatch_group_enter(group);
                    objc_initWeak((id *)location, self);
                    id v34 = [(HMDHomeManager *)self workQueue];
                    v68[0] = MEMORY[0x1E4F143A8];
                    v68[1] = 3221225472;
                    v68[2] = __61__HMDHomeManager__electRemoteAccessDeviceForHome_retryCount___block_invoke;
                    v68[3] = &unk_1E6A16818;
                    v68[4] = self;
                    id v35 = v33;
                    id v69 = v35;
                    uint64_t v70 = v22;
                    objc_copyWeak(v77, (id *)location);
                    id v71 = v57;
                    __int16 v74 = buf;
                    id v75 = v82;
                    id v36 = v53;
                    v77[1] = (id)a4;
                    id v72 = v36;
                    uint64_t v76 = v84;
                    __int16 v73 = group;
                    [(HMDHomeManager *)self electDeviceForUser:v22 destination:v22 deviceCapabilities:v28 queue:v34 completionHandler:v68];

                    objc_destroyWeak(v77);
                    objc_destroyWeak((id *)location);
                  }
                  else
                  {
                    id v40 = (void *)MEMORY[0x1D9452090]();
                    HMFGetOSLogHandle();
                    long long v41 = (id)objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
                    {
                      HMFGetLogIdentifier();
                      id v42 = (id)objc_claimAutoreleasedReturnValue();
                      id v43 = [v25 displayName];
                      *(_DWORD *)id location = 138543618;
                      *(void *)&location[4] = v42;
                      __int16 v93 = 2112;
                      long long v94 = v43;
                      _os_log_impl(&dword_1D49D5000, v41, OS_LOG_TYPE_INFO, "%{public}@Skipping resident %@ since it is disabled", location, 0x16u);
                    }
                    ++v51;
                  }
                }
                else
                {
                  uint64_t v37 = (void *)MEMORY[0x1D9452090]();
                  HMFGetOSLogHandle();
                  long long v38 = (id)objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
                  {
                    id v39 = HMFGetLogIdentifier();
                    *(_DWORD *)id location = 138543874;
                    *(void *)&location[4] = v39;
                    __int16 v93 = 2112;
                    long long v94 = v24;
                    __int16 v95 = 2112;
                    uint64_t v96 = v22;
                    _os_log_impl(&dword_1D49D5000, v38, OS_LOG_TYPE_ERROR, "%{public}@Found user %@ when looking for a resident user if userID %@", location, 0x20u);
                  }
                }
              }
              uint64_t v20 = [obj countByEnumeratingWithState:&v78 objects:v97 count:16];
            }
            while (v20);
          }
          else
          {
            int v51 = 0;
          }

          uint64_t v44 = [(HMDHomeManager *)self workQueue];
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 3221225472;
          block[2] = __61__HMDHomeManager__electRemoteAccessDeviceForHome_retryCount___block_invoke_1308;
          block[3] = &unk_1E6A16840;
          id v59 = v53;
          uint64_t v60 = self;
          int v67 = v51;
          id v61 = obj;
          id v62 = v48;
          uint64_t v64 = buf;
          id v63 = v57;
          uint64_t v65 = v84;
          unint64_t v66 = a4;
          id v45 = v53;
          dispatch_group_notify(group, v44, block);

          _Block_object_dispose(v82, 8);
          _Block_object_dispose(buf, 8);

          _Block_object_dispose(v84, 8);
        }
      }
    }
    id v4 = v57;
  }
}

void __61__HMDHomeManager__electRemoteAccessDeviceForHome_retryCount___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v7)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
    if (WeakRetained)
    {
      id v11 = (void *)MEMORY[0x1D9452090]();
      id v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        long long v38 = v13;
        _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Failed to elect device for remote session", buf, 0xCu);
      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
  }
  else
  {
    id v14 = [*(id *)(a1 + 32) messageDispatcher];
    uint64_t v25 = *(void *)(a1 + 40);
    uint64_t v15 = [*(id *)(a1 + 32) uuid];
    uint64_t v24 = *(void *)(a1 + 48);
    uint64_t v16 = [v8 destination];
    int v17 = [*(id *)(a1 + 32) workQueue];
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    void v26[2] = __61__HMDHomeManager__electRemoteAccessDeviceForHome_retryCount___block_invoke_2;
    v26[3] = &unk_1E6A167F0;
    objc_copyWeak(v36, (id *)(a1 + 104));
    id v18 = v8;
    uint64_t v19 = *(void *)(a1 + 32);
    id v27 = v18;
    uint64_t v28 = v19;
    id v20 = *(id *)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 48);
    id v29 = v20;
    uint64_t v30 = v21;
    id v31 = v9;
    long long v34 = *(_OWORD *)(a1 + 80);
    id v22 = *(id *)(a1 + 64);
    v36[1] = *(id *)(a1 + 112);
    uint64_t v23 = *(void *)(a1 + 96);
    id v32 = v22;
    uint64_t v35 = v23;
    id v33 = *(id *)(a1 + 72);
    [v14 sendSecureMessage:v25 target:v15 userID:v24 destination:v16 responseQueue:v17 responseHandler:v26];

    objc_destroyWeak(v36);
  }
}

void __61__HMDHomeManager__electRemoteAccessDeviceForHome_retryCount___block_invoke_1308(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    id v4 = HMFGetLogIdentifier();
    uint64_t v5 = [*(id *)(a1 + 32) UUIDString];
    int v26 = 138543618;
    id v27 = v4;
    __int16 v28 = 2112;
    id v29 = v5;
    _os_log_impl(&dword_1D49D5000, v3, OS_LOG_TYPE_INFO, "%{public}@Remote access election completed for session %@", (uint8_t *)&v26, 0x16u);
  }
  uint64_t v6 = [*(id *)(a1 + 40) pendingRemoteSessions];
  [v6 removeObjectForKey:*(void *)(a1 + 32)];

  uint64_t v7 = *(int *)(a1 + 96);
  if ([*(id *)(a1 + 48) count] == v7)
  {
    [*(id *)(a1 + 40) _teardownRemoteAccessForHome:*(void *)(a1 + 56)];
    return;
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40))
  {
    id v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v10 = HMFGetLogIdentifier();
      id v11 = [*(id *)(a1 + 64) uuid];
      id v12 = [v11 UUIDString];
      uint64_t v13 = [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) userID];
      int v26 = 138543874;
      id v27 = v10;
      __int16 v28 = 2112;
      id v29 = v12;
      __int16 v30 = 2112;
      uint64_t v31 = (uint64_t)v13;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Setting up remote access for home, %@, with resident %@", (uint8_t *)&v26, 0x20u);
    }
    id v14 = [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) userID];
    uint64_t v15 = +[HMDDevice deviceWithDestination:v14];

    uint64_t v16 = [*(id *)(a1 + 40) messageDispatcher];
    [v16 setRemoteAccessDevice:v15 forHome:*(void *)(a1 + 64)];

LABEL_9:
    return;
  }
  int v17 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
  id v18 = (void *)MEMORY[0x1D9452090]();
  uint64_t v19 = HMFGetOSLogHandle();
  BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_INFO);
  if (!v17)
  {
    if (v20)
    {
      uint64_t v24 = HMFGetLogIdentifier();
      uint64_t v25 = [*(id *)(a1 + 64) uuid];
      int v26 = 138543618;
      id v27 = v24;
      __int16 v28 = 2112;
      id v29 = v25;
      _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_INFO, "%{public}@Not setting up remote access for home, %@, as no available residents were found", (uint8_t *)&v26, 0x16u);
    }
    uint64_t v15 = [*(id *)(a1 + 40) messageDispatcher];
    [v15 setRemoteAccessDevice:0 forHome:*(void *)(a1 + 64)];
    goto LABEL_9;
  }
  if (v20)
  {
    uint64_t v21 = HMFGetLogIdentifier();
    id v22 = [*(id *)(a1 + 56) UUIDString];
    uint64_t v23 = *(void *)(a1 + 88) + 1;
    int v26 = 138543874;
    id v27 = v21;
    __int16 v28 = 2112;
    id v29 = v22;
    __int16 v30 = 2048;
    uint64_t v31 = v23;
    _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_INFO, "%{public}@Failed to setup remote session for home with UUID %@, retry attempt %ld", (uint8_t *)&v26, 0x20u);
  }
  [*(id *)(a1 + 40) _electRemoteAccessPeerForHome:*(void *)(a1 + 56) retryCount:*(void *)(a1 + 88) + 1];
}

void __61__HMDHomeManager__electRemoteAccessDeviceForHome_retryCount___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 112));
  if (WeakRetained)
  {
    if (!v5 && v6)
    {
      int v8 = objc_msgSend(v6, "hmf_BOOLForKey:", @"kAtHomeStateKey");
      uint64_t v9 = objc_msgSend(v6, "hmf_UUIDForKey:", @"kRemoteSessionIdentifierKey");
      int v10 = (void *)v9;
      if (!v8 || !v9)
      {
        id v36 = (void *)MEMORY[0x1D9452090]();
        uint64_t v37 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          long long v38 = HMFGetLogIdentifier();
          uint64_t v39 = *(void **)(a1 + 72);
          *(_DWORD *)long long buf = 138543618;
          id v55 = v38;
          __int16 v56 = 2112;
          id v57 = v39;
          _os_log_impl(&dword_1D49D5000, v37, OS_LOG_TYPE_INFO, "%{public}@Received response that %@ is not at home", buf, 0x16u);
        }
        goto LABEL_44;
      }
      id v11 = [*(id *)(a1 + 32) destination];
      id v12 = [WeakRetained pendingRemoteSessions];
      uint64_t v13 = [v12 objectForKeyedSubscript:v10];

      if (!v13)
      {
        id v40 = (void *)MEMORY[0x1D9452090]();
        long long v41 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v43 = id v42 = v11;
          *(_DWORD *)long long buf = 138543618;
          id v55 = v43;
          __int16 v56 = 2112;
          id v57 = v42;
          _os_log_impl(&dword_1D49D5000, v41, OS_LOG_TYPE_INFO, "%{public}@Received response that %@ is at home, dropping setting up remote access since we tore the session down", buf, 0x16u);

          id v11 = v42;
        }

        goto LABEL_43;
      }
      id v14 = *(void **)(a1 + 40);
      uint64_t v15 = [*(id *)(a1 + 48) uuid];
      uint64_t v16 = [v14 _homeWithUUID:v15];

      int v17 = [v16 users];
      id v18 = objc_msgSend(v17, "hmf_firstObjectWithValue:forKeyPath:", *(void *)(a1 + 56), @"userID");

      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      id v20 = v19;

      if (!v20 || [v20 configurationState] != 2)
      {
LABEL_42:

LABEL_43:
LABEL_44:

        goto LABEL_45;
      }
      context = (void *)MEMORY[0x1D9452090]();
      uint64_t v21 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v48 = v16;
        v23 = id v22 = v11;
        *(_DWORD *)long long buf = 138543618;
        id v55 = v23;
        __int16 v56 = 2112;
        id v57 = v22;
        _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@Received response that %@ is at home", buf, 0x16u);

        id v11 = v22;
        uint64_t v16 = v48;
      }

      uint64_t v24 = [*(id *)(a1 + 64) objectForKeyedSubscript:@"kHomedVersionKey"];
      if (v24) {
        uint64_t v25 = (void *)v24;
      }
      else {
        uint64_t v25 = &unk_1F2DCB988;
      }
      uint64_t v26 = *(void *)(*(void *)(a1 + 88) + 8);
      uint64_t v28 = *(void *)(v26 + 40);
      id v27 = (id *)(v26 + 40);
      if (v28)
      {
        id v29 = *(void **)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
        if (!v29 || [v29 compare:v25] != -1)
        {
          contexta = (void *)MEMORY[0x1D9452090]();
          __int16 v30 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v31 = id v49 = v11;
            *(_DWORD *)long long buf = 138543874;
            id v55 = v31;
            __int16 v56 = 2112;
            id v57 = v49;
            __int16 v58 = 2112;
            id v59 = v25;
            _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_INFO, "%{public}@Dropping resident %@ (%@) as a resident with a higher homed version was found", buf, 0x20u);

            id v11 = v49;
          }

          goto LABEL_41;
        }
        id v47 = (void *)MEMORY[0x1D9452090]();
        int contextb = HMFGetOSLogHandle();
        if (os_log_type_enabled(contextb, OS_LOG_TYPE_INFO))
        {
          uint64_t v46 = HMFGetLogIdentifier();
          [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) userID];
          v44 = id v50 = v11;
          uint64_t v45 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
          *(_DWORD *)long long buf = 138544386;
          id v55 = v46;
          __int16 v56 = 2112;
          id v57 = v50;
          __int16 v58 = 2112;
          id v59 = v25;
          __int16 v60 = 2112;
          id v61 = v44;
          __int16 v62 = 2112;
          uint64_t v63 = v45;
          _os_log_impl(&dword_1D49D5000, contextb, OS_LOG_TYPE_INFO, "%{public}@Preferring %@ (%@) over %@ (%@) due to higher homed version", buf, 0x34u);

          id v11 = v50;
        }

        id v27 = (id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
      }
      objc_storeStrong(v27, v19);
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40), v25);
LABEL_41:

      goto LABEL_42;
    }
    uint64_t v32 = (void *)MEMORY[0x1D9452090]();
    id v33 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      long long v34 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v55 = v34;
      _os_log_impl(&dword_1D49D5000, v33, OS_LOG_TYPE_INFO, "%{public}@Failed to send secure message to elect device for remote session", buf, 0xCu);
    }
    if (v5)
    {
      int v10 = [v5 domain];
      if (![v10 isEqualToString:*MEMORY[0x1E4F28760]]
        || [v5 code] != -6722 && objc_msgSend(v5, "code") != -6752)
      {
        goto LABEL_44;
      }
      unint64_t v35 = *(void *)(a1 + 120);

      if (v35 <= 1) {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) = 1;
      }
    }
  }
LABEL_45:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 80));
}

- (void)_electRemoteAccessPeerForHome:(id)a3 retryCount:(unint64_t)a4
{
  id v6 = a3;
  if (isWatch()) {
    [(HMDHomeManager *)self _electCompanionForRemoteAccess:v6];
  }
  else {
    [(HMDHomeManager *)self _electRemoteAccessDeviceForHome:v6 retryCount:a4];
  }
}

- (void)_electRemoteAccessPeerForHome:(id)a3
{
}

- (void)electRemoteAccessPeerForHome:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __47__HMDHomeManager_electRemoteAccessPeerForHome___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

uint64_t __47__HMDHomeManager_electRemoteAccessPeerForHome___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _electRemoteAccessPeerForHome:*(void *)(a1 + 40)];
}

- (void)_electRemoteGatewayForHomesAfterReachabilityChanges
{
  id v2 = self;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v3 = (void *)MEMORY[0x1D9452090](self, a2);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    uint64_t v28 = v5;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Reachability changed from not reachable to reachable, checking remote access setup for all homes", buf, 0xCu);
  }
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id obj = [(HMDHomeManager *)v2 homes];
  uint64_t v6 = [obj countByEnumeratingWithState:&v23 objects:v33 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v24;
    uint64_t v21 = v2;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v24 != v8) {
          objc_enumerationMutation(obj);
        }
        int v10 = *(void **)(*((void *)&v23 + 1) + 8 * i);
        id v11 = (void *)MEMORY[0x1D9452090]();
        id v12 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          uint64_t v13 = HMFGetLogIdentifier();
          id v14 = [v10 name];
          uint64_t v15 = [v10 uuid];
          [v15 UUIDString];
          uint64_t v16 = v7;
          v18 = uint64_t v17 = v8;
          *(_DWORD *)long long buf = 138543874;
          uint64_t v28 = v13;
          __int16 v29 = 2112;
          __int16 v30 = v14;
          __int16 v31 = 2112;
          uint64_t v32 = v18;
          _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Triggering election of resident device for remote access for home %@ (%@)", buf, 0x20u);

          uint64_t v8 = v17;
          uint64_t v7 = v16;
          id v2 = v21;
        }
        uint64_t v19 = [v10 uuid];
        [(HMDHomeManager *)v2 _teardownRemoteAccessForHome:v19];

        id v20 = [v10 uuid];
        [(HMDHomeManager *)v2 _electRemoteAccessPeerForHome:v20];
      }
      uint64_t v7 = [obj countByEnumeratingWithState:&v23 objects:v33 count:16];
    }
    while (v7);
  }
}

- (void)_updateHomesAboutNetworkConnectivity:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v5 = [(HMDHomeManager *)self homes];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v11;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(v5);
        }
        objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * v9++), "updateNetworkConnectivity:companionReachable:", v3, -[HMDHomeManager companionReachable](self, "companionReachable"));
      }
      while (v7 != v9);
      uint64_t v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v7);
  }
}

- (void)_findRemotePeerContainingAccessories:(id)a3 forHome:(id)a4
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  id v34 = a3;
  id v6 = a4;
  if (!isAppleTV())
  {
    id v36 = v6;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    id obj = [(HMDHomeManager *)self unassociatedRemotePeers];
    uint64_t v7 = [obj countByEnumeratingWithState:&v42 objects:v54 count:16];
    if (v7)
    {
      uint64_t v37 = *(void *)v43;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v43 != v37) {
            objc_enumerationMutation(obj);
          }
          uint64_t v9 = *(void **)(*((void *)&v42 + 1) + 8 * i);
          long long v10 = [v9 capabilities];
          char v11 = [v10 isResidentCapable];

          if ((v11 & 1) == 0)
          {
            long long v12 = [(HMDHomeManager *)self pendingResidentSetupSessions];
            long long v13 = [v9 remoteDestinationString];
            int v14 = [v12 containsObject:v13];

            if (v14)
            {
              uint64_t v15 = (void *)MEMORY[0x1D9452090]();
              uint64_t v16 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
              {
                uint64_t v17 = HMFGetLogIdentifier();
                id v18 = [v36 uuid];
                uint64_t v19 = [v18 UUIDString];
                *(_DWORD *)long long buf = 138543874;
                id v49 = v17;
                __int16 v50 = 2112;
                int v51 = v9;
                __int16 v52 = 2112;
                id v53 = v19;
                _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, "%{public}@We have a pending request to look for unpaired accessories to device, %@, for home: %@, dropping this request", buf, 0x20u);
              }
            }
            else
            {
              id v20 = [(HMDHomeManager *)self pendingResidentSetupSessions];
              uint64_t v21 = [v9 remoteDestinationString];
              [v20 addObject:v21];

              v46[0] = @"kAccessoryIdentitiesKey";
              v46[1] = @"kHomeUUID";
              v47[0] = v34;
              id v22 = [v36 uuid];
              long long v23 = [v22 UUIDString];
              v47[1] = v23;
              long long v24 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v47 forKeys:v46 count:2];

              long long v25 = [HMDRemoteDeviceMessageDestination alloc];
              long long v26 = [(HMDHomeManager *)self uuid];
              id v27 = [(HMDRemoteDeviceMessageDestination *)v25 initWithTarget:v26 device:v9];

              uint64_t v28 = (void *)MEMORY[0x1D9452090]();
              __int16 v29 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
              {
                __int16 v30 = HMFGetLogIdentifier();
                __int16 v31 = [v36 uuid];
                *(_DWORD *)long long buf = 138543874;
                id v49 = v30;
                __int16 v50 = 2112;
                int v51 = v9;
                __int16 v52 = 2112;
                id v53 = v31;
                _os_log_impl(&dword_1D49D5000, v29, OS_LOG_TYPE_INFO, "%{public}@Requesting remote gateway, %@, to look for accessories in home %@", buf, 0x20u);
              }
              uint64_t v32 = [MEMORY[0x1E4F65480] internalMessageWithName:@"kDoYouSeeUnpairedAccessoriesKey" destination:v27 messagePayload:v24];
              objc_initWeak((id *)buf, self);
              v38[0] = MEMORY[0x1E4F143A8];
              v38[1] = 3221225472;
              v38[2] = __63__HMDHomeManager__findRemotePeerContainingAccessories_forHome___block_invoke;
              v38[3] = &unk_1E6A19048;
              objc_copyWeak(&v41, (id *)buf);
              id v39 = v36;
              id v40 = v9;
              [v32 setResponseHandler:v38];
              id v33 = [(HMDHomeManager *)self messageDispatcher];
              [v33 sendMessage:v32 completionHandler:0];

              objc_destroyWeak(&v41);
              objc_destroyWeak((id *)buf);
            }
          }
        }
        uint64_t v7 = [obj countByEnumeratingWithState:&v42 objects:v54 count:16];
      }
      while (v7);
    }

    id v6 = v36;
  }
}

void __63__HMDHomeManager__findRemotePeerContainingAccessories_forHome___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v8 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v9 = [WeakRetained workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __63__HMDHomeManager__findRemotePeerContainingAccessories_forHome___block_invoke_2;
    block[3] = &unk_1E6A190C0;
    id v13 = v5;
    id v14 = v6;
    id v10 = *(id *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    id v15 = v10;
    uint64_t v16 = v11;
    id v17 = v8;
    dispatch_async(v9, block);
  }
}

void __63__HMDHomeManager__findRemotePeerContainingAccessories_forHome___block_invoke_2(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32) || (uint64_t v7 = *(void **)(a1 + 40)) == 0)
  {
    id v2 = (void *)MEMORY[0x1D9452090]();
    BOOL v3 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      id v4 = HMFGetLogIdentifier();
      uint64_t v5 = *(void *)(a1 + 56);
      uint64_t v6 = *(void *)(a1 + 32);
      int v14 = 138543874;
      id v15 = v4;
      __int16 v16 = 2112;
      uint64_t v17 = v5;
      __int16 v18 = 2112;
      uint64_t v19 = v6;
      _os_log_impl(&dword_1D49D5000, v3, OS_LOG_TYPE_INFO, "%{public}@Remote peer, %@, failed to look for accessories with error:%@", (uint8_t *)&v14, 0x20u);
    }
  }
  else
  {
    int v8 = objc_msgSend(v7, "hmf_BOOLForKey:", @"kAtHomeStateKey");
    uint64_t v9 = objc_msgSend(*(id *)(a1 + 40), "hmf_stringForKey:", @"kDeviceNameKey");
    id v10 = (void *)v9;
    if (v8) {
      BOOL v11 = v9 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11) {
      [*(id *)(a1 + 48) addUnconfiguredResidentDevice:*(void *)(a1 + 56)];
    }
  }
  long long v12 = [*(id *)(a1 + 64) pendingResidentSetupSessions];
  id v13 = [*(id *)(a1 + 56) remoteDestinationString];
  [v12 removeObject:v13];
}

- (void)atHomeLevelChanged:(int64_t)a3 formerLevel:(int64_t)a4 home:(id)a5
{
  uint64_t v6 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __54__HMDHomeManager_atHomeLevelChanged_formerLevel_home___block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v6, block);
}

uint64_t __54__HMDHomeManager_atHomeLevelChanged_formerLevel_home___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateCurrentHomeIfNecessary];
}

- (void)_accessoriesAreLocallyReachableOnTransientDevice:(BOOL)a3 forHome:(id)a4
{
  BOOL v4 = a3;
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v6 = a4;
  uint64_t v7 = (void *)MEMORY[0x1D9452090]();
  int v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = HMFGetLogIdentifier();
    if (v4) {
      id v10 = "";
    }
    else {
      id v10 = "not ";
    }
    BOOL v11 = [v6 UUIDString];
    long long v12 = [(HMDHomeManager *)self unassociatedRemotePeers];
    int v21 = 138544130;
    id v22 = v9;
    __int16 v23 = 2080;
    long long v24 = v10;
    __int16 v25 = 2112;
    long long v26 = v11;
    __int16 v27 = 2048;
    uint64_t v28 = [v12 count];
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Accessories are %slocally reachable for home %@, peers %lu", (uint8_t *)&v21, 0x2Au);
  }
  if (v4 && !isWatch())
  {
    id v13 = [(HMDHomeManager *)self _homeWithUUID:v6];
    [v13 isOwnerUser];
    BOOL v14 = +[HMDHomeManager isThisDeviceAdminOfHome:v13];
    if (v13)
    {
      BOOL v15 = v14;
      __int16 v16 = [(HMDHomeManager *)self unassociatedRemotePeers];
      if ([v16 count]) {
        BOOL v17 = v15;
      }
      else {
        BOOL v17 = 0;
      }
      if (!v17 || ![v13 allowsRemoteAccess]) {
        goto LABEL_17;
      }
      __int16 v18 = [v13 currentUser];
      int v19 = [v18 isRemoteAccessAllowed];

      if (v19)
      {
        uint64_t v20 = [(HMDHomeManager *)self identifiersOfAccessoriesForHome:v13];
        __int16 v16 = [v20 allObjects];

        if ([v16 count]) {
          [(HMDHomeManager *)self _findRemotePeerContainingAccessories:v16 forHome:v13];
        }
LABEL_17:
      }
    }
  }
}

- (void)_removeFromAssociatedPeers:(id)a3 home:(id)a4
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  [(HMDHomeManager *)self _remotePeers];
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v9 = [v8 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v21;
    while (2)
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v21 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        BOOL v14 = objc_msgSend(v13, "remoteDestinationString", (void)v20);
        int v15 = [v14 isEqualToString:v6];

        if (v15)
        {
          __int16 v16 = [(HMDHomeManager *)self unassociatedRemotePeers];
          [v16 addObject:v13];

          if (v7)
          {
            BOOL v17 = [(HMDHomeManager *)self associatedRemotePeers];
            __int16 v18 = [v7 uuid];
            int v19 = [v17 objectForKeyedSubscript:v18];

            if (v19) {
              [v19 removeObject:v6];
            }
          }
          goto LABEL_14;
        }
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v20 objects:v24 count:16];
      if (v10) {
        continue;
      }
      break;
    }
  }
LABEL_14:
}

- (void)_removeFromUnassociatedPeers:(id)a3 home:(id)a4
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHomeManager *)self _remotePeers];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v24 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = *(void **)(*((void *)&v23 + 1) + 8 * i);
        BOOL v14 = [v13 remoteDestinationString];
        int v15 = [v14 isEqualToString:v6];

        if (v15)
        {
          __int16 v16 = [(HMDHomeManager *)self unassociatedRemotePeers];
          [v16 removeObject:v13];

          BOOL v17 = [v13 remoteDestinationString];
          [v7 removeUnconfiguredResidentDeviceWithUserID:v17];

          if (v7)
          {
            __int16 v18 = [(HMDHomeManager *)self associatedRemotePeers];
            int v19 = [v7 uuid];
            long long v20 = [v18 objectForKeyedSubscript:v19];

            if (!v20)
            {
              long long v20 = [MEMORY[0x1E4F1CA80] set];
              long long v21 = [(HMDHomeManager *)self associatedRemotePeers];
              long long v22 = [v7 uuid];
              [v21 setObject:v20 forKeyedSubscript:v22];
            }
            [v20 addObject:v6];
          }
        }
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v23 objects:v27 count:16];
    }
    while (v10);
  }
}

- (void)removeFromUnassociatedPeers:(id)a3 home:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __51__HMDHomeManager_removeFromUnassociatedPeers_home___block_invoke;
  block[3] = &unk_1E6A19668;
  void block[4] = self;
  id v12 = v6;
  id v13 = v7;
  id v9 = v7;
  id v10 = v6;
  dispatch_async(v8, block);
}

uint64_t __51__HMDHomeManager_removeFromUnassociatedPeers_home___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeFromUnassociatedPeers:*(void *)(a1 + 40) home:*(void *)(a1 + 48)];
}

- (void)_checkForRemotePeersAndRegisterForRemoteNotifications:(BOOL)a3
{
  BOOL v157 = a3;
  BOOL v3 = self;
  uint64_t v224 = *MEMORY[0x1E4F143B8];
  BOOL v4 = [(HMDHomeManager *)self unassociatedRemotePeers];
  [v4 removeAllObjects];

  uint64_t v5 = [(HMDHomeManager *)v3 associatedRemotePeers];
  [v5 removeAllObjects];

  if (isWatch()
    || ([(HMDHomeManager *)v3 appleAccountManager],
        id v6 = objc_claimAutoreleasedReturnValue(),
        [v6 account],
        id v7 = objc_claimAutoreleasedReturnValue(),
        v7,
        v6,
        v7))
  {
    v164 = [MEMORY[0x1E4F1CA48] array];
    long long v203 = 0u;
    long long v204 = 0u;
    long long v205 = 0u;
    long long v206 = 0u;
    id v8 = [(HMDHomeManager *)v3 homes];
    uint64_t v9 = [v8 countByEnumeratingWithState:&v203 objects:v223 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v204;
      do
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v204 != v11) {
            objc_enumerationMutation(v8);
          }
          id v13 = [*(id *)(*((void *)&v203 + 1) + 8 * i) users];
          [v164 addObjectsFromArray:v13];
        }
        uint64_t v10 = [v8 countByEnumeratingWithState:&v203 objects:v223 count:16];
      }
      while (v10);
    }

    BOOL v14 = [(HMDHomeManager *)v3 _remotePeers];
    int v15 = [MEMORY[0x1E4F65548] productInfo];
    uint64_t v16 = [v15 productClass];

    uint64_t v154 = v3;
    if (v16 == 1)
    {
      id v166 = v14;
      BOOL v17 = [(HMDHomeManager *)v3 watchManager];
      __int16 v18 = [v17 watches];

      int v19 = objc_msgSend(MEMORY[0x1E4F1CA80], "setWithCapacity:", objc_msgSend(v18, "count"));
      long long v199 = 0u;
      long long v200 = 0u;
      long long v201 = 0u;
      long long v202 = 0u;
      id v20 = v18;
      uint64_t v21 = [v20 countByEnumeratingWithState:&v199 objects:v222 count:16];
      if (v21)
      {
        uint64_t v22 = v21;
        uint64_t v23 = *(void *)v200;
        do
        {
          for (uint64_t j = 0; j != v22; ++j)
          {
            if (*(void *)v200 != v23) {
              objc_enumerationMutation(v20);
            }
            long long v25 = [*(id *)(*((void *)&v199 + 1) + 8 * j) remoteDestinationString];
            [v19 addObject:v25];
          }
          uint64_t v22 = [v20 countByEnumeratingWithState:&v199 objects:v222 count:16];
        }
        while (v22);
      }

      long long v197 = 0u;
      long long v198 = 0u;
      long long v195 = 0u;
      long long v196 = 0u;
      long long v26 = [(HMDHomeManager *)v3 homes];
      uint64_t v27 = [v26 countByEnumeratingWithState:&v195 objects:v221 count:16];
      if (v27)
      {
        uint64_t v28 = v27;
        uint64_t v29 = *(void *)v196;
        do
        {
          for (uint64_t k = 0; k != v28; ++k)
          {
            if (*(void *)v196 != v29) {
              objc_enumerationMutation(v26);
            }
            [*(id *)(*((void *)&v195 + 1) + 8 * k) auditUsersForNotifications:v19];
          }
          uint64_t v28 = [v26 countByEnumeratingWithState:&v195 objects:v221 count:16];
        }
        while (v28);
      }

      long long v193 = 0u;
      long long v194 = 0u;
      long long v191 = 0u;
      long long v192 = 0u;
      __int16 v31 = [(HMDHomeManager *)v3 fullSyncedWatchPeers];
      uint64_t v32 = (void *)[v31 copy];

      uint64_t v33 = [v32 countByEnumeratingWithState:&v191 objects:v220 count:16];
      if (v33)
      {
        uint64_t v34 = v33;
        uint64_t v35 = *(void *)v192;
        do
        {
          for (uint64_t m = 0; m != v34; ++m)
          {
            if (*(void *)v192 != v35) {
              objc_enumerationMutation(v32);
            }
            uint64_t v37 = *(void **)(*((void *)&v191 + 1) + 8 * m);
            if (([v19 containsObject:v37] & 1) == 0)
            {
              long long v38 = (void *)MEMORY[0x1D9452090]();
              id v39 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
              {
                id v40 = HMFGetLogIdentifier();
                *(_DWORD *)long long buf = 138543618;
                v209 = v40;
                __int16 v210 = 2112;
                uint64_t v211 = (uint64_t)v37;
                _os_log_impl(&dword_1D49D5000, v39, OS_LOG_TYPE_INFO, "%{public}@Fully synced watch %@ is no more paired", buf, 0x16u);

                BOOL v3 = v154;
              }

              id v41 = [(HMDHomeManager *)v3 fullSyncedWatchPeers];
              [v41 removeObject:v37];
            }
          }
          uint64_t v34 = [v32 countByEnumeratingWithState:&v191 objects:v220 count:16];
        }
        while (v34);
      }

      BOOL v14 = v166;
    }
    v158 = [MEMORY[0x1E4F1CA80] set];
    long long v42 = (void *)MEMORY[0x1D9452090]();
    HMFGetOSLogHandle();
    long long v43 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      long long v44 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      v209 = v44;
      _os_log_impl(&dword_1D49D5000, v43, OS_LOG_TYPE_INFO, "%{public}@Checking for updated list of devices for remote access", buf, 0xCu);
    }
    long long v189 = 0u;
    long long v190 = 0u;
    long long v187 = 0u;
    long long v188 = 0u;
    id obj = v14;
    uint64_t v159 = [obj countByEnumeratingWithState:&v187 objects:v219 count:16];
    int v45 = 0;
    if (v159)
    {
      uint64_t v156 = *(void *)v188;
      do
      {
        for (uint64_t n = 0; n != v159; ++n)
        {
          if (*(void *)v188 != v156) {
            objc_enumerationMutation(obj);
          }
          id v47 = *(void **)(*((void *)&v187 + 1) + 8 * n);
          id v48 = [v47 remoteDestinationString];

          if (v48)
          {
            id v49 = [v47 remoteDestinationString];
            [v158 addObject:v49];
          }
          __int16 v50 = (void *)MEMORY[0x1D9452090]();
          HMFGetOSLogHandle();
          int v51 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
          {
            __int16 v52 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            v209 = v52;
            __int16 v210 = 2112;
            uint64_t v211 = (uint64_t)v47;
            _os_log_impl(&dword_1D49D5000, v51, OS_LOG_TYPE_INFO, "%{public}@Detected device: %@", buf, 0x16u);
          }
          id v53 = [v47 remoteDestinationString];
          objc_msgSend(v164, "hmf_firstObjectWithValue:forKeyPath:", v53, @"userID");
          id v54 = (id)objc_claimAutoreleasedReturnValue();

          if (isWatch())
          {
            uint64_t v155 = n;
            int v161 = v45;
            long long v185 = 0u;
            long long v186 = 0u;
            long long v183 = 0u;
            long long v184 = 0u;
            double v169 = [(HMDHomeManager *)v3 homes];
            uint64_t v55 = [v169 countByEnumeratingWithState:&v183 objects:v218 count:16];
            if (v55)
            {
              uint64_t v56 = v55;
              uint64_t v57 = *(void *)v184;
              do
              {
                uint64_t v58 = 0;
                id v59 = v54;
                id v167 = (id)v56;
                do
                {
                  if (*(void *)v184 != v57) {
                    objc_enumerationMutation(v169);
                  }
                  __int16 v60 = *(void **)(*((void *)&v183 + 1) + 8 * v58);
                  id v61 = [v60 users];
                  __int16 v62 = [v47 remoteDestinationString];
                  uint64_t v63 = objc_msgSend(v61, "hmf_firstObjectWithValue:forKeyPath:", v62, @"userID");

                  if (!v63)
                  {
                    uint64_t v64 = v47;
                    uint64_t v65 = [[HMDResidentUser alloc] initWithDevice:v47 home:v60 pairingIdentity:0 configurationState:2];
                    [(HMDUser *)v65 setHome:v60];
                    [v164 addObject:v65];
                    unint64_t v66 = (void *)MEMORY[0x1D9452090]([v60 addCompanionAsResidentUser:v65]);
                    int v67 = HMFGetOSLogHandle();
                    if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
                    {
                      id v68 = HMFGetLogIdentifier();
                      id v69 = [v60 name];
                      *(_DWORD *)long long buf = 138543618;
                      v209 = v68;
                      __int16 v210 = 2112;
                      uint64_t v211 = (uint64_t)v69;
                      _os_log_impl(&dword_1D49D5000, v67, OS_LOG_TYPE_INFO, "%{public}@Created and added a new resident user to home: %@ for watch", buf, 0x16u);
                    }

                    id v47 = v64;
                    uint64_t v56 = (uint64_t)v167;
                  }
                  id v54 = v63;

                  ++v58;
                  id v59 = v54;
                }
                while (v56 != v58);
                uint64_t v56 = [v169 countByEnumeratingWithState:&v183 objects:v218 count:16];
              }
              while (v56);
            }

            BOOL v3 = v154;
            uint64_t n = v155;
            int v45 = v161;
          }
          if (v54 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
          {
            id v70 = v54;
            if (([v70 updateWithDevice:v47] & 1) != 0 || !objc_msgSend(v70, "configurationState"))
            {
              [v70 setConfigurationState:2];
              int v45 = 1;
            }
            else
            {
              uint64_t v71 = n;
              long long v181 = 0u;
              long long v182 = 0u;
              long long v179 = 0u;
              long long v180 = 0u;
              id v72 = [(HMDHomeManager *)v3 homes];
              uint64_t v73 = [v72 countByEnumeratingWithState:&v179 objects:v217 count:16];
              if (v73)
              {
                uint64_t v74 = v73;
                uint64_t v75 = *(void *)v180;
                do
                {
                  for (iuint64_t i = 0; ii != v74; ++ii)
                  {
                    if (*(void *)v180 != v75) {
                      objc_enumerationMutation(v72);
                    }
                    uint64_t v77 = [*(id *)(*((void *)&v179 + 1) + 8 * ii) usersPendingUserManagementOperations];
                    if ([v77 containsObject:v70])
                    {
                      uint64_t v78 = [v70 configurationState];

                      if (v78 == 1)
                      {
                        [v70 setConfigurationState:2];
                        int v45 = 1;
                      }
                    }
                    else
                    {
                    }
                  }
                  uint64_t v74 = [v72 countByEnumeratingWithState:&v179 objects:v217 count:16];
                }
                while (v74);
              }

              BOOL v3 = v154;
              uint64_t n = v71;
            }
          }
          else
          {
            long long v79 = [(HMDHomeManager *)v3 unassociatedRemotePeers];
            [v79 addObject:v47];

            long long v80 = (void *)MEMORY[0x1D9452090]();
            long long v81 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
            {
              long long v82 = HMFGetLogIdentifier();
              *(_DWORD *)long long buf = 138543618;
              v209 = v82;
              __int16 v210 = 2112;
              uint64_t v211 = (uint64_t)v47;
              _os_log_impl(&dword_1D49D5000, v81, OS_LOG_TYPE_INFO, "%{public}@Adding remote peer, %@, to unassociated list", buf, 0x16u);
            }
          }
        }
        uint64_t v159 = [obj countByEnumeratingWithState:&v187 objects:v219 count:16];
      }
      while (v159);
    }

    id v83 = (void *)MEMORY[0x1D9452090]();
    HMFGetOSLogHandle();
    long long v84 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
    {
      char v85 = HMFGetLogIdentifier();
      long long v86 = [(HMDHomeManager *)v3 unassociatedRemotePeers];
      uint64_t v87 = [v86 count];
      *(_DWORD *)long long buf = 138543618;
      v209 = v85;
      __int16 v210 = 2048;
      uint64_t v211 = v87;
      _os_log_impl(&dword_1D49D5000, v84, OS_LOG_TYPE_INFO, "%{public}@Total unassociated peers %ld", buf, 0x16u);
    }
    long long v88 = [(HMDHomeManager *)v3 appleAccountManager];
    id v89 = [v88 device];
    long long v90 = [v89 identifier];

    uint64_t v152 = [MEMORY[0x1E4F1CA48] array];
    long long v175 = 0u;
    long long v176 = 0u;
    long long v177 = 0u;
    long long v178 = 0u;
    id v168 = v164;
    uint64_t v91 = [v168 countByEnumeratingWithState:&v175 objects:v216 count:16];
    if (v91)
    {
      uint64_t v93 = v91;
      uint64_t v94 = *(void *)v176;
      *(void *)&long long v92 = 138543362;
      long long v151 = v92;
      v163 = v90;
      uint64_t v160 = *(void *)v176;
      char v162 = v45;
      do
      {
        uint64_t v95 = 0;
        uint64_t v165 = v93;
        do
        {
          if (*(void *)v176 != v94) {
            objc_enumerationMutation(v168);
          }
          uint64_t v96 = *(void **)(*((void *)&v175 + 1) + 8 * v95);
          BOOL v97 = objc_msgSend(v90, "UUIDString", v151);
          BOOL v98 = [v96 pairingUsername];
          int v99 = [v97 isEqualToString:v98];

          if (!v99)
          {
            if (shouldLogPrivateInformation())
            {
              double v170 = [v96 userID];
            }
            else
            {
              uint64_t v104 = @"...";
              double v170 = @"...";
            }
            uint64_t v105 = [v96 home];
            uint64_t v106 = (void *)MEMORY[0x1D9452090]();
            HMFGetOSLogHandle();
            uint64_t v107 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v107, OS_LOG_TYPE_INFO))
            {
              uint64_t v108 = HMFGetLogIdentifier();
              uint64_t v109 = [v96 home];
              uint64_t v110 = [v109 name];
              [v96 isRemoteGateway];
              uint64_t v111 = HMFBooleanToString();
              *(_DWORD *)long long buf = 138544130;
              v209 = v108;
              __int16 v210 = 2112;
              uint64_t v211 = (uint64_t)v170;
              __int16 v212 = 2112;
              v213 = v110;
              __int16 v214 = 2112;
              uint64_t v215 = v111;
              _os_log_impl(&dword_1D49D5000, v107, OS_LOG_TYPE_INFO, "%{public}@Existing user: %@, for home: %@, isRemoteGateway: %@", buf, 0x2Au);

              uint64_t v94 = v160;
              uint64_t v93 = v165;

              long long v90 = v163;
            }

            if (![v96 isRemoteGateway]) {
              goto LABEL_126;
            }
            [v105 isOwnerUser];
            BOOL v112 = +[HMDHomeManager isThisDeviceAdminOfHome:v105]|| isWatch();
            uint64_t v113 = [v96 userID];
            int v114 = [v158 containsObject:v113];
            if ((v114 & 1) == 0 && !v112)
            {
              uint64_t v115 = [v96 userID];

              if (v115) {
                goto LABEL_107;
              }
LABEL_120:
              if (v112)
              {
                uint64_t v134 = (void *)MEMORY[0x1D9452090]();
                double v135 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v135, OS_LOG_TYPE_INFO))
                {
                  v136 = HMFGetLogIdentifier();
                  v137 = [v96 userID];
                  *(_DWORD *)long long buf = 138543618;
                  v209 = v136;
                  __int16 v210 = 2112;
                  uint64_t v211 = (uint64_t)v137;
                  _os_log_impl(&dword_1D49D5000, v135, OS_LOG_TYPE_INFO, "%{public}@Previous associated remote peer %@ has been removed", buf, 0x16u);

                  uint64_t v93 = v165;
                }

                v138 = (void *)MEMORY[0x1D9452090]([v152 addObject:v96]);
                v139 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v139, OS_LOG_TYPE_DEBUG))
                {
                  v140 = HMFGetLogIdentifier();
                  *(_DWORD *)long long buf = v151;
                  v209 = v140;
                  _os_log_impl(&dword_1D49D5000, v139, OS_LOG_TYPE_DEBUG, "%{public}@Remove resident device", buf, 0xCu);
                }
              }
LABEL_126:

              goto LABEL_127;
            }

            if (!v114) {
              goto LABEL_120;
            }
LABEL_107:
            uint64_t v116 = (void *)MEMORY[0x1D9452090]();
            HMFGetOSLogHandle();
            uint64_t v117 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v117, OS_LOG_TYPE_INFO))
            {
              uint64_t v118 = HMFGetLogIdentifier();
              uint64_t v119 = [v96 userID];
              uint64_t v120 = [v96 home];
              uint64_t v121 = [v120 name];
              *(_DWORD *)long long buf = 138543874;
              v209 = v118;
              __int16 v210 = 2112;
              uint64_t v211 = (uint64_t)v119;
              __int16 v212 = 2112;
              v213 = v121;
              _os_log_impl(&dword_1D49D5000, v117, OS_LOG_TYPE_INFO, "%{public}@Adding remote peer %@ for home %@", buf, 0x20u);

              BOOL v3 = v154;
              long long v90 = v163;

              uint64_t v94 = v160;
            }

            double v122 = [(HMDHomeManager *)v3 associatedRemotePeers];
            double v123 = [v105 uuid];
            uint64_t v124 = [v122 objectForKeyedSubscript:v123];

            if (!v124)
            {
              uint64_t v124 = [MEMORY[0x1E4F1CA80] set];
              v125 = [(HMDHomeManager *)v3 associatedRemotePeers];
              v126 = [v105 uuid];
              [v125 setObject:v124 forKeyedSubscript:v126];
            }
            v127 = [v96 userID];
            [v124 addObject:v127];

            id v128 = [v96 userID];
            if (([v158 containsObject:v128] | v112))
            {
LABEL_117:
            }
            else
            {
              objc_opt_class();
              char isKindOfClass = objc_opt_isKindOfClass();

              if (isKindOfClass)
              {
                id v128 = v96;
                if (![v128 configurationState])
                {
                  double v130 = (void *)MEMORY[0x1D9452090]();
                  char v131 = HMFGetOSLogHandle();
                  if (os_log_type_enabled(v131, OS_LOG_TYPE_INFO))
                  {
                    v132 = HMFGetLogIdentifier();
                    v133 = [v128 userID];
                    *(_DWORD *)long long buf = 138543618;
                    v209 = v132;
                    __int16 v210 = 2112;
                    uint64_t v211 = (uint64_t)v133;
                    _os_log_impl(&dword_1D49D5000, v131, OS_LOG_TYPE_INFO, "%{public}@[HMDHomeManager] Unknown configuration state, enabling '%@'", buf, 0x16u);

                    long long v90 = v163;
                    uint64_t v94 = v160;
                  }

                  [v128 setConfigurationState:2];
                }
                goto LABEL_117;
              }
            }

            uint64_t v93 = v165;
            goto LABEL_126;
          }
          long long v100 = (void *)MEMORY[0x1D9452090]();
          uint64_t v101 = v3;
          BOOL v102 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v102, OS_LOG_TYPE_INFO))
          {
            uint64_t v103 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            v209 = v103;
            __int16 v210 = 2112;
            uint64_t v211 = (uint64_t)v96;
            _os_log_impl(&dword_1D49D5000, v102, OS_LOG_TYPE_INFO, "%{public}@Skipping resident user representing ourselves: %@", buf, 0x16u);
          }
LABEL_127:
          ++v95;
          LOBYTE(v45) = v162;
        }
        while (v93 != v95);
        uint64_t v93 = [v168 countByEnumeratingWithState:&v175 objects:v216 count:16];
      }
      while (v93);
    }

    long long v173 = 0u;
    long long v174 = 0u;
    long long v171 = 0u;
    long long v172 = 0u;
    v141 = [(HMDHomeManager *)v3 homes];
    uint64_t v142 = [v141 countByEnumeratingWithState:&v171 objects:v207 count:16];
    if (v142)
    {
      uint64_t v143 = v142;
      uint64_t v144 = *(void *)v172;
      do
      {
        for (juint64_t j = 0; jj != v143; ++jj)
        {
          if (*(void *)v172 != v144) {
            objc_enumerationMutation(v141);
          }
          v146 = *(void **)(*((void *)&v171 + 1) + 8 * jj);
          id v147 = [(HMDHomeManager *)v3 unassociatedRemotePeers];
          objc_msgSend(v146, "notifyNewRemotePeersFound:remoteUsersRemoved:forceRemoteNotificationRegistration:", objc_msgSend(v147, "count") != 0, v152, v157);
        }
        uint64_t v143 = [v141 countByEnumeratingWithState:&v171 objects:v207 count:16];
      }
      while (v143);
    }

    if (v45) {
      [(HMDHomeManager *)v3 _saveWithReason:@"legacyResidentUpdated" postSyncNotification:0];
    }
  }
  else
  {
    v148 = (void *)MEMORY[0x1D9452090]();
    v149 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v149, OS_LOG_TYPE_INFO))
    {
      v150 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      v209 = v150;
      _os_log_impl(&dword_1D49D5000, v149, OS_LOG_TYPE_INFO, "%{public}@No active IDS account, cannot check for remote peers.", buf, 0xCu);
    }
  }
}

- (id)_remotePeers
{
  v25[1] = *MEMORY[0x1E4F143B8];
  if (isWatch())
  {
    BOOL v3 = [(HMDHomeManager *)self companionManager];
    BOOL v4 = [v3 companion];

    if (v4)
    {
      v25[0] = v4;
      uint64_t v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v25 count:1];
    }
    else
    {
      uint64_t v5 = 0;
    }
  }
  else
  {
    id v6 = [(HMDHomeManager *)self appleAccountManager];
    id v7 = [v6 account];
    BOOL v4 = [v7 devices];

    id v8 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v4, "count"));
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v9 = [(HMDHomeManager *)self appleAccountManager];
    uint64_t v10 = [v9 account];
    uint64_t v11 = [v10 devices];

    uint64_t v12 = [v11 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)v21;
      do
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          if (*(void *)v21 != v14) {
            objc_enumerationMutation(v11);
          }
          uint64_t v16 = *(void **)(*((void *)&v20 + 1) + 8 * i);
          BOOL v17 = [v16 capabilities];
          if ([v17 isRemoteGatewayCapable])
          {
            char v18 = [v16 isCurrentDevice];

            if ((v18 & 1) == 0) {
              [v8 addObject:v16];
            }
          }
          else
          {
          }
        }
        uint64_t v13 = [v11 countByEnumeratingWithState:&v20 objects:v24 count:16];
      }
      while (v13);
    }

    uint64_t v5 = (void *)[v8 copy];
  }

  return v5;
}

- (void)_checkForRemotePeers
{
  BOOL v3 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __38__HMDHomeManager__checkForRemotePeers__block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v3, block);
}

uint64_t __38__HMDHomeManager__checkForRemotePeers__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _checkForRemotePeersAndRegisterForRemoteNotifications:0];
}

- (void)checkForRemotePeers
{
  BOOL v3 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __37__HMDHomeManager_checkForRemotePeers__block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v3, block);
}

uint64_t __37__HMDHomeManager_checkForRemotePeers__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _checkForRemotePeers];
}

- (BOOL)isPairedWithWatch
{
  id v2 = [(HMDHomeManager *)self watchManager];
  char v3 = [v2 isPairedWithWatch];

  return v3;
}

- (void)_checkAndInformCompanionDevice
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  char v3 = [(HMDHomeManager *)self companionManager];
  BOOL v4 = [v3 companion];

  if ((v4 != 0) != [(HMDHomeManager *)self companionReachable])
  {
    [(HMDHomeManager *)self setCompanionReachable:v4 != 0];
    uint64_t v5 = +[HMDWatchSystemState sharedState];
    [v5 setCompanionReachable:v4 != 0];

    id v6 = (void *)MEMORY[0x1D9452090]();
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      long long v26 = v8;
      __int16 v27 = 1024;
      BOOL v28 = [(HMDHomeManager *)self companionReachable];
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Companion is reachable: %d", buf, 0x12u);
    }
    if (v4)
    {
      uint64_t v9 = [HMDRemoteDeviceMessageDestination alloc];
      uint64_t v10 = [(HMDHomeManager *)self uuid];
      uint64_t v11 = [(HMDRemoteDeviceMessageDestination *)v9 initWithTarget:v10 device:v4];

      uint64_t v12 = [MEMORY[0x1E4F65480] messageWithName:@"kRequestForCompanionKeysSyncInternalRequestKey" qualityOfService:9 destination:v11 payload:0];
      uint64_t v13 = [(HMDHomeManager *)self messageDispatcher];
      [v13 sendMessage:v12 completionHandler:0];
    }
    [(HMDHomeManager *)self _checkForRemotePeers];
    if (![(HMDHomeManager *)self companionReachable])
    {
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      uint64_t v14 = [(HMDHomeManager *)self homes];
      uint64_t v15 = [v14 countByEnumeratingWithState:&v20 objects:v24 count:16];
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v17 = *(void *)v21;
        do
        {
          uint64_t v18 = 0;
          do
          {
            if (*(void *)v21 != v17) {
              objc_enumerationMutation(v14);
            }
            int v19 = [*(id *)(*((void *)&v20 + 1) + 8 * v18) uuid];
            [(HMDHomeManager *)self _teardownRemoteAccessForHomeThroughCompanion:v19];

            ++v18;
          }
          while (v16 != v18);
          uint64_t v16 = [v14 countByEnumeratingWithState:&v20 objects:v24 count:16];
        }
        while (v16);
      }
    }
  }
}

- (HMDDevice)companionDevice
{
  id v2 = [(HMDHomeManager *)self companionManager];
  char v3 = [v2 companion];

  return (HMDDevice *)v3;
}

- (void)syncWalletKeyPassSerialNumbersToWatch:(id)a3 withCompletion:(id)a4
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = (void (**)(void))a4;
  id v8 = [v6 version];
  uint64_t v9 = (void *)[objc_alloc(MEMORY[0x1E4F65590]) initWithVersionString:@"8.0"];
  char v10 = [v8 isAtLeastVersion:v9];

  if (v10)
  {
    uint64_t v11 = [v6 remoteDestinationString];
    uint64_t v12 = [(HMDHomeManager *)self homes];
    uint64_t v13 = objc_msgSend(v12, "na_map:", &__block_literal_global_1291);

    uint64_t v14 = (void *)MEMORY[0x1D9452090]();
    uint64_t v15 = self;
    uint64_t v16 = HMFGetOSLogHandle();
    BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_INFO);
    if (v13)
    {
      if (v17)
      {
        uint64_t v18 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543874;
        long long v42 = v18;
        __int16 v43 = 2112;
        long long v44 = v13;
        __int16 v45 = 2112;
        uint64_t v46 = v11;
        _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, "%{public}@Syncing wallet key pass serial numbers: %@ to watch: %@", buf, 0x20u);
      }
      int v19 = [(HMDHomeManager *)v15 uuid];
      long long v20 = +[HMDMessageDispatcher destinationWithTarget:v19 userID:0 destination:v11 multicast:0];

      if (v20)
      {
        id v39 = @"HMDHomeMangerMessageKeyHomeWalletKeysPassSerialNumbers";
        id v40 = v13;
        long long v21 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v40 forKeys:&v39 count:1];
        long long v22 = [MEMORY[0x1E4F654B0] messageWithName:@"HMDHomeManagerSyncWalletKeysPassSerialNumbersMessage" qualityOfService:17 destination:v20 payload:v21];
        [v22 setSecureRemote:1];
        [v22 setRemoteRestriction:4];
        objc_initWeak((id *)buf, v15);
        long long v23 = [(HMDHomeManager *)v15 workQueue];
        uint64_t v31 = MEMORY[0x1E4F143A8];
        uint64_t v32 = 3221225472;
        uint64_t v33 = __71__HMDHomeManager_syncWalletKeyPassSerialNumbersToWatch_withCompletion___block_invoke_1292;
        uint64_t v34 = &unk_1E6A167C8;
        id v24 = v23;
        id v35 = v24;
        objc_copyWeak(&v38, (id *)buf);
        id v36 = v11;
        uint64_t v37 = v7;
        [v22 setResponseHandler:&v31];
        long long v25 = [(HMDHomeManager *)v15 messageDispatcher];
        [v25 sendMessage:v22];

        objc_destroyWeak(&v38);
        objc_destroyWeak((id *)buf);
      }
      else
      {
        __int16 v27 = (void *)MEMORY[0x1D9452090]();
        BOOL v28 = v15;
        uint64_t v29 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v30 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543618;
          long long v42 = v30;
          __int16 v43 = 2112;
          long long v44 = v11;
          _os_log_impl(&dword_1D49D5000, v29, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot sync wallet pass serial numbers to watch: could not create message destination for deviceId: %@", buf, 0x16u);
        }
        v7[2](v7);
      }
    }
    else
    {
      if (v17)
      {
        long long v26 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        long long v42 = v26;
        __int16 v43 = 2112;
        long long v44 = v11;
        _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, "%{public}@Did not find any wallet key pass serial numbers to sync to watch: %@", buf, 0x16u);
      }
      v7[2](v7);
    }
  }
  else
  {
    v7[2](v7);
  }
}

void __71__HMDHomeManager_syncWalletKeyPassSerialNumbersToWatch_withCompletion___block_invoke_1292(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __71__HMDHomeManager_syncWalletKeyPassSerialNumbersToWatch_withCompletion___block_invoke_2;
  block[3] = &unk_1E6A167A0;
  objc_copyWeak(&v16, (id *)(a1 + 56));
  id v12 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  id v14 = v5;
  id v15 = v8;
  id v13 = v6;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v7, block);

  objc_destroyWeak(&v16);
}

void __71__HMDHomeManager_syncWalletKeyPassSerialNumbersToWatch_withCompletion___block_invoke_2(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    int v3 = objc_msgSend(*(id *)(a1 + 40), "hmf_BOOLForKey:", @"kDataSyncResponseAckKey");
    BOOL v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = WeakRetained;
    id v6 = HMFGetOSLogHandle();
    id v7 = v6;
    if (v3)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        id v8 = HMFGetLogIdentifier();
        uint64_t v9 = *(void *)(a1 + 32);
        int v17 = 138543618;
        uint64_t v18 = v8;
        __int16 v19 = 2112;
        uint64_t v20 = v9;
        id v10 = "%{public}@Successfully synced wallet key pass serial numbers to watch: %@";
        uint64_t v11 = v7;
        os_log_type_t v12 = OS_LOG_TYPE_INFO;
        uint32_t v13 = 22;
LABEL_9:
        _os_log_impl(&dword_1D49D5000, v11, v12, v10, (uint8_t *)&v17, v13);
      }
    }
    else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v8 = HMFGetLogIdentifier();
      uint64_t v15 = *(void *)(a1 + 32);
      uint64_t v16 = *(void *)(a1 + 48);
      int v17 = 138543874;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      uint64_t v20 = v15;
      __int16 v21 = 2112;
      uint64_t v22 = v16;
      id v10 = "%{public}@Failed to sync wallet key pass serials numbers to watch %@:%@";
      uint64_t v11 = v7;
      os_log_type_t v12 = OS_LOG_TYPE_ERROR;
      uint32_t v13 = 32;
      goto LABEL_9;
    }
LABEL_10:

    goto LABEL_11;
  }
  BOOL v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v7 = HMFGetLogIdentifier();
    uint64_t v14 = *(void *)(a1 + 32);
    int v17 = 138543618;
    uint64_t v18 = v7;
    __int16 v19 = 2112;
    uint64_t v20 = v14;
    _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@HomeManager became nil while syncing wallet key pass serial numbers to watch: %@", (uint8_t *)&v17, 0x16u);
    goto LABEL_10;
  }
LABEL_11:

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

id __71__HMDHomeManager_syncWalletKeyPassSerialNumbersToWatch_withCompletion___block_invoke(uint64_t a1, void *a2)
{
  id v2 = [a2 walletKeyManager];
  int v3 = [v2 passSerialNumber];

  return v3;
}

- (void)_sendHomeDataToWatch:(id)a3 migrateToHH2:(BOOL)a4 completionHandler:(id)a5
{
  BOOL v74 = a4;
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  id v80 = a3;
  id v70 = a5;
  val = self;
  id v7 = [(HMDHomeManager *)self watchManager];
  uint64_t v71 = [v7 connectedWatchFromDeviceID:v80];

  if (![(HMDHomeManager *)self accountActive]
    || ([v71 capabilities],
        id v8 = objc_claimAutoreleasedReturnValue(),
        int v9 = [v8 supportsCloudDataSync],
        v8,
        !v9))
  {
    context = (void *)MEMORY[0x1D9452090]();
    *(void *)long long buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    uint64_t v116 = __Block_byref_object_copy__170059;
    uint64_t v117 = __Block_byref_object_dispose__170060;
    id v118 = (id)[objc_alloc(MEMORY[0x1E4F654E0]) initWithName:@"com.apple.homed.push-home-to-watch"];
    group = dispatch_group_create();
    uint64_t v15 = [v71 version];
    uint64_t v16 = (void *)[objc_alloc(MEMORY[0x1E4F65590]) initWithVersionString:@"4.0"];
    unsigned int v73 = [v15 isAtLeastVersion:v16];

    int v17 = [(HMDHomeManager *)val associatedWatchPeers];
    uint64_t v77 = [v17 objectForKeyedSubscript:v80];

    objc_initWeak(&location, val);
    [(HMDHomeManager *)val homes];
    long long v99 = 0u;
    long long v100 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v18 = [obj countByEnumeratingWithState:&v97 objects:v114 count:16];
    if (v18)
    {
      char v19 = 0;
      uint64_t v76 = *(void *)v98;
      do
      {
        uint64_t v79 = v18;
        for (uint64_t i = 0; i != v79; ++i)
        {
          if (*(void *)v98 != v76) {
            objc_enumerationMutation(obj);
          }
          __int16 v21 = *(void **)(*((void *)&v97 + 1) + 8 * i);
          uint64_t v22 = (void *)[v21 configurationVersion];
          uint64_t v23 = [v77 homeConfig];
          id v24 = [v21 uuid];
          long long v25 = [v23 objectForKeyedSubscript:v24];

          char v26 = [v21 watchSkipVersionCheck];
          if (v25) {
            char v27 = v26;
          }
          else {
            char v27 = 1;
          }
          if ((v27 & 1) != 0 || (void *)[v25 integerValue] != v22)
          {
            uint64_t v33 = (void *)MEMORY[0x1D9452090]();
            uint64_t v34 = val;
            HMFGetOSLogHandle();
            id v35 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              id v36 = (id)objc_claimAutoreleasedReturnValue();
              uint64_t v37 = [v21 name];
              *(_DWORD *)uint64_t v106 = 138543874;
              id v107 = v36;
              __int16 v108 = 2112;
              uint64_t v109 = v37;
              __int16 v110 = 2112;
              id v111 = v80;
              _os_log_impl(&dword_1D49D5000, v35, OS_LOG_TYPE_INFO, "%{public}@Sending over the data for home %@ to watch %@", v106, 0x20u);
            }
            id v38 = [(HMDHomeManager *)v34 _prepareDataForDevicesOnSameAccountForHome:v21 remoteGateway:0 isAtLeastV4:v73 migrateToHH2:v74];
            v92[0] = MEMORY[0x1E4F143A8];
            v92[1] = 3221225472;
            v92[2] = __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke;
            v92[3] = &unk_1E6A16708;
            objc_copyWeak(v96, &location);
            id v93 = v80;
            uint64_t v94 = v21;
            v96[1] = v22;
            uint64_t v95 = v34;
            [(HMDHomeManager *)v34 _pushChangesToWatch:v93 payload:v38 group:group completionHandler:v92];

            objc_destroyWeak(v96);
            char v19 = 1;
          }
          else
          {
            BOOL v28 = (void *)MEMORY[0x1D9452090]();
            uint64_t v29 = val;
            HMFGetOSLogHandle();
            __int16 v30 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              id v31 = (id)objc_claimAutoreleasedReturnValue();
              uint64_t v32 = [v21 name];
              *(_DWORD *)uint64_t v106 = 138544130;
              id v107 = v31;
              __int16 v108 = 2112;
              uint64_t v109 = v32;
              __int16 v110 = 2112;
              id v111 = v25;
              __int16 v112 = 2048;
              uint64_t v113 = v22;
              _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_INFO, "%{public}@Not sending home data for %@ as the config versions match (W: %@, C: %ld)", v106, 0x2Au);
            }
          }
        }
        uint64_t v18 = [obj countByEnumeratingWithState:&v97 objects:v114 count:16];
      }
      while (v18);

      if (v19)
      {
        char v39 = 1;
LABEL_39:
        id v68 = [(HMDHomeManager *)val workQueue];
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke_1288;
        block[3] = &unk_1E6A16758;
        void block[4] = val;
        id v82 = v80;
        char v85 = buf;
        id v84 = v70;
        char v86 = v39;
        id v83 = v71;
        dispatch_group_notify(group, v68, block);

        objc_destroyWeak(&location);
        _Block_object_dispose(buf, 8);

        goto LABEL_40;
      }
    }
    else
    {
    }
    id v40 = [(HMDHomeManager *)val primaryHomeUUID];
    if (!v40) {
      goto LABEL_30;
    }
    id v41 = [v77 primaryHome];
    long long v42 = [(HMDHomeManager *)val primaryHomeUUID];
    char v43 = HMFEqualObjects();

    if ((v43 & 1) == 0)
    {
      id v49 = (void *)MEMORY[0x1D9452090]();
      __int16 v50 = val;
      HMFGetOSLogHandle();
      int v51 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v52 = (id)objc_claimAutoreleasedReturnValue();
        id v53 = [v77 primaryHome];
        id v54 = [v53 UUIDString];
        uint64_t v55 = [(HMDHomeManager *)v50 primaryHomeUUID];
        uint64_t v56 = [v55 UUIDString];
        *(_DWORD *)uint64_t v106 = 138543874;
        id v107 = v52;
        __int16 v108 = 2112;
        uint64_t v109 = v54;
        __int16 v110 = 2112;
        id v111 = v56;
        _os_log_impl(&dword_1D49D5000, v51, OS_LOG_TYPE_INFO, "%{public}@Primary home has been updated from %@ to %@, sending primary home update", v106, 0x20u);
      }
      uint64_t v57 = [(HMDHomeManager *)v50 primaryHomeUUID];
      uint64_t v104 = @"kPrimaryHomeUUIDKey";
      uint64_t v58 = [v57 UUIDString];
      uint64_t v105 = v58;
      id v59 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v105 forKeys:&v104 count:1];

      BOOL v102 = @"kHomeDataKey";
      __int16 v60 = encodeRootObjectForRemoteDeviceOnSameAccountMigrateToHH2(v59, v73, 0);
      uint64_t v103 = v60;
      id v61 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v103 forKeys:&v102 count:1];

      __int16 v62 = (void *)MEMORY[0x1D9452090]();
      uint64_t v63 = v50;
      HMFGetOSLogHandle();
      uint64_t v64 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v65 = (id)objc_claimAutoreleasedReturnValue();
        unint64_t v66 = [v57 UUIDString];
        *(_DWORD *)uint64_t v106 = 138543874;
        id v107 = v65;
        __int16 v108 = 2112;
        uint64_t v109 = v66;
        __int16 v110 = 2112;
        id v111 = v80;
        _os_log_impl(&dword_1D49D5000, v64, OS_LOG_TYPE_INFO, "%{public}@Sending over the data for primary home update to %@ to watch %@", v106, 0x20u);
      }
      v87[0] = MEMORY[0x1E4F143A8];
      v87[1] = 3221225472;
      v87[2] = __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke_1287;
      void v87[3] = &unk_1E6A16730;
      objc_copyWeak(&v91, &location);
      id v88 = v80;
      id v67 = v57;
      id v89 = v67;
      long long v90 = v63;
      [(HMDHomeManager *)v63 _pushChangesToWatch:v88 payload:v61 group:group completionHandler:v87];

      objc_destroyWeak(&v91);
    }
    else
    {
LABEL_30:
      long long v44 = (void *)MEMORY[0x1D9452090]();
      HMFGetOSLogHandle();
      __int16 v45 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v46 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v47 = [v77 primaryHome];
        id v48 = [(HMDHomeManager *)val primaryHomeUUID];
        *(_DWORD *)uint64_t v106 = 138543874;
        id v107 = v46;
        __int16 v108 = 2112;
        uint64_t v109 = v47;
        __int16 v110 = 2112;
        id v111 = v48;
        _os_log_impl(&dword_1D49D5000, v45, OS_LOG_TYPE_INFO, "%{public}@Not sending primary home update as they match: (W: %@, C: %@)", v106, 0x20u);
      }
    }
    char v39 = 0;
    goto LABEL_39;
  }
  id v10 = (void *)MEMORY[0x1D9452090]();
  uint64_t v11 = val;
  os_log_type_t v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    uint32_t v13 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    *(void *)&uint8_t buf[4] = v13;
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&buf[14] = v71;
    _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Paired watch %@ supports cloud data sync - skipping sending home data", buf, 0x16u);
  }
  if (v70)
  {
    uint64_t v14 = [MEMORY[0x1E4F28C58] hmErrorWithCode:48];
    (*((void (**)(id, void, void *))v70 + 2))(v70, 0, v14);
  }
LABEL_40:
}

void __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke(uint64_t a1, int a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    if (a2)
    {
      id v6 = [WeakRetained associatedWatchPeers];
      id v7 = [v6 objectForKeyedSubscript:*(void *)(a1 + 32)];

      id v8 = [NSNumber numberWithInteger:*(void *)(a1 + 64)];
      int v9 = [*(id *)(a1 + 40) uuid];
      [v7 setConfigVersion:v8 forHome:v9];

      id v10 = (void *)MEMORY[0x1D9452090]();
      id v11 = *(id *)(a1 + 48);
      os_log_type_t v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        uint32_t v13 = HMFGetLogIdentifier();
        uint64_t v14 = *(void **)(a1 + 32);
        uint64_t v15 = [*(id *)(a1 + 40) name];
        int v22 = 138543874;
        uint64_t v23 = v13;
        __int16 v24 = 2112;
        long long v25 = v14;
        __int16 v26 = 2112;
        char v27 = v15;
        _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Received ACK from watch %@ for data corresponding to home %@", (uint8_t *)&v22, 0x20u);
      }
    }
    else
    {
      uint64_t v16 = (void *)MEMORY[0x1D9452090]();
      id v17 = *(id *)(a1 + 48);
      uint64_t v18 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        char v19 = HMFGetLogIdentifier();
        uint64_t v20 = [*(id *)(a1 + 40) name];
        __int16 v21 = *(void **)(a1 + 32);
        int v22 = 138543874;
        uint64_t v23 = v19;
        __int16 v24 = 2112;
        long long v25 = v20;
        __int16 v26 = 2112;
        char v27 = v21;
        _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_ERROR, "%{public}@Failed to send data for home %@ to watch %@", (uint8_t *)&v22, 0x20u);
      }
    }
  }
}

void __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke_1287(uint64_t a1, int a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    if (a2)
    {
      id v6 = [WeakRetained associatedWatchPeers];
      id v7 = [v6 objectForKeyedSubscript:*(void *)(a1 + 32)];

      id v8 = (void *)MEMORY[0x1D9452090]([v7 setPrimaryHome:*(void *)(a1 + 40)]);
      id v9 = *(id *)(a1 + 48);
      id v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        id v11 = HMFGetLogIdentifier();
        uint64_t v12 = *(void *)(a1 + 32);
        uint64_t v13 = *(void *)(a1 + 40);
        int v20 = 138543874;
        __int16 v21 = v11;
        __int16 v22 = 2112;
        uint64_t v23 = v12;
        __int16 v24 = 2112;
        uint64_t v25 = v13;
        _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Received ACK from watch %@ for primary home update to %@", (uint8_t *)&v20, 0x20u);
      }
    }
    else
    {
      uint64_t v14 = (void *)MEMORY[0x1D9452090]();
      id v15 = *(id *)(a1 + 48);
      uint64_t v16 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        id v17 = HMFGetLogIdentifier();
        uint64_t v19 = *(void *)(a1 + 32);
        uint64_t v18 = *(void *)(a1 + 40);
        int v20 = 138543874;
        __int16 v21 = v17;
        __int16 v22 = 2112;
        uint64_t v23 = v18;
        __int16 v24 = 2112;
        uint64_t v25 = v19;
        _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to primary home update %@ to watch %@", (uint8_t *)&v20, 0x20u);
      }
    }
  }
}

void __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke_1288(uint64_t a1)
{
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke_2;
  aBlock[3] = &unk_1E6A17150;
  id v2 = *(void **)(a1 + 40);
  void aBlock[4] = *(void *)(a1 + 32);
  id v8 = v2;
  long long v6 = *(_OWORD *)(a1 + 56);
  id v3 = (id)v6;
  long long v9 = v6;
  BOOL v4 = _Block_copy(aBlock);
  id v5 = v4;
  if (*(unsigned char *)(a1 + 72)) {
    [*(id *)(a1 + 32) syncWalletKeyPassSerialNumbersToWatch:*(void *)(a1 + 48) withCompletion:v4];
  }
  else {
    (*((void (**)(void *))v4 + 2))(v4);
  }
}

uint64_t __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke_2(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = *(id *)(a1 + 32);
  BOOL v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    uint64_t v6 = *(void *)(a1 + 40);
    int v10 = 138543618;
    id v11 = v5;
    __int16 v12 = 2112;
    uint64_t v13 = v6;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@Finished pushing home data changes to watch: %@", (uint8_t *)&v10, 0x16u);
  }
  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = 0;

  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, 1, 0);
  }
  return result;
}

- (void)_sendHomeDataToWatch:(id)a3 completionHandler:(id)a4
{
}

- (void)_sendHomeDataToAllWatchesMigrateToHH2:(BOOL)a3 completionHandler:(id)a4
{
  BOOL v4 = a3;
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (void (**)(void))a4;
  uint64_t v7 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v7);

  if (isiOSDevice())
  {
    uint64_t v26 = v6;
    id v8 = [(HMDHomeManager *)self associatedWatchPeers];
    long long v9 = (void *)MEMORY[0x1D9452090]();
    int v10 = self;
    id v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      __int16 v12 = HMFGetLogIdentifier();
      uint64_t v13 = [v8 allKeys];
      *(_DWORD *)long long buf = 138543618;
      char v43 = v12;
      __int16 v44 = 2112;
      __int16 v45 = v13;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Syncing home data to watches: %@", buf, 0x16u);
    }
    uint64_t v14 = dispatch_group_create();
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id obj = v8;
    uint64_t v15 = [obj countByEnumeratingWithState:&v36 objects:v41 count:16];
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = *(void *)v37;
      do
      {
        uint64_t v18 = 0;
        do
        {
          if (*(void *)v37 != v17) {
            objc_enumerationMutation(obj);
          }
          uint64_t v19 = *(void *)(*((void *)&v36 + 1) + 8 * v18);
          dispatch_group_enter(v14);
          v34[0] = MEMORY[0x1E4F143A8];
          v34[1] = 3221225472;
          id v34[2] = __74__HMDHomeManager__sendHomeDataToAllWatchesMigrateToHH2_completionHandler___block_invoke;
          v34[3] = &unk_1E6A166E0;
          id v35 = v14;
          [(HMDHomeManager *)v10 _sendHomeDataToWatch:v19 migrateToHH2:v4 completionHandler:v34];

          ++v18;
        }
        while (v16 != v18);
        uint64_t v16 = [obj countByEnumeratingWithState:&v36 objects:v41 count:16];
      }
      while (v16);
    }

    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    int v20 = [(HMDHomeManager *)v10 homes];
    uint64_t v21 = [v20 countByEnumeratingWithState:&v30 objects:v40 count:16];
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v23 = *(void *)v31;
      do
      {
        uint64_t v24 = 0;
        do
        {
          if (*(void *)v31 != v23) {
            objc_enumerationMutation(v20);
          }
          [*(id *)(*((void *)&v30 + 1) + 8 * v24++) setWatchSkipVersionCheck:0];
        }
        while (v22 != v24);
        uint64_t v22 = [v20 countByEnumeratingWithState:&v30 objects:v40 count:16];
      }
      while (v22);
    }

    uint64_t v25 = [(HMDHomeManager *)v10 workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __74__HMDHomeManager__sendHomeDataToAllWatchesMigrateToHH2_completionHandler___block_invoke_2;
    block[3] = &unk_1E6A186E0;
    uint64_t v6 = v26;
    uint64_t v29 = v26;
    dispatch_group_notify(v14, v25, block);
  }
  else if (v6)
  {
    v6[2](v6);
  }
}

void __74__HMDHomeManager__sendHomeDataToAllWatchesMigrateToHH2_completionHandler___block_invoke(uint64_t a1)
{
}

uint64_t __74__HMDHomeManager__sendHomeDataToAllWatchesMigrateToHH2_completionHandler___block_invoke_2(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

- (void)_sendHomeDataToAllWatchesWithCompletion:(id)a3
{
}

- (void)sendHomeDataToAllWatchesWithCompletion:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __57__HMDHomeManager_sendHomeDataToAllWatchesWithCompletion___block_invoke;
  v7[3] = &unk_1E6A19530;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

uint64_t __57__HMDHomeManager_sendHomeDataToAllWatchesWithCompletion___block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    int v8 = 138543362;
    long long v9 = v5;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@Syncing home data to all watches", (uint8_t *)&v8, 0xCu);
  }
  id v6 = [*(id *)(a1 + 32) watchPushDelayTimer];
  [v6 suspend];

  return [*(id *)(a1 + 32) _sendHomeDataToAllWatchesWithCompletion:*(void *)(a1 + 40)];
}

- (void)_scheduleSendHomeDataToAllWatches
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (isiOSDevice())
  {
    id v3 = [(HMDHomeManager *)self watchPushDelayTimer];
    [v3 resume];

    id v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = HMFGetLogIdentifier();
      int v7 = 138543362;
      int v8 = v6;
      _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Kicking watch push delay", (uint8_t *)&v7, 0xCu);
    }
  }
}

- (BOOL)_addWatch:(id)a3 toAssociatedList:(id)a4
{
  v38[3] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  int v8 = objc_msgSend(v7, "hmf_numberForKey:", @"kHomedVersionKey");
  uint64_t v9 = objc_msgSend(v7, "hmf_numberForKey:", @"kMetadataInfoSchemaVersionKey");
  uint64_t v10 = objc_msgSend(v7, "hmf_numberForKey:", @"kMetadataInfoVersionKey");
  id v11 = (void *)v10;
  if (v9) {
    BOOL v12 = v10 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  BOOL v13 = !v12;
  if (v12)
  {
    uint64_t v25 = (void *)MEMORY[0x1D9452090]();
    uint64_t v26 = self;
    char v27 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v29 = BOOL v28 = v13;
      *(_DWORD *)long long buf = 138543362;
      uint64_t v34 = v29;
      _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_INFO, "%{public}@Information from watch does not contain metadata version", buf, 0xCu);

      BOOL v13 = v28;
    }
  }
  else
  {
    BOOL v31 = v13;
    if (!v8) {
      int v8 = &unk_1F2DCB978;
    }
    uint64_t v14 = [(HMDHomeManager *)self associatedWatchPeers];
    id v15 = v6;
    uint64_t v16 = v14;
    long long v32 = v15;
    objc_msgSend(v14, "objectForKeyedSubscript:");
    uint64_t v17 = (HMDWatchConfiguration *)objc_claimAutoreleasedReturnValue();

    if (!v17)
    {
      uint64_t v17 = [[HMDWatchConfiguration alloc] initWithUniqueID:v32];
      uint64_t v18 = [(HMDHomeManager *)self associatedWatchPeers];
      [v18 setObject:v17 forKeyedSubscript:v32];
    }
    v37[0] = @"kMetadataInfoSchemaVersionKey";
    v37[1] = @"kMetadataInfoVersionKey";
    v38[0] = v9;
    v38[1] = v11;
    v37[2] = @"kHomedVersionKey";
    v38[2] = v8;
    uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v38 forKeys:v37 count:3];
    [(HMDWatchConfiguration *)v17 setMetadataConfig:v19];

    int v20 = objc_msgSend(v7, "hmf_dictionaryForKey:", @"kHomeConfigHomesKey");
    [(HMDWatchConfiguration *)v17 setHomeConfiguration:v20];
    uint64_t v21 = objc_msgSend(v7, "hmf_UUIDForKey:", @"kPrimaryHomeUUIDKey");
    [(HMDWatchConfiguration *)v17 setPrimaryHome:v21];

    uint64_t v22 = (void *)MEMORY[0x1D9452090]();
    uint64_t v23 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      uint64_t v24 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v34 = v24;
      __int16 v35 = 2112;
      long long v36 = v17;
      _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_INFO, "%{public}@Added/Updated %@ in associated watch peers", buf, 0x16u);
    }

    id v6 = v32;
    BOOL v13 = v31;
  }

  return v13;
}

- (void)_sendKeysToWatch:(id)a3 completionHandler:(id)a4
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  int v8 = [MEMORY[0x1E4F5BE48] systemStore];
  id v40 = 0;
  id v41 = 0;
  id v38 = 0;
  id v39 = 0;
  LOBYTE(a4) = [v8 getControllerPublicKey:&v41 secretKey:0 keyPair:&v40 username:&v39 allowCreation:0 error:&v38];
  id v29 = v41;
  id v30 = v40;
  id v9 = v39;
  id v27 = v38;

  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __53__HMDHomeManager__sendKeysToWatch_completionHandler___block_invoke;
  aBlock[3] = &unk_1E6A16668;
  id v10 = v7;
  id v37 = v10;
  id v11 = _Block_copy(aBlock);
  BOOL v12 = (void *)MEMORY[0x1D9452090]();
  BOOL v13 = HMFGetOSLogHandle();
  BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_INFO);
  if (a4)
  {
    if (v14)
    {
      id v15 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138544130;
      __int16 v45 = v15;
      __int16 v46 = 2112;
      id v47 = v6;
      __int16 v48 = 2112;
      id v49 = v9;
      __int16 v50 = 2112;
      id v51 = v29;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Adding Watch %@ to be associated with this device, controller name: %@, public key: %@", buf, 0x2Au);
    }
    v42[0] = @"kControllerKeyPairKey";
    v42[1] = @"kControllerPairingNameKey";
    v43[0] = v30;
    v43[1] = v9;
    v42[2] = @"kControllerUniqueDeviceIdSaltKey";
    uint64_t v16 = +[HMDHomeManager saltForDeviceSpecificIdentifier];
    v43[2] = v16;
    v42[3] = @"kControllerAssistantTeamIdentifierKey";
    uint64_t v17 = [(HMDHomeManager *)self _getAssistantHashingData];
    v43[3] = v17;
    uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v43 forKeys:v42 count:4];
    uint64_t v19 = (void *)[v18 mutableCopy];

    int v20 = +[HMDDevice deviceWithDestination:v6];
    uint64_t v21 = [HMDRemoteDeviceMessageDestination alloc];
    uint64_t v22 = [(HMDHomeManager *)self uuid];
    uint64_t v23 = [(HMDRemoteDeviceMessageDestination *)v21 initWithTarget:v22 device:v20];

    uint64_t v24 = [MEMORY[0x1E4F654B0] messageWithName:@"kCompanionKeysSyncInternalRequestKey" qualityOfService:17 destination:v23 payload:v19];
    [v24 setSecureRemote:1];
    [v24 setRemoteRestriction:4];
    objc_initWeak((id *)buf, self);
    v31[0] = MEMORY[0x1E4F143A8];
    v31[1] = 3221225472;
    void v31[2] = __53__HMDHomeManager__sendKeysToWatch_completionHandler___block_invoke_1281;
    v31[3] = &unk_1E6A166B8;
    objc_copyWeak(&v35, (id *)buf);
    id v33 = v11;
    id v32 = v6;
    id v34 = v10;
    [v24 setResponseHandler:v31];
    uint64_t v25 = [(HMDHomeManager *)self messageDispatcher];
    [v25 sendMessage:v24 completionHandler:0];

    objc_destroyWeak(&v35);
    objc_destroyWeak((id *)buf);
  }
  else
  {
    if (v14)
    {
      uint64_t v26 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      __int16 v45 = v26;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Cannot extract the key pair", buf, 0xCu);
    }
    uint64_t v19 = objc_msgSend(MEMORY[0x1E4F28C58], "hmErrorWithCode:", -1, v27);
    (*((void (**)(void *, void, void *))v11 + 2))(v11, 0, v19);
  }
}

uint64_t __53__HMDHomeManager__sendKeysToWatch_completionHandler___block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void __53__HMDHomeManager__sendKeysToWatch_completionHandler___block_invoke_1281(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 7);
  int v8 = WeakRetained;
  if (WeakRetained)
  {
    id v9 = [WeakRetained workQueue];
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    void v12[2] = __53__HMDHomeManager__sendKeysToWatch_completionHandler___block_invoke_2;
    v12[3] = &unk_1E6A16690;
    id v13 = v5;
    id v17 = a1[5];
    id v14 = v8;
    id v15 = a1[4];
    id v16 = v6;
    id v18 = a1[6];
    dispatch_async(v9, v12);
  }
  else
  {
    id v10 = (void (**)(id, void, void *))a1[5];
    id v11 = [MEMORY[0x1E4F28C58] hmErrorWithCode:23];
    v10[2](v10, 0, v11);
  }
}

void __53__HMDHomeManager__sendKeysToWatch_completionHandler___block_invoke_2(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32))
  {
    id v2 = (void *)MEMORY[0x1D9452090]();
    id v3 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      id v4 = HMFGetLogIdentifier();
      uint64_t v5 = *(void *)(a1 + 32);
      int v16 = 138543618;
      id v17 = v4;
      __int16 v18 = 2114;
      uint64_t v19 = v5;
      _os_log_impl(&dword_1D49D5000, v3, OS_LOG_TYPE_ERROR, "%{public}@Received error for companion keys request: %{public}@", (uint8_t *)&v16, 0x16u);
    }
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    id v6 = [*(id *)(a1 + 40) fullSyncedWatchPeers];
    [v6 addObject:*(void *)(a1 + 48)];

    id v7 = (void *)MEMORY[0x1D9452090]();
    int v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = HMFGetLogIdentifier();
      uint64_t v10 = *(void *)(a1 + 48);
      int v16 = 138543618;
      id v17 = v9;
      __int16 v18 = 2112;
      uint64_t v19 = v10;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Adding %@ to fully synced device list", (uint8_t *)&v16, 0x16u);
    }
    int v11 = [*(id *)(a1 + 40) _addWatch:*(void *)(a1 + 48) toAssociatedList:*(void *)(a1 + 56)];
    BOOL v12 = *(void **)(a1 + 40);
    if (v11)
    {
      [v12 _sendHomeDataToWatch:*(void *)(a1 + 48) completionHandler:*(void *)(a1 + 72)];
    }
    else
    {
      id v13 = [v12 associatedWatchPeers];
      [v13 removeObjectForKey:*(void *)(a1 + 48)];

      uint64_t v14 = *(void *)(a1 + 64);
      id v15 = [MEMORY[0x1E4F28C58] hmErrorWithCode:-1];
      (*(void (**)(uint64_t, void, void *))(v14 + 16))(v14, 0, v15);
    }
  }
}

- (void)_addWatch:(id)a3 completionHandler:(id)a4
{
  v32[1] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  int v8 = +[HMDDevice deviceWithDestination:v6];
  id v9 = [HMDRemoteDeviceMessageDestination alloc];
  uint64_t v10 = [(HMDHomeManager *)self uuid];
  int v11 = [(HMDRemoteDeviceMessageDestination *)v9 initWithTarget:v10 device:v8];

  BOOL v12 = [(HMDHomeManager *)self currentHomeUUID];

  if (v12)
  {
    BOOL v31 = @"kCurrentHomeUUIDKey";
    id v13 = [(HMDHomeManager *)self currentHomeUUID];
    uint64_t v14 = [v13 UUIDString];
    v32[0] = v14;
    id v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v32 forKeys:&v31 count:1];
  }
  else
  {
    id v29 = @"kNoCurrentHomeKey";
    uint64_t v30 = MEMORY[0x1E4F1CC38];
    id v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v30 forKeys:&v29 count:1];
  }
  int v16 = [MEMORY[0x1E4F654B0] messageWithName:@"kHomeConfigInternalRequestKey" qualityOfService:17 destination:v11 payload:v15];
  objc_initWeak(&location, self);
  uint64_t v20 = MEMORY[0x1E4F143A8];
  uint64_t v21 = 3221225472;
  uint64_t v22 = __46__HMDHomeManager__addWatch_completionHandler___block_invoke;
  uint64_t v23 = &unk_1E6A167C8;
  id v17 = v7;
  id v26 = v17;
  objc_copyWeak(&v27, &location);
  uint64_t v24 = self;
  id v18 = v6;
  id v25 = v18;
  [v16 setResponseHandler:&v20];
  uint64_t v19 = [(HMDHomeManager *)self messageDispatcher];
  [v19 sendMessage:v16 completionHandler:0];

  objc_destroyWeak(&v27);
  objc_destroyWeak(&location);
}

void __46__HMDHomeManager__addWatch_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __46__HMDHomeManager__addWatch_completionHandler___block_invoke_2;
  aBlock[3] = &unk_1E6A16668;
  id v23 = *(id *)(a1 + 48);
  id v7 = _Block_copy(aBlock);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v9 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v10 = [WeakRetained workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __46__HMDHomeManager__addWatch_completionHandler___block_invoke_3;
    block[3] = &unk_1E6A18640;
    id v16 = v5;
    id v21 = v7;
    id v17 = v6;
    id v11 = v9;
    uint64_t v12 = *(void *)(a1 + 32);
    id v13 = *(void **)(a1 + 40);
    id v18 = v11;
    uint64_t v19 = v12;
    id v20 = v13;
    dispatch_async(v10, block);

    uint64_t v14 = v16;
  }
  else
  {
    uint64_t v14 = [MEMORY[0x1E4F28C58] hmErrorWithCode:23];
    (*((void (**)(void *, void, void *))v7 + 2))(v7, 0, v14);
  }
}

uint64_t __46__HMDHomeManager__addWatch_completionHandler___block_invoke_2(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t __46__HMDHomeManager__addWatch_completionHandler___block_invoke_3(uint64_t a1)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32))
  {
    id v2 = (void *)MEMORY[0x1D9452090]();
    id v3 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      id v4 = HMFGetLogIdentifier();
      id v5 = *(void **)(a1 + 32);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v106 = v4;
      __int16 v107 = 2114;
      __int16 v108 = v5;
      _os_log_impl(&dword_1D49D5000, v3, OS_LOG_TYPE_ERROR, "%{public}@Received error for home config request: %{public}@", buf, 0x16u);
    }
    id v6 = *(uint64_t (**)(void))(*(void *)(a1 + 72) + 16);
    return v6();
  }
  id v7 = objc_msgSend(*(id *)(a1 + 40), "hmf_dictionaryForKey:", @"kHomeConfigHomesKey");
  int v8 = (void *)MEMORY[0x1E4F1CA80];
  id v9 = [v7 allKeys];
  uint64_t v10 = [v8 setWithArray:v9];

  id v11 = [*(id *)(a1 + 48) _prepareHomesVersionDict];
  uint64_t v12 = (void *)MEMORY[0x1E4F1CA80];
  id v13 = [v11 allKeys];
  uint64_t v14 = [v12 setWithArray:v13];

  [v10 minusSet:v14];
  if ([v10 count])
  {
    id v15 = (void *)MEMORY[0x1D9452090]();
    id v16 = *(id *)(a1 + 56);
    id v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      id v18 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v106 = v18;
      __int16 v107 = 2112;
      __int16 v108 = v10;
      _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Complete sync is required because the following homes have been removed: %@", buf, 0x16u);
    }
    char v19 = 0;
    BOOL v20 = 1;
    goto LABEL_45;
  }
  id v21 = objc_msgSend(*(id *)(a1 + 40), "hmf_dataForKey:", @"kControllerUniqueDeviceIdSaltKey");
  if (!v21)
  {
    id v23 = [*(id *)(a1 + 48) fullSyncedWatchPeers];
    char v24 = [v23 containsObject:*(void *)(a1 + 64)];

    if ((v24 & 1) == 0)
    {
      id v38 = (void *)MEMORY[0x1D9452090]();
      id v39 = *(id *)(a1 + 56);
      id v40 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v42 = id v41 = v7;
        *(_DWORD *)long long buf = 138543362;
        uint64_t v106 = v42;
        _os_log_impl(&dword_1D49D5000, v40, OS_LOG_TYPE_INFO, "%{public}@Full sync has not happened happened before, need to rsync everything again", buf, 0xCu);

        id v7 = v41;
      }

LABEL_43:
      BOOL v20 = 1;
      goto LABEL_44;
    }
LABEL_14:

    id v25 = [*(id *)(a1 + 40) objectForKey:@"pairingIdentity"];

    id v26 = *(void **)(a1 + 40);
    if (v25)
    {
      id v27 = objc_msgSend(v26, "hmf_dataForKey:", @"pairingIdentity");
      if (v27)
      {
        uint64_t v28 = [MEMORY[0x1E4F28DC0] deserializeObjectWithData:v27 allowedClass:objc_opt_class() frameworkClasses:MEMORY[0x1E4F1CBF0]];
        if (v28)
        {
          id v21 = (void *)v28;

          goto LABEL_56;
        }
        id v49 = (void *)MEMORY[0x1D9452090]();
        id v50 = *(id *)(a1 + 56);
        id v51 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          id v53 = v52 = v7;
          *(_DWORD *)long long buf = 138543362;
          uint64_t v106 = v53;
          _os_log_impl(&dword_1D49D5000, v51, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to deserialize pairing identity", buf, 0xCu);

          id v7 = v52;
        }
      }
    }
    else
    {
      id v27 = objc_msgSend(v26, "hmf_dataForKey:", @"kControllerKeyPairKey");
      char v43 = objc_msgSend(*(id *)(a1 + 40), "hmf_stringForKey:", @"kControllerPairingNameKey");
      __int16 v44 = v43;
      if (v27 && v43)
      {
        long long v99 = v7;
        __int16 v45 = [MEMORY[0x1E4F5BE48] systemStore];
        id v101 = 0;
        id v102 = 0;
        int v46 = [v45 deserializeKeyPair:v27 publicKey:&v102 secretKey:0 error:&v101];
        id v47 = v102;
        id v95 = v101;

        if (v46)
        {
          __int16 v48 = (void *)[objc_alloc(MEMORY[0x1E4F65510]) initWithPairingKeyData:v47];
          id v21 = (void *)[objc_alloc(MEMORY[0x1E4F65508]) initWithIdentifier:v44 publicKey:v48 privateKey:0];
        }
        else
        {
          context = (void *)MEMORY[0x1D9452090]();
          id v68 = *(id *)(a1 + 56);
          id v69 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
          {
            id v70 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543362;
            uint64_t v106 = v70;
            _os_log_impl(&dword_1D49D5000, v69, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to deserialize key pair", buf, 0xCu);
          }
          id v21 = 0;
        }

        id v7 = v99;
        if (v21)
        {
LABEL_56:
          uint64_t v71 = objc_msgSend(MEMORY[0x1E4F5BE48], "systemStore", context);
          id v100 = 0;
          id v33 = [v71 getLocalPairingIdentity:&v100];
          id v22 = v100;

          BOOL v20 = v33 != 0;
          if (v33)
          {
            if ([v21 isEqual:v33])
            {

              goto LABEL_59;
            }
            long long v98 = v7;
            contexta = (void *)MEMORY[0x1D9452090]();
            id v87 = *(id *)(a1 + 56);
            id v88 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v88, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v89 = id v97 = v22;
              *(_DWORD *)long long buf = 138543618;
              uint64_t v106 = v89;
              __int16 v107 = 2112;
              __int16 v108 = v21;
              _os_log_impl(&dword_1D49D5000, v88, OS_LOG_TYPE_INFO, "%{public}@Watch pairing identity incorrect: %@", buf, 0x16u);

              id v22 = v97;
            }
          }
          else
          {
            id v96 = v22;
            long long v98 = v7;
            id v82 = (void *)MEMORY[0x1D9452090]();
            id v83 = *(id *)(a1 + 56);
            id v84 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              char v85 = contextb = v82;
              *(_DWORD *)long long buf = 138543362;
              uint64_t v106 = v85;
              _os_log_impl(&dword_1D49D5000, v84, OS_LOG_TYPE_ERROR, "%{public}@Companion does not have local pairing identity, so cannot add the watch", buf, 0xCu);

              id v82 = contextb;
            }

            char v86 = [*(id *)(a1 + 48) associatedWatchPeers];
            [v86 removeObjectForKey:*(void *)(a1 + 64)];

            id v22 = v96;
          }
          goto LABEL_21;
        }
        goto LABEL_38;
      }
    }
LABEL_38:
    id v54 = objc_msgSend(*(id *)(a1 + 48), "fullSyncedWatchPeers", context);
    char v55 = [v54 containsObject:*(void *)(a1 + 64)];

    if (v55)
    {
      id v21 = 0;
LABEL_59:

      id v72 = (void *)MEMORY[0x1D9452090]();
      id v73 = *(id *)(a1 + 56);
      BOOL v74 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
      {
        uint64_t v75 = HMFGetLogIdentifier();
        uint64_t v76 = *(void **)(a1 + 64);
        *(_DWORD *)long long buf = 138543618;
        uint64_t v106 = v75;
        __int16 v107 = 2112;
        __int16 v108 = v76;
        _os_log_impl(&dword_1D49D5000, v74, OS_LOG_TYPE_INFO, "%{public}@Adding watch %@ associated watch peers", buf, 0x16u);
      }
      if ([*(id *)(a1 + 48) _addWatch:*(void *)(a1 + 64) toAssociatedList:*(void *)(a1 + 40)])
      {
        uint64_t v77 = (void *)MEMORY[0x1D9452090]();
        id v78 = *(id *)(a1 + 56);
        uint64_t v79 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
        {
          id v80 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543362;
          uint64_t v106 = v80;
          _os_log_impl(&dword_1D49D5000, v79, OS_LOG_TYPE_INFO, "%{public}@Scheduling partial push to watch", buf, 0xCu);
        }
        [*(id *)(a1 + 48) _scheduleSendHomeDataToAllWatches];
        BOOL v20 = 1;
      }
      else
      {
        long long v81 = [*(id *)(a1 + 48) associatedWatchPeers];
        [v81 removeObjectForKey:*(void *)(a1 + 64)];

        BOOL v20 = 0;
      }
      char v19 = 1;
      goto LABEL_45;
    }
    uint64_t v56 = (void *)MEMORY[0x1D9452090]();
    id v57 = *(id *)(a1 + 56);
    uint64_t v58 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
    {
      id v59 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v106 = v59;
      _os_log_impl(&dword_1D49D5000, v58, OS_LOG_TYPE_INFO, "%{public}@Full sync has not happened happened before, need to rsync everything again", buf, 0xCu);
    }
    id v21 = 0;
    goto LABEL_43;
  }
  id v22 = +[HMDHomeManager saltForDeviceSpecificIdentifier];
  BOOL v20 = v22 != 0;
  if (v22)
  {
    if (([v21 isEqualToData:v22] & 1) == 0)
    {
      long long v98 = v7;
      id v34 = (void *)MEMORY[0x1D9452090]();
      id v35 = *(id *)(a1 + 56);
      long long v36 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v37 = v94 = v34;
        *(_DWORD *)long long buf = 138543362;
        uint64_t v106 = v37;
        _os_log_impl(&dword_1D49D5000, v36, OS_LOG_TYPE_INFO, "%{public}@Device ID salts mismatched", buf, 0xCu);

        id v34 = v94;
      }

      goto LABEL_25;
    }

    goto LABEL_14;
  }
  long long v98 = v7;
  id v29 = (void *)MEMORY[0x1D9452090]();
  id v30 = *(id *)(a1 + 56);
  BOOL v31 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    id v32 = v93 = v29;
    *(_DWORD *)long long buf = 138543362;
    uint64_t v106 = v32;
    _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_ERROR, "%{public}@Companion does not have device ID salt, so cannot add the watch", buf, 0xCu);

    id v29 = v93;
  }

  id v33 = [*(id *)(a1 + 48) associatedWatchPeers];
  [v33 removeObjectForKey:*(void *)(a1 + 64)];
LABEL_21:

LABEL_25:
  id v7 = v98;
LABEL_44:

  char v19 = 0;
LABEL_45:

  if ((v19 & 1) == 0 && v20)
  {
    __int16 v60 = (void *)MEMORY[0x1D9452090]();
    id v61 = *(id *)(a1 + 56);
    __int16 v62 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
    {
      uint64_t v63 = HMFGetLogIdentifier();
      uint64_t v64 = *(void **)(a1 + 64);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v106 = v63;
      __int16 v107 = 2112;
      __int16 v108 = v64;
      _os_log_impl(&dword_1D49D5000, v62, OS_LOG_TYPE_INFO, "%{public}@Watch %@ needs a complete sync", buf, 0x16u);
    }
    id v65 = *(void **)(a1 + 48);
    uint64_t v103 = *(void *)(a1 + 64);
    uint64_t v104 = &unk_1F2DC9CA0;
    unint64_t v66 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v104 forKeys:&v103 count:1];
    [v65 _addSyncOperation:v66];
  }
  id v6 = *(uint64_t (**)(void))(*(void *)(a1 + 72) + 16);
  return v6();
}

- (void)_pairedSyncDidStart
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  id v3 = [(HMDHomeManager *)self watchSyncStateMap];
  uint64_t v4 = [v3 count];

  if (v4)
  {
    objc_initWeak(&location, self);
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    id v5 = [(HMDHomeManager *)self watchSyncStateMap];
    id obj = (id)[v5 copy];

    uint64_t v6 = [obj countByEnumeratingWithState:&v49 objects:v58 count:16];
    if (v6)
    {
      char v41 = 0;
      uint64_t v43 = *(void *)v50;
      do
      {
        uint64_t v44 = v6;
        for (uint64_t i = 0; i != v44; ++i)
        {
          if (*(void *)v50 != v43) {
            objc_enumerationMutation(obj);
          }
          int v8 = *(void **)(*((void *)&v49 + 1) + 8 * i);
          id v9 = [(HMDHomeManager *)self watchSyncStateMap];
          uint64_t v10 = [v9 objectForKeyedSubscript:v8];

          id v11 = [v10 currentSync];
          if ([v11 inProgress])
          {
            uint64_t v12 = (void *)MEMORY[0x1D9452090]();
            id v13 = self;
            HMFGetOSLogHandle();
            uint64_t v14 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
            {
              id v15 = HMFGetLogIdentifier();
              *(_DWORD *)long long buf = 138543618;
              id v55 = v15;
              __int16 v56 = 2112;
              uint64_t v57 = (uint64_t)v11;
              _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@%@ is in progress", buf, 0x16u);
            }
          }
          else
          {
            aBlock[0] = MEMORY[0x1E4F143A8];
            aBlock[1] = 3221225472;
            aBlock[2] = __37__HMDHomeManager__pairedSyncDidStart__block_invoke;
            aBlock[3] = &unk_1E6A16640;
            void aBlock[4] = self;
            id v16 = v11;
            id v46 = v16;
            id v47 = v8;
            objc_copyWeak(&v48, &location);
            id v17 = _Block_copy(aBlock);
            id v18 = [(HMDHomeManager *)self associatedWatchPeers];
            [v18 removeObjectForKey:v8];

            uint64_t v19 = [v16 syncOption];
            if (v19 == 1)
            {
              char v24 = (void *)MEMORY[0x1D9452090]([v16 setInProgress:1]);
              id v25 = self;
              HMFGetOSLogHandle();
              id v26 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
              {
                id v27 = HMFGetLogIdentifier();
                *(_DWORD *)long long buf = 138543618;
                id v55 = v27;
                __int16 v56 = 2112;
                uint64_t v57 = (uint64_t)v8;
                _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_INFO, "%{public}@Starting complete sync for %@", buf, 0x16u);
              }
              [(HMDHomeManager *)v25 _sendKeysToWatch:v8 completionHandler:v17];
            }
            else if (v19 == 2)
            {
              BOOL v20 = (void *)MEMORY[0x1D9452090]([v16 setInProgress:1]);
              id v21 = self;
              HMFGetOSLogHandle();
              id v22 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
              {
                id v23 = HMFGetLogIdentifier();
                *(_DWORD *)long long buf = 138543618;
                id v55 = v23;
                __int16 v56 = 2112;
                uint64_t v57 = (uint64_t)v8;
                _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_INFO, "%{public}@Starting partial sync for %@", buf, 0x16u);
              }
              [(HMDHomeManager *)v21 _addWatch:v8 completionHandler:v17];
            }
            else
            {
              uint64_t v28 = (void *)MEMORY[0x1D9452090]();
              id v29 = self;
              HMFGetOSLogHandle();
              id v30 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                id v31 = (id)objc_claimAutoreleasedReturnValue();
                uint64_t v32 = [v16 syncOption];
                *(_DWORD *)long long buf = 138543618;
                id v55 = v31;
                __int16 v56 = 2048;
                uint64_t v57 = v32;
                _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_INFO, "%{public}@Unknown option %tu", buf, 0x16u);
              }
              char v41 = 1;
            }

            objc_destroyWeak(&v48);
          }
        }
        uint64_t v6 = [obj countByEnumeratingWithState:&v49 objects:v58 count:16];
      }
      while (v6);

      if (v41)
      {
        id v33 = (void *)MEMORY[0x1D9452090]();
        id v34 = self;
        HMFGetOSLogHandle();
        id v35 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
        {
          long long v36 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543362;
          id v55 = v36;
          _os_log_impl(&dword_1D49D5000, v35, OS_LOG_TYPE_INFO, "%{public}@Notifying PairedSync that sync is done", buf, 0xCu);
        }
        [(HMDPairedSync *)v34->_pairedSync syncComplete];
      }
    }
    else
    {
    }
    objc_destroyWeak(&location);
  }
  else
  {
    id v37 = (void *)MEMORY[0x1D9452090]();
    id v38 = self;
    id v39 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      id v40 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v55 = v40;
      _os_log_impl(&dword_1D49D5000, v39, OS_LOG_TYPE_INFO, "%{public}@Notifying PairedSync that sync is done", buf, 0xCu);
    }
    [(HMDPairedSync *)v38->_pairedSync syncComplete];
  }
}

void __37__HMDHomeManager__pairedSyncDidStart__block_invoke(uint64_t a1, int a2, void *a3)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = (void *)MEMORY[0x1D9452090]();
  id v7 = *(id *)(a1 + 32);
  int v8 = HMFGetOSLogHandle();
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
  if (a2)
  {
    if (!v9) {
      goto LABEL_7;
    }
    uint64_t v10 = HMFGetLogIdentifier();
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = *(void **)(a1 + 48);
    *(_DWORD *)BOOL v74 = 138543874;
    *(void *)&v74[4] = v10;
    *(_WORD *)&v74[12] = 2112;
    *(void *)&v74[14] = v11;
    *(_WORD *)&v74[22] = 2112;
    uint64_t v75 = v12;
    id v13 = "%{public}@Successfully completed paired sync: %@ for watch: %@";
    uint64_t v14 = v8;
    uint32_t v15 = 32;
  }
  else
  {
    if (!v9) {
      goto LABEL_7;
    }
    uint64_t v10 = HMFGetLogIdentifier();
    uint64_t v16 = *(void *)(a1 + 40);
    id v17 = *(void **)(a1 + 48);
    *(_DWORD *)BOOL v74 = 138544130;
    *(void *)&v74[4] = v10;
    *(_WORD *)&v74[12] = 2112;
    *(void *)&v74[14] = v16;
    *(_WORD *)&v74[22] = 2112;
    uint64_t v75 = v17;
    LOWORD(v76) = 2112;
    *(void *)((char *)&v76 + 2) = v5;
    id v13 = "%{public}@Failed to complete paired sync: %@ for watch: %@:%@";
    uint64_t v14 = v8;
    uint32_t v15 = 42;
  }
  _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, v13, v74, v15);

LABEL_7:
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v19 = [WeakRetained watchSyncStateMap];
  BOOL v20 = [v19 objectForKeyedSubscript:*(void *)(a1 + 48)];

  if (v20)
  {
    uint64_t v21 = [v20 removeSync];
    if (v21)
    {
      id v27 = [v20 currentSync];
      uint64_t v28 = [*(id *)(a1 + 40) syncOption];
      uint64_t v29 = [v27 syncOption];
      if (v28 == v29)
      {
        int v35 = 0;
      }
      else
      {
        uint64_t v29 = +[HMDWatchSyncState isNewBetter:present:](HMDWatchSyncState, "isNewBetter:present:", [*(id *)(a1 + 40) syncOption], objc_msgSend(v27, "syncOption"));
        int v35 = v29 ^ 1;
      }
      char v41 = (void *)MEMORY[0x1D9452090](v29, v30, v31, v32, v33, v34);
      id v42 = *(id *)(a1 + 32);
      uint64_t v43 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        uint64_t v44 = HMFGetLogIdentifier();
        *(_DWORD *)BOOL v74 = 138543362;
        *(void *)&v74[4] = v44;
        _os_log_impl(&dword_1D49D5000, v43, OS_LOG_TYPE_INFO, "%{public}@There are more options remaining, restarting the paired sync", v74, 0xCu);
      }
      [*(id *)(a1 + 32) _pairedSyncDidStart];
    }
    else
    {
      long long v36 = (void *)MEMORY[0x1D9452090](v21, v22, v23, v24, v25, v26);
      id v37 = *(id *)(a1 + 32);
      id v38 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        id v39 = HMFGetLogIdentifier();
        uint64_t v40 = *(void *)(a1 + 48);
        *(_DWORD *)BOOL v74 = 138543618;
        *(void *)&v74[4] = v39;
        *(_WORD *)&v74[12] = 2112;
        *(void *)&v74[14] = v40;
        _os_log_impl(&dword_1D49D5000, v38, OS_LOG_TYPE_INFO, "%{public}@Removing %@ from watch sync state", v74, 0x16u);
      }
      id v27 = [WeakRetained watchSyncStateMap];
      [v27 removeObjectForKey:*(void *)(a1 + 48)];
      int v35 = 1;
    }

    __int16 v45 = [*(id *)(a1 + 32) watchSyncRetryContextBySyncIdentifier];
    id v46 = [*(id *)(a1 + 40) identifier];
    id v47 = [v45 objectForKeyedSubscript:v46];

    if (v35 && [v5 code] == 8)
    {
      id v48 = [*(id *)(a1 + 32) watchSyncRetryContextBySyncIdentifier];
      long long v49 = [*(id *)(a1 + 40) identifier];
      [v48 setObject:0 forKeyedSubscript:v49];

      if (v47) {
        uint64_t v50 = [v47 retryAttempt] + 1;
      }
      else {
        uint64_t v50 = 0;
      }
      uint64_t v58 = +[HMDWatchSyncRetryContext createWithWatchIdentifier:watchSync:retryAttempt:](HMDWatchSyncRetryContext, "createWithWatchIdentifier:watchSync:retryAttempt:", *(void *)(a1 + 48), *(void *)(a1 + 40), v50, *(_OWORD *)v74, *(void *)&v74[16], v75, v76);

      if (v58)
      {
        uint64_t v59 = [*(id *)(a1 + 32) watchSyncRetryContextBySyncIdentifier];
        __int16 v60 = [*(id *)(a1 + 40) identifier];
        [v59 setObject:v58 forKeyedSubscript:v60];

        id v61 = objc_alloc(MEMORY[0x1E4F65580]);
        [v58 retryInterval];
        __int16 v62 = objc_msgSend(v61, "initWithTimeInterval:options:", 0);
        [v62 setDelegate:*(void *)(a1 + 32)];
        uint64_t v63 = [*(id *)(a1 + 32) workQueue];
        [v62 setDelegateQueue:v63];

        uint64_t v64 = [*(id *)(a1 + 32) watchSyncRetryContextByRetryTimer];
        [v64 setObject:v58 forKey:v62];

        id v65 = (void *)MEMORY[0x1D9452090]([v62 resume]);
        id v66 = *(id *)(a1 + 32);
        id v67 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
        {
          id v68 = HMFGetLogIdentifier();
          *(_DWORD *)BOOL v74 = 138543874;
          *(void *)&v74[4] = v68;
          *(_WORD *)&v74[12] = 2112;
          *(void *)&v74[14] = v62;
          *(_WORD *)&v74[22] = 2112;
          uint64_t v75 = v58;
          _os_log_impl(&dword_1D49D5000, v67, OS_LOG_TYPE_INFO, "%{public}@Started retry timer for watch sync retry context %@:%@", v74, 0x20u);
        }
      }
      else
      {
        id v69 = (void *)MEMORY[0x1D9452090]();
        id v70 = *(id *)(a1 + 32);
        uint64_t v71 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
        {
          id v72 = HMFGetLogIdentifier();
          uint64_t v73 = *(void *)(a1 + 40);
          *(_DWORD *)BOOL v74 = 138543618;
          *(void *)&v74[4] = v72;
          *(_WORD *)&v74[12] = 2112;
          *(void *)&v74[14] = v73;
          _os_log_impl(&dword_1D49D5000, v71, OS_LOG_TYPE_INFO, "%{public}@Finished retrying watch sync: %@", v74, 0x16u);
        }
      }
    }
    else if (v47)
    {
      long long v51 = (void *)MEMORY[0x1D9452090]();
      id v52 = *(id *)(a1 + 32);
      id v53 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
      {
        id v54 = HMFGetLogIdentifier();
        uint64_t v55 = *(void *)(a1 + 40);
        *(_DWORD *)BOOL v74 = 138543618;
        *(void *)&v74[4] = v54;
        *(_WORD *)&v74[12] = 2112;
        *(void *)&v74[14] = v55;
        _os_log_impl(&dword_1D49D5000, v53, OS_LOG_TYPE_INFO, "%{public}@Resetting retry context for watch sync: %@", v74, 0x16u);
      }
      __int16 v56 = [*(id *)(a1 + 32) watchSyncRetryContextBySyncIdentifier];
      uint64_t v57 = [*(id *)(a1 + 40) identifier];
      [v56 setObject:0 forKeyedSubscript:v57];
    }
  }
}

- (void)pairedSyncDidStart:(id)a3
{
  uint64_t v4 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __37__HMDHomeManager_pairedSyncDidStart___block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v4, block);
}

uint64_t __37__HMDHomeManager_pairedSyncDidStart___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _pairedSyncDidStart];
}

- (void)_addSyncOperation:(id)a3 forWatchWithIdentifier:(id)a4
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v46 = v7;
  if (([v6 isRetry] & 1) == 0)
  {
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    int v8 = [(HMDHomeManager *)self watchSyncRetryContextBySyncIdentifier];
    BOOL v9 = (void *)[v8 copy];

    id v7 = v46;
    id obj = v9;
    uint64_t v49 = [v9 countByEnumeratingWithState:&v54 objects:v65 count:16];
    if (!v49) {
      goto LABEL_26;
    }
    uint64_t v48 = *(void *)v55;
    *(void *)&long long v10 = 138543874;
    long long v43 = v10;
    uint64_t v44 = self;
    id v45 = v6;
    while (1)
    {
      for (uint64_t i = 0; i != v49; ++i)
      {
        if (*(void *)v55 != v48) {
          objc_enumerationMutation(obj);
        }
        uint64_t v12 = *(void *)(*((void *)&v54 + 1) + 8 * i);
        id v13 = [(HMDHomeManager *)self watchSyncRetryContextBySyncIdentifier];
        uint64_t v14 = [v13 objectForKeyedSubscript:v12];

        uint32_t v15 = [v14 watchIdentifier];
        int v16 = [v15 isEqual:v7];

        if (v16)
        {
          uint64_t v17 = [v6 syncOption];
          id v18 = [v14 watchSync];
          if (v17 == [v18 syncOption])
          {
          }
          else
          {
            uint64_t v19 = [v6 syncOption];
            BOOL v20 = [v14 watchSync];
            BOOL v21 = +[HMDWatchSyncState isNewBetter:present:](HMDWatchSyncState, "isNewBetter:present:", v19, [v20 syncOption]);

            if (!v21) {
              goto LABEL_24;
            }
          }
          uint64_t v22 = (void *)MEMORY[0x1D9452090]();
          uint64_t v23 = self;
          uint64_t v24 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            uint64_t v25 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = v43;
            __int16 v60 = v25;
            __int16 v61 = 2112;
            __int16 v62 = v14;
            __int16 v63 = 2112;
            id v64 = v6;
            _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_INFO, "%{public}@Resetting retry context: %@ because a new operation got scheduled: %@", buf, 0x20u);
          }
          uint64_t v26 = [(HMDHomeManager *)v23 watchSyncRetryContextBySyncIdentifier];
          [v26 setObject:0 forKeyedSubscript:v12];

          long long v52 = 0u;
          long long v53 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          id v27 = [(HMDHomeManager *)v23 watchSyncRetryContextByRetryTimer];
          uint64_t v28 = (void *)[v27 copy];

          uint64_t v29 = [v28 countByEnumeratingWithState:&v50 objects:v58 count:16];
          if (v29)
          {
            uint64_t v30 = v29;
            uint64_t v31 = *(void *)v51;
            while (2)
            {
              for (uint64_t j = 0; j != v30; ++j)
              {
                if (*(void *)v51 != v31) {
                  objc_enumerationMutation(v28);
                }
                uint64_t v33 = *(void *)(*((void *)&v50 + 1) + 8 * j);
                uint64_t v34 = [(HMDHomeManager *)v23 watchSyncRetryContextByRetryTimer];
                int v35 = [v34 objectForKey:v33];

                if (v35 == v14)
                {
                  long long v36 = [(HMDHomeManager *)v23 watchSyncRetryContextByRetryTimer];
                  [v36 removeObjectForKey:v33];

                  goto LABEL_23;
                }
              }
              uint64_t v30 = [v28 countByEnumeratingWithState:&v50 objects:v58 count:16];
              if (v30) {
                continue;
              }
              break;
            }
          }
LABEL_23:

          id v6 = v45;
          id v7 = v46;
          self = v44;
        }
LABEL_24:
      }
      uint64_t v49 = [obj countByEnumeratingWithState:&v54 objects:v65 count:16];
      if (!v49)
      {
LABEL_26:

        break;
      }
    }
  }
  [(HMDHomeManager *)self watchSyncStateMap];
  id v38 = v37 = self;
  id v39 = [v38 objectForKeyedSubscript:v7];

  if (!v39)
  {
    uint64_t v40 = [HMDWatchSyncState alloc];
    char v41 = [(HMDHomeManager *)v37 pairedSync];
    id v39 = [(HMDWatchSyncState *)v40 initWithDeviceId:v46 pairedSync:v41];

    id v7 = v46;
    id v42 = [(HMDHomeManager *)v37 watchSyncStateMap];
    [v42 setObject:v39 forKeyedSubscript:v46];
  }
  [(HMDWatchSyncState *)v39 addNewSync:v6];
}

- (void)_addSyncOperation:(id)a3
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v7 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    id v27 = v7;
    __int16 v28 = 2112;
    id v29 = v4;
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@New sync state dictionary: %@", buf, 0x16u);
  }
  int v8 = (void *)MEMORY[0x1D9452090]();
  BOOL v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    long long v10 = HMFGetLogIdentifier();
    uint64_t v11 = [(HMDHomeManager *)self watchSyncStateMap];
    *(_DWORD *)long long buf = 138543618;
    id v27 = v10;
    __int16 v28 = 2112;
    id v29 = v11;
    _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Current sync state dictionary: %@", buf, 0x16u);
  }
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v12 = v4;
  uint64_t v13 = [v12 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v22;
    do
    {
      for (uint64_t i = 0; i != v14; ++i)
      {
        if (*(void *)v22 != v15) {
          objc_enumerationMutation(v12);
        }
        uint64_t v17 = *(void *)(*((void *)&v21 + 1) + 8 * i);
        id v18 = objc_msgSend(v12, "objectForKeyedSubscript:", v17, (void)v21);
        uint64_t v19 = [v18 unsignedIntegerValue];

        BOOL v20 = [[HMDWatchSync alloc] initWithSyncOption:v19];
        [(HMDHomeManager *)self _addSyncOperation:v20 forWatchWithIdentifier:v17];
      }
      uint64_t v14 = [v12 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }
    while (v14);
  }
}

- (void)_checkAndAddWatchDevices:(id)a3 resend:(BOOL)a4 requestFromWatch:(BOOL)a5
{
  BOOL v47 = a5;
  BOOL v5 = a4;
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  int v8 = (void *)MEMORY[0x1D9452090]();
  BOOL v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    long long v10 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    id v67 = v10;
    __int16 v68 = 2112;
    id v69 = v7;
    _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Found watches: %@", buf, 0x16u);
  }
  uint64_t v11 = [MEMORY[0x1E4F1CA48] array];
  long long v50 = [MEMORY[0x1E4F1CA60] dictionary];
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  id obj = v7;
  uint64_t v12 = [obj countByEnumeratingWithState:&v59 objects:v65 count:16];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v60;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v60 != v14) {
          objc_enumerationMutation(obj);
        }
        int v16 = [*(id *)(*((void *)&v59 + 1) + 8 * i) remoteDestinationString];
        if (v5)
        {
          uint64_t v17 = (void *)MEMORY[0x1D9452090]([v50 setObject:&unk_1F2DC9CA0 forKeyedSubscript:v16]);
          id v18 = HMFGetOSLogHandle();
          if (!os_log_type_enabled(v18, OS_LOG_TYPE_INFO)) {
            goto LABEL_20;
          }
          uint64_t v19 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543618;
          id v67 = v19;
          __int16 v68 = 2112;
          id v69 = v16;
          BOOL v20 = v18;
          long long v21 = "%{public}@Need to send complete config to watch %@";
        }
        else
        {
          long long v22 = [(HMDHomeManager *)self associatedWatchPeers];
          long long v23 = [v22 objectForKey:v16];

          if (v23)
          {
            if (v47)
            {
              uint64_t v17 = (void *)MEMORY[0x1D9452090]([v50 setObject:&unk_1F2DC9CB8 forKeyedSubscript:v16]);
              id v18 = HMFGetOSLogHandle();
              if (!os_log_type_enabled(v18, OS_LOG_TYPE_INFO)) {
                goto LABEL_20;
              }
              uint64_t v19 = HMFGetLogIdentifier();
              *(_DWORD *)long long buf = 138543618;
              id v67 = v19;
              __int16 v68 = 2112;
              id v69 = v16;
              BOOL v20 = v18;
              long long v21 = "%{public}@Watch %@ has asked to resend the home config";
            }
            else
            {
              uint64_t v17 = (void *)MEMORY[0x1D9452090]();
              id v18 = HMFGetOSLogHandle();
              if (!os_log_type_enabled(v18, OS_LOG_TYPE_INFO)) {
                goto LABEL_20;
              }
              uint64_t v19 = HMFGetLogIdentifier();
              *(_DWORD *)long long buf = 138543618;
              id v67 = v19;
              __int16 v68 = 2112;
              id v69 = v16;
              BOOL v20 = v18;
              long long v21 = "%{public}@Watch %@ is already associated";
            }
          }
          else
          {
            uint64_t v17 = (void *)MEMORY[0x1D9452090]([v50 setObject:&unk_1F2DC9CB8 forKeyedSubscript:v16]);
            id v18 = HMFGetOSLogHandle();
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_INFO)) {
              goto LABEL_20;
            }
            uint64_t v19 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            id v67 = v19;
            __int16 v68 = 2112;
            id v69 = v16;
            BOOL v20 = v18;
            long long v21 = "%{public}@Discovered watch %@, checking its config";
          }
        }
        _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, v21, buf, 0x16u);

LABEL_20:
        [v11 addObject:v16];
      }
      uint64_t v13 = [obj countByEnumeratingWithState:&v59 objects:v65 count:16];
    }
    while (v13);
  }

  long long v24 = [(HMDHomeManager *)self associatedWatchPeers];
  uint64_t v25 = (void *)[v24 copy];

  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  id v26 = v25;
  uint64_t v27 = [v26 countByEnumeratingWithState:&v55 objects:v64 count:16];
  if (v27)
  {
    uint64_t v28 = v27;
    uint64_t v29 = *(void *)v56;
    do
    {
      for (uint64_t j = 0; j != v28; ++j)
      {
        if (*(void *)v56 != v29) {
          objc_enumerationMutation(v26);
        }
        uint64_t v31 = *(void **)(*((void *)&v55 + 1) + 8 * j);
        if (([v11 containsObject:v31] & 1) == 0)
        {
          uint64_t v32 = (void *)MEMORY[0x1D9452090]();
          uint64_t v33 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
          {
            uint64_t v34 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            id v67 = v34;
            __int16 v68 = 2112;
            id v69 = v31;
            _os_log_impl(&dword_1D49D5000, v33, OS_LOG_TYPE_INFO, "%{public}@Watch %@ is no longer associated with this device", buf, 0x16u);
          }
          int v35 = [(HMDHomeManager *)self associatedWatchPeers];
          [v35 removeObjectForKey:v31];
        }
      }
      uint64_t v28 = [v26 countByEnumeratingWithState:&v55 objects:v64 count:16];
    }
    while (v28);
  }
  uint64_t v48 = v26;

  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v36 = [(HMDHomeManager *)self watchSyncStateMap];
  id v37 = (void *)[v36 copy];

  uint64_t v38 = [v37 countByEnumeratingWithState:&v51 objects:v63 count:16];
  if (v38)
  {
    uint64_t v39 = v38;
    uint64_t v40 = *(void *)v52;
    do
    {
      for (uint64_t k = 0; k != v39; ++k)
      {
        if (*(void *)v52 != v40) {
          objc_enumerationMutation(v37);
        }
        id v42 = *(void **)(*((void *)&v51 + 1) + 8 * k);
        if (([v11 containsObject:v42] & 1) == 0)
        {
          long long v43 = (void *)MEMORY[0x1D9452090]();
          uint64_t v44 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
          {
            id v45 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            id v67 = v45;
            __int16 v68 = 2112;
            id v69 = v42;
            _os_log_impl(&dword_1D49D5000, v44, OS_LOG_TYPE_INFO, "%{public}@Watch %@ is not paired with this device anymore. Taking it off the sync state list", buf, 0x16u);
          }
          id v46 = [(HMDHomeManager *)self watchSyncStateMap];
          [v46 removeObjectForKey:v42];
        }
      }
      uint64_t v39 = [v37 countByEnumeratingWithState:&v51 objects:v63 count:16];
    }
    while (v39);
  }

  [(HMDHomeManager *)self _addSyncOperation:v50];
}

- (void)_checkAndAddWatchDevicesWithResend:(BOOL)a3
{
  BOOL v3 = a3;
  if (isiOSDevice())
  {
    id v6 = [(HMDHomeManager *)self watchManager];
    BOOL v5 = [v6 connectedWatches];
    [(HMDHomeManager *)self _checkAndAddWatchDevices:v5 resend:v3 requestFromWatch:0];
  }
}

- (void)controllerKeyPairGenerated:(id)a3
{
  id v4 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __45__HMDHomeManager_controllerKeyPairGenerated___block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v4, block);
}

uint64_t __45__HMDHomeManager_controllerKeyPairGenerated___block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1D9452090]();
  BOOL v3 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    id v4 = HMFGetLogIdentifier();
    int v6 = 138543362;
    id v7 = v4;
    _os_log_impl(&dword_1D49D5000, v3, OS_LOG_TYPE_INFO, "%{public}@Controller key pair has been generated, sending them over to watch", (uint8_t *)&v6, 0xCu);
  }
  return [*(id *)(a1 + 32) _checkAndAddWatchDevicesWithResend:1];
}

- (void)_handleAreYouAtHome:(id)a3
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  BOOL v5 = [v4 uuidForKey:@"kHomeUUID"];
  uint64_t v6 = [v4 stringForKey:@"kRemoteSessionIdentifierKey"];
  id v7 = (void *)v6;
  if (v5 && v6)
  {
    uint64_t v8 = [(HMDHomeManager *)self _homeWithUUID:v5];
    BOOL v9 = (void *)MEMORY[0x1D9452090]();
    long long v10 = self;
    uint64_t v11 = HMFGetOSLogHandle();
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v8)
    {
      if (v12)
      {
        uint64_t v13 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        char v41 = v13;
        __int16 v42 = 2112;
        id v43 = v8;
        _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Received request to determine if we are at home: %@", buf, 0x16u);
      }
      uint64_t v14 = [v8 homeLocation];
      uint64_t v15 = [v4 responseHandler];

      if (v15)
      {
        int v16 = objc_msgSend(NSNumber, "numberWithBool:", v14 == 1, @"kAtHomeStateKey");
        v39[0] = v16;
        v38[1] = @"kDeviceNameKey";
        uint64_t v17 = deviceName();
        v38[2] = @"kRemoteSessionIdentifierKey";
        v39[1] = v17;
        v39[2] = v7;
        id v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v39 forKeys:v38 count:3];

        uint64_t v19 = [v4 responseHandler];
        ((void (**)(void, void, void *))v19)[2](v19, 0, v18);
      }
      BOOL v20 = [v4 destination];
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        long long v21 = v20;
      }
      else {
        long long v21 = 0;
      }
      id v22 = v21;

      if (v14 != 1 || !v22) {
        goto LABEL_25;
      }
      long long v23 = (void *)MEMORY[0x1D9452090]();
      long long v24 = v10;
      uint64_t v25 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        id v26 = HMFGetLogIdentifier();
        uint64_t v27 = [v22 device];
        *(_DWORD *)long long buf = 138543618;
        char v41 = v26;
        __int16 v42 = 2112;
        id v43 = v27;
        _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_INFO, "%{public}@This device can act as remote gateway for peer, requesting reverse connection to device: %@", buf, 0x16u);
      }
      uint64_t v28 = [(HMDHomeManager *)v24 messageDispatcher];
      uint64_t v29 = [v28 secureRemoteTransport];
      uint64_t v30 = [v22 device];
      [v29 openSecureSessionToDevice:v30 completionHandler:&__block_literal_global_1274];
    }
    else
    {
      if (v12)
      {
        long long v36 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        char v41 = v36;
        __int16 v42 = 2112;
        id v43 = v5;
        _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot find home: %@", buf, 0x16u);
      }
      id v37 = [v4 responseHandler];

      if (!v37)
      {
        uint64_t v8 = 0;
        goto LABEL_26;
      }
      id v22 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
      uint64_t v28 = [v4 responseHandler];
      ((void (**)(void, id, void))v28)[2](v28, v22, 0);
    }

LABEL_25:
LABEL_26:

    goto LABEL_27;
  }
  uint64_t v31 = (void *)MEMORY[0x1D9452090]();
  uint64_t v32 = self;
  uint64_t v33 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v34 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    char v41 = v34;
    __int16 v42 = 2112;
    id v43 = v4;
    _os_log_impl(&dword_1D49D5000, v33, OS_LOG_TYPE_DEFAULT, "%{public}@Bad request for message %@", buf, 0x16u);
  }
  int v35 = [v4 responseHandler];

  if (v35)
  {
    uint64_t v8 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    id v22 = [v4 responseHandler];
    (*((void (**)(id, void *, void))v22 + 2))(v22, v8, 0);
    goto LABEL_25;
  }
LABEL_27:
}

void __38__HMDHomeManager__handleAreYouAtHome___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  BOOL v3 = (void *)MEMORY[0x1D9452090]();
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    BOOL v5 = HMFGetLogIdentifier();
    int v6 = 138543618;
    id v7 = v5;
    __int16 v8 = 2112;
    id v9 = v2;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@Setup a reverse connection to client that requested remote access with error: %@", (uint8_t *)&v6, 0x16u);
  }
}

- (BOOL)_handleControllerKeyAvailable
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (isWatch()) {
    return 0;
  }
  id v4 = [MEMORY[0x1E4F5BE48] systemStore];
  id v27 = 0;
  id v28 = 0;
  id v26 = 0;
  [v4 getCurrentiCloudIdentifier:&v28 controllerPairingIdentifier:&v27 error:&v26];
  id v5 = v28;
  id v6 = v27;
  id v7 = v26;
  id v24 = v7;
  id v25 = 0;
  int v8 = [v4 getControllerPublicKey:0 secretKey:0 username:&v25 allowCreation:0 error:&v24];
  id v9 = v25;
  id v10 = v24;

  char v3 = 0;
  if (v8)
  {
    char v11 = [v9 isEqualToString:v6];
    uint64_t v12 = -[HMDHomeManager activeAccountIdentifier](self);
    uint64_t v13 = (void *)v12;
    if (v12)
    {
      if (![(id)v12 isEqualToString:v5]
        || (uint64_t v12 = [v9 isEqualToString:v6], (v12 & 1) == 0))
      {
        uint64_t v14 = (void *)MEMORY[0x1D9452090]();
        uint64_t v15 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          int v16 = v21 = v14;
          *(_DWORD *)long long buf = 138543874;
          uint64_t v30 = v16;
          __int16 v31 = 2112;
          uint64_t v32 = v13;
          __int16 v33 = 2112;
          id v34 = v9;
          _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@Updating to the current iCloud controller identifier %@ and pairing user name %@", buf, 0x20u);

          uint64_t v14 = v21;
        }

        uint64_t v23 = 0;
        uint64_t v12 = [v4 updateCurrentiCloudIdentifier:v13 controllerPairingIdentifier:v9 error:&v23];
      }
    }
    char v3 = v11 ^ 1;
    if ((v11 & 1) == 0)
    {
      uint64_t v17 = (void *)MEMORY[0x1D9452090](v12);
      id v18 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        uint64_t v19 = v22 = v17;
        *(_DWORD *)long long buf = 138543362;
        uint64_t v30 = v19;
        _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@Controller user name changed, re-adding the watch", buf, 0xCu);

        uint64_t v17 = v22;
      }

      [(HMDHomeManager *)self _checkAndAddWatchDevicesWithResend:1];
    }
  }
  return v3;
}

- (void)cloudHomeSettingsUpdated:(id)a3
{
  id v4 = a3;
  id v5 = +[HMDAppleAccountSettings sharedSettings];
  char v6 = [v5 isHomeEnabled];

  id v7 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __43__HMDHomeManager_cloudHomeSettingsUpdated___block_invoke;
  block[3] = &unk_1E6A18708;
  char v11 = v6;
  void block[4] = self;
  id v10 = v4;
  id v8 = v4;
  dispatch_async(v7, block);
}

void __43__HMDHomeManager_cloudHomeSettingsUpdated___block_invoke(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = HMFGetLogIdentifier();
    char v6 = (void *)v5;
    id v7 = "";
    if (!*(unsigned char *)(a1 + 48)) {
      id v7 = "not ";
    }
    *(_DWORD *)long long buf = 138543618;
    uint64_t v30 = v5;
    __int16 v31 = 2080;
    uint64_t v32 = v7;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@HomeKit iCloud data class switch was modified to %senabled", buf, 0x16u);
  }
  id v8 = [*(id *)(a1 + 32) cloudDataSyncStateFilter];
  [v8 updateiCloudSwitchState:*(unsigned __int8 *)(a1 + 48)];

  if ([*(id *)(a1 + 32) accountActive])
  {
    if (*(unsigned char *)(a1 + 48))
    {
      id v9 = [*(id *)(a1 + 40) userInfo];
      id v10 = objc_msgSend(v9, "hmf_numberForKey:", @"kIsUserInitiated");
      int v11 = [v10 BOOLValue];

      if (v11)
      {
        uint64_t v12 = [*(id *)(a1 + 32) syncManager];
        [v12 pause];

        objc_initWeak((id *)buf, *(id *)(a1 + 32));
        uint64_t v13 = [*(id *)(a1 + 32) cloudDataSyncManager];
        v27[0] = MEMORY[0x1E4F143A8];
        v27[1] = 3221225472;
        v27[2] = __43__HMDHomeManager_cloudHomeSettingsUpdated___block_invoke_1272;
        v27[3] = &unk_1E6A18528;
        objc_copyWeak(&v28, (id *)buf);
        [v13 resetCloudCache:v27];

        objc_destroyWeak(&v28);
        objc_destroyWeak((id *)buf);
      }
      objc_msgSend(*(id *)(a1 + 32), "_updateCloudDataSyncWithAccountState:", objc_msgSend(*(id *)(a1 + 32), "accountActive"));
    }
    else
    {
      uint64_t v14 = (void *)MEMORY[0x1D9452090]();
      id v15 = *(id *)(a1 + 32);
      int v16 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v30 = (uint64_t)v17;
        _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_DEFAULT, "%{public}@Posting notification kCloudServerTokenDataResetNotification to clear server token data because iCloud switch is disabled", buf, 0xCu);
      }
      id v18 = [*(id *)(a1 + 32) notificationCenter];
      [v18 postNotificationName:@"kCloudServerTokenDataResetNotification" object:*(void *)(a1 + 32)];

      uint64_t v19 = [*(id *)(a1 + 40) userInfo];
      BOOL v20 = objc_msgSend(v19, "hmf_numberForKey:", @"kIsUserInitiated");
      int v21 = [v20 BOOLValue];

      if (v21)
      {
        id v22 = +[HMDBackingStore resetBackingStore];
        if (v22)
        {
          uint64_t v23 = (void *)MEMORY[0x1D9452090]();
          id v24 = *(id *)(a1 + 32);
          id v25 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            id v26 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            uint64_t v30 = (uint64_t)v26;
            __int16 v31 = 2112;
            uint64_t v32 = v22;
            _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_ERROR, "%{public}@BackingStore reset finished with error: %@", buf, 0x16u);
          }
        }
      }
    }
  }
}

void __43__HMDHomeManager_cloudHomeSettingsUpdated___block_invoke_1272(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = [WeakRetained syncManager];
  [v3 cancelOperations];

  id v4 = [WeakRetained syncManager];
  [v4 resume];

  if (!a2) {
    [WeakRetained updateAccountAvailabilityChanged:0];
  }
}

- (void)_handleUpdateiCloudSwitchState:(id)a3
{
  id v4 = a3;
  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __49__HMDHomeManager__handleUpdateiCloudSwitchState___block_invoke;
  aBlock[3] = &unk_1E6A17758;
  objc_copyWeak(&v13, &location);
  id v5 = v4;
  id v12 = v5;
  char v6 = _Block_copy(aBlock);
  char v10 = 0;
  uint64_t v7 = [v5 BOOLForKey:@"kiCloudSwitchStateKey" keyPresent:&v10];
  if (v10 && (uint64_t v8 = v7, [(HMDHomeManager *)self accountActive]))
  {
    id v9 = +[HMDAppleAccountSettings sharedSettings];
    [v9 updateHomeEnabled:v8 completionHandler:v6];
  }
  else
  {
    id v9 = +[HMDAppleAccountSettings sharedSettings];
    [v9 updateHomeEnabled:0 completionHandler:v6];
  }

  objc_destroyWeak(&v13);
  objc_destroyWeak(&location);
}

void __49__HMDHomeManager__handleUpdateiCloudSwitchState___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v3)
  {
    id v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = WeakRetained;
    uint64_t v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = HMFGetLogIdentifier();
      int v11 = 138543618;
      id v12 = v8;
      __int16 v13 = 2112;
      id v14 = v3;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to update iCloud state with error: %@", (uint8_t *)&v11, 0x16u);
    }
  }
  id v9 = [*(id *)(a1 + 32) responseHandler];

  if (v9)
  {
    char v10 = [*(id *)(a1 + 32) responseHandler];
    ((void (**)(void, id, void))v10)[2](v10, v3, 0);
  }
}

- (void)_handleQueryiCloudSwitchState:(id)a3
{
  v10[1] = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  id v4 = +[HMDAppleAccountSettings sharedSettings];
  uint64_t v5 = [v4 isHomeEnabled];

  id v6 = [v3 responseHandler];

  id v9 = @"kiCloudSwitchStateKey";
  uint64_t v7 = [NSNumber numberWithBool:v5];
  v10[0] = v7;
  uint64_t v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:&v9 count:1];
  ((void (**)(void, void, void *))v6)[2](v6, 0, v8);
}

- (void)_auditDuplicatePreviouslyAddedAccessory:(id)a3
{
  id v4 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v6 = v5;
  id v7 = v4;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v9 = v8;

  if (v6 | v9)
  {
    dispatch_time_t v10 = dispatch_time(0, 60000000000);
    int v11 = [(HMDHomeManager *)self workQueue];
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    void v12[2] = __58__HMDHomeManager__auditDuplicatePreviouslyAddedAccessory___block_invoke;
    v12[3] = &unk_1E6A18668;
    void v12[4] = self;
    id v13 = v7;
    id v14 = (id)v6;
    id v15 = (id)v9;
    dispatch_after(v10, v11, v12);
  }
}

void __58__HMDHomeManager__auditDuplicatePreviouslyAddedAccessory___block_invoke(uint64_t a1)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1D9452090]();
  uint64_t v56 = a1;
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    uint64_t v70 = v5;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@Auditing accessories", buf, 0xCu);
  }
  uint64_t v6 = a1;
  id v7 = [*(id *)(a1 + 40) home];

  if (v7)
  {
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    id obj = [*(id *)(a1 + 32) homes];
    uint64_t v8 = [obj countByEnumeratingWithState:&v65 objects:v78 count:16];
    if (!v8) {
      goto LABEL_43;
    }
    uint64_t v10 = v8;
    uint64_t v11 = *(void *)v66;
    *(void *)&long long v9 = 138544130;
    long long v53 = v9;
    uint64_t v54 = *(void *)v66;
    while (1)
    {
      uint64_t v12 = 0;
      uint64_t v55 = v10;
      do
      {
        if (*(void *)v66 != v11) {
          objc_enumerationMutation(obj);
        }
        id v13 = *(void **)(*((void *)&v65 + 1) + 8 * v12);
        if (!objc_msgSend(v13, "isOwnerUser", v53)) {
          goto LABEL_41;
        }
        long long v63 = 0u;
        long long v64 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        id v14 = [v13 accessories];
        uint64_t v15 = [v14 countByEnumeratingWithState:&v61 objects:v77 count:16];
        if (!v15)
        {
LABEL_40:

          goto LABEL_41;
        }
        uint64_t v16 = v15;
        uint64_t v17 = *(void *)v62;
        uint64_t v58 = v12;
        uint64_t v59 = *(void *)v62;
LABEL_12:
        uint64_t v18 = 0;
        uint64_t v60 = v16;
        while (1)
        {
          if (*(void *)v62 != v17) {
            objc_enumerationMutation(v14);
          }
          uint64_t v19 = *(void **)(*((void *)&v61 + 1) + 8 * v18);
          BOOL v20 = *(void **)(v6 + 48);
          if (!v20) {
            goto LABEL_20;
          }
          uint64_t v21 = [v20 serialNumber];
          if (!v21) {
            goto LABEL_20;
          }
          id v22 = (void *)v21;
          uint64_t v23 = v14;
          [*(id *)(v6 + 48) uuid];
          id v25 = v24 = v6;
          id v26 = [v19 uuid];
          if (!objc_msgSend(v25, "hmf_isEqualToUUID:", v26)) {
            break;
          }

          id v14 = v23;
          uint64_t v6 = v24;
          uint64_t v17 = v59;
          uint64_t v16 = v60;
LABEL_20:
          uint64_t v30 = *(void **)(v6 + 56);
          if (v30) {
            BOOL v31 = v19 == v30;
          }
          else {
            BOOL v31 = 1;
          }
          if (!v31)
          {
            id v32 = v19;
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              uint64_t v33 = v32;
            }
            else {
              uint64_t v33 = 0;
            }
            id v34 = v33;

            if (v34)
            {
              uint64_t v35 = [*(id *)(v6 + 56) identifier];
              long long v36 = [v34 identifier];
              int v37 = [v35 isEqual:v36];

              if (v37)
              {
                uint64_t v38 = (void *)MEMORY[0x1D9452090]();
                uint64_t v39 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
                {
                  uint64_t v40 = HMFGetLogIdentifier();
                  char v41 = *(void **)(v56 + 56);
                  __int16 v42 = [v41 identifier];
                  *(_DWORD *)long long buf = v53;
                  uint64_t v70 = v40;
                  __int16 v71 = 2112;
                  id v72 = v34;
                  __int16 v73 = 2112;
                  BOOL v74 = v41;
                  __int16 v75 = 2112;
                  long long v76 = v42;
                  _os_log_impl(&dword_1D49D5000, v39, OS_LOG_TYPE_INFO, "%{public}@Found an existing media accessory (%@) match the newly added hap accessory (%@) with device identifier %@, trying to remove it.", buf, 0x2Au);
                }

                uint64_t v11 = v54;
                uint64_t v10 = v55;
                uint64_t v12 = v58;
                uint64_t v6 = v56;
LABEL_39:
                [v32 sendRemovalRequest];
                id v14 = v32;
                goto LABEL_40;
              }
            }
          }
          if (v16 == ++v18)
          {
            uint64_t v16 = [v14 countByEnumeratingWithState:&v61 objects:v77 count:16];
            if (v16) {
              goto LABEL_12;
            }
            uint64_t v11 = v54;
            uint64_t v10 = v55;
            uint64_t v12 = v58;
            goto LABEL_40;
          }
        }
        id v27 = [*(id *)(v24 + 48) serialNumber];
        id v28 = [v19 serialNumber];
        int v29 = [v27 isEqual:v28];

        id v14 = v23;
        uint64_t v6 = v24;
        uint64_t v17 = v59;
        uint64_t v16 = v60;
        if (!v29) {
          goto LABEL_20;
        }
        id v43 = (void *)MEMORY[0x1D9452090]();
        uint64_t v44 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
        {
          id v45 = HMFGetLogIdentifier();
          id v46 = *(void **)(v56 + 48);
          BOOL v47 = [v46 serialNumber];
          *(_DWORD *)long long buf = v53;
          uint64_t v70 = v45;
          __int16 v71 = 2112;
          id v72 = v19;
          __int16 v73 = 2112;
          BOOL v74 = v46;
          __int16 v75 = 2112;
          long long v76 = v47;
          _os_log_impl(&dword_1D49D5000, v44, OS_LOG_TYPE_INFO, "%{public}@Found an existing accessory (%@) match the newly added accessory (%@) with serialNumber %@, trying to remove it.", buf, 0x2Au);
        }
        id v32 = v19;

        uint64_t v11 = v54;
        uint64_t v10 = v55;
        uint64_t v12 = v58;
        uint64_t v6 = v56;
        if (v32) {
          goto LABEL_39;
        }
LABEL_41:
        ++v12;
      }
      while (v12 != v10);
      uint64_t v10 = [obj countByEnumeratingWithState:&v65 objects:v78 count:16];
      if (!v10)
      {
LABEL_43:

        return;
      }
    }
  }
  uint64_t v48 = (void *)MEMORY[0x1D9452090]();
  id v49 = *(id *)(a1 + 32);
  long long v50 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
  {
    long long v51 = HMFGetLogIdentifier();
    long long v52 = *(void **)(a1 + 40);
    *(_DWORD *)long long buf = 138543618;
    uint64_t v70 = v51;
    __int16 v71 = 2112;
    id v72 = v52;
    _os_log_impl(&dword_1D49D5000, v50, OS_LOG_TYPE_ERROR, "%{public}@Skipping audit as accessory (%@) or home has been removed", buf, 0x16u);
  }
}

- (void)auditDuplicatePreviouslyAddedAccessory:(id)a3
{
  id v4 = [a3 userInfo];
  uint64_t v5 = [v4 objectForKeyedSubscript:@"HMDAccessoryNotificationKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = v6;

  [(HMDHomeManager *)self _auditDuplicatePreviouslyAddedAccessory:v7];
}

- (void)_handleRetrieveVendorIdentifier:(id)a3
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  id v4 = [v3 responseHandler];

  if (v4)
  {
    uint64_t v5 = [v3 stringForKey:@"kCompanionApplicationIdentifierKey"];
    if (!v5) {
      goto LABEL_8;
    }
    uint64_t v6 = +[HMDApplicationVendorIDStore sharedStore];
    id v7 = [v6 vendorIDForApplication:v5];

    uint64_t v8 = (void *)MEMORY[0x1D9452090]();
    long long v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543874;
      BOOL v20 = v10;
      __int16 v21 = 2112;
      id v22 = v7;
      __int16 v23 = 2112;
      uint64_t v24 = v5;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Retrieved vendor ID %@ for application bundle ID: %@", buf, 0x20u);
    }
    if (v7
      && (uint64_t v17 = @"kCompanionApplicationVendorIdentifierKey",
          uint64_t v18 = v7,
          [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v18 forKeys:&v17 count:1],
          uint64_t v11 = objc_claimAutoreleasedReturnValue(),
          v7,
          v11))
    {
      uint64_t v12 = 0;
    }
    else
    {
LABEL_8:
      uint64_t v12 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:2 userInfo:0];
      uint64_t v11 = 0;
    }
    id v13 = [v3 responseHandler];
    ((void (**)(void, void *, void *))v13)[2](v13, v12, v11);
  }
  else
  {
    id v14 = (void *)MEMORY[0x1D9452090]();
    uint64_t v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      BOOL v20 = v16;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_ERROR, "%{public}@No response handler set for the retrieve vendor identifier message", buf, 0xCu);
    }
  }
}

- (void)_handleRequestForCompanionKeysSync:(id)a3
{
  id v8 = a3;
  id v4 = [(HMDHomeManager *)self watchManager];
  uint64_t v5 = [v4 connectedWatches];
  [(HMDHomeManager *)self _checkAndAddWatchDevices:v5 resend:0 requestFromWatch:1];

  uint64_t v6 = [v8 responseHandler];

  if (v6)
  {
    id v7 = [v8 responseHandler];
    v7[2](v7, 0, 0);
  }
}

- (BOOL)_removeAndAddKeyPair:(id)a3 userName:(id)a4 eraseReason:(unint64_t)a5
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  [(HMDHomeManager *)self _eraseLocalHomeConfigurationWithReason:a5];
  uint64_t v10 = [MEMORY[0x1E4F5BE48] systemStore];
  int v11 = [v10 removeControllerKeyPairWithError:0];
  uint64_t v12 = (void *)MEMORY[0x1D9452090]();
  id v13 = HMFGetOSLogHandle();
  id v14 = v13;
  if (v11)
  {
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO)) {
      goto LABEL_7;
    }
    uint64_t v15 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    uint64_t v40 = v15;
    uint64_t v16 = "%{public}@Removed controller key from store";
    uint64_t v17 = v14;
    os_log_type_t v18 = OS_LOG_TYPE_INFO;
  }
  else
  {
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    uint64_t v15 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    uint64_t v40 = v15;
    uint64_t v16 = "%{public}@Failed removing controller key from store";
    uint64_t v17 = v14;
    os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  }
  _os_log_impl(&dword_1D49D5000, v17, v18, v16, buf, 0xCu);

LABEL_7:
  id v38 = 0;
  int v19 = [v10 saveKeyPair:v8 username:v9 syncable:0 error:&v38];
  id v20 = v38;
  __int16 v21 = v20;
  if (v19)
  {
    id v36 = v20;
    id v37 = 0;
    LODWORD(v22) = [v10 deserializeKeyPair:v8 publicKey:&v37 secretKey:0 error:&v36];
    id v23 = v37;
    id v24 = v36;

    if (v22)
    {
      uint64_t v25 = [(HMDHomeManager *)self appleAccountManager];
      id v26 = [v25 account];

      if (v26)
      {
        id v27 = (void *)[objc_alloc(MEMORY[0x1E4F65510]) initWithPairingKeyData:v23];
        id v28 = (void *)[objc_alloc(MEMORY[0x1E4F5BE00]) initWithIdentifier:v9 publicKey:v27 privateKey:0 permissions:0];
        int v29 = +[HMDIdentityRegistry sharedRegistry];
        [v29 registerIdentity:v28 account:v26 object:v26];
      }
    }
    else
    {
      id v32 = (void *)MEMORY[0x1D9452090]();
      uint64_t v33 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        id v34 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v40 = v34;
        _os_log_impl(&dword_1D49D5000, v33, OS_LOG_TYPE_INFO, "%{public}@Deserialize of key pair failed", buf, 0xCu);
      }
    }

    __int16 v21 = v24;
  }
  else
  {
    id v22 = (void *)MEMORY[0x1D9452090]();
    uint64_t v30 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      BOOL v31 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v40 = v31;
      _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_INFO, "%{public}@Failed to save key pair", buf, 0xCu);
    }
    LOBYTE(v22) = 0;
  }

  return (char)v22;
}

- (void)__handleInitialFetch:(id)a3
{
  id v4 = [a3 userInfo];
  uint64_t v5 = objc_msgSend(v4, "hmf_UUIDForKey:", @"HMDCR.id");

  uint64_t v6 = [(HMDHomeManager *)self workQueue];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __39__HMDHomeManager___handleInitialFetch___block_invoke;
  v8[3] = &unk_1E6A197C8;
  id v9 = v5;
  uint64_t v10 = self;
  id v7 = v5;
  dispatch_async(v6, v8);
}

void __39__HMDHomeManager___handleInitialFetch___block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 32))
  {
    id v2 = (void *)MEMORY[0x1D9452090]();
    id v3 = *(id *)(a1 + 40);
    id v4 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = HMFGetLogIdentifier();
      int v11 = 138543362;
      uint64_t v12 = v5;
      _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@Received legacy fetch, controller key established.", (uint8_t *)&v11, 0xCu);
    }
    uint64_t v6 = [*(id *)(a1 + 40) appleAccountManager];
    id v7 = [v6 account];

    id v8 = [MEMORY[0x1E4F5BE48] systemStore];
    id v9 = [v8 getLocalPairingIdentity:0];

    if (v7)
    {
      if (v9)
      {
        uint64_t v10 = +[HMDIdentityRegistry sharedRegistry];
        [v10 registerIdentity:v9 account:v7 object:v7];
      }
    }
  }
}

- (void)__handleAppleAccountUpdated:(id)a3 previousAccount:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __62__HMDHomeManager___handleAppleAccountUpdated_previousAccount___block_invoke;
  block[3] = &unk_1E6A19668;
  id v12 = v7;
  id v13 = v6;
  id v14 = self;
  id v9 = v6;
  id v10 = v7;
  dispatch_async(v8, block);
}

void __62__HMDHomeManager___handleAppleAccountUpdated_previousAccount___block_invoke(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v2 = [MEMORY[0x1E4F5BE48] systemStore];
  id v3 = [v2 getLocalPairingIdentity:0];

  if (*(void *)(a1 + 32)) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = +[HMDIdentityRegistry sharedRegistry];
    [v5 deregisterIdentity:v3 object:*(void *)(a1 + 32)];
  }
  if (*(void *)(a1 + 40) && v3)
  {
    id v6 = +[HMDIdentityRegistry sharedRegistry];
    [v6 registerIdentity:v3 account:*(void *)(a1 + 40) object:*(void *)(a1 + 40)];
  }
  [*(id *)(a1 + 48) _notifyClientsOfUpdatedStatus];
  uint64_t v7 = [*(id *)(a1 + 48) postFinishSetupForCurrentAccessoryFollowUpIfNeeded];
  if (*(void *)(a1 + 40))
  {
    id v8 = (void *)MEMORY[0x1D9452090](v7);
    id v9 = *(id *)(a1 + 48);
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = HMFGetLogIdentifier();
      int v26 = 138543362;
      id v27 = v11;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Handling account sign in", (uint8_t *)&v26, 0xCu);
    }
    if (isWatch())
    {
      [*(id *)(a1 + 48) _updateCloudDataSyncWithAccountState:1];
    }
    else
    {
      int v19 = (void *)MEMORY[0x1D9452090]();
      id v20 = *(id *)(a1 + 48);
      __int16 v21 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        id v22 = HMFGetLogIdentifier();
        int v26 = 138543362;
        id v27 = v22;
        _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@Clearing CloudKit account status", (uint8_t *)&v26, 0xCu);
      }
      [*(id *)(a1 + 48) setCloudkitAccountStatusDetermined:0];
    }
    [*(id *)(a1 + 48) setBackOffOperationInProgress:0];
    id v23 = [*(id *)(a1 + 48) cloudDataSyncStateFilter];
    [v23 updateiCloudAccountActive:1];

    [*(id *)(a1 + 48) _resetCloudOperationRetryCounters];
    id v24 = [*(id *)(a1 + 48) multiUserStatusController];
    [v24 didChangeHasActiveAccountState:0];

    uint64_t v25 = [*(id *)(a1 + 48) notificationCenter];
    [v25 postNotificationName:@"HMDHomeManagerKeyTransferResetTimerNotification" object:*(void *)(a1 + 48) userInfo:0];
  }
  else if (*(void *)(a1 + 32))
  {
    id v12 = (void *)MEMORY[0x1D9452090](v7);
    id v13 = *(id *)(a1 + 48);
    id v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = HMFGetLogIdentifier();
      int v26 = 138543362;
      id v27 = v15;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_DEFAULT, "%{public}@Handling account sign out", (uint8_t *)&v26, 0xCu);
    }
    uint64_t v16 = [*(id *)(a1 + 48) multiUserStatusController];
    [v16 didChangeHasActiveAccountState:0];

    [*(id *)(a1 + 48) _eraseLocalHomeConfigurationAfterSignOut];
    [*(id *)(a1 + 48) _updateCloudDataSyncWithAccountState:0];
    uint64_t v17 = [*(id *)(a1 + 48) cloudDataSyncStateFilter];
    [v17 updateiCloudAccountActive:0];

    [*(id *)(a1 + 48) setBackOffOperationInProgress:0];
    [*(id *)(a1 + 48) setCloudkitAccountStatusDetermined:0];
    [*(id *)(a1 + 48) _resetCloudOperationRetryCounters];
    id v18 = +[HMDPersistentStore archiveCloudServerTokenData:0];
    [*(id *)(a1 + 48) updatePowerAssertion];
  }
}

- (void)__handleAppleAccountUpdated:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [v4 userInfo];
  id v6 = [v5 objectForKeyedSubscript:@"HMDAccountNotificationKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  id v12 = v7;

  id v8 = [v4 userInfo];

  id v9 = [v8 objectForKeyedSubscript:@"HMDPreviousAccountNotificationKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v10 = v9;
  }
  else {
    id v10 = 0;
  }
  id v11 = v10;

  [(HMDHomeManager *)self __handleAppleAccountUpdated:v12 previousAccount:v11];
}

- (BOOL)setLocalPairingIdentity:(id)a3 error:(id *)a4
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  uint64_t v7 = [MEMORY[0x1E4F5BE48] systemStore];
  id v8 = [v7 getLocalPairingIdentity:0];
  if ([v8 isEqual:v6])
  {
    id v9 = (void *)MEMORY[0x1D9452090]();
    id v10 = self;
    id v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      id v12 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v39 = v12;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Skipping updating pairing identity, it matches current identity", buf, 0xCu);
    }
    BOOL v13 = 1;
  }
  else
  {
    id v14 = [(HMDHomeManager *)self homes];
    uint64_t v15 = [v14 count];

    if (v15)
    {
      uint64_t v16 = (void *)MEMORY[0x1D9452090]();
      uint64_t v17 = self;
      id v18 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        int v19 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v39 = v19;
        _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@Found some existing homes which must be some cruft from last user. Going to clean it up before setting up this device for HH1", buf, 0xCu);
      }
      [(HMDHomeManager *)v17 _eraseLocalHomeConfiguration];
    }
    if ([v7 saveLocalPairingIdentity:v6 syncable:0 error:a4])
    {
      id v20 = [v6 publicPairingIdentity];
      id v37 = 0;
      __int16 v21 = +[HMDPersistentStore controllerUsernameForPairingIdentity:v20 error:&v37];
      id v22 = v37;

      BOOL v13 = v21 != 0;
      id v23 = (void *)MEMORY[0x1D9452090]();
      id v24 = self;
      uint64_t v25 = HMFGetOSLogHandle();
      int v26 = v25;
      if (v21)
      {
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          id v27 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543362;
          uint64_t v39 = v27;
          _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_DEFAULT, "%{public}@Updating controller username on setting local pairing identity", buf, 0xCu);
        }
        [v7 updateActiveControllerPairingIdentifier:v21];
        uint64_t v28 = [(HMDHomeManager *)v24 appleAccountManager];
        int v29 = [v28 account];

        if (v29)
        {
          uint64_t v30 = +[HMDIdentityRegistry sharedRegistry];
          [v30 registerIdentity:v6 account:v29 object:v29];
        }
      }
      else
      {
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          uint64_t v35 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543618;
          uint64_t v39 = v35;
          __int16 v40 = 2112;
          id v41 = v22;
          _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_ERROR, "%{public}@Unable to find or set pairing identity as active. error: %@", buf, 0x16u);
        }
      }
    }
    else
    {
      BOOL v31 = (void *)MEMORY[0x1D9452090]();
      id v32 = self;
      uint64_t v33 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        id v34 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v39 = v34;
        _os_log_impl(&dword_1D49D5000, v33, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to save local pairing identity", buf, 0xCu);
      }
      BOOL v13 = 0;
    }
  }

  return v13;
}

- (void)_handleCompanionKeysSync:(id)a3
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [v4 dataForKey:@"kControllerKeyPairKey"];
  id v6 = [v4 stringForKey:@"kControllerPairingNameKey"];
  uint64_t v7 = [v4 dataForKey:@"kControllerUniqueDeviceIdSaltKey"];
  id v8 = [v4 dataForKey:@"kControllerAssistantTeamIdentifierKey"];
  id v9 = [v4 responseHandler];

  if (v9)
  {
    if (v5 && v7 && v8)
    {
      uint64_t v30 = v6;
      if ([(HMDHomeManager *)self _removeAndAddKeyPair:v5 userName:v6 eraseReason:1])
      {
        id v10 = +[HMDHAPMetadata getSharedInstance];
        v31[0] = @"kHomedVersionKey";
        id v11 = (id)homedVersion;
        v32[0] = v11;
        v31[1] = @"kMetadataInfoVersionKey";
        id v12 = [v10 version];
        v32[1] = v12;
        void v31[2] = @"kMetadataInfoSchemaVersionKey";
        BOOL v13 = [v10 schemaVersion];
        void v32[2] = v13;
        id v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v32 forKeys:v31 count:3];

        [(HMDHomeManager *)self _setUniqueDeviceIdSalt:v7];
        [(HMDHomeManager *)self _saveAssistantHashingData:v8];
      }
      else
      {
        id v23 = (void *)MEMORY[0x1D9452090]();
        id v24 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          uint64_t v25 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543362;
          id v34 = v25;
          _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_INFO, "%{public}@Failed to save the key pair to keychain", buf, 0xCu);
        }
        id v14 = 0;
      }
      int v26 = (void *)MEMORY[0x1D9452090]();
      id v27 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        uint64_t v28 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        id v34 = v28;
        _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_INFO, "%{public}@Answering Companion Sync request", buf, 0xCu);
      }
      int v29 = [v4 responseHandler];
      ((void (**)(void, void, void *))v29)[2](v29, 0, v14);

      id v6 = v30;
    }
    else
    {
      id v18 = (void *)MEMORY[0x1D9452090]();
      int v19 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        id v20 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        id v34 = v20;
        _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_ERROR, "%{public}@Key pair/salts are missing the companion key sync message", buf, 0xCu);
      }
      __int16 v21 = [v4 responseHandler];
      id v22 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
      ((void (**)(void, void *, void))v21)[2](v21, v22, 0);
    }
  }
  else
  {
    uint64_t v15 = (void *)MEMORY[0x1D9452090]();
    uint64_t v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v34 = v17;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_ERROR, "%{public}@No response handler", buf, 0xCu);
    }
  }
}

- (void)_handleHomesConfigSync:(id)a3
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = +[HMDHAPMetadata getSharedInstance];
  id v6 = [MEMORY[0x1E4F1CA60] dictionary];
  id v7 = (id)homedVersion;
  [v6 setObject:v7 forKeyedSubscript:@"kHomedVersionKey"];

  id v8 = [v5 version];
  [v6 setObject:v8 forKeyedSubscript:@"kMetadataInfoVersionKey"];

  id v9 = [v5 schemaVersion];
  [v6 setObject:v9 forKeyedSubscript:@"kMetadataInfoSchemaVersionKey"];

  id v10 = [(HMDHomeManager *)self primaryHomeUUID];

  if (v10)
  {
    id v11 = [(HMDHomeManager *)self primaryHomeUUID];
    id v12 = [v11 UUIDString];
    [v6 setObject:v12 forKeyedSubscript:@"kPrimaryHomeUUIDKey"];
  }
  BOOL v13 = [v4 messagePayload];
  id v14 = objc_msgSend(v13, "hmf_UUIDForKey:", @"kCurrentHomeUUIDKey");

  if (v14) {
    [(HMDHomeManager *)self _notifyCurrentHomeUpdated:v14 isLocalUpdate:0];
  }
  uint64_t v15 = [(HMDHomeManager *)self _prepareHomesVersionDict];
  if (v15) {
    [v6 setObject:v15 forKeyedSubscript:@"kHomeConfigHomesKey"];
  }
  uint64_t v16 = [v4 remoteSourceDevice];
  uint64_t v17 = [v16 version];
  id v18 = [[HMDHomeKitVersion alloc] initWithVersionString:@"4.1.1"];
  int v19 = [v17 isAtLeastVersion:v18];

  if (!v19)
  {
    uint64_t v25 = (void *)MEMORY[0x1D9452090]();
    int v26 = self;
    id v27 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      uint64_t v28 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v41 = v28;
      _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_INFO, "%{public}@Responding with legacy pairing identity", buf, 0xCu);
    }
    int v29 = [MEMORY[0x1E4F5BE48] systemStore];
    id v37 = 0;
    id v38 = 0;
    id v36 = 0;
    [v29 getControllerPublicKey:0 secretKey:0 keyPair:&v38 username:&v37 allowCreation:0 error:&v36];
    id v22 = v38;
    id v23 = v37;
    id v21 = v36;

    if (v22) {
      [v6 setObject:v22 forKeyedSubscript:@"kControllerKeyPairKey"];
    }
    if (v23) {
      [v6 setObject:v23 forKeyedSubscript:@"kControllerPairingNameKey"];
    }
    goto LABEL_16;
  }
  id v20 = [MEMORY[0x1E4F5BE48] systemStore];
  id v39 = 0;
  id v21 = [v20 getLocalPairingIdentity:&v39];
  id v22 = v39;

  if (v21)
  {
    id v23 = [v21 publicPairingIdentity];
    id v24 = encodeRootObject();
    [v6 setObject:v24 forKeyedSubscript:@"pairingIdentity"];

LABEL_16:
    goto LABEL_17;
  }
  id v32 = (void *)MEMORY[0x1D9452090]();
  uint64_t v33 = self;
  id v34 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v35 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    id v41 = v35;
    __int16 v42 = 2112;
    id v43 = v22;
    _os_log_impl(&dword_1D49D5000, v34, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to get local pairing identity with error: %@", buf, 0x16u);
  }
  id v21 = 0;
LABEL_17:

  uint64_t v30 = +[HMDHomeManager getUniqueDeviceIdSalt];
  if (v30) {
    [v6 setObject:v30 forKeyedSubscript:@"kControllerUniqueDeviceIdSaltKey"];
  }
  BOOL v31 = [v4 responseHandler];
  ((void (**)(void, void, void *))v31)[2](v31, 0, v6);
}

- (id)_prepareHomesVersionDict
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = [MEMORY[0x1E4F1CA60] dictionary];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v4 = [(HMDHomeManager *)self homes];
  uint64_t v5 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        id v10 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v9, "configurationVersion"));
        id v11 = [v9 uuid];
        id v12 = [v11 UUIDString];
        [v3 setObject:v10 forKeyedSubscript:v12];
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v6);
  }

  if ([v3 count]) {
    BOOL v13 = (void *)[v3 copy];
  }
  else {
    BOOL v13 = 0;
  }

  return v13;
}

- (void)processTransactionsFromHomeDataSync:(id)a3 accessories:(id)a4 version:(int64_t)a5 completion:(id)a6
{
  v66[1] = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v43 = a4;
  __int16 v42 = (void (**)(void))a6;
  v66[0] = v10;
  id v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v66 count:1];
  [(HMDHomeManager *)self _associateAccessories:v43 withHomes:v11];

  [v10 fixupHomeAfterDecoding];
  id v12 = [v10 uuid];
  BOOL v13 = [(HMDHomeManager *)self _homeWithUUID:v12];

  id v41 = [v10 sharedHomeSourceVersion];
  id v14 = (void *)MEMORY[0x1D9452090]();
  id v15 = [(HMDHomeManager *)self _loadCloudTransactionForRemoteHome:v10 localHome:v13 cachedHome:0 version:a5];
  if ([v15 count])
  {
    long long v16 = [(HMDHomeManager *)self _findHomeModel:v15];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      long long v17 = v16;
    }
    else {
      long long v17 = 0;
    }
    id v40 = v17;

    if (!v13 && v40)
    {
      long long v18 = (void *)[v15 mutableCopy];
      [v18 removeObject:v40];
      uint64_t v19 = [v18 copy];

      id v15 = (id)v19;
    }
    objc_initWeak(&location, self);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __85__HMDHomeManager_processTransactionsFromHomeDataSync_accessories_version_completion___block_invoke;
    aBlock[3] = &unk_1E6A165C8;
    objc_copyWeak(&v62, &location);
    id v20 = v10;
    id v59 = v20;
    id v21 = v42;
    long long v61 = v21;
    id v22 = v41;
    id v60 = v22;
    id v23 = _Block_copy(aBlock);
    v51[0] = MEMORY[0x1E4F143A8];
    v51[1] = 3221225472;
    v51[2] = __85__HMDHomeManager_processTransactionsFromHomeDataSync_accessories_version_completion___block_invoke_1265;
    v51[3] = &unk_1E6A165F0;
    objc_copyWeak(&v57, &location);
    id v24 = v21;
    uint64_t v55 = v24;
    id v25 = v22;
    id v52 = v25;
    id v53 = v20;
    id v15 = v15;
    id v54 = v15;
    id v26 = v23;
    id v56 = v26;
    id v27 = _Block_copy(v51);
    uint64_t v28 = v27;
    if (v13)
    {
      (*((void (**)(void *, void))v27 + 2))(v27, 0);
    }
    else
    {
      if (v40)
      {
        uint64_t v33 = [(HMDHomeManager *)self backingStore];
        id v34 = +[HMDBackingStoreTransactionOptions defaultIDSOptions];
        uint64_t v35 = [v33 transaction:@"kTransactionUpdate" options:v34];

        [v35 add:v40 withMessage:0];
        v44[0] = MEMORY[0x1E4F143A8];
        v44[1] = 3221225472;
        v44[2] = __85__HMDHomeManager_processTransactionsFromHomeDataSync_accessories_version_completion___block_invoke_1266;
        v44[3] = &unk_1E6A16618;
        objc_copyWeak(&v50, &location);
        BOOL v47 = v24;
        id v45 = v25;
        id v46 = v15;
        id v48 = v26;
        id v49 = v28;
        [v35 run:v44];

        objc_destroyWeak(&v50);
      }
      else
      {
        id v36 = (void *)MEMORY[0x1D9452090]();
        id v37 = self;
        HMFGetOSLogHandle();
        id v38 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          id v39 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543362;
          long long v65 = v39;
          _os_log_impl(&dword_1D49D5000, v38, OS_LOG_TYPE_ERROR, "%{public}@Must have home model to create home because it does not already exist", buf, 0xCu);
        }
        if (!v24) {
          goto LABEL_21;
        }
        uint64_t v35 = [MEMORY[0x1E4F28C58] hmErrorWithCode:52];
        ((void (*)(void (**)(void), void, void, void *))v24[2])(v24, 0, 0, v35);
      }
    }
LABEL_21:

    objc_destroyWeak(&v57);
    objc_destroyWeak(&v62);
    objc_destroyWeak(&location);

    goto LABEL_22;
  }
  int v29 = (void *)MEMORY[0x1D9452090]();
  uint64_t v30 = self;
  BOOL v31 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
  {
    id v32 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    long long v65 = v32;
    _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_INFO, "%{public}@No changes to home", buf, 0xCu);
  }
  if (v42) {
    v42[2]();
  }
LABEL_22:
}

void __85__HMDHomeManager_processTransactionsFromHomeDataSync_accessories_version_completion___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    uint64_t v5 = [*(id *)(a1 + 32) uuid];
    uint64_t v6 = [WeakRetained _homeWithUUID:v5];

    uint64_t v7 = [WeakRetained incomingInvitations];
    id v8 = [v6 uuid];
    id v9 = objc_msgSend(v7, "hmf_firstObjectWithValue:forKeyPath:", v8, @"homeUUID");

    if (v9)
    {
      id v10 = (void *)MEMORY[0x1D9452090]();
      id v11 = WeakRetained;
      id v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        BOOL v13 = v18 = v3;
        id v14 = [v6 uuid];
        [v14 UUIDString];
        id v15 = v19 = v10;
        long long v16 = [v9 describeWithFormat];
        *(_DWORD *)long long buf = 138543874;
        id v21 = v13;
        __int16 v22 = 2112;
        id v23 = v15;
        __int16 v24 = 2112;
        id v25 = v16;
        _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Found home with UUID %@ in invite %@, removing it since it was accepted", buf, 0x20u);

        id v10 = v19;
        id v3 = v18;
      }

      [v11 _postIncomingInvitationStateChangedNotification:v9 newInvitationState:3];
      [v11 _removeIncomingInvitation:v9];
    }
  }
  uint64_t v17 = *(void *)(a1 + 48);
  if (v17) {
    (*(void (**)(uint64_t, uint64_t, void, void))(v17 + 16))(v17, 1, *(void *)(a1 + 40), 0);
  }
}

void __85__HMDHomeManager_processTransactionsFromHomeDataSync_accessories_version_completion___block_invoke_1265(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  uint64_t v5 = WeakRetained;
  if (v3)
  {
    uint64_t v6 = *(void *)(a1 + 56);
    if (v6) {
      (*(void (**)(uint64_t, void, void, id))(v6 + 16))(v6, 0, *(void *)(a1 + 32), v3);
    }
  }
  else if (WeakRetained)
  {
    uint64_t v7 = [*(id *)(a1 + 40) uuid];
    id v8 = [v5 _homeWithUUID:v7];

    id v9 = [v8 sharedHomeUpdateHandler];
    [v9 pause];

    uint64_t v19 = v8;
    id v10 = [v8 backingStore];
    id v11 = +[HMDBackingStoreTransactionOptions defaultIDSOptions];
    id v12 = [v10 transaction:@"kTransactionUpdate" options:v11];

    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v13 = *(id *)(a1 + 48);
    uint64_t v14 = [v13 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = *(void *)v21;
      do
      {
        uint64_t v17 = 0;
        do
        {
          if (*(void *)v21 != v16) {
            objc_enumerationMutation(v13);
          }
          uint64_t v18 = *(void *)(*((void *)&v20 + 1) + 8 * v17);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            [v12 add:v18 withMessage:0];
          }
          ++v17;
        }
        while (v15 != v17);
        uint64_t v15 = [v13 countByEnumeratingWithState:&v20 objects:v24 count:16];
      }
      while (v15);
    }

    [v12 run:*(void *)(a1 + 64)];
  }
}

void __85__HMDHomeManager_processTransactionsFromHomeDataSync_accessories_version_completion___block_invoke_1266(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (v6)
  {
    uint64_t v4 = *(void *)(a1 + 48);
    if (v4) {
      (*(void (**)(uint64_t, void, void, id))(v4 + 16))(v4, 0, *(void *)(a1 + 32), v6);
    }
  }
  else if (WeakRetained)
  {
    if ([*(id *)(a1 + 40) count]) {
      uint64_t v5 = *(void *)(a1 + 64);
    }
    else {
      uint64_t v5 = *(void *)(a1 + 56);
    }
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, 0);
  }
}

- (void)_processSharedHomeModel:(id)a3 message:(id)a4
{
  v46[7] = *MEMORY[0x1E4F143B8];
  id v32 = a3;
  id v30 = a4;
  v40[0] = 0;
  v40[1] = v40;
  id v40[2] = 0x3032000000;
  v40[3] = __Block_byref_object_copy__170059;
  v40[4] = __Block_byref_object_dispose__170060;
  id v41 = (id)[objc_alloc(MEMORY[0x1E4F654E0]) initWithName:@"com.apple.homed.handle-home-sync"];
  id v6 = (void *)MEMORY[0x1E4F1CAD0];
  v46[0] = objc_opt_class();
  v46[1] = objc_opt_class();
  void v46[2] = objc_opt_class();
  v46[3] = objc_opt_class();
  v46[4] = objc_opt_class();
  v46[5] = objc_opt_class();
  v46[6] = objc_opt_class();
  uint64_t v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v46 count:7];
  BOOL v31 = [v6 setWithArray:v7];

  id v8 = objc_alloc(MEMORY[0x1E4F28DC0]);
  id v9 = [v32 homeData];
  id v39 = 0;
  id v10 = (void *)[v8 initForReadingFromData:v9 error:&v39];
  id v11 = v39;

  [v10 _allowDecodingCyclesInSecureMode];
  uint64_t v12 = *MEMORY[0x1E4F284E8];
  id v38 = v11;
  id v13 = [v10 decodeTopLevelObjectOfClasses:v31 forKey:v12 error:&v38];
  id v29 = v38;

  if (!v13)
  {
    uint64_t v14 = (void *)MEMORY[0x1D9452090]();
    uint64_t v15 = self;
    HMFGetOSLogHandle();
    uint64_t v16 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v43 = v17;
      __int16 v44 = 2112;
      id v45 = v29;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive home from shared home model's home data: %@", buf, 0x16u);
    }
  }
  id v18 = v13;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  id v20 = v19;

  long long v21 = [v20 objectForKeyedSubscript:@"kHomeDataBlobKey"];
  long long v22 = [v20 objectForKeyedSubscript:@"kAccessoriesDataBlobKey"];
  long long v23 = objc_msgSend(v20, "hmf_numberForKey:", @"kHomeDataVersionKey");
  __int16 v24 = v23;
  if (v23)
  {
    uint64_t v25 = [v23 integerValue];
    if (!v21) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v25 = 0;
  if (v21)
  {
LABEL_12:
    -[HMDHomeManager setHomeDataLoadedFromArchive:](self, "setHomeDataLoadedFromArchive:", 1, v29);
    uint64_t v26 = [(HMDHomeManager *)self cloudDataSyncStateFilter];
    [v26 updateLocalDataDecryptionFailed:0];

    id v27 = [v21 zoneID];
    uint64_t v28 = [v21 ownerName];
    [(HMDHomeManager *)self _addCloudZone:v27 ownerName:v28];

    objc_initWeak((id *)buf, self);
    v33[0] = MEMORY[0x1E4F143A8];
    v33[1] = 3221225472;
    v33[2] = __50__HMDHomeManager__processSharedHomeModel_message___block_invoke;
    v33[3] = &unk_1E6A165A0;
    objc_copyWeak(&v37, (id *)buf);
    id v34 = v21;
    id v35 = v30;
    id v36 = v40;
    [(HMDHomeManager *)self processTransactionsFromHomeDataSync:v34 accessories:v22 version:v25 completion:v33];

    objc_destroyWeak(&v37);
    objc_destroyWeak((id *)buf);
  }
LABEL_13:

  _Block_object_dispose(v40, 8);
}

void __50__HMDHomeManager__processSharedHomeModel_message___block_invoke(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  v37[1] = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v10 = WeakRetained;
  if (!v8 && WeakRetained)
  {
    id v11 = [*(id *)(a1 + 32) uuid];
    uint64_t v12 = [v10 _homeWithUUID:v11];

    if (v12)
    {
      id v13 = v7;
      uint64_t v14 = [*(id *)(a1 + 40) name];
      char v15 = [v14 isEqualToString:@"kTransactionUpdate"];

      if ((v15 & 1) == 0)
      {
        uint64_t v16 = [*(id *)(a1 + 40) destination];
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v17 = v16;
        }
        else {
          uint64_t v17 = 0;
        }
        id v18 = v17;

        uint64_t v19 = [v18 device];

        uint64_t v20 = [v19 version];

        id v13 = (id)v20;
      }
      long long v21 = [v12 sharedHomeUpdateHandler];
      v31[0] = MEMORY[0x1E4F143A8];
      v31[1] = 3221225472;
      void v31[2] = __50__HMDHomeManager__processSharedHomeModel_message___block_invoke_2;
      void v31[3] = &unk_1E6A16578;
      objc_copyWeak(&v34, (id *)(a1 + 56));
      id v32 = *(id *)(a1 + 40);
      char v35 = a2;
      id v22 = v12;
      id v33 = v22;
      [v21 receivedHomeDataFromSourceVersion:v13 forceUpdateVersion:a2 completion:v31];

      long long v23 = [v22 presenceFeeder];
      [v23 homeDataProcessed];

      objc_destroyWeak(&v34);
    }

    goto LABEL_14;
  }
  if (!v8)
  {
LABEL_14:
    uint64_t v26 = [*(id *)(a1 + 40) responseHandler];

    if (v26)
    {
      id v36 = @"kDataSyncResponseAckKey";
      v37[0] = MEMORY[0x1E4F1CC38];
      id v27 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v37 forKeys:&v36 count:1];
      uint64_t v28 = [*(id *)(a1 + 40) responseHandler];
      ((void (**)(void, void, void *))v28)[2](v28, 0, v27);
    }
    goto LABEL_16;
  }
  __int16 v24 = [*(id *)(a1 + 40) responseHandler];

  if (v24)
  {
    uint64_t v25 = [*(id *)(a1 + 40) responseHandler];
    ((void (**)(void, id, void))v25)[2](v25, v8, 0);
  }
LABEL_16:
  uint64_t v29 = *(void *)(*(void *)(a1 + 48) + 8);
  id v30 = *(void **)(v29 + 40);
  *(void *)(v29 + 40) = 0;
}

void __50__HMDHomeManager__processSharedHomeModel_message___block_invoke_2(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    uint64_t v5 = [*(id *)(a1 + 32) name];
    if ([v5 isEqualToString:@"kTransactionUpdate"])
    {
    }
    else
    {
      int v6 = *(unsigned __int8 *)(a1 + 56);

      if (v6 || a2)
      {
        id v7 = [*(id *)(a1 + 40) sharedHomeModel];
        id v8 = [WeakRetained backingStore];
        id v9 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
        id v10 = [v8 transaction:@"kTransactionIDSUpdate" options:v9];

        [v10 add:v7 withMessage:0];
        v12[0] = MEMORY[0x1E4F143A8];
        v12[1] = 3221225472;
        void v12[2] = __50__HMDHomeManager__processSharedHomeModel_message___block_invoke_3;
        v12[3] = &unk_1E6A18BA0;
        id v13 = *(id *)(a1 + 40);
        id v14 = *(id *)(a1 + 32);
        id v15 = WeakRetained;
        [v10 save:v12];
      }
    }
    id v11 = [*(id *)(a1 + 40) sharedHomeUpdateHandler];
    [v11 resume];
  }
}

void __50__HMDHomeManager__processSharedHomeModel_message___block_invoke_3(id *a1)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  id v9 = @"kHomeUUID";
  id v2 = [a1[4] uuid];
  id v3 = [v2 UUIDString];
  v10[0] = v3;
  uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:&v9 count:1];

  uint64_t v5 = [HMDHomeSaveRequest alloc];
  id v6 = a1[4];
  id v7 = [a1[5] name];
  id v8 = [(HMDHomeSaveRequest *)v5 initWithHome:v6 reason:v7 information:v4 postSyncNotification:1 objectChange:1];

  [a1[6] saveWithRequest:v8];
}

- (void)processSharedHomeModelUpdate:(id)a3 message:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  objc_initWeak(&location, self);
  id v8 = [(HMDHomeManager *)self workQueue];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __55__HMDHomeManager_processSharedHomeModelUpdate_message___block_invoke;
  v11[3] = &unk_1E6A16550;
  objc_copyWeak(&v14, &location);
  id v12 = v6;
  id v13 = v7;
  id v9 = v7;
  id v10 = v6;
  dispatch_async(v8, v11);

  objc_destroyWeak(&v14);
  objc_destroyWeak(&location);
}

void __55__HMDHomeManager_processSharedHomeModelUpdate_message___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [WeakRetained _processSharedHomeModel:*(void *)(a1 + 32) message:*(void *)(a1 + 40)];
}

- (id)_loadCloudTransactionForRemoteHome:(id)a3 localHome:(id)a4 cachedHome:(id)a5 version:(int64_t)a6
{
  uint64_t v209 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  uint64_t v144 = v10;
  v140 = [v10 backingStoreObjects:a6];
  uint64_t v142 = v9;
  id v12 = [v9 backingStoreObjects:a6];
  BOOL v157 = (void *)[v12 mutableCopy];

  v141 = v11;
  int64_t v147 = a6;
  v148 = [v11 backingStoreObjects:a6];
  id v13 = (void *)MEMORY[0x1D9452090]();
  id v14 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    id v15 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    long long v201 = v15;
    __int16 v202 = 2048;
    int64_t v203 = a6;
    _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Received data with home-data-version %tu", buf, 0x16u);
  }
  long long v192 = 0u;
  long long v193 = 0u;
  long long v190 = 0u;
  long long v191 = 0u;
  id obj = (id)[v157 copy];
  uint64_t v16 = [obj countByEnumeratingWithState:&v190 objects:v208 count:16];
  if (v16)
  {
    id v17 = (id)v16;
    uint64_t v18 = *(void *)v191;
    uint64_t v149 = *(void *)v191;
    do
    {
      uint64_t v19 = 0;
      id v150 = v17;
      do
      {
        if (*(void *)v191 != v18) {
          objc_enumerationMutation(obj);
        }
        id v20 = *(id *)(*((void *)&v190 + 1) + 8 * (void)v19);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          long long v21 = v20;
        }
        else {
          long long v21 = 0;
        }
        id v22 = v21;

        if (v22)
        {
          if (![v22 propertyWasSet:@"uniqueIdentifier"]
            || ([v22 uniqueIdentifier],
                long long v23 = objc_claimAutoreleasedReturnValue(),
                v23,
                !v23))
          {
            id v155 = v22;
            id v41 = v19;
            __int16 v42 = (void *)MEMORY[0x1D9452090]();
            id v43 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
            {
              __int16 v44 = HMFGetLogIdentifier();
              id v45 = (objc_class *)objc_opt_class();
              id v46 = NSStringFromClass(v45);
              BOOL v47 = [v20 bsoType];
              id v48 = [v20 uuid];
              id v49 = [v48 UUIDString];
              *(_DWORD *)long long buf = 138544130;
              long long v201 = v44;
              __int16 v202 = 2112;
              int64_t v203 = (int64_t)v46;
              __int16 v204 = 2112;
              long long v205 = v47;
              __int16 v206 = 2112;
              char v207 = v49;
              _os_log_impl(&dword_1D49D5000, v43, OS_LOG_TYPE_INFO, "%{public}@[Legacy Merge] Got %@/%@ object (uuid: %@) from remote that has a null / unset uniqueIdentifier (no way to recover).", buf, 0x2Au);

              id v17 = v150;
              uint64_t v18 = v149;
            }
            [v157 removeObject:v20];
            uint64_t v19 = v41;
            goto LABEL_62;
          }
        }
        __int16 v24 = [v20 uuid];

        if (!v24)
        {
          id v155 = v22;
          id v50 = (HMDUserModel *)v20;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            long long v51 = v50;
          }
          else {
            long long v51 = 0;
          }
          id v52 = v51;

          if (v52)
          {
            long long v184 = 0u;
            long long v185 = 0u;
            long long v182 = 0u;
            long long v183 = 0u;
            id v53 = [v144 users];
            uint64_t v54 = [v53 countByEnumeratingWithState:&v182 objects:v198 count:16];
            uint64_t v55 = v50;
            if (v54)
            {
              uint64_t v56 = v54;
              char v162 = v50;
              v146 = v19;
              uint64_t v57 = *(void *)v183;
              while (2)
              {
                for (uint64_t i = 0; i != v56; ++i)
                {
                  if (*(void *)v183 != v57) {
                    objc_enumerationMutation(v53);
                  }
                  id v59 = *(void **)(*((void *)&v182 + 1) + 8 * i);
                  id v60 = [v59 pairingUsername];
                  long long v61 = [(HMDUserModel *)v52 pairingIdentity];
                  id v62 = [v61 objectForKey:@"HAP.identifier"];
                  int v63 = [v60 isEqual:v62];

                  if (v63)
                  {
                    long long v64 = [HMDUserModel alloc];
                    long long v65 = [(HMDBackingStoreModelObject *)v52 bsoDataVersion];
                    uint64_t v66 = [(HMDBackingStoreModelObject *)v52 objectChangeType];
                    long long v67 = [v59 uuid];
                    long long v68 = [(HMDBackingStoreModelObject *)v52 parentUUID];
                    uint64_t v55 = [(HMDBackingStoreModelObject *)v64 initWithVersion:v65 changeType:v66 uuid:v67 parentUUID:v68];

                    id v69 = [(HMDBackingStoreModelObject *)v55 merge:v52];
                    goto LABEL_48;
                  }
                }
                uint64_t v56 = [v53 countByEnumeratingWithState:&v182 objects:v198 count:16];
                if (v56) {
                  continue;
                }
                break;
              }
              uint64_t v55 = v52;
LABEL_48:
              uint64_t v18 = v149;
              uint64_t v19 = v146;
              id v50 = v162;
            }

            uint64_t v70 = [(HMDBackingStoreModelObject *)v55 uuid];

            id v17 = v150;
            if (v70) {
              goto LABEL_61;
            }
            __int16 v71 = (void *)MEMORY[0x1D9452090]();
            id v72 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
            {
              id v88 = HMFGetLogIdentifier();
              id v89 = (objc_class *)objc_opt_class();
              long long v90 = NSStringFromClass(v89);
              id v91 = [(HMDBackingStoreModelObject *)v50 bsoType];
              *(_DWORD *)long long buf = 138543874;
              long long v201 = v88;
              __int16 v202 = 2112;
              int64_t v203 = (int64_t)v90;
              __int16 v204 = 2112;
              long long v205 = v91;
              _os_log_impl(&dword_1D49D5000, v72, OS_LOG_TYPE_INFO, "%{public}@[Legacy Merge] Got %@/%@ object from remote that has a null UUID (tried to match via pairing ID and failed).", buf, 0x20u);

              uint64_t v18 = v149;
            }
          }
          else
          {
            __int16 v71 = (void *)MEMORY[0x1D9452090]();
            id v72 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
            {
              __int16 v73 = HMFGetLogIdentifier();
              BOOL v74 = (objc_class *)objc_opt_class();
              __int16 v75 = NSStringFromClass(v74);
              long long v76 = [(HMDBackingStoreModelObject *)v50 bsoType];
              *(_DWORD *)long long buf = 138543874;
              long long v201 = v73;
              __int16 v202 = 2112;
              int64_t v203 = (int64_t)v75;
              __int16 v204 = 2112;
              long long v205 = v76;
              _os_log_impl(&dword_1D49D5000, v72, OS_LOG_TYPE_INFO, "%{public}@[Legacy Merge] Got %@/%@ object from remote that has a null UUID (and no way to recover).", buf, 0x20u);
            }
            uint64_t v55 = 0;
          }

          [v157 removeObject:v50];
LABEL_61:

LABEL_62:
          id v22 = v155;
          goto LABEL_63;
        }
        if (v147 <= 3)
        {
          uint64_t v25 = (HMDUserModel *)v20;
          objc_opt_class();
          uint64_t v26 = (objc_opt_isKindOfClass() & 1) != 0 ? v25 : 0;
          id v27 = v26;

          if (v27)
          {
            long long v188 = 0u;
            long long v189 = 0u;
            long long v186 = 0u;
            long long v187 = 0u;
            id v161 = [v144 users];
            uint64_t v28 = [v161 countByEnumeratingWithState:&v186 objects:v199 count:16];
            if (v28)
            {
              uint64_t v29 = v28;
              uint64_t v143 = v25;
              id v154 = v22;
              v145 = v19;
              uint64_t v30 = *(void *)v187;
              while (2)
              {
                for (uint64_t j = 0; j != v29; ++j)
                {
                  if (*(void *)v187 != v30) {
                    objc_enumerationMutation(v161);
                  }
                  id v32 = *(void **)(*((void *)&v186 + 1) + 8 * j);
                  id v33 = [v32 uuid];
                  id v34 = [(HMDBackingStoreModelObject *)v27 uuid];
                  if ([v33 isEqual:v34])
                  {
                  }
                  else
                  {
                    char v35 = [v32 pairingUsername];
                    [(HMDUserModel *)v27 pairingIdentity];
                    uint64_t v159 = v32;
                    v37 = uint64_t v36 = v29;
                    [v37 objectForKey:@"HAP.identifier"];
                    v39 = id v38 = v27;
                    int v40 = [v35 isEqual:v39];

                    id v27 = v38;
                    uint64_t v29 = v36;

                    if (v40)
                    {
                      uint64_t v77 = (void *)MEMORY[0x1D9452090]();
                      id v78 = HMFGetOSLogHandle();
                      if (os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
                      {
                        uint64_t v79 = HMFGetLogIdentifier();
                        *(_DWORD *)long long buf = 138543874;
                        long long v201 = v79;
                        __int16 v202 = 2112;
                        int64_t v203 = (int64_t)v159;
                        __int16 v204 = 2112;
                        long long v205 = v38;
                        _os_log_impl(&dword_1D49D5000, v78, OS_LOG_TYPE_INFO, "%{public}@Found an existing user %@, MERGING properties from %@", buf, 0x20u);
                      }
                      id v80 = [HMDUserModel alloc];
                      long long v81 = [(HMDBackingStoreModelObject *)v38 bsoDataVersion];
                      uint64_t v82 = [(HMDBackingStoreModelObject *)v38 objectChangeType];
                      id v83 = [v159 uuid];
                      id v84 = [(HMDBackingStoreModelObject *)v38 parentUUID];
                      char v85 = [(HMDBackingStoreModelObject *)v80 initWithVersion:v81 changeType:v82 uuid:v83 parentUUID:v84];

                      id v86 = [(HMDBackingStoreModelObject *)v85 merge:v38];
                      id v87 = v85;

                      [v157 removeObject:v143];
                      [v157 addObject:v87];

                      uint64_t v25 = v87;
                      goto LABEL_57;
                    }
                  }
                }
                uint64_t v29 = [v161 countByEnumeratingWithState:&v186 objects:v199 count:16];
                if (v29) {
                  continue;
                }
                break;
              }
              uint64_t v25 = v27;
LABEL_57:
              uint64_t v18 = v149;
              id v17 = v150;
              uint64_t v19 = v145;
              id v22 = v154;
            }
            else
            {
              id v17 = v150;
            }
          }
        }
LABEL_63:

        uint64_t v19 = (char *)v19 + 1;
      }
      while (v19 != v17);
      uint64_t v92 = [obj countByEnumeratingWithState:&v190 objects:v208 count:16];
      id v17 = (id)v92;
    }
    while (v92);
  }

  objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v157, "count") + objc_msgSend(v140, "count"));
  id v163 = (id)objc_claimAutoreleasedReturnValue();
  long long v178 = 0u;
  long long v179 = 0u;
  long long v180 = 0u;
  long long v181 = 0u;
  id v151 = v140;
  uint64_t v160 = [v151 countByEnumeratingWithState:&v178 objects:v197 count:16];
  if (v160)
  {
    uint64_t v156 = *(void *)v179;
    do
    {
      for (uint64_t k = 0; k != v160; ++k)
      {
        if (*(void *)v179 != v156) {
          objc_enumerationMutation(v151);
        }
        uint64_t v94 = *(void **)(*((void *)&v178 + 1) + 8 * k);
        long long v174 = 0u;
        long long v175 = 0u;
        long long v176 = 0u;
        long long v177 = 0u;
        id v95 = v157;
        uint64_t v96 = [v95 countByEnumeratingWithState:&v174 objects:v196 count:16];
        if (v96)
        {
          uint64_t v97 = v96;
          uint64_t v98 = *(void *)v175;
LABEL_75:
          uint64_t v99 = 0;
          while (1)
          {
            if (*(void *)v175 != v98) {
              objc_enumerationMutation(v95);
            }
            id v100 = *(void **)(*((void *)&v174 + 1) + 8 * v99);
            id v101 = [v94 uuid];
            id v102 = [v100 uuid];
            char v103 = [v101 isEqual:v102];

            if (v103) {
              break;
            }
            if (v97 == ++v99)
            {
              uint64_t v97 = [v95 countByEnumeratingWithState:&v174 objects:v196 count:16];
              if (v97) {
                goto LABEL_75;
              }
              goto LABEL_81;
            }
          }
          id v104 = v100;

          if (!v104) {
            goto LABEL_92;
          }
          [v95 removeObject:v104];
          id obja = v104;
          [v104 setObjectChangeType:2];
          long long v172 = 0u;
          long long v173 = 0u;
          long long v170 = 0u;
          long long v171 = 0u;
          id v105 = v148;
          uint64_t v106 = [v105 countByEnumeratingWithState:&v170 objects:v195 count:16];
          if (v106)
          {
            uint64_t v107 = v106;
            uint64_t v108 = *(void *)v171;
LABEL_85:
            uint64_t v109 = 0;
            while (1)
            {
              if (*(void *)v171 != v108) {
                objc_enumerationMutation(v105);
              }
              __int16 v110 = *(void **)(*((void *)&v170 + 1) + 8 * v109);
              id v111 = [v94 uuid];
              __int16 v112 = [v110 uuid];
              char v113 = [v111 isEqual:v112];

              if (v113) {
                break;
              }
              if (v107 == ++v109)
              {
                uint64_t v107 = [v105 countByEnumeratingWithState:&v170 objects:v195 count:16];
                if (v107) {
                  goto LABEL_85;
                }
                goto LABEL_91;
              }
            }
            id v118 = v110;

            if (!v118) {
              goto LABEL_101;
            }
            id v169 = 0;
            uint64_t v119 = obja;
            [(HMDBackingStoreModelObject *)v118 diff:obja differingFields:&v169];
            uint64_t v120 = (HMDUserModel *)v169;
            if ([(HMDUserModel *)v120 count])
            {
              uint64_t v121 = (void *)MEMORY[0x1D9452090]();
              double v122 = self;
              double v123 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v123, OS_LOG_TYPE_INFO))
              {
                uint64_t v124 = HMFGetLogIdentifier();
                *(_DWORD *)long long buf = 138543874;
                long long v201 = v124;
                __int16 v202 = 2112;
                int64_t v203 = (int64_t)obja;
                __int16 v204 = 2112;
                long long v205 = v120;
                _os_log_impl(&dword_1D49D5000, v123, OS_LOG_TYPE_INFO, "%{public}@[Legacy Merge] Object was changed since last push or fetch: object %@ has diff %@", buf, 0x20u);
              }
              [v163 addObject:obja];
              [(HMDBackingStoreModelObject *)v118 dumpDebug:@"CACHED: "];
              [obja dumpDebug:@"REMOTE: "];
            }
          }
          else
          {
LABEL_91:

LABEL_101:
            id v168 = 0;
            uint64_t v119 = obja;
            [v94 diff:obja differingFields:&v168];
            id v118 = (HMDUserModel *)v168;
            if ([(HMDUserModel *)v118 count])
            {
              v125 = (void *)MEMORY[0x1D9452090]();
              v126 = self;
              v127 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v127, OS_LOG_TYPE_INFO))
              {
                id v128 = HMFGetLogIdentifier();
                *(_DWORD *)long long buf = 138543874;
                long long v201 = v128;
                __int16 v202 = 2112;
                int64_t v203 = (int64_t)obja;
                __int16 v204 = 2112;
                long long v205 = v118;
                _os_log_impl(&dword_1D49D5000, v127, OS_LOG_TYPE_INFO, "%{public}@[Legacy Merge] Change from cloud: object %@ has diff %@", buf, 0x20u);
              }
              [v163 addObject:obja];
              [v94 dumpDebug:@"LOCAL: "];
              [obja dumpDebug:@"REMOTE: "];
            }
          }
        }
        else
        {
LABEL_81:

LABEL_92:
          int v114 = (void *)MEMORY[0x1D9452090]();
          uint64_t v115 = self;
          uint64_t v116 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v116, OS_LOG_TYPE_INFO))
          {
            uint64_t v117 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            long long v201 = v117;
            __int16 v202 = 2112;
            int64_t v203 = (int64_t)v94;
            _os_log_impl(&dword_1D49D5000, v116, OS_LOG_TYPE_INFO, "%{public}@[Legacy Merge] Change from cloud: local object %@ deleted", buf, 0x16u);
          }
          [v94 setObjectChangeType:3];
          [v163 addObject:v94];
          [v94 dumpDebug:@"LOCAL:"];
        }
      }
      uint64_t v160 = [v151 countByEnumeratingWithState:&v178 objects:v197 count:16];
    }
    while (v160);
  }

  long long v166 = 0u;
  long long v167 = 0u;
  long long v164 = 0u;
  long long v165 = 0u;
  id v129 = v157;
  uint64_t v130 = [v129 countByEnumeratingWithState:&v164 objects:v194 count:16];
  if (v130)
  {
    uint64_t v131 = v130;
    uint64_t v132 = *(void *)v165;
    do
    {
      for (uint64_t m = 0; m != v131; ++m)
      {
        if (*(void *)v165 != v132) {
          objc_enumerationMutation(v129);
        }
        uint64_t v134 = *(void **)(*((void *)&v164 + 1) + 8 * m);
        double v135 = (void *)MEMORY[0x1D9452090]();
        v136 = self;
        v137 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v137, OS_LOG_TYPE_INFO))
        {
          v138 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543618;
          long long v201 = v138;
          __int16 v202 = 2112;
          int64_t v203 = (int64_t)v134;
          _os_log_impl(&dword_1D49D5000, v137, OS_LOG_TYPE_INFO, "%{public}@[Legacy Merge] Change from cloud: remote object %@ added", buf, 0x16u);
        }
        [v134 setObjectChangeType:1];
        [v163 addObject:v134];
        [v134 dumpDebug:@"REMOTE: "];
      }
      uint64_t v131 = [v129 countByEnumeratingWithState:&v164 objects:v194 count:16];
    }
    while (v131);
  }

  return v163;
}

- (BOOL)_shouldDecodeMessage:(id)a3 error:(id *)a4
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v37 = [v6 remoteUserPairingIdentity];
  id v7 = [v6 remoteSenderContext];
  id v8 = [v7 mergeID];

  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  uint64_t v36 = self;
  id v9 = [(HMDHomeManager *)self homes];
  uint64_t v10 = [v9 countByEnumeratingWithState:&v42 objects:v51 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v43;
    while (2)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v43 != v12) {
          objc_enumerationMutation(v9);
        }
        id v14 = *(void **)(*((void *)&v42 + 1) + 8 * i);
        id v15 = [v6 matchingRemoteIdentityUserForHome:v14];

        if (v15)
        {
          uint64_t v30 = (void *)MEMORY[0x1D9452090]();
          BOOL v31 = v36;
          id v32 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v28 = HMFGetLogIdentifier();
            uint64_t v29 = [v14 name];
            *(_DWORD *)long long buf = 138543618;
            id v48 = v28;
            __int16 v49 = 2112;
            id v50 = v29;
            _os_log_impl(&dword_1D49D5000, v32, OS_LOG_TYPE_DEBUG, "%{public}@Received home sync from owner of known home %@", buf, 0x16u);

LABEL_27:
          }
          goto LABEL_28;
        }
      }
      uint64_t v11 = [v9 countByEnumeratingWithState:&v42 objects:v51 count:16];
      if (v11) {
        continue;
      }
      break;
    }
  }
  char v35 = a4;

  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  uint64_t v16 = [(HMDHomeManager *)v36 incomingInvitations];
  id v9 = (void *)[v16 copy];

  uint64_t v17 = [v9 countByEnumeratingWithState:&v38 objects:v46 count:16];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)v39;
LABEL_11:
    uint64_t v20 = 0;
    while (1)
    {
      if (*(void *)v39 != v19) {
        objc_enumerationMutation(v9);
      }
      long long v21 = *(void **)(*((void *)&v38 + 1) + 8 * v20);
      id v22 = [v21 inviterIdentity];
      int v23 = [v22 isEqual:v37];

      __int16 v24 = [v21 inviterMergeID];
      int v25 = [v24 isEqual:v8];

      if ([v21 isAccepted] && (v23 | v25) != 0) {
        break;
      }
      if (v18 == ++v20)
      {
        uint64_t v18 = [v9 countByEnumeratingWithState:&v38 objects:v46 count:16];
        if (v18) {
          goto LABEL_11;
        }
        goto LABEL_21;
      }
    }
    uint64_t v30 = (void *)MEMORY[0x1D9452090]();
    BOOL v31 = v36;
    id v32 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v28 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v48 = v28;
      __int16 v49 = 2112;
      id v50 = v21;
      _os_log_impl(&dword_1D49D5000, v32, OS_LOG_TYPE_DEBUG, "%{public}@Received home sync from accepted invitation %@", buf, 0x16u);
      goto LABEL_27;
    }
LABEL_28:

    BOOL v27 = 1;
  }
  else
  {
LABEL_21:

    if (v35)
    {
      [MEMORY[0x1E4F28C58] hmErrorWithCode:17];
      BOOL v27 = 0;
      id *v35 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      BOOL v27 = 0;
    }
  }

  return v27;
}

- (void)_handleHomeDataSync:(id)a3
{
  uint64_t v211 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x1D9452090]();
  id v173 = 0;
  BOOL v6 = [(HMDHomeManager *)self _shouldDecodeMessage:v4 error:&v173];
  id v7 = v173;
  if (v6)
  {
    id v8 = [v4 dataForKey:@"kHomeDataKey"];
    if (!v8)
    {
      uint64_t v58 = (void *)MEMORY[0x1D9452090]();
      id v59 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        id v60 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        long long v198 = v60;
        _os_log_impl(&dword_1D49D5000, v59, OS_LOG_TYPE_ERROR, "%{public}@Failed to receive home data", buf, 0xCu);
      }
      long long v61 = [v4 responseHandler];

      if (!v61) {
        goto LABEL_96;
      }
      id v62 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
      int v63 = [v4 responseHandler];
      ((void (**)(void, void *, void))v63)[2](v63, v62, 0);
LABEL_95:

LABEL_96:
      goto LABEL_97;
    }
    char v162 = v5;
    uint64_t v161 = [objc_alloc(MEMORY[0x1E4F654E0]) initWithName:@"com.apple.homed.handle-home-sync"];
    objc_msgSend(v8, "hmd_uncompressedData");
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    if (!v9) {
      id v9 = v8;
    }
    uint64_t v10 = (void *)MEMORY[0x1E4F1CAD0];
    v186[0] = objc_opt_class();
    v186[1] = objc_opt_class();
    v186[2] = objc_opt_class();
    v186[3] = objc_opt_class();
    v186[4] = objc_opt_class();
    v186[5] = objc_opt_class();
    v186[6] = objc_opt_class();
    uint64_t v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v186 count:7];
    uint64_t v12 = [v10 setWithArray:v11];

    id v172 = 0;
    id v13 = (void *)[objc_alloc(MEMORY[0x1E4F28DC0]) initForReadingFromData:v9 error:&v172];
    id v164 = v172;
    [v13 _allowDecodingCyclesInSecureMode];
    uint64_t v159 = v13;
    uint64_t v160 = (void *)v12;
    id v14 = [v13 decodeObjectOfClasses:v12 forKey:*MEMORY[0x1E4F284E8]];
    if (!v14)
    {
      id v15 = (void *)MEMORY[0x1D9452090]();
      uint64_t v16 = self;
      uint64_t v17 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        uint64_t v19 = v18 = v8;
        *(_DWORD *)long long buf = 138543618;
        long long v198 = v19;
        __int16 v199 = 2112;
        id v200 = v164;
        _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive home from uncompressed data: %@", buf, 0x16u);

        id v8 = v18;
      }
    }
    id v163 = v9;
    id v20 = v14;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      long long v21 = v20;
    }
    else {
      long long v21 = 0;
    }
    id v22 = v21;

    v158 = v22;
    int v23 = [v22 objectForKeyedSubscript:@"kHomeDataBlobKey"];
    [v23 _removeCorruptAccessories];
    long long v184 = @"kDataSyncResponseAckKey";
    uint64_t v185 = MEMORY[0x1E4F1CC38];
    uint64_t v157 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v185 forKeys:&v184 count:1];
    if (!v23) {
      goto LABEL_87;
    }
    id v156 = v20;
    uint64_t v152 = v8;
    id v153 = v7;
    __int16 v24 = self;
    id v155 = v23;
    id v25 = v23;
    id v154 = v4;
    id v165 = v4;
    id v169 = v24;
    id v171 = v25;
    long long v178 = 0u;
    long long v179 = 0u;
    long long v180 = 0u;
    long long v181 = 0u;
    id obj = [(HMDHomeManager *)v169 homes];
    uint64_t v26 = [obj countByEnumeratingWithState:&v178 objects:buf count:16];
    if (v26)
    {
      uint64_t v27 = v26;
      uint64_t v28 = *(void *)v179;
      while (2)
      {
        for (uint64_t i = 0; i != v27; ++i)
        {
          if (*(void *)v179 != v28) {
            objc_enumerationMutation(obj);
          }
          uint64_t v30 = *(void **)(*((void *)&v178 + 1) + 8 * i);
          BOOL v31 = (void *)MEMORY[0x1D9452090]();
          id v32 = v169;
          id v33 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
          {
            id v34 = HMFGetLogIdentifier();
            char v35 = [v171 uuid];
            *(_DWORD *)long long v191 = 138543874;
            long long v192 = v34;
            __int16 v193 = 2112;
            id v194 = v35;
            __int16 v195 = 2112;
            long long v196 = v30;
            _os_log_impl(&dword_1D49D5000, v33, OS_LOG_TYPE_DEBUG, "%{public}@Looking for home uuid %@, currentHome:  %@", v191, 0x20u);
          }
          uint64_t v36 = [v30 uuid];
          if (v36)
          {
            id v37 = (void *)v36;
            long long v38 = [v30 uuid];
            long long v39 = [v171 uuid];
            int v40 = objc_msgSend(v38, "hmf_isEqualToUUID:", v39);

            if (v40)
            {
              long long v64 = [v30 owner];
              id v52 = [v64 pairingIdentity];

              long long v65 = [v30 owner];
              uint64_t v66 = [v65 account];
              id v43 = [v66 senderCorrelationIdentifier];

              long long v67 = (void *)MEMORY[0x1D9452090]();
              long long v68 = v32;
              id v69 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v70 = HMFGetLogIdentifier();
                *(_DWORD *)long long v191 = 138543618;
                long long v192 = v70;
                __int16 v193 = 2112;
                id v194 = v43;
                _os_log_impl(&dword_1D49D5000, v69, OS_LOG_TYPE_DEBUG, "%{public}@Found current home account mergeID %@", v191, 0x16u);
              }
              __int16 v71 = [v30 owner];
              id v72 = [v71 account];

LABEL_44:
              char v73 = 1;
              goto LABEL_53;
            }
          }
        }
        uint64_t v27 = [obj countByEnumeratingWithState:&v178 objects:buf count:16];
        if (v27) {
          continue;
        }
        break;
      }
    }

    long long v176 = 0u;
    long long v177 = 0u;
    long long v174 = 0u;
    long long v175 = 0u;
    long long v41 = [(HMDHomeManager *)v169 incomingInvitations];
    long long v42 = (void *)[v41 copy];

    id obj = v42;
    id v43 = (id)[v42 countByEnumeratingWithState:&v174 objects:v191 count:16];
    if (v43)
    {
      uint64_t v44 = *(void *)v175;
LABEL_26:
      uint64_t v45 = 0;
      while (1)
      {
        if (*(void *)v175 != v44) {
          objc_enumerationMutation(obj);
        }
        id v46 = *(void **)(*((void *)&v174 + 1) + 8 * v45);
        uint64_t v47 = objc_msgSend(v46, "homeUUID", v152);
        if (v47)
        {
          id v48 = (void *)v47;
          __int16 v49 = [v46 homeUUID];
          id v50 = [v171 uuid];
          int v51 = objc_msgSend(v49, "hmf_isEqualToUUID:", v50);

          if (v51) {
            break;
          }
        }
        if (v43 == (id)++v45)
        {
          id v43 = (id)[obj countByEnumeratingWithState:&v174 objects:v191 count:16];
          if (v43) {
            goto LABEL_26;
          }
          goto LABEL_33;
        }
      }
      int v74 = [v46 isAccepted];
      __int16 v75 = (void *)MEMORY[0x1D9452090]();
      long long v76 = v169;
      uint64_t v77 = HMFGetOSLogHandle();
      BOOL v78 = os_log_type_enabled(v77, OS_LOG_TYPE_INFO);
      if (v74)
      {
        if (v78)
        {
          uint64_t v79 = HMFGetLogIdentifier();
          *(_DWORD *)long long v187 = 138543618;
          long long v188 = v79;
          __int16 v189 = 2112;
          long long v190 = v46;
          _os_log_impl(&dword_1D49D5000, v77, OS_LOG_TYPE_INFO, "%{public}@Received home sync for invitation: %@", v187, 0x16u);
        }
        id v52 = [v46 inviterIdentity];
        id v72 = [v46 inviterAccount];
        id v43 = [v46 inviterMergeID];
        goto LABEL_44;
      }
      if (v78)
      {
        id v80 = HMFGetLogIdentifier();
        *(_DWORD *)long long v187 = 138543618;
        long long v188 = v80;
        __int16 v189 = 2112;
        long long v190 = v46;
        _os_log_impl(&dword_1D49D5000, v77, OS_LOG_TYPE_INFO, "%{public}@Received home sync for unaccepted invitation: %@", v187, 0x16u);
      }
      id v52 = 0;
      id v43 = 0;
    }
    else
    {
LABEL_33:
      id v52 = 0;
    }
    id v72 = 0;
    char v73 = 0;
LABEL_53:

    id v81 = v52;
    id v82 = v43;
    id v83 = v72;
    id v84 = (void *)MEMORY[0x1D9452090]();
    char v85 = v169;
    id v86 = HMFGetOSLogHandle();
    id v87 = v86;
    if (v73)
    {
      if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
      {
        id v88 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138544130;
        long long v198 = v88;
        __int16 v199 = 2112;
        id v200 = v165;
        __int16 v201 = 2112;
        id v202 = v81;
        __int16 v203 = 2112;
        id v204 = v82;
        _os_log_impl(&dword_1D49D5000, v87, OS_LOG_TYPE_DEBUG, "%{public}@Found owner identity, checking message: %@, against pairing identity: %@, mergeID: %@", buf, 0x2Au);
      }
      id v89 = [v165 remoteSenderContext];
      long long v90 = [v89 mergeID];
      int v91 = [v82 isEqualToString:v90];

      uint64_t v92 = [v81 identifier];
      id v93 = [v165 remoteSenderContext];
      uint64_t v94 = [v93 pairingIdentityIdentifier];
      int v95 = v91 | [v92 isEqualToString:v94];

      uint64_t v96 = [v165 remoteUserPairingIdentity];
      int v97 = v95 | [v81 isEqual:v96];

      if ([v83 isAuthenticated])
      {
        uint64_t v98 = [v165 remoteSourceDevice];
        uint64_t v99 = [v98 account];
        int v100 = [v83 isEqual:v99];

        if ((v100 & v97 & 1) == 0)
        {
LABEL_58:
          id v101 = (void *)MEMORY[0x1D9452090]();
          id v102 = v85;
          char v103 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            id v104 = obja = v82;
            [v83 isAuthenticated];
            long long v166 = HMFBooleanToString();
            [v165 remoteSourceDevice];
            v105 = long long v170 = v101;
            uint64_t v106 = [v105 account];
            uint64_t v107 = HMFBooleanToString();
            *(_DWORD *)long long buf = 138544898;
            long long v198 = v104;
            __int16 v199 = 2112;
            id v200 = v171;
            __int16 v201 = 2112;
            id v202 = v165;
            __int16 v203 = 2112;
            id v204 = v83;
            __int16 v205 = 2112;
            __int16 v206 = v166;
            __int16 v207 = 2112;
            v208 = v106;
            __int16 v209 = 2112;
            __int16 v210 = v107;
            _os_log_impl(&dword_1D49D5000, v103, OS_LOG_TYPE_ERROR, "%{public}@Received unexpected home data sync for home: %@, message: %@, ownerAccount: %@, ownerAccount.isAuthenticated: %@, sourceDevice.account: %@, isValidOwnerAccountIdentity: %@", buf, 0x48u);

            id v101 = v170;
            id v82 = obja;
          }

          id v108 = [MEMORY[0x1E4F28C58] hmErrorWithCode:17];
          char v109 = 0;
          id v8 = v152;
          goto LABEL_68;
        }
      }
      else if ((v97 & 1) == 0)
      {
        goto LABEL_58;
      }
      id v111 = (void *)MEMORY[0x1D9452090]();
      __int16 v112 = v85;
      char v113 = HMFGetOSLogHandle();
      id v8 = v152;
      if (os_log_type_enabled(v113, OS_LOG_TYPE_DEBUG))
      {
        int v114 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        long long v198 = v114;
        __int16 v199 = 2112;
        id v200 = v165;
        _os_log_impl(&dword_1D49D5000, v113, OS_LOG_TYPE_DEBUG, "%{public}@Accepting home data sync: %@", buf, 0x16u);
      }
      id v108 = 0;
      char v109 = 1;
    }
    else
    {
      id v8 = v152;
      if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
      {
        __int16 v110 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        long long v198 = v110;
        __int16 v199 = 2112;
        id v200 = v171;
        _os_log_impl(&dword_1D49D5000, v87, OS_LOG_TYPE_ERROR, "%{public}@Unable to determine current owner of home: %@", buf, 0x16u);
      }
      id v108 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
      char v109 = 0;
    }
LABEL_68:

    uint64_t v115 = (HMDSharedHomeModel *)v108;
    if (v109)
    {
      [v171 isOwnerUser];
      id v7 = v153;
      id v4 = v154;
      if (+[HMDHomeManager isThisDeviceAdminOfHome:v171])
      {
        uint64_t v116 = (void *)MEMORY[0x1D9452090]();
        uint64_t v117 = v85;
        id v118 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v118, OS_LOG_TYPE_INFO))
        {
          uint64_t v119 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543618;
          long long v198 = v119;
          __int16 v199 = 2112;
          id v200 = v171;
          _os_log_impl(&dword_1D49D5000, v118, OS_LOG_TYPE_INFO, "%{public}@Dropping remote home sync to owner: %@", buf, 0x16u);
        }
        uint64_t v120 = [v165 responseHandler];

        uint64_t v5 = v162;
        int v63 = (void (**)(void, void, void))v163;
        int v23 = v155;
        uint64_t v121 = (void *)v157;
        if (!v120) {
          goto LABEL_92;
        }
        double v122 = [v165 responseHandler];
        v122[2](v122, 0, v157);
LABEL_91:

LABEL_92:
        id v20 = v156;
        goto LABEL_93;
      }
      uint64_t v132 = [v171 uuid];
      v133 = [(HMDHomeManager *)v85 _homeWithUUID:v132];

      uint64_t v134 = [v165 destination];
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        double v135 = v134;
      }
      else {
        double v135 = 0;
      }
      id v136 = v135;

      v137 = [v136 device];

      v138 = [v137 version];

      LODWORD(v137) = [(HMDHomeManager *)v85 _shouldHandleHomeDataSync:v133 remoteHome:v171 sourceDeviceVersion:v138];
      int v23 = v155;
      id v20 = v156;
      if (!v137)
      {
LABEL_87:
        uint64_t v143 = objc_msgSend(v4, "responseHandler", v152);

        uint64_t v5 = v162;
        int v63 = (void (**)(void, void, void))v163;
        uint64_t v121 = (void *)v157;
        if (!v143)
        {
LABEL_94:

          id v62 = (void *)v161;
          goto LABEL_95;
        }
        uint64_t v115 = [v4 responseHandler];
        (*(void (**)(HMDSharedHomeModel *, void, uint64_t))&v115->super._bsoDataVersionOverride)(v115, 0, v157);
LABEL_93:

        goto LABEL_94;
      }
      if ([v171 isOwnerUser])
      {
        v139 = (void *)MEMORY[0x1D9452090]();
        v140 = v85;
        v141 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
        {
          uint64_t v142 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543618;
          long long v198 = v142;
          __int16 v199 = 2112;
          id v200 = v171;
          _os_log_impl(&dword_1D49D5000, v141, OS_LOG_TYPE_ERROR, "%{public}@Received unexpected home data sync for owned home %@", buf, 0x16u);
        }
        int v23 = v155;
        id v20 = v156;
        goto LABEL_87;
      }
      v145 = [HMDSharedHomeModel alloc];
      v146 = [v171 uuid];
      int64_t v147 = [(HMDHomeManager *)v85 uuid];
      uint64_t v115 = [(HMDBackingStoreModelObject *)v145 initWithObjectChangeType:1 uuid:v146 parentUUID:v147];

      [(HMDSharedHomeModel *)v115 setHomeData:v163];
      v148 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v171, "configurationVersion"));
      [(HMDSharedHomeModel *)v115 setConfigurationVersion:v148];

      uint64_t v149 = [(HMDHomeManager *)v85 homes];
      uint64_t v150 = [v149 count];

      if (!v150)
      {
        id v151 = [v171 uuid];
        [(HMDHomeManager *)v85 setPrimaryHomeUUID:v151];
      }
      -[HMDHomeManager transactionObjectUpdated:newValues:message:](v85, "transactionObjectUpdated:newValues:message:", 0, v115, v165, v152);
      uint64_t v5 = v162;
      int v63 = (void (**)(void, void, void))v163;
    }
    else
    {
      double v123 = [(HMDHomeManager *)v85 uuidsOfRemovedHomes];
      uint64_t v124 = [v171 uuid];
      int v125 = [v123 containsObject:v124];

      id v7 = v153;
      id v4 = v154;
      uint64_t v5 = v162;
      if (v125)
      {
        v126 = (void *)MEMORY[0x1D9452090]();
        v127 = v85;
        id v128 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v128, OS_LOG_TYPE_INFO))
        {
          id v129 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543618;
          long long v198 = v129;
          __int16 v199 = 2112;
          id v200 = v171;
          _os_log_impl(&dword_1D49D5000, v128, OS_LOG_TYPE_INFO, "%{public}@Rejecting home data sync, home was removed: %@", buf, 0x16u);
        }
        uint64_t v130 = [v165 responseHandler];

        int v63 = (void (**)(void, void, void))v163;
        int v23 = v155;
        uint64_t v121 = (void *)v157;
        if (!v130) {
          goto LABEL_92;
        }
        double v122 = [v165 responseHandler];
        long long v182 = @"kDataSyncResponseNAckKey";
        uint64_t v183 = MEMORY[0x1E4F1CC38];
        uint64_t v131 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v183 forKeys:&v182 count:1];
        ((void (**)(void, void, void *))v122)[2](v122, 0, v131);

        goto LABEL_91;
      }
      uint64_t v144 = [v165 responseHandler];

      if (v144)
      {
        double v122 = [v165 responseHandler];
        ((void (**)(void, HMDSharedHomeModel *, void))v122)[2](v122, v115, 0);
        int v63 = (void (**)(void, void, void))v163;
        int v23 = v155;
        uint64_t v121 = (void *)v157;
        goto LABEL_91;
      }
      int v63 = (void (**)(void, void, void))v163;
    }
    int v23 = v155;
    id v20 = v156;
    uint64_t v121 = (void *)v157;
    goto LABEL_93;
  }
  id v53 = (void *)MEMORY[0x1D9452090]();
  uint64_t v54 = self;
  uint64_t v55 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
  {
    uint64_t v56 = HMFGetLogIdentifier();
    uint64_t v57 = [v4 remoteUserPairingIdentity];
    *(_DWORD *)long long buf = 138543618;
    long long v198 = v56;
    __int16 v199 = 2112;
    id v200 = v57;
    _os_log_impl(&dword_1D49D5000, v55, OS_LOG_TYPE_ERROR, "%{public}@Rejecting home data sync - Sync not from trusted account %@", buf, 0x16u);
  }
  [v4 respondWithError:v7];
LABEL_97:
}

- (BOOL)_shouldHandleHomeDataSync:(id)a3 remoteHome:(id)a4 sourceDeviceVersion:(id)a5
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  id v9 = a5;
  if (isWatch())
  {
    uint64_t v10 = (void *)MEMORY[0x1D9452090]();
    uint64_t v11 = HMFGetOSLogHandle();
    BOOL v12 = 1;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      int v30 = 138543362;
      BOOL v31 = v13;
      id v14 = "%{public}@Adding or updating home on the watch";
LABEL_12:
      long long v21 = v11;
      uint32_t v22 = 12;
LABEL_13:
      _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, v14, (uint8_t *)&v30, v22);

      goto LABEL_30;
    }
    goto LABEL_30;
  }
  if (v7)
  {
    id v15 = [v7 sharedHomeUpdateHandler];
    if ([v15 pendingRequestDataFromResident])
    {
      uint64_t v16 = [v7 sharedHomeSourceVersion];
      int v17 = [v9 isGreaterThanVersion:v16];

      if (v17)
      {
        uint64_t v18 = [v8 configurationVersion];
        if (v18 < [v7 configurationVersion])
        {
          uint64_t v10 = (void *)MEMORY[0x1D9452090]();
          uint64_t v11 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            uint64_t v19 = HMFGetLogIdentifier();
            int v30 = 138543874;
            BOOL v31 = v19;
            __int16 v32 = 2048;
            uint64_t v33 = [v7 configurationVersion];
            __int16 v34 = 2048;
            uint64_t v35 = [v8 configurationVersion];
            id v20 = "%{public}@Pending request data from resident is active, Local home is at version %ld and incoming home"
                  " version is at %ld, discarding changes and sending ack";
LABEL_24:
            uint64_t v27 = v11;
            uint32_t v28 = 32;
            goto LABEL_25;
          }
          goto LABEL_26;
        }
        goto LABEL_16;
      }
    }
    else
    {
    }
    uint64_t v23 = [v8 configurationVersion];
    if (v23 <= [v7 configurationVersion])
    {
      uint64_t v10 = (void *)MEMORY[0x1D9452090]();
      uint64_t v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v19 = HMFGetLogIdentifier();
        int v30 = 138543874;
        BOOL v31 = v19;
        __int16 v32 = 2048;
        uint64_t v33 = [v7 configurationVersion];
        __int16 v34 = 2048;
        uint64_t v35 = [v8 configurationVersion];
        id v20 = "%{public}@Local home is at version %ld and incoming home version is at %ld, discarding changes and sending ack";
        goto LABEL_24;
      }
LABEL_26:
      BOOL v12 = 0;
      goto LABEL_30;
    }
LABEL_16:
    if (v9)
    {
      __int16 v24 = [[HMDHomeKitVersion alloc] initWithVersionString:@"3.1"];
      if ([v9 isAtLeastVersion:v24] && objc_msgSend(v7, "expectedConfigurationVersion"))
      {
        uint64_t v25 = [v7 expectedConfigurationVersion];
        uint64_t v26 = [v8 configurationVersion];

        if (v25 > v26)
        {
          uint64_t v10 = (void *)MEMORY[0x1D9452090]();
          uint64_t v11 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            uint64_t v19 = HMFGetLogIdentifier();
            int v30 = 138544130;
            BOOL v31 = v19;
            __int16 v32 = 2048;
            uint64_t v33 = [v7 configurationVersion];
            __int16 v34 = 2048;
            uint64_t v35 = [v7 expectedConfigurationVersion];
            __int16 v36 = 2048;
            uint64_t v37 = [v8 configurationVersion];
            id v20 = "%{public}@Local is config version is at %ld and expected config version %ld and incoming home config v"
                  "ersion is at %ld, discarding changes and sending ack";
            uint64_t v27 = v11;
            uint32_t v28 = 42;
LABEL_25:
            _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_INFO, v20, (uint8_t *)&v30, v28);

            goto LABEL_26;
          }
          goto LABEL_26;
        }
      }
      else
      {
      }
    }
    uint64_t v10 = (void *)MEMORY[0x1D9452090]();
    uint64_t v11 = HMFGetOSLogHandle();
    BOOL v12 = 1;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO)) {
      goto LABEL_30;
    }
    id v13 = HMFGetLogIdentifier();
    int v30 = 138544130;
    BOOL v31 = v13;
    __int16 v32 = 2048;
    uint64_t v33 = [v7 configurationVersion];
    __int16 v34 = 2048;
    uint64_t v35 = [v7 expectedConfigurationVersion];
    __int16 v36 = 2048;
    uint64_t v37 = [v8 configurationVersion];
    id v14 = "%{public}@Local is config version is at %ld and expected config version %ld and incoming home config version i"
          "s at %ld, accepting new changes";
    BOOL v12 = 1;
    long long v21 = v11;
    uint32_t v22 = 42;
    goto LABEL_13;
  }
  uint64_t v10 = (void *)MEMORY[0x1D9452090]();
  uint64_t v11 = HMFGetOSLogHandle();
  BOOL v12 = 1;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    id v13 = HMFGetLogIdentifier();
    int v30 = 138543362;
    BOOL v31 = v13;
    id v14 = "%{public}@Receiving a new shared home";
    goto LABEL_12;
  }
LABEL_30:

  return v12;
}

- (void)fragmentationStream:(id)a3 didReceiveData:(id)a4 transactionIdentifier:(unsigned __int16)a5 error:(id)a6
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a6;
  if (v11)
  {
    id v13 = [(HMDHomeManager *)self workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __81__HMDHomeManager_fragmentationStream_didReceiveData_transactionIdentifier_error___block_invoke;
    block[3] = &unk_1E6A16528;
    void block[4] = self;
    id v15 = v10;
    id v16 = v11;
    unsigned __int16 v18 = a5;
    id v17 = v12;
    dispatch_async(v13, block);
  }
}

uint64_t __81__HMDHomeManager_fragmentationStream_didReceiveData_transactionIdentifier_error___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fragmentationStream:*(void *)(a1 + 40) didReceiveData:*(void *)(a1 + 48) transactionIdentifier:*(unsigned __int16 *)(a1 + 64) error:*(void *)(a1 + 56)];
}

- (void)fragmentationStream:(id)a3 didCloseWithError:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __56__HMDHomeManager_fragmentationStream_didCloseWithError___block_invoke;
  block[3] = &unk_1E6A19668;
  void block[4] = self;
  id v12 = v6;
  id v13 = v7;
  id v9 = v7;
  id v10 = v6;
  dispatch_async(v8, block);
}

uint64_t __56__HMDHomeManager_fragmentationStream_didCloseWithError___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fragmentationStream:*(void *)(a1 + 40) didCloseWithError:*(void *)(a1 + 48)];
}

- (void)processSharedHomeModelRemoved:(id)a3 message:(id)a4
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = [v6 uuid];
  if (v8)
  {
    id v9 = [(HMDHomeManager *)self _homeWithUUID:v8];
    id v10 = (void *)MEMORY[0x1D9452090]();
    id v11 = HMFGetOSLogHandle();
    id v12 = v11;
    if (v9)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        id v13 = HMFGetLogIdentifier();
        int v20 = 138543618;
        long long v21 = v13;
        __int16 v22 = 2112;
        uint64_t v23 = v9;
        _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Attempting to remove home %@ since we are no longer part of the home", (uint8_t *)&v20, 0x16u);
      }
      [(HMDHomeManager *)self _removeHome:v9 withMessage:v7 saveToStore:1 notifyUsers:0 shouldRemovePairings:0];
      goto LABEL_13;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = HMFGetLogIdentifier();
      id v17 = [v8 UUIDString];
      int v20 = 138543618;
      long long v21 = v16;
      __int16 v22 = 2112;
      uint64_t v23 = v17;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Home %@ not found for user", (uint8_t *)&v20, 0x16u);
    }
    unsigned __int16 v18 = [v7 responseHandler];

    if (!v18) {
      goto LABEL_13;
    }
    id v15 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:2 userInfo:0];
    uint64_t v19 = [v7 responseHandler];
    v19[2](v19, v15, 0);

LABEL_12:
LABEL_13:

    goto LABEL_14;
  }
  id v14 = [v7 responseHandler];

  if (v14)
  {
    id v9 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:20 userInfo:0];
    id v15 = [v7 responseHandler];
    ((void (**)(void, void *, void))v15)[2](v15, v9, 0);
    goto LABEL_12;
  }
LABEL_14:
}

- (void)_handleUserRemoved:(id)a3
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [v4 uuidForKey:@"kHomeUUID"];
  id v6 = [(HMDHomeManager *)self _homeWithUUID:v5];
  if (v6)
  {
    id v7 = v4;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v8 = v7;
    }
    else {
      id v8 = 0;
    }
    id v9 = v8;

    if ([v7 isRemote] && objc_msgSend(v9, "restriction") != 4)
    {
      id v10 = __isUserInMessagePartOfHome(self, v6, v7);
      if (([v10 isOwner] & 1) == 0)
      {
        id v13 = (void *)MEMORY[0x1D9452090]();
        id v14 = self;
        id v15 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          id v16 = HMFGetLogIdentifier();
          int v20 = 138543618;
          long long v21 = v16;
          __int16 v22 = 2112;
          id v23 = v7;
          _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_ERROR, "%{public}@Only owner can remove homes: %@", (uint8_t *)&v20, 0x16u);
        }
        id v17 = [v7 responseHandler];

        if (v17)
        {
          unsigned __int16 v18 = [v7 responseHandler];
          uint64_t v19 = [MEMORY[0x1E4F28C58] hmErrorWithCode:17];
          ((void (**)(void, void *, void))v18)[2](v18, v19, 0);
        }
        goto LABEL_10;
      }
    }
    id v10 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    [(HMDHomeManager *)self scheduleRemovalForHome:v6 message:v7 options:v10];
LABEL_10:

LABEL_13:
    goto LABEL_14;
  }
  id v11 = [v4 responseHandler];

  if (v11)
  {
    id v9 = [v4 responseHandler];
    id v12 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    (*((void (**)(id, void *, void))v9 + 2))(v9, v12, 0);

    goto LABEL_13;
  }
LABEL_14:
}

- (void)_handleResetHome:(id)a3
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [v4 uuidForKey:@"kHomeUUID"];
  if (v5)
  {
    uint64_t v6 = [(HMDHomeManager *)self _homeWithUUID:v5];
    if (v6)
    {
      id v7 = (void *)v6;
      id v8 = v4;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v9 = v8;
      }
      else {
        id v9 = 0;
      }
      id v10 = v9;

      if (![v8 isRemote] || objc_msgSend(v10, "restriction") == 4) {
        goto LABEL_10;
      }
      id v11 = __isUserInMessagePartOfHome(self, v7, v8);
      if ([v11 isOwner])
      {

LABEL_10:
        id v12 = (void *)MEMORY[0x1D9452090]();
        id v13 = self;
        id v14 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          id v15 = HMFGetLogIdentifier();
          int v36 = 138543618;
          uint64_t v37 = v15;
          __int16 v38 = 2112;
          id v39 = v7;
          _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Received request to reset configuration for home %@", (uint8_t *)&v36, 0x16u);
        }
        id v16 = (void *)MEMORY[0x1D9452090]();
        id v17 = v13;
        unsigned __int16 v18 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          uint64_t v19 = HMFGetLogIdentifier();
          int v36 = 138543618;
          uint64_t v37 = v19;
          __int16 v38 = 2112;
          id v39 = v7;
          _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@Attempting to reset home %@ by removing it", (uint8_t *)&v36, 0x16u);
        }
        [(HMDHomeManager *)v17 _removeHome:v7 withMessage:v8 saveToStore:1 notifyUsers:1 shouldRemovePairings:0];
        goto LABEL_21;
      }
      uint64_t v29 = (void *)MEMORY[0x1D9452090]();
      int v30 = self;
      BOOL v31 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        __int16 v32 = HMFGetLogIdentifier();
        int v36 = 138543618;
        uint64_t v37 = v32;
        __int16 v38 = 2112;
        id v39 = v8;
        _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_ERROR, "%{public}@Only owner can remove homes: %@", (uint8_t *)&v36, 0x16u);
      }
      uint64_t v33 = [v8 responseHandler];

      if (v33)
      {
        __int16 v34 = [v8 responseHandler];
        uint64_t v35 = [MEMORY[0x1E4F28C58] hmErrorWithCode:17];
        ((void (**)(void, void *, void))v34)[2](v34, v35, 0);
      }
    }
    else
    {
      uint64_t v24 = (void *)MEMORY[0x1D9452090]();
      uint64_t v25 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        uint64_t v26 = HMFGetLogIdentifier();
        uint64_t v27 = [v5 UUIDString];
        int v36 = 138543618;
        uint64_t v37 = v26;
        __int16 v38 = 2112;
        id v39 = v27;
        _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_INFO, "%{public}@Cannot reset home %@ since it could not be found", (uint8_t *)&v36, 0x16u);
      }
      id v10 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:2 userInfo:0];
      uint32_t v28 = [v4 responseHandler];
      ((void (**)(void, id, void))v28)[2](v28, v10, 0);

      id v7 = 0;
    }
  }
  else
  {
    int v20 = (void *)MEMORY[0x1D9452090]();
    long long v21 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v22 = HMFGetLogIdentifier();
      id v23 = [v4 name];
      int v36 = 138543618;
      uint64_t v37 = v22;
      __int16 v38 = 2112;
      id v39 = v23;
      _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Bad request for message %@", (uint8_t *)&v36, 0x16u);
    }
    id v7 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:3 userInfo:0];
    id v10 = [v4 responseHandler];
    (*((void (**)(id, void *, void))v10 + 2))(v10, v7, 0);
  }
LABEL_21:
}

- (id)homeUserFromMessage:(id)a3 home:(id)a4
{
  return __isUserInMessagePartOfHome(self, a4, a3);
}

- (void)_removeAllUsersOfHome:(id)a3
{
  v76[1] = *MEMORY[0x1E4F143B8];
  __int16 v75 = @"kHomeUUID";
  id v50 = a3;
  id v4 = [v50 uuid];
  uint64_t v5 = [v4 UUIDString];
  v76[0] = v5;
  int v51 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v76 forKeys:&v75 count:1];

  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  id obj = [(HMDHomeManager *)self associatedWatchPeers];
  uint64_t v6 = [obj countByEnumeratingWithState:&v62 objects:v74 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v63;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v63 != v7) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(void **)(*((void *)&v62 + 1) + 8 * i);
        id v10 = (void *)MEMORY[0x1D9452090]();
        id v11 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          id v12 = HMFGetLogIdentifier();
          id v13 = [v50 name];
          *(_DWORD *)long long buf = 138543874;
          id v69 = v12;
          __int16 v70 = 2112;
          __int16 v71 = v13;
          __int16 v72 = 2112;
          char v73 = v9;
          _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Sending the remove home for %@ to watch %@", buf, 0x20u);
        }
        id v14 = +[HMDDevice deviceWithDestination:v9];
        id v15 = [HMDRemoteDeviceMessageDestination alloc];
        id v16 = [(HMDHomeManager *)self uuid];
        id v17 = [(HMDRemoteDeviceMessageDestination *)v15 initWithTarget:v16 device:v14];

        unsigned __int16 v18 = [MEMORY[0x1E4F65480] internalMessageWithName:@"kUserResetHomeConfigRequestKey" destination:v17 messagePayload:v51];
        uint64_t v19 = [(HMDHomeManager *)self messageDispatcher];
        [v19 sendMessage:v18 completionHandler:0];
      }
      uint64_t v6 = [obj countByEnumeratingWithState:&v62 objects:v74 count:16];
    }
    while (v6);
  }

  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  int v20 = [v50 users];
  uint64_t v21 = [v20 countByEnumeratingWithState:&v58 objects:v67 count:16];
  if (v21)
  {
    uint64_t v22 = *(void *)v59;
    do
    {
      for (uint64_t j = 0; j != v21; ++j)
      {
        if (*(void *)v59 != v22) {
          objc_enumerationMutation(v20);
        }
        uint64_t v24 = [*(id *)(*((void *)&v58 + 1) + 8 * j) account];
        uint64_t v25 = [v24 senderCorrelationIdentifier];
        [(HMDHomeManager *)self _trackRemovedHomeUserMergeId:v25];
      }
      uint64_t v21 = [v20 countByEnumeratingWithState:&v58 objects:v67 count:16];
    }
    while (v21);
  }

  [v50 isOwnerUser];
  if (+[HMDHomeManager isThisDeviceAdminOfHome:v50])
  {
    uint64_t v26 = [v50 users];
    uint64_t v27 = (void *)[v26 copy];

    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    id v47 = v27;
    uint64_t v28 = [v47 countByEnumeratingWithState:&v54 objects:v66 count:16];
    if (v28)
    {
      id obja = *(id *)v55;
      *(void *)&long long v29 = 138543874;
      long long v46 = v29;
      do
      {
        for (uint64_t k = 0; k != v28; ++k)
        {
          if (*(id *)v55 != obja) {
            objc_enumerationMutation(v47);
          }
          BOOL v31 = *(void **)(*((void *)&v54 + 1) + 8 * k);
          __int16 v32 = objc_msgSend(v50, "currentUser", v46);
          char v33 = [v31 isEqual:v32];

          if ((v33 & 1) == 0)
          {
            objc_opt_class();
            char isKindOfClass = objc_opt_isKindOfClass();
            uint64_t v35 = [(HMDHomeManager *)self uuid];
            int v36 = [v31 userID];
            if (isKindOfClass)
            {
              uint64_t v37 = [v31 userID];
              __int16 v38 = +[HMDMessageDispatcher destinationWithTarget:v35 userID:v36 destination:v37 multicast:0];
            }
            else
            {
              __int16 v38 = +[HMDMessageDispatcher destinationWithTarget:v35 userID:v36 destination:0 multicast:0];
            }

            if (v38)
            {
              id v39 = +[HMDRemoteMessage secureMessageWithName:@"kUserResetHomeConfigRequestKey" destination:v38 messagePayload:v51];
              objc_initWeak((id *)buf, self);
              v52[0] = MEMORY[0x1E4F143A8];
              v52[1] = 3221225472;
              v52[2] = __40__HMDHomeManager__removeAllUsersOfHome___block_invoke;
              v52[3] = &unk_1E6A17958;
              void v52[4] = v31;
              objc_copyWeak(&v53, (id *)buf);
              [v39 setResponseHandler:v52];
              uint64_t v40 = [(HMDHomeManager *)self messageDispatcher];
              [v40 sendMessage:v39 completionHandler:0];

              objc_destroyWeak(&v53);
              objc_destroyWeak((id *)buf);
            }
            else
            {
              long long v41 = (void *)MEMORY[0x1D9452090]();
              long long v42 = self;
              id v43 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v44 = HMFGetLogIdentifier();
                uint64_t v45 = [v31 userID];
                *(_DWORD *)long long buf = v46;
                id v69 = v44;
                __int16 v70 = 2112;
                __int16 v71 = v31;
                __int16 v72 = 2112;
                char v73 = v45;
                _os_log_impl(&dword_1D49D5000, v43, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot notify user %@ of home reset: could not create message destination for userID: %@", buf, 0x20u);
              }
            }
          }
        }
        uint64_t v28 = [v47 countByEnumeratingWithState:&v54 objects:v66 count:16];
      }
      while (v28);
    }
  }
}

void __40__HMDHomeManager__removeAllUsersOfHome___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)MEMORY[0x1D9452090]();
  id v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    id v10 = [*(id *)(a1 + 32) home];
    *(_DWORD *)long long buf = 138543874;
    uint64_t v19 = v9;
    __int16 v20 = 2112;
    uint64_t v21 = v10;
    __int16 v22 = 2112;
    id v23 = v5;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Reset home for user %@ with error: %@", buf, 0x20u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && [*(id *)(a1 + 32) isRemoteGateway])
  {
    id v12 = [WeakRetained workQueue];
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __40__HMDHomeManager__removeAllUsersOfHome___block_invoke_1240;
    v15[3] = &unk_1E6A197C8;
    id v13 = WeakRetained;
    uint64_t v14 = *(void *)(a1 + 32);
    id v16 = v13;
    uint64_t v17 = v14;
    dispatch_async(v12, v15);
  }
}

void __40__HMDHomeManager__removeAllUsersOfHome___block_invoke_1240(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v4 = [*(id *)(a1 + 40) userID];
  id v3 = [*(id *)(a1 + 40) home];
  [v2 _removeFromAssociatedPeers:v4 home:v3];
}

- (void)_sendUserRemoved:(id)a3 fromHome:(id)a4 pairingUsername:(id)a5 pushToCloud:(BOOL)a6 completionHandler:(id)a7
{
  BOOL v42 = a6;
  location[2] = *(id *)MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v11 = a4;
  id v38 = a5;
  id v44 = a7;
  id v12 = (void *)MEMORY[0x1E4F65480];
  long long v57 = @"kHomeUUID";
  id v13 = [v11 uuid];
  uint64_t v14 = [v13 UUIDString];
  long long v58 = v14;
  id v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v58 forKeys:&v57 count:1];
  id v16 = [v12 internalMessageWithName:@"kUserRemovedRequestKey" messagePayload:v15];

  if ([v10 isRemoteGateway])
  {
    uint64_t v40 = [v10 userID];
  }
  else
  {
    uint64_t v40 = 0;
  }
  long long v61 = @"kDeviceClassTypeKey";
  long long v62 = @"kDeviceClassTypeTransient";
  v63[0] = @"kRequiredCapabilitiesKey";
  uint64_t v17 = (void *)MEMORY[0x1E4F1C9E8];
  unsigned __int16 v18 = @"kDeviceClassTypeTransient";
  uint64_t v19 = [v17 dictionaryWithObjects:&v62 forKeys:&v61 count:1];
  v63[1] = @"kRequestedCapabilitiesKey";
  location[0] = v19;
  v59[0] = @"kHomedVersionKey";
  v59[1] = @"kHomeKitVersionStringKey";
  v60[0] = homedVersion;
  id v20 = (id)homedVersion;
  uint64_t v21 = +[HMDHomeKitVersion currentVersion];
  __int16 v22 = [v21 versionString];
  v60[1] = v22;
  id v23 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v60 forKeys:v59 count:2];
  location[1] = v23;
  id v39 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:location forKeys:v63 count:2];

  objc_initWeak(location, self);
  uint64_t v24 = [v10 userID];
  uint64_t v25 = [(HMDHomeManager *)self workQueue];
  v50[0] = MEMORY[0x1E4F143A8];
  v50[1] = 3221225472;
  v50[2] = __90__HMDHomeManager__sendUserRemoved_fromHome_pairingUsername_pushToCloud_completionHandler___block_invoke;
  v50[3] = &unk_1E6A16500;
  objc_copyWeak(&v55, location);
  id v36 = v44;
  id v54 = v36;
  id v45 = v11;
  id v51 = v45;
  id v26 = v10;
  id v52 = v26;
  id v37 = v16;
  id v53 = v37;
  [(HMDHomeManager *)self electDeviceForUser:v24 destination:v40 deviceCapabilities:v39 queue:v25 completionHandler:v50];

  if (v42)
  {
    id v43 = [MEMORY[0x1E4F1CA80] set];
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    uint64_t v27 = [v45 users];
    uint64_t v28 = [v27 countByEnumeratingWithState:&v46 objects:v56 count:16];
    if (!v28) {
      goto LABEL_18;
    }
    uint64_t v29 = *(void *)v47;
    while (1)
    {
      for (uint64_t i = 0; i != v28; ++i)
      {
        if (*(void *)v47 != v29) {
          objc_enumerationMutation(v27);
        }
        BOOL v31 = *(void **)(*((void *)&v46 + 1) + 8 * i);
        if ([v31 isRemoteGateway])
        {
          __int16 v32 = [v31 userID];
          char v33 = [v26 userID];
          if ([v32 isEqualToString:v33])
          {
          }
          else
          {
            __int16 v34 = [v45 currentUser];
            char v35 = [v31 isEqual:v34];

            if (v35) {
              continue;
            }
            __int16 v32 = [v31 userID];
            [v43 addObject:v32];
          }
        }
      }
      uint64_t v28 = [v27 countByEnumeratingWithState:&v46 objects:v56 count:16];
      if (!v28)
      {
LABEL_18:

        [(HMDHomeManager *)self _pushChangesToUsers:v43 forHome:v45];
        [(HMDHomeManager *)self setUploadHomeDataToCloud:1];
        [(HMDHomeManager *)self _pushChangesToCloud:0 withDelay:0.0];

        break;
      }
    }
  }

  objc_destroyWeak(&v55);
  objc_destroyWeak(location);
}

void __90__HMDHomeManager__sendUserRemoved_fromHome_pairingUsername_pushToCloud_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    if (v7)
    {
      id v11 = (void *)MEMORY[0x1D9452090]();
      id v12 = WeakRetained;
      id v13 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = HMFGetLogIdentifier();
        uint64_t v15 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138543618;
        char v33 = v14;
        __int16 v34 = 2112;
        uint64_t v35 = v15;
        _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Failed to elect device to send request to remove user from home: %@", buf, 0x16u);
      }
LABEL_14:

      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
      goto LABEL_15;
    }
    if (([*(id *)(a1 + 32) containsRemovedUser:*(void *)(a1 + 40)] & 1) == 0)
    {
      id v11 = (void *)MEMORY[0x1D9452090]();
      id v12 = WeakRetained;
      id v13 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v24 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        char v33 = v24;
        _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Skipping send remove user message due to the user being removed from removed user list", buf, 0xCu);
      }
      goto LABEL_14;
    }
    uint64_t v27 = [WeakRetained messageDispatcher];
    uint64_t v25 = *(void *)(a1 + 48);
    id v26 = [WeakRetained uuid];
    uint64_t v21 = [*(id *)(a1 + 40) userID];
    __int16 v22 = [v8 destination];
    id v23 = [WeakRetained workQueue];
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    v28[2] = __90__HMDHomeManager__sendUserRemoved_fromHome_pairingUsername_pushToCloud_completionHandler___block_invoke_1236;
    void v28[3] = &unk_1E6A159F8;
    objc_copyWeak(&v31, (id *)(a1 + 64));
    id v29 = *(id *)(a1 + 40);
    id v30 = *(id *)(a1 + 56);
    [v27 sendSecureMessage:v25 target:v26 userID:v21 destination:v22 responseQueue:v23 responseHandler:v28];

    objc_destroyWeak(&v31);
  }
  else
  {
    id v16 = (void *)MEMORY[0x1D9452090]();
    uint64_t v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      unsigned __int16 v18 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      char v33 = v18;
      _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_ERROR, "%{public}@Lost reference to home manager while electing a device to remove user", buf, 0xCu);
    }
    uint64_t v19 = *(void *)(a1 + 56);
    if (v19)
    {
      id v20 = [MEMORY[0x1E4F28C58] hmfErrorWithCode:8];
      (*(void (**)(uint64_t, void *, id))(v19 + 16))(v19, v20, v9);
    }
  }
LABEL_15:
}

void __90__HMDHomeManager__sendUserRemoved_fromHome_pairingUsername_pushToCloud_completionHandler___block_invoke_1236(uint64_t a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = WeakRetained;
    id v10 = HMFGetOSLogHandle();
    id v11 = v10;
    if (v5)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        id v12 = HMFGetLogIdentifier();
        int v21 = 138543618;
        __int16 v22 = v12;
        __int16 v23 = 2112;
        id v24 = v5;
        id v13 = "%{public}@User removed message responded with error: %@";
        uint64_t v14 = v11;
        os_log_type_t v15 = OS_LOG_TYPE_ERROR;
LABEL_10:
        _os_log_impl(&dword_1D49D5000, v14, v15, v13, (uint8_t *)&v21, 0x16u);
      }
    }
    else if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v12 = HMFGetLogIdentifier();
      uint64_t v19 = *(void **)(a1 + 32);
      int v21 = 138543618;
      __int16 v22 = v12;
      __int16 v23 = 2112;
      id v24 = v19;
      id v13 = "%{public}@Successfully removed user: %@";
      uint64_t v14 = v11;
      os_log_type_t v15 = OS_LOG_TYPE_INFO;
      goto LABEL_10;
    }

    (*(void (**)(void, id, id, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v5, v6, v20);
    goto LABEL_12;
  }
  id v16 = (void *)MEMORY[0x1D9452090]();
  uint64_t v17 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    unsigned __int16 v18 = HMFGetLogIdentifier();
    int v21 = 138543362;
    __int16 v22 = v18;
    _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_ERROR, "%{public}@Lost reference to home manager while sending remove user message", (uint8_t *)&v21, 0xCu);
  }
LABEL_12:
}

- (void)_sendUserAdded:(id)a3 destination:(id)a4 toHome:(id)a5
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  long long v41 = (__CFString *)a4;
  id v9 = a5;
  if (shouldLogPrivateInformation())
  {
    id v10 = [v8 userID];
  }
  else
  {
    id v10 = @"...";
    id v11 = @"...";
  }
  int v12 = shouldLogPrivateInformation();
  id v13 = v41;
  if (!v12) {
    id v13 = @"...";
  }
  uint64_t v14 = v13;
  os_log_type_t v15 = (void *)MEMORY[0x1D9452090]();
  id v16 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    uint64_t v17 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543874;
    long long v48 = v17;
    __int16 v49 = 2112;
    id v50 = v10;
    __int16 v51 = 2112;
    id v52 = v14;
    _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, "%{public}@Going to send home configuration to added user %@ at %@ and all resident devices", buf, 0x20u);
  }
  uint64_t v35 = v14;

  if ([v8 isRemoteGateway])
  {
    unsigned __int16 v18 = (void *)MEMORY[0x1D9452090]();
    uint64_t v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      uint64_t v20 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      long long v48 = v20;
      __int16 v49 = 2112;
      id v50 = v10;
      _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_INFO, "%{public}@Removing resident user %@ from unassociated list", buf, 0x16u);
    }
    int v21 = [v8 userID];
    [(HMDHomeManager *)self _removeFromUnassociatedPeers:v21 home:v9];
  }
  uint64_t v36 = v10;
  id v37 = self;
  __int16 v22 = v8;
  __int16 v23 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v40 = [MEMORY[0x1E4F1CA48] array];
  [MEMORY[0x1E4F1CA48] array];
  v39 = id v38 = v9;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id v24 = [v9 users];
  uint64_t v25 = [v24 countByEnumeratingWithState:&v42 objects:v46 count:16];
  if (v25)
  {
    uint64_t v26 = v25;
    uint64_t v27 = *(void *)v43;
    do
    {
      for (uint64_t i = 0; i != v26; ++i)
      {
        if (*(void *)v43 != v27) {
          objc_enumerationMutation(v24);
        }
        id v29 = *(void **)(*((void *)&v42 + 1) + 8 * i);
        int v30 = [v29 isRemoteGateway];
        id v31 = [v29 userID];
        if (v30)
        {
          __int16 v32 = v23;
LABEL_24:
          [v32 addObject:v31];

          continue;
        }
        char v33 = [v22 userID];
        int v34 = [(HMDHomeDataPushDestination *)v31 isEqualToString:v33];

        if (v41 && v34)
        {
          id v31 = [[HMDHomeDataPushDestination alloc] initWithUser:v29 destination:v41];
          [(HMDHomeDataPushDestination *)v31 setIgnoreConfigCompare:1];
          if ([v29 isAdministrator]) {
            __int16 v32 = v39;
          }
          else {
            __int16 v32 = v40;
          }
          goto LABEL_24;
        }
      }
      uint64_t v26 = [v24 countByEnumeratingWithState:&v42 objects:v46 count:16];
    }
    while (v26);
  }

  [(HMDHomeManager *)v37 _pushChangesForHome:v38 toRemoteDevicesOnSameAccount:v23 addedUser:v22];
  [(HMDHomeManager *)v37 _pushChangesForHome:v38 toRegularUsersOfHome:v40 adminUsersOfHome:v39];
}

- (void)_acceptHomeInviteFromAccount:(id)a3 message:(id)a4 trackInvite:(BOOL)a5
{
  BOOL v5 = a5;
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = [v9 messagePayload];
  id v11 = [v10 objectForKeyedSubscript:@"kRequestedCapabilitiesKey"];

  int v12 = (void *)MEMORY[0x1D9452090]();
  id v13 = self;
  uint64_t v14 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    os_log_type_t v15 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    long long v64 = v15;
    _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Handling request for getting controller identity for home invite request", buf, 0xCu);
  }
  if (v8)
  {
    id v16 = [v9 dataForKey:@"kControllerPublicKey"];
    uint64_t v17 = [v9 stringForKey:@"kControllerPairingNameKey"];
    unsigned __int16 v18 = (void (**)(void, void, void))v17;
    if (v16 && v17)
    {
      uint64_t v19 = v11;
      id v55 = v16;
      uint64_t v20 = (void *)[objc_alloc(MEMORY[0x1E4F65510]) initWithPairingKeyData:v16];
      int v21 = (void (**)(void, void, void))[objc_alloc(MEMORY[0x1E4F5BE00]) initWithIdentifier:v18 publicKey:v20 privateKey:0 permissions:0];
      uint64_t v22 = +[HMDIdentityRegistry sharedRegistry];
      [(id)v22 registerIdentity:v21 account:v8 object:v13];

      id v59 = 0;
      id v60 = 0;
      id v58 = 0;
      LOBYTE(v22) = [(HMDHomeManager *)v13 getOrCreateControllerPublicKey:&v60 controllerUsername:&v59 error:&v58];
      id v57 = v60;
      id v56 = v59;
      id v23 = v58;
      id v24 = v23;
      if (v22)
      {
        id v51 = v23;
        if (v5)
        {
          uint64_t v25 = [v9 remoteSenderContext];
          uint64_t v26 = [v25 mergeID];
          uint64_t v27 = [v9 messagePayload];
          id v28 = [(HMDHomeManager *)v13 _trackIncomingInvitationFromAccount:v8 mergeID:v26 idsInvitationIdentifier:0 payload:v27 invitationState:5 error:0];
        }
        id v53 = v8;
        id v29 = (void *)MEMORY[0x1D9452090]();
        int v30 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
        {
          id v31 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543618;
          long long v64 = v31;
          __int16 v65 = 2112;
          id v66 = v57;
          _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_INFO, "%{public}@Preparing response for request for controller info: %@", buf, 0x16u);
        }
        __int16 v32 = [MEMORY[0x1E4F1CA60] dictionary];
        v61[0] = @"kControllerPublicKey";
        char v33 = v57;
        if (!v57)
        {
          char v33 = [MEMORY[0x1E4F1CA98] null];
        }
        id v54 = v20;
        v62[0] = v33;
        v62[1] = v56;
        v61[1] = @"kControllerPairingNameKey";
        v61[2] = @"kInviteAcceptedKey";
        v62[2] = MEMORY[0x1E4F1CC38];
        int v34 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v62, v61, 3, v51);
        [v32 addEntriesFromDictionary:v34];

        if (!v57) {
        uint64_t v35 = [(HMDHomeManager *)v13 appleAccountManager];
        }
        uint64_t v36 = [v35 account];
        id v37 = [v36 primaryHandle];

        id v8 = v53;
        if (v37)
        {
          id v38 = +[HMDAccountHandleFormatter defaultFormatter];
          id v39 = [v38 stringForObjectValue:v37];

          if (v39) {
            [v32 setObject:v39 forKeyedSubscript:@"kUserIDKey"];
          }
        }
        uint64_t v40 = [(HMDHomeManager *)v13 _prepareAnswerForRequestedCapabilities:v19];
        if (v40) {
          [v32 addEntriesFromDictionary:v40];
        }
        [(HMDHomeManager *)v13 _updateIncomingInvitesPresent];
        long long v41 = [v9 responseHandler];
        v41[2](v41, 0, v32);

        uint64_t v20 = v54;
        id v11 = v19;
        id v24 = v52;
      }
      else
      {
        __int16 v32 = [v9 responseHandler];
        ((void (**)(void, void *, void))v32)[2](v32, v24, 0);
        id v11 = v19;
      }

      id v16 = v55;
    }
    else
    {
      long long v47 = (void *)MEMORY[0x1D9452090]();
      long long v48 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v49 = HMFGetLogIdentifier();
        id v50 = [v9 name];
        *(_DWORD *)long long buf = 138543618;
        long long v64 = v49;
        __int16 v65 = 2112;
        id v66 = v50;
        _os_log_impl(&dword_1D49D5000, v48, OS_LOG_TYPE_DEFAULT, "%{public}@Bad request for message %@, missing controller or public key", buf, 0x16u);
      }
      uint64_t v20 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:3 userInfo:0];
      int v21 = [v9 responseHandler];
      ((void (**)(void, void *, void))v21)[2](v21, v20, 0);
    }

    goto LABEL_32;
  }
  long long v42 = (void *)MEMORY[0x1D9452090]();
  long long v43 = v13;
  long long v44 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
  {
    long long v45 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    long long v64 = v45;
    __int16 v65 = 2112;
    id v66 = v9;
    _os_log_impl(&dword_1D49D5000, v44, OS_LOG_TYPE_ERROR, "%{public}@Failed to resolve inviter account for message: %@", buf, 0x16u);
  }
  long long v46 = [v9 responseHandler];

  if (v46)
  {
    id v16 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    unsigned __int16 v18 = [v9 responseHandler];
    ((void (**)(void, void *, void))v18)[2](v18, v16, 0);
LABEL_32:
  }
}

- (void)_postIncomingInvitationStateChangedNotification:(id)a3 newInvitationState:(int64_t)a4
{
  v27[1] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  [v6 updateInvitationState:a4];
  v27[0] = v6;
  id v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v27 count:1];
  id v8 = encodeRootObjectForIncomingXPCMessage(v7, 0);

  uint64_t v25 = @"kInvitationsDataKey";
  uint64_t v26 = v8;
  id v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v26 forKeys:&v25 count:1];
  id v10 = (void *)MEMORY[0x1D9452090]();
  id v11 = self;
  int v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v13 = HMFGetLogIdentifier();
    uint64_t v14 = [NSNumber numberWithInteger:a4];
    os_log_type_t v15 = [v6 describeWithFormat];
    int v19 = 138543874;
    uint64_t v20 = v13;
    __int16 v21 = 2112;
    uint64_t v22 = v14;
    __int16 v23 = 2112;
    id v24 = v15;
    _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Posting incoming state update to clients: %@ / %@", (uint8_t *)&v19, 0x20u);
  }
  id v16 = [MEMORY[0x1E4F65480] entitledMessageWithName:@"kUserInvitationsUpdatedNotificationKey" messagePayload:v9];
  uint64_t v17 = [(HMDHomeManager *)v11 messageDispatcher];
  unsigned __int16 v18 = [(HMDHomeManager *)v11 uuid];
  [v17 sendMessage:v16 target:v18];
}

- (id)_trackIncomingInvitationFromAccount:(id)a3 mergeID:(id)a4 idsInvitationIdentifier:(id)a5 payload:(id)a6 invitationState:(int64_t)a7 error:(id *)a8
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  id v12 = a3;
  id v77 = a4;
  id v71 = a5;
  id v79 = a6;
  id v13 = (void *)MEMORY[0x1D9452090]();
  BOOL v78 = self;
  uint64_t v14 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    os_log_type_t v15 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543874;
    id v90 = v15;
    __int16 v91 = 2112;
    id v92 = v12;
    __int16 v93 = 2112;
    id v94 = v79;
    _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_DEFAULT, "%{public}@Incoming invitation from account %@ with payload: %@", buf, 0x20u);
  }
  __int16 v75 = objc_msgSend(v79, "hmf_stringForKey:", @"kHomeName");
  id v16 = objc_msgSend(v79, "hmf_UUIDForKey:", @"kHomeUUID");
  long long v76 = objc_msgSend(v79, "hmf_UUIDForKey:", @"kInvitationIdentifierKey");
  __int16 v72 = objc_msgSend(v79, "hmf_dateForKey:", @"kInvitationExpiryDateKey");
  long long v87 = 0u;
  long long v88 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  uint64_t v17 = [(HMDHomeManager *)v78 incomingInvitations];
  unsigned __int16 v18 = (void *)[v17 copy];

  uint64_t v19 = [v18 countByEnumeratingWithState:&v85 objects:v101 count:16];
  if (v19)
  {
    uint64_t v20 = *(void *)v86;
LABEL_5:
    uint64_t v21 = 0;
    while (1)
    {
      if (*(void *)v86 != v20) {
        objc_enumerationMutation(v18);
      }
      uint64_t v22 = *(void **)(*((void *)&v85 + 1) + 8 * v21);
      __int16 v23 = [v22 homeUUID];
      if ([v23 isEqual:v16])
      {
        id v24 = [v22 inviterAccount];
        char v25 = [v24 isRelatedToAccount:v12];

        if (v25)
        {
          uint64_t v26 = v22;

          if (!v26) {
            goto LABEL_18;
          }
          if ([(HMDHomeInvitation *)v26 isExpired])
          {
            uint64_t v27 = v26;
            goto LABEL_19;
          }
          id v51 = (void *)MEMORY[0x1D9452090]();
          id v52 = v78;
          id v53 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
          {
            id v54 = HMFGetLogIdentifier();
            id v55 = [v12 shortDescription];
            id v56 = [v16 UUIDString];
            *(_DWORD *)long long buf = 138544130;
            id v90 = v54;
            __int16 v91 = 2112;
            id v92 = v55;
            __int16 v93 = 2112;
            id v94 = v75;
            __int16 v95 = 2112;
            id v96 = v56;
            _os_log_impl(&dword_1D49D5000, v53, OS_LOG_TYPE_DEFAULT, "%{public}@Ignoring invite since we are already tracking an invite from account %@ for home %@(%@)", buf, 0x2Au);
          }
          if (a7 == 5)
          {
            int v45 = 0;
            goto LABEL_40;
          }
          goto LABEL_46;
        }
      }
      else
      {
      }
      if (v19 == ++v21)
      {
        uint64_t v19 = [v18 countByEnumeratingWithState:&v85 objects:v101 count:16];
        if (v19) {
          goto LABEL_5;
        }
        break;
      }
    }
  }

LABEL_18:
  uint64_t v27 = 0;
LABEL_19:
  id v28 = objc_msgSend(v79, "hmf_dataForKey:", @"kControllerPublicKey");
  int v74 = objc_msgSend(v79, "hmf_stringForKey:", @"kControllerPairingNameKey");
  if (v28 && v74)
  {
    __int16 v70 = (void *)[objc_alloc(MEMORY[0x1E4F65510]) initWithPairingKeyData:v28];
    long long v68 = (void *)[objc_alloc(MEMORY[0x1E4F65508]) initWithIdentifier:v74 publicKey:v70 privateKey:0];
    if ([(HMDHomeInvitation *)v27 isExpired])
    {
      id v29 = (void *)MEMORY[0x1D9452090]();
      int v30 = v78;
      id v31 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        __int16 v32 = HMFGetLogIdentifier();
        char v33 = [v12 shortDescription];
        *(_DWORD *)long long buf = 138543618;
        id v90 = v32;
        __int16 v91 = 2112;
        id v92 = v33;
        _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_INFO, "%{public}@Existing invitation from user (%@) was expired, recreating a new invitation", buf, 0x16u);
      }
      [(HMDHomeManager *)v30 _postIncomingInvitationStateChangedNotification:v27 newInvitationState:6];
      [(HMDHomeManager *)v30 _removeIncomingInvitation:v27];
    }
    uint64_t v26 = [[HMDIncomingHomeInvitation alloc] initWithInviterAccount:v12 invitationIdentifier:v76 invitationState:a7 homeName:v75 homeUUID:v16 inviterIdentity:v68 inviterMergeID:v77 expiryDate:v72];

    int v34 = (void *)MEMORY[0x1D9452090]();
    uint64_t v35 = v78;
    uint64_t v36 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      id v37 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543874;
      id v90 = v37;
      __int16 v91 = 2112;
      id v92 = v77;
      __int16 v93 = 2112;
      id v94 = v76;
      _os_log_impl(&dword_1D49D5000, v36, OS_LOG_TYPE_INFO, "%{public}@Received incoming invitation from mergeID %@ for invite %@", buf, 0x20u);
    }
    id v38 = [(HMDHomeManager *)v35 workQueue];
    [(HMDHomeInvitation *)v26 setClientQueue:v38];

    objc_initWeak(&location, v35);
    objc_initWeak(&from, v26);
    v80[0] = MEMORY[0x1E4F143A8];
    v80[1] = 3221225472;
    v80[2] = __116__HMDHomeManager__trackIncomingInvitationFromAccount_mergeID_idsInvitationIdentifier_payload_invitationState_error___block_invoke;
    v80[3] = &unk_1E6A177A8;
    objc_copyWeak(&v81, &location);
    objc_copyWeak(&v82, &from);
    v80[4] = v35;
    [(HMDHomeInvitation *)v26 setExpirationHandler:v80];
    [(HMDHomeManager *)v35 _addIncomingInvitation:v26];
    context = (void *)MEMORY[0x1D9452090]([(HMDHomeManager *)v35 _postIncomingInvitationStateChangedNotification:v26 newInvitationState:a7]);
    id v39 = v35;
    HMFGetOSLogHandle();
    uint64_t v40 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      id v66 = (id)objc_claimAutoreleasedReturnValue();
      __int16 v65 = [(HMDHomeInvitation *)v26 identifier];
      long long v41 = [v65 UUIDString];
      id v42 = [MEMORY[0x1E4F2E818] homeInvitationStateDescription:a7];
      id v43 = [v12 shortDescription];
      long long v44 = [v16 UUIDString];
      *(_DWORD *)long long buf = 138544642;
      id v90 = v66;
      __int16 v91 = 2112;
      id v92 = v41;
      __int16 v93 = 2112;
      id v94 = v42;
      __int16 v95 = 2112;
      id v96 = v43;
      __int16 v97 = 2112;
      uint64_t v98 = v75;
      __int16 v99 = 2112;
      int v100 = v44;
      _os_log_impl(&dword_1D49D5000, v40, OS_LOG_TYPE_DEFAULT, "%{public}@Tracking incoming invite %@ with state %@ from account %@ for home %@(%@)", buf, 0x3Eu);
    }
    objc_destroyWeak(&v82);
    objc_destroyWeak(&v81);
    objc_destroyWeak(&from);
    objc_destroyWeak(&location);

    if (a7 == 5)
    {
      int v45 = 1;
LABEL_40:
      id v57 = [(HMDHomeManager *)v78 uuidsOfRemovedHomes];
      int v58 = [v57 containsObject:v16];

      if (v58)
      {
        id v59 = [(HMDHomeManager *)v78 uuidsOfRemovedHomes];
        [v59 removeObject:v16];

        id v60 = (void *)MEMORY[0x1D9452090]();
        long long v61 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
        {
          long long v62 = HMFGetLogIdentifier();
          long long v63 = [v16 UUIDString];
          *(_DWORD *)long long buf = 138543618;
          id v90 = v62;
          __int16 v91 = 2112;
          id v92 = v63;
          _os_log_impl(&dword_1D49D5000, v61, OS_LOG_TYPE_INFO, "%{public}@Removing home with UUID %@ from uuids of guest homes removed locally since invite was accepted", buf, 0x16u);
        }
        [(HMDHomeManager *)v78 _stopTrackingRemovedHomeUserMergeId:v77];
      }
      else
      {
        [(HMDHomeManager *)v78 _stopTrackingRemovedHomeUserMergeId:v77];
        if (!v45) {
          goto LABEL_46;
        }
      }
    }
    [(HMDHomeManager *)v78 _saveWithReason:@"Incoming invitations updated" postSyncNotification:0];
LABEL_46:
    uint64_t v27 = v26;
    id v50 = v27;
  }
  else
  {
    long long v46 = (void *)MEMORY[0x1D9452090]();
    long long v47 = v78;
    long long v48 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v49 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v90 = v49;
      __int16 v91 = 2112;
      id v92 = v76;
      _os_log_impl(&dword_1D49D5000, v48, OS_LOG_TYPE_DEFAULT, "%{public}@Bad request for invitation with ID %@, missing controller or public key", buf, 0x16u);
    }
    if (a8)
    {
      *a8 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:3 userInfo:0];
    }

    id v50 = 0;
  }

  return v50;
}

void __116__HMDHomeManager__trackIncomingInvitationFromAccount_mergeID_idsInvitationIdentifier_payload_invitationState_error___block_invoke(id *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained(a1 + 5);
  if (WeakRetained)
  {
    id v3 = objc_loadWeakRetained(a1 + 6);
    id v4 = +[HMDBulletinBoard sharedBulletinBoard];
    BOOL v5 = [v3 identifier];
    id v6 = [v5 UUIDString];
    [v4 removeBulletinWithRecordID:v6];

    objc_msgSend(WeakRetained, "_postIncomingInvitationStateChangedNotification:newInvitationState:", v3, objc_msgSend(v3, "invitationState"));
    [a1[4] _removeIncomingInvitation:v3];
    id v7 = (void *)MEMORY[0x1D9452090]([WeakRetained saveWithReason:@"kAccessHomeInviteRequestKey" information:0 postSyncNotification:0]);
    id v8 = a1[4];
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      id v10 = HMFGetLogIdentifier();
      id v11 = [a1[4] incomingInvitations];
      int v12 = 138543618;
      id v13 = v10;
      __int16 v14 = 2112;
      os_log_type_t v15 = v11;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@New incomingInvitations after expiration: %@", (uint8_t *)&v12, 0x16u);
    }
  }
}

- (void)_handleDismissDialogRequest:(id)a3
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  BOOL v5 = [v4 stringForKey:@"kDialogContextKey"];
  char v16 = 0;
  uint64_t v6 = [v4 BOOLForKey:@"kDialogSelectionKey" keyPresent:&v16];
  if (v5 && v16)
  {
    uint64_t v7 = v6;
    id v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = HMFGetLogIdentifier();
      id v11 = "canceled";
      *(_DWORD *)long long buf = 138543874;
      unsigned __int16 v18 = v10;
      if (v7) {
        id v11 = "accepted";
      }
      __int16 v19 = 2112;
      uint64_t v20 = v5;
      __int16 v21 = 2080;
      uint64_t v22 = v11;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Received message from peer device to dismiss dialog with context %@, selection: %s", buf, 0x20u);
    }
    int v12 = +[HMDUIDialogPresenter sharedUIDialogPresenter];
    id v13 = [(HMDHomeManager *)self workQueue];
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    void v14[2] = __46__HMDHomeManager__handleDismissDialogRequest___block_invoke;
    v14[3] = &unk_1E6A19B30;
    id v15 = v5;
    [v12 dismissPendingDialogDueToPeerDeviceSelection:v7 context:v15 queue:v13 completionHandler:v14];
  }
}

void __46__HMDHomeManager__handleDismissDialogRequest___block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = HMFGetLogIdentifier();
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138543618;
    uint64_t v7 = v4;
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    _os_log_impl(&dword_1D49D5000, v3, OS_LOG_TYPE_DEFAULT, "%{public}@Dismissed dialog with context %@", (uint8_t *)&v6, 0x16u);
  }
}

- (void)dismissDialogOnAllMyTransientDevicesWithContext:(id)a3 selection:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  uint64_t v7 = [(HMDHomeManager *)self appleAccountManager];
  __int16 v8 = [v7 account];
  uint64_t v9 = [v8 handles];
  uint64_t v10 = [v9 firstObject];

  if (v10)
  {
    id v11 = [HMDRemoteAccountMessageDestination alloc];
    int v12 = [(HMDHomeManager *)self uuid];
    id v13 = [(HMDRemoteAccountMessageDestination *)v11 initWithTarget:v12 handle:v10 multicast:1];

    __int16 v14 = (void *)MEMORY[0x1E4F65480];
    id v15 = objc_msgSend(NSNumber, "numberWithBool:", v4, @"kDialogContextKey", @"kDialogSelectionKey", v6);
    v24[1] = v15;
    char v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:&v23 count:2];
    uint64_t v17 = [v14 internalMessageWithName:@"kDismissDialogInternalRequestKey" destination:v13 messagePayload:v16];

    unsigned __int16 v18 = [(HMDHomeManager *)self messageDispatcher];
    [v18 sendMessage:v17];
  }
  else
  {
    __int16 v19 = (void *)MEMORY[0x1D9452090]();
    uint64_t v20 = self;
    __int16 v21 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v26 = v22;
      _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot find own account handle to send message to dismiss dialog on all devices", buf, 0xCu);
    }
  }
}

- (void)_handleDismissBulletinRequest:(id)a3
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [v4 stringForKey:@"kBulletinRecordIDKey"];
  if (v5)
  {
    id v6 = (void *)MEMORY[0x1D9452090]();
    uint64_t v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v8 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v37 = v8;
      __int16 v38 = 2112;
      id v39 = v5;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Received message from peer device to dismiss bulletin with record ID %@", buf, 0x16u);
    }
    uint64_t v9 = +[HMDBulletinBoard sharedBulletinBoard];
    [v9 removeBulletinWithRecordID:v5];

    uint64_t v10 = [v4 numberForKey:@"kInvitationStateKey"];
    id v11 = v10;
    if (!v10) {
      goto LABEL_20;
    }
    uint64_t v12 = [v10 unsignedIntegerValue];
    id v13 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v5];
    __int16 v14 = [(HMDHomeManager *)self incomingInvitations];
    id v15 = objc_msgSend(v14, "hmf_firstObjectWithValue:forKeyPath:", v13, @"identifier");

    if (v15)
    {
      if ((unint64_t)(v12 - 6) < 2 || v12 == 4)
      {
        [(HMDHomeManager *)self _postIncomingInvitationStateChangedNotification:v15 newInvitationState:v12];
        [(HMDHomeManager *)self _removeIncomingInvitation:v15];
LABEL_18:
        char v33 = [v4 name];
        [(HMDHomeManager *)self _saveWithReason:v33 postSyncNotification:0];

LABEL_19:
        [(HMDHomeManager *)self _updateIncomingInvitesPresent];

LABEL_20:
        goto LABEL_21;
      }
      if (v12 == 3)
      {
        id v16 = objc_alloc(MEMORY[0x1E4F29128]);
        uint64_t v17 = [v4 stringForKey:@"kHomeUUID"];
        unsigned __int16 v18 = (void *)[v16 initWithUUIDString:v17];

        [(HMDHomeManager *)self _postIncomingInvitationStateChangedNotification:v15 newInvitationState:5];
        __int16 v19 = [(HMDHomeManager *)self uuidsOfRemovedHomes];
        int v20 = [v19 containsObject:v18];

        if (v20)
        {
          __int16 v21 = [(HMDHomeManager *)self uuidsOfRemovedHomes];
          [v21 removeObject:v18];

          uint64_t v22 = (void *)MEMORY[0x1D9452090]();
          uint64_t v23 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
          {
            id v24 = HMFGetLogIdentifier();
            [v18 UUIDString];
            char v25 = v34 = v22;
            *(_DWORD *)long long buf = 138543618;
            id v37 = v24;
            __int16 v38 = 2112;
            id v39 = v25;
            _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_INFO, "%{public}@Removing home with UUID %@ from uuids of guest homes removed locally since invite was accepted", buf, 0x16u);

            uint64_t v22 = v34;
          }
        }
        uint64_t v26 = [(HMDHomeManager *)self _homeWithUUID:v18];
        uint64_t v27 = [v26 owner];
        id v28 = [v27 account];
        [v28 senderCorrelationIdentifier];
        v29 = uint64_t v35 = v18;

        [(HMDHomeManager *)self _stopTrackingRemovedHomeUserMergeId:v29];
        goto LABEL_18;
      }
    }
    int v30 = (void *)MEMORY[0x1D9452090]();
    id v31 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v32 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v37 = v32;
      __int16 v38 = 2112;
      id v39 = v5;
      _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_DEFAULT, "%{public}@Dismiss bulletin request received with no matching invitation: %@", buf, 0x16u);
    }
    goto LABEL_19;
  }
LABEL_21:
}

- (void)dismissBulletinOnAllMyTransientDevicesWithContext:(id)a3
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self appleAccountManager];
  id v6 = [v5 account];
  uint64_t v7 = [v6 handles];
  __int16 v8 = [v7 firstObject];

  if (v8)
  {
    uint64_t v9 = [HMDRemoteAccountMessageDestination alloc];
    uint64_t v10 = [(HMDHomeManager *)self uuid];
    id v11 = [(HMDRemoteAccountMessageDestination *)v9 initWithTarget:v10 handle:v8 multicast:1];

    uint64_t v12 = [MEMORY[0x1E4F65480] internalMessageWithName:@"kDismissBulletinInternalRequestKey" destination:v11 messagePayload:v4];
    id v13 = [(HMDHomeManager *)self messageDispatcher];
    [v13 sendMessage:v12];
  }
  else
  {
    __int16 v14 = (void *)MEMORY[0x1D9452090]();
    id v15 = self;
    id v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = HMFGetLogIdentifier();
      int v18 = 138543362;
      __int16 v19 = v17;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot find own account handle to send message to dismiss bulletin on all devices", (uint8_t *)&v18, 0xCu);
    }
  }
}

- (void)_handleAccessHomeInviteFromAccount:(id)a3 mergeID:(id)a4 idsInvitationIdentifier:(id)a5 payload:(id)a6 messageResponseHandler:(id)a7
{
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  uint64_t v17 = +[HMDHomeInviteLogEvent updateWithState:1 isFMFDevice:isThisDeviceDesignatedFMFDevice()];
  if (v17)
  {
    int v18 = [(HMDHomeManager *)self logEventSubmitter];
    [v18 submitLogEvent:v17];
  }
  id v29 = 0;
  BOOL v19 = [(HMDHomeManager *)self shouldAcceptInvitationPayload:v15 error:&v29];
  id v20 = v29;
  if (v19)
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __116__HMDHomeManager__handleAccessHomeInviteFromAccount_mergeID_idsInvitationIdentifier_payload_messageResponseHandler___block_invoke;
    aBlock[3] = &unk_1E6A164D8;
    void aBlock[4] = self;
    id v24 = v15;
    id v28 = v16;
    id v21 = v12;
    id v25 = v21;
    id v26 = v13;
    id v27 = v14;
    uint64_t v22 = _Block_copy(aBlock);
    [v21 isOfKnownPersonWithCompletion:v22];
  }
  else if (v16)
  {
    (*((void (**)(id, id, void))v16 + 2))(v16, v20, 0);
  }
}

void __116__HMDHomeManager__handleAccessHomeInviteFromAccount_mergeID_idsInvitationIdentifier_payload_messageResponseHandler___block_invoke(id *a1, char a2)
{
  id v4 = [a1[4] workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __116__HMDHomeManager__handleAccessHomeInviteFromAccount_mergeID_idsInvitationIdentifier_payload_messageResponseHandler___block_invoke_2;
  block[3] = &unk_1E6A164B0;
  id v5 = a1[5];
  char v14 = a2;
  id v6 = a1[4];
  id v8 = v5;
  id v9 = v6;
  id v13 = a1[9];
  id v10 = a1[6];
  id v11 = a1[7];
  id v12 = a1[8];
  dispatch_async(v4, block);
}

void __116__HMDHomeManager__handleAccessHomeInviteFromAccount_mergeID_idsInvitationIdentifier_payload_messageResponseHandler___block_invoke_2(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v2 = objc_msgSend(*(id *)(a1 + 32), "hmf_stringForKey:", @"kHomeName");
  if (*(unsigned char *)(a1 + 80) || ([*(id *)(a1 + 40) shouldAcceptInvitationWithHomeName:v2] & 1) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v5 = *(void *)(a1 + 64);
    uint64_t v7 = *(void *)(a1 + 32);
    id v6 = *(void **)(a1 + 40);
    id v30 = 0;
    id v8 = [v6 _trackIncomingInvitationFromAccount:v3 mergeID:v4 idsInvitationIdentifier:v5 payload:v7 invitationState:2 error:&v30];
    id v9 = v30;
    int v10 = objc_msgSend(*(id *)(a1 + 32), "hmf_BOOLForKey:", @"HMDHomeSuppressInviteNotificationKey");
    if (v9 && (uint64_t v11 = *(void *)(a1 + 72)) != 0)
    {
      (*(void (**)(void, id, void))(v11 + 16))(*(void *)(a1 + 72), v9, 0);
    }
    else if (v8)
    {
      if (v10)
      {
        id v12 = (void *)MEMORY[0x1D9452090]();
        id v13 = *(id *)(a1 + 40);
        char v14 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          id v15 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543362;
          __int16 v32 = v15;
          _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Suppressing home invite notification", buf, 0xCu);
        }
        id v16 = +[HMDHomeInviteLogEvent updateWithState:3 isFMFDevice:isThisDeviceDesignatedFMFDevice()];
        if (v16)
        {
          uint64_t v17 = [*(id *)(a1 + 40) logEventSubmitter];
          [v17 submitLogEvent:v16];
        }
      }
      else
      {
        id v24 = +[HMDBulletinBoard sharedBulletinBoard];
        id v16 = v24;
        if (*(unsigned char *)(a1 + 80))
        {
          id v25 = (id)[v24 insertBulletinForIncomingInvitation:v8];
        }
        else
        {
          id v26 = (void *)MEMORY[0x1D9452090]();
          id v27 = *(id *)(a1 + 40);
          id v28 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
          {
            id v29 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543362;
            __int16 v32 = v29;
            _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_INFO, "%{public}@Suppressing home invite notification because inviter is not a known person.", buf, 0xCu);
          }
        }
        [v16 refreshHomeBadgeNumber];
      }
    }
    goto LABEL_25;
  }
  int v18 = (void *)MEMORY[0x1D9452090]();
  id v19 = *(id *)(a1 + 40);
  id v20 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    id v21 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    __int16 v32 = v21;
    __int16 v33 = 2112;
    int v34 = v2;
    _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_ERROR, "%{public}@Cannot accept invitation payload due to invalid home name: %@", buf, 0x16u);
  }
  id v9 = +[HMDHomeInviteLogEvent updateWithState:2 isFMFDevice:isThisDeviceDesignatedFMFDevice()];
  if (v9)
  {
    uint64_t v22 = [*(id *)(a1 + 40) logEventSubmitter];
    [v22 submitLogEvent:v9];
  }
  uint64_t v23 = *(void *)(a1 + 72);
  if (v23)
  {
    id v8 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    (*(void (**)(uint64_t, void *, void))(v23 + 16))(v23, v8, 0);
LABEL_25:
  }
}

- (BOOL)shouldAcceptInvitationWithHomeName:(id)a3
{
  return objc_msgSend(a3, "hm_containsAnyTextCheckingTypeInTypes:", 2080) ^ 1;
}

- (BOOL)shouldAcceptInvitationPayload:(id)a3 error:(id *)a4
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  uint64_t v7 = objc_msgSend(v6, "hmf_stringForKey:", @"kHomeName");
  uint64_t v8 = objc_msgSend(v6, "hmf_UUIDForKey:", @"kHomeUUID");
  id v9 = (void *)v8;
  if (v7 && v8)
  {
    int v10 = [(HMDHomeManager *)self _homeWithUUID:v8];
    if (v10)
    {
      uint64_t v11 = (void *)MEMORY[0x1D9452090]();
      id v12 = self;
      id v13 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        char v14 = HMFGetLogIdentifier();
        int v35 = 138543618;
        uint64_t v36 = v14;
        __int16 v37 = 2112;
        __int16 v38 = v9;
        _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_ERROR, "%{public}@Cannot accept invitation payload because home already exists for homeUUID: %@", (uint8_t *)&v35, 0x16u);
      }
      if (a4)
      {
        uint64_t v15 = 1;
LABEL_24:
        [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:v15 userInfo:0];
        BOOL v20 = 0;
        *a4 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_26;
      }
    }
    else
    {
      id v21 = +[HMDDeviceCapabilities deviceCapabilities];
      char v22 = [v21 supportsHomeInvitation];

      if (v22)
      {
        uint64_t v23 = [(HMDHomeManager *)self homes];
        unint64_t v24 = [v23 count];
        unint64_t v25 = maximumHomes;

        if (v24 < v25)
        {
          BOOL v20 = 1;
LABEL_26:

          goto LABEL_27;
        }
        id v30 = (void *)MEMORY[0x1D9452090]();
        id v31 = self;
        __int16 v32 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          __int16 v33 = HMFGetLogIdentifier();
          int v35 = 138543362;
          uint64_t v36 = v33;
          _os_log_impl(&dword_1D49D5000, v32, OS_LOG_TYPE_ERROR, "%{public}@Cannot accept invitation payload because invitee has already maximum allowed homes", (uint8_t *)&v35, 0xCu);
        }
        if (a4)
        {
          uint64_t v15 = 49;
          goto LABEL_24;
        }
      }
      else
      {
        id v26 = (void *)MEMORY[0x1D9452090]();
        id v27 = self;
        id v28 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          id v29 = HMFGetLogIdentifier();
          int v35 = 138543362;
          uint64_t v36 = v29;
          _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_ERROR, "%{public}@Cannot accept invitation payload because device does not support invitations", (uint8_t *)&v35, 0xCu);
        }
        if (a4)
        {
          uint64_t v15 = 10;
          goto LABEL_24;
        }
      }
    }
    BOOL v20 = 0;
    goto LABEL_26;
  }
  id v16 = (void *)MEMORY[0x1D9452090]();
  uint64_t v17 = self;
  int v18 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    id v19 = HMFGetLogIdentifier();
    int v35 = 138543874;
    uint64_t v36 = v19;
    __int16 v37 = 2112;
    __int16 v38 = v7;
    __int16 v39 = 2112;
    uint64_t v40 = v9;
    _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_ERROR, "%{public}@Cannot accept invitation payload because homeName: %@ or homeUUID: %@ is missing", (uint8_t *)&v35, 0x20u);
  }
  if (a4)
  {
    [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:20 userInfo:0];
    BOOL v20 = 0;
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    BOOL v20 = 0;
  }
LABEL_27:

  return v20;
}

- (void)_handleAccessHomeInvite:(id)a3
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [v4 remoteSourceID];
  if (!v5)
  {
    uint64_t v7 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:20 userInfo:0];
    id v12 = [v4 responseHandler];
    ((void (**)(void, void *, void))v12)[2](v12, v7, 0);
LABEL_9:

    goto LABEL_10;
  }
  id v6 = [v4 remoteSourceDevice];
  uint64_t v7 = [v6 account];

  if (v7)
  {
    uint64_t v8 = [v4 remoteSenderContext];
    id v9 = [v8 mergeID];
    int v10 = [v4 messagePayload];
    uint64_t v11 = [v4 responseHandler];
    [(HMDHomeManager *)self _handleAccessHomeInviteFromAccount:v7 mergeID:v9 idsInvitationIdentifier:0 payload:v10 messageResponseHandler:v11];

    goto LABEL_10;
  }
  id v13 = (void *)MEMORY[0x1D9452090]();
  char v14 = self;
  uint64_t v15 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    id v16 = HMFGetLogIdentifier();
    int v19 = 138543618;
    BOOL v20 = v16;
    __int16 v21 = 2112;
    id v22 = v4;
    _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_ERROR, "%{public}@Failed to resolve inviter account for message: %@", (uint8_t *)&v19, 0x16u);
  }
  uint64_t v17 = [v4 responseHandler];

  if (v17)
  {
    id v12 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    int v18 = [v4 responseHandler];
    v18[2](v18, v12, 0);

    goto LABEL_9;
  }
LABEL_10:
}

- (void)_handleAddRemoteAccessRequest:(id)a3
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = +[HMDDeviceCapabilities deviceCapabilities];
  int v6 = [v5 isResidentCapable];

  if (!v6)
  {
    uint64_t v11 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v12 = *MEMORY[0x1E4F2D140];
    uint64_t v13 = 10;
LABEL_7:
    char v14 = [v11 errorWithDomain:v12 code:v13 userInfo:0];
    uint64_t v15 = [v4 responseHandler];
    ((void (**)(void, void *, void))v15)[2](v15, v14, 0);
LABEL_8:

    goto LABEL_9;
  }
  if (+[HMDKeyTransferAgentServer isPeerAvailable])
  {
    uint64_t v7 = (void *)MEMORY[0x1D9452090]();
    uint64_t v8 = self;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v10 = HMFGetLogIdentifier();
      int v23 = 138543618;
      unint64_t v24 = v10;
      __int16 v25 = 2112;
      id v26 = v4;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Rejecting remote access request, key transfer peer is available: %@", (uint8_t *)&v23, 0x16u);
    }
    uint64_t v11 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v12 = *MEMORY[0x1E4F2D140];
    uint64_t v13 = 48;
    goto LABEL_7;
  }
  id v16 = [v4 remoteSourceDevice];
  char v14 = [v16 account];

  if (v14)
  {
    [(HMDHomeManager *)self _acceptHomeInviteFromAccount:v14 message:v4 trackInvite:1];
    goto LABEL_9;
  }
  uint64_t v17 = (void *)MEMORY[0x1D9452090]();
  int v18 = self;
  int v19 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    BOOL v20 = HMFGetLogIdentifier();
    int v23 = 138543362;
    unint64_t v24 = v20;
    _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_INFO, "%{public}@Failed to resolve inviter account", (uint8_t *)&v23, 0xCu);
  }
  __int16 v21 = [v4 responseHandler];

  if (v21)
  {
    uint64_t v15 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    id v22 = [v4 responseHandler];
    v22[2](v22, v15, 0);

    goto LABEL_8;
  }
LABEL_9:
}

- (void)_handleDoYouSeeUnpairedAccessories:(id)a3
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [v4 stringForKey:@"kHomeUUID"];
  int v6 = (void *)MEMORY[0x1D9452090]();
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    id v31 = v8;
    __int16 v32 = 2112;
    id v33 = v5;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Received request to determine if we are at home %@ for unpaired accessories", buf, 0x16u);
  }
  id v9 = +[HMDDeviceCapabilities deviceCapabilities];
  int v10 = [v9 isResidentCapable];

  if (!v10)
  {
    int v18 = (void *)MEMORY[0x1D9452090]();
    int v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v20 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v31 = v20;
      _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_DEFAULT, "%{public}@This device is not capable to access as a remote access point", buf, 0xCu);
    }
    uint64_t v15 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v16 = *MEMORY[0x1E4F2D140];
    uint64_t v17 = 10;
    goto LABEL_11;
  }
  if (+[HMDKeyTransferAgentServer isPeerAvailable])
  {
    uint64_t v11 = (void *)MEMORY[0x1D9452090]();
    uint64_t v12 = self;
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      char v14 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v31 = v14;
      __int16 v32 = 2112;
      id v33 = v4;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Rejecting remote access request, key transfer peer is available: %@", buf, 0x16u);
    }
    uint64_t v15 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v16 = *MEMORY[0x1E4F2D140];
    uint64_t v17 = 48;
LABEL_11:
    __int16 v21 = [v15 errorWithDomain:v16 code:v17 userInfo:0];
    id v22 = [v4 responseHandler];
    ((void (**)(void, void *, void))v22)[2](v22, v21, 0);
    goto LABEL_12;
  }
  __int16 v21 = [v4 arrayForKey:@"kAccessoryIdentitiesKey"];
  int v23 = [(HMDHomeManager *)self accessoryBrowserInternal];
  id v22 = [v23 discoveredAccessoryServers];

  if ([(HMDHomeManager *)self _findAnyAccessoryWithIdentities:v21 inAccessoryServers:v22])
  {
    unint64_t v24 = objc_msgSend(NSNumber, "numberWithBool:", 1, @"kAtHomeStateKey");
    v28[1] = @"kDeviceNameKey";
    v29[0] = v24;
    __int16 v25 = deviceName();
    v29[1] = v25;
    id v26 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v29 forKeys:v28 count:2];

    uint64_t v27 = [v4 responseHandler];
    ((void (**)(void, void, void *))v27)[2](v27, 0, v26);
  }
  else
  {
    [(HMDHomeManager *)self _startScanningForAccessories:v4];
  }
LABEL_12:
}

- (BOOL)_findAnyAccessoryWithIdentities:(id)a3 inAccessoryServers:(id)a4
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = a4;
  if ([v5 count] && objc_msgSend(v6, "count"))
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v7 = v5;
    uint64_t v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)v15;
      while (2)
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v15 != v9) {
            objc_enumerationMutation(v7);
          }
          uint64_t v11 = objc_msgSend(MEMORY[0x1E4F5BC00], "serverIdentifierWithUniqueIdentifier:", *(void *)(*((void *)&v14 + 1) + 8 * i), (void)v14);
          char v12 = [v6 containsObject:v11];

          if (v12)
          {
            LOBYTE(v8) = 1;
            goto LABEL_14;
          }
        }
        uint64_t v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
        if (v8) {
          continue;
        }
        break;
      }
    }
LABEL_14:
  }
  else
  {
    LOBYTE(v8) = 0;
  }

  return v8;
}

- (void)_startScanningForAccessories:(id)a3
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 stringForKey:@"kHomeUUID"];
  id v6 = (void *)MEMORY[0x1D9452090]();
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    uint64_t v9 = [v4 name];
    int v17 = 138543874;
    int v18 = v8;
    __int16 v19 = 2112;
    BOOL v20 = v5;
    __int16 v21 = 2112;
    id v22 = v9;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Received request to determine if we are at home %@ for message %@", (uint8_t *)&v17, 0x20u);
  }
  int v10 = [(HMDHomeManager *)self accessoryFinderTimer];

  if (!v10)
  {
    [(HMDHomeManager *)self _startAccessoryFinderTimer];
    uint64_t v11 = [(HMDHomeManager *)self accessoryBrowserInternal];
    [v11 stopDiscoveringAccessories];

    char v12 = [(HMDHomeManager *)self accessoryBrowserInternal];
    [v12 startDiscoveringAccessories];

    uint64_t v13 = (void *)MEMORY[0x1D9452090]();
    long long v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      long long v15 = HMFGetLogIdentifier();
      int v17 = 138543362;
      int v18 = v15;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_DEFAULT, "%{public}@Starting timer to discover all accessories", (uint8_t *)&v17, 0xCu);
    }
  }
  long long v16 = [(HMDHomeManager *)self pendingResponsesForAccessoryFinder];
  [v16 addObject:v4];
}

- (void)_processAnyPendingRequestsForRemoteAccess:(BOOL)a3
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v4 = [MEMORY[0x1E4F1CA80] set];
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  id v5 = [(HMDHomeManager *)self homes];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v60 objects:v73 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v61;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v61 != v8) {
          objc_enumerationMutation(v5);
        }
        int v10 = [*(id *)(*((void *)&v60 + 1) + 8 * i) hapAccessoryServerIdentifiers];
        [v4 unionSet:v10];
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v60 objects:v73 count:16];
    }
    while (v7);
  }

  uint64_t v11 = (void *)[v4 mutableCopy];
  char v12 = [(HMDHomeManager *)self accessoryBrowserInternal];
  uint64_t v13 = [v12 discoveredAccessoryServers];
  [v11 unionSet:v13];

  id v53 = [MEMORY[0x1E4F1CA48] array];
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  id obj = [(HMDHomeManager *)self pendingResponsesForAccessoryFinder];
  id v50 = v11;
  uint64_t v55 = [obj countByEnumeratingWithState:&v56 objects:v72 count:16];
  if (v55)
  {
    uint64_t v54 = *(void *)v57;
    uint64_t v48 = *MEMORY[0x1E4F2D140];
    __int16 v49 = self;
    do
    {
      for (uint64_t j = 0; j != v55; ++j)
      {
        if (*(void *)v57 != v54) {
          objc_enumerationMutation(obj);
        }
        long long v15 = *(void **)(*((void *)&v56 + 1) + 8 * j);
        long long v16 = [v15 name];
        char v17 = [v16 isEqualToString:@"kDoYouSeeUnpairedAccessoriesKey"];

        int v18 = v11;
        if ((v17 & 1) != 0
          || ([v15 name],
              __int16 v19 = objc_claimAutoreleasedReturnValue(),
              char v20 = [v19 isEqualToString:@"kAreYouAtHomeRequestKey"],
              v19,
              int v18 = v4,
              (v20 & 1) != 0))
        {
          id v21 = v18;
          id v22 = [v15 arrayForKey:@"kAccessoryIdentitiesKey"];
          BOOL v23 = [(HMDHomeManager *)self _findAnyAccessoryWithIdentities:v22 inAccessoryServers:v21];
          if (v23 || a3)
          {
            uint64_t v27 = v4;
            v70[0] = @"kAtHomeStateKey";
            id v28 = [NSNumber numberWithBool:v23];
            v71[0] = v28;
            v70[1] = @"kHomedVersionKey";
            id v29 = (id)homedVersion;
            v71[1] = v29;
            v70[2] = @"kDeviceNameKey";
            id v30 = deviceName();
            v71[2] = v30;
            id v31 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v71 forKeys:v70 count:3];

            __int16 v32 = [v15 stringForKey:@"kHomeUUID"];
            id v33 = (void *)MEMORY[0x1D9452090]();
            uint64_t v34 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
            {
              int v35 = HMFGetLogIdentifier();
              *(_DWORD *)long long buf = 138543874;
              __int16 v65 = v35;
              __int16 v66 = 2112;
              id v67 = v31;
              __int16 v68 = 2112;
              id v69 = v32;
              _os_log_impl(&dword_1D49D5000, v34, OS_LOG_TYPE_DEFAULT, "%{public}@Sending response %@ for home %@", buf, 0x20u);
            }
            uint64_t v36 = [v15 responseHandler];
            ((void (**)(void, void, void *))v36)[2](v36, 0, v31);

            [v53 addObject:v15];
            id v4 = v27;
            self = v49;
            uint64_t v11 = v50;
          }
          else
          {
            unint64_t v24 = (void *)MEMORY[0x1D9452090]();
            __int16 v25 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
            {
              id v26 = HMFGetLogIdentifier();
              *(_DWORD *)long long buf = 138543618;
              __int16 v65 = v26;
              __int16 v66 = 2112;
              id v67 = v21;
              _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_DEFAULT, "%{public}@Did not find any of the accessories in the list %@ but there is a timer pending, continuing to scan", buf, 0x16u);
            }
          }
          goto LABEL_27;
        }
        __int16 v37 = (void *)MEMORY[0x1D9452090]([v53 addObject:v15]);
        __int16 v38 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v39 = HMFGetLogIdentifier();
          uint64_t v40 = [v15 name];
          *(_DWORD *)long long buf = 138543618;
          __int16 v65 = v39;
          __int16 v66 = 2112;
          id v67 = v40;
          _os_log_impl(&dword_1D49D5000, v38, OS_LOG_TYPE_DEFAULT, "%{public}@There is an invalid message in the pending responses for accessory finder %@", buf, 0x16u);
        }
        uint64_t v41 = [v15 responseHandler];

        if (v41)
        {
          id v21 = [MEMORY[0x1E4F28C58] errorWithDomain:v48 code:3 userInfo:0];
          id v22 = [v15 responseHandler];
          ((void (**)(void, id, void))v22)[2](v22, v21, 0);
LABEL_27:

          continue;
        }
      }
      uint64_t v55 = [obj countByEnumeratingWithState:&v56 objects:v72 count:16];
    }
    while (v55);
  }

  id v42 = [(HMDHomeManager *)self pendingResponsesForAccessoryFinder];
  [v42 removeObjectsInArray:v53];

  id v43 = [(HMDHomeManager *)self pendingResponsesForAccessoryFinder];
  uint64_t v44 = [v43 count];

  if (!v44)
  {
    int v45 = (void *)MEMORY[0x1D9452090]();
    long long v46 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      long long v47 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      __int16 v65 = v47;
      _os_log_impl(&dword_1D49D5000, v46, OS_LOG_TYPE_DEFAULT, "%{public}@Processed all requests for accessory scan for remote access, stopping scan timer", buf, 0xCu);

      uint64_t v11 = v50;
    }

    [(HMDHomeManager *)self _cancelAccessoryFinderTimer];
  }
}

- (void)processAnyPendingRequestsForRemoteAccess
{
  uint64_t v3 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __58__HMDHomeManager_processAnyPendingRequestsForRemoteAccess__block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v3, block);
}

uint64_t __58__HMDHomeManager_processAnyPendingRequestsForRemoteAccess__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _processAnyPendingRequestsForRemoteAccess:0];
}

- (void)_cancelAccessoryFinderTimer
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [(HMDHomeManager *)self accessoryFinderTimer];

  if (v3)
  {
    id v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = HMFGetLogIdentifier();
      int v10 = 138543362;
      uint64_t v11 = v6;
      _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Cancelling accessory finder timer", (uint8_t *)&v10, 0xCu);
    }
    uint64_t v7 = [(HMDHomeManager *)self accessoryFinderTimer];
    dispatch_source_cancel(v7);

    [(HMDHomeManager *)self setAccessoryFinderTimer:0];
    uint64_t v8 = [(HMDHomeManager *)self accessoryBrowserInternal];
    [v8 stopDiscoveringAccessories];

    uint64_t v9 = [(HMDHomeManager *)self accessoryBrowserInternal];
    [v9 setManagerDelegate:0];
  }
}

- (void)_startAccessoryFinderTimerExpired
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)MEMORY[0x1D9452090](self, a2);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = HMFGetLogIdentifier();
    int v8 = 138543362;
    uint64_t v9 = v5;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Timer expired, and stopping request to discover accessories", (uint8_t *)&v8, 0xCu);
  }
  [(HMDHomeManager *)self _processAnyPendingRequestsForRemoteAccess:1];
  uint64_t v6 = [(HMDHomeManager *)self accessoryBrowserInternal];
  [v6 stopDiscoveringAccessories];

  uint64_t v7 = [(HMDHomeManager *)self accessoryBrowserInternal];
  [v7 setManagerDelegate:0];
}

- (void)_startAccessoryFinderTimer
{
  uint64_t v3 = [(HMDHomeManager *)self workQueue];
  dispatch_source_t v4 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v3);
  [(HMDHomeManager *)self setAccessoryFinderTimer:v4];

  id v5 = [(HMDHomeManager *)self accessoryFinderTimer];
  dispatch_time_t v6 = dispatch_time(0, 10000000000);
  dispatch_source_set_timer(v5, v6, 0xFFFFFFFFFFFFFFFFLL, 0x2FAF080uLL);

  objc_initWeak(&location, self);
  uint64_t v7 = [(HMDHomeManager *)self accessoryFinderTimer];
  uint64_t v10 = MEMORY[0x1E4F143A8];
  uint64_t v11 = 3221225472;
  uint64_t v12 = __44__HMDHomeManager__startAccessoryFinderTimer__block_invoke;
  uint64_t v13 = &unk_1E6A16E40;
  objc_copyWeak(&v14, &location);
  dispatch_source_set_event_handler(v7, &v10);

  int v8 = [(HMDHomeManager *)self accessoryFinderTimer];
  dispatch_resume(v8);

  uint64_t v9 = [(HMDHomeManager *)self accessoryBrowserInternal];
  [v9 setManagerDelegate:self];

  objc_destroyWeak(&v14);
  objc_destroyWeak(&location);
}

void __44__HMDHomeManager__startAccessoryFinderTimer__block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained _startAccessoryFinderTimerExpired];
    id WeakRetained = v2;
  }
}

- (void)networkMonitorIsUnreachable:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __46__HMDHomeManager_networkMonitorIsUnreachable___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __46__HMDHomeManager_networkMonitorIsUnreachable___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) reachabilityMonitor];
  int v3 = [v2 isEqual:*(void *)(a1 + 40)];

  id v4 = *(void **)(a1 + 32);
  if (v3)
  {
    [v4 _reachabilityMonitorChanged:0];
  }
  else
  {
    id v5 = [v4 cloudReachabilityMonitor];
    int v6 = [v5 isEqual:*(void *)(a1 + 40)];

    if (v6)
    {
      uint64_t v7 = *(void **)(a1 + 32);
      [v7 _cloudReachabilityMonitorChanged:0];
    }
  }
}

- (void)networkMonitorIsReachable:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __44__HMDHomeManager_networkMonitorIsReachable___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __44__HMDHomeManager_networkMonitorIsReachable___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) reachabilityMonitor];
  int v3 = [v2 isEqual:*(void *)(a1 + 40)];

  id v4 = *(void **)(a1 + 32);
  if (v3)
  {
    [v4 _reachabilityMonitorChanged:1];
  }
  else
  {
    id v5 = [v4 cloudReachabilityMonitor];
    int v6 = [v5 isEqual:*(void *)(a1 + 40)];

    if (v6)
    {
      uint64_t v7 = *(void **)(a1 + 32);
      [v7 _cloudReachabilityMonitorChanged:1];
    }
  }
}

- (void)_cloudReachabilityMonitorChanged:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = (void *)MEMORY[0x1D9452090](self, a2);
  int v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    uint64_t v9 = HMFBooleanToString();
    *(_DWORD *)long long buf = 138543618;
    id v22 = v8;
    __int16 v23 = 2112;
    unint64_t v24 = v9;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Received cloud network reachability change from system configuration, reachable: %@", buf, 0x16u);
  }
  if (v3)
  {
    objc_initWeak(&location, v6);
    if ([(HMDHomeManager *)v6 accountStatusFailedDueToNetworkFailure])
    {
      [(HMDHomeManager *)v6 setBackOffOperationInProgress:0];
      [(HMDHomeManager *)v6 _resetCloudOperationRetryCounters];
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 3221225472;
      void v18[2] = __51__HMDHomeManager__cloudReachabilityMonitorChanged___block_invoke;
      v18[3] = &unk_1E6A16E40;
      uint64_t v10 = &v19;
      objc_copyWeak(&v19, &location);
      [(HMDHomeManager *)v6 _retryCloudOperationWithName:@"query account status" completionHandler:v18];
    }
    else
    {
      uint64_t v11 = (void *)MEMORY[0x1D9452090]();
      uint64_t v12 = v6;
      HMFGetOSLogHandle();
      uint64_t v13 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        id v14 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        id v22 = v14;
        _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Pushing any pending cloud data and shared user data sync that were not acked", buf, 0xCu);
      }
      [(HMDHomeManager *)v12 _pushChangesToUsersThatHaveNotAcknowledged];
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 3221225472;
      void v16[2] = __51__HMDHomeManager__cloudReachabilityMonitorChanged___block_invoke_1223;
      v16[3] = &unk_1E6A16E40;
      uint64_t v10 = &v17;
      objc_copyWeak(&v17, &location);
      [(HMDHomeManager *)v12 _retryCloudOperationWithName:@"push data to cloud" completionHandler:v16];
    }
    objc_destroyWeak(v10);
    objc_destroyWeak(&location);
  }
  long long v15 = [(HMDHomeManager *)v6 cloudDataSyncStateFilter];
  [v15 updateNetworkConnectivity:v3];
}

void __51__HMDHomeManager__cloudReachabilityMonitorChanged___block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = WeakRetained;
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    int v6 = 138543362;
    uint64_t v7 = v5;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@Re-querying account status since we are reachable", (uint8_t *)&v6, 0xCu);
  }
  objc_msgSend(v3, "_updateCloudDataSyncWithAccountState:", objc_msgSend(v3, "accountActive"));
}

void __51__HMDHomeManager__cloudReachabilityMonitorChanged___block_invoke_1223(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = WeakRetained;
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    int v6 = 138543362;
    uint64_t v7 = v5;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@Cloud network connection is available and we have pending transactions, pushing to the cloud", (uint8_t *)&v6, 0xCu);
  }
  [v3 _determineLocalChangesAndSchedulePush];
}

- (void)_reachabilityMonitorChanged:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v5 = (void *)MEMORY[0x1D9452090](self, a2);
  int v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    uint64_t v9 = HMFBooleanToString();
    int v10 = 138543618;
    uint64_t v11 = v8;
    __int16 v12 = 2112;
    uint64_t v13 = v9;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Received network reachability change from system configuration, notifying homes, reachable: %@", (uint8_t *)&v10, 0x16u);
  }
  if (v3 && ![(HMDHomeManager *)v6 ignoreFirstTimeReachabilityChanged]) {
    [(HMDHomeManager *)v6 _electRemoteGatewayForHomesAfterReachabilityChanges];
  }
  [(HMDHomeManager *)v6 _updateHomesAboutNetworkConnectivity:v3];
  [(HMDHomeManager *)v6 setIgnoreFirstTimeReachabilityChanged:0];
}

- (void)_monitorReachability
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  BOOL v3 = [(HMDHomeManager *)self reachabilityMonitor];

  if (!v3)
  {
    id v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = self;
    int v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = HMFGetLogIdentifier();
      int v26 = 138543362;
      uint64_t v27 = v7;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Creating network reachability monitor", (uint8_t *)&v26, 0xCu);
    }
    uint64_t v8 = (void *)[objc_alloc(MEMORY[0x1E4F654C8]) initWithNetAddress:0];
    [(HMDHomeManager *)v5 setReachabilityMonitor:v8];

    uint64_t v9 = [(HMDHomeManager *)v5 reachabilityMonitor];
    [v9 setDelegate:v5];

    int v10 = [(HMDHomeManager *)v5 reachabilityMonitor];
    int v11 = [v10 isReachable];

    if (v11) {
      [(HMDHomeManager *)v5 _reachabilityMonitorChanged:1];
    }
  }
  __int16 v12 = [(HMDHomeManager *)self cloudReachabilityMonitor];

  if (!v12)
  {
    uint64_t v13 = [MEMORY[0x1E4F65530] sharedPreferences];
    uint64_t v14 = [v13 preferenceForKey:@"cloudReachabilityMonitorHostname"];
    uint64_t v15 = [v14 stringValue];

    if (v15) {
      long long v16 = (__CFString *)v15;
    }
    else {
      long long v16 = @"gateway.icloud.com";
    }
    id v17 = (void *)MEMORY[0x1D9452090]();
    int v18 = self;
    id v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      char v20 = HMFGetLogIdentifier();
      int v26 = 138543618;
      uint64_t v27 = v20;
      __int16 v28 = 2112;
      id v29 = v16;
      _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_INFO, "%{public}@Creating cloud network reachability monitor for host: %@", (uint8_t *)&v26, 0x16u);
    }
    id v21 = (void *)[objc_alloc(MEMORY[0x1E4F654B8]) initWithHostname:v16];
    id v22 = (void *)[objc_alloc(MEMORY[0x1E4F654C8]) initWithNetAddress:v21];
    [(HMDHomeManager *)v18 setCloudReachabilityMonitor:v22];

    __int16 v23 = [(HMDHomeManager *)v18 cloudReachabilityMonitor];
    [v23 setDelegate:v18];

    unint64_t v24 = [(HMDHomeManager *)v18 cloudReachabilityMonitor];
    int v25 = [v24 isReachable];

    if (v25) {
      [(HMDHomeManager *)v18 _cloudReachabilityMonitorChanged:1];
    }
  }
}

- (id)eventRouterServerDiagnosticInfo
{
  id v2 = [(HMDHomeManager *)self currentAccessory];
  BOOL v3 = [v2 home];
  id v4 = [v3 eventRouterServerDiagnosticInfo];

  return v4;
}

- (id)currentAccessory
{
  id v2 = [(HMDHomeManager *)self _accessoryOfCurrentDevice];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    BOOL v3 = v2;
  }
  else {
    BOOL v3 = 0;
  }
  id v4 = v3;

  return v4;
}

- (void)userManagementOperationDidFinish:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __51__HMDHomeManager_userManagementOperationDidFinish___block_invoke;
  v7[3] = &unk_1E6A197C8;
  id v8 = v4;
  uint64_t v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __51__HMDHomeManager_userManagementOperationDidFinish___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) accessory];
  id v7 = [v2 home];

  [v7 userManagementOperationDidFinish:*(void *)(a1 + 32)];
  BOOL v3 = [*(id *)(a1 + 40) backingStore];
  id v4 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  id v5 = [v3 transaction:@"kUserManagementOperationRemovedKey" options:v4];

  id v6 = [*(id *)(a1 + 32) modelObjectWithChangeType:3];
  [v5 add:v6];

  [v5 run];
}

- (void)cleanupOperationsForAccessory:(id)a3 user:(id)a4 completion:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  int v11 = [(HMDHomeManager *)self workQueue];
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __64__HMDHomeManager_cleanupOperationsForAccessory_user_completion___block_invoke;
  v15[3] = &unk_1E6A18398;
  void v15[4] = self;
  id v16 = v8;
  id v17 = v9;
  id v18 = v10;
  id v12 = v10;
  id v13 = v9;
  id v14 = v8;
  dispatch_async(v11, v15);
}

void __64__HMDHomeManager_cleanupOperationsForAccessory_user_completion___block_invoke(id *a1)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  id v2 = [a1[4] backingStore];
  BOOL v3 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  id v4 = [v2 transaction:@"kUserManagementOperationRemovedKey" options:v3];

  long long v54 = 0u;
  long long v55 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  id v5 = +[HMDUserManagementOperationManager sharedManager];
  id v6 = [v5 operations];

  id obj = v6;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v52 objects:v62 count:16];
  if (v7)
  {
    uint64_t v9 = v7;
    uint64_t v10 = *(void *)v53;
    *(void *)&long long v8 = 138543874;
    long long v41 = v8;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        id v12 = v4;
        if (*(void *)v53 != v10) {
          objc_enumerationMutation(obj);
        }
        id v13 = *(void **)(*((void *)&v52 + 1) + 8 * i);
        id v14 = a1[5];
        uint64_t v15 = objc_msgSend(v13, "accessory", v41);
        id v16 = [v15 identifier];
        int v17 = [v14 isEqualToString:v16];

        id v18 = a1[6];
        id v19 = [v13 user];
        char v20 = [v19 pairingIdentity];
        int v21 = [v18 isEqual:v20];

        id v4 = v12;
        if (v17)
        {
          int v22 = a1[6] ? v21 : 1;
          if (v22 == 1)
          {
            __int16 v23 = (void *)MEMORY[0x1D9452090]();
            unint64_t v24 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
            {
              int v25 = HMFGetLogIdentifier();
              int v26 = [a1[4] shortDescription];
              *(_DWORD *)long long buf = v41;
              long long v57 = v25;
              __int16 v58 = 2112;
              long long v59 = v26;
              __int16 v60 = 2112;
              long long v61 = v13;
              _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_INFO, "%{public}@[%@] Dropping prior operation: %@", buf, 0x20u);

              id v4 = v12;
            }

            uint64_t v27 = [v13 modelObjectWithChangeType:3];
            [v4 add:v27];
          }
        }
      }
      uint64_t v9 = [obj countByEnumeratingWithState:&v52 objects:v62 count:16];
    }
    while (v9);
  }

  __int16 v28 = dispatch_group_create();
  id v29 = [a1[4] unprocessedOperationModelIdentifiers];
  uint64_t v30 = [v29 count];

  if (v30)
  {
    dispatch_group_enter(v28);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __64__HMDHomeManager_cleanupOperationsForAccessory_user_completion___block_invoke_1210;
    aBlock[3] = &unk_1E6A16488;
    id v47 = a1[5];
    id v31 = a1[6];
    id v32 = a1[4];
    id v48 = v31;
    id v49 = v32;
    id v50 = v4;
    id v51 = v28;
    id v33 = _Block_copy(aBlock);
    uint64_t v34 = [a1[4] backingStore];
    int v35 = [HMDBackingStoreCacheFetchModelObjects alloc];
    uint64_t v36 = [a1[4] unprocessedOperationModelIdentifiers];
    __int16 v37 = [v36 allObjects];
    __int16 v38 = [(HMDBackingStoreCacheFetchModelObjects *)v35 initWithUUIDs:v37 fetchResult:v33];
    [v34 submit:v38];
  }
  __int16 v39 = [a1[4] workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __64__HMDHomeManager_cleanupOperationsForAccessory_user_completion___block_invoke_2;
  block[3] = &unk_1E6A19530;
  id v44 = v4;
  id v45 = a1[7];
  id v40 = v4;
  dispatch_group_notify(v28, v39, block);
}

uint64_t __64__HMDHomeManager_cleanupOperationsForAccessory_user_completion___block_invoke_1210(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id obj = a2;
  uint64_t v3 = [obj countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v23 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = [*(id *)(*((void *)&v22 + 1) + 8 * i) object];
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          long long v8 = v7;
        }
        else {
          long long v8 = 0;
        }
        id v9 = v8;

        if (v9)
        {
          uint64_t v10 = *(void **)(a1 + 32);
          int v11 = [v9 accessoryPairingIdentity];
          id v12 = [v11 identifier];
          int v13 = [v10 isEqualToString:v12];

          id v14 = *(void **)(a1 + 40);
          uint64_t v15 = [v9 userPairingIdentity];
          int v16 = [v14 isEqual:v15];

          if (v13)
          {
            if (*(void *)(a1 + 40)) {
              int v17 = v16;
            }
            else {
              int v17 = 1;
            }
            if (v17 == 1)
            {
              id v18 = [*(id *)(a1 + 48) unprocessedOperationModelIdentifiers];
              id v19 = [v9 uuid];
              [v18 removeObject:v19];

              [v9 setObjectChangeType:3];
              [*(id *)(a1 + 56) add:v9];
            }
          }
        }
      }
      uint64_t v4 = [obj countByEnumeratingWithState:&v22 objects:v26 count:16];
    }
    while (v4);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));

  return 0;
}

uint64_t __64__HMDHomeManager_cleanupOperationsForAccessory_user_completion___block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) run:*(void *)(a1 + 40)];
}

- (BOOL)operationsWithIdentifiers:(id)a3 outOperations:(id *)a4
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  if ([v6 count])
  {
    int v26 = a4;
    uint64_t v7 = +[HMDUserManagementOperationManager sharedManager];
    id v31 = [v7 operations];

    objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v6, "count"));
    v28 = id v27 = v6;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    id obj = v6;
    uint64_t v8 = [obj countByEnumeratingWithState:&v38 objects:v43 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      char v30 = 0;
      uint64_t v10 = *(void *)v39;
      unint64_t v11 = 0x1E4F29000uLL;
      uint64_t v29 = *(void *)v39;
      do
      {
        uint64_t v12 = 0;
        uint64_t v32 = v9;
        do
        {
          if (*(void *)v39 != v10) {
            objc_enumerationMutation(obj);
          }
          int v13 = (void *)[objc_alloc(*(Class *)(v11 + 296)) initWithUUIDString:*(void *)(*((void *)&v38 + 1) + 8 * v12)];
          id v14 = [(HMDHomeManager *)self unprocessedOperationModelIdentifiers];
          char v15 = [v14 containsObject:v13];

          if (v15)
          {
            char v30 = 1;
          }
          else
          {
            long long v36 = 0u;
            long long v37 = 0u;
            long long v34 = 0u;
            long long v35 = 0u;
            id v16 = v31;
            uint64_t v17 = [v16 countByEnumeratingWithState:&v34 objects:v42 count:16];
            if (v17)
            {
              uint64_t v18 = v17;
              uint64_t v19 = *(void *)v35;
              while (2)
              {
                for (uint64_t i = 0; i != v18; ++i)
                {
                  if (*(void *)v35 != v19) {
                    objc_enumerationMutation(v16);
                  }
                  int v21 = *(void **)(*((void *)&v34 + 1) + 8 * i);
                  long long v22 = [v21 identifier];
                  int v23 = [v13 isEqual:v22];

                  if (v23)
                  {
                    if (([v21 isFinished] & 1) == 0) {
                      [v28 addObject:v21];
                    }
                    goto LABEL_20;
                  }
                }
                uint64_t v18 = [v16 countByEnumeratingWithState:&v34 objects:v42 count:16];
                if (v18) {
                  continue;
                }
                break;
              }
            }
LABEL_20:

            uint64_t v10 = v29;
            unint64_t v11 = 0x1E4F29000;
            uint64_t v9 = v32;
          }

          ++v12;
        }
        while (v12 != v9);
        uint64_t v9 = [obj countByEnumeratingWithState:&v38 objects:v43 count:16];
      }
      while (v9);
    }
    else
    {
      char v30 = 0;
    }

    if (v26 && [v28 count]) {
      id *v26 = v28;
    }
    BOOL v24 = (v30 & 1) != 0 || [v28 count] != 0;
    id v6 = v27;
  }
  else
  {
    BOOL v24 = 0;
  }

  return v24;
}

- (void)_processRemoveUserManagementOperationModel:(id)a3 message:(id)a4
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v8 = +[HMDUserManagementOperationManager sharedManager];
  uint64_t v9 = [v8 operations];

  id v10 = (id)[v9 countByEnumeratingWithState:&v27 objects:v35 count:16];
  if (v10)
  {
    int v26 = self;
    uint64_t v11 = *(void *)v28;
    while (2)
    {
      for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v28 != v11) {
          objc_enumerationMutation(v9);
        }
        int v13 = *(void **)(*((void *)&v27 + 1) + 8 * i);
        id v14 = [v13 identifier];
        char v15 = [v6 uuid];
        int v16 = [v14 isEqual:v15];

        if (v16)
        {
          id v10 = v13;
          goto LABEL_11;
        }
      }
      id v10 = (id)[v9 countByEnumeratingWithState:&v27 objects:v35 count:16];
      if (v10) {
        continue;
      }
      break;
    }
LABEL_11:
    self = v26;
  }

  uint64_t v17 = [v7 transactionResult];
  [v17 markChanged];

  if (v10)
  {
    if (([v10 isFinished] & 1) == 0) {
      [v10 cancel];
    }
    uint64_t v18 = +[HMDUserManagementOperationManager sharedManager];
    [v18 removeOperation:v10];
  }
  else
  {
    uint64_t v19 = (void *)MEMORY[0x1D9452090]();
    char v20 = self;
    int v21 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      long long v22 = HMFGetLogIdentifier();
      int v23 = [v6 uuid];
      BOOL v24 = [v23 UUIDString];
      *(_DWORD *)long long buf = 138543618;
      uint64_t v32 = v22;
      __int16 v33 = 2112;
      long long v34 = v24;
      _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_ERROR, "%{public}@Remove UserManagementOperation: Could not match operation with identifier %@", buf, 0x16u);
    }
    uint64_t v18 = [(HMDHomeManager *)v20 unprocessedOperationModelIdentifiers];
    long long v25 = [v6 uuid];
    [v18 removeObject:v25];
  }
  [v7 respondWithPayload:0];
}

- (void)_processUserManagementOperationModel:(id)a3 message:(id)a4
{
  uint64_t v177 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = a4;
  long long v161 = 0u;
  long long v162 = 0u;
  long long v163 = 0u;
  long long v164 = 0u;
  id v7 = +[HMDUserManagementOperationManager sharedManager];
  uint64_t v8 = [v7 operations];

  uint64_t v9 = [v8 countByEnumeratingWithState:&v161 objects:v176 count:16];
  if (!v9)
  {

    goto LABEL_13;
  }
  uint64_t v10 = v9;
  id v136 = v6;
  uint64_t v11 = 0;
  uint64_t v12 = *(void *)v162;
  do
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      if (*(void *)v162 != v12) {
        objc_enumerationMutation(v8);
      }
      id v14 = *(void **)(*((void *)&v161 + 1) + 8 * i);
      char v15 = [v14 identifier];
      int v16 = [v5 uuid];
      int v17 = [v15 isEqual:v16];

      if (v17)
      {
        id v18 = v14;

        uint64_t v11 = v18;
      }
    }
    uint64_t v10 = [v8 countByEnumeratingWithState:&v161 objects:v176 count:16];
  }
  while (v10);

  id v6 = v136;
  if (!v11)
  {
LABEL_13:
    char v20 = [v5 expirationDate];

    if (!v20) {
      goto LABEL_15;
    }
    int v21 = [v5 expirationDate];
    long long v22 = [MEMORY[0x1E4F1C9C8] date];
    [v21 timeIntervalSinceDate:v22];
    double v24 = v23;

    if (v24 <= 0.0)
    {
      long long v55 = (void *)MEMORY[0x1D9452090]();
      long long v56 = self;
      long long v57 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
      {
        __int16 v58 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        long long v166 = v58;
        _os_log_impl(&dword_1D49D5000, v57, OS_LOG_TYPE_INFO, "%{public}@UserManagementOperation has already expired, deleting", buf, 0xCu);
      }
      long long v59 = [(HMDHomeManager *)v56 backingStore];
      __int16 v60 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      long long v61 = [v59 transaction:@"kUserManagementOperationRemovedKey" options:v60];

      [v5 setObjectChangeType:3];
      [v61 add:v5];
      [v61 run];
      [v6 respondWithPayload:0];
    }
    else
    {
LABEL_15:
      long long v25 = [(HMDHomeManager *)self unprocessedOperationModelIdentifiers];
      int v26 = [v5 uuid];
      [v25 addObject:v26];

      long long v27 = [v5 operationType];

      if (v27)
      {
        long long v28 = [v6 transactionResult];
        [v28 markChanged];

        long long v29 = [v5 operationType];
        uint64_t v133 = [v29 integerValue];

        long long v30 = [v5 accessoryPairingIdentity];
        id v31 = [v5 accessoryPairingIdentity];
        objc_opt_class();
        char isKindOfClass = objc_opt_isKindOfClass();

        if (isKindOfClass)
        {
          __int16 v33 = (void *)MEMORY[0x1E4F28DC0];
          uint64_t v34 = objc_opt_class();
          long long v35 = [v5 accessoryPairingIdentity];
          id v160 = 0;
          uint64_t v36 = [v33 unarchivedObjectOfClass:v34 fromData:v35 error:&v160];
          long long v37 = (__CFString *)v160;

          if (!v36)
          {
            long long v38 = (void *)MEMORY[0x1D9452090]();
            long long v39 = self;
            long long v40 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
            {
              long long v41 = HMFGetLogIdentifier();
              *(_DWORD *)long long buf = 138543618;
              long long v166 = v41;
              __int16 v167 = 2112;
              id v168 = v37;
              _os_log_impl(&dword_1D49D5000, v40, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive accessory pairing identity from the model's accessory pairing identity data: %@", buf, 0x16u);
            }
          }

          long long v30 = (void *)v36;
        }
        id v42 = [v5 userPairingIdentity];
        id v43 = [v5 userPairingIdentity];
        objc_opt_class();
        char v44 = objc_opt_isKindOfClass();

        if (v44)
        {
          id v45 = (void *)MEMORY[0x1E4F28DC0];
          uint64_t v46 = objc_opt_class();
          id v47 = [v5 userPairingIdentity];
          id v159 = 0;
          uint64_t v48 = [v45 unarchivedObjectOfClass:v46 fromData:v47 error:&v159];
          id v49 = (__CFString *)v159;

          id v50 = self;
          if (!v48)
          {
            id v51 = (void *)MEMORY[0x1D9452090]();
            long long v52 = self;
            long long v53 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
            {
              long long v54 = HMFGetLogIdentifier();
              *(_DWORD *)long long buf = 138543618;
              long long v166 = v54;
              __int16 v167 = 2112;
              id v168 = v49;
              _os_log_impl(&dword_1D49D5000, v53, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive user pairing identity from the model's user pairing identity data: %@", buf, 0x16u);
            }
            id v50 = self;
          }

          v139 = (void *)v48;
        }
        else
        {
          v139 = v42;
          id v50 = self;
        }
        uint64_t v143 = v30;
        if (v30)
        {
          id v137 = v6;
          long long v157 = 0u;
          long long v158 = 0u;
          long long v155 = 0u;
          long long v156 = 0u;
          __int16 v68 = [(HMDHomeManager *)v50 pairedAccessories];
          uint64_t v69 = [v68 countByEnumeratingWithState:&v155 objects:v175 count:16];
          if (v69)
          {
            uint64_t v70 = v69;
            uint64_t v71 = *(void *)v156;
            while (2)
            {
              for (uint64_t j = 0; j != v70; ++j)
              {
                if (*(void *)v156 != v71) {
                  objc_enumerationMutation(v68);
                }
                char v73 = (__CFString *)*(id *)(*((void *)&v155 + 1) + 8 * j);
                if ([(__CFString *)v73 conformsToProtocol:&unk_1F2E2B960]) {
                  uint64_t v74 = v73;
                }
                else {
                  uint64_t v74 = 0;
                }
                __int16 v75 = v74;

                if (v75)
                {
                  long long v76 = [(__CFString *)v75 pairingIdentity];
                  char v77 = [v143 isEqual:v76];

                  if (v77) {
                    goto LABEL_56;
                  }
                }
                else
                {
                  BOOL v78 = v73;
                  id v79 = [(__CFString *)v73 identifier];
                  id v80 = [v143 identifier];
                  int v81 = [v79 isEqualToString:v80];

                  if (v81)
                  {
                    char v73 = v78;
                    goto LABEL_56;
                  }
                }
              }
              uint64_t v70 = [v68 countByEnumeratingWithState:&v155 objects:v175 count:16];
              if (v70) {
                continue;
              }
              break;
            }
          }
          char v73 = 0;
LABEL_56:

          id v6 = v137;
          id v50 = self;
        }
        else
        {
          char v73 = 0;
        }
        id v82 = [(__CFString *)v73 home];
        id v83 = v82;
        uint64_t v134 = v73;
        double v135 = v82;
        if (v73 && v82)
        {
          if (v139)
          {
            [(__CFString *)v82 users];
            long long v151 = 0u;
            long long v152 = 0u;
            long long v153 = 0u;
            long long v154 = 0u;
            id v84 = (id)objc_claimAutoreleasedReturnValue();
            uint64_t v85 = [v84 countByEnumeratingWithState:&v151 objects:v174 count:16];
            if (v85)
            {
              uint64_t v86 = v85;
              uint64_t v87 = *(void *)v152;
LABEL_62:
              uint64_t v88 = 0;
              while (1)
              {
                if (*(void *)v152 != v87) {
                  objc_enumerationMutation(v84);
                }
                id v89 = *(void **)(*((void *)&v151 + 1) + 8 * v88);
                id v90 = [v89 pairingIdentity];
                char v91 = [v90 isEqual:v139];

                if (v91) {
                  break;
                }
                if (v86 == ++v88)
                {
                  uint64_t v86 = [v84 countByEnumeratingWithState:&v151 objects:v174 count:16];
                  if (v86) {
                    goto LABEL_62;
                  }
                  goto LABEL_68;
                }
              }
              id v100 = v89;

              id v50 = self;
              if (!v100) {
                goto LABEL_85;
              }
              id v138 = v6;
              id v150 = 0;
              uint64_t v132 = (void (**)(void, void, void))v100;
              uint64_t v11 = [(__CFString *)v135 prepareUserManagementOperationForUser:v100 accessory:v134 type:v133 model:v5 error:&v150];
              id v131 = v150;
              long long v146 = 0u;
              long long v147 = 0u;
              long long v148 = 0u;
              long long v149 = 0u;
              id v101 = +[HMDUserManagementOperationManager sharedManager];
              uint64_t v102 = [v101 operations];

              id obj = v102;
              uint64_t v103 = [v102 countByEnumeratingWithState:&v146 objects:v173 count:16];
              if (v103)
              {
                uint64_t v104 = v103;
                uint64_t v105 = *(void *)v147;
                do
                {
                  for (uint64_t k = 0; k != v104; ++k)
                  {
                    if (*(void *)v147 != v105) {
                      objc_enumerationMutation(obj);
                    }
                    uint64_t v107 = *(void **)(*((void *)&v146 + 1) + 8 * k);
                    id v108 = [v5 dependencies];
                    char v109 = [v107 identifier];
                    __int16 v110 = [v109 UUIDString];
                    int v111 = [v108 containsObject:v110];

                    if (v111) {
                      [v11 addDependency:v107];
                    }
                  }
                  uint64_t v104 = [obj countByEnumeratingWithState:&v146 objects:v173 count:16];
                }
                while (v104);
              }

              __int16 v112 = [v5 ownerPairingIdentity];
              [v11 setOwnerPairingIdentity:v112];

              id obja = (id)MEMORY[0x1D9452090]();
              char v113 = self;
              int v114 = HMFGetOSLogHandle();
              uint64_t v115 = v114;
              uint64_t v116 = v143;
              uint64_t v19 = v131;
              if (v131)
              {
                id v6 = v138;
                uint64_t v117 = v139;
                id v118 = v132;
                if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
                {
                  HMFGetLogIdentifier();
                  uint64_t v119 = v141 = v113;
                  *(_DWORD *)long long buf = 138543874;
                  long long v166 = v119;
                  __int16 v167 = 2112;
                  id v168 = v134;
                  __int16 v169 = 2112;
                  long long v170 = (__CFString *)v132;
                  _os_log_impl(&dword_1D49D5000, v115, OS_LOG_TYPE_ERROR, "%{public}@Add UserManagementOperation: Failed to add accessory pairing - accessory %@, user %@", buf, 0x20u);

                  char v113 = v141;
                }

                int v120 = 0;
              }
              else
              {
                id v6 = v138;
                uint64_t v117 = v139;
                id v118 = v132;
                if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v124 = HMFGetLogIdentifier();
                  uint64_t v142 = v113;
                  if ((unint64_t)(v133 - 1) > 2) {
                    int v125 = @"unknown";
                  }
                  else {
                    int v125 = off_1E6A0F7A8[v133 - 1];
                  }
                  v126 = v125;
                  *(_DWORD *)long long buf = 138544130;
                  long long v166 = v124;
                  __int16 v167 = 2112;
                  id v168 = v126;
                  __int16 v169 = 2112;
                  long long v170 = v134;
                  __int16 v171 = 2112;
                  id v172 = v132;
                  _os_log_impl(&dword_1D49D5000, v115, OS_LOG_TYPE_DEFAULT, "%{public}@Add UserManagementOperation: Successfully added operation - type: %@, accessory %@, user %@", buf, 0x2Au);

                  char v113 = v142;
                }

                [v11 updateDelegate:v113];
                +[HMDUserManagementOperationManager sharedManager];
                id v128 = v127 = v113;
                [v128 addOperation:v11];

                id v129 = [(HMDHomeManager *)v127 unprocessedOperationModelIdentifiers];
                uint64_t v130 = [v5 uuid];
                [v129 removeObject:v130];

                int v120 = 0;
                uint64_t v19 = 0;
              }
              goto LABEL_90;
            }
LABEL_68:

            id v50 = self;
          }
LABEL_85:
          id v92 = (void *)MEMORY[0x1D9452090]();
          __int16 v93 = v50;
          id v94 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
          {
            __int16 v95 = HMFGetLogIdentifier();
            id v96 = [v139 identifier];
            *(_DWORD *)long long buf = 138543618;
            long long v166 = v95;
            __int16 v167 = 2112;
            id v168 = v96;
            __int16 v97 = "%{public}@Add UserManagementOperation: Invalid parameter - user %@";
            uint64_t v98 = v94;
            uint32_t v99 = 22;
            goto LABEL_87;
          }
        }
        else
        {
          id v92 = (void *)MEMORY[0x1D9452090]();
          __int16 v93 = v50;
          id v94 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
          {
            __int16 v95 = HMFGetLogIdentifier();
            id v96 = [v143 identifier];
            *(_DWORD *)long long buf = 138543874;
            long long v166 = v95;
            __int16 v167 = 2112;
            id v168 = v96;
            __int16 v169 = 2112;
            long long v170 = v83;
            __int16 v97 = "%{public}@Add UserManagementOperation: Invalid parameter - accessory: %@, home: %@";
            uint64_t v98 = v94;
            uint32_t v99 = 32;
LABEL_87:
            _os_log_impl(&dword_1D49D5000, v98, OS_LOG_TYPE_ERROR, v97, buf, v99);
          }
        }

        uint64_t v121 = [v6 responseHandler];

        if (!v121)
        {
          uint64_t v11 = 0;
          uint64_t v19 = 0;
          int v120 = 1;
          uint64_t v116 = v143;
          uint64_t v117 = v139;
LABEL_92:

          if (v120) {
            goto LABEL_96;
          }
          goto LABEL_93;
        }
        id v118 = [v6 responseHandler];
        double v122 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
        ((void (**)(void, void *, void))v118)[2](v118, v122, 0);

        uint64_t v11 = 0;
        uint64_t v19 = 0;
        int v120 = 1;
        uint64_t v116 = v143;
        uint64_t v117 = v139;
LABEL_90:

        goto LABEL_92;
      }
      long long v62 = (void *)MEMORY[0x1D9452090]();
      uint64_t v63 = self;
      long long v64 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
      {
        __int16 v65 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        long long v166 = v65;
        _os_log_impl(&dword_1D49D5000, v64, OS_LOG_TYPE_ERROR, "%{public}@Add UserManagementOperation: Nil parameter - operationType", buf, 0xCu);
      }
      __int16 v66 = [v6 responseHandler];

      if (!v66)
      {
        uint64_t v11 = 0;
        uint64_t v19 = 0;
        goto LABEL_96;
      }
      long long v61 = [v6 responseHandler];
      id v67 = [MEMORY[0x1E4F28C58] hmErrorWithCode:20];
      ((void (**)(void, void *, void))v61)[2](v61, v67, 0);
    }
    uint64_t v11 = 0;
    uint64_t v19 = 0;
LABEL_95:

    goto LABEL_96;
  }
  [v11 setDelegate:self];
  uint64_t v19 = 0;
LABEL_93:
  double v123 = [v6 responseHandler];

  if (v123)
  {
    long long v61 = [v6 responseHandler];
    ((void (**)(void, void *, void))v61)[2](v61, v19, 0);
    goto LABEL_95;
  }
LABEL_96:
}

- (void)reprocessUserManagementModels
{
  uint64_t v3 = [(HMDHomeManager *)self unprocessedOperationModelIdentifiers];
  uint64_t v4 = [v3 count];

  if (v4)
  {
    objc_initWeak(&location, self);
    uint64_t v11 = MEMORY[0x1E4F143A8];
    uint64_t v12 = 3221225472;
    int v13 = __47__HMDHomeManager_reprocessUserManagementModels__block_invoke;
    id v14 = &unk_1E6A16460;
    objc_copyWeak(&v15, &location);
    id v5 = _Block_copy(&v11);
    id v6 = [(HMDHomeManager *)self backingStore];
    id v7 = [HMDBackingStoreCacheFetchModelObjects alloc];
    uint64_t v8 = [(HMDHomeManager *)self unprocessedOperationModelIdentifiers];
    uint64_t v9 = [v8 allObjects];
    uint64_t v10 = [(HMDBackingStoreCacheFetchModelObjects *)v7 initWithUUIDs:v9 fetchResult:v5];
    [v6 submit:v10];

    objc_destroyWeak(&v15);
    objc_destroyWeak(&location);
  }
}

uint64_t __47__HMDHomeManager_reprocessUserManagementModels__block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v8 = WeakRetained;
  if (WeakRetained)
  {
    id v26 = v6;
    uint64_t v9 = [WeakRetained backingStore];
    uint64_t v10 = +[HMDBackingStoreTransactionOptions defaultLocalOptions];
    long long v28 = [v9 transaction:@"kUserManagementOperationAddedKey" options:v10];

    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v27 = v5;
    id v11 = v5;
    uint64_t v12 = [v11 countByEnumeratingWithState:&v29 objects:v33 count:16];
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)v30;
      do
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          if (*(void *)v30 != v14) {
            objc_enumerationMutation(v11);
          }
          int v16 = *(void **)(*((void *)&v29 + 1) + 8 * i);
          int v17 = [v8 unprocessedOperationModelIdentifiers];
          id v18 = [v16 object];
          uint64_t v19 = [v18 uuid];
          int v20 = [v17 containsObject:v19];

          if (v20)
          {
            int v21 = [v16 object];
            [v28 add:v21];
          }
        }
        uint64_t v13 = [v11 countByEnumeratingWithState:&v29 objects:v33 count:16];
      }
      while (v13);
    }

    [v28 run];
    id v6 = v26;
    id v5 = v27;
  }
  else
  {
    long long v22 = (void *)MEMORY[0x1D9452090]();
    double v23 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      double v24 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      long long v35 = v24;
      _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_ERROR, "%{public}@Missing self: -[HMDHomeManager reprocessUserManagementModels]", buf, 0xCu);
    }
  }

  return 0;
}

- (void)handleVendorInfoUpdated:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __42__HMDHomeManager_handleVendorInfoUpdated___block_invoke;
  v7[3] = &unk_1E6A197C8;
  id v8 = v4;
  uint64_t v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __42__HMDHomeManager_handleVendorInfoUpdated___block_invoke(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = [*(id *)(a1 + 32) userInfo];
  uint64_t v10 = objc_msgSend(v9, "hmf_arrayForKey:", @"ChangedManufacturer");
  if (v10)
  {
    uint64_t v1 = dispatch_group_create();
    v19[0] = 0;
    v19[1] = v19;
    void v19[2] = 0x2020000000;
    char v20 = 0;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v2 = [*(id *)(a1 + 40) homes];
    uint64_t v3 = [v2 countByEnumeratingWithState:&v15 objects:v21 count:16];
    if (v3)
    {
      uint64_t v4 = *(void *)v16;
      do
      {
        uint64_t v5 = 0;
        do
        {
          if (*(void *)v16 != v4) {
            objc_enumerationMutation(v2);
          }
          id v6 = *(void **)(*((void *)&v15 + 1) + 8 * v5);
          dispatch_group_enter(v1);
          v12[0] = MEMORY[0x1E4F143A8];
          v12[1] = 3221225472;
          void v12[2] = __42__HMDHomeManager_handleVendorInfoUpdated___block_invoke_2;
          v12[3] = &unk_1E6A16438;
          uint64_t v14 = v19;
          uint64_t v13 = v1;
          [v6 notifyClientOfVendorInfoUpdatedForManufacturers:v10 withCompletion:v12];

          ++v5;
        }
        while (v3 != v5);
        uint64_t v3 = [v2 countByEnumeratingWithState:&v15 objects:v21 count:16];
      }
      while (v3);
    }

    id v7 = [*(id *)(a1 + 40) workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __42__HMDHomeManager_handleVendorInfoUpdated___block_invoke_3;
    block[3] = &unk_1E6A18690;
    void block[4] = *(void *)(a1 + 40);
    void block[5] = v19;
    dispatch_group_notify(v1, v7, block);

    _Block_object_dispose(v19, 8);
  }
}

void __42__HMDHomeManager_handleVendorInfoUpdated___block_invoke_2(uint64_t a1, int a2)
{
  if (a2) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __42__HMDHomeManager_handleVendorInfoUpdated___block_invoke_3(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    uint64_t v1 = *(void **)(a1 + 32);
    id v2 = [v1 uuid];
    [v1 _updateGenerationCounterWithReason:@"VendorInfoUpdated" sourceUUID:v2 shouldNotifyClients:0];
  }
  id v3 = +[HMDBulletinBoard sharedBulletinBoard];
  [v3 refreshHomeBadgeNumber];
}

- (void)_handleElectDeviceForIDSSession:(id)a3
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [v4 messagePayload];
  id v6 = objc_msgSend(v5, "hmf_dictionaryForKey:", @"kRequiredCapabilitiesKey");

  id v7 = [v4 messagePayload];
  id v8 = objc_msgSend(v7, "hmf_dictionaryForKey:", @"kRequestedCapabilitiesKey");

  if (isWatch())
  {
    uint64_t v9 = (void *)MEMORY[0x1D9452090]();
    uint64_t v10 = self;
    id v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v42 = v12;
      uint64_t v13 = "%{public}@### Watch is current device so ignoring IDS Elect";
      uint64_t v14 = v11;
      os_log_type_t v15 = OS_LOG_TYPE_DEBUG;
LABEL_13:
      _os_log_impl(&dword_1D49D5000, v14, v15, v13, buf, 0xCu);
    }
LABEL_14:

    goto LABEL_15;
  }
  long long v16 = [(HMDHomeManager *)self cloudDataSyncStateFilter];
  int v17 = [v16 dataSyncInProgressWithState:0 withMessage:0];

  if (v17)
  {
    uint64_t v9 = (void *)MEMORY[0x1D9452090]();
    uint64_t v10 = self;
    id v11 = HMFGetOSLogHandle();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO)) {
      goto LABEL_14;
    }
    uint64_t v12 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    id v42 = v12;
    uint64_t v13 = "%{public}@### Cloud data sync is in progress so ignoring IDS Elect";
LABEL_12:
    uint64_t v14 = v11;
    os_log_type_t v15 = OS_LOG_TYPE_INFO;
    goto LABEL_13;
  }
  if (![(HMDHomeManager *)self _capabilitiesAreSupported:v6])
  {
    uint64_t v9 = (void *)MEMORY[0x1D9452090]();
    uint64_t v10 = self;
    id v11 = HMFGetOSLogHandle();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO)) {
      goto LABEL_14;
    }
    uint64_t v12 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    id v42 = v12;
    uint64_t v13 = "%{public}@### All capabilities are not met so ignoring IDS Elect";
    goto LABEL_12;
  }
  long long v18 = [(HMDHomeManager *)self homes];
  v39[0] = MEMORY[0x1E4F143A8];
  v39[1] = 3221225472;
  v39[2] = __50__HMDHomeManager__handleElectDeviceForIDSSession___block_invoke;
  void v39[3] = &unk_1E6A16178;
  id v19 = v4;
  id v40 = v19;
  char v20 = objc_msgSend(v18, "hmf_objectPassingTest:", v39);

  int v21 = [v19 remoteSenderContext];
  uint64_t v22 = [v21 accountIdentifier];

  if (v22)
  {
    double v23 = +[HMDIdentityRegistry sharedRegistry];
    double v24 = [v23 identitiesForAccountIdentifier:v22];
  }
  else
  {
    double v24 = (void *)MEMORY[0x1E4F1CBF0];
  }
  uint64_t v25 = [v24 count];
  if (v20 || v25)
  {
    long long v31 = [(HMDHomeManager *)self _scrubRequestedCapabilities:v8 fromMessage:v19];
    long long v30 = [(HMDHomeManager *)self _prepareAnswerForRequestedCapabilities:v31];

    context = (void *)MEMORY[0x1D9452090]();
    long long v32 = self;
    __int16 v33 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v34 = uint64_t v36 = v24;
      [v19 shortDescription];
      long long v35 = v37 = v20;
      *(_DWORD *)long long buf = 138543874;
      id v42 = v34;
      __int16 v43 = 2114;
      char v44 = v35;
      __int16 v45 = 2112;
      uint64_t v46 = v30;
      _os_log_impl(&dword_1D49D5000, v33, OS_LOG_TYPE_INFO, "%{public}@Answering %{public}@ request with response: %@", buf, 0x20u);

      char v20 = v37;
      double v24 = v36;
    }

    [v19 respondWithPayload:v30];
  }
  else
  {
    id v26 = (void *)MEMORY[0x1D9452090]();
    id v27 = self;
    long long v28 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      long long v29 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v42 = v29;
      _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_ERROR, "%{public}@### Message user not allowed to perform this request", buf, 0xCu);
    }
    long long v30 = 0;
  }

LABEL_15:
}

BOOL __50__HMDHomeManager__handleElectDeviceForIDSSession___block_invoke(uint64_t a1, uint64_t a2)
{
  id v2 = [*(id *)(a1 + 32) userForHome:a2];
  BOOL v3 = v2 != 0;

  return v3;
}

- (id)_scrubRequestedCapabilities:(id)a3 fromMessage:(id)a4
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)[v6 mutableCopy];
  uint64_t v9 = [v6 objectForKeyedSubscript:@"kHomeConfigurationVersionKey"];

  if (v9)
  {
    uint64_t v10 = objc_msgSend(v6, "hmf_UUIDForKey:", @"kHomeUUID");
    id v11 = [(HMDHomeManager *)self _homeWithUUID:v10];
    if (v11)
    {
      uint64_t v12 = [v7 userForHome:v11];

      if (!v12)
      {
        uint64_t v13 = (void *)MEMORY[0x1D9452090]();
        uint64_t v14 = self;
        os_log_type_t v15 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          long long v16 = HMFGetLogIdentifier();
          int v19 = 138543362;
          char v20 = v16;
          _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@Purging home info request for capabilities from user that is not a part of the home", (uint8_t *)&v19, 0xCu);
        }
        [v8 removeObjectForKey:@"kHomeUUID"];
        [v8 removeObjectForKey:@"kHomeConfigurationVersionKey"];
      }
    }
  }
  int v17 = (void *)[v8 copy];

  return v17;
}

- (id)_prepareAnswerForRequestedCapabilities:(id)a3
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v6 = +[HMDHAPMetadata getSharedInstance];
  id v7 = [v4 objectForKeyedSubscript:@"kDeviceClassTypeKey"];

  if (v7)
  {
    id v8 = getDeviceClass();
    [v5 setObject:v8 forKeyedSubscript:@"kDeviceClassTypeKey"];
  }
  uint64_t v9 = [v4 objectForKeyedSubscript:@"kHomedVersionKey"];

  if (v9)
  {
    id v10 = (id)homedVersion;
    [v5 setObject:v10 forKeyedSubscript:@"kHomedVersionKey"];
  }
  id v11 = [v4 objectForKeyedSubscript:@"kHomeConfigurationVersionKey"];

  if (v11)
  {
    uint64_t v12 = objc_msgSend(v4, "hmf_UUIDForKey:", @"kHomeUUID");
    uint64_t v13 = [(HMDHomeManager *)self currentHomeConfigurations];
    uint64_t v14 = [v13 objectForKeyedSubscript:v12];

    if (v12 && v14)
    {
      os_log_type_t v15 = [v12 UUIDString];
      [v5 setObject:v15 forKeyedSubscript:@"kHomeUUID"];

      [v5 setObject:v14 forKeyedSubscript:@"kHomeConfigurationVersionKey"];
    }
    else
    {
      long long v16 = (void *)MEMORY[0x1D9452090]();
      int v17 = self;
      long long v18 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        int v19 = HMFGetLogIdentifier();
        int v27 = 138543874;
        long long v28 = v19;
        __int16 v29 = 2114;
        long long v30 = v12;
        __int16 v31 = 2114;
        long long v32 = v14;
        _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@Home UUID %{public}@ or Configuration Version %{public}@ is nil", (uint8_t *)&v27, 0x20u);
      }
    }
  }
  if (v6)
  {
    char v20 = [v6 version];
    [v5 setObject:v20 forKeyedSubscript:@"kMetadataInfoVersionKey"];

    uint64_t v21 = [v6 schemaVersion];
    [v5 setObject:v21 forKeyedSubscript:@"kMetadataInfoSchemaVersionKey"];

    uint64_t v22 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v6, "incomplete") ^ 1);
    [v5 setObject:v22 forKeyedSubscript:@"kMetadataInfoCompletenessKey"];
  }
  double v23 = [v4 objectForKeyedSubscript:@"kHomedSupportedFeaturesKey"];

  if (v23)
  {
    id v24 = (id)homedSupportedFeatures;
    [v5 setObject:v24 forKeyedSubscript:@"kHomedSupportedFeaturesKey"];
  }
  uint64_t v25 = (void *)[v5 copy];

  return v25;
}

- (BOOL)_capabilitiesAreSupported:(id)a3
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    id v8 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    long long v56 = v8;
    __int16 v57 = 2114;
    id v58 = v4;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Checking for capabilities %{public}@", buf, 0x16u);
  }
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  id v9 = v4;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v50 objects:v61 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v51;
    uint64_t v44 = *(void *)v51;
    __int16 v45 = v6;
    while (2)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v51 != v12) {
          objc_enumerationMutation(v9);
        }
        uint64_t v14 = *(void **)(*((void *)&v50 + 1) + 8 * i);
        if (objc_msgSend(v14, "isEqualToString:", @"kDeviceClassTypeKey", v44, v45))
        {
          os_log_type_t v15 = objc_msgSend(v9, "hmf_stringForKey:", @"kDeviceClassTypeKey");
          long long v16 = getDeviceClass();
          char v17 = [v15 isEqualToString:v16];

          if ((v17 & 1) == 0) {
            goto LABEL_38;
          }
        }
        else if ([v14 isEqualToString:@"kHomedVersionKey"])
        {
          long long v18 = objc_msgSend(v9, "hmf_numberForKey:", @"kHomedVersionKey");
          id v19 = (id)homedVersion;
          uint64_t v20 = [v18 compare:v19];

          if (v20 == 1) {
            goto LABEL_38;
          }
        }
        else
        {
          if ([v14 isEqualToString:@"kHomeUUID"])
          {
            objc_msgSend(v9, "hmf_UUIDForKey:", @"kHomeUUID");
            id v21 = (id)objc_claimAutoreleasedReturnValue();
            uint64_t v22 = [(HMDHomeManager *)v6 currentHomeConfigurations];
            id v23 = [v22 objectForKeyedSubscript:v21];

            if (!v21 || !v23)
            {
              id v40 = (void *)MEMORY[0x1D9452090]();
              long long v41 = v6;
              id v42 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
              {
                __int16 v43 = HMFGetLogIdentifier();
                *(_DWORD *)long long buf = 138543874;
                long long v56 = v43;
                __int16 v57 = 2114;
                id v58 = v21;
                __int16 v59 = 2114;
                id v60 = v23;
                _os_log_impl(&dword_1D49D5000, v42, OS_LOG_TYPE_INFO, "%{public}@Home UUID %{public}@ or Configuration Version %{public}@ is nil", buf, 0x20u);
              }
LABEL_37:

LABEL_38:
              BOOL v34 = 0;
              goto LABEL_40;
            }
          }
          else
          {
            if (![v14 isEqualToString:@"kHomedSupportedFeaturesKey"]) {
              goto LABEL_38;
            }
            id v24 = objc_msgSend(v9, "hmf_arrayForKey:", @"kHomedSupportedFeaturesKey");
            id v23 = (id)homedSupportedFeatures;
            uint64_t v25 = (void *)MEMORY[0x1D9452090]();
            id v26 = v6;
            int v27 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
            {
              long long v28 = HMFGetLogIdentifier();
              *(_DWORD *)long long buf = 138543874;
              long long v56 = v28;
              __int16 v57 = 2114;
              id v58 = v24;
              __int16 v59 = 2114;
              id v60 = v23;
              _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_DEBUG, "%{public}@Checking for required features: %{public}@, ours: %{public}@", buf, 0x20u);
            }
            long long v48 = 0u;
            long long v49 = 0u;
            long long v46 = 0u;
            long long v47 = 0u;
            id v21 = v24;
            uint64_t v29 = [v21 countByEnumeratingWithState:&v46 objects:v54 count:16];
            if (v29)
            {
              uint64_t v30 = v29;
              uint64_t v31 = *(void *)v47;
              while (2)
              {
                for (uint64_t j = 0; j != v30; ++j)
                {
                  if (*(void *)v47 != v31) {
                    objc_enumerationMutation(v21);
                  }
                  uint64_t v33 = *(void **)(*((void *)&v46 + 1) + 8 * j);
                  if (([v23 containsObject:v33] & 1) == 0)
                  {
                    long long v35 = (void *)MEMORY[0x1D9452090]();
                    uint64_t v36 = v26;
                    long long v37 = HMFGetOSLogHandle();
                    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
                    {
                      long long v38 = HMFGetLogIdentifier();
                      *(_DWORD *)long long buf = 138543618;
                      long long v56 = v38;
                      __int16 v57 = 2114;
                      id v58 = v33;
                      _os_log_impl(&dword_1D49D5000, v37, OS_LOG_TYPE_INFO, "%{public}@### Feature: %{public}@ not supported", buf, 0x16u);
                    }

                    goto LABEL_37;
                  }
                }
                uint64_t v30 = [v21 countByEnumeratingWithState:&v46 objects:v54 count:16];
                if (v30) {
                  continue;
                }
                break;
              }
            }

            uint64_t v12 = v44;
            id v6 = v45;
          }
        }
      }
      uint64_t v11 = [v9 countByEnumeratingWithState:&v50 objects:v61 count:16];
      BOOL v34 = 1;
      if (v11) {
        continue;
      }
      break;
    }
  }
  else
  {
    BOOL v34 = 1;
  }
LABEL_40:

  return v34;
}

- (void)_removeConfigurationVersionForHome:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __53__HMDHomeManager__removeConfigurationVersionForHome___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __53__HMDHomeManager__removeConfigurationVersionForHome___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) currentHomeConfigurations];
  [v2 removeObjectForKey:*(void *)(a1 + 40)];
}

- (void)_updateHome:(id)a3 configurationVersion:(int64_t)a4
{
  id v6 = a3;
  id v7 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __51__HMDHomeManager__updateHome_configurationVersion___block_invoke;
  block[3] = &unk_1E6A16D78;
  void block[4] = self;
  id v10 = v6;
  int64_t v11 = a4;
  id v8 = v6;
  dispatch_async(v7, block);
}

void __51__HMDHomeManager__updateHome_configurationVersion___block_invoke(uint64_t a1)
{
  id v3 = [NSNumber numberWithInteger:*(void *)(a1 + 48)];
  id v2 = [*(id *)(a1 + 32) currentHomeConfigurations];
  [v2 setObject:v3 forKeyedSubscript:*(void *)(a1 + 40)];
}

- (void)_handleRequestIsUserUsingHomeKit:(id)a3
{
  v13[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self homes];
  uint64_t v6 = [v5 count];

  if (v6)
  {
    v12[0] = @"kHomeKitInUseKey";
    v12[1] = @"kHomeKitUsingCloudKey";
    v13[0] = MEMORY[0x1E4F1CC38];
    id v7 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHomeManager accountActive](self, "accountActive"));
    v13[1] = v7;
    id v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v13 forKeys:v12 count:2];
  }
  else
  {
    v10[0] = @"kHomeKitInUseKey";
    v10[1] = @"kHomeKitUsingCloudKey";
    v11[0] = MEMORY[0x1E4F1CC28];
    v11[1] = MEMORY[0x1E4F1CC28];
    id v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:v10 count:2];
  }
  id v9 = [v4 responseHandler];

  ((void (**)(void, void, void *))v9)[2](v9, 0, v8);
}

- (void)processCloudZoneModelRemoved:(id)a3 message:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [v6 uuid];
  id v9 = [(HMDHomeManager *)self _zoneInformationWithUUID:v8];

  if (v9)
  {
    id v10 = [(HMDHomeManager *)self cloudZones];
    [v10 removeObject:v9];

    int64_t v11 = [v7 transactionResult];
    [v11 markChanged];
    uint64_t v12 = [v9 uuid];
    uint64_t v13 = [(HMDHomeManager *)self _homeWithZoneID:v12];

    if (v13)
    {
      uint64_t v14 = +[HMDBackingStoreTransactionOptions defaultCloudOptions];
      [(HMDHomeManager *)self scheduleRemovalForHome:v13 message:0 options:v14];
    }
    else
    {
      uint64_t v14 = [(HMDHomeManager *)self cloudDataSyncManager];
      char v17 = [v9 uuid];
      long long v18 = [v17 UUIDString];
      [v14 removeHomeZoneName:v18];
    }
    if ([v6 requiresHomeManagerUpdate])
    {
      id v19 = [(HMDHomeManager *)self backingStore];
      uint64_t v20 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      id v21 = [v19 transaction:@"kHomeManagerUpdatedKey" options:v20];

      uint64_t v22 = [HMDHomeManagerModel alloc];
      id v23 = [(HMDHomeManager *)self uuid];
      id v24 = [(HMDBackingStoreModelObject *)v22 initWithObjectChangeType:1 uuid:v23 parentUUID:0];

      uint64_t v25 = [(HMDHomeManager *)self cloudZones];
      id v26 = +[HMDCloudZoneInformation cloudZoneInformationWithCloudZones:v25];
      [(HMDHomeManagerModel *)v24 setCloudZoneInformation:v26];

      [v21 add:v24 withMessage:0];
      objc_initWeak(&location, self);
      uint64_t v27 = MEMORY[0x1E4F143A8];
      uint64_t v28 = 3221225472;
      uint64_t v29 = __55__HMDHomeManager_processCloudZoneModelRemoved_message___block_invoke;
      uint64_t v30 = &unk_1E6A18528;
      objc_copyWeak(&v31, &location);
      [v21 save:&v27];
      objc_destroyWeak(&v31);
      objc_destroyWeak(&location);
    }
    objc_msgSend(v7, "respondWithPayload:", 0, v27, v28, v29, v30);

    goto LABEL_10;
  }
  os_log_type_t v15 = [v7 responseHandler];

  if (v15)
  {
    int64_t v11 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    long long v16 = [v7 responseHandler];
    ((void (**)(void, void *, void))v16)[2](v16, v11, 0);

LABEL_10:
  }
}

void __55__HMDHomeManager_processCloudZoneModelRemoved_message___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = WeakRetained;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = HMFGetLogIdentifier();
      int v9 = 138543618;
      id v10 = v8;
      __int16 v11 = 2112;
      id v12 = v3;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Update zone information in home manager with error %@", (uint8_t *)&v9, 0x16u);
    }
    [v6 _saveWithReason:@"kHomeManagerUpdatedKey" postSyncNotification:0];
  }
}

- (void)processCloudZoneModelAdd:(id)a3 message:(id)a4
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = [v6 uuid];
  int v9 = [(HMDHomeManager *)self _zoneInformationWithUUID:v8];

  id v10 = (void *)MEMORY[0x1D9452090]();
  __int16 v11 = self;
  id v12 = HMFGetOSLogHandle();
  BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
  if (v9)
  {
    if (v13)
    {
      uint64_t v14 = HMFGetLogIdentifier();
      os_log_type_t v15 = [v6 ownerName];
      *(_DWORD *)long long buf = 138543618;
      long long v38 = v14;
      __int16 v39 = 2112;
      id v40 = v15;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Processing zone model update %@", buf, 0x16u);
    }
    [(HMDCloudZoneInformation *)v9 updateCloudZoneInformationWithModel:v6 message:v7];
  }
  else
  {
    if (v13)
    {
      long long v16 = HMFGetLogIdentifier();
      char v17 = [v6 ownerName];
      *(_DWORD *)long long buf = 138543618;
      long long v38 = v16;
      __int16 v39 = 2112;
      id v40 = v17;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Processing zone model add %@", buf, 0x16u);
    }
    long long v18 = [HMDCloudZoneInformation alloc];
    id v19 = [v6 ownerName];
    uint64_t v20 = [v6 uuid];
    int v9 = [(HMDCloudZoneInformation *)v18 initWithOwnerName:v19 uuid:v20];

    [(HMDCloudZoneInformation *)v9 updateCloudZoneInformationWithModel:v6 message:v7];
    id v21 = [(HMDHomeManager *)v11 cloudZones];
    [v21 addObject:v9];

    uint64_t v22 = [(HMDHomeManager *)v11 cloudDataSyncManager];
    id v23 = [(HMDCloudZoneInformation *)v9 uuid];
    id v24 = [v23 UUIDString];
    uint64_t v25 = [(HMDCloudZoneInformation *)v9 ownerName];
    [v22 addHomeZoneName:v24 owner:v25];
  }
  id v26 = [v7 transactionResult];
  [v26 markChanged];
  if ([v6 requiresHomeManagerUpdate])
  {
    uint64_t v27 = [(HMDHomeManager *)v11 backingStore];
    uint64_t v28 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    uint64_t v29 = [v27 transaction:@"kHomeManagerUpdatedKey" options:v28];

    uint64_t v30 = [HMDHomeManagerModel alloc];
    id v31 = [(HMDHomeManager *)v11 uuid];
    long long v32 = [(HMDBackingStoreModelObject *)v30 initWithObjectChangeType:1 uuid:v31 parentUUID:0];

    uint64_t v33 = [(HMDHomeManager *)v11 cloudZones];
    BOOL v34 = +[HMDCloudZoneInformation cloudZoneInformationWithCloudZones:v33];
    [(HMDHomeManagerModel *)v32 setCloudZoneInformation:v34];

    [v29 add:v32 withMessage:0];
    objc_initWeak((id *)buf, v11);
    v35[0] = MEMORY[0x1E4F143A8];
    v35[1] = 3221225472;
    v35[2] = __51__HMDHomeManager_processCloudZoneModelAdd_message___block_invoke;
    v35[3] = &unk_1E6A18528;
    objc_copyWeak(&v36, (id *)buf);
    [v29 save:v35];
    objc_destroyWeak(&v36);
    objc_destroyWeak((id *)buf);
  }
  [v7 respondWithPayload:0];
}

void __51__HMDHomeManager_processCloudZoneModelAdd_message___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = WeakRetained;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = HMFGetLogIdentifier();
      int v9 = 138543618;
      id v10 = v8;
      __int16 v11 = 2112;
      id v12 = v3;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Update zone information in home manager with error %@", (uint8_t *)&v9, 0x16u);
    }
    [v6 _saveWithReason:@"kHomeManagerUpdatedKey" postSyncNotification:0];
  }
}

- (void)_removeCloudZone:(id)a3 updateHomeManager:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  id v7 = v6;
  if (v6)
  {
    id v15 = v6;
    id v8 = [(HMDHomeManager *)self _zoneInformationWithUUID:v6];
    if (v8)
    {
      int v9 = [(HMDHomeManager *)self backingStore];
      id v10 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      __int16 v11 = [v9 transaction:@"kHomeManagerCloudZoneRemovedKey" options:v10];

      id v12 = [HMDCloudZoneInformationModel alloc];
      uint64_t v13 = [(HMDHomeManager *)self uuid];
      uint64_t v14 = [(HMDBackingStoreModelObject *)v12 initWithObjectChangeType:3 uuid:v15 parentUUID:v13];

      [(HMDCloudZoneInformationModel *)v14 setRequiresHomeManagerUpdate:v4];
      [v11 add:v14 withMessage:0];
      [v11 run];
    }
    id v7 = v15;
  }
  MEMORY[0x1F41817F8](v6, v7);
}

- (void)addTransactionAfterPush:(id)a3
{
  if (a3)
  {
    id v4 = a3;
    id v5 = [(HMDHomeManager *)self backingStore];
    id v6 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    id v12 = [v5 transaction:@"kHomeManagerCloudZoneAddedKey" options:v6];

    id v7 = [HMDCloudZoneInformationModel alloc];
    id v8 = [v4 uuid];
    int v9 = [(HMDHomeManager *)self uuid];
    id v10 = [(HMDBackingStoreModelObject *)v7 initWithObjectChangeType:1 uuid:v8 parentUUID:v9];

    __int16 v11 = [v4 ownerName];

    [(HMDCloudZoneInformationModel *)v10 setOwnerName:v11];
    [(HMDCloudZoneInformationModel *)v10 setRequiresHomeManagerUpdate:1];
    [v12 add:v10 withMessage:0];
    [v12 run];
  }
}

- (void)_addCloudZone:(id)a3 ownerName:(id)a4
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = v7;
  if (v6)
  {
    if (v7)
    {
      int v9 = [(HMDHomeManager *)self _zoneInformationWithUUID:v6];
      if (!v9)
      {
        int v9 = [[HMDCloudZoneInformation alloc] initWithOwnerName:v8 uuid:v6];
        id v10 = [(HMDHomeManager *)self cloudZones];
        [v10 addObject:v9];
      }
    }
    else
    {
      __int16 v11 = (void *)MEMORY[0x1D9452090]();
      id v12 = self;
      uint64_t v13 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = HMFGetLogIdentifier();
        id v15 = [v6 UUIDString];
        int v16 = 138543618;
        char v17 = v14;
        __int16 v18 = 2112;
        id v19 = v15;
        _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_ERROR, "%{public}@Cannot add zone because the ownerName was not specified, %@", (uint8_t *)&v16, 0x16u);
      }
    }
  }
}

- (BOOL)zoneFetchFailed
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = [(HMDHomeManager *)self cloudZones];
  id v3 = (void *)[v2 copy];

  uint64_t v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v3);
        }
        if ([*(id *)(*((void *)&v8 + 1) + 8 * i) didFetchFailed])
        {
          LOBYTE(v4) = 1;
          goto LABEL_11;
        }
      }
      uint64_t v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v4;
}

- (BOOL)_zonesFetched
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = [(HMDHomeManager *)self cloudZones];
  id v3 = (void *)[v2 copy];

  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        if ([*(id *)(*((void *)&v10 + 1) + 8 * i) isFirstFetch])
        {
          BOOL v8 = 0;
          goto LABEL_11;
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
  BOOL v8 = 1;
LABEL_11:

  return v8;
}

- (void)processHomeManagerModelUpdate:(id)a3 message:(id)a4
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  if ([v6 propertyWasSet:@"primaryHomeUUID"])
  {
    BOOL v8 = [v6 primaryHomeUUID];

    if (v8)
    {
      id v9 = objc_alloc(MEMORY[0x1E4F29128]);
      long long v10 = [v6 primaryHomeUUID];
      long long v11 = (void *)[v9 initWithUUIDString:v10];

      long long v12 = [(HMDHomeManager *)self primaryHomeUUID];
      char v13 = HMFEqualObjects();

      if ((v13 & 1) == 0)
      {
        uint64_t v14 = (void *)MEMORY[0x1D9452090]();
        uint64_t v15 = self;
        int v16 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          char v17 = HMFGetLogIdentifier();
          int v22 = 138543618;
          id v23 = v17;
          __int16 v24 = 2112;
          uint64_t v25 = v11;
          _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, "%{public}@Applying primary home UUID: %@", (uint8_t *)&v22, 0x16u);
        }
        [(HMDHomeManager *)v15 setPrimaryHomeUUID:v11];
        __int16 v18 = objc_opt_new();
        id v19 = [(HMDHomeManager *)v15 primaryHomeUUID];
        [v18 setObject:v19 forKeyedSubscript:@"HMDPrimaryHomeUUIDKey"];

        uint64_t v20 = [MEMORY[0x1E4F28EB8] defaultCenter];
        [v20 postNotificationName:@"HMDNotificationPrimaryHomeDidChange" object:v15 userInfo:v18];
      }
    }
  }
  id v21 = [v7 transactionResult];
  [v21 markChanged];
  [v7 respondWithSuccess];
}

- (void)_changePrimaryHome:(id)a3
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (v4)
  {
    uint64_t v5 = [(HMDHomeManager *)self primaryHomeUUID];
    char v6 = HMFEqualObjects();

    if ((v6 & 1) == 0)
    {
      id v7 = (void *)MEMORY[0x1D9452090]();
      BOOL v8 = self;
      id v9 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        long long v10 = HMFGetLogIdentifier();
        long long v11 = [(HMDHomeManager *)v8 primaryHomeUUID];
        int v19 = 138543874;
        uint64_t v20 = v10;
        __int16 v21 = 2112;
        int v22 = v11;
        __int16 v23 = 2112;
        id v24 = v4;
        _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Updating the primary home from %@ to %@", (uint8_t *)&v19, 0x20u);
      }
      long long v12 = [HMDHomeManagerModel alloc];
      char v13 = [(HMDHomeManager *)v8 uuid];
      uint64_t v14 = [(HMDBackingStoreModelObject *)v12 initWithObjectChangeType:1 uuid:v13 parentUUID:0];

      uint64_t v15 = [v4 UUIDString];
      [(HMDHomeManagerModel *)v14 setPrimaryHomeUUID:v15];

      int v16 = [(HMDHomeManager *)v8 backingStore];
      char v17 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      __int16 v18 = [v16 transaction:@"HMD.hm" options:v17];

      [v18 add:v14 withMessage:0];
      [v18 run];
    }
  }
}

- (void)_handleRequestSetPrimaryHome:(id)a3
{
  id v16 = a3;
  id v4 = [v16 uuidForKey:@"kHomeUUID"];
  if (v4)
  {
    uint64_t v5 = [(HMDHomeManager *)self _homeWithUUID:v4];
    if (v5)
    {
      char v6 = [HMDHomeManagerModel alloc];
      id v7 = [(HMDHomeManager *)self uuid];
      BOOL v8 = [(HMDBackingStoreModelObject *)v6 initWithObjectChangeType:1 uuid:v7 parentUUID:0];

      id v9 = [v4 UUIDString];
      [(HMDHomeManagerModel *)v8 setPrimaryHomeUUID:v9];

      long long v10 = [(HMDHomeManager *)self backingStore];
      long long v11 = [v16 name];
      long long v12 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      char v13 = [v10 transaction:v11 options:v12];

      [v13 add:v8 withMessage:v16];
      [v13 run];
    }
    else
    {
      uint64_t v15 = [v16 responseHandler];

      if (!v15)
      {
        uint64_t v5 = 0;
        goto LABEL_10;
      }
      BOOL v8 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
      char v13 = [v16 responseHandler];
      ((void (**)(void, HMDHomeManagerModel *, void))v13)[2](v13, v8, 0);
    }
  }
  else
  {
    uint64_t v14 = [v16 responseHandler];

    if (!v14) {
      goto LABEL_11;
    }
    uint64_t v5 = [MEMORY[0x1E4F28C58] hmErrorWithCode:20];
    BOOL v8 = [v16 responseHandler];
    (*(void (**)(HMDHomeManagerModel *, void *, void))&v8->super._bsoDataVersionOverride)(v8, v5, 0);
  }

LABEL_10:
LABEL_11:
}

- (void)processHomeModelRemoved:(id)a3 message:(id)a4
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  BOOL v8 = (void *)MEMORY[0x1D9452090]();
  id v9 = self;
  long long v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    long long v11 = HMFGetLogIdentifier();
    int v22 = 138543874;
    __int16 v23 = v11;
    __int16 v24 = 2112;
    id v25 = v6;
    __int16 v26 = 2112;
    id v27 = v7;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Removing home model : %@ due to message: %@", (uint8_t *)&v22, 0x20u);
  }
  long long v12 = [v6 uuid];
  if (v12)
  {
    uint64_t v13 = [(HMDHomeManager *)v9 _homeWithUUID:v12];
    if (v13)
    {
      uint64_t v14 = (void *)v13;
      uint64_t v15 = [v7 transactionResult];
      BOOL v16 = [v15 source] == 1;

      [(HMDHomeManager *)v9 _removeHome:v14 withMessage:v7 saveToStore:1 notifyUsers:1 shouldRemovePairings:v16];
    }
    else
    {
      int v19 = [v7 responseHandler];

      if (v19)
      {
        uint64_t v20 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:2 userInfo:0];
        __int16 v21 = [v7 responseHandler];
        ((void (**)(void, void *, void))v21)[2](v21, v20, 0);
      }
      uint64_t v14 = 0;
    }
    goto LABEL_11;
  }
  char v17 = [v7 responseHandler];

  if (v17)
  {
    uint64_t v14 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F2D140] code:20 userInfo:0];
    __int16 v18 = [v7 responseHandler];
    ((void (**)(void, void *, void))v18)[2](v18, v14, 0);

LABEL_11:
  }
}

- (void)_handleRequestRemoveHome:(id)a3
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [v4 uuidForKey:@"kHomeUUID"];
  id v6 = [(HMDHomeManager *)self _homeWithUUID:v5];
  if (v6)
  {
    if ([v4 isEntitledForSPIAccess])
    {
      [(HMDHomeManager *)self _handleRemoveHomeOperation:v6 message:v4];
    }
    else
    {
      long long v10 = (void *)MEMORY[0x1D9452090]();
      long long v11 = self;
      long long v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        int v22 = v13;
        __int16 v23 = 2112;
        __int16 v24 = v6;
        _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Presenting delete home confirmation dialog to user for %@", buf, 0x16u);
      }
      uint64_t v14 = +[HMDUIDialogPresenter sharedUIDialogPresenter];
      uint64_t v15 = [v6 name];
      BOOL v16 = [(HMDHomeManager *)v11 workQueue];
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 3221225472;
      v17[2] = __43__HMDHomeManager__handleRequestRemoveHome___block_invoke;
      v17[3] = &unk_1E6A16410;
      void v17[4] = v11;
      id v18 = v5;
      id v19 = v6;
      id v20 = v4;
      [v14 requestUserPermissionForDeletionOfHomeWithName:v15 withContext:v18 queue:v16 completionHandler:v17];
    }
  }
  else
  {
    id v7 = [v4 responseHandler];

    if (v7)
    {
      BOOL v8 = [v4 responseHandler];
      id v9 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
      ((void (**)(void, void *, void))v8)[2](v8, v9, 0);
    }
  }
}

void __43__HMDHomeManager__handleRequestRemoveHome___block_invoke(uint64_t a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    BOOL v8 = (void *)v7;
    id v9 = @"delete home";
    if (a2) {
      id v9 = @"cancel";
    }
    int v21 = 138543618;
    uint64_t v22 = v7;
    __int16 v23 = 2112;
    __int16 v24 = v9;
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@User selected %@", (uint8_t *)&v21, 0x16u);
  }
  if (a2)
  {
    long long v10 = [*(id *)(a1 + 56) responseHandler];

    if (!v10) {
      return;
    }
    long long v11 = [*(id *)(a1 + 56) responseHandler];
    long long v12 = [MEMORY[0x1E4F28C58] hmErrorWithCode:23];
    ((void (**)(void, void *, void))v11)[2](v11, v12, 0);
  }
  else
  {
    uint64_t v13 = [*(id *)(a1 + 32) _homeWithUUID:*(void *)(a1 + 40)];
    if (v13)
    {
      long long v11 = (void (**)(void, void, void))v13;
      [*(id *)(a1 + 32) _handleRemoveHomeOperation:*(void *)(a1 + 48) message:*(void *)(a1 + 56)];
    }
    else
    {
      uint64_t v14 = (void *)MEMORY[0x1D9452090]();
      id v15 = *(id *)(a1 + 32);
      BOOL v16 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        char v17 = HMFGetLogIdentifier();
        id v18 = *(__CFString **)(a1 + 40);
        int v21 = 138543618;
        uint64_t v22 = (uint64_t)v17;
        __int16 v23 = 2112;
        __int16 v24 = v18;
        _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_ERROR, "%{public}@Home Removal failed because no home found for %@", (uint8_t *)&v21, 0x16u);
      }
      long long v11 = [*(id *)(a1 + 56) responseHandler];

      if (v11)
      {
        id v19 = [*(id *)(a1 + 56) responseHandler];
        id v20 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
        ((void (**)(void, void *, void))v19)[2](v19, v20, 0);

        long long v11 = 0;
      }
    }
  }
}

- (void)_handleRemoveHomeOperation:(id)a3 message:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  id v8 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  [(HMDHomeManager *)self scheduleRemovalForHome:v7 message:v6 options:v8];
}

- (void)scheduleRemovalForHome:(id)a3 message:(id)a4 options:(id)a5
{
  location[3] = *(id *)MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  if (v8)
  {
    id v11 = v8;
    long long v12 = [v11 name];
    uint64_t v13 = [v11 zoneID];
    uint64_t v14 = [v9 name];
    id v15 = (void *)v14;
    BOOL v16 = @"kHomeManagerUpdatedKey";
    if (v14) {
      BOOL v16 = (__CFString *)v14;
    }
    char v17 = v16;

    id v18 = [(HMDHomeManager *)self syncManager];
    objc_initWeak(location, self);
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 3221225472;
    void v29[2] = __57__HMDHomeManager_scheduleRemovalForHome_message_options___block_invoke;
    void v29[3] = &unk_1E6A163E8;
    objc_copyWeak(&v37, location);
    id v19 = v11;
    id v30 = v19;
    id v20 = v17;
    id v31 = v20;
    id v32 = v10;
    id v33 = v9;
    id v21 = v13;
    id v34 = v21;
    id v22 = v12;
    id v35 = v22;
    id v23 = v18;
    id v36 = v23;
    [v23 pauseAndWaitForCurrentOperationCompletion:v29];

    objc_destroyWeak(&v37);
    objc_destroyWeak(location);

    goto LABEL_9;
  }
  __int16 v24 = (void *)MEMORY[0x1D9452090]();
  uint64_t v25 = self;
  __int16 v26 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    id v27 = HMFGetLogIdentifier();
    LODWORD(location[0]) = 138543362;
    *(id *)((char *)location + 4) = v27;
    _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_ERROR, "%{public}@Cannot schedule removal of home because the home was not specified", (uint8_t *)location, 0xCu);
  }
  uint64_t v28 = [v9 responseHandler];

  if (v28)
  {
    id v19 = [v9 responseHandler];
    id v22 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    (*((void (**)(id, id, void))v19 + 2))(v19, v22, 0);
LABEL_9:
  }
}

void __57__HMDHomeManager_scheduleRemovalForHome_message_options___block_invoke(uint64_t a1)
{
  id v2 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));
  if (WeakRetained)
  {
    id v4 = [*(id *)(a1 + 32) deletedBackingStoreObject];
    id v5 = [WeakRetained backingStore];
    id v6 = [v5 transaction:*(void *)(a1 + 40) options:*(void *)(a1 + 48)];

    [v6 add:v4 withMessage:*(void *)(a1 + 56)];
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = __57__HMDHomeManager_scheduleRemovalForHome_message_options___block_invoke_2;
    v7[3] = &unk_1E6A163C0;
    objc_copyWeak(&v12, v2);
    id v8 = *(id *)(a1 + 48);
    id v9 = *(id *)(a1 + 64);
    id v10 = *(id *)(a1 + 72);
    id v11 = *(id *)(a1 + 80);
    [v6 run:v7];

    objc_destroyWeak(&v12);
  }
  else
  {
    [*(id *)(a1 + 80) resume];
  }
}

void __57__HMDHomeManager_scheduleRemovalForHome_message_options___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  id v5 = WeakRetained;
  if (!v3 && WeakRetained && [*(id *)(a1 + 32) source] != 1)
  {
    id v6 = [v5 cloudDataSyncManager];
    id v7 = [*(id *)(a1 + 40) UUIDString];
    [v6 removeHomeZoneName:v7];
  }
  id v8 = (void *)MEMORY[0x1D9452090]();
  id v9 = v5;
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    id v11 = HMFGetLogIdentifier();
    uint64_t v12 = *(void *)(a1 + 48);
    int v13 = 138543874;
    uint64_t v14 = v11;
    __int16 v15 = 2112;
    uint64_t v16 = v12;
    __int16 v17 = 2112;
    id v18 = v3;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Resume sync manager after finishing removing home %@ - error %@", (uint8_t *)&v13, 0x20u);
  }
  [*(id *)(a1 + 56) resume];
}

- (void)_removeHome:(id)a3 withMessage:(id)a4 saveToStore:(BOOL)a5 notifyUsers:(BOOL)a6 shouldRemovePairings:(BOOL)a7
{
  BOOL v32 = a7;
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v11 = a3;
  id v12 = a4;
  int v13 = [v11 uuid];
  uint64_t v14 = [v11 owner];
  __int16 v15 = [v14 account];
  uint64_t v16 = [v15 senderCorrelationIdentifier];

  __int16 v17 = [(HMDHomeManager *)self pendingHomesBeingRemoved];
  [v17 addObject:v13];

  id v18 = [v12 transactionResult];
  uint64_t v19 = (void *)MEMORY[0x1D9452090]([v18 markChanged]);
  id v20 = self;
  id v21 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v31 = v18;
    id v22 = v30 = a5;
    [v11 name];
    v24 = BOOL v23 = a6;
    *(_DWORD *)long long buf = 138543618;
    uint64_t v41 = v22;
    __int16 v42 = 2112;
    __int16 v43 = v24;
    _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@Removing all accessories for home %@", buf, 0x16u);

    a6 = v23;
    a5 = v30;
    id v18 = v31;
  }

  uint64_t v25 = [(HMDHomeManager *)v20 workQueue];
  v33[0] = MEMORY[0x1E4F143A8];
  v33[1] = 3221225472;
  v33[2] = __87__HMDHomeManager__removeHome_withMessage_saveToStore_notifyUsers_shouldRemovePairings___block_invoke;
  v33[3] = &unk_1E6A16398;
  void v33[4] = v20;
  id v34 = v11;
  BOOL v38 = a6;
  id v35 = v13;
  id v36 = v16;
  BOOL v39 = a5;
  id v37 = v12;
  id v26 = v12;
  id v27 = v16;
  id v28 = v13;
  id v29 = v11;
  [v29 removeAllHomeContentsAndAccessoryPairings:v32 queue:v25 completionHandler:v33];
}

void __87__HMDHomeManager__removeHome_withMessage_saveToStore_notifyUsers_shouldRemovePairings___block_invoke(uint64_t a1)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    id v6 = [*(id *)(a1 + 40) name];
    *(_DWORD *)long long buf = 138543618;
    BOOL v78 = v5;
    __int16 v79 = 2112;
    id v80 = v6;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@Removing home %@", buf, 0x16u);
  }
  id v7 = +[HMDBulletinBoard sharedBulletinBoard];
  [v7 removeBulletinsForHome:*(void *)(a1 + 40)];
  if (*(unsigned char *)(a1 + 72)) {
    [*(id *)(a1 + 32) _removeAllUsersOfHome:*(void *)(a1 + 40)];
  }
  [*(id *)(a1 + 40) unconfigure];
  [*(id *)(a1 + 32) removeHome:*(void *)(a1 + 40)];
  id v8 = [*(id *)(a1 + 32) pendingHomesBeingRemoved];
  [v8 removeObject:*(void *)(a1 + 48)];

  [*(id *)(a1 + 40) stopThreadNetwork:0];
  if ([*(id *)(a1 + 40) isOwnerUser])
  {
    id v9 = [*(id *)(a1 + 32) homes];
    char v10 = objc_msgSend(v9, "na_any:", &__block_literal_global_1137);

    if ((v10 & 1) == 0)
    {
      id v11 = [*(id *)(a1 + 32) workQueue];
      uint64_t v69 = MEMORY[0x1E4F143A8];
      uint64_t v70 = 3221225472;
      uint64_t v71 = __87__HMDHomeManager__removeHome_withMessage_saveToStore_notifyUsers_shouldRemovePairings___block_invoke_2;
      __int16 v72 = &unk_1E6A197C8;
      id v12 = *(void **)(a1 + 40);
      uint64_t v73 = *(void *)(a1 + 32);
      id v74 = v12;
      dispatch_async(v11, &v69);
    }
  }
  int v13 = objc_msgSend(*(id *)(a1 + 40), "uuid", v69, v70, v71, v72, v73);
  uint64_t v14 = [*(id *)(a1 + 32) primaryHomeUUID];
  int v15 = [v13 isEqual:v14];

  if (v15)
  {
    uint64_t v16 = [*(id *)(a1 + 32) homes];
    __int16 v17 = [v16 firstObject];

    id v18 = *(void **)(a1 + 32);
    uint64_t v19 = [v17 uuid];
    [v18 _changePrimaryHome:v19];
  }
  id v20 = [*(id *)(a1 + 40) uuid];
  id v21 = [*(id *)(a1 + 32) currentHomeUUID];
  int v22 = [v20 isEqual:v21];

  if (v22)
  {
    [*(id *)(a1 + 32) setLastCurrentHomeUUID:0];
    [*(id *)(a1 + 32) _updateCurrentHomeIfNecessary];
  }
  [*(id *)(a1 + 32) updateHomeKitInUsePreferences];
  BOOL v23 = [*(id *)(a1 + 32) cloudDataSyncStateFilter];
  __int16 v24 = [*(id *)(a1 + 32) homes];
  objc_msgSend(v23, "updateTotalHomes:", objc_msgSend(v24, "count"));

  uint64_t v25 = [*(id *)(a1 + 32) nameValidator];
  id v26 = [*(id *)(a1 + 40) uuid];
  id v27 = (id)[v25 removeNamespace:v26];

  id v28 = *(void **)(a1 + 32);
  id v29 = [*(id *)(a1 + 40) uuid];
  [v28 _removeConfigurationVersionForHome:v29];

  BOOL v30 = *(void **)(a1 + 32);
  id v31 = [*(id *)(a1 + 40) name];
  BOOL v32 = [*(id *)(a1 + 32) uuid];
  id v33 = [v30 removeName:v31 namespace:v32];

  if (v33)
  {
    id v34 = (void *)MEMORY[0x1D9452090]();
    id v35 = *(id *)(a1 + 32);
    id v36 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      id v37 = HMFGetLogIdentifier();
      BOOL v38 = [*(id *)(a1 + 40) name];
      *(_DWORD *)long long buf = 138543618;
      BOOL v78 = v37;
      __int16 v79 = 2112;
      id v80 = v38;
      _os_log_impl(&dword_1D49D5000, v36, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to remove home name '%@' from homeManager namespace", buf, 0x16u);
    }
  }
  if (([*(id *)(a1 + 40) isOwnerUser] & 1) == 0 && !isWatch())
  {
    BOOL v39 = [*(id *)(a1 + 32) uuidsOfRemovedHomes];
    char v40 = [v39 containsObject:*(void *)(a1 + 48)];

    if ((v40 & 1) == 0)
    {
      uint64_t v41 = [*(id *)(a1 + 32) uuidsOfRemovedHomes];
      [v41 addObject:*(void *)(a1 + 48)];

      __int16 v42 = (void *)MEMORY[0x1D9452090]();
      id v43 = *(id *)(a1 + 32);
      uint64_t v44 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
      {
        __int16 v45 = HMFGetLogIdentifier();
        long long v46 = [*(id *)(a1 + 48) UUIDString];
        *(_DWORD *)long long buf = 138543618;
        BOOL v78 = v45;
        __int16 v79 = 2112;
        id v80 = v46;
        _os_log_impl(&dword_1D49D5000, v44, OS_LOG_TYPE_INFO, "%{public}@Adding home with UUID %@ to the uuids of guest homes removed locally", buf, 0x16u);
      }
    }
    [*(id *)(a1 + 32) _trackRemovedHomeUserMergeId:*(void *)(a1 + 56)];
  }
  if (*(unsigned char *)(a1 + 73))
  {
    long long v47 = *(void **)(a1 + 32);
    long long v48 = [*(id *)(a1 + 64) name];
    [v47 _saveWithReason:v48 postSyncNotification:1];
  }
  long long v49 = [*(id *)(a1 + 64) transactionResult];
  BOOL v50 = [v49 source] == 1;
  long long v51 = *(void **)(a1 + 32);
  long long v52 = [*(id *)(a1 + 40) zoneID];
  [v51 _removeCloudZone:v52 updateHomeManager:v50];

  long long v53 = [*(id *)(a1 + 32) compositeSettingsControllerManager];
  long long v54 = [*(id *)(a1 + 40) uuid];
  [v53 removeHomeZone:v54];

  long long v55 = (void *)MEMORY[0x1D9452090]();
  id v56 = *(id *)(a1 + 32);
  __int16 v57 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
  {
    id v58 = HMFGetLogIdentifier();
    __int16 v59 = [*(id *)(a1 + 40) name];
    *(_DWORD *)long long buf = 138543618;
    BOOL v78 = v58;
    __int16 v79 = 2112;
    id v80 = v59;
    _os_log_impl(&dword_1D49D5000, v57, OS_LOG_TYPE_INFO, "%{public}@Removed home: %@", buf, 0x16u);
  }
  [*(id *)(a1 + 64) respondWithSuccess];
  uint64_t v60 = *(void *)(a1 + 40);
  __int16 v75 = @"HMDHomeNotificationKey";
  uint64_t v76 = v60;
  long long v61 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v76 forKeys:&v75 count:1];
  logAndPostNotification(@"HMDHomeRemovedNotification", *(void **)(a1 + 32), v61);
  [*(id *)(a1 + 40) handleHomeWasRemoved];
  uint64_t v62 = [*(id *)(a1 + 32) lastEventStoreController];
  uint64_t v63 = [*(id *)(a1 + 40) uuid];
  [v62 didRemoveHome:v63];

  long long v64 = (void *)MEMORY[0x1D9452090]([*(id *)(a1 + 32) updateCurrentUserEligibleForOwnerToAutoMigration]);
  id v65 = *(id *)(a1 + 32);
  __int16 v66 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
  {
    id v67 = HMFGetLogIdentifier();
    __int16 v68 = *(void **)(a1 + 40);
    *(_DWORD *)long long buf = 138543618;
    BOOL v78 = v67;
    __int16 v79 = 2112;
    id v80 = v68;
    _os_log_impl(&dword_1D49D5000, v66, OS_LOG_TYPE_INFO, "%{public}@The home should be gone : %@", buf, 0x16u);
  }
}

void __87__HMDHomeManager__removeHome_withMessage_saveToStore_notifyUsers_shouldRemovePairings___block_invoke_2(uint64_t a1)
{
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __87__HMDHomeManager__removeHome_withMessage_saveToStore_notifyUsers_shouldRemovePairings___block_invoke_3;
  aBlock[3] = &unk_1E6A197F0;
  void aBlock[4] = *(void *)(a1 + 32);
  id v2 = _Block_copy(aBlock);
  [*(id *)(a1 + 40) removeThreadNetworkPreferredNetworkWithCompletion:v2];
}

void __87__HMDHomeManager__removeHome_withMessage_saveToStore_notifyUsers_shouldRemovePairings___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = *(id *)(a1 + 32);
    id v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v7 = HMFGetLogIdentifier();
      int v8 = 138543362;
      id v9 = v7;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to delete preferred Thread network credentials - continuing anyways", (uint8_t *)&v8, 0xCu);
    }
  }
}

uint64_t __87__HMDHomeManager__removeHome_withMessage_saveToStore_notifyUsers_shouldRemovePairings___block_invoke_1135(uint64_t a1, void *a2)
{
  return [a2 isOwnerUser];
}

- (void)processHomeModelAdd:(id)a3 message:(id)a4
{
  v242[1] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v213 = a4;
  logger = self->_logger;
  if (os_signpost_enabled(logger))
  {
    int v8 = logger;
    id v9 = [v6 uuid];
    uint64_t v10 = [v6 parentUUID];
    *(_DWORD *)long long buf = 138412546;
    v232 = v9;
    __int16 v233 = 2112;
    long long v234 = v10;
    _os_signpost_emit_with_name_impl(&dword_1D49D5000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "HomeModelAdd", "identifier=%{signpost.description:attribute}@ parentIdentifier=%{signpost.description:attribute}@ ", buf, 0x16u);
  }
  id v11 = [(HMDHomeManager *)self setupActivity];

  if (v11)
  {
    id v12 = [(HMDHomeManager *)self setupActivity];
    v241 = @"HMDHomeModelUUID";
    int v13 = [v6 uuid];
    uint64_t v14 = HMDailyRotatedUUID();
    uint64_t v15 = [v14 UUIDString];
    uint64_t v16 = (void *)v15;
    __int16 v17 = @"no uuid";
    if (v15) {
      __int16 v17 = (__CFString *)v15;
    }
    v242[0] = v17;
    id v18 = (id)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v242 forKeys:&v241 count:1];

    uint64_t v19 = [(HMDHomeManager *)self setupActivity];
    [v19 markWithReason:@"HMDHomeManager.processHomeModelAdd.processHomeModelAdd"];
  }
  id v20 = [v6 name];
  if (v20)
  {
    id v21 = objc_alloc(MEMORY[0x1E4F65510]);
    int v22 = [v6 ownerPublicKey];
    BOOL v23 = (void *)[v21 initWithPairingKeyData:v22];

    id v24 = objc_alloc(MEMORY[0x1E4F65508]);
    uint64_t v25 = [v6 ownerName];
    id v26 = (void *)[v24 initWithIdentifier:v25 publicKey:v23 privateKey:0];

    id v27 = [v6 ownerUserID];
    id v28 = +[HMDUser ownerWithUserID:v27 home:0 pairingIdentity:v26 homeManager:self];

    __int16 v212 = v20;
    __int16 v207 = v28;
    if (v28)
    {
      id v29 = [v6 ownerUUID];
      if (v29)
      {
        BOOL v30 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v29];
        [v28 setUUID:v30];
      }
      BOOL v23 = [v213 transactionResult];
      id v31 = (void *)MEMORY[0x1D9452090]();
      BOOL v32 = self;
      id v33 = HMFGetOSLogHandle();
      __int16 v210 = v23;
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        id v34 = HMFGetLogIdentifier();
        id v35 = +[HMDBackingStoreTransactionOptions stringForHMDBackingStoreTransactionSource:](HMDBackingStoreTransactionOptions, "stringForHMDBackingStoreTransactionSource:", [v23 source]);
        *(_DWORD *)long long buf = 138543618;
        v232 = v34;
        __int16 v233 = 2112;
        long long v234 = v35;
        _os_log_impl(&dword_1D49D5000, v33, OS_LOG_TYPE_INFO, "%{public}@Process Home Model Add source: %@", buf, 0x16u);

        BOOL v23 = v210;
      }

      __int16 v203 = self;
      if ([v23 source] == 1)
      {
        id v36 = [MEMORY[0x1E4F5BE48] systemStore];
        -[HMDHomeManager activeAccountIdentifier](v32);
        id v37 = (__CFString *)objc_claimAutoreleasedReturnValue();
        if (!v37)
        {
          id v225 = 0;
          id v226 = 0;
          int v38 = [v36 getCurrentiCloudIdentifier:&v226 controllerPairingIdentifier:&v225 error:0];
          id v37 = (__CFString *)v226;
          id v39 = v225;
          if (!v38 || !-[__CFString length](v37, "length") || ![v39 length])
          {
            char v40 = (void *)MEMORY[0x1D9452090]();
            uint64_t v41 = v32;
            __int16 v42 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v44 = id v43 = v6;
              *(_DWORD *)long long buf = 138543362;
              v232 = v44;
              _os_log_impl(&dword_1D49D5000, v42, OS_LOG_TYPE_INFO, "%{public}@We don't have an active iCloud account, using the sentinel account identifier to remember the controller key", buf, 0xCu);

              id v6 = v43;
              id v28 = v207;
            }

            id v37 = @"__HomeKit_NoAccount_Identifier__";
            self = v203;
          }
        }
        __int16 v45 = [v28 pairingUsername];
        [v36 updateCurrentiCloudIdentifier:v37 controllerPairingIdentifier:v45 error:0];

        BOOL v23 = v210;
      }
      long long v46 = [v6 defaultRoomUUID];

      if (v46)
      {
        id v47 = objc_alloc(MEMORY[0x1E4F29128]);
        long long v48 = [v6 defaultRoomUUID];
        uint64_t v49 = [v47 initWithUUIDString:v48];
      }
      else
      {
        uint64_t v49 = 0;
      }
      id v94 = (void *)MEMORY[0x1E4F2EBC0];
      __int16 v95 = [v6 presenceAuthorizationStatus];
      id v96 = [v94 authWithNumber:v95];

      __int16 v97 = [HMDHome alloc];
      uint64_t v98 = [v6 uuid];
      __int16 v206 = (void *)v49;
      id v20 = v212;
      uint32_t v99 = -[HMDHome initWithName:uuid:defaultRoomUUID:owner:homeManager:presenceAuth:](v97, "initWithName:uuid:defaultRoomUUID:owner:homeManager:presenceAuth:");

      id v100 = [(HMDHomeManager *)v32 nameValidator];
      id v101 = [(HMDHome *)v99 uuid];
      id v102 = (id)[v100 addNamespace:v101];

      uint64_t v103 = [(HMDHome *)v99 name];
      uint64_t v104 = [(HMDHomeManager *)v32 uuid];
      id v105 = [(HMDHomeManager *)v32 addName:v103 namespace:v104];

      uint64_t v106 = [(HMDHome *)v99 roomForEntireHome];
      uint64_t v107 = [v106 name];
      uint64_t v216 = v99;
      id v108 = [(HMDHome *)v99 uuid];
      id v109 = [(HMDHomeManager *)v32 addName:v107 namespace:v108];

      __int16 v110 = (void *)MEMORY[0x1D9452090]();
      int v111 = v32;
      __int16 v112 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v112, OS_LOG_TYPE_INFO))
      {
        char v113 = HMFGetLogIdentifier();
        int v114 = [v28 pairingUsername];
        *(_DWORD *)long long buf = 138543874;
        v232 = v113;
        __int16 v233 = 2112;
        long long v234 = v212;
        __int16 v235 = 2112;
        long long v236 = v114;
        _os_log_impl(&dword_1D49D5000, v112, OS_LOG_TYPE_INFO, "%{public}@Created home %@ with administrator %@", buf, 0x20u);

        BOOL v23 = v210;
      }

      uint64_t v115 = [(HMDHome *)v216 uuid];
      [(HMDHomeManager *)v111 _updateHome:v115 configurationVersion:[(HMDHome *)v216 configurationVersion]];

      [(HMDHomeManager *)v111 addHome:v216];
      [(HMDHome *)v216 refreshUserDisplayNames];
      if ([v23 source] == 1)
      {
        id v202 = v6;
        uint64_t v116 = (void *)MEMORY[0x1D9452090]();
        uint64_t v117 = v111;
        id v118 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v118, OS_LOG_TYPE_INFO))
        {
          uint64_t v119 = HMFGetLogIdentifier();
          int v120 = [(HMDHome *)v216 name];
          *(_DWORD *)long long buf = 138543618;
          v232 = v119;
          __int16 v233 = 2112;
          long long v234 = v120;
          _os_log_impl(&dword_1D49D5000, v118, OS_LOG_TYPE_INFO, "%{public}@Saving addition objects created during creation of home %@", buf, 0x16u);
        }
        [(HMDHome *)v216 setupBackingStore];
        uint64_t v121 = [(HMDHome *)v216 backingStore];
        double v122 = [v213 name];
        double v123 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
        uint64_t v124 = [v121 transaction:v122 options:v123];

        int v125 = [(HMDHome *)v216 backingStoreObjects:4];
        long long v221 = 0u;
        long long v222 = 0u;
        long long v223 = 0u;
        long long v224 = 0u;
        uint64_t v126 = [v125 countByEnumeratingWithState:&v221 objects:v230 count:16];
        if (v126)
        {
          uint64_t v127 = v126;
          uint64_t v128 = *(void *)v222;
          do
          {
            for (uint64_t i = 0; i != v127; ++i)
            {
              if (*(void *)v222 != v128) {
                objc_enumerationMutation(v125);
              }
              id v130 = *(id *)(*((void *)&v221 + 1) + 8 * i);
              objc_opt_class();
              char isKindOfClass = objc_opt_isKindOfClass();

              if ((isKindOfClass & 1) == 0 || !v130) {
                [v124 add:v130 withMessage:0];
              }
            }
            uint64_t v127 = [v125 countByEnumeratingWithState:&v221 objects:v230 count:16];
          }
          while (v127);
        }
        [v124 save];

        id v6 = v202;
        self = v203;
        BOOL v23 = v210;
        id v20 = v212;
      }
      uint64_t v132 = [v23 source];
      [(HMDHome *)v216 configureWithHomeManager:v111 accessoriesPresent:0 uncommittedTransactions:MEMORY[0x1E4F1CBF0] source:v132];
      if ([(HMDHome *)v216 isOwnerUser])
      {
        uint64_t v133 = +[HMDDeviceCapabilities deviceCapabilities];
        int v134 = [v133 isResidentCapable];

        if (v134)
        {
          double v135 = [(HMDHomeManager *)v111 notificationCenter];
          [v135 addObserver:v111 selector:sel_handleHomeCurrentDeviceResidentEligibleNotification_ name:@"HMDHomeCurrentDeviceHasReachableAccessories" object:v216];

          id v136 = [(HMDHomeManager *)v111 appleAccountManager];
          id v137 = [v136 device];

          id v138 = [v213 name];
          v139 = self;
          if ([v138 isEqualToString:@"kAddHomeRequestKey"])
          {
            v140 = [(HMDHomeManager *)v111 capabilitiesController];
            uint64_t v141 = [v140 currentResidentCapabilities];
            if (v141)
            {
              uint64_t v142 = (void *)v141;
              BOOL v143 = [(HMDHomeManager *)v111 isResidentEnabled];

              BOOL v23 = v210;
              if (v143)
              {
                uint64_t v144 = [(HMDHome *)v216 residentCapableDevices];
                char v145 = [v144 containsObject:v137];

                if ((v145 & 1) == 0) {
                  [(HMDHome *)v216 addResidentCapableDevice:v137];
                }
              }
            }
            else
            {

              BOOL v23 = v210;
            }
          }
          else
          {
          }
          self = v139;
        }
      }
      [(HMDHomeManager *)v111 updateHomeKitInUsePreferences];
      long long v146 = [(HMDHomeManager *)v111 cloudDataSyncStateFilter];
      long long v147 = [(HMDHomeManager *)v111 homes];
      objc_msgSend(v146, "updateTotalHomes:", objc_msgSend(v147, "count"));

      long long v148 = (void *)[v213 mutableCopy];
      [v148 setResponseHandler:0];
      __int16 v205 = v148;
      long long v149 = (void *)[v148 copy];
      id v150 = [(HMDHome *)v216 updateHomeWithModel:v6 message:v149];

      long long v151 = [HMDHomeSaveRequest alloc];
      long long v152 = [v213 name];
      uint64_t v153 = [(HMDHomeSaveRequest *)v151 initWithHome:v216 reason:v152 information:0 postSyncNotification:1 objectChange:1];

      id v204 = (void *)v153;
      [(HMDHomeManager *)v111 _saveWithRequest:v153];
      long long v154 = [(HMDHome *)v216 zoneID];
      long long v155 = [(HMDHome *)v216 ownerName];
      [(HMDHomeManager *)v111 _addCloudZone:v154 ownerName:v155];

      long long v156 = (void *)MEMORY[0x1D9452090]();
      long long v157 = v111;
      long long v158 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v158, OS_LOG_TYPE_INFO))
      {
        id v159 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        v232 = v159;
        __int16 v233 = 2112;
        long long v234 = v20;
        _os_log_impl(&dword_1D49D5000, v158, OS_LOG_TYPE_INFO, "%{public}@Add home: %@", buf, 0x16u);
      }
      id v160 = [(HMDHomeManager *)v157 homes];
      if ([v160 count] == 1)
      {
        BOOL v208 = 1;
        long long v161 = v216;
      }
      else
      {
        long long v162 = [(HMDHomeManager *)v157 primaryHomeUUID];
        if (v162) {
          BOOL v208 = 0;
        }
        else {
          BOOL v208 = [v23 source] != 1;
        }
        long long v161 = v216;
      }
      long long v163 = [(HMDHomeManager *)v157 uuidsOfRemovedHomes];
      long long v164 = [(HMDHome *)v161 uuid];
      int v165 = [v163 containsObject:v164];

      __int16 v209 = v157;
      if (v165)
      {
        long long v166 = [(HMDHomeManager *)v157 uuidsOfRemovedHomes];
        __int16 v167 = [(HMDHome *)v161 uuid];
        [v166 removeObject:v167];

        id v168 = (void *)MEMORY[0x1D9452090]();
        __int16 v169 = v157;
        long long v170 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v170, OS_LOG_TYPE_INFO))
        {
          __int16 v171 = HMFGetLogIdentifier();
          [(HMDHome *)v161 uuid];
          id v173 = v172 = self;
          [v173 UUIDString];
          v175 = id v174 = v6;
          *(_DWORD *)long long buf = 138543618;
          v232 = v171;
          __int16 v233 = 2112;
          long long v234 = v175;
          _os_log_impl(&dword_1D49D5000, v170, OS_LOG_TYPE_INFO, "%{public}@Removing home with UUID %@ from uuids of guest homes removed locally since invite was accepted", buf, 0x16u);

          self = v172;
          id v20 = v212;

          id v6 = v174;
          long long v157 = v209;

          BOOL v23 = v210;
        }
      }
      long long v176 = [(HMDHome *)v161 owner];
      uint64_t v177 = [v176 account];
      long long v178 = [v177 senderCorrelationIdentifier];
      [(HMDHomeManager *)v157 _stopTrackingRemovedHomeUserMergeId:v178];

      v228[0] = @"kHomeDataKey";
      if ([v213 isEntitledForSPIAccess]) {
        encodeRootObjectForSPIClients(v161);
      }
      else {
      long long v179 = encodeRootObjectForIncomingXPCMessage(v161, 0);
      }
      v229[0] = v179;
      v228[1] = *MEMORY[0x1E4F2D480];
      long long v180 = [NSNumber numberWithBool:v208];
      v229[1] = v180;
      long long v181 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v229 forKeys:v228 count:2];
      [v213 respondWithPayload:v181];

      if (-[HMDHome isOwnerUser](v161, "isOwnerUser") && [v23 source] == 1)
      {
        __int16 v201 = v96;
        long long v182 = [(HMDHome *)v161 backingStore];
        uint64_t v183 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
        long long v184 = [v182 transaction:@"kBuiltinActionSetsKey" options:v183];

        long long v219 = 0u;
        long long v220 = 0u;
        long long v217 = 0u;
        long long v218 = 0u;
        id obj = [(HMDHome *)v161 builtInActionSetInfo];
        uint64_t v185 = [obj countByEnumeratingWithState:&v217 objects:v227 count:16];
        if (v185)
        {
          uint64_t v186 = v185;
          uint64_t v187 = *(void *)v218;
          do
          {
            for (uint64_t j = 0; j != v186; ++j)
            {
              if (*(void *)v218 != v187) {
                objc_enumerationMutation(obj);
              }
              __int16 v189 = *(void **)(*((void *)&v217 + 1) + 8 * j);
              long long v190 = [HMDActionSetModel alloc];
              long long v191 = objc_msgSend(v189, "hmf_UUIDForKey:", @"kActionSetUUID");
              long long v192 = [(HMDHome *)v216 uuid];
              __int16 v193 = [(HMDBackingStoreModelObject *)v190 initWithObjectChangeType:1 uuid:v191 parentUUID:v192];

              id v194 = objc_msgSend(v189, "hmf_stringForKey:", @"kActionSetName");
              [(HMDActionSetModel *)v193 setName:v194];

              __int16 v195 = objc_msgSend(v189, "hmf_stringForKey:", @"kActionSetType");
              [(HMDActionSetModel *)v193 setType:v195];

              [v184 add:v193 withMessage:0];
            }
            uint64_t v186 = [obj countByEnumeratingWithState:&v217 objects:v227 count:16];
          }
          while (v186);
        }

        [v184 save];
        self = v203;
        BOOL v23 = v210;
        id v20 = v212;
        id v96 = v201;
        long long v161 = v216;
        long long v157 = v209;
      }
      long long v196 = [(HMDHomeManager *)v157 notificationCenter];
      long long v197 = v157;
      long long v198 = v196;
      [v196 postNotificationName:@"HMDHomeAddedNotification" object:v197 userInfo:0];

      __int16 v199 = self->_logger;
      if (os_signpost_enabled(v199))
      {
        *(_WORD *)long long buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1D49D5000, v199, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "HomeModelAdd", "", buf, 2u);
      }
      id v26 = v206;
      if (v208)
      {
        id v200 = [(HMDHome *)v161 uuid];
        [(HMDHomeManager *)v209 _changePrimaryHome:v200];

        [(HMDHomeManager *)v209 _updateCurrentHomeIfNecessary];
      }
      [(HMDHomeManager *)v209 updateCurrentUserEligibleForOwnerToAutoMigration];

      id v28 = v207;
    }
    else
    {
      uint64_t v71 = (void *)MEMORY[0x1D9452090]();
      __int16 v72 = self;
      uint64_t v73 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v75 = id v74 = v26;
        *(_DWORD *)long long buf = 138543618;
        v232 = v75;
        __int16 v233 = 2112;
        long long v234 = v20;
        _os_log_impl(&dword_1D49D5000, v73, OS_LOG_TYPE_ERROR, "%{public}@Failed to create owner user while trying to create home with name %@", buf, 0x16u);

        id v26 = v74;
      }

      uint64_t v76 = [v213 responseHandler];

      if (v76)
      {
        uint64_t v211 = v23;
        char v77 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
        BOOL v78 = [v213 responseHandler];
        ((void (**)(void, void *, void))v78)[2](v78, v77, 0);

        __int16 v79 = [(HMDHomeManager *)v72 setupActivity];

        if (v79)
        {
          uint64_t v215 = [(HMDHomeManager *)v72 setupActivity];
          v237[0] = @"errorCode";
          id v80 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v77, "code"));
          v237[1] = @"HMDHomeModelUUID";
          v238[0] = v80;
          [v6 uuid];
          id v82 = v81 = v26;
          HMDailyRotatedUUID();
          v84 = id v83 = self;
          uint64_t v85 = [v84 UUIDString];
          uint64_t v86 = (void *)v85;
          uint64_t v87 = @"no uuid";
          if (v85) {
            uint64_t v87 = (__CFString *)v85;
          }
          v238[1] = v87;
          id v88 = (id)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v238 forKeys:v237 count:2];

          id v28 = 0;
          self = v83;
          id v20 = v212;

          id v26 = v81;
          id v89 = [(HMDHomeManager *)v72 setupActivity];
          [v89 markWithReason:@"HMDHomeManager.processHomeModelAdd.processHomeModelAdd"];

          id v90 = self->_logger;
          if (os_signpost_enabled(v90))
          {
            char v91 = v90;
            id v92 = [v77 stringValueSafe];
            *(_DWORD *)long long buf = 138412290;
            v232 = v92;
            _os_signpost_emit_with_name_impl(&dword_1D49D5000, v91, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "HomeModelAdd", "Error=%{signpost.description:attribute}@ ", buf, 0xCu);
          }
        }

        BOOL v23 = v211;
      }
      __int16 v93 = self->_logger;
      if (os_signpost_enabled(v93))
      {
        *(_WORD *)long long buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1D49D5000, v93, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "HomeModelAdd", "", buf, 2u);
      }
    }

LABEL_105:
    goto LABEL_106;
  }
  BOOL v50 = [v213 responseHandler];

  if (v50)
  {
    id v28 = [MEMORY[0x1E4F28C58] hmErrorWithCode:20];
    long long v51 = [v213 responseHandler];
    ((void (**)(void, void *, void))v51)[2](v51, v28, 0);

    long long v52 = [(HMDHomeManager *)self setupActivity];

    if (v52)
    {
      long long v53 = [(HMDHomeManager *)self setupActivity];
      v239[0] = @"errorCode";
      long long v54 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v28, "code"));
      v240[0] = v54;
      v239[1] = @"domain";
      uint64_t v55 = [v28 domain];
      id v56 = (void *)v55;
      __int16 v57 = &stru_1F2C9F1A8;
      if (v55) {
        __int16 v57 = (__CFString *)v55;
      }
      v240[1] = v57;
      v239[2] = @"HMDHomeModelUUID";
      id v58 = [v6 uuid];
      __int16 v59 = HMDailyRotatedUUID();
      uint64_t v60 = [v59 UUIDString];
      long long v61 = v28;
      uint64_t v62 = self;
      uint64_t v63 = (void *)v60;
      long long v64 = @"no uuid";
      if (v60) {
        long long v64 = (__CFString *)v60;
      }
      v240[2] = v64;
      id v65 = (id)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v240 forKeys:v239 count:3];

      self = v62;
      id v28 = v61;

      __int16 v66 = [(HMDHomeManager *)self setupActivity];
      [v66 markWithReason:@"HMDHomeManager.processHomeModelAdd.processHomeModelAdd"];

      id v67 = self->_logger;
      if (os_signpost_enabled(v67))
      {
        __int16 v68 = v67;
        uint64_t v69 = [v28 stringValueSafe];
        *(_DWORD *)long long buf = 138412290;
        v232 = v69;
        _os_signpost_emit_with_name_impl(&dword_1D49D5000, v68, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "HomeModelAdd", "Error=%{signpost.description:attribute}@ ", buf, 0xCu);
      }
    }
    uint64_t v70 = self->_logger;
    if (os_signpost_enabled(v70))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1D49D5000, v70, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "HomeModelAdd", "", buf, 2u);
    }
    id v20 = 0;
    goto LABEL_105;
  }
LABEL_106:
}

- (id)validateHomeName:(id)a3
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  unint64_t v5 = HMMaxLengthForNaming();
  if ([v4 length] > v5)
  {
    id v6 = (void *)MEMORY[0x1D9452090]();
    id v7 = self;
    int v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = HMFGetLogIdentifier();
      int v17 = 138543362;
      id v18 = v9;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", (uint8_t *)&v17, 0xCu);
    }
    uint64_t v10 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v11 = 46;
    goto LABEL_7;
  }
  id v12 = [(HMDHomeManager *)self _homeWithName:v4];

  if (v12)
  {
    uint64_t v10 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v11 = 32;
LABEL_7:
    int v13 = [v10 hmErrorWithCode:v11];
    goto LABEL_8;
  }
  uint64_t v15 = [(HMDHomeManager *)self uuid];
  int v13 = [(HMDHomeManager *)self addName:v4 namespace:v15];

  if (v13 && [v13 code] == 31)
  {
    uint64_t v16 = [MEMORY[0x1E4F28C58] hmErrorWithCode:32];

    int v13 = (void *)v16;
  }
LABEL_8:

  return v13;
}

- (void)_handleRequestAddHome:(id)a3
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  unint64_t v5 = [(HMDHomeManager *)self hh2FrameworkSwitch];
  int v6 = [v5 checkExistenceOfHH2SentinelZone];

  if (!v6)
  {
    if (isWatch()) {
      goto LABEL_32;
    }
    int v13 = [(HMDHomeManager *)self cloudDataSyncStateFilter];
    int v14 = [v13 isiCloudSwitchEnabled];

    uint64_t v15 = [(HMDHomeManager *)self cloudDataSource];
    char v16 = [v15 isControllerKeyAvailable];

    if (v14)
    {
      if ((v16 & 1) == 0)
      {
        uint64_t v76 = [(HMDHomeManager *)self cloudDataSyncManager];
        if ([v76 isFirstDBQueryRun])
        {
          BOOL v77 = [(HMDHomeManager *)self missingHomeDataRecord];

          if (v77)
          {
            id v18 = 0;
            goto LABEL_31;
          }
        }
        else
        {
        }
        BOOL v78 = (void *)MEMORY[0x1D9452090]();
        __int16 v79 = self;
        id v80 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
        {
          uint64_t v81 = HMFGetLogIdentifier();
          id v82 = [(HMDHomeManager *)v79 cloudDataSyncManager];
          [v82 isFirstDBQueryRun];
          id v83 = HMFBooleanToString();
          [(HMDHomeManager *)v79 missingHomeDataRecord];
          id v84 = HMFBooleanToString();
          *(_DWORD *)long long buf = 138543874;
          __int16 v93 = v81;
          __int16 v94 = 2112;
          id v95 = v83;
          __int16 v96 = 2112;
          __int16 v97 = v84;
          _os_log_impl(&dword_1D49D5000, v80, OS_LOG_TYPE_ERROR, "%{public}@Cannot create controller key without all conditions good dbquery: %@, homerecord: %@", buf, 0x20u);
        }
        uint64_t v11 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
        goto LABEL_5;
      }
      int v17 = [MEMORY[0x1E4F5BE48] systemStore];
      id v91 = 0;
      [v17 getControllerPublicKey:0 secretKey:0 username:&v91 allowCreation:0 forAccessory:0 error:0];
      id v18 = v91;

      uint64_t v19 = (void *)MEMORY[0x1D9452090]();
      id v20 = self;
      id v21 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        int v22 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        __int16 v93 = v22;
        __int16 v94 = 2112;
        id v95 = v18;
        _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@Got the active controller pairing identifier : %@", buf, 0x16u);
      }
      id v23 = [(HMDHomeManager *)v20 cloudDataSyncManager];
      if ([v23 isFirstDBQueryRun]
        && [(HMDHomeManager *)v20 cloudkitAccountStatusDetermined]
        && [(HMDHomeManager *)v20 missingHomeDataRecord])
      {
        id v24 = [MEMORY[0x1E4F5BE48] systemStore];
        uint64_t v25 = [v24 activeControllerPairingIdentifier];

        if (v25 || !v18) {
          goto LABEL_31;
        }
        id v26 = (void *)MEMORY[0x1D9452090]();
        id v27 = v20;
        id v28 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          id v29 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543618;
          __int16 v93 = v29;
          __int16 v94 = 2112;
          id v95 = v18;
          _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_DEFAULT, "%{public}@Setting the active controller pairing identifier : %@", buf, 0x16u);
        }
        id v23 = [MEMORY[0x1E4F5BE48] systemStore];
        [v23 updateActiveControllerPairingIdentifier:v18];
      }
    }
    else
    {
      BOOL v30 = (void *)MEMORY[0x1D9452090]();
      id v31 = self;
      BOOL v32 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        id v33 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        __int16 v93 = v33;
        _os_log_impl(&dword_1D49D5000, v32, OS_LOG_TYPE_ERROR, "%{public}@Don't have icloud switch enabled will allow creation of new controller key", buf, 0xCu);
      }
      id v89 = 0;
      id v90 = 0;
      id v88 = 0;
      BOOL v34 = [(HMDHomeManager *)v31 getOrCreateControllerPublicKey:&v90 controllerUsername:&v89 error:&v88];
      id v23 = v90;
      id v18 = v89;
      id v35 = v88;
      if (v34)
      {
        id v36 = [MEMORY[0x1E4F5BE48] systemStore];
        id v37 = [v36 activeControllerPairingIdentifier];

        if (!v37)
        {
          int v38 = (void *)MEMORY[0x1D9452090]();
          id v39 = v31;
          char v40 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
          {
            uint64_t v41 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543362;
            __int16 v93 = v41;
            _os_log_impl(&dword_1D49D5000, v40, OS_LOG_TYPE_INFO, "%{public}@No active controller username when icloud switch off", buf, 0xCu);
          }
          if (v18)
          {
            __int16 v42 = (void *)MEMORY[0x1D9452090]();
            id v43 = v39;
            uint64_t v44 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
            {
              __int16 v45 = HMFGetLogIdentifier();
              *(_DWORD *)long long buf = 138543618;
              __int16 v93 = v45;
              __int16 v94 = 2112;
              id v95 = v18;
              _os_log_impl(&dword_1D49D5000, v44, OS_LOG_TYPE_DEFAULT, "%{public}@Setting the active controller pairing identifier with icloud switch off : %@", buf, 0x16u);
            }
            long long v46 = [MEMORY[0x1E4F5BE48] systemStore];
            [v46 updateActiveControllerPairingIdentifier:v18];
          }
        }
      }
    }
LABEL_31:

LABEL_32:
    id v12 = [v4 stringForKey:@"kHomeName"];
    if (v12)
    {
      id v47 = [(HMDHomeManager *)self homes];
      unint64_t v48 = [v47 count];
      unint64_t v49 = maximumHomes;

      if (v48 < v49)
      {
        uint64_t v50 = [(HMDHomeManager *)self validateHomeName:v12];
        if (!v50)
        {
          long long v51 = (void *)MEMORY[0x1D9452090]();
          long long v52 = self;
          long long v53 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
          {
            long long v54 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            __int16 v93 = v54;
            __int16 v94 = 2112;
            id v95 = v12;
            _os_log_impl(&dword_1D49D5000, v53, OS_LOG_TYPE_INFO, "%{public}@Added home:%@ to namespace", buf, 0x16u);
          }
          uint64_t v55 = [v4 uuidForKey:@"kNewObjectUUIDKey"];
          id v56 = +[HMDUser ownerWithUserID:0 home:0 pairingIdentity:0 homeManager:v52];
          if (v56)
          {
            __int16 v57 = +[HMDUser UUIDWithUserID:0 forHomeIdentifier:v55 uuid:0 pairingIdentity:0];
            [v56 setUUID:v57];

            id v58 = [HMDHome alloc];
            __int16 v59 = [MEMORY[0x1E4F29128] UUID];
            uint64_t v60 = [(HMDHome *)v58 initWithName:v12 uuid:v55 defaultRoomUUID:v59 owner:v56 homeManager:v52 presenceAuth:0];

            long long v61 = [(HMDHome *)v60 modelObjectWithChangeType:1];
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              uint64_t v62 = v61;
            }
            else {
              uint64_t v62 = 0;
            }
            id v63 = v62;

            if (v63)
            {
              id v64 = objc_alloc_init(MEMORY[0x1E4F1C9C8]);
              [v63 setCreationDate:v64];

              id v65 = [(HMDHomeManager *)v52 backingStore];
              [v4 name];
              __int16 v66 = v85 = v55;
              id v67 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
              __int16 v68 = [v65 transaction:v66 options:v67];

              uint64_t v55 = v85;
              [v68 add:v63 withMessage:v4];
              v86[0] = MEMORY[0x1E4F143A8];
              v86[1] = 3221225472;
              v86[2] = __40__HMDHomeManager__handleRequestAddHome___block_invoke;
              void v86[3] = &unk_1E6A196E0;
              v86[4] = v52;
              id v87 = v12;
              [v68 run:v86];
            }
          }
          else
          {
            uint64_t v60 = [MEMORY[0x1E4F28C58] hmErrorWithCode:20];
            [v4 respondWithError:v60];
          }

          __int16 v75 = 0;
          goto LABEL_50;
        }
LABEL_49:
        __int16 v75 = (void *)v50;
        [v4 respondWithError:v50];
LABEL_50:

        goto LABEL_51;
      }
      uint64_t v71 = (void *)MEMORY[0x1D9452090]();
      __int16 v72 = self;
      uint64_t v73 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
      {
        id v74 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        __int16 v93 = v74;
        __int16 v94 = 2112;
        id v95 = v12;
        _os_log_impl(&dword_1D49D5000, v73, OS_LOG_TYPE_INFO, "%{public}@Can't add home %@; already at maximum homes",
          buf,
          0x16u);
      }
      uint64_t v69 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v70 = 49;
    }
    else
    {
      uint64_t v69 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v70 = 20;
    }
    uint64_t v50 = [v69 hmErrorWithCode:v70];
    goto LABEL_49;
  }
  id v7 = (void *)MEMORY[0x1D9452090]();
  int v8 = self;
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    __int16 v93 = v10;
    _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_ERROR, "%{public}@HH2 sentinel zone exist but we are not running in HH2 mode. Creating a new home is not allowed in this case", buf, 0xCu);
  }
  uint64_t v11 = [MEMORY[0x1E4F28C58] hmPrivateErrorWithCode:9009];
LABEL_5:
  id v12 = (void *)v11;
  [v4 respondWithError:v11];
LABEL_51:
}

void __40__HMDHomeManager__handleRequestAddHome___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = *(id *)(a1 + 32);
    int v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = HMFGetLogIdentifier();
      uint64_t v8 = *(void *)(a1 + 40);
      int v13 = 138543874;
      int v14 = v7;
      __int16 v15 = 2112;
      uint64_t v16 = v8;
      __int16 v17 = 2112;
      id v18 = v3;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Removing home:%@ from namespace on transaction error %@.", (uint8_t *)&v13, 0x20u);
    }
    uint64_t v10 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v11 = [v10 uuid];
    id v12 = (id)[v10 removeName:v9 namespace:v11];
  }
}

- (id)_findHomeConfigurationModelChange:(id)a3
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = a3;
  id v4 = (id)[v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v12;
    while (2)
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v3);
        }
        id v7 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        uint64_t v8 = objc_msgSend(v7, "objectChange", (void)v11);
        objc_opt_class();
        char isKindOfClass = objc_opt_isKindOfClass();

        if ((isKindOfClass & 1) != 0 && v8)
        {
          id v4 = v7;
          goto LABEL_12;
        }
      }
      id v4 = (id)[v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
LABEL_12:

  return v4;
}

- (id)_findHomeModel:(id)a3
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v3 = a3;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v15;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(id *)(*((void *)&v14 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v9 = v8;
        }
        else {
          uint64_t v9 = 0;
        }
        id v10 = v9;

        if (v10)
        {

LABEL_17:
          id v12 = v8;
          goto LABEL_18;
        }
        id v8 = v8;
        objc_opt_class();
        uint64_t isKindOfClass = objc_opt_isKindOfClass();

        if ((isKindOfClass & 1) != 0 && v8) {
          goto LABEL_17;
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
      id v12 = 0;
      if (v5) {
        continue;
      }
      break;
    }
  }
  else
  {
    id v12 = 0;
  }
LABEL_18:

  return v12;
}

- (id)_findHomeSharedUserModelChange:(id)a3
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  id v27 = [MEMORY[0x1E4F1CA60] dictionary];
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v4 = v3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v30 objects:v34 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v31;
    id v26 = v4;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v31 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v30 + 1) + 8 * i);
        id v10 = objc_msgSend(v9, "objectChange", v26);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          long long v11 = v10;
        }
        else {
          long long v11 = 0;
        }
        id v12 = v11;

        if (v12)
        {
          uint64_t v13 = objc_opt_class();
          if (v13 == objc_opt_class())
          {
            long long v14 = [v12 privilege];
            uint64_t v15 = [v14 integerValue];

            if (v15 != 3)
            {
              long long v16 = [v12 pairingIdentity];

              if (v16)
              {
                long long v17 = (void *)MEMORY[0x1E4F5BE00];
                id v18 = [v12 pairingIdentity];
                uint64_t v19 = objc_msgSend(v17, "hmd_pairingIdentityWithDictionary:", v18);

                if (v19)
                {
                  id v29 = objc_alloc(MEMORY[0x1E4F65508]);
                  id v28 = [v19 identifier];
                  id v20 = [v19 publicKey];
                  id v21 = [v19 privateKey];
                  uint64_t v22 = [v29 initWithIdentifier:v28 publicKey:v20 privateKey:v21];

                  id v23 = (void *)v22;
                  id v24 = [v27 objectForKeyedSubscript:v22];
                  if (!v24)
                  {
                    id v24 = [MEMORY[0x1E4F1CA48] array];
                    [v27 setObject:v24 forKeyedSubscript:v23];
                  }
                  [v24 addObject:v9];

                  id v4 = v26;
                }
              }
            }
          }
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v30 objects:v34 count:16];
    }
    while (v6);
  }

  return v27;
}

- (id)_findHomeOwnerModelChange:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  id v4 = [MEMORY[0x1E4F1CA48] array];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v18 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        long long v11 = objc_msgSend(v10, "objectChange", (void)v17);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v12 = v11;
        }
        else {
          id v12 = 0;
        }
        id v13 = v12;

        if (v13)
        {
          long long v14 = [v13 privilege];
          uint64_t v15 = [v14 integerValue];

          if (v15 == 3) {
            [v4 addObject:v10];
          }
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v7);
  }

  return v4;
}

- (id)_findHomeModelChange:(id)a3
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v3 = a3;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v17;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        uint64_t v9 = objc_msgSend(v8, "objectChange", (void)v16);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v10 = v9;
        }
        else {
          id v10 = 0;
        }
        id v11 = v10;

        if (v11)
        {

LABEL_17:
          id v14 = v8;
          goto LABEL_18;
        }
        id v12 = [v8 objectChange];
        objc_opt_class();
        char isKindOfClass = objc_opt_isKindOfClass();

        if ((isKindOfClass & 1) != 0 && v12) {
          goto LABEL_17;
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
      id v14 = 0;
      if (v5) {
        continue;
      }
      break;
    }
  }
  else
  {
    id v14 = 0;
  }
LABEL_18:

  return v14;
}

- (void)_handleCurrentHomeChanged:(id)a3
{
  id v8 = a3;
  uint64_t v4 = [v8 messagePayload];
  uint64_t v5 = objc_msgSend(v4, "hmf_UUIDForKey:", @"kCurrentHomeUUIDKey");

  [(HMDHomeManager *)self _notifyCurrentHomeUpdated:v5 isLocalUpdate:0];
  uint64_t v6 = [v8 responseHandler];

  if (v6)
  {
    uint64_t v7 = [v8 responseHandler];
    v7[2](v7, 0, 0);
  }
}

- (void)_sendCurrentHomeToWatch:(id)a3
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [v4 version];
  uint64_t v6 = [[HMDHomeKitVersion alloc] initWithVersionString:@"3.0"];
  char v7 = [v5 isAtLeastVersion:v6];

  if (v7)
  {
    id v8 = [(HMDHomeManager *)self currentHomeUUID];

    if (v8)
    {
      uint64_t v22 = @"kCurrentHomeUUIDKey";
      uint64_t v9 = [(HMDHomeManager *)self currentHomeUUID];
      id v10 = [v9 UUIDString];
      id v23 = v10;
      id v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v23 forKeys:&v22 count:1];
    }
    else
    {
      long long v20 = @"kNoCurrentHomeKey";
      uint64_t v21 = MEMORY[0x1E4F1CC38];
      id v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v21 forKeys:&v20 count:1];
    }
    uint64_t v15 = [HMDRemoteDeviceMessageDestination alloc];
    long long v16 = [(HMDHomeManager *)self uuid];
    long long v17 = [(HMDRemoteDeviceMessageDestination *)v15 initWithTarget:v16 device:v4];

    long long v18 = [MEMORY[0x1E4F65480] messageWithName:@"kCurrentHomeChangedNotificationKey" qualityOfService:9 destination:v17 payload:v11];
    long long v19 = [(HMDHomeManager *)self messageDispatcher];
    [v19 sendMessage:v18 completionHandler:0];
  }
  else
  {
    id v12 = (void *)MEMORY[0x1D9452090]();
    id v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      id v14 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v25 = v14;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Not sending current home update to legacy watch", buf, 0xCu);
    }
  }
}

- (void)_notifyCurrentHomeUpdated:(id)a3 isLocalUpdate:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  char v7 = [(HMDHomeManager *)self currentHomeUUID];
  if (!HMFEqualObjects())
  {
    if (v6)
    {
      id v12 = [(HMDHomeManager *)self _homeWithUUID:v6];
      if (isAppleTV() && v12 && ([v12 isOwnerUser] & 1) == 0)
      {
        id v13 = (void *)MEMORY[0x1D9452090]();
        id v14 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          uint64_t v15 = HMFGetLogIdentifier();
          long long v16 = [v6 UUIDString];
          *(_DWORD *)long long buf = 138543618;
          uint64_t v44 = v15;
          __int16 v45 = 2112;
          id v46 = v16;
          long long v17 = "%{public}@Not updating current home since user is not owner of home %@";
LABEL_17:
          _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, v17, buf, 0x16u);

          goto LABEL_18;
        }
        goto LABEL_18;
      }
    }
    else
    {
      id v12 = 0;
    }
    if (!isWatch() || ![(HMDHomeManager *)self companionReachable] || !v4)
    {
      long long v18 = (void *)MEMORY[0x1D9452090]();
      long long v19 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        long long v20 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543874;
        uint64_t v44 = v20;
        __int16 v45 = 2112;
        id v46 = v7;
        __int16 v47 = 2112;
        id v48 = v6;
        _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_INFO, "%{public}@Updating the current home from %@ to %@", buf, 0x20u);
      }
      [(HMDHomeManager *)self setCurrentHomeUUID:v6];
      [(HMDHomeManager *)self _updatePreferencesForCurrentHome];
      if (v6)
      {
        [(HMDHomeManager *)self setLastCurrentHomeUUID:v6];
        uint64_t v41 = @"kCurrentHomeUUIDKey";
        uint64_t v21 = [v6 UUIDString];
        __int16 v42 = v21;
        uint64_t v22 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v42 forKeys:&v41 count:1];
      }
      else
      {
        id v39 = @"kNoCurrentHomeKey";
        uint64_t v40 = MEMORY[0x1E4F1CC38];
        uint64_t v22 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v40 forKeys:&v39 count:1];
      }
      id v23 = [MEMORY[0x1E4F65480] entitledMessageWithName:@"kCurrentHomeChangedNotificationKey" messagePayload:v22];
      id v24 = [(HMDHomeManager *)self messageDispatcher];
      uint64_t v25 = [(HMDHomeManager *)self uuid];
      [v24 sendMessage:v23 target:v25];

      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      uint64_t v26 = [(HMDHomeManager *)self watchManager];
      id v27 = [v26 watches];

      uint64_t v28 = [v27 countByEnumeratingWithState:&v34 objects:v38 count:16];
      if (v28)
      {
        uint64_t v29 = v28;
        uint64_t v30 = *(void *)v35;
        do
        {
          for (uint64_t i = 0; i != v29; ++i)
          {
            if (*(void *)v35 != v30) {
              objc_enumerationMutation(v27);
            }
            [(HMDHomeManager *)self _sendCurrentHomeToWatch:*(void *)(*((void *)&v34 + 1) + 8 * i)];
          }
          uint64_t v29 = [v27 countByEnumeratingWithState:&v34 objects:v38 count:16];
        }
        while (v29);
      }

      [(HMDHomeManager *)self writeAssistantCurrentHome:v12];
      long long v32 = objc_opt_new();
      [v32 setObject:v6 forKeyedSubscript:@"HMDCurrentHomeUUIDKey"];
      [v32 setObject:v7 forKeyedSubscript:@"HMDPreviousHomeUUIDKey"];
      long long v33 = [MEMORY[0x1E4F28EB8] defaultCenter];
      [v33 postNotificationName:@"HMDNotificationCurrentHomeDidChange" object:self userInfo:v32];

      goto LABEL_32;
    }
    id v13 = (void *)MEMORY[0x1D9452090]();
    id v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = HMFGetLogIdentifier();
      long long v16 = [v6 UUIDString];
      *(_DWORD *)long long buf = 138543618;
      uint64_t v44 = v15;
      __int16 v45 = 2112;
      id v46 = v16;
      long long v17 = "%{public}@Rejecting locally updated current home (%@) on watch since companion is in range";
      goto LABEL_17;
    }
LABEL_18:

LABEL_32:

    goto LABEL_33;
  }
  id v8 = (void *)MEMORY[0x1D9452090]();
  uint64_t v9 = self;
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    id v11 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    uint64_t v44 = v11;
    __int16 v45 = 2112;
    id v46 = v6;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Current home is already %@, not notifying", buf, 0x16u);
  }
LABEL_33:
}

- (void)_updateCurrentHomeIfNecessary
{
  id v3 = [(HMDHomeManager *)self _computedCurrentHomeUUID];
  [(HMDHomeManager *)self _notifyCurrentHomeUpdated:v3 isLocalUpdate:1];
}

- (id)_computedCurrentHomeUUID
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = [(HMDHomeManager *)self currentHomeUUID];
  BOOL v4 = [(HMDHomeManager *)self _homeWithUUID:v3];

  if ([v4 homeLocation] != 1)
  {
LABEL_10:
    uint64_t v15 = [(HMDHomeManager *)self __computedCurrentHomeUUID];
    goto LABEL_11;
  }
  uint64_t v5 = [(HMDHomeManager *)self _appleMediaAccessoryOfCurrentDevice];
  id v6 = [v5 home];
  char v7 = v6;
  if (v6)
  {
    id v8 = [v6 uuid];
    uint64_t v9 = [v4 uuid];
    int v10 = objc_msgSend(v8, "hmf_isEqualToUUID:", v9);

    if (!v10)
    {
      long long v16 = (void *)MEMORY[0x1D9452090]();
      long long v17 = self;
      long long v18 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        long long v19 = HMFGetLogIdentifier();
        int v21 = 138543362;
        uint64_t v22 = v19;
        _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@Current home does not match current accessory home, recalculating...", (uint8_t *)&v21, 0xCu);
      }

      goto LABEL_10;
    }
  }
  id v11 = (void *)MEMORY[0x1D9452090]();
  id v12 = self;
  id v13 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    id v14 = HMFGetLogIdentifier();
    int v21 = 138543362;
    uint64_t v22 = v14;
    _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Last current home still has AtHome status, stay as current home", (uint8_t *)&v21, 0xCu);
  }
  uint64_t v15 = [v4 uuid];

LABEL_11:
  return v15;
}

- (id)__computedCurrentHomeUUID
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  id v3 = [(HMDHomeManager *)self overrideCurrentHomeUUIDToNil];
  BOOL v4 = v3;
  if (v3)
  {
    if ([v3 BOOLValue])
    {
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = [(HMDHomeManager *)self currentHomeUUIDOverride];
    }
  }
  else
  {
    id v6 = [(HMDHomeManager *)self _appleMediaAccessoryOfCurrentDevice];
    char v7 = [v6 home];
    if (v7)
    {
      id v8 = (void *)MEMORY[0x1D9452090]();
      uint64_t v9 = self;
      int v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        id v11 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        id v46 = v11;
        __int16 v47 = 2112;
        id v48 = v7;
        _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Returning current accessory home %@ as current home", buf, 0x16u);
      }
      uint64_t v5 = [v7 uuid];
    }
    else
    {
      id v39 = v6;
      id v12 = objc_alloc(MEMORY[0x1E4F1CA48]);
      id v13 = [(HMDHomeManager *)self homes];
      id v14 = objc_msgSend(v12, "initWithCapacity:", objc_msgSend(v13, "count"));

      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      uint64_t v15 = [(HMDHomeManager *)self homes];
      uint64_t v16 = [v15 countByEnumeratingWithState:&v40 objects:v44 count:16];
      if (v16)
      {
        uint64_t v17 = v16;
        uint64_t v18 = *(void *)v41;
        while (2)
        {
          for (uint64_t i = 0; i != v17; ++i)
          {
            if (*(void *)v41 != v18) {
              objc_enumerationMutation(v15);
            }
            long long v20 = *(void **)(*((void *)&v40 + 1) + 8 * i);
            if ([v20 homeLocation] == 3 || objc_msgSend(v20, "homeLocation") == 1)
            {
              int v21 = [v20 uuid];
              uint64_t v22 = [(HMDHomeManager *)self primaryHomeUUID];
              int v23 = [v21 isEqual:v22];

              if (v23)
              {
                uint64_t v30 = (void *)MEMORY[0x1D9452090]();
                long long v31 = self;
                long long v32 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
                {
                  long long v33 = HMFGetLogIdentifier();
                  *(_DWORD *)long long buf = 138543618;
                  id v46 = v33;
                  __int16 v47 = 2112;
                  id v48 = v20;
                  _os_log_impl(&dword_1D49D5000, v32, OS_LOG_TYPE_INFO, "%{public}@New nominated current home is primary home : %@", buf, 0x16u);
                }
                uint64_t v5 = [v20 uuid];

                goto LABEL_27;
              }
              [v14 addObject:v20];
            }
          }
          uint64_t v17 = [v15 countByEnumeratingWithState:&v40 objects:v44 count:16];
          if (v17) {
            continue;
          }
          break;
        }
      }

      if ([v14 count])
      {
        id v24 = (void *)MEMORY[0x1D9452090]([v14 sortUsingComparator:&__block_literal_global_1113]);
        uint64_t v25 = self;
        uint64_t v26 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          id v27 = HMFGetLogIdentifier();
          uint64_t v28 = [v14 firstObject];
          *(_DWORD *)long long buf = 138543618;
          id v46 = v27;
          __int16 v47 = 2112;
          id v48 = v28;
          _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_INFO, "%{public}@New nominated current home is %@", buf, 0x16u);
        }
        uint64_t v29 = [v14 firstObject];
        uint64_t v5 = [v29 uuid];
      }
      else
      {
        long long v35 = (void *)MEMORY[0x1D9452090]();
        long long v36 = self;
        long long v37 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          int v38 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543362;
          id v46 = v38;
          _os_log_impl(&dword_1D49D5000, v37, OS_LOG_TYPE_INFO, "%{public}@There is no current home", buf, 0xCu);
        }
        uint64_t v5 = 0;
      }
LABEL_27:
      id v6 = v39;
      BOOL v4 = 0;
      char v7 = 0;
    }
  }

  return v5;
}

uint64_t __43__HMDHomeManager___computedCurrentHomeUUID__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 uuid];
  id v6 = [v5 UUIDString];
  char v7 = [v4 uuid];

  id v8 = [v7 UUIDString];
  uint64_t v9 = [v6 compare:v8];

  return v9;
}

- (void)_handleConnectivityInfoRequest:(id)a3
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [v4 responseHandler];

  if (v5)
  {
    if ([v4 isEntitledForSPIAccess])
    {
      if ([v4 isRemote])
      {
        id v6 = (void *)MEMORY[0x1D9452090]();
        char v7 = self;
        id v8 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v9 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543618;
          uint64_t v69 = v9;
          __int16 v70 = 2112;
          id v71 = v4;
          int v10 = "%{public}@This message should only be passed over XPC: %@";
          id v11 = v8;
          os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
LABEL_12:
          _os_log_impl(&dword_1D49D5000, v11, v12, v10, buf, 0x16u);
        }
LABEL_13:

        uint64_t v17 = [v4 responseHandler];
        uint64_t v18 = [MEMORY[0x1E4F28C58] hmErrorWithCode:17];
        v17[2](v17, v18, 0);
LABEL_14:

        goto LABEL_15;
      }
      long long v19 = [v4 proxyConnection];
      __int16 v20 = [v19 entitlements];

      if ((v20 & 0x100) != 0)
      {
        uint64_t v17 = [v4 stringForKey:@"kIdentifierKey"];
        int v21 = (void *)MEMORY[0x1D9452090]();
        uint64_t v22 = self;
        int v23 = HMFGetOSLogHandle();
        BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_INFO);
        if (v17)
        {
          long long v52 = v4;
          if (v24)
          {
            uint64_t v25 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            uint64_t v69 = v25;
            __int16 v70 = 2112;
            id v71 = v17;
            _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_INFO, "%{public}@Received request to retrieve connectivity info for identifier : %@", buf, 0x16u);
          }
          long long v62 = 0u;
          long long v63 = 0u;
          long long v60 = 0u;
          long long v61 = 0u;
          long long v51 = v22;
          id obj = [(HMDHomeManager *)v22 homes];
          uint64_t v55 = [obj countByEnumeratingWithState:&v60 objects:v67 count:16];
          if (v55)
          {
            uint64_t v54 = *(void *)v61;
            while (2)
            {
              for (uint64_t i = 0; i != v55; ++i)
              {
                if (*(void *)v61 != v54) {
                  objc_enumerationMutation(obj);
                }
                id v27 = *(void **)(*((void *)&v60 + 1) + 8 * i);
                long long v56 = 0u;
                long long v57 = 0u;
                long long v58 = 0u;
                long long v59 = 0u;
                uint64_t v28 = [v27 accessories];
                uint64_t v29 = (void *)[v28 copy];

                uint64_t v30 = [v29 countByEnumeratingWithState:&v56 objects:v66 count:16];
                if (v30)
                {
                  uint64_t v31 = v30;
                  uint64_t v32 = *(void *)v57;
LABEL_29:
                  uint64_t v33 = 0;
                  while (1)
                  {
                    if (*(void *)v57 != v32) {
                      objc_enumerationMutation(v29);
                    }
                    id v34 = *(id *)(*((void *)&v56 + 1) + 8 * v33);
                    objc_opt_class();
                    id v35 = (objc_opt_isKindOfClass() & 1) != 0 ? v34 : 0;
                    id v36 = v35;

                    long long v37 = [v36 identifier];
                    int v38 = HMFAreStringsEqualIgnoringCase();

                    if (v38) {
                      break;
                    }

                    if (v31 == ++v33)
                    {
                      uint64_t v31 = [v29 countByEnumeratingWithState:&v56 objects:v66 count:16];
                      if (v31) {
                        goto LABEL_29;
                      }
                      goto LABEL_41;
                    }
                  }
                  id v39 = [v36 connectivityInfo];
                  uint64_t v40 = encodeRootObject();
                  if (!v40)
                  {

                    goto LABEL_41;
                  }
                  id v48 = (void *)v40;
                  id v4 = v52;
                  uint64_t v49 = [v52 responseHandler];
                  uint64_t v64 = *MEMORY[0x1E4F2C2D0];
                  id v65 = v48;
                  uint64_t v50 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v65 forKeys:&v64 count:1];
                  ((void (**)(void, void, void *))v49)[2](v49, 0, v50);

                  uint64_t v18 = (void (**)(void, void, void))obj;
                  goto LABEL_51;
                }
LABEL_41:
              }
              uint64_t v55 = [obj countByEnumeratingWithState:&v60 objects:v67 count:16];
              if (v55) {
                continue;
              }
              break;
            }
          }

          long long v41 = (void *)MEMORY[0x1D9452090]();
          long long v42 = v51;
          long long v43 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            uint64_t v44 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            uint64_t v69 = v44;
            __int16 v70 = 2112;
            id v71 = v17;
            _os_log_impl(&dword_1D49D5000, v43, OS_LOG_TYPE_INFO, "%{public}@Unable to get connectivity info accessory identifier: %@", buf, 0x16u);
          }
          id v4 = v52;
          uint64_t v18 = [v52 responseHandler];
          __int16 v45 = (void *)MEMORY[0x1E4F28C58];
          uint64_t v46 = 2;
        }
        else
        {
          if (v24)
          {
            __int16 v47 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            uint64_t v69 = v47;
            __int16 v70 = 2112;
            id v71 = v4;
            _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_INFO, "%{public}@Unable to retrieve identifier from message: %@", buf, 0x16u);
          }
          uint64_t v18 = [v4 responseHandler];
          __int16 v45 = (void *)MEMORY[0x1E4F28C58];
          uint64_t v46 = 3;
        }
        uint64_t v29 = [v45 hmErrorWithCode:v46];
        ((void (**)(void, void *, void))v18)[2](v18, v29, 0);
LABEL_51:

        goto LABEL_14;
      }
      id v6 = (void *)MEMORY[0x1D9452090]();
      char v7 = self;
      id v8 = HMFGetOSLogHandle();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO)) {
        goto LABEL_13;
      }
      uint64_t v9 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v69 = v9;
      __int16 v70 = 2112;
      id v71 = v4;
      int v10 = "%{public}@Unable to retrieve connectivity info due to insufficient privileges for message: %@";
    }
    else
    {
      id v6 = (void *)MEMORY[0x1D9452090]();
      char v7 = self;
      id v8 = HMFGetOSLogHandle();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO)) {
        goto LABEL_13;
      }
      uint64_t v9 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v69 = v9;
      __int16 v70 = 2112;
      id v71 = v4;
      int v10 = "%{public}@Unable to retrieve connectivity info due to insufficient internal privileges for message: %@";
    }
    id v11 = v8;
    os_log_type_t v12 = OS_LOG_TYPE_INFO;
    goto LABEL_12;
  }
  id v13 = (void *)MEMORY[0x1D9452090]();
  id v14 = self;
  uint64_t v15 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    uint64_t v16 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    uint64_t v69 = v16;
    __int16 v70 = 2112;
    id v71 = v4;
    _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_ERROR, "%{public}@No response handler in _handleConnectivityInfoRequest: %@", buf, 0x16u);
  }
LABEL_15:
}

- (void)_handleFetchCurrentUserPairingIdentityForHomeContainingAccessoryRequest:(id)a3
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [v4 uuidForKey:@"kIdentifierKey"];
  if (v5)
  {
    id v6 = [(HMDHomeManager *)self homes];
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 3221225472;
    void v25[2] = __90__HMDHomeManager__handleFetchCurrentUserPairingIdentityForHomeContainingAccessoryRequest___block_invoke;
    v25[3] = &unk_1E6A162B8;
    id v7 = v5;
    id v26 = v7;
    id v8 = objc_msgSend(v6, "na_firstObjectPassingTest:", v25);

    if (v8)
    {
      uint64_t v9 = [v8 currentUser];
      int v10 = (void *)MEMORY[0x1D9452090]();
      id v11 = self;
      os_log_type_t v12 = HMFGetOSLogHandle();
      BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
      if (v9)
      {
        if (v13)
        {
          id v14 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138544130;
          uint64_t v28 = v14;
          __int16 v29 = 2112;
          id v30 = v9;
          __int16 v31 = 2112;
          uint64_t v32 = v8;
          __int16 v33 = 2112;
          id v34 = v7;
          _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Received request to retrieve pairing identity for current user (%@) in home (%@) with accessory identifier : %@", buf, 0x2Au);
        }
        [v9 fetchPairingIdentityForClientWithMessage:v4];
      }
      else
      {
        if (v13)
        {
          BOOL v24 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543618;
          uint64_t v28 = v24;
          __int16 v29 = 2112;
          id v30 = v8;
          _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@No current user in home: %@", buf, 0x16u);
        }
        uint64_t v9 = 0;
      }
    }
    else
    {
      __int16 v20 = (void *)MEMORY[0x1D9452090]();
      int v21 = self;
      uint64_t v22 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        int v23 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v28 = v23;
        __int16 v29 = 2112;
        id v30 = v7;
        _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_INFO, "%{public}@Unable to find accessory (%@) in any home", buf, 0x16u);
      }
      uint64_t v9 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
      [v4 respondWithError:v9];
    }

    long long v19 = v26;
  }
  else
  {
    uint64_t v15 = (void *)MEMORY[0x1D9452090]();
    uint64_t v16 = self;
    uint64_t v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v28 = v18;
      __int16 v29 = 2112;
      id v30 = v4;
      _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Unable to retrieve accessory unique identifier from message: %@", buf, 0x16u);
    }
    long long v19 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    [v4 respondWithError:v19];
  }
}

BOOL __90__HMDHomeManager__handleFetchCurrentUserPairingIdentityForHomeContainingAccessoryRequest___block_invoke(uint64_t a1, void *a2)
{
  id v2 = [a2 accessoryWithSPIClientIdentifier:*(void *)(a1 + 32)];
  BOOL v3 = v2 != 0;

  return v3;
}

- (void)_handlePairingIdentityRequest:(id)a3
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [v4 proxyConnection];
  uint64_t v6 = [v5 entitlements];

  id v7 = [v4 stringForKey:@"kIdentifierKey"];
  if (v7)
  {
    unint64_t v48 = v6;
    id v50 = v4;
    id v8 = (void *)MEMORY[0x1D9452090]();
    uint64_t v9 = self;
    int v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v11 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v67 = v11;
      __int16 v68 = 2112;
      id v69 = v7;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Received request to retrieve pairing identity for identifier : %@", buf, 0x16u);
    }
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    uint64_t v49 = v9;
    os_log_type_t v12 = [(HMDHomeManager *)v9 homes];
    uint64_t v47 = [v12 countByEnumeratingWithState:&v59 objects:v65 count:16];
    if (v47)
    {
      uint64_t v13 = *(void *)v60;
      uint64_t v46 = *(void *)v60;
      do
      {
        for (uint64_t i = 0; i != v47; ++i)
        {
          if (*(void *)v60 != v13) {
            objc_enumerationMutation(v12);
          }
          uint64_t v15 = *(void **)(*((void *)&v59 + 1) + 8 * i);
          long long v55 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v58 = 0u;
          uint64_t v16 = [v15 accessories];
          uint64_t v17 = (void *)[v16 copy];

          uint64_t v18 = [v17 countByEnumeratingWithState:&v55 objects:v64 count:16];
          if (v18)
          {
            uint64_t v19 = v18;
            uint64_t v20 = *(void *)v56;
            while (2)
            {
              for (uint64_t j = 0; j != v19; ++j)
              {
                if (*(void *)v56 != v20) {
                  objc_enumerationMutation(v17);
                }
                uint64_t v22 = __pairingIdentityForAccessory(*(void **)(*((void *)&v55 + 1) + 8 * j));
                int v23 = [v22 identifier];
                int v24 = HMFAreStringsEqualIgnoringCase();

                if (v24)
                {
                  id v4 = v50;
                  [(HMDHomeManager *)v49 sendPairingIdentity:v22 includePrivateKey:(v48 >> 4) & 1 requestMessage:v50];

                  goto LABEL_38;
                }
              }
              uint64_t v19 = [v17 countByEnumeratingWithState:&v55 objects:v64 count:16];
              if (v19) {
                continue;
              }
              break;
            }
          }

          uint64_t v13 = v46;
        }
        uint64_t v47 = [v12 countByEnumeratingWithState:&v59 objects:v65 count:16];
      }
      while (v47);
    }

    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    uint64_t v25 = +[HMDUserManagementOperationManager sharedManager];
    os_log_type_t v12 = [v25 operations];

    uint64_t v26 = [v12 countByEnumeratingWithState:&v51 objects:v63 count:16];
    if (v26)
    {
      uint64_t v27 = v26;
      uint64_t v28 = *(void *)v52;
      while (2)
      {
        for (uint64_t k = 0; k != v27; ++k)
        {
          if (*(void *)v52 != v28) {
            objc_enumerationMutation(v12);
          }
          id v30 = [*(id *)(*((void *)&v51 + 1) + 8 * k) accessory];
          __int16 v31 = __pairingIdentityForAccessory(v30);
          uint64_t v32 = [v31 identifier];
          int v33 = HMFAreStringsEqualIgnoringCase();

          if (v33)
          {
            long long v42 = (void *)MEMORY[0x1D9452090]();
            long long v43 = v49;
            uint64_t v44 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
            {
              __int16 v45 = HMFGetLogIdentifier();
              *(_DWORD *)long long buf = 138543618;
              id v67 = v45;
              __int16 v68 = 2112;
              id v69 = v7;
              _os_log_impl(&dword_1D49D5000, v44, OS_LOG_TYPE_INFO, "%{public}@Found accessory with pairing identifier %@ in user management operations", buf, 0x16u);
            }
            id v4 = v50;
            [(HMDHomeManager *)v43 sendPairingIdentity:v31 includePrivateKey:(v48 >> 4) & 1 requestMessage:v50];

            goto LABEL_38;
          }
        }
        uint64_t v27 = [v12 countByEnumeratingWithState:&v51 objects:v63 count:16];
        if (v27) {
          continue;
        }
        break;
      }
    }

    id v34 = (void *)MEMORY[0x1D9452090]();
    uint64_t v35 = v49;
    id v36 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      long long v37 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v67 = v37;
      __int16 v68 = 2112;
      id v69 = v7;
      _os_log_impl(&dword_1D49D5000, v36, OS_LOG_TYPE_INFO, "%{public}@Unable to retrieve pairing identity for accessory: %@", buf, 0x16u);
    }
    os_log_type_t v12 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    id v4 = v50;
  }
  else
  {
    int v38 = (void *)MEMORY[0x1D9452090]();
    id v39 = self;
    uint64_t v40 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
    {
      long long v41 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v67 = v41;
      __int16 v68 = 2112;
      id v69 = v4;
      _os_log_impl(&dword_1D49D5000, v40, OS_LOG_TYPE_INFO, "%{public}@Unable to retrieve identifier from message: %@", buf, 0x16u);
    }
    os_log_type_t v12 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
  }
  [v4 respondWithError:v12];
LABEL_38:
}

- (void)sendPairingIdentity:(id)a3 includePrivateKey:(BOOL)a4 requestMessage:(id)a5
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a5;
  if (a4)
  {
    id v10 = v8;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v11 = v10;
    }
    else {
      id v11 = 0;
    }
    id v12 = v11;

    if (v12)
    {
      id v13 = objc_alloc(MEMORY[0x1E4F65508]);
      id v14 = [v12 identifier];
      uint64_t v15 = [v12 publicKey];
      uint64_t v16 = [v12 privateKey];
      id v17 = (id)[v13 initWithIdentifier:v14 publicKey:v15 privateKey:v16];
    }
    else
    {
      id v17 = v10;
    }
  }
  else
  {
    id v17 = [v8 publicPairingIdentity];
  }
  uint64_t v18 = (void *)MEMORY[0x1D9452090]();
  uint64_t v19 = self;
  uint64_t v20 = HMFGetOSLogHandle();
  BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_INFO);
  if (v17)
  {
    if (v21)
    {
      uint64_t v22 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v34 = v22;
      __int16 v35 = 2112;
      id v36 = v8;
      _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@Sending the pairing identity %@ to client", buf, 0x16u);
    }
    uint64_t v23 = encodeRootObject();
    int v24 = (void *)v23;
    if (v23)
    {
      uint64_t v31 = *MEMORY[0x1E4F2C4B8];
      uint64_t v32 = v23;
      uint64_t v25 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v32 forKeys:&v31 count:1];
      [v9 respondWithPayload:v25];
    }
    else
    {
      uint64_t v27 = (void *)MEMORY[0x1D9452090]();
      uint64_t v28 = v19;
      __int16 v29 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        id v30 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        id v34 = v30;
        __int16 v35 = 2112;
        id v36 = v8;
        _os_log_impl(&dword_1D49D5000, v29, OS_LOG_TYPE_ERROR, "%{public}@Unable to encode the pairing identity : %@", buf, 0x16u);
      }
      uint64_t v25 = [MEMORY[0x1E4F28C58] hmErrorWithCode:52];
      [v9 respondWithError:v25];
    }
  }
  else
  {
    if (v21)
    {
      uint64_t v26 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v34 = v26;
      _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@Unable to retrieve pairing identity", buf, 0xCu);
    }
    int v24 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
    [v9 respondWithError:v24];
  }
}

void __56__HMDHomeManager___handleRequestFetchHomeConfiguration___block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = HMFGetLogIdentifier();
    int v6 = [*(id *)(a1 + 40) BOOLValue];
    int v7 = 138543618;
    id v8 = v5;
    __int16 v9 = 1024;
    int v10 = v6;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@hh2ManualMigrationAvailableOverride detected. Setting to %d", (uint8_t *)&v7, 0x12u);
  }
}

- (id)_appleMediaAccessoryOfCurrentDevice
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = [(HMDHomeManager *)self _accessoryOfCurrentDevice];
  id v4 = v3;
  if (v3)
  {
    id v5 = v3;
    objc_opt_class();
    int v6 = objc_opt_isKindOfClass() & 1;
    if (v6) {
      int v7 = v5;
    }
    else {
      int v7 = 0;
    }
    id v8 = v7;

    if (v6)
    {
      id v9 = v5;
    }
    else
    {
      int v10 = (void *)MEMORY[0x1D9452090]();
      uint64_t v11 = self;
      id v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        id v13 = HMFGetLogIdentifier();
        int v15 = 138543618;
        uint64_t v16 = v13;
        __int16 v17 = 2112;
        id v18 = v5;
        _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to get apple media accessory for current accessory: %@", (uint8_t *)&v15, 0x16u);
      }
      id v9 = 0;
    }
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

- (id)_accessoryOfCurrentDevice
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v2 = [(HMDHomeManager *)self homes];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v20 objects:v25 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v21 != v5) {
          objc_enumerationMutation(v2);
        }
        int v7 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        long long v16 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        id v8 = objc_msgSend(v7, "accessories", 0);
        uint64_t v9 = [v8 countByEnumeratingWithState:&v16 objects:v24 count:16];
        if (v9)
        {
          uint64_t v10 = v9;
          uint64_t v11 = *(void *)v17;
          while (2)
          {
            for (uint64_t j = 0; j != v10; ++j)
            {
              if (*(void *)v17 != v11) {
                objc_enumerationMutation(v8);
              }
              id v13 = *(void **)(*((void *)&v16 + 1) + 8 * j);
              if ([v13 isCurrentAccessory])
              {
                id v14 = v13;

                goto LABEL_19;
              }
            }
            uint64_t v10 = [v8 countByEnumeratingWithState:&v16 objects:v24 count:16];
            if (v10) {
              continue;
            }
            break;
          }
        }
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v20 objects:v25 count:16];
      id v14 = 0;
    }
    while (v4);
  }
  else
  {
    id v14 = 0;
  }
LABEL_19:

  return v14;
}

uint64_t __44__HMDHomeManager_filterHomes_isSPIEntitled___block_invoke_1096(uint64_t a1, void *a2)
{
  return [a2 isAccessToHomeAllowed];
}

- (id)homesToSendForNonSPIClients
{
  uint64_t v3 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v4 = [(HMDHomeManager *)self homes];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __45__HMDHomeManager_homesToSendForNonSPIClients__block_invoke;
  v8[3] = &unk_1E6A16290;
  id v9 = v3;
  id v5 = v3;
  objc_msgSend(v4, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v8);

  int v6 = (void *)[v5 copy];
  return v6;
}

void __45__HMDHomeManager_homesToSendForNonSPIClients__block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isAccessToHomeAllowed]) {
    [*(id *)(a1 + 32) addObject:v3];
  }
}

- (void)_retryCloudOperationWithName:(id)a3 completionHandler:(id)a4
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  unint64_t v8 = [(HMDHomeManager *)self cloudOperationRetryCount];
  unint64_t v9 = maxCloudOperationRetries;
  if ((unint64_t)maxCloudOperationRetries >= 7) {
    unint64_t v9 = 7;
  }
  if (v8 >= v9)
  {
    id v14 = [(HMDHomeManager *)self cloudOperationRetryTimer];

    if (v14)
    {
      int v15 = (void *)MEMORY[0x1D9452090]();
      long long v16 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        long long v17 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        __int16 v29 = v17;
        _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, "%{public}@We have an outstanding max retry reset timer, ignoring this reachability change", buf, 0xCu);
      }
    }
    else
    {
      long long v18 = +[HMDDeviceCapabilities deviceCapabilities];
      char v19 = [v18 supportsKeychainSync];

      long long v20 = (void *)MEMORY[0x1D9452090]();
      long long v21 = HMFGetOSLogHandle();
      BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_INFO);
      if (v19)
      {
        if (v22)
        {
          long long v23 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543618;
          __int16 v29 = v23;
          __int16 v30 = 2112;
          id v31 = v6;
          _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@Exceeded the total number of attempts for cloud operation: %@, kicking counter reset-timer", buf, 0x16u);
        }
        [(HMDHomeManager *)self _startTimerToResetCloudOperationRetryCounter];
      }
      else
      {
        if (v22)
        {
          int v24 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543618;
          __int16 v29 = v24;
          __int16 v30 = 2112;
          id v31 = v6;
          _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@Exceeded the total number of attempts for cloud operation: %@", buf, 0x16u);
        }
        [(HMDHomeManager *)self setBackOffOperationInProgress:0];
        [(HMDHomeManager *)self _resetCloudOperationRetryCounters];
      }
    }
  }
  else if (![(HMDHomeManager *)self backOffOperationInProgress])
  {
    uint64_t v10 = _retryCloudOperationWithName_completionHandler__retryIntervalInSeconds[[(HMDHomeManager *)self cloudOperationRetryCount]];
    uint64_t v11 = (void *)MEMORY[0x1D9452090]();
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543874;
      __int16 v29 = v13;
      __int16 v30 = 2112;
      id v31 = v6;
      __int16 v32 = 2048;
      uint64_t v33 = v10;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Going to re-try cloud operation: %@ in %ld secs", buf, 0x20u);
    }
    [(HMDHomeManager *)self setBackOffOperationInProgress:1];
    objc_initWeak((id *)buf, self);
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 3221225472;
    void v25[2] = __65__HMDHomeManager__retryCloudOperationWithName_completionHandler___block_invoke;
    v25[3] = &unk_1E6A15DB8;
    objc_copyWeak(&v27, (id *)buf);
    id v26 = v7;
    [(HMDHomeManager *)self _startCloudOperationRetryWithTimeout:v10 completionHandler:v25];

    objc_destroyWeak(&v27);
    objc_destroyWeak((id *)buf);
  }
}

void __65__HMDHomeManager__retryCloudOperationWithName_completionHandler___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained) {
    [WeakRetained _stopCloudOperationRetryTimer];
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

- (void)_startTimerToResetCloudOperationRetryCounter
{
  objc_initWeak(&location, self);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  void v3[2] = __62__HMDHomeManager__startTimerToResetCloudOperationRetryCounter__block_invoke;
  v3[3] = &unk_1E6A16E40;
  objc_copyWeak(&v4, &location);
  [(HMDHomeManager *)self _startCloudOperationRetryWithTimeout:7200 completionHandler:v3];
  objc_destroyWeak(&v4);
  objc_destroyWeak(&location);
}

void __62__HMDHomeManager__startTimerToResetCloudOperationRetryCounter__block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained setBackOffOperationInProgress:0];
    id v3 = (void *)MEMORY[0x1D9452090]([v2 _resetCloudOperationRetryCounters]);
    id v4 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      id v5 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v11 = v5;
      _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@Resetting cloud operation re-try counter", buf, 0xCu);
    }
    id v6 = [v2 cloudReachabilityMonitor];
    int v7 = [v6 isReachable];

    if (v7)
    {
      v8[0] = MEMORY[0x1E4F143A8];
      v8[1] = 3221225472;
      v8[2] = __62__HMDHomeManager__startTimerToResetCloudOperationRetryCounter__block_invoke_1095;
      v8[3] = &unk_1E6A19B30;
      id v9 = v2;
      [v9 _retryCloudOperationWithName:@"push data to cloud" completionHandler:v8];
    }
  }
}

uint64_t __62__HMDHomeManager__startTimerToResetCloudOperationRetryCounter__block_invoke_1095(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    id v4 = HMFGetLogIdentifier();
    int v6 = 138543362;
    int v7 = v4;
    _os_log_impl(&dword_1D49D5000, v3, OS_LOG_TYPE_INFO, "%{public}@Network connection is available schedule push if there are pending transactions", (uint8_t *)&v6, 0xCu);
  }
  return [*(id *)(a1 + 32) _determineLocalChangesAndSchedulePush];
}

- (void)_notifyMetricsManagerOfConfigurationChange
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v14 = (id)[objc_alloc(MEMORY[0x1E4F653F0]) initWithName:@"Generate Home Configuration Log Event"];
  id v3 = (void *)MEMORY[0x1D9452090]();
  id v4 = self;
  HMFGetOSLogHandle();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    int v7 = [v14 identifier];
    uint64_t v8 = [v7 shortDescription];
    *(_DWORD *)long long buf = 138543618;
    id v16 = v6;
    __int16 v17 = 2114;
    long long v18 = v8;
    _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Home Configuration got updated. Scheduling of new log event generation.", buf, 0x16u);
  }
  objc_initWeak((id *)buf, v4);
  id v9 = [MEMORY[0x1E4F65550] defaultScheduler];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __60__HMDHomeManager__notifyMetricsManagerOfConfigurationChange__block_invoke;
  v11[3] = &unk_1E6A16CE0;
  objc_copyWeak(&v13, (id *)buf);
  id v12 = v14;
  id v10 = (id)[v9 performWithQualityOfService:9 block:v11];

  objc_destroyWeak(&v13);
  objc_destroyWeak((id *)buf);
  __HMFActivityScopeLeave();
}

void __60__HMDHomeManager__notifyMetricsManagerOfConfigurationChange__block_invoke(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = (void *)MEMORY[0x1D9452090]();
  id v4 = WeakRetained;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    int v7 = [*(id *)(a1 + 32) identifier];
    uint64_t v8 = [v7 shortDescription];
    int v16 = 138543618;
    __int16 v17 = v6;
    __int16 v18 = 2114;
    uint64_t v19 = v8;
    _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Starting generation of home configuration log event for analytics", (uint8_t *)&v16, 0x16u);
  }
  id v9 = [v4 metricsManager];
  [v9 homeKitConfigurationChanged];

  id v10 = (void *)MEMORY[0x1D9452090]();
  id v11 = v4;
  id v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v13 = HMFGetLogIdentifier();
    id v14 = [*(id *)(a1 + 32) identifier];
    int v15 = [v14 shortDescription];
    int v16 = 138543618;
    __int16 v17 = v13;
    __int16 v18 = 2114;
    uint64_t v19 = v15;
    _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Finished generation of home configuration log event for analytics", (uint8_t *)&v16, 0x16u);
  }
}

- (void)_registerForMessages
{
  uint64_t v352 = *MEMORY[0x1E4F143B8];
  id v3 = (void *)MEMORY[0x1D9452090](self, a2);
  id v4 = self;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    id v6 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    long long v351 = v6;
    _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_DEBUG, "%{public}@Registering for contact store change notifications", buf, 0xCu);
  }
  int v7 = [(HMDHomeManager *)v4 notificationCenter];
  [v7 addObserver:v4 selector:sel_handleContactStoreChanged_ name:*MEMORY[0x1E4F1AF80] object:0];

  uint64_t v8 = (void *)MEMORY[0x1D9452090]();
  id v9 = v4;
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    id v11 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    long long v351 = v11;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_DEBUG, "%{public}@Registering remote account message filter", buf, 0xCu);
  }
  id v12 = [HMDRemoteAccountMessageFilter alloc];
  id v13 = [(HMDHomeManager *)v9 messageDestination];
  v349[0] = @"kAccessHomeInviteRequestKey";
  v349[1] = @"kHomeDataSyncRequestKey";
  v349[2] = @"kHomeDataFragmentedSyncRequestKey";
  v349[3] = @"kUpdateHomeInvitationStateInternalRequestKey";
  v349[4] = @"kUserRemovedRequestKey";
  v349[5] = @"kUserResetHomeConfigRequestKey";
  v349[6] = @"kElectDeviceForIDSSessionKey";
  id v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:v349 count:7];
  uint64_t v15 = [(HMDRemoteAccountMessageFilter *)v12 initWithTarget:v13 allowedMessages:v14];

  int v16 = [(HMDHomeManager *)v9 msgFilterChain];
  v281 = (void *)v15;
  [v16 addMessageFilter:v15];

  __int16 v17 = +[HMDRemoteMessagePolicy defaultPolicy];
  [v17 setRequiresSecureMessage:0];
  [v17 setRequiresAccountMessage:0];
  [v17 setTransportRestriction:-1];
  v280 = v17;
  v282 = (void *)[v17 copy];
  __int16 v18 = [(HMDHomeManager *)v9 messageDispatcher];
  uint64_t v19 = *MEMORY[0x1E4F2D418];
  uint64_t v20 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v348[0] = v20;
  long long v21 = +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:0];
  v348[1] = v21;
  uint64_t v277 = *MEMORY[0x1E4F2D7D0];
  uint64_t v22 = *MEMORY[0x1E4F2D7D0];
  uint64_t v278 = *MEMORY[0x1E4F2D1C8];
  v347[0] = *MEMORY[0x1E4F2D1C8];
  v347[1] = v22;
  long long v23 = [MEMORY[0x1E4F1C978] arrayWithObjects:v347 count:2];
  int v24 = +[HMDXPCiCloudSwitchMessagePolicy policyWithBundleIdentifiers:v23];
  v348[2] = v24;
  uint64_t v25 = [MEMORY[0x1E4F1C978] arrayWithObjects:v348 count:3];
  [v18 registerForMessage:v19 receiver:v9 policies:v25 selector:sel__handleRequestFetchHomeConfiguration_];

  id v26 = [(HMDHomeManager *)v9 messageDispatcher];
  id v27 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:4];
  v346[0] = v27;
  uint64_t v28 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v346[1] = v28;
  __int16 v29 = [MEMORY[0x1E4F1C978] arrayWithObjects:v346 count:2];
  [v26 registerForMessage:@"kRemoveHomeRequestKey" receiver:v9 policies:v29 selector:sel__handleRequestRemoveHome_];

  __int16 v30 = [(HMDHomeManager *)v9 messageDispatcher];
  id v31 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
  v345[0] = v31;
  __int16 v32 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v345[1] = v32;
  uint64_t v33 = [MEMORY[0x1E4F1C978] arrayWithObjects:v345 count:2];
  [v30 registerForMessage:@"kAddHomeRequestKey" receiver:v9 policies:v33 selector:sel__handleRequestAddHome_];

  uint64_t v34 = [(HMDHomeManager *)v9 messageDispatcher];
  __int16 v35 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v344[0] = v35;
  id v36 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v344[1] = v36;
  uint64_t v37 = [MEMORY[0x1E4F1C978] arrayWithObjects:v344 count:2];
  [v34 registerForMessage:@"kSetPrimaryHomeRequestKey" receiver:v9 policies:v37 selector:sel__handleRequestSetPrimaryHome_];

  int v38 = [(HMDHomeManager *)v9 messageDispatcher];
  id v39 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  long long v343 = v39;
  uint64_t v40 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v343 count:1];
  [v38 registerForMessage:@"kQueryHomeKitUsageStateRequestKey" receiver:v9 policies:v40 selector:sel__handleRequestIsUserUsingHomeKit_];

  long long v41 = +[HMDRemoteMessagePolicy defaultPolicy];
  [v41 setRequiresSecureMessage:0];
  [v41 setAllowsAnonymousMessage:1];
  uint64_t v279 = v41;
  long long v42 = (void *)[v41 copy];
  long long v43 = [(HMDHomeManager *)v9 messageDispatcher];
  long long v342 = v42;
  uint64_t v44 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v342 count:1];
  [v43 registerForMessage:@"kElectDeviceForIDSSessionKey" receiver:v9 policies:v44 selector:sel__handleElectDeviceForIDSSession_];

  __int16 v45 = +[HMDDeviceCapabilities deviceCapabilities];
  LODWORD(v44) = [v45 supportsHomeInvitation];

  if (v44)
  {
    uint64_t v46 = [(HMDHomeManager *)v9 messageDispatcher];
    long long v341 = v282;
    uint64_t v47 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v341 count:1];
    [v46 registerForMessage:@"kAccessHomeInviteRequestKey" receiver:v9 policies:v47 selector:sel__handleAccessHomeInvite_];
  }
  if (isAppleTV())
  {
    unint64_t v48 = +[HMDRemoteMessagePolicy defaultPolicy];
    [v48 setRequiresSecureMessage:0];
    [v48 setRequiresAccountMessage:1];
    [v48 setTransportRestriction:-1];
    uint64_t v49 = (void *)[v48 copy];
    id v50 = [(HMDHomeManager *)v9 messageDispatcher];
    long long v340 = v49;
    long long v51 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v340 count:1];
    [v50 registerForMessage:@"kAddRemoteAccessRequestKey" receiver:v9 policies:v51 selector:sel__handleAddRemoteAccessRequest_];

    long long v52 = [(HMDHomeManager *)v9 messageDispatcher];
    long long v339 = v49;
    long long v53 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v339 count:1];
    [v52 registerForMessage:@"kDoYouSeeUnpairedAccessoriesKey" receiver:v9 policies:v53 selector:sel__handleDoYouSeeUnpairedAccessories_];

    long long v54 = +[HMDRemoteMessagePolicy defaultPolicy];
    [v54 setAllowsAnonymousMessage:1];
    long long v55 = (void *)[v54 copy];
    long long v56 = [(HMDHomeManager *)v9 messageDispatcher];
    long long v338 = v55;
    long long v57 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v338 count:1];
    [v56 registerForMessage:@"kAreYouAtHomeRequestKey" receiver:v9 policies:v57 selector:sel__handleAreYouAtHome_];
  }
  long long v58 = +[HMDDeviceCapabilities deviceCapabilities];
  int v59 = [v58 isResidentCapable];

  if (v59)
  {
    long long v60 = [(HMDHomeManager *)v9 messageDispatcher];
    long long v61 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:7];
    v337[0] = v61;
    long long v62 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v337[1] = v62;
    long long v63 = [MEMORY[0x1E4F1C978] arrayWithObjects:v337 count:2];
    [v60 registerForMessage:@"kUpdateResidentEnabledOnThisDeviceRequestKey" receiver:v9 policies:v63 selector:sel__handleEnableResidentForThisDeviceRequest_];
  }
  if (+[HMDDeviceCapabilities supportsDismissUserNotificationAndDialog])
  {
    uint64_t v64 = +[HMDRemoteMessagePolicy defaultPolicy];
    [v64 setRequiresSecureMessage:0];
    [v64 setRequiresAccountMessage:1];
    [v64 setTransportRestriction:-1];
    id v65 = (void *)[v64 copy];
    __int16 v66 = [(HMDHomeManager *)v9 messageDispatcher];
    long long v336 = v65;
    id v67 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v336 count:1];
    [v66 registerForMessage:@"kDismissBulletinInternalRequestKey" receiver:v9 policies:v67 selector:sel__handleDismissBulletinRequest_];

    __int16 v68 = [(HMDHomeManager *)v9 messageDispatcher];
    long long v335 = v65;
    id v69 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v335 count:1];
    [v68 registerForMessage:@"kDismissDialogInternalRequestKey" receiver:v9 policies:v69 selector:sel__handleDismissDialogRequest_];
  }
  if (isiOSDevice() || isWatch())
  {
    uint64_t v70 = [(HMDHomeManager *)v9 messageDispatcher];
    id v71 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    long long v334 = v71;
    uint64_t v72 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v334 count:1];
    [v70 registerForMessage:@"kUpdateAccessAllowedWhenLockedRequestKey" receiver:v9 policies:v72 selector:sel__handleAccessAllowedWhenLockedRequest_];
  }
  uint64_t v73 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  [v73 setAllowsAnonymousMessage:1];
  id v74 = (void *)[v73 copy];
  __int16 v75 = [(HMDHomeManager *)v9 messageDispatcher];
  long long v333 = v74;
  uint64_t v76 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v333 count:1];
  [v75 registerForMessage:@"kHomeDataSyncRequestKey" receiver:v9 policies:v76 selector:sel__handleHomeDataSync_];

  BOOL v77 = [(HMDHomeManager *)v9 messageDispatcher];
  long long v332 = v74;
  BOOL v78 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v332 count:1];
  [v77 registerForMessage:@"kHomeDataFragmentedSyncRequestKey" receiver:v9 policies:v78 selector:sel_handleDataFragmentedSync_];

  __int16 v79 = [(HMDHomeManager *)v9 messageDispatcher];
  long long v331 = v74;
  id v80 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v331 count:1];
  [v79 registerForMessage:@"kUserRemovedRequestKey" receiver:v9 policies:v80 selector:sel__handleUserRemoved_];

  uint64_t v81 = [(HMDHomeManager *)v9 messageDispatcher];
  long long v330 = v74;
  id v82 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v330 count:1];
  [v81 registerForMessage:@"kUserResetHomeConfigRequestKey" receiver:v9 policies:v82 selector:sel__handleResetHome_];

  if (isWatch())
  {
    id v83 = +[HMDRemoteMessagePolicy defaultPolicy];
    [v83 setRequiresSecureMessage:1];
    [v83 setRoles:1];
    id v84 = (void *)[v83 copy];
    uint64_t v85 = [(HMDHomeManager *)v9 messageDispatcher];
    long long v329 = v84;
    uint64_t v86 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v329 count:1];
    [v85 registerForMessage:@"kCompanionKeysSyncInternalRequestKey" receiver:v9 policies:v86 selector:sel__handleCompanionKeysSync_];

    id v87 = [(HMDHomeManager *)v9 messageDispatcher];
    long long v328 = v84;
    id v88 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v328 count:1];
    [v87 registerForMessage:@"kHomeConfigInternalRequestKey" receiver:v9 policies:v88 selector:sel__handleHomesConfigSync_];

    id v89 = [(HMDHomeManager *)v9 messageDispatcher];
    long long v327 = v84;
    id v90 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v327 count:1];
    [v89 registerForMessage:@"kCurrentHomeChangedNotificationKey" receiver:v9 policies:v90 selector:sel__handleCurrentHomeChanged_];

    id v91 = [(HMDHomeManager *)v9 messageDispatcher];
    long long v326 = v84;
    id v92 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v326 count:1];
    [v91 registerForMessage:@"kMetadataDataSyncRequestKey" receiver:v9 policies:v92 selector:sel__handleMetadataSync_];

    __int16 v93 = [(HMDHomeManager *)v9 messageDispatcher];
    long long v325 = v84;
    __int16 v94 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v325 count:1];
    [v93 registerForMessage:@"HMDHomeManagerSyncWalletKeysPassSerialNumbersMessage" receiver:v9 policies:v94 selector:sel__handleHomeManagerSyncWalletKeysPassSerialNumbersMessage_];
  }
  if (isiOSDevice())
  {
    id v95 = +[HMDRemoteMessagePolicy defaultPolicy];
    [v95 setRequiresSecureMessage:1];
    [v95 setRoles:2];
    __int16 v96 = (void *)[v95 copy];
    __int16 v97 = [(HMDHomeManager *)v9 messageDispatcher];
    long long v324 = v96;
    uint64_t v98 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v324 count:1];
    [v97 registerForMessage:@"kRequestForCompanionKeysSyncInternalRequestKey" receiver:v9 policies:v98 selector:sel__handleRequestForCompanionKeysSync_];

    uint32_t v99 = [(HMDHomeManager *)v9 messageDispatcher];
    long long v323 = v96;
    id v100 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v323 count:1];
    [v99 registerForMessage:@"kRetrieveVendorIdentifierInternalKey" receiver:v9 policies:v100 selector:sel__handleRetrieveVendorIdentifier_];
  }
  id v101 = [[HMDHH2AutoMigrationEligibilityChecker alloc] initWithHomeManager:v9];
  [(HMDHomeManager *)v9 setHh2AutoMigrationEligibilityChecker:v101];

  [(HMDHomeManager *)v9 _registerForFrameworkSwitch];
  if (+[HMDAppleAccountSettings supportsCloudSettings])
  {
    id v102 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v103 = *MEMORY[0x1E4F2D520];
    uint64_t v104 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v321[0] = v278;
    v321[1] = v277;
    v322[0] = v104;
    id v105 = [MEMORY[0x1E4F1C978] arrayWithObjects:v321 count:2];
    uint64_t v106 = +[HMDXPCiCloudSwitchMessagePolicy policyWithBundleIdentifiers:v105];
    v322[1] = v106;
    uint64_t v107 = [MEMORY[0x1E4F1C978] arrayWithObjects:v322 count:2];
    [v102 registerForMessage:v103 receiver:v9 policies:v107 selector:sel__handleQueryiCloudSwitchState_];

    id v108 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v109 = *MEMORY[0x1E4F2D5B0];
    __int16 v110 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v319[1] = v277;
    v320[0] = v110;
    v319[0] = v278;
    int v111 = [MEMORY[0x1E4F1C978] arrayWithObjects:v319 count:2];
    __int16 v112 = +[HMDXPCiCloudSwitchMessagePolicy policyWithBundleIdentifiers:v111];
    v320[1] = v112;
    char v113 = [MEMORY[0x1E4F1C978] arrayWithObjects:v320 count:2];
    [v108 registerForMessage:v109 receiver:v9 policies:v113 selector:sel__handleUpdateiCloudSwitchState_];
  }
  int v114 = [(HMDHomeManager *)v9 messageDispatcher];
  uint64_t v115 = *MEMORY[0x1E4F2D500];
  uint64_t v116 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v318 = v116;
  uint64_t v117 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v318 count:1];
  [v114 registerForMessage:v115 receiver:v9 policies:v117 selector:sel__handleQueryHomeNamespace_];

  id v118 = [(HMDHomeManager *)v9 messageDispatcher];
  uint64_t v119 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  char v317 = v119;
  int v120 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v317 count:1];
  [v118 registerForMessage:@"kResetConfigRequestKey" receiver:v9 policies:v120 selector:sel__handleResetConfiguration_];

  uint64_t v121 = [MEMORY[0x1E4F65548] productInfo];
  uint64_t v122 = [v121 productVariant];

  if (v122 == 3)
  {
    double v123 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v316 = v123;
    uint64_t v124 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v316 count:1];

    int v125 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v126 = *MEMORY[0x1E4F2D508];
    uint64_t v127 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    uint64_t v315 = v127;
    uint64_t v128 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v315 count:1];
    [v125 registerForMessage:v126 receiver:v9 policies:v128 selector:sel__handleQueryMetadata_];

    id v129 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v130 = *MEMORY[0x1E4F2D560];
    id v131 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    char v314 = v131;
    uint64_t v132 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v314 count:1];
    [v129 registerForMessage:v130 receiver:v9 policies:v132 selector:sel__handleSetMetadata_];

    uint64_t v133 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v134 = *MEMORY[0x1E4F2D518];
    double v135 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    uint64_t v313 = v135;
    id v136 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v313 count:1];
    [v133 registerForMessage:v134 receiver:v9 policies:v136 selector:sel__handleQueryVersionInformation_];

    id v137 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v138 = *MEMORY[0x1E4F2D3C0];
    v139 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    uint64_t v312 = v139;
    v140 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v312 count:1];
    [v137 registerForMessage:v138 receiver:v9 policies:v140 selector:sel__handleDumpState_];

    uint64_t v141 = [(HMDHomeManager *)v9 messageDispatcher];
    [v141 registerForMessage:*MEMORY[0x1E4F2D400] receiver:v9 policies:v124 selector:sel__handleDiagnosticInfo_];

    uint64_t v142 = [(HMDHomeManager *)v9 messageDispatcher];
    [v142 registerForMessage:*MEMORY[0x1E4F2D4D8] receiver:v9 policies:v124 selector:sel__handleNetworkMismatchInfo_];
  }
  BOOL v143 = [(HMDHomeManager *)v9 messageDispatcher];
  uint64_t v144 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v311 = v144;
  char v145 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v311 count:1];
  [v143 registerForMessage:@"kUpdateInvitationStateRequestKey" receiver:v9 policies:v145 selector:sel__handleRequestToUpdateHomeInvitationFromLocalUser_];

  long long v146 = [(HMDHomeManager *)v9 messageDispatcher];
  uint64_t v310 = v282;
  long long v147 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v310 count:1];
  [v146 registerForMessage:@"kUpdateHomeInvitationStateInternalRequestKey" receiver:v9 policies:v147 selector:sel__handleRequestToUpdateHomeInvitationFromInviter_];

  long long v148 = [(HMDHomeManager *)v9 messageDispatcher];
  uint64_t v149 = *MEMORY[0x1E4F2D558];
  id v150 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:7];
  v309[0] = v150;
  long long v151 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v309[1] = v151;
  long long v152 = [MEMORY[0x1E4F1C978] arrayWithObjects:v309 count:2];
  [v148 registerForMessage:v149 receiver:v9 policies:v152 selector:sel__handleSetAppData_];

  uint64_t v153 = [(HMDHomeManager *)v9 messageDispatcher];
  long long v154 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  uint64_t v308 = v154;
  long long v155 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v308 count:1];
  [v153 registerForMessage:@"kSystemLogCaptureRequestKey" receiver:v9 policies:v155 selector:sel__handleSysdiagnoseRequest_];

  if (!isWatch())
  {
    long long v156 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v157 = *MEMORY[0x1E4F2D0F0];
    long long v158 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v307 = v158;
    id v159 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v307 count:1];
    [v156 registerForMessage:v157 receiver:v9 policies:v159 selector:sel__handleDeviceSetupSessionOpen_];

    id v160 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v161 = *MEMORY[0x1E4F2D0C8];
    long long v162 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    uint64_t v306 = v162;
    long long v163 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v306 count:1];
    [v160 registerForMessage:v161 receiver:v9 policies:v163 selector:sel__handleDeviceSetupSessionClose_];
  }
  [(HMDHomeManager *)v9 _registerForConfiguringStateMessages];
  if (isInternalBuild())
  {
    long long v164 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v165 = *MEMORY[0x1E4F2D530];
    long long v166 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v305 = v166;
    __int16 v167 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v305 count:1];
    [v164 registerForMessage:v165 receiver:v9 policies:v167 selector:sel__handleResolveAccount_];

    id v168 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v169 = *MEMORY[0x1E4F2D528];
    long long v170 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    uint64_t v304 = v170;
    __int16 v171 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v304 count:1];
    [v168 registerForMessage:v169 receiver:v9 policies:v171 selector:sel__handleRemoveAccount_];

    id v172 = [(HMDHomeManager *)v9 messageDispatcher];
    id v173 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    char v303 = v173;
    id v174 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v303 count:1];
    [v172 registerForMessage:@"kPingInternalRequestKey" receiver:v9 policies:v174 selector:sel__handlePing_];

    long long v175 = [(HMDHomeManager *)v9 messageDispatcher];
    long long v176 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    uint64_t v302 = v176;
    uint64_t v177 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v302 count:1];
    [v175 registerForMessage:@"kConfigTestingMode" receiver:v9 policies:v177 selector:sel__handleTestModeConfigRequest_];

    long long v178 = [(HMDHomeManager *)v9 messageDispatcher];
    long long v179 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    id v301 = v179;
    long long v180 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v301 count:1];
    [v178 registerForMessage:@"HomeUtilRemoteMessageRequestMessage" receiver:v9 policies:v180 selector:sel__handleHomeUtilRemoteMessageRequest_];

    long long v181 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v182 = *MEMORY[0x1E4F2D5A8];
    uint64_t v183 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    uint64_t v300 = v183;
    long long v184 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v300 count:1];
    [v181 registerForMessage:v182 receiver:v9 policies:v184 selector:sel__handleUpdateMobileAssetsRequest_];

    uint64_t v185 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v186 = *MEMORY[0x1E4F2D328];
    uint64_t v187 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    uint64_t v299 = v187;
    long long v188 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v299 count:1];
    [v185 registerForMessage:v186 receiver:v9 policies:v188 selector:sel__handleClearMobileAssetsInfoRequest_];
  }
  __int16 v189 = [(HMDHomeManager *)v9 messageDispatcher];
  uint64_t v190 = *MEMORY[0x1E4F2D540];
  long long v191 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  uint64_t v298 = v191;
  long long v192 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v298 count:1];
  [v189 registerForMessage:v190 receiver:v9 policies:v192 selector:sel__handleRequestRuntimeStateUpdate_];

  __int16 v193 = [(HMDHomeManager *)v9 messageDispatcher];
  uint64_t v194 = *MEMORY[0x1E4F2D4E8];
  __int16 v195 = +[HMDXPCMessagePolicy policyWithEntitlements:13];
  id v297 = v195;
  long long v196 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v297 count:1];
  [v193 registerForMessage:v194 receiver:v9 policies:v196 selector:sel__handlePairingIdentityRequest_];

  long long v197 = [(HMDHomeManager *)v9 messageDispatcher];
  uint64_t v198 = *MEMORY[0x1E4F2D408];
  __int16 v199 = +[HMDXPCMessagePolicy policyWithEntitlements:13];
  id v296 = v199;
  id v200 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v296 count:1];
  [v197 registerForMessage:v198 receiver:v9 policies:v200 selector:sel__handleFetchCurrentUserPairingIdentityForHomeContainingAccessoryRequest_];

  __int16 v201 = [(HMDHomeManager *)v9 messageDispatcher];
  uint64_t v202 = *MEMORY[0x1E4F2D410];
  __int16 v203 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v295 = v203;
  id v204 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v295 count:1];
  [v201 registerForMessage:v202 receiver:v9 policies:v204 selector:sel__handleFetchDevicesMessage_];

  if (isInternalBuild())
  {
    __int16 v205 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v206 = *MEMORY[0x1E4F2DAB0];
    __int16 v207 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v294 = v207;
    BOOL v208 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v294 count:1];
    [v205 registerForMessage:v206 receiver:v9 policies:v208 selector:sel__handleNetworkFirewallDumpCloudRecordsRequest_];

    __int16 v209 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v210 = *MEMORY[0x1E4F2DA98];
    uint64_t v211 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v293[0] = v211;
    __int16 v212 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:3];
    v293[1] = v212;
    id v213 = [MEMORY[0x1E4F1C978] arrayWithObjects:v293 count:2];
    [v209 registerForMessage:v210 receiver:v9 policies:v213 selector:sel__handleNetworkFirewallAddOverridesRequest_];

    __int16 v214 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v215 = *MEMORY[0x1E4F2DB68];
    uint64_t v216 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v292[0] = v216;
    long long v217 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:4];
    v292[1] = v217;
    long long v218 = [MEMORY[0x1E4F1C978] arrayWithObjects:v292 count:2];
    [v214 registerForMessage:v215 receiver:v9 policies:v218 selector:sel__handleNetworkFirewallRemoveOverridesRequest_];

    long long v219 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v220 = *MEMORY[0x1E4F2DAF0];
    long long v221 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    char v291 = v221;
    long long v222 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v291 count:1];
    [v219 registerForMessage:v220 receiver:v9 policies:v222 selector:sel__handleNetworkFirewallDumpLocalRulesRequest_];

    long long v223 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v224 = *MEMORY[0x1E4F2DB28];
    id v225 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v290 = v225;
    id v226 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v290 count:1];
    [v223 registerForMessage:v224 receiver:v9 policies:v226 selector:sel__handleNetworkFirewallDumpPairedMetadataRequest_];

    int v227 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v228 = *MEMORY[0x1E4F2DB60];
    uint64_t v229 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v289[0] = v229;
    uint64_t v230 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:4];
    v289[1] = v230;
    unsigned int v231 = [MEMORY[0x1E4F1C978] arrayWithObjects:v289 count:2];
    [v227 registerForMessage:v228 receiver:v9 policies:v231 selector:sel__handleNetworkFirewallRemoveLocalRulesRequest_];

    v232 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v233 = *MEMORY[0x1E4F2DB58];
    long long v234 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    id v288 = v234;
    __int16 v235 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v288 count:1];
    [v232 registerForMessage:v233 receiver:v9 policies:v235 selector:sel__handleNetworkFirewallFetchCloudChangesRequest_];

    long long v236 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v237 = *MEMORY[0x1E4F2D348];
    id v238 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v287 = v238;
    char v239 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v287 count:1];
    [v236 registerForMessage:v237 receiver:v9 policies:v239 selector:sel__handleGetTLVForJSON_];
  }
  double v240 = [(HMDHomeManager *)v9 messageDispatcher];
  uint64_t v241 = *MEMORY[0x1E4F2D3D8];
  uint64_t v242 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v286 = v242;
  uint64_t v243 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v286 count:1];
  [v240 registerForMessage:v241 receiver:v9 policies:v243 selector:sel__handleEnableUARPPacketCaptureRequest_];

  if (isInternalBuild())
  {
    uint64_t v244 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v245 = *MEMORY[0x1E4F2D3A0];
    v246 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    uint64_t v285 = v246;
    __int16 v247 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v285 count:1];
    [v244 registerForMessage:v245 receiver:v9 policies:v247 selector:sel__handleDumpDatabase_];
  }
  if (isInternalBuild())
  {
    uint64_t v248 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v249 = *MEMORY[0x1E4F2D4F8];
    uint64_t v250 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    uint64_t v284 = v250;
    __int16 v251 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v284 count:1];
    [v248 registerForMessage:v249 receiver:v9 policies:v251 selector:sel__handlePrepareForDiagnosticExtension_];
  }
  v252 = [(HMDHomeManager *)v9 userCloudShareManager];
  v253 = [(HMDHomeManager *)v9 messageDispatcher];
  [v252 configureWithMessageDispatcher:v253];

  uint64_t v254 = [(HMDHomeManager *)v9 messageDispatcher];
  uint64_t v255 = *MEMORY[0x1E4F2D340];
  v256 = +[HMDXPCMessagePolicy policyWithEntitlements:261];
  uint64_t v283 = v256;
  v257 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v283 count:1];
  [v254 registerForMessage:v255 receiver:v9 policies:v257 selector:sel__handleConnectivityInfoRequest_];

  if (isiOSDevice())
  {
    v258 = [(HMDHomeManager *)v9 notificationCenter];
    [v258 addObserver:v9 selector:sel_controllerKeyPairGenerated_ name:*MEMORY[0x1E4F5BEC0] object:0];

    v259 = [(HMDHomeManager *)v9 notificationCenter];
    [v259 addObserver:v9 selector:sel_forcePushLocalDataToCloud_ name:@"kCloudDataSyncTimerExpiredNotification" object:0];
  }
  v260 = [(HMDHomeManager *)v9 notificationCenter];
  [v260 addObserver:v9 selector:sel_dataSyncInProgressUpdatedNotification_ name:@"kCloudDataSyncInProgressUpdatedNotification" object:0];

  uint64_t v261 = [(HMDHomeManager *)v9 notificationCenter];
  [v261 addObserver:v9 selector:sel__handleSaveRequest_ name:@"HMDHomeManagerSaveRequestNotificationKey" object:0];

  v262 = [(HMDHomeManager *)v9 notificationCenter];
  [v262 addObserver:v9 selector:sel_handleVendorInfoUpdated_ name:@"kHMDVendorInfoUpdatedNotification" object:0];

  v263 = [(HMDHomeManager *)v9 notificationCenter];
  [v263 addObserver:v9 selector:sel_auditDuplicatePreviouslyAddedAccessory_ name:@"HMDHomeThisOwnerDeviceAddedAccessoryNotification" object:0];

  v264 = [(HMDHomeManager *)v9 notificationCenter];
  [v264 addObserver:v9 selector:sel___handleInitialFetch_ name:@"HMDCloudZoneReadyNotification" object:0];

  v265 = [(HMDHomeManager *)v9 notificationCenter];
  [v265 addObserver:v9 selector:sel___handleAppleAccountUpdated_ name:@"HMDAppleAccountManagerAccountUpdatedNotification" object:0];

  uint64_t v266 = [(HMDHomeManager *)v9 notificationCenter];
  v267 = +[HMDAccountRegistry sharedRegistry];
  [v266 addObserver:v9 selector:sel___accountRegistryAddedAccount_ name:@"HMDAccountRegistryAddedAccountNotification" object:v267];

  v268 = [(HMDHomeManager *)v9 notificationCenter];
  uint64_t v269 = +[HMDAccountRegistry sharedRegistry];
  [v268 addObserver:v9 selector:sel___accountRegistryRemovedAccount_ name:@"HMDAccountRegistryRemovedAccountNotification" object:v269];

  v270 = [(HMDHomeManager *)v9 notificationCenter];
  [v270 addObserver:v9 selector:sel___accountAddedDevice_ name:@"HMDAccountAddedDeviceNotification" object:0];

  v271 = [(HMDHomeManager *)v9 notificationCenter];
  [v271 addObserver:v9 selector:sel___handleDeviceUpdatedNotification_ name:@"HMDDeviceUpdatedNotification" object:0];

  uint64_t v272 = [(HMDHomeManager *)v9 notificationCenter];
  [v272 addObserver:v9 selector:sel___accountRemovedDevice_ name:@"HMDAccountRemovedDeviceNotification" object:0];

  v273 = [(HMDHomeManager *)v9 notificationCenter];
  [v273 addObserver:v9 selector:sel___handleProcessMemoryPressureEvent_ name:*MEMORY[0x1E4F64F00] object:0];

  v274 = [(HMDHomeManager *)v9 notificationCenter];
  [v274 addObserver:v9 selector:sel___handleHMDFMFStatusUpdateNotification_ name:@"HMDFMFStatusUpdateNotification" object:0];

  v275 = [(HMDHomeManager *)v9 notificationCenter];
  v276 = [(HMDHomeManager *)v9 messageDispatcher];
  [v275 addObserver:v9 selector:sel__handleRemoteSessionTornDownNotification_ name:@"HMDMessageDispatcherRemoteSessionTornDownNotification" object:v276];

  [(HMDHomeManager *)v9 registerNotificationsForPowerManagement];
  [(HMDHomeManager *)v9 configureForWalletKey];
}

- (BOOL)_setPrimaryHome:(id)a3 idsDataSync:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  int v7 = [(HMDHomeManager *)self primaryHomeUUID];
  id v8 = v6;
  id v9 = [(HMDHomeManager *)self homes];
  uint64_t v10 = [v9 count];

  if (!v10)
  {

    id v11 = 0;
    if ((HMFEqualObjects() & 1) == 0) {
      goto LABEL_12;
    }
LABEL_8:
    BOOL v12 = 0;
    goto LABEL_15;
  }
  if (v8 && (!v4 || isWatch()))
  {
    id v11 = v8;
    if ((HMFEqualObjects() & 1) == 0) {
      goto LABEL_12;
    }
LABEL_10:
    BOOL v12 = 0;
    id v11 = v8;
    goto LABEL_15;
  }
  id v13 = [(HMDHomeManager *)self homes];
  id v14 = objc_msgSend(v13, "hmf_firstObjectWithUUID:", v7);

  if (v14) {
    goto LABEL_10;
  }
  uint64_t v15 = [(HMDHomeManager *)self homes];
  int v16 = [v15 firstObject];

  id v11 = [v16 uuid];

  char v17 = HMFEqualObjects();
  if (v17) {
    goto LABEL_8;
  }
LABEL_12:
  __int16 v18 = (void *)MEMORY[0x1D9452090]();
  uint64_t v19 = self;
  uint64_t v20 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    long long v21 = HMFGetLogIdentifier();
    int v23 = 138543874;
    int v24 = v21;
    __int16 v25 = 2112;
    id v26 = v7;
    __int16 v27 = 2112;
    uint64_t v28 = v11;
    _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@Updating the primary home from %@ to %@", (uint8_t *)&v23, 0x20u);
  }
  [(HMDHomeManager *)v19 setPrimaryHomeUUID:v11];
  [(HMDHomeManager *)v19 _updateCurrentHomeIfNecessary];
  BOOL v12 = 1;
LABEL_15:

  return v12;
}

- (BOOL)_associateAccessories:(id)a3 withHomes:(id)a4
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v32 = a4;
  id v6 = [MEMORY[0x1E4F1CA60] dictionary];
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id v7 = v5;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v37 objects:v46 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    char v10 = 0;
    uint64_t v11 = *(void *)v38;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v38 != v11) {
          objc_enumerationMutation(v7);
        }
        id v13 = *(void **)(*((void *)&v37 + 1) + 8 * i);
        id v14 = [v13 home];
        uint64_t v15 = [v14 uuid];

        if (v15)
        {
          int v16 = objc_msgSend(v6, "hmf_mutableArrayForKey:", v15);
          if (!v16)
          {
            int v16 = [MEMORY[0x1E4F1CA48] array];
            [v6 setObject:v16 forKey:v15];
          }
          [v16 addObject:v13];
        }
        else
        {
          char v17 = (void *)MEMORY[0x1D9452090]();
          __int16 v18 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v19 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            long long v43 = v19;
            __int16 v44 = 2112;
            __int16 v45 = v13;
            _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_DEFAULT, "%{public}@###### Unassociated accessory %@ - dropping", buf, 0x16u);
          }
          char v10 = 1;
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v37 objects:v46 count:16];
    }
    while (v9);
  }
  else
  {
    char v10 = 0;
  }

  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id v20 = v32;
  uint64_t v21 = [v20 countByEnumeratingWithState:&v33 objects:v41 count:16];
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = *(void *)v34;
    do
    {
      for (uint64_t j = 0; j != v22; ++j)
      {
        if (*(void *)v34 != v23) {
          objc_enumerationMutation(v20);
        }
        __int16 v25 = *(void **)(*((void *)&v33 + 1) + 8 * j);
        id v26 = [v25 accessories];
        uint64_t v27 = [v26 count];

        if (!v27)
        {
          uint64_t v28 = [v25 uuid];
          uint64_t v29 = objc_msgSend(v6, "hmf_mutableArrayForKey:", v28);

          [v25 setAccessories:v29];
          __int16 v30 = [v25 uuid];
          [v6 removeObjectForKey:v30];
        }
      }
      uint64_t v22 = [v20 countByEnumeratingWithState:&v33 objects:v41 count:16];
    }
    while (v22);
  }

  return v10 & 1;
}

- (void)_auditKeychainEntries
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  long long v56 = [MEMORY[0x1E4F1CA60] dictionary];
  long long v57 = self;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id obj = [(HMDHomeManager *)self homes];
  uint64_t v52 = [obj countByEnumeratingWithState:&v67 objects:v77 count:16];
  if (v52)
  {
    uint64_t v51 = *(void *)v68;
    do
    {
      uint64_t v3 = 0;
      do
      {
        if (*(void *)v68 != v51) {
          objc_enumerationMutation(obj);
        }
        uint64_t v53 = v3;
        BOOL v4 = *(void **)(*((void *)&v67 + 1) + 8 * v3);
        long long v63 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        long long v58 = [v4 accessories];
        uint64_t v5 = [v58 countByEnumeratingWithState:&v63 objects:v76 count:16];
        if (v5)
        {
          uint64_t v6 = v5;
          uint64_t v7 = *(void *)v64;
          do
          {
            for (uint64_t i = 0; i != v6; ++i)
            {
              if (*(void *)v64 != v7) {
                objc_enumerationMutation(v58);
              }
              id v9 = *(id *)(*((void *)&v63 + 1) + 8 * i);
              objc_opt_class();
              if (objc_opt_isKindOfClass()) {
                char v10 = v9;
              }
              else {
                char v10 = 0;
              }
              id v11 = v10;

              if (!v11)
              {
                id v15 = v9;
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  int v16 = v15;
                }
                else {
                  int v16 = 0;
                }
                id v12 = v16;

                if (v12)
                {
                  char v17 = [v12 identifier];

                  if (!v17)
                  {
                    __int16 v18 = (void *)MEMORY[0x1D9452090]();
                    uint64_t v19 = v57;
                    id v20 = HMFGetOSLogHandle();
                    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
                    {
                      uint64_t v21 = HMFGetLogIdentifier();
                      *(_DWORD *)long long buf = 138543618;
                      uint64_t v73 = v21;
                      __int16 v74 = 2112;
                      id v75 = v12;
                      _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_ERROR, "%{public}@Failed to add accessory %@ to the audit accessory list since identifier is nil", buf, 0x16u);
                    }
                  }
                }
                goto LABEL_27;
              }
              id v12 = [v11 pairingUsername];
              if (v12 || ([v11 identifier], (id v12 = (id)objc_claimAutoreleasedReturnValue()) != 0))
              {
                id v13 = [v11 publicKey];

                if (v13)
                {
                  id v14 = [v11 publicKey];
                  [v56 setObject:v14 forKey:v12];

LABEL_27:
                  goto LABEL_34;
                }
                uint64_t v22 = (void *)MEMORY[0x1D9452090]();
                uint64_t v23 = v57;
                int v24 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
                {
                  __int16 v25 = HMFGetLogIdentifier();
                  id v26 = [v11 name];
                  *(_DWORD *)long long buf = 138543618;
                  uint64_t v73 = v25;
                  __int16 v74 = 2112;
                  id v75 = v26;
                  _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_ERROR, "%{public}@A HAP accessory '%@' with a public key - removing from list of of keychain entries", buf, 0x16u);
                }
              }
              else
              {
                uint64_t v27 = (void *)MEMORY[0x1D9452090]();
                uint64_t v28 = v57;
                uint64_t v29 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
                {
                  __int16 v30 = HMFGetLogIdentifier();
                  id v31 = [v11 name];
                  *(_DWORD *)long long buf = 138543618;
                  uint64_t v73 = v30;
                  __int16 v74 = 2112;
                  id v75 = v31;
                  _os_log_impl(&dword_1D49D5000, v29, OS_LOG_TYPE_ERROR, "%{public}@Failed to add accessory %@ to the audit accessory list for keychain cleanup", buf, 0x16u);
                }
              }
LABEL_34:
            }
            uint64_t v6 = [v58 countByEnumeratingWithState:&v63 objects:v76 count:16];
          }
          while (v6);
        }

        uint64_t v3 = v53 + 1;
      }
      while (v53 + 1 != v52);
      uint64_t v52 = [obj countByEnumeratingWithState:&v67 objects:v77 count:16];
    }
    while (v52);
  }

  id v32 = [MEMORY[0x1E4F5BE48] systemStore];
  long long v33 = [v32 auditKeysOfManagedAccessories:v56];
  long long v34 = v33;
  if (v33)
  {
    long long v54 = v33;
    long long v55 = v32;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    id v35 = v33;
    uint64_t v36 = [v35 countByEnumeratingWithState:&v59 objects:v71 count:16];
    if (v36)
    {
      uint64_t v37 = v36;
      uint64_t v38 = *(void *)v60;
      do
      {
        for (uint64_t j = 0; j != v37; ++j)
        {
          if (*(void *)v60 != v38) {
            objc_enumerationMutation(v35);
          }
          long long v40 = *(void **)(*((void *)&v59 + 1) + 8 * j);
          long long v41 = (void *)MEMORY[0x1D9452090]();
          long long v42 = v57;
          long long v43 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v44 = HMFGetLogIdentifier();
            __int16 v45 = [v40 description];
            *(_DWORD *)long long buf = 138543618;
            uint64_t v73 = v44;
            __int16 v74 = 2112;
            id v75 = v45;
            _os_log_impl(&dword_1D49D5000, v43, OS_LOG_TYPE_DEFAULT, "%{public}@Removed spurious keychain entry: %@", buf, 0x16u);
          }
        }
        uint64_t v37 = [v35 countByEnumeratingWithState:&v59 objects:v71 count:16];
      }
      while (v37);
    }

    long long v34 = v54;
    id v32 = v55;
  }
  else
  {
    uint64_t v46 = (void *)MEMORY[0x1D9452090]();
    uint64_t v47 = v57;
    unint64_t v48 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v49 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v73 = v49;
      _os_log_impl(&dword_1D49D5000, v48, OS_LOG_TYPE_DEFAULT, "%{public}@Audit keychain entries failed", buf, 0xCu);
    }
  }
}

- (id)_deviceForIdentifier:(id)a3
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v4];
  if (v5)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    uint64_t v6 = [(HMDHomeManager *)self appleAccountManager];
    uint64_t v7 = [v6 account];
    uint64_t v8 = [v7 devices];

    id v9 = (id)[v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v17;
      while (2)
      {
        for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v17 != v10) {
            objc_enumerationMutation(v8);
          }
          id v12 = *(void **)(*((void *)&v16 + 1) + 8 * i);
          id v13 = [v12 identifier];
          int v14 = [v5 isEqual:v13];

          if (v14)
          {
            id v9 = v12;
            goto LABEL_12;
          }
        }
        id v9 = (id)[v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
        if (v9) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

- (id)_filterAccessories:(id)a3 inHome:(id)a4
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = a4;
  id v18 = [MEMORY[0x1E4F1CA48] array];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v7 = v5;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v20 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        id v13 = [v12 home];
        int v14 = [v13 uuid];
        id v15 = [v6 uuid];
        int v16 = [v14 isEqual:v15];

        if (v16) {
          [v18 addObject:v12];
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v9);
  }

  return v18;
}

- (id)_filterAccessories:(id)a3 withIdentifiers:(id)a4
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = a4;
  long long v19 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v5, "count"));
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v7 = v5;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v21 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(id *)(*((void *)&v20 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v13 = v12;
        }
        else {
          id v13 = 0;
        }
        id v14 = v13;

        if (v14)
        {
          id v15 = [v14 uniqueIdentifier];
          int v16 = [v6 containsObject:v15];

          if (v16) {
            [v19 addObject:v12];
          }
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v9);
  }

  long long v17 = (void *)[v19 copy];
  return v17;
}

- (id)identifiersOfAccessories:(id)a3
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  id v4 = [MEMORY[0x1E4F1CA80] set];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v17;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v17 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(id *)(*((void *)&v16 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v11 = v10;
        }
        else {
          id v11 = 0;
        }
        id v12 = v11;

        if (v12)
        {
          id v13 = objc_msgSend(v12, "uniqueIdentifier", (void)v16);
          [v4 addObject:v13];
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v7);
  }

  id v14 = (void *)[v4 copy];
  return v14;
}

- (id)identifiersOfAccessoriesForHome:(id)a3
{
  id v4 = [a3 accessories];
  id v5 = [(HMDHomeManager *)self identifiersOfAccessories:v4];

  return v5;
}

- (void)_updateCloudDataSyncWithAccountState:(BOOL)a3 completion:(id)a4
{
  BOOL v4 = a3;
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (void (**)(void))a4;
  uint64_t v7 = [(HMDHomeManager *)self keyTransferAgent];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  id v9 = v8;

  id v10 = [v9 progressState];

  if (v10)
  {
    id v11 = (void *)MEMORY[0x1D9452090]();
    id v12 = self;
    id v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      id v14 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      long long v20 = v14;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Not updating Cloud Data Sync. Key Transfer in Progress.", buf, 0xCu);
    }
    if (v6) {
      v6[2](v6);
    }
  }
  else
  {
    [(HMDHomeManager *)self setAccountActive:v4];
    objc_initWeak((id *)buf, self);
    id v15 = [(HMDHomeManager *)self cloudDataSyncManager];
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    void v16[2] = __66__HMDHomeManager__updateCloudDataSyncWithAccountState_completion___block_invoke;
    v16[3] = &unk_1E6A16268;
    objc_copyWeak(&v18, (id *)buf);
    long long v17 = v6;
    [v15 updateAccountStatusChanged:v4 completionHandler:v16];

    objc_destroyWeak(&v18);
    objc_destroyWeak((id *)buf);
  }
}

void __66__HMDHomeManager__updateCloudDataSyncWithAccountState_completion___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v8 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained _handleAccountStatusDeterminedWithError:v9 homeDataRecordExists:a2 metadataRecordExists:a3 completion:*(void *)(a1 + 32)];
  }
}

- (void)_updateCloudDataSyncWithAccountState:(BOOL)a3
{
  objc_initWeak(&location, self);
  id v5 = [(HMDHomeManager *)self cloudAccount];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __55__HMDHomeManager__updateCloudDataSyncWithAccountState___block_invoke;
  v6[3] = &unk_1E6A16240;
  objc_copyWeak(&v7, &location);
  BOOL v8 = a3;
  [v5 addAccountOperation:v6];

  objc_destroyWeak(&v7);
  objc_destroyWeak(&location);
}

void __55__HMDHomeManager__updateCloudDataSyncWithAccountState___block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  BOOL v4 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained _updateCloudDataSyncWithAccountState:*(unsigned __int8 *)(a1 + 40) completion:v5];
  }
  else if (v5)
  {
    v5[2]();
  }
}

- (void)forceCloudFetch
{
  objc_initWeak(&location, self);
  id v3 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __33__HMDHomeManager_forceCloudFetch__block_invoke;
  block[3] = &unk_1E6A16CE0;
  objc_copyWeak(&v5, &location);
  void block[4] = self;
  dispatch_async(v3, block);

  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);
}

void __33__HMDHomeManager_forceCloudFetch__block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    id v3 = objc_msgSend(*(id *)(a1 + 32), "homes", 0);
    uint64_t v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v10;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v10 != v6) {
            objc_enumerationMutation(v3);
          }
          BOOL v8 = *(void **)(*((void *)&v9 + 1) + 8 * i);
          [v8 setExpectedConfigurationVersion:0];
          [v8 setSharedHomeSourceVersion:0];
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
      }
      while (v5);
    }

    [WeakRetained _fetchHomeDataFromCloudWithCloudConflict:0 forceFetch:1 withDelay:0 accountCompletion:0.0];
    [WeakRetained _requestHomeDataSync];
  }
}

- (void)_requestHomeDataSync
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v2 = [(HMDHomeManager *)self homes];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        if (([v7 isOwnerUser] & 1) == 0)
        {
          BOOL v8 = [v7 sharedHomeUpdateHandler];
          [v8 requestHomeDataSync];
        }
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
}

- (void)_runFetchHomeDataFromCloudWithCloudConflict:(BOOL)a3 forceFetch:(BOOL)a4 accountCompletion:(id)a5 syncCompletion:(id)a6
{
  BOOL v7 = a4;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v10 = a5;
  id v11 = a6;
  long long v12 = (void *)MEMORY[0x1D9452090]();
  id v13 = (void *)MEMORY[0x1D9452090]();
  uint64_t v14 = self;
  id v15 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    long long v16 = HMFGetLogIdentifier();
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v16;
    _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_DEFAULT, "%{public}@Fetching changes from the cloud", (uint8_t *)&buf, 0xCu);
  }
  long long v17 = [(HMDHomeManager *)v14 cloudDataSyncManager];
  id v18 = [v17 cloudCache];

  long long v19 = [v18 legacyZone];
  long long v20 = [[HMDCloudTransaction alloc] initWithType:1 temporaryCache:0];
  [(HMDCloudTransaction *)v20 updateCloudZone:v19];
  uint64_t v21 = (void *)[objc_alloc(MEMORY[0x1E4F654E0]) initWithName:@"com.apple.homed.fetch-from-legacyzone"];
  [(HMDCloudTransaction *)v20 setOsTransaction:v21];

  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = &buf;
  uint64_t v38 = 0x2020000000;
  char v39 = 0;
  objc_initWeak(&location, v14);
  long long v22 = [(HMDHomeManager *)v14 cloudDataSyncManager];
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 3221225472;
  void v27[2] = __106__HMDHomeManager__runFetchHomeDataFromCloudWithCloudConflict_forceFetch_accountCompletion_syncCompletion___block_invoke;
  v27[3] = &unk_1E6A16218;
  void v27[4] = v14;
  objc_copyWeak(&v33, &location);
  id v23 = v10;
  id v30 = v23;
  BOOL v34 = a3;
  BOOL v35 = v7;
  uint64_t v24 = v20;
  uint64_t v28 = v24;
  id v25 = v11;
  id v31 = v25;
  id v26 = v19;
  id v29 = v26;
  p_long long buf = &buf;
  [v22 fetchLegacyTransaction:v24 forceFetch:v7 accountCompletionHandler:v23 dataCompletionHandler:v27];

  objc_destroyWeak(&v33);
  objc_destroyWeak(&location);
  _Block_object_dispose(&buf, 8);
}

void __106__HMDHomeManager__runFetchHomeDataFromCloudWithCloudConflict_forceFetch_accountCompletion_syncCompletion___block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = *(id *)(a1 + 32);
  BOOL v7 = HMFGetOSLogHandle();
  BOOL v8 = v7;
  if (!v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      long long v22 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      long long v55 = v22;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Finished fetching legacy zone", buf, 0xCu);
    }
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
    if (!WeakRetained) {
      goto LABEL_27;
    }
    uint64_t v24 = WeakRetained;
    [*(id *)(a1 + 40) loadObjectChanges];
    id v25 = dispatch_group_create();
    id v26 = *(void **)(a1 + 40);
    uint64_t v27 = [*(id *)(a1 + 48) metadataObjectID];
    uint64_t v28 = [v26 changeWithObjectID:v27];

    if (v28 && ([v28 isDeleted] & 1) == 0)
    {
      id v29 = (void *)MEMORY[0x1D9452090]();
      id v30 = v24;
      id v31 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        id v32 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        long long v55 = v32;
        _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_INFO, "%{public}@Metadata record was updated in the legacy zone, not processing", buf, 0xCu);
      }
    }
    id v33 = (void *)MEMORY[0x1D9452090]();
    id v11 = v24;
    BOOL v34 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
    {
      BOOL v35 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      long long v55 = v35;
      _os_log_impl(&dword_1D49D5000, v34, OS_LOG_TYPE_INFO, "%{public}@Ignoring cloud legacy records, data will not be merged", buf, 0xCu);
    }
    uint64_t v36 = *(void **)(a1 + 40);
    uint64_t v37 = [*(id *)(a1 + 48) homeDataV3ObjectID];
    uint64_t v38 = [v36 changeWithObjectID:v37];
    if (v38)
    {
    }
    else
    {
      long long v41 = *(void **)(a1 + 40);
      long long v42 = [*(id *)(a1 + 48) homeDataObjectID];
      long long v43 = [v41 changeWithObjectID:v42];

      if (!v43)
      {
LABEL_32:
        __int16 v45 = [v11 workQueue];
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = __106__HMDHomeManager__runFetchHomeDataFromCloudWithCloudConflict_forceFetch_accountCompletion_syncCompletion___block_invoke_887;
        block[3] = &unk_1E6A161F0;
        objc_copyWeak(&v52, (id *)(a1 + 80));
        id v49 = *(id *)(a1 + 40);
        id v50 = *(id *)(a1 + 48);
        char v53 = *(unsigned char *)(a1 + 88);
        long long v47 = *(_OWORD *)(a1 + 64);
        id v46 = (id)v47;
        long long v51 = v47;
        dispatch_group_notify(v25, v45, block);

        objc_destroyWeak(&v52);
        goto LABEL_33;
      }
    }
    __int16 v44 = [[HMDHomeSaveRequest alloc] initWithReason:@"HMDHomeManagerLegacyZoneFetchSomething" information:0 postSyncNotification:0];
    [v11 saveWithRequest:v44];

    goto LABEL_32;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    long long v9 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    long long v55 = v9;
    __int16 v56 = 2112;
    id v57 = v4;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch legacy zone: %@", buf, 0x16u);
  }
  id v10 = objc_loadWeakRetained((id *)(a1 + 80));
  if (v10)
  {
    id v11 = v10;
    long long v12 = [v4 domain];
    if ([v12 isEqualToString:*MEMORY[0x1E4F19C40]])
    {
      id v13 = [v4 userInfo];

      if (!v13) {
        goto LABEL_13;
      }
      uint64_t v14 = [v4 userInfo];
      long long v12 = objc_msgSend(v14, "hmf_numberForKey:", *MEMORY[0x1E4F19C60]);

      if (v12 && !*(void *)(a1 + 56))
      {
        id v15 = (void *)MEMORY[0x1D9452090]();
        id v16 = v11;
        long long v17 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          id v18 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543618;
          long long v55 = v18;
          __int16 v56 = 2112;
          id v57 = v12;
          _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Rescheduling legacy fetch changes with delay %@", buf, 0x16u);
        }
        uint64_t v19 = *(unsigned __int8 *)(a1 + 88);
        uint64_t v20 = *(unsigned __int8 *)(a1 + 89);
        [v12 doubleValue];
        objc_msgSend(v16, "_fetchHomeDataFromCloudWithCloudConflict:forceFetch:withDelay:accountCompletion:", v19, v20, 0);
      }
    }

LABEL_13:
    [*(id *)(a1 + 40) setOsTransaction:0];
    uint64_t v21 = *(void *)(a1 + 64);
    if (v21) {
      (*(void (**)(uint64_t, id))(v21 + 16))(v21, v4);
    }
    goto LABEL_33;
  }
LABEL_27:
  [*(id *)(a1 + 40) setOsTransaction:0];
  uint64_t v39 = *(void *)(a1 + 64);
  if (v39)
  {
    uint64_t v40 = [MEMORY[0x1E4F28C58] hmErrorWithCode:23 description:@"Operation was cancelled before it could run" reason:@"HMDCloudManager cancelled the operation" suggestion:0];
    (*(void (**)(uint64_t, void *))(v39 + 16))(v39, v40);
  }
  id v11 = 0;
LABEL_33:
}

void __106__HMDHomeManager__runFetchHomeDataFromCloudWithCloudConflict_forceFetch_accountCompletion_syncCompletion___block_invoke_887(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    id v4 = [*(id *)(a1 + 40) homeDataObjectID];
    uint64_t v5 = [v3 changeWithObjectID:v4];

    unsigned int v6 = [*(id *)(a1 + 40) hasRecordsAvailable];
    if (v5) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v6;
    }
    BOOL v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = WeakRetained;
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = HMFGetLogIdentifier();
      long long v12 = [NSNumber numberWithBool:v5 != 0];
      id v13 = [NSNumber numberWithBool:v7];
      int v21 = 138543874;
      long long v22 = v11;
      __int16 v23 = 2112;
      uint64_t v24 = v12;
      __int16 v25 = 2112;
      id v26 = v13;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Completed processing legacy zone recordWasFetched: %@, dataIsAvailable: %@", (uint8_t *)&v21, 0x20u);
    }
    [*(id *)(a1 + 32) updateCloudCache];
    uint64_t v14 = [v9 cloudDataSyncManager];
    [v14 updateServerTokenStatusOnCloudFilter];

    if ([*(id *)(a1 + 32) iCloudSwitchStateEnabled]
      && (!v7 || *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)))
    {
      id v15 = (void *)MEMORY[0x1D9452090]();
      id v16 = v9;
      long long v17 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        id v18 = HMFGetLogIdentifier();
        int v21 = 138543362;
        long long v22 = v18;
        _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Updating data sync state on processing legacy zone.", (uint8_t *)&v21, 0xCu);
      }
      uint64_t v19 = [v16 cloudDataSyncManager];
      [v19 updateCloudDataSyncFilterState:1];
    }
    [v9 _postMergeWatchPush];
    if (*(unsigned char *)(a1 + 72)) {
      [v9 _pushChangesToCloud:0 withDelay:0.0];
    }
    [*(id *)(a1 + 32) setOsTransaction:0];
    uint64_t v20 = *(void *)(a1 + 48);
    if (v20) {
      (*(void (**)(uint64_t, void))(v20 + 16))(v20, 0);
    }
  }
}

- (void)_fetchHomeDataFromCloudWithCloudConflict:(BOOL)a3 forceFetch:(BOOL)a4 withDelay:(double)a5 accountCompletion:(id)a6
{
  BOOL v8 = a3;
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v10 = a6;
  if (v8
    && ([(HMDHomeManager *)self cloudDataSyncStateFilter],
        id v11 = objc_claimAutoreleasedReturnValue(),
        int v12 = [v11 decryptionFailed],
        v11,
        v12))
  {
    id v13 = (void *)MEMORY[0x1D9452090]();
    uint64_t v14 = self;
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      id v16 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      long long v41 = v16;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@Dropping request to fetch home config due to conflict since decryption failed", buf, 0xCu);
    }
  }
  else
  {
    objc_initWeak(&location, self);
    uint64_t v32 = MEMORY[0x1E4F143A8];
    uint64_t v33 = 3221225472;
    BOOL v34 = __98__HMDHomeManager__fetchHomeDataFromCloudWithCloudConflict_forceFetch_withDelay_accountCompletion___block_invoke;
    BOOL v35 = &unk_1E6A161C8;
    id v17 = v10;
    id v36 = v17;
    objc_copyWeak(&v37, &location);
    BOOL v38 = a4;
    id v18 = _Block_copy(&v32);
    BOOL v19 = v17 == 0;
    __int16 v23 = (void *)MEMORY[0x1D9452090](v18, v20, v21, v22);
    uint64_t v24 = self;
    if (v19)
    {
      HMFGetOSLogHandle();
      uint64_t v28 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        id v29 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        long long v41 = v29;
        _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_INFO, "%{public}@Scheduling fetch changes", buf, 0xCu);
      }
      uint64_t v27 = +[HMDSyncOperation cloudFetchSyncOperationWithCloudConflict:block:](HMDSyncOperation, "cloudFetchSyncOperationWithCloudConflict:block:", v8, v18, v32, v33, v34, v35, v36);
    }
    else
    {
      HMFGetOSLogHandle();
      __int16 v25 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        id v26 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        long long v41 = v26;
        _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_INFO, "%{public}@Scheduling account verification fetch", buf, 0xCu);
      }
      uint64_t v27 = +[HMDSyncOperation cloudVerifyAccountSyncOperationWithBlock:](HMDSyncOperation, "cloudVerifyAccountSyncOperationWithBlock:", v18, v32, v33, v34, v35, v36);
    }
    id v30 = (void *)v27;
    id v31 = [(HMDHomeManager *)v24 syncManager];
    [v31 addOperation:v30 withDelay:a5];

    objc_destroyWeak(&v37);
    objc_destroyWeak(&location);
  }
}

void __98__HMDHomeManager__fetchHomeDataFromCloudWithCloudConflict_forceFetch_withDelay_accountCompletion___block_invoke(uint64_t a1, void *a2, void *a3, int a4)
{
  id v11 = a2;
  id v7 = a3;
  if (!a4)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    if (WeakRetained) {
      objc_msgSend(WeakRetained, "_runFetchHomeDataFromCloudWithCloudConflict:forceFetch:accountCompletion:syncCompletion:", objc_msgSend(v7, "isCloudConflict"), *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 32), v11);
    }
    goto LABEL_8;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8)
  {
    id v9 = [MEMORY[0x1E4F28C58] hmErrorWithCode:23];
    (*(void (**)(uint64_t, void, void, void *))(v8 + 16))(v8, 0, 0, v9);
  }
  if (v11)
  {
    id WeakRetained = [MEMORY[0x1E4F28C58] hmErrorWithCode:23 description:@"Operation was cancelled before it could run" reason:@"HMDCloudManager cancelled the operation" suggestion:0];
    v11[2](v11, WeakRetained);
LABEL_8:
  }
}

- (void)fetchHomeDataFromCloudWithCloudConflict:(BOOL)a3 withDelay:(double)a4
{
  objc_initWeak(&location, self);
  id v7 = [(HMDHomeManager *)self workQueue];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __68__HMDHomeManager_fetchHomeDataFromCloudWithCloudConflict_withDelay___block_invoke;
  v8[3] = &unk_1E6A15AC0;
  objc_copyWeak(v9, &location);
  BOOL v10 = a3;
  v9[1] = *(id *)&a4;
  dispatch_async(v7, v8);

  objc_destroyWeak(v9);
  objc_destroyWeak(&location);
}

void __68__HMDHomeManager_fetchHomeDataFromCloudWithCloudConflict_withDelay___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    [WeakRetained _fetchHomeDataFromCloudWithCloudConflict:*(unsigned __int8 *)(a1 + 48) forceFetch:0 withDelay:0 accountCompletion:*(double *)(a1 + 40)];
    id WeakRetained = v3;
  }
}

- (void)verifyHomeDataFromCloud:(id)a3
{
  id v4 = a3;
  objc_initWeak(&location, self);
  uint64_t v5 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __42__HMDHomeManager_verifyHomeDataFromCloud___block_invoke;
  block[3] = &unk_1E6A15DB8;
  objc_copyWeak(&v9, &location);
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, block);

  objc_destroyWeak(&v9);
  objc_destroyWeak(&location);
}

void __42__HMDHomeManager_verifyHomeDataFromCloud___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    [WeakRetained _fetchHomeDataFromCloudWithCloudConflict:0 forceFetch:0 withDelay:*(void *)(a1 + 32) accountCompletion:0.0];
    id WeakRetained = v3;
  }
}

- (void)_fetchDataFromCloud
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!disableCloudDataSync)
  {
    id v3 = +[HMDDeviceCapabilities deviceCapabilities];
    if ([v3 supportsCloudDataSync])
    {
      objc_initWeak(&location, self);
      id v4 = [(HMDHomeManager *)self cloudDataSyncManager];
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      void v21[2] = __37__HMDHomeManager__fetchDataFromCloud__block_invoke;
      v21[3] = &unk_1E6A16E40;
      objc_copyWeak(&v22, &location);
      [v4 setCloudDataDeletedNotificationBlock:v21];

      uint64_t v5 = [(HMDHomeManager *)self cloudDataSyncManager];
      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 3221225472;
      void v19[2] = __37__HMDHomeManager__fetchDataFromCloud__block_invoke_877;
      void v19[3] = &unk_1E6A16E40;
      objc_copyWeak(&v20, &location);
      [v5 setCloudMetadataDeletedNotificationBlock:v19];

      id v6 = [(HMDHomeManager *)self cloudDataSyncManager];
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 3221225472;
      v17[2] = __37__HMDHomeManager__fetchDataFromCloud__block_invoke_878;
      v17[3] = &unk_1E6A16E40;
      objc_copyWeak(&v18, &location);
      [v6 setControllerKeyAvailableNotificationBlock:v17];

      id v7 = [(HMDHomeManager *)self cloudDataSyncManager];
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      v15[2] = __37__HMDHomeManager__fetchDataFromCloud__block_invoke_879;
      v15[3] = &unk_1E6A16E40;
      objc_copyWeak(&v16, &location);
      [v7 setDataDecryptionFailedHandler:v15];

      id v8 = -[HMDHomeManager activeAccountIdentifier](self);
      id v9 = (void *)MEMORY[0x1D9452090]();
      HMFGetOSLogHandle();
      BOOL v10 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        id v11 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        __int16 v25 = v11;
        __int16 v26 = 2112;
        uint64_t v27 = v8;
        _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Current user account identifier is %@", buf, 0x16u);
      }
      [(HMDHomeManager *)self _updateCloudDataSyncWithAccountState:v8 != 0];
      int v12 = [(HMDHomeManager *)self cloudDataSyncStateFilter];
      [v12 updateiCloudAccountActive:v8 != 0];

      objc_destroyWeak(&v16);
      objc_destroyWeak(&v18);
      objc_destroyWeak(&v20);
      objc_destroyWeak(&v22);
      objc_destroyWeak(&location);
    }
    else
    {
      id v13 = -[HMDHomeManager activeAccountIdentifier](self);
      uint64_t v14 = [(HMDHomeManager *)self cloudDataSyncStateFilter];
      [v14 updateiCloudAccountActive:v13 != 0];
    }
  }
}

void __37__HMDHomeManager__fetchDataFromCloud__block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = [WeakRetained workQueue];
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    v4[2] = __37__HMDHomeManager__fetchDataFromCloud__block_invoke_2;
    v4[3] = &unk_1E6A18288;
    void v4[4] = v2;
    [v2 _eraseLocalHomeConfigurationAndDeleteMetadata:0 completionQueue:v3 completion:v4];
  }
}

void __37__HMDHomeManager__fetchDataFromCloud__block_invoke_877(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = (void *)MEMORY[0x1D9452090]([WeakRetained _eraseLocalMetadata]);
    id v4 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = HMFGetLogIdentifier();
      int v6 = 138543362;
      id v7 = v5;
      _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@Cloud data was deleted, deleted local metadata", (uint8_t *)&v6, 0xCu);
    }
  }
}

void __37__HMDHomeManager__fetchDataFromCloud__block_invoke_878(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = (void *)MEMORY[0x1D9452090]();
    id v3 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      id v4 = HMFGetLogIdentifier();
      int v5 = 138543362;
      int v6 = v4;
      _os_log_impl(&dword_1D49D5000, v3, OS_LOG_TYPE_INFO, "%{public}@Received notification that controller key is available", (uint8_t *)&v5, 0xCu);
    }
    [WeakRetained _handleControllerKeyAvailable];
  }
}

void __37__HMDHomeManager__fetchDataFromCloud__block_invoke_879(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = (void *)MEMORY[0x1D9452090]();
    id v3 = WeakRetained;
    id v4 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v5 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v9 = v5;
      _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@Decryption failed. Cancelling operations in queue.", buf, 0xCu);
    }
    int v6 = [v3 workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __37__HMDHomeManager__fetchDataFromCloud__block_invoke_880;
    block[3] = &unk_1E6A19B30;
    void block[4] = v3;
    dispatch_async(v6, block);
  }
}

void __37__HMDHomeManager__fetchDataFromCloud__block_invoke_880(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) syncManager];
  [v1 cancelOperations];
}

void __37__HMDHomeManager__fetchDataFromCloud__block_invoke_2(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1D9452090]([*(id *)(a1 + 32) updateAccountAvailabilityChanged:0]);
  id v3 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    id v4 = HMFGetLogIdentifier();
    int v6 = 138543362;
    uint64_t v7 = v4;
    _os_log_impl(&dword_1D49D5000, v3, OS_LOG_TYPE_INFO, "%{public}@Cloud data was deleted, deleted local home data, posting Key Transfer Reset Timer Notification.", (uint8_t *)&v6, 0xCu);
  }
  int v5 = [*(id *)(a1 + 32) notificationCenter];
  [v5 postNotificationName:@"HMDHomeManagerKeyTransferResetTimerNotification" object:0];
}

- (void)_postMergeWatchPush
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  if (isiOSDevice())
  {
    id v3 = (void *)MEMORY[0x1E4F1CA48];
    id v4 = [(HMDHomeManager *)self associatedWatchPeers];
    unint64_t v48 = objc_msgSend(v3, "arrayWithCapacity:", objc_msgSend(v4, "count"));

    int v5 = (void *)MEMORY[0x1E4F1CA48];
    int v6 = [(HMDHomeManager *)self associatedWatchPeers];
    long long v47 = objc_msgSend(v5, "arrayWithCapacity:", objc_msgSend(v6, "count"));

    uint64_t v7 = (void *)MEMORY[0x1E4F1CA80];
    uint64_t v8 = [(HMDHomeManager *)self homes];
    id v50 = objc_msgSend(v7, "setWithCapacity:", objc_msgSend(v8, "count"));

    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    id v9 = [(HMDHomeManager *)self homes];
    uint64_t v10 = [v9 countByEnumeratingWithState:&v63 objects:v76 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v64;
      do
      {
        uint64_t v13 = 0;
        do
        {
          if (*(void *)v64 != v12) {
            objc_enumerationMutation(v9);
          }
          uint64_t v14 = [*(id *)(*((void *)&v63 + 1) + 8 * v13) uuid];
          [v50 addObject:v14];

          ++v13;
        }
        while (v11 != v13);
        uint64_t v11 = [v9 countByEnumeratingWithState:&v63 objects:v76 count:16];
      }
      while (v11);
    }

    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    id obj = [(HMDHomeManager *)self associatedWatchPeers];
    uint64_t v15 = [obj countByEnumeratingWithState:&v59 objects:v75 count:16];
    if (v15)
    {
      uint64_t v17 = v15;
      uint64_t v18 = *(void *)v60;
      *(void *)&long long v16 = 138543874;
      long long v46 = v16;
      do
      {
        uint64_t v19 = 0;
        do
        {
          if (*(void *)v60 != v18) {
            objc_enumerationMutation(obj);
          }
          uint64_t v20 = *(void *)(*((void *)&v59 + 1) + 8 * v19);
          uint64_t v21 = [(HMDHomeManager *)self associatedWatchPeers];
          id v22 = [v21 objectForKeyedSubscript:v20];

          __int16 v23 = (void *)MEMORY[0x1E4F1CA80];
          uint64_t v24 = [v22 homeConfig];
          __int16 v25 = [v24 allKeys];
          __int16 v26 = [v23 setWithArray:v25];

          [v26 minusSet:v50];
          if ([v26 count])
          {
            uint64_t v27 = (void *)MEMORY[0x1D9452090]();
            uint64_t v28 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
            {
              id v29 = HMFGetLogIdentifier();
              *(_DWORD *)long long buf = v46;
              long long v70 = v29;
              __int16 v71 = 2112;
              uint64_t v72 = v20;
              __int16 v73 = 2112;
              __int16 v74 = v26;
              _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_INFO, "%{public}@Complete sync to watch %@ is required because the following homes have been removed: %@", buf, 0x20u);
            }
            id v30 = [(HMDHomeManager *)self watchManager];
            id v31 = [v30 connectedWatchFromDeviceID:v20];

            if (v31) {
              [v48 addObject:v31];
            }
          }
          else
          {
            [v47 addObject:v20];
          }

          ++v19;
        }
        while (v17 != v19);
        uint64_t v17 = [obj countByEnumeratingWithState:&v59 objects:v75 count:16];
      }
      while (v17);
    }

    if ([v48 count])
    {
      uint64_t v32 = [(HMDHomeManager *)self watchPushDelayTimer];
      [v32 suspend];

      uint64_t v33 = (void *)MEMORY[0x1D9452090]();
      BOOL v34 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v35 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        long long v70 = v35;
        _os_log_impl(&dword_1D49D5000, v34, OS_LOG_TYPE_DEFAULT, "%{public}@Removing scheduled watch push delay and pushing immediately", buf, 0xCu);
      }
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      id v36 = v47;
      uint64_t v37 = [v36 countByEnumeratingWithState:&v55 objects:v68 count:16];
      if (v37)
      {
        uint64_t v38 = v37;
        uint64_t v39 = *(void *)v56;
        do
        {
          uint64_t v40 = 0;
          do
          {
            if (*(void *)v56 != v39) {
              objc_enumerationMutation(v36);
            }
            [(HMDHomeManager *)self _sendHomeDataToWatch:*(void *)(*((void *)&v55 + 1) + 8 * v40++) completionHandler:0];
          }
          while (v38 != v40);
          uint64_t v38 = [v36 countByEnumeratingWithState:&v55 objects:v68 count:16];
        }
        while (v38);
      }

      [(HMDHomeManager *)self _checkAndAddWatchDevices:v48 resend:1 requestFromWatch:0];
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v41 = [(HMDHomeManager *)self homes];
      uint64_t v42 = [v41 countByEnumeratingWithState:&v51 objects:v67 count:16];
      if (v42)
      {
        uint64_t v43 = v42;
        uint64_t v44 = *(void *)v52;
        do
        {
          uint64_t v45 = 0;
          do
          {
            if (*(void *)v52 != v44) {
              objc_enumerationMutation(v41);
            }
            [*(id *)(*((void *)&v51 + 1) + 8 * v45++) setWatchSkipVersionCheck:0];
          }
          while (v43 != v45);
          uint64_t v43 = [v41 countByEnumeratingWithState:&v51 objects:v67 count:16];
        }
        while (v43);
      }
    }
    else
    {
      [(HMDHomeManager *)self _scheduleSendHomeDataToAllWatches];
    }
  }
}

- (void)_checkForAccountChanged
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = -[HMDHomeManager activeAccountIdentifier](self);
  id v4 = [MEMORY[0x1E4F5BE48] systemStore];
  id v18 = 0;
  id v19 = 0;
  id v17 = 0;
  int v5 = [v4 getCurrentiCloudIdentifier:&v19 controllerPairingIdentifier:&v18 error:&v17];
  id v6 = v19;
  id v7 = v18;
  id v8 = v17;
  if (v5 && [v6 length] && objc_msgSend(v7, "length") && objc_msgSend(v3, "length"))
  {
    id v9 = (void *)MEMORY[0x1D9452090]();
    uint64_t v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543874;
      uint64_t v21 = v11;
      __int16 v22 = 2112;
      id v23 = v3;
      __int16 v24 = 2112;
      id v25 = v6;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Checking for account changed on bootup, current account identifier %@, last known account identifier %@", buf, 0x20u);
    }
    if (([v6 isEqualToIgnoringCase:v3] & 1) == 0
      && ([v6 isEqualToString:@"__HomeKit_NoAccount_Identifier__"] & 1) == 0)
    {
      uint64_t v12 = (void *)MEMORY[0x1D9452090]();
      uint64_t v13 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v21 = v14;
        __int16 v22 = 2112;
        id v23 = v7;
        _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Current account is different since the last time known, removing controller key for identifier %@ and deleting local home data", buf, 0x16u);
      }
      id v16 = v8;
      [v4 removeControllerKeyPairForIdentifier:v7 leaveTombstone:0 error:&v16];
      id v15 = v16;

      [(HMDHomeManager *)self _eraseLocalHomeConfiguration];
      id v8 = v15;
    }
  }
}

- (id)mediaSystemForAppleMediaAccessory:(id)a3
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  int v5 = [(HMDHomeManager *)self homes];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v14;
    while (2)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = [*(id *)(*((void *)&v13 + 1) + 8 * i) mediaSystemForAppleMediaAccessory:v4];
        if (v10)
        {
          uint64_t v11 = (void *)v10;
          goto LABEL_11;
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }
  uint64_t v11 = 0;
LABEL_11:

  return v11;
}

- (id)destinationIdentifierForMediaSystem:(id)a3 role:(unint64_t)a4
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v7 = objc_msgSend(v6, "components", 0);
  uint64_t v8 = [v7 countByEnumeratingWithState:&v33 objects:v43 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v34;
LABEL_3:
    uint64_t v11 = 0;
    while (1)
    {
      if (*(void *)v34 != v10) {
        objc_enumerationMutation(v7);
      }
      uint64_t v12 = *(void **)(*((void *)&v33 + 1) + 8 * v11);
      long long v13 = [v12 role];
      uint64_t v14 = [v13 type];

      if (v14 == a4) {
        break;
      }
      if (v9 == ++v11)
      {
        uint64_t v9 = [v7 countByEnumeratingWithState:&v33 objects:v43 count:16];
        if (v9) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
    id v15 = v12;

    if (!v15) {
      goto LABEL_16;
    }
    long long v16 = [v15 accessory];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v17 = v16;
    }
    else {
      id v17 = 0;
    }
    id v18 = v17;

    id v19 = [v18 audioDestination];
    uint64_t v20 = [v19 uniqueIdentifier];

    if (v20)
    {
      id v21 = v20;
    }
    else
    {
      uint64_t v28 = (void *)MEMORY[0x1D9452090]();
      id v29 = self;
      id v30 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        id v31 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543874;
        uint64_t v38 = v31;
        __int16 v39 = 2112;
        id v40 = v15;
        __int16 v41 = 2112;
        id v42 = v18;
        _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_ERROR, "%{public}@Failed to get destination identifier on component: %@ accessory: %@", buf, 0x20u);
      }
    }
  }
  else
  {
LABEL_9:

LABEL_16:
    __int16 v22 = (void *)MEMORY[0x1D9452090]();
    id v23 = self;
    __int16 v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      id v25 = HMFGetLogIdentifier();
      uint64_t v26 = HMMediaSystemRoleTypeAsString();
      uint64_t v27 = [v6 components];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v38 = v25;
      __int16 v39 = 2112;
      id v40 = v26;
      __int16 v41 = 2112;
      id v42 = v27;
      _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_ERROR, "%{public}@Failed to get destination identifier due to no component with role: %@ components: %@", buf, 0x20u);
    }
    uint64_t v20 = 0;
  }

  return v20;
}

- (void)saveAssociatedGroupDataForPostMigrationStagingWithCurrentAccessory:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  int v5 = [v4 home];
  id v6 = [v5 uuid];

  uint64_t v7 = [(HMDHomeManager *)self userDefaults];
  uint64_t v8 = (void *)v7;
  if (v6 && v7)
  {
    uint64_t v9 = [HMDMediaGroupsStageManager alloc];
    uint64_t v10 = [(HMDHomeManager *)self userDefaults];
    uint64_t v11 = [(HMDMediaGroupsStageManager *)v9 initWithIdentifier:v6 userDefaults:v10];

    [(HMDMediaGroupsStageManager *)v11 saveAssociatedGroupDataForLegacyCurrentAccessory:v4];
  }
  else
  {
    uint64_t v12 = (void *)MEMORY[0x1D9452090]();
    long long v13 = self;
    uint64_t v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      id v15 = HMFGetLogIdentifier();
      int v16 = 138543874;
      id v17 = v15;
      __int16 v18 = 2112;
      id v19 = v6;
      __int16 v20 = 2112;
      id v21 = v8;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_ERROR, "%{public}@Failed to save associated group data due to missing homeUUID: %@ userDefaults: %@", (uint8_t *)&v16, 0x20u);
    }
  }
}

- (void)migrateLocalStereoPairDataForCurrentMediaSystem:(id)a3
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  int v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    uint64_t v37 = v8;
    __int16 v38 = 2112;
    id v39 = v4;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Migrating current media system: %@", buf, 0x16u);
  }
  uint64_t v9 = [v4 configuredName];
  uint64_t v10 = v9;
  if (v9)
  {
    id v11 = v9;
  }
  else
  {
    id v11 = [MEMORY[0x1E4F2E930] roomNameSentinel];
  }
  uint64_t v12 = v11;
  long long v13 = [v4 audioDestination];
  uint64_t v14 = [v13 audioGroupIdentifier];

  id v15 = [(HMDHomeManager *)v6 destinationIdentifierForMediaSystem:v4 role:1];
  int v16 = [(HMDHomeManager *)v6 destinationIdentifierForMediaSystem:v4 role:2];
  id v17 = [v4 home];
  __int16 v18 = [v17 uuid];

  if (v15 && v16 && v18)
  {
    long long v33 = v14;
    id v19 = v12;
    id v20 = objc_alloc(MEMORY[0x1E4F2E930]);
    id v21 = [v4 uuid];
    uint64_t v22 = (void *)[v20 initWithIdentifier:v21 parentIdentifier:v18 name:v12 defaultName:v10 == 0 associatedGroupIdentifier:v33 leftDestinationIdentifier:v15 rightDestinationIdentifier:v16];

    id v23 = [(HMDHomeManager *)v6 mediaGroupParticipantDataLocalStorage];
    __int16 v24 = [v4 uuid];
    [v23 updateAudioGroupIdentifier:v24];

    id v25 = [(HMDHomeManager *)v6 mediaGroupParticipantDataLocalStorage];
    uint64_t v26 = [v22 encodeToProtoBufferData];
    long long v35 = v26;
    uint64_t v27 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v35 count:1];
    [v25 updateBackupGroupData:v27];

    uint64_t v12 = v19;
    uint64_t v14 = v33;
  }
  else
  {
    uint64_t v28 = (void *)MEMORY[0x1D9452090]();
    id v29 = v6;
    id v30 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      long long v34 = v14;
      uint64_t v32 = v31 = v12;
      *(_DWORD *)long long buf = 138544130;
      uint64_t v37 = v32;
      __int16 v38 = 2112;
      id v39 = v15;
      __int16 v40 = 2112;
      __int16 v41 = v16;
      __int16 v42 = 2112;
      uint64_t v43 = v18;
      _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_ERROR, "%{public}@Failed to migrate current media system due to missing group data dependencies leftDestinationIdentifier: %@ rightDestinationIdentifier: %@ homeIdentifier: %@", buf, 0x2Au);

      uint64_t v12 = v31;
      uint64_t v14 = v34;
    }
  }
}

- (void)migrateLocalHomeTheaterDataForCurrentAccessory:(id)a3 currentMediaSystem:(id)a4
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v6 audioDestinationControllerData];
  if (v8)
  {
    uint64_t v9 = (void *)MEMORY[0x1D9452090]();
    uint64_t v10 = self;
    id v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = HMFGetLogIdentifier();
      int v23 = 138543618;
      __int16 v24 = v12;
      __int16 v25 = 2112;
      uint64_t v26 = v8;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Migrating current destination controller data: %@", (uint8_t *)&v23, 0x16u);
    }
    long long v13 = [(HMDHomeManager *)v10 mediaGroupParticipantDataLocalStorage];
    [v13 updateDestinationControllerData:v8];
  }
  uint64_t v14 = [v6 audioDestination];
  id v15 = (void *)[v14 mutableCopy];

  if (v15)
  {
    int v16 = [v7 uuid];
    if (v16)
    {
      [v15 setAudioGroupIdentifier:v16];
    }
    else
    {
      id v17 = [v15 audioGroupIdentifier];
      [v15 setAudioGroupIdentifier:v17];
    }
    __int16 v18 = (void *)MEMORY[0x1D9452090]();
    id v19 = self;
    id v20 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      id v21 = HMFGetLogIdentifier();
      int v23 = 138543618;
      __int16 v24 = v21;
      __int16 v25 = 2112;
      uint64_t v26 = v15;
      _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@Migrating current destination: %@", (uint8_t *)&v23, 0x16u);
    }
    uint64_t v22 = [(HMDHomeManager *)v19 mediaGroupParticipantDataLocalStorage];
    [v22 updateMediaDestination:v15];
  }
}

- (void)migrateLocalMediaGroupParticipantData
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = [(HMDHomeManager *)self _appleMediaAccessoryOfCurrentDevice];
  if (v3)
  {
    id v4 = [(HMDHomeManager *)self mediaSystemForAppleMediaAccessory:v3];
    int v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = self;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = HMFGetLogIdentifier();
      int v9 = 138543618;
      uint64_t v10 = v8;
      __int16 v11 = 2112;
      uint64_t v12 = v3;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Migrating local media group participant data for current accessory: %@", (uint8_t *)&v9, 0x16u);
    }
    [(HMDHomeManager *)v6 migrateLocalHomeTheaterDataForCurrentAccessory:v3 currentMediaSystem:v4];
    if (v4) {
      [(HMDHomeManager *)v6 migrateLocalStereoPairDataForCurrentMediaSystem:v4];
    }
    [(HMDHomeManager *)v6 saveAssociatedGroupDataForPostMigrationStagingWithCurrentAccessory:v3];
  }
}

- (void)initalizeMediaGroupParticipantDataLocalStorage
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = [(HMDHomeManager *)self uuid];
  id v4 = [(HMDHomeManager *)self userDefaults];
  int v5 = [(HMDHomeManager *)self eventForwarder];
  uint64_t v6 = [(HMDHomeManager *)self eventStoreReadHandle];
  id v7 = (void *)v6;
  if (v3 && v4 && v5 && v6)
  {
    uint64_t v8 = objc_alloc_init(HMDMediaGroupsAggregatorBackupReceiver);
    int v9 = [[HMDMediaGroupParticipantLocalDataStorage alloc] initWithIdentifier:v3 backUpReciever:v8 userDefaults:v4 eventForwarder:v5 eventStoreReadHandle:v7];
    [(HMDMediaGroupsAggregatorBackupReceiver *)v8 setDelegate:v9];
    [(HMDMediaGroupParticipantLocalDataStorage *)v9 setDataSource:self];
    [(HMDMediaGroupParticipantLocalDataStorage *)v9 setDelegate:self];
    mediaGroupParticipantDataLocalStorage = self->_mediaGroupParticipantDataLocalStorage;
    self->_mediaGroupParticipantDataLocalStorage = v9;
  }
  else
  {
    __int16 v11 = (void *)MEMORY[0x1D9452090]();
    uint64_t v12 = self;
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      int v15 = 138544386;
      int v16 = v14;
      __int16 v17 = 2112;
      __int16 v18 = v3;
      __int16 v19 = 2112;
      id v20 = v4;
      __int16 v21 = 2112;
      uint64_t v22 = v5;
      __int16 v23 = 2112;
      __int16 v24 = v7;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to configure media group participant data local storage with dependencies homeManagerUUID: %@ userDefaults: %@ eventForwarder: %@ eventStoreReadHandle: %@", (uint8_t *)&v15, 0x34u);
    }
  }
}

- (BOOL)_configureHomesImpl:(id)a3 uncommittedTransactions:(id)a4
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v67 = a4;
  [(HMDHomeManager *)self setHomes:v6];
  id v7 = [HMDNameValidator alloc];
  uint64_t v8 = [(HMDHomeManager *)self uuid];
  int v9 = [(HMDNameValidator *)v7 initWithUUID:v8];
  [(HMDHomeManager *)self setNameValidator:v9];

  uint64_t v10 = [(HMDHomeManager *)self notificationCenter];
  [v10 removeObserver:self name:@"HMDHomeCurrentDeviceHasReachableAccessories" object:0];

  long long v66 = [MEMORY[0x1E4F1CA48] array];
  BOOL v62 = [(HMDHomeManager *)self isResidentEnabled];
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  id obj = v6;
  uint64_t v11 = [obj countByEnumeratingWithState:&v70 objects:v80 count:16];
  if (!v11)
  {
    LOBYTE(v14) = 0;
    goto LABEL_35;
  }
  uint64_t v13 = v11;
  int v14 = 0;
  uint64_t v15 = *(void *)v71;
  *(void *)&long long v12 = 138543618;
  long long v61 = v12;
  long long v64 = self;
  do
  {
    uint64_t v16 = 0;
    do
    {
      if (*(void *)v71 != v15) {
        objc_enumerationMutation(obj);
      }
      __int16 v17 = *(void **)(*((void *)&v70 + 1) + 8 * v16);
      __int16 v18 = (void *)MEMORY[0x1D9452090]();
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        long long v69 = v18;
        id v19 = v17;
        id v20 = (void *)MEMORY[0x1D9452090]();
        __int16 v21 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          uint64_t v22 = v13;
          uint64_t v23 = v15;
          uint64_t v25 = v24 = v14;
          uint64_t v26 = [v19 name];
          uint64_t v27 = [v19 ownerName];
          *(_DWORD *)long long buf = 138543874;
          id v75 = v25;
          __int16 v76 = 2112;
          id v77 = v26;
          __int16 v78 = 2112;
          __int16 v79 = v27;
          _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@Found home %@ with administrator %@", buf, 0x20u);

          int v14 = v24;
          uint64_t v15 = v23;
          uint64_t v13 = v22;
          self = v64;
        }

        uint64_t v28 = [(HMDHomeManager *)self nameValidator];
        id v29 = [v19 uuid];
        id v30 = (id)[v28 addNamespace:v29];

        v14 |= [v19 configureWithHomeManager:self accessoriesPresent:v66 uncommittedTransactions:v67 source:0];
        id v31 = [v19 name];
        uint64_t v32 = [(HMDHomeManager *)self uuid];
        id v33 = [(HMDHomeManager *)self addName:v31 namespace:v32];

        long long v34 = [v19 uuid];
        -[HMDHomeManager _updateHome:configurationVersion:](self, "_updateHome:configurationVersion:", v34, [v19 configurationVersion]);

        if ([v19 isOwnerUser]
          && (+[HMDDeviceCapabilities deviceCapabilities],
              long long v35 = objc_claimAutoreleasedReturnValue(),
              int v36 = [v35 isResidentCapable],
              v35,
              v36))
        {
          int v65 = v14;
          uint64_t v37 = [(HMDHomeManager *)self notificationCenter];
          [v37 addObserver:self selector:sel_handleHomeCurrentDeviceResidentEligibleNotification_ name:@"HMDHomeCurrentDeviceHasReachableAccessories" object:v19];

          __int16 v38 = [(HMDHomeManager *)self appleAccountManager];
          uint64_t v39 = [v38 device];

          __int16 v40 = [(HMDHomeManager *)self capabilitiesController];
          __int16 v41 = [v40 currentResidentCapabilities];
          if (v41 && [(HMDHomeManager *)self isResidentEnabled])
          {
            int v42 = [v19 hasReachableAccessories];

            if (v42)
            {
              uint64_t v43 = [v19 residentCapableDevices];
              uint64_t v44 = (void *)v39;
              char v45 = [v43 containsObject:v39];

              int v14 = v65;
              if ((v45 & 1) == 0)
              {
                context = (void *)MEMORY[0x1D9452090]([v19 addResidentCapableDevice:v44]);
                HMFGetOSLogHandle();
                long long v46 = (HMDHomeManager *)objc_claimAutoreleasedReturnValue();
                int v65 = 1;
                if (os_log_type_enabled(&v46->super.super, OS_LOG_TYPE_INFO))
                {
                  long long v47 = HMFGetLogIdentifier();
                  unint64_t v48 = [v44 name];
                  id v49 = [v19 name];
                  *(_DWORD *)long long buf = 138543874;
                  id v75 = v47;
                  __int16 v76 = 2112;
                  id v77 = v48;
                  __int16 v78 = 2112;
                  __int16 v79 = v49;
                  int v65 = 1;
                  _os_log_impl(&dword_1D49D5000, &v46->super.super, OS_LOG_TYPE_INFO, "%{public}@Configuration changed: add resident capable device %@ to %@", buf, 0x20u);
                }
                goto LABEL_25;
              }
              goto LABEL_26;
            }
          }
          else
          {
          }
          int v14 = v65;
          if ([(HMDHomeManager *)self isResidentEnabled])
          {
            uint64_t v44 = (void *)v39;
            goto LABEL_26;
          }
          id v50 = [v19 residentCapableDevices];
          uint64_t v44 = (void *)v39;
          int v51 = [v50 containsObject:v39];

          if (v51)
          {
            context = (void *)MEMORY[0x1D9452090]();
            long long v46 = self;
            long long v52 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
            {
              long long v53 = HMFGetLogIdentifier();
              *(_DWORD *)long long buf = v61;
              id v75 = v53;
              __int16 v76 = 2112;
              id v77 = v19;
              _os_log_impl(&dword_1D49D5000, v52, OS_LOG_TYPE_INFO, "%{public}@Found ourselves as a resident in home, %@, enabling ourselves as a resident device", buf, 0x16u);
            }
            BOOL v62 = 1;
LABEL_25:
            __int16 v18 = v69;

            int v14 = v65;
          }
          else
          {
LABEL_26:
            __int16 v18 = v69;
          }
        }
        else
        {
          __int16 v18 = v69;
        }
      }
      ++v16;
    }
    while (v13 != v16);
    uint64_t v54 = [obj countByEnumeratingWithState:&v70 objects:v80 count:16];
    uint64_t v13 = v54;
  }
  while (v54);
LABEL_35:

  long long v55 = [(HMDHomeManager *)self cloudDataSyncStateFilter];
  long long v56 = [(HMDHomeManager *)self homes];
  objc_msgSend(v55, "updateTotalHomes:", objc_msgSend(v56, "count"));

  BOOL v57 = [(HMDHomeManager *)self isResidentEnabled];
  BOOL v58 = v62;
  if (v58 != v57) {
    [(HMDHomeManager *)self _updateResidentEnabledOnThisDevice:v58 forceNotify:0 message:0];
  }
  long long v59 = [(HMDHomeManager *)self idsServerBag];
  [v59 configure];

  return v14 & 1;
}

- (BOOL)_configureHomes:(id)a3 uncommittedTransactions:(id)a4
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  [(HMDHomeManager *)self startLocalTransport];
  uint64_t v8 = dispatch_group_create();
  dispatch_group_enter(v8);
  int v9 = +[HMDLocation sharedManager];
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  void v18[2] = __58__HMDHomeManager__configureHomes_uncommittedTransactions___block_invoke;
  v18[3] = &unk_1E6A19B30;
  uint64_t v10 = v8;
  id v19 = v10;
  [v9 beingConfigured:1 completionHandler:v18];

  dispatch_group_wait(v10, 0xFFFFFFFFFFFFFFFFLL);
  BOOL v11 = [(HMDHomeManager *)self _configureHomesImpl:v6 uncommittedTransactions:v7];
  long long v12 = (void *)MEMORY[0x1D9452090]();
  uint64_t v13 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    int v14 = HMFGetLogIdentifier();
    uint64_t v15 = HMFBooleanToString();
    *(_DWORD *)long long buf = 138543618;
    __int16 v21 = v14;
    __int16 v22 = 2112;
    uint64_t v23 = v15;
    _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Configured homes with result: %@", buf, 0x16u);
  }
  uint64_t v16 = +[HMDLocation sharedManager];
  [v16 beingConfigured:0 completionHandler:0];

  return v11;
}

void __58__HMDHomeManager__configureHomes_uncommittedTransactions___block_invoke(uint64_t a1)
{
}

- (id)_checkActionSetNameConflict:(id)a3 withNamespaceUUIDs:(id)a4
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [(HMDHomeManager *)self nameValidator];
  uint64_t v24 = v6;
  int v9 = [v8 despaceName:v6];

  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id obj = v7;
  uint64_t v27 = [obj countByEnumeratingWithState:&v33 objects:v38 count:16];
  if (!v27)
  {
    __int16 v21 = 0;
    goto LABEL_24;
  }
  uint64_t v26 = *(void *)v34;
  while (2)
  {
    for (uint64_t i = 0; i != v27; ++i)
    {
      if (*(void *)v34 != v26) {
        objc_enumerationMutation(obj);
      }
      BOOL v11 = [(HMDHomeManager *)self _homeWithUUID:*(void *)(*((void *)&v33 + 1) + 8 * i)];
      if (!v11)
      {
        __int16 v21 = [MEMORY[0x1E4F28C58] hmErrorWithCode:2];
        __int16 v22 = 0;
LABEL_23:

        goto LABEL_24;
      }
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      uint64_t v28 = v11;
      long long v12 = [v11 actionSets];
      uint64_t v13 = [v12 countByEnumeratingWithState:&v29 objects:v37 count:16];
      if (v13)
      {
        uint64_t v14 = v13;
        uint64_t v15 = *(void *)v30;
LABEL_9:
        uint64_t v16 = 0;
        while (1)
        {
          if (*(void *)v30 != v15) {
            objc_enumerationMutation(v12);
          }
          __int16 v17 = *(void **)(*((void *)&v29 + 1) + 8 * v16);
          __int16 v18 = [(HMDHomeManager *)self nameValidator];
          id v19 = [v17 name];
          id v20 = [v18 despaceName:v19];

          if ([v9 isEqualToString:v20]) {
            break;
          }

          if (v14 == ++v16)
          {
            uint64_t v14 = [v12 countByEnumeratingWithState:&v29 objects:v37 count:16];
            if (v14) {
              goto LABEL_9;
            }
            goto LABEL_15;
          }
        }
        __int16 v21 = [MEMORY[0x1E4F28C58] hmErrorWithCode:31];

        if (!v21) {
          goto LABEL_17;
        }
        __int16 v22 = v28;
        goto LABEL_23;
      }
LABEL_15:

LABEL_17:
    }
    __int16 v21 = 0;
    uint64_t v27 = [obj countByEnumeratingWithState:&v33 objects:v38 count:16];
    if (v27) {
      continue;
    }
    break;
  }
LABEL_24:

  return v21;
}

- (id)_checkNameConflict:(id)a3 withNamespaceUUIDs:(id)a4
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v7 = a4;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v17;
LABEL_3:
    uint64_t v11 = 0;
    while (1)
    {
      if (*(void *)v17 != v10) {
        objc_enumerationMutation(v7);
      }
      uint64_t v12 = *(void *)(*((void *)&v16 + 1) + 8 * v11);
      uint64_t v13 = [(HMDHomeManager *)self nameValidator];
      uint64_t v14 = [v13 checkForConflict:v6 namespace:v12];

      if (v14) {
        break;
      }
      if (v9 == ++v11)
      {
        uint64_t v9 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
        if (v9) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v14 = 0;
  }

  return v14;
}

- (void)stopLocalTransport
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v3 = (void *)MEMORY[0x1D9452090](self, a2);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v5 = HMFGetLogIdentifier();
    int v7 = 138543362;
    uint64_t v8 = v5;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_DEBUG, "%{public}@Stopping local transport", (uint8_t *)&v7, 0xCu);
  }
  id v6 = [(HMDHomeManager *)self messageDispatcher];
  [v6 configureHTTPTransport:0];
}

- (void)startLocalTransport
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = [(HMDHomeManager *)self appleAccountManager];
  id v4 = [v3 device];

  if (v4)
  {
    int v5 = [HMDHTTPDevice alloc];
    id v6 = [v4 identifier];
    int v7 = [(HMDHTTPDevice *)v5 initWithIdentifier:v6];

    uint64_t v8 = (void *)MEMORY[0x1D9452090]();
    uint64_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      int v13 = 138543618;
      uint64_t v14 = v10;
      __int16 v15 = 2112;
      long long v16 = v7;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Starting local transport for %@", (uint8_t *)&v13, 0x16u);
    }
    if ([(HMDHomeManager *)self isResidentEnabled])
    {
      uint64_t v11 = [(HMDHomeManager *)self messageDispatcher];
      [v11 enableMessageServer];
    }
    uint64_t v12 = [(HMDHomeManager *)self messageDispatcher];
    [v12 configureHTTPTransport:v7];
  }
}

- (id)messageDestination
{
  id v3 = objc_alloc(MEMORY[0x1E4F65488]);
  id v4 = [(HMDHomeManager *)self messageTargetUUID];
  int v5 = (void *)[v3 initWithTarget:v4];

  return v5;
}

- (void)accessoriesAreLocallyReachableOnTransientDevice:(BOOL)a3 forHome:(id)a4
{
  id v6 = a4;
  int v7 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __74__HMDHomeManager_accessoriesAreLocallyReachableOnTransientDevice_forHome___block_invoke;
  block[3] = &unk_1E6A18708;
  BOOL v11 = a3;
  void block[4] = self;
  id v10 = v6;
  id v8 = v6;
  dispatch_async(v7, block);
}

uint64_t __74__HMDHomeManager_accessoriesAreLocallyReachableOnTransientDevice_forHome___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _accessoriesAreLocallyReachableOnTransientDevice:*(unsigned __int8 *)(a1 + 48) forHome:*(void *)(a1 + 40)];
}

- (void)_setUniqueDeviceIdSalt:(id)a3
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  int v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v7 = HMFGetLogIdentifier();
    int v8 = 138543362;
    uint64_t v9 = v7;
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Saving the device identifier salt", (uint8_t *)&v8, 0xCu);
  }
  [(HMDHomeManager *)self _setHomeConfigurationKey:@"kUniqueDeviceIdentifierSaltkey" value:v4 applicationIdentifier:@"com.apple.homed.notbackedup"];
}

- (BOOL)_updateAccessoriesConfigured
{
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  if ([(HMDHomeManager *)self hasLoadedData])
  {
    long long v114 = 0u;
    long long v115 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    uint64_t v98 = self;
    id obj = [(HMDHomeManager *)self homes];
    uint64_t v101 = [obj countByEnumeratingWithState:&v112 objects:v121 count:16];
    if (v101)
    {
      uint64_t v107 = 0;
      char v3 = 0;
      int v106 = 0;
      uint64_t v104 = 0;
      char v103 = 0;
      char v4 = 0;
      uint64_t v100 = *(void *)v113;
      do
      {
        for (uint64_t i = 0; i != v101; ++i)
        {
          if (*(void *)v113 != v100) {
            objc_enumerationMutation(obj);
          }
          id v6 = *(void **)(*((void *)&v112 + 1) + 8 * i);
          long long v108 = 0u;
          long long v109 = 0u;
          long long v110 = 0u;
          long long v111 = 0u;
          id v105 = v6;
          int v7 = [v6 accessories];
          uint64_t v8 = [v7 countByEnumeratingWithState:&v108 objects:v120 count:16];
          if (v8)
          {
            uint64_t v9 = v8;
            uint64_t v102 = i;
            uint64_t v10 = *(void *)v109;
            do
            {
              for (uint64_t j = 0; j != v9; ++j)
              {
                if (*(void *)v109 != v10) {
                  objc_enumerationMutation(v7);
                }
                id v12 = *(id *)(*((void *)&v108 + 1) + 8 * j);
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  int v13 = v12;
                }
                else {
                  int v13 = 0;
                }
                id v14 = v13;

                if (v14)
                {
                  id v15 = v12;
                  objc_opt_class();
                  if (objc_opt_isKindOfClass()) {
                    long long v16 = v15;
                  }
                  else {
                    long long v16 = 0;
                  }
                  id v17 = v16;

                  if ([v17 isHomePod])
                  {
                    switch([v17 homePodVariant])
                    {
                      case 0:
                      case 3:
                        BYTE4(v104) = 1;
                        break;
                      case 1:
                        LOBYTE(v104) = 1;
                        break;
                      case 2:
                        char v103 = 1;
                        break;
                      default:
                        break;
                    }
                    if ([v17 requiresHomeAppForManagement]) {
                      v106 |= [v105 isOwnerUser];
                    }
                    LOBYTE(v107) = 1;
                  }
                  else
                  {
                    HIDWORD(v107) |= [v17 isAppleTV];
                  }
                }
                id v18 = v12;
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  long long v19 = v18;
                }
                else {
                  long long v19 = 0;
                }
                id v20 = v19;

                char v21 = [v20 hasTelevisionService];
                v3 |= v21;
              }
              uint64_t v9 = [v7 countByEnumeratingWithState:&v108 objects:v120 count:16];
            }
            while (v9);
            char v4 = 1;
            uint64_t i = v102;
          }
        }
        uint64_t v101 = [obj countByEnumeratingWithState:&v112 objects:v121 count:16];
      }
      while (v101);
    }
    else
    {
      uint64_t v107 = 0;
      char v3 = 0;
      LOBYTE(v106) = 0;
      uint64_t v104 = 0;
      char v103 = 0;
      char v4 = 0;
    }

    char v22 = v107 ^ HMHomeManagerAreAnySpeakersConfigured();
    if (v22)
    {
      uint64_t v23 = (void *)MEMORY[0x1D9452090]();
      uint64_t v24 = v98;
      uint64_t v25 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        uint64_t v26 = HMFGetLogIdentifier();
        uint64_t v27 = HMFBooleanToString();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v117 = v26;
        __int16 v118 = 2112;
        uint64_t v119 = v27;
        _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for speakers configured: %@", buf, 0x16u);
      }
      uint64_t v28 = (void *)MEMORY[0x1E4F1CFD0];
      if ((v107 & 1) == 0) {
        uint64_t v28 = (void *)MEMORY[0x1E4F1CFC8];
      }
      long long v29 = (void *)MEMORY[0x1D9452090]([(HMDHomeManager *)v24 _setHomeConfigurationKey:*MEMORY[0x1E4F2EE90] value:*v28]);
      long long v30 = v24;
      long long v31 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        long long v32 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v117 = v32;
        _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_DEFAULT, "%{public}@Posting speakers configured changed notification", buf, 0xCu);
      }
      long long v33 = [(HMDHomeManager *)v30 darwinNotificationProvider];
      [v33 notifyPost:*MEMORY[0x1E4F2D580]];
    }
    if ((v103 & 1) != areAnyHomePodMiniConfigured())
    {
      long long v34 = (void *)MEMORY[0x1D9452090]();
      long long v35 = v98;
      long long v36 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        uint64_t v37 = HMFGetLogIdentifier();
        __int16 v38 = HMFBooleanToString();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v117 = v37;
        __int16 v118 = 2112;
        uint64_t v119 = v38;
        _os_log_impl(&dword_1D49D5000, v36, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for HomePod Mini configured: %@", buf, 0x16u);
      }
      uint64_t v39 = (void *)MEMORY[0x1E4F1CFD0];
      if ((v103 & 1) == 0) {
        uint64_t v39 = (void *)MEMORY[0x1E4F1CFC8];
      }
      __int16 v40 = (void *)MEMORY[0x1D9452090]([(HMDHomeManager *)v35 _setHomeConfigurationKey:*MEMORY[0x1E4F2D658] value:*v39]);
      __int16 v41 = v35;
      int v42 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v43 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v117 = v43;
        _os_log_impl(&dword_1D49D5000, v42, OS_LOG_TYPE_DEFAULT, "%{public}@Posting HomePod Mini configured changed notification", buf, 0xCu);
      }
      uint64_t v44 = [(HMDHomeManager *)v41 darwinNotificationProvider];
      [v44 notifyPost:*MEMORY[0x1E4F2D458]];

      char v22 = 1;
    }
    if ((BYTE4(v104) & 1) != areAnyLargeHomePodConfigured())
    {
      char v45 = (void *)MEMORY[0x1D9452090]();
      long long v46 = v98;
      long long v47 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
      {
        unint64_t v48 = HMFGetLogIdentifier();
        id v49 = HMFBooleanToString();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v117 = v48;
        __int16 v118 = 2112;
        uint64_t v119 = v49;
        _os_log_impl(&dword_1D49D5000, v47, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for 2nd Gen HomePods configured: %@", buf, 0x16u);
      }
      id v50 = (void *)MEMORY[0x1E4F1CFD0];
      if ((v104 & 0x100000000) == 0) {
        id v50 = (void *)MEMORY[0x1E4F1CFC8];
      }
      int v51 = (void *)MEMORY[0x1D9452090]([(HMDHomeManager *)v46 _setHomeConfigurationKey:*MEMORY[0x1E4F2D858] value:*v50]);
      long long v52 = v46;
      long long v53 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v54 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v117 = v54;
        _os_log_impl(&dword_1D49D5000, v53, OS_LOG_TYPE_DEFAULT, "%{public}@Posting 2nd Gen HomePods configured changed notification", buf, 0xCu);
      }
      long long v55 = [(HMDHomeManager *)v52 darwinNotificationProvider];
      [v55 notifyPost:*MEMORY[0x1E4F2D4A0]];

      char v22 = 1;
    }
    if ((v104 & 1) != areAnyHomePodsConfigured())
    {
      long long v56 = (void *)MEMORY[0x1D9452090]();
      BOOL v57 = v98;
      BOOL v58 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
      {
        long long v59 = HMFGetLogIdentifier();
        long long v60 = HMFBooleanToString();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v117 = v59;
        __int16 v118 = 2112;
        uint64_t v119 = v60;
        _os_log_impl(&dword_1D49D5000, v58, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for HomePods configured: %@", buf, 0x16u);
      }
      long long v61 = (void *)MEMORY[0x1E4F1CFD0];
      if ((v104 & 1) == 0) {
        long long v61 = (void *)MEMORY[0x1E4F1CFC8];
      }
      BOOL v62 = (void *)MEMORY[0x1D9452090]([(HMDHomeManager *)v57 _setHomeConfigurationKey:*MEMORY[0x1E4F2D668] value:*v61]);
      long long v63 = v57;
      long long v64 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      {
        int v65 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v117 = v65;
        _os_log_impl(&dword_1D49D5000, v64, OS_LOG_TYPE_DEFAULT, "%{public}@Posting HomePods present configured changed notification", buf, 0xCu);
      }
      long long v66 = [(HMDHomeManager *)v63 darwinNotificationProvider];
      [v66 notifyPost:*MEMORY[0x1E4F2D460]];

      char v22 = 1;
    }
    [(HMDHomeManager *)v98 setHomePodsPresent:v107 & 1 inOwnedHomes:v106 & 1];
    if ((v3 & 1) != HMHomeManagerAreAnyTelevisionAccessoriesConfigured())
    {
      id v67 = (void *)MEMORY[0x1D9452090]();
      long long v68 = v98;
      long long v69 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
      {
        long long v70 = HMFGetLogIdentifier();
        long long v71 = HMFBooleanToString();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v117 = v70;
        __int16 v118 = 2112;
        uint64_t v119 = v71;
        _os_log_impl(&dword_1D49D5000, v69, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for televisions configured: %@", buf, 0x16u);
      }
      long long v72 = (void *)MEMORY[0x1E4F1CFD0];
      if ((v3 & 1) == 0) {
        long long v72 = (void *)MEMORY[0x1E4F1CFC8];
      }
      uint64_t v73 = [(HMDHomeManager *)v68 _setHomeConfigurationKey:*MEMORY[0x1E4F2E1B8] value:*v72];
      if (v3)
      {
        __int16 v74 = (void *)MEMORY[0x1D9452090](v73);
        id v75 = v68;
        __int16 v76 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
        {
          id v77 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543362;
          uint64_t v117 = v77;
          _os_log_impl(&dword_1D49D5000, v76, OS_LOG_TYPE_DEFAULT, "%{public}@Posting Television accessories added notification", buf, 0xCu);
        }
        __int16 v78 = [(HMDHomeManager *)v75 darwinNotificationProvider];
        [v78 notifyPost:*MEMORY[0x1E4F2D598]];
      }
      char v22 = 1;
    }
    if ((BYTE4(v107) & 1) != HMHomeManagerAreAnyAppleTVAccessoriesConfigured())
    {
      __int16 v79 = (void *)MEMORY[0x1D9452090]();
      id v80 = v98;
      uint64_t v81 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
      {
        id v82 = HMFGetLogIdentifier();
        id v83 = HMFBooleanToString();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v117 = v82;
        __int16 v118 = 2112;
        uint64_t v119 = v83;
        _os_log_impl(&dword_1D49D5000, v81, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for Apple TV accessories configured: %@", buf, 0x16u);
      }
      id v84 = (void *)MEMORY[0x1E4F1CFD0];
      if ((v107 & 0x100000000) == 0) {
        id v84 = (void *)MEMORY[0x1E4F1CFC8];
      }
      uint64_t v85 = [(HMDHomeManager *)v80 _setHomeConfigurationKey:*MEMORY[0x1E4F2C9E0] value:*v84];
      if ((v107 & 0x100000000) != 0)
      {
        uint64_t v86 = (void *)MEMORY[0x1D9452090](v85);
        id v87 = v80;
        id v88 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
        {
          id v89 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543362;
          uint64_t v117 = v89;
          _os_log_impl(&dword_1D49D5000, v88, OS_LOG_TYPE_DEFAULT, "%{public}@Posting Apple TV accessories added notification", buf, 0xCu);
        }
        id v90 = [(HMDHomeManager *)v87 darwinNotificationProvider];
        [v90 notifyPost:*MEMORY[0x1E4F2D300]];
      }
      char v22 = 1;
    }
    if ((v4 & 1) != HMHomeManagerAreAnyAccessoriesConfigured())
    {
      id v91 = (void *)MEMORY[0x1D9452090]();
      id v92 = v98;
      __int16 v93 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v93, OS_LOG_TYPE_INFO))
      {
        __int16 v94 = HMFGetLogIdentifier();
        id v95 = HMFBooleanToString();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v117 = v94;
        __int16 v118 = 2112;
        uint64_t v119 = v95;
        _os_log_impl(&dword_1D49D5000, v93, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for accessories configured: %@", buf, 0x16u);
      }
      __int16 v96 = (void *)MEMORY[0x1E4F1CFD0];
      if ((v4 & 1) == 0) {
        __int16 v96 = (void *)MEMORY[0x1E4F1CFC8];
      }
      [(HMDHomeManager *)v92 _setHomeConfigurationKey:*MEMORY[0x1E4F2EC20] value:*v96];
      char v22 = 1;
    }
  }
  else
  {
    char v22 = 0;
  }
  return v22 & 1;
}

- (void)setHomePodsPresent:(BOOL)a3 inOwnedHomes:(BOOL)a4
{
  BOOL v4 = a4;
  BOOL v5 = a3;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if ([(HMDHomeManager *)self speakersAreConfigured] != a3) {
    [(HMDHomeManager *)self setSpeakersAreConfigured:v5];
  }
  if (+[HMDDeviceCapabilities supportsHomeApp]
    && [(HMDHomeManager *)self speakersAreConfiguredInOwnedHomes] != v4)
  {
    uint64_t v7 = [(HMDHomeManager *)self setSpeakersAreConfiguredInOwnedHomes:v4];
    if (v4) {
      uint64_t v8 = 2;
    }
    else {
      uint64_t v8 = 1;
    }
    uint64_t v9 = (void *)MEMORY[0x1D9452090](v7);
    uint64_t v10 = self;
    BOOL v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      id v12 = HMFGetLogIdentifier();
      int v13 = IXStringForAppRemovability();
      [(HMDHomeManager *)v10 speakersAreConfiguredInOwnedHomes];
      id v14 = HMFBooleanToString();
      id v15 = HMFBooleanToString();
      *(_DWORD *)long long buf = 138544130;
      long long v19 = v12;
      __int16 v20 = 2112;
      char v21 = v13;
      __int16 v22 = 2112;
      uint64_t v23 = v14;
      __int16 v24 = 2112;
      uint64_t v25 = v15;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Setting Home app removability to %@ because HomePods present in owned homes changed from %@ -> %@", buf, 0x2Au);
    }
    uint64_t v16 = *MEMORY[0x1E4F2D1C8];
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = __50__HMDHomeManager_setHomePodsPresent_inOwnedHomes___block_invoke;
    v17[3] = &unk_1E6A19690;
    void v17[4] = v10;
    void v17[5] = v8;
    [MEMORY[0x1E4F6F528] setRemovability:v8 forAppWithBundleID:v16 completion:v17];
  }
}

void __50__HMDHomeManager_setHomePodsPresent_inOwnedHomes___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  BOOL v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  uint64_t v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = HMFGetLogIdentifier();
      uint64_t v9 = IXStringForAppRemovability();
      int v14 = 138543874;
      id v15 = v8;
      __int16 v16 = 2112;
      id v17 = v9;
      __int16 v18 = 2112;
      id v19 = v3;
      uint64_t v10 = "%{public}@Failed to set Home app removability to %@: %@";
      BOOL v11 = v7;
      os_log_type_t v12 = OS_LOG_TYPE_ERROR;
      uint32_t v13 = 32;
LABEL_6:
      _os_log_impl(&dword_1D49D5000, v11, v12, v10, (uint8_t *)&v14, v13);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    uint64_t v9 = IXStringForAppRemovability();
    int v14 = 138543618;
    id v15 = v8;
    __int16 v16 = 2112;
    id v17 = v9;
    uint64_t v10 = "%{public}@Successfully set Home app removability to %@";
    BOOL v11 = v7;
    os_log_type_t v12 = OS_LOG_TYPE_INFO;
    uint32_t v13 = 22;
    goto LABEL_6;
  }
}

- (void)updateHomeKitInUsePreferences
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if ([(HMDHomeManager *)self hasLoadedData])
  {
    BOOL v3 = [(HMDHomeManager *)self _updateIncomingInvitesPresent];
    BOOL v4 = [(HMDHomeManager *)self _updatePreferencesForConfiguredHomes];
    BOOL v5 = [(HMDHomeManager *)self _updatePreferencesForCurrentHome];
    BOOL v6 = [(HMDHomeManager *)self _updateAccessoriesConfigured];
    BOOL v7 = v6;
    if (v3 || v4 || v5 || v6)
    {
      uint64_t v8 = (void *)MEMORY[0x1D9452090]();
      uint64_t v9 = self;
      uint64_t v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        BOOL v11 = HMFGetLogIdentifier();
        int v12 = 138544386;
        uint32_t v13 = v11;
        __int16 v14 = 1024;
        BOOL v15 = v3;
        __int16 v16 = 1024;
        BOOL v17 = v4;
        __int16 v18 = 1024;
        BOOL v19 = v5;
        __int16 v20 = 1024;
        BOOL v21 = v7;
        _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Posting preferences changed notification due to change in incomingInvites: %{BOOL}d homes: %{BOOL}d}, currentHome: %{BOOL}d, accessoriesConfigured: %{BOOL}d", (uint8_t *)&v12, 0x24u);
      }
      -[HMDHomeManager _postPreferencesChangedNotification](v9);
    }
  }
}

- (void)_postPreferencesChangedNotification
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v2 = (void *)MEMORY[0x1D9452090]();
    id v3 = a1;
    BOOL v4 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v5 = HMFGetLogIdentifier();
      int v7 = 138543362;
      uint64_t v8 = v5;
      _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Posting preferences changed notification", (uint8_t *)&v7, 0xCu);
    }
    BOOL v6 = [v3 darwinNotificationProvider];
    [v6 notifyPost:*MEMORY[0x1E4F2D4F0]];
  }
}

- (BOOL)_updateIncomingInvitesPresent
{
  BOOL v3 = [(HMDHomeManager *)self hasLoadedData];
  if (v3)
  {
    int v4 = areIncomingInvitesPresent();
    BOOL v5 = [(HMDHomeManager *)self incomingInvitations];
    uint64_t v6 = [v5 count];

    int v7 = +[HMDBulletinBoard sharedBulletinBoard];
    [v7 refreshHomeBadgeNumber];

    if (v4 == (v6 != 0))
    {
      LOBYTE(v3) = 0;
    }
    else
    {
      uint64_t v8 = (void *)MEMORY[0x1E4F1CFC8];
      if (v6) {
        uint64_t v8 = (void *)MEMORY[0x1E4F1CFD0];
      }
      [(HMDHomeManager *)self _setHomeConfigurationKey:*MEMORY[0x1E4F2ED20] value:*v8];
      LOBYTE(v3) = 1;
    }
  }
  return v3;
}

- (BOOL)_updatePreferencesForCurrentHome
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  int v4 = [(HMDHomeManager *)self hasLoadedData];
  if (v4)
  {
    id v5 = objc_alloc(MEMORY[0x1E4F653F0]);
    uint64_t v6 = NSString;
    int v7 = MEMORY[0x1D94505D0](self, a2);
    uint64_t v8 = [v6 stringWithFormat:@"%@, %s:%ld", v7, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/HomeManager/HMDHomeManager.m", 8180];
    uint64_t v9 = [MEMORY[0x1E4F653F0] currentActivity];
    BOOL v21 = (void *)[v5 initWithName:v8 parent:v9];

    uint64_t v10 = [(HMDHomeManager *)self currentHomeUUID];
    if (v10)
    {
      BOOL v11 = [(HMDHomeManager *)self currentHomeUUID];
      int v12 = spiClientIdentifierForUUID(v11);
    }
    else
    {
      int v12 = 0;
    }

    uint32_t v13 = HMHomeManagerCurrentHomeSPIClientIdentifier();
    char v14 = HMFEqualObjects();
    if ((v14 & 1) == 0)
    {
      BOOL v15 = (void *)MEMORY[0x1D9452090]();
      __int16 v16 = self;
      HMFGetOSLogHandle();
      BOOL v17 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        __int16 v18 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v23 = v18;
        __int16 v24 = 2112;
        uint64_t v25 = v12;
        _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Setting the preference for current home SPI client identifier: %@", buf, 0x16u);
      }
      BOOL v19 = [v12 UUIDString];
      [(HMDHomeManager *)v16 _setHomeConfigurationKey:*MEMORY[0x1E4F2D080] value:v19];
    }
    __HMFActivityScopeLeave();

    LOBYTE(v4) = v14 ^ 1;
  }
  return v4;
}

- (BOOL)_updatePreferencesForConfiguredHomes
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (![(HMDHomeManager *)self hasLoadedData]) {
    return 0;
  }
  id v4 = objc_alloc(MEMORY[0x1E4F653F0]);
  id v5 = NSString;
  uint64_t v6 = MEMORY[0x1D94505D0](self, a2);
  int v7 = [v5 stringWithFormat:@"%@, %s:%ld", v6, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/HomeManager/HMDHomeManager.m", 8140];
  uint64_t v8 = [MEMORY[0x1E4F653F0] currentActivity];
  long long v33 = (void *)[v4 initWithName:v7 parent:v8];

  uint64_t v9 = [(HMDHomeManager *)self homes];
  unint64_t v10 = [v9 count];

  unint64_t v11 = HMHomeManagerConfiguredHomesCount();
  BOOL v12 = v10 != v11;
  if (v10 != v11)
  {
    uint32_t v13 = (void *)MEMORY[0x1D9452090]();
    char v14 = self;
    HMFGetOSLogHandle();
    BOOL v15 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      __int16 v16 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v35 = v16;
      __int16 v36 = 2048;
      unint64_t v37 = v10;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for configured homes count: %lu", buf, 0x16u);
    }
    uint64_t v17 = [NSNumber numberWithUnsignedInteger:v10];
    BOOL v18 = v10 > v11;
    BOOL v19 = (void *)MEMORY[0x1D9452090]([(HMDHomeManager *)v14 _setHomeConfigurationKey:*MEMORY[0x1E4F2D078] value:v17]);
    __int16 v20 = v14;
    if (v18)
    {
      HMFGetOSLogHandle();
      BOOL v21 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        id v35 = v22;
        _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Posting configured home added notification", buf, 0xCu);
      }
      uint64_t v23 = [(HMDHomeManager *)v20 darwinNotificationProvider];
      [v23 notifyPost:*MEMORY[0x1E4F2D330]];
    }
    else
    {
      HMFGetOSLogHandle();
      __int16 v24 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        id v35 = v25;
        _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_DEFAULT, "%{public}@Posting configured home removed notification", buf, 0xCu);
      }
      uint64_t v23 = [(HMDHomeManager *)v20 darwinNotificationProvider];
      [v23 notifyPost:*MEMORY[0x1E4F2D338]];
    }
  }
  if ((v10 != 0) != areHomesConfigured())
  {
    uint64_t v26 = (void *)MEMORY[0x1D9452090]();
    uint64_t v27 = self;
    HMFGetOSLogHandle();
    uint64_t v28 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v29 = (id)objc_claimAutoreleasedReturnValue();
      long long v30 = HMFBooleanToString();
      *(_DWORD *)long long buf = 138543618;
      id v35 = v29;
      __int16 v36 = 2112;
      unint64_t v37 = (unint64_t)v30;
      _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for are homes configured: %@", buf, 0x16u);
    }
    long long v31 = (void *)MEMORY[0x1E4F1CFC8];
    if (v10) {
      long long v31 = (void *)MEMORY[0x1E4F1CFD0];
    }
    [(HMDHomeManager *)v27 _setHomeConfigurationKey:*MEMORY[0x1E4F2C9E8] value:*v31];
    BOOL v12 = 1;
  }
  __HMFActivityScopeLeave();

  return v12;
}

- (void)_setHomeConfigurationKey:(id)a3 value:(void *)a4
{
}

- (void)_setHomeConfigurationKey:(id)a3 value:(void *)a4 applicationIdentifier:(__CFString *)a5
{
}

- (id)replaceName:(id)a3 withNewName:(id)a4 inNamespaces:(id)a5
{
  id v8 = a5;
  id v9 = a4;
  id v10 = a3;
  unint64_t v11 = [(HMDHomeManager *)self nameValidator];
  BOOL v12 = [v11 replaceName:v10 withNewName:v9 inNamespaces:v8];

  return v12;
}

- (id)removeName:(id)a3 namespace:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  id v8 = [(HMDHomeManager *)self nameValidator];
  id v9 = [v8 removeName:v7 namespace:v6];

  return v9;
}

- (id)addName:(id)a3 namespace:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  id v8 = [(HMDHomeManager *)self nameValidator];
  id v9 = [v8 addName:v7 namespace:v6];

  return v9;
}

- (id)_homeFromEventIdentifier:(id)a3
{
  id v4 = [a3 componentsSeparatedByString:@"/"];
  id v5 = [v4 firstObject];
  id v6 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v5];
  id v7 = [(HMDHomeManager *)self _homeWithUUID:v6];

  return v7;
}

- (id)_zoneInformationWithUUID:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self cloudZones];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);

  return v6;
}

- (id)_homeWithZoneID:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self homes];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithZoneID:", v4);

  return v6;
}

- (id)_homeWithAssistantIdentifier:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    id v5 = [(HMDHomeManager *)self homes];
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = __47__HMDHomeManager__homeWithAssistantIdentifier___block_invoke;
    v8[3] = &unk_1E6A16178;
    id v9 = v4;
    id v6 = objc_msgSend(v5, "hmf_objectPassingTest:", v8);
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

uint64_t __47__HMDHomeManager__homeWithAssistantIdentifier___block_invoke(uint64_t a1, void *a2)
{
  BOOL v3 = [a2 urlString];
  uint64_t v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

- (id)_homeWithUniqueIdentifier:(id)a3 forClientIdentifierSalt:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHomeManager *)self homes];
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = __68__HMDHomeManager__homeWithUniqueIdentifier_forClientIdentifierSalt___block_invoke;
  void v13[3] = &unk_1E6A161A0;
  id v14 = v7;
  id v15 = v6;
  id v9 = v6;
  id v10 = v7;
  unint64_t v11 = objc_msgSend(v8, "na_firstObjectPassingTest:", v13);

  return v11;
}

uint64_t __68__HMDHomeManager__homeWithUniqueIdentifier_forClientIdentifierSalt___block_invoke(uint64_t a1, void *a2)
{
  BOOL v3 = (void *)MEMORY[0x1E4F29128];
  uint64_t v4 = [a2 uuid];
  id v5 = objc_msgSend(v3, "hm_deriveUUIDFromBaseUUID:identifierSalt:", v4, *(void *)(a1 + 32));

  uint64_t v6 = [v5 isEqual:*(void *)(a1 + 40)];
  return v6;
}

- (id)_homeWithUUID:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    id v5 = [(HMDHomeManager *)self homes];
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = __32__HMDHomeManager__homeWithUUID___block_invoke;
    v8[3] = &unk_1E6A16178;
    id v9 = v4;
    uint64_t v6 = objc_msgSend(v5, "hmf_objectPassingTest:", v8);
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

uint64_t __32__HMDHomeManager__homeWithUUID___block_invoke(uint64_t a1, void *a2)
{
  BOOL v3 = [a2 uuid];
  uint64_t v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

- (id)_homesWithName:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self homes];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  id v9[2] = __33__HMDHomeManager__homesWithName___block_invoke;
  v9[3] = &unk_1E6A16178;
  id v10 = v4;
  id v6 = v4;
  id v7 = objc_msgSend(v5, "hmf_objectsPassingTest:", v9);

  return v7;
}

uint64_t __33__HMDHomeManager__homesWithName___block_invoke(uint64_t a1, void *a2)
{
  BOOL v3 = [a2 name];
  uint64_t v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

- (id)_homeWithName:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self homes];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  id v9[2] = __32__HMDHomeManager__homeWithName___block_invoke;
  v9[3] = &unk_1E6A16178;
  id v10 = v4;
  id v6 = v4;
  id v7 = objc_msgSend(v5, "hmf_objectPassingTest:", v9);

  return v7;
}

uint64_t __32__HMDHomeManager__homeWithName___block_invoke(uint64_t a1, void *a2)
{
  BOOL v3 = [a2 name];
  uint64_t v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

- (BOOL)checkConflictInHomeNamespaceWithName:(id)a3 options:(unint64_t)a4 namespaceUUID:(id)a5 error:(id *)a6
{
  char v8 = a4;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v11 = a5;
  id v12 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if ((v8 & 0xD) != 0)
  {
    if ((v8 & 1) == 0
      || ([(HMDHomeManager *)self nameValidator],
          uint32_t v13 = objc_claimAutoreleasedReturnValue(),
          [v13 validateName:v10],
          id v14 = objc_claimAutoreleasedReturnValue(),
          v13,
          !v14))
    {
      if (v11)
      {
        [v12 addObject:v11];
        if ((v8 & 4) == 0) {
          goto LABEL_26;
        }
      }
      else if ((v8 & 2) != 0)
      {
        id v28 = v10;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        uint64_t v17 = [(HMDHomeManager *)self homes];
        uint64_t v18 = [v17 countByEnumeratingWithState:&v29 objects:v33 count:16];
        if (v18)
        {
          uint64_t v19 = v18;
          uint64_t v20 = *(void *)v30;
          do
          {
            for (uint64_t i = 0; i != v19; ++i)
            {
              if (*(void *)v30 != v20) {
                objc_enumerationMutation(v17);
              }
              uint64_t v22 = [*(id *)(*((void *)&v29 + 1) + 8 * i) uuid];
              [v12 addObject:v22];
            }
            uint64_t v19 = [v17 countByEnumeratingWithState:&v29 objects:v33 count:16];
          }
          while (v19);
        }

        id v10 = v28;
        if ((v8 & 4) == 0) {
          goto LABEL_26;
        }
        uint64_t v23 = [(HMDHomeManager *)self uuid];
        [v12 addObject:v23];
      }
      else
      {
        __int16 v16 = [(HMDHomeManager *)self uuid];
        [v12 addObject:v16];

        if ((v8 & 4) == 0)
        {
LABEL_26:
          if ((v8 & 8) == 0
            || ([(HMDHomeManager *)self _checkActionSetNameConflict:v10 withNamespaceUUIDs:v12], (uint64_t v25 = objc_claimAutoreleasedReturnValue()) == 0))
          {
            BOOL v15 = 1;
            goto LABEL_33;
          }
          uint64_t v26 = v25;
          if (a6) {
            *a6 = v25;
          }

          goto LABEL_31;
        }
      }
      uint64_t v24 = [(HMDHomeManager *)self _checkNameConflict:v10 withNamespaceUUIDs:v12];
      if (!v24) {
        goto LABEL_26;
      }
      id v14 = (void *)v24;
    }
    if (a6) {
      *a6 = v14;
    }

LABEL_31:
    BOOL v15 = 0;
    goto LABEL_33;
  }
  if (!a6) {
    goto LABEL_31;
  }
  [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
  BOOL v15 = 0;
  *a6 = (id)objc_claimAutoreleasedReturnValue();
LABEL_33:

  return v15;
}

- (void)_handleQueryHomeNamespace:(id)a3
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 stringForKey:*MEMORY[0x1E4F2D510]];
  if (!v5)
  {
    uint32_t v13 = (void *)MEMORY[0x1D9452090]();
    id v14 = self;
    BOOL v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      __int16 v16 = HMFGetLogIdentifier();
      uint64_t v17 = [v4 messagePayload];
      *(_DWORD *)long long buf = 138543618;
      uint64_t v34 = v16;
      __int16 v35 = 2112;
      id v36 = v17;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_ERROR, "%{public}@No name found in query home namespace message payload: %@", buf, 0x16u);
    }
    id v11 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v12 = 20;
    goto LABEL_9;
  }
  unint64_t v6 = HMMaxLengthForNaming();
  if ([v5 length] > v6)
  {
    id v7 = (void *)MEMORY[0x1D9452090]();
    char v8 = self;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v10 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v34 = v10;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", buf, 0xCu);
    }
    id v11 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v12 = 46;
LABEL_9:
    uint64_t v18 = [v11 hmErrorWithCode:v12];
    [v4 respondWithError:v18];
    goto LABEL_18;
  }
  uint64_t v19 = [v4 numberForKey:*MEMORY[0x1E4F2D4D0]];
  uint64_t v20 = [v19 unsignedIntegerValue];

  uint64_t v18 = [v4 uuidForKey:@"kHomeUUID"];
  BOOL v21 = (void *)MEMORY[0x1D9452090]();
  uint64_t v22 = self;
  uint64_t v23 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    uint64_t v24 = HMFGetLogIdentifier();
    uint64_t v25 = HMHomeManagerNameValidationOptionsToString();
    *(_DWORD *)long long buf = 138543874;
    uint64_t v34 = v24;
    __int16 v35 = 2112;
    id v36 = v18;
    __int16 v37 = 2112;
    uint64_t v38 = v25;
    _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_INFO, "%{public}@Validating name for home UUID %@ with options: %@", buf, 0x20u);
  }
  id v32 = 0;
  BOOL v26 = [(HMDHomeManager *)v22 checkConflictInHomeNamespaceWithName:v5 options:v20 namespaceUUID:v18 error:&v32];
  id v27 = v32;
  if (v26)
  {
    [v4 respondWithSuccess];
  }
  else
  {
    id v28 = (void *)MEMORY[0x1D9452090]();
    long long v29 = v22;
    long long v30 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      long long v31 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v34 = v31;
      __int16 v35 = 2112;
      id v36 = v27;
      _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_ERROR, "%{public}@Name validation failed: %@", buf, 0x16u);
    }
    [v4 respondWithError:v27];
  }

LABEL_18:
}

- (void)_stopTrackingRemovedHomeUserMergeId:(id)a3
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  p_locuint64_t k = &self->_lock;
  os_unfair_lock_lock_with_options();
  if (v4
    && [(NSMutableSet *)self->_mergeIDsOfUsersOfRemovedSharedHomes containsObject:v4])
  {
    unint64_t v6 = (void *)MEMORY[0x1D9452090]([(NSMutableSet *)self->_mergeIDsOfUsersOfRemovedSharedHomes removeObject:v4]);
    id v7 = self;
    HMFGetOSLogHandle();
    char v8 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = HMFGetLogIdentifier();
      int v10 = 138543618;
      id v11 = v9;
      __int16 v12 = 2112;
      id v13 = v4;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Removing user with mergeID %@ from list of mergeIDs of homes removed locally", (uint8_t *)&v10, 0x16u);
    }
  }
  os_unfair_lock_unlock(p_lock);
}

- (void)_trackRemovedHomeUserMergeId:(id)a3
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  p_locuint64_t k = &self->_lock;
  os_unfair_lock_lock_with_options();
  if (v4
    && ([(NSMutableSet *)self->_mergeIDsOfUsersOfRemovedSharedHomes containsObject:v4] & 1) == 0)
  {
    unint64_t v6 = (void *)MEMORY[0x1D9452090]([(NSMutableSet *)self->_mergeIDsOfUsersOfRemovedSharedHomes addObject:v4]);
    id v7 = self;
    HMFGetOSLogHandle();
    char v8 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = HMFGetLogIdentifier();
      int v10 = 138543618;
      id v11 = v9;
      __int16 v12 = 2112;
      id v13 = v4;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Adding user with mergeID %@ to mergeID of homes removed locally", (uint8_t *)&v10, 0x16u);
    }
  }
  os_unfair_lock_unlock(p_lock);
}

- (void)removeHome:(id)a3
{
  id v4 = a3;
  os_unfair_lock_lock_with_options();
  [(NSMutableArray *)self->_homes removeObject:v4];
  os_unfair_lock_unlock(&self->_lock);
}

- (void)addHome:(id)a3
{
  id v4 = a3;
  os_unfair_lock_lock_with_options();
  [(NSMutableArray *)self->_homes addObject:v4];
  os_unfair_lock_unlock(&self->_lock);
}

- (void)setHomes:(id)a3
{
  id v6 = a3;
  os_unfair_lock_lock_with_options();
  id v4 = (NSMutableArray *)[v6 mutableCopy];
  homes = self->_homes;
  self->_homes = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (void)setCurrentHomeUUID:(id)a3
{
  char v8 = (NSUUID *)a3;
  os_unfair_lock_lock_with_options();
  overrideCurrentHomeUUIDToNil = self->_overrideCurrentHomeUUIDToNil;
  currentHomeUUIDOverride = v8;
  if (overrideCurrentHomeUUIDToNil)
  {
    if ([(HMFBoolean *)overrideCurrentHomeUUIDToNil BOOLValue]) {
      currentHomeUUIDOverride = 0;
    }
    else {
      currentHomeUUIDOverride = self->_currentHomeUUIDOverride;
    }
  }
  id v6 = currentHomeUUIDOverride;
  currentHomeUUID = self->_currentHomeUUID;
  self->_currentHomeUUID = v6;

  os_unfair_lock_unlock(&self->_lock);
}

- (void)setOverrideCurrentHomeUUIDToNil:(id)a3
{
  id v4 = (HMFBoolean *)a3;
  os_unfair_lock_lock_with_options();
  overrideCurrentHomeUUIDToNil = self->_overrideCurrentHomeUUIDToNil;
  self->_overrideCurrentHomeUUIDToNil = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (HMFBoolean)overrideCurrentHomeUUIDToNil
{
  p_locuint64_t k = &self->_lock;
  os_unfair_lock_lock_with_options();
  id v4 = self->_overrideCurrentHomeUUIDToNil;
  os_unfair_lock_unlock(p_lock);
  return v4;
}

- (void)setCurrentHomeUUIDOverride:(id)a3
{
  id v4 = (NSUUID *)a3;
  os_unfair_lock_lock_with_options();
  currentHomeUUIDOverride = self->_currentHomeUUIDOverride;
  self->_currentHomeUUIDOverride = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (NSUUID)currentHomeUUIDOverride
{
  p_locuint64_t k = &self->_lock;
  os_unfair_lock_lock_with_options();
  id v4 = self->_currentHomeUUIDOverride;
  os_unfair_lock_unlock(p_lock);
  return v4;
}

- (void)makeSureWeAreRunningInRightEnvironment:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v5 = (void *)MEMORY[0x1D9452090](self, a2);
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    id v9 = (void *)v8;
    int v10 = @"not known to exist yet";
    if (v3) {
      int v10 = @"exists";
    }
    int v12 = 138543618;
    uint64_t v13 = v8;
    __int16 v14 = 2112;
    BOOL v15 = v10;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Make sure we are running in the right environment after determining sentinel zone %@", (uint8_t *)&v12, 0x16u);
  }
  id v11 = [(HMDHomeManager *)v6 hh2FrameworkSwitch];
  [v11 makeSureWeAreRunningInRightEnvironment:v3];
}

- (void)_determineLegacyLocalChanges:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (v4)
  {
    objc_initWeak(&location, self);
    id v5 = [HMDBackingStoreLogChangesExistFetchOperation alloc];
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    void v16[2] = __47__HMDHomeManager__determineLegacyLocalChanges___block_invoke;
    v16[3] = &unk_1E6A16150;
    objc_copyWeak(&v18, &location);
    id v17 = v4;
    id v6 = [(HMDBackingStoreLogChangesExistFetchOperation *)v5 initWithNeedsPushTo:1 result:v16];
    id v7 = (void *)MEMORY[0x1D9452090]();
    uint64_t v8 = self;
    HMFGetOSLogHandle();
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      int v10 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      BOOL v21 = v10;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Fetching datastore for existing V3 changes", buf, 0xCu);
    }
    id v11 = [(HMDHomeManager *)v8 backingStore];
    [v11 submit:v6];

    objc_destroyWeak(&v18);
    objc_destroyWeak(&location);
  }
  else
  {
    int v12 = (void *)MEMORY[0x1D9452090]();
    uint64_t v13 = self;
    __int16 v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      BOOL v15 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      BOOL v21 = v15;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_ERROR, "%{public}@Completion block must be specified", buf, 0xCu);
    }
  }
}

void __47__HMDHomeManager__determineLegacyLocalChanges___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v11 = (void *)MEMORY[0x1D9452090]();
    id v12 = WeakRetained;
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      __int16 v14 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v38 = v14;
      __int16 v39 = 2112;
      id v40 = v9;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_DEBUG, "%{public}@Completed fetching datastore for existing V3 changes with error %@", buf, 0x16u);
    }
    if (v9)
    {
      BOOL v15 = [v12 workQueue];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __47__HMDHomeManager__determineLegacyLocalChanges___block_invoke_847;
      block[3] = &unk_1E6A19530;
      id v35 = *(id *)(a1 + 32);
      id v34 = v9;
      dispatch_async(v15, block);

      id v16 = v35;
    }
    else
    {
      if (v7 && [v7 count])
      {
        id v24 = v8;
        id v17 = [MEMORY[0x1E4F1CA80] set];
        long long v29 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        id v18 = [v7 allValues];
        uint64_t v19 = [v18 countByEnumeratingWithState:&v29 objects:v36 count:16];
        if (v19)
        {
          uint64_t v20 = v19;
          uint64_t v21 = *(void *)v30;
          do
          {
            uint64_t v22 = 0;
            do
            {
              if (*(void *)v30 != v21) {
                objc_enumerationMutation(v18);
              }
              [v17 addObjectsFromArray:*(void *)(*((void *)&v29 + 1) + 8 * v22++)];
            }
            while (v20 != v22);
            uint64_t v20 = [v18 countByEnumeratingWithState:&v29 objects:v36 count:16];
          }
          while (v20);
        }

        id v8 = v24;
      }
      else
      {
        id v17 = 0;
      }
      uint64_t v23 = [v12 workQueue];
      v25[0] = MEMORY[0x1E4F143A8];
      v25[1] = 3221225472;
      void v25[2] = __47__HMDHomeManager__determineLegacyLocalChanges___block_invoke_2;
      v25[3] = &unk_1E6A193D0;
      id v28 = *(id *)(a1 + 32);
      id v26 = v17;
      id v27 = v8;
      id v16 = v17;
      dispatch_async(v23, v25);
    }
  }
}

uint64_t __47__HMDHomeManager__determineLegacyLocalChanges___block_invoke_847(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, 0, *(void *)(a1 + 32));
}

void __47__HMDHomeManager__determineLegacyLocalChanges___block_invoke_2(void *a1)
{
  uint64_t v2 = a1[6];
  BOOL v3 = (void *)a1[4];
  if (v3)
  {
    id v7 = [v3 allObjects];
    (*(void (**)(uint64_t, id, void, void))(v2 + 16))(v2, v7, a1[5], 0);
  }
  else
  {
    uint64_t v4 = a1[5];
    id v5 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(v2 + 16);
    uint64_t v6 = MEMORY[0x1E4F1CBF0];
    v5(v2, v6, v4, 0);
  }
}

- (void)_determineLocalChangesAndSchedulePush
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  objc_initWeak(&location, self);
  BOOL v3 = [HMDBackingStoreLogChangesExistFetchOperation alloc];
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  void v19[2] = __55__HMDHomeManager__determineLocalChangesAndSchedulePush__block_invoke;
  void v19[3] = &unk_1E6A16128;
  objc_copyWeak(&v20, &location);
  uint64_t v4 = [(HMDBackingStoreLogChangesExistFetchOperation *)v3 initWithNeedsPushTo:2 result:v19];
  id v5 = (void *)MEMORY[0x1D9452090]();
  uint64_t v6 = self;
  HMFGetOSLogHandle();
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    id v8 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    uint64_t v23 = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Fetching datastore for existing V4 changes", buf, 0xCu);
  }
  id v9 = [(HMDHomeManager *)v6 backingStore];
  [v9 submit:v4];

  int v10 = [HMDBackingStoreLogChangesExistFetchOperation alloc];
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = __55__HMDHomeManager__determineLocalChangesAndSchedulePush__block_invoke_845;
  v17[3] = &unk_1E6A16128;
  objc_copyWeak(&v18, &location);
  id v11 = [(HMDBackingStoreLogChangesExistFetchOperation *)v10 initWithNeedsPushTo:1 result:v17];
  id v12 = (void *)MEMORY[0x1D9452090]();
  uint64_t v13 = v6;
  HMFGetOSLogHandle();
  __int16 v14 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    BOOL v15 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    uint64_t v23 = v15;
    _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_DEBUG, "%{public}@Fetching datastore for existing V3 changes", buf, 0xCu);
  }
  id v16 = [(HMDHomeManager *)v13 backingStore];
  [v16 submit:v11];

  objc_destroyWeak(&v18);
  objc_destroyWeak(&v20);
  objc_destroyWeak(&location);
}

void __55__HMDHomeManager__determineLocalChangesAndSchedulePush__block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v11 = (void *)MEMORY[0x1D9452090]();
    id v12 = WeakRetained;
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      __int16 v14 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v19 = v14;
      __int16 v20 = 2112;
      id v21 = v9;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_DEBUG, "%{public}@Completed fetching datastore for existing V4 changes with error %@", buf, 0x16u);
    }
    if (!v9 && [v7 count])
    {
      BOOL v15 = [v12 workQueue];
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 3221225472;
      void v16[2] = __55__HMDHomeManager__determineLocalChangesAndSchedulePush__block_invoke_843;
      v16[3] = &unk_1E6A197C8;
      void v16[4] = v12;
      id v17 = v7;
      dispatch_async(v15, v16);
    }
  }
}

void __55__HMDHomeManager__determineLocalChangesAndSchedulePush__block_invoke_845(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v11 = (void *)MEMORY[0x1D9452090]();
    id v12 = WeakRetained;
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      __int16 v14 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v18 = v14;
      __int16 v19 = 2112;
      id v20 = v9;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_DEBUG, "%{public}@Completed fetching datastore for existing V3 changes with error %@", buf, 0x16u);
    }
    if (!v9 && [v7 count])
    {
      BOOL v15 = [v12 workQueue];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __55__HMDHomeManager__determineLocalChangesAndSchedulePush__block_invoke_846;
      block[3] = &unk_1E6A19B30;
      void block[4] = v12;
      dispatch_async(v15, block);
    }
  }
}

uint64_t __55__HMDHomeManager__determineLocalChangesAndSchedulePush__block_invoke_846(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = *(id *)(a1 + 32);
  uint64_t v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    int v7 = 138543362;
    id v8 = v5;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@Changes detected scheduling push legacy zone", (uint8_t *)&v7, 0xCu);
  }
  return [*(id *)(a1 + 32) _pushChangesToCloud:0 withDelay:0.0];
}

void __55__HMDHomeManager__determineLocalChangesAndSchedulePush__block_invoke_843(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id obj = [*(id *)(a1 + 32) homes];
  uint64_t v2 = [obj countByEnumeratingWithState:&v31 objects:v41 count:16];
  if (v2)
  {
    uint64_t v4 = v2;
    uint64_t v5 = *(void *)v32;
    *(void *)&long long v3 = 138543874;
    long long v28 = v3;
    uint64_t v29 = v1;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v32 != v5) {
          objc_enumerationMutation(obj);
        }
        int v7 = *(void **)(*((void *)&v31 + 1) + 8 * i);
        id v8 = *(void **)(v1 + 40);
        uint64_t v9 = objc_msgSend(v7, "backingStore", v28);
        int v10 = [v9 root];
        id v11 = [v8 objectForKeyedSubscript:v10];

        if (v11)
        {
          id v12 = (void *)MEMORY[0x1D9452090]();
          id v13 = *(id *)(v1 + 32);
          __int16 v14 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            BOOL v15 = HMFGetLogIdentifier();
            [v7 name];
            uint64_t v16 = v4;
            v18 = uint64_t v17 = v5;
            __int16 v19 = [v7 zoneID];
            *(_DWORD *)long long buf = v28;
            id v36 = v15;
            __int16 v37 = 2112;
            uint64_t v38 = v18;
            __int16 v39 = 2112;
            id v40 = v19;
            _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Scheduling push for pending transactions for home/zone %@/%@", buf, 0x20u);

            uint64_t v5 = v17;
            uint64_t v4 = v16;
            uint64_t v1 = v29;
          }
          [*(id *)(v1 + 32) _uploadHomeToCloud:v7 withDelay:0.0];
        }
      }
      uint64_t v4 = [obj countByEnumeratingWithState:&v31 objects:v41 count:16];
    }
    while (v4);
  }

  id v20 = *(void **)(v1 + 40);
  uint64_t v21 = [*(id *)(v1 + 32) backingStore];
  uint64_t v22 = [v21 root];
  uint64_t v23 = [v20 objectForKeyedSubscript:v22];

  if (v23)
  {
    uint64_t v24 = (void *)MEMORY[0x1D9452090]();
    id v25 = *(id *)(v1 + 32);
    id v26 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      id v27 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v36 = v27;
      _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_INFO, "%{public}@Scheduling push for pending transactions for home manager zone", buf, 0xCu);
    }
    [*(id *)(v1 + 32) _uploadHomeManagerToCloudWithDelay:0.0];
  }
}

- (void)determineLocalChangesAndSchedulePush
{
  long long v3 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __54__HMDHomeManager_determineLocalChangesAndSchedulePush__block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v3, block);
}

uint64_t __54__HMDHomeManager_determineLocalChangesAndSchedulePush__block_invoke(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) syncManager];
  [v2 kick];

  long long v3 = *(void **)(a1 + 32);
  return [v3 _determineLocalChangesAndSchedulePush];
}

- (void)_handleTransactionsFetched:(id)a3 stagedTransaction:(id)a4 mustReplay:(id)a5 zoneID:(id)a6 cloudConflict:(BOOL)a7 transactionError:(id)a8 syncCompletion:(id)a9
{
  BOOL v111 = a7;
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  id v116 = a3;
  id v118 = a4;
  id v117 = a5;
  id v115 = a6;
  id v120 = a8;
  long long v114 = (void (**)(void))a9;
  __int16 v14 = (void *)MEMORY[0x1D9452090]();
  val = self;
  BOOL v15 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    uint64_t v16 = HMFGetLogIdentifier();
    uint64_t v17 = objc_msgSend(v120, "hmd_conciseCKError");
    id v18 = [v17 shortDescription];
    *(_DWORD *)long long buf = 138543874;
    uint64_t v153 = v16;
    __int16 v154 = 2112;
    id v155 = v115;
    __int16 v156 = 2112;
    uint64_t v157 = (uint64_t)v18;
    _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@Fetched data from zone %@ with error status: %@", buf, 0x20u);
  }
  if (!v120)
  {
    if ([(HMDHomeManager *)val backOffOperationInProgress])
    {
      id v20 = (void *)MEMORY[0x1D9452090]([(HMDHomeManager *)val setBackOffOperationInProgress:0]);
      uint64_t v21 = val;
      uint64_t v22 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        uint64_t v23 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v153 = v23;
        _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_INFO, "%{public}@Clearing that we were in a backoff operation", buf, 0xCu);
      }
    }
    [(HMDHomeManager *)val _resetCloudOperationRetryCounters];
    [(HMDHomeManager *)val setHomeDataLoadedFromArchive:1];
    uint64_t v24 = [(HMDHomeManager *)val cloudDataSyncStateFilter];
    [v24 updateLocalDataDecryptionFailed:0];

    long long v108 = [v116 replayTransaction:v117 stagedTransaction:v118];
    long long v113 = [(HMDHomeManager *)val _findHomeModelChange:v108];
    long long v109 = [(HMDHomeManager *)val _homeWithZoneID:v115];
    if (!v113)
    {
      long long v113 = 0;
      id v26 = v108;
LABEL_88:
      id v88 = v26;
      id v89 = -[HMDHomeManager _findHomeConfigurationModelChange:](val, "_findHomeConfigurationModelChange:");
      id v90 = v89;
      if (v89)
      {
        id v91 = [v89 objectChange];
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v92 = v91;
        }
        else {
          id v92 = 0;
        }
        id v93 = v92;

        if (v93 && [v118 hasValidChanges]) {
          [v93 setHomeHasLocalChanges:1];
        }
      }
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = __127__HMDHomeManager__handleTransactionsFetched_stagedTransaction_mustReplay_zoneID_cloudConflict_transactionError_syncCompletion___block_invoke_840;
      aBlock[3] = &unk_1E6A160D8;
      id v94 = v116;
      id v132 = v94;
      uint64_t v133 = val;
      id v95 = v115;
      id v134 = v95;
      BOOL v138 = v111;
      id v135 = v117;
      id v136 = v118;
      BOOL v139 = v109 != 0;
      __int16 v96 = v114;
      id v137 = v96;
      __int16 v97 = _Block_copy(aBlock);
      objc_initWeak(&location, val);
      if (v113)
      {
        uint64_t v98 = [v94 isLegacyTransaction];
        v122[0] = MEMORY[0x1E4F143A8];
        v122[1] = 3221225472;
        v122[2] = __127__HMDHomeManager__handleTransactionsFetched_stagedTransaction_mustReplay_zoneID_cloudConflict_transactionError_syncCompletion___block_invoke_841;
        v122[3] = &unk_1E6A16100;
        objc_copyWeak(&v129, &location);
        id v123 = v113;
        id v124 = v88;
        id v125 = v95;
        uint64_t v127 = v96;
        id v128 = v97;
        id v126 = v94;
        [(HMDHomeManager *)val _handleFetchModifyHome:v123 isLegacyTransaction:v98 completion:v122];

        objc_destroyWeak(&v129);
      }
      else if ([v88 count] || !v111)
      {
        -[HMDHomeManager _handleFetchObjectChange:home:isLegacyTransaction:completion:](val, "_handleFetchObjectChange:home:isLegacyTransaction:completion:", v88, v109, [v94 isLegacyTransaction], v97);
      }
      else
      {
        uint32_t v99 = (void *)MEMORY[0x1D9452090]();
        uint64_t v100 = val;
        HMFGetOSLogHandle();
        uint64_t v101 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v101, OS_LOG_TYPE_INFO))
        {
          uint64_t v102 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543362;
          uint64_t v153 = v102;
          _os_log_impl(&dword_1D49D5000, v101, OS_LOG_TYPE_INFO, "%{public}@Nothing to applied on cloud conflict fetch, force server token to nil", buf, 0xCu);
        }
        [v94 setUpdatedServerChangeToken:0];
        if (v97) {
          (*((void (**)(void *, void))v97 + 2))(v97, 0);
        }
      }
      objc_destroyWeak(&location);

      goto LABEL_106;
    }
    if ([v113 isDeleted])
    {
      long long v110 = (void *)MEMORY[0x1E4F1CBF0];
      id v25 = v108;
LABEL_87:

      id v26 = v110;
      goto LABEL_88;
    }
    id v27 = [v113 objectID];
    id v105 = [v118 changeWithObjectID:v27];

    if (v105 && [v105 isDeleted])
    {
      long long v28 = (void *)MEMORY[0x1D9452090]();
      uint64_t v29 = val;
      long long v30 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        long long v31 = HMFGetLogIdentifier();
        long long v32 = [v113 objectID];
        *(_DWORD *)long long buf = 138543618;
        uint64_t v153 = v31;
        __int16 v154 = 2112;
        id v155 = v32;
        _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_INFO, "%{public}@Dropping home %@ because it was deleted locally and has not yet been pushed", buf, 0x16u);
      }
      id v104 = 0;
      long long v110 = (void *)MEMORY[0x1E4F1CBF0];
      long long v33 = v113;
      char v103 = v108;
LABEL_42:
      long long v113 = 0;
LABEL_85:

      id v25 = v104;
      goto LABEL_86;
    }
    id v25 = [v113 objectChange];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      long long v34 = v25;
    }
    else {
      long long v34 = 0;
    }
    id v104 = v34;

    if (!v104)
    {
      char v103 = [v113 objectChange];
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v35 = v103;
      }
      else {
        id v35 = 0;
      }
      id v25 = v35;

      if (v25)
      {
        if (!v109) {
          goto LABEL_41;
        }
        id v36 = [v25 setProperties];
        int v37 = [v36 containsObject:@"configurationVersion"];

        if (!v37) {
          goto LABEL_41;
        }
        uint64_t v38 = [v25 configurationVersion];
        uint64_t v39 = [v38 integerValue];

        if (v39 < [v109 configurationVersion]
          || [v109 expectedConfigurationVersion]
          && [v109 expectedConfigurationVersion] > v39)
        {
          id v40 = (void *)MEMORY[0x1D9452090]();
          uint64_t v41 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
          {
            uint64_t v42 = HMFGetLogIdentifier();
            uint64_t v43 = [v109 name];
            uint64_t v44 = [v109 configurationVersion];
            uint64_t v45 = [v109 expectedConfigurationVersion];
            *(_DWORD *)long long buf = 138544386;
            uint64_t v153 = v42;
            __int16 v154 = 2112;
            id v155 = v43;
            __int16 v156 = 2048;
            uint64_t v157 = v44;
            __int16 v158 = 2048;
            uint64_t v159 = v45;
            __int16 v160 = 2048;
            uint64_t v161 = v39;
            _os_log_impl(&dword_1D49D5000, v41, OS_LOG_TYPE_INFO, "%{public}@Dropping shared home %@ merge because local configuration version %lu or expected configuration version %lu is less that remote %lu", buf, 0x34u);
          }

          id v104 = 0;
          long long v110 = (void *)MEMORY[0x1E4F1CBF0];
          long long v33 = v113;
        }
        else
        {
LABEL_41:
          id v104 = 0;
          long long v33 = v113;
          long long v110 = v108;
        }
        goto LABEL_42;
      }
LABEL_37:
      long long v110 = v108;
LABEL_86:

      goto LABEL_87;
    }
    if (v109)
    {

      [v118 hasValidChanges];
      long long v113 = 0;
      goto LABEL_37;
    }
    long long v110 = [MEMORY[0x1E4F1CA48] arrayWithArray:v108];
    [v110 removeObject:v113];
    char v103 = [(HMDHomeManager *)val _findHomeOwnerModelChange:v108];
    if (!v103)
    {
LABEL_82:
      long long v33 = [(HMDHomeManager *)val _findHomeSharedUserModelChange:v108];
      if (v33)
      {
        v140[0] = MEMORY[0x1E4F143A8];
        v140[1] = 3221225472;
        v140[2] = __127__HMDHomeManager__handleTransactionsFetched_stagedTransaction_mustReplay_zoneID_cloudConflict_transactionError_syncCompletion___block_invoke;
        v140[3] = &unk_1E6A160B0;
        id v141 = v104;
        uint64_t v142 = val;
        id v143 = v110;
        [v33 enumerateKeysAndObjectsUsingBlock:v140];
      }
      goto LABEL_85;
    }
    id v46 = objc_alloc(MEMORY[0x1E4F29128]);
    long long v47 = [v104 ownerUUID];
    long long v112 = (void *)[v46 initWithUUIDString:v47];

    if ([v103 count] == 1)
    {
      uint64_t v119 = [v103 firstObject];
      goto LABEL_75;
    }
    if ((unint64_t)[v103 count] < 2) {
      goto LABEL_80;
    }
    unint64_t v48 = (void *)MEMORY[0x1D9452090]();
    id v49 = val;
    id v50 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
    {
      int v51 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v153 = v51;
      _os_log_impl(&dword_1D49D5000, v50, OS_LOG_TYPE_INFO, "%{public}@Found duplicate owner models", buf, 0xCu);
    }
    long long v150 = 0u;
    long long v151 = 0u;
    long long v148 = 0u;
    long long v149 = 0u;
    id v52 = v103;
    uint64_t v53 = [v52 countByEnumeratingWithState:&v148 objects:v163 count:16];
    if (v53)
    {
      uint64_t v119 = 0;
      uint64_t v54 = *(void *)v149;
      do
      {
        for (uint64_t i = 0; i != v53; ++i)
        {
          if (*(void *)v149 != v54) {
            objc_enumerationMutation(v52);
          }
          long long v56 = *(void **)(*((void *)&v148 + 1) + 8 * i);
          BOOL v57 = [v56 objectID];
          int v58 = [v57 isEqual:v112];

          if (v58)
          {
            id v59 = v56;

            uint64_t v119 = v59;
          }
          long long v60 = [v56 objectChange];
          long long v61 = v60;
          if (v60) {
            [v60 dumpDebug:@" DUPLICATE: "];
          }
        }
        uint64_t v53 = [v52 countByEnumeratingWithState:&v148 objects:v163 count:16];
      }
      while (v53);

      if (v119) {
        goto LABEL_61;
      }
    }
    else
    {
    }
    uint64_t v119 = [v52 lastObject];
LABEL_61:
    BOOL v62 = (void *)MEMORY[0x1D9452090]();
    int v106 = v49;
    long long v63 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
    {
      long long v64 = HMFGetLogIdentifier();
      int v65 = [v119 objectID];
      long long v66 = [v65 UUIDString];
      *(_DWORD *)long long buf = 138543618;
      uint64_t v153 = v64;
      __int16 v154 = 2112;
      id v155 = v66;
      _os_log_impl(&dword_1D49D5000, v63, OS_LOG_TYPE_INFO, "%{public}@Selecting as owner model %@", buf, 0x16u);
    }
    long long v146 = 0u;
    long long v147 = 0u;
    long long v144 = 0u;
    long long v145 = 0u;
    id obj = v52;
    uint64_t v67 = [obj countByEnumeratingWithState:&v144 objects:v162 count:16];
    if (v67)
    {
      uint64_t v68 = *(void *)v145;
      do
      {
        for (uint64_t j = 0; j != v67; ++j)
        {
          if (*(void *)v145 != v68) {
            objc_enumerationMutation(obj);
          }
          long long v70 = *(void **)(*((void *)&v144 + 1) + 8 * j);
          if (([v70 isEqual:v119] & 1) == 0)
          {
            long long v71 = (void *)MEMORY[0x1D9452090]();
            long long v72 = v106;
            uint64_t v73 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
            {
              __int16 v74 = HMFGetLogIdentifier();
              id v75 = [v70 objectID];
              __int16 v76 = [v75 UUIDString];
              *(_DWORD *)long long buf = 138543618;
              uint64_t v153 = v74;
              __int16 v154 = 2112;
              id v155 = v76;
              _os_log_impl(&dword_1D49D5000, v73, OS_LOG_TYPE_INFO, "%{public}@Dropping user model from processing %@", buf, 0x16u);
            }
            [v110 removeObject:v70];
          }
        }
        uint64_t v67 = [obj countByEnumeratingWithState:&v144 objects:v162 count:16];
      }
      while (v67);
    }

LABEL_75:
    if (v119)
    {
      id v77 = [v119 objectID];
      char v78 = [v77 isEqual:v112];

      if ((v78 & 1) == 0)
      {
        __int16 v79 = (void *)MEMORY[0x1D9452090]();
        id v80 = val;
        uint64_t v81 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
        {
          id v82 = HMFGetLogIdentifier();
          id v83 = [v104 ownerUUID];
          id v84 = [v119 objectID];
          uint64_t v85 = [v84 UUIDString];
          *(_DWORD *)long long buf = 138543874;
          uint64_t v153 = v82;
          __int16 v154 = 2112;
          id v155 = v83;
          __int16 v156 = 2112;
          uint64_t v157 = (uint64_t)v85;
          _os_log_impl(&dword_1D49D5000, v81, OS_LOG_TYPE_INFO, "%{public}@Fixing up home ownerUUID from %@ to %@", buf, 0x20u);
        }
        uint64_t v86 = [v119 objectID];
        id v87 = [v86 UUIDString];
        [v104 setOwnerUUID:v87];
      }
      goto LABEL_81;
    }
LABEL_80:
    uint64_t v119 = 0;
LABEL_81:

    goto LABEL_82;
  }
  [v117 setOsTransaction:0];
  [v118 setOsTransaction:0];
  [v116 setOsTransaction:0];
  __int16 v19 = v114;
  if (v114)
  {
    v114[2]();
LABEL_106:
    __int16 v19 = v114;
  }
}

void __127__HMDHomeManager__handleTransactionsFetched_stagedTransaction_mustReplay_zoneID_cloudConflict_transactionError_syncCompletion___block_invoke(id *a1, void *a2, void *a3)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if ((unint64_t)[v6 count] < 2) {
    goto LABEL_31;
  }
  int v7 = [a1[4] uuid];
  id v45 = v5;
  uint64_t v8 = +[HMDUser UUIDWithUserID:0 forHomeIdentifier:v7 uuid:0 pairingIdentity:v5];

  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  id v9 = v6;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v53 objects:v62 count:16];
  id v46 = a1;
  uint64_t v43 = (void *)v8;
  id v44 = v6;
  if (v10)
  {
    uint64_t v11 = v10;
    id v12 = 0;
    uint64_t v13 = *(void *)v54;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v54 != v13) {
          objc_enumerationMutation(v9);
        }
        BOOL v15 = *(void **)(*((void *)&v53 + 1) + 8 * i);
        uint64_t v16 = [v15 objectID];
        int v17 = [v16 isEqual:v8];

        if (v17)
        {
          id v18 = v15;

          id v12 = v18;
        }
        __int16 v19 = [v15 objectChange];
        id v20 = v19;
        if (v19) {
          [v19 dumpDebug:@" DUPLICATE: "];
        }
      }
      uint64_t v11 = [v9 countByEnumeratingWithState:&v53 objects:v62 count:16];
    }
    while (v11);

    a1 = v46;
    uint64_t v21 = (uint64_t)v12;
    if (v12) {
      goto LABEL_17;
    }
  }
  else
  {
  }
  uint64_t v21 = [v9 lastObject];
LABEL_17:
  unint64_t v48 = (void *)v21;
  uint64_t v22 = (void *)MEMORY[0x1D9452090]();
  id v23 = a1[5];
  uint64_t v24 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    id v25 = HMFGetLogIdentifier();
    id v26 = [v48 objectID];
    id v27 = [v26 UUIDString];
    *(_DWORD *)long long buf = 138543618;
    id v59 = v25;
    __int16 v60 = 2112;
    long long v61 = v27;
    _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_INFO, "%{public}@Selecting as user model %@", buf, 0x16u);
  }
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  id v28 = v9;
  uint64_t v29 = [v28 countByEnumeratingWithState:&v49 objects:v57 count:16];
  if (v29)
  {
    uint64_t v30 = v29;
    uint64_t v31 = *(void *)v50;
    do
    {
      uint64_t v32 = 0;
      long long v33 = v48;
      uint64_t v47 = v30;
      do
      {
        if (*(void *)v50 != v31) {
          objc_enumerationMutation(v28);
        }
        long long v34 = *(void **)(*((void *)&v49 + 1) + 8 * v32);
        if (([v34 isEqual:v33] & 1) == 0)
        {
          id v35 = (void *)MEMORY[0x1D9452090]();
          id v36 = a1[5];
          int v37 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            uint64_t v38 = v31;
            id v40 = v39 = v28;
            uint64_t v41 = [v34 objectID];
            uint64_t v42 = [v41 UUIDString];
            *(_DWORD *)long long buf = 138543618;
            id v59 = v40;
            __int16 v60 = 2112;
            long long v61 = v42;
            _os_log_impl(&dword_1D49D5000, v37, OS_LOG_TYPE_INFO, "%{public}@Dropping user model from processing %@", buf, 0x16u);

            long long v33 = v48;
            a1 = v46;

            id v28 = v39;
            uint64_t v31 = v38;
            uint64_t v30 = v47;
          }

          [a1[6] removeObject:v34];
        }
        ++v32;
      }
      while (v30 != v32);
      uint64_t v30 = [v28 countByEnumeratingWithState:&v49 objects:v57 count:16];
    }
    while (v30);
  }

  id v6 = v44;
  id v5 = v45;
LABEL_31:
}

void __127__HMDHomeManager__handleTransactionsFetched_stagedTransaction_mustReplay_zoneID_cloudConflict_transactionError_syncCompletion___block_invoke_840(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  [*(id *)(a1 + 32) updateCloudCache];
  uint64_t v4 = [*(id *)(a1 + 40) _homeWithZoneID:*(void *)(a1 + 48)];
  if (*(unsigned char *)(a1 + 80) && ([*(id *)(a1 + 32) decryptionFailed] & 1) == 0 && v4) {
    [*(id *)(a1 + 40) _uploadHomeToCloud:v4 withDelay:0.0];
  }
  [*(id *)(a1 + 56) setOsTransaction:0];
  [*(id *)(a1 + 64) setOsTransaction:0];
  [*(id *)(a1 + 32) setOsTransaction:0];
  if (!*(unsigned char *)(a1 + 81) && v4 || [v4 migrationNeeded])
  {
    id v5 = [*(id *)(a1 + 32) cloudZone];
    [v4 migrateAfterCloudMerge:v5];
  }
  id v6 = (void *)MEMORY[0x1D9452090]([*(id *)(a1 + 40) _postMergeWatchPush]);
  id v7 = *(id *)(a1 + 40);
  uint64_t v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    int v11 = 138543362;
    id v12 = v9;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Object change handling complete", (uint8_t *)&v11, 0xCu);
  }
  uint64_t v10 = *(void *)(a1 + 72);
  if (v10) {
    (*(void (**)(uint64_t, id))(v10 + 16))(v10, v3);
  }
}

void __127__HMDHomeManager__handleTransactionsFetched_stagedTransaction_mustReplay_zoneID_cloudConflict_transactionError_syncCompletion___block_invoke_841(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  if (WeakRetained)
  {
    id v5 = [*(id *)(a1 + 32) objectChange];
    id v6 = [v5 uuid];
    id v7 = [WeakRetained _homeWithUUID:v6];

    if (!v7 && [*(id *)(a1 + 40) count])
    {
      uint64_t v8 = (void *)MEMORY[0x1D9452090]();
      id v9 = WeakRetained;
      uint64_t v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        int v11 = HMFGetLogIdentifier();
        uint64_t v12 = *(void *)(a1 + 48);
        int v16 = 138543618;
        int v17 = v11;
        __int16 v18 = 2112;
        uint64_t v19 = v12;
        _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Cannot process fetched changes on home because home is not found for zone %@", (uint8_t *)&v16, 0x16u);
      }
      uint64_t v13 = *(void *)(a1 + 64);
      if (!v13) {
        goto LABEL_13;
      }
      __int16 v14 = *(void (**)(void))(v13 + 16);
      goto LABEL_12;
    }
    if ([*(id *)(a1 + 40) count])
    {
      objc_msgSend(WeakRetained, "_handleFetchObjectChange:home:isLegacyTransaction:completion:", *(void *)(a1 + 40), v7, objc_msgSend(*(id *)(a1 + 56), "isLegacyTransaction"), *(void *)(a1 + 72));
    }
    else
    {
      uint64_t v15 = *(void *)(a1 + 72);
      if (v15)
      {
        __int16 v14 = *(void (**)(void))(v15 + 16);
LABEL_12:
        v14();
      }
    }
LABEL_13:
  }
}

- (void)_handleFetchObjectChange:(id)a3 home:(id)a4 isLegacyTransaction:(BOOL)a5 completion:(id)a6
{
  BOOL v48 = a5;
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  id v10 = a4;
  id v40 = v9;
  uint64_t v41 = (void (**)(id, void))a6;
  id v45 = v10;
  if (![v9 count])
  {
    int v11 = (void *)MEMORY[0x1D9452090]();
    uint64_t v12 = self;
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      __int16 v14 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      __int16 v60 = v14;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Nothing to applied", buf, 0xCu);
    }
    if (v41) {
      v41[2](v41, 0);
    }
    goto LABEL_36;
  }
  val = self;
  if (v10) {
    [v10 backingStore];
  }
  else {
    [(HMDHomeManager *)self backingStore];
  }
  uint64_t v42 = objc_msgSend(MEMORY[0x1E4F1CA80], "set", objc_claimAutoreleasedReturnValue());
  if (v48)
  {
    uint64_t v15 = +[HMDBackingStoreTransactionOptions defaultLegacyCloudOptions];
    int v16 = [v39 transaction:@"kTransactionUpdate" options:v15];
    id v44 = 0;
  }
  else
  {
    int v17 = +[HMDBackingStoreTransactionOptions defaultCloudOptions];
    int v16 = [v39 transaction:@"kTransactionUpdate" options:v17];

    uint64_t v15 = +[HMDBackingStoreTransactionOptions cloudRequiresPushOptions];
    id v44 = [v39 transaction:@"kTransactionUpdate" options:v15];
  }

  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  id obj = v9;
  uint64_t v18 = [obj countByEnumeratingWithState:&v55 objects:v63 count:16];
  if (!v18)
  {

    goto LABEL_35;
  }
  char v43 = 0;
  uint64_t v19 = *(void *)v56;
  do
  {
    for (uint64_t i = 0; i != v18; ++i)
    {
      if (*(void *)v56 != v19) {
        objc_enumerationMutation(obj);
      }
      uint64_t v21 = *(void **)(*((void *)&v55 + 1) + 8 * i);
      if (!v48)
      {
        if ([*(id *)(*((void *)&v55 + 1) + 8 * i) isPushAfterApply])
        {
          uint64_t v22 = (void *)MEMORY[0x1D9452090]();
          id v23 = val;
          uint64_t v24 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            id v25 = HMFGetLogIdentifier();
            id v26 = [v21 objectID];
            *(_DWORD *)long long buf = 138543618;
            __int16 v60 = v25;
            __int16 v61 = 2112;
            BOOL v62 = v26;
            _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_INFO, "%{public}@Change should be pushed after being applied: %@", buf, 0x16u);
          }
          id v27 = [v21 objectChange];
          [v44 add:v27 withMessage:0];
          char v43 = 1;
        }
        else
        {
          if (((v45 != 0) & [v21 isDropStagedAfterApply]) != 1) {
            goto LABEL_27;
          }
          id v28 = (void *)MEMORY[0x1D9452090]();
          uint64_t v29 = val;
          uint64_t v30 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
          {
            uint64_t v31 = HMFGetLogIdentifier();
            uint64_t v32 = [v21 objectID];
            *(_DWORD *)long long buf = 138543618;
            __int16 v60 = v31;
            __int16 v61 = 2112;
            BOOL v62 = v32;
            _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_INFO, "%{public}@Object conflict, drop all staged changes for object: %@", buf, 0x16u);
          }
          id v27 = [v21 rowIDs];
          [v42 addObjectsFromArray:v27];
        }
      }
LABEL_27:
      long long v33 = [v21 objectChange];
      [v16 add:v33 withMessage:0];
    }
    uint64_t v18 = [obj countByEnumeratingWithState:&v55 objects:v63 count:16];
  }
  while (v18);

  if (v43)
  {
    long long v34 = (void *)MEMORY[0x1D9452090]();
    id v35 = val;
    id v36 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      int v37 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      __int16 v60 = v37;
      _os_log_impl(&dword_1D49D5000, v36, OS_LOG_TYPE_INFO, "%{public}@Saving changes to push after applying", buf, 0xCu);
    }
    [v44 save];
    if (v45) {
      [(HMDHomeManager *)v35 _uploadHomeToCloud:v45 withDelay:0.0];
    }
  }
LABEL_35:
  objc_initWeak((id *)buf, val);
  v49[0] = MEMORY[0x1E4F143A8];
  v49[1] = 3221225472;
  void v49[2] = __79__HMDHomeManager__handleFetchObjectChange_home_isLegacyTransaction_completion___block_invoke;
  void v49[3] = &unk_1E6A16088;
  objc_copyWeak(&v53, (id *)buf);
  id v50 = v45;
  BOOL v54 = v48;
  long long v52 = v41;
  id v38 = v42;
  id v51 = v38;
  [v16 run:v49];

  objc_destroyWeak(&v53);
  objc_destroyWeak((id *)buf);

LABEL_36:
}

void __79__HMDHomeManager__handleFetchObjectChange_home_isLegacyTransaction_completion___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    id v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = WeakRetained;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = HMFGetLogIdentifier();
      id v9 = [*(id *)(a1 + 32) name];
      *(_DWORD *)long long buf = 138543874;
      id v26 = v8;
      __int16 v27 = 2112;
      id v28 = v9;
      __int16 v29 = 2112;
      id v30 = v3;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Applied object changes to home: %@ with error %@", buf, 0x20u);
    }
    if (v3)
    {
      if (*(void *)(a1 + 48))
      {
        id v10 = [v6 workQueue];
        v17[0] = MEMORY[0x1E4F143A8];
        v17[1] = 3221225472;
        v17[2] = __79__HMDHomeManager__handleFetchObjectChange_home_isLegacyTransaction_completion___block_invoke_831;
        v17[3] = &unk_1E6A19530;
        id v19 = *(id *)(a1 + 48);
        id v18 = v3;
        dispatch_async(v10, v17);
      }
    }
    else
    {
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = __79__HMDHomeManager__handleFetchObjectChange_home_isLegacyTransaction_completion___block_invoke_826;
      aBlock[3] = &unk_1E6A15C50;
      objc_copyWeak(&v23, (id *)(a1 + 56));
      id v21 = *(id *)(a1 + 32);
      char v24 = *(unsigned char *)(a1 + 64);
      id v22 = *(id *)(a1 + 48);
      int v11 = (void (**)(void))_Block_copy(aBlock);
      if ([*(id *)(a1 + 40) count])
      {
        uint64_t v12 = (void *)MEMORY[0x1D9452090]();
        id v13 = v6;
        HMFGetOSLogHandle();
        __int16 v14 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          uint64_t v15 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543362;
          id v26 = v15;
          _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Dropping changes for object conflicts", buf, 0xCu);
        }
        int v16 = [*(id *)(a1 + 40) allObjects];
        [v13 _updateModelChangesAsPushed:v16 home:*(void *)(a1 + 32) pushMask:3 completion:v11];
      }
      else
      {
        v11[2](v11);
      }

      objc_destroyWeak(&v23);
    }
  }
}

void __79__HMDHomeManager__handleFetchObjectChange_home_isLegacyTransaction_completion___block_invoke_826(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (id *)(a1 + 48);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    uint64_t v4 = *(void **)(a1 + 32);
    if (v4 && ([v4 isOwnerUser] & 1) == 0 && *(unsigned char *)(a1 + 56))
    {
      id v5 = (void *)MEMORY[0x1D9452090]();
      id v6 = WeakRetained;
      id v7 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint64_t v8 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        id v21 = v8;
        _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Saving changes to shared home from legacy merge", buf, 0xCu);
      }
      id v9 = [*(id *)(a1 + 32) sharedHomeModel];
      id v10 = [v6 backingStore];
      int v11 = +[HMDBackingStoreTransactionOptions defaultLegacyCloudOptions];
      uint64_t v12 = [v10 transaction:@"pushSharedHomeModel" options:v11];

      [v12 add:v9 withMessage:0];
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 3221225472;
      void v16[2] = __79__HMDHomeManager__handleFetchObjectChange_home_isLegacyTransaction_completion___block_invoke_830;
      v16[3] = &unk_1E6A18500;
      objc_copyWeak(&v19, v2);
      id v17 = *(id *)(a1 + 32);
      id v18 = *(id *)(a1 + 40);
      [v12 save:v16];

      objc_destroyWeak(&v19);
      goto LABEL_10;
    }
    if (*(void *)(a1 + 40))
    {
      id v13 = [WeakRetained workQueue];
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 3221225472;
      void v14[2] = __79__HMDHomeManager__handleFetchObjectChange_home_isLegacyTransaction_completion___block_invoke_3;
      v14[3] = &unk_1E6A186E0;
      id v15 = *(id *)(a1 + 40);
      dispatch_async(v13, v14);

      id v9 = v15;
LABEL_10:
    }
  }
}

uint64_t __79__HMDHomeManager__handleFetchObjectChange_home_isLegacyTransaction_completion___block_invoke_831(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void __79__HMDHomeManager__handleFetchObjectChange_home_isLegacyTransaction_completion___block_invoke_830(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v3 = [[HMDHomeSaveRequest alloc] initWithHome:*(void *)(a1 + 32) reason:@"kAddHomeRequestKey" information:0 postSyncNotification:1 objectChange:1];
    [WeakRetained saveWithRequest:v3];
    if (*(void *)(a1 + 40))
    {
      uint64_t v4 = [WeakRetained workQueue];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __79__HMDHomeManager__handleFetchObjectChange_home_isLegacyTransaction_completion___block_invoke_2;
      block[3] = &unk_1E6A186E0;
      id v6 = *(id *)(a1 + 40);
      dispatch_async(v4, block);
    }
  }
}

uint64_t __79__HMDHomeManager__handleFetchObjectChange_home_isLegacyTransaction_completion___block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __79__HMDHomeManager__handleFetchObjectChange_home_isLegacyTransaction_completion___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

- (void)_handleFetchModifyHome:(id)a3 isLegacyTransaction:(BOOL)a4 completion:(id)a5
{
  BOOL v6 = a4;
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a5;
  if (!v8)
  {
    id v10 = [(HMDHomeManager *)self workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __72__HMDHomeManager__handleFetchModifyHome_isLegacyTransaction_completion___block_invoke;
    block[3] = &unk_1E6A186E0;
    id v47 = v9;
    dispatch_async(v10, block);
  }
  id v40 = [MEMORY[0x1E4F1CA80] set];
  int v11 = [(HMDHomeManager *)self backingStore];
  if (v6)
  {
    uint64_t v12 = +[HMDBackingStoreTransactionOptions defaultLegacyCloudOptions];
    id v13 = [v11 transaction:@"kTransactionUpdate" options:v12];

    int v14 = 0;
    id v15 = 0;
LABEL_13:

    goto LABEL_14;
  }
  int v16 = +[HMDBackingStoreTransactionOptions defaultCloudOptions];
  id v13 = [v11 transaction:@"kTransactionUpdate" options:v16];

  id v17 = [(HMDHomeManager *)self backingStore];
  id v18 = +[HMDBackingStoreTransactionOptions cloudRequiresPushOptions];
  id v15 = [v17 transaction:@"kTransactionUpdate" options:v18];

  if ([v8 isPushAfterApply])
  {
    id v19 = (void *)MEMORY[0x1D9452090]();
    uint64_t v20 = self;
    id v21 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      uint64_t v22 = HMFGetLogIdentifier();
      id v23 = [v8 objectID];
      *(_DWORD *)long long buf = 138543618;
      long long v49 = v22;
      __int16 v50 = 2112;
      id v51 = v23;
      _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@Change should be pushed after being applied: %@", buf, 0x16u);
    }
    int v11 = [v8 objectChange];
    [v15 add:v11 withMessage:0];
    int v14 = 1;
    goto LABEL_13;
  }
  if ([v8 isDropStagedAfterApply])
  {
    char v24 = (void *)MEMORY[0x1D9452090]();
    id v25 = self;
    id v26 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      __int16 v27 = HMFGetLogIdentifier();
      id v28 = [v8 objectID];
      *(_DWORD *)long long buf = 138543618;
      long long v49 = v27;
      __int16 v50 = 2112;
      id v51 = v28;
      _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_INFO, "%{public}@Object conflict, drop all staged changes for object: %@", buf, 0x16u);
    }
    int v11 = [v8 rowIDs];
    [v40 addObjectsFromArray:v11];
    int v14 = 0;
    goto LABEL_13;
  }
  int v14 = 0;
LABEL_14:
  __int16 v29 = [v8 objectChange];
  [v13 add:v29 withMessage:0];

  if (v14)
  {
    id v30 = (void *)MEMORY[0x1D9452090]();
    uint64_t v31 = self;
    uint64_t v32 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      long long v33 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      long long v49 = v33;
      _os_log_impl(&dword_1D49D5000, v32, OS_LOG_TYPE_INFO, "%{public}@Saving changes to push after applying", buf, 0xCu);
    }
    [v15 save];
    long long v34 = [v8 objectChange];
    id v35 = [v34 uuid];
    id v36 = [(HMDHomeManager *)v31 _homeWithUUID:v35];

    if (v36) {
      [(HMDHomeManager *)v31 _uploadHomeToCloud:v36 withDelay:0.0];
    }
  }
  objc_initWeak((id *)buf, self);
  v41[0] = MEMORY[0x1E4F143A8];
  v41[1] = 3221225472;
  v41[2] = __72__HMDHomeManager__handleFetchModifyHome_isLegacyTransaction_completion___block_invoke_823;
  v41[3] = &unk_1E6A165C8;
  objc_copyWeak(&v45, (id *)buf);
  id v37 = v9;
  id v44 = v37;
  id v38 = v8;
  id v42 = v38;
  id v39 = v40;
  id v43 = v39;
  [v13 run:v41];

  objc_destroyWeak(&v45);
  objc_destroyWeak((id *)buf);
}

uint64_t __72__HMDHomeManager__handleFetchModifyHome_isLegacyTransaction_completion___block_invoke(uint64_t a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    uint64_t v5 = v2;
    uint64_t v3 = (*(uint64_t (**)(void))(v3 + 16))();
    uint64_t v2 = v5;
  }
  return MEMORY[0x1F41817F8](v3, v2);
}

void __72__HMDHomeManager__handleFetchModifyHome_isLegacyTransaction_completion___block_invoke_823(id *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 7);
  if (WeakRetained)
  {
    uint64_t v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = WeakRetained;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v26 = v8;
      __int16 v27 = 2112;
      id v28 = v3;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Home modified with completed with with error %@", buf, 0x16u);
    }
    if (v3)
    {
      if (a1[6])
      {
        id v9 = [v6 workQueue];
        v19[0] = MEMORY[0x1E4F143A8];
        v19[1] = 3221225472;
        void v19[2] = __72__HMDHomeManager__handleFetchModifyHome_isLegacyTransaction_completion___block_invoke_825;
        void v19[3] = &unk_1E6A19530;
        id v21 = a1[6];
        id v20 = v3;
        dispatch_async(v9, v19);
      }
    }
    else
    {
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = __72__HMDHomeManager__handleFetchModifyHome_isLegacyTransaction_completion___block_invoke_824;
      aBlock[3] = &unk_1E6A15DB8;
      objc_copyWeak(&v24, a1 + 7);
      id v23 = a1[6];
      id v10 = (void (**)(void))_Block_copy(aBlock);
      int v11 = [a1[4] objectChange];
      uint64_t v12 = [v11 uuid];
      id v13 = [v6 _homeWithUUID:v12];

      if (v13 && [a1[5] count])
      {
        int v14 = (void *)MEMORY[0x1D9452090]();
        id v15 = v6;
        HMFGetOSLogHandle();
        int v16 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          id v17 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543362;
          id v26 = v17;
          _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, "%{public}@Dropped changes for object conflicts", buf, 0xCu);
        }
        id v18 = [a1[5] allObjects];
        [v15 _updateModelChangesAsPushed:v18 home:v13 pushMask:3 completion:v10];
      }
      else
      {
        v10[2](v10);
      }

      objc_destroyWeak(&v24);
    }
  }
}

void __72__HMDHomeManager__handleFetchModifyHome_isLegacyTransaction_completion___block_invoke_824(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained && *(void *)(a1 + 32))
  {
    uint64_t v4 = [WeakRetained workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __72__HMDHomeManager__handleFetchModifyHome_isLegacyTransaction_completion___block_invoke_2;
    block[3] = &unk_1E6A186E0;
    id v6 = *(id *)(a1 + 32);
    dispatch_async(v4, block);
  }
}

uint64_t __72__HMDHomeManager__handleFetchModifyHome_isLegacyTransaction_completion___block_invoke_825(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t __72__HMDHomeManager__handleFetchModifyHome_isLegacyTransaction_completion___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

- (void)_runFetchHomeFromCloudZone:(id)a3 cloudConflict:(BOOL)a4 syncCompletion:(id)a5
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a5;
  BOOL v10 = [(HMDHomeManager *)self hasiCloudAndControllerKey];
  int v11 = (void *)MEMORY[0x1D9452090]();
  if (v10)
  {
    uint64_t v12 = (void *)MEMORY[0x1D9452090]();
    id v13 = self;
    int v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v31 = v15;
      __int16 v32 = 2112;
      id v33 = v8;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_DEFAULT, "%{public}@Fetching home zone changes from the cloud: %@", buf, 0x16u);
    }
    int v16 = [(HMDHomeManager *)v13 cloudDataSyncManager];
    id v17 = [v16 cloudCache];

    id v18 = [v8 UUIDString];
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 3221225472;
    void v25[2] = __74__HMDHomeManager__runFetchHomeFromCloudZone_cloudConflict_syncCompletion___block_invoke;
    v25[3] = &unk_1E6A16060;
    void v25[4] = v13;
    id v26 = v8;
    id v27 = v18;
    id v28 = v9;
    BOOL v29 = a4;
    id v19 = v18;
    [v17 homeZoneWithName:v19 owner:&stru_1F2C9F1A8 completion:v25];
  }
  else
  {
    id v20 = self;
    id v21 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = HMFGetLogIdentifier();
      id v23 = [v8 UUIDString];
      *(_DWORD *)long long buf = 138543618;
      uint64_t v31 = v22;
      __int16 v32 = 2112;
      id v33 = v23;
      _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Dropping zone fetch to %@.", buf, 0x16u);
    }
    if (v9)
    {
      id v24 = [MEMORY[0x1E4F28C58] hmErrorWithCode:75 description:@"Operation was cancelled before it could run" reason:@"iCloud & Controller key was not available" suggestion:@"Make sure that you are signed into iCloud account"];
      (*((void (**)(id, void *))v9 + 2))(v9, v24);
    }
  }
}

void __74__HMDHomeManager__runFetchHomeFromCloudZone_cloudConflict_syncCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) _homeWithZoneID:*(void *)(a1 + 40)];
  BOOL v8 = v7 == 0;

  uint64_t v23 = 0;
  id v24 = &v23;
  uint64_t v25 = 0x3032000000;
  id v26 = __Block_byref_object_copy__170059;
  id v27 = __Block_byref_object_dispose__170060;
  id v28 = [[HMDCloudTransaction alloc] initWithType:4 temporaryCache:0 noLocalData:v8];
  [(id)v24[5] updateCloudZone:v5];
  id v9 = (void *)[objc_alloc(MEMORY[0x1E4F654E0]) initWithName:@"com.apple.homed.fetch-from-zone"];
  [(id)v24[5] setOsTransaction:v9];

  objc_initWeak(&location, *(id *)(a1 + 32));
  BOOL v10 = [*(id *)(a1 + 32) cloudDataSyncManager];
  uint64_t v11 = v24[5];
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = __74__HMDHomeManager__runFetchHomeFromCloudZone_cloudConflict_syncCompletion___block_invoke_2;
  void v13[3] = &unk_1E6A16038;
  objc_copyWeak(&v19, &location);
  id v18 = &v23;
  id v14 = *(id *)(a1 + 40);
  id v17 = *(id *)(a1 + 56);
  id v15 = *(id *)(a1 + 48);
  BOOL v20 = v8;
  id v12 = v5;
  id v16 = v12;
  char v21 = *(unsigned char *)(a1 + 64);
  [v10 fetchTransaction:v11 completionHandler:v13];

  objc_destroyWeak(&v19);
  objc_destroyWeak(&location);
  _Block_object_dispose(&v23, 8);
}

void __74__HMDHomeManager__runFetchHomeFromCloudZone_cloudConflict_syncCompletion___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = [WeakRetained logEventSubmitter];
    id v7 = +[HMDDecryptionCompletedLogEvent decryptionCompletedWithFailure:](HMDDecryptionCompletedLogEvent, "decryptionCompletedWithFailure:", [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) decryptionFailed]);
    [v6 submitLogEvent:v7];

    BOOL v8 = [v5 _zoneInformationWithUUID:*(void *)(a1 + 32)];
    id v9 = _Block_copy(*(const void **)(a1 + 56));
    if (!v3 && ![*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) decryptionFailed])
    {
      if (v8)
      {
        [v8 setFetchFailed:0];
        if (([v8 isZoneCreated] & 1) == 0) {
          [v5 addTransactionAfterPush:v8];
        }
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 3221225472;
        aBlock[2] = __74__HMDHomeManager__runFetchHomeFromCloudZone_cloudConflict_syncCompletion___block_invoke_820;
        aBlock[3] = &unk_1E6A15FE8;
        id v59 = v8;
        __int16 v60 = v5;
        char v62 = *(unsigned char *)(a1 + 80);
        long long v41 = *(_OWORD *)(a1 + 56);
        id v32 = (id)v41;
        long long v61 = v41;
        id v33 = _Block_copy(aBlock);
      }
      else
      {
        id v33 = v9;
      }
      id v9 = objc_msgSend(v5, "_homeWithZoneID:", *(void *)(a1 + 32), (void)v41);
      uint64_t v34 = [[HMDCloudTransaction alloc] initWithType:4 temporaryCache:1];
      [(HMDCloudTransaction *)v34 updateCloudZone:*(void *)(a1 + 48)];
      if (v9)
      {
        id v35 = [[HMDCloudTransaction alloc] initWithType:4 temporaryCache:1];
        [(HMDCloudTransaction *)v35 updateCloudZone:*(void *)(a1 + 48)];
        v50[0] = MEMORY[0x1E4F143A8];
        v50[1] = 3221225472;
        v50[2] = __74__HMDHomeManager__runFetchHomeFromCloudZone_cloudConflict_syncCompletion___block_invoke_821;
        v50[3] = &unk_1E6A16010;
        uint64_t v36 = *(void *)(a1 + 64);
        void v50[4] = v5;
        id v51 = v34;
        uint64_t v56 = v36;
        uint64_t v52 = v35;
        id v37 = *(id *)(a1 + 32);
        char v57 = *(unsigned char *)(a1 + 81);
        id v53 = v37;
        id v54 = 0;
        id v55 = v33;
        id v38 = v33;
        id v39 = v35;
        [v5 _loadHomeModelChanges:v34 mustReplay:v39 legacyPush:0 home:v9 completion:v50];
      }
      else
      {
        v43[0] = MEMORY[0x1E4F143A8];
        v43[1] = 3221225472;
        v43[2] = __74__HMDHomeManager__runFetchHomeFromCloudZone_cloudConflict_syncCompletion___block_invoke_2_822;
        v43[3] = &unk_1E6A15D40;
        uint64_t v48 = *(void *)(a1 + 64);
        void v43[4] = v5;
        id v44 = v34;
        id v40 = *(id *)(a1 + 32);
        char v49 = *(unsigned char *)(a1 + 81);
        id v45 = v40;
        id v46 = 0;
        id v47 = v33;
        id v39 = v33;
        [v5 _loadHomeManagerTransactionsToPush:v34 mustReplay:0 forLegacyPush:0 includeAllChanges:1 completion:v43];
      }
      goto LABEL_33;
    }
    uint64_t v10 = [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) wasZoneDeleted];
    if (v10)
    {
      uint64_t v11 = [v5 _zoneInformationWithUUID:*(void *)(a1 + 32)];
      if ([v11 isZoneCreated])
      {
        id v12 = [v5 _homeWithZoneID:*(void *)(a1 + 32)];
        if (!v12)
        {
          id v13 = [v5 cloudDataSyncManager];
          [v13 removeHomeZoneName:*(void *)(a1 + 40)];

          id v14 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:*(void *)(a1 + 40)];
          [v5 _removeCloudZone:v14 updateHomeManager:1];
        }
      }
    }
    else
    {
      if (v8) {
        uint64_t v10 = [v8 setFetchFailed:1];
      }
      id v15 = (void *)MEMORY[0x1D9452090](v10);
      id v16 = v5;
      id v17 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        id v18 = HMFGetLogIdentifier();
        objc_msgSend(v3, "hmd_conciseCKError");
        id v42 = v8;
        v20 = id v19 = v9;
        char v21 = [v20 shortDescription];
        *(_DWORD *)long long buf = 138543618;
        uint64_t v64 = v18;
        __int16 v65 = 2114;
        long long v66 = v21;
        _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Not processing fetch with error: %{public}@", buf, 0x16u);

        id v9 = v19;
        BOOL v8 = v42;
      }
    }
    uint64_t v22 = [v3 domain];
    if ([v22 isEqualToString:*MEMORY[0x1E4F19C40]])
    {
      uint64_t v23 = [v3 userInfo];

      if (!v23) {
        goto LABEL_22;
      }
      id v24 = [v3 userInfo];
      uint64_t v22 = objc_msgSend(v24, "hmf_numberForKey:", *MEMORY[0x1E4F19C60]);

      if (v22)
      {
        uint64_t v25 = (void *)MEMORY[0x1D9452090]();
        id v26 = v5;
        id v27 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
        {
          id v28 = HMFGetLogIdentifier();
          BOOL v29 = *(void **)(a1 + 40);
          *(_DWORD *)long long buf = 138543874;
          uint64_t v64 = v28;
          __int16 v65 = 2112;
          long long v66 = v29;
          __int16 v67 = 2112;
          uint64_t v68 = v22;
          _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_INFO, "%{public}@Rescheduling zone fetch %@ with delay %@", buf, 0x20u);
        }
        uint64_t v30 = *(void *)(a1 + 32);
        [v22 doubleValue];
        objc_msgSend(v26, "_fetchHomeFromCloudZone:cloudConflict:withDelay:completionHandler:", v30, 0, 0);
      }
    }

LABEL_22:
    [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setOsTransaction:0];
    uint64_t v31 = *(void *)(a1 + 56);
    if (v31) {
      (*(void (**)(uint64_t, id))(v31 + 16))(v31, v3);
    }
LABEL_33:
  }
}

void __74__HMDHomeManager__runFetchHomeFromCloudZone_cloudConflict_syncCompletion___block_invoke_820(uint64_t a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ([*(id *)(a1 + 32) isFirstFetch])
  {
    uint64_t v4 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) hasValidChanges];
    id v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = *(id *)(a1 + 40);
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      BOOL v8 = HMFGetLogIdentifier();
      id v9 = [*(id *)(a1 + 32) uuid];
      uint64_t v10 = [v9 UUIDString];
      uint64_t v11 = HMFBooleanToString();
      *(_DWORD *)long long buf = 138543874;
      uint64_t v23 = v8;
      __int16 v24 = 2112;
      uint64_t v25 = v10;
      __int16 v26 = 2112;
      id v27 = v11;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Zone ready determined for zone: %@; didValuesChange: %@",
        buf,
        0x20u);
    }
    [*(id *)(a1 + 32) setFirstFetch:0];
    id v12 = [*(id *)(a1 + 40) notificationCenter];
    id v13 = objc_msgSend(*(id *)(a1 + 32), "uuid", @"HMDCR.id");
    id v14 = [v13 UUIDString];
    v21[0] = v14;
    v20[1] = @"HMDCR.stc";
    id v15 = [NSNumber numberWithBool:v4];
    v21[1] = v15;
    v20[2] = @"HMDCR.if";
    id v16 = [NSNumber numberWithInt:*(unsigned char *)(a1 + 64) == 0];
    void v21[2] = v16;
    id v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v21 forKeys:v20 count:3];
    [v12 postNotificationName:@"HMDCloudZoneReadyNotification" object:0 userInfo:v17];
  }
  if ([*(id *)(a1 + 40) _zonesFetched])
  {
    id v18 = [*(id *)(a1 + 40) cloudDataSyncManager];
    [v18 updateCloudDataSyncFilterState:1];
  }
  uint64_t v19 = *(void *)(a1 + 48);
  if (v19) {
    (*(void (**)(uint64_t, id))(v19 + 16))(v19, v3);
  }
}

uint64_t __74__HMDHomeManager__runFetchHomeFromCloudZone_cloudConflict_syncCompletion___block_invoke_821(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleTransactionsFetched:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) stagedTransaction:*(void *)(a1 + 40) mustReplay:*(void *)(a1 + 48) zoneID:*(void *)(a1 + 56) cloudConflict:*(unsigned __int8 *)(a1 + 88) transactionError:*(void *)(a1 + 64) syncCompletion:*(void *)(a1 + 72)];
}

uint64_t __74__HMDHomeManager__runFetchHomeFromCloudZone_cloudConflict_syncCompletion___block_invoke_2_822(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleTransactionsFetched:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) stagedTransaction:*(void *)(a1 + 40) mustReplay:0 zoneID:*(void *)(a1 + 48) cloudConflict:*(unsigned __int8 *)(a1 + 80) transactionError:*(void *)(a1 + 56) syncCompletion:*(void *)(a1 + 64)];
}

- (BOOL)hasValidControllerKeyToSave
{
  uint64_t v2 = [(HMDHomeManager *)self cloudDataSyncStateFilter];
  char v3 = [v2 isLocalDataDecryptionFailed];

  return v3 ^ 1;
}

- (BOOL)hasiCloudAndControllerKey
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  char v3 = [(HMDHomeManager *)self cloudDataSyncStateFilter];
  unsigned __int8 v4 = [v3 isiCloudSwitchEnabled];

  id v5 = [(HMDHomeManager *)self cloudDataSource];
  unsigned __int8 v6 = [v5 isControllerKeyAvailable];

  char v7 = v4 & v6;
  if ((v4 & v6 & 1) == 0)
  {
    BOOL v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = self;
    uint64_t v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      id v12 = HMFBooleanToString();
      id v13 = HMFBooleanToString();
      int v15 = 138543874;
      id v16 = v11;
      __int16 v17 = 2112;
      id v18 = v12;
      __int16 v19 = 2112;
      BOOL v20 = v13;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@iCloud Switch is:%@, controller key is available: %@", (uint8_t *)&v15, 0x20u);
    }
  }
  return v7;
}

- (void)_fetchHomeFromCloudZone:(id)a3 cloudConflict:(BOOL)a4 withDelay:(double)a5 completionHandler:(id)a6
{
  BOOL v8 = a4;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v11 = a6;
  BOOL v12 = [(HMDHomeManager *)self hasiCloudAndControllerKey];
  id v13 = (void *)MEMORY[0x1D9452090]();
  id v14 = self;
  int v15 = HMFGetOSLogHandle();
  id v16 = v15;
  if (v12)
  {
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      __int16 v17 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v32 = v17;
      __int16 v33 = 2112;
      id v34 = v10;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, "%{public}@Will add operation to fetch home zone %@", buf, 0x16u);
    }
    objc_initWeak((id *)buf, v14);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __84__HMDHomeManager__fetchHomeFromCloudZone_cloudConflict_withDelay_completionHandler___block_invoke;
    aBlock[3] = &unk_1E6A15FC0;
    objc_copyWeak(&v30, (id *)buf);
    id v18 = v10;
    id v28 = v18;
    id v19 = v11;
    id v29 = v19;
    BOOL v20 = _Block_copy(aBlock);
    uint64_t v21 = [v18 UUIDString];
    uint64_t v22 = +[HMDSyncOperation cloudZoneFetchSyncOperation:v21 cloudConflict:v8 block:v20 completion:v19];

    uint64_t v23 = [(HMDHomeManager *)v14 syncManager];
    [v23 addOperation:v22 withDelay:a5];

    objc_destroyWeak(&v30);
    objc_destroyWeak((id *)buf);
  }
  else
  {
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v24 = HMFGetLogIdentifier();
      uint64_t v25 = [v10 UUIDString];
      *(_DWORD *)long long buf = 138543618;
      id v32 = v24;
      __int16 v33 = 2112;
      id v34 = v25;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_DEFAULT, "%{public}@Not scheduling zone fetch for %@ cannot fetch under current conditions.", buf, 0x16u);
    }
    __int16 v26 = [MEMORY[0x1E4F28C58] hmErrorWithCode:23 description:@"Operation was cancelled before it could run" reason:@"iCloud & Controller key was not available" suggestion:@"Make sure that you are signed into iCloud account"];
    if (v11) {
      (*((void (**)(id, void *))v11 + 2))(v11, v26);
    }
  }
}

void __84__HMDHomeManager__fetchHomeFromCloudZone_cloudConflict_withDelay_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3, int a4)
{
  id v11 = a2;
  id v7 = a3;
  if (a4)
  {
    if (!v11) {
      goto LABEL_9;
    }
    BOOL v8 = [MEMORY[0x1E4F28C58] hmErrorWithCode:23 description:@"Operation was cancelled before it could run" reason:@"HMDCloudManager cancelled the operation" suggestion:&stru_1F2C9F1A8];
    v11[2](v11, v8);
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    if (WeakRetained)
    {
      BOOL v8 = (void (**)(void, void))WeakRetained;
      objc_msgSend(WeakRetained, "_runFetchHomeFromCloudZone:cloudConflict:syncCompletion:", *(void *)(a1 + 32), objc_msgSend(v7, "isCloudConflict"), v11);
    }
    else
    {
      BOOL v8 = *(void (***)(void, void))(a1 + 40);
      if (v8)
      {
        id v10 = [MEMORY[0x1E4F28C58] hmErrorWithCode:23 description:@"Operation was cancelled as the HMDHomeManager object went out of scope" reason:@"HMDHomeManager is no longer valid" suggestion:@"Debug... May be..."];
        ((void (**)(void, void *))v8)[2](v8, v10);

        BOOL v8 = 0;
      }
    }
  }

LABEL_9:
}

- (void)fetchHomeFromCloudZone:(id)a3 cloudConflict:(BOOL)a4 withDelay:(double)a5
{
  id v8 = a3;
  objc_initWeak(&location, self);
  id v9 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __65__HMDHomeManager_fetchHomeFromCloudZone_cloudConflict_withDelay___block_invoke;
  block[3] = &unk_1E6A15F98;
  objc_copyWeak(v13, &location);
  id v12 = v8;
  BOOL v14 = a4;
  v13[1] = *(id *)&a5;
  id v10 = v8;
  dispatch_async(v9, block);

  objc_destroyWeak(v13);
  objc_destroyWeak(&location);
}

void __65__HMDHomeManager_fetchHomeFromCloudZone_cloudConflict_withDelay___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    [WeakRetained _fetchHomeFromCloudZone:*(void *)(a1 + 32) cloudConflict:*(unsigned __int8 *)(a1 + 56) withDelay:0 completionHandler:*(double *)(a1 + 48)];
    id WeakRetained = v3;
  }
}

- (void)notifyZonesCloudZoneReady:(id)a3
{
  id v4 = a3;
  objc_initWeak(&location, self);
  id v5 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __44__HMDHomeManager_notifyZonesCloudZoneReady___block_invoke;
  block[3] = &unk_1E6A16CE0;
  objc_copyWeak(&v9, &location);
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, block);

  objc_destroyWeak(&v9);
  objc_destroyWeak(&location);
}

void __44__HMDHomeManager_notifyZonesCloudZoneReady___block_invoke(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    id v3 = *(id *)(a1 + 32);
    uint64_t v31 = [v3 countByEnumeratingWithState:&v32 objects:v40 count:16];
    if (v31)
    {
      uint64_t v30 = *(void *)v33;
      *(void *)&long long v4 = 138543618;
      long long v27 = v4;
      id v28 = v3;
      do
      {
        for (uint64_t i = 0; i != v31; ++i)
        {
          if (*(void *)v33 != v30) {
            objc_enumerationMutation(v3);
          }
          id v6 = *(void **)(*((void *)&v32 + 1) + 8 * i);
          id v7 = objc_msgSend(v6, "hmf_UUIDForKey:", @"HMDCR.id", v27);
          if (v7)
          {
            id v8 = [WeakRetained _zoneInformationWithUUID:v7];
            if (v8)
            {
              id v9 = (void *)MEMORY[0x1D9452090]();
              id v10 = WeakRetained;
              id v11 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                id v12 = v29 = v9;
                id v13 = [v8 uuid];
                [v13 UUIDString];
                v15 = id v14 = WeakRetained;
                *(_DWORD *)long long buf = v27;
                id v37 = v12;
                __int16 v38 = 2112;
                id v39 = v15;
                _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Zone ready determined for zone: %@", buf, 0x16u);

                id v3 = v28;
                id WeakRetained = v14;

                id v9 = v29;
              }

              [v8 setFirstFetch:0];
            }
            else
            {
              BOOL v20 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:@"1411CE6C-B4DE-4622-A49D-F66FE296D6B5"];
              int v21 = [v7 isEqual:v20];

              if (v21)
              {
                uint64_t v22 = (void *)MEMORY[0x1D9452090]();
                id v23 = WeakRetained;
                __int16 v24 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
                {
                  uint64_t v25 = HMFGetLogIdentifier();
                  *(_DWORD *)long long buf = 138543362;
                  id v37 = v25;
                  _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_INFO, "%{public}@Home Manager Zone determined ready", buf, 0xCu);
                }
                [v23 setHomeManagerZoneFirstFetch:0];
              }
            }
          }
          else
          {
            id v16 = (void *)MEMORY[0x1D9452090]();
            id v17 = WeakRetained;
            id v18 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
            {
              id v19 = HMFGetLogIdentifier();
              *(_DWORD *)long long buf = 138543362;
              id v37 = v19;
              _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@Zone ready determined for legacy zone", buf, 0xCu);
            }
          }
          __int16 v26 = [WeakRetained notificationCenter];
          [v26 postNotificationName:@"HMDCloudZoneReadyNotification" object:0 userInfo:v6];
        }
        uint64_t v31 = [v3 countByEnumeratingWithState:&v32 objects:v40 count:16];
      }
      while (v31);
    }
  }
}

- (void)schedulePostFetch
{
  objc_initWeak(&location, self);
  id v3 = [(HMDHomeManager *)self workQueue];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __35__HMDHomeManager_schedulePostFetch__block_invoke;
  v4[3] = &unk_1E6A16E40;
  objc_copyWeak(&v5, &location);
  dispatch_async(v3, v4);

  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);
}

void __35__HMDHomeManager_schedulePostFetch__block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained _schedulePostFetch];
    id WeakRetained = v2;
  }
}

- (void)_schedulePostFetch
{
  objc_initWeak(&location, self);
  uint64_t v6 = MEMORY[0x1E4F143A8];
  uint64_t v7 = 3221225472;
  id v8 = __36__HMDHomeManager__schedulePostFetch__block_invoke;
  id v9 = &unk_1E6A15BB0;
  objc_copyWeak(&v10, &location);
  id v3 = _Block_copy(&v6);
  long long v4 = +[HMDSyncOperation postFetchOperationWithBlock:](HMDSyncOperation, "postFetchOperationWithBlock:", v3, v6, v7, v8, v9);
  id v5 = [(HMDHomeManager *)self syncManager];
  [v5 addOperation:v4];

  objc_destroyWeak(&v10);
  objc_destroyWeak(&location);
}

void __36__HMDHomeManager__schedulePostFetch__block_invoke(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  id v10 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v7 = WeakRetained;
  if (!WeakRetained || a4)
  {
    if (v10)
    {
      id v9 = [MEMORY[0x1E4F28C58] hmErrorWithCode:23 description:@"Operation was cancelled before it could run" reason:@"HMDCloudManager cancelled the operation" suggestion:0];
      v10[2](v10, v9);
    }
  }
  else
  {
    id v8 = [WeakRetained cloudDataSyncManager];
    [v8 cacheDatabaseServerToken];

    if (v10) {
      v10[2](v10, 0);
    }
  }
}

- (void)_fetchAllZones:(id)a3
{
  id v4 = a3;
  objc_initWeak(&location, self);
  id v5 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __33__HMDHomeManager__fetchAllZones___block_invoke;
  block[3] = &unk_1E6A15DB8;
  objc_copyWeak(&v9, &location);
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, block);

  objc_destroyWeak(&v9);
  objc_destroyWeak(&location);
}

void __33__HMDHomeManager__fetchAllZones___block_invoke(uint64_t a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v31 = a1;
    id v3 = [MEMORY[0x1E4F1CA48] array];
    id v4 = (void *)MEMORY[0x1E4F7A0D8];
    v42[0] = MEMORY[0x1E4F143A8];
    v42[1] = 3221225472;
    v42[2] = __33__HMDHomeManager__fetchAllZones___block_invoke_2;
    v42[3] = &unk_1E6A15F20;
    void v42[4] = WeakRetained;
    id v5 = [MEMORY[0x1E4F7A0F0] immediateScheduler];
    uint64_t v6 = [v4 futureWithBlock:v42 scheduler:v5];

    long long v32 = v3;
    uint64_t v30 = (void *)v6;
    [v3 addObject:v6];
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    uint64_t v7 = [WeakRetained cloudZones];
    id v8 = (void *)[v7 copy];

    uint64_t v9 = [v8 countByEnumeratingWithState:&v38 objects:v43 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v39;
      do
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v39 != v11) {
            objc_enumerationMutation(v8);
          }
          id v13 = *(void **)(*((void *)&v38 + 1) + 8 * i);
          id v14 = [v13 uuid];
          int v15 = [v14 UUIDString];

          id v16 = [WeakRetained cloudDataSyncManager];
          id v17 = [v16 cloudCache];
          int v18 = [v17 homeZoneExists:v15];

          if (v18)
          {
            id v19 = (void *)MEMORY[0x1E4F7A0D8];
            v37[0] = MEMORY[0x1E4F143A8];
            v37[1] = 3221225472;
            void v37[2] = __33__HMDHomeManager__fetchAllZones___block_invoke_809;
            void v37[3] = &unk_1E6A15F48;
            void v37[4] = WeakRetained;
            void v37[5] = v13;
            BOOL v20 = [MEMORY[0x1E4F7A0F0] immediateScheduler];
            int v21 = [v19 futureWithBlock:v37 scheduler:v20];

            [v32 addObject:v21];
          }
          else
          {
            int v21 = [WeakRetained cloudDataSyncManager];
            uint64_t v22 = [v13 ownerName];
            [v21 addHomeZoneName:v15 owner:v22];
          }
        }
        uint64_t v10 = [v8 countByEnumeratingWithState:&v38 objects:v43 count:16];
      }
      while (v10);
    }

    id v23 = (void *)MEMORY[0x1E4F7A0D8];
    __int16 v24 = (void *)MEMORY[0x1E4F7A0F0];
    uint64_t v25 = [WeakRetained workQueue];
    __int16 v26 = [v24 schedulerWithDispatchQueue:v25];
    long long v27 = [v23 combineAllFutures:v32 ignoringErrors:0 scheduler:v26];
    v35[0] = MEMORY[0x1E4F143A8];
    v35[1] = 3221225472;
    v35[2] = __33__HMDHomeManager__fetchAllZones___block_invoke_811;
    v35[3] = &unk_1E6A15F70;
    id v36 = *(id *)(v31 + 32);
    id v28 = [v27 addSuccessBlock:v35];
    v33[0] = MEMORY[0x1E4F143A8];
    v33[1] = 3221225472;
    v33[2] = __33__HMDHomeManager__fetchAllZones___block_invoke_2_813;
    v33[3] = &unk_1E6A19358;
    id v34 = *(id *)(v31 + 32);
    id v29 = (id)[v28 addFailureBlock:v33];
  }
}

void __33__HMDHomeManager__fetchAllZones___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __33__HMDHomeManager__fetchAllZones___block_invoke_3;
  v6[3] = &unk_1E6A196E0;
  void v6[4] = v4;
  id v7 = v3;
  id v5 = v3;
  [v4 _fetchHomeManagerCloudConflict:0 withDelay:v6 completionHandler:0.0];
}

void __33__HMDHomeManager__fetchAllZones___block_invoke_809(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = [*(id *)(a1 + 40) uuid];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __33__HMDHomeManager__fetchAllZones___block_invoke_2_810;
  v7[3] = &unk_1E6A18BA0;
  long long v8 = *(_OWORD *)(a1 + 32);
  id v9 = v3;
  id v6 = v3;
  [v4 _fetchHomeFromCloudZone:v5 cloudConflict:0 withDelay:v7 completionHandler:0.0];
}

uint64_t __33__HMDHomeManager__fetchAllZones___block_invoke_811(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

void __33__HMDHomeManager__fetchAllZones___block_invoke_2_813(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      id v8 = v4;
      uint64_t v5 = (*(uint64_t (**)(void))(v5 + 16))();
      id v4 = v8;
    }
    MEMORY[0x1F41817F8](v5, v4);
  }
  else
  {
    id v6 = (id *)_HMFPreconditionFailure();
    __33__HMDHomeManager__fetchAllZones___block_invoke_2_810(v6, v7);
  }
}

void __33__HMDHomeManager__fetchAllZones___block_invoke_2_810(id *a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = a1[4];
  id v6 = HMFGetOSLogHandle();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (v3)
  {
    if (v7)
    {
      id v8 = HMFGetLogIdentifier();
      id v9 = [a1[5] uuid];
      int v14 = 138543874;
      int v15 = v8;
      __int16 v16 = 2112;
      id v17 = v9;
      __int16 v18 = 2112;
      id v19 = v3;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Home cloud zone [%@] sync finished with error : %@", (uint8_t *)&v14, 0x20u);
    }
    [a1[6] finishWithError:v3];
  }
  else
  {
    if (v7)
    {
      uint64_t v10 = HMFGetLogIdentifier();
      uint64_t v11 = [a1[5] uuid];
      int v14 = 138543618;
      int v15 = v10;
      __int16 v16 = 2112;
      id v17 = v11;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Home cloud zone (%@) sync finished successfully", (uint8_t *)&v14, 0x16u);
    }
    id v12 = a1[6];
    id v13 = NAEmptyResult();
    [v12 finishWithResult:v13];
  }
}

void __33__HMDHomeManager__fetchAllZones___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (v3)
  {
    if (v7)
    {
      id v8 = HMFGetLogIdentifier();
      int v12 = 138543618;
      id v13 = v8;
      __int16 v14 = 2112;
      id v15 = v3;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@HomeManager cloud sync finished with error : %@", (uint8_t *)&v12, 0x16u);
    }
    [*(id *)(a1 + 40) finishWithError:v3];
  }
  else
  {
    if (v7)
    {
      id v9 = HMFGetLogIdentifier();
      int v12 = 138543362;
      id v13 = v9;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@HomeManager cloud sync finished successfully", (uint8_t *)&v12, 0xCu);
    }
    uint64_t v10 = *(void **)(a1 + 40);
    uint64_t v11 = NAEmptyResult();
    [v10 finishWithResult:v11];
  }
}

- (void)fetchAllZones
{
}

- (void)_runUploadHomeToCloud:(id)a3 syncCompletion:(id)a4
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  if ([(HMDHomeManager *)self hasiCloudAndControllerKey])
  {
    id v8 = [(HMDHomeManager *)self _homeWithUUID:v6];
    if (v8
      && ([(HMDHomeManager *)self pendingHomesBeingRemoved],
          id v9 = objc_claimAutoreleasedReturnValue(),
          int v10 = [v9 containsObject:v6],
          v9,
          !v10))
    {
      uint64_t v22 = (void *)MEMORY[0x1D9452090]();
      id v23 = (void *)MEMORY[0x1D9452090]();
      __int16 v24 = self;
      uint64_t v25 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v26 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        id v36 = v26;
        _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_DEFAULT, "%{public}@Pushing changes up to the cloud", buf, 0xCu);
      }
      long long v27 = [(HMDHomeManager *)v24 cloudDataSyncManager];
      id v28 = [v27 cloudCache];

      objc_initWeak((id *)buf, v24);
      id v29 = [v8 zoneID];
      uint64_t v30 = [v29 UUIDString];

      v31[0] = MEMORY[0x1E4F143A8];
      v31[1] = 3221225472;
      void v31[2] = __55__HMDHomeManager__runUploadHomeToCloud_syncCompletion___block_invoke;
      void v31[3] = &unk_1E6A15EF8;
      void v31[4] = v24;
      id v8 = v8;
      id v32 = v8;
      objc_copyWeak(&v34, (id *)buf);
      id v33 = v7;
      [v28 homeZoneWithName:v30 owner:&stru_1F2C9F1A8 completion:v31];

      objc_destroyWeak(&v34);
      objc_destroyWeak((id *)buf);
    }
    else
    {
      uint64_t v11 = (void *)MEMORY[0x1D9452090]();
      int v12 = self;
      id v13 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        __int16 v14 = HMFGetLogIdentifier();
        id v15 = [v6 UUIDString];
        *(_DWORD *)long long buf = 138543618;
        id v36 = v14;
        __int16 v37 = 2112;
        long long v38 = v15;
        _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Cannot push home %@ data to the cloud because it was removed", buf, 0x16u);
      }
      if (v7)
      {
        uint64_t v16 = [MEMORY[0x1E4F28C58] hmErrorWithCode:52 description:@"Operation not allowed because home was removed" reason:@"HMDHomeManager not allowing operation" suggestion:0];
        (*((void (**)(id, void *))v7 + 2))(v7, v16);
      }
    }
    goto LABEL_15;
  }
  id v17 = (void *)MEMORY[0x1D9452090]();
  __int16 v18 = self;
  id v19 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = HMFGetLogIdentifier();
    int v21 = [v6 UUIDString];
    *(_DWORD *)long long buf = 138543618;
    id v36 = v20;
    __int16 v37 = 2112;
    long long v38 = v21;
    _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_DEFAULT, "%{public}@Dropping zone push to %@.", buf, 0x16u);
  }
  if (v7)
  {
    id v8 = [MEMORY[0x1E4F28C58] hmErrorWithCode:75 description:@"Operation was cancelled before it could run" reason:@"iCloud & Controller key was not available" suggestion:@"Make sure that you are signed into iCloud account"];
    (*((void (**)(id, id))v7 + 2))(v7, v8);
LABEL_15:
  }
}

void __55__HMDHomeManager__runUploadHomeToCloud_syncCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [[HMDCloudTransaction alloc] initWithType:4 temporaryCache:0];
  [(HMDCloudTransaction *)v7 updateCloudZone:v5];
  id v8 = (void *)[objc_alloc(MEMORY[0x1E4F654E0]) initWithName:@"com.apple.homed.push-to-zone"];
  [(HMDCloudTransaction *)v7 setOsTransaction:v8];

  id v9 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  void v12[2] = __55__HMDHomeManager__runUploadHomeToCloud_syncCompletion___block_invoke_2;
  v12[3] = &unk_1E6A165C8;
  objc_copyWeak(&v16, (id *)(a1 + 56));
  uint64_t v11 = v7;
  id v13 = v11;
  id v14 = *(id *)(a1 + 40);
  id v15 = *(id *)(a1 + 48);
  [v9 _loadHomeModelChanges:v11 mustReplay:0 legacyPush:0 home:v10 completion:v12];

  objc_destroyWeak(&v16);
}

void __55__HMDHomeManager__runUploadHomeToCloud_syncCompletion___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v5 = WeakRetained;
  if (!v3 && WeakRetained && [*(id *)(a1 + 32) hasValidChanges])
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    id v9[2] = __55__HMDHomeManager__runUploadHomeToCloud_syncCompletion___block_invoke_3;
    v9[3] = &unk_1E6A19530;
    id v10 = v6;
    id v11 = *(id *)(a1 + 48);
    [v5 _uploadTransaction:v10 home:v7 completion:v9];
  }
  else
  {
    [*(id *)(a1 + 32) setOsTransaction:0];
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      (*(void (**)(uint64_t, id))(v8 + 16))(v8, v3);
    }
  }
}

uint64_t __55__HMDHomeManager__runUploadHomeToCloud_syncCompletion___block_invoke_3(uint64_t a1)
{
  [*(id *)(a1 + 32) setOsTransaction:0];
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

- (void)_uploadTransaction:(id)a3 home:(id)a4 completion:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  objc_initWeak(&location, self);
  id v11 = [(HMDHomeManager *)self cloudDataSyncManager];
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __53__HMDHomeManager__uploadTransaction_home_completion___block_invoke;
  v15[3] = &unk_1E6A165C8;
  objc_copyWeak(&v19, &location);
  id v12 = v9;
  id v16 = v12;
  id v13 = v8;
  id v17 = v13;
  id v14 = v10;
  id v18 = v14;
  [v11 uploadTransaction:v13 completionHandler:v15];

  objc_destroyWeak(&v19);
  objc_destroyWeak(&location);
}

void __53__HMDHomeManager__uploadTransaction_home_completion___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (!WeakRetained)
  {
LABEL_19:
    uint64_t v27 = *(void *)(a1 + 48);
    if (v27) {
      (*(void (**)(void))(v27 + 16))();
    }
    goto LABEL_21;
  }
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = WeakRetained;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    id v9 = [*(id *)(a1 + 32) zoneID];
    id v10 = objc_msgSend(v3, "hmd_conciseCKError");
    id v11 = [v10 shortDescription];
    *(_DWORD *)long long buf = 138543874;
    uint64_t v48 = v8;
    __int16 v49 = 2112;
    __int16 v50 = v9;
    __int16 v51 = 2112;
    uint64_t v52 = (uint64_t)v11;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Uploaded data to zone %@ with error status: %@", buf, 0x20u);
  }
  if ([v6 backOffOperationInProgress])
  {
    id v12 = (void *)MEMORY[0x1D9452090]([v6 setBackOffOperationInProgress:0]);
    id v13 = v6;
    id v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      id v15 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v48 = v15;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Clearing that we were in a backoff operation", buf, 0xCu);
    }
  }
  if (v3)
  {
    id v16 = [v3 domain];
    if ([v16 isEqualToString:*MEMORY[0x1E4F19C40]])
    {
      id v17 = [v3 userInfo];

      if (!v17) {
        goto LABEL_19;
      }
      id v18 = [v3 userInfo];
      id v16 = objc_msgSend(v18, "hmf_numberForKey:", *MEMORY[0x1E4F19C60]);

      if (v16)
      {
        id v19 = [*(id *)(a1 + 32) uuid];
        uint64_t v20 = [v19 UUIDString];

        int v21 = (void *)MEMORY[0x1D9452090]();
        id v22 = v6;
        id v23 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          __int16 v24 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543874;
          uint64_t v48 = v24;
          __int16 v49 = 2112;
          __int16 v50 = v20;
          __int16 v51 = 2112;
          uint64_t v52 = (uint64_t)v16;
          _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_INFO, "%{public}@Rescheduling zone push %@ with delay %@", buf, 0x20u);
        }
        uint64_t v25 = *(void *)(a1 + 32);
        [v16 doubleValue];
        objc_msgSend(v22, "_uploadHomeToCloud:withDelay:", v25);
      }
    }
LABEL_18:

    goto LABEL_19;
  }
  if ([*(id *)(a1 + 40) wasZoneDeleted])
  {
    uint64_t v26 = *(void *)(a1 + 32);
    if (!v26) {
      goto LABEL_19;
    }
    id v16 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    [v6 scheduleRemovalForHome:v26 message:0 options:v16];
    goto LABEL_18;
  }
  id v28 = *(void **)(a1 + 40);
  id v29 = [*(id *)(a1 + 32) homeConfigurationUUID];
  uint64_t v30 = [v28 changeWithObjectID:v29];

  if (v30)
  {
    uint64_t v31 = [v30 objectChange];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v32 = v31;
    }
    else {
      id v32 = 0;
    }
    id v33 = v32;

    if (v33)
    {
      id v34 = [v33 configurationVersion];

      if (v34)
      {
        long long v35 = [v33 configurationVersion];
        uint64_t v36 = [v35 integerValue];

        __int16 v37 = (void *)MEMORY[0x1D9452090]();
        id v38 = v6;
        uint64_t v39 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          long long v40 = v44 = v38;
          [*(id *)(a1 + 32) uuid];
          long long v41 = v46 = v36;
          [v41 UUIDString];
          id v42 = v45 = v37;
          *(_DWORD *)long long buf = 138543874;
          uint64_t v48 = v40;
          __int16 v49 = 2112;
          __int16 v50 = v42;
          __int16 v51 = 2048;
          uint64_t v52 = v46;
          _os_log_impl(&dword_1D49D5000, v39, OS_LOG_TYPE_DEFAULT, "%{public}@Home %@ last pushed configuration version successfully updated to %lu", buf, 0x20u);

          __int16 v37 = v45;
          uint64_t v36 = v46;

          id v38 = v44;
        }

        [*(id *)(a1 + 32) setLastSyncedConfigurationVersion:v36];
        [*(id *)(a1 + 32) saveWithReason:@"lastSyncedHomeConfigVersion" postSyncNotification:0];
      }
    }
  }
  [v6 _pushZoneInfromationForHome:*(void *)(a1 + 32)];
  [v6 _resetCloudOperationRetryCounters];
  id v43 = [*(id *)(a1 + 40) processedTransactionStoreRowIDs];
  [v6 _updateModelChangesAsPushed:v43 home:*(void *)(a1 + 32) pushMask:2 completion:*(void *)(a1 + 48)];

  [v6 _schedulePushChangesToAllUsersOfAllHomes];
LABEL_21:
}

- (void)_pushZoneInfromationForHome:(id)a3
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self cloudDataSyncManager];
  id v6 = [v5 cloudCache];
  uint64_t v7 = [v6 homeManagerZone];

  if (v4 && v7)
  {
    id v8 = [v4 zoneID];
    id v9 = [(HMDHomeManager *)self _zoneInformationWithUUID:v8];

    if (v9) {
      goto LABEL_7;
    }
    id v10 = (void *)MEMORY[0x1D9452090]();
    id v11 = self;
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id v13 = HMFGetLogIdentifier();
      id v14 = [v4 name];
      id v15 = [v4 zoneID];
      *(_DWORD *)long long buf = 138543874;
      id v32 = v13;
      __int16 v33 = 2112;
      id v34 = v14;
      __int16 v35 = 2112;
      uint64_t v36 = v15;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_ERROR, "%{public}@Local zone information missing for home/zone %@/%@, creating", buf, 0x20u);
    }
    id v16 = [v4 zoneID];
    id v17 = [v4 ownerName];
    [(HMDHomeManager *)v11 _addCloudZone:v16 ownerName:v17];

    id v18 = [v4 zoneID];
    id v9 = [(HMDHomeManager *)v11 _zoneInformationWithUUID:v18];

    if (v9)
    {
LABEL_7:
      objc_initWeak((id *)buf, self);
      id v19 = [v4 zoneID];
      v27[0] = MEMORY[0x1E4F143A8];
      v27[1] = 3221225472;
      void v27[2] = __46__HMDHomeManager__pushZoneInfromationForHome___block_invoke;
      v27[3] = &unk_1E6A15ED0;
      objc_copyWeak(&v30, (id *)buf);
      id v28 = v4;
      id v20 = v9;
      id v29 = v20;
      [v7 cloudRecordWithObjectID:v19 completionHandler:v27];

      objc_destroyWeak(&v30);
      objc_destroyWeak((id *)buf);
    }
    else
    {
      int v21 = (void *)MEMORY[0x1D9452090]();
      id v22 = v11;
      id v23 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        __int16 v24 = HMFGetLogIdentifier();
        uint64_t v25 = [v4 name];
        uint64_t v26 = [v4 zoneID];
        *(_DWORD *)long long buf = 138543874;
        id v32 = v24;
        __int16 v33 = 2112;
        id v34 = v25;
        __int16 v35 = 2112;
        uint64_t v36 = v26;
        _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_ERROR, "%{public}@Failed to create local zone information for home/zone %@/%@", buf, 0x20u);
      }
    }
  }
}

void __46__HMDHomeManager__pushZoneInfromationForHome___block_invoke(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v8 = WeakRetained;
  if (!v5 && WeakRetained)
  {
    id v9 = [a1[4] zoneID];
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    void v10[2] = __46__HMDHomeManager__pushZoneInfromationForHome___block_invoke_2;
    v10[3] = &unk_1E6A15EA8;
    objc_copyWeak(&v13, a1 + 6);
    id v11 = a1[4];
    id v12 = a1[5];
    [v8 _cleanChangesIfNoAddChangeObjectID:v9 completion:v10];

    objc_destroyWeak(&v13);
  }
}

void __46__HMDHomeManager__pushZoneInfromationForHome___block_invoke_2(uint64_t a1, char a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained && (a2 & 1) == 0)
  {
    uint64_t v7 = (void *)MEMORY[0x1D9452090]();
    id v8 = WeakRetained;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = HMFGetLogIdentifier();
      id v11 = [*(id *)(a1 + 32) name];
      id v12 = [*(id *)(a1 + 32) zoneID];
      id v13 = [v12 UUIDString];
      int v14 = 138543874;
      id v15 = v10;
      __int16 v16 = 2112;
      id v17 = v11;
      __int16 v18 = 2112;
      id v19 = v13;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Creating zone information for home %@/%@ to push to cloud", (uint8_t *)&v14, 0x20u);
    }
    [v8 addTransactionAfterPush:*(void *)(a1 + 40)];
  }
}

- (void)_updateModelChangesAsPushed:(id)a3 home:(id)a4 pushMask:(unint64_t)a5 completion:(id)a6
{
  id v9 = a6;
  id v10 = a4;
  id v11 = a3;
  id v12 = [[HMDBackingStoreLogUpdateOperation alloc] initWithRowIDs:v11 successfullyPushedTo:a5];

  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __71__HMDHomeManager__updateModelChangesAsPushed_home_pushMask_completion___block_invoke;
  v15[3] = &unk_1E6A19358;
  id v16 = v9;
  id v13 = v9;
  [(HMDBackingStoreOperation *)v12 setResultBlock:v15];
  int v14 = [v10 backingStore];

  [v14 submit:v12];
}

uint64_t __71__HMDHomeManager__updateModelChangesAsPushed_home_pushMask_completion___block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

- (void)_loadHomeModelChanges:(id)a3 mustReplay:(id)a4 legacyPush:(BOOL)a5 home:(id)a6 completion:(id)a7
{
  BOOL v9 = a5;
  location[3] = *(id *)MEMORY[0x1E4F143B8];
  id v12 = a3;
  id v23 = a4;
  id v13 = a6;
  id v14 = a7;
  id v15 = (void (**)(void, void))v14;
  if (v12 && v13)
  {
    if (v9) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = 2;
    }
    id v17 = [MEMORY[0x1E4F1CA80] set];
    objc_initWeak(location, self);
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    void v24[2] = __78__HMDHomeManager__loadHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke;
    v24[3] = &unk_1E6A15E80;
    id v30 = v15;
    v31[1] = (id)v16;
    id v25 = v13;
    uint64_t v26 = self;
    id v27 = v12;
    id v28 = v23;
    id v18 = v17;
    id v29 = v18;
    objc_copyWeak(v31, location);
    [(HMDHomeManager *)self _loadHomeManagerHomeModelChanges:v27 mustReplay:v28 legacyPush:v9 home:v25 completion:v24];
    objc_destroyWeak(v31);

    objc_destroyWeak(location);
LABEL_11:

    goto LABEL_12;
  }
  if (v14)
  {
    id v19 = (void *)MEMORY[0x1D9452090]();
    uint64_t v20 = self;
    int v21 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      id v22 = HMFGetLogIdentifier();
      LODWORD(location[0]) = 138543362;
      *(id *)((char *)location + 4) = v22;
      _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_ERROR, "%{public}@A cloudTransaction and home when querying for home changes in datastore", (uint8_t *)location, 0xCu);
    }
    id v18 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    ((void (**)(void, id))v15)[2](v15, v18);
    goto LABEL_11;
  }
LABEL_12:
}

void __78__HMDHomeManager__loadHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  else
  {
    id v4 = [HMDBackingStoreLogFetchOperation alloc];
    uint64_t v5 = *(void *)(a1 + 88);
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    void v21[2] = __78__HMDHomeManager__loadHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke_2;
    void v21[3] = &unk_1E6A15E58;
    id v6 = *(id *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    id v8 = *(void **)(a1 + 48);
    id v22 = v6;
    uint64_t v23 = v7;
    id v24 = v8;
    id v25 = *(id *)(a1 + 56);
    id v26 = *(id *)(a1 + 64);
    BOOL v9 = [(HMDBackingStoreLogFetchOperation *)v4 initWithNeedsPushTo:v5 result:v21];
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    void v16[2] = __78__HMDHomeManager__loadHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke_791;
    v16[3] = &unk_1E6A165C8;
    objc_copyWeak(&v20, (id *)(a1 + 80));
    id v17 = *(id *)(a1 + 64);
    id v18 = *(id *)(a1 + 32);
    id v19 = *(id *)(a1 + 72);
    [(HMDBackingStoreOperation *)v9 setResultBlock:v16];
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
    id v11 = (void *)MEMORY[0x1D9452090]();
    id v12 = WeakRetained;
    HMFGetOSLogHandle();
    id v13 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      id v14 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v28 = v14;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_DEBUG, "%{public}@Loading changes from home datastore started", buf, 0xCu);
    }
    id v15 = [*(id *)(a1 + 32) backingStore];
    [v15 submit:v9];

    objc_destroyWeak(&v20);
  }
}

uint64_t __78__HMDHomeManager__loadHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke_2(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v32 = a3;
  id v30 = a4;
  int v8 = [*(id *)(a1 + 32) isOwnerUser];
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id obj = v7;
  uint64_t v9 = [obj countByEnumeratingWithState:&v33 objects:v41 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v34;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v34 != v11) {
          objc_enumerationMutation(obj);
        }
        id v13 = *(void **)(*((void *)&v33 + 1) + 8 * i);
        if (v8)
        {
          id v14 = (void *)MEMORY[0x1D9452090]();
          id v15 = *(id *)(a1 + 40);
          uint64_t v16 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          {
            id v17 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            id v38 = v17;
            __int16 v39 = 2112;
            long long v40 = v13;
            _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_DEBUG, "%{public}@Processing home object change %@", buf, 0x16u);
          }
          [*(id *)(a1 + 48) addChangeWithObjectChange:v13];
          if ([v32 mustReplay])
          {
            id v18 = *(void **)(a1 + 56);
            if (v18) {
              [v18 addChangeWithObjectChange:v13];
            }
          }
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            goto LABEL_20;
          }
        }
        else
        {
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          id v20 = (void *)MEMORY[0x1D9452090]();
          id v21 = *(id *)(a1 + 40);
          id v22 = HMFGetOSLogHandle();
          BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG);
          if (isKindOfClass)
          {
            if (v23)
            {
              id v24 = HMFGetLogIdentifier();
              *(_DWORD *)long long buf = 138543618;
              id v38 = v24;
              __int16 v39 = 2112;
              long long v40 = v13;
              _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_DEBUG, "%{public}@Processing shared home object change %@", buf, 0x16u);
            }
            [*(id *)(a1 + 48) addChangeWithObjectChange:v13];
            if ([v32 mustReplay])
            {
              id v25 = *(void **)(a1 + 56);
              if (v25) {
                [v25 addChangeWithObjectChange:v13];
              }
            }
LABEL_20:
            if ([v13 objectChangeType] == 1) {
              [*(id *)(a1 + 48) setCreateZone:1];
            }
            continue;
          }
          if (v23)
          {
            id v26 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            id v38 = v26;
            __int16 v39 = 2112;
            long long v40 = v13;
            _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_DEBUG, "%{public}@Removing share home object change %@", buf, 0x16u);
          }
          id v27 = *(void **)(a1 + 64);
          id v28 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v13, "bsoLogRowID"));
          [v27 addObject:v28];
        }
      }
      uint64_t v10 = [obj countByEnumeratingWithState:&v33 objects:v41 count:16];
    }
    while (v10);
  }

  return 1;
}

void __78__HMDHomeManager__loadHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke_791(id *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 7);
  if (WeakRetained)
  {
    if ([a1[4] count])
    {
      uint64_t v5 = [HMDBackingStoreLogUpdateOperation alloc];
      id v6 = [a1[4] allObjects];
      id v7 = [(HMDBackingStoreLogUpdateOperation *)v5 initWithRowIDs:v6 successfullyPushedTo:3];

      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      void v21[2] = __78__HMDHomeManager__loadHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke_2_792;
      void v21[3] = &unk_1E6A18528;
      objc_copyWeak(&v22, a1 + 7);
      int v8 = (void *)MEMORY[0x1D9452090]([(HMDBackingStoreOperation *)v7 setResultBlock:v21]);
      id v9 = WeakRetained;
      HMFGetOSLogHandle();
      uint64_t v10 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        id v24 = v11;
        _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_DEBUG, "%{public}@Scheduling cleanup of shared home in datastore", buf, 0xCu);
      }
      id v12 = [a1[5] backingStore];
      [v12 submit:v7];

      objc_destroyWeak(&v22);
    }
    id v13 = (void *)MEMORY[0x1D9452090]();
    id v14 = WeakRetained;
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v24 = v16;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_DEBUG, "%{public}@Loading changes from home datastore completed", buf, 0xCu);
    }
    id v17 = [v14 workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __78__HMDHomeManager__loadHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke_793;
    block[3] = &unk_1E6A19530;
    id v20 = a1[6];
    id v19 = v3;
    dispatch_async(v17, block);
  }
}

void __78__HMDHomeManager__loadHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke_2_792(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = WeakRetained;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    int v8 = HMFGetLogIdentifier();
    int v9 = 138543362;
    uint64_t v10 = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Scheduling cleanup of shared home in datastore", (uint8_t *)&v9, 0xCu);
  }
}

uint64_t __78__HMDHomeManager__loadHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke_793(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

- (void)_loadHomeManagerHomeModelChanges:(id)a3 mustReplay:(id)a4 legacyPush:(BOOL)a5 home:(id)a6 completion:(id)a7
{
  BOOL v9 = a5;
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v12 = a3;
  id v36 = a4;
  id v13 = a6;
  id v14 = a7;
  id v15 = (void (**)(void, void))v14;
  if (v12 && v13)
  {
    if (v9) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = 2;
    }
    id v17 = (void *)MEMORY[0x1D9452090]();
    id v18 = self;
    id v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      id v20 = HMFGetLogIdentifier();
      id v21 = [v13 name];
      *(_DWORD *)long long buf = 138543618;
      __int16 v49 = v20;
      __int16 v50 = 2112;
      __int16 v51 = v21;
      _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_DEBUG, "%{public}@Find all home change for home %@ in home manager's datastore", buf, 0x16u);
    }
    id v22 = [MEMORY[0x1E4F1CA80] set];
    objc_initWeak(&location, v18);
    BOOL v23 = [HMDBackingStoreLogFetchOperation alloc];
    v41[0] = MEMORY[0x1E4F143A8];
    v41[1] = 3221225472;
    v41[2] = __89__HMDHomeManager__loadHomeManagerHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke;
    v41[3] = &unk_1E6A15E30;
    objc_copyWeak(&v46, &location);
    id v42 = v13;
    id v24 = v22;
    id v43 = v24;
    id v44 = v12;
    id v45 = v36;
    uint64_t v25 = [(HMDBackingStoreLogFetchOperation *)v23 initWithNeedsPushTo:v16 result:v41];
    v37[0] = MEMORY[0x1E4F143A8];
    v37[1] = 3221225472;
    void v37[2] = __89__HMDHomeManager__loadHomeManagerHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke_790;
    void v37[3] = &unk_1E6A18500;
    objc_copyWeak(&v40, &location);
    id v26 = v24;
    id v38 = v26;
    __int16 v39 = v15;
    id v27 = (void *)MEMORY[0x1D9452090]([(HMDBackingStoreOperation *)v25 setResultBlock:v37]);
    id v28 = v18;
    HMFGetOSLogHandle();
    uint64_t v29 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      id v30 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      __int16 v49 = v30;
      _os_log_impl(&dword_1D49D5000, v29, OS_LOG_TYPE_DEBUG, "%{public}@Load home change from homemanager datastore started", buf, 0xCu);
    }
    uint64_t v31 = [(HMDHomeManager *)v28 backingStore];
    [v31 submit:v25];

    objc_destroyWeak(&v40);
    objc_destroyWeak(&v46);
    objc_destroyWeak(&location);
LABEL_15:

    goto LABEL_16;
  }
  if (v14)
  {
    id v32 = (void *)MEMORY[0x1D9452090]();
    long long v33 = self;
    long long v34 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      long long v35 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      __int16 v49 = v35;
      _os_log_impl(&dword_1D49D5000, v34, OS_LOG_TYPE_ERROR, "%{public}@A cloudTransaction and home when querying for home changes in home manager datastore", buf, 0xCu);
    }
    id v26 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
    ((void (**)(void, id))v15)[2](v15, v26);
    goto LABEL_15;
  }
LABEL_16:
}

uint64_t __89__HMDHomeManager__loadHomeManagerHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v33 = a3;
  id v31 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  char v8 = [*(id *)(a1 + 32) isOwnerUser];
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id v9 = v7;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v35 objects:v43 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v36;
    id v32 = v9;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v36 != v12) {
          objc_enumerationMutation(v9);
        }
        id v14 = *(void **)(*((void *)&v35 + 1) + 8 * v13);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v15 = [v14 uuid];
          uint64_t v16 = [*(id *)(a1 + 32) uuid];
          if ([v15 isEqual:v16])
          {
            uint64_t v17 = [v14 objectChangeType];

            if (v17 != 3)
            {
              if ((v8 & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
              {
                id v24 = (void *)MEMORY[0x1D9452090]();
                id v25 = WeakRetained;
                id v26 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
                {
                  id v27 = HMFGetLogIdentifier();
                  *(_DWORD *)long long buf = 138543618;
                  id v40 = v27;
                  __int16 v41 = 2112;
                  id v42 = v14;
                  _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_DEBUG, "%{public}@Processing home object change %@", buf, 0x16u);

                  id v9 = v32;
                }

                [*(id *)(a1 + 48) addChangeWithObjectChange:v14];
                if ([v33 mustReplay])
                {
                  id v28 = *(void **)(a1 + 56);
                  if (v28) {
                    [v28 addChangeWithObjectChange:v14];
                  }
                }
                if ([v14 objectChangeType] == 1) {
                  [*(id *)(a1 + 48) setCreateZone:1];
                }
              }
              else
              {
                id v18 = (void *)MEMORY[0x1D9452090]();
                id v19 = WeakRetained;
                id v20 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
                {
                  id v21 = HMFGetLogIdentifier();
                  *(_DWORD *)long long buf = 138543618;
                  id v40 = v21;
                  __int16 v41 = 2112;
                  id v42 = v14;
                  _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_DEBUG, "%{public}@Removing share home object change %@", buf, 0x16u);
                }
                id v22 = *(void **)(a1 + 40);
                BOOL v23 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v14, "bsoLogRowID"));
                [v22 addObject:v23];

                id v9 = v32;
              }
            }
          }
          else
          {
          }
        }
        ++v13;
      }
      while (v11 != v13);
      uint64_t v29 = [v9 countByEnumeratingWithState:&v35 objects:v43 count:16];
      uint64_t v11 = v29;
    }
    while (v29);
  }

  return 1;
}

void __89__HMDHomeManager__loadHomeManagerHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke_790(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if ([*(id *)(a1 + 32) count])
    {
      uint64_t v5 = [HMDBackingStoreLogUpdateOperation alloc];
      id v6 = [*(id *)(a1 + 32) allObjects];
      id v7 = [(HMDBackingStoreLogUpdateOperation *)v5 initWithRowIDs:v6 successfullyPushedTo:3];

      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 3221225472;
      void v18[2] = __89__HMDHomeManager__loadHomeManagerHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke_2;
      v18[3] = &unk_1E6A18528;
      objc_copyWeak(&v19, (id *)(a1 + 48));
      char v8 = (void *)MEMORY[0x1D9452090]([(HMDBackingStoreOperation *)v7 setResultBlock:v18]);
      id v9 = WeakRetained;
      HMFGetOSLogHandle();
      uint64_t v10 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        id v21 = v11;
        _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_DEBUG, "%{public}@Scheduling cleanup of shared home in datastore", buf, 0xCu);
      }
      uint64_t v12 = [v9 backingStore];
      [v12 submit:v7];

      objc_destroyWeak(&v19);
    }
    uint64_t v13 = (void *)MEMORY[0x1D9452090]();
    id v14 = WeakRetained;
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v21 = v16;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_DEBUG, "%{public}@Load home change from homemanager datastore completed", buf, 0xCu);
    }
    uint64_t v17 = *(void *)(a1 + 40);
    if (v17) {
      (*(void (**)(uint64_t, void))(v17 + 16))(v17, 0);
    }
  }
}

void __89__HMDHomeManager__loadHomeManagerHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = WeakRetained;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    char v8 = HMFGetLogIdentifier();
    int v9 = 138543362;
    uint64_t v10 = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Scheduling cleanup of shared home in datastore", (uint8_t *)&v9, 0xCu);
  }
}

- (void)_uploadHomeToCloud:(id)a3 withDelay:(double)a4
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  if ([(HMDHomeManager *)self hasiCloudAndControllerKey])
  {
    id v7 = [v6 uuid];
    objc_initWeak(&location, self);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __47__HMDHomeManager__uploadHomeToCloud_withDelay___block_invoke;
    aBlock[3] = &unk_1E6A15E08;
    objc_copyWeak(&v25, &location);
    id v8 = v7;
    id v24 = v8;
    int v9 = _Block_copy(aBlock);
    uint64_t v10 = (void *)MEMORY[0x1D9452090]();
    uint64_t v11 = self;
    HMFGetOSLogHandle();
    uint64_t v12 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v28 = v13;
      __int16 v29 = 2112;
      id v30 = v6;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Uploading object changes for home %@", buf, 0x16u);
    }
    id v14 = [v6 zoneID];
    id v15 = [v14 UUIDString];
    uint64_t v16 = +[HMDSyncOperation cloudZonePushSyncOperation:v15 block:v9];

    uint64_t v17 = [(HMDHomeManager *)v11 syncManager];
    [v17 addOperation:v16 withDelay:a4];

    objc_destroyWeak(&v25);
    objc_destroyWeak(&location);
  }
  else
  {
    id v18 = (void *)MEMORY[0x1D9452090]();
    id v19 = self;
    id v20 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      id v21 = HMFGetLogIdentifier();
      uint64_t v22 = [v6 name];
      *(_DWORD *)long long buf = 138543618;
      id v28 = v21;
      __int16 v29 = 2112;
      id v30 = v22;
      _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_DEFAULT, "%{public}@Not scheduling zone push for %@.", buf, 0x16u);
    }
  }
}

void __47__HMDHomeManager__uploadHomeToCloud_withDelay___block_invoke(uint64_t a1, void *a2, void *a3, int a4)
{
  uint64_t v10 = a2;
  id v7 = a3;
  if (a4)
  {
    if (!v10) {
      goto LABEL_7;
    }
    id v8 = [MEMORY[0x1E4F28C58] hmErrorWithCode:23 description:@"Operation was cancelled before it could run" reason:@"HMDCloudManager cancelled the operation" suggestion:0];
    v10[2](v10, v8);
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    id v8 = WeakRetained;
    if (WeakRetained) {
      [WeakRetained _runUploadHomeToCloud:*(void *)(a1 + 32) syncCompletion:v10];
    }
  }

LABEL_7:
}

- (void)uploadHomeToCloudZone:(id)a3 withDelay:(double)a4
{
  id v6 = a3;
  objc_initWeak(&location, self);
  id v7 = [(HMDHomeManager *)self workQueue];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  id v9[2] = __50__HMDHomeManager_uploadHomeToCloudZone_withDelay___block_invoke;
  v9[3] = &unk_1E6A15DE0;
  objc_copyWeak(v11, &location);
  id v10 = v6;
  v11[1] = *(id *)&a4;
  id v8 = v6;
  dispatch_async(v7, v9);

  objc_destroyWeak(v11);
  objc_destroyWeak(&location);
}

void __50__HMDHomeManager_uploadHomeToCloudZone_withDelay___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && *(void *)(a1 + 32))
  {
    id v4 = WeakRetained;
    id v3 = objc_msgSend(WeakRetained, "_homeWithZoneID:");
    if (v3) {
      [v4 _uploadHomeToCloud:v3 withDelay:*(double *)(a1 + 48)];
    }

    id WeakRetained = v4;
  }
}

- (void)_handleHomeManagerTransactionsFetched:(id)a3 stagedTransaction:(id)a4 mustReplay:(id)a5 cloudConflict:(BOOL)a6 transactionError:(id)a7 syncCompletion:(id)a8
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  id v61 = a3;
  id v62 = a4;
  id v63 = a5;
  id v64 = a7;
  __int16 v60 = (void (**)(void))a8;
  id v14 = (void *)MEMORY[0x1D9452090]();
  id v15 = self;
  uint64_t v16 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = HMFGetLogIdentifier();
    id v18 = objc_msgSend(v64, "hmd_conciseCKError");
    id v19 = [v18 shortDescription];
    *(_DWORD *)long long buf = 138543618;
    id v93 = v17;
    __int16 v94 = 2112;
    id v95 = v19;
    _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_DEFAULT, "%{public}@Fetched data from home manager zone with error status: %@", buf, 0x16u);
  }
  if (v64)
  {
    [v63 setOsTransaction:0];
    [v62 setOsTransaction:0];
    [v61 setOsTransaction:0];
    id v20 = v60;
    if (v60)
    {
      v60[2]();
      goto LABEL_39;
    }
    goto LABEL_40;
  }
  if ([(HMDHomeManager *)v15 backOffOperationInProgress])
  {
    id v21 = (void *)MEMORY[0x1D9452090]([(HMDHomeManager *)v15 setBackOffOperationInProgress:0]);
    uint64_t v22 = v15;
    BOOL v23 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      id v24 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v93 = v24;
      _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_DEFAULT, "%{public}@Clearing that we were in a backoff operation", buf, 0xCu);
    }
  }
  [(HMDHomeManager *)v15 _resetCloudOperationRetryCounters];
  [(HMDHomeManager *)v15 setHomeDataLoadedFromArchive:1];
  id v25 = [(HMDHomeManager *)v15 cloudDataSyncStateFilter];
  [v25 updateLocalDataDecryptionFailed:0];

  objc_initWeak(&location, v15);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __131__HMDHomeManager__handleHomeManagerTransactionsFetched_stagedTransaction_mustReplay_cloudConflict_transactionError_syncCompletion___block_invoke;
  aBlock[3] = &unk_1E6A15D90;
  objc_copyWeak(&v88, &location);
  id v26 = v61;
  id v84 = v26;
  BOOL v89 = a6;
  id v27 = v63;
  id v85 = v27;
  id v28 = v62;
  id v86 = v28;
  id v87 = v60;
  long long v58 = _Block_copy(aBlock);
  id v59 = [v26 replayTransaction:v27 stagedTransaction:v28];
  if (![v59 count])
  {
    id v33 = [(HMDHomeManager *)v15 workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __131__HMDHomeManager__handleHomeManagerTransactionsFetched_stagedTransaction_mustReplay_cloudConflict_transactionError_syncCompletion___block_invoke_783;
    block[3] = &unk_1E6A193D0;
    id v80 = v26;
    uint64_t v81 = v15;
    id v82 = v58;
    dispatch_async(v33, block);

    long long v34 = v80;
    goto LABEL_38;
  }
  __int16 v65 = [MEMORY[0x1E4F1CA80] set];
  int v29 = [v26 isLegacyTransaction];
  char v30 = v29;
  if (v29)
  {
    uint64_t v31 = [(HMDHomeManager *)v15 backingStore];
    id v32 = +[HMDBackingStoreTransactionOptions defaultLegacyCloudOptions];
    long long v70 = [v31 transaction:@"kTransactionUpdate" options:v32];
    uint64_t v68 = 0;
  }
  else
  {
    long long v35 = [(HMDHomeManager *)v15 backingStore];
    long long v36 = +[HMDBackingStoreTransactionOptions defaultCloudOptions];
    long long v70 = [v35 transaction:@"kTransactionUpdate" options:v36];

    uint64_t v31 = [(HMDHomeManager *)v15 backingStore];
    id v32 = +[HMDBackingStoreTransactionOptions cloudRequiresPushOptions];
    uint64_t v68 = [v31 transaction:@"kTransactionUpdate" options:v32];
  }

  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  id obj = v59;
  uint64_t v37 = [obj countByEnumeratingWithState:&v75 objects:v91 count:16];
  if (!v37)
  {

    goto LABEL_37;
  }
  char v67 = 0;
  uint64_t v38 = *(void *)v76;
  long long v66 = v15;
  do
  {
    for (uint64_t i = 0; i != v37; ++i)
    {
      if (*(void *)v76 != v38) {
        objc_enumerationMutation(obj);
      }
      id v40 = *(void **)(*((void *)&v75 + 1) + 8 * i);
      if ((v30 & 1) == 0)
      {
        if ([*(id *)(*((void *)&v75 + 1) + 8 * i) isPushAfterApply])
        {
          __int16 v41 = (void *)MEMORY[0x1D9452090]();
          id v42 = v15;
          HMFGetOSLogHandle();
          id v43 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            id v44 = (id)objc_claimAutoreleasedReturnValue();
            id v45 = [v40 objectID];
            *(_DWORD *)long long buf = 138543618;
            id v93 = v44;
            __int16 v94 = 2112;
            id v95 = v45;
            _os_log_impl(&dword_1D49D5000, v43, OS_LOG_TYPE_INFO, "%{public}@Change should be pushed after being applied: %@", buf, 0x16u);

            id v15 = v66;
          }

          id v46 = [v40 objectChange];
          [v68 add:v46 withMessage:0];
          char v67 = 1;
        }
        else
        {
          if (![v40 isDropStagedAfterApply]) {
            goto LABEL_30;
          }
          id v47 = (void *)MEMORY[0x1D9452090]();
          uint64_t v48 = v15;
          HMFGetOSLogHandle();
          __int16 v49 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            id v50 = (id)objc_claimAutoreleasedReturnValue();
            __int16 v51 = [v40 objectID];
            *(_DWORD *)long long buf = 138543618;
            id v93 = v50;
            __int16 v94 = 2112;
            id v95 = v51;
            _os_log_impl(&dword_1D49D5000, v49, OS_LOG_TYPE_INFO, "%{public}@Object conflict, drop all staged changes for object: %@", buf, 0x16u);

            id v15 = v66;
          }

          id v46 = [v40 rowIDs];
          [v65 addObjectsFromArray:v46];
        }
      }
LABEL_30:
      uint64_t v52 = [v40 objectChange];
      [v70 add:v52 withMessage:0];
    }
    uint64_t v37 = [obj countByEnumeratingWithState:&v75 objects:v91 count:16];
  }
  while (v37);

  if (v67)
  {
    uint64_t v53 = (void *)MEMORY[0x1D9452090]();
    id v54 = v15;
    HMFGetOSLogHandle();
    id v55 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
    {
      uint64_t v56 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v93 = v56;
      _os_log_impl(&dword_1D49D5000, v55, OS_LOG_TYPE_INFO, "%{public}@Saving changes to push after applying", buf, 0xCu);
    }
    [v68 save];
    [(HMDHomeManager *)v54 _uploadHomeManagerToCloudWithDelay:0.0];
  }
LABEL_37:
  v71[0] = MEMORY[0x1E4F143A8];
  v71[1] = 3221225472;
  v71[2] = __131__HMDHomeManager__handleHomeManagerTransactionsFetched_stagedTransaction_mustReplay_cloudConflict_transactionError_syncCompletion___block_invoke_787;
  void v71[3] = &unk_1E6A18500;
  objc_copyWeak(&v74, &location);
  id v57 = v65;
  id v72 = v57;
  id v73 = v58;
  [v70 run:v71];

  objc_destroyWeak(&v74);
  long long v34 = v70;
LABEL_38:

  objc_destroyWeak(&v88);
  objc_destroyWeak(&location);
LABEL_39:
  id v20 = v60;
LABEL_40:
}

void __131__HMDHomeManager__handleHomeManagerTransactionsFetched_stagedTransaction_mustReplay_cloudConflict_transactionError_syncCompletion___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = (void *)MEMORY[0x1D9452090]();
    id v7 = v5;
    id v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int v9 = HMFGetLogIdentifier();
      int v20 = 138543362;
      id v21 = v9;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Home manager zone fetch completed.", (uint8_t *)&v20, 0xCu);
    }
    if (v3)
    {
      id v10 = (void *)MEMORY[0x1D9452090]();
      id v11 = v7;
      uint64_t v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = HMFGetLogIdentifier();
        int v20 = 138543618;
        id v21 = v13;
        __int16 v22 = 2112;
        id v23 = v3;
        _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_ERROR, "%{public}@Home manager zone merge failed with error %@, not saving records to cache", (uint8_t *)&v20, 0x16u);
      }
    }
    else
    {
      [*(id *)(a1 + 32) updateCloudCache];
      if (*(unsigned char *)(a1 + 72) && ([*(id *)(a1 + 32) decryptionFailed] & 1) == 0) {
        [v7 _uploadHomeManagerToCloudWithDelay:0.0];
      }
      if (([*(id *)(a1 + 32) decryptionFailed] & 1) == 0
        && [v7 _zonesFetched])
      {
        id v14 = [v7 cloudDataSyncManager];
        [v14 updateCloudDataSyncFilterState:1];
      }
      [*(id *)(a1 + 40) setOsTransaction:0];
      [*(id *)(a1 + 48) setOsTransaction:0];
      [*(id *)(a1 + 32) setOsTransaction:0];
      id WeakRetained = (id)[v7 _postMergeWatchPush];
    }
  }
  id v15 = (void *)MEMORY[0x1D9452090](WeakRetained);
  id v16 = v5;
  uint64_t v17 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    id v18 = HMFGetLogIdentifier();
    int v20 = 138543362;
    id v21 = v18;
    _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Finished home manager zone merge", (uint8_t *)&v20, 0xCu);
  }
  uint64_t v19 = *(void *)(a1 + 56);
  if (v19) {
    (*(void (**)(uint64_t, id))(v19 + 16))(v19, v3);
  }
}

void __131__HMDHomeManager__handleHomeManagerTransactionsFetched_stagedTransaction_mustReplay_cloudConflict_transactionError_syncCompletion___block_invoke_783(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) cloudZone];
  char v3 = [v2 hasServerTokenAvailable];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  if ((v3 & 1) == 0)
  {
    id v4 = *(void **)(a1 + 40);
    id v5 = [v4 uuid];
    [v4 _updateGenerationCounterWithReason:@"No server token available" sourceUUID:v5 shouldNotifyClients:1];
  }
}

void __131__HMDHomeManager__handleHomeManagerTransactionsFetched_stagedTransaction_mustReplay_cloudConflict_transactionError_syncCompletion___block_invoke_787(id *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    id v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = WeakRetained;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v18 = v8;
      __int16 v19 = 2112;
      id v20 = v3;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Applied object changes to home manager with error %@", buf, 0x16u);
    }
    if (v3 || ![a1[4] count])
    {
      int v9 = [v6 workQueue];
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      id v11[2] = __131__HMDHomeManager__handleHomeManagerTransactionsFetched_stagedTransaction_mustReplay_cloudConflict_transactionError_syncCompletion___block_invoke_2;
      v11[3] = &unk_1E6A19530;
      id v13 = a1[5];
      id v12 = v3;
      dispatch_async(v9, v11);
    }
    else
    {
      id v10 = [a1[4] allObjects];
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 3221225472;
      void v14[2] = __131__HMDHomeManager__handleHomeManagerTransactionsFetched_stagedTransaction_mustReplay_cloudConflict_transactionError_syncCompletion___block_invoke_788;
      v14[3] = &unk_1E6A15DB8;
      objc_copyWeak(&v16, a1 + 6);
      id v15 = a1[5];
      [v6 _updateHomeManagerModelChangesAsPushed:v10 pushMask:3 completion:v14];

      objc_destroyWeak(&v16);
    }
  }
}

void __131__HMDHomeManager__handleHomeManagerTransactionsFetched_stagedTransaction_mustReplay_cloudConflict_transactionError_syncCompletion___block_invoke_788(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = (void *)MEMORY[0x1D9452090]();
    id v4 = WeakRetained;
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v11 = v6;
      _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Dropping changes for object conflicts", buf, 0xCu);
    }
    id v7 = [v4 workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __131__HMDHomeManager__handleHomeManagerTransactionsFetched_stagedTransaction_mustReplay_cloudConflict_transactionError_syncCompletion___block_invoke_789;
    block[3] = &unk_1E6A186E0;
    id v9 = *(id *)(a1 + 32);
    dispatch_async(v7, block);
  }
}

uint64_t __131__HMDHomeManager__handleHomeManagerTransactionsFetched_stagedTransaction_mustReplay_cloudConflict_transactionError_syncCompletion___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t __131__HMDHomeManager__handleHomeManagerTransactionsFetched_stagedTransaction_mustReplay_cloudConflict_transactionError_syncCompletion___block_invoke_789(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

- (void)_runFetchHomeManagerCloudConflict:(BOOL)a3 syncCompletion:(id)a4
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v6 = a4;
  BOOL v7 = [(HMDHomeManager *)self hasiCloudAndControllerKey];
  id v8 = (void *)MEMORY[0x1D9452090]();
  if (v7)
  {
    id v9 = (void *)MEMORY[0x1D9452090]();
    id v10 = self;
    id v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = HMFGetLogIdentifier();
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v12;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Fetching home manager zone changes from the cloud", (uint8_t *)&buf, 0xCu);
    }
    id v13 = [(HMDHomeManager *)v10 cloudDataSyncManager];
    id v14 = [v13 cloudCache];

    id v15 = [v14 homeManagerZone];
    if ([(HMDHomeManager *)v10 forceFetchHomeManagerZone])
    {
      id v16 = (void *)MEMORY[0x1D9452090]();
      uint64_t v17 = v10;
      id v18 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        __int16 v19 = HMFGetLogIdentifier();
        LODWORD(buf) = 138543362;
        *(void *)((char *)&buf + 4) = v19;
        _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_ERROR, "%{public}@Resetting server change token for home manager zone", (uint8_t *)&buf, 0xCu);
      }
      [v15 setServerChangeToken:0];
      id v20 = (void *)MEMORY[0x1D9452090]([(HMDHomeManager *)v17 setForceFetchHomeManagerZone:0]);
      uint64_t v21 = v17;
      __int16 v22 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        id v23 = HMFGetLogIdentifier();
        LODWORD(buf) = 138543362;
        *(void *)((char *)&buf + 4) = v23;
        _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_INFO, "%{public}@Resetting databaseServerChangeToken because home manager was reset", (uint8_t *)&buf, 0xCu);
      }
      [v14 setDatabaseServerChangeToken:0];
      [v14 persistDatabaseServerChangeToken];
    }
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v40 = 0x3032000000;
    __int16 v41 = __Block_byref_object_copy__170059;
    id v42 = __Block_byref_object_dispose__170060;
    id v43 = [[HMDCloudTransaction alloc] initWithType:3 temporaryCache:0];
    [*(id *)(*((void *)&buf + 1) + 40) updateCloudZone:v15];
    uint64_t v24 = (void *)[objc_alloc(MEMORY[0x1E4F654E0]) initWithName:@"com.apple.homed.fetch-from-hmzone"];
    [*(id *)(*((void *)&buf + 1) + 40) setOsTransaction:v24];

    objc_initWeak(&location, v10);
    id v25 = [(HMDHomeManager *)v10 cloudDataSyncManager];
    uint64_t v26 = *(void *)(*((void *)&buf + 1) + 40);
    v32[0] = MEMORY[0x1E4F143A8];
    v32[1] = 3221225472;
    void v32[2] = __67__HMDHomeManager__runFetchHomeManagerCloudConflict_syncCompletion___block_invoke;
    void v32[3] = &unk_1E6A15D68;
    objc_copyWeak(&v36, &location);
    p_long long buf = &buf;
    id v34 = v6;
    id v27 = v15;
    id v33 = v27;
    BOOL v37 = a3;
    [v25 fetchTransaction:v26 completionHandler:v32];

    objc_destroyWeak(&v36);
    objc_destroyWeak(&location);
    _Block_object_dispose(&buf, 8);
  }
  else
  {
    id v28 = self;
    int v29 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      char v30 = HMFGetLogIdentifier();
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v30;
      _os_log_impl(&dword_1D49D5000, v29, OS_LOG_TYPE_DEFAULT, "%{public}@Dropping home manager zone fetch", (uint8_t *)&buf, 0xCu);
    }
    if (v6)
    {
      uint64_t v31 = [MEMORY[0x1E4F28C58] hmErrorWithCode:75 description:@"Operation was cancelled before it could run" reason:@"iCloud & Controller key was not available" suggestion:@"Make sure that you are signed into iCloud account"];
      (*((void (**)(id, void *))v6 + 2))(v6, v31);
    }
  }
}

void __67__HMDHomeManager__runFetchHomeManagerCloudConflict_syncCompletion___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v5 = WeakRetained;
  if (!WeakRetained) {
    goto LABEL_20;
  }
  id v6 = [WeakRetained logEventSubmitter];
  BOOL v7 = +[HMDDecryptionCompletedLogEvent decryptionCompletedWithFailure:](HMDDecryptionCompletedLogEvent, "decryptionCompletedWithFailure:", [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) decryptionFailed]);
  [v6 submitLogEvent:v7];

  if (!v3 && ![*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) decryptionFailed])
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __67__HMDHomeManager__runFetchHomeManagerCloudConflict_syncCompletion___block_invoke_781;
    aBlock[3] = &unk_1E6A15D18;
    objc_copyWeak(&v44, (id *)(a1 + 56));
    long long v34 = *(_OWORD *)(a1 + 40);
    id v26 = (id)v34;
    long long v43 = v34;
    id v27 = _Block_copy(aBlock);
    id v28 = [[HMDCloudTransaction alloc] initWithType:3 temporaryCache:1];
    [(HMDCloudTransaction *)v28 updateCloudZone:*(void *)(a1 + 32)];
    int v29 = [[HMDCloudTransaction alloc] initWithType:3 temporaryCache:1];
    [(HMDCloudTransaction *)v29 updateCloudZone:*(void *)(a1 + 32)];
    v35[0] = MEMORY[0x1E4F143A8];
    v35[1] = 3221225472;
    v35[2] = __67__HMDHomeManager__runFetchHomeManagerCloudConflict_syncCompletion___block_invoke_782;
    v35[3] = &unk_1E6A15D40;
    uint64_t v30 = *(void *)(a1 + 48);
    void v35[4] = v5;
    uint64_t v40 = v30;
    uint64_t v31 = v28;
    id v36 = v31;
    id v32 = v29;
    char v41 = *(unsigned char *)(a1 + 64);
    BOOL v37 = v32;
    id v38 = 0;
    id v33 = v27;
    id v39 = v33;
    [v5 _loadHomeManagerTransactionsToPush:v31 mustReplay:v32 forLegacyPush:0 includeAllChanges:0 completion:v35];

    objc_destroyWeak(&v44);
    goto LABEL_20;
  }
  int v8 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) decryptionFailed];
  id v9 = (void *)MEMORY[0x1D9452090]();
  id v10 = v5;
  id v11 = HMFGetOSLogHandle();
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  if (v8)
  {
    if (v12)
    {
      id v13 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v46 = v13;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_ERROR, "%{public}@Not processing fetch because decryption failed", buf, 0xCu);
    }
    goto LABEL_17;
  }
  if (v12)
  {
    id v14 = HMFGetLogIdentifier();
    id v15 = objc_msgSend(v3, "hmd_conciseCKError");
    id v16 = [v15 shortDescription];
    *(_DWORD *)long long buf = 138543618;
    id v46 = v14;
    __int16 v47 = 2112;
    uint64_t v48 = v16;
    _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_ERROR, "%{public}@Not processing fetch because of error: %{error}@", buf, 0x16u);
  }
  uint64_t v17 = [v3 domain];
  if ([v17 isEqualToString:*MEMORY[0x1E4F19C40]])
  {
    id v18 = [v3 userInfo];
    BOOL v19 = v18 == 0;

    if (v19) {
      goto LABEL_17;
    }
    id v20 = [v3 userInfo];
    uint64_t v17 = objc_msgSend(v20, "hmf_numberForKey:", *MEMORY[0x1E4F19C60]);

    if (v17)
    {
      uint64_t v21 = (void *)MEMORY[0x1D9452090]();
      id v22 = v10;
      id v23 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v24 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        id v46 = v24;
        __int16 v47 = 2112;
        uint64_t v48 = v17;
        _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_DEFAULT, "%{public}@Rescheduling home manager zone fetch with delay %@", buf, 0x16u);
      }
      [v17 doubleValue];
      objc_msgSend(v22, "_fetchHomeManagerCloudConflict:withDelay:completionHandler:", 0, 0);
    }
  }

LABEL_17:
  [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setOsTransaction:0];
  uint64_t v25 = *(void *)(a1 + 40);
  if (v25) {
    (*(void (**)(uint64_t, id))(v25 + 16))(v25, v3);
  }
LABEL_20:
}

void __67__HMDHomeManager__runFetchHomeManagerCloudConflict_syncCompletion___block_invoke_781(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if ([WeakRetained isHomeManagerZoneFirstFetch])
  {
    uint64_t v5 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) hasValidChanges];
    id v6 = (void *)MEMORY[0x1D9452090]();
    id v7 = WeakRetained;
    int v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v17 = v9;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Home Manager Zone determined ready", buf, 0xCu);
    }
    [v7 setHomeManagerZoneFirstFetch:0];
    id v10 = [v7 notificationCenter];
    id v11 = objc_msgSend(NSNumber, "numberWithBool:", v5, @"HMDCR.id", @"HMDCR.stc", @"1411CE6C-B4DE-4622-A49D-F66FE296D6B5");
    v15[1] = v11;
    BOOL v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v15 forKeys:&v14 count:2];
    [v10 postNotificationName:@"HMDCloudZoneReadyNotification" object:0 userInfo:v12];
  }
  uint64_t v13 = *(void *)(a1 + 32);
  if (v13) {
    (*(void (**)(uint64_t, id))(v13 + 16))(v13, v3);
  }
}

uint64_t __67__HMDHomeManager__runFetchHomeManagerCloudConflict_syncCompletion___block_invoke_782(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleHomeManagerTransactionsFetched:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) stagedTransaction:*(void *)(a1 + 40) mustReplay:*(void *)(a1 + 48) cloudConflict:*(unsigned __int8 *)(a1 + 80) transactionError:*(void *)(a1 + 56) syncCompletion:*(void *)(a1 + 64)];
}

- (void)_fetchHomeManagerCloudConflict:(BOOL)a3 withDelay:(double)a4 completionHandler:(id)a5
{
  BOOL v6 = a3;
  location[3] = *(id *)MEMORY[0x1E4F143B8];
  id v8 = a5;
  if ([(HMDHomeManager *)self hasiCloudAndControllerKey])
  {
    objc_initWeak(location, self);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __77__HMDHomeManager__fetchHomeManagerCloudConflict_withDelay_completionHandler___block_invoke;
    aBlock[3] = &unk_1E6A15CF0;
    objc_copyWeak(&v25, location);
    id v9 = v8;
    id v24 = v9;
    id v10 = _Block_copy(aBlock);
    id v11 = [(HMDHomeManager *)self cloudDataSyncManager];
    BOOL v12 = [v11 homeManagerZone];

    uint64_t v13 = [v12 zone];
    uint64_t v14 = [v13 zoneID];
    id v15 = [v14 zoneName];
    id v16 = +[HMDSyncOperation cloudZoneFetchSyncOperation:v15 cloudConflict:v6 block:v10 completion:v9];

    uint64_t v17 = [(HMDHomeManager *)self syncManager];
    [v17 addOperation:v16 withDelay:a4];

    objc_destroyWeak(&v25);
    objc_destroyWeak(location);
  }
  else
  {
    uint64_t v18 = (void *)MEMORY[0x1D9452090]();
    BOOL v19 = self;
    id v20 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = HMFGetLogIdentifier();
      LODWORD(location[0]) = 138543362;
      *(id *)((char *)location + 4) = v21;
      _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_DEFAULT, "%{public}@Not scheduling home manager zone fetch", (uint8_t *)location, 0xCu);
    }
    if (v8)
    {
      id v22 = [MEMORY[0x1E4F28C58] hmErrorWithCode:75 description:@"Operation was cancelled before it could run" reason:@"iCloud & Controller key was not available" suggestion:@"Make sure that you are signed into iCloud account"];
      (*((void (**)(id, void *))v8 + 2))(v8, v22);
    }
  }
}

void __77__HMDHomeManager__fetchHomeManagerCloudConflict_withDelay_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3, int a4)
{
  id v11 = a2;
  id v7 = a3;
  if (a4)
  {
    if (!v11) {
      goto LABEL_9;
    }
    id v8 = [MEMORY[0x1E4F28C58] hmErrorWithCode:23 description:@"Operation was cancelled before it could run" reason:@"HMDCloudManager cancelled the operation" suggestion:0];
    v11[2](v11, v8);
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    if (WeakRetained)
    {
      id v8 = (void (**)(void, void))WeakRetained;
      objc_msgSend(WeakRetained, "_runFetchHomeManagerCloudConflict:syncCompletion:", objc_msgSend(v7, "isCloudConflict"), v11);
    }
    else
    {
      id v8 = *(void (***)(void, void))(a1 + 32);
      if (v8)
      {
        id v10 = [MEMORY[0x1E4F28C58] hmErrorWithCode:23 description:@"Operation was cancelled as the HMDHomeManager object went out of scope" reason:@"HMDHomeManager is no longer valid" suggestion:@"Debug... May be..."];
        ((void (**)(void, void *))v8)[2](v8, v10);

        id v8 = 0;
      }
    }
  }

LABEL_9:
}

- (void)fetchHomeManagerCloudConflict:(BOOL)a3 withDelay:(double)a4
{
  objc_initWeak(&location, self);
  BOOL v6 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __58__HMDHomeManager_fetchHomeManagerCloudConflict_withDelay___block_invoke;
  block[3] = &unk_1E6A158D8;
  objc_copyWeak(&v8, &location);
  BOOL v9 = a3;
  dispatch_async(v6, block);

  objc_destroyWeak(&v8);
  objc_destroyWeak(&location);
}

void __58__HMDHomeManager_fetchHomeManagerCloudConflict_withDelay___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    [WeakRetained _fetchHomeManagerCloudConflict:*(unsigned __int8 *)(a1 + 40) withDelay:0 completionHandler:0.0];
    id WeakRetained = v3;
  }
}

- (void)_updateHomeManagerModelChangesAsPushed:(id)a3 pushMask:(unint64_t)a4 completion:(id)a5
{
  id v8 = a5;
  id v9 = a3;
  id v10 = [[HMDBackingStoreLogUpdateOperation alloc] initWithRowIDs:v9 successfullyPushedTo:a4];

  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  id v13[2] = __77__HMDHomeManager__updateHomeManagerModelChangesAsPushed_pushMask_completion___block_invoke;
  void v13[3] = &unk_1E6A19358;
  id v14 = v8;
  id v11 = v8;
  [(HMDBackingStoreOperation *)v10 setResultBlock:v13];
  BOOL v12 = [(HMDHomeManager *)self backingStore];
  [v12 submit:v10];
}

uint64_t __77__HMDHomeManager__updateHomeManagerModelChangesAsPushed_pushMask_completion___block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

- (void)_updateHomeManagerModelChangesAsPushed:(id)a3 legacyPush:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  if ([v6 count])
  {
    if (v4) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = 2;
    }
    id v8 = dispatch_group_create();
    dispatch_group_enter(v8);
    id v9 = [[HMDBackingStoreLogUpdateOperation alloc] initWithRowIDs:v6 successfullyPushedTo:v7];
    objc_initWeak(&location, self);
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    void v16[2] = __68__HMDHomeManager__updateHomeManagerModelChangesAsPushed_legacyPush___block_invoke;
    v16[3] = &unk_1E6A17758;
    objc_copyWeak(&v18, &location);
    id v10 = v8;
    uint64_t v17 = v10;
    id v11 = (void *)MEMORY[0x1D9452090]([(HMDBackingStoreOperation *)v9 setResultBlock:v16]);
    BOOL v12 = self;
    HMFGetOSLogHandle();
    uint64_t v13 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      id v14 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v21 = v14;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_DEBUG, "%{public}@Update homemanager datastore items pushed started", buf, 0xCu);
    }
    id v15 = [(HMDHomeManager *)v12 backingStore];
    [v15 submit:v9];

    dispatch_group_wait(v10, 0xFFFFFFFFFFFFFFFFLL);
    objc_destroyWeak(&v18);
    objc_destroyWeak(&location);
  }
}

void __68__HMDHomeManager__updateHomeManagerModelChangesAsPushed_legacyPush___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  uint64_t v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = WeakRetained;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    id v8 = HMFGetLogIdentifier();
    int v9 = 138543362;
    id v10 = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Update homemanager datastore items pushed completed", (uint8_t *)&v9, 0xCu);
  }
}

- (void)_loadHomeManagerTransactionsToPush:(id)a3 mustReplay:(id)a4 forLegacyPush:(BOOL)a5 includeAllChanges:(BOOL)a6 completion:(id)a7
{
  BOOL v9 = a5;
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  id v12 = a3;
  id v40 = a4;
  id v13 = a7;
  if (v12)
  {
    id v39 = v13;
    if (v9) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = 2;
    }
    id v15 = [MEMORY[0x1E4F1CA48] array];
    id v16 = [MEMORY[0x1E4F1CA48] array];
    uint64_t v17 = [MEMORY[0x1E4F1CA80] set];
    *(void *)&long long v61 = 0;
    *((void *)&v61 + 1) = &v61;
    uint64_t v62 = 0x2020000000;
    char v63 = 0;
    id v18 = (void *)MEMORY[0x1D9452090]();
    BOOL v19 = self;
    HMFGetOSLogHandle();
    id v20 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v21 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      __int16 v60 = v21;
      _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_DEBUG, "%{public}@Find all home manager changes in datastore", buf, 0xCu);
    }
    objc_initWeak(&location, v19);
    uint64_t v22 = [HMDBackingStoreLogFetchOperation alloc];
    v47[0] = MEMORY[0x1E4F143A8];
    v47[1] = 3221225472;
    void v47[2] = __107__HMDHomeManager__loadHomeManagerTransactionsToPush_mustReplay_forLegacyPush_includeAllChanges_completion___block_invoke_764;
    v47[3] = &unk_1E6A15CA0;
    BOOL v55 = a6;
    id v48 = v12;
    id v49 = v40;
    id v23 = v16;
    id v50 = v23;
    id v24 = v15;
    id v51 = v24;
    uint64_t v52 = v19;
    id v25 = v17;
    id v53 = v25;
    id v54 = &v61;
    id v26 = [(HMDBackingStoreLogFetchOperation *)v22 initWithNeedsPushTo:v14 result:v47];
    v41[0] = MEMORY[0x1E4F143A8];
    v41[1] = 3221225472;
    v41[2] = __107__HMDHomeManager__loadHomeManagerTransactionsToPush_mustReplay_forLegacyPush_includeAllChanges_completion___block_invoke_765;
    v41[3] = &unk_1E6A16C48;
    objc_copyWeak(&v46, &location);
    id v27 = v25;
    id v42 = v27;
    id v44 = v39;
    id v28 = v23;
    id v43 = v28;
    id v45 = &v61;
    int v29 = (void *)MEMORY[0x1D9452090]([(HMDBackingStoreOperation *)v26 setResultBlock:v41]);
    uint64_t v30 = v19;
    HMFGetOSLogHandle();
    uint64_t v31 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
    {
      id v32 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      __int16 v60 = v32;
      _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_DEBUG, "%{public}@Load transactions from home manager datastore", buf, 0xCu);
    }
    id v33 = [(HMDHomeManager *)v30 backingStore];
    [v33 submit:v26];

    objc_destroyWeak(&v46);
    objc_destroyWeak(&location);
    _Block_object_dispose(&v61, 8);

LABEL_14:
    id v13 = v39;
    goto LABEL_15;
  }
  if (v13)
  {
    id v39 = v13;
    long long v34 = (void *)MEMORY[0x1D9452090]();
    long long v35 = self;
    id v36 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      BOOL v37 = HMFGetLogIdentifier();
      LODWORD(v61) = 138543362;
      *(void *)((char *)&v61 + 4) = v37;
      _os_log_impl(&dword_1D49D5000, v36, OS_LOG_TYPE_ERROR, "%{public}@A cloudTransaction is required query datastore", (uint8_t *)&v61, 0xCu);
    }
    id v38 = [(HMDHomeManager *)v35 workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __107__HMDHomeManager__loadHomeManagerTransactionsToPush_mustReplay_forLegacyPush_includeAllChanges_completion___block_invoke;
    block[3] = &unk_1E6A186E0;
    id v58 = v39;
    dispatch_async(v38, block);

    id v24 = v58;
    goto LABEL_14;
  }
LABEL_15:
}

void __107__HMDHomeManager__loadHomeManagerTransactionsToPush_mustReplay_forLegacyPush_includeAllChanges_completion___block_invoke(uint64_t a1)
{
  id v2 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __107__HMDHomeManager__loadHomeManagerTransactionsToPush_mustReplay_forLegacyPush_includeAllChanges_completion___block_invoke_764(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v64 = a4;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  id v9 = v7;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v81 objects:v91 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v82;
    id v66 = v9;
    id v67 = v8;
    uint64_t v65 = *(void *)v82;
    do
    {
      uint64_t v13 = 0;
      uint64_t v68 = v11;
      do
      {
        if (*(void *)v82 != v12) {
          objc_enumerationMutation(v9);
        }
        uint64_t v14 = *(void **)(*((void *)&v81 + 1) + 8 * v13);
        if (*(unsigned char *)(a1 + 88))
        {
          [*(id *)(a1 + 32) addChangeWithObjectChange:*(void *)(*((void *)&v81 + 1) + 8 * v13)];
          if ([v8 mustReplay])
          {
            id v15 = *(void **)(a1 + 40);
            if (v15)
            {
              id v16 = v14;
LABEL_10:
              [v15 addChangeWithObjectChange:v16];
              goto LABEL_45;
            }
          }
          goto LABEL_45;
        }
        id v17 = v14;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v18 = v17;
        }
        else {
          id v18 = 0;
        }
        id v19 = v18;

        id v72 = v17;
        if (v19)
        {
        }
        else
        {
          id v20 = v17;
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();

          if ((isKindOfClass & 1) == 0 || !v20)
          {
            id v58 = v20;
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              id v59 = v58;
            }
            else {
              id v59 = 0;
            }
            id v60 = v59;

            if (v60)
            {
              uint64_t v61 = [v58 objectChangeType];

              if (v61 == 3) {
                *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 1;
              }
            }
            [*(id *)(a1 + 32) addChangeWithObjectChange:v58];
            if ([v8 mustReplay])
            {
              id v15 = *(void **)(a1 + 40);
              if (v15)
              {
                id v16 = v58;
                goto LABEL_10;
              }
            }
            goto LABEL_45;
          }
        }
        if ([v17 objectChangeType] == 3)
        {
          uint64_t v69 = v13;
          [*(id *)(a1 + 48) addObject:v17];
          long long v79 = 0u;
          long long v80 = 0u;
          long long v77 = 0u;
          long long v78 = 0u;
          uint64_t v22 = (void *)[*(id *)(a1 + 56) copy];
          uint64_t v23 = [v22 countByEnumeratingWithState:&v77 objects:v90 count:16];
          if (v23)
          {
            uint64_t v24 = v23;
            id v25 = v17;
            uint64_t v26 = *(void *)v78;
            do
            {
              uint64_t v27 = 0;
              id obj = (id)v24;
              do
              {
                if (*(void *)v78 != v26) {
                  objc_enumerationMutation(v22);
                }
                id v28 = *(void **)(*((void *)&v77 + 1) + 8 * v27);
                int v29 = [v25 uuid];
                uint64_t v30 = [v28 uuid];
                int v31 = [v29 isEqual:v30];

                if (v31)
                {
                  id v32 = (void *)MEMORY[0x1D9452090]();
                  id v33 = *(id *)(a1 + 64);
                  long long v34 = HMFGetOSLogHandle();
                  if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
                  {
                    HMFGetLogIdentifier();
                    uint64_t v35 = v26;
                    uint64_t v36 = a1;
                    id v38 = v37 = v22;
                    id v39 = [v28 uuid];
                    *(_DWORD *)long long buf = 138543618;
                    id v87 = v38;
                    __int16 v88 = 2112;
                    BOOL v89 = v39;
                    _os_log_impl(&dword_1D49D5000, v34, OS_LOG_TYPE_INFO, "%{public}@Dropping added home because it was removed %@", buf, 0x16u);

                    uint64_t v22 = v37;
                    a1 = v36;
                    uint64_t v26 = v35;
                    uint64_t v24 = (uint64_t)obj;
                    id v25 = v72;
                  }

                  [*(id *)(a1 + 56) removeObject:v28];
                  id v40 = *(void **)(a1 + 72);
                  char v41 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v28, "bsoLogRowID"));
                  [v40 addObject:v41];
                }
                ++v27;
              }
              while (v24 != v27);
              uint64_t v24 = [v22 countByEnumeratingWithState:&v77 objects:v90 count:16];
            }
            while (v24);
          }
        }
        else
        {
          if ([v17 objectChangeType] != 1) {
            goto LABEL_45;
          }
          uint64_t v69 = v13;
          [*(id *)(a1 + 56) addObject:v17];
          long long v75 = 0u;
          long long v76 = 0u;
          long long v73 = 0u;
          long long v74 = 0u;
          id obja = (id)[*(id *)(a1 + 48) copy];
          uint64_t v42 = [obja countByEnumeratingWithState:&v73 objects:v85 count:16];
          if (v42)
          {
            uint64_t v43 = v42;
            id v44 = v17;
            uint64_t v45 = *(void *)v74;
            do
            {
              for (uint64_t i = 0; i != v43; ++i)
              {
                if (*(void *)v74 != v45) {
                  objc_enumerationMutation(obja);
                }
                __int16 v47 = *(void **)(*((void *)&v73 + 1) + 8 * i);
                id v48 = [v44 uuid];
                id v49 = [v47 uuid];
                int v50 = [v48 isEqual:v49];

                if (v50)
                {
                  id v51 = (void *)MEMORY[0x1D9452090]();
                  id v52 = *(id *)(a1 + 64);
                  id v53 = HMFGetOSLogHandle();
                  if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
                  {
                    id v54 = HMFGetLogIdentifier();
                    BOOL v55 = [v47 uuid];
                    *(_DWORD *)long long buf = 138543618;
                    id v87 = v54;
                    __int16 v88 = 2112;
                    BOOL v89 = v55;
                    _os_log_impl(&dword_1D49D5000, v53, OS_LOG_TYPE_INFO, "%{public}@Dropping removed home because it was added %@", buf, 0x16u);

                    id v44 = v72;
                  }

                  [*(id *)(a1 + 48) removeObject:v47];
                  uint64_t v56 = *(void **)(a1 + 72);
                  id v57 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v47, "bsoLogRowID"));
                  [v56 addObject:v57];
                }
              }
              uint64_t v43 = [obja countByEnumeratingWithState:&v73 objects:v85 count:16];
            }
            while (v43);
          }
        }
        id v9 = v66;
        id v8 = v67;
        uint64_t v12 = v65;
        uint64_t v11 = v68;
        uint64_t v13 = v69;
LABEL_45:
        ++v13;
      }
      while (v13 != v11);
      uint64_t v62 = [v9 countByEnumeratingWithState:&v81 objects:v91 count:16];
      uint64_t v11 = v62;
    }
    while (v62);
  }

  return 1;
}

void __107__HMDHomeManager__loadHomeManagerTransactionsToPush_mustReplay_forLegacyPush_includeAllChanges_completion___block_invoke_765(uint64_t a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    if ([*(id *)(a1 + 32) count])
    {
      uint64_t v5 = [HMDBackingStoreLogUpdateOperation alloc];
      id v6 = [*(id *)(a1 + 32) allObjects];
      id v7 = [(HMDBackingStoreLogUpdateOperation *)v5 initWithRowIDs:v6 successfullyPushedTo:3];

      v24[0] = MEMORY[0x1E4F143A8];
      v24[1] = 3221225472;
      void v24[2] = __107__HMDHomeManager__loadHomeManagerTransactionsToPush_mustReplay_forLegacyPush_includeAllChanges_completion___block_invoke_2;
      v24[3] = &unk_1E6A18528;
      objc_copyWeak(&v25, (id *)(a1 + 64));
      id v8 = (void *)MEMORY[0x1D9452090]([(HMDBackingStoreOperation *)v7 setResultBlock:v24]);
      id v9 = WeakRetained;
      HMFGetOSLogHandle();
      uint64_t v10 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v27 = v11;
        _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_DEBUG, "%{public}@Scheduling cleanup of obsolete data in datastore", buf, 0xCu);
      }
      uint64_t v12 = [v9 backingStore];
      [v12 submit:v7];

      objc_destroyWeak(&v25);
    }
    uint64_t v13 = (void *)MEMORY[0x1D9452090]();
    id v14 = WeakRetained;
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      id v16 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v27 = v16;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_DEBUG, "%{public}@Finished loading transactions from home manager datastore", buf, 0xCu);
    }
    if (*(void *)(a1 + 48))
    {
      id v17 = [v14 workQueue];
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = __107__HMDHomeManager__loadHomeManagerTransactionsToPush_mustReplay_forLegacyPush_includeAllChanges_completion___block_invoke_767;
      void v20[3] = &unk_1E6A15CC8;
      id v22 = *(id *)(a1 + 48);
      id v18 = *(id *)(a1 + 40);
      uint64_t v19 = *(void *)(a1 + 56);
      id v21 = v18;
      uint64_t v23 = v19;
      dispatch_async(v17, v20);
    }
  }
}

void __107__HMDHomeManager__loadHomeManagerTransactionsToPush_mustReplay_forLegacyPush_includeAllChanges_completion___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = WeakRetained;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    id v8 = HMFGetLogIdentifier();
    int v9 = 138543362;
    uint64_t v10 = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Finished cleaning up obsolete data in datastore", (uint8_t *)&v9, 0xCu);
  }
}

uint64_t __107__HMDHomeManager__loadHomeManagerTransactionsToPush_mustReplay_forLegacyPush_includeAllChanges_completion___block_invoke_767(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[5] + 16))(a1[5], a1[4], *(unsigned __int8 *)(*(void *)(a1[6] + 8) + 24), 0);
}

- (void)_uploadHomeManagerToCloudSyncCompletion:(id)a3
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  BOOL v5 = [(HMDHomeManager *)self hasiCloudAndControllerKey];
  id v6 = (void *)MEMORY[0x1D9452090]();
  if (v5)
  {
    id v7 = (void *)MEMORY[0x1D9452090]();
    id v8 = self;
    int v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v26 = v10;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Pushing changes up to the cloud", buf, 0xCu);
    }
    uint64_t v11 = [(HMDHomeManager *)v8 cloudDataSyncManager];
    uint64_t v12 = [v11 cloudCache];

    uint64_t v13 = [v12 homeManagerZone];
    id v14 = [[HMDCloudTransaction alloc] initWithType:3 temporaryCache:0];
    [(HMDCloudTransaction *)v14 updateCloudZone:v13];
    id v15 = (void *)[objc_alloc(MEMORY[0x1E4F654E0]) initWithName:@"com.apple.homed.push-to-hmzone"];
    [(HMDCloudTransaction *)v14 setOsTransaction:v15];

    objc_initWeak((id *)buf, v8);
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    void v21[2] = __58__HMDHomeManager__uploadHomeManagerToCloudSyncCompletion___block_invoke;
    void v21[3] = &unk_1E6A15C78;
    objc_copyWeak(&v24, (id *)buf);
    id v16 = v14;
    id v22 = v16;
    id v23 = v4;
    [(HMDHomeManager *)v8 _loadHomeManagerTransactionsToPush:v16 mustReplay:0 forLegacyPush:0 includeAllChanges:0 completion:v21];

    objc_destroyWeak(&v24);
    objc_destroyWeak((id *)buf);
  }
  else
  {
    id v17 = self;
    id v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v26 = v19;
      _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_DEFAULT, "%{public}@Dropping home manager zone push.", buf, 0xCu);
    }
    if (v4)
    {
      id v20 = [MEMORY[0x1E4F28C58] hmErrorWithCode:75 description:@"Operation was cancelled before it could run" reason:@"iCloud & Controller key was not available" suggestion:@"Make sure that you are signed into iCloud account"];
      (*((void (**)(id, void *))v4 + 2))(v4, v20);
    }
  }
}

void __58__HMDHomeManager__uploadHomeManagerToCloudSyncCompletion___block_invoke(id *a1, void *a2, char a3, void *a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a4;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    if (([a1[4] hasValidChanges] & 1) != 0 || objc_msgSend(v7, "count"))
    {
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = __58__HMDHomeManager__uploadHomeManagerToCloudSyncCompletion___block_invoke_762;
      void v20[3] = &unk_1E6A15C50;
      objc_copyWeak(&v23, a1 + 6);
      id v21 = a1[4];
      char v24 = a3;
      id v22 = a1[5];
      [WeakRetained _processRemoveHomeModels:v7 processIndex:0 completion:v20];

      objc_destroyWeak(&v23);
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1D9452090]();
      id v11 = WeakRetained;
      uint64_t v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v26 = v13;
        _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@No transaction were loaded from backing store, dropping home manager upload", buf, 0xCu);
      }
      if ([v11 backOffOperationInProgress])
      {
        id v14 = (void *)MEMORY[0x1D9452090]([v11 setBackOffOperationInProgress:0]);
        id v15 = v11;
        id v16 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          id v17 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543362;
          uint64_t v26 = v17;
          _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, "%{public}@Clearing that we were in a backoff operation", buf, 0xCu);
        }
      }
      id v18 = [a1[4] allTransactionStoreRowIDs];
      [v11 _updateHomeManagerModelChangesAsPushed:v18 legacyPush:0];

      [a1[4] setOsTransaction:0];
      uint64_t v19 = (void (**)(id, void))a1[5];
      if (v19) {
        v19[2](v19, 0);
      }
    }
  }
}

void __58__HMDHomeManager__uploadHomeManagerToCloudSyncCompletion___block_invoke_762(uint64_t a1)
{
  id v2 = (id *)(a1 + 48);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    BOOL v5 = [WeakRetained cloudDataSyncManager];
    uint64_t v6 = *(void *)(a1 + 32);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = __58__HMDHomeManager__uploadHomeManagerToCloudSyncCompletion___block_invoke_2;
    v7[3] = &unk_1E6A15C28;
    objc_copyWeak(&v10, v2);
    id v8 = *(id *)(a1 + 32);
    char v11 = *(unsigned char *)(a1 + 56);
    id v9 = *(id *)(a1 + 40);
    [v5 uploadTransaction:v6 completionHandler:v7];

    objc_destroyWeak(&v10);
  }
}

void __58__HMDHomeManager__uploadHomeManagerToCloudSyncCompletion___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  BOOL v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = WeakRetained;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    id v9 = objc_msgSend(v3, "hmd_conciseCKError");
    id v10 = [v9 shortDescription];
    int v28 = 138543618;
    int v29 = v8;
    __int16 v30 = 2112;
    int v31 = v10;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Uploaded data to home manager zone with error status: %@", (uint8_t *)&v28, 0x16u);
  }
  if (v6)
  {
    if ([v6 backOffOperationInProgress])
    {
      char v11 = (void *)MEMORY[0x1D9452090]([v6 setBackOffOperationInProgress:0]);
      id v12 = v6;
      uint64_t v13 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        id v14 = HMFGetLogIdentifier();
        int v28 = 138543362;
        int v29 = v14;
        _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Clearing that we were in a backoff operation", (uint8_t *)&v28, 0xCu);
      }
    }
    if (v3)
    {
      id v15 = [v3 domain];
      if ([v15 isEqualToString:*MEMORY[0x1E4F19C40]])
      {
        id v16 = [v3 userInfo];

        if (!v16) {
          goto LABEL_20;
        }
        id v17 = [v3 userInfo];
        id v15 = objc_msgSend(v17, "hmf_numberForKey:", *MEMORY[0x1E4F19C60]);

        if (v15)
        {
          id v18 = (void *)MEMORY[0x1D9452090]();
          id v19 = v6;
          id v20 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            id v21 = HMFGetLogIdentifier();
            int v28 = 138543618;
            int v29 = v21;
            __int16 v30 = 2112;
            int v31 = v15;
            _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@Rescheduling home manager zone push with delay %@", (uint8_t *)&v28, 0x16u);
          }
          [v15 doubleValue];
          objc_msgSend(v19, "_uploadHomeManagerToCloudWithDelay:");
        }
      }
    }
    else
    {
      [v6 _resetCloudOperationRetryCounters];
      id v22 = [*(id *)(a1 + 32) processedTransactionStoreRowIDs];
      [v6 _updateHomeManagerModelChangesAsPushed:v22 legacyPush:0];

      if (!*(unsigned char *)(a1 + 56)) {
        goto LABEL_20;
      }
      id v23 = (void *)MEMORY[0x1D9452090]();
      id v24 = v6;
      id v25 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        uint64_t v26 = HMFGetLogIdentifier();
        int v28 = 138543362;
        int v29 = v26;
        _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_INFO, "%{public}@At least one zone information model was deleted in the cloud, evaluated if account should migration to HH2", (uint8_t *)&v28, 0xCu);
      }
      id v15 = [v24 cloudDataSyncStateFilter];
      [v15 evaluateMoveToHH2];
    }
  }
LABEL_20:
  [*(id *)(a1 + 32) setOsTransaction:0];
  uint64_t v27 = *(void *)(a1 + 40);
  if (v27) {
    (*(void (**)(uint64_t, id))(v27 + 16))(v27, v3);
  }
}

- (void)_processRemoveHomeModels:(id)a3 processIndex:(unint64_t)a4 completion:(id)a5
{
  id v8 = a3;
  id v9 = (void (**)(void))a5;
  if ([v8 count] <= a4)
  {
    if (v9) {
      v9[2](v9);
    }
  }
  else
  {
    id v10 = [v8 objectAtIndexedSubscript:a4];
    char v11 = [(HMDHomeManager *)self cloudDataSyncManager];
    id v12 = [v11 cloudCache];

    uint64_t v13 = [v10 uuid];
    id v14 = +[HMDHome zoneIDFromHomeUUID:v13];
    id v15 = [v14 UUIDString];

    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    void v18[2] = __67__HMDHomeManager__processRemoveHomeModels_processIndex_completion___block_invoke;
    v18[3] = &unk_1E6A15C00;
    void v18[4] = self;
    id v19 = v10;
    id v20 = v15;
    id v21 = v8;
    unint64_t v23 = a4;
    id v22 = v9;
    id v16 = v15;
    id v17 = v10;
    [v12 homeZoneWithName:v16 owner:&stru_1F2C9F1A8 completion:v18];
  }
}

void __67__HMDHomeManager__processRemoveHomeModels_processIndex_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __67__HMDHomeManager__processRemoveHomeModels_processIndex_completion___block_invoke_2;
  block[3] = &unk_1E6A15BD8;
  id v12 = v3;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v13 = v5;
  uint64_t v14 = v6;
  id v15 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  id v9 = *(void **)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  id v16 = v7;
  uint64_t v18 = v8;
  id v17 = v9;
  id v10 = v3;
  dispatch_async(v4, block);
}

void __67__HMDHomeManager__processRemoveHomeModels_processIndex_completion___block_invoke_2(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = [[HMDCloudTransaction alloc] initWithType:4 temporaryCache:0];
    [(HMDCloudTransaction *)v2 updateCloudZone:*(void *)(a1 + 32)];
    [(HMDCloudTransaction *)v2 addChangeWithObjectChange:*(void *)(a1 + 40)];
    [(HMDCloudTransaction *)v2 setDeleteZone:1];
    objc_initWeak(&location, *(id *)(a1 + 48));
    id v3 = [*(id *)(a1 + 48) cloudDataSyncManager];
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    void v14[2] = __67__HMDHomeManager__processRemoveHomeModels_processIndex_completion___block_invoke_3;
    v14[3] = &unk_1E6A15E80;
    void v14[4] = *(void *)(a1 + 48);
    id v15 = *(id *)(a1 + 32);
    objc_copyWeak(v20, &location);
    id v16 = *(id *)(a1 + 56);
    id v4 = v2;
    id v17 = v4;
    id v5 = *(id *)(a1 + 64);
    id v7 = *(void **)(a1 + 72);
    uint64_t v6 = *(void **)(a1 + 80);
    id v18 = v5;
    v20[1] = v6;
    id v19 = v7;
    [v3 removeZonesTransactions:v4 completionHandler:v14];

    objc_destroyWeak(v20);
    objc_destroyWeak(&location);
  }
  else
  {
    if (*(void *)(a1 + 56))
    {
      uint64_t v8 = [*(id *)(a1 + 48) cloudDataSyncManager];
      [v8 removeHomeZoneName:*(void *)(a1 + 56)];

      id v9 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:*(void *)(a1 + 56)];
      [*(id *)(a1 + 48) _removeCloudZone:v9 updateHomeManager:0];
    }
    id v10 = *(void **)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 72);
    uint64_t v12 = *(void *)(a1 + 80) + 1;
    uint64_t v13 = *(void *)(a1 + 64);
    [v10 _processRemoveHomeModels:v13 processIndex:v12 completion:v11];
  }
}

void __67__HMDHomeManager__processRemoveHomeModels_processIndex_completion___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v7 = HMFGetLogIdentifier();
    uint64_t v8 = *(void *)(a1 + 40);
    id v9 = objc_msgSend(v3, "hmd_conciseCKError");
    id v10 = [v9 shortDescription];
    int v15 = 138543874;
    id v16 = v7;
    __int16 v17 = 2112;
    uint64_t v18 = v8;
    __int16 v19 = 2112;
    id v20 = v10;
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Removed zone %@ with error status: %@", (uint8_t *)&v15, 0x20u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  uint64_t v12 = WeakRetained;
  if (WeakRetained)
  {
    if (!v3)
    {
      if (*(void *)(a1 + 48))
      {
        uint64_t v13 = [WeakRetained cloudDataSyncManager];
        [v13 removeHomeZoneName:*(void *)(a1 + 48)];
      }
      [*(id *)(a1 + 56) setAllChangedAsProcessed];
      uint64_t v14 = [*(id *)(a1 + 56) processedTransactionStoreRowIDs];
      [v12 _updateHomeManagerModelChangesAsPushed:v14 legacyPush:0];
    }
    [v12 _processRemoveHomeModels:*(void *)(a1 + 64) processIndex:*(void *)(a1 + 88) + 1 completion:*(void *)(a1 + 72)];
  }
}

- (void)_uploadHomeManagerToCloudWithDelay:(double)a3
{
  location[3] = *(id *)MEMORY[0x1E4F143B8];
  if ([(HMDHomeManager *)self hasiCloudAndControllerKey])
  {
    objc_initWeak(location, self);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __53__HMDHomeManager__uploadHomeManagerToCloudWithDelay___block_invoke;
    aBlock[3] = &unk_1E6A15BB0;
    objc_copyWeak(&v18, location);
    id v5 = _Block_copy(aBlock);
    uint64_t v6 = [(HMDHomeManager *)self cloudDataSyncManager];
    id v7 = [v6 homeManagerZone];

    uint64_t v8 = [v7 zone];
    id v9 = [v8 zoneID];
    id v10 = [v9 zoneName];
    uint64_t v11 = +[HMDSyncOperation cloudZonePushSyncOperation:v10 block:v5];

    uint64_t v12 = [(HMDHomeManager *)self syncManager];
    [v12 addOperation:v11 withDelay:a3];

    objc_destroyWeak(&v18);
    objc_destroyWeak(location);
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x1D9452090]();
    uint64_t v14 = self;
    int v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = HMFGetLogIdentifier();
      LODWORD(location[0]) = 138543362;
      *(id *)((char *)location + 4) = v16;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_DEFAULT, "%{public}@Not scheduling home manager zone push.", (uint8_t *)location, 0xCu);
    }
  }
}

void __53__HMDHomeManager__uploadHomeManagerToCloudWithDelay___block_invoke(uint64_t a1, void *a2, void *a3, int a4)
{
  id v10 = a2;
  id v7 = a3;
  if (a4)
  {
    if (!v10) {
      goto LABEL_7;
    }
    uint64_t v8 = [MEMORY[0x1E4F28C58] hmErrorWithCode:23 description:@"Operation was cancelled before it could run" reason:@"HMDCloudManager cancelled the operation" suggestion:0];
    v10[2](v10, v8);
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    uint64_t v8 = WeakRetained;
    if (WeakRetained) {
      [WeakRetained _uploadHomeManagerToCloudSyncCompletion:v10];
    }
  }

LABEL_7:
}

- (void)uploadHomeManagerToCloudWithDelay:(double)a3
{
  objc_initWeak(&location, self);
  id v5 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __52__HMDHomeManager_uploadHomeManagerToCloudWithDelay___block_invoke;
  block[3] = &unk_1E6A15B88;
  objc_copyWeak(v7, &location);
  v7[1] = *(id *)&a3;
  dispatch_async(v5, block);

  objc_destroyWeak(v7);
  objc_destroyWeak(&location);
}

void __52__HMDHomeManager_uploadHomeManagerToCloudWithDelay___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    [WeakRetained _uploadHomeManagerToCloudWithDelay:*(double *)(a1 + 40)];
    id WeakRetained = v3;
  }
}

- (void)sendUnsecureMessage:(id)a3 target:(id)a4 userID:(id)a5 responseQueue:(id)a6 responseHandler:(id)a7
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  int v15 = a6;
  id v16 = a7;
  __int16 v17 = +[HMDMessageDispatcher destinationWithTarget:v13 userID:v14 destination:0 multicast:1];
  if (v17)
  {
    [v12 setDestination:v17];
    id v18 = [v12 responseHandler];

    if (v16 && !v18)
    {
      v26[0] = MEMORY[0x1E4F143A8];
      v26[1] = 3221225472;
      void v26[2] = __82__HMDHomeManager_sendUnsecureMessage_target_userID_responseQueue_responseHandler___block_invoke_2;
      v26[3] = &unk_1E6A16B58;
      uint64_t v27 = v15;
      id v28 = v16;
      [v12 setResponseHandler:v26];
    }
    __int16 v19 = [(HMDHomeManager *)self messageDispatcher];
    [v19 sendMessage:v12 completionHandler:0];
    goto LABEL_11;
  }
  id v20 = (void *)MEMORY[0x1D9452090]();
  uint64_t v21 = self;
  id v22 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v23 = HMFGetLogIdentifier();
    [v12 shortDescription];
    v24 = id v25 = v20;
    *(_DWORD *)long long buf = 138543874;
    uint64_t v32 = v23;
    __int16 v33 = 2112;
    long long v34 = v24;
    __int16 v35 = 2112;
    id v36 = v14;
    _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot send unsecure message %@: could not create message destination for userID: %@", buf, 0x20u);

    id v20 = v25;
  }

  if (v15 && v16)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __82__HMDHomeManager_sendUnsecureMessage_target_userID_responseQueue_responseHandler___block_invoke;
    block[3] = &unk_1E6A186E0;
    id v30 = v16;
    dispatch_async(v15, block);
    __int16 v19 = v30;
LABEL_11:
  }
}

void __82__HMDHomeManager_sendUnsecureMessage_target_userID_responseQueue_responseHandler___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0);
}

void __82__HMDHomeManager_sendUnsecureMessage_target_userID_responseQueue_responseHandler___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(a1 + 32);
  if (v7)
  {
    uint64_t v8 = *(void **)(a1 + 40);
    if (v8)
    {
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __82__HMDHomeManager_sendUnsecureMessage_target_userID_responseQueue_responseHandler___block_invoke_3;
      block[3] = &unk_1E6A193D0;
      id v12 = v8;
      id v10 = v5;
      id v11 = v6;
      dispatch_async(v7, block);
    }
  }
}

uint64_t __82__HMDHomeManager_sendUnsecureMessage_target_userID_responseQueue_responseHandler___block_invoke_3(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

- (void)sendSecureMessage:(id)a3 target:(id)a4 userID:(id)a5 destination:(id)a6 responseQueue:(id)a7 responseHandler:(id)a8
{
  id v14 = a8;
  id v15 = a7;
  id v16 = a6;
  id v17 = a5;
  id v18 = a4;
  id v19 = a3;
  id v20 = [(HMDHomeManager *)self messageDispatcher];
  [v20 sendSecureMessage:v19 target:v18 userID:v17 destination:v16 responseQueue:v15 responseHandler:v14];
}

- (void)electDeviceForUser:(id)a3 destination:(id)a4 deviceCapabilities:(id)a5 queue:(id)a6 completionHandler:(id)a7
{
  id v12 = a7;
  id v13 = a6;
  id v14 = a5;
  id v15 = a4;
  id v16 = a3;
  id v17 = [(HMDHomeManager *)self messageDispatcher];
  [v17 electDeviceForHH1User:v16 destination:v15 deviceCapabilities:v14 responseTimeout:v13 responseQueue:v12 responseHandler:0.0];
}

- (void)sendUserRemoved:(id)a3 fromHome:(id)a4 pairingUsername:(id)a5 pushToCloud:(BOOL)a6 completionHandler:(id)a7
{
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a7;
  objc_initWeak(&location, self);
  id v16 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __89__HMDHomeManager_sendUserRemoved_fromHome_pairingUsername_pushToCloud_completionHandler___block_invoke;
  block[3] = &unk_1E6A15B60;
  objc_copyWeak(&v26, &location);
  id v22 = v12;
  id v23 = v13;
  BOOL v27 = a6;
  id v24 = v14;
  id v25 = v15;
  id v17 = v15;
  id v18 = v14;
  id v19 = v13;
  id v20 = v12;
  dispatch_async(v16, block);

  objc_destroyWeak(&v26);
  objc_destroyWeak(&location);
}

void __89__HMDHomeManager_sendUserRemoved_fromHome_pairingUsername_pushToCloud_completionHandler___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  [WeakRetained _sendUserRemoved:*(void *)(a1 + 32) fromHome:*(void *)(a1 + 40) pairingUsername:*(void *)(a1 + 48) pushToCloud:*(unsigned __int8 *)(a1 + 72) completionHandler:*(void *)(a1 + 56)];
}

- (void)sendUserAdded:(id)a3 destination:(id)a4 toHome:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  objc_initWeak(&location, self);
  id v11 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __51__HMDHomeManager_sendUserAdded_destination_toHome___block_invoke;
  block[3] = &unk_1E6A17780;
  objc_copyWeak(&v19, &location);
  id v16 = v8;
  id v17 = v9;
  id v18 = v10;
  id v12 = v10;
  id v13 = v9;
  id v14 = v8;
  dispatch_async(v11, block);

  objc_destroyWeak(&v19);
  objc_destroyWeak(&location);
}

void __51__HMDHomeManager_sendUserAdded_destination_toHome___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  [WeakRetained _sendUserAdded:*(void *)(a1 + 32) destination:*(void *)(a1 + 40) toHome:*(void *)(a1 + 48)];
}

- (void)notifyClientsOfUserSettingsChangeWithReason:(id)a3 sourceUUID:(id)a4
{
  id v6 = (void *)MEMORY[0x1E4F28EB8];
  id v7 = a4;
  id v9 = a3;
  id v8 = [v6 defaultCenter];
  [v8 postNotificationName:@"HMDUserSettingsUpdatedNotificationKey" object:0];

  [(HMDHomeManager *)self updateGenerationCounterWithReason:v9 sourceUUID:v7 shouldNotifyClients:1];
}

- (void)_notifyXPCClientsOfHomeConfigurationChange
{
  id v3 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v3);

  if ([(HMDHomeManager *)self _shouldNotifyClientsAboutGenerationCounterUpdate])
  {
    id v4 = (void *)MEMORY[0x1E4F65480];
    id v5 = [(HMDHomeManager *)self messageDestination];
    id v9 = [v4 messageWithName:@"kHomesDidUpdateNotificationKey" qualityOfService:9 destination:v5 payload:0];

    id v6 = [(HMDHomeManager *)self messageDispatcher];
    [v6 sendMessage:v9];

    id v7 = [(HMDHomeManager *)self logEventSubmitter];
    id v8 = objc_alloc_init(HMDNotifyXPCClientsOfHomeConfigurationChangeLogEvent);
    [v7 submitLogEvent:v8];

    [(HMDHomeManager *)self _notifyMetricsManagerOfConfigurationChange];
    logAndPostNotification(@"HMDHomeManagerNotifiedXPCClientsOfHomeConfigurationChangeNotification", self, 0);
  }
}

- (void)_updateGenerationCounterWithReason:(id)a3 sourceUUID:(id)a4 shouldNotifyClients:(BOOL)a5
{
  BOOL v5 = a5;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v10);

  id v11 = (void *)MEMORY[0x1D9452090]();
  id v12 = self;
  id v13 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    id v14 = HMFGetLogIdentifier();
    int v25 = 138544386;
    id v26 = v14;
    __int16 v27 = 2048;
    uint64_t v28 = [(HMDHomeManager *)v12 generationCounter] + 1;
    __int16 v29 = 1024;
    BOOL v30 = v5;
    __int16 v31 = 2114;
    id v32 = v8;
    __int16 v33 = 2114;
    id v34 = v9;
    _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Updating generation counter to %llu (shouldNotifyClients is %d): %{public}@-%{public}@", (uint8_t *)&v25, 0x30u);
  }
  [(HMDHomeManager *)v12 setGenerationCounter:[(HMDHomeManager *)v12 generationCounter] + 1];
  id v15 = [(HMDHomeManager *)v12 userDefaults];
  objc_msgSend(v15, "setInteger:forKey:", -[HMDHomeManager generationCounter](v12, "generationCounter"), @"HMDHomeManagerGenerationCounter");

  if ([(HMDHomeManager *)v12 generationCounterToken] != -1
    && [(HMDHomeManager *)v12 _shouldNotifyClientsAboutGenerationCounterUpdate])
  {
    id v16 = [(HMDHomeManager *)v12 darwinNotificationProvider];
    objc_msgSend(v16, "notifySetState:state:", -[HMDHomeManager generationCounterToken](v12, "generationCounterToken"), -[HMDHomeManager generationCounter](v12, "generationCounter"));

    id v17 = [(HMDHomeManager *)v12 darwinNotificationProvider];
    [v17 notifyPost:*MEMORY[0x1E4F2D430]];
  }
  if ([(HMDHomeManager *)v12 postSyncDataUpdatedNotification])
  {
    id v18 = (void *)MEMORY[0x1D9452090]([(HMDHomeManager *)v12 setPostSyncDataUpdatedNotification:0]);
    id v19 = v12;
    id v20 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      uint64_t v21 = HMFGetLogIdentifier();
      int v25 = 138543362;
      id v26 = v21;
      _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@Posting sync data updated notification after updating generation counter", (uint8_t *)&v25, 0xCu);
    }
    notify_post((const char *)*MEMORY[0x1E4F2CA60]);
  }
  id v22 = [(HMDHomeManager *)v12 logEventSubmitter];
  id v23 = objc_alloc_init(HMDIncrementGenerationCounterLogEvent);
  [v22 submitLogEvent:v23];

  if (v5)
  {
    id v24 = [(HMDHomeManager *)v12 debounceHomesUpdateTimer];
    [v24 resume];
  }
}

- (void)updateGenerationCounterWithReason:(id)a3 sourceUUID:(id)a4 shouldNotifyClients:(BOOL)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = [(HMDHomeManager *)self workQueue];
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  id v13[2] = __83__HMDHomeManager_updateGenerationCounterWithReason_sourceUUID_shouldNotifyClients___block_invoke;
  void v13[3] = &unk_1E6A15B38;
  void v13[4] = self;
  id v14 = v8;
  id v15 = v9;
  BOOL v16 = a5;
  id v11 = v9;
  id v12 = v8;
  dispatch_async(v10, v13);
}

uint64_t __83__HMDHomeManager_updateGenerationCounterWithReason_sourceUUID_shouldNotifyClients___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateGenerationCounterWithReason:*(void *)(a1 + 40) sourceUUID:*(void *)(a1 + 48) shouldNotifyClients:*(unsigned __int8 *)(a1 + 56)];
}

- (BOOL)_shouldNotifyClientsAboutGenerationCounterUpdate
{
  return 1;
}

- (void)setGenerationCounter:(unint64_t)a3
{
  p_locuint64_t k = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_unint64_t generationCounter = a3;
  os_unfair_lock_unlock(p_lock);
}

- (void)setAccessAllowedWhenLocked:(BOOL)a3
{
  p_locuint64_t k = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_accessAllowedWhenLocked = a3;
  os_unfair_lock_unlock(p_lock);
}

- (void)_handleAccountStatusDeterminedWithError:(id)a3 homeDataRecordExists:(BOOL)a4 metadataRecordExists:(BOOL)a5 completion:(id)a6
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v11 = (void (**)(void))a6;
  id v12 = (void *)MEMORY[0x1D9452090]();
  id v13 = self;
  id v14 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    id v15 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    long long v81 = v15;
    _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_DEFAULT, "%{public}@Account status determined, clearing that we were in a backoff operation", buf, 0xCu);
  }
  uint64_t v16 = [(HMDHomeManager *)v13 setBackOffOperationInProgress:0];
  if (v10)
  {
    id v17 = (void *)MEMORY[0x1D9452090](v16);
    id v18 = v13;
    id v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      id v20 = HMFGetLogIdentifier();
      uint64_t v21 = objc_msgSend(v10, "hmd_conciseCKError");
      id v22 = [v21 shortDescription];
      *(_DWORD *)long long buf = 138543618;
      long long v81 = v20;
      __int16 v82 = 2114;
      uint64_t v83 = (uint64_t)v22;
      _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_DEFAULT, "%{public}@Unable to detect account status due to error: %{public}@", buf, 0x16u);
    }
    [(HMDHomeManager *)v18 setCloudkitAccountStatusDetermined:0];
    id v23 = [(HMDHomeManager *)v18 multiUserStatusController];
    [v23 didChangeHasActiveAccountState:0];

    if ([(HMDHomeManager *)v18 accountActive])
    {
      if ([v10 code] == 78
        || (objc_msgSend(v10, "hmd_convertedCKError"),
            id v24 = objc_claimAutoreleasedReturnValue(),
            BOOL v25 = v24 == 0,
            v24,
            !v25))
      {
        [(HMDHomeManager *)v18 setAccountStatusFailedDueToNetworkFailure:1];
        [(HMDHomeManager *)v18 setCloudOperationRetryCount:[(HMDHomeManager *)v18 cloudOperationRetryCount] + 1];
        uint64_t v26 = maxCloudOperationRetries;
        __int16 v27 = +[HMDDeviceCapabilities deviceCapabilities];
        int v28 = [v27 supportsStandaloneMode];

        if (v26 >= 0) {
          uint64_t v29 = v26;
        }
        else {
          uint64_t v29 = v26 + 1;
        }
        uint64_t v30 = v29 >> 1;
        if (v28) {
          unint64_t v31 = v30;
        }
        else {
          unint64_t v31 = v26;
        }
        id v32 = (void *)MEMORY[0x1D9452090]();
        __int16 v33 = v18;
        id v34 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v35 = HMFGetLogIdentifier();
          uint64_t v36 = [(HMDHomeManager *)v33 cloudOperationRetryCount];
          *(_DWORD *)long long buf = 138543874;
          long long v81 = v35;
          __int16 v82 = 2048;
          uint64_t v83 = v36;
          __int16 v84 = 2048;
          unint64_t v85 = v31;
          _os_log_impl(&dword_1D49D5000, v34, OS_LOG_TYPE_DEFAULT, "%{public}@Current cloud operation retry count: %lu/%lu", buf, 0x20u);
        }
        if ([(HMDHomeManager *)v33 cloudOperationRetryCount] < v31)
        {
          objc_initWeak((id *)buf, v33);
          v76[0] = MEMORY[0x1E4F143A8];
          v76[1] = 3221225472;
          v76[2] = __111__HMDHomeManager__handleAccountStatusDeterminedWithError_homeDataRecordExists_metadataRecordExists_completion___block_invoke;
          v76[3] = &unk_1E6A16E40;
          objc_copyWeak(&v77, (id *)buf);
          [(HMDHomeManager *)v33 _retryCloudOperationWithName:@"query account status after one time failure" completionHandler:v76];
          objc_destroyWeak(&v77);
          objc_destroyWeak((id *)buf);
        }
      }
    }
  }
  else
  {
    [(HMDHomeManager *)v13 setAccountStatusFailedDueToNetworkFailure:0];
    [(HMDHomeManager *)v13 setCloudkitAccountStatusDetermined:1];
    uint64_t v37 = [(HMDHomeManager *)v13 multiUserStatusController];
    [v37 didChangeHasActiveAccountState:1];

    id v38 = (void *)MEMORY[0x1D9452090]([(HMDHomeManager *)v13 _resetCloudOperationRetryCounters]);
    id v39 = v13;
    id v40 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      char v41 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      long long v81 = v41;
      _os_log_impl(&dword_1D49D5000, v40, OS_LOG_TYPE_DEFAULT, "%{public}@Account status detected and we have an active account", buf, 0xCu);
    }
    uint64_t v42 = [(HMDHomeManager *)v39 _determineLocalChangesAndSchedulePush];
    if (!a5)
    {
      uint64_t v43 = (void *)MEMORY[0x1D9452090](v42);
      id v44 = v39;
      uint64_t v45 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        id v46 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        long long v81 = v46;
        _os_log_impl(&dword_1D49D5000, v45, OS_LOG_TYPE_DEFAULT, "%{public}@There is no meta data in the cloud, creating default and pushing to the cloud", buf, 0xCu);
      }
      uint64_t v42 = [(HMDHomeManager *)v44 _pushMetadataToCloud];
    }
    __int16 v47 = (void *)MEMORY[0x1D9452090](v42);
    id v48 = v39;
    id v49 = HMFGetOSLogHandle();
    BOOL v50 = os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT);
    if (a4)
    {
      if (v50)
      {
        id v51 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        long long v81 = v51;
        _os_log_impl(&dword_1D49D5000, v49, OS_LOG_TYPE_DEFAULT, "%{public}@Set missing home data record = NO", buf, 0xCu);
      }
      [(HMDHomeManager *)v48 setMissingHomeDataRecord:0];
    }
    else
    {
      if (v50)
      {
        id v52 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        long long v81 = v52;
        _os_log_impl(&dword_1D49D5000, v49, OS_LOG_TYPE_DEFAULT, "%{public}@No homeDataRecord found", buf, 0xCu);
      }
      id v53 = (void *)MEMORY[0x1D9452090]();
      id v54 = v48;
      BOOL v55 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v56 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        long long v81 = v56;
        _os_log_impl(&dword_1D49D5000, v55, OS_LOG_TYPE_DEFAULT, "%{public}@Set missing home data record = YES", buf, 0xCu);
      }
      [(HMDHomeManager *)v54 setMissingHomeDataRecord:1];
      id v57 = [MEMORY[0x1E4F5BE48] systemStore];
      id v78 = 0;
      id v79 = 0;
      int v58 = [v57 getAllAvailableControllerPublicKeys:0 secretKeys:0 userNames:&v79 error:&v78];
      id v59 = v79;
      id v60 = v78;

      if (v60) {
        int v61 = 0;
      }
      else {
        int v61 = v58;
      }
      if (v61 == 1 && v59 && (unint64_t)[v59 count] >= 2)
      {
        uint64_t v62 = (void *)MEMORY[0x1D9452090]();
        char v63 = v54;
        id v64 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v65 = HMFGetLogIdentifier();
          id v66 = [v59 objectAtIndexedSubscript:0];
          *(_DWORD *)long long buf = 138543618;
          long long v81 = v65;
          __int16 v82 = 2112;
          uint64_t v83 = (uint64_t)v66;
          _os_log_impl(&dword_1D49D5000, v64, OS_LOG_TYPE_DEFAULT, "%{public}@Found multiple controller keys, and we have no data in the cloud, using first entry as the controller username: %@", buf, 0x16u);
        }
        id v67 = [MEMORY[0x1E4F5BE48] systemStore];
        uint64_t v68 = [v59 objectAtIndexedSubscript:0];
        [v67 updateActiveControllerPairingIdentifier:v68];
      }
      else
      {
        BOOL v69 = [v59 count] == 0;
        long long v70 = (void *)MEMORY[0x1D9452090]();
        long long v71 = v54;
        id v72 = HMFGetOSLogHandle();
        BOOL v73 = os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT);
        if (v69)
        {
          if (v73)
          {
            long long v75 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543362;
            long long v81 = v75;
            _os_log_impl(&dword_1D49D5000, v72, OS_LOG_TYPE_DEFAULT, "%{public}@No controller keys found can create one.", buf, 0xCu);
          }
        }
        else if (v73)
        {
          long long v74 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543362;
          long long v81 = v74;
          _os_log_impl(&dword_1D49D5000, v72, OS_LOG_TYPE_DEFAULT, "%{public}@Have exactly one controller key.", buf, 0xCu);
        }
      }
    }
  }
  if (v11) {
    v11[2](v11);
  }
}

void __111__HMDHomeManager__handleAccountStatusDeterminedWithError_homeDataRecordExists_metadataRecordExists_completion___block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    id v4 = HMFGetLogIdentifier();
    int v6 = 138543362;
    id v7 = v4;
    _os_log_impl(&dword_1D49D5000, v3, OS_LOG_TYPE_INFO, "%{public}@Re-querying account status", (uint8_t *)&v6, 0xCu);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_updateCloudDataSyncWithAccountState:", objc_msgSend(WeakRetained, "accountActive"));
}

- (void)forcePushLocalDataToCloud:(id)a3
{
  id v4 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __44__HMDHomeManager_forcePushLocalDataToCloud___block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v4, block);
}

void __44__HMDHomeManager_forcePushLocalDataToCloud___block_invoke(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v2 = [*(id *)(a1 + 32) homes];
  if ([v2 count])
  {

LABEL_4:
    BOOL v5 = (void *)MEMORY[0x1D9452090]();
    int v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = HMFGetLogIdentifier();
      int v14 = 138543362;
      id v15 = v7;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Force pushing local home data to cloud", (uint8_t *)&v14, 0xCu);
    }
    [*(id *)(a1 + 32) setNeedToCleanUpKeys:1];
    [*(id *)(a1 + 32) setUploadHomeDataToCloud:1];
    [*(id *)(a1 + 32) _pushChangesToCloud:1 withDelay:0.0];
    return;
  }
  id v3 = [*(id *)(a1 + 32) incomingInvitations];
  uint64_t v4 = [v3 count];

  if (v4) {
    goto LABEL_4;
  }
  uint64_t v8 = (void *)MEMORY[0x1D9452090]();
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    id v10 = HMFGetLogIdentifier();
    id v11 = [*(id *)(a1 + 32) homes];
    uint64_t v12 = [v11 count];
    id v13 = [*(id *)(a1 + 32) incomingInvitations];
    int v14 = 138543874;
    id v15 = v10;
    __int16 v16 = 2048;
    uint64_t v17 = v12;
    __int16 v18 = 2048;
    uint64_t v19 = [v13 count];
    _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@No homes %tu or incoming invitations %tu present, not force pushing to cloud", (uint8_t *)&v14, 0x20u);
  }
}

- (BOOL)isDataSyncInProgressWithMessage:(id)a3
{
  return [(HMDHomeManager *)self dataSyncInProgressWithState:0 withMessage:a3];
}

- (BOOL)isDataSyncInProgress
{
  return [(HMDHomeManager *)self isDataSyncInProgressWithMessage:0];
}

- (BOOL)shouldClearDeviceSetupFollowUp
{
  id v2 = [(HMDHomeManager *)self appleAccountManager];
  id v3 = [v2 accountContext];
  BOOL v4 = v3 == 0;

  return v4;
}

- (void)postFinishSetupForCurrentAccessoryFollowUpIfNeeded
{
  id v3 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v3);

  if (isAppleTV() && [(HMDHomeManager *)self shouldClearDeviceSetupFollowUp])
  {
    id v5 = +[HMDDeviceSetupManager sharedManager];
    BOOL v4 = [v5 followUpManager];
    [v4 stopAdvertising:1];
  }
}

- (void)dataSyncInProgressUpdatedNotification:(id)a3
{
  BOOL v4 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __56__HMDHomeManager_dataSyncInProgressUpdatedNotification___block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v4, block);
}

uint64_t __56__HMDHomeManager_dataSyncInProgressUpdatedNotification___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _notifyClientsOfUpdatedStatus];
}

- (void)_resetCloudOperationRetryCounters
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = (void *)MEMORY[0x1D9452090](self, a2);
  BOOL v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    int v6 = 138543362;
    id v7 = v5;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@Resetting cloud operation retry tracking counters", (uint8_t *)&v6, 0xCu);
  }
  [(HMDHomeManager *)self setCloudOperationRetryCount:0];
  [(HMDHomeManager *)self _stopCloudOperationRetryTimer];
}

- (void)_stopCloudOperationRetryTimer
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v3 = [(HMDHomeManager *)self cloudOperationRetryTimer];

  if (v3)
  {
    BOOL v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v6 = HMFGetLogIdentifier();
      int v8 = 138543362;
      id v9 = v6;
      _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Cancelling cloud operation retry timer", (uint8_t *)&v8, 0xCu);
    }
    id v7 = [(HMDHomeManager *)self cloudOperationRetryTimer];
    dispatch_source_cancel(v7);

    [(HMDHomeManager *)self setCloudOperationRetryTimer:0];
  }
}

- (void)_startCloudOperationRetryWithTimeout:(unint64_t)a3 completionHandler:(id)a4
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v6 = a4;
  [(HMDHomeManager *)self _stopCloudOperationRetryTimer];
  id v7 = [(HMDHomeManager *)self workQueue];
  dispatch_source_t v8 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v7);
  [(HMDHomeManager *)self setCloudOperationRetryTimer:v8];

  id v9 = [(HMDHomeManager *)self cloudOperationRetryTimer];
  dispatch_time_t v10 = dispatch_time(0, 1000000000 * a3);
  dispatch_source_set_timer(v9, v10, 0xFFFFFFFFFFFFFFFFLL, 0x2540BE400uLL);

  id v11 = [(HMDHomeManager *)self cloudOperationRetryTimer];
  dispatch_source_set_event_handler(v11, v6);

  uint64_t v12 = [(HMDHomeManager *)self cloudOperationRetryTimer];
  dispatch_resume(v12);

  id v13 = (void *)MEMORY[0x1D9452090]();
  int v14 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    id v15 = HMFGetLogIdentifier();
    int v16 = 138543618;
    uint64_t v17 = v15;
    __int16 v18 = 2048;
    unint64_t v19 = a3;
    _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Starting cloud operation retry timer for %ld secs", (uint8_t *)&v16, 0x16u);
  }
}

- (void)_runUploadHomeConfigToCloud:(id)a3 rowIDs:(id)a4 reasons:(id)a5 forcePush:(BOOL)a6 syncCompletion:(id)a7
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  id v67 = a3;
  id v69 = a4;
  id v11 = a5;
  id v65 = a7;
  context = (void *)MEMORY[0x1D9452090]();
  uint64_t v12 = (void *)MEMORY[0x1D9452090]();
  id v13 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    id v90 = v14;
    __int16 v91 = 2112;
    uint64_t v92 = (uint64_t)v11;
    _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_DEFAULT, "%{public}@Pushing changes up to the legacy cloud with reasons %@", buf, 0x16u);
  }
  id v15 = [(HMDHomeManager *)self cloudDataSyncManager];
  BOOL v73 = [v15 cloudCache];

  long long v74 = [v73 legacyZone];
  int v16 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v11, "count"));
  long long v84 = 0u;
  long long v85 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  id v17 = v11;
  uint64_t v18 = [v17 countByEnumeratingWithState:&v82 objects:v88 count:16];
  if (v18)
  {
    uint64_t v19 = *(void *)v83;
    do
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        if (*(void *)v83 != v19) {
          objc_enumerationMutation(v17);
        }
        uint64_t v21 = *(void **)(*((void *)&v82 + 1) + 8 * i);
        if (([v21 isEqualToString:@"kHomeConfigurationVersionKey"] & 1) == 0)
        {
          uint64_t v86 = @"HM.saveReasonKey";
          id v87 = v21;
          id v22 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v87 forKeys:&v86 count:1];
          [v16 addObject:v22];
        }
      }
      uint64_t v18 = [v17 countByEnumeratingWithState:&v82 objects:v88 count:16];
    }
    while (v18);
  }

  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __86__HMDHomeManager__runUploadHomeConfigToCloud_rowIDs_reasons_forcePush_syncCompletion___block_invoke;
  aBlock[3] = &unk_1E6A16088;
  objc_copyWeak(&v79, &location);
  id v23 = v67;
  id v76 = v23;
  BOOL v80 = a6;
  id v70 = v69;
  id v77 = v70;
  id v66 = v65;
  id v78 = v66;
  id v72 = (void (**)(id, void))_Block_copy(aBlock);
  if (-[HMDHomeManager uploadHomeDataToCloud](self, "uploadHomeDataToCloud") || [v70 count])
  {
    uint64_t v68 = [(HMDHomeManager *)self pairedAccessories];
    id v24 = [MEMORY[0x1E4F29128] UUID];
    [(HMDHomeManager *)self setDataTag:v24];

    BOOL v25 = objc_alloc_init(HMDMutableHomeData);
    uint64_t v26 = [(HMDHomeManager *)self homes];
    [(HMDHomeData *)v25 setHomes:v26];

    [(HMDHomeData *)v25 setAccessories:v68];
    __int16 v27 = [(HMDHomeManager *)self primaryHomeUUID];
    [(HMDHomeData *)v25 setPrimaryHomeUUID:v27];

    int v28 = [(HMDHomeManager *)self lastCurrentHomeUUID];
    [(HMDHomeData *)v25 setLastCurrentHomeUUID:v28];

    [(HMDHomeData *)v25 setDataVersion:4];
    [(HMDHomeData *)v25 setSchemaVersion:5];
    [(HMDHomeData *)v25 setRecoveryVersion:[(HMDHomeManager *)self recoveryVersion]];
    uint64_t v29 = [(HMDHomeManager *)self dataTag];
    [(HMDHomeData *)v25 setDataTag:v29];

    uint64_t v30 = [(HMDHomeManager *)self uuidsOfRemovedHomes];
    [(HMDHomeData *)v25 setUUIDsOfRemovedHomes:v30];

    unint64_t v31 = [(HMDHomeManager *)self incomingInvitations];
    [(HMDHomeData *)v25 setIncomingInvitations:v31];

    id v32 = [(HMDHomeManager *)self appleAccountManager];
    __int16 v33 = [v32 device];
    id v34 = [v33 identifier];
    uint64_t v35 = [v34 UUIDString];
    [(HMDHomeData *)v25 setCurrentDevice:v35];

    uint64_t v36 = (void *)[v16 copy];
    [(HMDHomeData *)v25 setPendingReasonSaved:v36];

    uint64_t v37 = [(HMDHomeManager *)self appData];
    [(HMDHomeData *)v25 setApplicationData:v37];

    [(HMDHomeData *)v25 setResidentEnabledState:[(HMDHomeManager *)self residentEnabledState]];
    [(HMDHomeData *)v25 setAccessAllowedWhenLocked:[(HMDHomeManager *)self isAccessAllowedWhenLocked]];
    id v38 = [(HMDHomeManager *)self demoAccessories];
    [(HMDHomeData *)v25 setDemoAccessories:v38];

    [(HMDHomeData *)v25 setDemoFinalized:[(HMDHomeManager *)self demoFinalized]];
    id v39 = (void *)[(HMDMutableHomeData *)v25 copy];
    id v40 = +[HMDPersistentStore serializeHomeData:v39 localStorage:0 remoteDeviceOnSameAccount:1];

    unint64_t v41 = [v40 length];
    unint64_t v42 = +[HMDHomeManager legacyDataSizeLimit];
    BOOL v63 = v41 > v42;
    if (v41 > v42)
    {
      uint64_t v43 = (void *)MEMORY[0x1D9452090]();
      id v44 = self;
      HMFGetOSLogHandle();
      uint64_t v45 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v46 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v47 = [v40 length];
        *(_DWORD *)long long buf = 138543618;
        id v90 = v46;
        __int16 v91 = 2048;
        uint64_t v92 = v47;
        _os_log_impl(&dword_1D49D5000, v45, OS_LOG_TYPE_INFO, "%{public}@Home Data size if well beyond what can be pushed to legacy zone: %lu", buf, 0x16u);
      }
    }
    else
    {
      id v48 = [v74 homeDataModelWithPushDataPush:v40];
      [v23 addChangeWithObjectChange:v48];

      id v49 = [v74 homeDataV3ModelWithPushDataPush:v40];
      [v23 addChangeWithObjectChange:v49];
    }
  }
  else
  {
    BOOL v63 = 0;
  }
  if ([(HMDHomeManager *)self uploadMetadataToCloud])
  {
    BOOL v50 = +[HMDHAPMetadata legacyV3DataForCloud];
    id v51 = [v74 metadataModelWithPushDataPush:v50];
    [v23 addChangeWithObjectChange:v51];
  }
  char v52 = [v23 hasValidChanges];
  id v53 = (void *)MEMORY[0x1D9452090]();
  id v54 = self;
  if (v52)
  {
    HMFGetOSLogHandle();
    BOOL v55 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
    {
      uint64_t v56 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v90 = v56;
      _os_log_impl(&dword_1D49D5000, v55, OS_LOG_TYPE_INFO, "%{public}@Attempting to upload new data to legacy zone", buf, 0xCu);
    }
    id v57 = [(HMDHomeManager *)v54 cloudDataSyncManager];
    [v57 uploadLegacyTransaction:v23 completionHandler:v72];

    goto LABEL_34;
  }
  if (v63)
  {
    HMFGetOSLogHandle();
    int v58 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
    {
      id v59 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v90 = v59;
      _os_log_impl(&dword_1D49D5000, v58, OS_LOG_TYPE_INFO, "%{public}@Legacy data is too large to push to the cloud. Cleaning up local data as if legacy push was successful", buf, 0xCu);
    }
    id v60 = v72;
LABEL_33:
    v60[2](v60, 0);
    goto LABEL_34;
  }
  HMFGetOSLogHandle();
  int v61 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
  {
    uint64_t v62 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    id v90 = v62;
    _os_log_impl(&dword_1D49D5000, v61, OS_LOG_TYPE_INFO, "%{public}@Determined there is not data to push to legacy zone", buf, 0xCu);
  }
  [v23 setOsTransaction:0];
  id v60 = (void (**)(id, void))v66;
  if (v66) {
    goto LABEL_33;
  }
LABEL_34:

  objc_destroyWeak(&v79);
  objc_destroyWeak(&location);
}

void __86__HMDHomeManager__runUploadHomeConfigToCloud_rowIDs_reasons_forcePush_syncCompletion___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    id v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = WeakRetained;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      dispatch_source_t v8 = HMFGetLogIdentifier();
      id v9 = objc_msgSend(v3, "hmd_conciseCKError");
      dispatch_time_t v10 = [v9 shortDescription];
      int v33 = 138543618;
      id v34 = v8;
      __int16 v35 = 2112;
      uint64_t v36 = (uint64_t)v10;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Uploaded data to legacy zone with error status: %@", (uint8_t *)&v33, 0x16u);
    }
    if ([v6 backOffOperationInProgress])
    {
      id v11 = (void *)MEMORY[0x1D9452090]([v6 setBackOffOperationInProgress:0]);
      uint64_t v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        id v13 = HMFGetLogIdentifier();
        int v33 = 138543362;
        id v34 = v13;
        _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Clearing that we were in a backoff operation", (uint8_t *)&v33, 0xCu);
      }
    }
    if (!v3)
    {
      [v6 _resetCloudOperationRetryCounters];
      [v6 setUploadToCloudIsPending:0];
      [v6 _updateHomeManagerModelChangesAsPushed:*(void *)(a1 + 40) legacyPush:1];
      if ([v6 uploadMetadataToCloud])
      {
        [v6 _pushMetadataChangesToUsers];
        [v6 setUploadMetadataToCloud:0];
      }
      [v6 setUploadHomeDataToCloud:0];
      if ([v6 needToCleanUpKeys])
      {
        uint64_t v29 = (void *)MEMORY[0x1D9452090]();
        uint64_t v30 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
        {
          unint64_t v31 = HMFGetLogIdentifier();
          int v33 = 138543362;
          id v34 = v31;
          _os_log_impl(&dword_1D49D5000, v30, OS_LOG_TYPE_INFO, "%{public}@Need to cleanup the keys in store", (uint8_t *)&v33, 0xCu);
        }
        +[HMDPersistentStore cleanupKeysInStore];
      }
      goto LABEL_28;
    }
    int v14 = (void *)MEMORY[0x1D9452090](objc_msgSend(v6, "setCloudOperationRetryCount:", objc_msgSend(v6, "cloudOperationRetryCount") + 1));
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      int v16 = HMFGetLogIdentifier();
      uint64_t v17 = [v6 cloudOperationRetryCount];
      int v33 = 138543618;
      id v34 = v16;
      __int16 v35 = 2048;
      uint64_t v36 = v17;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@Pushing data to cloud failed, current cloud operation retry count: %ld", (uint8_t *)&v33, 0x16u);
    }
    if (([*(id *)(a1 + 32) needConflictResolution] & 1) == 0)
    {
      uint64_t v18 = (void *)MEMORY[0x1D9452090]();
      uint64_t v19 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        uint64_t v20 = HMFGetLogIdentifier();
        int v33 = 138543362;
        id v34 = v20;
        _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_INFO, "%{public}@Failure was not a result of a conflict, updating watches", (uint8_t *)&v33, 0xCu);
      }
      [v6 _scheduleSendHomeDataToAllWatches];
    }
    uint64_t v21 = [v3 domain];
    if ([v21 isEqualToString:*MEMORY[0x1E4F19C40]])
    {
      id v22 = [v3 userInfo];

      if (!v22)
      {
LABEL_28:
        [v6 setNeedToCleanUpKeys:0];
        goto LABEL_29;
      }
      id v23 = [v3 userInfo];
      uint64_t v21 = objc_msgSend(v23, "hmf_numberForKey:", *MEMORY[0x1E4F19C60]);

      if (v21)
      {
        id v24 = (void *)MEMORY[0x1D9452090]();
        id v25 = v6;
        uint64_t v26 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          __int16 v27 = HMFGetLogIdentifier();
          int v33 = 138543618;
          id v34 = v27;
          __int16 v35 = 2112;
          uint64_t v36 = (uint64_t)v21;
          _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_INFO, "%{public}@Rescheduling legacy push delay %@", (uint8_t *)&v33, 0x16u);
        }
        uint64_t v28 = *(unsigned __int8 *)(a1 + 64);
        [v21 doubleValue];
        objc_msgSend(v25, "_uploadHomeConfigToCloud:withDelay:", v28);
      }
    }

    goto LABEL_28;
  }
LABEL_29:
  [*(id *)(a1 + 32) setOsTransaction:0];
  uint64_t v32 = *(void *)(a1 + 48);
  if (v32) {
    (*(void (**)(uint64_t, id))(v32 + 16))(v32, v3);
  }
}

- (void)_runUploadHomeConfigToCloudForcePush:(BOOL)a3 reason:(id)a4 syncCompletion:(id)a5
{
  location[3] = *(id *)MEMORY[0x1E4F143B8];
  id v8 = a4;
  id v9 = a5;
  if ([(HMDHomeManager *)self hasiCloudAndControllerKey])
  {
    dispatch_time_t v10 = [(HMDHomeManager *)self cloudDataSyncManager];
    id v11 = [v10 cloudCache];

    uint64_t v12 = [v11 legacyZone];
    id v13 = [[HMDCloudTransaction alloc] initWithType:1 temporaryCache:0];
    [(HMDCloudTransaction *)v13 updateCloudZone:v12];
    int v14 = (void *)[objc_alloc(MEMORY[0x1E4F654E0]) initWithName:@"com.apple.homed.push-to-cloud"];
    [(HMDCloudTransaction *)v13 setOsTransaction:v14];

    objc_initWeak(location, self);
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    id v20[2] = __77__HMDHomeManager__runUploadHomeConfigToCloudForcePush_reason_syncCompletion___block_invoke;
    void v20[3] = &unk_1E6A15B10;
    objc_copyWeak(&v24, location);
    id v15 = v13;
    uint64_t v21 = v15;
    id v22 = v8;
    id v23 = v9;
    BOOL v25 = a3;
    [(HMDHomeManager *)self _determineLegacyLocalChanges:v20];

    objc_destroyWeak(&v24);
    objc_destroyWeak(location);

LABEL_7:
    goto LABEL_8;
  }
  int v16 = (void *)MEMORY[0x1D9452090]();
  uint64_t v17 = self;
  uint64_t v18 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = HMFGetLogIdentifier();
    LODWORD(location[0]) = 138543362;
    *(id *)((char *)location + 4) = v19;
    _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_DEFAULT, "%{public}@Not pushing changes to the cloud.", (uint8_t *)location, 0xCu);
  }
  if (v9)
  {
    id v11 = [MEMORY[0x1E4F28C58] hmErrorWithCode:75 description:@"Operation was cancelled before it could run" reason:@"iCloud & Controller key was not available" suggestion:@"Make sure that you are signed into iCloud account"];
    (*((void (**)(id, void *))v9 + 2))(v9, v11);
    goto LABEL_7;
  }
LABEL_8:
}

void __77__HMDHomeManager__runUploadHomeConfigToCloudForcePush_reason_syncCompletion___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if ([v7 count] || (objc_msgSend(WeakRetained, "uploadMetadataToCloud") & 1) != 0)
  {
    [WeakRetained _runUploadHomeConfigToCloud:*(void *)(a1 + 32) rowIDs:v7 reasons:v8 forcePush:*(unsigned __int8 *)(a1 + 64) syncCompletion:*(void *)(a1 + 48)];
  }
  else
  {
    id v11 = (void *)MEMORY[0x1D9452090]();
    id v12 = WeakRetained;
    id v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      int v14 = HMFGetLogIdentifier();
      int v18 = 138543362;
      uint64_t v19 = v14;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Nothing to push to the legacy zone", (uint8_t *)&v18, 0xCu);
    }
    [v12 setUploadHomeDataToCloud:0];
    [*(id *)(a1 + 32) setOsTransaction:0];
    if (*(void *)(a1 + 40))
    {
      id v15 = [v12 logEventSubmitter];
      int v16 = +[HMDCloudSyncUploadReasonLogEvent uploadReason:*(void *)(a1 + 40) acceptedLegacyPush:0];
      [v15 submitLogEvent:v16];
    }
    uint64_t v17 = *(void *)(a1 + 48);
    if (v17) {
      (*(void (**)(uint64_t, void))(v17 + 16))(v17, 0);
    }
  }
}

- (void)_uploadHomeConfigToCloud:(BOOL)a3 withDelay:(double)a4 reason:(id)a5
{
  BOOL v6 = a3;
  location[3] = *(id *)MEMORY[0x1E4F143B8];
  id v8 = a5;
  if (!disableLegacyCloudDataSync)
  {
    if ([(HMDHomeManager *)self hasiCloudAndControllerKey])
    {
      objc_initWeak(location, self);
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = __60__HMDHomeManager__uploadHomeConfigToCloud_withDelay_reason___block_invoke;
      aBlock[3] = &unk_1E6A15AE8;
      objc_copyWeak(&v18, location);
      BOOL v19 = v6;
      id v17 = v8;
      id v9 = _Block_copy(aBlock);
      if (v6) {
        +[HMDSyncOperation cloudForcePushSyncOperationWithBlock:v9];
      }
      else {
      int v14 = +[HMDSyncOperation cloudPushSyncOperationWithBlock:v9];
      }
      id v15 = [(HMDHomeManager *)self syncManager];
      [v15 addOperation:v14 withDelay:a4];

      objc_destroyWeak(&v18);
      objc_destroyWeak(location);
    }
    else
    {
      dispatch_time_t v10 = (void *)MEMORY[0x1D9452090]();
      id v11 = self;
      id v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        id v13 = HMFGetLogIdentifier();
        LODWORD(location[0]) = 138543362;
        *(id *)((char *)location + 4) = v13;
        _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Not pushing changes to the cloud since cannot push under current conditions.", (uint8_t *)location, 0xCu);
      }
    }
  }
}

void __60__HMDHomeManager__uploadHomeConfigToCloud_withDelay_reason___block_invoke(uint64_t a1, void *a2, void *a3, int a4)
{
  dispatch_time_t v10 = a2;
  id v7 = a3;
  if (a4)
  {
    if (!v10) {
      goto LABEL_7;
    }
    id v8 = [MEMORY[0x1E4F28C58] hmErrorWithCode:23 description:@"Operation was cancelled before it could run" reason:@"HMDCloudManager cancelled the operation" suggestion:0];
    v10[2](v10, v8);
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    id v8 = WeakRetained;
    if (WeakRetained) {
      [WeakRetained _runUploadHomeConfigToCloudForcePush:*(unsigned __int8 *)(a1 + 48) reason:*(void *)(a1 + 32) syncCompletion:v10];
    }
  }

LABEL_7:
}

- (void)_uploadHomeConfigToCloud:(BOOL)a3 withDelay:(double)a4
{
}

- (void)uploadHomeConfigToCloud:(BOOL)a3 withDelay:(double)a4
{
  objc_initWeak(&location, self);
  id v7 = [(HMDHomeManager *)self workQueue];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __52__HMDHomeManager_uploadHomeConfigToCloud_withDelay___block_invoke;
  v8[3] = &unk_1E6A15AC0;
  objc_copyWeak(v9, &location);
  BOOL v10 = a3;
  v9[1] = *(id *)&a4;
  dispatch_async(v7, v8);

  objc_destroyWeak(v9);
  objc_destroyWeak(&location);
}

void __52__HMDHomeManager_uploadHomeConfigToCloud_withDelay___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    [WeakRetained _uploadHomeConfigToCloud:*(unsigned __int8 *)(a1 + 48) withDelay:*(double *)(a1 + 40)];
    id WeakRetained = v3;
  }
}

- (void)_pushChangesToCloud:(BOOL)a3 withDelay:(double)a4 reason:(id)a5
{
  BOOL v6 = a3;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v8 = a5;
  if (![(HMDHomeManager *)self accountActive] || isWatch() || disableCloudDataSync)
  {
    [(HMDHomeManager *)self setBackOffOperationInProgress:0];
    goto LABEL_19;
  }
  id v9 = [(HMDHomeManager *)self msgFilterChain];
  uint64_t v10 = [v9 shouldCloudSyncData];

  if (v10 != [(HMDHomeManager *)self lastAnswerForShouldCloudSyncData])
  {
    id v11 = (void *)MEMORY[0x1D9452090]();
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = HMFGetLogIdentifier();
      int v14 = (void *)v13;
      id v15 = @"No";
      if (v10) {
        id v15 = @"Yes";
      }
      int v29 = 138543618;
      uint64_t v30 = v13;
      __int16 v31 = 2112;
      uint64_t v32 = v15;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Filter chain result for shouldCloudSyncData: %@", (uint8_t *)&v29, 0x16u);
    }
    [(HMDHomeManager *)self setLastAnswerForShouldCloudSyncData:v10];
  }
  if (v10)
  {
    int v16 = [(HMDHomeManager *)self reachabilityMonitor];
    char v17 = [v16 isReachable];

    if (v17)
    {
      id v18 = (void *)MEMORY[0x1D9452090]();
      BOOL v19 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v20 = HMFGetLogIdentifier();
        int v29 = 138543362;
        uint64_t v30 = (uint64_t)v20;
        _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_DEFAULT, "%{public}@Scheduling cloud push", (uint8_t *)&v29, 0xCu);
      }
      if ([(HMDHomeManager *)self accountStatusFailedDueToNetworkFailure])
      {
        uint64_t v21 = (void *)MEMORY[0x1D9452090]();
        id v22 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          id v23 = HMFGetLogIdentifier();
          int v29 = 138543362;
          uint64_t v30 = (uint64_t)v23;
          _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_DEFAULT, "%{public}@Dropping push to the cloud since failed to determine account status because of network failure", (uint8_t *)&v29, 0xCu);
        }
      }
      else
      {
        [(HMDHomeManager *)self _uploadHomeConfigToCloud:v6 withDelay:v8 reason:a4];
      }
      goto LABEL_20;
    }
    uint64_t v26 = (void *)MEMORY[0x1D9452090]([(HMDHomeManager *)self setBackOffOperationInProgress:0]);
    __int16 v27 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v28 = HMFGetLogIdentifier();
      int v29 = 138543362;
      uint64_t v30 = (uint64_t)v28;
      _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@Dropping push to the cloud since internet is not reachable, but trying to update watches", (uint8_t *)&v29, 0xCu);
    }
LABEL_19:
    [(HMDHomeManager *)self _scheduleSendHomeDataToAllWatches];
    goto LABEL_20;
  }
  if ([(HMDHomeManager *)self uploadMetadataToCloud])
  {
    [(HMDHomeManager *)self _pushMetadataChangesToUsers];
    [(HMDHomeManager *)self setUploadMetadataToCloud:0];
  }
  [(HMDHomeManager *)self _schedulePushChangesToAllUsersOfAllHomes];
  [(HMDHomeManager *)self setBackOffOperationInProgress:0];
  if (v8)
  {
    id v24 = [(HMDHomeManager *)self logEventSubmitter];
    BOOL v25 = +[HMDCloudSyncUploadReasonLogEvent uploadReason:v8 acceptedLegacyPush:0];
    [v24 submitLogEvent:v25];
  }
LABEL_20:
}

- (void)_pushChangesToCloud:(BOOL)a3 withDelay:(double)a4
{
}

- (void)_removePendingDataSyncAcksForUser:(id)a3 forHome:(id)a4
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  BOOL v6 = (__CFString *)a3;
  id v7 = a4;
  id v8 = [v7 UUIDString];
  id v9 = [(HMDHomeManager *)self pendingDataSyncAcks];
  uint64_t v10 = [v9 objectForKeyedSubscript:v8];

  if (v10)
  {
    [v10 removeObject:v6];
    if (![v10 count])
    {
      int v11 = shouldLogPrivateInformation();
      id v12 = @"...";
      if (v11) {
        id v12 = v6;
      }
      uint64_t v13 = v12;
      int v14 = (void *)MEMORY[0x1D9452090]();
      id v15 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        int v16 = HMFGetLogIdentifier();
        char v17 = [v7 UUIDString];
        int v25 = 138543874;
        uint64_t v26 = v16;
        __int16 v27 = 2112;
        uint64_t v28 = v13;
        __int16 v29 = 2112;
        uint64_t v30 = v17;
        _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@Removing pending data sync ack for user %@ for data corresponding to home %@", (uint8_t *)&v25, 0x20u);
      }
      id v18 = [(HMDHomeManager *)self pendingDataSyncAcks];
      [v18 removeObjectForKey:v8];
    }
  }
  BOOL v19 = (void *)MEMORY[0x1D9452090]();
  uint64_t v20 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    uint64_t v21 = HMFGetLogIdentifier();
    id v22 = [(HMDHomeManager *)self pendingDataSyncAcks];
    int v25 = 138543618;
    uint64_t v26 = v21;
    __int16 v27 = 2112;
    uint64_t v28 = v22;
    _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@Remaining pending data sync acks %@", (uint8_t *)&v25, 0x16u);
  }
  id v23 = [(HMDHomeManager *)self pendingDataSyncAcks];
  id v24 = +[HMDPersistentStore archiveIDSDataSyncJournal:v23];
}

- (void)_addPendingDataSyncAcksForUser:(id)a3 forHome:(id)a4
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  BOOL v6 = (__CFString *)a3;
  id v7 = a4;
  int v8 = shouldLogPrivateInformation();
  id v9 = @"...";
  if (v8) {
    id v9 = v6;
  }
  uint64_t v10 = v9;
  int v11 = (void *)MEMORY[0x1D9452090]();
  id v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = HMFGetLogIdentifier();
    int v14 = [v7 UUIDString];
    int v21 = 138543874;
    id v22 = v13;
    __int16 v23 = 2112;
    id v24 = v10;
    __int16 v25 = 2112;
    uint64_t v26 = v14;
    _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Adding pending data sync ack for user %@ for data corresponding to home %@", (uint8_t *)&v21, 0x20u);
  }
  id v15 = [v7 UUIDString];
  int v16 = [(HMDHomeManager *)self pendingDataSyncAcks];
  char v17 = [v16 objectForKeyedSubscript:v15];

  if (!v17)
  {
    char v17 = [MEMORY[0x1E4F1CA80] set];
    id v18 = [(HMDHomeManager *)self pendingDataSyncAcks];
    [v18 setObject:v17 forKeyedSubscript:v15];
  }
  [v17 addObject:v6];
  BOOL v19 = [(HMDHomeManager *)self pendingDataSyncAcks];
  id v20 = +[HMDPersistentStore archiveIDSDataSyncJournal:v19];
}

- (void)pushMetadataToAllWatches
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v3 = [(HMDHomeManager *)self associatedWatchPeers];
  uint64_t v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v13;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v12 + 1) + 8 * v7);
        id v9 = [(HMDHomeManager *)self associatedWatchPeers];
        uint64_t v10 = [v9 objectForKey:v8];
        int v11 = [v10 metadataConfig];
        [(HMDHomeManager *)self checkAndPushMetadataToUser:v8 destination:v8 userInfo:v11];

        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v5);
  }
}

- (void)_pushMetadataChangesToUsers
{
  v71[1] = *MEMORY[0x1E4F143B8];
  if (isWatch())
  {
    id v3 = (void *)MEMORY[0x1D9452090]();
    uint64_t v4 = self;
    uint64_t v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v56 = v6;
      _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Cannot push metadata changes from watch or simulator to other users.", buf, 0xCu);
    }
  }
  else
  {
    id v40 = +[HMDHAPMetadata getSharedInstance];
    if (v40)
    {
      id v39 = [(HMDHomeManager *)self _getListOfUsersToPushMetadataChangesTo];
      if ([v39 count]
        || ([(HMDHomeManager *)self associatedWatchPeers],
            uint64_t v7 = objc_claimAutoreleasedReturnValue(),
            uint64_t v8 = [v7 count],
            v7,
            v8))
      {
        id v70 = @"kRequestedCapabilitiesKey";
        v68[0] = @"kMetadataInfoVersionKey";
        id v9 = [v40 version];
        v69[0] = v9;
        v68[1] = @"kMetadataInfoSchemaVersionKey";
        uint64_t v10 = [v40 schemaVersion];
        v69[1] = v10;
        v68[2] = @"kMetadataInfoCompletenessKey";
        int v11 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v40, "incomplete") ^ 1);
        v69[2] = v11;
        v68[3] = @"kHomedVersionKey";
        id v12 = (id)homedVersion;
        v69[3] = v12;
        long long v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v69 forKeys:v68 count:4];
        v71[0] = v13;
        unint64_t v42 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v71 forKeys:&v70 count:1];

        id v64 = @"kDeviceClassTypeKey";
        id v65 = @"kDeviceClassTypeTransient";
        v66[0] = @"kRequiredCapabilitiesKey";
        long long v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v65 forKeys:&v64 count:1];
        v66[1] = @"kRequestedCapabilitiesKey";
        v67[0] = v14;
        v62[0] = @"kMetadataInfoVersionKey";
        long long v15 = [v40 version];
        v63[0] = v15;
        v62[1] = @"kMetadataInfoSchemaVersionKey";
        int v16 = [v40 schemaVersion];
        v63[1] = v16;
        v62[2] = @"kMetadataInfoCompletenessKey";
        uint64_t v17 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v40, "incomplete") ^ 1);
        void v63[2] = v17;
        void v62[3] = @"kHomedVersionKey";
        id v18 = (id)homedVersion;
        v63[3] = v18;
        BOOL v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v63 forKeys:v62 count:4];
        v67[1] = v19;
        unint64_t v41 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v67 forKeys:v66 count:2];

        objc_initWeak(&location, self);
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        id v20 = v39;
        uint64_t v21 = [v20 countByEnumeratingWithState:&v50 objects:v61 count:16];
        if (v21)
        {
          uint64_t v43 = *(void *)v51;
          do
          {
            uint64_t v44 = v21;
            for (uint64_t i = 0; i != v44; ++i)
            {
              if (*(void *)v51 != v43) {
                objc_enumerationMutation(v20);
              }
              __int16 v23 = *(void **)(*((void *)&v50 + 1) + 8 * i);
              if (objc_msgSend(v20, "hmf_BOOLForKey:", v23))
              {
                id v24 = v23;
                __int16 v25 = v42;
              }
              else
              {
                id v24 = 0;
                __int16 v25 = v41;
              }
              id v26 = v25;
              uint64_t v27 = (void *)MEMORY[0x1D9452090]();
              HMFGetOSLogHandle();
              uint64_t v28 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
              {
                __int16 v29 = HMFGetLogIdentifier();
                *(_DWORD *)long long buf = 138543874;
                uint64_t v56 = v29;
                __int16 v57 = 2112;
                int v58 = v23;
                __int16 v59 = 2112;
                id v60 = v24;
                _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_INFO, "%{public}@Preparing for metadata push to user: %@ with destination: %@", buf, 0x20u);
              }
              uint64_t v30 = [(HMDHomeManager *)self workQueue];
              v45[0] = MEMORY[0x1E4F143A8];
              v45[1] = 3221225472;
              v45[2] = __45__HMDHomeManager__pushMetadataChangesToUsers__block_invoke;
              v45[3] = &unk_1E6A15A98;
              objc_copyWeak(&v49, &location);
              id v31 = v20;
              id v46 = v31;
              uint64_t v47 = v23;
              id v48 = self;
              [(HMDHomeManager *)self electDeviceForUser:v23 destination:v24 deviceCapabilities:v26 queue:v30 completionHandler:v45];

              objc_destroyWeak(&v49);
            }
            uint64_t v21 = [v31 countByEnumeratingWithState:&v50 objects:v61 count:16];
          }
          while (v21);
        }

        objc_destroyWeak(&location);
      }
      else
      {
        __int16 v35 = (void *)MEMORY[0x1D9452090]();
        uint64_t v36 = self;
        uint64_t v37 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          id v38 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543362;
          uint64_t v56 = v38;
          _os_log_impl(&dword_1D49D5000, v37, OS_LOG_TYPE_INFO, "%{public}@Not pushing metadata changes to anybody as either there are no users or there are no associated watches with this account.", buf, 0xCu);
        }
      }
    }
    else
    {
      uint64_t v32 = (void *)MEMORY[0x1D9452090]();
      uint64_t v33 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        id v34 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v56 = v34;
        _os_log_impl(&dword_1D49D5000, v33, OS_LOG_TYPE_ERROR, "%{public}@No metadata to push changes to shared users.", buf, 0xCu);
      }
    }
  }
}

void __45__HMDHomeManager__pushMetadataChangesToUsers__block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  int v11 = WeakRetained;
  if (!v7 && WeakRetained && objc_msgSend(*(id *)(a1 + 32), "hmf_BOOLForKey:", *(void *)(a1 + 40)))
  {
    id v12 = (void *)MEMORY[0x1D9452090]();
    id v13 = *(id *)(a1 + 48);
    long long v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      long long v15 = HMFGetLogIdentifier();
      uint64_t v16 = *(void *)(a1 + 40);
      int v21 = 138543618;
      id v22 = v15;
      __int16 v23 = 2112;
      uint64_t v24 = v16;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Pushing metadata changes to shared user: %@", (uint8_t *)&v21, 0x16u);
    }
    uint64_t v19 = a1 + 40;
    uint64_t v17 = *(void *)(a1 + 40);
    id v18 = *(void **)(v19 + 8);
    id v20 = [v8 destination];
    [v18 checkAndPushMetadataToUser:v17 destination:v20 userInfo:v9];
  }
}

- (id)_getListOfUsersToPushMetadataChangesTo
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v3 = [MEMORY[0x1E4F5BE48] systemStore];
  id v41 = 0;
  id v42 = 0;
  [v3 getControllerPublicKey:0 secretKey:0 username:&v42 allowCreation:0 error:&v41];
  id v4 = v42;
  id v27 = v41;

  uint64_t v5 = [MEMORY[0x1E4F1CA60] dictionary];
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id obj = [(HMDHomeManager *)self homes];
  uint64_t v6 = [obj countByEnumeratingWithState:&v37 objects:v44 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v38;
    uint64_t v9 = MEMORY[0x1E4F1CC38];
    uint64_t v28 = *(void *)v38;
    id v29 = v4;
    do
    {
      uint64_t v10 = 0;
      uint64_t v30 = v7;
      do
      {
        if (*(void *)v38 != v8) {
          objc_enumerationMutation(obj);
        }
        int v11 = *(void **)(*((void *)&v37 + 1) + 8 * v10);
        id v12 = objc_msgSend(v11, "ownerName", v27);
        int v13 = [v12 isEqualToString:v4];

        if (v13)
        {
          uint64_t v32 = v10;
          long long v35 = 0u;
          long long v36 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
          long long v14 = [v11 users];
          uint64_t v15 = [v14 countByEnumeratingWithState:&v33 objects:v43 count:16];
          if (!v15) {
            goto LABEL_20;
          }
          uint64_t v16 = v15;
          uint64_t v17 = *(void *)v34;
          while (1)
          {
            for (uint64_t i = 0; i != v16; ++i)
            {
              if (*(void *)v34 != v17) {
                objc_enumerationMutation(v14);
              }
              uint64_t v19 = *(void **)(*((void *)&v33 + 1) + 8 * i);
              id v20 = [v19 userID];

              if (v20)
              {
                if ([v19 isRemoteGateway])
                {
                  int v21 = [v19 userID];
                  id v22 = v5;
                  uint64_t v23 = v9;
                }
                else
                {
                  uint64_t v24 = [v11 currentUser];
                  char v25 = [v19 isEqual:v24];

                  if (v25) {
                    continue;
                  }
                  int v21 = [v19 userID];
                  id v22 = v5;
                  uint64_t v23 = MEMORY[0x1E4F1CC28];
                }
                [v22 setObject:v23 forKeyedSubscript:v21];
              }
            }
            uint64_t v16 = [v14 countByEnumeratingWithState:&v33 objects:v43 count:16];
            if (!v16)
            {
LABEL_20:

              uint64_t v8 = v28;
              id v4 = v29;
              uint64_t v7 = v30;
              uint64_t v10 = v32;
              break;
            }
          }
        }
        ++v10;
      }
      while (v10 != v7);
      uint64_t v7 = [obj countByEnumeratingWithState:&v37 objects:v44 count:16];
    }
    while (v7);
  }

  return v5;
}

- (void)checkAndPushMetadataToUser:(id)a3 destination:(id)a4 userInfo:(id)a5
{
  v96[1] = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  if (!isWatch())
  {
    int v11 = +[HMDHAPMetadata getSharedInstance];
    uint64_t v62 = objc_msgSend(v10, "hmf_numberForKey:", @"kMetadataInfoVersionKey");
    BOOL v63 = objc_msgSend(v10, "hmf_numberForKey:", @"kMetadataInfoSchemaVersionKey");
    if (v11 && v63 && v62)
    {
      id v12 = [v11 schemaVersion];
      if ([v12 isEqualToNumber:v63])
      {
        int v13 = [v11 version];
        unint64_t v14 = [v13 unsignedIntegerValue];
        BOOL v15 = v14 > [v62 unsignedIntegerValue];
      }
      else
      {
        BOOL v15 = 0;
      }

      uint64_t v16 = objc_msgSend(v10, "hmf_numberForKey:", @"kMetadataInfoCompletenessKey");
      uint64_t v17 = v16;
      if (v16)
      {
        char v18 = [v16 BOOLValue];
        if (([v11 incomplete] & 1) == 0 && (v18 & 1) == 0)
        {
          uint64_t v19 = [v11 schemaVersion];
          if ([v19 isEqualToNumber:v63])
          {
            id v20 = [v11 version];
            uint64_t v60 = [v20 unsignedIntegerValue];
            int v21 = v11;
            id v22 = v8;
            id v23 = v9;
            uint64_t v24 = [v62 unsignedIntegerValue];

            BOOL v25 = v60 == v24;
            id v9 = v23;
            id v8 = v22;
            int v11 = v21;
            if (v25)
            {
              id v26 = (void *)MEMORY[0x1D9452090]();
              id v27 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
              {
                uint64_t v28 = HMFGetLogIdentifier();
                *(_DWORD *)long long buf = 138543362;
                id v78 = v28;
                _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_INFO, "%{public}@Remote metadata is incomplete, local metadata is complete - sending...", buf, 0xCu);
              }

              goto LABEL_20;
            }
          }
          else
          {
          }
        }
      }
      else
      {
        [v11 incomplete];
      }

      if (v15)
      {
LABEL_20:
        id v29 = (void *)MEMORY[0x1D9452090]();
        uint64_t v30 = self;
        id v31 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v32 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543362;
          id v78 = v32;
          _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_DEFAULT, "%{public}@Push metadata changes to the user", buf, 0xCu);
        }
        context = (void *)MEMORY[0x1D9452090]();
        uint64_t v71 = 0;
        id v72 = &v71;
        uint64_t v73 = 0x3032000000;
        long long v74 = __Block_byref_object_copy__170059;
        long long v75 = __Block_byref_object_dispose__170060;
        id v76 = (id)[objc_alloc(MEMORY[0x1E4F654E0]) initWithName:@"com.apple.homed.push-metadata"];
        __int16 v59 = objc_msgSend(v10, "hmf_numberForKey:", @"kHomedVersionKey");
        BOOL v33 = +[HMDHAPMetadata isHomedVersionSupported:](HMDHAPMetadata, "isHomedVersionSupported:");
        long long v34 = (void *)MEMORY[0x1D9452090]();
        if (v33)
        {
          HMFGetOSLogHandle();
          long long v35 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
          {
            long long v36 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543874;
            id v78 = v36;
            __int16 v79 = 2112;
            uint64_t v80 = (uint64_t)v8;
            __int16 v81 = 2112;
            id v82 = v59;
            _os_log_impl(&dword_1D49D5000, v35, OS_LOG_TYPE_INFO, "%{public}@Push metadata dictionary to user %@ as its version %@ is supported.", buf, 0x20u);
          }
          long long v37 = (void *)MEMORY[0x1E4F28DB0];
          long long v38 = +[HMDPersistentStore loadPlainMetadataDictionary];
          long long v39 = [v37 archivedDataWithRootObject:v38 requiringSecureCoding:1 error:0];

          int v61 = objc_msgSend(v39, "hmd_compressedData");

          long long v40 = +[HMDHAPMetadataModel metadataModelObjectUUID];
          id v41 = [v40 UUIDString];
          v68[0] = MEMORY[0x1E4F143A8];
          v68[1] = 3221225472;
          v68[2] = __66__HMDHomeManager_checkAndPushMetadataToUser_destination_userInfo___block_invoke;
          v68[3] = &unk_1E6A15A48;
          id v69 = v8;
          id v70 = &v71;
          [(HMDHomeManager *)v30 sendFragmentedMessageForData:v61 objectUUID:v41 withMessageName:@"kMetadataDataSyncRequestKey" toUser:v69 destination:v9 completionHandler:v68];

          id v42 = v69;
        }
        else
        {
          HMFGetOSLogHandle();
          uint64_t v43 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            uint64_t v44 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543874;
            id v78 = v44;
            __int16 v79 = 2112;
            uint64_t v80 = (uint64_t)v8;
            __int16 v81 = 2112;
            id v82 = v59;
            _os_log_impl(&dword_1D49D5000, v43, OS_LOG_TYPE_INFO, "%{public}@Sending old metadata data to %@ as it is a legacy device %@.", buf, 0x20u);
          }
          int v61 = +[HMDHAPMetadata legacyV3DataForIDS];
          uint64_t v45 = (void *)MEMORY[0x1E4F65480];
          id v95 = @"kHAPMetadataDataKey";
          v96[0] = v61;
          id v46 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v96 forKeys:&v95 count:1];
          id v42 = [v45 internalMessageWithName:@"kMetadataDataSyncRequestKey" messagePayload:v46];

          objc_initWeak((id *)buf, v30);
          uint64_t v47 = [(HMDHomeManager *)v30 messageDispatcher];
          id v48 = [(HMDHomeManager *)v30 uuid];
          id v49 = [(HMDHomeManager *)v30 workQueue];
          v64[0] = MEMORY[0x1E4F143A8];
          v64[1] = 3221225472;
          v64[2] = __66__HMDHomeManager_checkAndPushMetadataToUser_destination_userInfo___block_invoke_719;
          v64[3] = &unk_1E6A15A70;
          objc_copyWeak(&v67, (id *)buf);
          id v65 = v8;
          id v66 = &v71;
          [v47 sendSecureMessage:v42 target:v48 userID:v65 destination:v9 responseQueue:v49 responseHandler:v64];

          objc_destroyWeak(&v67);
          objc_destroyWeak((id *)buf);
        }

        long long v50 = (void *)MEMORY[0x1D9452090]();
        HMFGetOSLogHandle();
        long long v51 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          id v52 = (id)objc_claimAutoreleasedReturnValue();
          uint64_t v53 = [v61 length];
          id v54 = [v11 schemaVersion];
          BOOL v55 = [v11 version];
          uint64_t v56 = v72[5];
          *(_DWORD *)long long buf = 138545410;
          id v78 = v52;
          __int16 v79 = 2048;
          uint64_t v80 = v53;
          __int16 v81 = 2112;
          id v82 = v8;
          __int16 v83 = 2112;
          id v84 = v9;
          __int16 v85 = 2112;
          uint64_t v86 = v54;
          __int16 v87 = 2112;
          __int16 v88 = v55;
          __int16 v89 = 2112;
          id v90 = v63;
          __int16 v91 = 2112;
          uint64_t v92 = v62;
          __int16 v93 = 2112;
          uint64_t v94 = v56;
          _os_log_impl(&dword_1D49D5000, v51, OS_LOG_TYPE_INFO, "%{public}@Pushing metadata(%lu bytes) change to user %@ (%@) - local %@/%@  remote %@/%@ - creating transaction %@", buf, 0x5Cu);
        }

        _Block_object_dispose(&v71, 8);
      }
    }
  }
}

void __66__HMDHomeManager_checkAndPushMetadataToUser_destination_userInfo___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (objc_msgSend(v6, "hmf_BOOLForKey:", @"kDataSyncResponseAckKey"))
  {
    uint64_t v7 = (void *)MEMORY[0x1D9452090]();
    id v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = HMFGetLogIdentifier();
      uint64_t v10 = *(void *)(a1 + 32);
      int v13 = 138543618;
      unint64_t v14 = v9;
      __int16 v15 = 2112;
      uint64_t v16 = v10;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Received sync from user %@ for metadata update", (uint8_t *)&v13, 0x16u);
    }
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = 0;
}

void __66__HMDHomeManager_checkAndPushMetadataToUser_destination_userInfo___block_invoke_719(uint64_t a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained && objc_msgSend(v6, "hmf_BOOLForKey:", @"kDataSyncResponseAckKey"))
  {
    id v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      uint64_t v11 = *(void *)(a1 + 32);
      int v14 = 138543618;
      __int16 v15 = v10;
      __int16 v16 = 2112;
      uint64_t v17 = v11;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Received sync from user %@ for metadata update", (uint8_t *)&v14, 0x16u);
    }
  }
  uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8);
  int v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = 0;
}

- (void)_archiveSyncDataForHome:(id)a3 toUser:(id)a4
{
  id v11 = a3;
  id v6 = a4;
  if (!isWatch())
  {
    uint64_t v7 = -[HMDHomeManager generatePayloadFromHome:forAdmin:user:supportedFeatures:](self, "generatePayloadFromHome:forAdmin:user:supportedFeatures:", v11, [v6 isAdministrator], v6, &unk_1F2DC7030);
    id v8 = [v7 objectForKey:@"kHomeDataKey"];
    id v9 = v8;
    if (v8)
    {
      uint64_t v10 = objc_msgSend(v8, "hmd_compressedData");
      [v6 saveSyncDataToLocalDisk:v10];
    }
  }
}

- (void)_archiveSyncDataForHome:(id)a3
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    uint64_t v7 = [v3 name];
    *(_DWORD *)long long buf = 138543618;
    id v26 = v6;
    __int16 v27 = 2112;
    uint64_t v28 = v7;
    _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Archiving home [%@] for all users", buf, 0x16u);
  }
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v8 = [v3 users];
  uint64_t v9 = [v8 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v21 != v11) {
          objc_enumerationMutation(v8);
        }
        int v13 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        int v14 = [v13 userID];

        if (v14)
        {
          if (([v13 isRemoteGateway] & 1) == 0)
          {
            __int16 v15 = [v13 uuid];
            __int16 v16 = [v3 currentUser];
            uint64_t v17 = [v16 uuid];
            char v18 = [v15 isEqual:v17];

            if ((v18 & 1) == 0) {
              [(HMDHomeManager *)self _archiveSyncDataForHome:v3 toUser:v13];
            }
          }
        }
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v10);
  }
}

- (void)_pushChangesForHome:(id)a3 toRegularUsersOfHome:(id)a4 adminUsersOfHome:(id)a5
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  id v44 = a3;
  id v38 = a4;
  id v45 = a5;
  if (!isWatch() && ([v38 count] || objc_msgSend(v45, "count")))
  {
    context = (void *)MEMORY[0x1D9452090]();
    v60[0] = 0;
    v60[1] = v60;
    void v60[2] = 0x3032000000;
    v60[3] = __Block_byref_object_copy__170059;
    v60[4] = __Block_byref_object_dispose__170060;
    id v61 = (id)[objc_alloc(MEMORY[0x1E4F654E0]) initWithName:@"com.apple.homed.push-home-to-users"];
    long long v37 = +[HMDHAPMetadata getSharedInstance];
    id v8 = (void *)MEMORY[0x1D9452090]();
    uint64_t v9 = self;
    if (v37)
    {
      HMFGetOSLogHandle();
      uint64_t v43 = v9;
      uint64_t v10 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543874;
        id v70 = v11;
        __int16 v71 = 2112;
        id v72 = v45;
        __int16 v73 = 2112;
        id v74 = v38;
        _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Pushing home changes to admins: %@ and regular users: %@", buf, 0x20u);
      }
      id v65 = @"kDeviceClassTypeKey";
      id v66 = @"kDeviceClassTypeTransient";
      v67[0] = @"kRequiredCapabilitiesKey";
      uint64_t v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v66 forKeys:&v65 count:1];
      v67[1] = @"kRequestedCapabilitiesKey";
      v68[0] = v12;
      v63[0] = @"kHomedVersionKey";
      id v13 = (id)homedVersion;
      v64[0] = v13;
      v64[1] = &unk_1F2DC7018;
      v63[1] = @"kHomedSupportedFeaturesKey";
      void v63[2] = @"kHomeUUID";
      int v14 = [v44 uuid];
      __int16 v15 = [v14 UUIDString];
      v64[2] = v15;
      v63[3] = @"kHomeConfigurationVersionKey";
      __int16 v16 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v44, "configurationVersion"));
      v64[3] = v16;
      void v63[4] = @"kMetadataInfoVersionKey";
      uint64_t v17 = [v37 version];
      void v64[4] = v17;
      v63[5] = @"kMetadataInfoSchemaVersionKey";
      char v18 = [v37 schemaVersion];
      v64[5] = v18;
      v63[6] = @"kMetadataInfoCompletenessKey";
      uint64_t v19 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v37, "incomplete") ^ 1);
      v64[6] = v19;
      long long v20 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v64 forKeys:v63 count:7];
      v68[1] = v20;
      id v41 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v68 forKeys:v67 count:2];

      long long v21 = dispatch_group_create();
      long long v22 = [v38 arrayByAddingObjectsFromArray:v45];
      id v42 = [(HMDHomeManager *)v43 _getListOfUsersToPushMetadataChangesTo];
      objc_initWeak(&location, v43);
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      id obj = v22;
      uint64_t v23 = [obj countByEnumeratingWithState:&v55 objects:v62 count:16];
      if (v23)
      {
        uint64_t v40 = *(void *)v56;
        do
        {
          for (uint64_t i = 0; i != v23; ++i)
          {
            if (*(void *)v56 != v40) {
              objc_enumerationMutation(obj);
            }
            BOOL v25 = *(void **)(*((void *)&v55 + 1) + 8 * i);
            id v26 = (void *)MEMORY[0x1D9452090]();
            __int16 v27 = v43;
            HMFGetOSLogHandle();
            uint64_t v28 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
            {
              uint64_t v29 = HMFGetLogIdentifier();
              *(_DWORD *)long long buf = 138543618;
              id v70 = v29;
              __int16 v71 = 2112;
              id v72 = v25;
              _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_INFO, "%{public}@Pushing home changes to shared user: %@", buf, 0x16u);
            }
            dispatch_group_enter(v21);
            uint64_t v30 = [v25 pushDestination];
            id v31 = [v25 destination];
            uint64_t v32 = [(HMDHomeManager *)v27 workQueue];
            v47[0] = MEMORY[0x1E4F143A8];
            v47[1] = 3221225472;
            void v47[2] = __76__HMDHomeManager__pushChangesForHome_toRegularUsersOfHome_adminUsersOfHome___block_invoke;
            v47[3] = &unk_1E6A15A20;
            id v48 = v42;
            id v49 = v25;
            long long v50 = v27;
            id v51 = v44;
            id v52 = v45;
            uint64_t v53 = v21;
            objc_copyWeak(&v54, &location);
            [(HMDHomeManager *)v27 electDeviceForUser:v30 destination:v31 deviceCapabilities:v41 queue:v32 completionHandler:v47];

            objc_destroyWeak(&v54);
          }
          uint64_t v23 = [obj countByEnumeratingWithState:&v55 objects:v62 count:16];
        }
        while (v23);
      }

      BOOL v33 = [(HMDHomeManager *)v43 workQueue];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __76__HMDHomeManager__pushChangesForHome_toRegularUsersOfHome_adminUsersOfHome___block_invoke_709;
      block[3] = &unk_1E6A18690;
      void block[4] = v43;
      void block[5] = v60;
      dispatch_group_notify(v21, v33, block);

      objc_destroyWeak(&location);
    }
    else
    {
      HMFGetOSLogHandle();
      long long v34 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        long long v35 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        id v70 = v35;
        _os_log_impl(&dword_1D49D5000, v34, OS_LOG_TYPE_ERROR, "%{public}@No metadata to push changes for home", buf, 0xCu);
      }
    }

    _Block_object_dispose(v60, 8);
  }
}

void __76__HMDHomeManager__pushChangesForHome_toRegularUsersOfHome_adminUsersOfHome___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v76 = a3;
  id v77 = a4;
  if (v7)
  {
    id v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = *(id *)(a1 + 48);
    uint64_t v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      uint64_t v12 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138543618;
      id v90 = v11;
      __int16 v91 = 2112;
      uint64_t v92 = v12;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to elect a device to push home change: %@", buf, 0x16u);
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
    goto LABEL_41;
  }
  id v13 = *(void **)(a1 + 32);
  int v14 = [*(id *)(a1 + 40) pushDestination];
  LODWORD(v13) = objc_msgSend(v13, "hmf_BOOLForKey:", v14);

  if (v13)
  {
    __int16 v15 = (void *)MEMORY[0x1D9452090]();
    id v16 = *(id *)(a1 + 48);
    uint64_t v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      char v18 = HMFGetLogIdentifier();
      uint64_t v19 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138543618;
      id v90 = v18;
      __int16 v91 = 2112;
      uint64_t v92 = v19;
      _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Pushing metadata changes to shared user: %@", buf, 0x16u);
    }
    long long v20 = *(void **)(a1 + 48);
    long long v21 = [*(id *)(a1 + 40) pushDestination];
    long long v22 = [v76 destination];
    [v20 checkAndPushMetadataToUser:v21 destination:v22 userInfo:v77];
  }
  uint64_t v75 = [v77 objectForKeyedSubscript:@"kHomeConfigurationVersionKey"];
  uint64_t v23 = (void *)MEMORY[0x1D9452090]();
  id v24 = *(id *)(a1 + 48);
  BOOL v25 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
  {
    id v26 = HMFGetLogIdentifier();
    uint64_t v27 = [*(id *)(a1 + 56) configurationVersion];
    uint64_t v28 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138544130;
    id v90 = v26;
    __int16 v91 = 2048;
    uint64_t v92 = v27;
    __int16 v93 = 2112;
    uint64_t v94 = v75;
    __int16 v95 = 2112;
    uint64_t v96 = v28;
    _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_INFO, "%{public}@Current home configuration version: %ld user home configuration version: %@ user: %@", buf, 0x2Au);
  }
  if (v75)
  {
    if (([*(id *)(a1 + 40) ignoreConfigCompare] & 1) == 0)
    {
      uint64_t v29 = [v75 integerValue];
      if (v29 == [*(id *)(a1 + 56) configurationVersion])
      {
        uint64_t v30 = (void *)MEMORY[0x1D9452090]();
        id v31 = *(id *)(a1 + 48);
        uint64_t v32 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          BOOL v33 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543362;
          id v90 = v33;
          _os_log_impl(&dword_1D49D5000, v32, OS_LOG_TYPE_INFO, "%{public}@Skipping home changes push to shared users as the local and remote versions are the same", buf, 0xCu);
        }
        dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
LABEL_37:

        goto LABEL_41;
      }
    }
  }
  long long v34 = [*(id *)(a1 + 40) destination];
  if (v34) {
    [v76 destination];
  }
  else {
  id v74 = [*(id *)(a1 + 40) username];
  }

  long long v35 = *(void **)(a1 + 48);
  long long v36 = [*(id *)(a1 + 56) uuid];
  [v35 _addPendingDataSyncAcksForUser:v74 forHome:v36];

  long long v37 = objc_msgSend(v77, "hmf_arrayForKey:", @"kHomedSupportedFeaturesKey");
  id v38 = v37;
  if (v37) {
    int v39 = [v37 containsObject:&unk_1F2DC9C40];
  }
  else {
    int v39 = 0;
  }
  int v40 = [*(id *)(a1 + 64) containsObject:*(void *)(a1 + 40)];
  id v42 = *(void **)(a1 + 48);
  uint64_t v41 = *(void *)(a1 + 56);
  uint64_t v43 = [*(id *)(a1 + 40) user];
  if (v40) {
    [v42 generatePayloadFromHome:v41 forAdmin:1 user:v43 supportedFeatures:v38];
  }
  else {
  id v44 = [v42 generatePayloadFromHome:v41 forAdmin:0 user:v43 supportedFeatures:v38];
  }

  uint64_t v45 = [*(id *)(a1 + 48) _compressHomeData:v44];
  id v46 = (void *)v45;
  if (v39) {
    uint64_t v47 = (void *)v45;
  }
  else {
    uint64_t v47 = v44;
  }
  id v73 = v47;

  if (v73)
  {
    id v72 = objc_msgSend(MEMORY[0x1E4F65480], "internalMessageWithName:messagePayload:", @"kHomeDataSyncRequestKey");
    id v48 = (void *)MEMORY[0x1D9452090]();
    id v49 = *(id *)(a1 + 48);
    long long v50 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
    {
      id v51 = HMFGetLogIdentifier();
      id v52 = [v72 dataForKey:@"kHomeDataKey"];
      uint64_t v53 = [v52 length];
      id v54 = *(void **)(a1 + 40);
      *(_DWORD *)long long buf = 138543874;
      id v90 = v51;
      __int16 v91 = 2048;
      uint64_t v92 = v53;
      __int16 v93 = 2112;
      uint64_t v94 = v54;
      _os_log_impl(&dword_1D49D5000, v50, OS_LOG_TYPE_INFO, "%{public}@Pushing home changes (%ld bytes) to shared user: %@", buf, 0x20u);
    }
    if (v38 && [v38 containsObject:&unk_1F2DC9C58])
    {
      objc_initWeak((id *)buf, *(id *)(a1 + 48));
      __int16 v71 = *(void **)(a1 + 48);
      long long v55 = [v72 dataForKey:@"kHomeDataKey"];
      long long v56 = [*(id *)(a1 + 56) uuid];
      long long v57 = [v56 UUIDString];
      long long v58 = [v72 name];
      __int16 v59 = [*(id *)(a1 + 40) pushDestination];
      uint64_t v60 = [v76 destination];
      v84[0] = MEMORY[0x1E4F143A8];
      v84[1] = 3221225472;
      v84[2] = __76__HMDHomeManager__pushChangesForHome_toRegularUsersOfHome_adminUsersOfHome___block_invoke_707;
      void v84[3] = &unk_1E6A15958;
      objc_copyWeak(&v88, (id *)buf);
      v84[4] = *(void *)(a1 + 40);
      id v85 = *(id *)(a1 + 56);
      id v86 = v74;
      id v87 = *(id *)(a1 + 72);
      [v71 sendFragmentedMessageForData:v55 objectUUID:v57 withMessageName:v58 toUser:v59 destination:v60 completionHandler:v84];

      objc_destroyWeak(&v88);
      objc_destroyWeak((id *)buf);
    }
    else
    {
      id v61 = [*(id *)(a1 + 48) messageDispatcher];
      uint64_t v62 = [*(id *)(a1 + 48) uuid];
      BOOL v63 = [*(id *)(a1 + 40) pushDestination];
      id v64 = [v76 destination];
      id v65 = [*(id *)(a1 + 48) workQueue];
      v78[0] = MEMORY[0x1E4F143A8];
      v78[1] = 3221225472;
      v78[2] = __76__HMDHomeManager__pushChangesForHome_toRegularUsersOfHome_adminUsersOfHome___block_invoke_708;
      v78[3] = &unk_1E6A15980;
      objc_copyWeak(&v83, (id *)(a1 + 80));
      int8x16_t v79 = vextq_s8(*(int8x16_t *)(a1 + 40), *(int8x16_t *)(a1 + 40), 8uLL);
      id v80 = *(id *)(a1 + 56);
      id v81 = v74;
      id v82 = *(id *)(a1 + 72);
      [v61 sendSecureMessage:v72 target:v62 userID:v63 destination:v64 responseQueue:v65 responseHandler:v78];

      objc_destroyWeak(&v83);
    }

    goto LABEL_37;
  }
  id v66 = (void *)MEMORY[0x1D9452090]();
  id v67 = *(id *)(a1 + 48);
  uint64_t v68 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
  {
    id v69 = HMFGetLogIdentifier();
    uint64_t v70 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138543618;
    id v90 = v69;
    __int16 v91 = 2112;
    uint64_t v92 = v70;
    _os_log_impl(&dword_1D49D5000, v68, OS_LOG_TYPE_INFO, "%{public}@Failed to get home data payload for user: %@", buf, 0x16u);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));

LABEL_41:
}

void __76__HMDHomeManager__pushChangesForHome_toRegularUsersOfHome_adminUsersOfHome___block_invoke_709(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    id v5 = HMFGetLogIdentifier();
    int v8 = 138543362;
    id v9 = v5;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_DEBUG, "%{public}@Finished pushing home changes to users", (uint8_t *)&v8, 0xCu);
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = 0;
}

void __76__HMDHomeManager__pushChangesForHome_toRegularUsersOfHome_adminUsersOfHome___block_invoke_707(uint64_t a1, void *a2, void *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    if (v5)
    {
      int v8 = [v5 domain];
      if ([v8 isEqualToString:*MEMORY[0x1E4F28760]])
      {
        uint64_t v9 = [v5 code];

        if (v9 == -6727)
        {
          uint64_t v10 = (void *)MEMORY[0x1D9452090]();
          id v11 = WeakRetained;
          uint64_t v12 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            id v13 = HMFGetLogIdentifier();
            uint64_t v14 = *(void *)(a1 + 48);
            __int16 v15 = [*(id *)(a1 + 40) name];
            int v40 = 138543874;
            uint64_t v41 = v13;
            __int16 v42 = 2112;
            uint64_t v43 = v14;
            __int16 v44 = 2112;
            uint64_t v45 = v15;
            id v16 = "%{public}@Pushed home change fragmented message received kNotFoundErr from user %@ for data sync corre"
                  "sponding to home %@";
LABEL_10:
            _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, v16, (uint8_t *)&v40, 0x20u);

            goto LABEL_11;
          }
          goto LABEL_11;
        }
      }
      else
      {
      }
      long long v20 = [v5 domain];
      if (![v20 isEqualToString:*MEMORY[0x1E4F2D140]])
      {

        goto LABEL_24;
      }
      uint64_t v21 = [v5 code];

      if (v21 != 17)
      {
LABEL_24:
        dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
        goto LABEL_25;
      }
      long long v22 = (void *)MEMORY[0x1D9452090]();
      uint64_t v23 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        id v24 = HMFGetLogIdentifier();
        uint64_t v25 = *(void *)(a1 + 48);
        id v26 = [*(id *)(a1 + 40) name];
        int v40 = 138543874;
        uint64_t v41 = v24;
        __int16 v42 = 2112;
        uint64_t v43 = v25;
        __int16 v44 = 2112;
        uint64_t v45 = v26;
        _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_ERROR, "%{public}@Received HMErrorCodeInsufficientPrivileges from user %@ for data sync corresponding to home %@.  Removing User", (uint8_t *)&v40, 0x20u);
      }
      uint64_t v27 = *(void *)(a1 + 48);
      uint64_t v28 = [*(id *)(a1 + 40) uuid];
      [WeakRetained _removePendingDataSyncAcksForUser:v27 forHome:v28];
    }
    else
    {
      if (objc_msgSend(v6, "hmf_BOOLForKey:", @"kDataSyncResponseAckKey"))
      {
        uint64_t v10 = (void *)MEMORY[0x1D9452090]();
        id v11 = WeakRetained;
        uint64_t v12 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          id v13 = HMFGetLogIdentifier();
          uint64_t v17 = *(void *)(a1 + 32);
          __int16 v15 = [*(id *)(a1 + 40) name];
          int v40 = 138543874;
          uint64_t v41 = v13;
          __int16 v42 = 2112;
          uint64_t v43 = v17;
          __int16 v44 = 2112;
          uint64_t v45 = v15;
          id v16 = "%{public}@Pushed home change fragmented message received ACK from user %@ for data sync corresponding to home %@";
          goto LABEL_10;
        }
LABEL_11:

        uint64_t v18 = *(void *)(a1 + 48);
        uint64_t v19 = [*(id *)(a1 + 40) uuid];
        [v11 _removePendingDataSyncAcksForUser:v18 forHome:v19];

        goto LABEL_24;
      }
      if (!objc_msgSend(v6, "hmf_BOOLForKey:", @"kDataSyncResponseNAckKey"))
      {
        if (!objc_msgSend(v6, "hmf_BOOLForKey:", @"kDataSyncResponseCancelKey")) {
          goto LABEL_24;
        }
        uint64_t v10 = (void *)MEMORY[0x1D9452090]();
        id v11 = WeakRetained;
        uint64_t v12 = HMFGetOSLogHandle();
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_INFO)) {
          goto LABEL_11;
        }
        id v13 = HMFGetLogIdentifier();
        uint64_t v39 = *(void *)(a1 + 32);
        __int16 v15 = [*(id *)(a1 + 40) name];
        int v40 = 138543874;
        uint64_t v41 = v13;
        __int16 v42 = 2112;
        uint64_t v43 = v39;
        __int16 v44 = 2112;
        uint64_t v45 = v15;
        id v16 = "%{public}@Pushed home change fragmented message received Cancel from user %@ for data corresponding to home %@";
        goto LABEL_10;
      }
      uint64_t v29 = (void *)MEMORY[0x1D9452090]();
      id v30 = WeakRetained;
      id v31 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        uint64_t v32 = HMFGetLogIdentifier();
        uint64_t v33 = *(void *)(a1 + 32);
        long long v34 = [*(id *)(a1 + 40) name];
        int v40 = 138543874;
        uint64_t v41 = v32;
        __int16 v42 = 2112;
        uint64_t v43 = v33;
        __int16 v44 = 2112;
        uint64_t v45 = v34;
        _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_INFO, "%{public}@Pushed home change fragmented message received NACK from user %@ for data sync corresponding to home %@", (uint8_t *)&v40, 0x20u);
      }
      uint64_t v35 = *(void *)(a1 + 48);
      long long v36 = [*(id *)(a1 + 40) uuid];
      [v30 _removePendingDataSyncAcksForUser:v35 forHome:v36];
    }
    long long v37 = *(void **)(a1 + 40);
    id v38 = [*(id *)(a1 + 32) username];
    [v37 removeUserWithUserID:v38];

    goto LABEL_24;
  }
LABEL_25:
}

void __76__HMDHomeManager__pushChangesForHome_toRegularUsersOfHome_adminUsersOfHome___block_invoke_708(uint64_t a1, void *a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (WeakRetained)
  {
    if (v5)
    {
      int v8 = [v5 domain];
      if ([v8 isEqualToString:*MEMORY[0x1E4F28760]])
      {
        uint64_t v9 = [v5 code];

        if (v9 == -6727)
        {
          uint64_t v10 = (void *)MEMORY[0x1D9452090]();
          id v11 = *(id *)(a1 + 32);
          uint64_t v12 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            id v13 = HMFGetLogIdentifier();
            uint64_t v14 = *(void *)(a1 + 56);
            __int16 v15 = [*(id *)(a1 + 48) name];
            int v32 = 138543874;
            uint64_t v33 = v13;
            __int16 v34 = 2112;
            uint64_t v35 = v14;
            __int16 v36 = 2112;
            long long v37 = v15;
            id v16 = "%{public}@Pushed home change secure message received kNotFoundErr from user %@ for data sync corresponding to home %@";
LABEL_10:
            _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, v16, (uint8_t *)&v32, 0x20u);

            goto LABEL_11;
          }
          goto LABEL_11;
        }
      }
      else
      {
      }
      long long v20 = [v5 domain];
      if ([v20 isEqualToString:*MEMORY[0x1E4F2D140]])
      {
        uint64_t v21 = [v5 code];

        if (v21 == 17)
        {
          long long v22 = (void *)MEMORY[0x1D9452090]();
          uint64_t v23 = HMFGetOSLogHandle();
          if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
LABEL_23:

            uint64_t v29 = *(void *)(a1 + 56);
            id v30 = [*(id *)(a1 + 48) uuid];
            [WeakRetained _removePendingDataSyncAcksForUser:v29 forHome:v30];

            id v31 = *(void **)(a1 + 48);
            uint64_t v19 = [*(id *)(a1 + 40) username];
            [v31 removeUserWithUserID:v19];
            goto LABEL_24;
          }
          id v24 = HMFGetLogIdentifier();
          uint64_t v25 = *(void *)(a1 + 56);
          id v26 = [*(id *)(a1 + 48) name];
          int v32 = 138543874;
          uint64_t v33 = v24;
          __int16 v34 = 2112;
          uint64_t v35 = v25;
          __int16 v36 = 2112;
          long long v37 = v26;
          _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_ERROR, "%{public}@Received HMErrorCodeInsufficientPrivileges from user %@ for data sync corresponding to home %@.  Removing User", (uint8_t *)&v32, 0x20u);
          goto LABEL_21;
        }
      }
      else
      {
      }
    }
    else
    {
      if (objc_msgSend(v6, "hmf_BOOLForKey:", @"kDataSyncResponseAckKey"))
      {
        uint64_t v10 = (void *)MEMORY[0x1D9452090]();
        id v11 = *(id *)(a1 + 32);
        uint64_t v12 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          id v13 = HMFGetLogIdentifier();
          uint64_t v17 = *(void *)(a1 + 40);
          __int16 v15 = [*(id *)(a1 + 48) name];
          int v32 = 138543874;
          uint64_t v33 = v13;
          __int16 v34 = 2112;
          uint64_t v35 = v17;
          __int16 v36 = 2112;
          long long v37 = v15;
          id v16 = "%{public}@Pushed home change secure message received ACK from user %@ for data sync corresponding to home %@";
          goto LABEL_10;
        }
LABEL_11:

        uint64_t v18 = *(void *)(a1 + 56);
        uint64_t v19 = [*(id *)(a1 + 48) uuid];
        [WeakRetained _removePendingDataSyncAcksForUser:v18 forHome:v19];
LABEL_24:

        goto LABEL_25;
      }
      if (objc_msgSend(v6, "hmf_BOOLForKey:", @"kDataSyncResponseNAckKey"))
      {
        long long v22 = (void *)MEMORY[0x1D9452090]();
        uint64_t v23 = *(id *)(a1 + 32);
        id v24 = HMFGetOSLogHandle();
        if (!os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
LABEL_22:

          goto LABEL_23;
        }
        id v26 = HMFGetLogIdentifier();
        uint64_t v27 = *(void *)(a1 + 40);
        uint64_t v28 = [*(id *)(a1 + 48) name];
        int v32 = 138543874;
        uint64_t v33 = v26;
        __int16 v34 = 2112;
        uint64_t v35 = v27;
        __int16 v36 = 2112;
        long long v37 = v28;
        _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_INFO, "%{public}@Pushed home change secure message received NACK from user %@ for data sync corresponding to home %@", (uint8_t *)&v32, 0x20u);

LABEL_21:
        goto LABEL_22;
      }
    }
  }
LABEL_25:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

- (id)_compressHomeData:(id)a3
{
  v9[1] = *MEMORY[0x1E4F143B8];
  id v3 = [a3 objectForKey:@"kHomeDataKey"];
  id v4 = v3;
  if (v3)
  {
    int v8 = @"kHomeDataKey";
    id v5 = objc_msgSend(v3, "hmd_compressedData");
    v9[0] = v5;
    id v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:&v8 count:1];
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

- (id)generatePayloadFromHome:(id)a3 forAdmin:(BOOL)a4 user:(id)a5 supportedFeatures:(id)a6
{
  BOOL v8 = a4;
  void v43[4] = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v11 = a5;
  id v12 = a6;
  id v13 = [(HMDHomeManager *)self primaryHomeUUID];

  unint64_t v14 = 0x1E4F1C000uLL;
  if (v13)
  {
    v42[0] = @"kAccessoriesDataBlobKey";
    __int16 v15 = [v10 hapAccessoriesForLegacyDataBlobEncoding];
    v43[0] = v15;
    v42[1] = @"kPrimaryHomeUUIDKey";
    id v16 = [(HMDHomeManager *)self primaryHomeUUID];
    uint64_t v17 = [v16 UUIDString];
    v43[1] = v17;
    v43[2] = v10;
    v42[2] = @"kHomeDataBlobKey";
    v42[3] = @"kHomeDataVersionKey";
    v43[3] = &unk_1F2DC9C70;
    uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v43 forKeys:v42 count:4];
  }
  else
  {
    v40[0] = @"kAccessoriesDataBlobKey";
    __int16 v15 = [v10 hapAccessoriesForLegacyDataBlobEncoding];
    v41[0] = v15;
    v41[1] = v10;
    v40[1] = @"kHomeDataBlobKey";
    id v40[2] = @"kHomeDataVersionKey";
    v41[2] = &unk_1F2DC9C70;
    uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v41 forKeys:v40 count:3];
  }

  uint64_t v19 = (void *)MEMORY[0x1D9452090]();
  long long v20 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    uint64_t v21 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    long long v37 = v21;
    __int16 v38 = 2112;
    id v39 = v11;
    _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@generatePayloadFromHome: %@", buf, 0x16u);
  }
  if (v8)
  {
    id v22 = v18;
    id v23 = v11;
    id v24 = v12;
    context = (void *)MEMORY[0x1D9452090]();
    uint64_t v25 = (void *)[objc_alloc(MEMORY[0x1E4F654E0]) initWithName:@"com.apple.homed.hmdutil.encode-remote-admin."];
    id v26 = v10;
    id v27 = v11;
    id v28 = v12;
    id v29 = [[HMDRemoteKeyedArchiver alloc] initForWritingWithRemoteDeviceIsOnSameAccount:0 remoteGateway:0 remoteUserIsAdministrator:1 user:v23 supportedFeatures:v24];
    [v29 encodeObject:v22 forKey:*MEMORY[0x1E4F284E8]];
    [v29 finishEncoding];
    id v30 = [v29 encodedData];

    id v12 = v28;
    id v11 = v27;
    id v10 = v26;

    unint64_t v14 = 0x1E4F1C000;
  }
  else
  {
    id v30 = encodeRootObjectForRemote(v18, v11, v12);
  }
  __int16 v34 = @"kHomeDataKey";
  uint64_t v35 = v30;
  id v31 = [*(id *)(v14 + 2536) dictionaryWithObjects:&v35 forKeys:&v34 count:1];

  return v31;
}

- (id)generateDataForSharedHomeModel:(id)a3
{
  v9[3] = *MEMORY[0x1E4F143B8];
  v8[0] = @"kAccessoriesDataBlobKey";
  id v3 = a3;
  id v4 = [v3 hapAccessoriesForLegacyDataBlobEncoding];
  v9[0] = v4;
  v9[1] = v3;
  v8[1] = @"kHomeDataBlobKey";
  v8[2] = @"kHomeDataVersionKey";
  void v9[2] = &unk_1F2DC9C70;
  id v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:v8 count:3];

  id v6 = encodeRootObjectForRemoteDeviceOnSameAccountMigrateToHH2(v5, 1, 0);

  return v6;
}

- (void)_pushChangesToWatch:(id)a3 payload:(id)a4 group:(id)a5 completionHandler:(id)a6
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  unint64_t v14 = [(HMDHomeManager *)self associatedWatchPeers];
  __int16 v15 = [v14 objectForKey:v10];
  id v16 = [v15 metadataConfig];
  [(HMDHomeManager *)self checkAndPushMetadataToUser:v10 destination:v10 userInfo:v16];

  uint64_t v17 = [(HMDHomeManager *)self uuid];
  uint64_t v18 = +[HMDMessageDispatcher destinationWithTarget:v17 userID:0 destination:v10 multicast:0];

  if (v18)
  {
    dispatch_group_enter(v12);
    uint64_t v19 = [MEMORY[0x1E4F654B0] messageWithName:@"kHomeDataSyncRequestKey" qualityOfService:17 destination:v18 payload:v11];
    [v19 setSecureRemote:1];
    [v19 setRemoteRestriction:4];
    objc_initWeak((id *)location, self);
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 3221225472;
    void v25[2] = __70__HMDHomeManager__pushChangesToWatch_payload_group_completionHandler___block_invoke;
    v25[3] = &unk_1E6A159F8;
    objc_copyWeak(&v28, (id *)location);
    id v26 = v12;
    id v27 = v13;
    [v19 setResponseHandler:v25];
    long long v20 = [(HMDHomeManager *)self messageDispatcher];
    [v20 sendMessage:v19 completionHandler:0];

    objc_destroyWeak(&v28);
    objc_destroyWeak((id *)location);
  }
  else
  {
    uint64_t v21 = (void *)MEMORY[0x1D9452090]();
    id v22 = self;
    id v23 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      id v24 = HMFGetLogIdentifier();
      *(_DWORD *)id location = 138543618;
      *(void *)&id location[4] = v24;
      __int16 v30 = 2112;
      id v31 = v10;
      _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot push changes to watch: could not create message destination for unique ID: %@", location, 0x16u);
    }
    (*((void (**)(id, void))v13 + 2))(v13, 0);
  }
}

void __70__HMDHomeManager__pushChangesToWatch_payload_group_completionHandler___block_invoke(id *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v6 = WeakRetained;
  if (WeakRetained)
  {
    id v7 = [WeakRetained workQueue];
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = __70__HMDHomeManager__pushChangesToWatch_payload_group_completionHandler___block_invoke_2;
    void v8[3] = &unk_1E6A18398;
    id v9 = v4;
    id v12 = a1[5];
    id v10 = v6;
    id v11 = a1[4];
    dispatch_async(v7, v8);
  }
  else
  {
    dispatch_group_leave((dispatch_group_t)a1[4]);
  }
}

void __70__HMDHomeManager__pushChangesToWatch_payload_group_completionHandler___block_invoke_2(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend(*(id *)(a1 + 32), "hmf_BOOLForKey:", @"kDataSyncResponseAckKey"))
  {
    id v2 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
  }
  else
  {
    if (!objc_msgSend(*(id *)(a1 + 32), "hmf_BOOLForKey:", @"kDataSyncResponseNAckKey"))
    {
      id v3 = (void *)MEMORY[0x1D9452090]();
      id v4 = *(id *)(a1 + 40);
      id v5 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        id v6 = HMFGetLogIdentifier();
        uint64_t v7 = *(void *)(a1 + 32);
        int v8 = 138543618;
        id v9 = v6;
        __int16 v10 = 2112;
        uint64_t v11 = v7;
        _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_ERROR, "%{public}@Failed to push changes to watch: received unexpected response from sync message: %@", (uint8_t *)&v8, 0x16u);
      }
    }
    id v2 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
  }
  v2();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

- (id)_prepareDataForDevicesOnSameAccountForHome:(id)a3 remoteGateway:(BOOL)a4 isAtLeastV4:(BOOL)a5 migrateToHH2:(BOOL)a6
{
  BOOL v6 = a6;
  BOOL v7 = a5;
  BOOL v8 = a4;
  v26[1] = *MEMORY[0x1E4F143B8];
  __int16 v10 = (void *)MEMORY[0x1E4F1CA60];
  id v11 = a3;
  uint64_t v12 = [v10 dictionary];
  id v13 = [v11 hapAccessoriesForLegacyDataBlobEncoding];
  [v12 setObject:v13 forKeyedSubscript:@"kAccessoriesDataBlobKey"];

  [v12 setObject:v11 forKeyedSubscript:@"kHomeDataBlobKey"];
  [v12 setObject:&unk_1F2DC9C70 forKeyedSubscript:@"kHomeDataVersionKey"];
  unint64_t v14 = [(HMDHomeManager *)self primaryHomeUUID];
  __int16 v15 = [v14 UUIDString];
  [v12 setObject:v15 forKeyedSubscript:@"kPrimaryHomeUUIDKey"];

  id v16 = (void *)[v12 copy];
  uint64_t v17 = v16;
  if (v8)
  {
    id v18 = v16;
    uint64_t v19 = (void *)MEMORY[0x1D9452090]();
    long long v20 = (void *)[objc_alloc(MEMORY[0x1E4F654E0]) initWithName:@"com.apple.homed.hmdutil.encode-remote-gateway."];
    id v21 = [[HMDRemoteKeyedArchiver alloc] initForWritingWithRemoteDeviceIsOnSameAccount:1 remoteGateway:1 remoteUserIsAdministrator:0 user:0 supportedFeatures:0];
    [v21 encodeObject:v18 forKey:*MEMORY[0x1E4F284E8]];
    [v21 finishEncoding];
    id v22 = [v21 encodedData];
  }
  else
  {
    id v22 = encodeRootObjectForRemoteDeviceOnSameAccountMigrateToHH2(v16, v7, v6);
  }

  uint64_t v25 = @"kHomeDataKey";
  v26[0] = v22;
  id v23 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:&v25 count:1];

  return v23;
}

- (id)_prepareDataForDevicesOnSameAccountForHome:(id)a3 remoteGateway:(BOOL)a4 isAtLeastV4:(BOOL)a5
{
  return [(HMDHomeManager *)self _prepareDataForDevicesOnSameAccountForHome:a3 remoteGateway:a4 isAtLeastV4:a5 migrateToHH2:0];
}

- (void)_pushChangesForHome:(id)a3 toRemoteDevicesOnSameAccount:(id)a4 addedUser:(id)a5
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  id v48 = a3;
  id v43 = a4;
  id v47 = a5;
  if (!isWatch() && [v43 count])
  {
    context = (void *)MEMORY[0x1D9452090]();
    v72[0] = 0;
    v72[1] = v72;
    v72[2] = 0x3032000000;
    v72[3] = __Block_byref_object_copy__170059;
    v72[4] = __Block_byref_object_dispose__170060;
    id v73 = (id)[objc_alloc(MEMORY[0x1E4F654E0]) initWithName:@"com.apple.homed.push-home-to-gateways"];
    uint64_t v7 = +[HMDHAPMetadata getSharedInstance];
    if (v7)
    {
      [(HMDHomeManager *)self _prepareDataForDevicesOnSameAccountForHome:v48 remoteGateway:1 isAtLeastV4:0];
      v40 = __int16 v42 = (void *)v7;
      BOOL v8 = [v40 objectForKeyedSubscript:@"kHomeDataKey"];
      id v39 = objc_msgSend(v8, "hmd_compressedData");

      uint64_t v46 = [MEMORY[0x1E4F65480] internalMessageWithName:@"kHomeDataSyncRequestKey" messagePayload:v40];
      if (v39)
      {
        id v80 = @"kHomeDataKey";
        id v81 = v39;
        uint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v81 forKeys:&v80 count:1];
        id v45 = [MEMORY[0x1E4F65480] internalMessageWithName:@"kHomeDataSyncRequestKey" messagePayload:v9];
        __int16 v38 = (void *)v9;
      }
      else
      {
        id v45 = v46;
        __int16 v38 = 0;
      }
      objc_initWeak(&location, self);
      group = dispatch_group_create();
      id v78 = @"kRequestedCapabilitiesKey";
      v76[0] = @"kMetadataInfoVersionKey";
      unint64_t v14 = [v42 version];
      v77[0] = v14;
      v76[1] = @"kMetadataInfoSchemaVersionKey";
      __int16 v15 = [v42 schemaVersion];
      v77[1] = v15;
      v76[2] = @"kMetadataInfoCompletenessKey";
      id v16 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v42, "incomplete") ^ 1);
      id v77[2] = v16;
      v77[3] = &unk_1F2DC7000;
      v76[3] = @"kHomedSupportedFeaturesKey";
      void v76[4] = @"kHomedVersionKey";
      id v17 = (id)homedVersion;
      v77[4] = v17;
      id v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v77 forKeys:v76 count:5];
      int8x16_t v79 = v18;
      __int16 v44 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v79 forKeys:&v78 count:1];

      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      id obj = v43;
      uint64_t v52 = [obj countByEnumeratingWithState:&v67 objects:v75 count:16];
      if (v52)
      {
        uint64_t v51 = *(void *)v68;
        do
        {
          for (uint64_t i = 0; i != v52; ++i)
          {
            if (*(void *)v68 != v51) {
              objc_enumerationMutation(obj);
            }
            uint64_t v19 = *(void *)(*((void *)&v67 + 1) + 8 * i);
            long long v20 = [(HMDHomeManager *)self appleAccountManager];
            id v21 = [v20 account];
            id v22 = [v21 devices];

            long long v65 = 0u;
            long long v66 = 0u;
            long long v63 = 0u;
            long long v64 = 0u;
            id v23 = v22;
            uint64_t v24 = [v23 countByEnumeratingWithState:&v63 objects:v74 count:16];
            if (v24)
            {
              uint64_t v25 = *(void *)v64;
              while (2)
              {
                for (uint64_t j = 0; j != v24; ++j)
                {
                  if (*(void *)v64 != v25) {
                    objc_enumerationMutation(v23);
                  }
                  id v27 = *(void **)(*((void *)&v63 + 1) + 8 * j);
                  id v28 = [v27 remoteDestinationString];
                  if ([v28 isEqualToString:v19])
                  {
                    id v29 = [v27 version];
                    id v30 = (id)minimumSupportedResidentHomeKitVersion;
                    char v31 = [v29 isAtLeastVersion:v30];

                    if (v31)
                    {

                      uint64_t v33 = (void *)MEMORY[0x1D9452090]();
                      HMFGetOSLogHandle();
                      __int16 v34 = (id)objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
                      {
                        __int16 v36 = HMFGetLogIdentifier();
                        *(_DWORD *)long long buf = 138543362;
                        id v83 = v36;
                        _os_log_impl(&dword_1D49D5000, v34, OS_LOG_TYPE_INFO, "%{public}@Resident syncs through cloud, don't send data through IDS.", buf, 0xCu);
                      }
                      goto LABEL_30;
                    }
                  }
                  else
                  {
                  }
                }
                uint64_t v24 = [v23 countByEnumeratingWithState:&v63 objects:v74 count:16];
                if (v24) {
                  continue;
                }
                break;
              }
            }

            dispatch_group_enter(group);
            uint64_t v32 = [(HMDHomeManager *)self workQueue];
            v56[0] = MEMORY[0x1E4F143A8];
            v56[1] = 3221225472;
            v56[2] = __77__HMDHomeManager__pushChangesForHome_toRemoteDevicesOnSameAccount_addedUser___block_invoke;
            v56[3] = &unk_1E6A159A8;
            void v56[4] = self;
            void v56[5] = v19;
            id v57 = v48;
            id v58 = v46;
            id v59 = v45;
            id v60 = v47;
            id v61 = group;
            objc_copyWeak(&v62, &location);
            [(HMDHomeManager *)self electDeviceForUser:v19 destination:v19 deviceCapabilities:v44 queue:v32 completionHandler:v56];

            objc_destroyWeak(&v62);
LABEL_30:
          }
          uint64_t v52 = [obj countByEnumeratingWithState:&v67 objects:v75 count:16];
        }
        while (v52);
      }

      long long v37 = [(HMDHomeManager *)self workQueue];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __77__HMDHomeManager__pushChangesForHome_toRemoteDevicesOnSameAccount_addedUser___block_invoke_695;
      block[3] = &unk_1E6A159D0;
      void block[4] = v72;
      dispatch_group_notify(group, v37, block);

      objc_destroyWeak(&location);
      __int16 v10 = v42;
    }
    else
    {
      __int16 v10 = 0;
      id v11 = (void *)MEMORY[0x1D9452090]();
      HMFGetOSLogHandle();
      uint64_t v12 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        id v13 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        id v83 = v13;
        _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_ERROR, "%{public}@No metadata to push changes for Home", buf, 0xCu);
      }
    }

    _Block_object_dispose(v72, 8);
  }
}

void __77__HMDHomeManager__pushChangesForHome_toRemoteDevicesOnSameAccount_addedUser___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v53 = v7;
  id v54 = v8;
  if (v7)
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 80));
  }
  else
  {
    __int16 v10 = *(void **)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = [v8 destination];
    [v10 checkAndPushMetadataToUser:v11 destination:v12 userInfo:v9];

    uint64_t v52 = [v9 objectForKeyedSubscript:@"kHomeConfigurationVersionKey"];
    id v13 = (void *)MEMORY[0x1D9452090]();
    unint64_t v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      __int16 v15 = HMFGetLogIdentifier();
      uint64_t v16 = [*(id *)(a1 + 48) configurationVersion];
      *(_DWORD *)long long buf = 138543874;
      long long v67 = v15;
      __int16 v68 = 2112;
      uint64_t v69 = (uint64_t)v52;
      __int16 v70 = 2048;
      uint64_t v71 = v16;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Remote's home config = %@, Self = %ld", buf, 0x20u);
    }
    if (v52 && (uint64_t v17 = [v52 integerValue], v17 == objc_msgSend(*(id *)(a1 + 48), "configurationVersion")))
    {
      id v18 = (void *)MEMORY[0x1D9452090]();
      uint64_t v19 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        long long v20 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        long long v67 = v20;
        _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_INFO, "%{public}@Skip home push as the local and remote versions are the same", buf, 0xCu);
      }
      dispatch_group_leave(*(dispatch_group_t *)(a1 + 80));
    }
    else
    {
      id v21 = *(void **)(a1 + 32);
      uint64_t v22 = *(void *)(a1 + 40);
      id v23 = [*(id *)(a1 + 48) uuid];
      [v21 _addPendingDataSyncAcksForUser:v22 forHome:v23];

      id v50 = *(id *)(a1 + 56);
      uint64_t v24 = objc_msgSend(v9, "hmf_arrayForKey:", @"kHomedSupportedFeaturesKey");
      uint64_t v51 = v24;
      if (v24 && [v24 containsObject:&unk_1F2DC9C40])
      {
        uint64_t v25 = (void *)MEMORY[0x1D9452090]();
        id v26 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          id v27 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543362;
          long long v67 = v27;
          _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_INFO, "%{public}@Sending compressed data to remote because homed supports compression", buf, 0xCu);
        }
        id v28 = *(id *)(a1 + 64);

        id v50 = v28;
      }
      id v29 = (void *)MEMORY[0x1D9452090]();
      id v30 = *(id *)(a1 + 32);
      char v31 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        uint64_t v32 = HMFGetLogIdentifier();
        uint64_t v33 = [v50 dataForKey:@"kHomeDataKey"];
        uint64_t v34 = [v33 length];
        *(_DWORD *)long long buf = 138543874;
        long long v67 = v32;
        __int16 v68 = 2048;
        uint64_t v69 = v34;
        __int16 v70 = 2112;
        uint64_t v71 = (uint64_t)v8;
        _os_log_impl(&dword_1D49D5000, v31, OS_LOG_TYPE_INFO, "%{public}@Pushing home changes (%ld bytes) to remote device with handle: %@", buf, 0x20u);
      }
      if (v51 && [v51 containsObject:&unk_1F2DC9C58])
      {
        objc_initWeak((id *)buf, *(id *)(a1 + 32));
        uint64_t v35 = *(void **)(a1 + 32);
        __int16 v36 = [v50 dataForKey:@"kHomeDataKey"];
        long long v37 = [*(id *)(a1 + 48) uuid];
        __int16 v38 = [v37 UUIDString];
        id v39 = [v50 name];
        uint64_t v40 = *(void *)(a1 + 40);
        uint64_t v41 = [v54 destination];
        v61[0] = MEMORY[0x1E4F143A8];
        v61[1] = 3221225472;
        v61[2] = __77__HMDHomeManager__pushChangesForHome_toRemoteDevicesOnSameAccount_addedUser___block_invoke_692;
        void v61[3] = &unk_1E6A15958;
        objc_copyWeak(&v65, (id *)buf);
        __int16 v42 = *(void **)(a1 + 48);
        v61[4] = *(void *)(a1 + 40);
        id v62 = v42;
        id v63 = *(id *)(a1 + 72);
        id v64 = *(id *)(a1 + 80);
        [v35 sendFragmentedMessageForData:v36 objectUUID:v38 withMessageName:v39 toUser:v40 destination:v41 completionHandler:v61];

        objc_destroyWeak(&v65);
        objc_destroyWeak((id *)buf);
      }
      else
      {
        id v43 = objc_msgSend(*(id *)(a1 + 32), "messageDispatcher", v50);
        __int16 v44 = [*(id *)(a1 + 32) uuid];
        uint64_t v45 = *(void *)(a1 + 40);
        uint64_t v46 = [v54 destination];
        id v47 = [*(id *)(a1 + 32) workQueue];
        v55[0] = MEMORY[0x1E4F143A8];
        v55[1] = 3221225472;
        v55[2] = __77__HMDHomeManager__pushChangesForHome_toRemoteDevicesOnSameAccount_addedUser___block_invoke_693;
        v55[3] = &unk_1E6A15980;
        objc_copyWeak(&v60, (id *)(a1 + 88));
        v55[4] = *(void *)(a1 + 40);
        id v56 = *(id *)(a1 + 48);
        id v48 = *(id *)(a1 + 72);
        uint64_t v49 = *(void *)(a1 + 32);
        id v57 = v48;
        uint64_t v58 = v49;
        id v59 = *(id *)(a1 + 80);
        [v43 sendSecureMessage:v50 target:v44 userID:v45 destination:v46 responseQueue:v47 responseHandler:v55];

        objc_destroyWeak(&v60);
      }
    }
  }
}

void __77__HMDHomeManager__pushChangesForHome_toRemoteDevicesOnSameAccount_addedUser___block_invoke_695(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    id v4 = HMFGetLogIdentifier();
    int v7 = 138543362;
    id v8 = v4;
    _os_log_impl(&dword_1D49D5000, v3, OS_LOG_TYPE_DEBUG, "%{public}@Finished pushing home data changes to gateways", (uint8_t *)&v7, 0xCu);
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  BOOL v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = 0;
}

void __77__HMDHomeManager__pushChangesForHome_toRemoteDevicesOnSameAccount_addedUser___block_invoke_692(uint64_t a1, void *a2, void *a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    if (v5)
    {
      id v8 = [v5 domain];
      if ([v8 isEqualToString:*MEMORY[0x1E4F28760]])
      {
        uint64_t v9 = [v5 code];

        if (v9 == -6727)
        {
          __int16 v10 = (void *)MEMORY[0x1D9452090]();
          uint64_t v11 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            uint64_t v12 = HMFGetLogIdentifier();
            id v13 = *(void **)(a1 + 32);
            unint64_t v14 = [*(id *)(a1 + 40) name];
            int v46 = 138543874;
            id v47 = v12;
            __int16 v48 = 2112;
            uint64_t v49 = v13;
            __int16 v50 = 2112;
            uint64_t v51 = v14;
            __int16 v15 = "%{public}@Received kNotFoundErr from user %@ for data sync corresponding to home %@";
LABEL_29:
            _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, v15, (uint8_t *)&v46, 0x20u);

            goto LABEL_30;
          }
          goto LABEL_30;
        }
      }
      else
      {
      }
      id v30 = [v5 domain];
      if ([v30 isEqualToString:*MEMORY[0x1E4F2D140]])
      {
        uint64_t v31 = [v5 code];

        if (v31 == 17)
        {
          uint64_t v32 = (void *)MEMORY[0x1D9452090]();
          uint64_t v33 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          {
            uint64_t v34 = HMFGetLogIdentifier();
            uint64_t v35 = *(void **)(a1 + 32);
            __int16 v36 = [*(id *)(a1 + 40) name];
            int v46 = 138543874;
            id v47 = v34;
            __int16 v48 = 2112;
            uint64_t v49 = v35;
            __int16 v50 = 2112;
            uint64_t v51 = v36;
            long long v37 = "%{public}@Received HMErrorCodeInsufficientPrivileges from user %@ for data sync corresponding to home "
                  "%@.  Removing User";
            __int16 v38 = v33;
            os_log_type_t v39 = OS_LOG_TYPE_ERROR;
LABEL_24:
            _os_log_impl(&dword_1D49D5000, v38, v39, v37, (uint8_t *)&v46, 0x20u);

            goto LABEL_25;
          }
          goto LABEL_25;
        }
      }
      else
      {
      }
    }
    else if (objc_msgSend(v6, "hmf_BOOLForKey:", @"kDataSyncResponseAckKey"))
    {
      uint64_t v16 = (void *)MEMORY[0x1D9452090]();
      uint64_t v17 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        id v18 = HMFGetLogIdentifier();
        uint64_t v19 = *(void **)(a1 + 32);
        long long v20 = [*(id *)(a1 + 40) name];
        int v46 = 138543874;
        id v47 = v18;
        __int16 v48 = 2112;
        uint64_t v49 = v19;
        __int16 v50 = 2112;
        uint64_t v51 = v20;
        _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Received ACK from user %@ for data corresponding to home %@", (uint8_t *)&v46, 0x20u);
      }
      uint64_t v21 = *(void *)(a1 + 32);
      uint64_t v22 = [*(id *)(a1 + 40) uuid];
      [WeakRetained _removePendingDataSyncAcksForUser:v21 forHome:v22];

      id v23 = *(void **)(a1 + 48);
      if (v23)
      {
        uint64_t v24 = [v23 userID];
        int v25 = [v24 isEqualToString:*(void *)(a1 + 32)];

        if (v25)
        {
          id v26 = (void *)MEMORY[0x1D9452090]();
          id v27 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
          {
            id v28 = HMFGetLogIdentifier();
            id v29 = [*(id *)(a1 + 40) name];
            int v46 = 138543618;
            id v47 = v28;
            __int16 v48 = 2112;
            uint64_t v49 = v29;
            _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_INFO, "%{public}@We just added a resident user to home %@, checking if we need to setup remote session", (uint8_t *)&v46, 0x16u);
          }
          [WeakRetained _checkForRemotePeersAndRegisterForRemoteNotifications:1];
        }
      }
    }
    else
    {
      if (objc_msgSend(v6, "hmf_BOOLForKey:", @"kDataSyncResponseNAckKey"))
      {
        uint64_t v32 = (void *)MEMORY[0x1D9452090]();
        uint64_t v33 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          uint64_t v34 = HMFGetLogIdentifier();
          uint64_t v40 = *(void **)(a1 + 32);
          __int16 v36 = [*(id *)(a1 + 40) name];
          int v46 = 138543874;
          id v47 = v34;
          __int16 v48 = 2112;
          uint64_t v49 = v40;
          __int16 v50 = 2112;
          uint64_t v51 = v36;
          long long v37 = "%{public}@Received NACK from user %@ for data corresponding to home %@";
          __int16 v38 = v33;
          os_log_type_t v39 = OS_LOG_TYPE_INFO;
          goto LABEL_24;
        }
LABEL_25:

        uint64_t v41 = *(void *)(a1 + 32);
        __int16 v42 = [*(id *)(a1 + 40) uuid];
        [WeakRetained _removePendingDataSyncAcksForUser:v41 forHome:v42];

        [*(id *)(a1 + 40) removeUserWithUserID:*(void *)(a1 + 32)];
        goto LABEL_31;
      }
      if (objc_msgSend(v6, "hmf_BOOLForKey:", @"kDataSyncResponseCancelKey"))
      {
        __int16 v10 = (void *)MEMORY[0x1D9452090]();
        uint64_t v11 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          uint64_t v12 = HMFGetLogIdentifier();
          id v43 = *(void **)(a1 + 32);
          unint64_t v14 = [*(id *)(a1 + 40) name];
          int v46 = 138543874;
          id v47 = v12;
          __int16 v48 = 2112;
          uint64_t v49 = v43;
          __int16 v50 = 2112;
          uint64_t v51 = v14;
          __int16 v15 = "%{public}@Received Cancel from user %@ for data corresponding to home %@";
          goto LABEL_29;
        }
LABEL_30:

        uint64_t v44 = *(void *)(a1 + 32);
        uint64_t v45 = [*(id *)(a1 + 40) uuid];
        [WeakRetained _removePendingDataSyncAcksForUser:v44 forHome:v45];
      }
    }
  }
LABEL_31:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void __77__HMDHomeManager__pushChangesForHome_toRemoteDevicesOnSameAccount_addedUser___block_invoke_693(uint64_t a1, void *a2, void *a3)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (!WeakRetained) {
    goto LABEL_28;
  }
  if (v5)
  {
    id v8 = [v5 domain];
    if ([v8 isEqualToString:*MEMORY[0x1E4F28760]])
    {
      uint64_t v9 = [v5 code];

      if (v9 == -6727)
      {
        __int16 v10 = (void *)MEMORY[0x1D9452090]();
        uint64_t v11 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          uint64_t v12 = HMFGetLogIdentifier();
          id v13 = *(void **)(a1 + 32);
          unint64_t v14 = [*(id *)(a1 + 40) name];
          int v48 = 138543874;
          uint64_t v49 = v12;
          __int16 v50 = 2112;
          uint64_t v51 = v13;
          __int16 v52 = 2112;
          uint64_t v53 = v14;
          _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Received kNotFoundErr from user %@ for data sync corresponding to home %@", (uint8_t *)&v48, 0x20u);
        }
        uint64_t v15 = *(void *)(a1 + 32);
        uint64_t v16 = [*(id *)(a1 + 40) uuid];
        [WeakRetained _removePendingDataSyncAcksForUser:v15 forHome:v16];

        goto LABEL_28;
      }
    }
    else
    {
    }
    uint64_t v31 = [v5 domain];
    if (![v31 isEqualToString:*MEMORY[0x1E4F2D140]])
    {

      goto LABEL_28;
    }
    uint64_t v32 = [v5 code];

    if (v32 == 17)
    {
      uint64_t v33 = (void *)MEMORY[0x1D9452090]();
      uint64_t v34 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        uint64_t v35 = HMFGetLogIdentifier();
        __int16 v36 = *(void **)(a1 + 32);
        long long v37 = [*(id *)(a1 + 40) name];
        int v48 = 138543874;
        uint64_t v49 = v35;
        __int16 v50 = 2112;
        uint64_t v51 = v36;
        __int16 v52 = 2112;
        uint64_t v53 = v37;
        _os_log_impl(&dword_1D49D5000, v34, OS_LOG_TYPE_ERROR, "%{public}@Received HMErrorCodeInsufficientPrivileges from user %@ for data sync corresponding to home %@.  Removing User", (uint8_t *)&v48, 0x20u);
      }
      __int16 v38 = *(void **)(a1 + 56);
      uint64_t v39 = *(void *)(a1 + 32);
      uint64_t v40 = [*(id *)(a1 + 40) uuid];
      [v38 _removePendingDataSyncAcksForUser:v39 forHome:v40];

      goto LABEL_27;
    }
  }
  else
  {
    if (!objc_msgSend(v6, "hmf_BOOLForKey:", @"kDataSyncResponseAckKey"))
    {
      if (!objc_msgSend(v6, "hmf_BOOLForKey:", @"kDataSyncResponseNAckKey")) {
        goto LABEL_28;
      }
      uint64_t v41 = (void *)MEMORY[0x1D9452090]();
      __int16 v42 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        id v43 = HMFGetLogIdentifier();
        uint64_t v44 = *(void **)(a1 + 32);
        uint64_t v45 = [*(id *)(a1 + 40) name];
        int v48 = 138543874;
        uint64_t v49 = v43;
        __int16 v50 = 2112;
        uint64_t v51 = v44;
        __int16 v52 = 2112;
        uint64_t v53 = v45;
        _os_log_impl(&dword_1D49D5000, v42, OS_LOG_TYPE_INFO, "%{public}@Received NACK from user %@ for data corresponding to home %@", (uint8_t *)&v48, 0x20u);
      }
      uint64_t v46 = *(void *)(a1 + 32);
      id v47 = [*(id *)(a1 + 40) uuid];
      [WeakRetained _removePendingDataSyncAcksForUser:v46 forHome:v47];

LABEL_27:
      [*(id *)(a1 + 40) removeUserWithUserID:*(void *)(a1 + 32)];
      goto LABEL_28;
    }
    uint64_t v17 = (void *)MEMORY[0x1D9452090]();
    id v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = HMFGetLogIdentifier();
      long long v20 = *(void **)(a1 + 32);
      uint64_t v21 = [*(id *)(a1 + 40) name];
      int v48 = 138543874;
      uint64_t v49 = v19;
      __int16 v50 = 2112;
      uint64_t v51 = v20;
      __int16 v52 = 2112;
      uint64_t v53 = v21;
      _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@Received ACK from user %@ for data corresponding to home %@", (uint8_t *)&v48, 0x20u);
    }
    uint64_t v22 = *(void *)(a1 + 32);
    id v23 = [*(id *)(a1 + 40) uuid];
    [WeakRetained _removePendingDataSyncAcksForUser:v22 forHome:v23];

    uint64_t v24 = *(void **)(a1 + 48);
    if (v24)
    {
      int v25 = [v24 userID];
      int v26 = [v25 isEqualToString:*(void *)(a1 + 32)];

      if (v26)
      {
        id v27 = (void *)MEMORY[0x1D9452090]();
        id v28 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          id v29 = HMFGetLogIdentifier();
          id v30 = [*(id *)(a1 + 40) name];
          int v48 = 138543618;
          uint64_t v49 = v29;
          __int16 v50 = 2112;
          uint64_t v51 = v30;
          _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_INFO, "%{public}@We just added a resident user to home %@, checking if we need to setup remote session", (uint8_t *)&v48, 0x16u);
        }
        [WeakRetained _checkForRemotePeersAndRegisterForRemoteNotifications:1];
      }
    }
  }
LABEL_28:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

- (unsigned)_nextTransactionIdentifier
{
  unsigned __int16 nextRequestTransactionIdentifier = self->_nextRequestTransactionIdentifier;
  self->_unsigned __int16 nextRequestTransactionIdentifier = nextRequestTransactionIdentifier + 1;
  return nextRequestTransactionIdentifier;
}

- (void)_pushUserRemovedForHome:(id)a3
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 removedUsers];
  id v6 = (void *)[v5 copy];

  int v7 = (void *)MEMORY[0x1D9452090]();
  id v8 = self;
  uint64_t v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    __int16 v10 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    uint64_t v40 = v10;
    __int16 v41 = 2112;
    __int16 v42 = v6;
    _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Attempting to resend remove message to removed users: %@", buf, 0x16u);
  }
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id obj = v6;
  uint64_t v11 = [obj countByEnumeratingWithState:&v34 objects:v38 count:16];
  if (v11)
  {
    uint64_t v12 = *(void *)v35;
    id v29 = v32;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v35 != v12) {
          objc_enumerationMutation(obj);
        }
        unint64_t v14 = *(void **)(*((void *)&v34 + 1) + 8 * i);
        if (objc_msgSend(v14, "isExpired", v29))
        {
          uint64_t v15 = (void *)MEMORY[0x1D9452090]();
          uint64_t v16 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            uint64_t v17 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            uint64_t v40 = v17;
            __int16 v41 = 2112;
            __int16 v42 = v14;
            _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, "%{public}@Removed user has expired: %@", buf, 0x16u);
          }
          id v18 = [v4 removedUsers];
          [v18 removeObject:v14];
        }
        else if ([v14 isRemovalInProgress])
        {
          uint64_t v19 = (void *)MEMORY[0x1D9452090]();
          long long v20 = v8;
          uint64_t v21 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            uint64_t v22 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            uint64_t v40 = v22;
            __int16 v41 = 2112;
            __int16 v42 = v14;
            _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@Skipping resending message to user whose removal is already in progress: %@", buf, 0x16u);
          }
        }
        else
        {
          id v23 = (void *)MEMORY[0x1D9452090]([v14 setRemovalInProgress:1]);
          uint64_t v24 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            int v25 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            uint64_t v40 = v25;
            __int16 v41 = 2112;
            __int16 v42 = v14;
            _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_INFO, "%{public}@Resending message to removed user: %@", buf, 0x16u);
          }
          objc_initWeak((id *)buf, v4);
          int v26 = [v14 user];
          id v27 = [v14 user];
          id v28 = [v27 pairingUsername];
          v31[0] = MEMORY[0x1E4F143A8];
          v31[1] = 3221225472;
          v32[0] = __42__HMDHomeManager__pushUserRemovedForHome___block_invoke;
          v32[1] = &unk_1E6A19048;
          void v32[2] = v14;
          objc_copyWeak(&v33, (id *)buf);
          void v32[3] = v8;
          [(HMDHomeManager *)v8 sendUserRemoved:v26 fromHome:v4 pairingUsername:v28 pushToCloud:0 completionHandler:v31];

          objc_destroyWeak(&v33);
          objc_destroyWeak((id *)buf);
        }
      }
      uint64_t v11 = [obj countByEnumeratingWithState:&v34 objects:v38 count:16];
    }
    while (v11);
  }
}

void __42__HMDHomeManager__pushUserRemovedForHome___block_invoke(id *a1, void *a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  [a1[4] setRemovalInProgress:0];
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (!WeakRetained)
  {
    id v18 = (void *)MEMORY[0x1D9452090]();
    id v19 = a1[5];
    long long v20 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = HMFGetLogIdentifier();
      int v25 = 138543362;
      int v26 = v21;
      uint64_t v22 = "%{public}@Lost reference to home during removed user removal message";
      id v23 = v20;
      uint32_t v24 = 12;
LABEL_15:
      _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_ERROR, v22, (uint8_t *)&v25, v24);
    }
LABEL_16:

    goto LABEL_17;
  }
  if (v5 && [v5 code] != 2)
  {
    id v18 = (void *)MEMORY[0x1D9452090]();
    id v19 = a1[5];
    long long v20 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = HMFGetLogIdentifier();
      int v25 = 138543618;
      int v26 = v21;
      __int16 v27 = 2112;
      id v28 = v5;
      uint64_t v22 = "%{public}@Unable to remove the removed user: %@";
      id v23 = v20;
      uint32_t v24 = 22;
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  if ([v5 code] == 2)
  {
    id v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = a1[5];
    __int16 v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      int v25 = 138543618;
      int v26 = v11;
      __int16 v27 = 2112;
      id v28 = v5;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Treating user removed message error as success: %@", (uint8_t *)&v25, 0x16u);
    }
  }
  uint64_t v12 = (void *)MEMORY[0x1D9452090]();
  id v13 = a1[5];
  unint64_t v14 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    uint64_t v15 = HMFGetLogIdentifier();
    id v16 = a1[4];
    int v25 = 138543618;
    int v26 = v15;
    __int16 v27 = 2112;
    id v28 = v16;
    _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Successfully removed the removed user: %@", (uint8_t *)&v25, 0x16u);
  }
  uint64_t v17 = [WeakRetained removedUsers];
  [v17 removeObject:a1[4]];

LABEL_17:
}

- (void)_pushChangesToUsers:(id)a3 forHome:(id)a4
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = a4;
  int v7 = (void *)MEMORY[0x1D9452090]();
  id v8 = HMFGetOSLogHandle();
  uint64_t v49 = v6;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    __int16 v10 = [v49 name];
    *(_DWORD *)long long buf = 138543618;
    id v59 = v9;
    __int16 v60 = 2112;
    id v61 = v10;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Pushing data sync changes to all users of home %@", buf, 0x16u);

    id v6 = v49;
  }

  __int16 v52 = [MEMORY[0x1E4F1CA48] array];
  int v48 = [MEMORY[0x1E4F1CA48] array];
  id v47 = [MEMORY[0x1E4F1CA48] array];
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  id obj = [v6 users];
  uint64_t v11 = [obj countByEnumeratingWithState:&v54 objects:v64 count:16];
  if (v11)
  {
    uint64_t v13 = v11;
    uint64_t v14 = *(void *)v55;
    *(void *)&long long v12 = 138543874;
    long long v46 = v12;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v55 != v14) {
          objc_enumerationMutation(obj);
        }
        id v16 = *(__CFString **)(*((void *)&v54 + 1) + 8 * i);
        uint64_t v17 = [(__CFString *)v16 userID];
        if (v17)
        {
          id v18 = v17;
          if (v5)
          {
            id v19 = [(__CFString *)v16 userID];
            int v20 = [v5 containsObject:v19];

            if (!v20) {
              continue;
            }
          }
          else
          {
          }
          if (![(__CFString *)v16 isRemoteGateway])
          {
            int v26 = [(__CFString *)v16 uuid];
            __int16 v27 = [v6 currentUser];
            id v28 = [v27 uuid];
            char v29 = [v26 isEqual:v28];

            if (v29) {
              continue;
            }
            id v30 = [(HMDHomeManager *)self _userPushCachedGetDeviceForUser:v16];
            uint64_t v31 = v30;
            if (v30) {
              [v30 remoteDestinationString];
            }
            else {
            uint64_t v32 = [(__CFString *)v16 userID];
            }
            if (v32)
            {
              id v33 = [HMDHomeDataPushDestination alloc];
              long long v34 = [v31 remoteDestinationString];
              uint64_t v35 = [(HMDHomeDataPushDestination *)v33 initWithUser:v16 destination:v34];

              if ([(__CFString *)v16 isAdministrator]) {
                long long v36 = v47;
              }
              else {
                long long v36 = v48;
              }
              uint64_t v51 = (void *)v35;
              [v36 addObject:v35];
              int v37 = shouldLogPrivateInformation();
              __int16 v38 = (void *)MEMORY[0x1D9452090]();
              uint64_t v39 = HMFGetOSLogHandle();
              BOOL v40 = os_log_type_enabled(v39, OS_LOG_TYPE_INFO);
              if (v37)
              {
                if (v40)
                {
                  __int16 v41 = HMFGetLogIdentifier();
                  __int16 v42 = [(__CFString *)v16 userID];
                  *(_DWORD *)long long buf = v46;
                  id v59 = v41;
                  __int16 v60 = 2112;
                  id v61 = v42;
                  __int16 v62 = 2112;
                  id v63 = v32;
                  _os_log_impl(&dword_1D49D5000, v39, OS_LOG_TYPE_INFO, "%{public}@Will push to user %@/%@", buf, 0x20u);

                  goto LABEL_33;
                }
              }
              else if (v40)
              {
                __int16 v41 = HMFGetLogIdentifier();
                *(_DWORD *)long long buf = v46;
                id v59 = v41;
                __int16 v60 = 2112;
                id v61 = @"...";
                __int16 v62 = 2112;
                id v63 = @"...";
                _os_log_impl(&dword_1D49D5000, v39, OS_LOG_TYPE_INFO, "%{public}@Will push to user %@/%@", buf, 0x20u);
LABEL_33:
              }

              id v6 = v49;
            }
            else
            {
              uint64_t v43 = (void *)MEMORY[0x1D9452090]();
              uint64_t v44 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
              {
                uint64_t v45 = HMFGetLogIdentifier();
                *(_DWORD *)long long buf = 138543618;
                id v59 = v45;
                __int16 v60 = 2112;
                id v61 = v16;
                _os_log_impl(&dword_1D49D5000, v44, OS_LOG_TYPE_ERROR, "%{public}@Ignoring the user %@ as it doesn't have device or userID.", buf, 0x16u);

                id v6 = v49;
              }
            }

            continue;
          }
          uint64_t v21 = [(__CFString *)v16 userID];
          [v52 addObject:v21];

          uint64_t v22 = (void *)MEMORY[0x1D9452090]();
          id v23 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
          {
            uint32_t v24 = HMFGetLogIdentifier();
            int v25 = [(__CFString *)v16 userID];
            *(_DWORD *)long long buf = 138543618;
            id v59 = v24;
            __int16 v60 = 2112;
            id v61 = v25;
            _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_INFO, "%{public}@Will push to remote gateway %@", buf, 0x16u);
          }
        }
      }
      uint64_t v13 = [obj countByEnumeratingWithState:&v54 objects:v64 count:16];
    }
    while (v13);
  }

  [(HMDHomeManager *)self _pushChangesForHome:v6 toRemoteDevicesOnSameAccount:v52 addedUser:0];
  [(HMDHomeManager *)self _pushChangesForHome:v6 toRegularUsersOfHome:v48 adminUsersOfHome:v47];
}

- (void)_pushChangesToUsersThatHaveNotAcknowledged
{
  id v2 = self;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id obj = [(HMDHomeManager *)self pendingDataSyncAcks];
  uint64_t v3 = [obj countByEnumeratingWithState:&v21 objects:v31 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v22;
    unint64_t v6 = 0x1E4F29000uLL;
    id v19 = v2;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v22 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void *)(*((void *)&v21 + 1) + 8 * i);
        id v9 = (void *)[objc_alloc(*(Class *)(v6 + 296)) initWithUUIDString:v8];
        __int16 v10 = [(HMDHomeManager *)v2 _homeWithUUID:v9];
        if (v10)
        {
          uint64_t v11 = [(HMDHomeManager *)v2 pendingDataSyncAcks];
          long long v12 = [v11 objectForKeyedSubscript:v8];

          uint64_t v13 = (void *)MEMORY[0x1D9452090]();
          uint64_t v14 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            uint64_t v15 = v4;
            uint64_t v16 = v5;
            v18 = unint64_t v17 = v6;
            *(_DWORD *)long long buf = 138543874;
            int v26 = v18;
            __int16 v27 = 2112;
            id v28 = v10;
            __int16 v29 = 2112;
            id v30 = v12;
            _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_DEFAULT, "%{public}@Re-pushing home configuration for home %@ to users %@", buf, 0x20u);

            unint64_t v6 = v17;
            uint64_t v5 = v16;
            uint64_t v4 = v15;
            id v2 = v19;
          }

          [(HMDHomeManager *)v2 _pushChangesToUsers:v12 forHome:v10];
        }
      }
      uint64_t v4 = [obj countByEnumeratingWithState:&v21 objects:v31 count:16];
    }
    while (v4);
  }
}

- (void)_pushChangesToAllUsersOfAllHomes
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [(HMDHomeManager *)self sharedHomesPushDelayTimer];
  [v3 suspend];

  if (!isWatch())
  {
    [(HMDHomeManager *)self _scheduleSendHomeDataToAllWatches];
    uint64_t v4 = [MEMORY[0x1E4F5BE48] systemStore];
    id v22 = 0;
    id v23 = 0;
    [v4 getControllerPublicKey:0 secretKey:0 username:&v23 allowCreation:0 error:&v22];
    id v5 = v23;
    id v6 = v22;

    int v7 = [(HMDHomeManager *)self pendingDataSyncAcks];
    [v7 removeAllObjects];

    uint64_t v8 = [(HMDHomeManager *)self pendingDataSyncAcks];
    id v9 = +[HMDPersistentStore archiveIDSDataSyncJournal:v8];

    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    __int16 v10 = [(HMDHomeManager *)self homes];
    uint64_t v11 = [v10 countByEnumeratingWithState:&v18 objects:v24 count:16];
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v12; ++i)
        {
          if (*(void *)v19 != v13) {
            objc_enumerationMutation(v10);
          }
          uint64_t v15 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          uint64_t v16 = [v15 ownerName];
          int v17 = [v16 isEqualToString:v5];

          if (v17)
          {
            [(HMDHomeManager *)self _pushChangesToUsers:0 forHome:v15];
            [(HMDHomeManager *)self _pushUserRemovedForHome:v15];
          }
        }
        uint64_t v12 = [v10 countByEnumeratingWithState:&v18 objects:v24 count:16];
      }
      while (v12);
    }
  }
}

- (id)_pushChangesToAllUsersOfAllHomesForMigration
{
  if (isWatch())
  {
    uint64_t v3 = [MEMORY[0x1E4F65438] futureWithNoValue];
  }
  else
  {
    id v8 = 0;
    uint64_t v3 = [MEMORY[0x1E4F65438] futureWithPromise:&v8];
    uint64_t v4 = [(HMDHomeManager *)self workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __62__HMDHomeManager__pushChangesToAllUsersOfAllHomesForMigration__block_invoke;
    block[3] = &unk_1E6A197C8;
    void block[4] = self;
    id v7 = v8;
    dispatch_async(v4, block);
  }
  return v3;
}

void __62__HMDHomeManager__pushChangesToAllUsersOfAllHomesForMigration__block_invoke(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v2 = [*(id *)(a1 + 32) sharedHomesPushDelayTimer];
  [v2 suspend];

  if (isiOSDevice())
  {
    uint64_t v3 = [*(id *)(a1 + 32) homes];
    objc_msgSend(v3, "hmf_enumerateWithAutoreleasePoolUsingBlock:", &__block_literal_global_682);

    uint64_t v4 = *(void **)(a1 + 32);
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 3221225472;
    void v29[2] = __62__HMDHomeManager__pushChangesToAllUsersOfAllHomesForMigration__block_invoke_3;
    void v29[3] = &unk_1E6A197C8;
    void v29[4] = v4;
    id v30 = *(id *)(a1 + 40);
    [v4 _sendHomeDataToAllWatchesMigrateToHH2:1 completionHandler:v29];
  }
  else
  {
    id v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = *(id *)(a1 + 32);
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v33 = v8;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Skip pushing home data to watches since this device is not a companion", buf, 0xCu);
    }
    [*(id *)(a1 + 40) fulfillWithNoValue];
  }
  id v9 = [MEMORY[0x1E4F5BE48] systemStore];
  id v27 = 0;
  id v28 = 0;
  [v9 getControllerPublicKey:0 secretKey:0 username:&v28 allowCreation:0 error:&v27];
  id v10 = v28;
  id v11 = v27;

  uint64_t v12 = [*(id *)(a1 + 32) pendingDataSyncAcks];
  [v12 removeAllObjects];

  uint64_t v13 = [*(id *)(a1 + 32) pendingDataSyncAcks];
  id v14 = +[HMDPersistentStore archiveIDSDataSyncJournal:v13];

  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v15 = objc_msgSend(*(id *)(a1 + 32), "homes", 0);
  uint64_t v16 = [v15 countByEnumeratingWithState:&v23 objects:v31 count:16];
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v17; ++i)
      {
        if (*(void *)v24 != v18) {
          objc_enumerationMutation(v15);
        }
        long long v20 = *(void **)(*((void *)&v23 + 1) + 8 * i);
        long long v21 = [v20 ownerName];
        int v22 = [v21 isEqualToString:v10];

        if (v22)
        {
          [*(id *)(a1 + 32) _archiveSyncDataForHome:v20];
          [*(id *)(a1 + 32) _pushUserRemovedForHome:v20];
        }
      }
      uint64_t v17 = [v15 countByEnumeratingWithState:&v23 objects:v31 count:16];
    }
    while (v17);
  }
}

uint64_t __62__HMDHomeManager__pushChangesToAllUsersOfAllHomesForMigration__block_invoke_3(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = *(id *)(a1 + 32);
  uint64_t v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    int v7 = 138543362;
    id v8 = v5;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@Finished attempt to push home data to all watches", (uint8_t *)&v7, 0xCu);
  }
  return [*(id *)(a1 + 40) fulfillWithNoValue];
}

uint64_t __62__HMDHomeManager__pushChangesToAllUsersOfAllHomesForMigration__block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 setWatchSkipVersionCheck:1];
}

- (void)_schedulePushChangesToAllUsersOfAllHomes
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (+[HMDDeviceCapabilities supportsSyncingToSharedUsers])
  {
    id v3 = [(HMDHomeManager *)self sharedHomesPushDelayTimer];
    [v3 resume];

    uint64_t v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = HMFGetLogIdentifier();
      int v7 = 138543362;
      id v8 = v6;
      _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Kicking shared home push delay", (uint8_t *)&v7, 0xCu);
    }
  }
}

- (id)_userPushCachedGetDeviceForUser:(id)a3
{
  id v4 = a3;
  id v5 = [v4 uuid];

  if (!v5)
  {
    id v11 = 0;
    goto LABEL_9;
  }
  id v6 = [(HMDHomeManager *)self userPushCacheMap];
  int v7 = [v4 uuid];
  id v8 = [v6 objectForKeyedSubscript:v7];

  if (v8)
  {
    if (![v8 isExpired])
    {
      id v11 = [v8 device];
      goto LABEL_8;
    }
    uint64_t v9 = [(HMDHomeManager *)self userPushCacheMap];
    id v10 = [v4 uuid];
    [v9 setObject:0 forKeyedSubscript:v10];
  }
  id v11 = 0;
LABEL_8:

LABEL_9:
  return v11;
}

- (void)_updateUserPushCachedForUser:(id)a3 device:(id)a4
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = [v6 uuid];

  if (v7 && v8)
  {
    uint64_t v9 = (void *)MEMORY[0x1D9452090]();
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = HMFGetLogIdentifier();
      uint64_t v12 = [v6 userID];
      int v16 = 138543874;
      uint64_t v17 = v11;
      __int16 v18 = 2112;
      long long v19 = v12;
      __int16 v20 = 2112;
      id v21 = v7;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Caching destination device for %@ to %@", (uint8_t *)&v16, 0x20u);
    }
    uint64_t v13 = [[HMDUserPushCache alloc] initWithDevice:v7];
    id v14 = [(HMDHomeManager *)self userPushCacheMap];
    uint64_t v15 = [v6 uuid];
    [v14 setObject:v13 forKeyedSubscript:v15];
  }
}

- (void)updateUserPushCachedForUser:(id)a3 device:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __53__HMDHomeManager_updateUserPushCachedForUser_device___block_invoke;
  block[3] = &unk_1E6A19668;
  void block[4] = self;
  id v12 = v6;
  id v13 = v7;
  id v9 = v7;
  id v10 = v6;
  dispatch_async(v8, block);
}

uint64_t __53__HMDHomeManager_updateUserPushCachedForUser_device___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateUserPushCachedForUser:*(void *)(a1 + 40) device:*(void *)(a1 + 48)];
}

- (void)_pushMetadataToCloud
{
  [(HMDHomeManager *)self setUploadMetadataToCloud:1];
  [(HMDHomeManager *)self _pushChangesToCloud:0 withDelay:0.0];
}

- (void)_performPostSaveRequestActionsWithRequest:(id)a3
{
  id v19 = a3;
  id v4 = [v19 reason];
  id v5 = +[HMDHomeManager convertSaveReasonToTransationReason:v4];

  if (([v19 saveOptions] & 2) != 0)
  {
    id v6 = [v19 reason];
    [(HMDHomeManager *)self assistantSyncDataChanged:v6];
  }
  if ([v19 saveOptions])
  {
    [(HMDHomeManager *)self setUploadHomeDataToCloud:1];
    id v7 = [v19 reason];
    int v8 = [v7 isEqual:@"MetadataUpdate"];

    if (v8) {
      [(HMDHomeManager *)self setUploadMetadataToCloud:1];
    }
    id v9 = [(HMDHomeManager *)self logEventSubmitter];
    id v10 = +[HMDCloudSyncUploadReasonLogEvent uploadReason:v5 acceptedLegacyPush:1];
    [v9 submitLogEvent:v10];

    [(HMDHomeManager *)self _pushChangesToCloud:0 withDelay:v5 reason:0.0];
    if ([v19 objectChange])
    {
      id v11 = [v19 home];

      if (v11)
      {
        id v12 = [(HMDHomeManager *)self logEventSubmitter];
        id v13 = +[HMDCloudSyncUploadReasonLogEvent uploadReason:v5 acceptedHomeZonePush:1];
        [v12 submitLogEvent:v13];

        id v14 = [v19 home];
        [(HMDHomeManager *)self _uploadHomeToCloud:v14 withDelay:0.0];
      }
    }
  }
  uint64_t v15 = [v19 reason];
  BOOL v16 = +[HMDHomeManager doesSaveReasonAffectHomeManager:v15];

  if (v16)
  {
    uint64_t v17 = [(HMDHomeManager *)self logEventSubmitter];
    __int16 v18 = +[HMDCloudSyncUploadReasonLogEvent uploadReason:v5 acceptedHomeManagerZonePush:1];
    [v17 submitLogEvent:v18];

    [(HMDHomeManager *)self _uploadHomeManagerToCloudWithDelay:0.0];
  }
}

- (void)performPostSaveRequestActionsWithRequest:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  id v7[2] = __59__HMDHomeManager_performPostSaveRequestActionsWithRequest___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

uint64_t __59__HMDHomeManager_performPostSaveRequestActionsWithRequest___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _performPostSaveRequestActionsWithRequest:*(void *)(a1 + 40)];
}

- (void)performPostSaveRequestActionsWithReason:(id)a3
{
  id v4 = a3;
  id v5 = [[HMDHomeSaveRequest alloc] initWithReason:v4 information:0 postSyncNotification:0];

  [(HMDHomeManager *)self performPostSaveRequestActionsWithRequest:v5];
}

- (void)_saveWithRequest:(id)a3
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self cloudDataSyncStateFilter];
  int v6 = [v5 isLocalDataDecryptionFailed];

  if (v6)
  {
    id v7 = (void *)MEMORY[0x1D9452090]();
    id v8 = self;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = HMFGetLogIdentifier();
      id v11 = [v4 reason];
      int v24 = 138543618;
      long long v25 = v10;
      __int16 v26 = 2112;
      id v27 = v11;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Dropping save because local data failed to decrypt: %@", (uint8_t *)&v24, 0x16u);

LABEL_15:
      goto LABEL_16;
    }
    goto LABEL_16;
  }
  id v12 = [v4 reason];
  BOOL v13 = +[HMDHomeManager doesSaveReasonNotAffectLocalData:v12];

  if (!v13)
  {
    id v14 = (void *)MEMORY[0x1D9452090]();
    uint64_t v15 = self;
    BOOL v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = HMFGetLogIdentifier();
      __int16 v18 = [v4 reason];
      int v24 = 138543618;
      long long v25 = v17;
      __int16 v26 = 2112;
      id v27 = v18;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_DEFAULT, "%{public}@Saving to persistent store due to reason: %@", (uint8_t *)&v24, 0x16u);
    }
    id v19 = [(HMDHomeManager *)v15 backingStore];
    uint64_t v20 = [v4 reason];
    id v21 = (void *)v20;
    if (v20) {
      uint64_t v22 = (__CFString *)v20;
    }
    else {
      uint64_t v22 = @"unknown";
    }
    objc_msgSend(v19, "saveToPersistentStoreWithReason:incrementGeneration:", v22, objc_msgSend(v4, "incrementGeneration"));
  }
  long long v23 = [v4 reason];

  if (!v23)
  {
    id v7 = (void *)MEMORY[0x1D9452090]();
    id v8 = self;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v10 = HMFGetLogIdentifier();
      int v24 = 138543362;
      long long v25 = v10;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_ERROR, "%{public}@Save reason must be specified to process further", (uint8_t *)&v24, 0xCu);
      goto LABEL_15;
    }
LABEL_16:

    goto LABEL_17;
  }
  [(HMDHomeManager *)self _performPostSaveRequestActionsWithRequest:v4];
LABEL_17:
}

- (void)saveWithRequest:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  id v7[2] = __34__HMDHomeManager_saveWithRequest___block_invoke;
  v7[3] = &unk_1E6A197C8;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

uint64_t __34__HMDHomeManager_saveWithRequest___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _saveWithRequest:*(void *)(a1 + 40)];
}

- (void)_saveWithReason:(id)a3 information:(id)a4 postSyncNotification:(BOOL)a5
{
  BOOL v5 = a5;
  id v8 = a4;
  id v9 = a3;
  id v10 = [[HMDHomeSaveRequest alloc] initWithReason:v9 information:v8 postSyncNotification:v5];

  [(HMDHomeManager *)self _saveWithRequest:v10];
}

- (void)_saveWithReason:(id)a3 information:(id)a4 saveOptions:(unint64_t)a5
{
  id v8 = a4;
  id v9 = a3;
  id v10 = [[HMDHomeSaveRequest alloc] initWithReason:v9 information:v8 saveOptions:a5];

  [(HMDHomeManager *)self _saveWithRequest:v10];
}

- (void)_saveWithReason:(id)a3 postSyncNotification:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  id v7 = [[HMDHomeSaveRequest alloc] initWithReason:v6 information:0 postSyncNotification:v4];

  [(HMDHomeManager *)self _saveWithRequest:v7];
}

- (void)_handleSaveRequest:(id)a3
{
  id v8 = a3;
  BOOL v4 = [v8 userInfo];
  if (v4)
  {
    BOOL v5 = [v8 userInfo];
    id v6 = [v5 objectForKeyedSubscript:@"HMDHomeManagerSaveReasonKey"];

    if (v6)
    {
      id v7 = [v8 userInfo];
      BOOL v4 = objc_msgSend(v7, "hmf_stringForKey:", @"HMDHomeManagerSaveReasonKey");
    }
    else
    {
      BOOL v4 = 0;
    }
  }
  [(HMDHomeManager *)self _saveWithReason:v4 information:0 saveOptions:0];
}

- (int64_t)numberOfAccessoryWithNewFirmwareAvailable
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = [(HMDHomeManager *)self homes];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    int64_t v5 = 0;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v2);
        }
        id v8 = [*(id *)(*((void *)&v10 + 1) + 8 * i) namesOfServicesWithNewFirmwareAvailableInHome];
        v5 += [v8 count];
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
  else
  {
    int64_t v5 = 0;
  }

  return v5;
}

- (id)_homeDataForPersistentStoreIncrementingGeneration:(BOOL)a3 reason:(id)a4
{
  BOOL v4 = a3;
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v6 = a4;
  context = (void *)MEMORY[0x1D9452090]();
  if (v6
    && +[HMDHomeManager doesSaveReasonAffectOnlyLocalData:](HMDHomeManager, "doesSaveReasonAffectOnlyLocalData:", v6)&& +[HMDHomeManager doesSaveReasonRequireForceSyncToWatch:v6])
  {
    [(HMDHomeManager *)self _scheduleSendHomeDataToAllWatches];
  }
  if (v4)
  {
    id v7 = [(HMDHomeManager *)self uuid];
    [(HMDHomeManager *)self updateGenerationCounterWithReason:v6 sourceUUID:v7 shouldNotifyClients:0];
  }
  else
  {
    id v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = self;
    long long v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      long long v11 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v49 = v11;
      __int16 v50 = 2112;
      id v51 = v6;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Saving to persistent store. NOT INCREMENTING GENERATION COUNTER for reason %@.", buf, 0x16u);
    }
  }
  long long v12 = [(HMDHomeManager *)self pairedAccessories];
  long long v13 = +[HMDUserManagementOperationManager sharedManager];
  id v14 = [v13 operations];

  uint64_t v15 = objc_alloc_init(HMDMutableHomeData);
  BOOL v16 = [(HMDHomeManager *)self homes];
  [(HMDHomeData *)v15 setHomes:v16];

  [(HMDHomeData *)v15 setAccessories:v12];
  uint64_t v17 = [(HMDHomeManager *)self primaryHomeUUID];
  [(HMDHomeData *)v15 setPrimaryHomeUUID:v17];

  __int16 v18 = [(HMDHomeManager *)self lastCurrentHomeUUID];
  [(HMDHomeData *)v15 setLastCurrentHomeUUID:v18];

  [(HMDHomeData *)v15 setDataVersion:4];
  [(HMDHomeData *)v15 setSchemaVersion:5];
  [(HMDHomeData *)v15 setRecoveryVersion:[(HMDHomeManager *)self recoveryVersion]];
  id v19 = [(HMDHomeManager *)self dataTag];
  [(HMDHomeData *)v15 setDataTag:v19];

  uint64_t v20 = [(HMDHomeManager *)self uuidsOfRemovedHomes];
  [(HMDHomeData *)v15 setUUIDsOfRemovedHomes:v20];

  id v21 = [(HMDHomeManager *)self cloudZones];
  [(HMDHomeData *)v15 setCloudZones:v21];

  uint64_t v22 = [(HMDHomeManager *)self incomingInvitations];
  [(HMDHomeData *)v15 setIncomingInvitations:v22];

  long long v23 = [(HMDHomeManager *)self appleAccountManager];
  int v24 = [v23 device];
  long long v25 = [v24 identifier];
  __int16 v26 = [v25 UUIDString];
  [(HMDHomeData *)v15 setCurrentDevice:v26];

  [(HMDHomeData *)v15 setPendingUserManagementOperations:v14];
  id v27 = [(HMDHomeManager *)self unprocessedOperationModelIdentifiers];
  uint64_t v28 = [v27 allObjects];
  [(HMDHomeData *)v15 setUnprocessedOperationIdentifiers:v28];

  __int16 v29 = [(HMDHomeManager *)self appData];
  [(HMDHomeData *)v15 setApplicationData:v29];

  [(HMDHomeData *)v15 setResidentEnabledState:[(HMDHomeManager *)self residentEnabledState]];
  [(HMDHomeData *)v15 setAccessAllowedWhenLocked:[(HMDHomeManager *)self isAccessAllowedWhenLocked]];
  id v30 = [(HMDHomeManager *)self demoAccessories];
  [(HMDHomeData *)v15 setDemoAccessories:v30];

  [(HMDHomeData *)v15 setDemoFinalized:[(HMDHomeManager *)self demoFinalized]];
  uint64_t v31 = [(HMDHomeManager *)self appleAccountManager];
  uint64_t v32 = [v31 account];

  if ([v32 shouldCache])
  {
    [(HMDHomeData *)v15 setAccount:v32];
    id v33 = [v32 primaryHandle];
    [(HMDHomeData *)v15 setPrimaryAccountHandle:v33];
  }
  uint64_t v34 = [MEMORY[0x1E4F1CA48] array];
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t v35 = [(HMDHomeManager *)self remoteAccountManager];
  uint64_t v36 = [v35 countByEnumeratingWithState:&v43 objects:v47 count:16];
  if (v36)
  {
    uint64_t v37 = v36;
    uint64_t v38 = *(void *)v44;
    do
    {
      for (uint64_t i = 0; i != v37; ++i)
      {
        if (*(void *)v44 != v38) {
          objc_enumerationMutation(v35);
        }
        BOOL v40 = *(void **)(*((void *)&v43 + 1) + 8 * i);
        if ([v40 shouldCache]) {
          [v34 addObject:v40];
        }
      }
      uint64_t v37 = [v35 countByEnumeratingWithState:&v43 objects:v47 count:16];
    }
    while (v37);
  }

  if (v34) {
    [(HMDHomeData *)v15 setRemoteAccounts:v34];
  }

  return v15;
}

- (id)_dataForPersistentStoreIncrementingGeneration:(BOOL)a3 reason:(id)a4
{
  BOOL v4 = a3;
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v6 = a4;
  id v7 = (void *)MEMORY[0x1D9452090]();
  logger = self->_logger;
  if (os_signpost_enabled(logger))
  {
    *(_DWORD *)long long buf = 138412290;
    id v26 = v6;
    _os_signpost_emit_with_name_impl(&dword_1D49D5000, logger, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "HMDDataForPersistentStoreIncrementGenCounter", "reason=%{signpost.description:attribute}@ ", buf, 0xCu);
  }
  id v9 = (void *)MEMORY[0x1D9452090]();
  long long v10 = self;
  long long v11 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    long long v12 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    id v26 = v12;
    __int16 v27 = 2112;
    id v28 = v6;
    _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Saving to dataForPersistentStoreIncrementingGeneration store began for reason : [%@]", buf, 0x16u);
  }
  long long v13 = (void *)[objc_alloc(MEMORY[0x1E4F654E0]) initWithName:@"com.apple.homed.save-to-sqlstore"];
  id v14 = [(HMDHomeManager *)v10 _homeDataForPersistentStoreIncrementingGeneration:v4 reason:v6];
  uint64_t v15 = +[HMDPersistentStore archiveHomeDataForTransaction:v14];

  if (v15) {
    v10->_homeDatabaseSize = [v15 length];
  }
  [(HMDHomeManager *)v10 updatePowerAssertion];
  [(HMDHomeManager *)v10 setHomeDataLoadedFromArchive:1];
  BOOL v16 = [(HMDHomeManager *)v10 cloudDataSyncStateFilter];
  [v16 updateLocalDataDecryptionFailed:0];

  uint64_t v17 = [(HMDHomeManager *)v10 workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __71__HMDHomeManager__dataForPersistentStoreIncrementingGeneration_reason___block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = v10;
  dispatch_async(v17, block);

  __int16 v18 = (void *)MEMORY[0x1D9452090]();
  id v19 = v10;
  uint64_t v20 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    id v21 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    id v26 = v21;
    __int16 v27 = 2112;
    id v28 = v6;
    _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@(B) Finished saving to persistent store : [%@]", buf, 0x16u);
  }
  uint64_t v22 = self->_logger;
  if (os_signpost_enabled(v22))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D49D5000, v22, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "HMDDataForPersistentStoreIncrementGenCounter", "", buf, 2u);
  }

  return v15;
}

void __71__HMDHomeManager__dataForPersistentStoreIncrementingGeneration_reason___block_invoke(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _updateAccessoriesConfigured])
  {
    id v2 = *(void **)(a1 + 32);
    -[HMDHomeManager _postPreferencesChangedNotification](v2);
  }
}

- (void)_saveToPersistentStore:(BOOL)a3 reason:(id)a4
{
  BOOL v4 = a3;
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v6 = a4;
  logger = self->_logger;
  if (os_signpost_enabled(logger))
  {
    int v23 = 138412290;
    id v24 = v6;
    _os_signpost_emit_with_name_impl(&dword_1D49D5000, logger, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "HMDSaveToPersistentStore", "reason=%{signpost.description:attribute}@ ", (uint8_t *)&v23, 0xCu);
  }
  id v8 = (void *)MEMORY[0x1D9452090]();
  id v9 = self;
  long long v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    long long v11 = HMFGetLogIdentifier();
    int v23 = 138543618;
    id v24 = v11;
    __int16 v25 = 2112;
    id v26 = v6;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Saving to persistent store began for reason : [%@]", (uint8_t *)&v23, 0x16u);
  }
  long long v12 = (void *)MEMORY[0x1D9452090]();
  long long v13 = (void *)[objc_alloc(MEMORY[0x1E4F654E0]) initWithName:@"com.apple.homed.save-to-store"];
  id v14 = [(HMDHomeManager *)v9 _homeDataForPersistentStoreIncrementingGeneration:v4 reason:v6];
  uint64_t v15 = +[HMDPersistentStore archiveHomeDataLegacy:v14];
  BOOL v16 = v15;
  if (v15) {
    v9->_homeDatabaseSize = [v15 integerValue];
  }
  [(HMDHomeManager *)v9 updatePowerAssertion];

  [(HMDHomeManager *)v9 setHomeDataLoadedFromArchive:1];
  uint64_t v17 = [(HMDHomeManager *)v9 cloudDataSyncStateFilter];
  [v17 updateLocalDataDecryptionFailed:0];

  if ([(HMDHomeManager *)v9 _updateAccessoriesConfigured]) {
    -[HMDHomeManager _postPreferencesChangedNotification](v9);
  }
  __int16 v18 = (void *)MEMORY[0x1D9452090]();
  id v19 = v9;
  uint64_t v20 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    id v21 = HMFGetLogIdentifier();
    int v23 = 138543618;
    id v24 = v21;
    __int16 v25 = 2112;
    id v26 = v6;
    _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_INFO, "%{public}@(A) Finished saving to persistent store : [%@]", (uint8_t *)&v23, 0x16u);
  }
  uint64_t v22 = self->_logger;
  if (os_signpost_enabled(v22))
  {
    LOWORD(v23) = 0;
    _os_signpost_emit_with_name_impl(&dword_1D49D5000, v22, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "HMDSaveToPersistentStore", "", (uint8_t *)&v23, 2u);
  }
}

- (BOOL)_removeLegacyHomeArchive:(id *)a3
{
  return +[HMDPersistentStore removeLegacyHomeArchive:a3];
}

- (BOOL)hasHAPAccessoryInAnyHome
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v2 = [(HMDHomeManager *)self homes];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v2);
        }
        id v6 = [*(id *)(*((void *)&v9 + 1) + 8 * i) hapAccessories];
        uint64_t v7 = [v6 count];

        if (v7)
        {
          LOBYTE(v3) = 1;
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v3;
}

- (id)pairedAccessories
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [MEMORY[0x1E4F1CA48] array];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v4 = [(HMDHomeManager *)self homes];
  uint64_t v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        long long v9 = [*(id *)(*((void *)&v11 + 1) + 8 * i) accessories];
        [v3 addObjectsFromArray:v9];
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v6);
  }

  return v3;
}

- (id)accessoriesMatchingIdentifier:(id)a3
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (v4)
  {
    uint64_t v5 = [MEMORY[0x1E4F1CA48] array];
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id obj = [(HMDHomeManager *)self homes];
    uint64_t v19 = [obj countByEnumeratingWithState:&v24 objects:v29 count:16];
    if (v19)
    {
      uint64_t v18 = *(void *)v25;
      do
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          if (*(void *)v25 != v18) {
            objc_enumerationMutation(obj);
          }
          uint64_t v7 = *(void **)(*((void *)&v24 + 1) + 8 * i);
          long long v20 = 0u;
          long long v21 = 0u;
          long long v22 = 0u;
          long long v23 = 0u;
          id v8 = [v7 accessories];
          uint64_t v9 = [v8 countByEnumeratingWithState:&v20 objects:v28 count:16];
          if (v9)
          {
            uint64_t v10 = v9;
            uint64_t v11 = *(void *)v21;
            do
            {
              for (uint64_t j = 0; j != v10; ++j)
              {
                if (*(void *)v21 != v11) {
                  objc_enumerationMutation(v8);
                }
                long long v13 = *(void **)(*((void *)&v20 + 1) + 8 * j);
                long long v14 = [v13 identifier];
                int v15 = [v4 isEqual:v14];

                if (v15) {
                  [v5 addObject:v13];
                }
              }
              uint64_t v10 = [v8 countByEnumeratingWithState:&v20 objects:v28 count:16];
            }
            while (v10);
          }
        }
        uint64_t v19 = [obj countByEnumeratingWithState:&v24 objects:v29 count:16];
      }
      while (v19);
    }
  }
  else
  {
    uint64_t v5 = (void *)MEMORY[0x1E4F1CBF0];
  }

  return v5;
}

- (BOOL)isActive
{
  id v2 = [(HMDHomeManager *)self connectionsManager];
  char v3 = [v2 hasActiveConnections];

  return v3;
}

- (void)handleAccountSettingsUpdate:(id)a3
{
  id v4 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __46__HMDHomeManager_handleAccountSettingsUpdate___block_invoke;
  block[3] = &unk_1E6A19B30;
  void block[4] = self;
  dispatch_async(v4, block);
}

void __46__HMDHomeManager_handleAccountSettingsUpdate___block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    long long v20 = v5;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_INFO, "%{public}@Received notification that account settings updated", buf, 0xCu);
  }
  uint64_t v6 = +[HMDAppleAccountSettings sharedSettings];
  if ([v6 isEducationMode])
  {
    uint64_t v7 = [MEMORY[0x1E4F5BE48] systemStore];
    id v17 = 0;
    id v18 = 0;
    int v8 = [v7 getCurrentiCloudIdentifier:0 controllerPairingIdentifier:&v18 error:&v17];
    id v9 = v18;
    id v10 = v17;
    if (v8)
    {
      uint64_t v11 = (void *)MEMORY[0x1D9452090]();
      id v12 = *(id *)(a1 + 32);
      long long v13 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        long long v14 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        long long v20 = v14;
        _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_DEFAULT, "%{public}@Current account is EDU account, erasing local data", buf, 0xCu);
      }
      if (v9)
      {
        id v16 = v10;
        [v7 removeControllerKeyPairForIdentifier:v9 leaveTombstone:0 error:&v16];
        id v15 = v16;

        [*(id *)(a1 + 32) _eraseLocalHomeConfiguration];
        id v10 = v15;
      }
    }
  }
}

- (void)_setAccountAvailabilityChanged
{
  objc_initWeak(&location, self);
  id v3 = [(HMDHomeManager *)self cloudAccount];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __48__HMDHomeManager__setAccountAvailabilityChanged__block_invoke;
  v4[3] = &unk_1E6A15928;
  objc_copyWeak(&v5, &location);
  [v3 addAccountOperation:v4];

  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);
}

void __48__HMDHomeManager__setAccountAvailabilityChanged__block_invoke(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    if (([WeakRetained cloudkitAccountStatusDetermined] & 1) == 0)
    {
      [v5 _handleAccountAvailabilityChanged:v3];
      goto LABEL_9;
    }
    uint64_t v6 = (void *)MEMORY[0x1D9452090]();
    id v7 = v5;
    int v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = HMFGetLogIdentifier();
      int v10 = 138543362;
      uint64_t v11 = v9;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@CloudKit account status has been determined", (uint8_t *)&v10, 0xCu);
    }
  }
  if (v3) {
    v3[2](v3);
  }
LABEL_9:
}

- (void)accountAvailabilityChanged:(id)a3
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  uint64_t v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v8 = HMFGetLogIdentifier();
    id v9 = [v4 name];
    int v10 = 138543618;
    uint64_t v11 = v8;
    __int16 v12 = 2114;
    long long v13 = v9;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Received account availability changed notification: %{public}@", (uint8_t *)&v10, 0x16u);
  }
  [(HMDHomeManager *)v6 fetchAndUpdatePCSStatus];
  [(HMDHomeManager *)v6 _accountAvailabilityChanged:0];
}

- (void)fetchAndUpdatePCSStatus
{
  id v3 = getCKContainer();
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __41__HMDHomeManager_fetchAndUpdatePCSStatus__block_invoke;
  v4[3] = &unk_1E6A15900;
  void v4[4] = self;
  [v3 accountInfoWithCompletionHandler:v4];
}

void __41__HMDHomeManager_fetchAndUpdatePCSStatus__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __41__HMDHomeManager_fetchAndUpdatePCSStatus__block_invoke_2;
  block[3] = &unk_1E6A19668;
  uint64_t v8 = *(void *)(a1 + 32);
  id v12 = v5;
  uint64_t v13 = v8;
  id v14 = v6;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

void __41__HMDHomeManager_fetchAndUpdatePCSStatus__block_invoke_2(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32))
  {
    int v2 = [*(id *)(a1 + 40) pcsEnabled];
    objc_msgSend(*(id *)(a1 + 40), "setPcsEnabled:", ((unint64_t)objc_msgSend(*(id *)(a1 + 32), "deviceToDeviceEncryptionAvailability") >> 1) & 1);
    if ([*(id *)(a1 + 40) pcsEnabled])
    {
      id v3 = *(NSObject **)(*(void *)(a1 + 40) + 16);
      if (os_signpost_enabled(v3))
      {
        LOWORD(v16) = 0;
        _os_signpost_emit_with_name_impl(&dword_1D49D5000, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "ManateeAvailable", "", (uint8_t *)&v16, 2u);
      }
    }
    id v4 = (void *)MEMORY[0x1D9452090]();
    id v5 = *(id *)(a1 + 40);
    id v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = HMFGetLogIdentifier();
      int v8 = [*(id *)(a1 + 40) pcsEnabled];
      id v9 = @"Disabled";
      if (v8) {
        id v10 = @"Enabled";
      }
      else {
        id v10 = @"Disabled";
      }
      int v16 = 138543874;
      id v17 = v7;
      uint64_t v19 = v10;
      __int16 v18 = 2112;
      if (v2) {
        id v9 = @"Enabled";
      }
      __int16 v20 = 2112;
      uint64_t v21 = v9;
      _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Current PCS status: %@, Old PCS Status: %@", (uint8_t *)&v16, 0x20u);
    }
    if (v2 != [*(id *)(a1 + 40) pcsEnabled]) {
      logAndPostNotification(@"HMDHomeManagerPCSStatusChangedNotification", *(void **)(a1 + 40), 0);
    }
  }
  else
  {
    uint64_t v11 = (void *)MEMORY[0x1D9452090]();
    id v12 = *(id *)(a1 + 40);
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      id v14 = HMFGetLogIdentifier();
      id v15 = *(__CFString **)(a1 + 48);
      int v16 = 138543618;
      id v17 = v14;
      __int16 v18 = 2112;
      uint64_t v19 = v15;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch account info: %@", (uint8_t *)&v16, 0x16u);
    }
  }
}

- (void)kickAccountAvailabilityCheck
{
}

- (void)_accountAvailabilityChanged:(BOOL)a3
{
  objc_initWeak(&location, self);
  id v5 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __46__HMDHomeManager__accountAvailabilityChanged___block_invoke;
  block[3] = &unk_1E6A158D8;
  objc_copyWeak(&v7, &location);
  BOOL v8 = a3;
  dispatch_async(v5, block);

  objc_destroyWeak(&v7);
  objc_destroyWeak(&location);
}

void __46__HMDHomeManager__accountAvailabilityChanged___block_invoke(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    if ([WeakRetained cloudkitAccountStatusDetermined])
    {
      id v4 = (void *)MEMORY[0x1D9452090]();
      id v5 = v3;
      id v6 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        id v7 = HMFGetLogIdentifier();
        int v25 = 138543362;
        long long v26 = v7;
        BOOL v8 = "%{public}@CloudKit account status has already been determined";
        id v9 = v6;
        uint32_t v10 = 12;
LABEL_16:
        _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, v8, (uint8_t *)&v25, v10);

        goto LABEL_17;
      }
      goto LABEL_17;
    }
    if (*(unsigned char *)(a1 + 40))
    {
      uint64_t v11 = maxCloudOperationRetries;
      id v12 = +[HMDDeviceCapabilities deviceCapabilities];
      int v13 = [v12 supportsStandaloneMode];

      if (v11 >= 0) {
        uint64_t v14 = v11;
      }
      else {
        uint64_t v14 = v11 + 1;
      }
      uint64_t v15 = v14 >> 1;
      if (v13) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = v11;
      }
      if (v16 < 1 || [v3 cloudOperationRetryCount] < (unint64_t)v16)
      {
        id v4 = (void *)MEMORY[0x1D9452090]();
        id v5 = v3;
        id v6 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          id v7 = HMFGetLogIdentifier();
          int v25 = 138543618;
          long long v26 = v7;
          __int16 v27 = 2048;
          uint64_t v28 = [v5 cloudOperationRetryCount];
          BOOL v8 = "%{public}@Not scheduling account status operation with push notification because already in retry %lu";
          id v9 = v6;
          uint32_t v10 = 22;
          goto LABEL_16;
        }
LABEL_17:

        goto LABEL_27;
      }
      if ((unint64_t)v16 <= 1) {
        uint64_t v24 = 0;
      }
      else {
        uint64_t v24 = v16 - 2;
      }
      id v17 = (void *)MEMORY[0x1D9452090]([v3 setCloudOperationRetryCount:v24]);
      id v18 = v3;
      uint64_t v19 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        __int16 v20 = HMFGetLogIdentifier();
        int v25 = 138543618;
        long long v26 = v20;
        __int16 v27 = 2048;
        uint64_t v28 = [v18 cloudOperationRetryCount];
        uint64_t v21 = "%{public}@Setting retry count to %lu, scheduling account status operation";
        uint64_t v22 = v19;
        uint32_t v23 = 22;
        goto LABEL_25;
      }
    }
    else
    {
      id v17 = (void *)MEMORY[0x1D9452090]();
      id v18 = v3;
      uint64_t v19 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        __int16 v20 = HMFGetLogIdentifier();
        int v25 = 138543362;
        long long v26 = v20;
        uint64_t v21 = "%{public}@Scheduling account status operation";
        uint64_t v22 = v19;
        uint32_t v23 = 12;
LABEL_25:
        _os_log_impl(&dword_1D49D5000, v22, OS_LOG_TYPE_INFO, v21, (uint8_t *)&v25, v23);
      }
    }

    [v18 _setAccountAvailabilityChanged];
  }
LABEL_27:
}

- (void)startWithCompletionHandler:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  id v7[2] = __45__HMDHomeManager_startWithCompletionHandler___block_invoke;
  v7[3] = &unk_1E6A19530;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __45__HMDHomeManager_startWithCompletionHandler___block_invoke(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int v2 = [*(id *)(a1 + 32) appleAccountManager];
  id v3 = [v2 device];

  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) capabilitiesController];
    uint64_t v5 = [v4 currentResidentCapabilities];
    if (v5)
    {
      id v6 = (void *)v5;
      uint64_t v7 = [*(id *)(a1 + 32) residentEnabledState];

      if (!v7)
      {
        id v8 = [v3 productInfo];
        uint64_t v9 = [v8 productClass];

        if (v9 == 3)
        {
          long long v29 = 0u;
          long long v30 = 0u;
          long long v27 = 0u;
          long long v28 = 0u;
          uint32_t v10 = objc_msgSend(*(id *)(a1 + 32), "homes", 0);
          uint64_t v11 = [v10 countByEnumeratingWithState:&v27 objects:v33 count:16];
          if (v11)
          {
            uint64_t v12 = *(void *)v28;
            while (2)
            {
              for (uint64_t i = 0; i != v11; ++i)
              {
                if (*(void *)v28 != v12) {
                  objc_enumerationMutation(v10);
                }
                uint64_t v14 = *(void **)(*((void *)&v27 + 1) + 8 * i);
                if ([v14 isOwnerUser])
                {
                  uint64_t v15 = [v14 residentCapableDevices];
                  int v16 = [v15 containsObject:v3];

                  if (v16)
                  {
                    id v17 = (void *)MEMORY[0x1D9452090]();
                    id v18 = *(id *)(a1 + 32);
                    uint64_t v19 = HMFGetOSLogHandle();
                    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
                    {
                      __int16 v20 = HMFGetLogIdentifier();
                      *(_DWORD *)long long buf = 138543362;
                      uint64_t v32 = v20;
                      _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_INFO, "%{public}@Found ourselves as a resident in one or more homes, enabling ourselves as a resident device", buf, 0xCu);
                    }
                    uint64_t v11 = 1;
                    goto LABEL_20;
                  }
                }
              }
              uint64_t v11 = [v10 countByEnumeratingWithState:&v27 objects:v33 count:16];
              if (v11) {
                continue;
              }
              break;
            }
          }
LABEL_20:
        }
        else
        {
          uint64_t v11 = 1;
        }
        [*(id *)(a1 + 32) _updateResidentEnabledOnThisDevice:v11 forceNotify:0 message:0];
      }
    }
    else
    {
    }
  }
  uint64_t v21 = *(void **)(a1 + 32);
  if (v21[97])
  {
    uint64_t v22 = [v21 notificationCenter];
    [v22 addObserver:*(void *)(a1 + 32) selector:sel___handleWatchConnected_ name:@"HMDWatcherManagerWatchConnectedNotification" object:*(void *)(*(void *)(a1 + 32) + 776)];

    uint32_t v23 = [*(id *)(a1 + 32) notificationCenter];
    [v23 addObserver:*(void *)(a1 + 32) selector:sel___handleWatchDisconnected_ name:@"HMDWatcherManagerWatchDisconnectedNotification" object:*(void *)(*(void *)(a1 + 32) + 776)];

    [*(id *)(a1 + 32) _checkAndAddWatchDevicesWithResend:0];
    uint64_t v21 = *(void **)(a1 + 32);
  }
  if (v21[33])
  {
    uint64_t v24 = [v21 notificationCenter];
    [v24 addObserver:*(void *)(a1 + 32) selector:sel___handleCompanionUpdated_ name:@"HMDCompanionManagerUpdatedCompanionNotification" object:*(void *)(*(void *)(a1 + 32) + 264)];

    [*(id *)(a1 + 32) _checkAndInformCompanionDevice];
    uint64_t v21 = *(void **)(a1 + 32);
  }
  int v25 = [v21 chipXPCListener];
  [v25 start];

  uint64_t v26 = *(void *)(a1 + 40);
  if (v26) {
    (*(void (**)(void))(v26 + 16))();
  }
}

- (void)migrateModelObjectsToCloud:(int64_t)a3 schemaVersion:(int64_t)a4
{
  uint64_t v181 = *MEMORY[0x1E4F143B8];
  if (!isWatch())
  {
    id v4 = [(HMDHomeManager *)self cloudDataSyncManager];

    if (v4)
    {
      uint64_t v5 = (void *)MEMORY[0x1D9452090]();
      id v6 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543874;
        *(void *)&uint8_t buf[4] = v7;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = a3;
        *(_WORD *)&buf[22] = 2048;
        int64_t v180 = a4;
        _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Beginning migration from version %ld, schema %ld", buf, 0x20u);
      }
      *(void *)long long buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      LOBYTE(v180) = 0;
      context = (void *)MEMORY[0x1D9452090]();
      id v124 = (void *)[objc_alloc(MEMORY[0x1E4F654E0]) initWithName:@"com.apple.homed.v4-migrate."];
      objc_initWeak(&location, self);
      id v8 = [(HMDHomeManager *)self homes];
      uint64_t v9 = [v8 count];
      BOOL v11 = a4 < 4 && v9 != 0;

      if (v11)
      {
        uint64_t v12 = (void *)MEMORY[0x1E4F1CA48];
        int v13 = [(HMDHomeManager *)self homes];
        uint64_t v127 = objc_msgSend(v12, "arrayWithCapacity:", objc_msgSend(v13, "count"));

        long long v166 = 0u;
        long long v167 = 0u;
        long long v164 = 0u;
        long long v165 = 0u;
        uint64_t v14 = [(HMDHomeManager *)self homes];
        uint64_t v129 = [v14 countByEnumeratingWithState:&v164 objects:v178 count:16];
        if (!v129) {
          goto LABEL_53;
        }
        uint64_t v126 = *(void *)v165;
        id v132 = v14;
        while (1)
        {
          for (uint64_t i = 0; i != v129; ++i)
          {
            if (*(void *)v165 != v126) {
              objc_enumerationMutation(v14);
            }
            uint64_t v15 = *(void **)(*((void *)&v164 + 1) + 8 * i);
            id obj = v15;
            if (a3 <= 3)
            {
              int v16 = (void *)MEMORY[0x1D9452090]([v15 setupBackingStore]);
              HMFGetOSLogHandle();
              id v17 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                id v18 = (id)objc_claimAutoreleasedReturnValue();
                uint64_t v19 = [obj uuid];
                __int16 v20 = [v19 UUIDString];
                *(_DWORD *)__int16 v171 = 138543618;
                id v172 = v18;
                __int16 v173 = 2112;
                id v174 = v20;
                _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Migrating Home %@", v171, 0x16u);
              }
              uint64_t v21 = [(HMDHomeManager *)self backingStore];
              uint64_t v22 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
              id v134 = [v21 transaction:@"homeMigration" options:v22];

              uint32_t v23 = [obj backingStore];
              uint64_t v24 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
              uint64_t v133 = [v23 transaction:@"homeMigration" options:v24];

              if ([obj isOwnerUser])
              {
                int v25 = [obj backingStoreObjects:4];
                long long v162 = 0u;
                long long v163 = 0u;
                long long v160 = 0u;
                long long v161 = 0u;
                id v26 = v25;
                uint64_t v27 = [v26 countByEnumeratingWithState:&v160 objects:v177 count:16];
                if (v27)
                {
                  uint64_t v28 = *(void *)v161;
                  do
                  {
                    for (uint64_t j = 0; j != v27; ++j)
                    {
                      if (*(void *)v161 != v28) {
                        objc_enumerationMutation(v26);
                      }
                      long long v30 = *(void **)(*((void *)&v160 + 1) + 8 * j);
                      objc_opt_class();
                      char isKindOfClass = objc_opt_isKindOfClass();
                      uint64_t v32 = (void *)MEMORY[0x1D9452090]();
                      if (isKindOfClass)
                      {
                        HMFGetOSLogHandle();
                        id v33 = (id)objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
                        {
                          HMFGetLogIdentifier();
                          id v34 = (id)objc_claimAutoreleasedReturnValue();
                          uint64_t v35 = [obj uuid];
                          uint64_t v36 = [v35 UUIDString];
                          *(_DWORD *)__int16 v171 = 138543874;
                          id v172 = v34;
                          __int16 v173 = 2112;
                          id v174 = v36;
                          __int16 v175 = 2112;
                          id v176 = v30;
                          _os_log_impl(&dword_1D49D5000, v33, OS_LOG_TYPE_DEBUG, "%{public}@[Home Migration %@] Object Change (HomeManager Queue): %@", v171, 0x20u);

                          uint64_t v14 = v132;
                        }

                        uint64_t v37 = v134;
                      }
                      else
                      {
                        HMFGetOSLogHandle();
                        uint64_t v38 = (id)objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
                        {
                          HMFGetLogIdentifier();
                          id v39 = (id)objc_claimAutoreleasedReturnValue();
                          BOOL v40 = [obj uuid];
                          __int16 v41 = [v40 UUIDString];
                          *(_DWORD *)__int16 v171 = 138543874;
                          id v172 = v39;
                          __int16 v173 = 2112;
                          id v174 = v41;
                          __int16 v175 = 2112;
                          id v176 = v30;
                          _os_log_impl(&dword_1D49D5000, v38, OS_LOG_TYPE_DEBUG, "%{public}@[Home Migration %@] Object Change: %@", v171, 0x20u);

                          uint64_t v14 = v132;
                        }

                        uint64_t v37 = v133;
                      }
                      [v37 add:v30 withMessage:0];
                    }
                    uint64_t v27 = [v26 countByEnumeratingWithState:&v160 objects:v177 count:16];
                  }
                  while (v27);
                }
              }
              else
              {
                id v26 = [obj sharedHomeModel];
                long long v66 = (void *)MEMORY[0x1D9452090]();
                HMFGetOSLogHandle();
                long long v67 = (id)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
                {
                  HMFGetLogIdentifier();
                  id v68 = (id)objc_claimAutoreleasedReturnValue();
                  uint64_t v69 = [obj uuid];
                  __int16 v70 = [v69 UUIDString];
                  *(_DWORD *)__int16 v171 = 138543874;
                  id v172 = v68;
                  __int16 v173 = 2112;
                  id v174 = v70;
                  __int16 v175 = 2112;
                  id v176 = v26;
                  _os_log_impl(&dword_1D49D5000, v67, OS_LOG_TYPE_DEBUG, "%{public}@[Home Migration %@] Object Change (HomeManager Queue): %@", v171, 0x20u);
                }
                [v134 add:v26 withMessage:0];
              }

              [v134 save];
              [v133 save];
              uint64_t v65 = [obj zoneID];
              [(HMDHomeManager *)self uploadHomeToCloudZone:v65 withDelay:0.0];
LABEL_50:

              *(unsigned char *)(*(void *)&buf[8] + 24) = 1;
              uint64_t v15 = obj;
              goto LABEL_51;
            }
            if (a4 < 3)
            {
              __int16 v42 = [v15 zoneID];
              long long v43 = [v42 UUIDString];

              long long v44 = dispatch_group_create();
              dispatch_group_enter(v44);
              long long v45 = [(HMDHomeManager *)self cloudDataSyncManager];
              long long v46 = [v45 cloudCache];
              id v47 = [obj ownerName];
              v156[0] = MEMORY[0x1E4F143A8];
              v156[1] = 3221225472;
              v156[2] = __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke;
              v156[3] = &unk_1E6A15860;
              objc_copyWeak(&v159, &location);
              v156[4] = obj;
              __int16 v158 = buf;
              int v48 = v44;
              uint64_t v157 = v48;
              [v46 homeZoneWithName:v43 owner:v47 completion:v156];

              uint64_t v49 = (void *)MEMORY[0x1D9452090]();
              HMFGetOSLogHandle();
              __int16 v50 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                id v51 = (id)objc_claimAutoreleasedReturnValue();
                uint64_t v52 = [obj uuid];
                *(_DWORD *)__int16 v171 = 138543618;
                id v172 = v51;
                __int16 v173 = 2112;
                id v174 = v52;
                _os_log_impl(&dword_1D49D5000, v50, OS_LOG_TYPE_INFO, "%{public}@Waiting for home fixup for %@", v171, 0x16u);
              }
              dispatch_group_wait(v48, 0xFFFFFFFFFFFFFFFFLL);

              objc_destroyWeak(&v159);
              uint64_t v15 = obj;
            }
            if ([v15 isOwnerUser])
            {
              uint64_t v53 = (void *)MEMORY[0x1D9452090]([v15 setupBackingStore]);
              HMFGetOSLogHandle();
              long long v54 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                id v55 = (id)objc_claimAutoreleasedReturnValue();
                long long v56 = [obj uuid];
                long long v57 = [v56 UUIDString];
                *(_DWORD *)__int16 v171 = 138543618;
                id v172 = v55;
                __int16 v173 = 2112;
                id v174 = v57;
                _os_log_impl(&dword_1D49D5000, v54, OS_LOG_TYPE_INFO, "%{public}@Migrating Home %@", v171, 0x16u);
              }
              uint64_t v58 = [obj backingStore];
              id v59 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
              id v134 = [v58 transaction:@"homeMigration" options:v59];

              uint64_t v133 = [obj homeConfigurationModelObjectWithChangeType:1];
              __int16 v60 = (void *)MEMORY[0x1D9452090]();
              HMFGetOSLogHandle();
              id v61 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
              {
                HMFGetLogIdentifier();
                id v62 = (id)objc_claimAutoreleasedReturnValue();
                id v63 = [obj uuid];
                id v64 = [v63 UUIDString];
                *(_DWORD *)__int16 v171 = 138543874;
                id v172 = v62;
                __int16 v173 = 2112;
                id v174 = v64;
                __int16 v175 = 2112;
                id v176 = v133;
                _os_log_impl(&dword_1D49D5000, v61, OS_LOG_TYPE_DEBUG, "%{public}@[Home Migration %@] Object Change: %@", v171, 0x20u);
              }
              [v134 add:v133 withMessage:0];
              [v134 save];
              uint64_t v65 = [obj zoneID];
              [(HMDHomeManager *)self uploadHomeToCloudZone:v65 withDelay:0.0];
              goto LABEL_50;
            }
LABEL_51:
            uint64_t v71 = [HMDCloudZoneInformation alloc];
            uint64_t v72 = [v15 ownerName];
            id v73 = [v15 zoneID];
            id v74 = [(HMDCloudZoneInformation *)v71 initWithOwnerName:v72 uuid:v73];

            [(HMDCloudZoneInformation *)v74 setSchemaVersion:3];
            [(HMDCloudZoneInformation *)v74 setZoneCreated:0];
            [v127 addObject:v74];
          }
          uint64_t v129 = [v14 countByEnumeratingWithState:&v164 objects:v178 count:16];
          if (!v129)
          {
LABEL_53:

            if (a4 <= 1)
            {
              uint64_t v75 = [(HMDHomeManager *)self cloudZones];
              [v75 removeObjectsInArray:v127];

              id v76 = [(HMDHomeManager *)self cloudZones];
              [v76 addObjectsFromArray:v127];

              id v77 = (void *)MEMORY[0x1D9452090]();
              HMFGetOSLogHandle();
              id v78 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                id v79 = (id)objc_claimAutoreleasedReturnValue();
                id v80 = [(HMDHomeManager *)self uuid];
                id v81 = [v80 UUIDString];
                *(_DWORD *)__int16 v171 = 138543618;
                id v172 = v79;
                __int16 v173 = 2112;
                id v174 = v81;
                _os_log_impl(&dword_1D49D5000, v78, OS_LOG_TYPE_INFO, "%{public}@Migrating Home Manager %@", v171, 0x16u);
              }
              id v82 = [(HMDHomeManager *)self backingStore];
              id v83 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
              uint64_t v84 = [v82 transaction:@"homeManagerMigration" options:v83];

              [(HMDHomeManager *)self backingStoreObjects:4];
              long long v154 = 0u;
              long long v155 = 0u;
              long long v152 = 0u;
              long long v153 = 0u;
              id obja = (id)objc_claimAutoreleasedReturnValue();
              uint64_t v85 = [obja countByEnumeratingWithState:&v152 objects:v170 count:16];
              if (v85)
              {
                uint64_t v86 = *(void *)v153;
                do
                {
                  for (uint64_t k = 0; k != v85; ++k)
                  {
                    if (*(void *)v153 != v86) {
                      objc_enumerationMutation(obja);
                    }
                    id v88 = *(void **)(*((void *)&v152 + 1) + 8 * k);
                    __int16 v89 = (void *)MEMORY[0x1D9452090]();
                    HMFGetOSLogHandle();
                    id v90 = (id)objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
                    {
                      HMFGetLogIdentifier();
                      id v91 = (id)objc_claimAutoreleasedReturnValue();
                      uint64_t v92 = [(HMDHomeManager *)self uuid];
                      __int16 v93 = [v92 UUIDString];
                      *(_DWORD *)__int16 v171 = 138543874;
                      id v172 = v91;
                      __int16 v173 = 2112;
                      id v174 = v93;
                      __int16 v175 = 2112;
                      id v176 = v88;
                      _os_log_impl(&dword_1D49D5000, v90, OS_LOG_TYPE_DEBUG, "%{public}@[Home Manager Migration %@] Object Change: %@", v171, 0x20u);
                    }
                    [v84 add:v88 withMessage:0];
                  }
                  uint64_t v85 = [obja countByEnumeratingWithState:&v152 objects:v170 count:16];
                }
                while (v85);
              }

              [v84 save];
              [(HMDHomeManager *)self setForceFetchHomeManagerZone:1];
              [(HMDHomeManager *)self fetchHomeManagerCloudConflict:1 withDelay:0.0];
            }
            break;
          }
        }
      }
      id objb = dispatch_group_create();
      long long v148 = 0u;
      long long v149 = 0u;
      long long v150 = 0u;
      long long v151 = 0u;
      uint64_t v94 = [(HMDHomeManager *)self homes];
      uint64_t v95 = [v94 countByEnumeratingWithState:&v148 objects:v169 count:16];
      if (v95)
      {
        uint64_t v96 = *(void *)v149;
        do
        {
          for (uint64_t m = 0; m != v95; ++m)
          {
            if (*(void *)v149 != v96) {
              objc_enumerationMutation(v94);
            }
            uint64_t v98 = *(void **)(*((void *)&v148 + 1) + 8 * m);
            if ([v98 isOwnerUser])
            {
              dispatch_group_enter(objb);
              uint32_t v99 = [v98 zoneID];
              uint64_t v100 = [v99 UUIDString];

              uint64_t v101 = [(HMDHomeManager *)self cloudDataSyncManager];
              uint64_t v102 = [v101 cloudCache];
              char v103 = [v98 ownerName];
              v144[0] = MEMORY[0x1E4F143A8];
              v144[1] = 3221225472;
              v144[2] = __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke_598;
              v144[3] = &unk_1E6A15860;
              objc_copyWeak(&v147, &location);
              v144[4] = v98;
              long long v145 = objb;
              long long v146 = buf;
              [v102 homeZoneWithName:v100 owner:v103 completion:v144];

              objc_destroyWeak(&v147);
            }
          }
          uint64_t v95 = [v94 countByEnumeratingWithState:&v148 objects:v169 count:16];
        }
        while (v95);
      }

      id v104 = (void *)MEMORY[0x1D9452090]();
      HMFGetOSLogHandle();
      id v105 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
      {
        int v106 = HMFGetLogIdentifier();
        *(_DWORD *)__int16 v171 = 138543362;
        id v172 = v106;
        _os_log_impl(&dword_1D49D5000, v105, OS_LOG_TYPE_INFO, "%{public}@Waiting for homes migration to complete", v171, 0xCu);
      }
      dispatch_group_wait(objb, 0xFFFFFFFFFFFFFFFFLL);
      uint64_t v107 = dispatch_group_create();
      long long v108 = [(HMDHomeManager *)self cloudDataSyncManager];
      long long v109 = [v108 homeManagerZone];

      if (v109)
      {
        dispatch_group_enter(v107);
        v140[0] = MEMORY[0x1E4F143A8];
        v140[1] = 3221225472;
        v140[2] = __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke_603;
        v140[3] = &unk_1E6A190E8;
        objc_copyWeak(&v143, &location);
        id v141 = v107;
        id v142 = v109;
        [v142 fetchMigratedObjects:v140];
        [(HMDHomeManager *)self _cleanHomeManagerZoneInformationWithoutHome];
        if ([(HMDHomeManager *)self recoveryVersion] <= 0)
        {
          [(HMDHomeManager *)self setRecoveryVersion:1];
          id v118 = [[HMDHomeSaveRequest alloc] initWithReason:@"HMDHomeManagerRecoveryVersionUpdated" information:0 postSyncNotification:0];
          [(HMDHomeManager *)self saveWithRequest:v118];
          v138[0] = MEMORY[0x1E4F143A8];
          v138[1] = 3221225472;
          v138[2] = __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke_2_609;
          v138[3] = &unk_1E6A158B0;
          objc_copyWeak(&v139, &location);
          [(HMDHomeManager *)self _findZoneInformationWithoutHome:v138];
          objc_destroyWeak(&v139);
        }
        else
        {
          long long v110 = (void *)MEMORY[0x1D9452090]();
          BOOL v111 = self;
          HMFGetOSLogHandle();
          long long v112 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v112, OS_LOG_TYPE_INFO))
          {
            long long v113 = HMFGetLogIdentifier();
            *(_DWORD *)__int16 v171 = 138543362;
            id v172 = v113;
            _os_log_impl(&dword_1D49D5000, v112, OS_LOG_TYPE_INFO, "%{public}@[Recover Home] Recover already done, skipping", v171, 0xCu);
          }
        }

        objc_destroyWeak(&v143);
      }
      else
      {
        long long v114 = (void *)MEMORY[0x1D9452090]();
        id v115 = self;
        HMFGetOSLogHandle();
        id v116 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
        {
          id v117 = HMFGetLogIdentifier();
          *(_DWORD *)__int16 v171 = 138543362;
          id v172 = v117;
          _os_log_impl(&dword_1D49D5000, v116, OS_LOG_TYPE_ERROR, "%{public}@Cannot determine home manager zone to migrate", v171, 0xCu);
        }
      }
      uint64_t v119 = (void *)MEMORY[0x1D9452090]();
      HMFGetOSLogHandle();
      id v120 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v120, OS_LOG_TYPE_INFO))
      {
        uint64_t v121 = HMFGetLogIdentifier();
        *(_DWORD *)__int16 v171 = 138543362;
        id v172 = v121;
        _os_log_impl(&dword_1D49D5000, v120, OS_LOG_TYPE_INFO, "%{public}@Waiting for home manager migration to complete", v171, 0xCu);
      }
      dispatch_group_wait(v107, 0xFFFFFFFFFFFFFFFFLL);

      objc_destroyWeak(&location);
      if (*(unsigned char *)(*(void *)&buf[8] + 24))
      {
        uint64_t v122 = [[HMDHomeSaveRequest alloc] initWithReason:@"kAddHomeRequestKey" information:0 postSyncNotification:1];
        [(HMDHomeManager *)self saveWithRequest:v122];
      }
      _Block_object_dispose(buf, 8);
    }
  }
}

void __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    id v8 = [*(id *)(a1 + 32) uuid];
    uint64_t v9 = objc_msgSend(v5, "__cloudRecordWithObjectID:", v8);

    if (!v9 && [*(id *)(a1 + 32) isOwnerUser])
    {
      uint32_t v10 = (void *)MEMORY[0x1D9452090]();
      BOOL v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = HMFGetLogIdentifier();
        int v13 = [*(id *)(a1 + 32) uuid];
        uint64_t v14 = [v13 UUIDString];
        *(_DWORD *)long long buf = 138543618;
        uint64_t v32 = v12;
        __int16 v33 = 2112;
        id v34 = v14;
        _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Home missing cloud record, creating add object %@", buf, 0x16u);
      }
      uint64_t v15 = [WeakRetained backingStore];
      int v16 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      id v17 = [v15 transaction:@"homeMigration" options:v16];

      id v18 = [*(id *)(a1 + 32) modelObjectWithChangeType:1];
      uint64_t v19 = (void *)MEMORY[0x1D9452090]();
      __int16 v20 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        uint64_t v21 = v29 = v17;
        [*(id *)(a1 + 32) uuid];
        uint64_t v22 = v30 = v19;
        uint32_t v23 = [v22 UUIDString];
        *(_DWORD *)long long buf = 138543874;
        uint64_t v32 = v21;
        __int16 v33 = 2112;
        id v34 = v23;
        __int16 v35 = 2112;
        uint64_t v36 = v18;
        _os_log_impl(&dword_1D49D5000, v20, OS_LOG_TYPE_DEBUG, "%{public}@[Home Migration %@] Home Fixup Change: %@", buf, 0x20u);

        uint64_t v19 = v30;
        id v17 = v29;
      }

      [v17 add:v18 withMessage:0];
      [v17 save];
      uint64_t v24 = [*(id *)(a1 + 32) zoneID];
      [WeakRetained uploadHomeToCloudZone:v24 withDelay:0.0];

      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    }
  }
  int v25 = (void *)MEMORY[0x1D9452090]();
  id v26 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v27 = HMFGetLogIdentifier();
    uint64_t v28 = [*(id *)(a1 + 32) uuid];
    *(_DWORD *)long long buf = 138543618;
    uint64_t v32 = v27;
    __int16 v33 = 2112;
    id v34 = v28;
    _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_DEFAULT, "%{public}@Completed home fixup for %@", buf, 0x16u);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke_598(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v8 = WeakRetained;
  if (v6 || !WeakRetained)
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }
  else
  {
    uint64_t v9 = *(void **)(a1 + 32);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    void v12[2] = __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke_2;
    v12[3] = &unk_1E6A19988;
    objc_copyWeak(&v16, (id *)(a1 + 56));
    id v10 = *(id *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 32);
    id v13 = v10;
    uint64_t v14 = v11;
    uint64_t v15 = *(void *)(a1 + 48);
    [v9 migrateCloudZone:v5 completion:v12];

    objc_destroyWeak(&v16);
  }
}

void __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke_603(uint64_t a1, void *a2, void *a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v32 = v5;
  __int16 v33 = v6;
  if (!WeakRetained)
  {
    id v13 = *(NSObject **)(a1 + 32);
    goto LABEL_22;
  }
  uint64_t v31 = a1;
  if (!v6)
  {
    if ([v5 count])
    {
      long long v29 = (id *)(a1 + 48);
      uint64_t v14 = (void *)MEMORY[0x1D9452090]();
      id v30 = WeakRetained;
      id v15 = WeakRetained;
      id v16 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        id v17 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        long long v45 = v17;
        _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_INFO, "%{public}@General Object Migrating (Run Transactions) for Home Manager", buf, 0xCu);
      }
      id v18 = [v15 backingStore];
      uint64_t v19 = +[HMDBackingStoreTransactionOptions defaultCloudOptions];
      __int16 v20 = [v18 transaction:@"generalHomeManagerRunObjectMigration" options:v19];

      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      id obj = v32;
      uint64_t v21 = [obj countByEnumeratingWithState:&v39 objects:v43 count:16];
      if (v21)
      {
        uint64_t v22 = *(void *)v40;
        do
        {
          for (uint64_t i = 0; i != v21; ++i)
          {
            if (*(void *)v40 != v22) {
              objc_enumerationMutation(obj);
            }
            uint64_t v24 = *(void **)(*((void *)&v39 + 1) + 8 * i);
            int v25 = (void *)MEMORY[0x1D9452090]();
            id v26 = v15;
            uint64_t v27 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v28 = HMFGetLogIdentifier();
              *(_DWORD *)long long buf = 138543618;
              long long v45 = v28;
              __int16 v46 = 2112;
              id v47 = v24;
              _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_DEBUG, "%{public}@[General Home Manager Migration] Object Change: %@", buf, 0x16u);
            }
            [v20 add:v24 withMessage:0];
          }
          uint64_t v21 = [obj countByEnumeratingWithState:&v39 objects:v43 count:16];
        }
        while (v21);
      }

      id WeakRetained = v30;
      if (v20)
      {
        v35[0] = MEMORY[0x1E4F143A8];
        v35[1] = 3221225472;
        v35[2] = __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke_607;
        v35[3] = &unk_1E6A15888;
        objc_copyWeak(&v38, v29);
        id v36 = *(id *)(v31 + 32);
        id v37 = *(id *)(v31 + 40);
        [v20 run:v35];

        objc_destroyWeak(&v38);
        id WeakRetained = v30;
        goto LABEL_23;
      }
    }
    id v13 = *(NSObject **)(v31 + 32);
LABEL_22:
    dispatch_group_leave(v13);
    goto LABEL_23;
  }
  id v8 = (void *)MEMORY[0x1D9452090]();
  id v9 = WeakRetained;
  id v10 = WeakRetained;
  uint64_t v11 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    uint64_t v12 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    long long v45 = v12;
    __int16 v46 = 2112;
    id v47 = v33;
    _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_ERROR, "%{public}@Unable to fetch migration changes in home manager because of error (%@).", buf, 0x16u);
  }
  dispatch_group_leave(*(dispatch_group_t *)(v31 + 32));
  id WeakRetained = v9;
LABEL_23:
}

void __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke_2_609(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v9 = WeakRetained;
  if (!v6 && WeakRetained && [v5 count])
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    void v10[2] = __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke_3;
    v10[3] = &unk_1E6A18528;
    objc_copyWeak(&v11, v7);
    [v9 _loadHomeZonesFromCache:v5 completion:v10];
    objc_destroyWeak(&v11);
  }
}

void __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = WeakRetained;
  uint64_t v7 = HMFGetOSLogHandle();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if (v3)
  {
    if (v8)
    {
      id v9 = HMFGetLogIdentifier();
      int v11 = 138543362;
      uint64_t v12 = v9;
      id v10 = "%{public}@[Recover Home] Failed to recover homes";
LABEL_6:
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, v10, (uint8_t *)&v11, 0xCu);
    }
  }
  else if (v8)
  {
    id v9 = HMFGetLogIdentifier();
    int v11 = 138543362;
    uint64_t v12 = v9;
    id v10 = "%{public}@[Recover Home] Homes recovered";
    goto LABEL_6;
  }
}

void __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke_607(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained) {
    [*(id *)(a1 + 40) markMigratedObjectsAsMigrated];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    id v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = WeakRetained;
    uint64_t v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      BOOL v8 = HMFGetLogIdentifier();
      id v9 = [*(id *)(a1 + 40) uuid];
      id v10 = [v9 UUIDString];
      *(_DWORD *)long long buf = 138543874;
      int v25 = v8;
      __int16 v26 = 2112;
      uint64_t v27 = v10;
      __int16 v28 = 2112;
      id v29 = v3;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Finished migrating home %@ with error %@", buf, 0x20u);
    }
    int v11 = [v6 cloudDataSyncManager];
    uint64_t v12 = [v11 homeManagerZone];

    if (v12)
    {
      uint64_t v13 = [*(id *)(a1 + 40) uuid];
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      id v20[2] = __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke_599;
      void v20[3] = &unk_1E6A15838;
      objc_copyWeak(&v23, (id *)(a1 + 56));
      id v14 = *(id *)(a1 + 32);
      uint64_t v15 = *(void *)(a1 + 48);
      id v21 = v14;
      uint64_t v22 = v15;
      [v12 cloudRecordsForParentID:v13 completionHandler:v20];

      objc_destroyWeak(&v23);
    }
    else
    {
      id v16 = (void *)MEMORY[0x1D9452090]();
      id v17 = v6;
      id v18 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        uint64_t v19 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        int v25 = v19;
        _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_ERROR, "%{public}@Cannot determine home manager zone to clean", buf, 0xCu);
      }
      dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
    }
  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }
}

void __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke_599(uint64_t a1, void *a2, void *a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained && [v5 count])
  {
    uint64_t v30 = a1;
    id v31 = v6;
    uint64_t v7 = (void *)MEMORY[0x1D9452090]();
    BOOL v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = HMFGetLogIdentifier();
      id v10 = [WeakRetained uuid];
      int v11 = [v10 UUIDString];
      *(_DWORD *)long long buf = 138543618;
      long long v41 = v9;
      __int16 v42 = 2112;
      long long v43 = v11;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Cleanup Records in Home Manager %@", buf, 0x16u);
    }
    uint64_t v12 = [WeakRetained backingStore];
    uint64_t v13 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    id v14 = [v12 transaction:@"homeManagerCleanup" options:v13];

    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    id v32 = v5;
    id obj = v5;
    uint64_t v15 = [obj countByEnumeratingWithState:&v36 objects:v46 count:16];
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = *(void *)v37;
      do
      {
        uint64_t v18 = 0;
        uint64_t v34 = v16;
        do
        {
          if (*(void *)v37 != v17) {
            objc_enumerationMutation(obj);
          }
          uint64_t v19 = [*(id *)(*((void *)&v36 + 1) + 8 * v18) extractObjectChange];
          if (v19)
          {
            id v20 = objc_alloc((Class)objc_opt_class());
            id v21 = [v19 uuid];
            uint64_t v22 = [v19 parentUUID];
            id v23 = (void *)[v20 initWithObjectChangeType:3 uuid:v21 parentUUID:v22];

            uint64_t v24 = (void *)MEMORY[0x1D9452090]();
            int v25 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
            {
              __int16 v26 = HMFGetLogIdentifier();
              [WeakRetained uuid];
              v28 = uint64_t v27 = v14;
              id v29 = [v28 UUIDString];
              *(_DWORD *)long long buf = 138543874;
              long long v41 = v26;
              __int16 v42 = 2112;
              long long v43 = v29;
              __int16 v44 = 2112;
              long long v45 = v23;
              _os_log_impl(&dword_1D49D5000, v25, OS_LOG_TYPE_DEBUG, "%{public}@[Home Manager Cleanup %@] Object Change: %@", buf, 0x20u);

              id v14 = v27;
              uint64_t v16 = v34;
            }
            [v14 add:v23 withMessage:0];
          }
          ++v18;
        }
        while (v16 != v18);
        uint64_t v16 = [obj countByEnumeratingWithState:&v36 objects:v46 count:16];
      }
      while (v16);
    }

    [v14 save];
    *(unsigned char *)(*(void *)(*(void *)(v30 + 40) + 8) + 24) = 1;
    dispatch_group_leave(*(dispatch_group_t *)(v30 + 32));

    id v6 = v31;
    id v5 = v32;
  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }
}

- (void)_loadHomeZonesFromCache:(id)a3 completion:(id)a4
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v27 = v6;
  if ([v6 count])
  {
    __int16 v26 = v7;
    group = dispatch_group_create();
    v43[0] = 0;
    v43[1] = v43;
    v43[2] = 0x2020000000;
    char v44 = 0;
    objc_initWeak(&location, self);
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id obj = v6;
    uint64_t v8 = [obj countByEnumeratingWithState:&v38 objects:v49 count:16];
    if (v8)
    {
      uint64_t v29 = *(void *)v39;
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v39 != v29) {
            objc_enumerationMutation(obj);
          }
          id v10 = *(void **)(*((void *)&v38 + 1) + 8 * i);
          int v11 = [(HMDHomeManager *)self cloudDataSyncManager];
          uint64_t v12 = [v11 cloudCache];
          uint64_t v13 = [v10 UUIDString];
          id v14 = [v12 homeZoneWithName:v13];

          if (v14)
          {
            dispatch_group_enter(group);
            uint64_t v15 = (void *)MEMORY[0x1D9452090]();
            uint64_t v16 = self;
            HMFGetOSLogHandle();
            uint64_t v17 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
            {
              uint64_t v18 = HMFGetLogIdentifier();
              *(_DWORD *)long long buf = 138543618;
              __int16 v46 = v18;
              __int16 v47 = 2112;
              uint64_t v48 = v10;
              _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@[Recover Home] Fetching all cached records for home zone %@", buf, 0x16u);
            }
            v34[0] = MEMORY[0x1E4F143A8];
            v34[1] = 3221225472;
            id v34[2] = __53__HMDHomeManager__loadHomeZonesFromCache_completion___block_invoke;
            v34[3] = &unk_1E6A157E8;
            objc_copyWeak(&v37, &location);
            void v34[4] = v10;
            long long v36 = v43;
            __int16 v35 = group;
            [v14 fetchAllObjects:v34];

            objc_destroyWeak(&v37);
          }
          else
          {
            uint64_t v19 = (void *)MEMORY[0x1D9452090]();
            id v20 = self;
            HMFGetOSLogHandle();
            id v21 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              uint64_t v22 = HMFGetLogIdentifier();
              *(_DWORD *)long long buf = 138543618;
              __int16 v46 = v22;
              __int16 v47 = 2112;
              uint64_t v48 = v10;
              _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_ERROR, "%{public}@[Recover Home] Cloud zone does not exist for home zone %@, ignoring", buf, 0x16u);
            }
          }
        }
        uint64_t v8 = [obj countByEnumeratingWithState:&v38 objects:v49 count:16];
      }
      while (v8);
    }

    id v23 = [(HMDHomeManager *)self workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __53__HMDHomeManager__loadHomeZonesFromCache_completion___block_invoke_584;
    block[3] = &unk_1E6A15810;
    __int16 v33 = v43;
    id v32 = v26;
    dispatch_group_notify(group, v23, block);

    objc_destroyWeak(&location);
    _Block_object_dispose(v43, 8);

    id v7 = v26;
  }
  else
  {
    uint64_t v24 = _Block_copy(v7);
    int v25 = v24;
    if (v24) {
      (*((void (**)(void *, void))v24 + 2))(v24, 0);
    }
  }
}

void __53__HMDHomeManager__loadHomeZonesFromCache_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v8 = WeakRetained;
  long long v43 = v5;
  char v44 = v6;
  if (v5 && !v6 && WeakRetained && [v5 count])
  {
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    id v9 = v5;
    uint64_t v10 = [v9 countByEnumeratingWithState:&v52 objects:v56 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v53;
      while (2)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v53 != v11) {
            objc_enumerationMutation(v9);
          }
          id v13 = *(id *)(*((void *)&v52 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v14 = v13;
          }
          else {
            id v14 = 0;
          }
          id v15 = v14;

          if (v15)
          {

            __int16 v26 = (void *)[v9 mutableCopy];
            [v26 removeObject:v13];
            uint64_t v27 = [v8 backingStore];
            __int16 v28 = +[HMDBackingStoreTransactionOptions defaultCloudOptions];
            __int16 v42 = [v27 transaction:@"kTransactionUpdate" options:v28];

            [v42 add:v13];
            uint64_t v29 = [v8 backingStore];
            uint64_t v30 = +[HMDBackingStoreTransactionOptions defaultCloudOptions];
            id v31 = [v29 transaction:@"kTransactionUpdate" options:v30];

            context = (void *)MEMORY[0x1D9452090]([v31 addObjects:v26]);
            id v32 = v8;
            __int16 v33 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
            {
              uint64_t v34 = HMFGetLogIdentifier();
              __int16 v35 = objc_msgSend(v13, "uuid", context);
              long long v36 = *(void **)(a1 + 32);
              *(_DWORD *)long long buf = 138543874;
              uint64_t v58 = v34;
              __int16 v59 = 2112;
              __int16 v60 = v35;
              __int16 v61 = 2112;
              id v62 = v36;
              _os_log_impl(&dword_1D49D5000, v33, OS_LOG_TYPE_INFO, "%{public}@[Recover Home] Running transaction to add home %@/%@", buf, 0x20u);
            }
            v45[0] = MEMORY[0x1E4F143A8];
            v45[1] = 3221225472;
            v45[2] = __53__HMDHomeManager__loadHomeZonesFromCache_completion___block_invoke_582;
            v45[3] = &unk_1E6A157C0;
            objc_copyWeak(&v51, (id *)(a1 + 56));
            id v37 = *(void **)(a1 + 40);
            uint64_t v50 = *(void *)(a1 + 48);
            id v46 = v37;
            id v38 = v13;
            uint64_t v39 = *(void *)(a1 + 32);
            id v47 = v38;
            uint64_t v48 = v39;
            id v40 = v31;
            id v49 = v40;
            [v42 run:v45];

            objc_destroyWeak(&v51);
            goto LABEL_23;
          }
        }
        uint64_t v10 = [v9 countByEnumeratingWithState:&v52 objects:v56 count:16];
        if (v10) {
          continue;
        }
        break;
      }
    }

    uint64_t v16 = (void *)MEMORY[0x1D9452090]();
    id v17 = v8;
    uint64_t v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = HMFGetLogIdentifier();
      id v20 = *(void **)(a1 + 32);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v58 = v19;
      __int16 v59 = 2112;
      __int16 v60 = v20;
      _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@[Recover Home] Cannot determine home model for home zone %@, will not recover this home zone", buf, 0x16u);
    }
  }
  else
  {
    id v21 = (void *)MEMORY[0x1D9452090]();
    id v22 = v8;
    id v23 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = HMFGetLogIdentifier();
      int v25 = *(void **)(a1 + 32);
      *(_DWORD *)long long buf = 138543874;
      uint64_t v58 = v24;
      __int16 v59 = 2112;
      __int16 v60 = v25;
      __int16 v61 = 2112;
      id v62 = v6;
      _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_ERROR, "%{public}@[Recover Home] Failed to fetch models from record cache for home zone %@ with error %@", buf, 0x20u);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
LABEL_23:
}

void __53__HMDHomeManager__loadHomeZonesFromCache_completion___block_invoke_584(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    id v4 = [MEMORY[0x1E4F28C58] hmErrorWithCode:52];
  }
  else
  {
    id v4 = 0;
  }
  int v2 = _Block_copy(*(const void **)(a1 + 32));
  id v3 = v2;
  if (v2) {
    (*((void (**)(void *, id))v2 + 2))(v2, v4);
  }
}

void __53__HMDHomeManager__loadHomeZonesFromCache_completion___block_invoke_582(uint64_t a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = WeakRetained;
  if (v3 || !WeakRetained)
  {
    id v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      id v15 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v23 = v15;
      __int16 v24 = 2112;
      id v25 = v3;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_ERROR, "%{public}@[Recover Home] Cannot continue, encountered an error while processing home model: %@", buf, 0x16u);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }
  else
  {
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = HMFGetLogIdentifier();
      id v9 = [*(id *)(a1 + 40) uuid];
      uint64_t v10 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 138543874;
      id v23 = v8;
      __int16 v24 = 2112;
      id v25 = v9;
      __int16 v26 = 2112;
      uint64_t v27 = v10;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@[Recover Home] Running transactions for the rest of the home %@/%@", buf, 0x20u);
    }
    uint64_t v11 = *(void **)(a1 + 56);
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    void v16[2] = __53__HMDHomeManager__loadHomeZonesFromCache_completion___block_invoke_583;
    v16[3] = &unk_1E6A15798;
    objc_copyWeak(&v21, (id *)(a1 + 72));
    uint64_t v20 = *(void *)(a1 + 64);
    id v12 = *(id *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 48);
    id v17 = v12;
    uint64_t v18 = v13;
    id v19 = *(id *)(a1 + 32);
    [v11 run:v16];

    objc_destroyWeak(&v21);
  }
}

void __53__HMDHomeManager__loadHomeZonesFromCache_completion___block_invoke_583(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = WeakRetained;
  id v7 = HMFGetOSLogHandle();
  uint64_t v8 = v7;
  if (v3)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v9 = HMFGetLogIdentifier();
      int v13 = 138543618;
      id v14 = v9;
      __int16 v15 = 2112;
      id v16 = v3;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_ERROR, "%{public}@[Recover Home] Cannot continue, encountered an error while processing reset of the home models: %@", (uint8_t *)&v13, 0x16u);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      uint64_t v11 = [*(id *)(a1 + 32) uuid];
      uint64_t v12 = *(void *)(a1 + 40);
      int v13 = 138543874;
      id v14 = v10;
      __int16 v15 = 2112;
      id v16 = v11;
      __int16 v17 = 2112;
      uint64_t v18 = v12;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@[Recover Home] Finished recovering home %@/%@", (uint8_t *)&v13, 0x20u);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

- (void)_cleanHomeManagerZoneInformationWithoutHome
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = (void *)MEMORY[0x1E4F1CA80];
  id v4 = [(HMDHomeManager *)self homes];
  id v5 = objc_msgSend(v3, "setWithCapacity:", objc_msgSend(v4, "count"));

  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v6 = [(HMDHomeManager *)self homes];
  uint64_t v7 = [v6 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v23;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v23 != v8) {
          objc_enumerationMutation(v6);
        }
        uint64_t v10 = [*(id *)(*((void *)&v22 + 1) + 8 * v9) zoneID];
        [v5 addObject:v10];

        ++v9;
      }
      while (v7 != v9);
      uint64_t v7 = [v6 countByEnumeratingWithState:&v22 objects:v26 count:16];
    }
    while (v7);
  }

  uint64_t v11 = [(HMDHomeManager *)self cloudDataSyncManager];
  uint64_t v12 = [v11 homeManagerZone];

  int v13 = [MEMORY[0x1E4F1CA80] set];
  objc_initWeak(&location, self);
  id v14 = [(HMDHomeManager *)self uuid];
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = __61__HMDHomeManager__cleanHomeManagerZoneInformationWithoutHome__block_invoke;
  v17[3] = &unk_1E6A190E8;
  objc_copyWeak(&v20, &location);
  id v15 = v13;
  id v18 = v15;
  id v16 = v5;
  id v19 = v16;
  [v12 cloudRecordsForParentID:v14 completionHandler:v17];

  objc_destroyWeak(&v20);
  objc_destroyWeak(&location);
}

void __61__HMDHomeManager__cleanHomeManagerZoneInformationWithoutHome__block_invoke(id *a1, void *a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  uint64_t v8 = WeakRetained;
  if (v6 || !WeakRetained)
  {
    uint64_t v10 = (void *)MEMORY[0x1D9452090]();
    id v11 = v8;
    uint64_t v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v13 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v20 = v13;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_ERROR, "%{public}@[Stale Zone Information] Encountered an error while querying cloud cache for home zone records, cannot continue", buf, 0xCu);
    }
  }
  else
  {
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = __61__HMDHomeManager__cleanHomeManagerZoneInformationWithoutHome__block_invoke_580;
    v17[3] = &unk_1E6A15770;
    id v18 = a1[4];
    objc_msgSend(v5, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v17);
    uint64_t v9 = [v8 workQueue];
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    void v14[2] = __61__HMDHomeManager__cleanHomeManagerZoneInformationWithoutHome__block_invoke_2;
    v14[3] = &unk_1E6A19668;
    void v14[4] = v8;
    id v15 = a1[5];
    id v16 = a1[4];
    dispatch_async(v9, v14);
  }
}

void __61__HMDHomeManager__cleanHomeManagerZoneInformationWithoutHome__block_invoke_580(uint64_t a1, void *a2)
{
  id v8 = [a2 extractObjectChange];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v8;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;
  id v5 = v4;
  if (v4)
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = [v4 uuid];
    [v6 addObject:v7];
  }
}

void __61__HMDHomeManager__cleanHomeManagerZoneInformationWithoutHome__block_invoke_2(uint64_t a1)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  int v2 = [*(id *)(a1 + 32) cloudZones];
  id v3 = (void *)[v2 copy];

  id v31 = v3;
  id v4 = objc_msgSend(MEMORY[0x1E4F1CA80], "setWithCapacity:", objc_msgSend(v3, "count"));
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v5 = [*(id *)(a1 + 32) cloudZones];
  id v6 = (void *)[v5 copy];

  uint64_t v7 = [v6 countByEnumeratingWithState:&v34 objects:v46 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v35;
    id v32 = v6;
    __int16 v33 = v4;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v35 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(void **)(*((void *)&v34 + 1) + 8 * i);
        uint64_t v12 = *(void **)(a1 + 40);
        int v13 = [v11 uuid];
        if ([v12 containsObject:v13])
        {

LABEL_9:
          id v16 = [v11 uuid];
          [v4 addObject:v16];
          goto LABEL_13;
        }
        id v14 = *(void **)(a1 + 48);
        id v15 = [v11 uuid];
        LOBYTE(v14) = [v14 containsObject:v15];

        if (v14) {
          goto LABEL_9;
        }
        __int16 v17 = (void *)MEMORY[0x1D9452090]();
        id v18 = *(id *)(a1 + 32);
        id v19 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          id v20 = HMFGetLogIdentifier();
          uint64_t v21 = [v11 uuid];
          *(_DWORD *)long long buf = 138543618;
          uint64_t v39 = v20;
          __int16 v40 = 2112;
          long long v41 = v21;
          _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_ERROR, "%{public}@[Stale Zone Information] Found stale zone %@, removing", buf, 0x16u);
        }
        long long v22 = [*(id *)(a1 + 32) cloudZones];
        [v22 removeObject:v11];

        id v16 = [*(id *)(a1 + 32) cloudDataSyncManager];
        long long v23 = [v11 uuid];
        long long v24 = [v23 UUIDString];
        [v16 removeHomeZoneName:v24];

        id v6 = v32;
        id v4 = v33;
LABEL_13:
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v34 objects:v46 count:16];
    }
    while (v8);
  }

  long long v25 = (void *)MEMORY[0x1D9452090]();
  id v26 = *(id *)(a1 + 32);
  uint64_t v27 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
  {
    uint64_t v28 = HMFGetLogIdentifier();
    uint64_t v29 = *(void **)(a1 + 40);
    uint64_t v30 = *(void *)(a1 + 48);
    *(_DWORD *)long long buf = 138544130;
    uint64_t v39 = v28;
    __int16 v40 = 2112;
    long long v41 = v29;
    __int16 v42 = 2112;
    uint64_t v43 = v30;
    __int16 v44 = 2112;
    long long v45 = v4;
    _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_INFO, "%{public}@[Stale Zone Information] Finished zone audit. Zones with homes %@, Zones with models: %@, Zones with cloudZones %@", buf, 0x2Au);
  }
}

- (void)_findZoneInformationWithoutHome:(id)a3
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self cloudDataSyncManager];
  id v6 = [v5 homeManagerZone];

  uint64_t v7 = (void *)MEMORY[0x1E4F1CA80];
  uint64_t v8 = [(HMDHomeManager *)self homes];
  uint64_t v9 = objc_msgSend(v7, "setWithCapacity:", objc_msgSend(v8, "count"));

  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  uint64_t v10 = [(HMDHomeManager *)self homes];
  uint64_t v11 = [v10 countByEnumeratingWithState:&v26 objects:v30 count:16];
  if (v11)
  {
    uint64_t v12 = *(void *)v27;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v27 != v12) {
          objc_enumerationMutation(v10);
        }
        id v14 = [*(id *)(*((void *)&v26 + 1) + 8 * v13) zoneID];
        [v9 addObject:v14];

        ++v13;
      }
      while (v11 != v13);
      uint64_t v11 = [v10 countByEnumeratingWithState:&v26 objects:v30 count:16];
    }
    while (v11);
  }

  id v15 = [MEMORY[0x1E4F1CA80] set];
  objc_initWeak(&location, self);
  id v16 = [(HMDHomeManager *)self uuid];
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  id v20[2] = __50__HMDHomeManager__findZoneInformationWithoutHome___block_invoke;
  void v20[3] = &unk_1E6A15748;
  objc_copyWeak(&v24, &location);
  id v17 = v4;
  id v23 = v17;
  id v18 = v9;
  id v21 = v18;
  id v19 = v15;
  id v22 = v19;
  [v6 cloudRecordsForParentID:v16 completionHandler:v20];

  objc_destroyWeak(&v24);
  objc_destroyWeak(&location);
}

void __50__HMDHomeManager__findZoneInformationWithoutHome___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v8 = WeakRetained;
  if (v6 || !WeakRetained)
  {
    uint64_t v9 = (void *)MEMORY[0x1D9452090]();
    id v10 = v8;
    uint64_t v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v30 = v12;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_ERROR, "%{public}@[Recover Home] Encountered an error while querying cloud cache for home zone records, cannot continue", buf, 0xCu);
    }
    uint64_t v13 = _Block_copy(*(const void **)(a1 + 48));
    id v14 = v13;
    if (v13) {
      (*((void (**)(void *, void, id))v13 + 2))(v13, 0, v6);
    }
  }
  else
  {
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 3221225472;
    void v25[2] = __50__HMDHomeManager__findZoneInformationWithoutHome___block_invoke_575;
    v25[3] = &unk_1E6A156F8;
    id v26 = *(id *)(a1 + 32);
    long long v27 = v8;
    id v28 = *(id *)(a1 + 40);
    objc_msgSend(v5, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v25);
    if ([*(id *)(a1 + 40) count])
    {
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      void v21[2] = __50__HMDHomeManager__findZoneInformationWithoutHome___block_invoke_577;
      void v21[3] = &unk_1E6A15720;
      objc_copyWeak(&v24, (id *)(a1 + 56));
      id v23 = *(id *)(a1 + 48);
      id v22 = *(id *)(a1 + 40);
      [v8 _findCloudHomeZonesToIgnore:v21];

      objc_destroyWeak(&v24);
    }
    else
    {
      id v15 = (void *)MEMORY[0x1D9452090]();
      id v16 = v8;
      id v17 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        id v18 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v30 = v18;
        _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@[Recover Home] No home zone records found without a corresponding home", buf, 0xCu);
      }
      id v19 = (void (**)(void *, void *, void))_Block_copy(*(const void **)(a1 + 48));
      if (v19)
      {
        id v20 = (void *)[*(id *)(a1 + 40) copy];
        v19[2](v19, v20, 0);
      }
    }

    id v14 = v26;
  }
}

void __50__HMDHomeManager__findZoneInformationWithoutHome___block_invoke_575(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [v3 extractObjectChange];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v5 = v4;
  }
  else {
    id v5 = 0;
  }
  id v6 = v5;

  if (v6)
  {
    uint64_t v7 = *(void **)(a1 + 32);
    uint64_t v8 = [v6 uuid];
    LOBYTE(v7) = [v7 containsObject:v8];

    if ((v7 & 1) == 0)
    {
      uint64_t v9 = (void *)MEMORY[0x1D9452090]();
      id v10 = *(id *)(a1 + 40);
      uint64_t v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = HMFGetLogIdentifier();
        uint64_t v13 = [v6 uuid];
        int v16 = 138543618;
        id v17 = v12;
        __int16 v18 = 2112;
        id v19 = v13;
        _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@[Recover Home] Found home zone record but cannot find local home for zone: %@", (uint8_t *)&v16, 0x16u);
      }
      id v14 = *(void **)(a1 + 48);
      id v15 = [v6 uuid];
      [v14 addObject:v15];
    }
  }
}

void __50__HMDHomeManager__findZoneInformationWithoutHome___block_invoke_577(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v8 = WeakRetained;
  if (v6 || !WeakRetained)
  {
    uint64_t v11 = (void *)MEMORY[0x1D9452090]();
    id v12 = v8;
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      id v14 = HMFGetLogIdentifier();
      int v17 = 138543362;
      __int16 v18 = v14;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_ERROR, "%{public}@[Recover Home] Encountered an error while querying transaction journal, cannot continue", (uint8_t *)&v17, 0xCu);
    }
    id v15 = _Block_copy(*(const void **)(a1 + 40));
    int v16 = v15;
    if (v15) {
      (*((void (**)(void *, void, id))v15 + 2))(v15, 0, v6);
    }
  }
  else
  {
    [*(id *)(a1 + 32) minusSet:v5];
    uint64_t v9 = (void (**)(void *, void *, void))_Block_copy(*(const void **)(a1 + 40));
    if (v9)
    {
      id v10 = (void *)[*(id *)(a1 + 32) copy];
      v9[2](v9, v10, 0);
    }
  }
}

- (void)_findCloudHomeZonesToIgnore:(id)a3
{
  id v4 = a3;
  objc_initWeak(&location, self);
  id v5 = [MEMORY[0x1E4F1CA80] set];
  id v6 = [HMDBackingStoreLogFetchOperation alloc];
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  void v15[2] = __46__HMDHomeManager__findCloudHomeZonesToIgnore___block_invoke;
  v15[3] = &unk_1E6A156D0;
  objc_copyWeak(&v17, &location);
  id v7 = v5;
  id v16 = v7;
  uint64_t v8 = [(HMDBackingStoreLogFetchOperation *)v6 initWithNeedsPushTo:2 result:v15];
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  void v12[2] = __46__HMDHomeManager__findCloudHomeZonesToIgnore___block_invoke_574;
  v12[3] = &unk_1E6A17D78;
  id v9 = v4;
  id v14 = v9;
  id v10 = v7;
  id v13 = v10;
  [(HMDBackingStoreOperation *)v8 setResultBlock:v12];
  uint64_t v11 = [(HMDHomeManager *)self backingStore];
  [v11 submit:v8];

  objc_destroyWeak(&v17);
  objc_destroyWeak(&location);
}

uint64_t __46__HMDHomeManager__findCloudHomeZonesToIgnore___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v35 = a3;
  id v34 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  id v9 = v7;
  id v10 = WeakRetained;
  id obj = v9;
  uint64_t v38 = [v9 countByEnumeratingWithState:&v39 objects:v51 count:16];
  if (v38)
  {
    uint64_t v11 = *(void *)v40;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v40 != v11) {
          objc_enumerationMutation(obj);
        }
        id v13 = *(void **)(*((void *)&v39 + 1) + 8 * v12);
        objc_opt_class();
        if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
        {
          if (objc_msgSend(v13, "objectChangeType", v34) == 1 || objc_msgSend(v13, "objectChangeType") == 3)
          {
            id v14 = [v13 uuid];
            id v15 = +[HMDHome zoneIDFromHomeUUID:v14];

            id v16 = (void *)MEMORY[0x1D9452090]();
            id v17 = v10;
            __int16 v18 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
            {
              uint64_t v19 = HMFGetLogIdentifier();
              long long v37 = v16;
              uint64_t v20 = v11;
              id v21 = v10;
              uint64_t v22 = a1;
              if ([v13 objectChangeType] == 1) {
                id v23 = @"add";
              }
              else {
                id v23 = @"delete";
              }
              id v24 = [v13 uuid];
              *(_DWORD *)long long buf = 138544130;
              __int16 v44 = v19;
              __int16 v45 = 2112;
              id v46 = v23;
              a1 = v22;
              id v10 = v21;
              uint64_t v11 = v20;
              id v16 = v37;
              __int16 v47 = 2112;
              uint64_t v48 = v24;
              __int16 v49 = 2112;
              uint64_t v50 = v15;
              _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_INFO, "%{public}@[Recover Home] There is a %@ found home %@%@, ignoring home zone for recovery", buf, 0x2Au);
            }
            long long v25 = *(void **)(a1 + 32);
LABEL_16:
            [v25 addObject:v15];
          }
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v13, "objectChangeType", v34, v35) != 3)
          {
            id v26 = (void *)MEMORY[0x1D9452090]();
            id v27 = v10;
            id v28 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
            {
              long long v29 = HMFGetLogIdentifier();
              uint64_t v30 = [v13 uuid];
              *(_DWORD *)long long buf = 138543618;
              __int16 v44 = v29;
              __int16 v45 = 2112;
              id v46 = v30;
              _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_INFO, "%{public}@[Recover Home] There is a delete found home zone %@, ignoring home zone for recovery", buf, 0x16u);
            }
            uint64_t v31 = *(void **)(a1 + 32);
            id v15 = [v13 uuid];
            long long v25 = v31;
            goto LABEL_16;
          }
        }
        ++v12;
      }
      while (v38 != v12);
      uint64_t v32 = [obj countByEnumeratingWithState:&v39 objects:v51 count:16];
      uint64_t v38 = v32;
    }
    while (v32);
  }

  return 1;
}

void __46__HMDHomeManager__findCloudHomeZonesToIgnore___block_invoke_574(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = (void (**)(void *, void *, id))_Block_copy(*(const void **)(a1 + 40));
  if (v3)
  {
    id v4 = (void *)[*(id *)(a1 + 32) copy];
    v3[2](v3, v4, v5);
  }
}

- (void)_reloadHomeDataFromLocalStore:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  if (![(HMDHomeManager *)self homeDataLoadedFromArchive])
  {
    id v5 = (void *)MEMORY[0x1D9452090]();
    id v6 = self;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = HMFGetLogIdentifier();
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v8;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Reload home data from archived file", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v57 = 0;
    uint64_t v58 = &v57;
    uint64_t v59 = 0x2020000000;
    char v60 = 0;
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v69 = 0x3032000000;
    __int16 v70 = __Block_byref_object_copy__170059;
    uint64_t v71 = __Block_byref_object_dispose__170060;
    id v72 = 0;
    id v9 = (void *)MEMORY[0x1D9452090]();
    if (isWatch())
    {
      uint64_t v10 = *((void *)&buf + 1);
      uint64_t v11 = *(void **)(*((void *)&buf + 1) + 40);
      id v54 = 0;
      id obj = v11;
      uint64_t v12 = +[HMDPersistentStore unarchiveHomeData:&obj decryptionFailed:v58 + 3 successfulKeyUserName:&v54];
      objc_storeStrong((id *)(v10 + 40), obj);
      id v13 = v54;
      if (v12)
      {
        id v14 = (void *)MEMORY[0x1D9452090]();
        id v15 = v6;
        HMFGetOSLogHandle();
        id v16 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          id v46 = v14;
          HMFGetLogIdentifier();
          id v17 = (id)objc_claimAutoreleasedReturnValue();
          uint64_t v18 = [v12 code];
          uint64_t v19 = [v12 localizedDescription];
          *(_DWORD *)id v62 = 138543874;
          id v63 = v17;
          __int16 v64 = 2048;
          uint64_t v65 = v18;
          __int16 v66 = 2112;
          long long v67 = v19;
          _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_ERROR, "%{public}@Could not load home data from archived file -- continuing with error %ld:%@", v62, 0x20u);

          id v14 = v46;
        }
      }
      else if (!*((unsigned char *)v58 + 24) && *(void *)(*((void *)&buf + 1) + 40))
      {
        id v24 = [MEMORY[0x1E4F5BE48] systemStore];
        [v24 ensureControllerKeyExistsForAllViews];
      }
    }
    else
    {
      uint64_t v20 = (void *)MEMORY[0x1D9452090]();
      id v21 = [HMDBackingStoreFetchArchiveOperation alloc];
      v56[0] = MEMORY[0x1E4F143A8];
      v56[1] = 3221225472;
      v56[2] = __48__HMDHomeManager__reloadHomeDataFromLocalStore___block_invoke;
      v56[3] = &unk_1E6A156A8;
      void v56[4] = v6;
      void v56[5] = &buf;
      void v56[6] = &v57;
      uint64_t v22 = [(HMDBackingStoreFetchArchiveOperation *)v21 initWithFetchResult:v56];
      id v23 = [(HMDHomeManager *)v6 backingStore];
      [v23 submit:v22];

      [(HMDBackingStoreFetchArchiveOperation *)v22 waitUntilFinished];
    }
    if (*((unsigned char *)v58 + 24) && v3)
    {
      long long v25 = [(HMDHomeManager *)v6 syncManager];
      objc_initWeak((id *)v62, v6);
      v51[0] = MEMORY[0x1E4F143A8];
      v51[1] = 3221225472;
      v51[2] = __48__HMDHomeManager__reloadHomeDataFromLocalStore___block_invoke_558;
      v51[3] = &unk_1E6A16CE0;
      objc_copyWeak(&v53, (id *)v62);
      id v26 = v25;
      id v52 = v26;
      [v26 pauseAndWaitForCurrentOperationCompletion:v51];

      objc_destroyWeak(&v53);
      objc_destroyWeak((id *)v62);
    }
    if (*(void *)(*((void *)&buf + 1) + 40))
    {
      id v27 = [(HMDHomeManager *)v6 messageDispatcher];
      id v28 = [(HMDHomeManager *)v6 accessoryBrowserInternal];
      long long v29 = [(HMDHomeManager *)v6 msgFilterChain];
      uint64_t v30 = *(void *)(*((void *)&buf + 1) + 40);
      int v31 = *((unsigned __int8 *)v58 + 24);
      uint64_t v32 = [(HMDHomeManager *)v6 identityRegistry];
      __int16 v33 = [(HMDHomeManager *)v6 accountRegistry];
      LOBYTE(v45) = 1;
      [(HMDHomeManager *)v6 _loadMessageDispatcher:v27 accessoryBrowser:v28 messageFilterChain:v29 homeData:v30 localDataDecryptionFailed:v31 != 0 identityRegistry:v32 accountRegistry:v33 uncommittedTransactions:MEMORY[0x1E4F1CBF0] backingStoreFactory:0 reloadData:v45];

      id v34 = +[HMDUserManagementOperationManager sharedManager];
      [v34 setHomeManager:v6];
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      id v35 = [*(id *)(*((void *)&buf + 1) + 40) pendingUserManagementOperations];
      uint64_t v36 = [v35 countByEnumeratingWithState:&v47 objects:v61 count:16];
      if (v36)
      {
        uint64_t v37 = *(void *)v48;
        do
        {
          for (uint64_t i = 0; i != v36; ++i)
          {
            if (*(void *)v48 != v37) {
              objc_enumerationMutation(v35);
            }
            long long v39 = *(void **)(*((void *)&v47 + 1) + 8 * i);
            [v39 updateDelegate:v6];
            [v34 addOperation:v39];
          }
          uint64_t v36 = [v35 countByEnumeratingWithState:&v47 objects:v61 count:16];
        }
        while (v36);
      }

      [(HMDHomeManager *)v6 _checkForRemotePeers];
    }
    else
    {
      uint64_t v40 = [(HMDHomeManager *)v6 setAccessAllowedWhenLocked:isiOSDevice()];
      long long v41 = (void *)MEMORY[0x1D9452090](v40);
      long long v42 = v6;
      HMFGetOSLogHandle();
      uint64_t v43 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        __int16 v44 = HMFGetLogIdentifier();
        *(_DWORD *)id v62 = 138543362;
        id v63 = v44;
        _os_log_impl(&dword_1D49D5000, v43, OS_LOG_TYPE_INFO, "%{public}@No home data to reload from archived file", v62, 0xCu);
      }
    }
    _Block_object_dispose(&buf, 8);

    _Block_object_dispose(&v57, 8);
  }
}

void __48__HMDHomeManager__reloadHomeDataFromLocalStore___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (!v9)
  {
    if (!v7) {
      goto LABEL_20;
    }
    id v35 = 0;
    BOOL v16 = +[HMDPersistentStore hasControllerKeyWithUsername:v8 error:&v35];
    id v17 = v35;
    uint64_t v18 = (void *)MEMORY[0x1D9452090]();
    id v19 = *(id *)(a1 + 32);
    uint64_t v20 = HMFGetOSLogHandle();
    id v21 = v20;
    if (v16)
    {
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v37 = v22;
        _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Found controller key for loaded home data", buf, 0xCu);
      }
      id v23 = [MEMORY[0x1E4F5BE48] systemStore];
      [v23 updateActiveControllerPairingIdentifier:v8];

      uint64_t v24 = *(void *)(*(void *)(a1 + 40) + 8);
      id obj = *(id *)(v24 + 40);
      BOOL v25 = +[HMDPersistentStore deserializeHomeData:&obj localStorage:1 fromData:v7];
      objc_storeStrong((id *)(v24 + 40), obj);
      uint64_t v18 = (void *)MEMORY[0x1D9452090]();
      id v19 = *(id *)(a1 + 32);
      id v26 = HMFGetOSLogHandle();
      id v21 = v26;
      if (v25)
      {
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          id v27 = HMFGetLogIdentifier();
          id v28 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v7, "length"));
          *(_DWORD *)long long buf = 138543618;
          uint64_t v37 = v27;
          __int16 v38 = 2112;
          uint64_t v39 = (uint64_t)v28;
          _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_INFO, "%{public}@Deserialized homes size: %@", buf, 0x16u);
        }
        long long v29 = [MEMORY[0x1E4F5BE48] systemStore];
        [v29 ensureControllerKeyExistsForAllViews];

        goto LABEL_19;
      }
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v37 = v30;
        int v31 = "%{public}@Failed to deserialize homes from sql archive";
        uint64_t v32 = v21;
        uint32_t v33 = 12;
        goto LABEL_17;
      }
    }
    else if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v30 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v37 = v30;
      __int16 v38 = 2112;
      uint64_t v39 = (uint64_t)v17;
      int v31 = "%{public}@Could not find controller key in keychain error: %@";
      uint64_t v32 = v21;
      uint32_t v33 = 22;
LABEL_17:
      _os_log_impl(&dword_1D49D5000, v32, OS_LOG_TYPE_ERROR, v31, buf, v33);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
LABEL_19:

    goto LABEL_20;
  }
  uint64_t v10 = (void *)MEMORY[0x1D9452090]();
  id v11 = *(id *)(a1 + 32);
  uint64_t v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    id v13 = HMFGetLogIdentifier();
    uint64_t v14 = [v9 code];
    id v15 = [v9 localizedDescription];
    *(_DWORD *)long long buf = 138543874;
    uint64_t v37 = v13;
    __int16 v38 = 2048;
    uint64_t v39 = v14;
    __int16 v40 = 2112;
    long long v41 = v15;
    _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_ERROR, "%{public}@Could not load home data from archived file -- continuing with error %ld:%@", buf, 0x20u);
  }
LABEL_20:
}

void __48__HMDHomeManager__reloadHomeDataFromLocalStore___block_invoke_558(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained _eraseLocalHomeData];
  }
  else {
    [*(id *)(a1 + 32) resume];
  }
}

- (void)reloadHomeDataFromLocalStore:(BOOL)a3
{
  id v5 = [(HMDHomeManager *)self workQueue];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __47__HMDHomeManager_reloadHomeDataFromLocalStore___block_invoke;
  v6[3] = &unk_1E6A19B58;
  void v6[4] = self;
  BOOL v7 = a3;
  dispatch_async(v5, v6);
}

uint64_t __47__HMDHomeManager_reloadHomeDataFromLocalStore___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reloadHomeDataFromLocalStore:*(unsigned __int8 *)(a1 + 40)];
}

- (id)accessoryWithIDSIdentifier:(id)a3
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v5 = [(HMDHomeManager *)self homes];
  uint64_t v20 = [v5 countByEnumeratingWithState:&v25 objects:v30 count:16];
  if (v20)
  {
    uint64_t v6 = *(void *)v26;
    uint64_t v19 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v20; ++i)
      {
        if (*(void *)v26 != v6) {
          objc_enumerationMutation(v5);
        }
        id v8 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        long long v21 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        id v9 = objc_msgSend(v8, "appleMediaAccessories", v19);
        uint64_t v10 = [v9 countByEnumeratingWithState:&v21 objects:v29 count:16];
        if (v10)
        {
          uint64_t v11 = v10;
          uint64_t v12 = *(void *)v22;
          while (2)
          {
            for (uint64_t j = 0; j != v11; ++j)
            {
              if (*(void *)v22 != v12) {
                objc_enumerationMutation(v9);
              }
              uint64_t v14 = *(void **)(*((void *)&v21 + 1) + 8 * j);
              id v15 = [v14 idsIdentifier];
              char v16 = objc_msgSend(v15, "hmf_isEqualToUUID:", v4);

              if (v16)
              {
                id v17 = v14;

                goto LABEL_19;
              }
            }
            uint64_t v11 = [v9 countByEnumeratingWithState:&v21 objects:v29 count:16];
            if (v11) {
              continue;
            }
            break;
          }
        }

        uint64_t v6 = v19;
      }
      id v17 = 0;
      uint64_t v20 = [v5 countByEnumeratingWithState:&v25 objects:v30 count:16];
    }
    while (v20);
  }
  else
  {
    id v17 = 0;
  }
LABEL_19:

  return v17;
}

- (id)accessoryWithUUID:(id)a3
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v5 = [(HMDHomeManager *)self homes];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v14;
    while (2)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = [*(id *)(*((void *)&v13 + 1) + 8 * i) accessoryWithUUID:v4];
        if (v10)
        {
          uint64_t v11 = (void *)v10;
          goto LABEL_11;
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }
  uint64_t v11 = 0;
LABEL_11:

  return v11;
}

- (void)_updateHomesDiscoveredBonjourServicesMetrics
{
  void v27[2] = *MEMORY[0x1E4F143B8];
  if (!isWatch())
  {
    id v3 = [(HMDHomeManager *)self bonjourBrowser];

    if (!v3)
    {
      id v4 = [HMDBonjourBrowserHelper alloc];
      v27[0] = @"_sleep-proxy._udp.";
      v27[1] = @"_meshcop._udp.";
      id v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v27 count:2];
      uint64_t v6 = [(HMDHomeManager *)self workQueue];
      uint64_t v7 = [(HMDBonjourBrowserHelper *)v4 initWithServicesOfTypes:v5 browsingTimeInterval:v6 browsingPeriodicity:20.0 workQueue:0.0];
      [(HMDHomeManager *)self setBonjourBrowser:v7];
    }
  }
  uint64_t v8 = [(HMDHomeManager *)self bonjourBrowser];
  if (v8)
  {
    id v9 = [(HMDHomeManager *)self homes];
    if ([v9 count])
    {
      uint64_t v10 = [(HMDHomeManager *)self bonjourBrowser];
      char v11 = [v10 isStarted];

      if ((v11 & 1) == 0)
      {
        uint64_t v12 = [(HMDHomeManager *)self bonjourBrowserHelperLastCompletionDate];

        if (!v12) {
          goto LABEL_9;
        }
        long long v13 = [MEMORY[0x1E4F1C9C8] date];
        long long v14 = [(HMDHomeManager *)self bonjourBrowserHelperLastCompletionDate];
        [v13 timeIntervalSinceDate:v14];
        double v16 = v15;

        id v17 = [MEMORY[0x1E4F65530] sharedPreferences];
        uint64_t v18 = [v17 preferenceForKey:@"hapBonjourBrowserHelperPeriod"];
        uint64_t v19 = [v18 numberValue];
        [v19 doubleValue];
        double v21 = v20;

        if (v16 >= v21)
        {
LABEL_9:
          objc_initWeak(&location, self);
          long long v22 = [(HMDHomeManager *)self bonjourBrowser];
          v24[0] = MEMORY[0x1E4F143A8];
          v24[1] = 3221225472;
          void v24[2] = __62__HMDHomeManager__updateHomesDiscoveredBonjourServicesMetrics__block_invoke;
          v24[3] = &unk_1E6A18528;
          objc_copyWeak(&v25, &location);
          [v22 startWithBrowsingCompletion:v24];

          long long v23 = [MEMORY[0x1E4F1C9C8] date];
          [(HMDHomeManager *)self setBonjourBrowserHelperLastCompletionDate:v23];

          objc_destroyWeak(&v25);
          objc_destroyWeak(&location);
        }
      }
    }
    else
    {
    }
  }
}

void __62__HMDHomeManager__updateHomesDiscoveredBonjourServicesMetrics__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = WeakRetained;
  if (!a2)
  {
    id v5 = NSNumber;
    uint64_t v6 = [WeakRetained bonjourBrowser];
    uint64_t v7 = objc_msgSend(v5, "numberWithUnsignedInteger:", objc_msgSend(v6, "discoveredServicesCountForServiceType:", @"_meshcop._udp."));

    uint64_t v8 = NSNumber;
    id v9 = [v4 bonjourBrowser];
    uint64_t v10 = objc_msgSend(v8, "numberWithUnsignedInteger:", objc_msgSend(v9, "discoveredServicesCountForServiceType:", @"_sleep-proxy._udp."));

    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    char v11 = objc_msgSend(v4, "homes", 0);
    uint64_t v12 = [v11 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          if (*(void *)v19 != v14) {
            objc_enumerationMutation(v11);
          }
          double v16 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          if ([v16 homeLocation] == 1)
          {
            [v16 setAvailableBorderRouters:v7];
            [v16 setAvailableBSPsCount:v10];
          }
        }
        uint64_t v13 = [v11 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }
      while (v13);
    }
  }
  id v17 = [v4 bonjourBrowser];
  [v17 stop];
}

- (void)_monitorMemoryUsage
{
  id v2 = [(HMDHomeManager *)self memoryTracker];
  [v2 trackMemoryUsageWithReason:1];
}

- (void)_loadMessageDispatcher:(id)a3 accessoryBrowser:(id)a4 messageFilterChain:(id)a5 homeData:(id)a6 localDataDecryptionFailed:(BOOL)a7 identityRegistry:(id)a8 accountRegistry:(id)a9 uncommittedTransactions:(id)a10 backingStoreFactory:(id)a11 reloadData:(BOOL)a12
{
  BOOL v537 = a7;
  uint64_t v598 = *MEMORY[0x1E4F143B8];
  id v543 = a3;
  id v546 = a4;
  id obj = a5;
  id v541 = a5;
  id v18 = a6;
  id v540 = a8;
  id v539 = a9;
  id v545 = a10;
  v542 = (void (**)(id, HMDHomeManager *, void))a11;
  long long v19 = &OBJC_IVAR___HMDCameraClipSignificantEventBulletin__home;
  p_superclass = (__objc2_class **)(HMDBackingStoreLocal + 8);
  unint64_t v21 = 0x1E4F1C000;
  v547 = v18;
  if (a12) {
    goto LABEL_36;
  }
  long long v22 = [[HMDSyncOperationManager alloc] initWithClientQueue:self->_workQueue dataSource:self];
  syncManager = self->_syncManager;
  self->_syncManager = v22;

  long long v24 = [[HMDCloudAccount alloc] initWithClientQueue:self->_workQueue];
  cloudAccount = self->_cloudAccount;
  self->_cloudAccount = v24;

  long long v26 = [MEMORY[0x1E4F1CA60] dictionary];
  userPushCacheMap = self->_userPushCacheMap;
  self->_userPushCacheMap = v26;

  long long v28 = (HMFTimer *)[objc_alloc(MEMORY[0x1E4F65580]) initWithTimeInterval:0 options:10.0];
  watchPushDelayTimer = self->_watchPushDelayTimer;
  self->_watchPushDelayTimer = v28;

  [(HMFTimer *)self->_watchPushDelayTimer setDelegate:self];
  uint64_t v30 = self->_watchPushDelayTimer;
  uint64_t v31 = [(HMDHomeManager *)self workQueue];
  [(HMFTimer *)v30 setDelegateQueue:v31];

  uint64_t v32 = (HMFTimer *)[objc_alloc(MEMORY[0x1E4F65580]) initWithTimeInterval:0 options:10.0];
  sharedHomesPushDelayTimer = self->_sharedHomesPushDelayTimer;
  self->_sharedHomesPushDelayTimer = v32;

  [(HMFTimer *)self->_sharedHomesPushDelayTimer setDelegate:self];
  id v34 = self->_sharedHomesPushDelayTimer;
  id v35 = [(HMDHomeManager *)self workQueue];
  [(HMFTimer *)v34 setDelegateQueue:v35];

  p_messageDispatcher = &self->_messageDispatcher;
  objc_storeStrong((id *)&self->_messageDispatcher, a3);
  uint64_t v36 = [[HMDBiomeLogEventObserver alloc] initWithBiomeEventManager:self->_biomeEventManager dataSource:self];
  biomeLogEventObserver = self->_biomeLogEventObserver;
  self->_biomeLogEventObserver = v36;

  __int16 v38 = [[HMDCompositeSettingsControllerManager alloc] initWithDataSource:self];
  compositeSettingsControllerManager = self->_compositeSettingsControllerManager;
  self->_compositeSettingsControllerManager = v38;

  __int16 v40 = [[HMDSiriEndpointOnboardingManager alloc] initWithDataSource:self];
  siriEndpointOnboardingManager = self->_siriEndpointOnboardingManager;
  self->_siriEndpointOnboardingManager = v40;

  uint64_t v42 = (void *)MEMORY[0x1D9452090]();
  uint64_t v43 = self;
  HMFGetOSLogHandle();
  __int16 v44 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v45 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)long long buf = 138543362;
    *(void *)&uint8_t buf[4] = v45;
    _os_log_impl(&dword_1D49D5000, v44, OS_LOG_TYPE_INFO, "%{public}@Creating event router broker", buf, 0xCu);
  }
  id v46 = objc_alloc(MEMORY[0x1E4F69F50]);
  id v47 = (id)eventStorePath;
  uint64_t v48 = [v46 initWithFileName:v47];
  lastEventStore = v43->_lastEventStore;
  v43->_lastEventStore = (HMELastEventStore *)v48;

  if ([(HMELastEventStore *)v43->_lastEventStore startup])
  {
    long long v50 = [[HMDLastEventStoreController alloc] initWithWithEventStore:v43->_lastEventStore];
    lastEventStoreController = v43->_lastEventStoreController;
    v43->_lastEventStoreController = v50;
  }
  else
  {
    id v52 = (void *)MEMORY[0x1D9452090]();
    id v53 = v43;
    HMFGetOSLogHandle();
    id v54 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v54, OS_LOG_TYPE_FAULT))
    {
      HMFGetLogIdentifier();
      id v55 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)long long buf = 138543362;
      *(void *)&uint8_t buf[4] = v55;
      _os_log_impl(&dword_1D49D5000, v54, OS_LOG_TYPE_FAULT, "%{public}@Unable to start event store", buf, 0xCu);
    }
  }
  id v56 = objc_alloc(MEMORY[0x1E4F69F30]);
  uint64_t v57 = [(HMDHomeManager *)v43 workQueue];
  uint64_t v58 = [v56 initWithQueue:v57 dataSource:v43 storeReadHandle:v43->_lastEventStore logCategory:"Router.RegistrationForwarding" identifier:0];
  registrationForwardingEventRouter = v43->_registrationForwardingEventRouter;
  v43->_registrationForwardingEventRouter = (HMEDelegatingEventRouter *)v58;

  id v60 = objc_alloc(MEMORY[0x1E4F69F58]);
  __int16 v61 = [(HMDHomeManager *)v43 workQueue];
  uint64_t v62 = [v60 initWithQueue:v61 storeReadHandle:v43->_lastEventStore storeWriteHandle:v43->_lastEventStore logCategory:"Router.LocalMemory"];
  memoryEventRouter = v43->_memoryEventRouter;
  v43->_memoryEventRouter = (HMEMemoryEventBus *)v62;

  [(HMEMemoryEventBus *)v43->_memoryEventRouter setDataSource:v43];
  if (objc_opt_respondsToSelector())
  {
    __int16 v64 = v43->_registrationForwardingEventRouter;
    uint64_t v65 = [(HMEMemoryEventBus *)v43->_memoryEventRouter synchronousSubscriptionProvider];
    [(HMEDelegatingEventRouter *)v64 registerSubRouter:v65];
  }
  __int16 v66 = [HMDLoggingEventForwarder alloc];
  long long v67 = v43->_memoryEventRouter;
  id v68 = [(HMDHomeManager *)v43 logEventSubmitter];
  uint64_t v69 = [(HMDLoggingEventForwarder *)v66 initWithEventForwarder:v67 logEventSubmitter:v68];
  loggingMemoryEventForwarder = v43->_loggingMemoryEventForwarder;
  v43->_loggingMemoryEventForwarder = (HMDLoggingEventForwarder *)v69;

  [(HMDHomeManager *)v43 initalizeMediaGroupParticipantDataLocalStorage];
  if (_os_feature_enabled_impl() && (isiOSDevice() || isWatch() || isMac()))
  {
    uint64_t v71 = [HMDRemoteEventRouterAssertionController alloc];
    id v72 = [(HMDHomeManager *)v43 workQueue];
    uint64_t v73 = [(HMDHomeManager *)v43 notificationCenter];
    id v74 = [(HMDRemoteEventRouterAssertionController *)v71 initWithQueue:v72 notificationCenter:v73];
    [(HMDHomeManager *)v43 setEventRouterAssertionController:v74];

    uint64_t v75 = [(HMDHomeManager *)v43 eventRouterAssertionController];
    [v75 configure];
  }
  objc_storeStrong((id *)&v43->_accessoryBrowserInternal, a4);
  [(HMDAccessoryBrowser *)v43->_accessoryBrowserInternal setUnpairedAccessoryManagerDelegate:v43];
  uint64_t v76 = [MEMORY[0x1E4F1CA48] array];
  homes = v43->_homes;
  v43->_homes = (NSMutableArray *)v76;

  uint64_t v78 = [MEMORY[0x1E4F1CA80] set];
  pendingHomesBeingRemoved = v43->_pendingHomesBeingRemoved;
  v43->_pendingHomesBeingRemoved = (NSMutableSet *)v78;

  id v80 = objc_alloc_init(HMDPowerManager);
  powerManager = v43->_powerManager;
  v43->_powerManager = v80;

  v43->_accountActive = 0;
  v43->_accountStatusFailedDueToNetworkFailure = 0;
  v43->_uploadToCloudIsPending = 0;
  v43->_uploadHomeDataToCloud = 0;
  objc_storeStrong((id *)&v43->_identityRegistry, a8);
  cloudOperationRetryTimer = v43->_cloudOperationRetryTimer;
  v43->_cloudOperationRetryTimer = 0;

  v43->_lastAnswerForShouldCloudSyncData = 0;
  objc_storeStrong((id *)&v43->_msgFilterChain, obj);
  v43->_cloudOperationRetryCount = 0;
  v43->_backOffOperationInProgress = 0;
  objc_storeStrong((id *)&v43->_accountRegistry, a9);
  uint64_t v83 = [v547 demoAccessories];
  demoAccessories = v43->_demoAccessories;
  v43->_demoAccessories = (NSDictionary *)v83;

  v43->_demoFinalized = [v547 demoFinalized];
  [(HMDHomeManager *)v43 _migrateUniqueIdentifierPrefsIfNeeded];
  uint64_t v85 = +[HMDAppleAccountSettings sharedSettings];
  [v85 synchronize];

  v43->_companionReachable = 0;
  id v86 = +[HMDWatchSystemState sharedState];
  if (+[HMDDeviceCapabilities isCompanionCapable])
  {
    id v87 = [HMDPairedSync alloc];
    id v88 = [(HMDHomeManager *)v43 workQueue];
    uint64_t v89 = [(HMDPairedSync *)v87 initWithDelegate:v43 queue:v88];
    pairedSync = v43->_pairedSync;
    v43->_pairedSync = (HMDPairedSync *)v89;

    uint64_t v91 = +[HMDWatchManager sharedManager];
    uint64_t v92 = 776;
LABEL_20:
    uint64_t v95 = *(Class *)((char *)&v43->super.super.isa + v92);
    *(Class *)((char *)&v43->super.super.isa + v92) = (Class)v91;

    goto LABEL_21;
  }
  __int16 v93 = [MEMORY[0x1E4F65548] productInfo];
  uint64_t v94 = [v93 productPlatform];

  if (v94 == 3)
  {
    uint64_t v91 = +[HMDCompanionManager sharedManager];
    uint64_t v92 = 264;
    goto LABEL_20;
  }
LABEL_21:
  if (+[HMDSoftwareUpdateManager isSupported])
  {
    uint64_t v96 = objc_alloc_init(HMDSoftwareUpdateManager);
    softwareUpdateManager = v43->_softwareUpdateManager;
    v43->_softwareUpdateManager = v96;
  }
  v43->_uploadMetadataToCloud = 0;
  v43->_cloudkitAccountStatusDetermined = 0;
  v43->_unint64_t generationCounter = 0;
  if (v43->_generationCounterToken == -1)
  {
    uint64_t v98 = [(HMDHomeManager *)v43 darwinNotificationProvider];
    int v99 = [v98 notifyRegisterCheck:*MEMORY[0x1E4F2D430] outToken:&v43->_generationCounterToken];

    if (!v99)
    {
      uint64_t v577 = 0;
      uint64_t v100 = [(HMDHomeManager *)v43 darwinNotificationProvider];
      [v100 notifyGetState:v43->_generationCounterToken state:&v577];

      if (!v577)
      {
        uint64_t v101 = (void *)MEMORY[0x1D9452090]();
        uint64_t v102 = v43;
        HMFGetOSLogHandle();
        char v103 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          id v104 = (id)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)long long buf = 138543362;
          *(void *)&uint8_t buf[4] = v104;
          _os_log_impl(&dword_1D49D5000, v103, OS_LOG_TYPE_DEFAULT, "%{public}@Generation counter for notification token is zero - refreshing from persisted configuration", buf, 0xCu);
        }
        id v105 = [(HMDHomeManager *)v102 userDefaults];
        uint64_t v577 = [v105 integerForKey:@"HMDHomeManagerGenerationCounter"];

        if (!v577)
        {
          int v106 = (void *)MEMORY[0x1D9452090]();
          uint64_t v107 = v102;
          HMFGetOSLogHandle();
          long long v108 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            id v109 = (id)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)long long buf = 138543362;
            *(void *)&uint8_t buf[4] = v109;
            _os_log_impl(&dword_1D49D5000, v108, OS_LOG_TYPE_DEFAULT, "%{public}@Persisted generation counter is zero - need to invalidate client caches", buf, 0xCu);
          }
        }
      }
      long long v110 = (void *)MEMORY[0x1D9452090]();
      BOOL v111 = v43;
      HMFGetOSLogHandle();
      long long v112 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        id v113 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)long long buf = 138543618;
        *(void *)&uint8_t buf[4] = v113;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v577;
        _os_log_impl(&dword_1D49D5000, v112, OS_LOG_TYPE_DEFAULT, "%{public}@Initializing with generation counter %llu", buf, 0x16u);
      }
      v43->_unint64_t generationCounter = v577;
    }
  }
  uint64_t v114 = [MEMORY[0x1E4F1CA80] set];
  unassociatedRemotePeers = v43->_unassociatedRemotePeers;
  v43->_unassociatedRemotePeers = (NSMutableSet *)v114;

  uint64_t v116 = [MEMORY[0x1E4F1CA60] dictionary];
  associatedRemotePeers = v43->_associatedRemotePeers;
  v43->_associatedRemotePeers = (NSMutableDictionary *)v116;

  uint64_t v118 = [MEMORY[0x1E4F1CA60] dictionary];
  associatedWatchPeers = v43->_associatedWatchPeers;
  v43->_associatedWatchPeers = (NSMutableDictionary *)v118;

  uint64_t v120 = [MEMORY[0x1E4F1CA60] dictionary];
  watchSyncStateMap = v43->_watchSyncStateMap;
  v43->_watchSyncStateMap = (NSMutableDictionary *)v120;

  uint64_t v122 = [MEMORY[0x1E4F1CA80] set];
  fullSyncedWatchPeers = v43->_fullSyncedWatchPeers;
  v43->_fullSyncedWatchPeers = (NSMutableSet *)v122;

  uint64_t v124 = [MEMORY[0x1E4F1CA60] dictionary];
  watchSyncRetryContextBySyncIdentifier = v43->_watchSyncRetryContextBySyncIdentifier;
  v43->_watchSyncRetryContextBySyncIdentifier = (NSMutableDictionary *)v124;

  uint64_t v126 = [MEMORY[0x1E4F28E10] strongToStrongObjectsMapTable];
  watchSyncRetryContextByRetryTimer = v43->_watchSyncRetryContextByRetryTimer;
  v43->_watchSyncRetryContextByRetryTimer = (NSMapTable *)v126;

  uint64_t v128 = [MEMORY[0x1E4F1CA48] array];
  pendingResponsesForAccessoryFinder = v43->_pendingResponsesForAccessoryFinder;
  v43->_pendingResponsesForAccessoryFinder = (NSMutableArray *)v128;

  uint64_t v130 = [MEMORY[0x1E4F1CA60] dictionary];
  pendingRemoteSessions = v43->_pendingRemoteSessions;
  v43->_pendingRemoteSessions = (NSMutableDictionary *)v130;

  uint64_t v132 = [MEMORY[0x1E4F1CA80] set];
  pendingResidentSetupSessions = v43->_pendingResidentSetupSessions;
  v43->_pendingResidentSetupSessions = (NSMutableSet *)v132;

  HMDispatchQueueNameString();
  id v134 = objc_claimAutoreleasedReturnValue();
  id v135 = (const char *)[v134 UTF8String];
  id v136 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v137 = dispatch_queue_create(v135, v136);
  clientConnectionQueue = v43->_clientConnectionQueue;
  v43->_clientConnectionQueue = (OS_dispatch_queue *)v137;

  id v139 = [[HMDClientConnection alloc] initWithHomeManager:v43 queue:v43->_clientConnectionQueue messageDispatcher:*p_messageDispatcher];
  clientConnectiouint64_t n = v43->_clientConnection;
  v43->_clientConnectiouint64_t n = v139;

  id v141 = [[HMDAssistantGather alloc] initWithHomeManager:v43 queue:v43->_clientConnectionQueue];
  gatherer = v43->_gatherer;
  v43->_gatherer = v141;

  id v143 = [(HMDHomeManager *)v43 _getAssistantHashingData];
  [(HMDHomeManager *)v43 _setAssistantHashingData:v143];

  long long v144 = +[HMDLaunchHandler sharedHandler];
  [v144 removePersistentRelaunchRegistrationsIfNecessary];

  uint64_t v145 = [MEMORY[0x1E4F1CA60] dictionary];
  pendingFragmentationStreauint64_t m = v43->_pendingFragmentationStream;
  v43->_pendingFragmentationStreauint64_t m = (NSMutableDictionary *)v145;

  uint64_t v147 = +[HMDPersistentStore unarchiveIDSDataSyncJournal];
  pendingDataSyncAcks = v43->_pendingDataSyncAcks;
  v43->_pendingDataSyncAcks = (NSMutableDictionary *)v147;

  v43->_ignoreFirstTimeReachabilityChanged = 1;
  uint64_t v149 = [MEMORY[0x1E4F1CA80] set];
  dialogCancelationContexts = v43->_dialogCancelationContexts;
  v43->_dialogCancelationContexts = (NSMutableSet *)v149;

  uint64_t v151 = +[HMDLocation sharedManager];
  locationHandler = v43->_locationHandler;
  v43->_locationHandler = (HMDLocation *)v151;

  uint64_t v153 = +[HMDFMFHandler sharedHandler];
  fmfHandler = v43->_fmfHandler;
  v43->_fmfHandler = (HMDFMFHandler *)v153;

  v43->_needToCleanUpKeys = 0;
  long long v155 = [[HMDCHIPDataSource alloc] initWithHomeManager:v43];
  chipDataSource = v43->_chipDataSource;
  v43->_chipDataSource = v155;

  uint64_t v157 = [[HMDAccessorySetupManager alloc] initWithWorkQueue:self->_workQueue homeManager:v43];
  accessorySetupManager = v43->_accessorySetupManager;
  v43->_accessorySetupManager = v157;

  [(HMDAccessorySetupManager *)v43->_accessorySetupManager configure];
  id v159 = [HMDAccessorySetupCoordinator alloc];
  workQueue = self->_workQueue;
  long long v161 = [(HMDAccessorySetupManager *)v43->_accessorySetupManager messageDispatcher];
  long long v162 = [(HMDAccessoryBrowser *)v43->_accessoryBrowserInternal chipAccessoryServerBrowser];
  uint64_t v163 = [(HMDAccessorySetupCoordinator *)v159 initWithWorkQueue:workQueue messageDispatcher:v161 chipAccessoryServerBrowser:v162 chipDataSource:v43->_chipDataSource];
  accessorySetupCoordinator = v43->_accessorySetupCoordinator;
  v43->_accessorySetupCoordinator = (HMDAccessorySetupCoordinator *)v163;

  [(HMDAccessorySetupCoordinator *)v43->_accessorySetupCoordinator configure];
  [(HMDAccessorySetupManager *)v43->_accessorySetupManager setAccessorySetupCoordinator:v43->_accessorySetupCoordinator];
  long long v165 = [[HMDMTSPairingServer alloc] initWithAccessoryBrowser:v546];
  long long v166 = [[HMDMTSDeviceSetupServer alloc] initWithAccessorySetupManager:v43->_accessorySetupManager];
  long long v167 = [[HMDMTSAuthorizationServer alloc] initWithAccountManager:v43->_appleAccountManager];
  id v168 = [[HMDMTSXPCServer alloc] initWithPairingServer:v165 deviceSetupServer:v166 authorizationServer:v167];
  mtsXPCServer = v43->_mtsXPCServer;
  v43->_mtsXPCServer = v168;

  [(HMDMTSXPCServer *)v43->_mtsXPCServer start];
  long long v170 = [HMDCameraRecordingLoadBalancer alloc];
  id v171 = objc_alloc_init(MEMORY[0x1E4F69838]);
  uint64_t v172 = [(HMDCameraRecordingLoadBalancer *)v170 initWithHomeManager:v43 resourceUsageMonitor:v171];
  cameraLoadBalancer = v43->_cameraLoadBalancer;
  v43->_cameraLoadBalancer = (HMDCameraRecordingLoadBalancer *)v172;

  [(HMDCameraRecordingLoadBalancer *)v43->_cameraLoadBalancer start];
  id v174 = [[HMDCameraClipsQuotaMessenger alloc] initWithWorkQueue:self->_workQueue messageDispatcher:*p_messageDispatcher];
  cameraClipsQuotaMessenger = v43->_cameraClipsQuotaMessenger;
  v43->_cameraClipsQuotaMessenger = v174;

  unint64_t v21 = 0x1E4F1C000uLL;
  [(HMDCameraClipsQuotaMessenger *)v43->_cameraClipsQuotaMessenger configure];

  long long v19 = &OBJC_IVAR___HMDCameraClipSignificantEventBulletin__home;
  id v18 = v547;
  p_superclass = HMDBackingStoreLocal.superclass;
LABEL_36:
  id v176 = [[HMDMicroLocationManager alloc] initWithLocationManager:*(Class *)((char *)&self->super.super.isa + v19[329])];
  microLocationManager = self->_microLocationManager;
  self->_microLocationManager = v176;

  long long v178 = [[HMDMicroLocationLogEventObserver alloc] initWithDataSource:self microLocationManager:self->_microLocationManager];
  microLocationLogEventObserver = self->_microLocationLogEventObserver;
  self->_microLocationLogEventObserver = v178;

  self->_siriSyncNotificationTime = 0;
  int64_t v180 = [p_superclass + 459 deviceCapabilities];
  int v181 = [v180 supportsHomeInvitation];

  if (v181)
  {
    uint64_t v182 = [HMDHH1IDSInvitationManager alloc];
    uint64_t v183 = [(HMDHomeManager *)self workQueue];
    long long v184 = [(HMDHH1IDSInvitationManager *)v182 initWithHomeManager:self workQueue:v183];
    idsInvitationManager = self->_idsInvitationManager;
    self->_idsInvitationManager = v184;
  }
  uint64_t v186 = [*(id *)(v21 + 2688) set];
  mergeIDsOfUsersOfRemovedSharedHomes = self->_mergeIDsOfUsersOfRemovedSharedHomes;
  self->_mergeIDsOfUsersOfRemovedSharedHomes = v186;

  self->_homeDataLoadedFromArchive = v18 != 0;
  unint64_t v188 = 0x1E4F1C000;
  if (v18) {
    char v189 = [v18 accessAllowedWhenLocked];
  }
  else {
    char v189 = isiOSDevice();
  }
  self->_accessAllowedWhenLocked = v189;
  uint64_t v190 = [v18 unprocessedOperationIdentifiers];

  if (v190)
  {
    long long v191 = *(void **)(v21 + 2688);
    long long v192 = [v18 unprocessedOperationIdentifiers];
    __int16 v193 = [v191 setWithArray:v192];
    unprocessedOperationModelIdentifiers = self->_unprocessedOperationModelIdentifiers;
    self->_unprocessedOperationModelIdentifiers = v193;

LABEL_43:
    goto LABEL_45;
  }
  if (!self->_unprocessedOperationModelIdentifiers)
  {
    id v301 = [*(id *)(v21 + 2688) set];
    long long v192 = self->_unprocessedOperationModelIdentifiers;
    self->_unprocessedOperationModelIdentifiers = v301;
    goto LABEL_43;
  }
LABEL_45:
  __int16 v195 = [v18 homes];

  if (v195)
  {
    long long v196 = [v18 homes];
    [(HMDHomeManager *)self setHomes:v196];
  }
  if ([v18 dataVersion] <= 2)
  {
    long long v575 = 0u;
    long long v576 = 0u;
    long long v573 = 0u;
    long long v574 = 0u;
    long long v197 = self->_homes;
    uint64_t v198 = [(NSMutableArray *)v197 countByEnumeratingWithState:&v573 objects:v597 count:16];
    if (v198)
    {
      uint64_t v199 = v198;
      uint64_t v200 = *(void *)v574;
      do
      {
        for (uint64_t i = 0; i != v199; ++i)
        {
          if (*(void *)v574 != v200) {
            objc_enumerationMutation(v197);
          }
          uint64_t v202 = *(void **)(*((void *)&v573 + 1) + 8 * i);
          uint64_t v203 = [v202 allowsRemoteAccess];
          long long v569 = 0u;
          long long v570 = 0u;
          long long v571 = 0u;
          long long v572 = 0u;
          id v204 = [v202 users];
          uint64_t v205 = [v204 countByEnumeratingWithState:&v569 objects:v596 count:16];
          if (v205)
          {
            uint64_t v206 = v205;
            uint64_t v207 = *(void *)v570;
            do
            {
              for (uint64_t j = 0; j != v206; ++j)
              {
                if (*(void *)v570 != v207) {
                  objc_enumerationMutation(v204);
                }
                [*(id *)(*((void *)&v569 + 1) + 8 * j) setRemoteAccessAllowed:v203];
              }
              uint64_t v206 = [v204 countByEnumeratingWithState:&v569 objects:v596 count:16];
            }
            while (v206);
          }
        }
        uint64_t v199 = [(NSMutableArray *)v197 countByEnumeratingWithState:&v573 objects:v597 count:16];
      }
      while (v199);
    }

    id v18 = v547;
    p_superclass = HMDBackingStoreLocal.superclass;
    unint64_t v188 = 0x1E4F1C000uLL;
  }
  __int16 v209 = [v18 primaryHomeUUID];
  primaryHomeUUID = self->_primaryHomeUUID;
  self->_primaryHomeUUID = v209;

  self->_homeManagerZoneFirstFetch = 1;
  uint64_t v211 = *(void **)(v188 + 2632);
  __int16 v212 = [v18 cloudZones];
  id v213 = [v211 arrayWithArray:v212];
  cloudZones = self->_cloudZones;
  self->_cloudZones = v213;

  uint64_t v215 = [v18 lastCurrentHomeUUID];
  lastCurrentHomeUUID = self->_lastCurrentHomeUUID;
  self->_lastCurrentHomeUUID = v215;

  long long v217 = [v18 dataTag];
  dataTag = self->_dataTag;
  self->_dataTag = v217;

  uint64_t v219 = [v18 UUIDsOfRemovedHomes];
  if (v219 && (uint64_t v220 = (void *)v219, v221 = isWatch(), v220, !v221))
  {
    uint64_t v224 = *(void **)(v188 + 2632);
    long long v223 = [v18 UUIDsOfRemovedHomes];
    id v225 = [v224 arrayWithArray:v223];
    uuidsOfRemovedHomes = self->_uuidsOfRemovedHomes;
    self->_uuidsOfRemovedHomes = v225;
  }
  else
  {
    long long v222 = [*(id *)(v188 + 2632) array];
    long long v223 = self->_uuidsOfRemovedHomes;
    self->_uuidsOfRemovedHomes = v222;
  }

  self->_residentEnabledState = [v18 residentEnabledState];
  int v227 = getAssistantConfigurationVersion();
  self->_assistantGenerationCounter = [v227 unsignedIntegerValue];

  self->_homeDatabaseSize = 0;
  uint64_t v228 = [v18 UUIDsOfRemovedHomes];
  if (v228 && (uint64_t v229 = (void *)v228, v230 = isWatch(), v229, !v230))
  {
    uint64_t v233 = *(void **)(v188 + 2632);
    v232 = [v18 UUIDsOfRemovedHomes];
    long long v234 = [v233 arrayWithArray:v232];
    __int16 v235 = self->_uuidsOfRemovedHomes;
    self->_uuidsOfRemovedHomes = v234;
  }
  else
  {
    unsigned int v231 = [*(id *)(v188 + 2632) array];
    v232 = self->_uuidsOfRemovedHomes;
    self->_uuidsOfRemovedHomes = v231;
  }

  long long v236 = [p_superclass + 459 deviceCapabilities];
  int v237 = [v236 supportsFirmwareUpdate];

  if (v237)
  {
    id v238 = (void *)MEMORY[0x1D9452090]();
    char v239 = self;
    HMFGetOSLogHandle();
    double v240 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v240, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      id v241 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)long long buf = 138543362;
      *(void *)&uint8_t buf[4] = v241;
      _os_log_impl(&dword_1D49D5000, v240, OS_LOG_TYPE_DEBUG, "%{public}@Starting AccessoryFirmwareUpdateManager", buf, 0xCu);
    }
    uint64_t v242 = [[HMDAccessoryFirmwareUpdateManager alloc] initWithHomeManager:v239];
    accessoryFirmwareUpdateManager = v239->_accessoryFirmwareUpdateManager;
    v239->_accessoryFirmwareUpdateManager = v242;
  }
  if ((_os_feature_enabled_impl() & 1) != 0
    || CFPreferencesGetAppBooleanValue(@"MatterOTA", @"/Library/Managed Preferences/mobile/com.apple.homed.plist", 0))
  {
    uint64_t v244 = [[HMDMatterSoftwareUpdateProviderDelegate alloc] initWithHomeManager:self accessoryFirmwareUpdateManager:self->_accessoryFirmwareUpdateManager];
    matterSoftwareUpdateProviderDelegate = self->_matterSoftwareUpdateProviderDelegate;
    self->_matterSoftwareUpdateProviderDelegate = v244;
  }
  v246 = [v18 accessories];
  __int16 v247 = [v18 homes];
  [(HMDHomeManager *)self _associateAccessories:v246 withHomes:v247];

  [(HMDHomeManager *)self _auditKeychainEntries];
  if ([(HMDHomeManager *)self _updateAccessoriesConfigured]) {
    -[HMDHomeManager _postPreferencesChangedNotification](self);
  }
  long long v567 = 0u;
  long long v568 = 0u;
  long long v565 = 0u;
  long long v566 = 0u;
  uint64_t v248 = [v18 homes];
  uint64_t v249 = [v248 countByEnumeratingWithState:&v565 objects:v595 count:16];
  if (v249)
  {
    uint64_t v250 = v249;
    uint64_t v251 = *(void *)v566;
    do
    {
      for (uint64_t k = 0; k != v250; ++k)
      {
        if (*(void *)v566 != v251) {
          objc_enumerationMutation(v248);
        }
        [*(id *)(*((void *)&v565 + 1) + 8 * k) fixupHomeAfterDecoding];
      }
      uint64_t v250 = [v248 countByEnumeratingWithState:&v565 objects:v595 count:16];
    }
    while (v250);
  }

  v253 = [v18 incomingInvitations];
  uint64_t v254 = (void *)[v253 mutableCopy];

  uint64_t v255 = v254;
  if (!v254)
  {
    uint64_t v255 = [*(id *)(v188 + 2632) array];
  }
  objc_storeStrong((id *)&self->_incomingInvitations, v255);
  if (!v254) {

  }
  if (self->_residentEnabledState == 1)
  {
    v256 = [MEMORY[0x1E4F65548] productInfo];
    uint64_t v257 = [v256 productClass];

    if (v257 == 4)
    {
      v258 = (void *)MEMORY[0x1D9452090]();
      v259 = self;
      HMFGetOSLogHandle();
      v260 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v260, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        id v261 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)long long buf = 138543362;
        *(void *)&uint8_t buf[4] = v261;
        _os_log_impl(&dword_1D49D5000, v260, OS_LOG_TYPE_DEFAULT, "%{public}@Force enabling as a resident", buf, 0xCu);
      }
      self->_residentEnabledState = 2;
    }
  }
  if (a12)
  {
    v262 = [(HMDHomeManager *)self uuid];
    [(HMDHomeManager *)self updateGenerationCounterWithReason:@"ReloadHomeData" sourceUUID:v262 shouldNotifyClients:0];

    v263 = [(HMDHomeManager *)self cloudDataSyncStateFilter];
    v264 = [(HMDHomeManager *)self homes];
    objc_msgSend(v263, "updateTotalHomes:", objc_msgSend(v264, "count"));

    v265 = [(HMDHomeManager *)self cloudDataSyncStateFilter];
    [v265 updateLocalDataDecryptionFailed:v537];

    goto LABEL_114;
  }
  uint64_t v266 = HMFUptime();
  double v268 = v267;
  uint64_t v269 = (void *)MEMORY[0x1D9452090](v266);
  v270 = self;
  HMFGetOSLogHandle();
  v271 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v271, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    id v272 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)long long buf = 138544386;
    *(void *)&uint8_t buf[4] = v272;
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&buf[14] = @"homeManagerInitStart";
    *(_WORD *)&buf[22] = 2112;
    v584 = @"Start backing store setup";
    __int16 v585 = 2114;
    v586 = @"state";
    __int16 v587 = 2112;
    v588 = @"homeManagerLoadingBackingStore";
    _os_log_impl(&dword_1D49D5000, v271, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\"", buf, 0x34u);
  }
  v273 = [MEMORY[0x1E4F6A2A0] sharedInstance];
  id v274 = objc_alloc(MEMORY[0x1E4F6A2B0]);
  v593 = @"state";
  v594 = @"homeManagerLoadingBackingStore";
  v275 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v594 forKeys:&v593 count:1];
  v276 = (void *)[v274 initWithTag:@"homeManagerInitStart" data:v275];
  uint64_t v277 = [MEMORY[0x1E4F653F0] currentTagProcessorList];
  [v273 submitTaggedEvent:v276 processorList:v277];

  uint64_t v278 = v542[2](v542, v270, 0);
  backingStore = v270->_backingStore;
  v270->_backingStore = (HMDBackingStore *)v278;

  [(HMDBackingStore *)v270->_backingStore setDelegate:v270];
  v280 = [(HMDHomeManager *)v270 appleAccountManager];
  [v280 configureWithBackingStore:v270->_backingStore];

  v281 = [(HMDHomeManager *)v270 remoteAccountManager];
  [v281 setBackingStore:v270->_backingStore];

  v282 = (void *)MEMORY[0x1D9452090]();
  uint64_t v283 = v270;
  HMFGetOSLogHandle();
  uint64_t v284 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v284, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v285 = (id)objc_claimAutoreleasedReturnValue();
    v286 = NSString;
    HMFUptime();
    objc_msgSend(v286, "stringWithFormat:", @"%.3f", v287 - v268);
    id v288 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)long long buf = 138544898;
    *(void *)&uint8_t buf[4] = v285;
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&buf[14] = @"homeManagerInitStart";
    *(_WORD *)&buf[22] = 2112;
    v584 = @"Backing store setup done";
    __int16 v585 = 2114;
    v586 = @"state";
    __int16 v587 = 2112;
    v588 = @"homeManagerLoadedBackingStore";
    __int16 v589 = 2114;
    v590 = @"duration";
    __int16 v591 = 2112;
    id v592 = v288;
    _os_log_impl(&dword_1D49D5000, v284, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x48u);
  }
  v289 = [MEMORY[0x1E4F6A2A0] sharedInstance];
  id v290 = objc_alloc(MEMORY[0x1E4F6A2B0]);
  char v291 = NSString;
  HMFUptime();
  id v293 = objc_msgSend(v291, "stringWithFormat:", @"%.3f", v292 - v268);
  v294 = HMDTaggedLoggingCreateDictionary();
  v295 = objc_msgSend(v290, "initWithTag:data:", @"homeManagerInitStart", v294, @"state", @"homeManagerLoadedBackingStore", @"duration", v293);
  id v296 = [MEMORY[0x1E4F653F0] currentTagProcessorList];
  [v289 submitTaggedEvent:v295 processorList:v296];

  id v297 = +[HMDDeviceCapabilities deviceCapabilities];
  LODWORD(v295) = [v297 supportsCloudDataSync];

  id v18 = v547;
  if (v295)
  {
    if (disableCloudDataSync)
    {
      uint64_t v298 = (void *)MEMORY[0x1D9452090]();
      HMFGetOSLogHandle();
      uint64_t v299 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v299, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        id v300 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)long long buf = 138543362;
        *(void *)&uint8_t buf[4] = v300;
        _os_log_impl(&dword_1D49D5000, v299, OS_LOG_TYPE_DEFAULT, "%{public}@Not creating the cloud data sync filter due to preference setting present on the device", buf, 0xCu);
      }
      v283->_accountActive = 1;
      goto LABEL_113;
    }
    if (enableRetailDemoSetup || v283->_demoFinalized)
    {
      uint64_t v302 = (void *)MEMORY[0x1D9452090]();
      HMFGetOSLogHandle();
      char v303 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v303, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        id v304 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)long long buf = 138543362;
        *(void *)&uint8_t buf[4] = v304;
        _os_log_impl(&dword_1D49D5000, v303, OS_LOG_TYPE_DEFAULT, "%{public}@Not creating the cloud data sync filter because the device is in demo mode", buf, 0xCu);
      }
      v283->_accountActive = 1;
      v305 = [(HMDHomeManager *)v283 homes];
      objc_msgSend(v305, "hmf_enumerateWithAutoreleasePoolUsingBlock:", &__block_literal_global_510);

      [(HMDHomeManager *)v283 _scheduleSendHomeDataToAllWatches];
      goto LABEL_113;
    }
    +[HMDPersistentStore removeServerTokenDataFile];
    v473 = [[HMDCloudCache alloc] initWithBackingStore:v270->_backingStore workQueue:v283->_workQueue];
    v474 = dispatch_group_create();
    dispatch_group_enter(v474);
    v563[0] = MEMORY[0x1E4F143A8];
    v563[1] = 3221225472;
    v563[2] = __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_2;
    v563[3] = &unk_1E6A197F0;
    v475 = v474;
    v564 = v475;
    v476 = (void *)MEMORY[0x1D9452090]([(HMDCloudCache *)v473 createAndFetchZonesFromBackingStore:v563]);
    HMFGetOSLogHandle();
    v477 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v477, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v478 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)long long buf = 138543362;
      *(void *)&uint8_t buf[4] = v478;
      _os_log_impl(&dword_1D49D5000, v477, OS_LOG_TYPE_INFO, "%{public}@Waiting for cloudCache to be created", buf, 0xCu);
    }
    dispatch_group_wait(v475, 0xFFFFFFFFFFFFFFFFLL);
    v479 = [(HMDCloudCache *)v473 legacyZone];
    char v480 = [v479 isHomeDataRecordAvailable];

    v536 = v475;
    if (v537)
    {
      v481 = (void *)MEMORY[0x1D9452090]();
      HMFGetOSLogHandle();
      v482 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v482, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        id v483 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)long long buf = 138543362;
        *(void *)&uint8_t buf[4] = v483;
        _os_log_impl(&dword_1D49D5000, v482, OS_LOG_TYPE_DEFAULT, "%{public}@Dropping locally cached legacy cloud record because local decryption has failed", buf, 0xCu);
      }
      v484 = [(HMDCloudCache *)v473 legacyZone];
      [v484 setServerChangeToken:0];

      v485 = [(HMDCloudCache *)v473 legacyZone];
      [v485 dropCachedRecords];

      v486 = (void *)MEMORY[0x1D9452090]();
      v487 = v283;
      HMFGetOSLogHandle();
      v488 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v488, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v489 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)long long buf = 138543362;
        *(void *)&uint8_t buf[4] = v489;
        _os_log_impl(&dword_1D49D5000, v488, OS_LOG_TYPE_INFO, "%{public}@Resetting databaseServerChangeToken because record conflict", buf, 0xCu);

        id v18 = v547;
      }

      [(HMDCloudCache *)v473 setDatabaseServerChangeToken:0];
      [(HMDCloudCache *)v473 persistDatabaseServerChangeToken];
    }
    else if (v480)
    {
      unsigned int v532 = 1;
LABEL_201:
      v498 = [(HMDCloudCache *)v473 legacyZone];
      v499 = [v498 serverChangeToken];
      BOOL v500 = v499 != 0;

      v501 = v473;
      v502 = [(HMDCloudCache *)v473 homeManagerZone];
      v503 = [v502 serverChangeToken];
      BOOL v504 = v503 != 0;

      v505 = [(HMDHomeManager *)v283 appleAccountManager];
      v506 = [HMDCloudDataSyncStateFilter alloc];
      v507 = [(HMDHomeManager *)v283 messageDispatcher];
      v508 = [(HMDHomeManager *)v283 homes];
      uint64_t v509 = [v508 count];
      v533 = v505;
      v510 = [v505 account];
      LOBYTE(v530) = v537;
      v511 = [(HMDCloudDataSyncStateFilter *)v506 initWithName:@"CloudDataSync" homeManager:v283 messageDispatcher:v507 serverTokenAvailable:v500 homeDataHasBeenDecrypted:v532 homeManagerServerTokenAvailable:v504 localDataDecryptionFailed:v530 totalHomes:v509 currentAccount:v510];

      [v541 addMessageFilter:v511];
      objc_storeStrong((id *)&v283->_cloudDataSyncStateFilter, v511);
      v512 = +[HMDAppleAccountSettings sharedSettings];
      uint64_t v513 = [v512 isHomeEnabled];

      v514 = (void *)MEMORY[0x1D9452090]();
      HMFGetOSLogHandle();
      v515 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v515, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        id v516 = (id)objc_claimAutoreleasedReturnValue();
        v517 = v516;
        v518 = "not ";
        if (v513) {
          v518 = "";
        }
        *(_DWORD *)long long buf = 138543618;
        *(void *)&uint8_t buf[4] = v516;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v518;
        _os_log_impl(&dword_1D49D5000, v515, OS_LOG_TYPE_DEFAULT, "%{public}@Updating the cloud sync filter state with iCloud switch state to: %senabled", buf, 0x16u);
      }
      v519 = [(HMDHomeManager *)v283 cloudDataSyncStateFilter];
      [v519 updateiCloudSwitchState:v513];

      v520 = [[HMDCloudManagerDataSource alloc] initWithHomeManager:v283];
      cloudDataSource = v283->_cloudDataSource;
      v283->_cloudDataSource = v520;

      v522 = [HMDCloudManager alloc];
      v523 = [(HMDHomeManager *)v283 cloudDataSource];
      v524 = [(HMDHomeManager *)v283 syncManager];
      v525 = [(HMDHomeManager *)v283 logEventSubmitter];
      uint64_t v526 = [(HMDCloudManager *)v522 initWithMessageDispatcher:v543 cloudDataSyncStateFilter:v511 cloudCache:v501 delegate:v283 dataSource:v523 syncManager:v524 logEventSubmitter:v525 callbackQueue:v283->_workQueue];
      cloudDataSyncManager = v283->_cloudDataSyncManager;
      v283->_cloudDataSyncManager = (HMDCloudManager *)v526;

      if (v513 && [v533 isLoggedInToPrimaryAccount]) {
        [(HMDCloudManager *)v283->_cloudDataSyncManager registerForPushNotifications];
      }
      v528 = [(HMDHomeManager *)v283 appleAccountManager];
      v529 = [(HMDCloudManager *)v283->_cloudDataSyncManager cloudCache];
      [v528 setCloudCache:v529];

      id v18 = v547;
      goto LABEL_113;
    }
    if ([v18 dataVersion] >= 4 && objc_msgSend(v18, "schemaVersion") <= 4)
    {
      v490 = (void *)MEMORY[0x1D9452090]();
      HMFGetOSLogHandle();
      v491 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v491, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        id v492 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)long long buf = 138543362;
        *(void *)&uint8_t buf[4] = v492;
        _os_log_impl(&dword_1D49D5000, v491, OS_LOG_TYPE_DEFAULT, "%{public}@Resetting the legacy server token for migration", buf, 0xCu);
      }
      v493 = [(HMDCloudCache *)v473 legacyZone];
      [v493 setServerChangeToken:0];

      v494 = (void *)MEMORY[0x1D9452090]();
      v495 = v283;
      HMFGetOSLogHandle();
      v496 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v496, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v497 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)long long buf = 138543362;
        *(void *)&uint8_t buf[4] = v497;
        _os_log_impl(&dword_1D49D5000, v496, OS_LOG_TYPE_INFO, "%{public}@Resetting databaseServerChangeToken for migration", buf, 0xCu);
      }
      [(HMDCloudCache *)v473 setDatabaseServerChangeToken:0];
      [(HMDCloudCache *)v473 persistDatabaseServerChangeToken];
    }
    unsigned int v532 = 0;
    goto LABEL_201;
  }
LABEL_113:
  [(HMDHomeManager *)v283 _registerForMessages];
  [(HMDHomeManager *)v283 __checkForBootTimeLogout];
LABEL_114:
  uint64_t v306 = objc_alloc_init(HMDIDSServerBag);
  [(HMDHomeManager *)self setIdsServerBag:v306];

  v307 = [(HMDHomeManager *)self idsServerBag];
  [v307 setDelegate:self];

  uint64_t v308 = [v18 homes];
  v309 = (void *)v308;
  if (v308) {
    uint64_t v310 = v308;
  }
  else {
    uint64_t v310 = MEMORY[0x1E4F1CBF0];
  }
  BOOL v311 = [(HMDHomeManager *)self _configureHomes:v310 uncommittedTransactions:v545];

  -[HMDHomeManager setRecoveryVersion:](self, "setRecoveryVersion:", [v18 recoveryVersion]);
  -[HMDHomeManager migrateModelObjectsToCloud:schemaVersion:](self, "migrateModelObjectsToCloud:schemaVersion:", [v18 dataVersion], objc_msgSend(v18, "schemaVersion"));
  uint64_t v312 = [HMDApplicationData alloc];
  uint64_t v313 = [v18 applicationData];
  char v314 = [v313 dictionary];
  uint64_t v315 = [(HMDApplicationData *)v312 initWithDictionary:v314 parentUUID:self->_uuid];
  appData = self->_appData;
  self->_appData = v315;

  if (a12)
  {
    [(HMDHomeManager *)self updatePowerAssertion];
    char v317 = [v18 accessories];
    uint64_t v318 = [v317 count];

    if (v318)
    {
      v319 = [(HMDHomeManager *)self accessoryBrowserInternal];
      [v319 startDiscoveringPairedAccessories];
    }
  }
  else
  {
    [(HMDPowerManager *)self->_powerManager start];
    [(HMDHomeManager *)self updatePowerAssertion];
    [(HMDHomeManager *)self _monitorReachability];
    [(HMDHomeManager *)self _checkForAccountChanged];
    [(HMDHomeManager *)self _fetchDataFromCloud];
    v320 = [(HMDHomeManager *)self mobileAssetManager];
    [v320 handleMetadataAssetUpdated];

    v321 = [(HMDHomeManager *)self notificationCenter];
    [v321 addObserver:self selector:sel_accountAvailabilityChanged_ name:*MEMORY[0x1E4F19BE0] object:0];

    v322 = [(HMDHomeManager *)self notificationCenter];
    long long v323 = +[HMDAppleAccountSettings sharedSettings];
    [v322 addObserver:self selector:sel_handleAccountSettingsUpdate_ name:@"HMDAppleAccountSettingsUpdatedNotification" object:v323];

    long long v324 = +[HMDXPCMessageTransport defaultTransport];
    long long v325 = [v324 queue];
    long long v326 = [(HMDHomeManager *)self messageTargetUUID];
    long long v327 = [(HMDHomeManager *)self logEventSubmitter];
    long long v328 = +[HMDHomeManagerXPCClientConnectionsManagerFactory makeInstanceWithQueue:v325 messageDispatcher:v543 messageTargetUUID:v326 accessoryBrowser:v546 logEventSubmitter:v327];
    connectionsManager = self->_connectionsManager;
    self->_connectionsManager = v328;

    [(HMDHomeManagerXPCClientConnectionsManager *)self->_connectionsManager configure];
    long long v330 = [v18 accessories];
    BOOL v331 = [v330 count] != 0;

    [(HMDAccessoryBrowser *)self->_accessoryBrowserInternal activate:v331];
    if (isiOSDevice())
    {
      id v332 = objc_alloc(MEMORY[0x1E4F65580]);
      long long v333 = (HMFTimer *)[v332 initWithTimeInterval:4 options:(double)(unint64_t)checkRemoteAccessTimeout];
      remoteAccessHealthMonitorTimer = self->_remoteAccessHealthMonitorTimer;
      self->_remoteAccessHealthMonitorTimer = v333;

      [(HMFTimer *)self->_remoteAccessHealthMonitorTimer setDelegate:self];
      long long v335 = self->_remoteAccessHealthMonitorTimer;
      long long v336 = [(HMDHomeManager *)self workQueue];
      [(HMFTimer *)v335 setDelegateQueue:v336];

      [(HMFTimer *)self->_remoteAccessHealthMonitorTimer resume];
    }
  }
  long long v561 = 0u;
  long long v562 = 0u;
  long long v559 = 0u;
  long long v560 = 0u;
  long long v337 = [(HMDHomeManager *)self homes];
  uint64_t v338 = [v337 countByEnumeratingWithState:&v559 objects:v582 count:16];
  if (v338)
  {
    uint64_t v339 = v338;
    uint64_t v340 = *(void *)v560;
    do
    {
      for (uint64_t m = 0; m != v339; ++m)
      {
        if (*(void *)v560 != v340) {
          objc_enumerationMutation(v337);
        }
        long long v342 = *(void **)(*((void *)&v559 + 1) + 8 * m);
        long long v343 = [v342 migrateOwnedTriggers];
        if (v343) {
          [(HMDHomeManager *)self _saveWithReason:@"kAddTriggerRequestKey" information:v343 postSyncNotification:0];
        }
        [v342 checkTimerTriggers];
      }
      uint64_t v339 = [v337 countByEnumeratingWithState:&v559 objects:v582 count:16];
    }
    while (v339);
  }

  residentMesh = self->_residentMesh;
  self->_residentMesh = 0;

  long long v345 = +[HMDDeviceCapabilities deviceCapabilities];
  int v346 = [v345 isResidentCapable];

  if (v346)
  {
    long long v347 = (void *)MEMORY[0x1D9452090]();
    long long v348 = self;
    HMFGetOSLogHandle();
    long long v349 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v349, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      id v350 = (id)objc_claimAutoreleasedReturnValue();
      [(HMDHomeManager *)v348 isResidentEnabled];
      HMFBooleanToString();
      id v351 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)long long buf = 138543618;
      *(void *)&uint8_t buf[4] = v350;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v351;
      _os_log_impl(&dword_1D49D5000, v349, OS_LOG_TYPE_DEFAULT, "%{public}@Initialize resident mesh: %@", buf, 0x16u);
    }
    uint64_t v352 = [[HMDResidentMesh alloc] initWithHomeManager:v348 residentEnabled:[(HMDHomeManager *)v348 isResidentEnabled]];
    long long v353 = self->_residentMesh;
    self->_residentMesh = v352;
  }
  long long v354 = +[HMDDeviceCapabilities deviceCapabilities];
  int v355 = [v354 supportsKeyTransferServer];

  if (v355)
  {
    long long v356 = HMDKeyTransferAgentServer;
  }
  else
  {
    long long v357 = +[HMDDeviceCapabilities deviceCapabilities];
    int v358 = [v357 supportsKeyTransferClient];

    if (!v358) {
      goto LABEL_140;
    }
    long long v356 = HMDKeyTransferAgentClient;
  }
  long long v359 = (HMDKeyTransferAgent *)[[v356 alloc] initWithHomeManager:self];
  keyTransferAgent = self->_keyTransferAgent;
  self->_keyTransferAgent = v359;

LABEL_140:
  long long v361 = (void *)MEMORY[0x1D9452090]();
  long long v362 = self;
  HMFGetOSLogHandle();
  long long v363 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v363, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v364 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)long long buf = 138543362;
    *(void *)&uint8_t buf[4] = v364;
    _os_log_impl(&dword_1D49D5000, v363, OS_LOG_TYPE_INFO, "%{public}@Refreshing display names of the users and invites", buf, 0xCu);
  }
  [(HMDHomeManager *)v362 _handleContactStoreChanged];
  if (v311) {
    [(HMDHomeManager *)v362 _saveWithReason:@"kHomeConfigInternalRequestKey" information:0 saveOptions:3];
  }
  if (+[HMDHAPMetadata shouldUploadToCloudAfterHomedReady])
  {
    long long v365 = [(HMDHomeManager *)v362 homes];
    uint64_t v366 = [v365 count];

    if (v366)
    {
      long long v367 = (void *)MEMORY[0x1D9452090]();
      long long v368 = v362;
      HMFGetOSLogHandle();
      long long v369 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v369, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v370 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)long long buf = 138543362;
        *(void *)&uint8_t buf[4] = v370;
        _os_log_impl(&dword_1D49D5000, v369, OS_LOG_TYPE_INFO, "%{public}@Home manager is ready now and there is at least one home. Evaluating the necessity of uploading metadata to the cloud.", buf, 0xCu);
      }
      [(HMDHomeManager *)v368 evaluateToPushMetadataWhenHomeKitInUse];
    }
  }
  if (hasAssistantHashingKeyChanged())
  {
    long long v557 = 0u;
    long long v558 = 0u;
    long long v555 = 0u;
    long long v556 = 0u;
    long long v371 = [(HMDHomeManager *)v362 homes];
    uint64_t v372 = [v371 countByEnumeratingWithState:&v555 objects:v581 count:16];
    if (v372)
    {
      uint64_t v373 = v372;
      uint64_t v374 = *(void *)v556;
      do
      {
        for (uint64_t n = 0; n != v373; ++n)
        {
          if (*(void *)v556 != v374) {
            objc_enumerationMutation(v371);
          }
          [*(id *)(*((void *)&v555 + 1) + 8 * n) resetAccessoryHashedRouteIdentifiers];
        }
        uint64_t v373 = [v371 countByEnumeratingWithState:&v555 objects:v581 count:16];
      }
      while (v373);
    }

    [(HMDHomeManager *)v362 assistantSyncDataChanged:@"HMDAssistantEncryptionKeyChanged"];
  }
  else
  {
    v376 = [(HMDHomeManager *)v362 workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_535;
    block[3] = &unk_1E6A19B30;
    void block[4] = v362;
    dispatch_async(v376, block);
  }
  long long v552 = 0u;
  long long v553 = 0u;
  long long v550 = 0u;
  long long v551 = 0u;
  v377 = [(HMDHomeManager *)v362 homes];
  uint64_t v378 = [v377 countByEnumeratingWithState:&v550 objects:v580 count:16];
  if (v378)
  {
    uint64_t v379 = v378;
    uint64_t v380 = *(void *)v551;
    do
    {
      for (iuint64_t i = 0; ii != v379; ++ii)
      {
        if (*(void *)v551 != v380) {
          objc_enumerationMutation(v377);
        }
        [*(id *)(*((void *)&v550 + 1) + 8 * ii) updateLightProfilesSettingsWithRequiresHomeNotificationsEnabled:1];
      }
      uint64_t v379 = [v377 countByEnumeratingWithState:&v550 objects:v580 count:16];
    }
    while (v379);
  }

  v382 = [MEMORY[0x1E4F65530] sharedPreferences];
  v383 = [v382 preferenceForKey:@"memoryMonitorPeriod"];
  v384 = [v383 numberValue];

  id v385 = objc_alloc(MEMORY[0x1E4F65580]);
  v544 = v384;
  [v384 doubleValue];
  v386 = objc_msgSend(v385, "initWithTimeInterval:options:", 12);
  [(HMDHomeManager *)v362 setMemoryMonitorLogEventTimer:v386];

  v387 = [(HMDHomeManager *)v362 memoryMonitorLogEventTimer];
  [v387 setDelegate:v362];

  uint64_t v388 = [(HMDHomeManager *)v362 memoryMonitorLogEventTimer];
  v389 = [(HMDHomeManager *)v362 workQueue];
  [v388 setDelegateQueue:v389];

  v390 = [(HMDHomeManager *)v362 memoryMonitorLogEventTimer];
  [v390 resume];

  v391 = [HMDDuetPredictionSubscriber alloc];
  v392 = [(HMDHomeManager *)v362 workQueue];
  v393 = [(HMDHomeManager *)v362 messageDispatcher];
  v394 = [(HMDDuetPredictionSubscriber *)v391 initWithWorkQueue:v392 messageDispatcher:v393];
  [(HMDHomeManager *)v362 setDuetSubscriber:v394];

  v395 = [(HMDHomeManager *)v362 duetSubscriber];
  [v395 setDataSource:v362];

  v396 = [(HMDHomeManager *)v362 duetSubscriber];
  [v396 configure];

  if (v362)
  {
    v397 = [(HMDHomeManager *)v362 metricsManager];
    v398 = [v397 logEventDispatcher];
    v399 = [(HMDHomeManager *)v362 biomeLogEventObserver];
    *(void *)long long buf = objc_opt_class();
    *(void *)&buf[8] = objc_opt_class();
    *(void *)&buf[16] = objc_opt_class();
    v400 = [MEMORY[0x1E4F1C978] arrayWithObjects:buf count:3];
    [v398 addObserver:v399 forEventClasses:v400];

    v401 = [(HMDHomeManager *)v362 metricsManager];
    v402 = [v401 logEventDispatcher];
    v403 = [(HMDHomeManager *)v362 microLocationLogEventObserver];
    *(void *)long long buf = objc_opt_class();
    *(void *)&buf[8] = objc_opt_class();
    *(void *)&buf[16] = objc_opt_class();
    v404 = [MEMORY[0x1E4F1C978] arrayWithObjects:buf count:3];
    [v402 addObserver:v403 forEventClasses:v404];
  }
  [(HMDHomeManager *)v362 _notifyMetricsManagerOfConfigurationChange];
  if ([(HMDHomeManager *)v362 isResidentEnabled])
  {
    v405 = (void *)MEMORY[0x1D9452090]();
    v406 = v362;
    HMFGetOSLogHandle();
    v407 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v407, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v408 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)long long buf = 138543362;
      *(void *)&uint8_t buf[4] = v408;
      _os_log_impl(&dword_1D49D5000, v407, OS_LOG_TYPE_INFO, "%{public}@Resident is enabled. Create multi user settings metric event dispatcher, and register for daily event.", buf, 0xCu);
    }
    v409 = [HMDMultiUserSettingsMetricsEventDispatcher alloc];
    uuid = self->_uuid;
    v411 = [v406 metricsManager];
    v412 = [v411 logEventSubmitter];
    v413 = [v406 metricsManager];
    v414 = [v413 dailyScheduler];
    uint64_t v415 = [(HMDMultiUserSettingsMetricsEventDispatcher *)v409 initWithIdentifier:uuid logEventSubmitter:v412 dailyScheduler:v414];
    id v416 = v406[63];
    v406[63] = (id)v415;

    [v406[63] setDataSource:v406];
    [v406[63] registerForDailyMultiUserSettingsEvents];
  }
  uint64_t v417 = HMFUptime();
  double v419 = v418;
  v420 = (void *)MEMORY[0x1D9452090](v417);
  v421 = v362;
  HMFGetOSLogHandle();
  v422 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v422, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    id v423 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)long long buf = 138544386;
    *(void *)&uint8_t buf[4] = v423;
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&buf[14] = @"homeManagerInitStart";
    *(_WORD *)&buf[22] = 2112;
    v584 = @"Handling Home invitations";
    __int16 v585 = 2114;
    v586 = @"state";
    __int16 v587 = 2112;
    v588 = @"homeManagerHandledlingInvites";
    _os_log_impl(&dword_1D49D5000, v422, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\"", buf, 0x34u);
  }
  v424 = [MEMORY[0x1E4F6A2A0] sharedInstance];
  id v425 = objc_alloc(MEMORY[0x1E4F6A2B0]);
  v578 = @"state";
  v579 = @"homeManagerHandledlingInvites";
  v426 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v579 forKeys:&v578 count:1];
  v427 = (void *)[v425 initWithTag:@"homeManagerInitStart" data:v426];
  v428 = [MEMORY[0x1E4F653F0] currentTagProcessorList];
  [v424 submitTaggedEvent:v427 processorList:v428];

  v429 = (void *)MEMORY[0x1D9452090]([(HMDHomeManager *)v421 _pruneExpiredIncomingInvitations]);
  v430 = v421;
  HMFGetOSLogHandle();
  v431 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v431, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v432 = (id)objc_claimAutoreleasedReturnValue();
    v433 = NSString;
    HMFUptime();
    objc_msgSend(v433, "stringWithFormat:", @"%.3f", v434 - v419);
    id v435 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)long long buf = 138544898;
    *(void *)&uint8_t buf[4] = v432;
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&buf[14] = @"homeManagerInitStart";
    *(_WORD *)&buf[22] = 2112;
    v584 = @"Handled Home invitations";
    __int16 v585 = 2114;
    v586 = @"state";
    __int16 v587 = 2112;
    v588 = @"homeManagerHandledInvites";
    __int16 v589 = 2114;
    v590 = @"duration";
    __int16 v591 = 2112;
    id v592 = v435;
    _os_log_impl(&dword_1D49D5000, v431, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x48u);
  }
  v436 = [MEMORY[0x1E4F6A2A0] sharedInstance];
  id v437 = objc_alloc(MEMORY[0x1E4F6A2B0]);
  v438 = NSString;
  HMFUptime();
  v440 = objc_msgSend(v438, "stringWithFormat:", @"%.3f", v439 - v419);
  v441 = HMDTaggedLoggingCreateDictionary();
  v442 = objc_msgSend(v437, "initWithTag:data:", @"homeManagerInitStart", v441, @"state", @"homeManagerHandledInvites", @"duration", v440);
  v443 = [MEMORY[0x1E4F653F0] currentTagProcessorList];
  [v436 submitTaggedEvent:v442 processorList:v443];

  v538 = [HMDXPCEventRouterServer alloc];
  id v535 = [v430 messageTargetUUID];
  uint64_t v444 = *MEMORY[0x1E4F2D3E8];
  uint64_t v445 = *MEMORY[0x1E4F2D3F0];
  v446 = [v430 messageDispatcher];
  v447 = [v430 workQueue];
  v448 = [v430 notificationCenter];
  v449 = [v430 registrationForwardingEventRouter];
  v450 = [v430 memoryEventRouter];
  v451 = [v430 lastEventStore];
  v452 = [(HMDXPCEventRouterServer *)v538 initWithMessageUUID:v535 dataSource:v430 changeRegistrationsMessageName:v444 updateEventsMessageName:v445 messageDispatcher:v446 queue:v447 notificationCenter:v448 subscriptionProvider:v449 registrationEventRouter:v450 storeReadHandle:v451];
  [v430 setEventRouterXPCServer:v452];

  v453 = [v430 eventRouterXPCServer];
  [v453 configure];

  v454 = +[HMDDeviceCapabilities deviceCapabilities];
  LODWORD(v446) = [v454 isResidentCapable];

  if (v446)
  {
    v455 = (void *)MEMORY[0x1D9452090]();
    v456 = v430;
    HMFGetOSLogHandle();
    v457 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v457, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v458 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)long long buf = 138543362;
      *(void *)&uint8_t buf[4] = v458;
      _os_log_impl(&dword_1D49D5000, v457, OS_LOG_TYPE_INFO, "%{public}@Creating siriEndPointSettingsSyncManager", buf, 0xCu);
    }
    v459 = [HMDSiriEndpointSettingsSyncManager alloc];
    v460 = [v456 memoryEventRouter];
    v461 = [v456 notificationCenter];
    v462 = [v456 workQueue];
    v463 = [(HMDSiriEndpointSettingsSyncManager *)v459 initWithDataSource:v456 subscriptionProvider:v460 notificationCenter:v461 workQueue:v462];
    [v456 setSiriEndPointSettingsSyncManager:v463];

    v464 = [v456 siriEndPointSettingsSyncManager];
    [v464 configure];
  }
  v465 = +[HMDIDSServiceManager sharedManager];
  v466 = [v430 workQueue];
  v549[0] = MEMORY[0x1E4F143A8];
  v549[1] = 3221225472;
  v549[2] = __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_547;
  v549[3] = &unk_1E6A15680;
  v549[4] = v430;
  [v465 retrieveFirewallWithQueue:v466 completion:v549];

  [v430 setHasLoadedData:1];
  logAndPostNotification(@"HMDHomeManagerHomeDataLoadedNotification", v430, 0);
  [v430 autoAddWalletKeysOncePerDeviceSetup];
  [v430 updateHomeKitInUsePreferences];
  v467 = [v430 capabilitiesController];
  [v467 didFinishConfiguringHomes];

  v468 = [[HMDWidgetTimelineRefresher alloc] initWithHomeManager:v430];
  id v469 = v430[65];
  v430[65] = v468;

  [v430[65] configure];
  v470 = [v430 workQueue];
  v548[0] = MEMORY[0x1E4F143A8];
  v548[1] = 3221225472;
  v548[2] = __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_552;
  v548[3] = &unk_1E6A19B30;
  v548[4] = v430;
  dispatch_async(v470, v548);

  v471 = [v430 pairedAccessories];
  +[HMDCameraSnapshotManager cleanStaleSnapshotDirectoriesUsingCurrentAccessories:v471];

  v472 = (void *)MEMORY[0x1E4F1CFC8];
  if (*((unsigned char *)v430 + 30)) {
    v472 = (void *)MEMORY[0x1E4F1CFD0];
  }
  [v430 _setHomeConfigurationKey:*MEMORY[0x1E4F2ECC0] value:*v472];
}

void __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = HMFGetLogIdentifier();
    int v7 = 138543618;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Completed creating cloud cached with error %@", (uint8_t *)&v7, 0x16u);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_535(uint64_t a1)
{
  return [*(id *)(a1 + 32) _generateAssistantSyncDataAndIncrementVersion:0 requestSync:0 urgent:0 completion:0];
}

void __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_547(uint64_t a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    int v7 = [HMDIDSFirewallManagerContext alloc];
    uint64_t v8 = *(void *)(a1 + 32);
    __int16 v9 = [MEMORY[0x1E4F28EB8] defaultCenter];
    id v10 = [*(id *)(a1 + 32) workQueue];
    uint64_t v11 = [(HMDIDSFirewallManagerContext *)v7 initWithHomeManager:v8 IDSFirewall:v5 notificationCenter:v9 workQueue:v10];

    uint64_t v12 = [[HMDIDSFirewallManager alloc] initWithContext:v11];
    [*(id *)(a1 + 32) setIdsFirewallManager:v12];

    uint64_t v13 = [*(id *)(a1 + 32) idsFirewallManager];
    [v13 start];
  }
  else
  {
    uint64_t v14 = (void *)MEMORY[0x1D9452090]();
    id v15 = *(id *)(a1 + 32);
    double v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      id v17 = HMFGetLogIdentifier();
      int v18 = 138543618;
      long long v19 = v17;
      __int16 v20 = 2112;
      id v21 = v6;
      _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to retrieve IDSFirewall with error: %@", (uint8_t *)&v18, 0x16u);
    }
  }
}

uint64_t __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_552(uint64_t a1)
{
  return [*(id *)(a1 + 32) postFinishSetupForCurrentAccessoryFollowUpIfNeeded];
}

uint64_t __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke(uint64_t a1, void *a2)
{
  return [a2 setWatchSkipVersionCheck:1];
}

- (void)_migrateUniqueIdentifierPrefsIfNeeded
{
  void v7[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *MEMORY[0x1E4F2EC78];
  v7[0] = @"kAssistantTeamIdentifier";
  v7[1] = v2;
  id v7[2] = *MEMORY[0x1E4F2EC80];
  v7[3] = @"kUniqueDeviceIdentifierSaltkey";
  CFArrayRef v3 = [MEMORY[0x1E4F1C978] arrayWithObjects:v7 count:4];
  CFStringRef v4 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
  CFStringRef v5 = (const __CFString *)*MEMORY[0x1E4F1D3C8];
  CFDictionaryRef v6 = CFPreferencesCopyMultiple(v3, @"com.apple.homed", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  if ([(__CFDictionary *)v6 count])
  {
    CFPreferencesSetMultiple(0, v3, @"com.apple.homed", v4, v5);
    CFPreferencesSetMultiple(v6, 0, @"com.apple.homed.notbackedup", v4, v5);
  }
}

- (id)settingsControllerForAccessoryUUID:(id)a3 homeUUID:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  uint64_t v8 = [(HMDHomeManager *)self _accessoryOfCurrentDevice];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    __int16 v9 = v8;
  }
  else {
    __int16 v9 = 0;
  }
  id v10 = v9;

  uint64_t v11 = [v10 uuid];
  char v12 = objc_msgSend(v11, "hmf_isEqualToUUID:", v7);

  if (v12)
  {
    uint64_t v13 = [v10 home];
    uint64_t v14 = [v13 uuid];
    int v15 = objc_msgSend(v14, "hmf_isEqualToUUID:", v6);

    if (v15)
    {
      double v16 = [v10 currentAccessorySettingsController];
      goto LABEL_9;
    }
  }
  else
  {
  }
  double v16 = 0;
LABEL_9:

  return v16;
}

- (id)languageListProviderForHomeUUID:(id)a3
{
  CFArrayRef v3 = [(HMDHomeManager *)self _homeWithUUID:a3];
  CFStringRef v4 = [v3 unifiedLanguageValueListSettingDataProvider];

  return v4;
}

- (NSString)currentEventSource
{
  uint64_t v2 = [(HMDHomeManager *)self appleAccountManager];
  CFArrayRef v3 = [v2 device];

  if (v3)
  {
    CFStringRef v4 = [v3 identifier];
    CFStringRef v5 = [v4 UUIDString];
  }
  else
  {
    CFStringRef v4 = [MEMORY[0x1E4F29128] UUID];
    id v6 = [v4 UUIDString];
    CFStringRef v5 = [@"DeviceNotDetermined." stringByAppendingString:v6];
  }
  return (NSString *)v5;
}

- (void)invalidate
{
  CFArrayRef v3 = [(HMDHomeManager *)self notificationCenter];
  [v3 removeObserver:self];

  CFStringRef v4 = [(HMDHomeManager *)self messageDispatcher];
  [v4 deregisterReceiver:self];

  if (self->_generationCounterToken != -1)
  {
    CFStringRef v5 = [(HMDHomeManager *)self darwinNotificationProvider];
    [v5 notifyCancel:self->_generationCounterToken];
  }
  [(HMDHomeManager *)self deregisterForSignificantTimeChangeNotification];
}

- (void)dealloc
{
  [(HMDHomeManager *)self invalidate];
  v3.receiver = self;
  v3.super_class = (Class)HMDHomeManager;
  [(HMDHomeManager *)&v3 dealloc];
}

- (HMDHomeManager)initWithMessageDispatcher:(id)a3 accessoryBrowser:(id)a4 messageFilterChain:(id)a5 homeData:(id)a6 localDataDecryptionFailed:(BOOL)a7 identityRegistry:(id)a8 accountRegistry:(id)a9 metricsManager:(id)a10 darwinNotificationProvider:(id)a11 notificationCenter:(id)a12 backingStoreFactory:(id)a13 wifiManagerFactory:(id)a14 appleAccountManager:(id)a15 remoteAccountManager:(id)a16 userDefaults:(id)a17 biomeEventManager:(id)a18 logEventSubmitter:(id)a19 widgetConfigurationReader:(id)a20 configuringStateController:(id)a21 diagnosticInfoController:(id)a22 currentAccessorySetupMetricDispatcher:(id)a23 uncommittedTransactions:(id)a24
{
  BOOL v219 = a7;
  v277[1] = *MEMORY[0x1E4F143B8];
  id v244 = a3;
  id v243 = a4;
  id v27 = a5;
  id v242 = a6;
  id v241 = a8;
  id v239 = a9;
  id v238 = a10;
  id v232 = a11;
  id v231 = a12;
  id v237 = a13;
  aBlocuint64_t k = a14;
  id v230 = a15;
  id v229 = a16;
  id v228 = a17;
  id v227 = a18;
  id v226 = a19;
  id v225 = a20;
  id v224 = a21;
  id v223 = a22;
  id v222 = a23;
  id v235 = a24;
  HMFUptime();
  double v29 = v28;
  uint64_t v30 = [(HMDHomeManager *)self init];
  if (v30)
  {
    id v221 = v27;
    uint64_t v31 = (void *)MEMORY[0x1D9452090]();
    long long v218 = v30;
    uint64_t v32 = v30;
    uint32_t v33 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      id v34 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138544386;
      uint64_t v255 = v34;
      __int16 v256 = 2114;
      uint64_t v257 = @"homeManagerInitStart";
      __int16 v258 = 2112;
      v259 = @"Initializing HomeManager";
      __int16 v260 = 2114;
      id v261 = @"state";
      __int16 v262 = 2112;
      v263 = @"start";
      _os_log_impl(&dword_1D49D5000, v33, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\"", buf, 0x34u);
    }
    id v35 = [MEMORY[0x1E4F6A2A0] sharedInstance];
    id v36 = objc_alloc(MEMORY[0x1E4F6A2B0]);
    v276 = @"state";
    v277[0] = @"start";
    uint64_t v37 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v277 forKeys:&v276 count:1];
    __int16 v38 = (void *)[v36 initWithTag:@"homeManagerInitStart" data:v37];
    uint64_t v39 = [MEMORY[0x1E4F653F0] currentTagProcessorList];
    [v35 submitTaggedEvent:v38 processorList:v39];

    [v238 setHomeManager:v32];
    objc_storeStrong((id *)&v32->_metricsManager, a10);
    objc_storeStrong((id *)&v32->_darwinNotificationProvider, a11);
    objc_storeStrong((id *)&v32->_notificationCenter, a12);
    objc_storeStrong((id *)&v32->_appleAccountManager, a15);
    objc_storeStrong((id *)&v32->_remoteAccountManager, a16);
    objc_storeStrong((id *)&v32->_userDefaults, a17);
    objc_storeStrong((id *)&v32->_biomeEventManager, a18);
    objc_storeStrong((id *)&v32->_logEventSubmitter, a19);
    objc_storeStrong((id *)&v32->_widgetConfigurationReader, a20);
    objc_storeStrong((id *)&v32->_configuringStateController, a21);
    objc_storeStrong((id *)&v32->_appleMediaAccessoryDiagnosticInfoController, a22);
    objc_storeStrong((id *)&v32->_currentAccessorySetupMetricDispatcher, a23);
    __int16 v40 = _Block_copy(aBlock);
    id wifiManagerFactory = v32->_wifiManagerFactory;
    v32->_id wifiManagerFactory = v40;

    v32->_hh2MigrationInProgress = 0;
    uint64_t v42 = +[HMDBackingStoreSingleton sharedInstance];
    [v42 setHomeManager:v32];

    uint64_t v43 = HMFGetOSLogHandle();
    logger = v32->_logger;
    v32->_logger = (OS_os_log *)v43;

    uint64_t v45 = [MEMORY[0x1E4F1CA48] array];
    deviceSetupSessions = v32->_deviceSetupSessions;
    v32->_deviceSetupSessions = (NSMutableArray *)v45;

    dispatch_suspend((dispatch_object_t)v32->_workQueue);
    v32->_generationCounterTokeuint64_t n = -1;
    id v47 = [(NSUserDefaults *)v32->_userDefaults objectForKey:@"HMDCurrentAccessorySetupStartUptimeKey"];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v48 = v47;
    }
    else {
      uint64_t v48 = 0;
    }
    id v49 = v48;

    if (v49)
    {
      [v49 doubleValue];
      double v51 = v50;
      if (fabs(v50) >= 2.22044605e-16)
      {
        double v52 = (double)(clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW) / 0x3B9ACA00);
        id v53 = (void *)MEMORY[0x1D9452090]();
        id v54 = v32;
        id v55 = HMFGetOSLogHandle();
        BOOL v56 = os_log_type_enabled(v55, OS_LOG_TYPE_INFO);
        if (v51 <= v52)
        {
          if (v56)
          {
            uint64_t v58 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            uint64_t v255 = v58;
            __int16 v256 = 2048;
            uint64_t v257 = *(__CFString **)&v51;
            _os_log_impl(&dword_1D49D5000, v55, OS_LOG_TYPE_INFO, "%{public}@Loaded stored current accessory setup timestamp: %f", buf, 0x16u);
          }
          os_unfair_lock_lock_with_options();
          *(double *)&v54[26]._os_unfair_lock_opaque = v51;
          os_unfair_lock_unlock(v54 + 6);
        }
        else
        {
          if (v56)
          {
            uint64_t v57 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543362;
            uint64_t v255 = v57;
            _os_log_impl(&dword_1D49D5000, v55, OS_LOG_TYPE_INFO, "%{public}@Resetting current accessory setup timestamp to 0 as a reboot was detected", buf, 0xCu);
          }
          [(os_unfair_lock_s *)v54 setSetupStartTimestamp:0.0];
        }
      }
    }

    uint64_t v59 = [(NSUserDefaults *)v32->_userDefaults objectForKey:@"HMDCurrentAccessorySetupEndUptimeKey"];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v60 = v59;
    }
    else {
      id v60 = 0;
    }
    id v61 = v60;

    if (v61)
    {
      [v61 doubleValue];
      double v63 = v62;
      if (fabs(v62) >= 2.22044605e-16)
      {
        double v64 = (double)(clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW) / 0x3B9ACA00);
        uint64_t v65 = (void *)MEMORY[0x1D9452090]();
        __int16 v66 = v32;
        long long v67 = HMFGetOSLogHandle();
        BOOL v68 = os_log_type_enabled(v67, OS_LOG_TYPE_INFO);
        if (v63 <= v64)
        {
          if (v68)
          {
            __int16 v70 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            uint64_t v255 = v70;
            __int16 v256 = 2048;
            uint64_t v257 = *(__CFString **)&v63;
            _os_log_impl(&dword_1D49D5000, v67, OS_LOG_TYPE_INFO, "%{public}@Loaded stored current accessory setup end timestamp: %f", buf, 0x16u);
          }
          os_unfair_lock_lock_with_options();
          *(double *)&v66[28]._os_unfair_lock_opaque = v63;
          os_unfair_lock_unlock(v66 + 6);
        }
        else
        {
          if (v68)
          {
            uint64_t v69 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543362;
            uint64_t v255 = v69;
            _os_log_impl(&dword_1D49D5000, v67, OS_LOG_TYPE_INFO, "%{public}@Resetting current accessory setup end timestamp to 0 as a reboot was detected", buf, 0xCu);
          }
          [(os_unfair_lock_s *)v66 setSetupEndTimestamp:0.0];
        }
      }
    }

    uint64_t v71 = objc_alloc_init(HMDMobileAssetManager);
    mobileAssetManager = v32->_mobileAssetManager;
    v32->_mobileAssetManager = v71;

    [(HMDMobileAssetManager *)v32->_mobileAssetManager setDelegate:v32];
    uint64_t v73 = [[HMDUserCloudShareManager alloc] initWithHomeManager:v32];
    userCloudShareManager = v32->_userCloudShareManager;
    v32->_userCloudShareManager = v73;

    uint64_t v75 = [[HMDMultiUserStatusController alloc] initWithQueue:v32->_workQueue delegate:v32];
    multiUserStatusController = v32->_multiUserStatusController;
    v32->_multiUserStatusController = v75;

    id v77 = objc_alloc_init(HMDIDSServerBag);
    idsServerBag = v32->_idsServerBag;
    v32->_idsServerBag = v77;

    [(HMDIDSServerBag *)v32->_idsServerBag setDelegate:v32];
    id v79 = [[HMDCapabilitiesController alloc] initWithQueue:v32->_workQueue dataSource:v32];
    capabilitiesController = v32->_capabilitiesController;
    v32->_capabilitiesController = v79;

    id v81 = objc_alloc_init(HMDMemoryUtilizationTracker);
    memoryTracker = v32->_memoryTracker;
    v32->_memoryTracker = v81;

    uint64_t v83 = [(HMDHomeManager *)v32 userDefaults];
    uint64_t v84 = [v83 stringForKey:@"HMDLastRemovedCurrentAccessoryUUIDKey"];

    if (v84)
    {
      uint64_t v85 = [objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v84];
      lastRemovedCurrentAccessoryUUID = v32->_lastRemovedCurrentAccessoryUUID;
      v32->_lastRemovedCurrentAccessoryUUID = (NSUUID *)v85;
    }
    id v234 = (id)v84;
    uint64_t v87 = [objc_alloc(MEMORY[0x1E4F65580]) initWithTimeInterval:0 options:5.0];
    debounceHomesUpdateTimer = v32->_debounceHomesUpdateTimer;
    v32->_debounceHomesUpdateTimer = (HMFTimer *)v87;

    [(HMFTimer *)v32->_debounceHomesUpdateTimer setDelegate:v32];
    uint64_t v89 = v32->_debounceHomesUpdateTimer;
    id v90 = [(HMDHomeManager *)v32 workQueue];
    [(HMFTimer *)v89 setDelegateQueue:v90];

    uint64_t v91 = [MEMORY[0x1E4F65530] sharedPreferences];
    uint64_t v92 = [v91 preferenceForKey:@"assistantSyncDataCoalescePeriodMilliseconds"];
    __int16 v93 = [v92 numberValue];

    id v233 = v93;
    [v93 doubleValue];
    uint64_t v95 = [objc_alloc(MEMORY[0x1E4F65580]) initWithTimeInterval:0 options:v94 / 1000.0];
    debounceRegenerateAssistantSyncDataTimer = v32->_debounceRegenerateAssistantSyncDataTimer;
    v32->_debounceRegenerateAssistantSyncDataTimer = (HMFTimer *)v95;

    [(HMFTimer *)v32->_debounceRegenerateAssistantSyncDataTimer setDelegate:v32];
    uint64_t v97 = v32->_debounceRegenerateAssistantSyncDataTimer;
    uint64_t v98 = [(HMDHomeManager *)v32 workQueue];
    [(HMFTimer *)v97 setDelegateQueue:v98];

    uint64_t v99 = HMFUptime();
    double v101 = v100;
    uint64_t v102 = (void *)MEMORY[0x1D9452090](v99);
    char v103 = v32;
    id v104 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG))
    {
      id v105 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138544386;
      uint64_t v255 = v105;
      __int16 v256 = 2114;
      uint64_t v257 = @"homeManagerInitStart";
      __int16 v258 = 2112;
      v259 = @"Initialize HH2 FW switch";
      __int16 v260 = 2114;
      id v261 = @"state";
      __int16 v262 = 2112;
      v263 = @"homeManagerHH2FWSwitch";
      _os_log_impl(&dword_1D49D5000, v104, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\"", buf, 0x34u);
    }
    int v106 = [MEMORY[0x1E4F6A2A0] sharedInstance];
    id v107 = objc_alloc(MEMORY[0x1E4F6A2B0]);
    id v274 = @"state";
    v275 = @"homeManagerHH2FWSwitch";
    long long v108 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v275 forKeys:&v274 count:1];
    id v109 = (void *)[v107 initWithTag:@"homeManagerInitStart" data:v108];
    long long v110 = [MEMORY[0x1E4F653F0] currentTagProcessorList];
    [v106 submitTaggedEvent:v109 processorList:v110];

    BOOL v111 = (void *)MEMORY[0x1D9452090]();
    [(HMDHomeManager *)v103 initializeHH2FrameworkSwitch];
    long long v112 = +[HMDDeviceSetupManager sharedManager];
    id v113 = [v112 followUpManager];
    [v113 stopAdvertising:2];

    uint64_t v114 = [(HMDHomeManager *)v103 notificationCenter];
    [v114 addObserver:v103 selector:sel__handleHH2SentinelZonePresent_ name:@"HMDHomeManagerHH2SentinelZonePresent" object:0];

    id v115 = (void *)MEMORY[0x1D9452090]();
    uint64_t v116 = v103;
    id v117 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v117, OS_LOG_TYPE_INFO))
    {
      uint64_t v118 = HMFGetLogIdentifier();
      uint64_t v119 = NSString;
      HMFUptime();
      uint64_t v121 = objc_msgSend(v119, "stringWithFormat:", @"%.3f", v120 - v101);
      *(_DWORD *)long long buf = 138544898;
      uint64_t v255 = v118;
      __int16 v256 = 2114;
      uint64_t v257 = @"homeManagerInitStart";
      __int16 v258 = 2112;
      v259 = @"Initialized HH2 FW switch";
      __int16 v260 = 2114;
      id v261 = @"state";
      __int16 v262 = 2112;
      v263 = @"homeManagerHH2FWSwitchDone";
      __int16 v264 = 2114;
      v265 = @"duration";
      __int16 v266 = 2112;
      double v267 = v121;
      _os_log_impl(&dword_1D49D5000, v117, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x48u);
    }
    uint64_t v122 = [MEMORY[0x1E4F6A2A0] sharedInstance];
    id v123 = objc_alloc(MEMORY[0x1E4F6A2B0]);
    uint64_t v124 = NSString;
    HMFUptime();
    uint64_t v126 = objc_msgSend(v124, "stringWithFormat:", @"%.3f", v125 - v101);
    uint64_t v127 = HMDTaggedLoggingCreateDictionary();
    uint64_t v128 = objc_msgSend(v123, "initWithTag:data:", @"homeManagerInitStart", v127, @"state", @"homeManagerHH2FWSwitchDone", @"duration", v126);
    uint64_t v129 = [MEMORY[0x1E4F653F0] currentTagProcessorList];
    [v122 submitTaggedEvent:v128 processorList:v129];

    uint64_t v130 = HMFUptime();
    double v132 = v131;
    uint64_t v133 = (void *)MEMORY[0x1D9452090](v130);
    id v134 = v116;
    id v135 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v135, OS_LOG_TYPE_DEBUG))
    {
      id v136 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138544386;
      uint64_t v255 = v136;
      __int16 v256 = 2114;
      uint64_t v257 = @"homeManagerInitStart";
      __int16 v258 = 2112;
      v259 = @"Loading Home Manager";
      __int16 v260 = 2114;
      id v261 = @"state";
      __int16 v262 = 2112;
      v263 = @"homeManagerLoading";
      _os_log_impl(&dword_1D49D5000, v135, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\"", buf, 0x34u);
    }
    dispatch_queue_t v137 = [MEMORY[0x1E4F6A2A0] sharedInstance];
    id v138 = objc_alloc(MEMORY[0x1E4F6A2B0]);
    id v272 = @"state";
    v273 = @"homeManagerLoading";
    id v139 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v273 forKeys:&v272 count:1];
    v140 = (void *)[v138 initWithTag:@"homeManagerInitStart" data:v139];
    id v141 = [MEMORY[0x1E4F653F0] currentTagProcessorList];
    [v137 submitTaggedEvent:v140 processorList:v141];

    id v142 = (void *)MEMORY[0x1D9452090]();
    LOBYTE(v217) = 0;
    [(HMDHomeManager *)v134 _loadMessageDispatcher:v244 accessoryBrowser:v243 messageFilterChain:v221 homeData:v242 localDataDecryptionFailed:v219 identityRegistry:v241 accountRegistry:v239 uncommittedTransactions:v235 backingStoreFactory:v237 reloadData:v217];
    id v143 = (void *)MEMORY[0x1D9452090]();
    long long v144 = v134;
    uint64_t v145 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v145, OS_LOG_TYPE_INFO))
    {
      long long v146 = HMFGetLogIdentifier();
      uint64_t v147 = NSString;
      HMFUptime();
      uint64_t v149 = objc_msgSend(v147, "stringWithFormat:", @"%.3f", v148 - v132);
      long long v150 = NSNumber;
      uint64_t v151 = [(HMDHomeManager *)v144 homes];
      long long v152 = objc_msgSend(v150, "numberWithUnsignedInteger:", objc_msgSend(v151, "count"));
      *(_DWORD *)long long buf = 138545410;
      uint64_t v255 = v146;
      __int16 v256 = 2114;
      uint64_t v257 = @"homeManagerInitStart";
      __int16 v258 = 2112;
      v259 = @"Loaded Home Manager, resuming work queue";
      __int16 v260 = 2114;
      id v261 = @"state";
      __int16 v262 = 2112;
      v263 = @"homeManagerLoaded";
      __int16 v264 = 2114;
      v265 = @"duration";
      __int16 v266 = 2112;
      double v267 = v149;
      __int16 v268 = 2114;
      uint64_t v269 = @"homesCount";
      __int16 v270 = 2112;
      v271 = v152;
      _os_log_impl(&dword_1D49D5000, v145, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x5Cu);
    }
    uint64_t v153 = [MEMORY[0x1E4F6A2A0] sharedInstance];
    id v154 = objc_alloc(MEMORY[0x1E4F6A2B0]);
    long long v155 = NSString;
    HMFUptime();
    uint64_t v157 = objc_msgSend(v155, "stringWithFormat:", @"%.3f", v156 - v132);
    __int16 v158 = NSNumber;
    id v159 = [(HMDHomeManager *)v144 homes];
    long long v160 = objc_msgSend(v158, "numberWithUnsignedInteger:", objc_msgSend(v159, "count"));
    long long v161 = HMDTaggedLoggingCreateDictionary();
    long long v162 = objc_msgSend(v154, "initWithTag:data:", @"homeManagerInitStart", v161, @"state", @"homeManagerLoaded", @"duration", v157, @"homesCount", v160);
    uint64_t v163 = [MEMORY[0x1E4F653F0] currentTagProcessorList];
    [v153 submitTaggedEvent:v162 processorList:v163];

    long long v164 = +[HMDUserManagementOperationManager sharedManager];
    [v164 setHomeManager:v144];
    long long v247 = 0u;
    long long v248 = 0u;
    long long v245 = 0u;
    long long v246 = 0u;
    long long v165 = [v164 operations];
    uint64_t v166 = [v165 countByEnumeratingWithState:&v245 objects:v253 count:16];
    if (v166)
    {
      uint64_t v167 = v166;
      uint64_t v168 = *(void *)v246;
      do
      {
        for (uint64_t i = 0; i != v167; ++i)
        {
          if (*(void *)v246 != v168) {
            objc_enumerationMutation(v165);
          }
          [*(id *)(*((void *)&v245 + 1) + 8 * i) updateDelegate:v144];
        }
        uint64_t v167 = [v165 countByEnumeratingWithState:&v245 objects:v253 count:16];
      }
      while (v167);
    }

    dispatch_resume((dispatch_object_t)v32->_workQueue);
    long long v170 = [(HMDHomeManager *)v144 notificationCenter];
    [v170 addObserver:v144 selector:sel_cloudHomeSettingsUpdated_ name:@"HMDAppleAccountSettingsHomeStateUpdatedNotification" object:0];

    id v171 = [(HMDHomeManager *)v144 notificationCenter];
    [v171 addObserver:v144 selector:sel___handleDeviceCapabilitiesUpdated_ name:@"HMDDeviceCapabilitiiesUpdatedNotification" object:0];

    uint64_t v172 = [(HMDHomeManager *)v144 notificationCenter];
    __int16 v173 = [(HMDHomeManager *)v144 appleAccountManager];
    [v172 addObserver:v144 selector:sel___handleUpdatedCurrentDevice_ name:@"HMDAppleAccountManagerDeviceUpdatedNotification" object:v173];

    id v174 = [(HMDHomeManager *)v144 notificationCenter];
    [v174 addObserver:v144 selector:sel__handleCurrentAccessoryRemovedNotification_ name:@"HMDHomeManagerDidRemoveCurrentAccessoryNotification" object:0];

    __int16 v175 = [(HMDHomeManager *)v144 notificationCenter];
    [v175 addObserver:v144 selector:sel__handleCurrentAccessoryAddedNotification_ name:@"HMDHomeManagerDidAddCurrentAccessoryNotification" object:0];

    id v176 = [(HMDHomeManager *)v144 notificationCenter];
    [v176 addObserver:v144 selector:sel_handleHomeManagerHasFinishedStartingUp_ name:@"HMDHomeManagerHasFinishedStartingUpNotification" object:0];

    [(HMDHomeManager *)v144 registerForNPSPreferenceChanges];
    [(HMDHomeManager *)v144 checkForRemotePeers];
    uint64_t v177 = (void *)MEMORY[0x1D9452090]([(HMDHomeManager *)v144 registerForSignificantTimeChangeNotification]);
    long long v178 = v144;
    long long v179 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v179, OS_LOG_TYPE_DEBUG))
    {
      int64_t v180 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138544386;
      uint64_t v255 = v180;
      __int16 v256 = 2114;
      uint64_t v257 = @"homeManagerInitStart";
      __int16 v258 = 2112;
      v259 = @"Fetch and update PCS status";
      __int16 v260 = 2114;
      id v261 = @"state";
      __int16 v262 = 2112;
      v263 = @"homeManagerFetchPCS";
      _os_log_impl(&dword_1D49D5000, v179, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\"", buf, 0x34u);
    }
    int v181 = [MEMORY[0x1E4F6A2A0] sharedInstance];
    id v182 = objc_alloc(MEMORY[0x1E4F6A2B0]);
    uint64_t v251 = @"state";
    v252 = @"homeManagerFetchPCS";
    uint64_t v183 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v252 forKeys:&v251 count:1];
    long long v184 = (void *)[v182 initWithTag:@"homeManagerInitStart" data:v183];
    uint64_t v185 = [MEMORY[0x1E4F653F0] currentTagProcessorList];
    [v181 submitTaggedEvent:v184 processorList:v185];

    uint64_t v186 = (void *)MEMORY[0x1D9452090]([(HMDHomeManager *)v178 fetchAndUpdatePCSStatus]);
    uint64_t v187 = v178;
    unint64_t v188 = HMFGetOSLogHandle();
    id v27 = v221;
    if (os_log_type_enabled(v188, OS_LOG_TYPE_INFO))
    {
      char v189 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138544386;
      uint64_t v255 = v189;
      __int16 v256 = 2114;
      uint64_t v257 = @"homeManagerInitStart";
      __int16 v258 = 2112;
      v259 = @"Fetched and updated PCS status";
      __int16 v260 = 2114;
      id v261 = @"state";
      __int16 v262 = 2112;
      v263 = @"homeManagerFetchedPCS";
      _os_log_impl(&dword_1D49D5000, v188, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\"", buf, 0x34u);
    }
    uint64_t v190 = [MEMORY[0x1E4F6A2A0] sharedInstance];
    id v191 = objc_alloc(MEMORY[0x1E4F6A2B0]);
    uint64_t v249 = @"state";
    uint64_t v250 = @"homeManagerFetchedPCS";
    long long v192 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v250 forKeys:&v249 count:1];
    __int16 v193 = (void *)[v191 initWithTag:@"homeManagerInitStart" data:v192];
    uint64_t v194 = [MEMORY[0x1E4F653F0] currentTagProcessorList];
    [v190 submitTaggedEvent:v193 processorList:v194];

    uint64_t v30 = v218;
  }
  __int16 v195 = (void *)MEMORY[0x1D9452090]();
  long long v196 = v30;
  long long v197 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v197, OS_LOG_TYPE_INFO))
  {
    uint64_t v198 = HMFGetLogIdentifier();
    uint64_t v199 = NSString;
    HMFUptime();
    __int16 v201 = objc_msgSend(v199, "stringWithFormat:", @"%.3f", v200 - v29);
    uint64_t v202 = NSNumber;
    uint64_t v203 = [(HMDHomeManager *)v196 homes];
    id v204 = objc_msgSend(v202, "numberWithUnsignedInteger:", objc_msgSend(v203, "count"));
    *(_DWORD *)long long buf = 138545410;
    uint64_t v255 = v198;
    __int16 v256 = 2114;
    uint64_t v257 = @"homeManagerInitDone";
    __int16 v258 = 2112;
    v259 = @"Initialized HomeManager";
    __int16 v260 = 2114;
    id v261 = @"state";
    __int16 v262 = 2112;
    v263 = @"end";
    __int16 v264 = 2114;
    v265 = @"duration";
    __int16 v266 = 2112;
    double v267 = v201;
    __int16 v268 = 2114;
    uint64_t v269 = @"homesCount";
    __int16 v270 = 2112;
    v271 = v204;
    _os_log_impl(&dword_1D49D5000, v197, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x5Cu);
  }
  uint64_t v205 = [MEMORY[0x1E4F6A2A0] sharedInstance];
  id v206 = objc_alloc(MEMORY[0x1E4F6A2B0]);
  uint64_t v207 = NSString;
  HMFUptime();
  __int16 v209 = objc_msgSend(v207, "stringWithFormat:", @"%.3f", v208 - v29);
  uint64_t v210 = NSNumber;
  uint64_t v211 = [(HMDHomeManager *)v196 homes];
  __int16 v212 = objc_msgSend(v210, "numberWithUnsignedInteger:", objc_msgSend(v211, "count"));
  id v213 = HMDTaggedLoggingCreateDictionary();
  __int16 v214 = objc_msgSend(v206, "initWithTag:data:", @"homeManagerInitDone", v213, @"state", @"end", @"duration", v209, @"homesCount", v212);
  uint64_t v215 = [MEMORY[0x1E4F653F0] currentTagProcessorList];
  [v205 submitTaggedEvent:v214 processorList:v215];

  return v196;
}

- (HMDHomeManager)initWithMessageDispatcher:(id)a3 accessoryBrowser:(id)a4 messageFilterChain:(id)a5 homeData:(id)a6 localDataDecryptionFailed:(BOOL)a7 identityRegistry:(id)a8 accountRegistry:(id)a9 metricsManager:(id)a10 configuringStateController:(id)a11 diagnosticInfoController:(id)a12 currentAccessorySetupMetricDispatcher:(id)a13 uncommittedTransactions:(id)a14
{
  BOOL v36 = a7;
  int v18 = (objc_class *)MEMORY[0x1E4F2E788];
  id v34 = a14;
  id v33 = a13;
  id v31 = a12;
  id v29 = a11;
  id v19 = a10;
  id v30 = a9;
  id v32 = a8;
  id v28 = a6;
  id v27 = a5;
  id v42 = a4;
  id v41 = a3;
  id v39 = objc_alloc_init(v18);
  __int16 v38 = [MEMORY[0x1E4F28EB8] defaultCenter];
  long long v26 = +[HMDAppleAccountManager sharedManager];
  id v25 = +[HMDRemoteAccountManager sharedManager];
  long long v24 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  uint64_t v23 = objc_alloc_init(HMDBiomeEventManager);
  __int16 v20 = [v19 logEventSubmitter];
  uint64_t v22 = objc_alloc_init(HMDWidgetConfigurationReader);
  uint64_t v37 = -[HMDHomeManager initWithMessageDispatcher:accessoryBrowser:messageFilterChain:homeData:localDataDecryptionFailed:identityRegistry:accountRegistry:metricsManager:darwinNotificationProvider:notificationCenter:backingStoreFactory:wifiManagerFactory:appleAccountManager:remoteAccountManager:userDefaults:biomeEventManager:logEventSubmitter:widgetConfigurationReader:configuringStateController:diagnosticInfoController:currentAccessorySetupMetricDispatcher:uncommittedTransactions:](self, "initWithMessageDispatcher:accessoryBrowser:messageFilterChain:homeData:localDataDecryptionFailed:identityRegistry:accountRegistry:metricsManager:darwinNotificationProvider:notificationCenter:backingStoreFactory:wifiManagerFactory:appleAccountManager:remoteAccountManager:userDefaults:biomeEventManager:logEventSubmitter:widgetConfigurationReader:configuringStateController:diagnosticInfoController:currentAccessorySetupMetricDispatcher:uncommittedTransactions:", v41, v42, v27, v28, v36, v32, v30, v19, v39, v38, &__block_literal_global_171146, &__block_literal_global_365, v26,
          v25,
          v24,
          v23,
          v20,
          v22,
          v29,
          v31,
          v33,
          v34);

  return v37;
}

uint64_t __277__HMDHomeManager_initWithMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_metricsManager_configuringStateController_diagnosticInfoController_currentAccessorySetupMetricDispatcher_uncommittedTransactions___block_invoke_2()
{
  return [MEMORY[0x1E4F65598] sharedManager];
}

HMDBackingStore *__277__HMDHomeManager_initWithMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_metricsManager_configuringStateController_diagnosticInfoController_currentAccessorySetupMetricDispatcher_uncommittedTransactions___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_super v3 = [HMDBackingStore alloc];
  CFStringRef v4 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:@"030440CB-974B-44F3-8786-7191F302252E"];
  CFStringRef v5 = [(HMDBackingStore *)v3 initWithUUID:v4 homeManager:v2];

  return v5;
}

- (HMDHomeManager)init
{
  v17.receiver = self;
  v17.super_class = (Class)HMDHomeManager;
  id v2 = [(HMDHomeManager *)&v17 init];
  if (v2)
  {
    objc_super v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    dispatch_queue_t v4 = dispatch_queue_create("com.apple.hmd.hmgr", v3);
    workQueue = v2->_workQueue;
    v2->_workQueue = (OS_dispatch_queue *)v4;

    v2->_lock._os_unfair_lock_opaque = 0;
    uint64_t v6 = [objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:@"1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938"];
    uuid = v2->_uuid;
    v2->_uuid = (NSUUID *)v6;

    uint64_t v8 = [MEMORY[0x1E4F28E10] strongToStrongObjectsMapTable];
    homeUUIDsByWalletKeyAssertionXPCConnectiouint64_t n = v2->_homeUUIDsByWalletKeyAssertionXPCConnection;
    v2->_homeUUIDsByWalletKeyAssertionXPCConnectiouint64_t n = (NSMapTable *)v8;

    uint64_t v10 = [MEMORY[0x1E4F1CA60] dictionary];
    currentHomeConfigurations = v2->_currentHomeConfigurations;
    v2->_currentHomeConfigurations = (NSMutableDictionary *)v10;

    uint64_t v12 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
    userDefaults = v2->_userDefaults;
    v2->_userDefaults = (NSUserDefaults *)v12;

    uint64_t v14 = [[HMDCHIPXPCListener alloc] initWithHomeManager:v2];
    chipXPCListener = v2->_chipXPCListener;
    v2->_chipXPCListener = v14;
  }
  return v2;
}

+ (id)emptyModelObjectWithChangeType:(unint64_t)a3 homeManagerUUID:(id)a4
{
  id v5 = a4;
  uint64_t v6 = [(HMDBackingStoreModelObject *)[HMDHomeManagerModel alloc] initWithObjectChangeType:a3 uuid:v5 parentUUID:0];

  return v6;
}

+ (id)getAllBackingStoreObjects:(int64_t)a3 primaryHomeUUID:(id)a4 cloudZone:(id)a5 appData:(id)a6
{
  id v9 = a4;
  id v10 = a5;
  id v11 = a6;
  uint64_t v12 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v13 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:@"1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938"];
  uint64_t v14 = [(id)objc_opt_class() emptyModelObjectWithChangeType:1 homeManagerUUID:v13];
  if (v9)
  {
    int v15 = [v9 UUIDString];
    [v14 setPrimaryHomeUUID:v15];
  }
  double v16 = +[HMDCloudZoneInformation cloudZoneInformationWithCloudZones:v10];
  [v14 setCloudZoneInformation:v16];

  [v12 addObject:v14];
  if (a3 >= 3 && v11)
  {
    objc_super v17 = [v11 modelObjectWithChangeType:1];
    [v12 addObject:v17];
  }
  return v12;
}

+ (id)remotePeerDeviceAddress:(id)a3
{
  objc_super v3 = (void *)IDSCopyIDForDevice();
  if (v3)
  {
    dispatch_queue_t v4 = (void *)[objc_alloc(MEMORY[0x1E4F28E78]) initWithString:v3];
    objc_msgSend(v4, "replaceOccurrencesOfString:withString:options:range:", @"self-token", @"token", 1, 0, objc_msgSend(v4, "length"));
  }
  else
  {
    dispatch_queue_t v4 = 0;
  }

  return v4;
}

+ (BOOL)isThisDeviceAdminOfHome:(id)a3
{
  id v3 = a3;
  if (isWatch())
  {
    char v4 = 0;
  }
  else
  {
    id v5 = [MEMORY[0x1E4F5BE48] systemStore];
    id v10 = 0;
    id v11 = 0;
    [v5 getAllAvailableControllerPublicKeys:0 secretKeys:0 userNames:&v11 error:&v10];
    id v6 = v11;
    id v7 = v10;

    uint64_t v8 = [v3 ownerName];
    char v4 = [v6 containsObject:v8];
  }
  return v4;
}

+ (id)saltForDeviceSpecificIdentifier
{
  id v2 = (id)uniqueDeviceId;
  id v3 = objc_msgSend(v2, "hm_generateSHA1");

  return v3;
}

+ (id)createIdentifierSalt:(id)a3 deviceSpecific:(BOOL)a4
{
  id v5 = a3;
  if (!isWatch() || a4)
  {
    uint64_t v6 = +[HMDHomeManager saltForDeviceSpecificIdentifier];
  }
  else
  {
    uint64_t v6 = +[HMDHomeManager getUniqueDeviceIdSalt];
  }
  id v7 = (void *)v6;
  if (v6)
  {
    uint64_t v8 = (void *)[v5 mutableCopy];
    [v8 appendData:v7];
    id v9 = objc_msgSend(v8, "hm_generateSHA1");
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

+ (id)_getIntentGroupClientIdentifierSalt
{
  id v2 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:@"F28CD9BC-565D-4CA8-980A-6B1680D76593"];
  id v3 = objc_msgSend(v2, "hm_convertToData");

  return v3;
}

+ (id)deriveIntentGroupIdentifierFromBaseUUID:(id)a3
{
  id v3 = (void *)MEMORY[0x1E4F29128];
  id v4 = a3;
  id v5 = +[HMDHomeManager _getIntentGroupClientIdentifierSalt];
  uint64_t v6 = objc_msgSend(v3, "hm_deriveUUIDFromBaseUUID:identifierSalt:", v4, v5);

  return v6;
}

+ (id)getUniqueDeviceIdSalt
{
  id v2 = (void *)CFPreferencesCopyAppValue(@"kUniqueDeviceIdentifierSaltkey", @"com.apple.homed.notbackedup");
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }

  return v3;
}

+ (unint64_t)legacyDataSizeLimit
{
  id v2 = [MEMORY[0x1E4F65530] sharedPreferences];
  id v3 = [v2 preferenceForKey:@"legacyDataSizeLimit"];

  id v4 = [v3 numberValue];

  if (v4)
  {
    id v5 = [v3 numberValue];
    unint64_t v6 = [v5 unsignedIntegerValue];
  }
  else
  {
    unint64_t v6 = 800000;
  }

  return v6;
}

+ (BOOL)doesSaveReasonNotAffectLocalData:(id)a3
{
  uint64_t v3 = doesSaveReasonNotAffectLocalData__onceToken;
  id v4 = a3;
  if (v3 != -1) {
    dispatch_once(&doesSaveReasonNotAffectLocalData__onceToken, &__block_literal_global_678);
  }
  char v5 = [(id)doesSaveReasonNotAffectLocalData___noLocalReason containsObject:v4];

  return v5;
}

void __51__HMDHomeManager_doesSaveReasonNotAffectLocalData___block_invoke()
{
  v4[1] = *MEMORY[0x1E4F143B8];
  v0 = (void *)MEMORY[0x1E4F1CAD0];
  v4[0] = @"MetadataUpdate";
  uint64_t v1 = [MEMORY[0x1E4F1C978] arrayWithObjects:v4 count:1];
  uint64_t v2 = [v0 setWithArray:v1];
  uint64_t v3 = (void *)doesSaveReasonNotAffectLocalData___noLocalReason;
  doesSaveReasonNotAffectLocalData___noLocalReasouint64_t n = v2;
}

+ (BOOL)shouldIgnoreExpectedConfigurationVersionUpdateForReason:(id)a3
{
  uint64_t v3 = shouldIgnoreExpectedConfigurationVersionUpdateForReason__pred;
  id v4 = a3;
  if (v3 != -1) {
    dispatch_once(&shouldIgnoreExpectedConfigurationVersionUpdateForReason__pred, &__block_literal_global_676);
  }
  char v5 = [(id)shouldIgnoreExpectedConfigurationVersionUpdateForReason___ignoredReasons containsObject:v4];

  return v5;
}

void __74__HMDHomeManager_shouldIgnoreExpectedConfigurationVersionUpdateForReason___block_invoke()
{
  void v4[2] = *MEMORY[0x1E4F143B8];
  v0 = (void *)MEMORY[0x1E4F1CAD0];
  v4[0] = @"userUserIDUpdated";
  v4[1] = @"userUpdateAccountIdentifier";
  uint64_t v1 = [MEMORY[0x1E4F1C978] arrayWithObjects:v4 count:2];
  uint64_t v2 = [v0 setWithArray:v1];
  uint64_t v3 = (void *)shouldIgnoreExpectedConfigurationVersionUpdateForReason___ignoredReasons;
  shouldIgnoreExpectedConfigurationVersionUpdateForReason___ignoredReasons = v2;
}

+ (BOOL)shouldIncrementGenerationCounterForReason:(id)a3
{
  uint64_t v3 = shouldIncrementGenerationCounterForReason__onceToken;
  id v4 = a3;
  if (v3 != -1) {
    dispatch_once(&shouldIncrementGenerationCounterForReason__onceToken, &__block_literal_global_674);
  }
  char v5 = [(id)shouldIncrementGenerationCounterForReason__noIncreaseGenerationCounterReasons containsObject:v4];

  return v5 ^ 1;
}

void __60__HMDHomeManager_shouldIncrementGenerationCounterForReason___block_invoke()
{
  void v4[5] = *MEMORY[0x1E4F143B8];
  v0 = (void *)MEMORY[0x1E4F1CAD0];
  v4[0] = @"HMDApplicationTerminatedSaveReason";
  v4[1] = @"kModifyCharacterisiticNotificationsRequestKey";
  void v4[2] = @"lastSyncedHomeConfigVersion";
  void v4[3] = @"kCharacteristicPreviousValue";
  void v4[4] = @"kCharacteristicValueUpdateStateNumberKey";
  uint64_t v1 = [MEMORY[0x1E4F1C978] arrayWithObjects:v4 count:5];
  uint64_t v2 = [v0 setWithArray:v1];
  uint64_t v3 = (void *)shouldIncrementGenerationCounterForReason__noIncreaseGenerationCounterReasons;
  shouldIncrementGenerationCounterForReason__noIncreaseGenerationCounterReasons = v2;
}

+ (BOOL)doesSaveReasonRequireForceSyncToWatch:(id)a3
{
  uint64_t v3 = doesSaveReasonRequireForceSyncToWatch__pred;
  id v4 = a3;
  if (v3 != -1) {
    dispatch_once(&doesSaveReasonRequireForceSyncToWatch__pred, &__block_literal_global_672);
  }
  char v5 = [(id)doesSaveReasonRequireForceSyncToWatch___watchForceSyncReasons containsObject:v4];

  return v5;
}

void __56__HMDHomeManager_doesSaveReasonRequireForceSyncToWatch___block_invoke()
{
  v4[1] = *MEMORY[0x1E4F143B8];
  v0 = (void *)MEMORY[0x1E4F1CAD0];
  v4[0] = *MEMORY[0x1E4F2E240];
  uint64_t v1 = [MEMORY[0x1E4F1C978] arrayWithObjects:v4 count:1];
  uint64_t v2 = [v0 setWithArray:v1];
  uint64_t v3 = (void *)doesSaveReasonRequireForceSyncToWatch___watchForceSyncReasons;
  doesSaveReasonRequireForceSyncToWatch___watchForceSyncReasons = v2;
}

+ (BOOL)doesSaveReasonAffectOnlyLocalData:(id)a3
{
  uint64_t v3 = doesSaveReasonAffectOnlyLocalData__pred;
  id v4 = a3;
  if (v3 != -1) {
    dispatch_once(&doesSaveReasonAffectOnlyLocalData__pred, &__block_literal_global_670);
  }
  char v5 = [(id)doesSaveReasonAffectOnlyLocalData___localReason containsObject:v4];

  return v5;
}

void __52__HMDHomeManager_doesSaveReasonAffectOnlyLocalData___block_invoke()
{
  v6[40] = *MEMORY[0x1E4F143B8];
  v0 = (void *)MEMORY[0x1E4F1CAD0];
  v6[0] = @"kTriggerFiredNotificationKey";
  v6[1] = @"triggerSourceInternalMessage";
  v6[2] = @"kResetConfigRequestKey";
  v6[3] = @"kModifyCharacterisiticNotificationsRequestKey";
  void v6[4] = @"kCharacteristicEnableNotificationRequestKey";
  void v6[5] = @"Incoming invitations updated";
  v6[6] = @"kAccessHomeInviteRequestKey";
  v6[7] = @"kDismissBulletinInternalRequestKey";
  v6[8] = @"kDismissDialogInternalRequestKey";
  v6[9] = @"kApplicationVendorIDStoreUpdate";
  uint64_t v1 = *MEMORY[0x1E4F2ECB8];
  v6[10] = *MEMORY[0x1E4F2EC88];
  v6[11] = v1;
  v6[12] = @"kExecuteActionSetRequestKey";
  v6[13] = @"HMDApplicationTerminatedSaveReason";
  v6[14] = @"kSearchForNewAccessoriesRequestKey";
  v6[15] = @"kUpdateAccessAllowedWhenLockedRequestKey";
  v6[16] = @"kBulletinBoardNotificationUpdateNotificationKey";
  v6[17] = @"HMDBulletinBoardNotificationServiceGroupUpdatedSaveReason";
  v6[18] = @"kCharacteristicPreviousValue";
  v6[19] = @"kCharacteristicValueUpdateStateNumberKey";
  v6[20] = @"kTransactionUpdate";
  v6[21] = @"HMDHomePresenceMonitorUpdatedReason";
  v6[22] = @"userDisplayNameUpdated";
  v6[23] = @"lastSyncedHomeConfigVersion";
  v6[24] = @"AccessoryHasSymptomsHandlerUpdated";
  v6[25] = @"HMDUserCloudShareIDCodingKey";
  v6[26] = @"Update Shared Home Source Version";
  v6[27] = @"HMDHAPAccessoryUpdateCameraProfileNotificationSettingsReason";
  v6[28] = @"HMDHAPAccessorySaveAuthMethodReason";
  v6[29] = @"HMDAccessoryResidentReachabilityNotificationRegistrationMessage";
  v6[30] = @"HMDHomeManagerRecoveryVersionUpdated";
  v6[31] = @"Upgraded To HH2";
  uint64_t v2 = *MEMORY[0x1E4F2C2F0];
  v6[32] = @"HMDAccessorySoftwareUpdate";
  v6[33] = v2;
  v6[34] = *MEMORY[0x1E4F2E240];
  v6[35] = @"HMDHAPAccessoryWoLUpdateLocallyLabel";
  v6[36] = @"HMDHAPAccessoryUpdateHasPostedBulletinForWalletKeyOnboardingReason";
  v6[37] = @"HMDAppleMediaAccessoryWiFiMACLocalOnlyUpdateLabel";
  v6[38] = @"Add Accessory Locally";
  v6[39] = @"kAccessoryLastSeenKey";
  uint64_t v3 = [MEMORY[0x1E4F1C978] arrayWithObjects:v6 count:40];
  uint64_t v4 = [v0 setWithArray:v3];
  char v5 = (void *)doesSaveReasonAffectOnlyLocalData___localReason;
  doesSaveReasonAffectOnlyLocalData___localReasouint64_t n = v4;
}

+ (BOOL)doesSaveReasonAffectHomeManager:(id)a3
{
  uint64_t v3 = doesSaveReasonAffectHomeManager__pred;
  id v4 = a3;
  if (v3 != -1) {
    dispatch_once(&doesSaveReasonAffectHomeManager__pred, &__block_literal_global_667);
  }
  char v5 = [(id)doesSaveReasonAffectHomeManager___homeManagerReason containsObject:v4];

  return v5;
}

void __50__HMDHomeManager_doesSaveReasonAffectHomeManager___block_invoke()
{
  v4[23] = *MEMORY[0x1E4F143B8];
  v0 = (void *)MEMORY[0x1E4F1CAD0];
  v4[0] = @"kAddHomeRequestKey";
  v4[1] = @"kRemoveHomeRequestKey";
  void v4[2] = @"kRemoveAllUsersFromAccessoriesRequestKey";
  void v4[3] = @"kHomeManagerUpdatedKey";
  void v4[4] = @"kHomeManagerCloudZoneAddedKey";
  void v4[5] = @"kHomeManagerCloudZoneRemovedKey";
  void v4[6] = @"kSetPrimaryHomeRequestKey";
  v4[7] = @"kUserRemovedRequestKey";
  v4[8] = @"kUserManagementOperationAddedKey";
  v4[9] = @"kUserManagementOperationRemovedKey";
  v4[10] = @"kHomeDataSyncRequestKey";
  v4[11] = @"kHomeDataFragmentedSyncRequestKey";
  v4[12] = *MEMORY[0x1E4F2D558];
  v4[13] = @"MetadataUpdate";
  v4[14] = @"Object registration";
  v4[15] = @"Add Account";
  v4[16] = @"Update Devices";
  v4[17] = @"Update Handles";
  v4[18] = @"Remove Account";
  v4[19] = @"Update Device Name";
  v4[20] = @"Update Device";
  v4[21] = @"device pushback";
  v4[22] = @"accountHandle pushback";
  uint64_t v1 = [MEMORY[0x1E4F1C978] arrayWithObjects:v4 count:23];
  uint64_t v2 = [v0 setWithArray:v1];
  uint64_t v3 = (void *)doesSaveReasonAffectHomeManager___homeManagerReason;
  doesSaveReasonAffectHomeManager___homeManagerReasouint64_t n = v2;
}

+ (id)convertSaveReasonToTransationReason:(id)a3
{
  id v3 = a3;
  if (v3)
  {
    if (convertSaveReasonToTransationReason__pred != -1) {
      dispatch_once(&convertSaveReasonToTransationReason__pred, &__block_literal_global_665);
    }
    uint64_t v4 = [(id)convertSaveReasonToTransationReason___reasonMap objectForKey:v3];
    char v5 = (void *)v4;
    if (v4) {
      unint64_t v6 = (void *)v4;
    }
    else {
      unint64_t v6 = v3;
    }
    id v7 = v6;
  }
  else
  {
    id v7 = @"kUnknownSaveReason";
  }

  return v7;
}

void __54__HMDHomeManager_convertSaveReasonToTransationReason___block_invoke()
{
  v3[3] = *MEMORY[0x1E4F143B8];
  v2[0] = @"kRemoteUsersDeregistered";
  v2[1] = @"kAddEventTriggerRequestKey";
  v3[0] = @"kRemoveUserRequestKey";
  v3[1] = @"kAddTriggerRequestKey";
  v2[2] = @"kAddTimerTriggerRequestKey";
  void v3[2] = @"kAddTriggerRequestKey";
  uint64_t v0 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v3 forKeys:v2 count:3];
  uint64_t v1 = (void *)convertSaveReasonToTransationReason___reasonMap;
  convertSaveReasonToTransationReason___reasonMap = v0;
}

+ (void)removeAccessoryCacheForIdentifier:(id)a3
{
  id v3 = (void *)MEMORY[0x1E4F28CB8];
  id v4 = a3;
  id v7 = [v3 defaultManager];
  char v5 = getBLEAccessoryCachePath();
  unint64_t v6 = [v5 stringByAppendingFormat:@"/%@", v4];

  [v7 removeItemAtPath:v6 error:0];
}

+ (id)getAccessoryCacheForIdentifier:(id)a3
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  id v4 = getBLEAccessoryCachePath();
  char v5 = [v4 stringByAppendingFormat:@"/%@", v3];

  id v20 = 0;
  unint64_t v6 = [MEMORY[0x1E4F1C9B8] dataWithContentsOfFile:v5 options:2 error:&v20];
  id v7 = v20;
  id v8 = v7;
  if (v6)
  {

    id v19 = 0;
    id v9 = [MEMORY[0x1E4F28DC0] unarchivedObjectOfClass:objc_opt_class() fromData:v6 error:&v19];
    id v8 = v19;
    if (v9) {
      goto LABEL_13;
    }
    id v10 = (void *)MEMORY[0x1D9452090]();
    id v11 = HMFGetOSLogHandle();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_10;
    }
    uint64_t v12 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    uint64_t v22 = v12;
    __int16 v23 = 2112;
    id v24 = v8;
    uint64_t v13 = "%{public}@Failed to unarchive accessory cache from data: %@";
    uint64_t v14 = v11;
    uint32_t v15 = 22;
    goto LABEL_9;
  }
  double v16 = [v7 domain];
  if (![v16 isEqualToString:*MEMORY[0x1E4F281F8]])
  {

    goto LABEL_12;
  }
  uint64_t v17 = [v8 code];

  if (v17 != 260)
  {
    id v10 = (void *)MEMORY[0x1D9452090]();
    id v11 = HMFGetOSLogHandle();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
LABEL_10:

      goto LABEL_12;
    }
    uint64_t v12 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543874;
    uint64_t v22 = v12;
    __int16 v23 = 2112;
    id v24 = v5;
    __int16 v25 = 2112;
    id v26 = v8;
    uint64_t v13 = "%{public}@Unable to load contents of cache file %@ - error %@";
    uint64_t v14 = v11;
    uint32_t v15 = 32;
LABEL_9:
    _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_ERROR, v13, buf, v15);

    goto LABEL_10;
  }
LABEL_12:
  id v9 = 0;
LABEL_13:

  return v9;
}

+ (void)saveAccessoryCache:(id)a3 forIdentifier:(id)a4
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = a4;
  id v7 = (void *)MEMORY[0x1D9452090]();
  id v8 = (void *)[objc_alloc(MEMORY[0x1E4F654E0]) initWithName:@"com.apple.homed.btle-cache-save."];
  id v9 = getBLEAccessoryCachePath();
  id v10 = [v9 stringByAppendingFormat:@"/%@", v6];

  id v11 = [MEMORY[0x1E4F28DB0] archivedDataWithRootObject:v5 requiringSecureCoding:1 error:0];
  uint64_t v12 = v11;
  if (!v11 || ([v11 writeToFile:v10 atomically:1] & 1) == 0)
  {
    uint64_t v13 = (void *)MEMORY[0x1D9452090]();
    uint64_t v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint32_t v15 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v17 = v15;
      __int16 v18 = 2112;
      id v19 = v10;
      _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_ERROR, "%{public}@Failed caching to file: %@", buf, 0x16u);
    }
  }
}

uint64_t __29__HMDHomeManager_logCategory__block_invoke()
{
  uint64_t v0 = HMFCreateOSLogHandle();
  uint64_t v1 = logCategory__hmf_once_v15_171187;
  logCategory__hmf_once_v15_171187 = v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

- (id)writeMigrationRecordWithShouldSkipKeyRollOperations:(BOOL)a3 forceMigrationFailureForTesting:(BOOL)a4 migrateFromTestDirectory:(BOOL)a5 dryRun:(BOOL)a6
{
  BOOL v6 = a6;
  uint64_t v7 = a5;
  BOOL v8 = a4;
  uint64_t v9 = a3;
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  id v11 = (void *)MEMORY[0x1D9452090](self, a2);
  uint64_t v12 = self;
  uint64_t v13 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = HMFGetLogIdentifier();
    uint32_t v15 = HMFBooleanToString();
    double v16 = HMFBooleanToString();
    HMFBooleanToString();
    v17 = unsigned int v38 = v7;
    HMFBooleanToString();
    unsigned int v37 = v9;
    BOOL v18 = v8;
    id v19 = v11;
    id v21 = v20 = v6;
    *(_DWORD *)long long buf = 138544386;
    __int16 v40 = v14;
    __int16 v41 = 2112;
    id v42 = v15;
    __int16 v43 = 2112;
    __int16 v44 = v16;
    __int16 v45 = 2112;
    id v46 = v17;
    __int16 v47 = 2112;
    uint64_t v48 = v21;
    _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_DEFAULT, "%{public}@Going to write migration record to disk with shouldSkipKeyRollOperations: %@ forceMigrationFailureForTesting: %@, migrateFromTestDirectory: %@, dryRun: %@", buf, 0x34u);

    BOOL v6 = v20;
    id v11 = v19;
    BOOL v8 = v18;
    uint64_t v9 = v37;

    uint64_t v7 = v38;
  }

  uint64_t v22 = +[HMDHH2MigratorRecord singleRecord];
  [v22 setShouldSkipKeyRollOperations:v9];
  [v22 setForceMigrationFailureForTesting:v8];
  [v22 setMigrateFromTestDirectory:v7];
  [v22 setDryRun:v6];
  if (([v22 writeNewMigrationRecord] & 1) == 0)
  {
    id v30 = (void *)MEMORY[0x1D9452090]();
    id v31 = v12;
    id v32 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      id v33 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      __int16 v40 = v33;
      _os_log_impl(&dword_1D49D5000, v32, OS_LOG_TYPE_ERROR, "%{public}@Unable to write migration record locally. Cannot start the migration work.", buf, 0xCu);
    }
    uint64_t v34 = [MEMORY[0x1E4F28C58] hmPrivateErrorWithCode:2702];
    goto LABEL_14;
  }
  char v23 = [v22 isMigrationInProgress];
  id v24 = (void *)MEMORY[0x1D9452090]();
  __int16 v25 = v12;
  id v26 = HMFGetOSLogHandle();
  uint64_t v27 = v26;
  if ((v23 & 1) == 0)
  {
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      id v35 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      __int16 v40 = v35;
      _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_ERROR, "%{public}@Not sure what happened here. We tried taking the ownership of the migration but could not. Failing the request...", buf, 0xCu);
    }
    uint64_t v34 = [MEMORY[0x1E4F28C58] hmErrorWithCode:-1 description:@"Error occurred while trying to take ownership of the migration work" reason:@"Taking the ownership writes the record to disk" suggestion:@"Check why the disk operation failed on HMDHH2MigratorRecord"];
LABEL_14:
    id v29 = (void *)v34;
    goto LABEL_15;
  }
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    id v28 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    __int16 v40 = v28;
    __int16 v41 = 2112;
    id v42 = v22;
    _os_log_impl(&dword_1D49D5000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@Successfully wrote migration record : %@", buf, 0x16u);
  }
  id v29 = 0;
LABEL_15:

  return v29;
}

- (void)_handleTestHH2Migration:(id)a3
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ((isInternalBuild() & 1) == 0)
  {
    uint64_t v7 = (void *)MEMORY[0x1D9452090]();
    BOOL v8 = self;
    uint64_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      id v10 = HMFGetLogIdentifier();
      int v11 = 138543362;
      uint64_t v12 = v10;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_FAULT, "%{public}@Not sure how this message made it through isInternalBuild checks. DEBUG THIS!!!", (uint8_t *)&v11, 0xCu);
    }
    id v5 = [MEMORY[0x1E4F28C58] hmErrorWithCode:10];
    goto LABEL_7;
  }
  id v5 = -[HMDHomeManager writeMigrationRecordWithShouldSkipKeyRollOperations:forceMigrationFailureForTesting:migrateFromTestDirectory:dryRun:](self, "writeMigrationRecordWithShouldSkipKeyRollOperations:forceMigrationFailureForTesting:migrateFromTestDirectory:dryRun:", 1, 0, 1, [v4 BOOLForKey:*MEMORY[0x1E4F2D440]]);
  if (v5)
  {
LABEL_7:
    [v4 respondWithError:v5];
    goto LABEL_8;
  }
  +[HMDResetConfigPostCleanup writePostCleanupRecordToRemoveAllCoreDataFilesWithReason:5];
  BOOL v6 = [(HMDHomeManager *)self hh2FrameworkSwitch];
  [(id)objc_opt_class() switchToHH2AndRelaunchHomed];

  [v4 respondWithSuccess];
LABEL_8:
}

- (BOOL)canHH2MigrationBeStarted:(id *)a3
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  id v5 = [(HMDHomeManager *)self cloudDataSyncStateFilter];
  char v6 = [v5 isiCloudSwitchEnabled];

  if (v6)
  {
    uint64_t v7 = [(HMDHomeManager *)self cloudDataSyncStateFilter];
    char v8 = [v7 isKeychainSyncSwitchEnabled];

    if (v8)
    {
      uint64_t v9 = [(HMDHomeManager *)self cloudReachabilityMonitor];
      char v10 = [v9 isReachable];

      if (v10)
      {
        int v11 = [[HMDHH2FrameworkSwitch alloc] initWithAutoSwitchDisabledWithHomeManager:self];
        id v64 = 0;
        uint64_t v12 = [(HMDHH2FrameworkSwitch *)v11 areCloudKitServersReachableWithError:&v64];
        id v13 = v64;
        if (v12 != 1)
        {
          if (v12)
          {
            double v52 = (void *)MEMORY[0x1D9452090]();
            id v53 = self;
            id v54 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
            {
              id v55 = HMFGetLogIdentifier();
              *(_DWORD *)long long buf = 138543362;
              __int16 v66 = v55;
              _os_log_impl(&dword_1D49D5000, v54, OS_LOG_TYPE_ERROR, "%{public}@Cannot start the HH2 migration as there is a CloudKit account status issue", buf, 0xCu);
            }
            if (a3)
            {
              BOOL v18 = +[HMDHH2FrameworkSwitch errorFromHMDCKAccountStatus:v12];
              goto LABEL_42;
            }
          }
          else
          {
            uint64_t v14 = (void *)MEMORY[0x1D9452090]();
            uint32_t v15 = self;
            double v16 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              uint64_t v17 = HMFGetLogIdentifier();
              *(_DWORD *)long long buf = 138543362;
              __int16 v66 = v17;
              _os_log_impl(&dword_1D49D5000, v16, OS_LOG_TYPE_ERROR, "%{public}@Cannot start the HH2 migration as CloudKit account status could not be queried", buf, 0xCu);
            }
            if (a3)
            {
              BOOL v18 = [MEMORY[0x1E4F28C58] hmPrivateErrorWithCode:2727 underlyingError:v13];
LABEL_42:
              BOOL v30 = 0;
              *a3 = v18;
LABEL_44:

              return v30;
            }
          }
LABEL_43:
          BOOL v30 = 0;
          goto LABEL_44;
        }
        id v35 = (void *)MEMORY[0x1D9452090]();
        BOOL v36 = self;
        unsigned int v37 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          unsigned int v38 = HMFGetLogIdentifier();
          id v39 = NSNumber;
          __int16 v40 = [(HMDHomeManager *)v36 reachabilityMonitor];
          __int16 v41 = objc_msgSend(v39, "numberWithUnsignedInteger:", objc_msgSend(v40, "reachabilityPath"));
          *(_DWORD *)long long buf = 138543618;
          __int16 v66 = v38;
          __int16 v67 = 2112;
          BOOL v68 = v41;
          _os_log_impl(&dword_1D49D5000, v37, OS_LOG_TYPE_INFO, "%{public}@Current Network path : %@", buf, 0x16u);
        }
        id v42 = [(HMDHomeManager *)v36 reachabilityMonitor];
        uint64_t v43 = [v42 reachabilityPath];

        if (v43 == 2)
        {
          __int16 v44 = [MEMORY[0x1E4F28F80] processInfo];
          int v45 = [v44 isLowPowerModeEnabled];

          if (!v45)
          {
            BOOL v30 = 1;
            goto LABEL_44;
          }
          id v46 = (void *)MEMORY[0x1D9452090]();
          __int16 v47 = v36;
          uint64_t v48 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
          {
            uint64_t v49 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543362;
            __int16 v66 = v49;
            _os_log_impl(&dword_1D49D5000, v48, OS_LOG_TYPE_ERROR, "%{public}@Cannot start the HH2 migration as low power mode is enabled", buf, 0xCu);
          }
          if (!a3) {
            goto LABEL_43;
          }
          double v50 = (void *)MEMORY[0x1E4F28C58];
          uint64_t v51 = 2712;
        }
        else
        {
          BOOL v56 = (void *)MEMORY[0x1D9452090]();
          uint64_t v57 = v36;
          uint64_t v58 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
          {
            uint64_t v59 = HMFGetLogIdentifier();
            id v60 = NSNumber;
            id v61 = [(HMDHomeManager *)v57 reachabilityMonitor];
            double v62 = objc_msgSend(v60, "numberWithUnsignedInteger:", objc_msgSend(v61, "reachabilityPath"));
            *(_DWORD *)long long buf = 138543618;
            __int16 v66 = v59;
            __int16 v67 = 2112;
            BOOL v68 = v62;
            _os_log_impl(&dword_1D49D5000, v58, OS_LOG_TYPE_ERROR, "%{public}@Cannot start the HH2 migration as user is connected on cellular network : %@", buf, 0x16u);
          }
          if (!a3) {
            goto LABEL_43;
          }
          double v50 = (void *)MEMORY[0x1E4F28C58];
          uint64_t v51 = 2726;
        }
        BOOL v18 = [v50 hmPrivateErrorWithCode:v51];
        goto LABEL_42;
      }
      id v31 = (void *)MEMORY[0x1D9452090]();
      id v32 = self;
      id v33 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        uint64_t v34 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        __int16 v66 = v34;
        _os_log_impl(&dword_1D49D5000, v33, OS_LOG_TYPE_ERROR, "%{public}@Cannot start the HH2 migration as CloudKit servers are not reachable", buf, 0xCu);
      }
      if (a3)
      {
        char v23 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v24 = 2705;
        goto LABEL_14;
      }
    }
    else
    {
      id v26 = (void *)MEMORY[0x1D9452090]();
      uint64_t v27 = self;
      id v28 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        id v29 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        __int16 v66 = v29;
        _os_log_impl(&dword_1D49D5000, v28, OS_LOG_TYPE_ERROR, "%{public}@Cannot start the HH2 migration as iCloud keychain sync is not enabled", buf, 0xCu);
      }
      if (a3)
      {
        __int16 v25 = [MEMORY[0x1E4F28C58] hmErrorWithCode:76];
        goto LABEL_19;
      }
    }
    return 0;
  }
  id v19 = (void *)MEMORY[0x1D9452090]();
  BOOL v20 = self;
  id v21 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    uint64_t v22 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    __int16 v66 = v22;
    _os_log_impl(&dword_1D49D5000, v21, OS_LOG_TYPE_ERROR, "%{public}@Cannot start the HH2 migration as iCloud switch for HomeKit is not enabled", buf, 0xCu);
  }
  if (!a3) {
    return 0;
  }
  char v23 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v24 = 2013;
LABEL_14:
  __int16 v25 = [v23 hmPrivateErrorWithCode:v24];
LABEL_19:
  BOOL v30 = 0;
  *a3 = v25;
  return v30;
}

- (void)saveToPersistentStoreForHH2MigrationWithCompletionHandler:(id)a3
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  char v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    char v8 = HMFGetLogIdentifier();
    int v12 = 138543362;
    id v13 = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Going to save the home graph to local archive before starting the migration", (uint8_t *)&v12, 0xCu);
  }
  uint64_t v9 = [(HMDHomeManager *)v6 backingStore];
  char v10 = objc_opt_class();
  int v11 = [(HMDHomeManager *)v6 backingStore];
  [v10 saveToPersistentStoreWithReason:@"RefreshBeforeMigrationToHH2" homeManager:v6 shouldIncrementGenerationCounter:1 backingStore:v11 completionHandler:v4];
}

- (void)refreshHomeDataAndArchiveLocallyWithIsAutoMigration:(BOOL)a3 completion:(id)a4
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v6 = a4;
  uint64_t v7 = (void *)MEMORY[0x1D9452090]();
  char v8 = self;
  uint64_t v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    char v10 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    uint64_t v17 = v10;
    _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@refreshing home data fetch from cloud and going to archive it to local persistent store", buf, 0xCu);
  }
  objc_initWeak((id *)buf, v8);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  void v12[2] = __101__HMDHomeManager_HH2FrameworkSwitch__refreshHomeDataAndArchiveLocallyWithIsAutoMigration_completion___block_invoke;
  v12[3] = &unk_1E6A18328;
  objc_copyWeak(&v14, (id *)buf);
  BOOL v15 = a3;
  id v11 = v6;
  id v13 = v11;
  [(HMDHomeManager *)v8 _fetchAllZones:v12];

  objc_destroyWeak(&v14);
  objc_destroyWeak((id *)buf);
}

void __101__HMDHomeManager_HH2FrameworkSwitch__refreshHomeDataAndArchiveLocallyWithIsAutoMigration_completion___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v3)
  {
    if (!*(unsigned char *)(a1 + 48))
    {
      id v5 = [v3 domain];
      if ([v5 isEqual:*MEMORY[0x1E4F19C40]])
      {
        uint64_t v6 = [v3 code];

        if (v6 == 26)
        {
          uint64_t v7 = (void *)MEMORY[0x1D9452090]();
          id v8 = WeakRetained;
          uint64_t v9 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            char v10 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            uint64_t v24 = v10;
            __int16 v25 = 2114;
            id v26 = v3;
            _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Ignoring %{public}@ for dry-run/manual migration when refreshing home data before migration", buf, 0x16u);
          }
          goto LABEL_8;
        }
      }
      else
      {
      }
    }
    uint64_t v17 = (void *)MEMORY[0x1D9452090]();
    id v18 = WeakRetained;
    id v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      BOOL v20 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v24 = v20;
      __int16 v25 = 2112;
      id v26 = v3;
      _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_ERROR, "%{public}@Unable to refresh data from cloud before starting the migration: %@", buf, 0x16u);
    }
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = [MEMORY[0x1E4F28C58] hmPrivateErrorWithCode:2704 description:0 underlyingError:v3];
    goto LABEL_17;
  }
LABEL_8:
  if (WeakRetained)
  {
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    void v21[2] = __101__HMDHomeManager_HH2FrameworkSwitch__refreshHomeDataAndArchiveLocallyWithIsAutoMigration_completion___block_invoke_76;
    void v21[3] = &unk_1E6A19358;
    id v22 = *(id *)(a1 + 32);
    [WeakRetained saveToPersistentStoreForHH2MigrationWithCompletionHandler:v21];
    id v11 = v22;
    goto LABEL_19;
  }
  int v12 = (void *)MEMORY[0x1D9452090]();
  id v13 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    id v14 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    uint64_t v24 = v14;
    _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_ERROR, "%{public}@(A) HomeManager is not available", buf, 0xCu);
  }
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = [MEMORY[0x1E4F28C58] hmErrorWithCode:20];
LABEL_17:
  id v11 = (void *)v16;
  if (v15) {
    (*(void (**)(uint64_t, uint64_t))(v15 + 16))(v15, v16);
  }
LABEL_19:
}

uint64_t __101__HMDHomeManager_HH2FrameworkSwitch__refreshHomeDataAndArchiveLocallyWithIsAutoMigration_completion___block_invoke_76(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

- (void)_startHH2MigrationWithShouldSkipKeyRollOperations:(BOOL)a3 forceMigrationFailureForTesting:(BOOL)a4 isAutoMigration:(BOOL)a5 dryRun:(BOOL)a6 completionHandler:(id)a7
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v12 = a7;
  id v13 = (void *)MEMORY[0x1D9452090]();
  id v14 = self;
  uint64_t v15 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    uint64_t v16 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    id v29 = v16;
    _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@checking whether CK servers are reachable or not", buf, 0xCu);
  }
  uint64_t v17 = [[HMDHH2FrameworkSwitch alloc] initWithAutoSwitchDisabledWithHomeManager:v14];
  id v27 = 0;
  uint64_t v18 = [(HMDHH2FrameworkSwitch *)v17 areCloudKitServersReachableWithError:&v27];
  id v19 = v27;
  if (v18 == 1)
  {
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    void v21[2] = __161__HMDHomeManager_HH2FrameworkSwitch___startHH2MigrationWithShouldSkipKeyRollOperations_forceMigrationFailureForTesting_isAutoMigration_dryRun_completionHandler___block_invoke;
    void v21[3] = &unk_1E6A18300;
    void v21[4] = v14;
    id v22 = v12;
    BOOL v23 = a5;
    BOOL v24 = a3;
    BOOL v25 = a4;
    BOOL v26 = a6;
    +[HMDRemoteLoginUtilities fetchIsTwoFactorAuthenticationEnabledForAccountWithReason:@"HH2 Migration" completionHandler:v21];
  }
  else
  {
    if (v18) {
      +[HMDHH2FrameworkSwitch errorFromHMDCKAccountStatus:v18];
    }
    else {
    BOOL v20 = [MEMORY[0x1E4F28C58] hmPrivateErrorWithCode:2727 underlyingError:v19];
    }
    if (v12) {
      (*((void (**)(id, void *))v12 + 2))(v12, v20);
    }
  }
}

void __161__HMDHomeManager_HH2FrameworkSwitch___startHH2MigrationWithShouldSkipKeyRollOperations_forceMigrationFailureForTesting_isAutoMigration_dryRun_completionHandler___block_invoke(uint64_t a1, char a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 48);
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    void v14[2] = __161__HMDHomeManager_HH2FrameworkSwitch___startHH2MigrationWithShouldSkipKeyRollOperations_forceMigrationFailureForTesting_isAutoMigration_dryRun_completionHandler___block_invoke_74;
    v14[3] = &unk_1E6A182D8;
    id v4 = *(void **)(a1 + 32);
    id v5 = *(id *)(a1 + 40);
    void v14[4] = *(void *)(a1 + 32);
    id v15 = v5;
    v6.i32[0] = *(_DWORD *)(a1 + 48);
    int16x8_t v7 = (int16x8_t)vmovl_u8(v6);
    *(int8x8_t *)v7.i8 = vext_s8(*(int8x8_t *)v7.i8, *(int8x8_t *)v7.i8, 2uLL);
    unsigned __int32 v16 = vmovn_s16(v7).u32[0];
    [v4 refreshHomeDataAndArchiveLocallyWithIsAutoMigration:v3 completion:v14];
    id v8 = v15;
  }
  else
  {
    uint64_t v9 = (void *)MEMORY[0x1D9452090]();
    id v10 = *(id *)(a1 + 32);
    id v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      id v12 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v18 = v12;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_ERROR, "%{public}@This account does not have HSA2 enabled", buf, 0xCu);
    }
    uint64_t v13 = *(void *)(a1 + 40);
    id v8 = [MEMORY[0x1E4F28C58] hmPrivateErrorWithCode:2719];
    if (v13) {
      (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v8);
    }
  }
}

void __161__HMDHomeManager_HH2FrameworkSwitch___startHH2MigrationWithShouldSkipKeyRollOperations_forceMigrationFailureForTesting_isAutoMigration_dryRun_completionHandler___block_invoke_74(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if (v4) {
      (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
    }
  }
  else
  {
    id v5 = [*(id *)(a1 + 32) writeMigrationRecordWithShouldSkipKeyRollOperations:*(unsigned __int8 *)(a1 + 48) forceMigrationFailureForTesting:*(unsigned __int8 *)(a1 + 49) migrateFromTestDirectory:0 dryRun:*(unsigned __int8 *)(a1 + 50)];
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 40);
      if (v6) {
        (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v5);
      }
    }
    else
    {
      [*(id *)(a1 + 32) setHh2MigrationInProgress:1];
      +[HMDHH2MigrationStateLogger recordMigrationStart:*(unsigned __int8 *)(a1 + 51) isDryRun:*(unsigned __int8 *)(a1 + 50)];
      uint64_t v7 = *(void *)(a1 + 40);
      if (v7) {
        uint64_t v7 = (*(uint64_t (**)(uint64_t, void))(v7 + 16))(v7, 0);
      }
      id v8 = (void *)MEMORY[0x1D9452090](v7);
      id v9 = *(id *)(a1 + 32);
      id v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        id v11 = HMFGetLogIdentifier();
        int v13 = 138543362;
        id v14 = v11;
        _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Migration request is successfully received. Starting the migration work locally first...", (uint8_t *)&v13, 0xCu);
      }
      id v12 = [*(id *)(a1 + 32) hh2FrameworkSwitch];
      [v12 switchToHH2AndRelaunchHomedToPerformHH2Migration];
    }
  }
}

- (void)_startHH2MigrationWithRequestMessage:(id)a3 isAutoMigration:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  if (_os_feature_enabled_impl())
  {
    uint64_t v7 = [v6 BOOLForKey:*MEMORY[0x1E4F2D440]];
    id v8 = (void *)MEMORY[0x1D9452090]();
    id v9 = self;
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v11 = HMFGetLogIdentifier();
      id v12 = HMFBooleanToString();
      *(_DWORD *)long long buf = 138543618;
      id v29 = v11;
      __int16 v30 = 2112;
      id v31 = v12;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Starting HH2 migration with dry run:: %@", buf, 0x16u);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (isInternalBuild())
  {
    uint64_t v13 = [v6 BOOLForKey:*MEMORY[0x1E4F2D578]];
    uint64_t v14 = [v6 BOOLForKey:*MEMORY[0x1E4F2D428]];
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v13 = 0;
  }
  id v27 = 0;
  BOOL v15 = [(HMDHomeManager *)self canHH2MigrationBeStarted:&v27];
  id v16 = v27;
  if (v15)
  {
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    id v23[2] = __91__HMDHomeManager_HH2FrameworkSwitch___startHH2MigrationWithRequestMessage_isAutoMigration___block_invoke;
    v23[3] = &unk_1E6A182B0;
    v23[4] = self;
    id v24 = v6;
    char v25 = v7;
    BOOL v26 = v4;
    [(HMDHomeManager *)self _startHH2MigrationWithShouldSkipKeyRollOperations:v13 forceMigrationFailureForTesting:v14 isAutoMigration:v4 dryRun:v7 completionHandler:v23];
  }
  else
  {
    uint64_t v17 = (void *)MEMORY[0x1D9452090]();
    uint64_t v18 = self;
    uint64_t v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      BOOL v20 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v29 = v20;
      _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_ERROR, "%{public}@Could not perform migration as migration criteria did not match", buf, 0xCu);
    }
    [v6 respondWithError:v16];
    if (!(v7 | v4))
    {
      id v21 = [[HMDHH2MigrationDailyTotalsLogEvent alloc] initEndWithAutoMigration:0 dryRun:0 attemptCount:0 error:v16];
      id v22 = [(HMDHomeManager *)v18 logEventSubmitter];
      [v22 submitLogEvent:v21];
    }
  }
}

void __91__HMDHomeManager_HH2FrameworkSwitch___startHH2MigrationWithRequestMessage_isAutoMigration___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  BOOL v4 = (void *)MEMORY[0x1D9452090]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    int v10 = 138543618;
    id v11 = v7;
    __int16 v12 = 2112;
    id v13 = v3;
    _os_log_impl(&dword_1D49D5000, v6, OS_LOG_TYPE_INFO, "%{public}@Migration requested with error : [%@]", (uint8_t *)&v10, 0x16u);
  }
  [*(id *)(a1 + 40) respondWithPayload:0 error:v3];
  if (!*(unsigned char *)(a1 + 48) && v3 && !*(unsigned char *)(a1 + 49))
  {
    id v8 = [[HMDHH2MigrationDailyTotalsLogEvent alloc] initEndWithAutoMigration:0 dryRun:0 attemptCount:0 error:v3];
    id v9 = [*(id *)(a1 + 32) logEventSubmitter];
    [v9 submitLogEvent:v8];
  }
}

- (BOOL)moveDirectlyToHH2IfOnlyHH2SharedHomesExist
{
  BOOL v3 = [(HMDHomeManager *)self _onlyHH2SharedHomesExist];
  if (v3)
  {
    LOBYTE(v3) = [(HMDHomeManager *)self moveDirectlyToHH2];
  }
  return v3;
}

- (void)checkAndMoveDirectlyToHH2IfOnlyHH2SharedHomesExistAllowEmptyOwnedHomes:(BOOL)a3
{
  id v5 = [(HMDHomeManager *)self workQueue];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __109__HMDHomeManager_HH2FrameworkSwitch__checkAndMoveDirectlyToHH2IfOnlyHH2SharedHomesExistAllowEmptyOwnedHomes___block_invoke;
  v6[3] = &unk_1E6A19B58;
  BOOL v7 = a3;
  void v6[4] = self;
  dispatch_async(v5, v6);
}

void __109__HMDHomeManager_HH2FrameworkSwitch__checkAndMoveDirectlyToHH2IfOnlyHH2SharedHomesExistAllowEmptyOwnedHomes___block_invoke(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40) || [*(id *)(a1 + 32) _onlyHH2SharedHomesExist])
  {
    id v2 = [*(id *)(a1 + 32) cloudDataSyncStateFilter];
    [v2 moveDirectlyToHH2IfAccountOnlyHasUpgradedSharedHomesAllowEmptyOwnedHomes:*(unsigned __int8 *)(a1 + 40)];
  }
}

- (BOOL)_onlyHH2SharedHomesExist
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  BOOL v3 = [(HMDHomeManager *)self homes];
  uint64_t v4 = [v3 count];

  if (!v4) {
    return 0;
  }
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v5 = [(HMDHomeManager *)self homes];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v19 objects:v29 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v20;
    while (2)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v20 != v8) {
          objc_enumerationMutation(v5);
        }
        int v10 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        if (([v10 isOwnerUser] & 1) != 0 || (objc_msgSend(v10, "isUpdatedToHH2") & 1) == 0)
        {
          __int16 v12 = (void *)MEMORY[0x1D9452090]();
          id v13 = self;
          uint64_t v14 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            BOOL v15 = HMFGetLogIdentifier();
            [v10 isOwnerUser];
            id v16 = HMFBooleanToString();
            [v10 isUpdatedToHH2];
            uint64_t v17 = HMFBooleanToString();
            *(_DWORD *)long long buf = 138543874;
            id v24 = v15;
            __int16 v25 = 2112;
            BOOL v26 = v16;
            __int16 v27 = 2112;
            id v28 = v17;
            _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Skipping migration because there is at least home that cannot be migrated: owner = %@, isUpdatedToHH2 = %@", buf, 0x20u);
          }
          BOOL v11 = 0;
          goto LABEL_17;
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v19 objects:v29 count:16];
      BOOL v11 = 1;
      if (v7) {
        continue;
      }
      break;
    }
  }
  else
  {
    BOOL v11 = 1;
  }
LABEL_17:

  return v11;
}

- (BOOL)moveDirectlyToHH2
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  BOOL v3 = (void *)MEMORY[0x1D9452090](self, a2);
  uint64_t v4 = self;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    long long v20 = v6;
    _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Skipping migration to HH2 as there are no homes need to migrate for this account", buf, 0xCu);
  }
  uint64_t v7 = [(HMDHomeManager *)v4 hh2FrameworkSwitch];
  id v18 = 0;
  char v8 = [v7 waitForHH2SentinelZoneToBeCreated:&v18 error:6.0e10];
  id v9 = v18;

  int v10 = (void *)MEMORY[0x1D9452090]();
  BOOL v11 = v4;
  __int16 v12 = HMFGetOSLogHandle();
  id v13 = v12;
  if (v8)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      long long v20 = v14;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Successfully created HH2 sentinel zone as this account does not have any home data.", buf, 0xCu);
    }
    +[HMDResetConfigPostCleanup writePostCleanupRecordToRemoveAllCoreDataFilesWithReason:5];
    BOOL v15 = [(HMDHomeManager *)v11 hh2FrameworkSwitch];
    [v15 switchToHH2AfterPerformingHH2PreRebootTask];
  }
  else
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id v16 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      long long v20 = v16;
      __int16 v21 = 2114;
      id v22 = v9;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_ERROR, "%{public}@Cannot move empty account to HH2 because HH2 sentinel zone creation failed: %{public}@", buf, 0x16u);
    }
  }

  return v8;
}

- (void)_handleAttemptHH2AutoMigrationMessage:(id)a3
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1D9452090]();
  uint64_t v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    char v8 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    uint64_t v14 = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Received request to attempt auto migration", buf, 0xCu);
  }
  id v9 = [(HMDHomeManager *)v6 hh2AutoMigrationMonitor];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  id v11[2] = __76__HMDHomeManager_HH2FrameworkSwitch___handleAttemptHH2AutoMigrationMessage___block_invoke;
  v11[3] = &unk_1E6A18288;
  id v12 = v4;
  id v10 = v4;
  [v9 attemptAutoMigrationWithCompletionHandler:v11];
}

void __76__HMDHomeManager_HH2FrameworkSwitch___handleAttemptHH2AutoMigrationMessage___block_invoke(uint64_t a1, int a2)
{
  id v2 = *(void **)(a1 + 32);
  if (a2)
  {
    BOOL v3 = *(void **)(a1 + 32);
    [v3 respondWithSuccess];
  }
  else
  {
    id v4 = [MEMORY[0x1E4F28C58] hmErrorWithCode:48];
    [v2 respondWithError:v4];
  }
}

- (void)_handleUpgradeToHH2Message:(id)a3 autoMigration:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"isHH2Enabled", @"com.apple.homed", 0);
  char v8 = (void *)MEMORY[0x1D9452090]();
  id v9 = self;
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    BOOL v11 = HMFGetLogIdentifier();
    id v12 = HMFBooleanToString();
    int v19 = 138543618;
    long long v20 = v11;
    __int16 v21 = 2112;
    id v22 = v12;
    _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@Received request to upgrade to HH2 with current isHH2Enabled: %@", (uint8_t *)&v19, 0x16u);
  }
  if (AppBooleanValue)
  {
    id v13 = (void *)MEMORY[0x1D9452090]();
    uint64_t v14 = v9;
    uint64_t v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      id v16 = HMFGetLogIdentifier();
      int v19 = 138543362;
      long long v20 = v16;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_INFO, "%{public}@HomeKit Daemon is already running HH2 framework. Nothing to be done.", (uint8_t *)&v19, 0xCu);
    }
    [v6 respondWithSuccess];
  }
  else
  {
    if (([v6 BOOLForKey:*MEMORY[0x1E4F2D440]] & 1) == 0 && !v4)
    {
      id v17 = [[HMDHH2MigrationDailyTotalsLogEvent alloc] initStartWithAutoMigration:0 dryRun:0 attemptCount:0];
      id v18 = [(HMDHomeManager *)v9 logEventSubmitter];
      [v18 submitLogEvent:v17];
    }
    [(HMDHomeManager *)v9 _startHH2MigrationWithRequestMessage:v6 isAutoMigration:v4];
  }
}

- (void)_handleUpgradeToHH2Message:(id)a3
{
}

- (void)_performAutoMigrationToHH2WithIsDryRun:(BOOL)a3 completionHandler:(id)a4
{
  BOOL v4 = a3;
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v6 = a4;
  uint64_t v7 = (void *)MEMORY[0x1D9452090]();
  char v8 = self;
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    id v10 = HMFGetLogIdentifier();
    BOOL v11 = HMFBooleanToString();
    *(_DWORD *)long long buf = 138543618;
    __int16 v25 = v10;
    __int16 v26 = 2112;
    __int16 v27 = v11;
    _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@Performing Auto Migration to HH2 with is dry run: %@", buf, 0x16u);
  }
  id v12 = [MEMORY[0x1E4F1CA60] dictionary];
  id v13 = v12;
  if (v4) {
    [v12 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F2D440]];
  }
  uint64_t v14 = (void *)MEMORY[0x1E4F654B0];
  uint64_t v15 = *MEMORY[0x1E4F2D5B8];
  id v16 = objc_alloc(MEMORY[0x1E4F65488]);
  id v17 = [(HMDHomeManager *)v8 uuid];
  id v18 = (void *)[v16 initWithTarget:v17];
  int v19 = [v14 messageWithName:v15 destination:v18 payload:v13];

  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  void v21[2] = __95__HMDHomeManager_HH2FrameworkSwitch___performAutoMigrationToHH2WithIsDryRun_completionHandler___block_invoke;
  void v21[3] = &unk_1E6A18260;
  BOOL v23 = v4;
  void v21[4] = v8;
  id v22 = v6;
  id v20 = v6;
  [v19 setResponseHandler:v21];
  [(HMDHomeManager *)v8 _handleUpgradeToHH2Message:v19 autoMigration:!v4];
}

void __95__HMDHomeManager_HH2FrameworkSwitch___performAutoMigrationToHH2WithIsDryRun_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  int v7 = _os_feature_enabled_impl();
  if (!v5 && v7 && *(unsigned char *)(a1 + 48))
  {
    char v8 = [MEMORY[0x1E4F65548] productInfo];
    id v9 = [v8 softwareVersion];
    id v10 = [v9 buildVersion];

    BOOL v11 = (void *)MEMORY[0x1D9452090]();
    id v12 = *(id *)(a1 + 32);
    id v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      int v16 = 138543618;
      id v17 = v14;
      __int16 v18 = 2112;
      int v19 = v10;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Request to run dry run is accepted. Saving the build number: %@", (uint8_t *)&v16, 0x16u);
    }
    uint64_t v15 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
    [v15 setObject:v10 forKey:@"hh2MigrationDryRunBuildNumber"];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

- (BOOL)canPerformDryRunOfHH2Migration
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (isInternalBuild())
  {
    BOOL v3 = (void *)MEMORY[0x1D9452090]();
    BOOL v4 = self;
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = HMFGetLogIdentifier();
      int v20 = 138543362;
      __int16 v21 = v6;
      _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@No restriction for dry run for internal build", (uint8_t *)&v20, 0xCu);
    }
    LOBYTE(v4) = 1;
  }
  else
  {
    int v7 = [MEMORY[0x1E4F65548] productInfo];
    char v8 = [v7 softwareVersion];
    id v9 = [v8 buildVersion];

    id v10 = (void *)MEMORY[0x1D9452090]();
    BOOL v11 = self;
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      int v20 = 138543618;
      __int16 v21 = v13;
      __int16 v22 = 2112;
      BOOL v23 = v9;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@current OS version : %@", (uint8_t *)&v20, 0x16u);
    }
    uint64_t v14 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
    uint64_t v15 = [v14 stringForKey:@"hh2MigrationDryRunBuildNumber"];

    int v16 = (void *)MEMORY[0x1D9452090]();
    BOOL v4 = v11;
    id v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      __int16 v18 = HMFGetLogIdentifier();
      int v20 = 138543618;
      __int16 v21 = v18;
      __int16 v22 = 2112;
      BOOL v23 = v15;
      _os_log_impl(&dword_1D49D5000, v17, OS_LOG_TYPE_INFO, "%{public}@Stored OS version : %@", (uint8_t *)&v20, 0x16u);
    }
    LODWORD(v4) = HMFEqualObjects() ^ 1;
  }
  return (char)v4;
}

- (void)dryRunHH2MigrationWithCompletionHandler:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    BOOL v11 = (void *)MEMORY[0x1D9452090]();
    id v12 = self;
    id v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      int v20 = 138543362;
      __int16 v21 = v14;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_ERROR, "%{public}@Not running the dry run as FF is OFF", (uint8_t *)&v20, 0xCu);
    }
    uint64_t v15 = (void (**)(void *, void *))_Block_copy(v4);
    if (!v15) {
      goto LABEL_15;
    }
    int v16 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v17 = 2724;
    goto LABEL_14;
  }
  BOOL v5 = [(HMDHomeManager *)self canPerformDryRunOfHH2Migration];
  id v6 = (void *)MEMORY[0x1D9452090]();
  int v7 = self;
  char v8 = HMFGetOSLogHandle();
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
  if (!v5)
  {
    if (v9)
    {
      __int16 v18 = HMFGetLogIdentifier();
      int v20 = 138543362;
      __int16 v21 = v18;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Not running the dry run as it ran previously for this software version", (uint8_t *)&v20, 0xCu);
    }
    uint64_t v15 = (void (**)(void *, void *))_Block_copy(v4);
    if (!v15) {
      goto LABEL_15;
    }
    int v16 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v17 = 2725;
LABEL_14:
    int v19 = [v16 hmPrivateErrorWithCode:v17];
    v15[2](v15, v19);

LABEL_15:
    goto LABEL_16;
  }
  if (v9)
  {
    id v10 = HMFGetLogIdentifier();
    int v20 = 138543362;
    __int16 v21 = v10;
    _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Going to do a Dry run of HH2 migration as we never ran it on this software version", (uint8_t *)&v20, 0xCu);
  }
  [(HMDHomeManager *)v7 _performAutoMigrationToHH2WithIsDryRun:1 completionHandler:v4];
LABEL_16:
}

- (void)autoMigrateToHH2WithCompletionHandler:(id)a3
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  BOOL v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = self;
  int v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    char v8 = HMFGetLogIdentifier();
    int v9 = 138543362;
    id v10 = v8;
    _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_INFO, "%{public}@Auto Migration: Upgrading to HH2", (uint8_t *)&v9, 0xCu);
  }
  [(HMDHomeManager *)v6 _performAutoMigrationToHH2WithIsDryRun:0 completionHandler:v4];
}

- (void)determineEmptyHomesForSharedUsersWithCompletionHandler:(id)a3
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  BOOL v5 = [(HMDHomeManager *)self homes];
  uint64_t v6 = [v5 count];

  if (v6)
  {
    int v7 = [(HMDHomeManager *)self cloudDataSyncManager];
    char v8 = [v7 cloudCache];

    if (v8)
    {
      dispatch_group_t v9 = dispatch_group_create();
      id v10 = [MEMORY[0x1E4F1CA60] dictionary];
      uint64_t v11 = [(HMDHomeManager *)self homes];
      v29[0] = MEMORY[0x1E4F143A8];
      v29[1] = 3221225472;
      void v29[2] = __93__HMDHomeManager_HH2FrameworkSwitch__determineEmptyHomesForSharedUsersWithCompletionHandler___block_invoke;
      void v29[3] = &unk_1E6A18218;
      void v29[4] = self;
      id v12 = v10;
      id v30 = v12;
      dispatch_group_t v31 = v9;
      id v32 = v8;
      id v13 = v9;
      objc_msgSend(v11, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v29);

      uint64_t v14 = [(HMDHomeManager *)self workQueue];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __93__HMDHomeManager_HH2FrameworkSwitch__determineEmptyHomesForSharedUsersWithCompletionHandler___block_invoke_56;
      block[3] = &unk_1E6A193D0;
      void block[4] = self;
      id v27 = v12;
      id v28 = v4;
      id v15 = v12;
      dispatch_group_notify(v13, v14, block);
    }
    else
    {
      __int16 v21 = (void *)MEMORY[0x1D9452090]();
      uint64_t v22 = self;
      BOOL v23 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v24 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v34 = v24;
        _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_DEFAULT, "%{public}@[Shared User] : Cloud cache is nil. Cannot proceed to determine empty homes. aborting...", buf, 0xCu);
      }
      __int16 v25 = _Block_copy(v4);
      id v13 = v25;
      if (v25) {
        ((void (*)(NSObject *, void))v25[2].isa)(v25, MEMORY[0x1E4F1CC08]);
      }
    }
  }
  else
  {
    int v16 = (void *)MEMORY[0x1D9452090]();
    uint64_t v17 = self;
    __int16 v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v34 = v19;
      _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_DEFAULT, "%{public}@[Shared User] : No homes found.", buf, 0xCu);
    }
    int v20 = _Block_copy(v4);
    char v8 = v20;
    if (v20) {
      (*((void (**)(void *, void))v20 + 2))(v20, MEMORY[0x1E4F1CC08]);
    }
  }
}

void __93__HMDHomeManager_HH2FrameworkSwitch__determineEmptyHomesForSharedUsersWithCompletionHandler___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ([v3 isOwnerUser])
  {
    id v4 = *(void **)(a1 + 40);
    BOOL v5 = [v3 uuid];
    [v4 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:v5];

    dispatch_group_enter(*(dispatch_group_t *)(a1 + 48));
    uint64_t v6 = *(void **)(a1 + 56);
    int v7 = [v3 zoneID];
    char v8 = [v7 UUIDString];
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    id v13[2] = __93__HMDHomeManager_HH2FrameworkSwitch__determineEmptyHomesForSharedUsersWithCompletionHandler___block_invoke_54;
    void v13[3] = &unk_1E6A181F0;
    void v13[4] = *(void *)(a1 + 32);
    id v14 = *(id *)(a1 + 48);
    id v15 = v3;
    id v16 = *(id *)(a1 + 40);
    [v6 homeZoneWithName:v8 owner:&stru_1F2C9F1A8 completion:v13];
  }
  else
  {
    dispatch_group_t v9 = (void *)MEMORY[0x1D9452090]();
    id v10 = *(id *)(a1 + 32);
    uint64_t v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      __int16 v18 = v12;
      _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Having a shared home (empty or full) will be considered home as non-empty", buf, 0xCu);
    }
  }
}

void __93__HMDHomeManager_HH2FrameworkSwitch__determineEmptyHomesForSharedUsersWithCompletionHandler___block_invoke_56(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1D9452090]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v5 = HMFGetLogIdentifier();
    uint64_t v6 = *(void *)(a1 + 40);
    int v9 = 138543618;
    id v10 = v5;
    __int16 v11 = 2112;
    uint64_t v12 = v6;
    _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@[Shared User] : Empty home determination map: %@", (uint8_t *)&v9, 0x16u);
  }
  int v7 = _Block_copy(*(const void **)(a1 + 48));
  char v8 = v7;
  if (v7) {
    (*((void (**)(void *, void))v7 + 2))(v7, *(void *)(a1 + 40));
  }
}

void __93__HMDHomeManager_HH2FrameworkSwitch__determineEmptyHomesForSharedUsersWithCompletionHandler___block_invoke_54(uint64_t a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    int v7 = (void *)MEMORY[0x1D9452090]();
    id v8 = *(id *)(a1 + 32);
    int v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v10 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v22 = v10;
      __int16 v23 = 2112;
      id v24 = v6;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_ERROR, "%{public}@[Shared User] : Error occurred while querying cloud cache: %@", buf, 0x16u);
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }
  else
  {
    __int16 v11 = [*(id *)(a1 + 32) workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __93__HMDHomeManager_HH2FrameworkSwitch__determineEmptyHomesForSharedUsersWithCompletionHandler___block_invoke_55;
    block[3] = &unk_1E6A190C0;
    id v16 = *(id *)(a1 + 48);
    id v12 = v5;
    uint64_t v13 = *(void *)(a1 + 32);
    id v14 = *(void **)(a1 + 40);
    id v17 = v12;
    uint64_t v18 = v13;
    id v19 = v14;
    id v20 = *(id *)(a1 + 56);
    dispatch_async(v11, block);
  }
}

void __93__HMDHomeManager_HH2FrameworkSwitch__determineEmptyHomesForSharedUsersWithCompletionHandler___block_invoke_55(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v2 = [*(id *)(a1 + 32) residentDeviceManager];
  char v3 = [v2 wasTheHomeFetchedFromCloud];

  if [*(id *)(a1 + 40) hasServerTokenAvailable] && (v3)
  {
    if (HMDIsEmptyHome(*(void **)(a1 + 32)))
    {
      id v4 = *(void **)(a1 + 64);
      id v5 = [*(id *)(a1 + 32) uuid];
      [v4 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:v5];
    }
    id v6 = (void *)MEMORY[0x1D9452090]();
    id v7 = *(id *)(a1 + 48);
    id v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = HMFGetLogIdentifier();
      id v10 = NSNumber;
      uint64_t v25 = [*(id *)(a1 + 32) rooms];
      objc_msgSend(v10, "numberWithUnsignedInteger:", objc_msgSend(v25, "count"));
      v11 = id v24 = v6;
      id v12 = NSNumber;
      __int16 v23 = [*(id *)(a1 + 32) accessories];
      uint64_t v13 = objc_msgSend(v12, "numberWithUnsignedInteger:", objc_msgSend(v23, "count"));
      id v14 = NSNumber;
      id v15 = [*(id *)(a1 + 32) sharedUsers];
      id v16 = objc_msgSend(v14, "numberWithUnsignedInteger:", objc_msgSend(v15, "count"));
      id v17 = NSNumber;
      uint64_t v18 = [*(id *)(a1 + 32) outgoingInvitations];
      id v19 = objc_msgSend(v17, "numberWithUnsignedInteger:", objc_msgSend(v18, "count"));
      *(_DWORD *)long long buf = 138544386;
      id v27 = v9;
      __int16 v28 = 2112;
      id v29 = v11;
      __int16 v30 = 2112;
      dispatch_group_t v31 = v13;
      __int16 v32 = 2112;
      id v33 = v16;
      __int16 v34 = 2112;
      uint64_t v35 = v19;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@[Shared User] : Home Stats: [Total Rooms: %@], [Total Accessories: %@], [Total Shared Users: %@], [Total Invitations: %@]", buf, 0x34u);

      id v6 = v24;
    }
  }
  else
  {
    id v6 = (void *)MEMORY[0x1D9452090]();
    id v7 = *(id *)(a1 + 48);
    id v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v20 = HMFGetLogIdentifier();
      [*(id *)(a1 + 40) hasServerTokenAvailable];
      __int16 v21 = HMFBooleanToString();
      uint64_t v22 = HMFBooleanToString();
      *(_DWORD *)long long buf = 138543874;
      id v27 = v20;
      __int16 v28 = 2114;
      id v29 = v21;
      __int16 v30 = 2114;
      dispatch_group_t v31 = v22;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@[Shared User] : Either Server token is not available (%{public}@) or the home was not fetched from the cloud (%{public}@)", buf, 0x20u);
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

- (void)_determineEmptyHomesForOwnersWithCompletionHandler:(id)a3
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self homes];
  uint64_t v6 = [v5 count];

  if (v6)
  {
    id v7 = [(HMDHomeManager *)self cloudDataSyncManager];
    id v8 = [v7 cloudCache];

    if (v8)
    {
      dispatch_group_t v9 = dispatch_group_create();
      id v10 = [MEMORY[0x1E4F1CA60] dictionary];
      __int16 v11 = [(HMDHomeManager *)self homes];
      v30[0] = MEMORY[0x1E4F143A8];
      v30[1] = 3221225472;
      v30[2] = __89__HMDHomeManager_HH2FrameworkSwitch___determineEmptyHomesForOwnersWithCompletionHandler___block_invoke;
      v30[3] = &unk_1E6A18218;
      id v12 = v10;
      id v31 = v12;
      __int16 v32 = self;
      dispatch_group_t v33 = v9;
      id v34 = v8;
      uint64_t v13 = v9;
      objc_msgSend(v11, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v30);

      id v14 = [(HMDHomeManager *)self workQueue];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __89__HMDHomeManager_HH2FrameworkSwitch___determineEmptyHomesForOwnersWithCompletionHandler___block_invoke_49;
      block[3] = &unk_1E6A193D0;
      id v27 = v12;
      __int16 v28 = self;
      id v29 = v4;
      id v15 = v12;
      dispatch_group_notify(v13, v14, block);
    }
    else
    {
      __int16 v21 = (void *)MEMORY[0x1D9452090]();
      uint64_t v22 = self;
      __int16 v23 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        id v24 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v36 = v24;
        _os_log_impl(&dword_1D49D5000, v23, OS_LOG_TYPE_DEFAULT, "%{public}@Cloud cache is nil. Cannot proceed to determine empty homes. aborting...", buf, 0xCu);
      }
      uint64_t v25 = _Block_copy(v4);
      uint64_t v13 = v25;
      if (v25) {
        ((void (*)(NSObject *, void))v25[2].isa)(v25, 0);
      }
    }
  }
  else
  {
    id v16 = (void *)MEMORY[0x1D9452090]();
    id v17 = self;
    uint64_t v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      id v19 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v36 = v19;
      _os_log_impl(&dword_1D49D5000, v18, OS_LOG_TYPE_DEFAULT, "%{public}@No homes found.", buf, 0xCu);
    }
    id v20 = _Block_copy(v4);
    id v8 = v20;
    if (v20) {
      (*((void (**)(void *, void))v20 + 2))(v20, 0);
    }
  }
}

void __89__HMDHomeManager_HH2FrameworkSwitch___determineEmptyHomesForOwnersWithCompletionHandler___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = [v3 uuid];
  [v4 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:v5];

  if ([v3 isOwnerUser])
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 48));
    uint64_t v6 = *(void **)(a1 + 56);
    id v7 = [v3 zoneID];
    id v8 = [v7 UUIDString];
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    void v14[2] = __89__HMDHomeManager_HH2FrameworkSwitch___determineEmptyHomesForOwnersWithCompletionHandler___block_invoke_46;
    v14[3] = &unk_1E6A181F0;
    dispatch_group_t v9 = *(void **)(a1 + 48);
    void v14[4] = *(void *)(a1 + 40);
    id v15 = v9;
    id v16 = v3;
    id v17 = *(id *)(a1 + 32);
    [v6 homeZoneWithName:v8 owner:&stru_1F2C9F1A8 completion:v14];
  }
  else
  {
    id v10 = (void *)MEMORY[0x1D9452090]();
    id v11 = *(id *)(a1 + 40);
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v19 = v13;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Having a shared home (empty or full) will be considered home as non-empty", buf, 0xCu);
    }
  }
}

void __89__HMDHomeManager_HH2FrameworkSwitch___determineEmptyHomesForOwnersWithCompletionHandler___block_invoke_49(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1 + 32) count];
  id v3 = [*(id *)(a1 + 40) homes];
  uint64_t v4 = [v3 count];

  id v5 = (void *)MEMORY[0x1D9452090]();
  id v6 = *(id *)(a1 + 40);
  id v7 = HMFGetOSLogHandle();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v2 == v4)
  {
    if (v8)
    {
      dispatch_group_t v9 = HMFGetLogIdentifier();
      id v10 = *(void **)(a1 + 32);
      int v21 = 138543618;
      uint64_t v22 = v9;
      __int16 v23 = 2112;
      id v24 = v10;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Empty home determination map: %@", (uint8_t *)&v21, 0x16u);
    }
    objc_msgSend(*(id *)(a1 + 32), "na_allSatisfy:", &__block_literal_global_53_182097);
    id v11 = (void *)MEMORY[0x1D9452090]();
    id v12 = *(id *)(a1 + 40);
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      id v14 = HMFGetLogIdentifier();
      id v15 = HMFBooleanToString();
      int v21 = 138543618;
      uint64_t v22 = v14;
      __int16 v23 = 2112;
      id v24 = v15;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_DEFAULT, "%{public}@Did we found any empty homes for this user: %@", (uint8_t *)&v21, 0x16u);
    }
    id v16 = (void (**)(void))_Block_copy(*(const void **)(a1 + 48));
    id v17 = v16;
    if (v16)
    {
      uint64_t v18 = v16[2];
LABEL_12:
      v18();
    }
  }
  else
  {
    if (v8)
    {
      id v19 = HMFGetLogIdentifier();
      int v21 = 138543362;
      uint64_t v22 = v19;
      _os_log_impl(&dword_1D49D5000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Actual homes in the list and empty home map do not agree. Aborting...", (uint8_t *)&v21, 0xCu);
    }
    uint64_t v20 = (void (**)(void))_Block_copy(*(const void **)(a1 + 48));
    id v17 = v20;
    if (v20)
    {
      uint64_t v18 = v20[2];
      goto LABEL_12;
    }
  }
}

uint64_t __89__HMDHomeManager_HH2FrameworkSwitch___determineEmptyHomesForOwnersWithCompletionHandler___block_invoke_50(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 BOOLValue];
}

void __89__HMDHomeManager_HH2FrameworkSwitch___determineEmptyHomesForOwnersWithCompletionHandler___block_invoke_46(uint64_t a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = (void *)MEMORY[0x1D9452090]();
    id v8 = *(id *)(a1 + 32);
    dispatch_group_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v10 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v22 = v10;
      __int16 v23 = 2112;
      id v24 = v6;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_ERROR, "%{public}@Error occurred while querying cloud cache: %@", buf, 0x16u);
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }
  else
  {
    id v11 = [*(id *)(a1 + 32) workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __89__HMDHomeManager_HH2FrameworkSwitch___determineEmptyHomesForOwnersWithCompletionHandler___block_invoke_47;
    block[3] = &unk_1E6A190C0;
    id v16 = *(id *)(a1 + 48);
    id v12 = v5;
    uint64_t v13 = *(void *)(a1 + 32);
    id v14 = *(void **)(a1 + 40);
    id v17 = v12;
    uint64_t v18 = v13;
    id v19 = v14;
    id v20 = *(id *)(a1 + 56);
    dispatch_async(v11, block);
  }
}

void __89__HMDHomeManager_HH2FrameworkSwitch___determineEmptyHomesForOwnersWithCompletionHandler___block_invoke_47(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1 + 32) residentDeviceManager];
  char v3 = [v2 wasTheHomeFetchedFromCloud];

  if [*(id *)(a1 + 40) hasServerTokenAvailable] && (v3)
  {
    if (HMDIsEmptyHome(*(void **)(a1 + 32)))
    {
      uint64_t v4 = *(void **)(a1 + 64);
      id v5 = [*(id *)(a1 + 32) uuid];
      [v4 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:v5];
    }
    id v6 = (void *)MEMORY[0x1D9452090]();
    id v7 = *(id *)(a1 + 48);
    id v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      dispatch_group_t v9 = HMFGetLogIdentifier();
      id v10 = NSNumber;
      uint64_t v25 = [*(id *)(a1 + 32) rooms];
      objc_msgSend(v10, "numberWithUnsignedInteger:", objc_msgSend(v25, "count"));
      v11 = id v24 = v6;
      id v12 = NSNumber;
      __int16 v23 = [*(id *)(a1 + 32) accessories];
      uint64_t v13 = objc_msgSend(v12, "numberWithUnsignedInteger:", objc_msgSend(v23, "count"));
      id v14 = NSNumber;
      id v15 = [*(id *)(a1 + 32) sharedUsers];
      id v16 = objc_msgSend(v14, "numberWithUnsignedInteger:", objc_msgSend(v15, "count"));
      id v17 = NSNumber;
      uint64_t v18 = [*(id *)(a1 + 32) outgoingInvitations];
      id v19 = objc_msgSend(v17, "numberWithUnsignedInteger:", objc_msgSend(v18, "count"));
      *(_DWORD *)long long buf = 138544386;
      id v27 = v9;
      __int16 v28 = 2112;
      id v29 = v11;
      __int16 v30 = 2112;
      id v31 = v13;
      __int16 v32 = 2112;
      dispatch_group_t v33 = v16;
      __int16 v34 = 2112;
      uint64_t v35 = v19;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Home Stats: [Total Rooms: %@], [Total Accessories: %@], [Total Shared Users: %@], [Total Invitations: %@]", buf, 0x34u);

      id v6 = v24;
    }
  }
  else
  {
    id v6 = (void *)MEMORY[0x1D9452090]();
    id v7 = *(id *)(a1 + 48);
    id v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v20 = HMFGetLogIdentifier();
      [*(id *)(a1 + 40) hasServerTokenAvailable];
      int v21 = HMFBooleanToString();
      uint64_t v22 = HMFBooleanToString();
      *(_DWORD *)long long buf = 138543874;
      id v27 = v20;
      __int16 v28 = 2114;
      id v29 = v21;
      __int16 v30 = 2114;
      id v31 = v22;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Either Server token is not available (%{public}@) or the home was not fetched from the cloud (%{public}@)", buf, 0x20u);
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

- (void)_fetchHasOnlyEmptyHomesWithCompletion:(id)a3
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self cloudDataSyncStateFilter];
  char v6 = [v5 isHomeManagerFirstFetchFinished];

  if (v6)
  {
    id v7 = [(HMDHomeManager *)self cloudDataSyncStateFilter];
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    void v14[2] = __76__HMDHomeManager_HH2FrameworkSwitch___fetchHasOnlyEmptyHomesWithCompletion___block_invoke;
    v14[3] = &unk_1E6A181C8;
    void v14[4] = self;
    id v15 = v4;
    [v7 totalHomesInCloudZones:v14];
  }
  else
  {
    id v8 = (void *)MEMORY[0x1D9452090]();
    dispatch_group_t v9 = self;
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v11 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v17 = v11;
      _os_log_impl(&dword_1D49D5000, v10, OS_LOG_TYPE_INFO, "%{public}@First fetch for Home Manager's zone is not done yet.", buf, 0xCu);
    }
    id v12 = _Block_copy(v4);
    uint64_t v13 = v12;
    if (v12) {
      (*((void (**)(void *, void))v12 + 2))(v12, 0);
    }
  }
}

void __76__HMDHomeManager_HH2FrameworkSwitch___fetchHasOnlyEmptyHomesWithCompletion___block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (v5)
  {
    char v6 = (void *)MEMORY[0x1D9452090]();
    id v7 = *(id *)(a1 + 32);
    id v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      dispatch_group_t v9 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v18 = v9;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch all homes from the cloud. Aborting...", buf, 0xCu);
    }
    id v10 = _Block_copy(*(const void **)(a1 + 40));
    id v11 = v10;
    if (v10) {
      (*((void (**)(void *, void))v10 + 2))(v10, 0);
    }
  }
  else
  {
    id v12 = [*(id *)(a1 + 32) workQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __76__HMDHomeManager_HH2FrameworkSwitch___fetchHasOnlyEmptyHomesWithCompletion___block_invoke_41;
    block[3] = &unk_1E6A181A0;
    uint64_t v13 = *(void **)(a1 + 40);
    void block[4] = *(void *)(a1 + 32);
    uint64_t v16 = a2;
    id v15 = v13;
    dispatch_async(v12, block);
  }
}

void __76__HMDHomeManager_HH2FrameworkSwitch___fetchHasOnlyEmptyHomesWithCompletion___block_invoke_41(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1 + 32) homes];
  uint64_t v3 = [v2 count];
  uint64_t v4 = *(void *)(a1 + 48);

  if (v3 == v4)
  {
    id v5 = *(void **)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    [v5 _determineEmptyHomesForOwnersWithCompletionHandler:v6];
  }
  else
  {
    id v7 = (void *)MEMORY[0x1D9452090]();
    id v8 = *(id *)(a1 + 32);
    dispatch_group_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      id v10 = HMFGetLogIdentifier();
      id v11 = [NSNumber numberWithUnsignedInteger:*(void *)(a1 + 48)];
      id v12 = NSNumber;
      uint64_t v13 = [*(id *)(a1 + 32) homes];
      id v14 = objc_msgSend(v12, "numberWithUnsignedInteger:", objc_msgSend(v13, "count"));
      int v17 = 138543874;
      uint64_t v18 = v10;
      __int16 v19 = 2112;
      id v20 = v11;
      __int16 v21 = 2112;
      uint64_t v22 = v14;
      _os_log_impl(&dword_1D49D5000, v9, OS_LOG_TYPE_INFO, "%{public}@There are still homes in the cloud which are not yet downloaded : [HomesInCloud: %@] [HomesInMemory: %@]", (uint8_t *)&v17, 0x20u);
    }
    id v15 = _Block_copy(*(const void **)(a1 + 40));
    uint64_t v16 = v15;
    if (v15) {
      (*((void (**)(void *, void))v15 + 2))(v15, 0);
    }
  }
}

- (void)fetchHasOnlyEmptyHomesWithCompletion:(id)a3
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (v4)
  {
    id v5 = [(HMDHomeManager *)self workQueue];
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    void v10[2] = __75__HMDHomeManager_HH2FrameworkSwitch__fetchHasOnlyEmptyHomesWithCompletion___block_invoke;
    v10[3] = &unk_1E6A19530;
    void v10[4] = self;
    id v11 = v4;
    dispatch_async(v5, v10);
  }
  else
  {
    uint64_t v6 = (void *)MEMORY[0x1D9452090]();
    id v7 = self;
    id v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      dispatch_group_t v9 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v13 = v9;
      _os_log_impl(&dword_1D49D5000, v8, OS_LOG_TYPE_INFO, "%{public}@Nil completion provided", buf, 0xCu);
    }
  }
}

uint64_t __75__HMDHomeManager_HH2FrameworkSwitch__fetchHasOnlyEmptyHomesWithCompletion___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fetchHasOnlyEmptyHomesWithCompletion:*(void *)(a1 + 40)];
}

- (void)_initializeAutoMigration
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (_os_feature_enabled_impl() & 1) != 0 || (_os_feature_enabled_impl())
  {
    uint64_t v3 = [(HMDHomeManager *)self messageDispatcher];
    uint64_t v4 = *MEMORY[0x1E4F2D310];
    id v5 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    id v15 = v5;
    uint64_t v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v15 count:1];
    [v3 registerForMessage:v4 receiver:self policies:v6 selector:sel__handleAttemptHH2AutoMigrationMessage_];

    id v7 = [HMDHH2AutoMigrationMonitor alloc];
    id v8 = [(HMDHomeManager *)self hh2AutoMigrationEligibilityChecker];
    dispatch_group_t v9 = [(HMDHH2AutoMigrationMonitor *)v7 initWithHomeManager:self eligibilityChecker:v8];
    [(HMDHomeManager *)self setHh2AutoMigrationMonitor:v9];

    id v10 = [(HMDHomeManager *)self hh2AutoMigrationMonitor];
    [v10 startMonitoring];
  }
  else
  {
    id v11 = (void *)MEMORY[0x1D9452090]();
    id v12 = self;
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      int v17 = v14;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Not initializing auto-migration support because feature is disabled", buf, 0xCu);
    }
  }
}

- (void)waitForHH2SentinelZoneToBeRemoved
{
  id v2 = [(HMDHomeManager *)self hh2FrameworkSwitch];
  [v2 waitForHH2SentinelZoneToBeRemoved];
}

- (void)_handleSwitchSetupMode:(id)a3
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (_os_feature_enabled_impl())
  {
    uint64_t v5 = *MEMORY[0x1E4F2D568];
    uint64_t v6 = [v4 numberForKey:*MEMORY[0x1E4F2D568]];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = [v6 integerValue];
      keyExistsAndHasValidFormat[0] = 0;
      CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"HHTTSUMode", @"com.apple.homed", keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat[0]) {
        CFIndex v10 = AppIntegerValue;
      }
      else {
        CFIndex v10 = 0;
      }
      id v11 = [(HMDHomeManager *)self hh2FrameworkSwitch];
      int v12 = [v11 switchToSetupMode:v8];

      if (v12)
      {
        [v4 respondWithSuccess];
      }
      else
      {
        uint64_t v22 = (void *)MEMORY[0x1D9452090]();
        uint64_t v23 = self;
        id v24 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v25 = HMFGetLogIdentifier();
          *(_DWORD *)keyExistsAndHasValidFormat = 138543362;
          id v31 = v25;
          _os_log_impl(&dword_1D49D5000, v24, OS_LOG_TYPE_DEFAULT, "%{public}@Mode switch will result in a change do not callback message.", keyExistsAndHasValidFormat, 0xCu);
        }
        __int16 v26 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", v10, v5);
        id v29 = v26;
        id v27 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v29 forKeys:&v28 count:1];
        [v4 respondWithPayload:v27];
      }
    }
    else
    {
      int v17 = (void *)MEMORY[0x1D9452090]();
      uint64_t v18 = self;
      __int16 v19 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        id v20 = HMFGetLogIdentifier();
        *(_DWORD *)keyExistsAndHasValidFormat = 138543362;
        id v31 = v20;
        _os_log_impl(&dword_1D49D5000, v19, OS_LOG_TYPE_ERROR, "%{public}@No setup mode in request", keyExistsAndHasValidFormat, 0xCu);
      }
      __int16 v21 = [MEMORY[0x1E4F28C58] hmErrorWithCode:3];
      [v4 respondWithError:v21];

      id v7 = 0;
    }
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x1D9452090]();
    uint64_t v14 = self;
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = HMFGetLogIdentifier();
      *(_DWORD *)keyExistsAndHasValidFormat = 138543362;
      id v31 = v16;
      _os_log_impl(&dword_1D49D5000, v15, OS_LOG_TYPE_ERROR, "%{public}@Setup mode is not enabled Failing", keyExistsAndHasValidFormat, 0xCu);
    }
    id v7 = [MEMORY[0x1E4F28C58] hmErrorWithCode:48];
    [v4 respondWithError:v7];
  }
}

- (void)_handleFetchSetupMode:(id)a3
{
  v8[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *MEMORY[0x1E4F2D568];
  uint64_t v3 = NSNumber;
  id v4 = a3;
  uint64_t v5 = [v3 numberWithBool:0];
  v8[0] = v5;
  uint64_t v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v8 forKeys:&v7 count:1];
  [v4 respondWithPayload:v6];
}

- (void)_registerForFrameworkSwitch
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (isiOSDevice() || isMac())
  {
    uint64_t v3 = (void *)MEMORY[0x1D9452090]();
    id v4 = self;
    uint64_t v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v27 = v6;
      _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Registering for Upgrade to HH2 migration request", buf, 0xCu);
    }
    uint64_t v7 = [(HMDHomeManager *)v4 messageDispatcher];
    uint64_t v8 = *MEMORY[0x1E4F2D5B8];
    dispatch_group_t v9 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    uint64_t v25 = v9;
    CFIndex v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v25 count:1];
    [v7 registerForMessage:v8 receiver:v4 policies:v10 selector:sel__handleUpgradeToHH2Message_];
  }
  [(HMDHomeManager *)self _initializeAutoMigration];
  if (isInternalBuild())
  {
    id v11 = (void *)MEMORY[0x1D9452090]();
    int v12 = self;
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v27 = v14;
      _os_log_impl(&dword_1D49D5000, v13, OS_LOG_TYPE_INFO, "%{public}@Registering for test HH2 migration request message", buf, 0xCu);
    }
    id v15 = [(HMDHomeManager *)v12 messageDispatcher];
    uint64_t v16 = *MEMORY[0x1E4F2D5A0];
    int v17 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    id v24 = v17;
    uint64_t v18 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v24 count:1];
    [v15 registerForMessage:v16 receiver:v12 policies:v18 selector:sel__handleTestHH2Migration_];
  }
  __int16 v19 = [(HMDHomeManager *)self messageDispatcher];
  uint64_t v20 = *MEMORY[0x1E4F2D420];
  __int16 v21 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  uint64_t v23 = v21;
  uint64_t v22 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v23 count:1];
  [v19 registerForMessage:v20 receiver:self policies:v22 selector:sel__handleFetchSetupMode_];
}

- (void)stashSharedHomeInfoNotYetMigrated
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v25 = objc_opt_new();
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v2 = [(HMDHomeManager *)self homes];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v26 objects:v36 count:16];
  if (v3)
  {
    uint64_t v5 = v3;
    uint64_t v6 = *(void *)v27;
    *(void *)&long long v4 = 138543618;
    long long v23 = v4;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v27 != v6) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void **)(*((void *)&v26 + 1) + 8 * i);
        if ((objc_msgSend(v8, "isOwnerUser", v23) & 1) == 0)
        {
          dispatch_group_t v9 = [v8 owner];
          CFIndex v10 = [v9 account];
          id v11 = [v10 senderCorrelationIdentifier];

          if (v11)
          {
            int v12 = (void *)MEMORY[0x1D9452090]();
            uint64_t v13 = self;
            uint64_t v14 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
            {
              id v15 = HMFGetLogIdentifier();
              uint64_t v16 = [v8 uuid];
              *(_DWORD *)long long buf = v23;
              dispatch_group_t v33 = v15;
              __int16 v34 = 2112;
              uint64_t v35 = v16;
              _os_log_impl(&dword_1D49D5000, v14, OS_LOG_TYPE_INFO, "%{public}@Stashing info of shared home %@ not being migrated, not yet", buf, 0x16u);
            }
            __int16 v30 = @"HMDHomeManagerAutoAcceptMigrationDateKey";
            int v17 = [MEMORY[0x1E4F1C9C8] now];
            id v31 = v17;
            uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v31 forKeys:&v30 count:1];
            __int16 v19 = [v8 uuid];
            uint64_t v20 = [v19 UUIDString];
            [v25 setObject:v18 forKeyedSubscript:v20];
          }
        }
      }
      uint64_t v5 = [v2 countByEnumeratingWithState:&v26 objects:v36 count:16];
    }
    while (v5);
  }

  if ([v25 count])
  {
    __int16 v21 = [(HMDHomeManager *)self userDefaults];
    uint64_t v22 = (void *)[v25 copy];
    [v21 setObject:v22 forKey:@"HMDHomeManagerSharedHomesNotYetMigratedKey"];
  }
}

- (void)maybeStashOwnerMetadataForPostMigrationPingUsingMigratorRecord:(id)a3
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  id v35 = a3;
  uint64_t v36 = objc_opt_new();
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  id v39 = self;
  id obj = [(HMDHomeManager *)self homes];
  uint64_t v40 = [obj countByEnumeratingWithState:&v41 objects:v55 count:16];
  if (v40)
  {
    uint64_t v38 = *(void *)v42;
    do
    {
      for (uint64_t i = 0; i != v40; ++i)
      {
        if (*(void *)v42 != v38) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void **)(*((void *)&v41 + 1) + 8 * i);
        if ([v5 isOwnerUser]) {
          goto LABEL_11;
        }
        uint64_t v6 = [v5 owner];
        uint64_t v7 = [v6 account];
        uint64_t v8 = [v7 senderCorrelationIdentifier];

        if (!v8)
        {
LABEL_11:
          id v24 = (void *)MEMORY[0x1D9452090]();
          uint64_t v25 = v39;
          long long v26 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
          {
            long long v27 = HMFGetLogIdentifier();
            long long v28 = [v5 owner];
            long long v29 = [v28 account];
            __int16 v30 = [v29 senderCorrelationIdentifier];
            id v31 = [v5 uuid];
            [v5 isOwnerUser];
            uint64_t v32 = HMFBooleanToString();
            *(_DWORD *)long long buf = 138544130;
            id v46 = v27;
            __int16 v47 = 2112;
            uint64_t v48 = v30;
            __int16 v49 = 2112;
            double v50 = v31;
            __int16 v51 = 2112;
            double v52 = v32;
            _os_log_impl(&dword_1D49D5000, v26, OS_LOG_TYPE_INFO, "%{public}@Not stashing owner merge id (%@) for home %@ (isOwnerUser=%@)", buf, 0x2Au);
          }
        }
        else
        {
          dispatch_group_t v9 = (void *)MEMORY[0x1D9452090]();
          CFIndex v10 = v39;
          id v11 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            int v12 = HMFGetLogIdentifier();
            uint64_t v13 = [v5 uuid];
            *(_DWORD *)long long buf = 138543618;
            id v46 = v12;
            __int16 v47 = 2112;
            uint64_t v48 = v13;
            _os_log_impl(&dword_1D49D5000, v11, OS_LOG_TYPE_INFO, "%{public}@Stashing owner account metadata for home %@ to ping after migration", buf, 0x16u);
          }
          v53[0] = @"HMDHomeManagerAutoAcceptMigrationDateKey";
          uint64_t v14 = [MEMORY[0x1E4F1C9C8] now];
          v54[0] = v14;
          v53[1] = @"HMDHomeManagerAutoAcceptOwnerMergeIDKey";
          id v15 = [v5 owner];
          uint64_t v16 = [v15 account];
          int v17 = [v16 senderCorrelationIdentifier];
          v54[1] = v17;
          v53[2] = @"HMDHomeManagerAutoAcceptOwnerHandleKey";
          uint64_t v18 = [v5 owner];
          __int16 v19 = [v18 accountHandle];
          uint64_t v20 = [v19 remoteDestinationString];
          v54[2] = v20;
          __int16 v21 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v54 forKeys:v53 count:3];

          uint64_t v22 = [v5 uuid];
          long long v23 = [v22 UUIDString];
          [v36 setObject:v21 forKeyedSubscript:v23];
        }
      }
      uint64_t v40 = [obj countByEnumeratingWithState:&v41 objects:v55 count:16];
    }
    while (v40);
  }

  if ([v36 count])
  {
    dispatch_group_t v33 = [(HMDHomeManager *)v39 userDefaults];
    __int16 v34 = (void *)[v36 copy];
    [v33 setObject:v34 forKey:@"HMDHomeManagerHomesAwaitingHH2AutoAcceptKey"];
  }
}

- (void)_storeAllLocalSettingsForThisDevice
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)MEMORY[0x1D9452090](self, a2);
  long long v4 = self;
  uint64_t v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = HMFGetLogIdentifier();
    uint64_t v7 = [(HMDHomeManager *)v4 homes];
    int v9 = 138543618;
    CFIndex v10 = v6;
    __int16 v11 = 2112;
    int v12 = v7;
    _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Going to store Bulletin board notification settings for each home. %@", (uint8_t *)&v9, 0x16u);
  }
  uint64_t v8 = [(HMDHomeManager *)v4 homes];
  objc_msgSend(v8, "hmf_enumerateWithAutoreleasePoolUsingBlock:", &__block_literal_global_182122);

  [(HMDHomeManager *)v4 saveAccessAllowedWhenLockedSettingToLocalDisk];
}

void __73__HMDHomeManager_HH2FrameworkSwitch___storeAllLocalSettingsForThisDevice__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  [v2 storeMigrationBulletinBoardNotificationsToDisk];
  [v2 storeMigrationCameraNotificationSettingsToDisk];
  [v2 storeMigrationCharacteristicsAuthorizationData];
  uint64_t v3 = [v2 walletKeyManager];
  [v3 storeWalletKeyMigrationSettingsToDisk];

  long long v4 = [v2 users];
  objc_msgSend(v4, "hmf_enumerateWithAutoreleasePoolUsingBlock:", &__block_literal_global_17_182124);

  id v5 = [v2 accessories];

  objc_msgSend(v5, "hmf_enumerateWithAutoreleasePoolUsingBlock:", &__block_literal_global_20_182125);
}

void __73__HMDHomeManager_HH2FrameworkSwitch___storeAllLocalSettingsForThisDevice__block_invoke_3(uint64_t a1, void *a2)
{
  id v5 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v5;
  }
  else {
    id v2 = 0;
  }
  id v3 = v2;
  long long v4 = v3;
  if (v3) {
    [v3 saveCharacteristicsToLocalDiskForHH2Migration];
  }
}

void __73__HMDHomeManager_HH2FrameworkSwitch___storeAllLocalSettingsForThisDevice__block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  [v2 saveAnnounceNotificationModeForCurrentUserToLocalDisk];
  [v2 savePersonClassificationSettingsForCurrentUserToLocalDisk];
}

- (id)_performPreHH2RebootTasks
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = (void *)MEMORY[0x1D9452090](self, a2);
  long long v4 = self;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = HMFGetLogIdentifier();
    int v18 = 138543362;
    __int16 v19 = v6;
    _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Perform HH2 Pre reboot task", (uint8_t *)&v18, 0xCu);
  }
  uint64_t v7 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  [v7 removeObjectForKey:@"HMDHomeWalletKeyManagerDidTryReplacingKeyAlready"];

  uint64_t v8 = +[HMDXPCMessageTransport defaultTransport];
  [v8 stop];

  +[HMDResetConfigPostCleanup writePostCleanupRecordToRemoveAllCoreDataFilesWithReason:5];
  +[HMDHH2MigratorRecord removeMigrationFailureRecord];
  int v9 = +[HMDHH2MigratorRecord singleRecord];
  if (([v9 dryRun] & 1) != 0 || objc_msgSend(v9, "migrateFromTestDirectory"))
  {
    CFIndex v10 = (void *)MEMORY[0x1D9452090]();
    __int16 v11 = v4;
    int v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = HMFGetLogIdentifier();
      int v18 = 138543362;
      __int16 v19 = v13;
      _os_log_impl(&dword_1D49D5000, v12, OS_LOG_TYPE_INFO, "%{public}@Not running per device migration as we are doing a dryRun for HH2 migration.", (uint8_t *)&v18, 0xCu);
    }
    uint64_t v14 = [MEMORY[0x1E4F65438] futureWithNoValue];
  }
  else
  {
    [(HMDHomeManager *)v4 maybeStashOwnerMetadataForPostMigrationPingUsingMigratorRecord:v9];
    [(HMDHomeManager *)v4 stashSharedHomeInfoNotYetMigrated];
    id v15 = [(HMDHomeManager *)v4 metricsManager];
    [v15 saveCounters];

    uint64_t v16 = [(HMDHomeManager *)v4 metricsManager];
    [v16 waitToCompleteCurrentlyQueuedTasks];

    uint64_t v14 = [(HMDHomeManager *)v4 _pushChangesToAllUsersOfAllHomesForMigration];
    [(HMDHomeManager *)v4 _storeAllLocalSettingsForThisDevice];
    [(HMDHomeManager *)v4 _migrateCurrentAccessoryDataIfNeeded];
    [(HMDHomeManager *)v4 migrateLocalMediaGroupParticipantData];
  }

  return v14;
}

- (void)initializeHH2FrameworkSwitch
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = (void *)MEMORY[0x1D9452090](self, a2);
  long long v4 = self;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    int v12 = v6;
    _os_log_impl(&dword_1D49D5000, v5, OS_LOG_TYPE_INFO, "%{public}@Initializing framework switch with auto switch enabled", buf, 0xCu);
  }
  objc_initWeak((id *)buf, v4);
  uint64_t v7 = [HMDHH2FrameworkSwitch alloc];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __66__HMDHomeManager_HH2FrameworkSwitch__initializeHH2FrameworkSwitch__block_invoke;
  v9[3] = &unk_1E6A18118;
  objc_copyWeak(&v10, (id *)buf);
  uint64_t v8 = [(HMDHH2FrameworkSwitch *)v7 initWithAutoSwitchEnabledWithHomeManager:v4 callBeforeFrameworkSwitchCompletionHandler:v9];
  [(HMDHomeManager *)v4 setHh2FrameworkSwitch:v8];

  objc_destroyWeak(&v10);
  objc_destroyWeak((id *)buf);
}

id __66__HMDHomeManager_HH2FrameworkSwitch__initializeHH2FrameworkSwitch__block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!WeakRetained)
  {
    id v2 = (void *)MEMORY[0x1D9452090]();
    id v3 = objc_opt_class();
    long long v4 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      id v5 = HMFGetLogIdentifier();
      int v9 = 138543362;
      id v10 = v5;
      _os_log_impl(&dword_1D49D5000, v4, OS_LOG_TYPE_ERROR, "%{public}@Home manager died before framework switch completed", (uint8_t *)&v9, 0xCu);
    }
    id v6 = (id)[MEMORY[0x1E4F65438] futureWithNoValue];
  }
  uint64_t v7 = [WeakRetained _performPreHH2RebootTasks];

  return v7;
}

@end