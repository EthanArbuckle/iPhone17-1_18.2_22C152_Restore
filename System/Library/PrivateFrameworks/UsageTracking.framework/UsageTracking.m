void start()
{
  void *v0;
  __CFBundle *MainBundle;
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  MainBundle = CFBundleGetMainBundle();
  [(__CFString *) (id) (id) CFBundleGetIdentifier(MainBundle) fileSystemRepresentation];
  if ((_set_user_dir_suffix() & 1) == 0)
  {
    v7 = +[NSAssertionHandler currentHandler];
    v8 = +[NSString stringWithUTF8String:"int main(int, const char * _Nonnull *)"];
    [v7 handleFailureInFunction:v8 file:@"main.m" lineNumber:38 description:@"Failed to set the user directory suffix"];
  }
  if (!confstr(65537, 0, 0))
  {
    v9 = +[NSAssertionHandler currentHandler];
    v10 = +[NSString stringWithUTF8String:"int main(int, const char * _Nonnull *)"];
    [v9 handleFailureInFunction:v10 file:@"main.m" lineNumber:39 description:@"User temporary directory has no length"];
  }
  v2 = objc_opt_new();
  if (_os_feature_enabled_impl()) {
    +[SyncCoordinator startSyncing];
  }
  v3 = objc_alloc((Class)NSXPCListener);
  v4 = [v3 initWithMachServiceName:USMachServiceNameUsageTracking];
  [v4 setDelegate:v2];
  [v4 resume];
  v5 = objc_alloc((Class)NSXPCListener);
  v6 = [v5 initWithMachServiceName:USMachServiceNameUsageTrackingPrivate];
  [v6 setDelegate:v2];
  [v6 resume];
  +[USBudgetTracker startTracking];
  +[DeviceActivityCollector startCollecting];
  +[USUncategorizedUsageReporter startReporting];
  dispatch_main();
}

void sub_100005498(id a1)
{
  qword_100096190 = objc_opt_new();
  _objc_release_x1();
}

void sub_10000586C(id a1, NSPersistentStoreDescription *a2, NSError *a3)
{
  v4 = a2;
  v5 = a3;
  if (v5 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    sub_10006A248();
  }
}

void sub_100005B6C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100005B80(uint64_t a1)
{
  v2 = +[USRegisteredBudget fetchRequest];
  [v2 setReturnsObjectsAsFaults:0];
  v313[0] = @"schedule";
  v313[1] = @"budgetedCategories";
  v313[2] = @"budgetedApplications";
  v313[3] = @"budgetedWebDomains";
  v313[4] = @"notificationTimes";
  v3 = +[NSArray arrayWithObjects:v313 count:5];
  v205 = v2;
  [v2 setRelationshipKeyPathsForPrefetching:v3];

  uint64_t v216 = a1;
  id v213 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
  long long v246 = 0u;
  long long v247 = 0u;
  long long v248 = 0u;
  long long v249 = 0u;
  v203 = (id *)(a1 + 32);
  id obj = *(id *)(a1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v246 objects:v312 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v247;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v247 != v6) {
          objc_enumerationMutation(obj);
        }
        v202 = [*(id *)(*((void *)&v246 + 1) + 8 * i) identifier];
        CFStringRef v201 = @"clientIdentifier";
        v8 = +[NSPredicate predicateWithFormat:@"(%K == %@) && (%K == %@)"];
        [v213 addObject:v8];
      }
      id v5 = [obj countByEnumeratingWithState:&v246 objects:v312 count:16];
    }
    while (v5);
  }

  id v9 = [objc_alloc((Class)NSCompoundPredicate) initWithType:2 subpredicates:v213];
  [v205 setPredicate:v9];

  id v245 = 0;
  uint64_t v10 = [v205 execute:&v245];
  id v204 = v245;
  v210 = (void *)v10;
  if (v10)
  {
    long long v243 = 0u;
    long long v244 = 0u;
    long long v241 = 0u;
    long long v242 = 0u;
    id v206 = *v203;
    uint64_t v11 = a1;
    id v211 = [v206 countByEnumeratingWithState:&v241 objects:v311 count:16];
    if (v211)
    {
      uint64_t v209 = *(void *)v242;
      do
      {
        uint64_t v12 = 0;
        do
        {
          if (*(void *)v242 != v209) {
            objc_enumerationMutation(v206);
          }
          uint64_t v215 = v12;
          v13 = *(void **)(*((void *)&v241 + 1) + 8 * v12);
          v217 = [v13 identifier];
          long long v237 = 0u;
          long long v238 = 0u;
          long long v239 = 0u;
          long long v240 = 0u;
          id v14 = v210;
          id v15 = [v14 countByEnumeratingWithState:&v237 objects:v310 count:16];
          if (!v15)
          {
LABEL_25:

LABEL_39:
            v41 = *(void **)(v11 + 40);
            v42 = *(void **)(v11 + 48);
            v43 = *(void **)(v11 + 56);
            v44 = *(void **)(v11 + 64);
            id v45 = v13;
            id v46 = v41;
            id obja = v42;
            id v47 = v43;
            id v48 = v44;
            v49 = [[USRegisteredBudget alloc] initWithContext:v48];
            v50 = [v45 identifier];
            [(USRegisteredBudget *)v49 setIdentifier:v50];

            v230 = v46;
            [(USRegisteredBudget *)v49 setClientIdentifier:v46];
            v51 = [v45 calendarIdentifier];
            [(USRegisteredBudget *)v49 setCalendarIdentifier:v51];

            v52 = [v45 schedule];
            v319[0] = _NSConcreteStackBlock;
            v319[1] = 3221225472;
            v319[2] = sub_100010C60;
            v319[3] = &unk_10008A1E8;
            id v53 = v48;
            id v320 = v53;
            v54 = v49;
            v321 = v54;
            [v52 enumerateKeysAndObjectsUsingBlock:v319];

            long long v337 = 0u;
            long long v336 = 0u;
            long long v335 = 0u;
            long long v334 = 0u;
            v55 = [v45 categoryIdentifiers];
            id v56 = [v55 countByEnumeratingWithState:&v334 objects:v341 count:16];
            if (v56)
            {
              id v57 = v56;
              uint64_t v58 = *(void *)v335;
              do
              {
                for (j = 0; j != v57; j = (char *)j + 1)
                {
                  if (*(void *)v335 != v58) {
                    objc_enumerationMutation(v55);
                  }
                  uint64_t v60 = *(void *)(*((void *)&v334 + 1) + 8 * (void)j);
                  v61 = [[USBudgetedCategory alloc] initWithContext:v53];
                  [(USBudgetedCategory *)v61 setCategoryIdentifier:v60];
                  [(USRegisteredBudget *)v54 addBudgetedCategoriesObject:v61];
                }
                id v57 = [v55 countByEnumeratingWithState:&v334 objects:v341 count:16];
              }
              while (v57);
            }

            long long v333 = 0u;
            long long v332 = 0u;
            long long v331 = 0u;
            long long v330 = 0u;
            v62 = [v45 bundleIdentifiers];
            id v63 = [v62 countByEnumeratingWithState:&v330 objects:v340 count:16];
            if (v63)
            {
              id v64 = v63;
              uint64_t v65 = *(void *)v331;
              do
              {
                for (k = 0; k != v64; k = (char *)k + 1)
                {
                  if (*(void *)v331 != v65) {
                    objc_enumerationMutation(v62);
                  }
                  uint64_t v67 = *(void *)(*((void *)&v330 + 1) + 8 * (void)k);
                  v68 = [[USBudgetedApplication alloc] initWithContext:v53];
                  [(USBudgetedApplication *)v68 setBundleIdentifier:v67];
                  [(USRegisteredBudget *)v54 addBudgetedApplicationsObject:v68];
                }
                id v64 = [v62 countByEnumeratingWithState:&v330 objects:v340 count:16];
              }
              while (v64);
            }

            long long v329 = 0u;
            long long v328 = 0u;
            long long v327 = 0u;
            long long v326 = 0u;
            v69 = [v45 webDomains];
            id v70 = [v69 countByEnumeratingWithState:&v326 objects:v339 count:16];
            if (v70)
            {
              id v71 = v70;
              uint64_t v72 = *(void *)v327;
              do
              {
                for (m = 0; m != v71; m = (char *)m + 1)
                {
                  if (*(void *)v327 != v72) {
                    objc_enumerationMutation(v69);
                  }
                  uint64_t v74 = *(void *)(*((void *)&v326 + 1) + 8 * (void)m);
                  v75 = [[USBudgetedWebDomain alloc] initWithContext:v53];
                  [(USBudgetedWebDomain *)v75 setWebDomain:v74];
                  [(USRegisteredBudget *)v54 addBudgetedWebDomainsObject:v75];
                }
                id v71 = [v69 countByEnumeratingWithState:&v326 objects:v339 count:16];
              }
              while (v71);
            }

            [(USRegisteredBudget *)v54 setDarwinNotificationName:obja];
            long long v325 = 0u;
            long long v324 = 0u;
            long long v323 = 0u;
            long long v322 = 0u;
            id v76 = v47;
            id v77 = [v76 countByEnumeratingWithState:&v322 objects:v338 count:16];
            if (v77)
            {
              id v78 = v77;
              uint64_t v79 = *(void *)v323;
              char v80 = 1;
              do
              {
                for (n = 0; n != v78; n = (char *)n + 1)
                {
                  if (*(void *)v323 != v79) {
                    objc_enumerationMutation(v76);
                  }
                  v82 = *(void **)(*((void *)&v322 + 1) + 8 * (void)n);
                  v83 = [[USNotificationTime alloc] initWithContext:v53];
                  [v82 doubleValue];
                  double v85 = v84;
                  -[USNotificationTime setRemainingTime:](v83, "setRemainingTime:");
                  v80 &= v85 != 0.0;
                  [(USRegisteredBudget *)v54 addNotificationTimesObject:v83];
                }
                id v78 = [v76 countByEnumeratingWithState:&v322 objects:v338 count:16];
              }
              while (v78);

              if ((v80 & 1) == 0) {
                goto LABEL_71;
              }
            }
            else
            {
            }
            v86 = [[USNotificationTime alloc] initWithContext:v53];
            [(USNotificationTime *)v86 setRemainingTime:0.0];
            [(USRegisteredBudget *)v54 addNotificationTimesObject:v86];

LABEL_71:
            uint64_t v11 = v216;
            goto LABEL_199;
          }
          id v16 = v15;
          uint64_t v17 = *(void *)v238;
LABEL_16:
          uint64_t v18 = 0;
          while (1)
          {
            if (*(void *)v238 != v17) {
              objc_enumerationMutation(v14);
            }
            v19 = *(void **)(*((void *)&v237 + 1) + 8 * v18);
            v20 = [v19 identifier];
            if (([v20 isEqualToString:v217] & 1) == 0)
            {

              goto LABEL_23;
            }
            v21 = [v19 clientIdentifier];
            unsigned __int8 v22 = [v21 isEqualToString:*(void *)(v11 + 40)];

            if (v22) {
              break;
            }
LABEL_23:
            if (v16 == (id)++v18)
            {
              id v16 = [v14 countByEnumeratingWithState:&v237 objects:v310 count:16];
              if (v16) {
                goto LABEL_16;
              }
              goto LABEL_25;
            }
          }
          id v23 = v19;

          if (!v23) {
            goto LABEL_39;
          }
          v24 = *(void **)(v11 + 40);
          v25 = *(void **)(v11 + 48);
          v26 = *(void **)(v11 + 56);
          v27 = *(void **)(v11 + 64);
          id v28 = v23;
          id v29 = v13;
          id v208 = v24;
          id v212 = v25;
          id v221 = v26;
          id v30 = v27;
          v31 = [v29 calendarIdentifier];
          [v28 setCalendarIdentifier:v31];

          v214 = v29;
          v226 = [v29 schedule];
          v32 = [v28 schedule];
          long long v306 = 0u;
          long long v307 = 0u;
          long long v308 = 0u;
          long long v309 = 0u;
          id v33 = v32;
          id v34 = [v33 countByEnumeratingWithState:&v306 objects:v341 count:16];
          if (v34)
          {
            id v35 = v34;
            id v222 = 0;
            uint64_t v36 = *(void *)v307;
            do
            {
              for (ii = 0; ii != v35; ii = (char *)ii + 1)
              {
                if (*(void *)v307 != v36) {
                  objc_enumerationMutation(v33);
                }
                v38 = *(void **)(*((void *)&v306 + 1) + 8 * (void)ii);
                v39 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v38 weekday]);
                v40 = [v226 objectForKeyedSubscript:v39];

                if (!v40)
                {
                  if (v222)
                  {
                    [v222 addObject:v38];
                  }
                  else
                  {
                    CFStringRef v201 = 0;
                    id v222 = [objc_alloc((Class)NSMutableArray) initWithObjects:v38];
                  }
                }
              }
              id v35 = [v33 countByEnumeratingWithState:&v306 objects:v341 count:16];
            }
            while (v35);
          }
          else
          {
            id v222 = 0;
          }

          v302[0] = _NSConcreteStackBlock;
          v302[1] = 3221225472;
          v302[2] = sub_100010D20;
          v302[3] = &unk_10008A210;
          id v207 = v33;
          id v303 = v207;
          id objb = v30;
          id v304 = objb;
          id v87 = v28;
          id v305 = v87;
          [v226 enumerateKeysAndObjectsUsingBlock:v302];
          v88 = [v29 categoryIdentifiers];
          v231 = v87;
          v89 = [v87 budgetedCategories];
          long long v298 = 0u;
          long long v299 = 0u;
          long long v300 = 0u;
          long long v301 = 0u;
          id v229 = v89;
          id v90 = [v229 countByEnumeratingWithState:&v298 objects:v340 count:16];
          if (v90)
          {
            id v91 = v90;
            uint64_t v92 = *(void *)v299;
            id v93 = v222;
            do
            {
              for (jj = 0; jj != v91; jj = (char *)jj + 1)
              {
                if (*(void *)v299 != v92) {
                  objc_enumerationMutation(v229);
                }
                v95 = *(void **)(*((void *)&v298 + 1) + 8 * (void)jj);
                v96 = [v95 categoryIdentifier];
                unsigned __int8 v97 = [v88 containsObject:v96];

                if ((v97 & 1) == 0)
                {
                  if (v93)
                  {
                    [v93 addObject:v95];
                  }
                  else
                  {
                    CFStringRef v201 = 0;
                    id v93 = [objc_alloc((Class)NSMutableArray) initWithObjects:v95];
                  }
                }
              }
              id v91 = [v229 countByEnumeratingWithState:&v298 objects:v340 count:16];
            }
            while (v91);
          }
          else
          {
            id v93 = v222;
          }
          id v223 = v93;

          long long v297 = 0u;
          long long v296 = 0u;
          long long v295 = 0u;
          long long v294 = 0u;
          id v220 = v88;
          id v98 = [v220 countByEnumeratingWithState:&v294 objects:v339 count:16];
          if (v98)
          {
            id v99 = v98;
            uint64_t v100 = *(void *)v295;
            do
            {
              for (kk = 0; kk != v99; kk = (char *)kk + 1)
              {
                if (*(void *)v295 != v100) {
                  objc_enumerationMutation(v220);
                }
                uint64_t v102 = *(void *)(*((void *)&v294 + 1) + 8 * (void)kk);
                long long v290 = 0u;
                long long v291 = 0u;
                long long v292 = 0u;
                long long v293 = 0u;
                v103 = (USBudgetedCategory *)v229;
                id v104 = [(USBudgetedCategory *)v103 countByEnumeratingWithState:&v290 objects:v338 count:16];
                if (v104)
                {
                  id v105 = v104;
                  uint64_t v106 = *(void *)v291;
LABEL_93:
                  uint64_t v107 = 0;
                  while (1)
                  {
                    if (*(void *)v291 != v106) {
                      objc_enumerationMutation(v103);
                    }
                    v108 = [*(id *)(*((void *)&v290 + 1) + 8 * v107) categoryIdentifier];
                    unsigned __int8 v109 = [v108 isEqualToString:v102];

                    if (v109) {
                      break;
                    }
                    if (v105 == (id)++v107)
                    {
                      id v105 = [(USBudgetedCategory *)v103 countByEnumeratingWithState:&v290 objects:v338 count:16];
                      if (v105) {
                        goto LABEL_93;
                      }
                      goto LABEL_99;
                    }
                  }
                }
                else
                {
LABEL_99:

                  v103 = [[USBudgetedCategory alloc] initWithContext:objb];
                  [(USBudgetedCategory *)v103 setCategoryIdentifier:v102];
                  [v231 addBudgetedCategoriesObject:v103];
                }
              }
              id v99 = [v220 countByEnumeratingWithState:&v294 objects:v339 count:16];
            }
            while (v99);
          }

          v110 = [v214 bundleIdentifiers];
          v111 = [v231 budgetedApplications];
          long long v286 = 0u;
          long long v287 = 0u;
          long long v288 = 0u;
          long long v289 = 0u;
          id v228 = v111;
          id v112 = [v228 countByEnumeratingWithState:&v286 objects:&v334 count:16];
          if (v112)
          {
            id v113 = v112;
            uint64_t v114 = *(void *)v287;
            id v115 = v223;
            do
            {
              for (mm = 0; mm != v113; mm = (char *)mm + 1)
              {
                if (*(void *)v287 != v114) {
                  objc_enumerationMutation(v228);
                }
                v117 = *(void **)(*((void *)&v286 + 1) + 8 * (void)mm);
                v118 = [v117 bundleIdentifier];
                unsigned __int8 v119 = [v110 containsObject:v118];

                if ((v119 & 1) == 0)
                {
                  if (v115)
                  {
                    [v115 addObject:v117];
                  }
                  else
                  {
                    CFStringRef v201 = 0;
                    id v115 = [objc_alloc((Class)NSMutableArray) initWithObjects:v117];
                  }
                }
              }
              id v113 = [v228 countByEnumeratingWithState:&v286 objects:&v334 count:16];
            }
            while (v113);
          }
          else
          {
            id v115 = v223;
          }
          id v224 = v115;

          long long v285 = 0u;
          long long v284 = 0u;
          long long v283 = 0u;
          long long v282 = 0u;
          id v219 = v110;
          id v120 = [v219 countByEnumeratingWithState:&v282 objects:&v330 count:16];
          if (v120)
          {
            id v121 = v120;
            uint64_t v122 = *(void *)v283;
            do
            {
              for (nn = 0; nn != v121; nn = (char *)nn + 1)
              {
                if (*(void *)v283 != v122) {
                  objc_enumerationMutation(v219);
                }
                uint64_t v124 = *(void *)(*((void *)&v282 + 1) + 8 * (void)nn);
                long long v278 = 0u;
                long long v279 = 0u;
                long long v280 = 0u;
                long long v281 = 0u;
                v125 = (USBudgetedApplication *)v228;
                id v126 = [(USBudgetedApplication *)v125 countByEnumeratingWithState:&v278 objects:&v326 count:16];
                if (v126)
                {
                  id v127 = v126;
                  uint64_t v128 = *(void *)v279;
LABEL_122:
                  uint64_t v129 = 0;
                  while (1)
                  {
                    if (*(void *)v279 != v128) {
                      objc_enumerationMutation(v125);
                    }
                    v130 = [*(id *)(*((void *)&v278 + 1) + 8 * v129) bundleIdentifier];
                    unsigned __int8 v131 = [v130 isEqualToString:v124];

                    if (v131) {
                      break;
                    }
                    if (v127 == (id)++v129)
                    {
                      id v127 = [(USBudgetedApplication *)v125 countByEnumeratingWithState:&v278 objects:&v326 count:16];
                      if (v127) {
                        goto LABEL_122;
                      }
                      goto LABEL_128;
                    }
                  }
                }
                else
                {
LABEL_128:

                  v125 = [[USBudgetedApplication alloc] initWithContext:objb];
                  [(USBudgetedApplication *)v125 setBundleIdentifier:v124];
                  [v231 addBudgetedApplicationsObject:v125];
                }
              }
              id v121 = [v219 countByEnumeratingWithState:&v282 objects:&v330 count:16];
            }
            while (v121);
          }

          v132 = [v214 webDomains];
          v133 = [v231 budgetedWebDomains];
          long long v274 = 0u;
          long long v275 = 0u;
          long long v276 = 0u;
          long long v277 = 0u;
          id v227 = v133;
          id v134 = [v227 countByEnumeratingWithState:&v274 objects:&v322 count:16];
          if (v134)
          {
            id v135 = v134;
            uint64_t v136 = *(void *)v275;
            id v137 = v224;
            do
            {
              for (i1 = 0; i1 != v135; i1 = (char *)i1 + 1)
              {
                if (*(void *)v275 != v136) {
                  objc_enumerationMutation(v227);
                }
                v139 = *(void **)(*((void *)&v274 + 1) + 8 * (void)i1);
                v140 = [v139 webDomain];
                unsigned __int8 v141 = [v132 containsObject:v140];

                if ((v141 & 1) == 0)
                {
                  if (v137)
                  {
                    [v137 addObject:v139];
                  }
                  else
                  {
                    CFStringRef v201 = 0;
                    id v137 = [objc_alloc((Class)NSMutableArray) initWithObjects:v139];
                  }
                }
              }
              id v135 = [v227 countByEnumeratingWithState:&v274 objects:&v322 count:16];
            }
            while (v135);
          }
          else
          {
            id v137 = v224;
          }
          id v225 = v137;

          long long v272 = 0u;
          long long v273 = 0u;
          long long v270 = 0u;
          long long v271 = 0u;
          id v218 = v132;
          id v142 = [v218 countByEnumeratingWithState:&v270 objects:v319 count:16];
          if (v142)
          {
            id v143 = v142;
            uint64_t v144 = *(void *)v271;
            do
            {
              for (i2 = 0; i2 != v143; i2 = (char *)i2 + 1)
              {
                if (*(void *)v271 != v144) {
                  objc_enumerationMutation(v218);
                }
                uint64_t v146 = *(void *)(*((void *)&v270 + 1) + 8 * (void)i2);
                long long v266 = 0u;
                long long v267 = 0u;
                long long v268 = 0u;
                long long v269 = 0u;
                v147 = (USBudgetedWebDomain *)v227;
                id v148 = [(USBudgetedWebDomain *)v147 countByEnumeratingWithState:&v266 objects:v318 count:16];
                if (v148)
                {
                  id v149 = v148;
                  uint64_t v150 = *(void *)v267;
LABEL_151:
                  uint64_t v151 = 0;
                  while (1)
                  {
                    if (*(void *)v267 != v150) {
                      objc_enumerationMutation(v147);
                    }
                    v152 = [*(id *)(*((void *)&v266 + 1) + 8 * v151) webDomain];
                    unsigned __int8 v153 = [v152 isEqualToString:v146];

                    if (v153) {
                      break;
                    }
                    if (v149 == (id)++v151)
                    {
                      id v149 = [(USBudgetedWebDomain *)v147 countByEnumeratingWithState:&v266 objects:v318 count:16];
                      if (v149) {
                        goto LABEL_151;
                      }
                      goto LABEL_157;
                    }
                  }
                }
                else
                {
LABEL_157:

                  v147 = [[USBudgetedWebDomain alloc] initWithContext:objb];
                  [(USBudgetedWebDomain *)v147 setWebDomain:v146];
                  [v231 addBudgetedWebDomainsObject:v147];
                }
              }
              id v143 = [v218 countByEnumeratingWithState:&v270 objects:v319 count:16];
            }
            while (v143);
          }

          [v231 setDarwinNotificationName:v212];
          v154 = [v231 notificationTimes];
          long long v262 = 0u;
          long long v263 = 0u;
          long long v264 = 0u;
          long long v265 = 0u;
          id v155 = v154;
          id v156 = [v155 countByEnumeratingWithState:&v262 objects:v317 count:16];
          if (v156)
          {
            id v157 = v156;
            uint64_t v158 = *(void *)v263;
            uint64_t v11 = v216;
            do
            {
              for (i3 = 0; i3 != v157; i3 = (char *)i3 + 1)
              {
                if (*(void *)v263 != v158) {
                  objc_enumerationMutation(v155);
                }
                v160 = *(void **)(*((void *)&v262 + 1) + 8 * (void)i3);
                [v160 remainingTime];
                if (v161 == 0.0
                  || (+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"),
                      v162 = objc_claimAutoreleasedReturnValue(),
                      unsigned int v163 = [v221 containsObject:v162],
                      v162,
                      v163))
                {
                  [v160 setNotificationWasPosted:0];
                }
                else if (v225)
                {
                  [v225 addObject:v160];
                }
                else
                {
                  CFStringRef v201 = 0;
                  id v225 = [objc_alloc((Class)NSMutableArray) initWithObjects:v160];
                }
              }
              id v157 = [v155 countByEnumeratingWithState:&v262 objects:v317 count:16];
            }
            while (v157);
          }
          else
          {
            uint64_t v11 = v216;
          }

          long long v260 = 0u;
          long long v261 = 0u;
          long long v258 = 0u;
          long long v259 = 0u;
          id v164 = v221;
          id v165 = [v164 countByEnumeratingWithState:&v258 objects:v316 count:16];
          if (v165)
          {
            id v166 = v165;
            uint64_t v167 = *(void *)v259;
            do
            {
              for (i4 = 0; i4 != v166; i4 = (char *)i4 + 1)
              {
                if (*(void *)v259 != v167) {
                  objc_enumerationMutation(v164);
                }
                [*(id *)(*((void *)&v258 + 1) + 8 * (void)i4) doubleValue];
                double v170 = v169;
                long long v254 = 0u;
                long long v255 = 0u;
                long long v256 = 0u;
                long long v257 = 0u;
                v171 = (USNotificationTime *)v155;
                id v172 = [(USNotificationTime *)v171 countByEnumeratingWithState:&v254 objects:v315 count:16];
                if (v172)
                {
                  id v173 = v172;
                  uint64_t v174 = *(void *)v255;
LABEL_182:
                  uint64_t v175 = 0;
                  while (1)
                  {
                    if (*(void *)v255 != v174) {
                      objc_enumerationMutation(v171);
                    }
                    [*(id *)(*((void *)&v254 + 1) + 8 * v175) remainingTime];
                    if (v176 == v170) {
                      break;
                    }
                    if (v173 == (id)++v175)
                    {
                      id v173 = [(USNotificationTime *)v171 countByEnumeratingWithState:&v254 objects:v315 count:16];
                      if (v173) {
                        goto LABEL_182;
                      }
                      goto LABEL_188;
                    }
                  }
                }
                else
                {
LABEL_188:

                  v171 = [[USNotificationTime alloc] initWithContext:objb];
                  [(USNotificationTime *)v171 setRemainingTime:v170];
                  [v231 addNotificationTimesObject:v171];
                }
              }
              id v166 = [v164 countByEnumeratingWithState:&v258 objects:v316 count:16];
            }
            while (v166);
          }

          long long v252 = 0u;
          long long v253 = 0u;
          long long v250 = 0u;
          long long v251 = 0u;
          id v177 = v225;
          id v178 = [v177 countByEnumeratingWithState:&v250 objects:v314 count:16];
          if (v178)
          {
            id v179 = v178;
            uint64_t v180 = *(void *)v251;
            do
            {
              for (i5 = 0; i5 != v179; i5 = (char *)i5 + 1)
              {
                if (*(void *)v251 != v180) {
                  objc_enumerationMutation(v177);
                }
                [objb deleteObject:*(void *)(*((void *)&v250 + 1) + 8 * (void)i5)];
              }
              id v179 = [v177 countByEnumeratingWithState:&v250 objects:v314 count:16];
            }
            while (v179);
          }

LABEL_199:
          uint64_t v12 = v215 + 1;
        }
        while ((id)(v215 + 1) != v211);
        id v211 = [v206 countByEnumeratingWithState:&v241 objects:v311 count:16];
      }
      while (v211);
    }

    v182 = *(void **)(v11 + 64);
    id v236 = v204;
    unsigned int v183 = [v182 save:&v236];
    id v184 = v236;

    if (v183)
    {
      (*(void (**)(void))(*(void *)(v11 + 80) + 16))();
      v185 = [*(id *)(v11 + 72) notificationPostingQueue];
      v235[0] = _NSConcreteStackBlock;
      v235[1] = 3221225472;
      v235[2] = sub_100007328;
      v235[3] = &unk_100089DD8;
      v235[4] = *(void *)(v11 + 72);
      [v185 addOperationWithBlock:v235];
    }
    else
    {
      id v193 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_10006A37C();
      }

      uint64_t v194 = *(void *)(v11 + 80);
      v200 = sub_100007388(100, @"PersistBudgetError", @"SeeSystemLog", v195, v196, v197, v198, v199, (uint64_t)v201);
      (*(void (**)(uint64_t, void *))(v194 + 16))(v194, v200);
    }
  }
  else
  {
    uint64_t v11 = a1;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10006A2C0(a1, v203);
    }
    uint64_t v191 = *(void *)(a1 + 80);
    v192 = sub_100007388(101, @"FetchBudgetError", @"SeeSystemLog", v186, v187, v188, v189, v190, (uint64_t)v201);
    (*(void (**)(uint64_t, void *))(v191 + 16))(v191, v192);

    id v184 = v204;
  }
  [*(id *)(v11 + 64) reset];
}

void sub_100007328(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"RegisteredBudgetsDidChange" object:*(void *)(a1 + 32)];
}

id sub_100007388(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v11 = a3;
  id v12 = a2;
  v13 = +[USUsageTrackingBundle usageTrackingBundle];
  id v14 = objc_alloc((Class)NSString);
  id v15 = [v13 localizedStringForKey:v12 value:&stru_10008C828 table:0];

  id v16 = +[NSLocale currentLocale];
  id v17 = [v14 initWithFormat:v15 locale:v16 arguments:&a9];

  if (v11)
  {
    uint64_t v18 = [v13 localizedStringForKey:v11 value:&stru_10008C828 table:0];
    v25[0] = NSLocalizedDescriptionKey;
    v25[1] = NSLocalizedRecoverySuggestionErrorKey;
    v26[0] = v17;
    v26[1] = v18;
    v19 = +[NSDictionary dictionaryWithObjects:v26 forKeys:v25 count:2];
  }
  else
  {
    NSErrorUserInfoKey v23 = NSLocalizedDescriptionKey;
    id v24 = v17;
    v19 = +[NSDictionary dictionaryWithObjects:&v24 forKeys:&v23 count:1];
  }
  id v20 = objc_alloc((Class)NSError);
  id v21 = [v20 initWithDomain:USErrorDomain code:a1 userInfo:v19];

  return v21;
}

void sub_100007AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose((const void *)(v27 - 144), 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100007B08(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100007B18(uint64_t a1)
{
}

void sub_100007B20(uint64_t a1)
{
  CFStringRef v252 = @"events";
  id v2 = +[NSArray arrayWithObjects:&v252 count:1];
  v3 = +[USDeviceActivityBudget fetchRequest];
  [v3 setReturnsObjectsAsFaults:0];
  if (v2) {
    [v3 setRelationshipKeyPathsForPrefetching:v2];
  }

  CFStringRef v164 = @"clientIdentifier";
  id v4 = +[NSPredicate predicateWithFormat:@"%K == %@"];
  [v3 setPredicate:v4];

  uint64_t v172 = a1 + 80;
  uint64_t v5 = *(void *)(*(void *)(a1 + 80) + 8);
  id obj = *(id *)(v5 + 40);
  [v3 execute:&obj];
  v7 = uint64_t v6 = a1;
  objc_storeStrong((id *)(v5 + 40), obj);
  uint64_t v173 = v6;
  if (v7)
  {
    double v169 = v3;
    v198[0] = _NSConcreteStackBlock;
    v198[1] = 3221225472;
    v198[2] = sub_100008E00;
    v198[3] = &unk_100089E28;
    double v170 = (void *)(v6 + 40);
    id v199 = *(id *)(v6 + 40);
    id v8 = [v7 indexOfObjectPassingTest:v198];
    v171 = v7;
    if (v8 == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      id v9 = 0;
    }
    else
    {
      id v9 = [v7 objectAtIndex:v8];
    }
    uint64_t v18 = [(USDeviceActivityBudget *)v9 name];
    unsigned __int8 v19 = [v18 isEqualToString:*v170];

    if (v19)
    {
      id v20 = [(USDeviceActivityBudget *)v9 events];
      id v165 = [v20 count];

      id v21 = *(void **)(v6 + 48);
      unsigned __int8 v22 = *(void **)(v6 + 56);
      NSErrorUserInfoKey v23 = *(void **)(v6 + 64);
      id v24 = *(void **)(v6 + 72);
      v25 = v9;
      id v26 = v23;
      id v27 = v21;
      id v176 = v22;
      id v186 = v24;
      v168 = v26;
      [(USDeviceActivityBudget *)v25 setExtensionIdentifier:v26];
      id v28 = [v27 intervalStart];
      [(USDeviceActivityBudget *)v25 setIntervalStart:v28];

      id v29 = [v27 intervalEnd];
      [(USDeviceActivityBudget *)v25 setIntervalEnd:v29];

      -[USDeviceActivityBudget setRepeats:](v25, "setRepeats:", [v27 repeats]);
      uint64_t v167 = v27;
      id v30 = [v27 warningTime];
      [(USDeviceActivityBudget *)v25 setWarningTime:v30];

      long long v247 = 0u;
      long long v248 = 0u;
      long long v245 = 0u;
      long long v246 = 0u;
      id v166 = v25;
      id v174 = [(USDeviceActivityBudget *)v25 events];
      id v177 = [v174 countByEnumeratingWithState:&v245 objects:&buf count:16];
      id v31 = 0;
      if (v177)
      {
        id v192 = 0;
        uint64_t v175 = *(void *)v246;
        do
        {
          uint64_t v32 = 0;
          do
          {
            if (*(void *)v246 != v175)
            {
              uint64_t v33 = v32;
              objc_enumerationMutation(v174);
              uint64_t v32 = v33;
            }
            uint64_t v179 = v32;
            id v34 = *(void **)(*((void *)&v245 + 1) + 8 * v32);
            v181 = [v34 name];
            uint64_t v180 = objc_msgSend(v176, "objectForKeyedSubscript:");
            if (v180)
            {
              uint64_t v191 = v34;
              if (v31)
              {
                [v31 addObject:v181];
              }
              else
              {
                CFStringRef v164 = 0;
                id v31 = [objc_alloc((Class)NSMutableSet) initWithObjects:v181];
              }
              id v35 = [v180 threshold];
              [v34 setThreshold:v35];

              objc_msgSend(v34, "setIncludesPastActivity:", objc_msgSend(v180, "includesPastActivity"));
              id v178 = v31;
              if ([v180 isUntokenized])
              {
                [v34 setIsUntokenized:1];
                uint64_t v36 = [v180 bundleIdentifiers];
                v37 = [v180 categoryIdentifiers];
                id v182 = [v180 webDomains];
              }
              else
              {
                [v34 setIsUntokenized:0];
                v38 = objc_opt_new();
                v39 = [v180 applicationTokens];
                uint64_t v36 = [v38 decodeApplications:v39];

                v40 = [v180 categoryTokens];
                v37 = [v38 decodeCategories:v40];

                v41 = [v180 webDomainTokens];
                id v182 = [v38 decodeWebDomains:v41];
              }
              v42 = [v191 budgetedCategories];
              long long v241 = 0u;
              long long v242 = 0u;
              long long v243 = 0u;
              long long v244 = 0u;
              id v190 = v42;
              id v43 = [v42 countByEnumeratingWithState:&v241 objects:v262 count:16];
              if (v43)
              {
                id v44 = v43;
                uint64_t v45 = *(void *)v242;
                do
                {
                  for (i = 0; i != v44; i = (char *)i + 1)
                  {
                    if (*(void *)v242 != v45) {
                      objc_enumerationMutation(v190);
                    }
                    id v47 = *(void **)(*((void *)&v241 + 1) + 8 * i);
                    id v48 = [v47 categoryIdentifier];
                    unsigned __int8 v49 = [v37 containsObject:v48];

                    if ((v49 & 1) == 0)
                    {
                      if (v192)
                      {
                        [v192 addObject:v47];
                      }
                      else
                      {
                        CFStringRef v164 = 0;
                        id v192 = [objc_alloc((Class)NSMutableArray) initWithObjects:v47];
                      }
                    }
                  }
                  id v44 = [v190 countByEnumeratingWithState:&v241 objects:v262 count:16];
                }
                while (v44);
              }
              id v187 = (id)v36;
              long long v239 = 0u;
              long long v240 = 0u;
              long long v237 = 0u;
              long long v238 = 0u;
              id v185 = v37;
              id v50 = [v185 countByEnumeratingWithState:&v237 objects:v261 count:16];
              if (v50)
              {
                id v51 = v50;
                uint64_t v52 = *(void *)v238;
                do
                {
                  for (j = 0; j != v51; j = (char *)j + 1)
                  {
                    if (*(void *)v238 != v52) {
                      objc_enumerationMutation(v185);
                    }
                    uint64_t v54 = *(void *)(*((void *)&v237 + 1) + 8 * (void)j);
                    long long v233 = 0u;
                    long long v234 = 0u;
                    long long v235 = 0u;
                    long long v236 = 0u;
                    v55 = (USBudgetedCategory *)v190;
                    id v56 = [(USBudgetedCategory *)v55 countByEnumeratingWithState:&v233 objects:v260 count:16];
                    if (v56)
                    {
                      id v57 = v56;
                      uint64_t v58 = *(void *)v234;
LABEL_43:
                      uint64_t v59 = 0;
                      while (1)
                      {
                        if (*(void *)v234 != v58) {
                          objc_enumerationMutation(v55);
                        }
                        uint64_t v60 = [*(id *)(*((void *)&v233 + 1) + 8 * v59) categoryIdentifier];
                        unsigned __int8 v61 = [v60 isEqualToString:v54];

                        if (v61) {
                          break;
                        }
                        if (v57 == (id)++v59)
                        {
                          id v57 = [(USBudgetedCategory *)v55 countByEnumeratingWithState:&v233 objects:v260 count:16];
                          if (v57) {
                            goto LABEL_43;
                          }
                          goto LABEL_49;
                        }
                      }
                    }
                    else
                    {
LABEL_49:

                      v55 = [[USBudgetedCategory alloc] initWithContext:v186];
                      [(USBudgetedCategory *)v55 setCategoryIdentifier:v54];
                      [v191 addBudgetedCategoriesObject:v55];
                    }
                  }
                  id v51 = [v185 countByEnumeratingWithState:&v237 objects:v261 count:16];
                }
                while (v51);
              }

              v62 = [v191 budgetedApplications];
              long long v229 = 0u;
              long long v230 = 0u;
              long long v231 = 0u;
              long long v232 = 0u;
              id v189 = v62;
              id v63 = [v62 countByEnumeratingWithState:&v229 objects:v259 count:16];
              if (v63)
              {
                id v64 = v63;
                uint64_t v65 = *(void *)v230;
                v66 = v187;
                do
                {
                  for (k = 0; k != v64; k = (char *)k + 1)
                  {
                    if (*(void *)v230 != v65) {
                      objc_enumerationMutation(v189);
                    }
                    v68 = *(void **)(*((void *)&v229 + 1) + 8 * (void)k);
                    v69 = [v68 bundleIdentifier];
                    unsigned __int8 v70 = [v187 containsObject:v69];

                    if ((v70 & 1) == 0)
                    {
                      if (v192)
                      {
                        [v192 addObject:v68];
                      }
                      else
                      {
                        CFStringRef v164 = 0;
                        id v192 = [objc_alloc((Class)NSMutableArray) initWithObjects:v68];
                      }
                    }
                  }
                  id v64 = [v189 countByEnumeratingWithState:&v229 objects:v259 count:16];
                }
                while (v64);
              }
              else
              {
                v66 = v187;
              }
              long long v227 = 0u;
              long long v228 = 0u;
              long long v225 = 0u;
              long long v226 = 0u;
              id v184 = v66;
              id v71 = [v184 countByEnumeratingWithState:&v225 objects:v258 count:16];
              if (v71)
              {
                id v72 = v71;
                uint64_t v73 = *(void *)v226;
                do
                {
                  for (m = 0; m != v72; m = (char *)m + 1)
                  {
                    if (*(void *)v226 != v73) {
                      objc_enumerationMutation(v184);
                    }
                    uint64_t v75 = *(void *)(*((void *)&v225 + 1) + 8 * (void)m);
                    long long v221 = 0u;
                    long long v222 = 0u;
                    long long v223 = 0u;
                    long long v224 = 0u;
                    id v76 = (USBudgetedApplication *)v189;
                    id v77 = [(USBudgetedApplication *)v76 countByEnumeratingWithState:&v221 objects:v257 count:16];
                    if (v77)
                    {
                      id v78 = v77;
                      uint64_t v79 = *(void *)v222;
LABEL_72:
                      uint64_t v80 = 0;
                      while (1)
                      {
                        if (*(void *)v222 != v79) {
                          objc_enumerationMutation(v76);
                        }
                        v81 = [*(id *)(*((void *)&v221 + 1) + 8 * v80) bundleIdentifier];
                        unsigned __int8 v82 = [v81 isEqualToString:v75];

                        if (v82) {
                          break;
                        }
                        if (v78 == (id)++v80)
                        {
                          id v78 = [(USBudgetedApplication *)v76 countByEnumeratingWithState:&v221 objects:v257 count:16];
                          if (v78) {
                            goto LABEL_72;
                          }
                          goto LABEL_78;
                        }
                      }
                    }
                    else
                    {
LABEL_78:

                      id v76 = [[USBudgetedApplication alloc] initWithContext:v186];
                      [(USBudgetedApplication *)v76 setBundleIdentifier:v75];
                      [v191 addBudgetedApplicationsObject:v76];
                    }
                  }
                  id v72 = [v184 countByEnumeratingWithState:&v225 objects:v258 count:16];
                }
                while (v72);
              }

              v83 = v191;
              double v84 = [v191 budgetedWebDomains];
              long long v217 = 0u;
              long long v218 = 0u;
              long long v219 = 0u;
              long long v220 = 0u;
              id v188 = v84;
              id v85 = [v84 countByEnumeratingWithState:&v217 objects:v256 count:16];
              if (v85)
              {
                id v86 = v85;
                uint64_t v87 = *(void *)v218;
                v88 = v182;
                do
                {
                  for (n = 0; n != v86; n = (char *)n + 1)
                  {
                    if (*(void *)v218 != v87) {
                      objc_enumerationMutation(v188);
                    }
                    id v90 = *(void **)(*((void *)&v217 + 1) + 8 * (void)n);
                    id v91 = [v90 webDomain];
                    unsigned __int8 v92 = [v182 containsObject:v91];

                    if ((v92 & 1) == 0)
                    {
                      if (v192)
                      {
                        [v192 addObject:v90];
                      }
                      else
                      {
                        CFStringRef v164 = 0;
                        id v192 = [objc_alloc((Class)NSMutableArray) initWithObjects:v90];
                      }
                    }
                  }
                  id v86 = [v188 countByEnumeratingWithState:&v217 objects:v256 count:16];
                }
                while (v86);
              }
              else
              {
                v88 = v182;
              }
              long long v215 = 0u;
              long long v216 = 0u;
              long long v213 = 0u;
              long long v214 = 0u;
              id v183 = v88;
              id v93 = [v183 countByEnumeratingWithState:&v213 objects:v255 count:16];
              if (v93)
              {
                id v94 = v93;
                uint64_t v95 = *(void *)v214;
                do
                {
                  for (ii = 0; ii != v94; ii = (char *)ii + 1)
                  {
                    if (*(void *)v214 != v95) {
                      objc_enumerationMutation(v183);
                    }
                    uint64_t v97 = *(void *)(*((void *)&v213 + 1) + 8 * (void)ii);
                    long long v209 = 0u;
                    long long v210 = 0u;
                    long long v211 = 0u;
                    long long v212 = 0u;
                    id v98 = (USBudgetedWebDomain *)v188;
                    id v99 = [(USBudgetedWebDomain *)v98 countByEnumeratingWithState:&v209 objects:v254 count:16];
                    if (v99)
                    {
                      id v100 = v99;
                      uint64_t v101 = *(void *)v210;
                      while (2)
                      {
                        for (jj = 0; jj != v100; jj = (char *)jj + 1)
                        {
                          if (*(void *)v210 != v101) {
                            objc_enumerationMutation(v98);
                          }
                          v103 = [*(id *)(*((void *)&v209 + 1) + 8 * (void)jj) webDomain];
                          unsigned __int8 v104 = [v103 isEqualToString:v97];

                          if (v104)
                          {
                            v83 = v191;
                            goto LABEL_109;
                          }
                        }
                        id v100 = [(USBudgetedWebDomain *)v98 countByEnumeratingWithState:&v209 objects:v254 count:16];
                        if (v100) {
                          continue;
                        }
                        break;
                      }
                    }

                    id v98 = [[USBudgetedWebDomain alloc] initWithContext:v186];
                    [(USBudgetedWebDomain *)v98 setWebDomain:v97];
                    v83 = v191;
                    [v191 addBudgetedWebDomainsObject:v98];
LABEL_109:
                  }
                  id v94 = [v183 countByEnumeratingWithState:&v213 objects:v255 count:16];
                }
                while (v94);
              }

              [v83 setDidReachThreshold:0];
              [v83 setDidWarnForThreshold:0];
              [v83 setThresholdAdjustmentTime:0.0];

              id v31 = v178;
            }
            else if (v192)
            {
              [v192 addObject:v34];
            }
            else
            {
              CFStringRef v164 = 0;
              id v192 = [objc_alloc((Class)NSMutableArray) initWithObjects:v34];
            }

            uint64_t v32 = v179 + 1;
          }
          while ((id)(v179 + 1) != v177);
          id v105 = [v174 countByEnumeratingWithState:&v245 objects:&buf count:16];
          id v177 = v105;
        }
        while (v105);
      }
      else
      {
        id v192 = 0;
      }

      long long v207 = 0u;
      long long v208 = 0u;
      long long v205 = 0u;
      long long v206 = 0u;
      id v133 = v192;
      id v134 = [v133 countByEnumeratingWithState:&v205 objects:v253 count:16];
      if (v134)
      {
        id v135 = v134;
        uint64_t v136 = *(void *)v206;
        do
        {
          for (kk = 0; kk != v135; kk = (char *)kk + 1)
          {
            if (*(void *)v206 != v136) {
              objc_enumerationMutation(v133);
            }
            [v186 deleteObject:*(void *)(*((void *)&v205 + 1) + 8 * (void)kk)];
          }
          id v135 = [v133 countByEnumeratingWithState:&v205 objects:v253 count:16];
        }
        while (v135);
      }

      v201[0] = _NSConcreteStackBlock;
      v201[1] = 3221225472;
      v201[2] = sub_1000112D0;
      v201[3] = &unk_10008A260;
      id v202 = v31;
      v203 = v166;
      id v204 = v186;
      id v138 = v186;
      uint64_t v114 = v166;
      id v139 = v31;
      [v176 enumerateKeysAndObjectsUsingBlock:v201];

      if ([(USDeviceActivityBudget *)v114 hasPersistentChangedValues]) {
        goto LABEL_145;
      }
      v140 = [(USDeviceActivityBudget *)v114 events];
      id v141 = [v140 count];

      if (v165 != v141) {
        goto LABEL_145;
      }
      long long v196 = 0u;
      long long v197 = 0u;
      long long v194 = 0u;
      long long v195 = 0u;
      id v9 = [(USDeviceActivityBudget *)v114 events];
      id v142 = [(USDeviceActivityBudget *)v9 countByEnumeratingWithState:&v194 objects:v251 count:16];
      if (!v142)
      {
LABEL_142:

        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v147 = *v170;
          LODWORD(buf) = 138543362;
          *(void *)((char *)&buf + 4) = v147;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}@ has not changed; skipping all callbacks and event processing",
            (uint8_t *)&buf,
            0xCu);
        }
        *(unsigned char *)(*(void *)(*(void *)(v173 + 88) + 8) + 24) = 1;
        goto LABEL_147;
      }
      id v143 = v142;
      uint64_t v144 = *(void *)v195;
LABEL_134:
      uint64_t v145 = 0;
      while (1)
      {
        if (*(void *)v195 != v144) {
          objc_enumerationMutation(v9);
        }
        uint64_t v146 = *(void **)(*((void *)&v194 + 1) + 8 * v145);
        if (([v146 isInserted] & 1) != 0
          || ([v146 isDeleted] & 1) != 0
          || ([v146 hasPersistentChangedValues] & 1) != 0)
        {
          break;
        }
        if (v143 == (id)++v145)
        {
          id v143 = [(USDeviceActivityBudget *)v9 countByEnumeratingWithState:&v194 objects:v251 count:16];
          if (v143) {
            goto LABEL_134;
          }
          goto LABEL_142;
        }
      }
    }
    else
    {
      if (!*(unsigned char *)(v6 + 104) && (unint64_t)[v171 count] >= 0x14)
      {
        *(unsigned char *)(*(void *)(*(void *)(v6 + 88) + 8) + 24) = 0;
        uint64_t v111 = sub_100007388(103, @"ExcessiveActivitiesError", @"MonitorFewerActivities", v106, v107, v108, v109, v110, @"clientIdentifier");
        uint64_t v112 = *(void *)(*(void *)(v6 + 80) + 8);
        id v113 = *(void **)(v112 + 40);
        *(void *)(v112 + 40) = v111;

        uint64_t v114 = v9;
        goto LABEL_147;
      }
      v116 = *(void **)(v6 + 48);
      id v115 = *(void **)(v6 + 56);
      v118 = *(void **)(v173 + 32);
      v117 = *(void **)(v173 + 40);
      unsigned __int8 v119 = *(void **)(v173 + 64);
      id v120 = *(id *)(v173 + 72);
      id v121 = v119;
      id v122 = v118;
      id v123 = v115;
      id v124 = v116;
      id v125 = v117;
      id v126 = [[USDeviceActivityBudget alloc] initWithContext:v120];
      [(USDeviceActivityBudget *)v126 setName:v125];
      [(USDeviceActivityBudget *)v126 setClientIdentifier:v122];
      [(USDeviceActivityBudget *)v126 setExtensionIdentifier:v121];
      id v127 = [v124 intervalStart];
      [(USDeviceActivityBudget *)v126 setIntervalStart:v127];

      uint64_t v128 = [v124 intervalEnd];
      [(USDeviceActivityBudget *)v126 setIntervalEnd:v128];

      -[USDeviceActivityBudget setRepeats:](v126, "setRepeats:", [v124 repeats]);
      uint64_t v129 = [v124 warningTime];
      [(USDeviceActivityBudget *)v126 setWarningTime:v129];

      *(void *)&long long buf = _NSConcreteStackBlock;
      *((void *)&buf + 1) = 3221225472;
      long long v264 = sub_100010E9C;
      long long v265 = &unk_10008A238;
      v130 = v126;
      long long v266 = v130;
      id v267 = v120;
      id v131 = v120;
      [v123 enumerateKeysAndObjectsUsingBlock:&buf];
      v132 = v267;
      uint64_t v114 = v130;
    }
LABEL_145:
    id v148 = *(void **)(v173 + 72);
    uint64_t v149 = *(void *)(*(void *)(v173 + 80) + 8);
    id v193 = *(id *)(v149 + 40);
    unsigned __int8 v150 = [v148 save:&v193];
    objc_storeStrong((id *)(v149 + 40), v193);
    *(unsigned char *)(*(void *)(*(void *)(v173 + 88) + 8) + 24) = v150;
    if (!*(unsigned char *)(*(void *)(*(void *)(v173 + 88) + 8) + 24))
    {
      v7 = v171;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_10006A52C();
      }
      uint64_t v161 = sub_100007388(100, @"PersistBudgetError", @"SeeSystemLog", v156, v157, v158, v159, v160, (uint64_t)v164);
      uint64_t v162 = *(void *)(*(void *)v172 + 8);
      unsigned int v163 = *(void **)(v162 + 40);
      *(void *)(v162 + 40) = v161;

      v3 = v169;
      goto LABEL_151;
    }
    v249[0] = @"BudgetID";
    uint64_t v151 = [(USDeviceActivityBudget *)v114 objectID];
    v249[1] = @"ClientIdentifier";
    uint64_t v152 = *(void *)(v173 + 32);
    v250[0] = v151;
    v250[1] = v152;
    uint64_t v153 = +[NSDictionary dictionaryWithObjects:v250 forKeys:v249 count:2];
    uint64_t v154 = *(void *)(*(void *)(v173 + 96) + 8);
    id v155 = *(void **)(v154 + 40);
    *(void *)(v154 + 40) = v153;

LABEL_147:
    v3 = v169;
    v7 = v171;
LABEL_151:

    id v17 = v199;
    goto LABEL_152;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    sub_10006A4A0();
  }
  uint64_t v15 = sub_100007388(101, @"FetchBudgetError", @"SeeSystemLog", v10, v11, v12, v13, v14, @"clientIdentifier");
  uint64_t v16 = *(void *)(*(void *)v172 + 8);
  id v17 = *(void **)(v16 + 40);
  *(void *)(v16 + 40) = v15;
LABEL_152:
}

id sub_100008E00(uint64_t a1, void *a2)
{
  v3 = [a2 name];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_100009538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose((const void *)(v27 - 144), 8);
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_100009570(void *a1)
{
  id v2 = +[USDeviceActivityBudget fetchRequest];
  [v2 setReturnsObjectsAsFaults:0];
  uint64_t v4 = a1[4];
  uint64_t v3 = a1[5];
  if (v4) {
    +[NSPredicate predicateWithFormat:@"(%K == %@) && (%K IN %@)", @"clientIdentifier", v3, @"name", v4];
  }
  else {
  uint64_t v5 = +[NSPredicate predicateWithFormat:@"%K == %@", @"clientIdentifier", v3, v43, v44];
  }
  [v2 setPredicate:v5];

  uint64_t v6 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v6 + 40);
  v7 = [v2 execute:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);
  if (v7)
  {
    uint64_t v45 = a1 + 7;
    id v47 = v7;
    id v48 = v2;
    id v46 = a1;
    id v8 = (void *)a1[6];
    id v9 = v7;
    id v50 = v8;
    id v10 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v9, "count"));
    long long v53 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    id v49 = v9;
    id v11 = [v49 countByEnumeratingWithState:&v53 objects:v59 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v54;
      do
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(void *)v54 != v13) {
            objc_enumerationMutation(v49);
          }
          uint64_t v15 = *(void **)(*((void *)&v53 + 1) + 8 * i);
          uint64_t v16 = [USDeviceActivityBudgetMetadata alloc];
          id v17 = [v15 name];
          uint64_t v18 = [v15 objectID];
          unsigned __int8 v19 = [v15 clientIdentifier];
          id v20 = [v15 extensionIdentifier];
          id v21 = -[USDeviceActivityBudgetMetadata initWithActivity:budgetID:clientIdentifier:extensionIdentifier:intervalDidStart:](v16, "initWithActivity:budgetID:clientIdentifier:extensionIdentifier:intervalDidStart:", v17, v18, v19, v20, [v15 intervalDidStart]);

          [v10 addObject:v21];
          [v50 deleteObject:v15];
        }
        id v12 = [v49 countByEnumeratingWithState:&v53 objects:v59 count:16];
      }
      while (v12);
    }

    unsigned __int8 v22 = (void *)v46[6];
    uint64_t v23 = *(void *)(v46[7] + 8);
    id v51 = *(id *)(v23 + 40);
    unsigned __int8 v24 = [v22 save:&v51];
    objc_storeStrong((id *)(v23 + 40), v51);
    *(unsigned char *)(*(void *)(v46[8] + 8) + 24) = v24;
    if (*(unsigned char *)(*(void *)(v46[8] + 8) + 24))
    {
      CFStringRef v57 = @"BudgetMetadata";
      id v58 = v10;
      uint64_t v25 = +[NSDictionary dictionaryWithObjects:&v58 forKeys:&v57 count:1];
      uint64_t v26 = *(void *)(v46[9] + 8);
      uint64_t v27 = *(void **)(v26 + 40);
      *(void *)(v26 + 40) = v25;
      id v2 = v48;
    }
    else
    {
      id v2 = v48;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_10006A60C();
      }
      uint64_t v40 = sub_100007388(102, @"DeleteBudgetError", @"SeeSystemLog", v35, v36, v37, v38, v39, v42);
      uint64_t v41 = *(void *)(*v45 + 8);
      uint64_t v27 = *(void **)(v41 + 40);
      *(void *)(v41 + 40) = v40;
    }
    v7 = v47;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10006A59C();
    }
    uint64_t v33 = sub_100007388(101, @"FetchBudgetError", @"SeeSystemLog", v28, v29, v30, v31, v32, v42);
    uint64_t v34 = *(void *)(a1[7] + 8);
    id v10 = *(id *)(v34 + 40);
    *(void *)(v34 + 40) = v33;
  }
}

void sub_100009A4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[USRegisteredBudget fetchRequest];
  [v4 setPredicate:*(void *)(a1 + 32)];
  [v4 setReturnsObjectsAsFaults:0];
  id v33 = 0;
  uint64_t v5 = [v4 execute:&v33];
  id v6 = v33;
  if (v5)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v7 = v5;
    id v8 = [v7 countByEnumeratingWithState:&v29 objects:v34 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v30;
      do
      {
        id v11 = 0;
        do
        {
          if (*(void *)v30 != v10) {
            objc_enumerationMutation(v7);
          }
          [v3 deleteObject:*(void *)(*((void *)&v29 + 1) + 8 * (void)v11)];
          id v11 = (char *)v11 + 1;
        }
        while (v9 != v11);
        id v9 = [v7 countByEnumeratingWithState:&v29 objects:v34 count:16];
      }
      while (v9);
    }

    id v28 = 0;
    unsigned int v12 = [v3 save:&v28];
    id v13 = v28;
    if (v12)
    {
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
      uint64_t v14 = [*(id *)(a1 + 40) notificationPostingQueue];
      v27[0] = (uint64_t)_NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = (uint64_t)sub_100009D1C;
      v27[3] = (uint64_t)&unk_100089DD8;
      v27[4] = *(void *)(a1 + 40);
      [v14 addOperationWithBlock:v27];
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_10006A6F4();
      }
      uint64_t v26 = *(void *)(a1 + 48);
      uint64_t v14 = sub_100007388(102, @"DeleteBudgetError", @"SeeSystemLog", v21, v22, v23, v24, v25, v27[0]);
      (*(void (**)(uint64_t, void *))(v26 + 16))(v26, v14);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10006A67C();
    }
    uint64_t v20 = *(void *)(a1 + 48);
    sub_100007388(101, @"FetchBudgetError", @"SeeSystemLog", v15, v16, v17, v18, v19, v27[0]);
    id v13 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id))(v20 + 16))(v20, v13);
  }
}

void sub_100009D1C(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"RegisteredBudgetsDidChange" object:*(void *)(a1 + 32)];
}

void sub_100009E74(void *a1)
{
  id v2 = +[USRegisteredBudget fetchRequest];
  uint64_t v3 = a1[5];
  if (!a1[4])
  {
    if (!v3) {
      goto LABEL_9;
    }
    CFStringRef v68 = @"clientIdentifier";
    uint64_t v69 = a1[5];
    goto LABEL_7;
  }
  if (!v3)
  {
    CFStringRef v68 = @"identifier";
    uint64_t v69 = a1[4];
LABEL_7:
    +[NSPredicate predicateWithFormat:@"%K == %@", v68, v69, v70, v71];
    goto LABEL_8;
  }
  +[NSPredicate predicateWithFormat:@"(%K == %@) && (%K == %@)", @"clientIdentifier", v3, @"identifier", a1[4]];
  uint64_t v4 = LABEL_8:;
  [v2 setPredicate:v4];

LABEL_9:
  [v2 setReturnsObjectsAsFaults:0];
  v121[0] = @"schedule";
  v121[1] = @"budgetedCategories";
  v121[2] = @"budgetedApplications";
  v121[3] = @"budgetedWebDomains";
  v121[4] = @"notificationTimes";
  uint64_t v5 = +[NSArray arrayWithObjects:v121 count:5];
  [v2 setRelationshipKeyPathsForPrefetching:v5];

  id v112 = 0;
  id v6 = [v2 execute:&v112];
  id v7 = v112;
  id v8 = v7;
  if (v6)
  {
    id v72 = v7;
    uint64_t v74 = a1;
    uint64_t v75 = v2;
    id v9 = &swift_weakDestroy_ptr;
    id v78 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v6, "count"));
    long long v108 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    uint64_t v73 = v6;
    id obj = v6;
    id v79 = [obj countByEnumeratingWithState:&v108 objects:v120 count:16];
    if (v79)
    {
      uint64_t v77 = *(void *)v109;
      uint64_t v10 = &swift_weakDestroy_ptr;
      id v11 = &swift_weakDestroy_ptr;
      do
      {
        uint64_t v12 = 0;
        do
        {
          if (*(void *)v109 != v77) {
            objc_enumerationMutation(obj);
          }
          uint64_t v84 = v12;
          id v85 = *(void **)(*((void *)&v108 + 1) + 8 * v12);
          id v13 = [v85 schedule];
          id v87 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(v13, "count"));
          long long v104 = 0u;
          long long v105 = 0u;
          long long v106 = 0u;
          long long v107 = 0u;
          id v86 = v13;
          id v14 = [v86 countByEnumeratingWithState:&v104 objects:v119 count:16];
          if (v14)
          {
            id v15 = v14;
            uint64_t v16 = *(void *)v105;
            do
            {
              for (i = 0; i != v15; i = (char *)i + 1)
              {
                if (*(void *)v105 != v16) {
                  objc_enumerationMutation(v86);
                }
                uint64_t v18 = *(void **)(*((void *)&v104 + 1) + 8 * i);
                id v19 = objc_msgSend(objc_alloc((Class)v11[206]), "initWithFormat:", @"%lld", objc_msgSend(v18, "weekday"));
                uint64_t v20 = v10[198];
                [v18 timeLimit];
                uint64_t v21 = objc_msgSend(v20, "numberWithDouble:");
                [v87 setObject:v21 forKeyedSubscript:v19];
              }
              id v15 = [v86 countByEnumeratingWithState:&v104 objects:v119 count:16];
            }
            while (v15);
          }

          uint64_t v22 = [v85 budgetedCategories];
          id v23 = objc_msgSend(objc_alloc((Class)v9[192]), "initWithCapacity:", objc_msgSend(v22, "count"));
          long long v100 = 0u;
          long long v101 = 0u;
          long long v102 = 0u;
          long long v103 = 0u;
          id v24 = v22;
          id v25 = [v24 countByEnumeratingWithState:&v100 objects:v118 count:16];
          if (v25)
          {
            id v26 = v25;
            uint64_t v27 = *(void *)v101;
            do
            {
              for (j = 0; j != v26; j = (char *)j + 1)
              {
                if (*(void *)v101 != v27) {
                  objc_enumerationMutation(v24);
                }
                long long v29 = [*(id *)(*((void *)&v100 + 1) + 8 * (void)j) categoryIdentifier];
                [v23 addObject:v29];
              }
              id v26 = [v24 countByEnumeratingWithState:&v100 objects:v118 count:16];
            }
            while (v26);
          }
          v83 = v24;

          long long v30 = [v85 budgetedApplications];
          id v31 = objc_msgSend(objc_alloc((Class)v9[192]), "initWithCapacity:", objc_msgSend(v30, "count"));
          long long v96 = 0u;
          long long v97 = 0u;
          long long v98 = 0u;
          long long v99 = 0u;
          id v32 = v30;
          id v33 = [v32 countByEnumeratingWithState:&v96 objects:v117 count:16];
          if (v33)
          {
            id v34 = v33;
            uint64_t v35 = *(void *)v97;
            do
            {
              for (k = 0; k != v34; k = (char *)k + 1)
              {
                if (*(void *)v97 != v35) {
                  objc_enumerationMutation(v32);
                }
                uint64_t v37 = [*(id *)(*((void *)&v96 + 1) + 8 * (void)k) bundleIdentifier];
                [v31 addObject:v37];
              }
              id v34 = [v32 countByEnumeratingWithState:&v96 objects:v117 count:16];
            }
            while (v34);
          }
          unsigned __int8 v82 = v32;

          uint64_t v38 = [v85 budgetedWebDomains];
          id v39 = objc_msgSend(objc_alloc((Class)v9[192]), "initWithCapacity:", objc_msgSend(v38, "count"));
          long long v92 = 0u;
          long long v93 = 0u;
          long long v94 = 0u;
          long long v95 = 0u;
          id v40 = v38;
          id v41 = [v40 countByEnumeratingWithState:&v92 objects:v116 count:16];
          if (v41)
          {
            id v42 = v41;
            uint64_t v43 = *(void *)v93;
            do
            {
              for (m = 0; m != v42; m = (char *)m + 1)
              {
                if (*(void *)v93 != v43) {
                  objc_enumerationMutation(v40);
                }
                uint64_t v45 = [*(id *)(*((void *)&v92 + 1) + 8 * (void)m) webDomain];
                [v39 addObject:v45];
              }
              id v42 = [v40 countByEnumeratingWithState:&v92 objects:v116 count:16];
            }
            while (v42);
          }
          v81 = v40;

          id v46 = [v85 notificationTimes];
          id v47 = objc_msgSend(objc_alloc((Class)v9[192]), "initWithCapacity:", (char *)objc_msgSend(v46, "count") - 1);
          long long v88 = 0u;
          long long v89 = 0u;
          long long v90 = 0u;
          long long v91 = 0u;
          id v48 = v46;
          id v49 = [v48 countByEnumeratingWithState:&v88 objects:v115 count:16];
          if (v49)
          {
            id v50 = v49;
            uint64_t v51 = *(void *)v89;
            do
            {
              for (n = 0; n != v50; n = (char *)n + 1)
              {
                if (*(void *)v89 != v51) {
                  objc_enumerationMutation(v48);
                }
                long long v53 = *(void **)(*((void *)&v88 + 1) + 8 * (void)n);
                [v53 remainingTime];
                if (v54 != 0.0)
                {
                  [v53 remainingTime];
                  long long v55 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
                  [v47 addObject:v55];
                }
              }
              id v50 = [v48 countByEnumeratingWithState:&v88 objects:v115 count:16];
            }
            while (v50);
          }

          v113[0] = @"identifier";
          uint64_t v80 = [v85 identifier];
          v114[0] = v80;
          v113[1] = @"clientIdentifier";
          long long v56 = [v85 clientIdentifier];
          v114[1] = v56;
          v113[2] = @"calendarIdentifier";
          CFStringRef v57 = [v85 calendarIdentifier];
          v114[2] = v57;
          v114[3] = v87;
          v113[3] = @"schedule";
          v113[4] = @"budgetedCategories";
          v114[4] = v23;
          v114[5] = v31;
          v113[5] = @"budgetedApplications";
          v113[6] = @"budgetedWebDomains";
          v114[6] = v39;
          v113[7] = @"darwinNotificationName";
          id v58 = [v85 darwinNotificationName];
          v113[8] = @"notificationTimes";
          v114[7] = v58;
          v114[8] = v47;
          uint64_t v59 = +[NSDictionary dictionaryWithObjects:v114 forKeys:v113 count:9];
          [v78 addObject:v59];

          uint64_t v12 = v84 + 1;
          id v9 = &swift_weakDestroy_ptr;
          uint64_t v10 = &swift_weakDestroy_ptr;
          id v11 = &swift_weakDestroy_ptr;
        }
        while ((id)(v84 + 1) != v79);
        id v79 = [obj countByEnumeratingWithState:&v108 objects:v120 count:16];
      }
      while (v79);
    }

    uint64_t v60 = v78;
    (*(void (**)(void))(v74[6] + 16))();
    id v2 = v75;
    id v8 = v72;
    id v6 = v73;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10006A76C(v2);
    }
    uint64_t v66 = a1[6];
    uint64_t v60 = sub_100007388(101, @"FetchBudgetError", @"SeeSystemLog", v61, v62, v63, v64, v65, v67);
    (*(void (**)(uint64_t, void, void *))(v66 + 16))(v66, 0, v60);
  }
}

void sub_10000AA6C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  id v6 = a2;
  id v8 = [v5 objectAtIndexedSubscript:a3];
  id v7 = +[NSPredicate predicateWithFormat:@"(%K == %@) && (%K == %@)", @"clientIdentifier", v8, @"identifier", v6];

  [v4 addObject:v7];
}

void sub_10000ABF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = +[USRegisteredBudget fetchRequest];
  [v5 setPredicate:*(void *)(a1 + 32)];
  [v5 setReturnsObjectsAsFaults:0];
  v10[0] = @"schedule";
  v10[1] = @"budgetedCategories";
  v10[2] = @"budgetedApplications";
  v10[3] = @"budgetedWebDomains";
  id v6 = +[NSArray arrayWithObjects:v10 count:4];
  [v5 setRelationshipKeyPathsForPrefetching:v6];

  id v9 = 0;
  id v7 = [v5 execute:&v9];
  id v8 = v9;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10000AE10(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[USNotificationTime fetchRequest];
  uint64_t v5 = +[NSPredicate predicateWithFormat:@"(%K == YES) && (%K.%K == %@)", @"notificationWasPosted", @"budget", @"calendarIdentifier", *(void *)(a1 + 32)];
  [v4 setPredicate:v5];

  CFStringRef v22 = @"budget";
  id v6 = +[NSArray arrayWithObjects:&v22 count:1];
  [v4 setRelationshipKeyPathsForPrefetching:v6];

  id v20 = 0;
  id v7 = [v4 execute:&v20];
  id v8 = v20;
  if (v7)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v9 = v7;
    id v10 = [v9 countByEnumeratingWithState:&v16 objects:v21 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v17;
      do
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(void *)v17 != v12) {
            objc_enumerationMutation(v9);
          }
          [*(id *)(*((void *)&v16 + 1) + 8 * i) setNotificationWasPosted:0];
        }
        id v11 = [v9 countByEnumeratingWithState:&v16 objects:v21 count:16];
      }
      while (v11);
    }

    id v15 = v8;
    [v3 save:&v15];
    id v14 = v15;

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    id v14 = v8;
  }
}

void sub_10000B404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_10000B44C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [*(id *)(a1 + 32) lock];
  if (v5)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10000B56C;
    v10[3] = &unk_100089F40;
    void v10[4] = *(void *)(a1 + 40);
    [v5 enumerateKeysAndObjectsUsingBlock:v10];
  }
  else
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v9 = *(void *)(v7 + 40);
    id v8 = (id *)(v7 + 40);
    if (!v9) {
      objc_storeStrong(v8, a3);
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "unlockWithCondition:", (char *)objc_msgSend(*(id *)(a1 + 32), "condition") - 1);
}

void sub_10000B540(void *a1)
{
}

void sub_10000B54C(_Unwind_Exception *a1)
{
}

void sub_10000B56C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [a3 equivalentBundleIdentifiers];
  if ((unint64_t)[v4 count] >= 2) {
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObjectsFromArray:v4];
  }
}

void sub_10000B5D8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [*(id *)(a1 + 32) lock];
  if (v5)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10000B6F8;
    v10[3] = &unk_100089F40;
    void v10[4] = *(void *)(a1 + 40);
    [v5 enumerateKeysAndObjectsUsingBlock:v10];
  }
  else
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v9 = *(void *)(v7 + 40);
    id v8 = (id *)(v7 + 40);
    if (!v9) {
      objc_storeStrong(v8, a3);
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "unlockWithCondition:", (char *)objc_msgSend(*(id *)(a1 + 32), "condition") - 1);
}

void sub_10000B6CC(void *a1)
{
}

void sub_10000B6D8(_Unwind_Exception *a1)
{
}

void sub_10000B6F8(uint64_t a1, uint64_t a2, void *a3)
{
  id v8 = [a3 equivalentBundleIdentifiers];
  if ([v8 count])
  {
    id v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    if (v4)
    {
      [v4 addObjectsFromArray:v8];
    }
    else
    {
      id v5 = [objc_alloc((Class)NSMutableOrderedSet) initWithArray:v8];
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v7 = *(void **)(v6 + 40);
      *(void *)(v6 + 40) = v5;
    }
  }
}

void sub_10000BBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_10000BBFC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    v14[0] = 0;
    v14[1] = v14;
    v14[2] = 0x3032000000;
    v14[3] = sub_100007B08;
    v14[4] = sub_100007B18;
    id v15 = 0;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10000BD54;
    v9[3] = &unk_100089F90;
    long long v11 = *(_OWORD *)(a1 + 48);
    id v7 = *(id *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 64);
    id v10 = v7;
    uint64_t v12 = v8;
    id v13 = v14;
    [v5 enumerateKeysAndObjectsUsingBlock:v9];

    _Block_object_dispose(v14, 8);
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), a3);
  }
  [*(id *)(a1 + 40) lock];
  [*(id *)(a1 + 40) unlockWithCondition:*(void *)(a1 + 80)];
}

void sub_10000BD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000BD54(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  uint64_t v8 = *(void **)(*(void *)(a1[5] + 8) + 40);
  if (v8)
  {
    uint64_t v9 = [v6 identifier];
    [v8 addObject:v9];
  }
  else
  {
    id v10 = objc_alloc((Class)NSMutableSet);
    uint64_t v9 = [v7 identifier];
    id v11 = objc_msgSend(v10, "initWithObjects:", v9, 0);
    uint64_t v12 = *(void *)(a1[5] + 8);
    id v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;
  }
  id v14 = [v7 equivalentBundleIdentifiers];
  if ((unint64_t)[v14 count] >= 2)
  {
    id v15 = *(void **)(*(void *)(a1[6] + 8) + 40);
    if (!v15)
    {
      id v16 = [objc_alloc((Class)NSMutableSet) initWithArray:a1[4]];
      uint64_t v17 = *(void *)(a1[6] + 8);
      long long v18 = *(void **)(v17 + 40);
      *(void *)(v17 + 40) = v16;

      id v15 = *(void **)(*(void *)(a1[6] + 8) + 40);
    }
    [v15 addObjectsFromArray:v14];
  }
  long long v19 = [v7 webDomains];
  if ([v19 count])
  {
    id v33 = v5;
    if (!*(void *)(*(void *)(a1[7] + 8) + 40))
    {
      uint64_t v20 = objc_opt_new();
      uint64_t v21 = *(void *)(a1[7] + 8);
      CFStringRef v22 = *(void **)(v21 + 40);
      *(void *)(v21 + 40) = v20;

      uint64_t v23 = objc_opt_new();
      uint64_t v24 = *(void *)(a1[8] + 8);
      id v25 = *(void **)(v24 + 40);
      *(void *)(v24 + 40) = v23;
    }
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id v26 = v19;
    id v27 = [v26 countByEnumeratingWithState:&v34 objects:v38 count:16];
    if (v27)
    {
      id v28 = v27;
      uint64_t v29 = *(void *)v35;
      do
      {
        long long v30 = 0;
        do
        {
          if (*(void *)v35 != v29) {
            objc_enumerationMutation(v26);
          }
          id v31 = *(void **)(*(void *)(a1[7] + 8) + 40);
          id v32 = [*(id *)(*(void *)(a1[8] + 8) + 40) normalizeDomainName:*(void *)(*((void *)&v34 + 1) + 8 * (void)v30)];
          [v31 addObject:v32];

          long long v30 = (char *)v30 + 1;
        }
        while (v28 != v30);
        id v28 = [v26 countByEnumeratingWithState:&v34 objects:v38 count:16];
      }
      while (v28);
    }

    id v5 = v33;
  }
}

void sub_10000C400(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_10000C454(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [*(id *)(a1 + 32) lock];
  if (v5)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10000C574;
    v10[3] = &unk_100089FE0;
    long long v11 = *(_OWORD *)(a1 + 40);
    [v5 enumerateKeysAndObjectsUsingBlock:v10];
  }
  else
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v9 = *(void *)(v7 + 40);
    uint64_t v8 = (id *)(v7 + 40);
    if (!v9) {
      objc_storeStrong(v8, a3);
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "unlockWithCondition:", (char *)objc_msgSend(*(id *)(a1 + 32), "condition") - 1);
}

void sub_10000C548(void *a1)
{
}

void sub_10000C554(_Unwind_Exception *a1)
{
}

void sub_10000C574(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [a3 webDomains];
  if ((unint64_t)[v4 count] >= 2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v5 = v4;
    id v6 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v18;
      do
      {
        uint64_t v9 = 0;
        do
        {
          if (*(void *)v18 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void *)(*((void *)&v17 + 1) + 8 * (void)v9);
          long long v11 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
          if (!v11)
          {
            uint64_t v12 = objc_opt_new();
            uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 8);
            id v14 = *(void **)(v13 + 40);
            *(void *)(v13 + 40) = v12;

            long long v11 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
          }
          id v15 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
          id v16 = objc_msgSend(v11, "normalizeDomainName:", v10, (void)v17);
          [v15 addObject:v16];

          uint64_t v9 = (char *)v9 + 1;
        }
        while (v7 != v9);
        id v7 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
      }
      while (v7);
    }
  }
}

void sub_10000C6F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [*(id *)(a1 + 32) lock];
  if (v5)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10000C814;
    v10[3] = &unk_100089FE0;
    long long v11 = *(_OWORD *)(a1 + 40);
    [v5 enumerateKeysAndObjectsUsingBlock:v10];
  }
  else
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v9 = *(void *)(v7 + 40);
    uint64_t v8 = (id *)(v7 + 40);
    if (!v9) {
      objc_storeStrong(v8, a3);
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "unlockWithCondition:", (char *)objc_msgSend(*(id *)(a1 + 32), "condition") - 1);
}

void sub_10000C7E8(void *a1)
{
}

void sub_10000C7F4(_Unwind_Exception *a1)
{
}

void sub_10000C814(uint64_t a1, uint64_t a2, void *a3)
{
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v4 = objc_msgSend(a3, "webDomains", 0);
  id v5 = [v4 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v20;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v20 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v19 + 1) + 8 * (void)v8);
        uint64_t v10 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
        if (!v10)
        {
          uint64_t v11 = objc_opt_new();
          uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8);
          uint64_t v13 = *(void **)(v12 + 40);
          *(void *)(v12 + 40) = v11;

          uint64_t v10 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
        }
        id v14 = [v10 normalizeDomainName:v9];
        id v15 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
        if (v15)
        {
          [v15 addObject:v14];
        }
        else
        {
          id v16 = [objc_alloc((Class)NSMutableOrderedSet) initWithObject:v14];
          uint64_t v17 = *(void *)(*(void *)(a1 + 40) + 8);
          long long v18 = *(void **)(v17 + 40);
          *(void *)(v17 + 40) = v16;
        }
        uint64_t v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v6);
  }
}

void sub_10000CDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_10000CE18(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    v12[0] = 0;
    v12[1] = v12;
    v12[2] = 0x3032000000;
    v12[3] = sub_100007B08;
    v12[4] = sub_100007B18;
    id v13 = 0;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10000CF74;
    v7[3] = &unk_10008A030;
    long long v9 = *(_OWORD *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 64);
    id v8 = *(id *)(a1 + 32);
    uint64_t v11 = v12;
    [v5 enumerateKeysAndObjectsUsingBlock:v7];

    _Block_object_dispose(v12, 8);
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), a3);
  }
  [*(id *)(a1 + 40) lock];
  [*(id *)(a1 + 40) unlockWithCondition:*(void *)(a1 + 80)];
}

void sub_10000CF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000CF74(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  id v8 = *(void **)(*(void *)(a1[5] + 8) + 40);
  if (v8)
  {
    long long v9 = [v6 identifier];
    [v8 addObject:v9];
  }
  else
  {
    id v10 = objc_alloc((Class)NSMutableSet);
    long long v9 = [v7 identifier];
    id v11 = objc_msgSend(v10, "initWithObjects:", v9, 0);
    uint64_t v12 = *(void *)(a1[5] + 8);
    id v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;
  }
  id v14 = [v7 equivalentBundleIdentifiers];
  if ([v14 count])
  {
    id v15 = *(void **)(*(void *)(a1[6] + 8) + 40);
    if (v15)
    {
      [v15 addObjectsFromArray:v14];
    }
    else
    {
      id v16 = [objc_alloc((Class)NSMutableSet) initWithArray:v14];
      uint64_t v17 = *(void *)(a1[6] + 8);
      long long v18 = *(void **)(v17 + 40);
      *(void *)(v17 + 40) = v16;
    }
  }
  long long v19 = [v7 webDomains];
  if ((unint64_t)[v19 count] >= 2)
  {
    id v33 = v5;
    if (!*(void *)(*(void *)(a1[7] + 8) + 40))
    {
      id v20 = [objc_alloc((Class)NSMutableSet) initWithArray:a1[4]];
      uint64_t v21 = *(void *)(a1[7] + 8);
      long long v22 = *(void **)(v21 + 40);
      *(void *)(v21 + 40) = v20;

      uint64_t v23 = objc_opt_new();
      uint64_t v24 = *(void *)(a1[8] + 8);
      id v25 = *(void **)(v24 + 40);
      *(void *)(v24 + 40) = v23;
    }
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id v26 = v19;
    id v27 = [v26 countByEnumeratingWithState:&v34 objects:v38 count:16];
    if (v27)
    {
      id v28 = v27;
      uint64_t v29 = *(void *)v35;
      do
      {
        long long v30 = 0;
        do
        {
          if (*(void *)v35 != v29) {
            objc_enumerationMutation(v26);
          }
          id v31 = *(void **)(*(void *)(a1[7] + 8) + 40);
          id v32 = [*(id *)(*(void *)(a1[8] + 8) + 40) normalizeDomainName:*(void *)(*((void *)&v34 + 1) + 8 * (void)v30)];
          [v31 addObject:v32];

          long long v30 = (char *)v30 + 1;
        }
        while (v28 != v30);
        id v28 = [v26 countByEnumeratingWithState:&v34 objects:v38 count:16];
      }
      while (v28);
    }

    id v5 = v33;
  }
}

void sub_10000D4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10000D514(void *a1)
{
  id v2 = +[USBudgetedCategory fetchRequest];
  [v2 setResultType:4];
  id v3 = +[NSPredicate predicateWithFormat:@"(%K != nil) || (%K.%K.%K == YES)", @"budget", @"event", @"budget", @"intervalDidStart"];
  if (a1[4])
  {
    id v4 = objc_alloc((Class)NSCompoundPredicate);
    v19[0] = a1[4];
    v19[1] = v3;
    id v5 = +[NSArray arrayWithObjects:v19 count:2];
    id v6 = [v4 initWithType:1 subpredicates:v5];
    [v2 setPredicate:v6];
  }
  else
  {
    [v2 setPredicate:v3];
  }
  uint64_t v7 = *(void *)(a1[5] + 8);
  id obj = *(id *)(v7 + 40);
  id v8 = [v2 execute:&obj];
  objc_storeStrong((id *)(v7 + 40), obj);
  uint64_t v9 = [v8 firstObject];

  if (v9)
  {
    if ([v9 BOOLValue])
    {
      uint64_t v10 = *(void *)(a1[6] + 8);
      id v11 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = &__kCFBooleanTrue;
    }
    else
    {
      id v11 = +[USRegisteredDeviceActivityEvent fetchRequest];
      [v11 setResultType:4];
      uint64_t v12 = +[NSPredicate predicateWithFormat:@"(%K.@count <= 0) && (%K.@count <= 0) && (%K.@count <= 0)", @"budgetedCategories", @"budgetedApplications", @"budgetedWebDomains"];
      [v11 setPredicate:v12];

      uint64_t v13 = *(void *)(a1[5] + 8);
      id v17 = *(id *)(v13 + 40);
      id v14 = [v11 execute:&v17];
      objc_storeStrong((id *)(v13 + 40), v17);
      id v15 = [v14 firstObject];

      if (v15)
      {
        id v16 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v15 BOOLValue]);
      }
      else
      {
        id v16 = 0;
      }
      objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), v16);
      if (v15) {
    }
      }
  }
}

void sub_10000D9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 128), 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10000DA14(void *a1)
{
  id v2 = +[NSPredicate predicateWithFormat:@"(%K != nil) || (%K.%K.%K == YES)", @"budget", @"event", @"budget", @"intervalDidStart"];
  id v3 = +[USBudgetedApplication fetchRequest];
  [v3 setReturnsObjectsAsFaults:0];
  [v3 setPredicate:v2];
  uint64_t v4 = *(void *)(a1[4] + 8);
  id obj = *(id *)(v4 + 40);
  id v5 = [v3 execute:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  if (v5)
  {
    id v6 = +[USBudgetedWebDomain fetchRequest];
    [v6 setReturnsObjectsAsFaults:0];
    [v6 setPredicate:v2];
    uint64_t v7 = *(void *)(a1[4] + 8);
    id v43 = *(id *)(v7 + 40);
    id v8 = [v6 execute:&v43];
    objc_storeStrong((id *)(v7 + 40), v43);
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = v8 != 0;
  }
  else
  {
    id v8 = 0;
  }
  if (*(unsigned char *)(*(void *)(a1[5] + 8) + 24))
  {
    id v33 = v5;
    long long v34 = v2;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    id v9 = v5;
    id v10 = [v9 countByEnumeratingWithState:&v39 objects:v46 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v40;
      do
      {
        uint64_t v13 = 0;
        do
        {
          if (*(void *)v40 != v12) {
            objc_enumerationMutation(v9);
          }
          uint64_t v14 = *(void **)(*((void *)&v39 + 1) + 8 * (void)v13);
          uint64_t v15 = *(void **)(*(void *)(a1[6] + 8) + 40);
          if (v15)
          {
            uint64_t v16 = [*(id *)(*((void *)&v39 + 1) + 8 * (void)v13) bundleIdentifier];
            [v15 addObject:v16];
          }
          else
          {
            id v17 = objc_alloc((Class)NSMutableOrderedSet);
            uint64_t v16 = [v14 bundleIdentifier];
            id v18 = [v17 initWithObject:v16];
            uint64_t v19 = *(void *)(a1[6] + 8);
            id v20 = *(void **)(v19 + 40);
            *(void *)(v19 + 40) = v18;
          }
          uint64_t v13 = (char *)v13 + 1;
        }
        while (v11 != v13);
        id v11 = [v9 countByEnumeratingWithState:&v39 objects:v46 count:16];
      }
      while (v11);
    }

    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    id v21 = v8;
    id v22 = [v21 countByEnumeratingWithState:&v35 objects:v45 count:16];
    if (v22)
    {
      id v23 = v22;
      uint64_t v24 = *(void *)v36;
      do
      {
        id v25 = 0;
        do
        {
          if (*(void *)v36 != v24) {
            objc_enumerationMutation(v21);
          }
          id v26 = *(void **)(*((void *)&v35 + 1) + 8 * (void)v25);
          id v27 = *(void **)(*(void *)(a1[7] + 8) + 40);
          if (v27)
          {
            id v28 = [*(id *)(*((void *)&v35 + 1) + 8 * (void)v25) webDomain];
            [v27 addObject:v28];
          }
          else
          {
            id v29 = objc_alloc((Class)NSMutableOrderedSet);
            id v28 = [v26 webDomain];
            id v30 = [v29 initWithObject:v28];
            uint64_t v31 = *(void *)(a1[7] + 8);
            id v32 = *(void **)(v31 + 40);
            *(void *)(v31 + 40) = v30;
          }
          id v25 = (char *)v25 + 1;
        }
        while (v23 != v25);
        id v23 = [v21 countByEnumeratingWithState:&v35 objects:v45 count:16];
      }
      while (v23);
    }

    id v5 = v33;
    id v2 = v34;
  }
}

void sub_10000DE7C(uint64_t a1)
{
  id v3 = +[USRegisteredBudget fetchRequest];
  uint64_t v4 = +[NSPredicate predicateWithFormat:@"ANY %K.%K == YES", @"notificationTimes", @"notificationWasPosted"];
  [v3 setPredicate:v4];

  [v3 setReturnsObjectsAsFaults:0];
  v20[0] = @"schedule";
  v20[1] = @"budgetedCategories";
  v20[2] = @"budgetedApplications";
  v20[3] = @"budgetedWebDomains";
  v20[4] = @"notificationTimes";
  id v5 = +[NSArray arrayWithObjects:v20 count:5];
  [v3 setRelationshipKeyPathsForPrefetching:v5];

  id v18 = 0;
  id v6 = [v3 execute:&v18];
  id v7 = v18;
  if (v6)
  {
    uint64_t v15 = v2;
    id v8 = +[USRegisteredDeviceActivityEvent fetchRequest];
    id v9 = +[NSPredicate predicateWithFormat:@"%K == YES", @"didReachThreshold"];
    [v8 setPredicate:v9];

    [v8 setReturnsObjectsAsFaults:0];
    v19[0] = @"budget";
    v19[1] = @"budgetedCategories";
    void v19[2] = @"budgetedApplications";
    v19[3] = @"budgetedWebDomains";
    id v10 = +[NSArray arrayWithObjects:v19 count:4];
    [v8 setRelationshipKeyPathsForPrefetching:v10];

    id v17 = v7;
    id v11 = [v8 execute:&v17];
    id v12 = v17;

    if ((*(unsigned int (**)(void))(*(void *)(a1 + 40) + 16))())
    {
      uint64_t v13 = *(void **)(a1 + 32);
      id v16 = v12;
      unsigned __int8 v14 = [v13 save:&v16];
      id v7 = v16;

      if ((v14 & 1) == 0 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_10006A9F8();
      }
    }
    else
    {
      id v7 = v12;
    }

    id v2 = v15;
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10000E238(void *a1)
{
  id v3 = +[USRegisteredBudget fetchRequest];
  [v3 setPredicate:a1[4]];
  [v3 setReturnsObjectsAsFaults:0];
  v29[0] = @"schedule";
  v29[1] = @"budgetedCategories";
  v29[2] = @"budgetedApplications";
  v29[3] = @"budgetedWebDomains";
  v29[4] = @"notificationTimes";
  uint64_t v4 = +[NSArray arrayWithObjects:v29 count:5];
  [v3 setRelationshipKeyPathsForPrefetching:v4];

  id v25 = 0;
  id v5 = [v3 execute:&v25];
  id v6 = v25;
  if (v5)
  {
    id v22 = v2;
    id v7 = +[USRegisteredDeviceActivityEvent fetchRequest];
    [v7 setReturnsObjectsAsFaults:0];
    v28[0] = @"budget";
    v28[1] = @"budgetedCategories";
    v28[2] = @"budgetedApplications";
    v28[3] = @"budgetedWebDomains";
    id v8 = +[NSArray arrayWithObjects:v28 count:4];
    [v7 setRelationshipKeyPathsForPrefetching:v8];

    uint64_t v9 = +[NSPredicate predicateWithFormat:@"%K.%K == YES", @"budget", @"intervalDidStart"];
    if (a1[4])
    {
      id v10 = +[NSPredicate predicateWithFormat:@"(%K.@count <= 0) && (%K.@count <= 0) && (%K.@count <= 0)", @"budgetedCategories", @"budgetedApplications", @"budgetedWebDomains"];
      id v11 = objc_alloc((Class)NSCompoundPredicate);
      v27[0] = a1[4];
      v27[1] = v10;
      id v12 = +[NSArray arrayWithObjects:v27 count:2];
      id v13 = [v11 initWithType:2 subpredicates:v12];

      id v14 = objc_alloc((Class)NSCompoundPredicate);
      v26[0] = v13;
      v26[1] = v9;
      uint64_t v15 = +[NSArray arrayWithObjects:v26 count:2];
      id v16 = [v14 initWithType:1 subpredicates:v15];
      [v7 setPredicate:v16];
    }
    else
    {
      [v7 setPredicate:v9];
    }
    id v17 = (void *)v9;
    id v24 = v6;
    id v18 = [v7 execute:&v24];
    id v19 = v24;

    if ((*(unsigned int (**)(void))(a1[6] + 16))())
    {
      id v20 = (void *)a1[5];
      id v23 = v19;
      unsigned __int8 v21 = [v20 save:&v23];
      id v6 = v23;

      if ((v21 & 1) == 0 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_10006A9F8();
      }
    }
    else
    {
      id v6 = v19;
    }
    id v2 = v22;
  }
  else
  {
    (*(void (**)(void))(a1[6] + 16))();
  }
}

void sub_10000EA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000EA30(uint64_t a1)
{
  id v2 = +[USDeviceActivityBudget fetchRequest];
  [v2 setReturnsObjectsAsFaults:0];
  id v3 = +[NSPredicate predicateWithFormat:@"%K == %@"];
  [v2 setPredicate:v3];

  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v4 + 40);
  id v5 = [v2 execute:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  if (v5)
  {
    uint64_t v6 = [v5 valueForKeyPath:@"name"];
    uint64_t v7 = *(void *)(a1 + 48);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10006AA68();
    }
    uint64_t v6 = sub_100007388(101, @"FetchBudgetError", @"SeeSystemLog", v8, v9, v10, v11, v12, @"clientIdentifier");
    uint64_t v7 = *(void *)(a1 + 40);
  }
  uint64_t v13 = *(void *)(v7 + 8);
  uint64_t v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v6;
}

void sub_10000EFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_10000F014(uint64_t a1)
{
  id v2 = +[USDeviceActivityBudget fetchRequest];
  [v2 setReturnsObjectsAsFaults:0];
  id v3 = +[NSPredicate predicateWithFormat:@"(%K == %@) && (%K == %@)"];
  [v2 setPredicate:v3];

  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v4 + 40);
  id v5 = [v2 execute:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v6 = [v5 firstObject];
  if (v6)
  {
    id v7 = objc_alloc((Class)USDeviceActivitySchedule);
    uint64_t v8 = [v6 intervalStart];
    uint64_t v9 = [v6 intervalEnd];
    id v10 = [v6 repeats];
    uint64_t v11 = [v6 warningTime];
    id v12 = [v7 initWithIntervalStart:v8 intervalEnd:v9 repeats:v10 warningTime:v11];
    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;
  }
  else
  {
    if (v5) {
      goto LABEL_5;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10006AA68();
    }
    uint64_t v20 = sub_100007388(101, @"FetchBudgetError", @"SeeSystemLog", v15, v16, v17, v18, v19, @"clientIdentifier");
    uint64_t v21 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v8 = *(void **)(v21 + 40);
    *(void *)(v21 + 40) = v20;
  }

LABEL_5:
}

void sub_10000F670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_10000F69C(uint64_t a1)
{
  CFStringRef v126 = @"events";
  id v2 = +[NSArray arrayWithObjects:&v126 count:1];
  id v3 = +[USDeviceActivityBudget fetchRequest];
  [v3 setReturnsObjectsAsFaults:0];
  if (v2) {
    [v3 setRelationshipKeyPathsForPrefetching:v2];
  }

  uint64_t v4 = +[NSPredicate predicateWithFormat:@"(%K == %@) && (%K == %@)"];
  [v3 setPredicate:v4];

  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v5 + 40);
  uint64_t v6 = [v3 execute:&obj];
  id v7 = (id *)(v5 + 40);
  uint64_t v8 = (void *)v6;
  objc_storeStrong(v7, obj);
  uint64_t v80 = v3;
  if (v8)
  {
    uint64_t v9 = objc_opt_new();
    uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    id v12 = objc_opt_new();
    long long v114 = 0u;
    long long v115 = 0u;
    long long v116 = 0u;
    long long v117 = 0u;
    id v79 = v8;
    uint64_t v13 = [v8 firstObject];
    uint64_t v14 = [v13 events];

    id v81 = v14;
    id v84 = [v14 countByEnumeratingWithState:&v114 objects:v125 count:16];
    if (v84)
    {
      uint64_t v82 = *(void *)v115;
      uint64_t v83 = a1;
      uint64_t v15 = &swift_weakDestroy_ptr;
      do
      {
        uint64_t v16 = 0;
        do
        {
          if (*(void *)v115 != v82) {
            objc_enumerationMutation(v81);
          }
          uint64_t v88 = v16;
          uint64_t v17 = *(void **)(*((void *)&v114 + 1) + 8 * v16);
          uint64_t v18 = [v17 budgetedApplications];
          uint64_t v19 = [v17 budgetedCategories];
          uint64_t v20 = [v17 budgetedWebDomains];
          id v86 = v17;
          LODWORD(v17) = [v17 isUntokenized];
          id v21 = objc_msgSend(objc_alloc((Class)v15[195]), "initWithCapacity:", objc_msgSend(v18, "count"));
          id v87 = v18;
          long long v89 = v20;
          if (v17)
          {
            long long v112 = 0u;
            long long v113 = 0u;
            long long v110 = 0u;
            long long v111 = 0u;
            id v22 = v18;
            id v23 = [v22 countByEnumeratingWithState:&v110 objects:v124 count:16];
            if (v23)
            {
              id v24 = v23;
              uint64_t v25 = *(void *)v111;
              do
              {
                for (i = 0; i != v24; i = (char *)i + 1)
                {
                  if (*(void *)v111 != v25) {
                    objc_enumerationMutation(v22);
                  }
                  id v27 = [*(id *)(*((void *)&v110 + 1) + 8 * i) bundleIdentifier];
                  [v21 addObject:v27];
                }
                id v24 = [v22 countByEnumeratingWithState:&v110 objects:v124 count:16];
              }
              while (v24);
            }

            id v28 = objc_msgSend(objc_alloc((Class)v15[195]), "initWithCapacity:", objc_msgSend(v19, "count"));
            long long v106 = 0u;
            long long v107 = 0u;
            long long v108 = 0u;
            long long v109 = 0u;
            id v29 = v19;
            id v30 = v19;
            id v31 = [v30 countByEnumeratingWithState:&v106 objects:v123 count:16];
            if (v31)
            {
              id v32 = v31;
              uint64_t v33 = *(void *)v107;
              do
              {
                for (j = 0; j != v32; j = (char *)j + 1)
                {
                  if (*(void *)v107 != v33) {
                    objc_enumerationMutation(v30);
                  }
                  long long v35 = [*(id *)(*((void *)&v106 + 1) + 8 * (void)j) categoryIdentifier];
                  [v28 addObject:v35];
                }
                id v32 = [v30 countByEnumeratingWithState:&v106 objects:v123 count:16];
              }
              while (v32);
            }

            id v36 = objc_msgSend(objc_alloc((Class)v15[195]), "initWithCapacity:", objc_msgSend(v89, "count"));
            long long v102 = 0u;
            long long v103 = 0u;
            long long v104 = 0u;
            long long v105 = 0u;
            id v37 = v89;
            id v38 = [v37 countByEnumeratingWithState:&v102 objects:v122 count:16];
            if (v38)
            {
              id v39 = v38;
              uint64_t v40 = *(void *)v103;
              do
              {
                for (k = 0; k != v39; k = (char *)k + 1)
                {
                  if (*(void *)v103 != v40) {
                    objc_enumerationMutation(v37);
                  }
                  long long v42 = [*(id *)(*((void *)&v102 + 1) + 8 * (void)k) webDomain];
                  [v36 addObject:v42];
                }
                id v39 = [v37 countByEnumeratingWithState:&v102 objects:v122 count:16];
              }
              while (v39);
            }

            id v43 = objc_alloc((Class)USDeviceActivityEvent);
            uint64_t v44 = v86;
            uint64_t v45 = [v86 threshold];
            id v46 = objc_msgSend(v43, "initWithBundleIdentifiers:categoryIdentifiers:webDomains:threshold:includesPastActivity:", v21, v28, v36, v45, objc_msgSend(v86, "includesPastActivity"));
            uint64_t v47 = v83;
          }
          else
          {
            id v85 = v19;
            long long v100 = 0u;
            long long v101 = 0u;
            long long v98 = 0u;
            long long v99 = 0u;
            id v48 = v18;
            id v49 = [v48 countByEnumeratingWithState:&v98 objects:v121 count:16];
            if (v49)
            {
              id v50 = v49;
              uint64_t v51 = *(void *)v99;
              do
              {
                for (m = 0; m != v50; m = (char *)m + 1)
                {
                  if (*(void *)v99 != v51) {
                    objc_enumerationMutation(v48);
                  }
                  long long v53 = [*(id *)(*((void *)&v98 + 1) + 8 * (void)m) bundleIdentifier];
                  double v54 = [v12 encodeApplication:v53];

                  if (v54) {
                    [v21 addObject:v54];
                  }
                }
                id v50 = [v48 countByEnumeratingWithState:&v98 objects:v121 count:16];
              }
              while (v50);
            }

            id v28 = objc_msgSend(objc_alloc((Class)v15[195]), "initWithCapacity:", objc_msgSend(v85, "count"));
            long long v94 = 0u;
            long long v95 = 0u;
            long long v96 = 0u;
            long long v97 = 0u;
            id v55 = v85;
            id v56 = [v55 countByEnumeratingWithState:&v94 objects:v120 count:16];
            if (v56)
            {
              id v57 = v56;
              uint64_t v58 = *(void *)v95;
              do
              {
                for (n = 0; n != v57; n = (char *)n + 1)
                {
                  if (*(void *)v95 != v58) {
                    objc_enumerationMutation(v55);
                  }
                  uint64_t v60 = [*(id *)(*((void *)&v94 + 1) + 8 * (void)n) categoryIdentifier];
                  uint64_t v61 = [v12 encodeCategory:v60];

                  if (v61) {
                    [v28 addObject:v61];
                  }
                }
                id v57 = [v55 countByEnumeratingWithState:&v94 objects:v120 count:16];
              }
              while (v57);
            }

            id v36 = objc_msgSend(objc_alloc((Class)NSMutableSet), "initWithCapacity:", objc_msgSend(v20, "count"));
            long long v90 = 0u;
            long long v91 = 0u;
            long long v92 = 0u;
            long long v93 = 0u;
            id v62 = v20;
            id v63 = [v62 countByEnumeratingWithState:&v90 objects:v119 count:16];
            if (v63)
            {
              id v64 = v63;
              uint64_t v65 = *(void *)v91;
              do
              {
                for (ii = 0; ii != v64; ii = (char *)ii + 1)
                {
                  if (*(void *)v91 != v65) {
                    objc_enumerationMutation(v62);
                  }
                  uint64_t v67 = [*(id *)(*((void *)&v90 + 1) + 8 * (void)ii) webDomain];
                  CFStringRef v68 = [v12 encodeWebDomain:v67];

                  if (v68) {
                    [v36 addObject:v68];
                  }
                }
                id v64 = [v62 countByEnumeratingWithState:&v90 objects:v119 count:16];
              }
              while (v64);
            }

            id v69 = objc_alloc((Class)USDeviceActivityEvent);
            uint64_t v44 = v86;
            uint64_t v45 = [v86 threshold];
            id v46 = objc_msgSend(v69, "initWithApplicationTokens:categoryTokens:webDomainTokens:threshold:includesPastActivity:", v21, v28, v36, v45, objc_msgSend(v86, "includesPastActivity"));
            uint64_t v47 = v83;
            id v29 = v85;
          }

          uint64_t v70 = *(void **)(*(void *)(*(void *)(v47 + 56) + 8) + 40);
          uint64_t v71 = [v44 name];
          [v70 setObject:v46 forKeyedSubscript:v71];

          uint64_t v16 = v88 + 1;
          uint64_t v15 = &swift_weakDestroy_ptr;
        }
        while ((id)(v88 + 1) != v84);
        id v84 = [v81 countByEnumeratingWithState:&v114 objects:v125 count:16];
      }
      while (v84);
    }

    uint64_t v8 = v79;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10006AA68();
    }
    uint64_t v77 = sub_100007388(101, @"FetchBudgetError", @"SeeSystemLog", v72, v73, v74, v75, v76, @"clientIdentifier");
    uint64_t v78 = *(void *)(*(void *)(a1 + 48) + 8);
    id v12 = *(void **)(v78 + 40);
    *(void *)(v78 + 40) = v77;
  }
}

void sub_1000100F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001010C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) persistentStoreCoordinator];
  id v3 = [v2 managedObjectIDForURIRepresentation:*(void *)(a1 + 40)];

  if (v3)
  {
    uint64_t v4 = *(void **)(a1 + 48);
    id v10 = 0;
    uint64_t v5 = [v4 existingObjectWithID:v3 error:&v10];
    id v6 = v10;
    uint64_t v7 = [v5 clientIdentifier];
    uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT))
  {
    sub_10006AAD8();
  }
}

void sub_100010314(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) persistentStoreCoordinator];
  id v3 = [v2 managedObjectIDForURIRepresentation:*(void *)(a1 + 40)];

  if (v3)
  {
    uint64_t v4 = *(void **)(a1 + 48);
    id v11 = 0;
    uint64_t v5 = [v4 existingObjectWithID:v3 error:&v11];
    id v6 = v11;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT)) {
      sub_10006AAD8();
    }
    id v6 = 0;
    uint64_t v5 = 0;
  }
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 56) + 16))())
  {
    uint64_t v7 = *(void **)(a1 + 48);
    id v10 = v6;
    unsigned __int8 v8 = [v7 save:&v10];
    id v9 = v10;

    if ((v8 & 1) == 0 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10006AB58();
    }
  }
  else
  {
    id v9 = v6;
  }
}

void sub_100010514(uint64_t a1)
{
  CFStringRef v11 = @"events";
  id v2 = +[NSArray arrayWithObjects:&v11 count:1];
  id v3 = +[USDeviceActivityBudget fetchRequest];
  [v3 setReturnsObjectsAsFaults:0];
  if (v2) {
    [v3 setRelationshipKeyPathsForPrefetching:v2];
  }

  id v10 = 0;
  uint64_t v4 = [v3 execute:&v10];
  id v5 = v10;
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 40) + 16))())
  {
    id v6 = *(void **)(a1 + 32);
    id v9 = v5;
    unsigned __int8 v7 = [v6 save:&v9];
    id v8 = v9;

    if ((v7 & 1) == 0 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10006ABD0();
    }
  }
  else
  {
    id v8 = v5;
  }
}

void sub_100010784(void *a1)
{
  CFStringRef v46 = @"events";
  id v2 = +[NSArray arrayWithObjects:&v46 count:1];
  id v3 = +[USDeviceActivityBudget fetchRequest];
  [v3 setReturnsObjectsAsFaults:0];
  if (v2) {
    [v3 setRelationshipKeyPathsForPrefetching:v2];
  }

  id v41 = 0;
  uint64_t v4 = [v3 execute:&v41];
  id v5 = v41;
  id v6 = v5;
  if (v4)
  {
    id v30 = v5;
    id v31 = v4;
    id v32 = a1;
    uint64_t v33 = v3;
    unsigned __int8 v7 = (void *)a1[4];
    id v8 = (void *)a1[5];
    id v9 = v4;
    id v10 = v7;
    id v35 = v8;
    id v11 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v9, "count"));
    long long v42 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    id obj = v9;
    id v12 = [obj countByEnumeratingWithState:&v42 objects:v47 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v36 = *(void *)v43;
      do
      {
        for (i = 0; i != v13; i = (char *)i + 1)
        {
          if (*(void *)v43 != v36) {
            objc_enumerationMutation(obj);
          }
          uint64_t v15 = *(void **)(*((void *)&v42 + 1) + 8 * i);
          if (v10)
          {
            uint64_t v16 = [*(id *)(*((void *)&v42 + 1) + 8 * i) clientIdentifier];
            unsigned __int8 v17 = [v10 containsObject:v16];

            if (v17) {
              continue;
            }
          }
          uint64_t v18 = [USDeviceActivityBudgetMetadata alloc];
          uint64_t v19 = [v15 name];
          uint64_t v20 = [v15 objectID];
          id v21 = [v15 clientIdentifier];
          [v15 extensionIdentifier];
          v23 = id v22 = v11;
          id v24 = -[USDeviceActivityBudgetMetadata initWithActivity:budgetID:clientIdentifier:extensionIdentifier:intervalDidStart:](v18, "initWithActivity:budgetID:clientIdentifier:extensionIdentifier:intervalDidStart:", v19, v20, v21, v23, [v15 intervalDidStart]);

          id v11 = v22;
          [v22 addObject:v24];
          [v35 deleteObject:v15];
        }
        id v13 = [obj countByEnumeratingWithState:&v42 objects:v47 count:16];
      }
      while (v13);
    }

    uint64_t v25 = (void *)v32[5];
    id v40 = v30;
    unsigned int v26 = [v25 save:&v40];
    id v6 = v40;

    (*(void (**)(void))(v32[7] + 16))();
    if (v26)
    {
      id v27 = [(id)v32[6] notificationPostingQueue];
      v37[0] = _NSConcreteStackBlock;
      v37[1] = 3221225472;
      v37[2] = sub_100010B3C;
      v37[3] = &unk_10008A198;
      id v28 = v11;
      uint64_t v29 = v32[6];
      id v38 = v28;
      uint64_t v39 = v29;
      [v27 addOperationWithBlock:v37];
    }
    id v3 = v33;
    uint64_t v4 = v31;
  }
  else
  {
    (*(void (**)(void))(a1[7] + 16))();
  }
}

void sub_100010B3C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CFStringRef v5 = @"BudgetMetadata";
  uint64_t v6 = v2;
  id v3 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
  uint64_t v4 = +[NSNotificationCenter defaultCenter];
  [v4 postNotificationName:@"DeviceActivityBudgetsWereRemoved" object:*(void *)(a1 + 40) userInfo:v3];
}

void sub_100010C60(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v10 = [[USDailyLimit alloc] initWithContext:*(void *)(a1 + 32)];
  id v7 = [v6 integerValue];

  [(USDailyLimit *)v10 setWeekday:v7];
  [v5 doubleValue];
  double v9 = v8;

  [(USDailyLimit *)v10 setTimeLimit:v9];
  [*(id *)(a1 + 40) addScheduleObject:v10];
}

void sub_100010D20(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 integerValue];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v7 = *(id *)(a1 + 32);
  id v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v15;
LABEL_3:
    uint64_t v11 = 0;
    while (1)
    {
      if (*(void *)v15 != v10) {
        objc_enumerationMutation(v7);
      }
      id v12 = *(void **)(*((void *)&v14 + 1) + 8 * v11);
      if (objc_msgSend(v12, "weekday", (void)v14) == v6) {
        break;
      }
      if (v9 == (id)++v11)
      {
        id v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
        if (v9) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
    id v13 = v12;

    if (v13) {
      goto LABEL_12;
    }
  }
  else
  {
LABEL_9:
  }
  id v13 = [[USDailyLimit alloc] initWithContext:*(void *)(a1 + 40)];
  [(USDailyLimit *)v13 setWeekday:v6];
  [*(id *)(a1 + 48) addScheduleObject:v13];
LABEL_12:
  objc_msgSend(v5, "doubleValue", (void)v14);
  -[USDailyLimit setTimeLimit:](v13, "setTimeLimit:");
}

void sub_100010E9C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v39 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = [[USRegisteredDeviceActivityEvent alloc] initWithContext:v7];
  id v41 = v5;
  [(USRegisteredDeviceActivityEvent *)v8 setName:v5];
  id v9 = [v6 threshold];
  [(USRegisteredDeviceActivityEvent *)v8 setThreshold:v9];

  -[USRegisteredDeviceActivityEvent setIncludesPastActivity:](v8, "setIncludesPastActivity:", [v6 includesPastActivity]);
  id v40 = v6;
  if ([v6 isUntokenized])
  {
    [(USRegisteredDeviceActivityEvent *)v8 setIsUntokenized:1];
    uint64_t v10 = [v6 bundleIdentifiers];
    uint64_t v11 = [v6 categoryIdentifiers];
    id v37 = [v6 webDomains];
  }
  else
  {
    [(USRegisteredDeviceActivityEvent *)v8 setIsUntokenized:0];
    id v12 = objc_opt_new();
    id v13 = [v6 applicationTokens];
    uint64_t v10 = [v12 decodeApplications:v13];

    long long v14 = [v6 categoryTokens];
    uint64_t v11 = [v12 decodeCategories:v14];

    long long v15 = [v6 webDomainTokens];
    id v37 = [v12 decodeWebDomains:v15];
  }
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  id v16 = v11;
  id v17 = [v16 countByEnumeratingWithState:&v50 objects:v56 count:16];
  if (v17)
  {
    id v18 = v17;
    uint64_t v19 = *(void *)v51;
    do
    {
      uint64_t v20 = 0;
      do
      {
        if (*(void *)v51 != v19) {
          objc_enumerationMutation(v16);
        }
        uint64_t v21 = *(void *)(*((void *)&v50 + 1) + 8 * (void)v20);
        id v22 = [[USBudgetedCategory alloc] initWithContext:v7];
        [(USBudgetedCategory *)v22 setCategoryIdentifier:v21];
        [(USRegisteredDeviceActivityEvent *)v8 addBudgetedCategoriesObject:v22];

        uint64_t v20 = (char *)v20 + 1;
      }
      while (v18 != v20);
      id v18 = [v16 countByEnumeratingWithState:&v50 objects:v56 count:16];
    }
    while (v18);
  }

  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  id v23 = v10;
  id v24 = [v23 countByEnumeratingWithState:&v46 objects:v55 count:16];
  if (v24)
  {
    id v25 = v24;
    uint64_t v26 = *(void *)v47;
    do
    {
      id v27 = 0;
      do
      {
        if (*(void *)v47 != v26) {
          objc_enumerationMutation(v23);
        }
        uint64_t v28 = *(void *)(*((void *)&v46 + 1) + 8 * (void)v27);
        uint64_t v29 = [[USBudgetedApplication alloc] initWithContext:v7];
        [(USBudgetedApplication *)v29 setBundleIdentifier:v28];
        [(USRegisteredDeviceActivityEvent *)v8 addBudgetedApplicationsObject:v29];

        id v27 = (char *)v27 + 1;
      }
      while (v25 != v27);
      id v25 = [v23 countByEnumeratingWithState:&v46 objects:v55 count:16];
    }
    while (v25);
  }
  id v38 = v16;

  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  id v30 = v37;
  id v31 = [v30 countByEnumeratingWithState:&v42 objects:v54 count:16];
  if (v31)
  {
    id v32 = v31;
    uint64_t v33 = *(void *)v43;
    do
    {
      long long v34 = 0;
      do
      {
        if (*(void *)v43 != v33) {
          objc_enumerationMutation(v30);
        }
        uint64_t v35 = *(void *)(*((void *)&v42 + 1) + 8 * (void)v34);
        uint64_t v36 = [[USBudgetedWebDomain alloc] initWithContext:v7];
        [(USBudgetedWebDomain *)v36 setWebDomain:v35];
        [(USRegisteredDeviceActivityEvent *)v8 addBudgetedWebDomainsObject:v36];

        long long v34 = (char *)v34 + 1;
      }
      while (v32 != v34);
      id v32 = [v30 countByEnumeratingWithState:&v42 objects:v54 count:16];
    }
    while (v32);
  }

  [v39 addEventsObject:v8];
}

void sub_1000112D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (([*(id *)(a1 + 32) containsObject:v5] & 1) == 0)
  {
    id v7 = *(void **)(a1 + 48);
    long long v44 = *(void **)(a1 + 40);
    id v46 = v5;
    id v8 = v5;
    id v9 = v6;
    id v10 = v7;
    uint64_t v11 = [[USRegisteredDeviceActivityEvent alloc] initWithContext:v10];
    long long v43 = v8;
    [(USRegisteredDeviceActivityEvent *)v11 setName:v8];
    id v12 = [v9 threshold];
    [(USRegisteredDeviceActivityEvent *)v11 setThreshold:v12];

    -[USRegisteredDeviceActivityEvent setIncludesPastActivity:](v11, "setIncludesPastActivity:", [v9 includesPastActivity]);
    id v45 = v6;
    long long v42 = v9;
    if ([v9 isUntokenized])
    {
      [(USRegisteredDeviceActivityEvent *)v11 setIsUntokenized:1];
      id v13 = [v9 bundleIdentifiers];
      long long v14 = [v9 categoryIdentifiers];
      id v40 = [v9 webDomains];
    }
    else
    {
      [(USRegisteredDeviceActivityEvent *)v11 setIsUntokenized:0];
      long long v15 = objc_opt_new();
      id v16 = [v9 applicationTokens];
      id v13 = [v15 decodeApplications:v16];

      id v17 = [v9 categoryTokens];
      long long v14 = [v15 decodeCategories:v17];

      id v18 = [v9 webDomainTokens];
      id v40 = [v15 decodeWebDomains:v18];
    }
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    id v19 = v14;
    id v20 = [v19 countByEnumeratingWithState:&v55 objects:v61 count:16];
    if (v20)
    {
      id v21 = v20;
      uint64_t v22 = *(void *)v56;
      do
      {
        id v23 = 0;
        do
        {
          if (*(void *)v56 != v22) {
            objc_enumerationMutation(v19);
          }
          uint64_t v24 = *(void *)(*((void *)&v55 + 1) + 8 * (void)v23);
          id v25 = [[USBudgetedCategory alloc] initWithContext:v10];
          [(USBudgetedCategory *)v25 setCategoryIdentifier:v24];
          [(USRegisteredDeviceActivityEvent *)v11 addBudgetedCategoriesObject:v25];

          id v23 = (char *)v23 + 1;
        }
        while (v21 != v23);
        id v21 = [v19 countByEnumeratingWithState:&v55 objects:v61 count:16];
      }
      while (v21);
    }

    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    id v26 = v13;
    id v27 = [v26 countByEnumeratingWithState:&v51 objects:v60 count:16];
    if (v27)
    {
      id v28 = v27;
      uint64_t v29 = *(void *)v52;
      do
      {
        id v30 = 0;
        do
        {
          if (*(void *)v52 != v29) {
            objc_enumerationMutation(v26);
          }
          uint64_t v31 = *(void *)(*((void *)&v51 + 1) + 8 * (void)v30);
          id v32 = [[USBudgetedApplication alloc] initWithContext:v10];
          [(USBudgetedApplication *)v32 setBundleIdentifier:v31];
          [(USRegisteredDeviceActivityEvent *)v11 addBudgetedApplicationsObject:v32];

          id v30 = (char *)v30 + 1;
        }
        while (v28 != v30);
        id v28 = [v26 countByEnumeratingWithState:&v51 objects:v60 count:16];
      }
      while (v28);
    }
    id v41 = v19;

    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    id v33 = v40;
    id v34 = [v33 countByEnumeratingWithState:&v47 objects:v59 count:16];
    if (v34)
    {
      id v35 = v34;
      uint64_t v36 = *(void *)v48;
      do
      {
        id v37 = 0;
        do
        {
          if (*(void *)v48 != v36) {
            objc_enumerationMutation(v33);
          }
          uint64_t v38 = *(void *)(*((void *)&v47 + 1) + 8 * (void)v37);
          uint64_t v39 = [[USBudgetedWebDomain alloc] initWithContext:v10];
          [(USBudgetedWebDomain *)v39 setWebDomain:v38];
          [(USRegisteredDeviceActivityEvent *)v11 addBudgetedWebDomainsObject:v39];

          id v37 = (char *)v37 + 1;
        }
        while (v35 != v37);
        id v35 = [v33 countByEnumeratingWithState:&v47 objects:v59 count:16];
      }
      while (v35);
    }

    [v44 addEventsObject:v11];
    id v6 = v45;
    id v5 = v46;
  }
}

void sub_100011734(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_100011768(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_100011790(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_1000117AC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1000117EC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

void sub_100011814(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void sub_10001182C(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

uint64_t sub_100011838(uint64_t result, uint64_t a2, float a3)
{
  *(float *)result = a3;
  *(void *)(result + 4) = a2;
  return result;
}

void sub_100011898(id a1)
{
  qword_1000961A0 = objc_opt_new();
  _objc_release_x1();
}

void sub_100011A74(id a1)
{
  qword_1000961B0 = objc_opt_new();
  _objc_release_x1();
}

void sub_100011DE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v16 = (id)os_transaction_create();
  string = xpc_dictionary_get_string(v3, _xpc_event_key_name);

  if (!strcmp(string, "com.apple.UsageTrackingAgent.alarm.application"))
  {
    [*(id *)(a1 + 32) _applicationAlarmDidFire];
    goto LABEL_23;
  }
  if (!strcmp(string, "com.apple.UsageTrackingAgent.alarm.web-domain"))
  {
    [*(id *)(a1 + 32) _webDomainAlarmDidFire];
    goto LABEL_23;
  }
  if (!strcmp(string, "com.apple.UsageTrackingAgent.alarm.now-playing"))
  {
    [*(id *)(a1 + 32) _nowPlayingAlarmDidFire];
    goto LABEL_23;
  }
  if (!strcmp(string, "com.apple.UsageTrackingAgent.alarm.video"))
  {
    [*(id *)(a1 + 32) _videoAlarmDidFire];
    goto LABEL_23;
  }
  if (!strncmp(string, "com.apple.UsageTrackingAgent.alarm.budgets-reset-", 0x31uLL))
  {
    id v10 = *(void **)(a1 + 32);
    uint64_t v11 = +[NSString stringWithUTF8String:string];
    [v10 _budgetsResetAlarmDidFire:v11];

    goto LABEL_23;
  }
  if (!strncmp(string, "com.apple.UsageTrackingAgent.alarm.start-warning-", 0x31uLL))
  {
    id v12 = *(void **)(a1 + 32);
    id v13 = string;
    uint64_t v14 = 1;
  }
  else
  {
    if (strncmp(string, "com.apple.UsageTrackingAgent.alarm.start-", 0x29uLL))
    {
      if (!strncmp(string, "com.apple.UsageTrackingAgent.end-warning-", 0x29uLL))
      {
        id v12 = *(void **)(a1 + 32);
        id v13 = string;
        uint64_t v14 = 1;
      }
      else
      {
        if (strncmp(string, "com.apple.UsageTrackingAgent.alarm.end-", 0x27uLL))
        {
          uint64_t v5 = +[NSAssertionHandler currentHandler];
          uint64_t v8 = a1 + 32;
          uint64_t v6 = *(void *)(a1 + 32);
          uint64_t v7 = *(void *)(v8 + 8);
          uint64_t v9 = +[NSString stringWithUTF8String:string];
          [v5 handleFailureInMethod:v7, v6, @"USBudgetTracker.m", 220, @"Unknown event name: %@", v9 object file lineNumber description];

          goto LABEL_23;
        }
        id v12 = *(void **)(a1 + 32);
        id v13 = string;
        uint64_t v14 = 0;
      }
      uint64_t v15 = 1;
      goto LABEL_22;
    }
    id v12 = *(void **)(a1 + 32);
    id v13 = string;
    uint64_t v14 = 0;
  }
  uint64_t v15 = 0;
LABEL_22:
  [v12 _budgetIntervalAlarmDidFire:v13 isWarning:v14 isEndOfInterval:v15];
LABEL_23:
}

void sub_100012034(uint64_t a1, xpc_object_t xdict)
{
  string = xpc_dictionary_get_string(xdict, _xpc_event_key_name);
  if (!strcmp(string, "com.apple.UsageTrackingAgent.distributed-notification.duet-sync-coordinator-did-idle"))
  {
    uint64_t v9 = *(void **)(a1 + 32);
    _[v9 _duetSyncCoordinatorDidIdle];
  }
  else if (!strcmp(string, "com.apple.UsageTrackingAgent.distributed-notification.duet-application-usage-did-tombstone")|| !strcmp(string, "com.apple.UsageTrackingAgent.distributed-notification.duet-web-domain-usage-did-tombstone")|| !strcmp(string, "com.apple.UsageTrackingAgent.distributed-notification.duet-now-playing-usage-did-tombstone")|| !strcmp(string, "com.apple.UsageTrackingAgent.distributed-notification.duet-video-usage-did-tombstone"))
  {
    uint64_t v8 = *(void **)(a1 + 32);
    _objc_msgSend(v8, "_tombstoneEventDidFire:");
  }
  else
  {
    id v10 = +[NSAssertionHandler currentHandler];
    uint64_t v6 = a1 + 32;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(v6 + 8);
    uint64_t v7 = +[NSString stringWithUTF8String:string];
    [v10 handleFailureInMethod:v5, v4, @"USBudgetTracker.m", 237, @"Unknown event name: %@", v7 object file lineNumber description];
  }
}

void sub_1000121A4(uint64_t a1, xpc_object_t xdict)
{
  string = xpc_dictionary_get_string(xdict, _xpc_event_key_name);
  if (strcmp(string, "SignificantTimeChangeNotification"))
  {
    if (!strcmp(string, "com.apple.mobile.keybagd.first_unlock"))
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Received first-unlock notification; registering for usage and handling missed significant time change.",
          v8,
          2u);
      }
      [*(id *)(a1 + 32) _registerForAllUsage];
      [*(id *)(a1 + 32) _systemTimeDidChange];
      xpc_set_event();
    }
    return;
  }
  int v4 = MKBUserUnlockedSinceBoot();
  int v5 = v4;
  if (v4 < 0)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10006AC48(v5);
    }
  }
  else if (v4 == 1)
  {
    uint64_t v6 = *(void **)(a1 + 32);
    [v6 _systemTimeDidChange];
    return;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Received significant time change notification prior to first-unlock. Pending all work until after the device is unlocked.", buf, 2u);
  }
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v7, "Notification", "com.apple.mobile.keybagd.first_unlock");
  xpc_set_event();
}

void sub_100012354(id a1, NSString *a2, NSSet *a3)
{
  id v3 = a3;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v4 = [(NSSet *)v3 countByEnumeratingWithState:&v14 objects:v20 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v15;
    uint64_t v7 = MOEffectiveSettingsGroupDeviceActivity;
    id v12 = &v19;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        if (objc_msgSend(*(id *)(*((void *)&v14 + 1) + 8 * (void)v8), "isEqualToString:", v7, v12))
        {
          uint64_t v9 = +[USDeviceActivityAuthorization authorizedClientIdentifiers];
          if (_os_feature_enabled_impl())
          {
            if ([v9 count])
            {
              if (!+[USDeviceActivityAuthorization sharingEnabled])
              {
                id v13 = 0;
                +[SyncCoordinator deleteLocalDataAndReturnError:&v13];
                id v10 = v13;
                if (v10 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  sub_10006ACC8(buf, (uint64_t)v10, v12);
                }
              }
              +[DeviceActivityCollector collectLocalActivityWithOptions:1 shouldSync:1 completionHandler:&stru_10008A350];
            }
            else
            {
              +[DeviceActivityCollector deleteLocalActivityWithCompletionHandler:&stru_10008A370];
            }
            +[SyncCoordinator resetSharingPermissions];
          }
          uint64_t v11 = +[USBudgetRegistration sharedRegistration];
          [v11 removeDeviceActivityBudgetsNotMatchingClients:v9 completionHandler:&stru_10008A3B0];
        }
        uint64_t v8 = (char *)v8 + 1;
      }
      while (v5 != v8);
      id v5 = [(NSSet *)v3 countByEnumeratingWithState:&v14 objects:v20 count:16];
    }
    while (v5);
  }
}

void sub_100012574(id a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Finished refreshing local device activity due to effective settings change.", v1, 2u);
  }
}

void sub_1000125D0(id a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Finished deleting local activity because there are no more allowed clients.", v1, 2u);
  }
}

void sub_10001262C(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10006AD14();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Successfully removed all Device Activity budgets because Device Activity is no longer authorized", v3, 2u);
  }
}

void sub_1000126C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Resetting all Device Activity alarms.", v4, 2u);
  }
  [*(id *)(a1 + 32) _resetDeviceActivityAlarms];
  v3[2](v3, 1);
}

id sub_1000128C4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _deviceActivityBudgetWasAddedOrUpdated:*(void *)(a1 + 40) didCollectLocalActivity:1];
}

void sub_100012A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100012A74(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [v5 events];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v7 count] != 0;

  if (v5)
  {
    uint64_t v8 = *(void **)(a1 + 32);
    id v15 = v5;
    uint64_t v9 = +[NSArray arrayWithObjects:&v15 count:1];
    id v10 = [v8 _setAlarmsOrNotifyExtensionsForDeviceActivityBudgets:v9 notifyForIntervalEnd:*(unsigned char *)(a1 + 56) == 0 isEndOfInterval:*(unsigned char *)(a1 + 56) == 0 includePastActivityIfNeeded:1];

    if (*(unsigned char *)(a1 + 56)
      && *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)
      && [v5 intervalDidStart])
    {
      uint64_t v11 = *(void **)(a1 + 32);
      id v12 = [v5 events];
      id v13 = [v12 allObjects];
      id v10 = (id)(v10 | [v11 _notifyForBudgets:&__NSArray0__struct events:v13 nextNotificationEventName:0 syncForImpendingBudgets:0]);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10006AD84();
    }
    id v10 = 0;
  }

  return v10;
}

id sub_100013050(uint64_t a1)
{
  [*(id *)(a1 + 32) _subscribeForApplicationUsage];
  [*(id *)(a1 + 32) _subscribeForWebDomainUsage];
  [*(id *)(a1 + 32) _subscribeForNowPlayingUsage];
  uint64_t v2 = *(void **)(a1 + 32);
  return _[v2 _subscribeForVideoUsage];
}

id sub_10001382C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _completion:a2 streamIdentifier:BMScreenTimeAppUsageIdentifier];
}

id sub_100013844(uint64_t a1)
{
  return [*(id *)(a1 + 32) _applicationRegistrationDidFire];
}

id sub_100013BDC(uint64_t a1, void *a2)
{
  if (([a2 isEqualToString:@"com.apple.UsageTrackingAgent.registration.application"] & 1) == 0)
  {
    id v5 = +[NSAssertionHandler currentHandler];
    [v5 handleFailureInMethod:*(void *)(a1 + 40), *(void *)(a1 + 32), @"USBudgetTracker.m", 555, @"Invalid parameter not satisfying: %@", @"[registrationIdentifier isEqualToString:RegistrationIdentifierApplication]" object file lineNumber description];
  }
  id v3 = *(void **)(a1 + 32);
  return [v3 _applicationRegistrationDidFire];
}

id sub_10001420C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _completion:a2 streamIdentifier:BMAppWebUsageIdentifier];
}

id sub_100014224(uint64_t a1)
{
  return [*(id *)(a1 + 32) _webDomainRegistrationDidFire];
}

id sub_1000145BC(uint64_t a1, void *a2)
{
  if (([a2 isEqualToString:@"com.apple.UsageTrackingAgent.registration.web-domain"] & 1) == 0)
  {
    id v5 = +[NSAssertionHandler currentHandler];
    [v5 handleFailureInMethod:*(void *)(a1 + 40), *(void *)(a1 + 32), @"USBudgetTracker.m", 670, @"Invalid parameter not satisfying: %@", @"[registrationIdentifier isEqualToString:RegistrationIdentifierWebDomain]" object file lineNumber description];
  }
  id v3 = *(void **)(a1 + 32);
  return [v3 _webDomainRegistrationDidFire];
}

id sub_100014914(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _completion:a2 streamIdentifier:BMMediaNowPlayingIdentifier];
}

id sub_10001492C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _nowPlayingRegistrationDidFire];
}

id sub_100014C5C(uint64_t a1, void *a2)
{
  if (([a2 isEqualToString:@"com.apple.UsageTrackingAgent.registration.now-playing"] & 1) == 0)
  {
    id v5 = +[NSAssertionHandler currentHandler];
    [v5 handleFailureInMethod:*(void *)(a1 + 40), *(void *)(a1 + 32), @"USBudgetTracker.m", 762, @"Invalid parameter not satisfying: %@", @"[registrationIdentifier isEqualToString:RegistrationIdentifierNowPlaying]" object file lineNumber description];
  }
  id v3 = *(void **)(a1 + 32);
  return [v3 _nowPlayingRegistrationDidFire];
}

id sub_10001559C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _completion:a2 streamIdentifier:BMAppMediaUsageIdentifier];
}

id sub_1000155B4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _videoRegistrationDidFire];
}

id sub_100015A0C(uint64_t a1, void *a2)
{
  if (([a2 isEqualToString:@"com.apple.UsageTrackingAgent.registration.video"] & 1) == 0)
  {
    id v5 = +[NSAssertionHandler currentHandler];
    [v5 handleFailureInMethod:*(void *)(a1 + 40), *(void *)(a1 + 32), @"USBudgetTracker.m", 903, @"Invalid parameter not satisfying: %@", @"[registrationIdentifier isEqualToString:RegistrationIdentifierVideo]" object file lineNumber description];
  }
  id v3 = *(void **)(a1 + 32);
  return [v3 _videoRegistrationDidFire];
}

id sub_100017684(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _didCollectLocalActivityForIdleSyncCoordinator];
}

id sub_100017754(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _didCollectLocalActivityForIdleSyncCoordinator];
}

id sub_1000177EC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v7)
  {
    id v10 = [*(id *)(a1 + 32) _notifyForBudgets:v7 events:v8 nextNotificationEventName:0 syncForImpendingBudgets:0];
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10006B594();
    }
    id v10 = 0;
  }

  return v10;
}

void sub_100017A30(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v5)
  {
    id v32 = v6;
    uint64_t v33 = a1;
    uint64_t v36 = objc_opt_new();
    id v8 = objc_opt_new();
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id v34 = v5;
    id obj = v5;
    id v9 = [obj countByEnumeratingWithState:&v41 objects:v50 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v42;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v42 != v11) {
            objc_enumerationMutation(obj);
          }
          id v13 = [*(id *)(*((void *)&v41 + 1) + 8 * i) budget];
          [v8 addObject:v13];
          id v14 = v36;
          id v15 = [v13 darwinNotificationName];
          if ([v14 containsObject:v15])
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 138543362;
              id v46 = v15;
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Already posted darwin notification %{public}@, skipping", buf, 0xCu);
            }
          }
          else
          {
            id v16 = v15;
            uint32_t v17 = notify_post((const char *)[v16 UTF8String]);
            if (v17)
            {
              uint32_t v18 = v17;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 138543618;
                id v46 = v16;
                __int16 v47 = 1024;
                LODWORD(v48) = v18;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Failed to post darwin notification %{public}@: %u", buf, 0x12u);
              }
            }
            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 138543362;
                id v46 = v16;
                _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Posted darwin notification %{public}@", buf, 0xCu);
              }
              [v14 addObject:v16];
            }
          }
        }
        id v10 = [obj countByEnumeratingWithState:&v41 objects:v50 count:16];
      }
      while (v10);
    }

    int v19 = objc_opt_new();
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    id v20 = v8;
    id v21 = [v20 countByEnumeratingWithState:&v37 objects:v49 count:16];
    if (v21)
    {
      id v22 = v21;
      uint64_t v23 = *(void *)v38;
      char v24 = 1;
      do
      {
        for (j = 0; j != v22; j = (char *)j + 1)
        {
          if (*(void *)v38 != v23) {
            objc_enumerationMutation(v20);
          }
          id v26 = *(void **)(*((void *)&v37 + 1) + 8 * (void)j);
          id v27 = [v26 clientIdentifier];
          uint64_t v28 = [v26 identifier];
          uint64_t v29 = (void *)v28;
          if (v24) {
            CFStringRef v30 = @"%@/%@";
          }
          else {
            CFStringRef v30 = @", %@/%@";
          }
          objc_msgSend(v19, "appendFormat:", v30, v27, v28);

          char v24 = 0;
        }
        id v22 = [v20 countByEnumeratingWithState:&v37 objects:v49 count:16];
        char v24 = 0;
      }
      while (v22);
    }

    a1 = v33;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v31 = *(void **)(v33 + 32);
      *(_DWORD *)long long buf = 138543618;
      id v46 = v31;
      __int16 v47 = 2114;
      long long v48 = v19;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Unregistered alarm for today in %{public}@ and reset budgets: %{public}@", buf, 0x16u);
    }

    id v5 = v34;
    id v7 = v32;
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_10006B604();
  }
  [*(id *)(a1 + 40) UTF8String];
  xpc_set_event();
  xpc_set_event();
  xpc_set_event();
  xpc_set_event();
  xpc_set_event();
  [*(id *)(a1 + 48) _checkBudgetStatusForAllCurrentUsage];
}

void sub_10001816C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10001818C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    if (*(unsigned char *)(a1 + 56)) {
      BOOL v7 = *(unsigned char *)(a1 + 57) == 0;
    }
    else {
      BOOL v7 = 0;
    }
    id v9 = *(void **)(a1 + 32);
    id v13 = v5;
    id v10 = +[NSArray arrayWithObjects:&v13 count:1];
    id v8 = [v9 _setAlarmsOrNotifyExtensionsForDeviceActivityBudgets:v10 notifyForIntervalEnd:v7 isEndOfInterval:v7 includePastActivityIfNeeded:0];

    uint64_t v11 = [v5 events];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v11 count] != 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10006B700();
    }
    id v8 = 0;
  }

  return v8;
}

id sub_1000183D0(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Finished refreshing local device activity due to Duet tombstone event.", v3, 2u);
  }
  return [*(id *)(a1 + 32) _clearPostedNotificationsForNoLongerExpiredBudgets];
}

uint64_t sub_1000184D8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v7 = a3;
  id v65 = a4;
  uint64_t v76 = objc_opt_new();
  uint64_t v66 = v6;
  if (v6 && v7)
  {
    id v92 = 0;
    id v64 = objc_opt_new();
    id v8 = [(id)objc_opt_class() _getRemainingTimeForBudgets:v6 referenceDate:v64 error:&v92];
    id v62 = v8;
    id v63 = v92;
    id v69 = v7;
    if (v8)
    {
      long long v90 = 0u;
      long long v91 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      id v9 = v8;
      id v10 = [v9 countByEnumeratingWithState:&v88 objects:v103 count:16];
      if (v10)
      {
        id v11 = v10;
        uint64_t v12 = *(void *)v89;
        uint64_t v67 = *(void *)v89;
        id v68 = v9;
        do
        {
          id v13 = 0;
          id v71 = v11;
          do
          {
            if (*(void *)v89 != v12) {
              objc_enumerationMutation(v9);
            }
            uint64_t v77 = *(void **)(*((void *)&v88 + 1) + 8 * (void)v13);
            id v14 = objc_msgSend(v9, "objectForKey:");
            [v14 doubleValue];
            double v16 = v15;

            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
            {
              uint32_t v17 = [v77 clientIdentifier];
              uint32_t v18 = [v77 identifier];
              *(_DWORD *)long long buf = 138543874;
              id v94 = v17;
              __int16 v95 = 2114;
              long long v96 = v18;
              __int16 v97 = 2048;
              double v98 = v16;
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}@/%{public}@ has %g seconds remaining", buf, 0x20u);
            }
            if (v16 > 0.0)
            {
              uint64_t v72 = v13;
              long long v86 = 0u;
              long long v87 = 0u;
              long long v84 = 0u;
              long long v85 = 0u;
              int v19 = [v77 notificationTimes];
              id v20 = [v19 countByEnumeratingWithState:&v84 objects:v102 count:16];
              if (v20)
              {
                id v21 = v20;
                uint64_t v22 = *(void *)v85;
                do
                {
                  for (i = 0; i != v21; i = (char *)i + 1)
                  {
                    if (*(void *)v85 != v22) {
                      objc_enumerationMutation(v19);
                    }
                    char v24 = *(void **)(*((void *)&v84 + 1) + 8 * i);
                    if ([v24 notificationWasPosted])
                    {
                      [v24 remainingTime];
                      if (v16 > v25)
                      {
                        double v26 = v25;
                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
                        {
                          id v27 = [v77 clientIdentifier];
                          uint64_t v28 = [v77 identifier];
                          *(_DWORD *)long long buf = 138543874;
                          id v94 = v27;
                          __int16 v95 = 2114;
                          long long v96 = v28;
                          __int16 v97 = 2048;
                          double v98 = v26;
                          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}@/%{public}@ cleared posted notification for %g seconds", buf, 0x20u);
                        }
                        id v29 = v77;
                        id v30 = v76;
                        uint64_t v31 = [v29 darwinNotificationName];
                        if ([v30 containsObject:v31])
                        {
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
                          {
                            *(_DWORD *)long long buf = 138543362;
                            id v94 = v31;
                            _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Already posted darwin notification %{public}@, skipping", buf, 0xCu);
                          }
                        }
                        else
                        {
                          id v32 = v31;
                          uint32_t v33 = notify_post((const char *)[v32 UTF8String]);
                          if (v33)
                          {
                            uint32_t v34 = v33;
                            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                            {
                              *(_DWORD *)long long buf = 138543618;
                              id v94 = v32;
                              __int16 v95 = 1024;
                              LODWORD(v96) = v34;
                              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Failed to post darwin notification %{public}@: %u", buf, 0x12u);
                            }
                          }
                          else
                          {
                            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
                            {
                              *(_DWORD *)long long buf = 138543362;
                              id v94 = v32;
                              _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Posted darwin notification %{public}@", buf, 0xCu);
                            }
                            [v30 addObject:v32];
                          }
                        }

                        [v24 setNotificationWasPosted:0];
                      }
                    }
                  }
                  id v21 = [v19 countByEnumeratingWithState:&v84 objects:v102 count:16];
                }
                while (v21);
              }

              id v9 = v68;
              id v7 = v69;
              uint64_t v12 = v67;
              id v11 = v71;
              id v13 = v72;
            }
            id v13 = (char *)v13 + 1;
          }
          while (v13 != v11);
          id v11 = [v9 countByEnumeratingWithState:&v88 objects:v103 count:16];
        }
        while (v11);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_10006B7E4();
    }
    id v83 = 0;
    uint64_t v36 = [(id)objc_opt_class() _getRemainingTimeForEvents:v7 referenceDate:v64 error:&v83];
    id v37 = v83;
    long long v38 = v37;
    if (v36)
    {
      id v73 = v37;
      uint64_t v74 = v36;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      id v39 = v36;
      id v40 = [v39 countByEnumeratingWithState:&v79 objects:v101 count:16];
      if (v40)
      {
        id v41 = v40;
        int v42 = 0;
        uint64_t v43 = *(void *)v80;
        long long v44 = &_os_log_default;
        uint64_t v75 = *(void *)v80;
        do
        {
          id v45 = 0;
          id v78 = v41;
          do
          {
            if (*(void *)v80 != v43) {
              objc_enumerationMutation(v39);
            }
            id v46 = *(void **)(*((void *)&v79 + 1) + 8 * (void)v45);
            __int16 v47 = [v39 objectForKey:v46];
            [v47 doubleValue];
            double v49 = v48;

            long long v50 = [v46 name];
            long long v51 = [v46 budget];
            long long v52 = [v51 name];
            long long v53 = [v51 clientIdentifier];
            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138544130;
              id v94 = v50;
              __int16 v95 = 2114;
              long long v96 = v52;
              __int16 v97 = 2114;
              double v98 = *(double *)&v53;
              __int16 v99 = 2048;
              double v100 = v49;
              _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "%{public}@/%{public}@/%{public}@ has %g seconds remaining", buf, 0x2Au);
            }
            if (v49 > 0.0)
            {
              long long v54 = *(void **)(a1 + 32);
              [v51 extensionIdentifier];
              id v55 = v39;
              long long v56 = v44;
              v58 = int v57 = v42;
              LODWORD(v54) = [v54 _notifyExtensionThatEventDidUnreachThreshold:v50 activity:v52 clientIdentifier:v53 extensionIdentifier:v58];

              int v42 = v57;
              long long v44 = v56;
              id v39 = v55;
              id v41 = v78;
              BOOL v59 = v54 == 0;
              uint64_t v43 = v75;
              if (!v59) {
                int v42 = 1;
              }
            }

            id v45 = (char *)v45 + 1;
          }
          while (v41 != v45);
          id v41 = [v39 countByEnumeratingWithState:&v79 objects:v101 count:16];
        }
        while (v41);
      }
      else
      {
        LOBYTE(v42) = 0;
      }

      id v7 = v69;
      long long v38 = v73;
      uint64_t v36 = v74;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_10006B774();
      }
      LOBYTE(v42) = 0;
    }

    unsigned int v35 = v42 & 1;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10006B854();
    }
    unsigned int v35 = 0;
  }
  xpc_set_event();
  xpc_set_event();
  xpc_set_event();
  xpc_set_event();
  if ([v76 count]) {
    uint64_t v60 = 1;
  }
  else {
    uint64_t v60 = v35;
  }

  return v60;
}

id sub_100018E50(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _didCollectLocalActivityForDeviceActivityAlarmReset];
}

id sub_100018EE8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = [*(id *)(a1 + 32) _setAlarmsOrNotifyExtensionsForDeviceActivityBudgets:v5 notifyForIntervalEnd:1 isEndOfInterval:0 includePastActivityIfNeeded:1];
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10006B8C4();
    }
    id v7 = 0;
  }

  return v7;
}

id sub_100019064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 40) _checkStatusOfBudgets:a2 withError:a3 completionHandler:*(void *)(a1 + 32)];
}

id sub_100019130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 40) _checkStatusOfBudgets:a2 withError:a3 completionHandler:*(void *)(a1 + 32)];
}

id sub_100019230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 40) _checkStatusOfBudgets:a2 withError:a3 completionHandler:*(void *)(a1 + 32)];
}

id sub_1000195D0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _didCollectLocalActivityForApplications:*(void *)(a1 + 40)];
}

id sub_100019698(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v7)
  {
    id v10 = [*(id *)(a1 + 32) _notifyForBudgets:v7 events:v8 nextNotificationEventName:"com.apple.UsageTrackingAgent.alarm.application" syncForImpendingBudgets:1];
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10006B934();
    }
    id v10 = 0;
  }

  return v10;
}

id sub_1000197E4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _didCollectLocalActivityForWebDomains:*(void *)(a1 + 40)];
}

id sub_1000198AC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v7)
  {
    id v10 = [*(id *)(a1 + 32) _notifyForBudgets:v7 events:v8 nextNotificationEventName:"com.apple.UsageTrackingAgent.alarm.web-domain" syncForImpendingBudgets:1];
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10006B9A4();
    }
    id v10 = 0;
  }

  return v10;
}

id sub_1000199F8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _didCollectLocalActivityForNowPlayingCategories:*(void *)(a1 + 40)];
}

id sub_100019AC0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v7)
  {
    id v10 = [*(id *)(a1 + 32) _notifyForBudgets:v7 events:v8 nextNotificationEventName:"com.apple.UsageTrackingAgent.alarm.now-playing" syncForImpendingBudgets:1];
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10006BA14();
    }
    id v10 = 0;
  }

  return v10;
}

id sub_100019C0C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _didCollectLocalActivityForVideoBundleIdentifiers:*(void *)(a1 + 40)];
}

id sub_100019CD4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v7)
  {
    id v10 = [*(id *)(a1 + 32) _notifyForBudgets:v7 events:v8 nextNotificationEventName:"com.apple.UsageTrackingAgent.alarm.video" syncForImpendingBudgets:1];
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10006BA84();
    }
    id v10 = 0;
  }

  return v10;
}

id sub_100019E20(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _didCollectLocalActivityForVideoWebDomains:*(void *)(a1 + 40)];
}

id sub_100019EE8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v7)
  {
    id v10 = [*(id *)(a1 + 32) _notifyForBudgets:v7 events:v8 nextNotificationEventName:"com.apple.UsageTrackingAgent.alarm.video" syncForImpendingBudgets:1];
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10006BAF4();
    }
    id v10 = 0;
  }

  return v10;
}

void sub_10001C31C(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v4)
    {
      int v7 = 138543362;
      id v8 = v3;
      id v5 = "Failed to upload DeviceActivity data %{public}@";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v7, 0xCu);
    }
  }
  else if (v4)
  {
    id v6 = *(void **)(a1 + 32);
    int v7 = 138543362;
    id v8 = v6;
    id v5 = "Successfully uploaded DeviceActivity data for budgets and events %{public}@";
    goto LABEL_6;
  }
}

void sub_10001C400(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10006BBE0();
    }
    [*(id *)(a1 + 32) setLastSyncDate:0];
  }
}

void sub_10001D504(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    sub_10006BE04();
  }
}

void sub_10001D554(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    sub_10006BE74();
  }
}

void sub_10001D880(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    sub_10006BEE4();
  }
}

void sub_10001D8D0(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    sub_10006BF54();
  }
}

void sub_10001DC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001DC74(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10006BFC4();
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
}

void sub_10001DCD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10006C038();
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
}

void sub_10001DF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001DF98(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10006C0AC();
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
}

void sub_10001E230(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_10001E240(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_10001EC60(id a1)
{
  qword_1000961C0 = objc_opt_new();
  _objc_release_x1();
}

void sub_10001ED9C(id a1, id a2)
{
  id v2 = a2;
  id v3 = objc_opt_new();
  id v4 = [objc_alloc((Class)NSDate) initWithTimeInterval:v3 sinceDate:-86400.0];
  id v5 = [objc_alloc((Class)NSDateInterval) initWithStartDate:v4 endDate:v3];
  id v6 = objc_opt_new();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10001EEAC;
  v8[3] = &unk_10008A690;
  id v9 = v2;
  id v7 = v2;
  [v6 queryForUncategorizedLocalWebUsageDuringInterval:v5 completionHandler:v8];
}

void sub_10001EEAC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    v15[0] = 0;
    v15[1] = v15;
    v15[2] = 0x2020000000;
    v15[3] = 0x404E000000000000;
    uint64_t v12 = 0;
    v13[0] = &v12;
    v13[1] = 0x3032000000;
    v13[2] = sub_10001F0EC;
    v13[3] = sub_10001F0FC;
    id v14 = 0;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10001F104;
    v11[3] = &unk_10008A668;
    v11[4] = v15;
    v11[5] = &v12;
    [v5 enumerateKeysAndObjectsUsingBlock:v11];
    uint64_t v7 = *(void *)(v13[0] + 40);
    BOOL v8 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      if (v8) {
        sub_10006C420((uint64_t)v13);
      }
      id v9 = [objc_alloc((Class)_DPStringRecorder) initWithKey:@"com.apple.screentime.usagetracking.UnknownDomain"];
      uint64_t v16 = *(void *)(v13[0] + 40);
      id v10 = +[NSArray arrayWithObjects:&v16 count:1];
      [v9 record:v10];
    }
    else if (v8)
    {
      sub_10006C3D8();
    }
    _Block_object_dispose(&v12, 8);

    _Block_object_dispose(v15, 8);
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_10006C358((uint64_t)v6);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001F0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001F0EC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10001F0FC(uint64_t a1)
{
}

void sub_10001F104(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  [a3 doubleValue];
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  if (v6 >= *(double *)(v7 + 24))
  {
    *(double *)(v7 + 24) = v6;
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  }
}

BOOL sub_100020790(id a1, NSString *a2, USDeviceActivityEvent *a3, BOOL *a4)
{
  return [(USDeviceActivityEvent *)a3 isUntokenized];
}

uint64_t sub_100020798(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10002081C(&qword_100095118, (void (*)(uint64_t))&type metadata accessor for _DeviceActivityData.ActivitySegment);
  uint64_t result = sub_10002081C(&qword_100095120, (void (*)(uint64_t))&type metadata accessor for _DeviceActivityData.ActivitySegment);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10002081C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Identifier(uint64_t a1)
{
}

void type metadata accessor for CKError(uint64_t a1)
{
}

uint64_t sub_10002088C(uint64_t a1)
{
  uint64_t v2 = sub_10002081C(&qword_100095148, type metadata accessor for CKError);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000208F8(uint64_t a1)
{
  uint64_t v2 = sub_10002081C(&qword_100095148, type metadata accessor for CKError);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100020968(uint64_t a1)
{
  uint64_t v2 = sub_10002081C(&qword_100095180, type metadata accessor for CKError);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

id sub_1000209D4()
{
  return *v0;
}

uint64_t sub_1000209DC@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_1000209E4(uint64_t a1, uint64_t a2)
{
  return sub_100020B64(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100020A10(uint64_t a1, uint64_t a2)
{
  return sub_100020B64(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100020A28(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_100020AA0(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_100020B20@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100020B64(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100020BA8()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int sub_100020BFC()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100020C70()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100020C80(uint64_t a1)
{
  uint64_t v2 = sub_10002081C(&qword_100095180, type metadata accessor for CKError);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100020CEC(uint64_t a1)
{
  uint64_t v2 = sub_10002081C(&qword_100095180, type metadata accessor for CKError);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100020D58(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10002081C(&qword_100095180, type metadata accessor for CKError);
  id v5 = a1;
  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_100020DE8()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_100020E20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002081C(&qword_100095180, type metadata accessor for CKError);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100020E9C()
{
  return Hasher._finalize()();
}

void *sub_100020EFC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_100020F0C(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100020F1C()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_100020FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10002081C(&qword_100095180, type metadata accessor for CKError);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10002102C()
{
  return sub_10002081C(&qword_100095138, type metadata accessor for CKError);
}

uint64_t sub_100021074()
{
  return sub_10002081C(&qword_100095140, type metadata accessor for CKError);
}

uint64_t sub_1000210BC()
{
  return sub_10002081C(&qword_100095148, type metadata accessor for CKError);
}

uint64_t sub_100021104()
{
  return sub_10002081C(&qword_100095150, type metadata accessor for CKError);
}

uint64_t sub_10002114C()
{
  return sub_10002081C(&qword_100095158, type metadata accessor for CKError);
}

uint64_t sub_100021194()
{
  return sub_10002081C(&qword_100095160, type metadata accessor for Code);
}

void type metadata accessor for Code(uint64_t a1)
{
}

uint64_t sub_1000211F0()
{
  return sub_10002081C(&qword_100095168, type metadata accessor for Code);
}

unint64_t sub_10002123C()
{
  unint64_t result = qword_100095170;
  if (!qword_100095170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100095170);
  }
  return result;
}

uint64_t sub_100021290()
{
  return sub_10002081C(&qword_100095178, type metadata accessor for Code);
}

uint64_t sub_1000212D8()
{
  return sub_10002081C(&qword_100095180, type metadata accessor for CKError);
}

BOOL sub_100021320(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100021338(uint64_t a1)
{
  uint64_t v2 = sub_10002081C((unint64_t *)&qword_100095200, type metadata accessor for Identifier);
  uint64_t v3 = sub_10002081C(&qword_100095208, type metadata accessor for Identifier);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000213F4()
{
  return sub_10002081C(&qword_100095188, type metadata accessor for Identifier);
}

uint64_t sub_10002143C()
{
  return sub_10002081C(&qword_100095190, type metadata accessor for Identifier);
}

uint64_t sub_100021484()
{
  return sub_10002081C(&qword_100095198, type metadata accessor for Identifier);
}

uint64_t sub_1000214CC@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100021514@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void type metadata accessor for Result(uint64_t a1)
{
}

void type metadata accessor for CFError(uint64_t a1)
{
}

void type metadata accessor for ParticipantAcceptanceStatus(uint64_t a1)
{
}

void type metadata accessor for Scope(uint64_t a1)
{
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

void sub_1000215A4(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_1000215EC(uint64_t a1)
{
  uint64_t v2 = sub_10002081C(&qword_100095258, type metadata accessor for URLResourceKey);
  uint64_t v3 = sub_10002081C((unint64_t *)&unk_100095260, type metadata accessor for URLResourceKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000216A8()
{
  return sub_10002081C(&qword_100095240, type metadata accessor for URLResourceKey);
}

uint64_t sub_1000216F0()
{
  return sub_10002081C(&qword_100095248, type metadata accessor for URLResourceKey);
}

uint64_t sub_100021738()
{
  return sub_10002081C(&qword_100095250, type metadata accessor for URLResourceKey);
}

id sub_100021794()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithIdentifier:v1];

  return v2;
}

id sub_100021808(char a1)
{
  return [v1 setPreregistered:a1 & 1];
}

uint64_t sub_10002181C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  void v8[4] = sub_100021948;
  v8[5] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_10005360C;
  v8[3] = &unk_10008A990;
  uint64_t v6 = _Block_copy(v8);
  swift_retain();
  swift_retain();
  [v2 scheduleWithBlock:v6];
  _Block_release(v6);
  swift_release();
  return swift_release();
}

uint64_t sub_100021910()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100021948()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100021970(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100021980()
{
  return swift_release();
}

_UNKNOWN **sub_100021988()
{
  return &off_10008A9B8;
}

uint64_t sub_100021994()
{
  uint64_t v2 = *v0;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  uint8_t v1[16] = isa;
  v1[2] = v1;
  v1[7] = v1 + 15;
  v1[3] = sub_100021AB0;
  uint64_t v4 = swift_continuation_init();
  v1[10] = _NSConcreteStackBlock;
  v1[11] = 0x40000000;
  v1[12] = sub_100021C14;
  v1[13] = &unk_10008AA60;
  v1[14] = v4;
  [v2 categoriesForBundleIDs:isa completionHandler:v1 + 10];
  return _swift_continuation_await(v1 + 2);
}

uint64_t sub_100021AB0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *v0;
  uint64_t v4 = *(void **)(*v0 + 128);
  if (*(void *)(v1 + 48))
  {
    swift_willThrow();

    uint64_t v5 = *(uint64_t (**)(void))(v3 + 8);
    return v5();
  }
  else
  {
    uint64_t v7 = *(void *)(v2 + 120);

    id v8 = *(uint64_t (**)(uint64_t))(v3 + 8);
    return v8(v7);
  }
}

uint64_t sub_100021C14(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_1000222D4(&qword_100095330);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    sub_100022294();
    **(void **)(*(void *)(v3 + 64) + 40) = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    return _swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_100021CF0()
{
  uint64_t v2 = *v0;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  uint8_t v1[16] = isa;
  v1[2] = v1;
  v1[7] = v1 + 15;
  v1[3] = sub_100022318;
  uint64_t v4 = swift_continuation_init();
  v1[10] = _NSConcreteStackBlock;
  v1[11] = 0x40000000;
  v1[12] = sub_100021C14;
  v1[13] = &unk_10008AA48;
  v1[14] = v4;
  [v2 categoriesForDomainNames:isa completionHandler:v1 + 10];
  return _swift_continuation_await(v1 + 2);
}

uint64_t sub_100021E0C()
{
  uint64_t v2 = *v0;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  uint8_t v1[16] = isa;
  v1[2] = v1;
  v1[7] = v1 + 15;
  v1[3] = sub_100022318;
  uint64_t v4 = swift_continuation_init();
  v1[10] = _NSConcreteStackBlock;
  v1[11] = 0x40000000;
  v1[12] = sub_100021F28;
  v1[13] = &unk_10008AA30;
  v1[14] = v4;
  [v2 unCategorizedDomainsFromDomains:isa withCompletionHandler:v1 + 10];
  return _swift_continuation_await(v1 + 2);
}

uint64_t sub_100021F28(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_1000222D4(&qword_100095330);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    **(void **)(*(void *)(v3 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    return _swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_100021FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000220BC(a1, a2, a3, a4, a5, (uint64_t)&unk_10008AA08, (SEL *)&selRef_categoriesForBundleIDs_completionHandler_);
}

uint64_t sub_100022004(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_100022294();
    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000220A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000220BC(a1, a2, a3, a4, a5, (uint64_t)&unk_10008A9E0, (SEL *)&selRef_categoriesForDomainNames_completionHandler_);
}

uint64_t sub_1000220BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, SEL *a7)
{
  uint64_t v12 = *v7;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v16[4] = a2;
  v16[5] = a3;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_100022004;
  v16[3] = a6;
  uint64_t v14 = _Block_copy(v16);
  swift_retain();
  objc_msgSend(v12, *a7, isa, v14);
  _Block_release(v14);

  return swift_release();
}

uint64_t sub_100022190(uint64_t a1, uint64_t a2)
{
  return sub_1000221B4(a1, a2, (SEL *)&selRef_canonicalBundleIdentifier);
}

uint64_t sub_10002219C(uint64_t a1, uint64_t a2)
{
  return sub_100022224(a1, a2, (SEL *)&selRef_equivalentBundleIdentifiers);
}

uint64_t sub_1000221A8(uint64_t a1, uint64_t a2)
{
  return sub_1000221B4(a1, a2, (SEL *)&selRef_primaryWebDomain);
}

uint64_t sub_1000221B4(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v4 = [*v3 *a3];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

uint64_t sub_100022218(uint64_t a1, uint64_t a2)
{
  return sub_100022224(a1, a2, (SEL *)&selRef_webDomains);
}

uint64_t sub_100022224(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v4 = [*v3 *a3];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

uint64_t sub_10002227C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002228C()
{
  return swift_release();
}

unint64_t sub_100022294()
{
  unint64_t result = qword_100095328;
  if (!qword_100095328)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100095328);
  }
  return result;
}

uint64_t sub_1000222D4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

id sub_100022324(uint64_t a1, unint64_t a2)
{
  id v2 = 0;
  if (a2 >> 60 != 15)
  {
    id v5 = objc_allocWithZone((Class)NSKeyedUnarchiver);
    sub_1000226AC(a1, a2);
    id v6 = sub_1000225EC();
    [v6 setRequiresSecureCoding:1];
    id v7 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithCoder:v6];
    sub_100022750(a1, a2);
    id v2 = v7;
    sub_100022750(a1, a2);

    if (v2) {
  }
    }
  return v2;
}

id sub_1000225EC()
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v6 = 0;
  id v2 = [v0 initForReadingFromData:isa error:&v6];

  if (v2)
  {
    id v3 = v6;
  }
  else
  {
    id v4 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

uint64_t sub_1000226AC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000226C0(a1, a2);
  }
  return a1;
}

uint64_t sub_1000226C0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_100022718(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_100022750(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100022764(a1, a2);
  }
  return a1;
}

uint64_t sub_100022764(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

_UNKNOWN **sub_1000227BC()
{
  return &off_100095388;
}

_UNKNOWN **sub_1000227C8()
{
  return &off_10008AAC8;
}

uint64_t sub_1000227D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v9 = &v12[-v8 - 8];
  sub_100022928(a1, (uint64_t)v12);
  sub_1000222D4(&qword_100095C40);
  swift_dynamicCast();
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 64))(v9, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
}

id sub_100022910(void *a1)
{
  return [*v1 addOperation:*a1];
}

uint64_t sub_100022928(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10002298C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v9 = &v12[-v8 - 8];
  sub_100022928(a1, (uint64_t)v12);
  sub_1000222D4(&qword_100095C40);
  swift_dynamicCast();
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 32))(v9, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
}

uint64_t sub_100022ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = *v3;
  void v8[4] = a2;
  v8[5] = a3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_100038350;
  v8[3] = &unk_10008AAA0;
  id v6 = _Block_copy(v8);
  swift_retain();
  [v5 saveRecordZone:a1 completionHandler:v6];
  _Block_release(v6);
  return swift_release();
}

uint64_t sub_100022B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = *v3;
  void v8[4] = a2;
  v8[5] = a3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_100038350;
  v8[3] = &unk_10008AA78;
  id v6 = _Block_copy(v8);
  swift_retain();
  [v5 deleteRecordWithID:a1 completionHandler:v6];
  _Block_release(v6);
  return swift_release();
}

uint64_t sub_100022C44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100022C54()
{
  return swift_release();
}

_UNKNOWN **sub_100022C64()
{
  return &off_10008AB98;
}

uint64_t sub_100022C70@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = related decl 'e' for CKErrorCode.clientRecord.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100022C9C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = related decl 'e' for CKErrorCode.serverRecord.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100022CC8()
{
  sub_100022D68(&qword_100095180);
  _BridgedStoredNSError.code.getter();
  return v1;
}

uint64_t sub_100022D24(uint64_t a1)
{
  uint64_t result = sub_100022D68(&qword_100095140);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100022D68(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CKError(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_100022DAC(uint64_t a1)
{
  return [*v1 setQualityOfService:a1];
}

id sub_100022DC0@<X0>(void *a1@<X8>)
{
  id result = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  *a1 = result;
  return result;
}

uint64_t sub_100022DFC(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = a1;
    *(void *)(v4 + 24) = a2;
  }
  return CKModifyRecordsOperation.perRecordSaveBlock.setter();
}

void sub_100022E6C(uint64_t a1)
{
  uint64_t v2 = *v1;
  if (a1)
  {
    sub_100023228(0, &qword_1000954C0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    Class isa = 0;
  }
  [v2 setRecordsToSave:isa];
}

_UNKNOWN **sub_100022F04()
{
  return &off_100095518;
}

void sub_100022F10(void *a1@<X8>)
{
}

uint64_t sub_100022F2C(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = a1;
    *(void *)(v4 + 24) = a2;
  }
  return CKFetchShareParticipantsOperation.perShareParticipantResultBlock.setter();
}

uint64_t sub_100022F9C()
{
  return CKFetchShareParticipantsOperation.fetchShareParticipantsResultBlock.setter();
}

void sub_100022FC0(void *a1@<X8>)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  type metadata accessor for URL();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_100023228(0, &qword_1000954B8);
  sub_10002318C();
  Class v4 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v5 = [v2 initWithShareURLs:isa invitationTokensByShareURL:v4];

  *a1 = v5;
}

uint64_t sub_100023094()
{
  return CKFetchShareMetadataOperation.perShareMetadataResultBlock.setter();
}

void sub_1000230B8(void *a1@<X8>)
{
}

void sub_1000230D4(unint64_t *a1@<X3>, SEL *a2@<X5>, void *a3@<X8>)
{
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  sub_100023228(0, a1);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v6, *a2, isa);

  *a3 = v8;
}

uint64_t sub_100023168()
{
  return CKAcceptSharesOperation.acceptSharesResultBlock.setter();
}

unint64_t sub_10002318C()
{
  unint64_t result = qword_100095C30;
  if (!qword_100095C30)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100095C30);
  }
  return result;
}

uint64_t sub_1000231E4()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002321C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100053410(a1, a2, a3 & 1, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_100023228(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100023264(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100038354(a1, a2, a3 & 1, *(uint64_t (**)(uint64_t, uint64_t *))(v3 + 16));
}

id sub_100023274()
{
  id v1 = [*v0 recordID];
  return v1;
}

uint64_t sub_1000232AC()
{
  id v1 = [*v0 participants];
  sub_100023448();
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t sub_100023304@<X0>(uint64_t a1@<X8>)
{
  id v3 = [*v1 URL];
  if (v3)
  {
    Class v4 = v3;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for URL();
    id v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a1;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for URL();
    id v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a1;
    uint64_t v9 = 1;
  }
  return v6(v8, v9, 1, v7);
}

void sub_1000233CC(void *a1@<X0>, void *a2@<X8>)
{
  id v4 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithRecordZoneID:a1];

  *a2 = v4;
}

id sub_100023420(void *a1)
{
  return [*v1 addParticipant:*a1];
}

id sub_100023434(void *a1)
{
  return [*v1 removeParticipant:*a1];
}

unint64_t sub_100023448()
{
  unint64_t result = qword_100095510;
  if (!qword_100095510)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100095510);
  }
  return result;
}

id sub_100023488()
{
  id v1 = [*v0 lookupInfo];
  return v1;
}

_UNKNOWN **sub_1000234C0()
{
  return &off_10008ABA8;
}

id sub_1000234CC()
{
  return [*v0 acceptanceStatus];
}

id sub_1000234DC@<X0>(void *a1@<X8>)
{
  id result = [*v1 userIdentity];
  *a1 = result;
  return result;
}

id sub_100023518()
{
  id v1 = [*v0 invitationToken];
  return v1;
}

id sub_100023550()
{
  return [*v0 role];
}

id sub_100023560()
{
  id v1 = *v0;
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 BOOLForKey:v2];

  return v3;
}

uint64_t sub_1000235A8()
{
  id v1 = *v0;
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 dataForKey:v2];

  if (!v3) {
    return 0;
  }
  uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

double sub_100023628@<D0>(_OWORD *a1@<X8>)
{
  id v3 = *v1;
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 objectForKey:v4];

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

void sub_1000236BC(uint64_t a1)
{
}

id sub_100023870()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for USDeviceActivityAuthorization();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for USDeviceActivityAuthorization()
{
  return self;
}

uint64_t sub_1000238C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v3 = type metadata accessor for Calendar.Component();
  uint64_t v29 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  id v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  double v15 = (char *)&v28 - v14;
  uint64_t v16 = type metadata accessor for Calendar();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  id v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)(a1 - 1) >= 2)
  {
    if (a1)
    {
      v31[0] = a1;
      uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
    }
    else
    {
      static Calendar.current.getter();
      static Date.now.getter();
      Calendar.startOfDay(for:)();
      double v26 = *(void (**)(char *, uint64_t))(v8 + 8);
      v26(v12, v7);
      uint64_t v27 = v29;
      (*(void (**)(char *, void, uint64_t))(v29 + 104))(v6, enum case for Calendar.Component.day(_:), v3);
      Calendar.date(byAdding:value:to:wrappingComponents:)();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v3);
      v26(v15, v7);
      return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    }
  }
  else
  {
    if (qword_100095068 != -1) {
      swift_once();
    }
    sub_100022928((uint64_t)&qword_100097368, (uint64_t)v31);
    uint64_t v21 = v32;
    uint64_t v22 = v33;
    sub_10002ADE8(v31, v32);
    (*(void (**)(void *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t))(v22 + 24))(v34, 0x726665527473616CLL, 0xEF65746144687365, v21, v22);
    if (v34[3])
    {
      uint64_t v23 = v30;
      int v24 = swift_dynamicCast();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v23, v24 ^ 1u, 1, v7);
      return sub_10002AE2C((uint64_t)v31);
    }
    else
    {
      sub_10002AE2C((uint64_t)v31);
      sub_10002BDA0((uint64_t)v34, (uint64_t *)&unk_100095B90);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v30, 1, 1, v7);
    }
  }
  return result;
}

Swift::Int sub_100023CB4()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100023CFC()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100023D28()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t *sub_100023D6C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result;
  BOOL v3 = (unint64_t)*result > 2;
  if ((unint64_t)*result > 2) {
    uint64_t v2 = 0;
  }
  *(void *)a2 = v2;
  *(unsigned char *)(a2 + 8) = v3;
  return result;
}

id sub_100023D88()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for DeviceActivityCollector()) init];
  qword_100095580 = (uint64_t)result;
  return result;
}

uint64_t sub_100023DB8()
{
  uint64_t result = sub_100023228(0, &qword_100095790);
  qword_100097350 = result;
  *(void *)algn_100097358 = &off_10008A938;
  return result;
}

id sub_100023DF8()
{
  Swift::UInt v1 = &v0[OBJC_IVAR____TtC18UsageTrackingAgent23DeviceActivityCollector_backgroundActivity];
  uint64_t v2 = qword_100095058;
  BOOL v3 = v0;
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v4 = *(void *)algn_100097358;
  *(void *)Swift::UInt v1 = (*(uint64_t (**)(unint64_t, unint64_t))(*(void *)algn_100097358 + 8))(0xD000000000000040, 0x8000000100075530);
  *((void *)v1 + 1) = v4;
  uint64_t v5 = OBJC_IVAR____TtC18UsageTrackingAgent23DeviceActivityCollector_collector;
  type metadata accessor for _DeviceActivityCollector();
  id v6 = (uint64_t *)swift_allocObject();
  swift_defaultActor_initialize();
  if (qword_100095070 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100097390;
  uint64_t v8 = *(void *)algn_100097398;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)algn_100097398 + 16);
  v6[17] = qword_100097390;
  v6[18] = v8;
  sub_10002B118(v6 + 14);
  v9(v7, v8);
  v6[19] = 0;
  *(void *)&v3[v5] = v6;

  v15.receiver = v3;
  v15.super_class = (Class)type metadata accessor for DeviceActivityCollector();
  id v10 = objc_msgSendSuper2(&v15, "init");
  uint64_t v11 = self;
  id v12 = v10;
  id v13 = [v11 defaultCenter];
  [v13 addObserver:v12 selector:"localeDidChangeWithNotification:" name:NSCurrentLocaleDidChangeNotification object:0];
  [v13 addObserver:v12 selector:"timeZoneDidChangeWithNotification:" name:NSSystemTimeZoneDidChangeNotification object:0];

  return v12;
}

uint64_t sub_100024020(uint64_t a1)
{
  return sub_100024160(a1, "Detected a locale change, attempting to reset the local first weekday", (uint64_t)&unk_10008AC70, (uint64_t)&unk_100095780);
}

uint64_t sub_100024048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_100024068);
}

uint64_t sub_100024068()
{
  *(void *)(v0 + 24) = *(void *)(*(void *)(v0 + 16)
                                   + OBJC_IVAR____TtC18UsageTrackingAgent23DeviceActivityCollector_collector);
  return _swift_task_switch(sub_100024094);
}

uint64_t sub_100024094()
{
  sub_100025BB8(1, *(void *)(v0 + 24), "Finished handling locale change", (void (*)(void, uint64_t, uint64_t, uint64_t))sub_100026DDC);
  Swift::UInt v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_100024114()
{
}

uint64_t sub_100024138(uint64_t a1)
{
  return sub_100024160(a1, "Detected a time zone change, attempting to reset the local time zone", (uint64_t)&unk_10008AC20, (uint64_t)&unk_100095740);
}

uint64_t sub_100024160(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v4;
  uint64_t v8 = sub_1000222D4(&qword_100095730);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000950C0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100022718(v12, (uint64_t)qword_100097478);
  id v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    objc_super v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)objc_super v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, a2, v15, 2u);
    swift_slowDealloc();
  }

  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v11, 1, 1, v16);
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = 0;
  v17[3] = 0;
  v17[4] = v7;
  id v18 = v7;
  sub_1000384FC((uint64_t)v11, a4, (uint64_t)v17);
  return swift_release();
}

uint64_t sub_100024314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_100024334);
}

uint64_t sub_100024334()
{
  *(void *)(v0 + 24) = *(void *)(*(void *)(v0 + 16)
                                   + OBJC_IVAR____TtC18UsageTrackingAgent23DeviceActivityCollector_collector);
  return _swift_task_switch(sub_100024360);
}

uint64_t sub_100024360()
{
  sub_100025BB8(2, *(void *)(v0 + 24), "Finished handling time zone change", (void (*)(void, uint64_t, uint64_t, uint64_t))sub_100027CA8);
  Swift::UInt v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1000243E0()
{
}

uint64_t sub_100024404(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v6 = type metadata accessor for Notification();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = a1;
  a4();

  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1000244F0()
{
  uint64_t v1 = sub_1000222D4(&qword_100095730);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100095050 != -1) {
    swift_once();
  }
  uint64_t v5 = *(void *)(qword_100095580 + OBJC_IVAR____TtC18UsageTrackingAgent23DeviceActivityCollector_backgroundActivity + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  swift_unknownObjectRetain();
  v7(1, ObjectType, v5);
  swift_unknownObjectRelease();
  uint64_t v8 = *(void *)(qword_100095580 + OBJC_IVAR____TtC18UsageTrackingAgent23DeviceActivityCollector_backgroundActivity + 8);
  uint64_t v9 = swift_getObjectType();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v0;
  id v11 = *(void (**)(uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v8 + 40);
  swift_unknownObjectRetain();
  v11(sub_10002F2D8, v10, v9, v8);
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v4, 1, 1, v12);
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  void v13[4] = v0;
  sub_1000384FC((uint64_t)v4, (uint64_t)&unk_100095828, (uint64_t)v13);
  return swift_release();
}

uint64_t sub_100024704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000222D4(&qword_100095730);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000950C0 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100022718(v10, (uint64_t)qword_100097478);
  id v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Starting background activity to collect device activity.", v13, 2u);
    swift_slowDealloc();
  }

  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 1, 1, v14);
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = 0;
  v15[3] = 0;
  void v15[4] = a3;
  v15[5] = a1;
  v15[6] = a2;
  swift_retain();
  sub_1000384FC((uint64_t)v9, (uint64_t)&unk_100095840, (uint64_t)v15);
  return swift_release();
}

uint64_t sub_1000248D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 16) = a5;
  *(void *)(v6 + 24) = a6;
  return _swift_task_switch(sub_1000248F4);
}

uint64_t sub_1000248F4()
{
  if (qword_100095050 != -1) {
    swift_once();
  }
  *(void *)(v0 + 32) = *(void *)(qword_100095580
                                   + OBJC_IVAR____TtC18UsageTrackingAgent23DeviceActivityCollector_collector);
  swift_retain();
  return _swift_task_switch(sub_1000249A8);
}

uint64_t sub_1000249A8()
{
  sub_10002CC20();
  swift_release();
  return _swift_task_switch(sub_100024A18);
}

uint64_t sub_100024A18()
{
  *(void *)(v0 + 40) = *(void *)(qword_100095580
                                   + OBJC_IVAR____TtC18UsageTrackingAgent23DeviceActivityCollector_collector);
  swift_retain();
  swift_retain();
  *(void *)(v0 + 48) = static _SegmentInterval.allCases.getter();
  return _swift_task_switch(sub_100024AA8);
}

uint64_t sub_100024AA8()
{
  sub_10002D3C4(1, *(void *)(v0 + 48), 1, *(void *)(v0 + 40), *(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100024B40(uint64_t (*a1)(uint64_t))
{
  if (qword_1000950C0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100022718(v2, (uint64_t)qword_100097478);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Finished background activity to collect device activity.", v5, 2u);
    swift_slowDealloc();
  }

  return a1(1);
}

uint64_t sub_100024C38()
{
  return _swift_task_switch(sub_100024C54);
}

uint64_t sub_100024C54()
{
  if (qword_100095050 != -1) {
    swift_once();
  }
  *(void *)(v0 + 16) = *(void *)(qword_100095580
                                   + OBJC_IVAR____TtC18UsageTrackingAgent23DeviceActivityCollector_collector);
  swift_retain();
  return _swift_task_switch(sub_100024D08);
}

uint64_t sub_100024D08()
{
  sub_10002CC20();
  swift_release();
  return _swift_task_switch(sub_100024D78);
}

uint64_t sub_100024D78()
{
  *(void *)(v0 + 24) = *(void *)(qword_100095580
                                   + OBJC_IVAR____TtC18UsageTrackingAgent23DeviceActivityCollector_collector);
  swift_retain();
  return _swift_task_switch(sub_100024DFC);
}

uint64_t sub_100024DFC()
{
  sub_100025BB8(3, *(void *)(v0 + 24), "Finished checking for calendar changes.", (void (*)(void, uint64_t, uint64_t, uint64_t))sub_100028B74);
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_100024E88()
{
}

void sub_100024E94(const char *a1)
{
  if (qword_1000950C0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100022718(v2, (uint64_t)qword_100097478);
  oslog = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v3, a1, v4, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_100024FAC(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = sub_1000222D4(&qword_100095730);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = os_transaction_create();
  if (qword_1000950C0 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100022718(v15, (uint64_t)qword_100097478);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    id v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Collecting local device activity data", v18, 2u);
    swift_slowDealloc();
  }

  uint64_t v19 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v13, 1, 1, v19);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = 0;
  *(void *)(v20 + 24) = 0;
  *(void *)(v20 + 32) = v5;
  *(void *)(v20 + 40) = a1;
  *(unsigned char *)(v20 + 48) = a2 & 1;
  *(void *)(v20 + 56) = a3;
  *(void *)(v20 + 64) = a4;
  *(void *)(v20 + 72) = v14;
  sub_10002CAF0(a3);
  sub_1000384FC((uint64_t)v13, (uint64_t)&unk_100095810, v20);
  return swift_release();
}

uint64_t sub_1000251AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 32) = a8;
  *(void *)(v8 + 40) = v10;
  *(unsigned char *)(v8 + 64) = a6;
  *(void *)(v8 + 16) = a5;
  *(void *)(v8 + 24) = a7;
  return _swift_task_switch(sub_1000251DC);
}

uint64_t sub_1000251DC()
{
  if (qword_100095050 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[3];
  v0[6] = *(void *)(qword_100095580 + OBJC_IVAR____TtC18UsageTrackingAgent23DeviceActivityCollector_collector);
  sub_10002CAF0(v1);
  swift_unknownObjectRetain();
  swift_retain();
  v0[7] = static _SegmentInterval.allCases.getter();
  return _swift_task_switch(sub_1000252A8);
}

uint64_t sub_1000252A8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_10002E314(*(void *)(v0 + 16), *(void *)(v0 + 56), *(unsigned __int8 *)(v0 + 64), *(void *)(v0 + 48), v1, *(void *)(v0 + 32), *(void *)(v0 + 40));
  swift_bridgeObjectRelease();
  sub_10002C8B0(v1);
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void sub_10002535C(void (*a1)(void))
{
  if (qword_1000950C0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100022718(v2, (uint64_t)qword_100097478);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Finished collecting local device activity data", v5, 2u);
    swift_slowDealloc();
  }

  if (a1) {
    a1();
  }
}

uint64_t sub_100025510(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1000222D4(&qword_100095730);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000950C0 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100022718(v10, (uint64_t)qword_100097478);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Deleting local device activity data", v13, 2u);
    swift_slowDealloc();
  }

  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 1, 1, v14);
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = 0;
  v15[3] = 0;
  void v15[4] = v3;
  v15[5] = a1;
  v15[6] = a2;
  sub_10002CAF0(a1);
  sub_1000384FC((uint64_t)v9, (uint64_t)&unk_1000957A0, (uint64_t)v15);
  return swift_release();
}

uint64_t sub_1000256E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 16) = a5;
  *(void *)(v6 + 24) = a6;
  return _swift_task_switch(sub_100025704);
}

uint64_t sub_100025704()
{
  if (qword_100095050 != -1) {
    swift_once();
  }
  *(void *)(v0 + 32) = *(void *)(qword_100095580
                                   + OBJC_IVAR____TtC18UsageTrackingAgent23DeviceActivityCollector_collector);
  swift_retain();
  *(void *)(v0 + 40) = static _SegmentInterval.allCases.getter();
  return _swift_task_switch(sub_1000257BC);
}

uint64_t sub_1000257BC()
{
  sub_10002B7AC(1, *(void *)(v0 + 40));
  swift_bridgeObjectRelease();
  swift_release();
  return _swift_task_switch(sub_10002583C);
}

uint64_t sub_10002583C()
{
  if (qword_1000950C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100022718(v1, (uint64_t)qword_100097478);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Finished deleting local device activity data", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 16);

  if (v5) {
    (*(void (**)(void))(v0 + 16))();
  }
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

id sub_100025A08()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DeviceActivityCollector();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DeviceActivityCollector()
{
  return self;
}

uint64_t sub_100025AAC()
{
  uint64_t result = type metadata accessor for DeviceActivityAuthorization();
  qword_100097360 = result;
  return result;
}

uint64_t sub_100025AD0()
{
  id v0 = [self standardUserDefaults];
  uint64_t result = sub_100023228(0, (unint64_t *)&unk_100095B60);
  qword_100097380 = result;
  unk_100097388 = &off_10008ABB8;
  qword_100097368 = (uint64_t)v0;
  return result;
}

uint64_t sub_100025B40()
{
  uint64_t result = type metadata accessor for DeviceActivityDataSource();
  qword_100097390 = result;
  *(void *)algn_100097398 = &off_10008AEB0;
  return result;
}

double sub_100025B70()
{
  qword_1000973C0 = 0;
  double result = 0.0;
  xmmword_1000973A0 = 0u;
  *(_OWORD *)algn_1000973B0 = 0u;
  return result;
}

uint64_t sub_100025B88()
{
  uint64_t result = type metadata accessor for SyncCoordinator();
  qword_1000973C8 = result;
  unk_1000973D0 = &off_10008B228;
  return result;
}

void sub_100025BB8(char a1, uint64_t a2, const char *a3, void (*a4)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v65 = a2;
  uint64_t v66 = a4;
  id v64 = a3;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v62 = *(void *)(v5 - 8);
  uint64_t v63 = v5;
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TimeZone();
  uint64_t v10 = *(void **)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1000222D4(&qword_100095748);
  __chkstk_darwin(v14 - 8, v15);
  uint64_t v17 = (char *)v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_1000222D4(&qword_100095718);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v21 = __chkstk_darwin(v18, v20);
  uint64_t v23 = (char *)v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v24);
  double v26 = (char *)v60 - v25;
  if ((a1 & 1) == 0)
  {
    if ((a1 & 2) == 0) {
      goto LABEL_19;
    }
    uint64_t v61 = v13;
    int v27 = 0;
    goto LABEL_7;
  }
  uint64_t v61 = v13;
  int v28 = sub_10002B288();
  int v27 = v28;
  if ((a1 & 2) != 0)
  {
LABEL_7:
    sub_1000262F0((uint64_t)v17);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
    {
      sub_10002BDA0((uint64_t)v17, &qword_100095748);
      if ((v27 & 1) == 0) {
        goto LABEL_19;
      }
      goto LABEL_12;
    }
    LODWORD(v60[0]) = v27;
    uint64_t v29 = *(int *)(v18 + 48);
    uint64_t v30 = v9;
    uint64_t v31 = &v26[v29];
    uint64_t v32 = &v17[v29];
    sub_10002C590((uint64_t)v17, (uint64_t)v26, &qword_100095708);
    uint64_t v33 = (void (*)(char *, char *, uint64_t))v10[4];
    v33(v31, v32, v30);
    uint32_t v34 = &v23[*(int *)(v18 + 48)];
    sub_10002C528((uint64_t)v26, (uint64_t)v23, &qword_100095708);
    unsigned int v35 = (void (*)(char *, char *, uint64_t))v10[2];
    v60[1] = v31;
    uint64_t v36 = v31;
    uint64_t v37 = v30;
    v35(v34, v36, v30);
    long long v38 = (unsigned int (*)(char *, uint64_t, uint64_t))v10[6];
    id v39 = (void (**)(char *, uint64_t))(v10 + 1);
    if (v38(v23, 1, v30) == 1)
    {
      sub_10002BDA0((uint64_t)v26, &qword_100095718);
      (*v39)(v34, v30);
      sub_10002BDA0((uint64_t)v23, &qword_100095708);
      if (v60[0]) {
        goto LABEL_12;
      }
    }
    else
    {
      long long v44 = v61;
      v33(v61, v23, v37);
      v60[0] = *v39;
      ((void (*)(char *, uint64_t))v60[0])(v34, v37);
      Date.init()();
      uint64_t v45 = TimeZone.secondsFromGMT(for:)();
      uint64_t v46 = v63;
      __int16 v47 = *(void (**)(char *, uint64_t))(v62 + 8);
      v47(v8, v63);
      Date.init()();
      uint64_t v48 = TimeZone.secondsFromGMT(for:)();
      v47(v8, v46);
      uint64_t v49 = v45 - v48;
      if (__OFSUB__(v45, v48))
      {
        __break(1u);
        return;
      }
      if (v49)
      {
        if (__ROR8__(0xFEDCBA987654321 * v49 + 0x91A2B3C4D5E6F0, 4) < 0x123456789ABCDFuLL)
        {
          sub_1000222D4((uint64_t *)&unk_100095750);
          uint64_t v54 = type metadata accessor for _SegmentInterval();
          uint64_t v55 = *(void *)(v54 - 8);
          uint64_t v56 = *(void *)(v55 + 72);
          unint64_t v57 = (*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
          uint64_t v43 = swift_allocObject();
          *(_OWORD *)(v43 + 16) = xmmword_100073720;
          unint64_t v58 = v43 + v57;
          uint64_t v61 = v44;
          BOOL v59 = *(void (**)(unint64_t, void, uint64_t))(v55 + 104);
          v59(v58, enum case for _SegmentInterval.daily(_:), v54);
          v59(v58 + v56, enum case for _SegmentInterval.weekly(_:), v54);
          long long v44 = v61;
        }
        else
        {
          uint64_t v43 = static _SegmentInterval.allCases.getter();
        }
        ((void (*)(char *, uint64_t))v60[0])(v44, v37);
        sub_10002BDA0((uint64_t)v26, &qword_100095718);
        goto LABEL_13;
      }
      ((void (*)(char *, uint64_t))v60[0])(v44, v37);
      sub_10002BDA0((uint64_t)v26, &qword_100095718);
    }
    goto LABEL_19;
  }
  if (v28)
  {
LABEL_12:
    sub_1000222D4((uint64_t *)&unk_100095750);
    uint64_t v40 = type metadata accessor for _SegmentInterval();
    uint64_t v41 = *(void *)(v40 - 8);
    unint64_t v42 = (*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
    uint64_t v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = xmmword_100073730;
    (*(void (**)(unint64_t, void, uint64_t))(v41 + 104))(v43 + v42, enum case for _SegmentInterval.weekly(_:), v40);
LABEL_13:
    sub_10002B7AC(0, v43);
    v66(0, v43, 1, v65);
    swift_bridgeObjectRelease();
    return;
  }
LABEL_19:
  if (qword_1000950C0 != -1) {
    swift_once();
  }
  uint64_t v50 = type metadata accessor for Logger();
  sub_100022718(v50, (uint64_t)qword_100097478);
  long long v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v51, v52))
  {
    long long v53 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v53 = 0;
    _os_log_impl((void *)&_mh_execute_header, v51, v52, v64, v53, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1000262F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v69 = a1;
  uint64_t v1 = sub_1000222D4(&qword_100095700);
  __chkstk_darwin(v1, v2);
  os_log_type_t v4 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000222D4(&qword_100095708);
  uint64_t v7 = __chkstk_darwin(v5, v6);
  uint64_t v64 = (uint64_t)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v66 = (uint64_t)&v60 - v11;
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v68 = (uint64_t)&v60 - v14;
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v18 = (char *)&v60 - v17;
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)&v60 - v20;
  uint64_t v22 = type metadata accessor for TimeZone();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v25 = __chkstk_darwin(v22, v24);
  int v27 = (char *)&v60 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v25, v28);
  uint64_t v31 = (char *)&v60 - v30;
  __chkstk_darwin(v29, v32);
  id v71 = (char *)&v60 - v33;
  static TimeZone.current.getter();
  if (qword_100095078 != -1) {
    swift_once();
  }
  sub_10002C528((uint64_t)&xmmword_1000973A0, (uint64_t)&v72, &qword_100095710);
  uint64_t v70 = v22;
  uint64_t v67 = v27;
  uint64_t v65 = v5;
  if (v73)
  {
    sub_10002B17C(&v72, (uint64_t)v74);
  }
  else
  {
    uint64_t v75 = type metadata accessor for DeviceActivityDataStore();
    uint64_t v76 = &protocol witness table for DeviceActivityDataStore;
    sub_10002B118(v74);
    DeviceActivityDataStore.init()();
    sub_10002BDA0((uint64_t)&v72, &qword_100095710);
  }
  sub_10002ADE8(v74, v75);
  dispatch thunk of DeviceActivityDataStoring.localTimeZone()();
  sub_10002AE2C((uint64_t)v74);
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  uint64_t v38 = v70;
  uint64_t v62 = v23 + 16;
  uint64_t v61 = v37;
  v37(v18, v71, v70);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v18, 0, 1, v38);
  uint64_t v39 = (uint64_t)&v4[*(int *)(v1 + 48)];
  sub_10002C528((uint64_t)v18, (uint64_t)v4, &qword_100095708);
  uint64_t v63 = v21;
  uint64_t v40 = v23;
  sub_10002C528((uint64_t)v21, v39, &qword_100095708);
  uint64_t v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  if (v41((uint64_t)v4, 1, v38) == 1)
  {
    sub_10002BDA0((uint64_t)v18, &qword_100095708);
    if (v41(v39, 1, v38) == 1)
    {
      sub_10002BDA0((uint64_t)v4, &qword_100095708);
LABEL_15:
      sub_10002BDA0((uint64_t)v63, &qword_100095708);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v71, v70);
      uint64_t v34 = v69;
      uint64_t v35 = sub_1000222D4(&qword_100095718);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v34, 1, 1, v35);
    }
    goto LABEL_11;
  }
  uint64_t v42 = v68;
  sub_10002C528((uint64_t)v4, v68, &qword_100095708);
  if (v41(v39, 1, v38) == 1)
  {
    sub_10002BDA0((uint64_t)v18, &qword_100095708);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v42, v38);
LABEL_11:
    sub_10002BDA0((uint64_t)v4, &qword_100095700);
    goto LABEL_12;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v31, v39, v38);
  sub_10002B194(&qword_100095728, 255, (void (*)(uint64_t))&type metadata accessor for TimeZone);
  char v43 = dispatch thunk of static Equatable.== infix(_:_:)();
  long long v44 = *(void (**)(char *, uint64_t))(v40 + 8);
  v44(v31, v38);
  sub_10002BDA0((uint64_t)v18, &qword_100095708);
  v44((char *)v42, v38);
  sub_10002BDA0((uint64_t)v4, &qword_100095708);
  if (v43) {
    goto LABEL_15;
  }
LABEL_12:
  sub_10002C528((uint64_t)&xmmword_1000973A0, (uint64_t)&v72, &qword_100095710);
  if (v73)
  {
    sub_10002B17C(&v72, (uint64_t)v74);
  }
  else
  {
    uint64_t v75 = type metadata accessor for DeviceActivityDataStore();
    uint64_t v76 = &protocol witness table for DeviceActivityDataStore;
    sub_10002B118(v74);
    DeviceActivityDataStore.init()();
    sub_10002BDA0((uint64_t)&v72, &qword_100095710);
  }
  sub_10002ADE8(v74, v75);
  dispatch thunk of DeviceActivityDataStoring.write(localTimeZone:)();
  sub_10002AE2C((uint64_t)v74);
  if (qword_1000950C0 != -1) {
    swift_once();
  }
  uint64_t v45 = type metadata accessor for Logger();
  sub_100022718(v45, (uint64_t)qword_100097478);
  uint64_t v46 = v66;
  sub_10002C528((uint64_t)v63, v66, &qword_100095708);
  __int16 v47 = v67;
  uint64_t v48 = v70;
  v61(v67, v71, v70);
  uint64_t v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v49, v50))
  {
    uint64_t v51 = swift_slowAlloc();
    uint64_t v68 = swift_slowAlloc();
    v74[0] = v68;
    *(_DWORD *)uint64_t v51 = 136446466;
    sub_10002C528(v46, v64, &qword_100095708);
    uint64_t v52 = String.init<A>(describing:)();
    *(void *)&long long v72 = sub_100035724(v52, v53, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10002BDA0(v46, &qword_100095708);
    *(_WORD *)(v51 + 12) = 2082;
    sub_10002B194(&qword_100095720, 255, (void (*)(uint64_t))&type metadata accessor for TimeZone);
    uint64_t v54 = v67;
    uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&long long v72 = sub_100035724(v55, v56, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v54, v48);
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "Local time zone changed from %{public}s to %{public}s", (uint8_t *)v51, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10002BDA0(v46, &qword_100095708);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v47, v48);
  }

  uint64_t v57 = sub_1000222D4(&qword_100095718);
  uint64_t v58 = v69;
  uint64_t v59 = v69 + *(int *)(v57 + 48);
  sub_10002C590((uint64_t)v63, v69, &qword_100095708);
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v59, v71, v48);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v58, 0, 1, v57);
}

void sub_100026DDC(NSObject *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v100 = a4;
  uint64_t v101 = a2;
  int v99 = a3;
  os_log_t v103 = a1;
  uint64_t v4 = sub_1000222D4(&qword_100095730);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v102 = (uint64_t)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000222D4(&qword_100095D90);
  unint64_t v97 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v97 + 64);
  uint64_t v10 = __chkstk_darwin(v7 - 8, v9);
  uint64_t v11 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v98 = (uint64_t)&v90 - v14;
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v18 = (char *)&v90 - v17;
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)&v90 - v20;
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(void *)(v23 + 64);
  uint64_t v26 = __chkstk_darwin(v22, v25);
  long long v96 = (char *)&v90 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26, v27);
  uint64_t v30 = (char *)&v90 - v29;
  uint64_t v32 = __chkstk_darwin(v28, v31);
  uint64_t v34 = (char *)&v90 - v33;
  __chkstk_darwin(v32, v35);
  uint64_t v37 = (char *)&v90 - v36;
  if (qword_100095060 != -1) {
    swift_once();
  }
  if (![(id)swift_getObjCClassFromMetadata() isAuthorized])
  {
    if (qword_1000950C0 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_100022718(v38, (uint64_t)qword_100097478);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v39, v40)) {
      goto LABEL_29;
    }
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v41 = 0;
    uint64_t v42 = "Device Activity is not authorized, skipping device activity collection";
    goto LABEL_28;
  }
  if (v103 != (os_log_t)2) {
    goto LABEL_8;
  }
  if (qword_1000950B0 != -1) {
    swift_once();
  }
  if (byte_100097450)
  {
LABEL_8:
    if (qword_100095078 != -1) {
      swift_once();
    }
    sub_10002C528((uint64_t)&xmmword_1000973A0, (uint64_t)&v104, &qword_100095710);
    id v94 = v18;
    uint64_t v95 = v22;
    uint64_t v93 = v23;
    id v92 = v30;
    if (v105)
    {
      sub_10002B17C(&v104, (uint64_t)v106);
    }
    else
    {
      uint64_t v107 = type metadata accessor for DeviceActivityDataStore();
      long long v108 = &protocol witness table for DeviceActivityDataStore;
      sub_10002B118(v106);
      DeviceActivityDataStore.init()();
      sub_10002BDA0((uint64_t)&v104, &qword_100095710);
    }
    sub_10002ADE8(v106, v107);
    dispatch thunk of DeviceActivityDataStoring.localStartDate()();
    uint64_t v43 = v93;
    uint64_t v44 = v95;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v21, 1, v95) == 1)
    {
      sub_10002BDA0((uint64_t)v21, &qword_100095D90);
      sub_10002AE2C((uint64_t)v106);
      if (qword_1000950C0 != -1) {
        swift_once();
      }
      uint64_t v45 = type metadata accessor for Logger();
      sub_100022718(v45, (uint64_t)qword_100097478);
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Saving device activity collection start date", v48, 2u);
        swift_slowDealloc();
      }

      sub_10002C528((uint64_t)&xmmword_1000973A0, (uint64_t)&v104, &qword_100095710);
      if (v105)
      {
        sub_10002B17C(&v104, (uint64_t)v106);
      }
      else
      {
        uint64_t v107 = type metadata accessor for DeviceActivityDataStore();
        long long v108 = &protocol witness table for DeviceActivityDataStore;
        sub_10002B118(v106);
        DeviceActivityDataStore.init()();
        sub_10002BDA0((uint64_t)&v104, &qword_100095710);
      }
      sub_10002ADE8(v106, v107);
      static Date.now.getter();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v11, 0, 1, v95);
      dispatch thunk of DeviceActivityDataStoring.write(localStartDate:)();
      sub_10002BDA0((uint64_t)v11, &qword_100095D90);
      sub_10002AE2C((uint64_t)v106);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v37, v21, v44);
      sub_10002AE2C((uint64_t)v106);
      if (qword_1000950C0 != -1) {
        swift_once();
      }
      uint64_t v53 = type metadata accessor for Logger();
      sub_100022718(v53, (uint64_t)qword_100097478);
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v34, v37, v44);
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v54, v55))
      {
        unint64_t v56 = (uint8_t *)swift_slowAlloc();
        uint64_t v91 = swift_slowAlloc();
        v106[0] = v91;
        *(_DWORD *)unint64_t v56 = 136446210;
        uint64_t v57 = Date.debugDescription.getter();
        *(void *)&long long v104 = sub_100035724(v57, v58, v106);
        uint64_t v43 = v93;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v59 = *(void (**)(char *, uint64_t))(v43 + 8);
        uint64_t v60 = v34;
        uint64_t v61 = v95;
        v59(v60, v95);
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "Device activity collection has already started on %{public}s", v56, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v59(v37, v61);
      }
      else
      {

        uint64_t v62 = *(void (**)(char *, uint64_t))(v43 + 8);
        v62(v34, v44);
        v62(v37, v44);
      }
    }
    uint64_t v63 = (uint64_t)v94;
    uint64_t v64 = v101;
    os_log_t v65 = v103;
    sub_1000238C8((uint64_t)v103, (uint64_t)v94);
    uint64_t v66 = (uint64_t)v92;
    static Date.now.getter();
    os_log_t v103 = (os_log_t)sub_10002BDFC((uint64_t)v65, v64, v63, v66);
    if (v103)
    {
      uint64_t v67 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v102, 1, 1, v67);
      uint64_t v68 = v100;
      uint64_t v101 = *(void *)(v100 + 152);
      uint64_t v69 = v98;
      sub_10002C528(v63, v98, &qword_100095D90);
      uint64_t v70 = v96;
      (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v96, v66, v95);
      uint64_t v72 = sub_10002B194((unint64_t *)&unk_1000956E0, v71, (void (*)(uint64_t))type metadata accessor for _DeviceActivityCollector);
      unint64_t v73 = (*(unsigned __int8 *)(v97 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
      unint64_t v74 = (v8 + *(unsigned __int8 *)(v43 + 80) + v73) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
      unint64_t v97 = (v74 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v75 = (v74 + v24 + 23) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v76 = v43;
      uint64_t v77 = (char *)swift_allocObject();
      *((void *)v77 + 2) = v68;
      *((void *)v77 + 3) = v72;
      *((void *)v77 + 4) = v101;
      *((void *)v77 + 5) = v68;
      sub_10002C590(v69, (uint64_t)&v77[v73], &qword_100095D90);
      uint64_t v78 = v95;
      (*(void (**)(char *, char *, uint64_t))(v76 + 32))(&v77[v74], v70, v95);
      long long v79 = &v77[v97];
      *(void *)long long v79 = v103;
      v79[8] = v99 & 1;
      long long v80 = (void (**)())&v77[v75];
      *long long v80 = sub_100024114;
      v80[1] = 0;
      swift_retain();
      swift_retain_n();
      uint64_t v81 = sub_1000384FC(v102, (uint64_t)&unk_100095788, (uint64_t)v77);
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v66, v78);
      sub_10002BDA0((uint64_t)v94, &qword_100095D90);
      *(void *)(v68 + 152) = v81;
      swift_release();
    }
    else
    {
      uint64_t v82 = v66;
      if (qword_1000950C0 != -1) {
        swift_once();
      }
      uint64_t v83 = type metadata accessor for Logger();
      sub_100022718(v83, (uint64_t)qword_100097478);
      long long v84 = Logger.logObject.getter();
      os_log_type_t v85 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v84, v85))
      {
        long long v86 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v86 = 0;
        _os_log_impl((void *)&_mh_execute_header, v84, v85, "No segment intervals need to be refreshed.", v86, 2u);
        uint64_t v63 = (uint64_t)v94;
        swift_slowDealloc();
      }

      long long v87 = Logger.logObject.getter();
      os_log_type_t v88 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v87, v88))
      {
        long long v89 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v89 = 0;
        _os_log_impl((void *)&_mh_execute_header, v87, v88, "Finished handling locale change", v89, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v82, v95);
      sub_10002BDA0(v63, &qword_100095D90);
    }
    return;
  }
  if (qword_1000950C0 != -1) {
    swift_once();
  }
  uint64_t v49 = type metadata accessor for Logger();
  sub_100022718(v49, (uint64_t)qword_100097478);
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v41 = 0;
    uint64_t v42 = "Not refreshing local device activity data for budget tracking";
LABEL_28:
    _os_log_impl((void *)&_mh_execute_header, v39, v40, v42, v41, 2u);
    swift_slowDealloc();
  }
LABEL_29:

  os_log_t v103 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v103, v50))
  {
    uint64_t v51 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v51 = 0;
    _os_log_impl((void *)&_mh_execute_header, v103, v50, "Finished handling locale change", v51, 2u);
    swift_slowDealloc();
  }
  os_log_t v52 = v103;
}

void sub_100027CA8(NSObject *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v100 = a4;
  uint64_t v101 = a2;
  int v99 = a3;
  os_log_t v103 = a1;
  uint64_t v4 = sub_1000222D4(&qword_100095730);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v102 = (uint64_t)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000222D4(&qword_100095D90);
  unint64_t v97 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v97 + 64);
  uint64_t v10 = __chkstk_darwin(v7 - 8, v9);
  uint64_t v11 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v98 = (uint64_t)&v90 - v14;
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v18 = (char *)&v90 - v17;
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)&v90 - v20;
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(void *)(v23 + 64);
  uint64_t v26 = __chkstk_darwin(v22, v25);
  long long v96 = (char *)&v90 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26, v27);
  uint64_t v30 = (char *)&v90 - v29;
  uint64_t v32 = __chkstk_darwin(v28, v31);
  uint64_t v34 = (char *)&v90 - v33;
  __chkstk_darwin(v32, v35);
  uint64_t v37 = (char *)&v90 - v36;
  if (qword_100095060 != -1) {
    swift_once();
  }
  if (![(id)swift_getObjCClassFromMetadata() isAuthorized])
  {
    if (qword_1000950C0 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_100022718(v38, (uint64_t)qword_100097478);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v39, v40)) {
      goto LABEL_29;
    }
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v41 = 0;
    uint64_t v42 = "Device Activity is not authorized, skipping device activity collection";
    goto LABEL_28;
  }
  if (v103 != (os_log_t)2) {
    goto LABEL_8;
  }
  if (qword_1000950B0 != -1) {
    swift_once();
  }
  if (byte_100097450)
  {
LABEL_8:
    if (qword_100095078 != -1) {
      swift_once();
    }
    sub_10002C528((uint64_t)&xmmword_1000973A0, (uint64_t)&v104, &qword_100095710);
    id v94 = v18;
    uint64_t v95 = v22;
    uint64_t v93 = v23;
    id v92 = v30;
    if (v105)
    {
      sub_10002B17C(&v104, (uint64_t)v106);
    }
    else
    {
      uint64_t v107 = type metadata accessor for DeviceActivityDataStore();
      long long v108 = &protocol witness table for DeviceActivityDataStore;
      sub_10002B118(v106);
      DeviceActivityDataStore.init()();
      sub_10002BDA0((uint64_t)&v104, &qword_100095710);
    }
    sub_10002ADE8(v106, v107);
    dispatch thunk of DeviceActivityDataStoring.localStartDate()();
    uint64_t v43 = v93;
    uint64_t v44 = v95;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v21, 1, v95) == 1)
    {
      sub_10002BDA0((uint64_t)v21, &qword_100095D90);
      sub_10002AE2C((uint64_t)v106);
      if (qword_1000950C0 != -1) {
        swift_once();
      }
      uint64_t v45 = type metadata accessor for Logger();
      sub_100022718(v45, (uint64_t)qword_100097478);
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Saving device activity collection start date", v48, 2u);
        swift_slowDealloc();
      }

      sub_10002C528((uint64_t)&xmmword_1000973A0, (uint64_t)&v104, &qword_100095710);
      if (v105)
      {
        sub_10002B17C(&v104, (uint64_t)v106);
      }
      else
      {
        uint64_t v107 = type metadata accessor for DeviceActivityDataStore();
        long long v108 = &protocol witness table for DeviceActivityDataStore;
        sub_10002B118(v106);
        DeviceActivityDataStore.init()();
        sub_10002BDA0((uint64_t)&v104, &qword_100095710);
      }
      sub_10002ADE8(v106, v107);
      static Date.now.getter();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v11, 0, 1, v95);
      dispatch thunk of DeviceActivityDataStoring.write(localStartDate:)();
      sub_10002BDA0((uint64_t)v11, &qword_100095D90);
      sub_10002AE2C((uint64_t)v106);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v37, v21, v44);
      sub_10002AE2C((uint64_t)v106);
      if (qword_1000950C0 != -1) {
        swift_once();
      }
      uint64_t v53 = type metadata accessor for Logger();
      sub_100022718(v53, (uint64_t)qword_100097478);
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v34, v37, v44);
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v54, v55))
      {
        unint64_t v56 = (uint8_t *)swift_slowAlloc();
        uint64_t v91 = swift_slowAlloc();
        v106[0] = v91;
        *(_DWORD *)unint64_t v56 = 136446210;
        uint64_t v57 = Date.debugDescription.getter();
        *(void *)&long long v104 = sub_100035724(v57, v58, v106);
        uint64_t v43 = v93;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v59 = *(void (**)(char *, uint64_t))(v43 + 8);
        uint64_t v60 = v34;
        uint64_t v61 = v95;
        v59(v60, v95);
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "Device activity collection has already started on %{public}s", v56, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v59(v37, v61);
      }
      else
      {

        uint64_t v62 = *(void (**)(char *, uint64_t))(v43 + 8);
        v62(v34, v44);
        v62(v37, v44);
      }
    }
    uint64_t v63 = (uint64_t)v94;
    uint64_t v64 = v101;
    os_log_t v65 = v103;
    sub_1000238C8((uint64_t)v103, (uint64_t)v94);
    uint64_t v66 = (uint64_t)v92;
    static Date.now.getter();
    os_log_t v103 = (os_log_t)sub_10002BDFC((uint64_t)v65, v64, v63, v66);
    if (v103)
    {
      uint64_t v67 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v102, 1, 1, v67);
      uint64_t v68 = v100;
      uint64_t v101 = *(void *)(v100 + 152);
      uint64_t v69 = v98;
      sub_10002C528(v63, v98, &qword_100095D90);
      uint64_t v70 = v96;
      (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v96, v66, v95);
      uint64_t v72 = sub_10002B194((unint64_t *)&unk_1000956E0, v71, (void (*)(uint64_t))type metadata accessor for _DeviceActivityCollector);
      unint64_t v73 = (*(unsigned __int8 *)(v97 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
      unint64_t v74 = (v8 + *(unsigned __int8 *)(v43 + 80) + v73) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
      unint64_t v97 = (v74 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v75 = (v74 + v24 + 23) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v76 = v43;
      uint64_t v77 = (char *)swift_allocObject();
      *((void *)v77 + 2) = v68;
      *((void *)v77 + 3) = v72;
      *((void *)v77 + 4) = v101;
      *((void *)v77 + 5) = v68;
      sub_10002C590(v69, (uint64_t)&v77[v73], &qword_100095D90);
      uint64_t v78 = v95;
      (*(void (**)(char *, char *, uint64_t))(v76 + 32))(&v77[v74], v70, v95);
      long long v79 = &v77[v97];
      *(void *)long long v79 = v103;
      v79[8] = v99 & 1;
      long long v80 = (void (**)())&v77[v75];
      *long long v80 = sub_1000243E0;
      v80[1] = 0;
      swift_retain();
      swift_retain_n();
      uint64_t v81 = sub_1000384FC(v102, (uint64_t)&unk_100095768, (uint64_t)v77);
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v66, v78);
      sub_10002BDA0((uint64_t)v94, &qword_100095D90);
      *(void *)(v68 + 152) = v81;
      swift_release();
    }
    else
    {
      uint64_t v82 = v66;
      if (qword_1000950C0 != -1) {
        swift_once();
      }
      uint64_t v83 = type metadata accessor for Logger();
      sub_100022718(v83, (uint64_t)qword_100097478);
      long long v84 = Logger.logObject.getter();
      os_log_type_t v85 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v84, v85))
      {
        long long v86 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v86 = 0;
        _os_log_impl((void *)&_mh_execute_header, v84, v85, "No segment intervals need to be refreshed.", v86, 2u);
        uint64_t v63 = (uint64_t)v94;
        swift_slowDealloc();
      }

      long long v87 = Logger.logObject.getter();
      os_log_type_t v88 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v87, v88))
      {
        long long v89 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v89 = 0;
        _os_log_impl((void *)&_mh_execute_header, v87, v88, "Finished handling time zone change", v89, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v82, v95);
      sub_10002BDA0(v63, &qword_100095D90);
    }
    return;
  }
  if (qword_1000950C0 != -1) {
    swift_once();
  }
  uint64_t v49 = type metadata accessor for Logger();
  sub_100022718(v49, (uint64_t)qword_100097478);
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v41 = 0;
    uint64_t v42 = "Not refreshing local device activity data for budget tracking";
LABEL_28:
    _os_log_impl((void *)&_mh_execute_header, v39, v40, v42, v41, 2u);
    swift_slowDealloc();
  }
LABEL_29:

  os_log_t v103 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v103, v50))
  {
    uint64_t v51 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v51 = 0;
    _os_log_impl((void *)&_mh_execute_header, v103, v50, "Finished handling time zone change", v51, 2u);
    swift_slowDealloc();
  }
  os_log_t v52 = v103;
}

void sub_100028B74(NSObject *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v100 = a4;
  uint64_t v101 = a2;
  int v99 = a3;
  os_log_t v103 = a1;
  uint64_t v4 = sub_1000222D4(&qword_100095730);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v102 = (uint64_t)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000222D4(&qword_100095D90);
  unint64_t v97 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v97 + 64);
  uint64_t v10 = __chkstk_darwin(v7 - 8, v9);
  uint64_t v11 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v98 = (uint64_t)&v90 - v14;
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v18 = (char *)&v90 - v17;
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)&v90 - v20;
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(void *)(v23 + 64);
  uint64_t v26 = __chkstk_darwin(v22, v25);
  long long v96 = (char *)&v90 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26, v27);
  uint64_t v30 = (char *)&v90 - v29;
  uint64_t v32 = __chkstk_darwin(v28, v31);
  uint64_t v34 = (char *)&v90 - v33;
  __chkstk_darwin(v32, v35);
  uint64_t v37 = (char *)&v90 - v36;
  if (qword_100095060 != -1) {
    swift_once();
  }
  if (![(id)swift_getObjCClassFromMetadata() isAuthorized])
  {
    if (qword_1000950C0 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_100022718(v38, (uint64_t)qword_100097478);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v39, v40)) {
      goto LABEL_29;
    }
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v41 = 0;
    uint64_t v42 = "Device Activity is not authorized, skipping device activity collection";
    goto LABEL_28;
  }
  if (v103 != (os_log_t)2) {
    goto LABEL_8;
  }
  if (qword_1000950B0 != -1) {
    swift_once();
  }
  if (byte_100097450)
  {
LABEL_8:
    if (qword_100095078 != -1) {
      swift_once();
    }
    sub_10002C528((uint64_t)&xmmword_1000973A0, (uint64_t)&v104, &qword_100095710);
    id v94 = v18;
    uint64_t v95 = v22;
    uint64_t v93 = v23;
    id v92 = v30;
    if (v105)
    {
      sub_10002B17C(&v104, (uint64_t)v106);
    }
    else
    {
      uint64_t v107 = type metadata accessor for DeviceActivityDataStore();
      long long v108 = &protocol witness table for DeviceActivityDataStore;
      sub_10002B118(v106);
      DeviceActivityDataStore.init()();
      sub_10002BDA0((uint64_t)&v104, &qword_100095710);
    }
    sub_10002ADE8(v106, v107);
    dispatch thunk of DeviceActivityDataStoring.localStartDate()();
    uint64_t v43 = v93;
    uint64_t v44 = v95;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v21, 1, v95) == 1)
    {
      sub_10002BDA0((uint64_t)v21, &qword_100095D90);
      sub_10002AE2C((uint64_t)v106);
      if (qword_1000950C0 != -1) {
        swift_once();
      }
      uint64_t v45 = type metadata accessor for Logger();
      sub_100022718(v45, (uint64_t)qword_100097478);
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Saving device activity collection start date", v48, 2u);
        swift_slowDealloc();
      }

      sub_10002C528((uint64_t)&xmmword_1000973A0, (uint64_t)&v104, &qword_100095710);
      if (v105)
      {
        sub_10002B17C(&v104, (uint64_t)v106);
      }
      else
      {
        uint64_t v107 = type metadata accessor for DeviceActivityDataStore();
        long long v108 = &protocol witness table for DeviceActivityDataStore;
        sub_10002B118(v106);
        DeviceActivityDataStore.init()();
        sub_10002BDA0((uint64_t)&v104, &qword_100095710);
      }
      sub_10002ADE8(v106, v107);
      static Date.now.getter();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v11, 0, 1, v95);
      dispatch thunk of DeviceActivityDataStoring.write(localStartDate:)();
      sub_10002BDA0((uint64_t)v11, &qword_100095D90);
      sub_10002AE2C((uint64_t)v106);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v37, v21, v44);
      sub_10002AE2C((uint64_t)v106);
      if (qword_1000950C0 != -1) {
        swift_once();
      }
      uint64_t v53 = type metadata accessor for Logger();
      sub_100022718(v53, (uint64_t)qword_100097478);
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v34, v37, v44);
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v54, v55))
      {
        unint64_t v56 = (uint8_t *)swift_slowAlloc();
        uint64_t v91 = swift_slowAlloc();
        v106[0] = v91;
        *(_DWORD *)unint64_t v56 = 136446210;
        uint64_t v57 = Date.debugDescription.getter();
        *(void *)&long long v104 = sub_100035724(v57, v58, v106);
        uint64_t v43 = v93;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v59 = *(void (**)(char *, uint64_t))(v43 + 8);
        uint64_t v60 = v34;
        uint64_t v61 = v95;
        v59(v60, v95);
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "Device activity collection has already started on %{public}s", v56, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v59(v37, v61);
      }
      else
      {

        uint64_t v62 = *(void (**)(char *, uint64_t))(v43 + 8);
        v62(v34, v44);
        v62(v37, v44);
      }
    }
    uint64_t v63 = (uint64_t)v94;
    uint64_t v64 = v101;
    os_log_t v65 = v103;
    sub_1000238C8((uint64_t)v103, (uint64_t)v94);
    uint64_t v66 = (uint64_t)v92;
    static Date.now.getter();
    os_log_t v103 = (os_log_t)sub_10002BDFC((uint64_t)v65, v64, v63, v66);
    if (v103)
    {
      uint64_t v67 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v102, 1, 1, v67);
      uint64_t v68 = v100;
      uint64_t v101 = *(void *)(v100 + 152);
      uint64_t v69 = v98;
      sub_10002C528(v63, v98, &qword_100095D90);
      uint64_t v70 = v96;
      (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v96, v66, v95);
      uint64_t v72 = sub_10002B194((unint64_t *)&unk_1000956E0, v71, (void (*)(uint64_t))type metadata accessor for _DeviceActivityCollector);
      unint64_t v73 = (*(unsigned __int8 *)(v97 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
      unint64_t v74 = (v8 + *(unsigned __int8 *)(v43 + 80) + v73) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
      unint64_t v97 = (v74 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v75 = (v74 + v24 + 23) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v76 = v43;
      uint64_t v77 = (char *)swift_allocObject();
      *((void *)v77 + 2) = v68;
      *((void *)v77 + 3) = v72;
      *((void *)v77 + 4) = v101;
      *((void *)v77 + 5) = v68;
      sub_10002C590(v69, (uint64_t)&v77[v73], &qword_100095D90);
      uint64_t v78 = v95;
      (*(void (**)(char *, char *, uint64_t))(v76 + 32))(&v77[v74], v70, v95);
      long long v79 = &v77[v97];
      *(void *)long long v79 = v103;
      v79[8] = v99 & 1;
      long long v80 = (void (**)())&v77[v75];
      *long long v80 = sub_100024E88;
      v80[1] = 0;
      swift_retain();
      swift_retain_n();
      uint64_t v81 = sub_1000384FC(v102, (uint64_t)&unk_100095830, (uint64_t)v77);
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v66, v78);
      sub_10002BDA0((uint64_t)v94, &qword_100095D90);
      *(void *)(v68 + 152) = v81;
      swift_release();
    }
    else
    {
      uint64_t v82 = v66;
      if (qword_1000950C0 != -1) {
        swift_once();
      }
      uint64_t v83 = type metadata accessor for Logger();
      sub_100022718(v83, (uint64_t)qword_100097478);
      long long v84 = Logger.logObject.getter();
      os_log_type_t v85 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v84, v85))
      {
        long long v86 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v86 = 0;
        _os_log_impl((void *)&_mh_execute_header, v84, v85, "No segment intervals need to be refreshed.", v86, 2u);
        uint64_t v63 = (uint64_t)v94;
        swift_slowDealloc();
      }

      long long v87 = Logger.logObject.getter();
      os_log_type_t v88 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v87, v88))
      {
        long long v89 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v89 = 0;
        _os_log_impl((void *)&_mh_execute_header, v87, v88, "Finished checking for calendar changes.", v89, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v82, v95);
      sub_10002BDA0(v63, &qword_100095D90);
    }
    return;
  }
  if (qword_1000950C0 != -1) {
    swift_once();
  }
  uint64_t v49 = type metadata accessor for Logger();
  sub_100022718(v49, (uint64_t)qword_100097478);
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v41 = 0;
    uint64_t v42 = "Not refreshing local device activity data for budget tracking";
LABEL_28:
    _os_log_impl((void *)&_mh_execute_header, v39, v40, v42, v41, 2u);
    swift_slowDealloc();
  }
LABEL_29:

  os_log_t v103 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v103, v50))
  {
    uint64_t v51 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v51 = 0;
    _os_log_impl((void *)&_mh_execute_header, v103, v50, "Finished checking for calendar changes.", v51, 2u);
    swift_slowDealloc();
  }
  os_log_t v52 = v103;
}

uint64_t sub_100029A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 48) = v17;
  *(void *)(v8 + 56) = v18;
  *(unsigned char *)(v8 + 88) = v16;
  *(void *)(v8 + 32) = a7;
  *(void *)(v8 + 40) = a8;
  *(void *)(v8 + 16) = a5;
  *(void *)(v8 + 24) = a6;
  if (a4)
  {
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v8 + 64) = v9;
    *uint64_t v9 = v8;
    v9[1] = sub_100029BA0;
    return ((uint64_t (*)(void))Task<>.value.getter)();
  }
  else
  {
    *(void *)(v8 + 72) = a5;
    uint64_t v10 = swift_task_alloc();
    *(void *)(v8 + 80) = v10;
    *(void *)uint64_t v10 = v8;
    *(void *)(v10 + 8) = sub_100029D74;
    uint64_t v11 = *(void *)(v8 + 40);
    uint64_t v12 = *(void *)(v8 + 16);
    long long v13 = *(_OWORD *)(v8 + 24);
    *(unsigned char *)(v10 + 160) = *(unsigned char *)(v8 + 88);
    *(void *)(v10 + 120) = v11;
    *(void *)(v10 + 128) = v12;
    *(_OWORD *)(v10 + 104) = v13;
    return _swift_task_switch(sub_100029F10);
  }
}

uint64_t sub_100029BA0()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100029CB0);
}

uint64_t sub_100029CB0()
{
  *(void *)(v0 + 72) = *(void *)(v0 + 16);
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 80) = v1;
  *(void *)uint64_t v1 = v0;
  *(void *)(v1 + 8) = sub_100029D74;
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 16);
  long long v4 = *(_OWORD *)(v0 + 24);
  *(unsigned char *)(v1 + 160) = *(unsigned char *)(v0 + 88);
  *(void *)(v1 + 120) = v2;
  *(void *)(v1 + 128) = v3;
  *(_OWORD *)(v1 + 104) = v4;
  return _swift_task_switch(sub_100029F10);
}

uint64_t sub_100029D74()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100029E84);
}

uint64_t sub_100029E84()
{
  (*(void (**)(void))(v0 + 48))();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100029EE8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v5 + 160) = a4;
  *(void *)(v5 + 120) = a3;
  *(void *)(v5 + 128) = v4;
  *(void *)(v5 + 104) = a1;
  *(void *)(v5 + 112) = a2;
  return _swift_task_switch(sub_100029F10);
}

uint64_t sub_100029F10()
{
  sub_10002ADE8((void *)(v0[16] + 112), *(void *)(v0[16] + 136));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[17] = v1;
  void *v1 = v0;
  v1[1] = sub_100029FC0;
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[13];
  return DeviceActivityDataSource.refreshLocalActivity(since:segmentIntervals:)(v3, v2);
}

uint64_t sub_100029FC0()
{
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10002A4B8;
  }
  else {
    uint64_t v2 = sub_10002A0EC;
  }
  return _swift_task_switch(v2);
}

uint64_t sub_10002A0EC()
{
  if (qword_100095068 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 112);
  sub_100022928((uint64_t)&qword_100097368, v0 + 16);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  sub_10002ADE8((void *)(v0 + 16), v2);
  uint64_t v4 = type metadata accessor for Date();
  *(void *)(v0 + 80) = v4;
  uint64_t v5 = sub_10002B118((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(v5, v1, v4);
  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v3 + 40))(v0 + 56, 0x726665527473616CLL, 0xEF65746144687365, v2, v3);
  sub_10002BDA0(v0 + 56, (uint64_t *)&unk_100095B90);
  sub_10002AE2C(v0 + 16);
  type metadata accessor for Feature();
  if ((static Feature.isDeviceActivityUIEnabled.getter() & 1) == 0)
  {
    if (qword_1000950C0 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100022718(v8, (uint64_t)qword_100097478);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v9, v10)) {
      goto LABEL_17;
    }
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    uint64_t v12 = "Device Activity UI is not enabled, skipping sync";
    goto LABEL_16;
  }
  if (*(unsigned char *)(v0 + 160) == 1)
  {
    sub_10002B194((unint64_t *)&unk_1000956E0, v6, (void (*)(uint64_t))type metadata accessor for _DeviceActivityCollector);
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v7;
    void *v7 = v0;
    v7[1] = sub_10002AA4C;
    return withCheckedContinuation<A>(isolation:function:_:)();
  }
  if (qword_1000950C0 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100022718(v13, (uint64_t)qword_100097478);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    uint64_t v12 = "Skipping sync after device activity collection.";
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v9, v10, v12, v11, 2u);
    swift_slowDealloc();
  }
LABEL_17:

  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_10002A4B8()
{
  uint64_t v26 = v0;
  p_prots = &OBJC_PROTOCOL___USUsageTrackingAgentPrivate.prots;
  if (qword_1000950C0 != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)(v0 + 16);
  uint64_t v3 = type metadata accessor for Logger();
  sub_100022718(v3, (uint64_t)qword_100097478);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 144);
  if (v6)
  {
    uint64_t v24 = v3;
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446210;
    *(void *)(v0 + 88) = v7;
    swift_errorRetain();
    sub_1000222D4(&qword_100095330);
    uint64_t v9 = String.init<A>(describing:)();
    *(void *)(v0 + 96) = sub_100035724(v9, v10, &v25);
    p_prots = (__objc2_prot_list **)(&OBJC_PROTOCOL___USUsageTrackingAgentPrivate + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v2 = (void *)(v0 + 16);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to refresh local activity: %{public}s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v3 = v24;
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  if (qword_100095068 != -1) {
    swift_once();
  }
  uint64_t v11 = *(void *)(v0 + 112);
  sub_100022928((uint64_t)&qword_100097368, (uint64_t)v2);
  uint64_t v12 = *(void *)(v0 + 40);
  uint64_t v13 = *(void *)(v0 + 48);
  sub_10002ADE8(v2, v12);
  uint64_t v14 = type metadata accessor for Date();
  *(void *)(v0 + 80) = v14;
  uint64_t v15 = sub_10002B118((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v15, v11, v14);
  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v13 + 40))(v0 + 56, 0x726665527473616CLL, 0xEF65746144687365, v12, v13);
  sub_10002BDA0(v0 + 56, (uint64_t *)&unk_100095B90);
  sub_10002AE2C((uint64_t)v2);
  type metadata accessor for Feature();
  if ((static Feature.isDeviceActivityUIEnabled.getter() & 1) == 0)
  {
    if (p_prots[24] != (__objc2_prot_list *)-1) {
      swift_once();
    }
    sub_100022718(v3, (uint64_t)qword_100097478);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v18, v19)) {
      goto LABEL_22;
    }
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    uint64_t v21 = "Device Activity UI is not enabled, skipping sync";
    goto LABEL_21;
  }
  if (*(unsigned char *)(v0 + 160) == 1)
  {
    sub_10002B194((unint64_t *)&unk_1000956E0, v16, (void (*)(uint64_t))type metadata accessor for _DeviceActivityCollector);
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_10002AA4C;
    return withCheckedContinuation<A>(isolation:function:_:)();
  }
  if (p_prots[24] != (__objc2_prot_list *)-1) {
    swift_once();
  }
  sub_100022718(v3, (uint64_t)qword_100097478);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    uint64_t v21 = "Skipping sync after device activity collection.";
LABEL_21:
    _os_log_impl((void *)&_mh_execute_header, v18, v19, v21, v20, 2u);
    swift_slowDealloc();
  }
LABEL_22:

  uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

uint64_t sub_10002AA4C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10002AB5C);
}

uint64_t sub_10002AB5C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002AB70(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_1000950C0 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100022718(v1, (uint64_t)qword_100097478);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 136446210;
      swift_errorRetain();
      sub_1000222D4(&qword_100095330);
      uint64_t v5 = String.init<A>(describing:)();
      sub_100035724(v5, v6, &v8);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to upload local activity: %{public}s", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  sub_1000222D4((uint64_t *)&unk_1000956F0);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_10002AD78()
{
  sub_10002AE2C(v0 + 112);
  swift_release();
  swift_defaultActor_destroy();
  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for _DeviceActivityCollector()
{
  return self;
}

uint64_t sub_10002ADDC()
{
  return v0;
}

void *sub_10002ADE8(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10002AE2C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10002AE7C(uint64_t a1)
{
  uint64_t v2 = sub_1000222D4((uint64_t *)&unk_1000956F0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2, v5);
  if (qword_100095080 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_1000973C8;
  uint64_t v7 = unk_1000973D0;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v8 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v9 + v8, (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  (*(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v7 + 8))(sub_10002B0A4, v9, v6, v7);
  return swift_release();
}

uint64_t sub_10002B010()
{
  uint64_t v1 = sub_1000222D4((uint64_t *)&unk_1000956F0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10002B0A4(uint64_t a1)
{
  sub_1000222D4((uint64_t *)&unk_1000956F0);
  return sub_10002AB70(a1);
}

uint64_t *sub_10002B118(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_10002B17C(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10002B194(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002B1E0()
{
  uint64_t v2 = *(void *)(v0 + 32);
  long long v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_10002F710;
  v3[2] = v2;
  return _swift_task_switch(sub_100024334);
}

uint64_t sub_10002B288()
{
  uint64_t v0 = type metadata accessor for Calendar();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter();
  uint64_t v5 = Calendar.firstWeekday.getter();
  if (qword_100095078 != -1) {
    swift_once();
  }
  sub_10002C528((uint64_t)&xmmword_1000973A0, (uint64_t)&v13, &qword_100095710);
  if (v14)
  {
    sub_10002B17C(&v13, (uint64_t)v15);
  }
  else
  {
    uint64_t v16 = type metadata accessor for DeviceActivityDataStore();
    uint64_t v17 = &protocol witness table for DeviceActivityDataStore;
    sub_10002B118(v15);
    DeviceActivityDataStore.init()();
    sub_10002BDA0((uint64_t)&v13, &qword_100095710);
  }
  sub_10002ADE8(v15, v16);
  uint64_t v6 = dispatch thunk of DeviceActivityDataStoring.localFirstWeekday()();
  sub_10002AE2C((uint64_t)v15);
  if (v5 == v6)
  {
    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    return 0;
  }
  else
  {
    sub_10002C528((uint64_t)&xmmword_1000973A0, (uint64_t)&v13, &qword_100095710);
    if (v14)
    {
      sub_10002B17C(&v13, (uint64_t)v15);
    }
    else
    {
      uint64_t v16 = type metadata accessor for DeviceActivityDataStore();
      uint64_t v17 = &protocol witness table for DeviceActivityDataStore;
      sub_10002B118(v15);
      DeviceActivityDataStore.init()();
      sub_10002BDA0((uint64_t)&v13, &qword_100095710);
    }
    sub_10002ADE8(v15, v16);
    dispatch thunk of DeviceActivityDataStoring.write(localFirstWeekday:)();
    sub_10002AE2C((uint64_t)v15);
    if (qword_1000950C0 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100022718(v8, (uint64_t)qword_100097478);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 134349312;
      v15[0] = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2050;
      v15[0] = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Local first weekday changed from %{public}ld to %{public}ld", (uint8_t *)v11, 0x16u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    return 1;
  }
}

void sub_10002B7AC(char a1, uint64_t a2)
{
  uint64_t v4 = sub_1000222D4(&qword_100095D90);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100095068 != -1) {
    swift_once();
  }
  sub_100022928((uint64_t)&qword_100097368, (uint64_t)v17);
  uint64_t v8 = v18;
  uint64_t v9 = v19;
  sub_10002ADE8(v17, v18);
  long long v15 = 0u;
  long long v16 = 0u;
  v9[5](&v15, 0x726665527473616CLL, 0xEF65746144687365, v8, v9);
  sub_10002BDA0((uint64_t)&v15, (uint64_t *)&unk_100095B90);
  sub_10002AE2C((uint64_t)v17);
  if (a1)
  {
    if (qword_100095078 != -1) {
      swift_once();
    }
    sub_10002C528((uint64_t)&xmmword_1000973A0, (uint64_t)&v15, &qword_100095710);
    if (*((void *)&v16 + 1))
    {
      sub_10002B17C(&v15, (uint64_t)v17);
    }
    else
    {
      uint64_t v18 = type metadata accessor for DeviceActivityDataStore();
      os_log_type_t v19 = (void (**)(long long *, uint64_t, unint64_t, uint64_t, void *))&protocol witness table for DeviceActivityDataStore;
      sub_10002B118(v17);
      DeviceActivityDataStore.init()();
      sub_10002BDA0((uint64_t)&v15, &qword_100095710);
    }
    sub_10002ADE8(v17, v18);
    uint64_t v10 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v7, 1, 1, v10);
    dispatch thunk of DeviceActivityDataStoring.write(localStartDate:)();
    sub_10002BDA0((uint64_t)v7, &qword_100095D90);
    sub_10002AE2C((uint64_t)v17);
  }
  if (qword_100095080 != -1) {
    swift_once();
  }
  (*(void (**)(uint64_t))(unk_1000973D0 + 24))(a2);
  if (qword_100095078 != -1) {
    swift_once();
  }
  sub_10002C528((uint64_t)&xmmword_1000973A0, (uint64_t)&v15, &qword_100095710);
  if (*((void *)&v16 + 1))
  {
    sub_10002B17C(&v15, (uint64_t)v17);
  }
  else
  {
    uint64_t v18 = type metadata accessor for DeviceActivityDataStore();
    os_log_type_t v19 = (void (**)(long long *, uint64_t, unint64_t, uint64_t, void *))&protocol witness table for DeviceActivityDataStore;
    sub_10002B118(v17);
    DeviceActivityDataStore.init()();
    sub_10002BDA0((uint64_t)&v15, &qword_100095710);
  }
  sub_10002ADE8(v17, v18);
  dispatch thunk of DeviceActivityDataStoring.deleteLocalData(deleteDeviceIdentifier:segmentIntervals:)();
  sub_10002AE2C((uint64_t)v17);
  if (qword_1000950C0 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100022718(v11, (uint64_t)qword_100097478);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Successfully reset all local activity", v14, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10002BDA0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000222D4(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10002BDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = a4;
  uint64_t v7 = type metadata accessor for Calendar();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DateComponents();
  uint64_t v53 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  os_log_t v52 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1000222D4(&qword_100095D90);
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  uint64_t v23 = (char *)&v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 == 2)
  {
    sub_1000222D4((uint64_t *)&unk_100095750);
    uint64_t v24 = type metadata accessor for _SegmentInterval();
    uint64_t v25 = *(void *)(v24 - 8);
    unint64_t v26 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    a2 = swift_allocObject();
    *(_OWORD *)(a2 + 16) = xmmword_100073730;
    (*(void (**)(unint64_t, void, uint64_t))(v25 + 104))(a2 + v26, enum case for _SegmentInterval.hourly(_:), v24);
    return a2;
  }
  os_log_type_t v50 = v23;
  sub_10002C528(a3, (uint64_t)v18, &qword_100095D90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    sub_10002BDA0((uint64_t)v18, &qword_100095D90);
    if (qword_1000950C0 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100022718(v27, (uint64_t)qword_100097478);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Last refresh date is nil, refreshing all segment intervals", v30, 2u);
      swift_slowDealloc();
    }

    goto LABEL_22;
  }
  uint64_t v48 = v20;
  uint64_t v49 = v12;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v50, v18, v19);
  static Calendar.current.getter();
  sub_1000222D4(&qword_100095770);
  uint64_t v31 = type metadata accessor for Calendar.Component();
  uint64_t v32 = *(void *)(v31 - 8);
  unint64_t v33 = (*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_100073730;
  (*(void (**)(unint64_t, void, uint64_t))(v32 + 104))(v34 + v33, enum case for Calendar.Component.minute(_:), v31);
  sub_1000479C8(v34);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v35 = v52;
  Calendar.dateComponents(_:from:to:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  uint64_t v36 = DateComponents.minute.getter();
  if (v37)
  {
    uint64_t v38 = v49;
    if (qword_1000950C0 != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    sub_100022718(v43, (uint64_t)qword_100097478);
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Unable to compute minutes since last refresh date, refreshing all segment intervals.", v46, 2u);
      uint64_t v38 = v49;
      swift_slowDealloc();
    }

    goto LABEL_21;
  }
  uint64_t v38 = v49;
  if (v36 >= 2)
  {
LABEL_21:
    (*(void (**)(char *, uint64_t))(v53 + 8))(v35, v38);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v19);
LABEL_22:
    swift_bridgeObjectRetain();
    return a2;
  }
  if (qword_1000950C0 != -1) {
    swift_once();
  }
  uint64_t v39 = type metadata accessor for Logger();
  sub_100022718(v39, (uint64_t)qword_100097478);
  os_log_type_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Last refresh was less than one minute ago, skipping refresh.", v42, 2u);
    uint64_t v38 = v49;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v53 + 8))(v35, v38);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v19);
  return 0;
}

uint64_t sub_10002C528(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000222D4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10002C590(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000222D4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10002C5F4(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_1000222D4(&qword_100095D90) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = v1[3];
  uint64_t v15 = v1[2];
  uint64_t v9 = v1[4];
  uint64_t v10 = v1[5];
  uint64_t v11 = (uint64_t)v1 + v7;
  uint64_t v12 = *(void *)((char *)v1 + ((v7 + *(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  void *v13 = v2;
  v13[1] = sub_10002F710;
  return sub_100029A40(a1, v15, v8, v9, v10, (uint64_t)v1 + v4, v11, v12);
}

uint64_t sub_10002C7C4()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10002C804()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_10002F710;
  v3[2] = v2;
  return _swift_task_switch(sub_100024068);
}

uint64_t sub_10002C8B0(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_10002C8C0()
{
  _Block_release(*(const void **)(v0 + 16));
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002C8F8()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_10002C908()
{
  swift_unknownObjectRelease();
  if (*(void *)(v0 + 40)) {
    swift_release();
  }
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10002C950()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  unint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[2] = v2;
  v4[3] = v3;
  v4[1] = sub_10002C9FC;
  return _swift_task_switch(sub_100025704);
}

uint64_t sub_10002C9FC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10002CAF0(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10002CB00()
{
  swift_unknownObjectRelease();
  if (*(void *)(v0 + 56)) {
    swift_release();
  }
  swift_unknownObjectRelease();
  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10002CB50()
{
  uint64_t v2 = *(void *)(v0 + 40);
  char v3 = *(unsigned char *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 72);
  uint64_t v7 = swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *(void *)uint64_t v7 = v1;
  *(void *)(v7 + 32) = v5;
  *(void *)(v7 + 40) = v6;
  *(void *)(v7 + 16) = v2;
  *(void *)(v7 + 24) = v4;
  *(unsigned char *)(v7 + 64) = v3;
  *(void *)(v7 + 8) = sub_10002F710;
  return _swift_task_switch(sub_1000251DC);
}

void sub_10002CC20()
{
  uint64_t v0 = type metadata accessor for Calendar.Component();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for Calendar();
  uint64_t v5 = *(void *)(v34 - 8);
  __chkstk_darwin(v34, v6);
  uint64_t v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000222D4(&qword_100095D90);
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)v33 - v20;
  static Calendar.current.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, enum case for Calendar.Component.day(_:), v0);
  static Date.now.getter();
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  uint64_t v22 = v18;
  uint64_t v23 = v13;
  v33[0] = *(void *)(v14 + 8);
  v33[1] = v14 + 8;
  ((void (*)(char *, uint64_t))v33[0])(v22, v13);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v34);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_10002BDA0((uint64_t)v12, &qword_100095D90);
    if (qword_1000950C0 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100022718(v24, (uint64_t)qword_100097478);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to calculate thirty days ago. Skipping deletion of expired activity segments.", v27, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v21, v12, v13);
    if (qword_100095078 != -1) {
      swift_once();
    }
    sub_10002C528((uint64_t)&xmmword_1000973A0, (uint64_t)&v35, &qword_100095710);
    if (v36)
    {
      sub_10002B17C(&v35, (uint64_t)v37);
    }
    else
    {
      uint64_t v38 = type metadata accessor for DeviceActivityDataStore();
      uint64_t v39 = &protocol witness table for DeviceActivityDataStore;
      sub_10002B118(v37);
      DeviceActivityDataStore.init()();
      sub_10002BDA0((uint64_t)&v35, &qword_100095710);
    }
    sub_10002ADE8(v37, v38);
    uint64_t v28 = dispatch thunk of DeviceActivityDataStoring.deleteData(olderThan:)();
    sub_10002AE2C((uint64_t)v37);
    if (*(void *)(v28 + 16))
    {
      type metadata accessor for Feature();
      if (static Feature.isDeviceActivityUIEnabled.getter())
      {
        if (qword_100095080 != -1) {
          swift_once();
        }
        (*(void (**)(uint64_t))(unk_1000973D0 + 32))(v28);
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1000950C0 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100022718(v29, (uint64_t)qword_100097478);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Successfully pruned local device activity data", v32, 2u);
      swift_slowDealloc();
    }

    ((void (*)(char *, uint64_t))v33[0])(v21, v23);
  }
}

uint64_t sub_10002D3C4(uint64_t a1, unint64_t a2, int a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v99 = a4;
  unint64_t v100 = a2;
  int v98 = a3;
  uint64_t v106 = a1;
  uint64_t v8 = sub_1000222D4(&qword_100095730);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v101 = (uint64_t)v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000222D4(&qword_100095D90);
  uint64_t v96 = *(void *)(v11 - 8);
  uint64_t v12 = *(void *)(v96 + 64);
  uint64_t v14 = __chkstk_darwin(v11 - 8, v13);
  uint64_t v15 = (char *)v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  uint64_t v97 = (uint64_t)v92 - v18;
  uint64_t v20 = __chkstk_darwin(v17, v19);
  uint64_t v103 = (uint64_t)v92 - v21;
  __chkstk_darwin(v20, v22);
  uint64_t v24 = (char *)v92 - v23;
  uint64_t v102 = type metadata accessor for Date();
  uint64_t v104 = *(void *)(v102 - 8);
  uint64_t v25 = *(void *)(v104 + 64);
  uint64_t v27 = __chkstk_darwin(v102, v26);
  uint64_t v95 = (char *)v92 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v27, v28);
  uint64_t v105 = (char *)v92 - v30;
  uint64_t v32 = __chkstk_darwin(v29, v31);
  uint64_t v34 = (char *)v92 - v33;
  __chkstk_darwin(v32, v35);
  char v37 = (char *)v92 - v36;
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = a5;
  *(void *)(v38 + 24) = a6;
  uint64_t v39 = qword_100095060;
  swift_retain();
  if (v39 != -1) {
    swift_once();
  }
  if (![(id)swift_getObjCClassFromMetadata() isAuthorized])
  {
    os_log_type_t v40 = a5;
    if (qword_1000950C0 != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    sub_100022718(v41, (uint64_t)qword_100097478);
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v42, v43)) {
      goto LABEL_29;
    }
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v44 = 0;
    os_log_type_t v45 = "Device Activity is not authorized, skipping device activity collection";
    goto LABEL_28;
  }
  if (v106 != 2) {
    goto LABEL_8;
  }
  if (qword_1000950B0 != -1) {
    swift_once();
  }
  if (byte_100097450)
  {
LABEL_8:
    if (qword_100095078 != -1) {
      swift_once();
    }
    sub_10002C528((uint64_t)&xmmword_1000973A0, (uint64_t)&v107, &qword_100095710);
    uint64_t v94 = v38;
    uint64_t v93 = a5;
    v92[1] = a6;
    if (v108)
    {
      sub_10002B17C(&v107, (uint64_t)v109);
    }
    else
    {
      uint64_t v110 = type metadata accessor for DeviceActivityDataStore();
      long long v111 = &protocol witness table for DeviceActivityDataStore;
      sub_10002B118(v109);
      DeviceActivityDataStore.init()();
      sub_10002BDA0((uint64_t)&v107, &qword_100095710);
    }
    sub_10002ADE8(v109, v110);
    dispatch thunk of DeviceActivityDataStoring.localStartDate()();
    uint64_t v46 = v104;
    uint64_t v47 = v102;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48))(v24, 1, v102) == 1)
    {
      sub_10002BDA0((uint64_t)v24, &qword_100095D90);
      sub_10002AE2C((uint64_t)v109);
      if (qword_1000950C0 != -1) {
        swift_once();
      }
      uint64_t v48 = type metadata accessor for Logger();
      sub_100022718(v48, (uint64_t)qword_100097478);
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.default.getter();
      BOOL v51 = os_log_type_enabled(v49, v50);
      uint64_t v52 = (uint64_t)v105;
      if (v51)
      {
        uint64_t v53 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Saving device activity collection start date", v53, 2u);
        swift_slowDealloc();
      }

      sub_10002C528((uint64_t)&xmmword_1000973A0, (uint64_t)&v107, &qword_100095710);
      if (v108)
      {
        sub_10002B17C(&v107, (uint64_t)v109);
      }
      else
      {
        uint64_t v110 = type metadata accessor for DeviceActivityDataStore();
        long long v111 = &protocol witness table for DeviceActivityDataStore;
        sub_10002B118(v109);
        DeviceActivityDataStore.init()();
        sub_10002BDA0((uint64_t)&v107, &qword_100095710);
      }
      sub_10002ADE8(v109, v110);
      static Date.now.getter();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v104 + 56))(v15, 0, 1, v47);
      dispatch thunk of DeviceActivityDataStoring.write(localStartDate:)();
      sub_10002BDA0((uint64_t)v15, &qword_100095D90);
      sub_10002AE2C((uint64_t)v109);
      uint64_t v66 = v103;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v37, v24, v47);
      sub_10002AE2C((uint64_t)v109);
      if (qword_1000950C0 != -1) {
        swift_once();
      }
      uint64_t v59 = type metadata accessor for Logger();
      sub_100022718(v59, (uint64_t)qword_100097478);
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v34, v37, v47);
      uint64_t v60 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v60, v61))
      {
        uint64_t v62 = (uint8_t *)swift_slowAlloc();
        v92[0] = swift_slowAlloc();
        v109[0] = v92[0];
        *(_DWORD *)uint64_t v62 = 136446210;
        uint64_t v63 = Date.debugDescription.getter();
        *(void *)&long long v107 = sub_100035724(v63, v64, v109);
        uint64_t v47 = v102;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        os_log_t v65 = *(void (**)(char *, uint64_t))(v104 + 8);
        v65(v34, v47);
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "Device activity collection has already started on %{public}s", v62, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        os_log_t v65 = *(void (**)(char *, uint64_t))(v46 + 8);
        v65(v34, v47);
      }
      v65(v37, v47);
      uint64_t v66 = v103;
      uint64_t v52 = (uint64_t)v105;
    }
    uint64_t v67 = v100;
    uint64_t v68 = v106;
    sub_1000238C8(v106, v66);
    static Date.now.getter();
    uint64_t v69 = sub_10002BDFC(v68, v67, v66, v52);
    if (v69)
    {
      uint64_t v106 = v69;
      uint64_t v70 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v101, 1, 1, v70);
      uint64_t v71 = v99;
      uint64_t v102 = *(void *)(v99 + 152);
      uint64_t v72 = v97;
      sub_10002C528(v66, v97, &qword_100095D90);
      uint64_t v73 = v104;
      unint64_t v74 = v95;
      (*(void (**)(char *, uint64_t, uint64_t))(v104 + 16))(v95, v52, v47);
      uint64_t v76 = sub_10002B194((unint64_t *)&unk_1000956E0, v75, (void (*)(uint64_t))type metadata accessor for _DeviceActivityCollector);
      unint64_t v77 = (*(unsigned __int8 *)(v96 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80);
      unint64_t v78 = (v12 + *(unsigned __int8 *)(v73 + 80) + v77) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
      unint64_t v100 = (v78 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v79 = (v78 + v25 + 23) & 0xFFFFFFFFFFFFFFF8;
      long long v80 = (char *)swift_allocObject();
      *((void *)v80 + 2) = v71;
      *((void *)v80 + 3) = v76;
      *((void *)v80 + 4) = v102;
      *((void *)v80 + 5) = v71;
      sub_10002C590(v72, (uint64_t)&v80[v77], &qword_100095D90);
      (*(void (**)(char *, char *, uint64_t))(v73 + 32))(&v80[v78], v74, v47);
      uint64_t v81 = &v80[v100];
      *(void *)uint64_t v81 = v106;
      v81[8] = v98 & 1;
      uint64_t v82 = (uint64_t (**)())&v80[v79];
      uint64_t v83 = (uint64_t (*)())v94;
      void *v82 = sub_10002F4E4;
      v82[1] = v83;
      swift_retain();
      swift_retain();
      swift_retain_n();
      uint64_t v84 = sub_1000384FC(v101, (uint64_t)&unk_100095848, (uint64_t)v80);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v105, v47);
      sub_10002BDA0(v103, &qword_100095D90);
      *(void *)(v71 + 152) = v84;
      swift_release();
    }
    else
    {
      if (qword_1000950C0 != -1) {
        swift_once();
      }
      uint64_t v85 = type metadata accessor for Logger();
      sub_100022718(v85, (uint64_t)qword_100097478);
      long long v86 = Logger.logObject.getter();
      os_log_type_t v87 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v86, v87))
      {
        os_log_type_t v88 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v88 = 0;
        _os_log_impl((void *)&_mh_execute_header, v86, v87, "No segment intervals need to be refreshed.", v88, 2u);
        swift_slowDealloc();
      }

      long long v89 = Logger.logObject.getter();
      os_log_type_t v90 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v89, v90))
      {
        uint64_t v91 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v91 = 0;
        _os_log_impl((void *)&_mh_execute_header, v89, v90, "Finished background activity to collect device activity.", v91, 2u);
        swift_slowDealloc();
      }

      v93(1);
      (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v52, v47);
      sub_10002BDA0(v66, &qword_100095D90);
    }
    return swift_release();
  }
  os_log_type_t v40 = a5;
  if (qword_1000950C0 != -1) {
    swift_once();
  }
  uint64_t v54 = type metadata accessor for Logger();
  sub_100022718(v54, (uint64_t)qword_100097478);
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v44 = 0;
    os_log_type_t v45 = "Not refreshing local device activity data for budget tracking";
LABEL_28:
    _os_log_impl((void *)&_mh_execute_header, v42, v43, v45, v44, 2u);
    swift_slowDealloc();
  }
LABEL_29:

  os_log_type_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Finished background activity to collect device activity.", v57, 2u);
    swift_slowDealloc();
  }

  v40(1);
  return swift_release();
}

uint64_t sub_10002E314(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v102 = a4;
  uint64_t v103 = a2;
  int v101 = a3;
  uint64_t v110 = a1;
  uint64_t v10 = sub_1000222D4(&qword_100095730);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v104 = (uint64_t)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1000222D4(&qword_100095D90);
  uint64_t v99 = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(v99 + 64);
  uint64_t v16 = __chkstk_darwin(v13 - 8, v15);
  uint64_t v17 = (char *)&v95 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v100 = (uint64_t)&v95 - v20;
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v106 = (uint64_t)&v95 - v23;
  __chkstk_darwin(v22, v24);
  uint64_t v26 = (char *)&v95 - v25;
  uint64_t v109 = type metadata accessor for Date();
  uint64_t v107 = *(void *)(v109 - 8);
  uint64_t v27 = *(void *)(v107 + 64);
  uint64_t v29 = __chkstk_darwin(v109, v28);
  int v98 = (char *)&v95 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v29, v30);
  uint64_t v108 = (char *)&v95 - v32;
  uint64_t v34 = __chkstk_darwin(v31, v33);
  uint64_t v36 = (char *)&v95 - v35;
  __chkstk_darwin(v34, v37);
  uint64_t v39 = (char *)&v95 - v38;
  os_log_type_t v40 = (void (*)())swift_allocObject();
  *((void *)v40 + 2) = a5;
  *((void *)v40 + 3) = a6;
  *((void *)v40 + 4) = a7;
  uint64_t v105 = a6;
  sub_10002CAF0(a5);
  uint64_t v41 = qword_100095060;
  swift_unknownObjectRetain();
  if (v41 != -1) {
    swift_once();
  }
  if (![(id)swift_getObjCClassFromMetadata() isAuthorized])
  {
    uint64_t v42 = (void (*)(void))a5;
    if (qword_1000950C0 != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    sub_100022718(v43, (uint64_t)qword_100097478);
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v44, v45)) {
      goto LABEL_41;
    }
    uint64_t v46 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v46 = 0;
    uint64_t v47 = "Device Activity is not authorized, skipping device activity collection";
    goto LABEL_40;
  }
  if (v110 != 2) {
    goto LABEL_8;
  }
  if (qword_1000950B0 != -1) {
    swift_once();
  }
  if (byte_100097450)
  {
LABEL_8:
    if (qword_100095078 != -1) {
      swift_once();
    }
    sub_10002C528((uint64_t)&xmmword_1000973A0, (uint64_t)&v111, &qword_100095710);
    uint64_t v97 = v40;
    uint64_t v96 = (void (*)(void))a5;
    if (v112)
    {
      sub_10002B17C(&v111, (uint64_t)v113);
    }
    else
    {
      uint64_t v114 = type metadata accessor for DeviceActivityDataStore();
      long long v115 = &protocol witness table for DeviceActivityDataStore;
      sub_10002B118(v113);
      DeviceActivityDataStore.init()();
      sub_10002BDA0((uint64_t)&v111, &qword_100095710);
    }
    sub_10002ADE8(v113, v114);
    dispatch thunk of DeviceActivityDataStoring.localStartDate()();
    uint64_t v48 = v107;
    uint64_t v49 = v109;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48))(v26, 1, v109) == 1)
    {
      sub_10002BDA0((uint64_t)v26, &qword_100095D90);
      sub_10002AE2C((uint64_t)v113);
      if (qword_1000950C0 != -1) {
        swift_once();
      }
      uint64_t v50 = type metadata accessor for Logger();
      sub_100022718(v50, (uint64_t)qword_100097478);
      BOOL v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v51, v52))
      {
        uint64_t v53 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Saving device activity collection start date", v53, 2u);
        swift_slowDealloc();
      }

      sub_10002C528((uint64_t)&xmmword_1000973A0, (uint64_t)&v111, &qword_100095710);
      if (v112)
      {
        sub_10002B17C(&v111, (uint64_t)v113);
      }
      else
      {
        uint64_t v114 = type metadata accessor for DeviceActivityDataStore();
        long long v115 = &protocol witness table for DeviceActivityDataStore;
        sub_10002B118(v113);
        DeviceActivityDataStore.init()();
        sub_10002BDA0((uint64_t)&v111, &qword_100095710);
      }
      uint64_t v94 = (uint64_t)v108;
      sub_10002ADE8(v113, v114);
      static Date.now.getter();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v107 + 56))(v17, 0, 1, v109);
      dispatch thunk of DeviceActivityDataStoring.write(localStartDate:)();
      sub_10002BDA0((uint64_t)v17, &qword_100095D90);
      sub_10002AE2C((uint64_t)v113);
      uint64_t v93 = v106;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v39, v26, v49);
      sub_10002AE2C((uint64_t)v113);
      if (qword_1000950C0 != -1) {
        swift_once();
      }
      uint64_t v86 = type metadata accessor for Logger();
      sub_100022718(v86, (uint64_t)qword_100097478);
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v36, v39, v49);
      os_log_type_t v87 = Logger.logObject.getter();
      os_log_type_t v88 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v87, v88))
      {
        long long v89 = (uint8_t *)swift_slowAlloc();
        uint64_t v95 = swift_slowAlloc();
        v113[0] = v95;
        *(_DWORD *)long long v89 = 136446210;
        uint64_t v90 = Date.debugDescription.getter();
        *(void *)&long long v111 = sub_100035724(v90, v91, v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        id v92 = *(void (**)(char *, uint64_t))(v107 + 8);
        uint64_t v49 = v109;
        v92(v36, v109);
        _os_log_impl((void *)&_mh_execute_header, v87, v88, "Device activity collection has already started on %{public}s", v89, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        id v92 = *(void (**)(char *, uint64_t))(v48 + 8);
        v92(v36, v49);
      }
      v92(v39, v49);
      uint64_t v93 = v106;
      uint64_t v94 = (uint64_t)v108;
    }
    uint64_t v54 = v103;
    uint64_t v55 = v110;
    sub_1000238C8(v110, v93);
    static Date.now.getter();
    uint64_t v56 = sub_10002BDFC(v55, v54, v93, v94);
    if (v56)
    {
      uint64_t v110 = v56;
      uint64_t v57 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v104, 1, 1, v57);
      uint64_t v58 = v102;
      uint64_t v105 = *(void *)(v102 + 152);
      uint64_t v59 = v100;
      sub_10002C528(v93, v100, &qword_100095D90);
      uint64_t v60 = v107;
      os_log_type_t v61 = v98;
      (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v98, v94, v109);
      uint64_t v63 = sub_10002B194((unint64_t *)&unk_1000956E0, v62, (void (*)(uint64_t))type metadata accessor for _DeviceActivityCollector);
      unint64_t v64 = (*(unsigned __int8 *)(v99 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80);
      unint64_t v65 = (v14 + *(unsigned __int8 *)(v60 + 80) + v64) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
      unint64_t v66 = (v65 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v67 = (v65 + v27 + 23) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v68 = (char *)swift_allocObject();
      *((void *)v68 + 2) = v58;
      *((void *)v68 + 3) = v63;
      *((void *)v68 + 4) = v105;
      *((void *)v68 + 5) = v58;
      sub_10002C590(v59, (uint64_t)&v68[v64], &qword_100095D90);
      uint64_t v69 = v109;
      (*(void (**)(char *, char *, uint64_t))(v60 + 32))(&v68[v65], v61, v109);
      uint64_t v70 = &v68[v66];
      *(void *)uint64_t v70 = v110;
      v70[8] = v101 & 1;
      uint64_t v71 = (void (**)())&v68[v67];
      uint64_t v72 = v97;
      *uint64_t v71 = sub_10002F2B8;
      v71[1] = v72;
      swift_retain();
      swift_retain();
      swift_retain_n();
      uint64_t v73 = sub_1000384FC(v104, (uint64_t)&unk_100095818, (uint64_t)v68);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v108, v69);
      sub_10002BDA0(v106, &qword_100095D90);
      *(void *)(v58 + 152) = v73;
      swift_release();
    }
    else
    {
      if (qword_1000950C0 != -1) {
        swift_once();
      }
      uint64_t v74 = type metadata accessor for Logger();
      sub_100022718(v74, (uint64_t)qword_100097478);
      uint64_t v75 = Logger.logObject.getter();
      os_log_type_t v76 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v75, v76))
      {
        unint64_t v77 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v77 = 0;
        _os_log_impl((void *)&_mh_execute_header, v75, v76, "No segment intervals need to be refreshed.", v77, 2u);
        swift_slowDealloc();
      }

      unint64_t v78 = Logger.logObject.getter();
      os_log_type_t v79 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v78, v79))
      {
        long long v80 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v80 = 0;
        _os_log_impl((void *)&_mh_execute_header, v78, v79, "Finished collecting local device activity data", v80, 2u);
        swift_slowDealloc();
      }

      if (v96) {
        v96();
      }
      (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v94, v109);
      sub_10002BDA0(v93, &qword_100095D90);
    }
    return swift_release();
  }
  uint64_t v42 = (void (*)(void))a5;
  if (qword_1000950C0 != -1) {
    swift_once();
  }
  uint64_t v82 = type metadata accessor for Logger();
  sub_100022718(v82, (uint64_t)qword_100097478);
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v46 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v46 = 0;
    uint64_t v47 = "Not refreshing local device activity data for budget tracking";
LABEL_40:
    _os_log_impl((void *)&_mh_execute_header, v44, v45, v47, v46, 2u);
    swift_slowDealloc();
  }
LABEL_41:

  uint64_t v83 = Logger.logObject.getter();
  os_log_type_t v84 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v83, v84))
  {
    uint64_t v85 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v85 = 0;
    _os_log_impl((void *)&_mh_execute_header, v83, v84, "Finished collecting local device activity data", v85, 2u);
    swift_slowDealloc();
  }

  if (v42) {
    v42();
  }
  return swift_release();
}

uint64_t sub_10002F270()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_unknownObjectRelease();
  return _swift_deallocObject(v0, 40, 7);
}

void sub_10002F2B8()
{
  sub_10002535C(*(void (**)(void))(v0 + 16));
}

uint64_t sub_10002F2C8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002F2D8(uint64_t a1, uint64_t a2)
{
  return sub_100024704(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_10002F2E0()
{
  swift_unknownObjectRelease();
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10002F318()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10002F710;
  return _swift_task_switch(sub_100024C54);
}

uint64_t sub_10002F3C0()
{
  swift_unknownObjectRelease();
  swift_release();
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10002F400()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 40);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_10002F710;
  *(_OWORD *)(v2 + 16) = v3;
  return _swift_task_switch(sub_1000248F4);
}

uint64_t sub_10002F4AC()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002F4E4()
{
  return sub_100024B40(*(uint64_t (**)(uint64_t))(v0 + 16));
}

uint64_t sub_10002F4F0()
{
  uint64_t v1 = *(void *)(sub_1000222D4(&qword_100095D90) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  if (!v9) {
    v10(v0 + v3, v5);
  }
  uint64_t v11 = (v3 + v4 + v7) & ~v7;
  unint64_t v12 = (v11 + v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v10(v0 + v11, v5);
  swift_bridgeObjectRelease();
  swift_release();
  return _swift_deallocObject(v0, v12 + 16, v2 | v7 | 7);
}

ValueMetadata *type metadata accessor for DeviceActivityCollector.CollectionOptions()
{
  return &type metadata for DeviceActivityCollector.CollectionOptions;
}

unint64_t sub_10002F6B4()
{
  unint64_t result = qword_100095850;
  if (!qword_100095850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100095850);
  }
  return result;
}

uint64_t sub_10002F718()
{
  uint64_t result = sub_100023228(0, &qword_100095900);
  qword_1000973D8 = result;
  unk_1000973E0 = &off_10008C008;
  return result;
}

uint64_t sub_10002F758(uint64_t a1)
{
  return sub_10002FAB8(a1, (uint64_t (*)(void))&type metadata accessor for Application, &OBJC_IVAR____TtC18UsageTrackingAgent19DeviceActivityQuery_bundleIdentifiers, (void (*)(uint64_t, uint64_t))&Application.init(bundleIdentifier:), (void (*)(char *, char *))sub_100063BBC);
}

void sub_10002F7A0()
{
  uint64_t v25 = type metadata accessor for ActivityCategory();
  uint64_t v2 = __chkstk_darwin(v25, v1);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2, v5);
  uint64_t v8 = (char *)&v23 - v7;
  uint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtC18UsageTrackingAgent19DeviceActivityQuery_categoryIdentifiers);
  uint64_t v10 = *(void *)(v9 + 56);
  uint64_t v23 = v9 + 56;
  uint64_t v26 = &_swiftEmptySetSingleton;
  uint64_t v11 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v24 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v14 = (void (**)(char *, uint64_t))(v6 + 8);
  swift_bridgeObjectRetain_n();
  int64_t v15 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v17 = v16 | (v15 << 6);
      goto LABEL_5;
    }
    int64_t v20 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v24) {
      goto LABEL_25;
    }
    unint64_t v21 = *(void *)(v23 + 8 * v20);
    ++v15;
    if (!v21)
    {
      int64_t v15 = v20 + 1;
      if (v20 + 1 >= v24) {
        goto LABEL_25;
      }
      unint64_t v21 = *(void *)(v23 + 8 * v15);
      if (!v21)
      {
        int64_t v15 = v20 + 2;
        if (v20 + 2 >= v24) {
          goto LABEL_25;
        }
        unint64_t v21 = *(void *)(v23 + 8 * v15);
        if (!v21)
        {
          int64_t v15 = v20 + 3;
          if (v20 + 3 >= v24) {
            goto LABEL_25;
          }
          unint64_t v21 = *(void *)(v23 + 8 * v15);
          if (!v21)
          {
            int64_t v15 = v20 + 4;
            if (v20 + 4 >= v24) {
              goto LABEL_25;
            }
            unint64_t v21 = *(void *)(v23 + 8 * v15);
            if (!v21) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    unint64_t v13 = (v21 - 1) & v21;
    unint64_t v17 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_5:
    uint64_t v18 = *(void **)(*(void *)(v9 + 48) + 8 * v17);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v19 = v18;
    ActivityCategory.init(identifier:localizedDisplayName:)();
    sub_100063EE0((uint64_t)v8, v4);
    (*v14)(v8, v25);
  }
  int64_t v22 = v20 + 5;
  if (v22 >= v24)
  {
LABEL_25:
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v21 = *(void *)(v23 + 8 * v22);
  if (v21)
  {
    int64_t v15 = v22;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v15 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v15 >= v24) {
      goto LABEL_25;
    }
    unint64_t v21 = *(void *)(v23 + 8 * v15);
    ++v22;
    if (v21) {
      goto LABEL_24;
    }
  }
LABEL_27:
  __break(1u);
}

uint64_t sub_10002FA70(uint64_t a1)
{
  return sub_10002FAB8(a1, (uint64_t (*)(void))&type metadata accessor for WebDomain, &OBJC_IVAR____TtC18UsageTrackingAgent19DeviceActivityQuery_domains, (void (*)(uint64_t, uint64_t))&WebDomain.init(domain:), (void (*)(char *, char *))sub_100064204);
}

uint64_t sub_10002FAB8(uint64_t a1, uint64_t (*a2)(void), void *a3, void (*a4)(uint64_t, uint64_t), void (*a5)(char *, char *))
{
  uint64_t v37 = a5;
  uint64_t v8 = v5;
  uint64_t v10 = a2(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  int64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v35 - v17;
  if (a1)
  {
    uint64_t v19 = a1;
  }
  else
  {
    uint64_t v19 = *(void *)(v8 + *a3);
    swift_bridgeObjectRetain();
  }
  uint64_t v20 = *(void *)(v19 + 56);
  uint64_t v35 = v19 + 56;
  uint64_t v38 = &_swiftEmptySetSingleton;
  uint64_t v21 = 1 << *(unsigned char *)(v19 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v20;
  int64_t v36 = (unint64_t)(v21 + 63) >> 6;
  int64_t v24 = (void (**)(char *, uint64_t))(v11 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v26 = 0;
  while (1)
  {
    if (v23)
    {
      unint64_t v27 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      unint64_t v28 = v27 | (v26 << 6);
      goto LABEL_8;
    }
    int64_t v32 = v26 + 1;
    if (__OFADD__(v26, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v32 >= v36) {
      goto LABEL_28;
    }
    unint64_t v33 = *(void *)(v35 + 8 * v32);
    ++v26;
    if (!v33)
    {
      int64_t v26 = v32 + 1;
      if (v32 + 1 >= v36) {
        goto LABEL_28;
      }
      unint64_t v33 = *(void *)(v35 + 8 * v26);
      if (!v33)
      {
        int64_t v26 = v32 + 2;
        if (v32 + 2 >= v36) {
          goto LABEL_28;
        }
        unint64_t v33 = *(void *)(v35 + 8 * v26);
        if (!v33)
        {
          int64_t v26 = v32 + 3;
          if (v32 + 3 >= v36) {
            goto LABEL_28;
          }
          unint64_t v33 = *(void *)(v35 + 8 * v26);
          if (!v33)
          {
            int64_t v26 = v32 + 4;
            if (v32 + 4 >= v36) {
              goto LABEL_28;
            }
            unint64_t v33 = *(void *)(v35 + 8 * v26);
            if (!v33) {
              break;
            }
          }
        }
      }
    }
LABEL_27:
    unint64_t v23 = (v33 - 1) & v33;
    unint64_t v28 = __clz(__rbit64(v33)) + (v26 << 6);
LABEL_8:
    uint64_t v29 = (uint64_t *)(*(void *)(v19 + 48) + 16 * v28);
    uint64_t v30 = *v29;
    uint64_t v31 = v29[1];
    swift_bridgeObjectRetain_n();
    a4(v30, v31);
    v37(v18, v15);
    (*v24)(v18, v10);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v34 = v32 + 5;
  if (v34 >= v36)
  {
LABEL_28:
    swift_release();
    swift_bridgeObjectRelease();
    return (uint64_t)v38;
  }
  unint64_t v33 = *(void *)(v35 + 8 * v34);
  if (v33)
  {
    int64_t v26 = v34;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v26 = v34 + 1;
    if (__OFADD__(v34, 1)) {
      break;
    }
    if (v26 >= v36) {
      goto LABEL_28;
    }
    unint64_t v33 = *(void *)(v35 + 8 * v26);
    ++v34;
    if (v33) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10002FDB4()
{
  uint64_t result = type metadata accessor for DeviceActivityAuthorization();
  qword_1000973E8 = result;
  return result;
}

uint64_t sub_10002FDD8()
{
  id v0 = [self sharedCategories];
  uint64_t result = sub_100023228(0, &qword_100095930);
  qword_100097408 = result;
  unk_100097410 = &off_1000952E8;
  qword_1000973F0 = (uint64_t)v0;
  return result;
}

uint64_t sub_10002FE48@<X0>(uint64_t *a1@<X8>)
{
  if (qword_1000950A0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  sub_10002C528((uint64_t)&xmmword_100097418, (uint64_t)&v6, &qword_100095710);
  if (v7)
  {
    sub_10002B17C(&v6, (uint64_t)&v8);
    return sub_10002B17C(&v8, (uint64_t)a1);
  }
  else
  {
    sub_10002BDA0((uint64_t)&v6, &qword_100095710);
    uint64_t v3 = type metadata accessor for DeviceActivityDataStore();
    a1[3] = v3;
    a1[4] = (uint64_t)&protocol witness table for DeviceActivityDataStore;
    uint64_t v4 = sub_10002B118(a1);
    DeviceActivityDataStore.init()();
    uint64_t v9 = v3;
    uint64_t v10 = &protocol witness table for DeviceActivityDataStore;
    uint64_t v5 = sub_10002B118((uint64_t *)&v8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v3 - 8) + 16))(v5, v4, v3);
    swift_beginAccess();
    sub_1000366D4((uint64_t)&v8, (uint64_t)&xmmword_100097418, &qword_100095710);
    return swift_endAccess();
  }
}

double sub_10002FFAC()
{
  qword_100097438 = 0;
  double result = 0.0;
  xmmword_100097418 = 0u;
  unk_100097428 = 0u;
  return result;
}

uint64_t sub_10002FFC4()
{
  uint64_t result = type metadata accessor for EventStreams();
  qword_100097440 = result;
  *(void *)algn_100097448 = &off_10008B0D8;
  return result;
}

uint64_t sub_10002FFF4()
{
  type metadata accessor for DeviceActivityQuery();
  uint64_t result = sub_100030020();
  byte_100097450 = result & 1;
  return result;
}

uint64_t sub_100030020()
{
  if (qword_100095090 != -1) {
LABEL_29:
  }
    swift_once();
  uint64_t result = (uint64_t)[(id)swift_getObjCClassFromMetadata() isAuthorized];
  if (result)
  {
    sub_10002FE48(v21);
    sub_10002ADE8(v21, v21[3]);
    uint64_t v1 = dispatch thunk of DeviceActivityDataStoring.deviceIdentifierByCoreDuetIdentifier.getter();
    sub_10002AE2C((uint64_t)v21);
    if (qword_1000950A8 != -1) {
      swift_once();
    }
    uint64_t v2 = (void *)(*(uint64_t (**)(void))(*(void *)algn_100097448 + 56))();
    uint64_t v3 = v2;
    uint64_t v4 = v2[2];
    if (v4)
    {
      uint64_t v6 = v2[4];
      unint64_t v5 = v2[5];
      uint64_t v7 = *(void *)(v1 + 16);
      swift_bridgeObjectRetain();
      if (v7)
      {
        swift_bridgeObjectRetain();
        sub_100035E24(v6, v5);
        if (v8)
        {
          uint64_t v9 = 0;
          uint64_t v10 = v3 + 7;
          uint64_t v11 = v4 - 1;
          do
          {
            swift_bridgeObjectRelease_n();
            if (v11 == v9) {
              goto LABEL_14;
            }
            if ((unint64_t)++v9 >= v3[2])
            {
              __break(1u);
              goto LABEL_29;
            }
            uint64_t v6 = *(v10 - 1);
            unint64_t v5 = *v10;
            if (!*(void *)(v1 + 16))
            {
              swift_bridgeObjectRetain();
              goto LABEL_20;
            }
            v10 += 2;
            swift_bridgeObjectRetain_n();
            sub_100035E24(v6, v5);
          }
          while ((v12 & 1) != 0);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_20:
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      if (qword_1000950B8 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_100022718(v17, (uint64_t)qword_100097460);
      swift_bridgeObjectRetain();
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        v21[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = 136446210;
        swift_bridgeObjectRetain();
        sub_100035724(v6, v5, v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "CoreDuet identifier is not tracked in DeviceActivity database: %{public}s", v20, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      return 0;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1000950B8 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100022718(v13, (uint64_t)qword_100097460);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "All CoreDuet identifiers are tracked in DeviceActivity database", v16, 2u);
      swift_slowDealloc();
    }

    return 1;
  }
  return result;
}

void sub_100030620(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v72 = a2;
  uint64_t v73 = a4;
  uint64_t v74 = a1;
  uint64_t v7 = type metadata accessor for DeviceActivityFilter.SegmentInterval();
  uint64_t v68 = *(void *)(v7 - 8);
  uint64_t v69 = v7;
  __chkstk_darwin(v7, v8);
  uint64_t v71 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchTime();
  uint64_t v66 = *(void *)(v10 - 8);
  uint64_t v67 = v10;
  uint64_t v12 = __chkstk_darwin(v10, v11);
  unint64_t v64 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  unint64_t v65 = (char *)&v61 - v15;
  uint64_t v16 = dispatch_group_create();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = 0;
  uint64_t v62 = (uint64_t *)(v17 + 16);
  uint64_t v18 = *(void *)(v4 + OBJC_IVAR____TtC18UsageTrackingAgent19DeviceActivityQuery_bundleIdentifiers);
  uint64_t v19 = *(void *)(v18 + 16);
  uint64_t v75 = v4;
  if (v19)
  {
    dispatch_group_enter(v16);
    uint64_t v20 = a3[3];
    uint64_t v21 = a3[4];
    sub_10002ADE8(a3, v20);
    uint64_t v22 = swift_bridgeObjectRetain();
    unint64_t v23 = sub_1000365DC(v22);
    swift_bridgeObjectRelease();
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = v17;
    *(void *)(v24 + 24) = v16;
    uint64_t v25 = (void *)swift_allocObject();
    uint64_t v70 = a3;
    int64_t v26 = v16;
    unint64_t v27 = v25;
    void v25[2] = v20;
    v25[3] = v21;
    v25[4] = sub_100036AFC;
    v25[5] = v24;
    unint64_t v28 = *(void (**)(void *, uint64_t (*)(uint64_t, uint64_t), void *, uint64_t, uint64_t))(v21 + 48);
    swift_retain();
    uint64_t v29 = v26;
    v28(v23, sub_100036B58, v27, v20, v21);
    uint64_t v5 = v75;
    swift_release();
    uint64_t v16 = v26;
    a3 = v70;
    swift_release();
  }
  uint64_t v63 = v18;
  uint64_t v70 = (void *)v17;
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = 0;
  os_log_type_t v61 = (uint64_t *)(v30 + 16);
  uint64_t v31 = *(void *)(v5 + OBJC_IVAR____TtC18UsageTrackingAgent19DeviceActivityQuery_domains);
  if (*(void *)(v31 + 16))
  {
    dispatch_group_enter(v16);
    uint64_t v33 = a3[3];
    uint64_t v32 = a3[4];
    sub_10002ADE8(a3, v33);
    uint64_t v34 = swift_bridgeObjectRetain();
    uint64_t v35 = sub_1000365DC(v34);
    swift_bridgeObjectRelease();
    int64_t v36 = v16;
    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + 16) = v30;
    *(void *)(v37 + 24) = v36;
    uint64_t v38 = (void *)swift_allocObject();
    v38[2] = v33;
    v38[3] = v32;
    v38[4] = sub_100036BA8;
    v38[5] = v37;
    uint64_t v39 = *(void (**)(void *, uint64_t (*)(uint64_t, uint64_t), void *, uint64_t, uint64_t))(v32 + 56);
    os_log_type_t v40 = v36;
    swift_retain();
    uint64_t v41 = v33;
    uint64_t v5 = v75;
    v39(v35, sub_1000370B4, v38, v41, v32);
    uint64_t v16 = v36;
    swift_release();
    swift_release();
  }
  uint64_t v42 = v64;
  static DispatchTime.now()();
  uint64_t v43 = v65;
  + infix(_:_:)();
  uint64_t v44 = v67;
  os_log_type_t v45 = *(void (**)(char *, uint64_t))(v66 + 8);
  v45(v42, v67);
  OS_dispatch_group.wait(timeout:)();
  v45(v43, v44);
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    if (qword_1000950B8 != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    sub_100022718(v46, (uint64_t)qword_100097460);
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Timed out waiting to categorize applications and web domains for filter", v49, 2u);
      swift_slowDealloc();
    }

    uint64_t v50 = v5 + OBJC_IVAR____TtC18UsageTrackingAgent19DeviceActivityQuery_interval;
    uint64_t v51 = type metadata accessor for DateInterval();
    os_log_type_t v52 = v71;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v51 - 8) + 16))(v71, v50, v51);
    (*(void (**)(char *, void, uint64_t))(v68 + 104))(v52, enum case for DeviceActivityFilter.SegmentInterval.hourly(_:), v69);
    swift_bridgeObjectRetain();
    sub_10002F758(0);
    sub_10002F7A0();
    sub_10002FA70(0);
    DeviceActivityFilter.init(segment:userAltDSID:deviceIdentifier:untokenizedApplications:untokenizedCategories:untokenizedWebDomains:)();

    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v76 = v31;
    v77[0] = v63;
    uint64_t v53 = v62;
    swift_beginAccess();
    uint64_t v54 = *v53;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v54)
    {
      swift_bridgeObjectRetain();
      sub_100036BCC((uint64_t)v77, (uint64_t)&v76, v54);
      swift_bridgeObjectRelease();
    }
    uint64_t v55 = v61;
    swift_beginAccess();
    uint64_t v56 = *v55;
    if (v56)
    {
      swift_bridgeObjectRetain();
      sub_100036BCC((uint64_t)v77, (uint64_t)&v76, v56);
      swift_bridgeObjectRelease();
    }
    uint64_t v57 = v5 + OBJC_IVAR____TtC18UsageTrackingAgent19DeviceActivityQuery_interval;
    uint64_t v58 = type metadata accessor for DateInterval();
    uint64_t v59 = v71;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v58 - 8) + 16))(v71, v57, v58);
    (*(void (**)(char *, void, uint64_t))(v68 + 104))(v59, enum case for DeviceActivityFilter.SegmentInterval.hourly(_:), v69);
    uint64_t v60 = v77[0];
    swift_bridgeObjectRetain();
    sub_10002F758(v60);
    swift_bridgeObjectRelease();
    sub_10002F7A0();
    sub_10002FA70(v76);
    swift_bridgeObjectRelease();
    DeviceActivityFilter.init(segment:userAltDSID:deviceIdentifier:untokenizedApplications:untokenizedCategories:untokenizedWebDomains:)();
    swift_release();
    swift_release();
  }
}

uint64_t sub_100030D88(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = a1;
  if (a1)
  {
    swift_getAssociatedTypeWitness();
    sub_1000222D4(&qword_1000959B8);
    uint64_t v5 = _dictionaryUpCast<A, B, C, D>(_:)();
  }
  a3(v5, a2);
  return swift_bridgeObjectRelease();
}

void sub_100030E4C(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4, const char *a5)
{
  if (a1)
  {
    swift_beginAccess();
    *(void *)(a3 + 16) = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_1000950B8 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100022718(v10, (uint64_t)qword_100097460);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      v16[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446210;
      uint64_t v17 = a2;
      swift_errorRetain();
      sub_1000222D4(&qword_1000959B0);
      uint64_t v14 = String.init<A>(describing:)();
      uint64_t v17 = sub_100035724(v14, v15, v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, a5, v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  dispatch_group_leave(a4);
}

id sub_100031098()
{
  return sub_100034FD8(0, type metadata accessor for DeviceActivityQuery);
}

uint64_t sub_100031154()
{
  return type metadata accessor for DeviceActivityQuery();
}

uint64_t type metadata accessor for DeviceActivityQuery()
{
  uint64_t result = qword_1000958A0;
  if (!qword_1000958A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000311A8()
{
  uint64_t result = type metadata accessor for DateInterval();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10003124C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC18UsageTrackingAgent22DeviceActivityQuerying____lazy_storage___dataSource;
  swift_beginAccess();
  sub_10002C528(v3, (uint64_t)&v6, &qword_100095950);
  if (!v7)
  {
    sub_10002BDA0((uint64_t)&v6, &qword_100095950);
    uint64_t v7 = type metadata accessor for DeviceActivityDataSource();
    uint64_t v8 = &off_10008AEB0;
    sub_10002B118((uint64_t *)&v6);
    DeviceActivityDataSource.init()();
    sub_100022928((uint64_t)&v6, (uint64_t)v5);
    swift_beginAccess();
    sub_1000366D4((uint64_t)v5, v3, &qword_100095950);
    swift_endAccess();
  }
  return sub_10002B17C(&v6, a1);
}

uint64_t sub_100031334@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC18UsageTrackingAgent22DeviceActivityQuerying____lazy_storage___usageQuerying;
  swift_beginAccess();
  sub_10002C528(v3, (uint64_t)&v10, &qword_100095948);
  if (!v11)
  {
    sub_10002BDA0((uint64_t)&v10, &qword_100095948);
    uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(v1 + OBJC_IVAR____TtC18UsageTrackingAgent22DeviceActivityQuerying__query + 8)
                              + 8))();
    uint64_t v6 = v5;
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    uint64_t v11 = v4;
    uint64_t v12 = v5;
    sub_10002B118((uint64_t *)&v10);
    v7(v4, v6);
    sub_100022928((uint64_t)&v10, (uint64_t)v9);
    swift_beginAccess();
    sub_1000366D4((uint64_t)v9, v3, &qword_100095948);
    swift_endAccess();
  }
  return sub_10002B17C(&v10, a1);
}

uint64_t sub_100031464(char *a1)
{
  uint64_t v3 = type metadata accessor for _DeviceActivityData.WebDomainActivity();
  uint64_t v135 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for _DeviceActivityData.ApplicationActivity();
  uint64_t v134 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  id v133 = (char *)v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = type metadata accessor for _DeviceActivityData.CategoryActivity();
  uint64_t v146 = *(void *)(v136 - 8);
  __chkstk_darwin(v136, v10);
  id v138 = (char *)v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for _DeviceActivityData.ActivitySegment();
  uint64_t v147 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  id v143 = (char *)v105 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1000222D4(&qword_100095938);
  __chkstk_darwin(v15 - 8, v16);
  id v148 = (char *)v105 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = sub_1000222D4(&qword_100095940);
  unint64_t v145 = *(void *)(v128 - 8);
  __chkstk_darwin(v128, v18);
  id v127 = (char *)v105 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = type metadata accessor for _DeviceActivityData();
  uint64_t v115 = *(void *)(v118 - 8);
  __chkstk_darwin(v118, v20);
  long long v117 = (char *)v105 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = type metadata accessor for _DeviceActivityData.User();
  uint64_t v22 = *(void (***)(char *, uint64_t))(v149 - 8);
  __chkstk_darwin(v149, v23);
  uint64_t v25 = (char *)v105 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = type metadata accessor for DeviceActivityFilter();
  uint64_t v112 = *(void *)(v113 - 8);
  __chkstk_darwin(v113, v26);
  long long v116 = (void (**)(char *, uint64_t))((char *)v105 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v150 = v1;
  if (((*(uint64_t (**)(void))(*(void *)(v1 + OBJC_IVAR____TtC18UsageTrackingAgent22DeviceActivityQuerying__query + 8)
                             + 16))() & 1) == 0)
  {
    if (qword_1000950B8 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    sub_100022718(v39, (uint64_t)qword_100097460);
    os_log_type_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Falling back to CoreDuet streams for budget tracking", v42, 2u);
      swift_slowDealloc();
    }

    sub_100031334((uint64_t)&v151);
    uint64_t v43 = v152;
    uint64_t v44 = v153;
    sub_10002ADE8(&v151, v152);
    uint64_t isa = (*(uint64_t (**)(void, void, void, char *, uint64_t, uint64_t))(v44 + 16))(*(void *)&a1[OBJC_IVAR____TtC18UsageTrackingAgent19DeviceActivityQuery_bundleIdentifiers], *(void *)&a1[OBJC_IVAR____TtC18UsageTrackingAgent19DeviceActivityQuery_domains], *(void *)&a1[OBJC_IVAR____TtC18UsageTrackingAgent19DeviceActivityQuery_categoryIdentifiers], &a1[OBJC_IVAR____TtC18UsageTrackingAgent19DeviceActivityQuery_interval], v43, v44);
    sub_10002AE2C((uint64_t)&v151);
    return isa;
  }
  uint64_t v126 = v12;
  id v131 = v6;
  uint64_t v132 = v3;
  if (qword_1000950B8 != -1) {
LABEL_63:
  }
    swift_once();
  id v120 = a1;
  uint64_t v28 = type metadata accessor for Logger();
  sub_100022718(v28, (uint64_t)qword_100097460);
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Using DeviceActivity database for budget tracking", v31, 2u);
    swift_slowDealloc();
  }

  sub_10003124C((uint64_t)&v151);
  sub_10002ADE8(&v151, v152);
  DeviceActivityDataSource.localUser.getter();
  uint64_t isa = _DeviceActivityData.User.altDSID.getter();
  uint64_t v34 = v33;
  v22[1](v25, v149);
  id v35 = [self sharedCategories];
  v154[3] = sub_100023228(0, &qword_100095930);
  v154[4] = &off_1000952E8;
  v154[0] = v35;
  uint64_t v22 = v116;
  sub_100030620(isa, v34, v154, (uint64_t)v116);
  swift_bridgeObjectRelease();
  sub_10002AE2C((uint64_t)v154);
  sub_10002AE2C((uint64_t)&v151);
  sub_10003124C((uint64_t)&v151);
  sub_10002ADE8(&v151, v152);
  id v36 = v155;
  uint64_t v37 = DeviceActivityDataSource.activity(filteredBy:)();
  uint64_t v38 = v136;
  a1 = v138;
  if (v36)
  {
    (*(void (**)(void, uint64_t))(v112 + 8))(v22, v113);
    sub_10002AE2C((uint64_t)&v151);
    return isa;
  }
  uint64_t v46 = v37;
  sub_10002AE2C((uint64_t)&v151);
  uint64_t v109 = *(void *)(v46 + 16);
  if (!v109) {
    goto LABEL_59;
  }
  v105[1] = 0;
  unint64_t v47 = 0;
  unint64_t v48 = (*(unsigned __int8 *)(v115 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80);
  uint64_t v119 = OBJC_IVAR____TtC18UsageTrackingAgent19DeviceActivityQuery_categoryIdentifiers;
  unint64_t v111 = v46 + v48;
  uint64_t v110 = v115 + 16;
  id v125 = (unsigned int (**)(char *, uint64_t, uint64_t))(v147 + 48);
  id v123 = (void (**)(char *, char *, uint64_t))(v147 + 32);
  uint64_t v142 = v146 + 16;
  id v141 = (void (**)(char *, uint64_t))(v146 + 8);
  uint64_t v49 = (void (**)(char *, uint64_t))(v134 + 8);
  uint64_t v22 = (void (**)(char *, uint64_t))(v135 + 8);
  id v121 = (void (**)(char *, uint64_t))(v147 + 8);
  uint64_t v107 = (void (**)(char *, uint64_t))(v145 + 8);
  uint64_t v106 = (void (**)(char *, uint64_t))(v115 + 8);
  double v50 = 0.0;
  uint64_t v25 = v143;
  uint64_t v140 = v7;
  uint64_t v108 = v46;
  uint64_t v130 = v134 + 16;
  uint64_t v129 = v135 + 16;
  while (1)
  {
    if (v47 >= *(void *)(v46 + 16))
    {
      __break(1u);
      goto LABEL_63;
    }
    uint64_t v51 = *(void *)(v115 + 72);
    unint64_t v114 = v47;
    (*(void (**)(char *, unint64_t, uint64_t))(v115 + 16))(v117, v111 + v51 * v47, v118);
    _DeviceActivityData.activitySegments(filteredBy:)();
    _DeviceActivityResults.next()();
    os_log_type_t v52 = v148;
    id v124 = *v125;
    if (v124(v148, 1, v126) != 1) {
      break;
    }
LABEL_15:
    unint64_t v47 = v114 + 1;
    (*v107)(v127, v128);
    (*v106)(v117, v118);
    uint64_t v46 = v108;
    if (v47 == v109)
    {
      swift_bridgeObjectRelease();
      uint64_t v22 = v116;
      goto LABEL_61;
    }
  }
  id v122 = *v123;
  v122(v25, v52, v126);
  while (1)
  {
    uint64_t v55 = _DeviceActivityData.ActivitySegment.categoryActivities.getter();
    uint64_t v147 = *(void *)(v55 + 16);
    if (v147) {
      break;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    uint64_t v53 = v126;
    (*v121)(v25, v126);
    _DeviceActivityResults.next()();
    uint64_t v54 = v148;
    if (v124(v148, 1, v53) == 1) {
      goto LABEL_15;
    }
    v122(v25, v54, v53);
  }
  unint64_t v56 = 0;
  uint64_t v57 = *(void *)&v120[v119];
  unint64_t v145 = v55 + ((*(unsigned __int8 *)(v146 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v146 + 80));
  uint64_t v149 = v57;
  uint64_t v139 = v57 + 56;
  uint64_t v144 = v55;
  while (v56 < *(void *)(v55 + 16))
  {
    uint64_t v58 = *(void *)(v146 + 72);
    unint64_t v150 = v56;
    (*(void (**)(char *, unint64_t, uint64_t))(v146 + 16))(a1, v145 + v58 * v56, v38);
    _DeviceActivityData.CategoryActivity.identifier.getter();
    NSString v59 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v60 = *(void *)(v149 + 16);
    id v155 = v59;
    if (!v60) {
      goto LABEL_48;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v61 = Hasher._finalize()();
    NSString v59 = v155;
    swift_bridgeObjectRelease();
    uint64_t v62 = -1 << *(unsigned char *)(v149 + 32);
    unint64_t v63 = v61 & ~v62;
    if (((*(void *)(v139 + ((v63 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v63) & 1) == 0) {
      goto LABEL_48;
    }
    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v66 = v65;
    if (v64 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v66 == v67)
    {
LABEL_37:
      swift_bridgeObjectRelease_n();
      uint64_t v7 = v140;
      goto LABEL_38;
    }
    char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = v140;
    if ((v69 & 1) == 0)
    {
      uint64_t v137 = ~v62;
      unint64_t v70 = (v63 + 1) & ~v62;
      NSString v59 = v155;
      if (((*(void *)(v139 + ((v70 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v70) & 1) == 0) {
        goto LABEL_48;
      }
      uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v73 = v72;
      if (v71 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v73 == v74) {
        goto LABEL_37;
      }
      char v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v7 = v140;
      if ((v77 & 1) == 0)
      {
        for (unint64_t i = v70 + 1; ; unint64_t i = v79 + 1)
        {
          NSString v59 = v155;
          if (((*(void *)(v139 + (((i & v137) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v137)) & 1) == 0) {
            break;
          }
          unint64_t v79 = i & v137;
          uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v82 = v81;
          if (v80 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v82 == v83) {
            goto LABEL_37;
          }
          char v85 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v7 = v140;
          if (v85) {
            goto LABEL_38;
          }
        }
LABEL_48:
        uint64_t v86 = _DeviceActivityData.CategoryActivity.applicationActivities.getter();
        uint64_t v87 = *(void *)(v86 + 16);
        if (v87)
        {
          unint64_t v88 = (*(unsigned __int8 *)(v134 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v134 + 80);
          uint64_t v137 = v86;
          unint64_t v89 = v86 + v88;
          uint64_t v90 = *(void *)(v134 + 72);
          unint64_t v91 = *(void (**)(char *, unint64_t, uint64_t))(v134 + 16);
          id v92 = v133;
          do
          {
            v91(v92, v89, v7);
            _DeviceActivityData.ApplicationActivity.totalActivityDuration.getter();
            double v94 = v93;
            (*v49)(v92, v7);
            double v50 = v50 + v94;
            v89 += v90;
            --v87;
          }
          while (v87);
          swift_bridgeObjectRelease();
          a1 = v138;
          NSString v59 = v155;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        uint64_t v95 = _DeviceActivityData.CategoryActivity.webDomainActivities.getter();
        uint64_t v96 = *(void *)(v95 + 16);
        if (v96)
        {
          unint64_t v97 = (*(unsigned __int8 *)(v135 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v135 + 80);
          uint64_t v137 = v95;
          unint64_t v98 = v95 + v97;
          uint64_t v99 = *(void *)(v135 + 72);
          uint64_t v100 = *(void (**)(char *, unint64_t, uint64_t))(v135 + 16);
          uint64_t v101 = v132;
          uint64_t v102 = v131;
          do
          {
            v100(v102, v98, v101);
            _DeviceActivityData.WebDomainActivity.totalActivityDuration.getter();
            double v104 = v103;
            (*v22)(v102, v101);
            double v50 = v50 + v104;
            v98 += v99;
            --v96;
          }
          while (v96);
          swift_bridgeObjectRelease();
          uint64_t v7 = v140;
          a1 = v138;
          NSString v59 = v155;
        }
        else
        {
          swift_bridgeObjectRelease();
        }

        uint64_t v38 = v136;
        (*v141)(a1, v136);
        goto LABEL_25;
      }
    }
LABEL_38:
    _DeviceActivityData.CategoryActivity.totalActivityDuration.getter();
    double v76 = v75;

    (*v141)(a1, v38);
    double v50 = v50 + v76;
LABEL_25:
    uint64_t v25 = v143;
    uint64_t v55 = v144;
    unint64_t v56 = v150 + 1;
    if (v150 + 1 == v147) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_59:
  swift_bridgeObjectRelease();
LABEL_61:
  uint64_t isa = (uint64_t)Double._bridgeToObjectiveC()().super.super.isa;
  (*(void (**)(void, uint64_t))(v112 + 8))(v22, v113);
  return isa;
}

uint64_t sub_1000325E4(uint64_t a1)
{
  v2[17] = a1;
  v2[18] = v1;
  sub_1000222D4(&qword_100095D90);
  v2[19] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DateInterval();
  v2[20] = v3;
  v2[21] = *(void *)(v3 - 8);
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  return _swift_task_switch(sub_1000326F0);
}

uint64_t sub_1000326F0()
{
  double v50 = v0;
  uint64_t v1 = swift_allocObject();
  v0[25] = v1;
  *(void *)(v1 + 16) = &_swiftEmptyDictionarySingleton;
  type metadata accessor for Feature();
  if ((static Feature.isDeviceActivityBiomeEnabled.getter() & 1) == 0)
  {
    if (qword_1000950D8 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100022718(v21, (uint64_t)qword_1000974C0);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Using CoreDuet to query for uncategorized web usage", v24, 2u);
      swift_slowDealloc();
    }

    sub_100031334((uint64_t)(v0 + 2));
    uint64_t v25 = v0[5];
    uint64_t v26 = v0[6];
    sub_10002ADE8(v0 + 2, v25);
    unint64_t v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 + 24) + **(int **)(v26 + 24));
    uint64_t v27 = (void *)swift_task_alloc();
    v0[41] = v27;
    void *v27 = v0;
    v27[1] = sub_100033AE0;
    uint64_t v16 = v0[17];
    uint64_t v17 = v25;
    uint64_t v18 = v26;
    uint64_t v19 = v47;
    return v19(v16, v17, v18);
  }
  if (qword_1000950D8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  v0[26] = sub_100022718(v2, (uint64_t)qword_1000974C0);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Using Biome to query for uncategorized web usage", v5, 2u);
    swift_slowDealloc();
  }

  if (qword_1000950A8 != -1) {
    swift_once();
  }
  uint64_t v6 = v0[24];
  uint64_t v7 = qword_100097440;
  uint64_t v8 = *(void *)algn_100097448;
  (*(void (**)(void, uint64_t, void))(*(void *)algn_100097448 + 40))(v0[17], qword_100097440, *(void *)algn_100097448);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, v7, v8);
  uint64_t v11 = v10;
  v0[27] = v9;
  v0[28] = v10;
  if (*(void *)(v10 + 16))
  {
    uint64_t v12 = qword_100095098;
    swift_bridgeObjectRetain();
    if (v12 != -1) {
      swift_once();
    }
    sub_100022928((uint64_t)&qword_1000973F0, (uint64_t)(v0 + 7));
    uint64_t v13 = v0[10];
    uint64_t v14 = v0[11];
    sub_10002ADE8(v0 + 7, v13);
    uint64_t v46 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 + 40) + **(int **)(v14 + 40));
    uint64_t v15 = (void *)swift_task_alloc();
    v0[29] = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_100032DE4;
    uint64_t v16 = v11;
    uint64_t v17 = v13;
    uint64_t v18 = v14;
    uint64_t v19 = v46;
    return v19(v16, v17, v18);
  }
  uint64_t v29 = v0[21];
  uint64_t v28 = v0[22];
  uint64_t v30 = v0[20];
  uint64_t v31 = v0[17];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v28, v31, v30);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  BOOL v34 = os_log_type_enabled(v32, v33);
  uint64_t v35 = v0[24];
  uint64_t v37 = v0[21];
  uint64_t v36 = v0[22];
  uint64_t v38 = v0[20];
  if (v34)
  {
    uint64_t v48 = v0[24];
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    uint64_t v49 = swift_slowAlloc();
    *(_DWORD *)uint64_t v39 = 136446210;
    sub_100037064(&qword_100095910, (void (*)(uint64_t))&type metadata accessor for DateInterval);
    uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[16] = sub_100035724(v40, v41, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
    v42(v36, v38);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "No web domains were used during %{public}s", v39, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v43 = v48;
  }
  else
  {

    uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
    v42(v36, v38);
    uint64_t v43 = v35;
  }
  v42(v43, v38);
  uint64_t v44 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v45 = (uint64_t (*)(uint64_t))v0[1];
  return v45(v44);
}

uint64_t sub_100032DE4(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 240) = a1;
  *(void *)(v3 + 248) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    os_log_type_t v4 = sub_100033CE8;
  }
  else
  {
    swift_bridgeObjectRelease();
    os_log_type_t v4 = sub_100032F34;
  }
  return _swift_task_switch(v4);
}

uint64_t sub_100032F34()
{
  uint64_t v27 = v0;
  if (*(void *)(v0[30] + 16))
  {
    uint64_t v1 = v0[10];
    uint64_t v2 = v0[11];
    sub_10002ADE8(v0 + 7, v1);
    uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 24) + **(int **)(v2 + 24));
    uint64_t v3 = (void *)swift_task_alloc();
    v0[32] = v3;
    void *v3 = v0;
    v3[1] = sub_1000332D8;
    uint64_t v4 = v0[27];
    return v24(v4, v1, v2);
  }
  else
  {
    uint64_t v6 = v0[23];
    uint64_t v7 = v0[20];
    uint64_t v8 = v0[21];
    uint64_t v9 = v0[17];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v9, v7);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = v0[23];
    uint64_t v14 = v0[24];
    uint64_t v15 = v0[20];
    uint64_t v16 = v0[21];
    if (v12)
    {
      uint64_t v25 = v0[24];
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136446210;
      sub_100037064(&qword_100095910, (void (*)(uint64_t))&type metadata accessor for DateInterval);
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[15] = sub_100035724(v18, v19, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      v20(v13, v15);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "No uncategorized web domains were used during %{public}s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v20(v25, v15);
    }
    else
    {

      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      v21(v13, v15);
      v21(v14, v15);
    }
    uint64_t v22 = *(void *)(v0[25] + 16);
    swift_bridgeObjectRetain();
    sub_10002AE2C((uint64_t)(v0 + 7));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v23 = (uint64_t (*)(uint64_t))v0[1];
    return v23(v22);
  }
}

uint64_t sub_1000332D8(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 264) = a1;
  *(void *)(v3 + 272) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_100033DA0;
  }
  else
  {
    uint64_t v4 = sub_1000333F4;
  }
  return _swift_task_switch(v4);
}

uint64_t sub_1000333F4()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  sub_10002ADE8(v0 + 7, v1);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 32) + **(int **)(v2 + 32));
  uint64_t v3 = (void *)swift_task_alloc();
  v0[35] = v3;
  void *v3 = v0;
  v3[1] = sub_1000334FC;
  uint64_t v4 = v0[28];
  return v6(v4, v1, v2);
}

uint64_t sub_1000334FC(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 288) = a1;
  *(void *)(v3 + 296) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v4 = sub_100033E78;
  }
  else {
    uint64_t v4 = sub_100033634;
  }
  return _swift_task_switch(v4);
}

void sub_100033634()
{
  if (qword_100095088 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[30];
  uint64_t v2 = v0[25];
  uint64_t v3 = v0[19];
  uint64_t v4 = unk_1000973E0;
  DateInterval.duration.getter();
  DateInterval.start.getter();
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v3, 0, 1, v5);
  unint64_t v6 = static EventStreams.Biome.all.getter();
  v0[38] = sub_100033FF0(v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = swift_allocObject();
  v0[39] = v7;
  *(void *)(v7 + 16) = v1;
  *(void *)(v7 + 24) = v2;
  uint64_t v9 = *(void *)(v4 + 32) + **(int **)(v4 + 32);
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[40] = v8;
  void *v8 = v0;
  v8[1] = sub_10003385C;
  __asm { BRAA            X9, X16 }
}

uint64_t sub_10003385C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 152);
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10002BDA0(v1, &qword_100095D90);
  return _swift_task_switch(sub_1000339FC);
}

uint64_t sub_1000339FC()
{
  (*(void (**)(void, void))(v0[21] + 8))(v0[24], v0[20]);
  sub_10002AE2C((uint64_t)(v0 + 7));
  uint64_t v1 = v0[25];
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(uint64_t))v0[1];
  return v3(v2);
}

uint64_t sub_100033AE0(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 336) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100033F50;
  }
  else
  {
    *(void *)(v4 + 344) = a1;
    uint64_t v5 = sub_100033C08;
  }
  return _swift_task_switch(v5);
}

uint64_t sub_100033C08()
{
  *(void *)(v0[25] + 16) = v0[43];
  swift_bridgeObjectRelease();
  sub_10002AE2C((uint64_t)(v0 + 2));
  uint64_t v1 = v0[25];
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(uint64_t))v0[1];
  return v3(v2);
}

uint64_t sub_100033CE8()
{
  (*(void (**)(void, void))(v0[21] + 8))(v0[24], v0[20]);
  sub_10002AE2C((uint64_t)(v0 + 7));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100033DA0()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[21];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  sub_10002AE2C((uint64_t)(v0 + 7));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100033E78()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[21];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  sub_10002AE2C((uint64_t)(v0 + 7));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100033F50()
{
  sub_10002AE2C(v0 + 16);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100033FF0(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = &_swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  uint64_t v13 = &_swiftEmptyArrayStorage;
  uint64_t result = sub_1000442D8(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_100023228(0, &qword_100095928);
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000442D8(0, v3[2] + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v7 = v3[2];
        unint64_t v6 = v3[3];
        if (v7 >= v6 >> 1)
        {
          sub_1000442D8(v6 > 1, v7 + 1, 1);
          uint64_t v3 = v13;
        }
        v3[2] = v7 + 1;
        sub_1000366C4(v12, &v3[4 * v7 + 4]);
      }
    }
    else
    {
      uint64_t v8 = (id *)(a1 + 32);
      sub_100023228(0, &qword_100095928);
      do
      {
        id v9 = *v8;
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000442D8(0, v3[2] + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v11 = v3[2];
        unint64_t v10 = v3[3];
        if (v11 >= v10 >> 1)
        {
          sub_1000442D8(v10 > 1, v11 + 1, 1);
          uint64_t v3 = v13;
        }
        v3[2] = v11 + 1;
        sub_1000366C4(v12, &v3[4 * v11 + 4]);
        ++v8;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_100034254(void *a1, void *a2, char **a3)
{
  id v5 = [a1 categoryUsage];
  sub_100023228(0, &qword_100095918);
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v6 >> 62) {
    goto LABEL_71;
  }
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v7)
  {
LABEL_72:
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  unint64_t v8 = 0;
  id v9 = (char ***)(a3 + 2);
  uint64_t v51 = v7;
  unint64_t v52 = v6 & 0xC000000000000001;
  uint64_t v50 = v6 & 0xFFFFFFFFFFFFFF8;
  uint64_t v48 = (char **)(a2 + 9);
  unint64_t v49 = v6 + 32;
  a3 = &selRef_validateBudget_error_;
  uint64_t v55 = a2;
  while (1)
  {
    if (v52)
    {
      id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v8 >= *(void *)(v50 + 16)) {
        goto LABEL_70;
      }
      id v10 = *(id *)(v49 + 8 * v8);
    }
    unint64_t v6 = (unint64_t)v10;
    BOOL v11 = __OFADD__(v8, 1);
    unint64_t v12 = v8 + 1;
    if (v11)
    {
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v7) {
        goto LABEL_72;
      }
      goto LABEL_3;
    }
    id v13 = [v10 webUsage];
    sub_100023228(0, &qword_100095920);
    unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v53 = (void *)v6;
    unint64_t v54 = v12;
    if (v14 >> 62) {
      break;
    }
    uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v15) {
      goto LABEL_12;
    }
LABEL_4:

    swift_bridgeObjectRelease();
    unint64_t v8 = v54;
    if (v54 == v51) {
      return swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v15) {
    goto LABEL_4;
  }
LABEL_12:
  unint64_t v16 = 0;
  unint64_t v17 = v14 & 0xC000000000000001;
  unint64_t v57 = v14 + 32;
  uint64_t v58 = v14 & 0xFFFFFFFFFFFFFF8;
  uint64_t v56 = v15;
  unint64_t v59 = v14 & 0xC000000000000001;
  while (1)
  {
    if (v17)
    {
      id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v16 >= *(void *)(v58 + 16)) {
        goto LABEL_65;
      }
      id v18 = *(id *)(v57 + 8 * v16);
    }
    unint64_t v6 = (unint64_t)v18;
    BOOL v11 = __OFADD__(v16++, 1);
    if (v11)
    {
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if ([v18 a3[70]]) {
      break;
    }

LABEL_14:
    if (v16 == v15) {
      goto LABEL_4;
    }
  }
  id v19 = [(id)v6 domainIdentifier];
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;

  uint64_t v23 = a2[2];
  if (!v23)
  {

    swift_bridgeObjectRelease();
    unint64_t v17 = v59;
    goto LABEL_14;
  }
  BOOL v24 = a2[4] == v20 && a2[5] == v22;
  if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    goto LABEL_27;
  }
  uint64_t v15 = v56;
  if (v23 == 1)
  {

    swift_bridgeObjectRelease();
    a3 = &selRef_validateBudget_error_;
    unint64_t v17 = v59;
    goto LABEL_14;
  }
  if ((a2[6] != v20 || a2[7] != v22) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (v23 != 2)
    {
      a3 = v48;
      uint64_t v41 = 2;
      do
      {
        uint64_t v42 = v41 + 1;
        if (__OFADD__(v41, 1)) {
          goto LABEL_68;
        }
        BOOL v43 = *(a3 - 1) == (char *)v20 && *a3 == (char *)v22;
        if (v43 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_27;
        }
        a3 += 2;
        ++v41;
      }
      while (v42 != v23);
    }

    swift_bridgeObjectRelease();
    goto LABEL_60;
  }
LABEL_27:
  swift_beginAccess();
  uint64_t v25 = *v9;
  if ((*v9)[2])
  {
    swift_bridgeObjectRetain();
    unint64_t v26 = sub_100035E24(v20, v22);
    if (v27)
    {
      uint64_t v28 = *(void **)&v25[7][8 * v26];
      swift_endAccess();
      id v29 = v28;
      swift_bridgeObjectRelease();
      [v29 doubleValue];
    }
    else
    {
      swift_endAccess();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  [(id)v6 totalUsageTime];
  v30.super.super.uint64_t isa = Double._bridgeToObjectiveC()().super.super.isa;
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  a3 = *v9;
  uint64_t v60 = *v9;
  *id v9 = (char **)0x8000000000000000;
  unint64_t v33 = sub_100035E24(v20, v22);
  BOOL v34 = a3[2];
  BOOL v35 = (v32 & 1) == 0;
  uint64_t v36 = (uint64_t)&v34[v35];
  if (__OFADD__(v34, v35)) {
    goto LABEL_66;
  }
  a2 = v32;
  if ((uint64_t)a3[3] >= v36)
  {
    if (isUniquelyReferenced_nonNull_native)
    {
      a3 = v60;
      if ((v32 & 1) == 0) {
        goto LABEL_57;
      }
    }
    else
    {
      sub_100044ECC();
      a3 = v60;
      if ((a2 & 1) == 0) {
        goto LABEL_57;
      }
    }
    goto LABEL_40;
  }
  sub_100044A04(v36, isUniquelyReferenced_nonNull_native);
  unint64_t v37 = sub_100035E24(v20, v22);
  if ((a2 & 1) == (v38 & 1))
  {
    unint64_t v33 = v37;
    a3 = v60;
    if ((a2 & 1) == 0)
    {
LABEL_57:
      a3[(v33 >> 6) + 8] = (char *)((unint64_t)a3[(v33 >> 6) + 8] | (1 << v33));
      uint64_t v44 = (uint64_t *)&a3[6][16 * v33];
      uint64_t *v44 = v20;
      v44[1] = v22;
      *(NSNumber *)&a3[7][8 * v33] = v30;
      os_log_type_t v45 = a3[2];
      BOOL v11 = __OFADD__(v45, 1);
      uint64_t v46 = v45 + 1;
      if (v11) {
        goto LABEL_67;
      }
      a3[2] = v46;
      swift_bridgeObjectRetain();
      goto LABEL_59;
    }
LABEL_40:
    uint64_t v39 = a3[7];
    uint64_t v40 = 8 * v33;

    *(NSNumber *)&v39[v40] = v30;
LABEL_59:
    *id v9 = a3;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();

    a2 = v55;
LABEL_60:
    a3 = &selRef_validateBudget_error_;
    uint64_t v15 = v56;
    unint64_t v17 = v59;
    goto LABEL_14;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000349C4(uint64_t a1, const void *a2, void *a3)
{
  v3[2] = a3;
  uint64_t v6 = type metadata accessor for DateInterval();
  v3[3] = v6;
  v3[4] = *(void *)(v6 - 8);
  uint64_t v7 = swift_task_alloc();
  v3[5] = v7;
  v3[6] = _Block_copy(a2);
  static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();
  a3;
  unint64_t v8 = (void *)swift_task_alloc();
  v3[7] = v8;
  void *v8 = v3;
  v8[1] = sub_100034AF0;
  return sub_1000325E4(v7);
}

uint64_t sub_100034AF0()
{
  uint64_t v2 = v0;
  uint64_t v4 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  id v5 = (void *)*v1;
  swift_task_dealloc();
  uint64_t v6 = (void *)v3[2];
  (*(void (**)(void, void))(v3[4] + 8))(v3[5], v3[3]);

  if (v2)
  {
    uint64_t v7 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    id v9 = (void *)v7;
  }
  else
  {
    sub_100023228(0, &qword_100095998);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v7 = 0;
    id v9 = isa;
  }
  uint64_t v10 = (void (**)(void, void, void))v4[6];
  ((void (**)(void, Class, uint64_t))v10)[2](v10, isa, v7);

  _Block_release(v10);
  swift_task_dealloc();
  BOOL v11 = (uint64_t (*)(void))v5[1];
  return v11();
}

id sub_100034FC0(uint64_t a1)
{
  return sub_100034FD8(a1, type metadata accessor for DeviceActivityQuerying);
}

id sub_100034FD8(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t type metadata accessor for DeviceActivityQuerying()
{
  return self;
}

uint64_t sub_100035084()
{
  if (qword_100095088 != -1) {
    swift_once();
  }
  return qword_1000973D8;
}

uint64_t sub_1000350D4()
{
  if (qword_1000950B0 != -1) {
    swift_once();
  }
  return byte_100097450;
}

uint64_t sub_100035120(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  unsigned char *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_100035130(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_10003516C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  objc_super v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  void *v4 = v3;
  v4[1] = sub_10002F710;
  return v6();
}

uint64_t sub_100035238(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  id v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  void *v5 = v4;
  v5[1] = sub_10002F710;
  return v7();
}

uint64_t sub_100035304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10002BDA0(a1, &qword_100095730);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1000354B0(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_10003558C;
  return v6(a1);
}

uint64_t sub_10003558C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100035684(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000356AC(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  sub_100035724(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t sub_100035724(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1000357F8(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100035E9C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100035E9C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10002AE2C((uint64_t)v12);
  return v7;
}

uint64_t sub_1000357F8(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_1000359B4(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_1000359B4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_100035A4C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100035C2C(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100035C2C(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_100035A4C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_100035BC4(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_100035BC4(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_1000222D4(&qword_1000958F8);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_100035C2C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000222D4(&qword_1000958F8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unsigned char **sub_100035D7C(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4 = *result;
  unsigned char *v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

unint64_t sub_100035D8C(uint64_t a1)
{
  type metadata accessor for URL();
  sub_100037064((unint64_t *)&qword_100095C30, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_100035F40(a1, v2);
}

unint64_t sub_100035E24(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  return sub_100036100(a1, a2, v4);
}

uint64_t sub_100035E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_100035EFC(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1000361E4(a1, v4);
}

unint64_t sub_100035F40(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a1;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  int64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = v2;
  uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v10 = a2 & ~v9;
  uint64_t v19 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    unint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v13 = v5 + 16;
    uint64_t v12 = v14;
    uint64_t v15 = *(void *)(v13 + 56);
    do
    {
      v12(v8, *(void *)(v21 + 48) + v15 * v10, v4);
      sub_100037064(&qword_100095908, (void (*)(uint64_t))&type metadata accessor for URL);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v13 - 8))(v8, v4);
      if (v16) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }
    while (((*(void *)(v19 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_100036100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    unint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1000361E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_1000362AC(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_100036308((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_1000362AC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100036308(uint64_t a1)
{
  return a1;
}

uint64_t sub_10003635C()
{
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100036394()
{
  swift_bridgeObjectRelease();
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000363D4(void *a1)
{
  return sub_100034254(a1, *(void **)(v1 + 16), *(char ***)(v1 + 24));
}

uint64_t sub_1000363DC(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  BOOL v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *BOOL v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_1000365DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptyArrayStorage;
  }
  sub_1000222D4((uint64_t *)&unk_1000959C0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_1000363DC((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_10003705C();
  if (v6 != v1)
  {
    __break(1u);
    return &_swiftEmptyArrayStorage;
  }
  return v3;
}

_OWORD *sub_1000366C4(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1000366D4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000222D4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_100036738()
{
  _Block_release(*(const void **)(v0 + 24));
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100036780()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (const void *)v0[3];
  int64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_10002C9FC;
  uint64_t v6 = (uint64_t (*)(uint64_t, const void *, void *))((char *)&dword_100095958 + dword_100095958);
  return v6(v2, v3, v4);
}

uint64_t sub_100036838()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  int64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_10002F710;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_100095968 + dword_100095968);
  return v6(v2, v3, v4);
}

uint64_t sub_1000368FC()
{
  swift_unknownObjectRelease();
  swift_release();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10003693C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10002F710;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100095978 + dword_100095978);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_100036A08()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100036A40(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10002C9FC;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100095988 + dword_100095988);
  return v6(a1, v4);
}

void sub_100036AFC(uint64_t a1, uint64_t a2)
{
  sub_100030E4C(a1, a2, *(void *)(v2 + 16), *(NSObject **)(v2 + 24), "Failed to categorize applications for filter: %{public}s");
}

uint64_t sub_100036B20()
{
  swift_release();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100036B58(uint64_t a1, uint64_t a2)
{
  return sub_100030D88(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 32));
}

uint64_t sub_100036B68()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100036BA8(uint64_t a1, uint64_t a2)
{
  sub_100030E4C(a1, a2, *(void *)(v2 + 16), *(NSObject **)(v2 + 24), "Failed to categorize web domains for filter: %{public}s");
}

uint64_t sub_100036BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v48 = sub_1000222D4(&qword_1000959A0);
  unint64_t v49 = sub_100036F68();
  v47[0] = a3;
  uint64_t v4 = sub_10002ADE8(v47, v48);
  __chkstk_darwin(v4, v4);
  uint64_t v6 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v6);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v8 = sub_10002B118(v44);
  uint64_t v9 = -1 << *(unsigned char *)(*(void *)v6 + 32);
  uint64_t v10 = ~v9;
  BOOL v11 = (uint64_t *)(*(void *)v6 + 64);
  uint64_t v12 = *v11;
  uint64_t v13 = -v9;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  else {
    uint64_t v14 = -1;
  }
  uint64_t *v8 = *(void *)v6;
  v8[1] = (uint64_t)v11;
  v8[2] = v10;
  v8[3] = 0;
  void v8[4] = v14 & v12;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_10003700C((uint64_t)v44, AssociatedTypeWitness);
    dispatch thunk of IteratorProtocol.next()();
    if (!v43) {
      break;
    }
    sub_10002B17C(&v42, (uint64_t)v39);
    uint64_t v15 = v40;
    uint64_t v16 = v41;
    sub_10002ADE8(v39, v40);
    Swift::Int v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
    if (v18)
    {
      sub_100064528(&v38, v17, v18);
      swift_bridgeObjectRelease();
    }
    uint64_t v19 = v40;
    uint64_t v20 = v41;
    sub_10002ADE8(v39, v40);
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 16))(v19, v20);
    if (v21)
    {
      uint64_t v22 = *(void *)(v21 + 16);
      if (v22)
      {
        uint64_t v23 = (Swift::Int *)(v21 + 40);
        do
        {
          Swift::Int v24 = *(v23 - 1);
          Swift::Int v25 = *v23;
          swift_bridgeObjectRetain();
          sub_100064528(&v38, v24, v25);
          swift_bridgeObjectRelease();
          v23 += 2;
          --v22;
        }
        while (v22);
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v26 = v40;
    uint64_t v27 = v41;
    sub_10002ADE8(v39, v40);
    Swift::Int v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 24))(v26, v27);
    if (v29)
    {
      sub_100064528(&v38, v28, v29);
      swift_bridgeObjectRelease();
    }
    uint64_t v30 = v40;
    uint64_t v31 = v41;
    sub_10002ADE8(v39, v40);
    uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 32))(v30, v31);
    if (v32)
    {
      uint64_t v33 = *(void *)(v32 + 16);
      if (v33)
      {
        BOOL v34 = (Swift::Int *)(v32 + 40);
        do
        {
          Swift::Int v35 = *(v34 - 1);
          Swift::Int v36 = *v34;
          swift_bridgeObjectRetain();
          sub_100064528(&v38, v35, v36);
          swift_bridgeObjectRelease();
          v34 += 2;
          --v33;
        }
        while (v33);
      }
      swift_bridgeObjectRelease();
    }
    sub_10002AE2C((uint64_t)v39);
  }
  sub_10002AE2C((uint64_t)v44);
  return sub_10002AE2C((uint64_t)v47);
}

unint64_t sub_100036F68()
{
  unint64_t result = qword_1000959A8;
  if (!qword_1000959A8)
  {
    sub_100036FC4(&qword_1000959A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000959A8);
  }
  return result;
}

uint64_t sub_100036FC4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10003700C(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_10003705C()
{
  return swift_release();
}

uint64_t sub_100037064(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000370B8()
{
  id v1 = [*v0 sharingAppleIDs];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100037138()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000371B0(v0, qword_100097460);
  sub_100022718(v0, (uint64_t)qword_100097460);
  return Logger.init(subsystem:category:)();
}

uint64_t *sub_1000371B0(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_100037214()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000371B0(v0, qword_100097478);
  sub_100022718(v0, (uint64_t)qword_100097478);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100037298()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000371B0(v0, qword_100097490);
  sub_100022718(v0, (uint64_t)qword_100097490);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100037308()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000371B0(v0, qword_1000974A8);
  sub_100022718(v0, (uint64_t)qword_1000974A8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10003737C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000371B0(v0, qword_1000974C0);
  sub_100022718(v0, (uint64_t)qword_1000974C0);
  return Logger.init(subsystem:category:)();
}

id sub_1000377E8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InvitationHandler();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for InvitationHandler()
{
  return self;
}

unint64_t sub_100037850()
{
  unint64_t result = qword_100095A60;
  if (!qword_100095A60)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100095A60);
  }
  return result;
}

uint64_t sub_100037890(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000378B8()
{
  id v1 = [*v0 receivedInvitations];
  sub_100037E38();
  sub_100037E78();
  uint64_t v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void sub_10003791C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
}

void sub_100037940(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = sub_1000222D4(&qword_100095D90);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = (char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100037DD0(a2, (uint64_t)v15);
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v15, v16);
  }
  if (a4)
  {
    aBlock[4] = a4;
    aBlock[5] = a5;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100037B10;
    aBlock[3] = &unk_10008B1A0;
    a4 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
  }
  [v6 sendInvitationToDestination:a1 expirationDate:isa context:a3 serverAcknowledgedBlock:a4];
  _Block_release(a4);
}

void sub_100037B10(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void sub_100037B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = *v4;
  if (a3)
  {
    void v9[4] = a3;
    v9[5] = a4;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 1107296256;
    v9[2] = sub_100037C78;
    v9[3] = &unk_10008B178;
    uint64_t v8 = _Block_copy(v9);
    swift_retain();
    swift_release();
  }
  else
  {
    uint64_t v8 = 0;
  }
  [v7 acceptInvitation:a1 withContext:a2 serverAcknowledgedBlock:v8];
  _Block_release(v8);
}

void sub_100037C78(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

void sub_100037CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *v3;
  if (a2)
  {
    void v7[4] = a2;
    v7[5] = a3;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 1107296256;
    v7[2] = sub_100037C78;
    v7[3] = &unk_10008B150;
    id v6 = _Block_copy(v7);
    swift_retain();
    swift_release();
  }
  else
  {
    id v6 = 0;
  }
  [v5 declineInvitation:a1 serverAcknowledgedBlock:v6];
  _Block_release(v6);
}

uint64_t sub_100037DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100037DC8()
{
  return swift_release();
}

uint64_t sub_100037DD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000222D4(&qword_100095D90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100037E38()
{
  unint64_t result = qword_100095AD0;
  if (!qword_100095AD0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100095AD0);
  }
  return result;
}

unint64_t sub_100037E78()
{
  unint64_t result = qword_100095C00;
  if (!qword_100095C00)
  {
    sub_100037E38();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100095C00);
  }
  return result;
}

uint64_t sub_100037EE0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100037F48(&qword_100095AD8);
  uint64_t result = sub_100037F48((unint64_t *)&unk_100095CD0);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100037F48(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _DeviceActivityData.Metadata();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_100037F8C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for _DeviceActivityData.Metadata();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  id v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100023228(0, &qword_1000954C0);
  uint64_t v7 = _DeviceActivityData.Metadata.recordSystemFields.getter();
  uint64_t v9 = sub_100022324(v7, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v1, v2);
  if (!v9)
  {
    sub_100023228(0, &qword_100095C70);
    uint64_t v10 = _DeviceActivityData.Metadata.recordName.getter();
    uint64_t v12 = v11;
    sub_100023228(0, qword_100095F40);
    uint64_t v13 = _DeviceActivityData.Metadata.recordName.getter();
    uint64_t v15 = v14;
    v16._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v16._object = v17;
    v18._countAndFlagsBits = v13;
    v18._object = v15;
    Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v18, v16).super.isa;
    v20._countAndFlagsBits = v10;
    v20._object = v12;
    Class v21 = CKRecordID.init(recordName:zoneID:)(v20, (CKRecordZoneID)isa).super.isa;
    v22._countAndFlagsBits = 0x617461646174654DLL;
    v22._object = (void *)0xE800000000000000;
    uint64_t v9 = CKRecord.init(recordType:recordID:)(v22, (CKRecordID)v21).super.isa;
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v9;
}

void *sub_100038168()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for _DeviceActivityData.ActivitySegment();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  id v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100023228(0, &qword_1000954C0);
  uint64_t v7 = _DeviceActivityData.ActivitySegment.recordSystemFields.getter();
  uint64_t v9 = sub_100022324(v7, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v1, v2);
  if (!v9)
  {
    sub_100023228(0, &qword_100095C70);
    uint64_t v10 = _DeviceActivityData.ActivitySegment.recordName.getter();
    uint64_t v12 = v11;
    sub_100023228(0, qword_100095F40);
    uint64_t v13 = _DeviceActivityData.ActivitySegment.recordZoneName.getter();
    uint64_t v15 = v14;
    v16._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v16._object = v17;
    v18._countAndFlagsBits = v13;
    v18._object = v15;
    Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v18, v16).super.isa;
    v20._countAndFlagsBits = v10;
    v20._object = v12;
    Class v21 = CKRecordID.init(recordName:zoneID:)(v20, (CKRecordZoneID)isa).super.isa;
    v22._countAndFlagsBits = 0x7974697669746341;
    v22._object = (void *)0xEF746E656D676553;
    uint64_t v9 = CKRecord.init(recordType:recordID:)(v22, (CKRecordID)v21).super.isa;
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v9;
}

uint64_t sub_100038354(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t, uint64_t *))
{
  uint64_t v5 = a2;
  char v6 = a3 & 1;
  return a4(a1, &v5);
}

void sub_100038394(uint64_t a1)
{
  sub_10002C528(a1, (uint64_t)v9, (uint64_t *)&unk_100095B90);
  uint64_t v2 = v10;
  if (v10)
  {
    uint64_t v3 = sub_10002ADE8(v9, v10);
    uint64_t v4 = *(void *)(v2 - 8);
    __chkstk_darwin(v3, v3);
    char v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v4 + 16))(v6);
    uint64_t v7 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v2);
    sub_10002AE2C((uint64_t)v9);
  }
  else
  {
    uint64_t v7 = 0;
  }
  NSString v8 = String._bridgeToObjectiveC()();
  [v1 setObject:v7 forKey:v8];
  swift_unknownObjectRelease();
}

uint64_t sub_1000384FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10002BDA0(a1, &qword_100095730);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1000386A8(void (*a1)(uint64_t), uint64_t a2)
{
  if ((static DeviceActivityAuthorization.sharingEnabled.getter() & 1) == 0) {
    return ((uint64_t (*)(void))a1)(0);
  }
  if (qword_1000950E8 != -1) {
    swift_once();
  }
  return sub_100039124(a1, a2);
}

uint64_t sub_100038740(uint64_t a1)
{
  if (qword_1000950E8 != -1) {
    swift_once();
  }
  uint64_t result = DeviceActivityDataStore.localZones.getter();
  if (!v1)
  {
    uint64_t v4 = result;
    CKSyncEngine.state.getter();
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_100047068(v4, a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    CKSyncEngine.State.add(pendingDatabaseChanges:)((Swift::OpaquePointer)v5);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10003884C(uint64_t a1)
{
  if (qword_1000950E8 != -1) {
    swift_once();
  }
  return sub_10003A2DC(a1);
}

id sub_1000388AC()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for SyncCoordinator()) init];
  qword_100095AE0 = (uint64_t)result;
  return result;
}

void sub_1000388DC()
{
  uint64_t v0 = type metadata accessor for DeviceActivityDataLocations();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v3 = __chkstk_darwin(v0, v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3, v6);
  uint64_t v8 = (char *)&v23 - v7;
  uint64_t v9 = type metadata accessor for DeviceActivityDataStore();
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000950E0 != -1) {
    swift_once();
  }
  uint64_t v13 = (void *)qword_100095AE0;
  uint64_t v14 = type metadata accessor for DeviceActivityAuthorization();
  uint64_t v15 = self;
  id v16 = v13;
  id v17 = [v15 standardUserDefaults];
  DeviceActivityDataStore.init()();
  DeviceActivityDataLocations.init()();
  if (qword_1000950F8 != -1) {
    swift_once();
  }
  id v18 = [(id)qword_100095E10 deviceActivity];
  sub_1000222D4(&qword_100095B48);
  uint64_t v19 = (void *)swift_allocObject();
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v5, v8, v0);
  id v20 = v17;
  id v21 = v18;
  Swift::String v22 = sub_100045080(v14, v16, (uint64_t)v20, (uint64_t)v12, (uint64_t)v5, v21, v19);

  (*(void (**)(char *, uint64_t))(v1 + 8))(v8, v0);
  qword_1000974D8 = (uint64_t)v22;
}

NSString sub_100038B68()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_1000974E0 = (uint64_t)result;
  return result;
}

uint64_t sub_100038C2C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_1000222D4(&qword_100095BA0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v10 = (void *)((char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (void *)((char *)v34 - v12);
  uint64_t v14 = DeviceActivityDataStore.localZones.getter();
  uint64_t v15 = *(void *)(v14 + 16);
  if (v15)
  {
    v34[1] = v2;
    uint64_t v35 = a2;
    uint64_t v36 = a1;
    long long v42 = &_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v16 = sub_100023228(0, qword_100095F40);
    uint64_t v17 = *(unsigned __int8 *)(v6 + 80);
    v34[0] = v14;
    uint64_t v18 = v14 + ((v17 + 32) & ~v17);
    uint64_t v38 = *(void *)(v6 + 72);
    uint64_t v39 = v16;
    unint64_t v37 = CKCurrentUserDefaultName;
    uint64_t v40 = v5;
    uint64_t v41 = v10;
    do
    {
      sub_10002C528(v18, (uint64_t)v13, &qword_100095BA0);
      uint64_t v19 = *(int *)(v5 + 48);
      id v20 = (char *)v10 + v19;
      id v21 = (char *)v13 + v19;
      uint64_t v22 = *v13;
      uint64_t v23 = (void *)v13[1];
      *uint64_t v10 = *v13;
      v10[1] = (uint64_t)v23;
      uint64_t v24 = type metadata accessor for _SegmentInterval();
      uint64_t v25 = *(void *)(v24 - 8);
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v20, v21, v24);
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::Int v28 = v27;
      swift_bridgeObjectRetain();
      v29._countAndFlagsBits = v22;
      v29._object = v23;
      v30._countAndFlagsBits = v26;
      v30._object = v28;
      uint64_t v5 = v40;
      CKRecordZoneID.init(zoneName:ownerName:)(v29, v30);
      uint64_t v31 = v24;
      uint64_t v10 = v41;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v20, v31);
      sub_10002BDA0((uint64_t)v13, &qword_100095BA0);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v18 += v38;
      --v15;
    }
    while (v15);
    uint64_t v32 = v42;
    swift_bridgeObjectRelease();
    a2 = v35;
    a1 = v36;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v32 = &_swiftEmptyArrayStorage;
  }
  sub_10003C904((unint64_t)v32, a1, a2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100039124(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v122 = a2;
  id v123 = a1;
  uint64_t v3 = type metadata accessor for CKSyncEngine.PendingRecordZoneChange();
  uint64_t v137 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (Class *)((char *)&v117 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_1000222D4(&qword_100095BA0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  id v133 = (uint64_t *)((char *)&v117 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = (uint64_t *)((char *)&v117 - v14);
  __chkstk_darwin(v13, v16);
  uint64_t v134 = (uint64_t *)((char *)&v117 - v17);
  if (![(id)swift_getObjCClassFromMetadata() isAuthorized])
  {
    if (qword_1000950C8 != -1) {
      goto LABEL_81;
    }
    goto LABEL_5;
  }
  int64_t v126 = v7;
  id v138 = v6;
  uint64_t v139 = v3;
  uint64_t v18 = *(NSObject **)((char *)v2 + *((void *)*v2 + 27));
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = sub_100047958;
  *(void *)(v19 + 24) = v2;
  aBlock[4] = (uint64_t)sub_100047970;
  aBlock[5] = v19;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10003BEC0;
  aBlock[3] = (uint64_t)&unk_10008B4A8;
  id v20 = v2;
  id v21 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v18, v21);
  _Block_release(v21);
  LOBYTE(v18) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v18) {
    goto LABEL_80;
  }
  uint64_t v22 = (char *)v2 + *((void *)*v2 + 23);
  uint64_t v23 = DeviceActivityDataStore.localZones.getter();
  uint64_t v25 = v2;
  uint64_t v128 = 0;
  uint64_t v31 = *(void *)(v23 + 16);
  id v124 = v20;
  if (!v31)
  {
    swift_bridgeObjectRelease();
    uint64_t v35 = &_swiftEmptyDictionarySingleton;
    goto LABEL_36;
  }
  int64_t v32 = v126;
  uint64_t v130 = (char *)v134 + *(int *)(v126 + 48);
  id v125 = *(char **)((char *)v25 + *((void *)*v25 + 28));
  uint64_t v129 = v25 + 7;
  unint64_t v33 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v117 = v23;
  uint64_t v34 = v23 + v33;
  id v127 = *(void **)(v8 + 72);
  uint64_t v35 = &_swiftEmptyDictionarySingleton;
  LODWORD(v121) = enum case for CKSyncEngine.PendingDatabaseChange.saveZone(_:);
  *(void *)&long long v24 = 134349314;
  long long v119 = v24;
  uint64_t v118 = (char *)&type metadata for Any + 8;
  long long v120 = xmmword_100073730;
  id v131 = v22;
  uint64_t v132 = v15;
  do
  {
    uint64_t v135 = (void (**)(void, void, void))v34;
    uint64_t v136 = v31;
    uint64_t v38 = v134;
    sub_10002C528(v34, (uint64_t)v134, &qword_100095BA0);
    uint64_t v39 = (char *)v15 + *(int *)(v32 + 48);
    uint64_t v40 = *v38;
    unint64_t v41 = v38[1];
    *uint64_t v15 = *v38;
    v15[1] = v41;
    uint64_t v42 = type metadata accessor for _SegmentInterval();
    uint64_t v43 = *(void *)(v42 - 8);
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v39, v130, v42);
    uint64_t v44 = v133;
    os_log_type_t v45 = (char *)v133 + *(int *)(v32 + 48);
    uint64_t *v133 = v40;
    v44[1] = v41;
    (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v45, v39, v42);
    uint64_t v46 = *(void (**)(char *, uint64_t))(v43 + 8);
    swift_bridgeObjectRetain();
    v46(v45, v42);
    uint64_t v47 = (uint64_t)v124[10];
    uint64_t v48 = (uint64_t (**)(uint64_t, unint64_t, uint64_t, NSString))v124[11];
    sub_10002ADE8(v129, v47);
    if ((v48[1](v40, v41, v47, v48) & 1) == 0)
    {
      id v49 = objc_allocWithZone((Class)CKRecordZone);
      swift_bridgeObjectRetain();
      NSString v50 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v51 = objc_msgSend(v49, "initWithZoneName:", v50, v117, v118);

      [v51 setCapabilities:8];
      CKSyncEngine.state.getter();
      sub_1000222D4(&qword_100095B40);
      uint64_t v52 = *(void *)(type metadata accessor for CKSyncEngine.PendingDatabaseChange() - 8);
      unint64_t v53 = (*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
      uint64_t v54 = swift_allocObject();
      *(_OWORD *)(v54 + 16) = v120;
      uint64_t v55 = (void *)(v54 + v53);
      int64_t v32 = v126;
      void *v55 = v51;
      uint64_t v15 = v132;
      (*(void (**)(void))(v52 + 104))();
      id v56 = v51;
      CKSyncEngine.State.add(pendingDatabaseChanges:)((Swift::OpaquePointer)v54);
      swift_release();

      swift_bridgeObjectRelease();
    }
    uint64_t v57 = v128;
    uint64_t v58 = DeviceActivityDataStore.localRecordNames(forZoneName:segmentInterval:)();
    if (v57)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10002BDA0((uint64_t)v15, &qword_100095BA0);
      swift_errorRetain();
      v123(v57);
      swift_errorRelease();
      swift_errorRelease();
      return swift_release();
    }
    uint64_t v59 = v58;
    uint64_t v60 = *(void *)(v58 + 16);
    uint64_t v128 = 0;
    if (!v60)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v61 = type metadata accessor for Logger();
    sub_100022718(v61, (uint64_t)qword_100097490);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v64 = v119;
      *(void *)(v64 + 4) = *(void *)(v59 + 16);
      swift_bridgeObjectRelease();
      *(_WORD *)(v64 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)(v64 + 14) = sub_100035724(v40, v41, aBlock);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Uploading %{public}ld records for %{public}s.", (uint8_t *)v64, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    aBlock[0] = (uint64_t)v35;
    unint64_t v67 = sub_100035E24(v40, v41);
    uint64_t v68 = v35[2];
    BOOL v69 = (v66 & 1) == 0;
    uint64_t v70 = v68 + v69;
    if (__OFADD__(v68, v69))
    {
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      swift_once();
LABEL_5:
      uint64_t v26 = type metadata accessor for Logger();
      sub_100022718(v26, (uint64_t)qword_100097490);
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v27, v28))
      {
        Swift::String v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)Swift::String v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Not uploading local data because Device Activity is not authorized.", v29, 2u);
        swift_slowDealloc();
      }

      return ((uint64_t (*)(void))v123)(0);
    }
    char v71 = v66;
    if (v35[3] >= v70)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v35 = (void *)aBlock[0];
        if ((v66 & 1) == 0) {
          goto LABEL_25;
        }
      }
      else
      {
        sub_100044D14();
        uint64_t v35 = (void *)aBlock[0];
        if ((v71 & 1) == 0) {
          goto LABEL_25;
        }
      }
    }
    else
    {
      sub_1000446EC(v70, isUniquelyReferenced_nonNull_native);
      unint64_t v72 = sub_100035E24(v40, v41);
      if ((v71 & 1) != (v73 & 1)) {
        goto LABEL_83;
      }
      unint64_t v67 = v72;
      uint64_t v35 = (void *)aBlock[0];
      if ((v71 & 1) == 0)
      {
LABEL_25:
        v35[(v67 >> 6) + 8] |= 1 << v67;
        uint64_t v74 = (uint64_t *)(v35[6] + 16 * v67);
        *uint64_t v74 = v40;
        v74[1] = v41;
        *(void *)(v35[7] + 8 * v67) = v59;
        uint64_t v75 = v35[2];
        BOOL v76 = __OFADD__(v75, 1);
        uint64_t v77 = v75 + 1;
        if (v76) {
          goto LABEL_79;
        }
        v35[2] = v77;
        swift_bridgeObjectRetain();
        goto LABEL_30;
      }
    }
    uint64_t v78 = v35[7];
    swift_bridgeObjectRelease();
    *(void *)(v78 + 8 * v67) = v59;
LABEL_30:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v15 = v132;
LABEL_11:
    unint64_t v37 = v135;
    uint64_t v36 = v136;
    sub_10002BDA0((uint64_t)v15, &qword_100095BA0);
    uint64_t v34 = (uint64_t)v127 + (void)v37;
    uint64_t v31 = v36 - 1;
  }
  while (v31);
  swift_bridgeObjectRelease();
LABEL_36:
  CKSyncEngine.state.getter();
  uint64_t v79 = CKSyncEngine.State.pendingRecordZoneChanges.getter();
  swift_release();
  CKSyncEngine.state.getter();
  CKSyncEngine.State.remove(pendingRecordZoneChanges:)((Swift::OpaquePointer)v79);
  swift_release();
  swift_bridgeObjectRelease();
  if (!v35[2])
  {
    swift_bridgeObjectRelease();
    sub_10003BEE8();
LABEL_75:
    v123(0);
    return swift_release();
  }
  uint64_t v121 = CKSyncEngine.state.getter();
  uint64_t v80 = v35[8];
  id v125 = (char *)(v35 + 8);
  uint64_t v81 = 1 << *((unsigned char *)v35 + 32);
  uint64_t v82 = -1;
  if (v81 < 64) {
    uint64_t v82 = ~(-1 << v81);
  }
  unint64_t v83 = v82 & v80;
  int64_t v126 = (unint64_t)(v81 + 63) >> 6;
  uint64_t v129 = CKCurrentUserDefaultName;
  LODWORD(v136) = enum case for CKSyncEngine.PendingRecordZoneChange.saveRecord(_:);
  uint64_t v134 = (uint64_t *)(v137 + 32);
  uint64_t v135 = (void (**)(void, void, void))(v137 + 104);
  swift_bridgeObjectRetain_n();
  os_log_type_t v84 = 0;
  char v85 = &_swiftEmptyArrayStorage;
  id v127 = v35;
  while (2)
  {
    if (v83)
    {
      unint64_t v86 = __clz(__rbit64(v83));
      v83 &= v83 - 1;
      id v133 = v84;
      unint64_t v87 = v86 | ((void)v84 << 6);
LABEL_60:
      uint64_t v91 = v35[7];
      id v92 = (uint64_t *)(v35[6] + 16 * v87);
      double v93 = v35;
      uint64_t v94 = *v92;
      uint64_t v95 = (char *)v92[1];
      uint64_t v96 = *(char **)(v91 + 8 * v87);
      sub_100023228(0, qword_100095F40);
      uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v99 = v98;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v100._countAndFlagsBits = v94;
      uint64_t v101 = v96;
      v100._object = v95;
      v102._countAndFlagsBits = v97;
      v102._object = v99;
      v103.super.Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v100, v102).super.isa;
      uint64_t v104 = *((void *)v101 + 2);
      if (v104)
      {
        uint64_t v130 = v95;
        uint64_t v132 = (uint64_t *)v83;
        sub_100023228(0, &qword_100095C70);
        swift_bridgeObjectRetain();
        id v131 = v101;
        uint64_t v105 = (void **)(v101 + 40);
        uint64_t v107 = v138;
        uint64_t v106 = v139;
        do
        {
          uint64_t v108 = (uint64_t)*(v105 - 1);
          uint64_t v109 = *v105;
          swift_bridgeObjectRetain();
          uint64_t v110 = v103.super.isa;
          v111._countAndFlagsBits = v108;
          v111._object = v109;
          Class isa = CKRecordID.init(recordName:zoneID:)(v111, (CKRecordZoneID)v110).super.isa;
          *uint64_t v107 = isa;
          (*v135)(v107, v136, v106);
          uint64_t v113 = isa;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v85 = (void *)sub_100043E38(0, v85[2] + 1, 1, (unint64_t)v85, &qword_100095C80, (uint64_t (*)(void))&type metadata accessor for CKSyncEngine.PendingRecordZoneChange, (uint64_t (*)(void))&type metadata accessor for CKSyncEngine.PendingRecordZoneChange);
          }
          unint64_t v115 = v85[2];
          unint64_t v114 = v85[3];
          if (v115 >= v114 >> 1) {
            char v85 = (void *)sub_100043E38(v114 > 1, v115 + 1, 1, (unint64_t)v85, &qword_100095C80, (uint64_t (*)(void))&type metadata accessor for CKSyncEngine.PendingRecordZoneChange, (uint64_t (*)(void))&type metadata accessor for CKSyncEngine.PendingRecordZoneChange);
          }
          v105 += 2;
          v85[2] = v115 + 1;
          unint64_t v116 = (unint64_t)v85
               + ((*(unsigned __int8 *)(v137 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v137 + 80))
               + *(void *)(v137 + 72) * v115;
          uint64_t v107 = v138;
          uint64_t v106 = v139;
          (*(void (**)(unint64_t, Class *, uint64_t))(v137 + 32))(v116, v138, v139);

          --v104;
        }
        while (v104);
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        uint64_t v35 = v127;
        unint64_t v83 = (unint64_t)v132;
        os_log_type_t v84 = v133;
      }
      else
      {
        swift_bridgeObjectRelease();

        uint64_t v35 = v93;
        os_log_type_t v84 = v133;
      }
      swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
  BOOL v76 = __OFADD__(v84, 1);
  int64_t v88 = (int64_t)v84 + 1;
  if (v76)
  {
    __break(1u);
    goto LABEL_78;
  }
  if (v88 >= v126) {
    goto LABEL_73;
  }
  unint64_t v89 = *(void *)&v125[8 * v88];
  if (v89)
  {
LABEL_59:
    unint64_t v83 = (v89 - 1) & v89;
    id v133 = (uint64_t *)v88;
    unint64_t v87 = __clz(__rbit64(v89)) + (v88 << 6);
    goto LABEL_60;
  }
  int64_t v90 = v88 + 1;
  if (v88 + 1 >= v126) {
    goto LABEL_73;
  }
  unint64_t v89 = *(void *)&v125[8 * v90];
  if (v89) {
    goto LABEL_58;
  }
  int64_t v90 = v88 + 2;
  if (v88 + 2 >= v126) {
    goto LABEL_73;
  }
  unint64_t v89 = *(void *)&v125[8 * v90];
  if (v89) {
    goto LABEL_58;
  }
  int64_t v90 = v88 + 3;
  if (v88 + 3 >= v126) {
    goto LABEL_73;
  }
  unint64_t v89 = *(void *)&v125[8 * v90];
  if (v89) {
    goto LABEL_58;
  }
  int64_t v90 = v88 + 4;
  if (v88 + 4 >= v126) {
    goto LABEL_73;
  }
  unint64_t v89 = *(void *)&v125[8 * v90];
  if (v89) {
    goto LABEL_58;
  }
  int64_t v90 = v88 + 5;
  if (v88 + 5 >= v126) {
    goto LABEL_73;
  }
  unint64_t v89 = *(void *)&v125[8 * v90];
  if (v89) {
    goto LABEL_58;
  }
  int64_t v90 = v88 + 6;
  if (v88 + 6 >= v126)
  {
LABEL_73:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    CKSyncEngine.State.add(pendingRecordZoneChanges:)((Swift::OpaquePointer)v85);
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_75;
  }
  unint64_t v89 = *(void *)&v125[8 * v90];
  if (v89)
  {
LABEL_58:
    int64_t v88 = v90;
    goto LABEL_59;
  }
  while (1)
  {
    int64_t v88 = v90 + 1;
    if (__OFADD__(v90, 1)) {
      break;
    }
    if (v88 >= v126) {
      goto LABEL_73;
    }
    unint64_t v89 = *(void *)&v125[8 * v88];
    ++v90;
    if (v89) {
      goto LABEL_59;
    }
  }
  __break(1u);
LABEL_83:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10003A2DC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CKSyncEngine.PendingDatabaseChange();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  unint64_t v37 = (CKRecordZoneID *)((char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = CKSyncEngine.state.getter();
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = (unint64_t *)&_swiftEmptyArrayStorage;
  if (v7)
  {
    v30[1] = v6;
    uint64_t v39 = (unint64_t *)&_swiftEmptyArrayStorage;
    sub_10004429C(0, v7, 0);
    uint64_t v8 = v39;
    int64_t v9 = sub_1000467B4(a1);
    int v11 = v10;
    int v13 = v12 & 1;
    uint64_t v36 = a1 + 56;
    uint64_t result = sub_100023228(0, qword_100095F40);
    uint64_t v34 = result;
    unint64_t v33 = CKCurrentUserDefaultName;
    unsigned int v32 = enum case for CKSyncEngine.PendingDatabaseChange.deleteZone(_:);
    v30[2] = v3 + 32;
    uint64_t v31 = (void (**)(CKRecordZoneID *, void, uint64_t))(v3 + 104);
    uint64_t v35 = v3;
    while ((v9 & 0x8000000000000000) == 0 && v9 < 1 << *(unsigned char *)(a1 + 32))
    {
      if (((*(void *)(v36 + (((unint64_t)v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_13;
      }
      if (*(_DWORD *)(a1 + 36) != v11) {
        goto LABEL_14;
      }
      int v38 = v13;
      uint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v9);
      uint64_t v16 = *v15;
      uint64_t v17 = (void *)v15[1];
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = v2;
      id v21 = v20;
      swift_bridgeObjectRetain_n();
      v22._countAndFlagsBits = v16;
      v22._object = v17;
      v23._countAndFlagsBits = v18;
      v23._object = v21;
      uint64_t v2 = v19;
      v24.super.Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v22, v23).super.isa;
      uint64_t v25 = v37;
      v37->super.Class isa = v24.super.isa;
      (*v31)(v25, v32, v2);
      swift_bridgeObjectRelease();
      uint64_t v39 = v8;
      unint64_t v27 = v8[2];
      unint64_t v26 = v8[3];
      if (v27 >= v26 >> 1)
      {
        sub_10004429C(v26 > 1, v27 + 1, 1);
        uint64_t v8 = v39;
      }
      v8[2] = v27 + 1;
      (*(void (**)(unint64_t, CKRecordZoneID *, uint64_t))(v35 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(void *)(v35 + 72) * v27, v25, v2);
      uint64_t result = sub_100046854(v9, v11, v38 & 1, a1);
      int64_t v9 = result;
      int v11 = v28;
      int v13 = v29 & 1;
      if (!--v7)
      {
        sub_100046938(result, v28, v29 & 1);
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
  else
  {
LABEL_11:
    CKSyncEngine.State.add(pendingDatabaseChanges:)((Swift::OpaquePointer)v8);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_10003A7F8(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_10003A85C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = swift_getObjectType();
  v3[9] = a3;
  v3[10] = ObjectType;
  v3[7] = a1;
  v3[8] = a2;
  uint64_t v8 = type metadata accessor for CKSyncEngine.SendChangesOptions();
  v3[11] = v8;
  v3[12] = *(void *)(v8 - 8);
  v3[13] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for CKSyncEngine.SendChangesOptions.Scope();
  v3[14] = v9;
  v3[15] = *(void *)(v9 - 8);
  uint8_t v3[16] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for _DeviceActivityData.User();
  v3[17] = v10;
  v3[18] = *(void *)(v10 - 8);
  v3[19] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for DeviceActivityDataSource();
  v3[20] = v11;
  v3[21] = *(void *)(v11 - 8);
  v3[22] = swift_task_alloc();
  return _swift_task_switch(sub_10003AA50);
}

uint64_t sub_10003AA50()
{
  if (qword_1000950E8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_1000974D8;
  if (![(id)swift_getObjCClassFromMetadata() isAuthorized]) {
    goto LABEL_7;
  }
  uint64_t v2 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 240));
  if (v2[1]) {
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v6 = *(void *)(v0 + 152);
  uint64_t v5 = *(void *)(v0 + 160);
  uint64_t v7 = *(void *)(v0 + 144);
  uint64_t v30 = *(void *)(v0 + 136);
  uint64_t v8 = v1 + *(void *)(*(void *)v1 + 184);
  uint64_t v9 = type metadata accessor for DeviceActivityDataStore();
  *(void *)(v0 + 40) = v9;
  *(void *)(v0 + 48) = &protocol witness table for DeviceActivityDataStore;
  uint64_t v10 = sub_10002B118((uint64_t *)(v0 + 16));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v10, v8, v9);
  DeviceActivityDataSource.init(dataStoring:)();
  DeviceActivityDataSource.localUser.getter();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v11 = _DeviceActivityData.User.altDSID.getter();
  uint64_t v13 = v12;
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v30);
  uint64_t *v2 = v11;
  v2[1] = v13;
  swift_bridgeObjectRelease();
  if (v2[1])
  {
LABEL_6:
    uint64_t v15 = *(void *)(v0 + 120);
    uint64_t v14 = *(void *)(v0 + 128);
    uint64_t v16 = *(void *)(v0 + 104);
    uint64_t v17 = *(void *)(v0 + 112);
    uint64_t v18 = *(void *)(v0 + 88);
    uint64_t v19 = *(void *)(v0 + 96);
    long long v31 = *(_OWORD *)(v0 + 72);
    CKSyncEngine.SendChangesContext.options.getter();
    CKSyncEngine.SendChangesOptions.scope.getter();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v16, v18);
    CKSyncEngine.state.getter();
    uint64_t v20 = CKSyncEngine.State.pendingRecordZoneChanges.getter();
    swift_release();
    uint64_t v21 = swift_task_alloc();
    *(void *)(v21 + 16) = v14;
    sub_10003AE60((uint64_t (*)(char *))sub_100047E44, v21, v20);
    swift_task_dealloc();
    *(_OWORD *)(swift_task_alloc() + 16) = v31;
    CKSyncEngine.RecordZoneChangeBatch.init(pendingChanges:synchronousRecordProvider:)();
    swift_task_dealloc();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v17);
  }
  else
  {
LABEL_7:
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100022718(v22, (uint64_t)qword_100097490);
    Swift::String v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Not creating record zone change batch because Device Activity is not authorized.", v25, 2u);
      swift_slowDealloc();
    }
    uint64_t v26 = *(void *)(v0 + 56);

    uint64_t v27 = type metadata accessor for CKSyncEngine.RecordZoneChangeBatch();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 1, 1, v27);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

uint64_t sub_10003AE60(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v30 = type metadata accessor for CKSyncEngine.PendingRecordZoneChange();
  uint64_t v7 = *(void *)(v30 - 8);
  uint64_t v9 = __chkstk_darwin(v30, v8);
  char v29 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)v22 - v13;
  uint64_t v15 = &_swiftEmptyArrayStorage;
  long long v31 = &_swiftEmptyArrayStorage;
  uint64_t v28 = *(void *)(a3 + 16);
  if (v28)
  {
    unint64_t v16 = 0;
    uint64_t v23 = a3;
    os_log_type_t v24 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v26 = (void (**)(char *, char *, uint64_t))(v7 + 32);
    uint64_t v27 = v7 + 16;
    v22[0] = a1;
    v22[1] = a2;
    while (v16 < *(void *)(a3 + 16))
    {
      unint64_t v17 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v15 = *(void **)(v7 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v14, a3 + v17 + (void)v15 * v16, v30);
      char v18 = a1(v14);
      if (v3)
      {
        (*v24)(v14, v30);
        swift_bridgeObjectRelease();
        swift_release();
        return (uint64_t)v15;
      }
      if (v18)
      {
        uint64_t v25 = *v26;
        v25(v29, v14, v30);
        uint64_t v19 = v31;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000442F8(0, v19[2] + 1, 1);
          uint64_t v19 = v31;
        }
        unint64_t v21 = v19[2];
        unint64_t v20 = v19[3];
        if (v21 >= v20 >> 1)
        {
          sub_1000442F8(v20 > 1, v21 + 1, 1);
          uint64_t v19 = v31;
        }
        void v19[2] = v21 + 1;
        uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v25)((char *)v19 + v17 + v21 * (void)v15, v29, v30);
        long long v31 = v19;
        a3 = v23;
        a1 = (uint64_t (*)(char *))v22[0];
      }
      else
      {
        uint64_t result = ((uint64_t (*)(char *, uint64_t))*v24)(v14, v30);
      }
      if (v28 == ++v16)
      {
        uint64_t v15 = v31;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v15;
  }
  return result;
}

void *sub_10003B104(void *a1)
{
  if (qword_1000950E8 != -1) {
    swift_once();
  }
  return sub_1000480AC(a1);
}

id sub_10003B1A4()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SyncCoordinator()
{
  return self;
}

uint64_t sub_10003B204(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100095CF8 + dword_100095CF8);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10002F710;
  return v7(a1, a2);
}

uint64_t sub_10003B2B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_10002F710;
  return sub_10003A85C(a1, a2, a3);
}

uint64_t sub_10003B368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_10002F710;
  return CKSyncEngineDelegate.nextFetchChangesOptions(_:syncEngine:)(a1, a2, a3, ObjectType, a5);
}

uint64_t sub_10003B43C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10003B504;
  return CKSyncEngineDelegate.shouldFetchChanges(zoneID:syncEngine:)(a1, a2, ObjectType, a4);
}

uint64_t sub_10003B504(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_10003B600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_10003B504;
  return CKSyncEngineDelegate.relatedApplicationBundleIdentifiers(zoneIDs:recordIDs:syncEngine:)(a1, a2, a3, ObjectType, a5);
}

uint64_t sub_10003B6D0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v43 = a5;
  uint64_t v44 = a1;
  uint64_t v45 = a4;
  uint64_t v9 = type metadata accessor for DeviceActivityDataStore.SyncStateType();
  uint64_t v40 = *(void *)(v9 - 8);
  uint64_t v41 = v9;
  uint64_t v11 = __chkstk_darwin(v9, v10);
  unint64_t v37 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  uint64_t v39 = (char *)&v34 - v14;
  uint64_t v42 = sub_1000222D4(&qword_100095B50);
  uint64_t v16 = __chkstk_darwin(v42, v15);
  int v38 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v18);
  unint64_t v20 = (char *)&v34 - v19;
  uint64_t v21 = type metadata accessor for CKSyncEngine.State.Serialization();
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56);
  v22(a6, 1, 1, v21);
  uint64_t v23 = a2[3];
  uint64_t v24 = a2[4];
  uint64_t v35 = a2;
  sub_10002ADE8(a2, v23);
  uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 16);
  uint64_t v36 = a3;
  uint64_t v26 = v25(a3, v45, v23, v24);
  if (v27 >> 60 == 15)
  {
    sub_100047760(&qword_100095BB0, &qword_100095BB8);
    sub_100047760(&qword_100095BC0, &qword_100095BC8);
    uint64_t v28 = (uint64_t)v38;
    DeviceActivityDataStore.syncState<A>(_:)();
    sub_10002BDA0(a6, &qword_100095B50);
    return sub_10002C590(v28, a6, &qword_100095B50);
  }
  else
  {
    uint64_t v30 = v26;
    unint64_t v31 = v27;
    sub_1000226C0(v26, v27);
    CKSyncEngine.State.Serialization.init(deprecatedData:)();
    sub_10002BDA0(a6, &qword_100095B50);
    v22((uint64_t)v20, 0, 1, v21);
    sub_10002C590((uint64_t)v20, a6, &qword_100095B50);
    sub_100047760(&qword_100095BB0, &qword_100095BB8);
    sub_100047760(&qword_100095BC0, &qword_100095BC8);
    DeviceActivityDataStore.write<A>(_:type:)();
    uint64_t v32 = v35[3];
    uint64_t v33 = v35[4];
    sub_10002ADE8(v35, v32);
    memset(v46, 0, sizeof(v46));
    (*(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 40))(v46, v36, v45, v32, v33);
    sub_100022750(v30, v31);
    return sub_10002BDA0((uint64_t)v46, (uint64_t *)&unk_100095B90);
  }
}

uint64_t sub_10003BD5C(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)result + 208);
  if (!*(void *)(result + v1))
  {
    uint64_t v2 = result;
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100022718(v3, (uint64_t)qword_100097490);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Taking a transaction in order to upload local data.", v6, 2u);
      swift_slowDealloc();
    }

    *(void *)(v2 + v1) = os_transaction_create();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_10003BE98(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10003BEC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void sub_10003BEE8()
{
  uint64_t v1 = v0;
  CKSyncEngine.state.getter();
  uint64_t v2 = *(void *)(CKSyncEngine.State.pendingRecordZoneChanges.getter() + 16);
  swift_bridgeObjectRelease();
  if (v2)
  {
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100022718(v3, (uint64_t)qword_100097490);
    oslog = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "There are still more changes to upload. Keeping sync transaction alive.", v5, 2u);
      swift_slowDealloc();
    }
    swift_release();
  }
  else
  {
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100022718(v6, (uint64_t)qword_100097490);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "There are no more changes to upload. Releasing sync transaction.", v9, 2u);
      swift_slowDealloc();
    }

    uint64_t v10 = *(NSObject **)(v1 + *(void *)(*(void *)v1 + 216));
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = sub_100047998;
    *(void *)(v11 + 24) = v1;
    aBlock[4] = sub_100053414;
    aBlock[5] = v11;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10003BEC0;
    aBlock[3] = &unk_10008B4F8;
    uint64_t v12 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v10, v12);
    _Block_release(v12);
    swift_release();
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
  }
}

uint64_t sub_10003C1FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  uint64_t Changes = type metadata accessor for CKSyncEngine.FetchChangesOptions.Scope();
  v6[5] = Changes;
  v6[6] = *(void *)(Changes - 8);
  v6[7] = swift_task_alloc();
  uint64_t ChangesOptions = type metadata accessor for CKSyncEngine.FetchChangesOptions();
  v6[8] = ChangesOptions;
  v6[9] = *(void *)(ChangesOptions - 8);
  v6[10] = swift_task_alloc();
  return _swift_task_switch(sub_10003C31C);
}

uint64_t sub_10003C31C()
{
  (*(void (**)(void, void, void))(v0[6] + 104))(v0[7], enum case for CKSyncEngine.FetchChangesOptions.Scope.all(_:), v0[5]);
  CKSyncEngine.FetchChangesOptions.init(scope:operationGroup:)();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[11] = v1;
  void *v1 = v0;
  v1[1] = sub_10003C414;
  uint64_t v2 = v0[10];
  return CKSyncEngine.fetchChanges(_:)(v2);
}

uint64_t sub_10003C414()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10003C6F0;
  }
  else {
    uint64_t v2 = sub_10003C528;
  }
  return _swift_task_switch(v2);
}

uint64_t sub_10003C528()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v1;
  void *v1 = v0;
  v1[1] = sub_10003C5DC;
  uint64_t v2 = *(void *)(v0 + 80);
  return CKSyncEngine.fetchChanges(_:)(v2);
}

uint64_t sub_10003C5DC()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10003C84C;
  }
  else {
    uint64_t v2 = sub_10003C7A8;
  }
  return _swift_task_switch(v2);
}

uint64_t sub_10003C6F0()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = (void (*)(uint64_t))v0[3];
  (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
  swift_errorRetain();
  v2(v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10003C7A8()
{
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 64);
  (*(void (**)(void))(v0 + 24))(0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_10003C84C()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = (void (*)(uint64_t))v0[3];
  (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
  swift_errorRetain();
  v2(v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10003C904(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v57 = a2;
  uint64_t v58 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v61 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v62 - 8);
  __chkstk_darwin(v62, v10);
  uint64_t v59 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = dispatch_group_create();
  uint64_t v13 = v3 + 4;
  uint64_t v14 = v3[7];
  uint64_t v15 = v3[8];
  uint64_t v65 = v3;
  sub_10002ADE8(v3 + 4, v14);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
  unint64_t v66 = a1;
  uint64_t v60 = v9;
  if (v16)
  {
    uint64_t v17 = *(void *)(v16 + 16);
    swift_bridgeObjectRelease();
    if (v17)
    {
      if (a1 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t result = _CocoaArrayWrapper.endIndex.getter();
        uint64_t v18 = result;
        if (result)
        {
LABEL_5:
          uint64_t v20 = v18 - 1;
          if (v18 >= 1)
          {
            uint64_t v55 = v6;
            uint64_t v56 = v5;
            uint64_t v21 = 0;
            unint64_t v22 = a1 & 0xC000000000000001;
            if (!v22) {
              goto LABEL_8;
            }
LABEL_7:
            for (id i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(); ; id i = *(id *)(v66 + 8 * v21 + 32))
            {
              uint64_t v24 = i;
              dispatch_group_enter(v12);
              uint64_t v25 = v65[7];
              uint64_t v26 = v65[8];
              sub_10002ADE8(v13, v25);
              uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v25, v26);
              if (v27)
              {
                uint64_t v28 = v27;
                if (*(void *)(v27 + 16))
                {
                  id v29 = [objc_allocWithZone((Class)CKShare) initWithRecordZoneID:v24];
                  sub_1000400AC(v28, v29, v12);

                  swift_bridgeObjectRelease();
                  if (v20 == v21) {
                    goto LABEL_29;
                  }
                  goto LABEL_19;
                }
                swift_bridgeObjectRelease();
              }
              if (qword_1000950C8 != -1) {
                swift_once();
              }
              uint64_t v30 = type metadata accessor for Logger();
              sub_100022718(v30, (uint64_t)qword_100097490);
              unint64_t v31 = Logger.logObject.getter();
              os_log_type_t v32 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v31, v32))
              {
                uint64_t v33 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v33 = 0;
                _os_log_impl((void *)&_mh_execute_header, v31, v32, "No Apple IDs to share with", v33, 2u);
                swift_slowDealloc();
              }

              dispatch_group_leave(v12);
              if (v20 == v21) {
                goto LABEL_29;
              }
LABEL_19:
              ++v21;
              if (v22) {
                goto LABEL_7;
              }
LABEL_8:
              ;
            }
          }
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v18 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t result = swift_bridgeObjectRetain();
        if (v18) {
          goto LABEL_5;
        }
      }
      goto LABEL_33;
    }
  }
  if (!(a1 >> 62))
  {
    uint64_t v34 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v34) {
      goto LABEL_23;
    }
LABEL_33:
    swift_bridgeObjectRelease();
LABEL_34:
    uint64_t v49 = swift_allocObject();
    uint64_t v51 = v57;
    uint64_t v50 = v58;
    *(void *)(v49 + 16) = v57;
    *(void *)(v49 + 24) = v50;
    unint64_t v72 = sub_100053408;
    uint64_t v73 = v49;
    aBlock = _NSConcreteStackBlock;
    uint64_t v69 = 1107296256;
    uint64_t v70 = sub_10003D02C;
    char v71 = &unk_10008B8B8;
    uint64_t v52 = _Block_copy(&aBlock);
    sub_10002CAF0(v51);
    unint64_t v53 = v59;
    static DispatchQoS.unspecified.getter();
    unint64_t v67 = &_swiftEmptyArrayStorage;
    sub_100046944((unint64_t *)&qword_100095BE0, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000222D4((uint64_t *)&unk_100095F30);
    sub_10004785C((unint64_t *)&qword_100095BF0, (uint64_t *)&unk_100095F30);
    uint64_t v54 = v61;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_group.notify(qos:flags:queue:execute:)();
    _Block_release(v52);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v54, v5);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v53, v62);
    return swift_release();
  }
  swift_bridgeObjectRetain();
  uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
  if (!v34) {
    goto LABEL_33;
  }
LABEL_23:
  uint64_t result = sub_100023228(0, &qword_100095C70);
  if (v34 >= 1)
  {
    uint64_t v55 = v6;
    uint64_t v56 = v5;
    uint64_t v35 = 0;
    uint64_t v36 = (void *)v65[3];
    unint64_t v63 = a1 & 0xC000000000000001;
    id v64 = v36;
    do
    {
      if (v63) {
        id v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v37 = *(id *)(a1 + 8 * v35 + 32);
      }
      int v38 = v37;
      ++v35;
      dispatch_group_enter(v12);
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v41 = v40;
      id v42 = v38;
      v43._countAndFlagsBits = v39;
      v43._object = v41;
      Class isa = CKRecordID.init(recordName:zoneID:)(v43, (CKRecordZoneID)v42).super.isa;
      uint64_t v45 = swift_allocObject();
      *(void *)(v45 + 16) = v42;
      *(void *)(v45 + 24) = v12;
      unint64_t v72 = sub_1000533C0;
      uint64_t v73 = v45;
      aBlock = _NSConcreteStackBlock;
      uint64_t v69 = 1107296256;
      uint64_t v70 = sub_100038350;
      char v71 = &unk_10008B868;
      uint64_t v46 = _Block_copy(&aBlock);
      id v47 = v42;
      uint64_t v48 = v12;
      swift_retain();
      [v64 deleteRecordWithID:isa completionHandler:v46];
      _Block_release(v46);

      swift_release();
      swift_release();
      a1 = v66;
    }
    while (v34 != v35);
LABEL_29:
    swift_bridgeObjectRelease();
    uint64_t v6 = v55;
    uint64_t v5 = v56;
    goto LABEL_34;
  }
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_10003D030@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = sub_1000222D4(&qword_100095CE8);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for _SegmentInterval();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[2] = a1;
  v23[3] = a2;
  v23[0] = 95;
  v23[1] = 0xE100000000000000;
  sub_100049DE8();
  uint64_t v15 = (void *)StringProtocol.components<A>(separatedBy:)();
  if (!v15[2])
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  uint64_t v16 = v15[4];
  uint64_t v17 = v15[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  _SegmentInterval.init(unlocalizedSegmentName:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    swift_bridgeObjectRelease();
    sub_10002BDA0((uint64_t)v9, &qword_100095CE8);
LABEL_5:
    uint64_t v18 = sub_1000222D4(&qword_100095CB0);
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a3, 1, 1, v18);
  }
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v20(v14, v9, v10);
  uint64_t v21 = sub_1000222D4(&qword_100095CB0);
  unint64_t v22 = (char *)a3 + *(int *)(v21 + 48);
  *a3 = v16;
  a3[1] = v17;
  v20(v22, v14, v10);
  return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(a3, 0, 1, v21);
}

void sub_10003D2C8(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v152 = a3;
  uint64_t v151 = a2;
  uint64_t v6 = sub_1000222D4(&qword_100095938);
  __chkstk_darwin(v6 - 8, v7);
  id v143 = (char *)&v139 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v166 = type metadata accessor for _DeviceActivityData.ActivitySegment();
  uint64_t v146 = *(void *)(v166 - 8);
  uint64_t v10 = __chkstk_darwin(v166, v9);
  id v141 = (char *)&v139 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  id v148 = (char *)&v139 - v13;
  uint64_t v161 = type metadata accessor for DeviceActivityDataStore();
  uint64_t v163 = *(void *)(v161 - 8);
  uint64_t v15 = __chkstk_darwin(v161, v14);
  uint64_t v142 = (char *)&v139 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v17);
  unint64_t v145 = (char *)&v139 - v18;
  uint64_t v19 = sub_1000222D4(&qword_100095CA0);
  __chkstk_darwin(v19 - 8, v20);
  uint64_t v147 = (char *)&v139 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = type metadata accessor for _DeviceActivityData.Metadata();
  uint64_t v150 = *(void *)(v149 - 8);
  uint64_t v23 = __chkstk_darwin(v149, v22);
  uint64_t v144 = (char *)&v139 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v25);
  uint64_t v153 = (char *)&v139 - v26;
  uint64_t v27 = type metadata accessor for _SegmentInterval();
  uint64_t v167 = *(void *)(v27 - 8);
  __chkstk_darwin(v27, v28);
  id v165 = (char *)&v139 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for _DeviceActivityData.User();
  uint64_t countAndFlagsBits = *(void *)(v30 - 8);
  uint64_t v160 = v30;
  __chkstk_darwin(v30, v31);
  object = (char *)&v139 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for DeviceActivityDataSource();
  uint64_t v156 = *(void *)(v33 - 8);
  unint64_t v157 = v33;
  __chkstk_darwin(v33, v34);
  uint64_t v36 = (char *)&v139 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_1000222D4(&qword_100095CA8);
  __chkstk_darwin(v37 - 8, v38);
  uint64_t v40 = (uint64_t *)((char *)&v139 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v41 = sub_1000222D4(&qword_100095CB0);
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v44 = __chkstk_darwin(v41, v43);
  CFStringRef v164 = (char *)&v139 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44, v46);
  uint64_t v48 = (uint64_t *)((char *)&v139 - v47);
  id v155 = a1;
  id v168 = [a1 recordID];
  id v49 = [v168 zoneID];
  id v50 = [v49 zoneName];

  uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v53 = v52;

  sub_10003D030(v51, v53, v40);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41) != 1)
  {
    uint64_t v64 = *(int *)(v41 + 48);
    uint64_t v65 = (char *)v48 + v64;
    unint64_t v66 = (char *)v40 + v64;
    uint64_t v67 = *v40;
    uint64_t v68 = v40[1];
    *uint64_t v48 = v67;
    v48[1] = v68;
    uint64_t v162 = v48;
    uint64_t v69 = v167;
    uint64_t v70 = *(void (**)(char *, char *, uint64_t))(v167 + 32);
    uint64_t v154 = v27;
    uint64_t v140 = v70;
    v70(v65, v66, v27);
    char v71 = (uint64_t *)(v4 + *(void *)(*(void *)v4 + 240));
    unint64_t v72 = (char *)v71[1];
    if (v72)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v73 = v4 + *(void *)(*(void *)v4 + 184);
      uint64_t v74 = v161;
      v169[3] = v161;
      v169[4] = (uint64_t)&protocol witness table for DeviceActivityDataStore;
      uint64_t v75 = sub_10002B118(v169);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v163 + 16))(v75, v73, v74);
      swift_bridgeObjectRetain();
      DeviceActivityDataSource.init(dataStoring:)();
      BOOL v76 = object;
      DeviceActivityDataSource.localUser.getter();
      (*(void (**)(char *, unint64_t))(v156 + 8))(v36, v157);
      uint64_t v77 = _DeviceActivityData.User.altDSID.getter();
      uint64_t v79 = v78;
      (*(void (**)(char *, uint64_t))(countAndFlagsBits + 8))(v76, v160);
      *char v71 = v77;
      v71[1] = v79;
      uint64_t v69 = v167;
      swift_bridgeObjectRelease();
      unint64_t v72 = (char *)v71[1];
      if (!v72)
      {
        swift_bridgeObjectRelease();
        if (qword_1000950C8 != -1) {
          swift_once();
        }
        uint64_t v95 = type metadata accessor for Logger();
        sub_100022718(v95, (uint64_t)qword_100097490);
        id v96 = v168;
        uint64_t v97 = Logger.logObject.getter();
        os_log_type_t v98 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v97, v98))
        {
          uint64_t v99 = (uint8_t *)swift_slowAlloc();
          v169[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v99 = 136446210;
          id v96 = v96;
          id v100 = [v96 description];
          uint64_t v101 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v103 = v102;

          uint64_t v170 = sub_100035724(v101, v103, v169);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v97, v98, "Failed to update local object for %{public}s because the user has Alt DSID", v99, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        goto LABEL_31;
      }
    }
    uint64_t v80 = *v71;
    uint64_t v81 = &v164[*(int *)(v41 + 48)];
    uint64_t v82 = v154;
    (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v81, v65, v154);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t v83 = v165;
    v140(v165, v81, v82);
    os_log_type_t v84 = v72;
    uint64_t v85 = v4 + *(void *)(*(void *)v4 + 184);
    Swift::String v87 = DeviceActivityDataStore.localDeviceIdentifier()();
    if (v86)
    {
      swift_bridgeObjectRelease();
      uint64_t v88 = (uint64_t)v162;
      if (qword_1000950C8 != -1) {
        swift_once();
      }
      uint64_t v106 = type metadata accessor for Logger();
      sub_100022718(v106, (uint64_t)qword_100097490);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v107 = Logger.logObject.getter();
      os_log_type_t v108 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v107, v108))
      {
        uint64_t v109 = (uint8_t *)swift_slowAlloc();
        v169[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v109 = 136446210;
        uint64_t v170 = v86;
        swift_errorRetain();
        sub_1000222D4(&qword_100095330);
        uint64_t v110 = String.init<A>(describing:)();
        uint64_t v170 = sub_100035724(v110, v111, v169);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v107, v108, "Failed to update local object: %{public}s", v109, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v167 + 8))(v83, v154);
LABEL_31:
        uint64_t v112 = (uint64_t)v162;
LABEL_34:
        sub_10002BDA0(v112, &qword_100095CB0);
        return;
      }

      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    else
    {
      uint64_t countAndFlagsBits = v87._countAndFlagsBits;
      uint64_t v160 = v80;
      CFStringRef v164 = v84;
      uint64_t v90 = CKRecord.recordType.getter();
      uint64_t v91 = v89;
      uint64_t v88 = (uint64_t)v162;
      if (v90 == 0x617461646174654DLL && v89 == 0xE800000000000000
        || (char v92 = _stringCompareWithSmolCheck(_:_:expecting:)(), v93 = v168, (v92 & 1) != 0))
      {
        swift_bridgeObjectRelease();
        DeviceActivityDataStore.fetchLocalMetadata(segmentInterval:)();
        uint64_t v94 = v163;
        object = (char *)v87._object;
        sub_1000226AC(v151, v152);
        _DeviceActivityData.Metadata.recordSystemFields.setter();
        DeviceActivityDataStore.saveLocalMetadata(_:)();
        DeviceActivityDataStore.fetchCloudMetadata(userAltDSID:deviceIdentifier:segmentInterval:)();
        uint64_t v117 = v150;
        uint64_t v118 = v147;
        uint64_t v119 = v149;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v150 + 56))(v147, 0, 1, v149);
        (*(void (**)(char *, char *, uint64_t))(v117 + 32))(v144, v118, v119);
        sub_1000226AC(v151, v152);
        _DeviceActivityData.Metadata.recordSystemFields.setter();
        (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))(v145, v85, v161);
        sub_100046944(&qword_100095AD8, 255, (void (*)(uint64_t))&type metadata accessor for _DeviceActivityData.Metadata);
        sub_100046944((unint64_t *)&unk_100095CD0, 255, (void (*)(uint64_t))&type metadata accessor for _DeviceActivityData.Metadata);
        long long v120 = (void (**)(char *, uint64_t))(v94 + 8);
        uint64_t v123 = static DeviceActivityDataStore.encode<A>(_:)();
        unint64_t v166 = v124;
        id v125 = v145;
        DeviceActivityDataStore.saveEncodedCloudMetadata(_:userAltDSID:deviceIdentifier:segmentInterval:)();
        int64_t v126 = (void (**)(char *, uint64_t))(v150 + 8);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100022764(v123, v166);

        (*v120)(v125, v161);
        id v131 = (void (*)(void, unint64_t))*v126;
        unint64_t v132 = v149;
        (*v126)(v144, v149);
        id v133 = &v172;
      }
      else
      {
        if (v90 == 0x7974697669746341 && v91 == 0xEF746E656D676553)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v104 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v104 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (qword_1000950C8 != -1) {
              swift_once();
            }
            uint64_t v113 = type metadata accessor for Logger();
            sub_100022718(v113, (uint64_t)qword_100097490);
            unint64_t v114 = Logger.logObject.getter();
            os_log_type_t v115 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v114, v115))
            {
              unint64_t v116 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)unint64_t v116 = 0;
              _os_log_impl((void *)&_mh_execute_header, v114, v115, "Failed to update object with unknown record type", v116, 2u);
              swift_slowDealloc();
            }

            goto LABEL_33;
          }
        }
        object = (char *)v87._object;
        id v105 = [v93 recordName];
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        DeviceActivityDataStore.fetchLocalSegment(segmentInterval:recordName:)();
        swift_bridgeObjectRelease();
        sub_1000226AC(v151, v152);
        _DeviceActivityData.ActivitySegment.recordSystemFields.setter();
        DeviceActivityDataStore.saveLocalSegment(_:segmentInterval:)();
        id v121 = [v168 recordName];
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        DeviceActivityDataStore.fetchCloudSegment(userAltDSID:deviceIdentifier:segmentInterval:recordName:)();
        uint64_t v122 = v146;
        swift_bridgeObjectRelease();
        id v127 = v143;
        unint64_t v128 = v166;
        (*(void (**)(char *, void, uint64_t, unint64_t))(v122 + 56))(v143, 0, 1, v166);
        (*(void (**)(char *, char *, unint64_t))(v122 + 32))(v141, v127, v128);
        sub_1000226AC(v151, v152);
        _DeviceActivityData.ActivitySegment.recordSystemFields.setter();
        uint64_t v129 = v163;
        (*(void (**)(char *, uint64_t, uint64_t))(v163 + 16))(v142, v85, v161);
        sub_100046944(&qword_100095118, 255, (void (*)(uint64_t))&type metadata accessor for _DeviceActivityData.ActivitySegment);
        sub_100046944(&qword_100095120, 255, (void (*)(uint64_t))&type metadata accessor for _DeviceActivityData.ActivitySegment);
        uint64_t v130 = static DeviceActivityDataStore.encode<A>(_:)();
        unint64_t v135 = v134;
        uint64_t v136 = v130;
        id v137 = [v168 recordName];
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v156 = v136;
        unint64_t v157 = v135;
        DeviceActivityDataStore.saveEncodedCloudSegment(_:userAltDSID:deviceIdentifier:segmentInterval:recordName:)();
        id v138 = (void (**)(char *, unint64_t))(v146 + 8);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100022764(v156, v157);

        (*(void (**)(char *, uint64_t))(v129 + 8))(v142, v161);
        id v131 = (void (*)(void, unint64_t))*v138;
        unint64_t v132 = v166;
        (*v138)(v141, v166);
        id v133 = &v171;
      }
      v131(*(v133 - 32), v132);
    }
LABEL_33:
    (*(void (**)(char *, uint64_t))(v167 + 8))(v83, v82);
    uint64_t v112 = v88;
    goto LABEL_34;
  }
  sub_10002BDA0((uint64_t)v40, &qword_100095CA8);
  if (qword_1000950C8 != -1) {
    swift_once();
  }
  uint64_t v54 = type metadata accessor for Logger();
  sub_100022718(v54, (uint64_t)qword_100097490);
  id v55 = v168;
  uint64_t v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v56, v57))
  {
    uint64_t v58 = (uint8_t *)swift_slowAlloc();
    v169[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v58 = 136446210;
    id v59 = v55;
    id v60 = [v59 description];
    uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v63 = v62;

    uint64_t v170 = sub_100035724(v61, v63, v169);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "Failed to update local object for %{public}s", v58, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_10003EB0C(uint64_t a1, NSObject *a2)
{
  uint64_t v5 = v2[7];
  uint64_t v6 = v2[8];
  sub_10002ADE8(v2 + 4, v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if (*(void *)(v7 + 16))
    {
      id v9 = [objc_allocWithZone((Class)CKShare) initWithRecordZoneID:a1];
      sub_1000400AC(v8, v9, a2);

      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
  }
  if (qword_1000950C8 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100022718(v10, (uint64_t)qword_100097490);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "No Apple IDs to share with", v13, 2u);
    swift_slowDealloc();
  }

  dispatch_group_leave(a2);
}

void sub_10003ECB4(void *a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t)a1;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_10002ADE8(a1, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  uint64_t v7 = v6;
  if ((v6 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_100023228(0, (unint64_t *)&qword_100095AD0);
    sub_100037E78();
    Set.Iterator.init(_cocoa:)();
    uint64_t v7 = v41[1];
    uint64_t v35 = v41[2];
    uint64_t v8 = v41[3];
    uint64_t v9 = v41[4];
    unint64_t v10 = v41[5];
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
    uint64_t v35 = v6 + 56;
    uint64_t v8 = ~v11;
    uint64_t v12 = -v11;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v10 = v13 & *(void *)(v6 + 56);
  }
  int64_t v37 = (unint64_t)(v8 + 64) >> 6;
  p_prots = &OBJC_PROTOCOL___USUsageTrackingAgentPrivate.prots;
  uint64_t v36 = v3;
  while (v7 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_33;
    }
    sub_100023228(0, (unint64_t *)&qword_100095AD0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v18 = (id)v41[0];
    swift_unknownObjectRelease();
    uint64_t v17 = v9;
    uint64_t v15 = v10;
    if (!v18) {
      goto LABEL_33;
    }
LABEL_29:
    unint64_t v39 = v15;
    uint64_t v40 = v17;
    if (p_prots[25] != (__objc2_prot_list *)-1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100022718(v22, (uint64_t)qword_100097490);
    id v23 = v18;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v38 = swift_slowAlloc();
      v41[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 136446210;
      id v26 = v23;
      uint64_t v27 = v8;
      id v28 = [v26 description];
      uint64_t v29 = v7;
      uint64_t v30 = a2;
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v33 = v32;

      uint64_t v8 = v27;
      uint64_t v34 = v31;
      a2 = v30;
      uint64_t v7 = v29;
      *(void *)(v38 + 4) = sub_100035724(v34, v33, v41);

      p_prots = (__objc2_prot_list **)(&OBJC_PROTOCOL___USUsageTrackingAgentPrivate + 16);
      uint64_t v3 = v36;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Handling pending invitation: %{public}s", (uint8_t *)v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v9 = v40;
    sub_10003F10C(v3, v23);

    unint64_t v10 = v39;
  }
  if (v10)
  {
    uint64_t v15 = (v10 - 1) & v10;
    unint64_t v16 = __clz(__rbit64(v10)) | (v9 << 6);
    uint64_t v17 = v9;
LABEL_28:
    id v18 = *(id *)(*(void *)(v7 + 48) + 8 * v16);
    if (!v18) {
      goto LABEL_33;
    }
    goto LABEL_29;
  }
  int64_t v19 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v19 >= v37) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v35 + 8 * v19);
    uint64_t v17 = v9 + 1;
    if (!v20)
    {
      uint64_t v17 = v9 + 2;
      if (v9 + 2 >= v37) {
        goto LABEL_33;
      }
      unint64_t v20 = *(void *)(v35 + 8 * v17);
      if (!v20)
      {
        uint64_t v17 = v9 + 3;
        if (v9 + 3 >= v37) {
          goto LABEL_33;
        }
        unint64_t v20 = *(void *)(v35 + 8 * v17);
        if (!v20)
        {
          uint64_t v21 = v9 + 4;
          while (v37 != v21)
          {
            unint64_t v20 = *(void *)(v35 + 8 * v21++);
            if (v20)
            {
              uint64_t v17 = v21 - 1;
              goto LABEL_27;
            }
          }
LABEL_33:
          sub_10003705C();
          return;
        }
      }
    }
LABEL_27:
    uint64_t v15 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v17 << 6);
    goto LABEL_28;
  }
  __break(1u);
}

uint64_t sub_10003F10C(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v108 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  uint64_t v107 = (char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1000222D4(&qword_100095C08);
  uint64_t v15 = __chkstk_darwin(v13 - 8, v14);
  uint64_t v17 = (char *)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  unint64_t v20 = (char *)&v97 - v19;
  uint64_t v21 = (void *)type metadata accessor for URL();
  uint64_t v110 = *(v21 - 1);
  id v111 = v21;
  __chkstk_darwin(v21, v22);
  uint64_t v109 = (char *)&v97 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v24 = [a2 context];
  self;
  os_log_type_t v25 = (void *)swift_dynamicCastObjCClass();
  if (v25)
  {
    id v26 = v25;
    unint64_t v103 = v9;
    uint64_t v104 = v10;
    uint64_t v105 = v6;
    uint64_t v106 = v5;
    id v27 = [v25 schemaIdentifier];
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v30 = v29;

    if (v28 == 0xD000000000000030 && v30 == 0x8000000100075E40
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      id v31 = [v26 dictionary];
      uint64_t v32 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      if (*(void *)(v32 + 16) && (unint64_t v33 = sub_100035E24(0x6974617469766E69, 0xEE00617461446E6FLL), (v34 & 1) != 0))
      {
        sub_100035E9C(*(void *)(v32 + 56) + 32 * v33, (uint64_t)&aBlock);
        swift_bridgeObjectRelease();
        if (*((void *)&v115 + 1))
        {
          if ((swift_dynamicCast() & 1) == 0)
          {
LABEL_20:
            if (qword_1000950C8 != -1) {
              swift_once();
            }
            uint64_t v50 = type metadata accessor for Logger();
            sub_100022718(v50, (uint64_t)qword_100097490);
            uint64_t v51 = Logger.logObject.getter();
            os_log_type_t v52 = static os_log_type_t.error.getter();
            if (!os_log_type_enabled(v51, v52)) {
              goto LABEL_25;
            }
            uint64_t v53 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v53 = 0;
            _os_log_impl((void *)&_mh_execute_header, v51, v52, "Failed to extract share metadata from invitation. Declining the invitation.", v53, 2u);
LABEL_24:
            swift_slowDealloc();
LABEL_25:

LABEL_26:
            uint64_t v54 = v3 + 9;
            uint64_t v56 = v3[12];
            uint64_t v55 = v3[13];
            sub_10002ADE8(v54, v56);
            (*(void (**)(void *, void (*)(uint64_t), void, uint64_t, uint64_t))(v55 + 48))(a2, sub_10005EED8, 0, v56, v55);
            return swift_unknownObjectRelease();
          }
          uint64_t v101 = v112;
          unint64_t v102 = v113;
          id v35 = [v26 dictionary];
          uint64_t v36 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

          if (*(void *)(v36 + 16))
          {
            unint64_t v37 = sub_100035E24(0xD000000000000018, 0x8000000100075EC0);
            id v38 = v111;
            if (v39)
            {
              sub_100035E9C(*(void *)(v36 + 56) + 32 * v37, (uint64_t)&aBlock);
            }
            else
            {
              long long aBlock = 0u;
              long long v115 = 0u;
            }
          }
          else
          {
            long long aBlock = 0u;
            long long v115 = 0u;
            id v38 = v111;
          }
          swift_bridgeObjectRelease();
          if (*((void *)&v115 + 1))
          {
            if ((swift_dynamicCast() & 1) == 0)
            {
              sub_100022764(v101, v102);
              goto LABEL_20;
            }
            URL.init(string:)();
            swift_bridgeObjectRelease();
            uint64_t v65 = v110;
            unint64_t v66 = *(unsigned int (**)(char *, uint64_t, id))(v110 + 48);
            if (v66(v20, 1, v38) == 1)
            {
              sub_100022764(v101, v102);
              uint64_t v48 = &qword_100095C08;
              p_long long aBlock = v20;
              goto LABEL_19;
            }
            uint64_t v67 = v109;
            (*(void (**)(char *, char *, id))(v65 + 32))(v109, v20, v38);
            uint64_t v68 = *(void (**)(unint64_t, char *, id))(v65 + 16);
            id v111 = (id)(v65 + 16);
            id v100 = v68;
            v68((unint64_t)v17, v67, v38);
            (*(void (**)(char *, void, uint64_t, id))(v65 + 56))(v17, 0, 1, v38);
            sub_1000226C0(v101, v102);
            v69.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
            if (v66(v17, 1, v38) == 1)
            {
              char v71 = 0;
            }
            else
            {
              URL._bridgeToObjectiveC()(v70);
              char v71 = v72;
              (*(void (**)(char *, id))(v65 + 8))(v17, v38);
            }
            id v98 = [objc_allocWithZone((Class)CKDeviceToDeviceShareInvitationToken) initWithSharingInvitationData:v69.super.isa shareURL:v71];
            sub_100022764(v101, v102);

            uint64_t v99 = swift_allocObject();
            sub_1000222D4(&qword_100095C10);
            unint64_t v73 = (*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
            uint64_t v74 = swift_allocObject();
            long long v97 = xmmword_100073730;
            *(_OWORD *)(v74 + 16) = xmmword_100073730;
            uint64_t v75 = v109;
            BOOL v76 = v100;
            v100(v74 + v73, v109, v38);
            sub_1000222D4(&qword_100095C18);
            id v77 = v38;
            uint64_t v78 = (int *)(sub_1000222D4((uint64_t *)&unk_100095C20) - 8);
            unint64_t v79 = (*(unsigned __int8 *)(*(void *)v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v78 + 80);
            uint64_t v80 = swift_allocObject();
            *(_OWORD *)(v80 + 16) = v97;
            unint64_t v81 = v80 + v79;
            uint64_t v82 = v78[14];
            v76(v81, v75, v77);
            unint64_t v83 = v98;
            *(void *)(v81 + v82) = v98;
            id v111 = v83;
            sub_1000429E4(v80);
            id v84 = objc_allocWithZone((Class)CKFetchShareMetadataOperation);
            Class isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            sub_100023228(0, &qword_1000954B8);
            sub_100046944((unint64_t *)&qword_100095C30, 255, (void (*)(uint64_t))&type metadata accessor for URL);
            Class v86 = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            id v87 = [v84 initWithShareURLs:isa invitationTokensByShareURL:v86];

            uint64_t v88 = v99;
            *(void *)(v99 + 16) = v87;
            [v87 setQualityOfService:25];
            uint64_t v89 = swift_allocObject();
            *(void *)(v89 + 16) = v3;
            *(void *)(v89 + 24) = a2;
            swift_retain();
            id v90 = a2;
            CKFetchShareMetadataOperation.perShareMetadataResultBlock.setter();
            sub_100023228(0, (unint64_t *)&unk_100095F20);
            uint64_t v91 = (void *)static OS_dispatch_queue.main.getter();
            uint64_t v92 = swift_allocObject();
            *(void *)(v92 + 16) = v3;
            *(void *)(v92 + 24) = v88;
            unint64_t v116 = sub_1000478CC;
            uint64_t v117 = v92;
            *(void *)&long long aBlock = _NSConcreteStackBlock;
            *((void *)&aBlock + 1) = 1107296256;
            *(void *)&long long v115 = sub_10003D02C;
            *((void *)&v115 + 1) = &unk_10008B368;
            id v93 = _Block_copy(&aBlock);
            swift_retain();
            swift_retain();
            swift_release();
            uint64_t v94 = v107;
            static DispatchQoS.unspecified.getter();
            *(void *)&long long aBlock = &_swiftEmptyArrayStorage;
            sub_100046944((unint64_t *)&qword_100095BE0, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
            sub_1000222D4((uint64_t *)&unk_100095F30);
            sub_10004785C((unint64_t *)&qword_100095BF0, (uint64_t *)&unk_100095F30);
            uint64_t v95 = v103;
            uint64_t v96 = v106;
            dispatch thunk of SetAlgebra.init<A>(_:)();
            OS_dispatch_queue.async(group:qos:flags:execute:)();
            _Block_release(v93);

            swift_unknownObjectRelease();
            sub_100022764(v101, v102);
            (*(void (**)(char *, uint64_t))(v105 + 8))(v95, v96);
            (*(void (**)(char *, uint64_t))(v108 + 8))(v94, v104);
            (*(void (**)(char *, id))(v110 + 8))(v109, v77);
            return swift_release();
          }
          sub_100022764(v101, v102);
        }
      }
      else
      {
        long long aBlock = 0u;
        long long v115 = 0u;
        swift_bridgeObjectRelease();
      }
      uint64_t v48 = (uint64_t *)&unk_100095B90;
      p_long long aBlock = (char *)&aBlock;
LABEL_19:
      sub_10002BDA0((uint64_t)p_aBlock, v48);
      goto LABEL_20;
    }
    if ((v28 != 0xD000000000000037 || v30 != 0x8000000100075E80)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (qword_1000950C8 != -1) {
        swift_once();
      }
      uint64_t v62 = type metadata accessor for Logger();
      sub_100022718(v62, (uint64_t)qword_100097490);
      swift_bridgeObjectRetain();
      uint64_t v51 = Logger.logObject.getter();
      os_log_type_t v63 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v51, v63))
      {

        swift_bridgeObjectRelease_n();
        goto LABEL_26;
      }
      uint64_t v64 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long aBlock = swift_slowAlloc();
      id v111 = v24;
      *(_DWORD *)uint64_t v64 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v112 = sub_100035724(v28, v30, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v51, v63, "Received invitation using unknown schema: %{public}s", v64, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      goto LABEL_24;
    }
    swift_bridgeObjectRelease();
    if (qword_100095100 != -1) {
      swift_once();
    }
    uint64_t v57 = qword_1000974E8;
    uint64_t v58 = swift_allocObject();
    *(void *)(v58 + 16) = v3;
    *(void *)(v58 + 24) = a2;
    id v59 = (void *)v3[3];
    unint64_t v116 = sub_1000478B0;
    uint64_t v117 = v58;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v115 = sub_100038350;
    *((void *)&v115 + 1) = &unk_10008B2C8;
    id v60 = _Block_copy(&aBlock);
    swift_retain();
    id v61 = a2;
    swift_retain();
    [v59 saveRecordZone:v57 completionHandler:v60];
    _Block_release(v60);
    swift_release();
    swift_unknownObjectRelease();
    return swift_release();
  }
  swift_unknownObjectRelease();
  if (qword_1000950C8 != -1) {
    swift_once();
  }
  uint64_t v40 = type metadata accessor for Logger();
  sub_100022718(v40, (uint64_t)qword_100097490);
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v43 = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Failed to extract context from invitation. Declining the invitation.", v43, 2u);
    swift_slowDealloc();
  }

  uint64_t v44 = v3 + 9;
  uint64_t v46 = v3[12];
  uint64_t v45 = v3[13];
  sub_10002ADE8(v44, v46);
  return (*(uint64_t (**)(void *, void (*)(uint64_t), void, uint64_t, uint64_t))(v45 + 48))(a2, sub_10005EED8, 0, v46, v45);
}

uint64_t sub_100040068(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t sub_1000400AC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v48 = a3;
  uint64_t v47 = a2;
  uint64_t v4 = (char **)type metadata accessor for DispatchWorkItemFlags();
  uint64_t v54 = (uint64_t)*(v4 - 1);
  __chkstk_darwin(v4, v5);
  os_log_type_t v52 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for DispatchQoS();
  uint64_t v51 = *(void *)(v53 - 8);
  __chkstk_darwin(v53, v7);
  uint64_t v50 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000950C8 != -1) {
    goto LABEL_17;
  }
  while (1)
  {
    uint64_t v9 = type metadata accessor for Logger();
    sub_100022718(v9, (uint64_t)qword_100097490);
    swift_bridgeObjectRetain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v13 = Set.description.getter();
      unint64_t v15 = v14;
      swift_bridgeObjectRelease();
      uint64_t v55 = sub_100035724(v13, v15, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Fetching share participants with Apple IDs: %{public}s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v16 = *(void *)(a1 + 16);
    if (!v16) {
      break;
    }
    uint64_t v46 = v4;
    aBlock[0] = (uint64_t)&_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    int64_t v17 = sub_1000467B4(a1);
    int v19 = v18;
    char v21 = v20 & 1;
    uint64_t v4 = &selRef_validateBudget_error_;
    while ((v17 & 0x8000000000000000) == 0 && v17 < 1 << *(unsigned char *)(a1 + 32))
    {
      if (((*(void *)(a1 + 56 + (((unint64_t)v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17) & 1) == 0) {
        goto LABEL_15;
      }
      if (*(_DWORD *)(a1 + 36) != v19) {
        goto LABEL_16;
      }
      id v22 = objc_allocWithZone((Class)CKUserIdentityLookupInfo);
      swift_bridgeObjectRetain();
      NSString v23 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v22 initWithEmailAddress:v23];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      int64_t v24 = sub_100046854(v17, v19, v21 & 1, a1);
      int64_t v17 = v24;
      int v19 = v25;
      char v21 = v26 & 1;
      if (!--v16)
      {
        sub_100046938(v24, v25, v26 & 1);
        uint64_t v4 = v46;
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    swift_once();
  }
LABEL_13:
  uint64_t v27 = swift_allocObject();
  id v28 = objc_allocWithZone((Class)CKFetchShareParticipantsOperation);
  sub_100023228(0, &qword_100095D40);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v30 = [v28 initWithUserIdentityLookupInfos:isa];

  *(void *)(v27 + 16) = v30;
  [v30 setQualityOfService:25];
  uint64_t v31 = swift_allocObject();
  uint64_t v32 = v47;
  *(void *)(v31 + 16) = v47;
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = sub_100050808;
  *(void *)(v33 + 24) = v31;
  id v34 = v32;
  CKFetchShareParticipantsOperation.perShareParticipantResultBlock.setter();
  id v35 = (void *)swift_allocObject();
  unint64_t v37 = v48;
  uint64_t v36 = v49;
  v35[2] = v49;
  v35[3] = v34;
  v35[4] = v37;
  id v38 = v34;
  swift_retain();
  id v39 = v37;
  CKFetchShareParticipantsOperation.fetchShareParticipantsResultBlock.setter();
  sub_100023228(0, (unint64_t *)&unk_100095F20);
  uint64_t v40 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v41 = swift_allocObject();
  *(void *)(v41 + 16) = v36;
  *(void *)(v41 + 24) = v27;
  aBlock[4] = (uint64_t)sub_100050878;
  aBlock[5] = v41;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10003D02C;
  aBlock[3] = (uint64_t)&unk_10008B638;
  os_log_type_t v42 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  uint64_t v43 = v50;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = (uint64_t)&_swiftEmptyArrayStorage;
  sub_100046944((unint64_t *)&qword_100095BE0, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000222D4((uint64_t *)&unk_100095F30);
  sub_10004785C((unint64_t *)&qword_100095BF0, (uint64_t *)&unk_100095F30);
  uint64_t v44 = v52;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v42);

  (*(void (**)(char *, char **))(v54 + 8))(v44, v4);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v43, v53);
  return swift_release();
}

uint64_t sub_1000407D8(uint64_t a1, char a2, uint64_t a3, void *a4, NSObject *a5)
{
  if ((a2 & 1) == 0) {
    return sub_100040A90(a4, a5);
  }
  swift_errorRetain();
  if (qword_1000950C8 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100022718(v8, (uint64_t)qword_100097490);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v11 = 136446210;
    swift_errorRetain();
    sub_1000222D4(&qword_100095330);
    uint64_t v12 = String.init<A>(describing:)();
    sub_100035724(v12, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100047944(a1, 1);
    sub_100047944(a1, 1);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to fetch participants: %{public}s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100047944(a1, 1);
    sub_100047944(a1, 1);
  }

  id v14 = [self defaultCenter];
  if (qword_100095108 != -1) {
    swift_once();
  }
  uint64_t v15 = 0x40AC200000000000;
  char v16 = 0;
  [v14 postNotificationName:qword_1000974F0 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

  swift_unknownObjectRelease();
  dispatch_group_leave(a5);
  return sub_100047944(a1, 1);
}

uint64_t sub_100040A90(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v10 - 8);
  uint64_t v29 = v10;
  __chkstk_darwin(v10, v11);
  unint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_allocObject();
  id v15 = [objc_allocWithZone((Class)CKModifyRecordsOperation) init];
  *(void *)(v14 + 16) = v15;
  [v15 setQualityOfService:25];
  sub_1000222D4((uint64_t *)&unk_100095C50);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_100073BB0;
  *(void *)(v16 + 32) = a1;
  aBlock[0] = v16;
  specialized Array._endMutation()();
  sub_100023228(0, &qword_1000954C0);
  id v17 = a1;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v15 setRecordsToSave:isa];

  int v19 = (void *)swift_allocObject();
  void v19[2] = a2;
  v19[3] = v3;
  void v19[4] = v17;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = sub_1000508EC;
  *(void *)(v20 + 24) = v19;
  id v21 = v17;
  id v22 = a2;
  swift_retain();
  CKModifyRecordsOperation.perRecordSaveBlock.setter();
  sub_100023228(0, (unint64_t *)&unk_100095F20);
  NSString v23 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v3;
  *(void *)(v24 + 24) = v14;
  aBlock[4] = sub_100050984;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003D02C;
  aBlock[3] = &unk_10008B700;
  uint64_t v25 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_100046944((unint64_t *)&qword_100095BE0, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000222D4((uint64_t *)&unk_100095F30);
  sub_10004785C((unint64_t *)&qword_100095BF0, (uint64_t *)&unk_100095F30);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v29);
  return swift_release();
}

void sub_100040ECC(void *a1, void *a2, uint64_t a3, unint64_t a4, NSObject *a5)
{
  id v130 = a2;
  uint64_t v10 = sub_1000222D4(&qword_100095D90);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v129 = (char *)&v122 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1000222D4(&qword_100095C08);
  uint64_t v15 = __chkstk_darwin(v13 - 8, v14);
  int64_t v126 = (char *)&v122 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v17);
  int v19 = (char *)&v122 - v18;
  if (qword_1000950C8 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = sub_100022718(v20, (uint64_t)qword_100097490);
  swift_bridgeObjectRetain_n();
  id v22 = a1;
  NSString v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  dispatch_group_t v132 = a5;
  unint64_t v128 = v5;
  uint64_t v131 = v21;
  id v127 = v19;
  if (v25)
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v135 = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v134 = sub_100035724(a3, a4, &v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 12) = 2082;
    uint64_t v134 = (uint64_t)v22;
    sub_100023228(0, (unint64_t *)&qword_100095510);
    unint64_t v27 = a4;
    id v28 = v22;
    uint64_t v29 = String.init<A>(describing:)();
    uint64_t v134 = sub_100035724(v29, v30, &v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a4 = v27;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Sending %{public}s to participant: %{public}s", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v31 = [v22 userIdentity];
  id v32 = [v31 lookupInfo];

  id v133 = v32;
  if (!v32) {
    goto LABEL_26;
  }
  id v33 = [v133 emailAddress];
  if (!v33)
  {
    id v33 = [v133 phoneNumber];
    if (!v33)
    {

LABEL_26:
      id v75 = v22;
      BOOL v76 = Logger.logObject.getter();
      os_log_type_t v77 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v76, v77))
      {
        uint64_t v78 = (uint8_t *)swift_slowAlloc();
        uint64_t v79 = swift_slowAlloc();
        uint64_t v134 = (uint64_t)v75;
        uint64_t v135 = v79;
        *(_DWORD *)uint64_t v78 = 136446210;
        sub_100023228(0, (unint64_t *)&qword_100095510);
        id v80 = v75;
        uint64_t v81 = String.init<A>(describing:)();
        uint64_t v134 = sub_100035724(v81, v82, &v135);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v76, v77, "Failed to create invitation for: %{public}s", v78, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      unint64_t v83 = v132;
      id v84 = [self defaultCenter];
      if (qword_100095108 != -1) {
        swift_once();
      }
      uint64_t v135 = 0x40AC200000000000;
      char v136 = 0;
      [v84 postNotificationName:qword_1000974F0 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

      swift_unknownObjectRelease();
      dispatch_group_leave(v83);
      return;
    }
  }
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v36 = v35;

  swift_bridgeObjectRetain_n();
  id v37 = v22;
  id v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = swift_slowAlloc();
    unint64_t v125 = v36;
    uint64_t v41 = v40;
    uint64_t v124 = swift_slowAlloc();
    uint64_t v135 = v124;
    *(_DWORD *)uint64_t v41 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v134 = sub_100035724(a3, a4, &v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v41 + 12) = 2082;
    uint64_t v134 = (uint64_t)v37;
    sub_100023228(0, (unint64_t *)&qword_100095510);
    uint64_t v42 = a3;
    id v43 = v37;
    uint64_t v44 = String.init<A>(describing:)();
    uint64_t v134 = sub_100035724(v44, v45, &v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a3 = v42;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Sending %{public}s to participant: %{public}s", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    unint64_t v36 = v125;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  NSString v46 = String._bridgeToObjectiveC()();
  if (a3 == 0xD000000000000030 && a4 == 0x8000000100075E40
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    id v47 = [v37 invitationToken];
    if (v47)
    {
      uint64_t v48 = v47;
      id v49 = [v47 sharingInvitationData];

      uint64_t v50 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v52 = v51;

      if (v130)
      {
        uint64_t v124 = v50;
        unint64_t v125 = v52;
        id v53 = v37;
        NSString v123 = v46;
        id v54 = v130;
        id v55 = [v54 URL];
        uint64_t v122 = v34;
        if (v55)
        {
          uint64_t v56 = v55;
          uint64_t v57 = (uint64_t)v126;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v58 = type metadata accessor for URL();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v57, 0, 1, v58);
        }
        else
        {
          uint64_t v58 = type metadata accessor for URL();
          uint64_t v57 = (uint64_t)v126;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v126, 1, 1, v58);
        }
        uint64_t v85 = (uint64_t)v127;
        sub_10002C590(v57, (uint64_t)v127, &qword_100095C08);

        type metadata accessor for URL();
        uint64_t v86 = *(void *)(v58 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v86 + 48))(v85, 1, v58) == 1)
        {
          swift_bridgeObjectRelease();
          sub_100022764(v124, v125);
          sub_10002BDA0(v85, &qword_100095C08);
          NSString v46 = v123;
          id v37 = v53;
          goto LABEL_35;
        }
        uint64_t v97 = URL.absoluteString.getter();
        uint64_t v99 = v98;
        (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v85, v58);
        sub_1000222D4(&qword_100095D98);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_100073720;
        strcpy((char *)(inited + 32), "invitationData");
        *(unsigned char *)(inited + 47) = -18;
        uint64_t v101 = v124;
        *(void *)(inited + 48) = v124;
        uint64_t v102 = v101;
        unint64_t v103 = v125;
        *(void *)(inited + 56) = v125;
        *(void *)(inited + 72) = &type metadata for Data;
        *(void *)(inited + 80) = 0xD000000000000018;
        *(void *)(inited + 120) = &type metadata for String;
        *(void *)(inited + 88) = 0x8000000100075EC0;
        *(void *)(inited + 96) = v97;
        *(void *)(inited + 104) = v99;
        sub_1000226C0(v102, v103);
        unint64_t v104 = sub_100042BD8(inited);
        sub_1000561E0(v104);
        swift_bridgeObjectRelease();
        id v105 = objc_allocWithZone((Class)IDSDictionaryInvitationContext);
        swift_bridgeObjectRetain();
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        NSString v107 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v108 = [v105 initWithDictionary:isa schema:v107];

        uint64_t v109 = v128[12];
        uint64_t v110 = v128[13];
        sub_10002ADE8(v128 + 9, v109);
        id v111 = v129;
        static Date.distantFuture.getter();
        uint64_t v112 = type metadata accessor for Date();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v112 - 8) + 56))(v111, 0, 1, v112);
        unint64_t v113 = (void *)swift_allocObject();
        v113[2] = v122;
        uint64_t v113[3] = v36;
        dispatch_group_t v114 = v132;
        v113[4] = v132;
        long long v115 = *(void (**)(NSString, char *, id, uint64_t (*)(uint64_t, uint64_t), void *, uint64_t, uint64_t))(v110 + 32);
        id v116 = v108;
        uint64_t v117 = v114;
        uint64_t v118 = v123;
        v115(v123, v111, v116, sub_1000530B0, v113, v109, v110);

        swift_release();
        sub_100022764(v124, v125);
        uint64_t v74 = (uint64_t)v111;
LABEL_42:
        sub_10002BDA0(v74, &qword_100095D90);
        return;
      }
      swift_bridgeObjectRelease();
      sub_100022764(v50, v52);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
LABEL_35:
    id v87 = v37;
    uint64_t v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v88, v89))
    {
      id v90 = (uint8_t *)swift_slowAlloc();
      uint64_t v91 = swift_slowAlloc();
      uint64_t v134 = (uint64_t)v87;
      uint64_t v135 = v91;
      *(_DWORD *)id v90 = 136446210;
      sub_100023228(0, (unint64_t *)&qword_100095510);
      id v92 = v87;
      uint64_t v93 = String.init<A>(describing:)();
      uint64_t v134 = sub_100035724(v93, v94, &v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v88, v89, "Failed to create share invitation for: %{public}s", v90, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v95 = v132;
    id v96 = [self defaultCenter];
    if (qword_100095108 != -1) {
      swift_once();
    }
    uint64_t v135 = 0x40AC200000000000;
    char v136 = 0;
    [v96 postNotificationName:qword_1000974F0 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

    swift_unknownObjectRelease();
    dispatch_group_leave(v95);

    return;
  }
  if (a3 == 0xD000000000000037 && a4 == 0x8000000100075E80
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    sub_100042D10((uint64_t)&_swiftEmptyArrayStorage);
    id v59 = objc_allocWithZone((Class)IDSDictionaryInvitationContext);
    swift_bridgeObjectRetain();
    Class v60 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    NSString v61 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v62 = [v59 initWithDictionary:v60 schema:v61];

    uint64_t v63 = v128[12];
    uint64_t v64 = v128[13];
    sub_10002ADE8(v128 + 9, v63);
    uint64_t v65 = v129;
    static Date.distantFuture.getter();
    uint64_t v66 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v65, 0, 1, v66);
    uint64_t v67 = (void *)swift_allocObject();
    uint64_t v68 = v34;
    NSData v69 = v67;
    v67[2] = v68;
    v67[3] = v36;
    dispatch_group_t v70 = v132;
    v67[4] = v132;
    char v71 = *(void (**)(NSString, char *, id, uint64_t (*)(uint64_t, uint64_t), void *, uint64_t, uint64_t))(v64 + 32);
    unint64_t v72 = v70;
    id v73 = v62;
    v71(v46, v65, v73, sub_1000530B0, v69, v63, v64);

    swift_release();
    uint64_t v74 = (uint64_t)v65;
    goto LABEL_42;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  uint64_t v119 = Logger.logObject.getter();
  os_log_type_t v120 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v119, v120))
  {
    id v121 = (uint8_t *)swift_slowAlloc();
    uint64_t v135 = swift_slowAlloc();
    *(_DWORD *)id v121 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v134 = sub_100035724(a3, a4, &v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v119, v120, "Tried to send invitation using unknown schema: %{public}s", v121, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  dispatch_group_leave(v132);
}

void sub_1000420A8(uint64_t a1, void *a2, NSObject *a3)
{
  uint64_t v5 = v3;
  aBlock[0] = a1;
  swift_errorRetain();
  sub_1000222D4(&qword_100095330);
  type metadata accessor for CKError(0);
  uint64_t v10 = v9;
  if (!swift_dynamicCast() || !v57)
  {
    sub_100050CE4(a1, a3);
    return;
  }
  id v58 = v57;
  uint64_t v11 = sub_100046944((unint64_t *)&unk_100095DA0, 255, type metadata accessor for CKError);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 48))(v10, v11);
  if (v12 == 14)
  {
    id v13 = (id)related decl 'e' for CKErrorCode.serverRecord.getter();
    self;
    uint64_t v19 = swift_dynamicCastObjCClass();
    if (v19)
    {
      uint64_t v15 = v19;
      uint64_t v4 = (void *)related decl 'e' for CKErrorCode.clientRecord.getter();
      self;
      uint64_t v20 = swift_dynamicCastObjCClass();
      if (v20)
      {
        uint64_t v14 = v20;
        if (qword_1000950C8 == -1)
        {
LABEL_18:
          uint64_t v21 = type metadata accessor for Logger();
          sub_100022718(v21, (uint64_t)qword_100097490);
          id v22 = v13;
          NSString v23 = Logger.logObject.getter();
          os_log_type_t v24 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v23, v24))
          {
            uint64_t v55 = v14;
            os_log_type_t type = v24;
            BOOL v25 = (uint8_t *)swift_slowAlloc();
            aBlock[0] = swift_slowAlloc();
            *(_DWORD *)BOOL v25 = 136446210;
            id v26 = [(id)v15 recordID];
            id v27 = [v26 zoneID];

            id v28 = [v27 zoneName];
            uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v30 = v4;
            unint64_t v32 = v31;

            uint64_t v33 = v29;
            uint64_t v14 = v55;
            id v57 = (id)sub_100035724(v33, v32, aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            uint64_t v4 = v30;
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v23, type, "Updating share for: %{public}s", v25, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
          if (sub_100051280((void *)v15, (id)v14)) {
            sub_100040A90(v15, a3);
          }
          else {
            dispatch_group_leave(a3);
          }

LABEL_32:
          return;
        }
LABEL_44:
        swift_once();
        goto LABEL_18;
      }

      id v13 = v4;
    }

LABEL_28:
    aBlock[0] = (uint64_t)v57;
    sub_100046944(&qword_100095140, 255, type metadata accessor for CKError);
    id v50 = v57;
    uint64_t v51 = _getErrorEmbeddedNSError<A>(_:)();
    if (v51)
    {
      uint64_t v52 = v51;
    }
    else
    {
      uint64_t v52 = swift_allocError();
      *id v53 = aBlock[0];
    }
    sub_100050CE4(v52, a3);
    swift_errorRelease();
    goto LABEL_32;
  }
  if (v12 == 26)
  {
    id v34 = [a2 recordID];
    id v35 = [v34 zoneID];

    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_100022718(v36, (uint64_t)qword_100097490);
    id v37 = v35;
    id v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 136446210;
      id v41 = [v37 zoneName];
      uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v44 = v43;

      id v57 = (id)sub_100035724(v42, v44, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "%{public}s was not found, attempting to re-save it.", v40, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v45 = [objc_allocWithZone((Class)CKRecordZone) initWithZoneID:v37];
    [v45 setCapabilities:8];
    uint64_t v46 = swift_allocObject();
    *(void *)(v46 + 16) = a3;
    id v47 = *(void **)(v5 + 24);
    aBlock[4] = (uint64_t)sub_100053138;
    aBlock[5] = v46;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100038350;
    aBlock[3] = (uint64_t)&unk_10008B7A0;
    uint64_t v48 = _Block_copy(aBlock);
    id v49 = a3;
    swift_retain();
    [v47 saveRecordZone:v45 completionHandler:v48];
    _Block_release(v48);

    swift_release();
    swift_release();
    goto LABEL_32;
  }
  if (v12 != 33) {
    goto LABEL_28;
  }
  id v13 = [a2 participants];
  sub_100023228(0, (unint64_t *)&qword_100095510);
  uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((unint64_t)v14 >> 62)
  {
    if (v14 < 0) {
      id v13 = (id)v14;
    }
    else {
      id v13 = (id)(v14 & 0xFFFFFFFFFFFFFF8);
    }
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v15)
    {
LABEL_8:
      if (v15 >= 1)
      {
        uint64_t v16 = 0;
        do
        {
          if ((v14 & 0xC000000000000001) != 0) {
            id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v17 = *(id *)(v14 + 8 * v16 + 32);
          }
          uint64_t v18 = v17;
          ++v16;
          dispatch_group_enter(a3);
          sub_100040ECC(v18, 0, 0xD000000000000037, 0x8000000100075E80, a3);
        }
        while (v15 != v16);
        goto LABEL_42;
      }
      __break(1u);
      goto LABEL_44;
    }
  }
LABEL_42:
  swift_bridgeObjectRelease();
  dispatch_group_leave(a3);
}

void sub_1000428E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 24);
  swift_beginAccess();
  uint64_t v4 = *(void **)(a2 + 16);
  void v9[3] = sub_100023228(0, &qword_100095D50);
  void v9[4] = &off_10008AAC8;
  v9[0] = v4;
  sub_100022928((uint64_t)v9, (uint64_t)v8);
  id v5 = v4;
  id v6 = v3;
  sub_1000222D4(&qword_100095C40);
  sub_100023228(0, &qword_100095D58);
  swift_dynamicCast();
  [v6 addOperation:v7];

  sub_10002AE2C((uint64_t)v9);
}

unint64_t sub_1000429E4(uint64_t a1)
{
  uint64_t v2 = sub_1000222D4((uint64_t *)&unk_100095C20);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  id v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000222D4(&qword_100095C68);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = *(int *)(v2 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10002C528(v13, (uint64_t)v6, (uint64_t *)&unk_100095C20);
    uint64_t v15 = *(void *)&v6[v10];
    unint64_t result = sub_100035D8C((uint64_t)v6);
    if (v17) {
      break;
    }
    unint64_t v18 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v19 = v8[6];
    uint64_t v20 = type metadata accessor for URL();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v19 + *(void *)(*(void *)(v20 - 8) + 72) * v18, v6, v20);
    *(void *)(v8[7] + 8 * v18) = v15;
    uint64_t v21 = v8[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v8[2] = v23;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100042BD8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000222D4(&qword_100095D60);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10002C528(v6, (uint64_t)&v15, &qword_100095D68);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_100035E24(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_1000366C4(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100042D10(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000222D4(&qword_100095D70);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10002C528(v6, (uint64_t)v15, &qword_100095D78);
    unint64_t result = sub_100035EFC((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_1000366C4(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_100042E54(uint64_t a1, void *a2, char a3, void *a4, void *a5)
{
  if (a3)
  {
    swift_errorRetain();
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100022718(v14, (uint64_t)qword_100097490);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      long long v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)long long v17 = 136446210;
      swift_errorRetain();
      sub_1000222D4(&qword_100095330);
      uint64_t v18 = String.init<A>(describing:)();
      sub_100035724(v18, v19, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000478F8(a2, 1);
      sub_1000478F8(a2, 1);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to fetch share metadata: %{public}s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000478F8(a2, 1);
      sub_1000478F8(a2, 1);
    }

    uint64_t v20 = a4 + 9;
    uint64_t v22 = a4[12];
    uint64_t v21 = a4[13];
    sub_10002ADE8(v20, v22);
    (*(void (**)(void *, void (*)(uint64_t), void, uint64_t, uint64_t))(v21 + 48))(a5, sub_10005EED8, 0, v22, v21);
    sub_1000478F8(a2, 1);
  }
  else
  {
    uint64_t v8 = qword_1000950C8;
    id v9 = a2;
    if (v8 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100022718(v10, (uint64_t)qword_100097490);
    long long v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      BOOL v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Successfully fetched share metadata", v13, 2u);
      swift_slowDealloc();
    }

    sub_1000431A4(v9, a5);
    sub_1000478F8(a2, 0);
  }
}

uint64_t sub_1000431A4(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  id v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v10 - 8);
  uint64_t v28 = v10;
  __chkstk_darwin(v10, v11);
  BOOL v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_allocObject();
  sub_1000222D4((uint64_t *)&unk_100095C50);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_100073BB0;
  *(void *)(v15 + 32) = a1;
  aBlock[0] = v15;
  specialized Array._endMutation()();
  id v16 = objc_allocWithZone((Class)CKAcceptSharesOperation);
  sub_100023228(0, &qword_1000954B0);
  id v17 = a1;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v19 = [v16 initWithShareMetadatas:isa];

  *(void *)(v14 + 16) = v19;
  [v19 setQualityOfService:25];
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v3;
  *(void *)(v20 + 24) = a2;
  swift_retain();
  id v21 = a2;
  CKAcceptSharesOperation.acceptSharesResultBlock.setter();
  sub_100023228(0, (unint64_t *)&unk_100095F20);
  uint64_t v22 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v3;
  *(void *)(v23 + 24) = v14;
  aBlock[4] = sub_100047918;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003D02C;
  aBlock[3] = &unk_10008B408;
  os_log_type_t v24 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_100046944((unint64_t *)&qword_100095BE0, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000222D4((uint64_t *)&unk_100095F30);
  sub_10004785C((unint64_t *)&qword_100095BF0, (uint64_t *)&unk_100095F30);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v28);
  return swift_release();
}

void sub_1000435A0(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5 = *(void **)(a1 + 16);
  swift_beginAccess();
  uint64_t v6 = *(void **)(a2 + 16);
  v11[3] = sub_100023228(0, a3);
  v11[4] = &off_10008AAC8;
  v11[0] = v6;
  sub_100022928((uint64_t)v11, (uint64_t)v10);
  id v7 = v6;
  id v8 = v5;
  sub_1000222D4(&qword_100095C40);
  sub_100023228(0, &qword_100095C48);
  swift_dynamicCast();
  [v8 addOperation:v9];

  sub_10002AE2C((uint64_t)v11);
}

uint64_t sub_1000436A4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100022718(v6, (uint64_t)qword_100097490);
    swift_errorRetain();
    swift_errorRetain();
    id v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      id v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)id v9 = 136446210;
      swift_errorRetain();
      sub_1000222D4(&qword_100095330);
      uint64_t v10 = String.init<A>(describing:)();
      sub_100035724(v10, v11, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to save verification zone: %{public}s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v22 = a3 + 9;
    uint64_t v24 = a3[12];
    uint64_t v23 = a3[13];
    sub_10002ADE8(v22, v24);
    (*(void (**)(void *, void (*)(uint64_t), void, uint64_t, uint64_t))(v23 + 48))(a4, sub_10005EED8, 0, v24, v23);
    return swift_errorRelease();
  }
  else
  {
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100022718(v12, (uint64_t)qword_100097490);
    BOOL v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Successfully saved verification zone", v15, 2u);
      swift_slowDealloc();
    }

    id v16 = a3 + 9;
    uint64_t v18 = a3[12];
    uint64_t v17 = a3[13];
    sub_10002ADE8(v16, v18);
    id v19 = [a4 context];
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = a4;
    (*(void (**)(void *, id, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v17 + 40))(a4, v19, sub_100053418, v20, v18, v17);
    swift_unknownObjectRelease();
    return swift_release();
  }
}

uint64_t sub_100043A54(uint64_t a1, char a2, void *a3, void *a4)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100022718(v17, (uint64_t)qword_100097490);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136446210;
      swift_errorRetain();
      sub_1000222D4(&qword_100095330);
      uint64_t v21 = String.init<A>(describing:)();
      sub_100035724(v21, v22, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100047944(a1, 1);
      sub_100047944(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to accept share: %{public}s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100047944(a1, 1);
      sub_100047944(a1, 1);
    }

    uint64_t v23 = a3 + 9;
    uint64_t v25 = a3[12];
    uint64_t v24 = a3[13];
    sub_10002ADE8(v23, v25);
    (*(void (**)(void *, void (*)(uint64_t), void, uint64_t, uint64_t))(v24 + 48))(a4, sub_10005EED8, 0, v25, v24);
    return sub_100047944(a1, 1);
  }
  else
  {
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100022718(v6, (uint64_t)qword_100097490);
    id v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      id v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Successfully accepted share", v9, 2u);
      swift_slowDealloc();
    }

    uint64_t v10 = a3 + 9;
    uint64_t v12 = a3[12];
    uint64_t v11 = a3[13];
    sub_10002ADE8(v10, v12);
    id v13 = [a4 context];
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = a4;
    (*(void (**)(void *, id, void (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v11 + 40))(a4, v13, sub_100047950, v14, v12, v11);
    swift_unknownObjectRelease();
    return swift_release();
  }
}

uint64_t sub_100043E14(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100043E38(a1, a2, a3, a4, &qword_100095C80, (uint64_t (*)(void))&type metadata accessor for CKSyncEngine.PendingRecordZoneChange, (uint64_t (*)(void))&type metadata accessor for CKSyncEngine.PendingRecordZoneChange);
}

uint64_t sub_100043E38(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_1000222D4(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100047CE8(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

char *sub_1000440B8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000222D4((uint64_t *)&unk_100095DB0);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_10005098C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000441C8(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v5 = a2 - (void)__src;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!__dst)
  {
    if (v5 <= 0) {
      return __src;
    }
LABEL_12:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v5) {
    goto LABEL_12;
  }
  if (__src)
  {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

uint64_t sub_10004426C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_10004429C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000444A4(a1, a2, a3, (void *)*v3, &qword_100095B40, (uint64_t (*)(void))&type metadata accessor for CKSyncEngine.PendingDatabaseChange);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1000442D8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100044334(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1000442F8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000444A4(a1, a2, a3, (void *)*v3, &qword_100095C80, (uint64_t (*)(void))&type metadata accessor for CKSyncEngine.PendingRecordZoneChange);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100044334(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000222D4(&qword_100095DE8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000444A4(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_1000222D4(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  uint64_t v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  unint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000446EC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000222D4(&qword_100095C78);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_100044A04(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000222D4(&qword_100095DE0);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

void *sub_100044D14()
{
  uint64_t v1 = v0;
  sub_1000222D4(&qword_100095C78);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100044ECC()
{
  uint64_t v1 = v0;
  sub_1000222D4(&qword_100095DE0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100045080(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  id v117 = a6;
  uint64_t v133 = a4;
  id v123 = a2;
  uint64_t v128 = a1;
  uint64_t v127 = type metadata accessor for CKSyncEngine.Configuration();
  dispatch_group_t v132 = *(uint8_t **)(v127 - 8);
  uint64_t v11 = __chkstk_darwin(v127, v10);
  id v116 = (char *)&v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  long long v115 = (char *)&v109 - v14;
  uint64_t v126 = type metadata accessor for DeviceActivityDataStore.SyncStateType();
  uint64_t v131 = *(void *)(v126 - 8);
  __chkstk_darwin(v126, v15);
  unint64_t v125 = (char *)&v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1000222D4(&qword_100095B50);
  uint64_t v19 = __chkstk_darwin(v17 - 8, v18);
  uint64_t v130 = (uint64_t)&v109 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v124 = (uint64_t)&v109 - v23;
  __chkstk_darwin(v22, v24);
  uint64_t v129 = (uint64_t)&v109 - v25;
  uint64_t v121 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v26 = *(void *)(v121 - 8);
  __chkstk_darwin(v121, v27);
  os_log_type_t v120 = (char *)&v109 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v29, v30);
  uint64_t v31 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v31 - 8, v32);
  uint64_t v122 = sub_100046944(&qword_100095B58, v33, (void (*)(uint64_t))type metadata accessor for SyncCoordinator);
  v138[3] = sub_100023228(0, (unint64_t *)&unk_100095B60);
  v138[4] = &off_10008ABB8;
  v138[0] = a3;
  uint64_t v34 = type metadata accessor for DeviceActivityDataLocations();
  v137[3] = v34;
  v137[4] = (uint64_t)&protocol witness table for DeviceActivityDataLocations;
  uint64_t v35 = sub_10002B118(v137);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 32))(v35, a5, v34);
  id v119 = a7 + 5;
  a7[6] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v36 = *(void *)(*a7 + 200);
  id v37 = objc_allocWithZone((Class)NSBackgroundActivityScheduler);
  NSString v38 = String._bridgeToObjectiveC()();
  id v39 = [v37 initWithIdentifier:v38];

  *(void *)((char *)a7 + v36) = v39;
  *(void *)((char *)a7 + *(void *)(*a7 + 208)) = 0;
  uint64_t v40 = *(void *)(*a7 + 216);
  sub_100023228(0, (unint64_t *)&unk_100095F20);
  static DispatchQoS.unspecified.getter();
  v135[0] = (uint64_t)&_swiftEmptyArrayStorage;
  sub_100046944(&qword_100095B70, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1000222D4(&qword_100095B78);
  sub_10004785C(&qword_100095B80, &qword_100095B78);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v26 + 104))(v120, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v121);
  *(void *)((char *)a7 + v40) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  id v41 = (void *)((char *)a7 + *(void *)(*a7 + 240));
  void *v41 = 0;
  v41[1] = 0;
  uint64_t v42 = (void *)((char *)a7 + *(void *)(*a7 + 248));
  uint64_t *v42 = 0xD000000000000013;
  v42[1] = 0x8000000100075C80;
  unint64_t v43 = (void *)((char *)a7 + *(void *)(*a7 + 256));
  dispatch_group_t v114 = v43;
  uint64_t *v43 = 0xD000000000000012;
  v43[1] = 0x8000000100075CA0;
  unint64_t v44 = (void *)((char *)a7 + *(void *)(*a7 + 264));
  void *v44 = 0xD000000000000014;
  v44[1] = 0x8000000100075CC0;
  id v45 = (void *)((char *)a7 + *(void *)(*a7 + 272));
  *id v45 = 0xD00000000000001DLL;
  v45[1] = 0x8000000100075CE0;
  a7[2] = v128;
  a7[6] = v122;
  swift_unknownObjectWeakAssign();
  sub_100022928((uint64_t)v138, (uint64_t)(a7 + 7));
  uint64_t v46 = (char *)a7 + *(void *)(*a7 + 184);
  uint64_t v47 = type metadata accessor for DeviceActivityDataStore();
  os_log_type_t v120 = *(char **)(v47 - 8);
  uint64_t v48 = (void (*)(char *, uint64_t))*((void *)v120 + 2);
  uint64_t v49 = v133;
  uint64_t v121 = v47;
  v48(v46, v133);
  sub_100022928((uint64_t)v137, (uint64_t)a7 + *(void *)(*a7 + 192));
  id v50 = objc_allocWithZone((Class)CKContainerID);
  NSString v51 = String._bridgeToObjectiveC()();
  id v52 = [v50 initWithContainerIdentifier:v51 environment:1];

  id v53 = [objc_allocWithZone((Class)CKContainerOptions) init];
  [v53 setUseZoneWidePCS:1];
  id v54 = objc_allocWithZone((Class)CKContainer);
  id v119 = v52;
  id v118 = v53;
  id v55 = [v54 initWithContainerID:v52 options:v53];
  a7[3] = v55;
  id v56 = v55;
  id v57 = [v56 privateCloudDatabase];
  id v58 = objc_allocWithZone((Class)IDSInvitationManager);
  NSString v59 = String._bridgeToObjectiveC()();
  id v60 = [v58 initWithServiceIdentifier:v59];

  sub_1000222D4(&qword_100095B88);
  NSString v61 = (void *)swift_allocObject();
  id v117 = v117;
  a7[4] = sub_1000461BC(v56, v57, (uint64_t)v117, (uint64_t)v60, v61);
  id v62 = [(id)a7[3] privateCloudDatabase];
  uint64_t v63 = v131;
  unint64_t v113 = *(void (**)(char *, void, uint64_t))(v131 + 104);
  uint64_t v64 = (uint64_t)v125;
  uint64_t v65 = v126;
  v113(v125, enum case for DeviceActivityDataStore.SyncStateType.private(_:), v126);
  uint64_t v66 = *v42;
  uint64_t v67 = v42[1];
  uint64_t v68 = v129;
  sub_10003B6D0(v64, v138, v66, v67, v49, v129);
  NSData v69 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
  uint64_t v131 = v63 + 8;
  uint64_t v112 = v69;
  v69(v64, v65);
  sub_10002C528(v68, v124, &qword_100095B50);
  id v70 = v62;
  id v71 = v123;
  unint64_t v72 = v115;
  id v123 = v70;
  id v73 = v71;
  CKSyncEngine.Configuration.init(database:stateSerialization:delegate:)();
  unint64_t v111 = 0x8000000100075D30;
  CKSyncEngine.Configuration.apsMachServiceName.setter();
  CKSyncEngine.Configuration.useOpportunisticPushTopic.setter();
  uint64_t v74 = v132;
  uint64_t v110 = (void (*)(char *, char *, uint64_t))*((void *)v132 + 2);
  id v75 = v116;
  uint64_t v76 = v127;
  v110(v116, v72, v127);
  type metadata accessor for CKSyncEngine();
  swift_allocObject();
  uint64_t v77 = CKSyncEngine.init(_:)();
  uint64_t v78 = (void (*)(char *, uint64_t))*((void *)v74 + 1);
  dispatch_group_t v132 = v74 + 8;
  uint64_t v109 = v78;
  v78(v72, v76);
  *(void *)((char *)a7 + *(void *)(*a7 + 224)) = v77;
  id v79 = [(id)a7[3] sharedCloudDatabase];
  uint64_t v80 = (uint64_t)v125;
  uint64_t v81 = v126;
  v113(v125, enum case for DeviceActivityDataStore.SyncStateType.shared(_:), v126);
  uint64_t v82 = v130;
  sub_10003B6D0(v80, v138, *v114, v114[1], v133, v130);
  v112(v80, v81);
  sub_10002C528(v82, v124, &qword_100095B50);
  id v83 = v73;
  id v84 = v79;
  uint64_t v85 = v72;
  id v86 = v84;
  CKSyncEngine.Configuration.init(database:stateSerialization:delegate:)();
  CKSyncEngine.Configuration.apsMachServiceName.setter();
  CKSyncEngine.Configuration.useOpportunisticPushTopic.setter();
  id v87 = v85;
  uint64_t v88 = v127;
  v110(v75, v85, v127);
  swift_allocObject();
  uint64_t v89 = CKSyncEngine.init(_:)();
  v109(v87, v88);
  *(void *)((char *)a7 + *(void *)(*a7 + 232)) = v89;
  if (![(id)swift_getObjCClassFromMetadata() isAuthorized])
  {
    char v136 = &type metadata for Bool;
    LOBYTE(v135[0]) = 1;
LABEL_11:
    swift_bridgeObjectRetain();
    sub_100038394((uint64_t)v135);
    swift_bridgeObjectRelease();
    sub_10002BDA0((uint64_t)v135, (uint64_t *)&unk_100095B90);
    goto LABEL_12;
  }
  id v90 = (void *)v138[0];
  swift_bridgeObjectRetain();
  NSString v91 = String._bridgeToObjectiveC()();
  LOBYTE(v90) = [v90 BOOLForKey:v91];

  swift_bridgeObjectRelease();
  if (v90) {
    goto LABEL_12;
  }
  if (qword_1000950C8 != -1) {
    swift_once();
  }
  uint64_t v92 = type metadata accessor for Logger();
  sub_100022718(v92, (uint64_t)qword_100097490);
  uint64_t v93 = Logger.logObject.getter();
  os_log_type_t v94 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v93, v94))
  {
    uint64_t v95 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v95 = 0;
    _os_log_impl((void *)&_mh_execute_header, v93, v94, "Performing one-time reset of local device identifier", v95, 2u);
    swift_slowDealloc();
  }

  uint64_t v96 = static _SegmentInterval.allCases.getter();
  uint64_t v97 = DeviceActivityDataStore.localZones.getter();
  CKSyncEngine.state.getter();
  swift_bridgeObjectRetain();
  uint64_t v98 = sub_100047068(v97, v96);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  CKSyncEngine.State.add(pendingDatabaseChanges:)((Swift::OpaquePointer)v98);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v99 = static _SegmentInterval.allCases.getter();
  DeviceActivityDataStore.deleteLocalData(deleteDeviceIdentifier:segmentIntervals:)(1, (Swift::OpaquePointer)v99);
  if (!v100)
  {
    swift_bridgeObjectRelease();
    char v136 = &type metadata for Bool;
    LOBYTE(v135[0]) = 1;
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v101 = Logger.logObject.getter();
  os_log_type_t v102 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v101, v102))
  {
    unint64_t v103 = (uint8_t *)swift_slowAlloc();
    v135[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v103 = 136446210;
    dispatch_group_t v132 = v103 + 4;
    uint64_t v134 = v100;
    swift_errorRetain();
    sub_1000222D4(&qword_100095330);
    uint64_t v104 = String.init<A>(describing:)();
    uint64_t v134 = sub_100035724(v104, v105, v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v101, v102, "Failed to reset local device identifier: %{public}s", v103, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
LABEL_12:
  id v106 = [self defaultCenter];
  uint64_t v107 = qword_100095108;
  swift_retain();
  if (v107 != -1) {
    swift_once();
  }
  [v106 addObserver:a7 selector:"retrySharingWithNotification:" name:qword_1000974F0 object:0];
  swift_release();

  sub_10002AE2C((uint64_t)v137);
  (*((void (**)(uint64_t, uint64_t))v120 + 1))(v133, v121);
  sub_10002BDA0(v130, &qword_100095B50);

  sub_10002BDA0(v129, &qword_100095B50);
  sub_10002AE2C((uint64_t)v138);
  return a7;
}

void *sub_1000461BC(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v34 = a2;
  uint64_t v33 = a1;
  uint64_t v38 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v39 = *(void *)(v38 - 8);
  __chkstk_darwin(v38, v8);
  id v37 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v10 = *(void *)(v32 - 8);
  __chkstk_darwin(v32, v11);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v14, v15);
  uint64_t v36 = type metadata accessor for DispatchQoS();
  uint64_t v35 = *(void *)(v36 - 8);
  __chkstk_darwin(v36, v16);
  uint64_t v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44[3] = sub_100023228(0, (unint64_t *)&unk_100095BD0);
  v44[4] = &off_10008B0C8;
  v44[0] = a3;
  v43[3] = sub_100023228(0, (unint64_t *)&qword_100095A60);
  v43[4] = &off_10008B118;
  v43[0] = a4;
  a5[14] = [objc_allocWithZone((Class)type metadata accessor for InvitationHandler()) init];
  sub_100023228(0, (unint64_t *)&unk_100095F20);
  static DispatchQoS.unspecified.getter();
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_100046944(&qword_100095B70, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1000222D4(&qword_100095B78);
  sub_10004785C(&qword_100095B80, &qword_100095B78);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v32);
  a5[15] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v19 = v33;
  uint64_t v20 = v34;
  a5[2] = v33;
  a5[3] = v20;
  sub_100022928((uint64_t)v44, (uint64_t)(a5 + 4));
  sub_100022928((uint64_t)v43, (uint64_t)(a5 + 9));
  uint64_t v21 = a5[14];
  *(void *)(v21 + OBJC_IVAR____TtC18UsageTrackingAgent17InvitationHandler_delegate + 8) = &off_10008BC48;
  swift_unknownObjectWeakAssign();
  uint64_t v22 = a5[15];
  uint64_t v23 = (void *)v43[0];
  id v24 = v19;
  id v25 = v20;
  [v23 setDelegate:v21 queue:v22];
  sub_100022928((uint64_t)v43, (uint64_t)v42);
  uint64_t v26 = swift_allocObject();
  sub_10002B17C(v42, v26 + 16);
  *(void *)(v26 + 56) = a5;
  aBlock[4] = sub_100047838;
  aBlock[5] = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003D02C;
  aBlock[3] = &unk_10008B278;
  uint64_t v27 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v40 = &_swiftEmptyArrayStorage;
  sub_100046944((unint64_t *)&qword_100095BE0, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000222D4((uint64_t *)&unk_100095F30);
  sub_10004785C((unint64_t *)&qword_100095BF0, (uint64_t *)&unk_100095F30);
  uint64_t v28 = v37;
  uint64_t v29 = v38;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v27);
  sub_10002AE2C((uint64_t)v44);

  (*(void (**)(char *, uint64_t))(v39 + 8))(v28, v29);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v36);
  swift_release();
  sub_10002AE2C((uint64_t)v43);
  return a5;
}

uint64_t sub_1000467B4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t sub_100046854(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (id result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_100046938(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100046944(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004698C(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t sub_100046A08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DeviceActivityDataStore.SyncStateType();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v36 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CKSyncEngine.State.Serialization();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a2, v9);
  uint64_t v14 = (void *)CKSyncEngine.database.getter();
  id v15 = [v14 scope];

  if (qword_1000950C8 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v34 = sub_100022718(v16, (uint64_t)qword_100097490);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v35 = v6;
  if (v19)
  {
    uint64_t v32 = v5;
    uint64_t v20 = swift_slowAlloc();
    v31[1] = a3;
    uint64_t v21 = (uint8_t *)v20;
    uint64_t v38 = swift_slowAlloc();
    uint64_t v33 = v13;
    *(_DWORD *)uint64_t v21 = 136446210;
    uint64_t v37 = (uint64_t)v15;
    type metadata accessor for Scope(0);
    uint64_t v22 = String.init<A>(describing:)();
    uint64_t v37 = sub_100035724(v22, v23, &v38);
    uint64_t v13 = v33;
    uint64_t v6 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v5 = v32;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Metadata was updated for engine with scope: %{public}s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  id v24 = v36;
  if (v15 == (id)2)
  {
    id v25 = (unsigned int *)&enum case for DeviceActivityDataStore.SyncStateType.private(_:);
    goto LABEL_9;
  }
  if (v15 == (id)3)
  {
    id v25 = (unsigned int *)&enum case for DeviceActivityDataStore.SyncStateType.shared(_:);
LABEL_9:
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v36, *v25, v5);
    sub_100046944(&qword_100095BB8, 255, (void (*)(uint64_t))&type metadata accessor for CKSyncEngine.State.Serialization);
    sub_100046944(&qword_100095BC8, 255, (void (*)(uint64_t))&type metadata accessor for CKSyncEngine.State.Serialization);
    DeviceActivityDataStore.write<A>(_:type:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v24, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  uint64_t v26 = (uint64_t)v15;
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 134349056;
    uint64_t v38 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Unrecognized database scope: %{public}ld", v29, 0xCu);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

void *sub_100047068(uint64_t a1, uint64_t a2)
{
  uint64_t v70 = sub_1000222D4(&qword_100095BA0);
  uint64_t v5 = *(void *)(v70 - 8);
  __chkstk_darwin(v70, v6);
  id v60 = (void *)((char *)v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for _SegmentInterval();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = type metadata accessor for CKSyncEngine.PendingDatabaseChange();
  uint64_t v14 = __chkstk_darwin(v67, v13);
  uint64_t v66 = (char *)v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  NSString v59 = (Class *)((char *)v53 - v18);
  __chkstk_darwin(v17, v19);
  id v58 = (char *)v53 - v21;
  uint64_t v69 = *(void *)(a1 + 16);
  if (v69)
  {
    id v73 = v12;
    v53[2] = v2;
    uint64_t v62 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v78 = *(void *)(a2 + 16);
    uint64_t v61 = *(void *)(v5 + 72);
    uint64_t v76 = v9 + 8;
    uint64_t v77 = v9 + 16;
    id v56 = CKCurrentUserDefaultName;
    unsigned int v55 = enum case for CKSyncEngine.PendingDatabaseChange.deleteZone(_:);
    id v54 = (void (**)(Class *, void, uint64_t))(v20 + 104);
    uint64_t v57 = v20;
    uint64_t v65 = (void (**)(char *, Class *, uint64_t))(v20 + 32);
    v53[1] = a1;
    swift_bridgeObjectRetain();
    uint64_t v22 = 0;
    unint64_t v23 = &_swiftEmptyArrayStorage;
    uint64_t v71 = a2;
    uint64_t v64 = v9;
    while (1)
    {
      if (v78)
      {
        unint64_t v72 = v23;
        uint64_t v24 = *(int *)(v70 + 48);
        uint64_t v68 = (uint64_t *)(v62 + v61 * v22);
        id v25 = (char *)v68 + v24;
        unint64_t v26 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
        uint64_t v27 = v73;
        id v75 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
        v75(v73, a2 + v26, v8);
        sub_100046944(&qword_100095BA8, 255, (void (*)(uint64_t))&type metadata accessor for _SegmentInterval);
        swift_bridgeObjectRetain();
        uint64_t v74 = v25;
        LOBYTE(v25) = dispatch thunk of static Equatable.== infix(_:_:)();
        os_log_type_t v28 = *(void (**)(char *, uint64_t))(v9 + 8);
        v28(v27, v8);
        if (v25) {
          goto LABEL_9;
        }
        if (v78 != 1)
        {
          uint64_t v63 = *(void *)(v64 + 72);
          uint64_t v29 = v73;
          v75(v73, a2 + v26 + v63, v8);
          char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
          v28(v29, v8);
          if (v30)
          {
LABEL_9:
            swift_bridgeObjectRelease();
            sub_100023228(0, qword_100095F40);
            uint64_t v31 = v60;
            uint64_t v32 = (char *)v60 + *(int *)(v70 + 48);
            uint64_t v34 = *v68;
            uint64_t v33 = (void *)v68[1];
            *id v60 = *v68;
            v31[1] = (uint64_t)v33;
            v75(v32, (unint64_t)v74, v8);
            uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v37 = v36;
            swift_bridgeObjectRetain();
            v38._uint64_t countAndFlagsBits = v34;
            v38._object = v33;
            v39._uint64_t countAndFlagsBits = v35;
            v39._object = v37;
            Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v38, v39).super.isa;
            v28(v32, v8);
            id v41 = v59;
            *NSString v59 = isa;
            uint64_t v42 = v67;
            (*v54)(v41, v55, v67);
            unint64_t v43 = *v65;
            unint64_t v44 = v58;
            (*v65)(v58, v41, v42);
            v43(v66, (Class *)v44, v42);
            unint64_t v23 = v72;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v23 = (void *)sub_100043E38(0, v23[2] + 1, 1, (unint64_t)v23, &qword_100095B40, (uint64_t (*)(void))&type metadata accessor for CKSyncEngine.PendingDatabaseChange, (uint64_t (*)(void))&type metadata accessor for CKSyncEngine.PendingDatabaseChange);
            }
            uint64_t v9 = v64;
            unint64_t v46 = v23[2];
            unint64_t v45 = v23[3];
            a2 = v71;
            if (v46 >= v45 >> 1) {
              unint64_t v23 = (void *)sub_100043E38(v45 > 1, v46 + 1, 1, (unint64_t)v23, &qword_100095B40, (uint64_t (*)(void))&type metadata accessor for CKSyncEngine.PendingDatabaseChange, (uint64_t (*)(void))&type metadata accessor for CKSyncEngine.PendingDatabaseChange);
            }
            v23[2] = v46 + 1;
            v43((char *)v23+ ((*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80))+ *(void *)(v57 + 72) * v46, (Class *)v66, v67);
            goto LABEL_4;
          }
          if (v78 != 2)
          {
            uint64_t v47 = v71 + v26 + 2 * v63;
            uint64_t v48 = 2;
            while (1)
            {
              uint64_t v49 = v73;
              uint64_t result = (void *)((uint64_t (*)(char *, uint64_t, uint64_t))v75)(v73, v47, v8);
              uint64_t v51 = v48 + 1;
              if (__OFADD__(v48, 1)) {
                break;
              }
              char v52 = dispatch thunk of static Equatable.== infix(_:_:)();
              v28(v49, v8);
              if (v52) {
                goto LABEL_9;
              }
              ++v48;
              v47 += v63;
              if (v51 == v78) {
                goto LABEL_3;
              }
            }
            __break(1u);
            return result;
          }
        }
LABEL_3:
        a2 = v71;
        swift_bridgeObjectRelease();
        uint64_t v9 = v64;
        unint64_t v23 = v72;
      }
LABEL_4:
      if (++v22 == v69)
      {
        swift_bridgeObjectRelease();
        return v23;
      }
    }
  }
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_100047760(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100036FC4(&qword_100095B50);
    sub_100046944(a2, 255, (void (*)(uint64_t))&type metadata accessor for CKSyncEngine.State.Serialization);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000477F8()
{
  sub_10002AE2C(v0 + 16);
  swift_release();
  return _swift_deallocObject(v0, 64, 7);
}

void sub_100047838()
{
  sub_10003ECB4((void *)(v0 + 16), *(void *)(v0 + 56));
}

uint64_t sub_100047844(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100047854()
{
  return swift_release();
}

uint64_t sub_10004785C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100036FC4(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000478B0(uint64_t a1, uint64_t a2)
{
  return sub_1000436A4(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24));
}

void sub_1000478BC(uint64_t a1, void *a2, char a3)
{
  sub_100042E54(a1, a2, a3 & 1, *(void **)(v3 + 16), *(void **)(v3 + 24));
}

void sub_1000478CC()
{
  sub_1000435A0(*(void *)(v0 + 16), *(void *)(v0 + 24), &qword_100095C38);
}

void sub_1000478F8(void *a1, char a2)
{
  if (a2) {
    swift_errorRelease();
  }
  else {
}
  }

uint64_t sub_100047908(uint64_t a1, char a2)
{
  return sub_100043A54(a1, a2 & 1, *(void **)(v2 + 16), *(void **)(v2 + 24));
}

void sub_100047918()
{
  sub_1000435A0(*(void *)(v0 + 16), *(void *)(v0 + 24), &qword_100095C60);
}

uint64_t sub_100047944(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  return result;
}

void sub_100047950(uint64_t a1)
{
  sub_10005EB1C(a1, *(void **)(v1 + 16));
}

uint64_t sub_100047958()
{
  return sub_10003BD5C(v0);
}

uint64_t sub_100047960()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100047970()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100047998()
{
  *(void *)(v0 + *(void *)(*(void *)v0 + 208)) = 0;
  return swift_unknownObjectRelease();
}

uint64_t sub_1000479B8()
{
  return _swift_deallocObject(v0, 32, 7);
}

void *sub_1000479C8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Calendar.Component();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  Swift::String v39 = (char *)&v32 - v9;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    sub_1000222D4(&qword_100095DF0);
    uint64_t v11 = static _SetStorage.allocate(capacity:)();
    uint64_t v12 = 0;
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v13 = v3 + 16;
    uint64_t v37 = v14;
    uint64_t v38 = v11 + 56;
    uint64_t v15 = *(unsigned __int8 *)(v13 + 64);
    uint64_t v34 = v10;
    uint64_t v35 = a1 + ((v15 + 32) & ~v15);
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v13 - 8);
    uint64_t v33 = (uint64_t (**)(unint64_t, char *, uint64_t))(v13 + 16);
    while (1)
    {
      uint64_t v36 = v12;
      v37(v39, v35 + v16 * v12, v2);
      sub_100046944(&qword_100095DF8, 255, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
      uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v19 = ~(-1 << *(unsigned char *)(v11 + 32));
      unint64_t v20 = v18 & v19;
      unint64_t v21 = (v18 & (unint64_t)v19) >> 6;
      uint64_t v22 = *(void *)(v38 + 8 * v21);
      uint64_t v23 = 1 << (v18 & v19);
      if ((v23 & v22) != 0)
      {
        while (1)
        {
          uint64_t v24 = v13;
          v37(v7, *(void *)(v11 + 48) + v20 * v16, v2);
          sub_100046944((unint64_t *)&unk_100095E00, 255, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
          char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
          unint64_t v26 = *v17;
          (*v17)(v7, v2);
          if (v25) {
            break;
          }
          unint64_t v20 = (v20 + 1) & v19;
          unint64_t v21 = v20 >> 6;
          uint64_t v22 = *(void *)(v38 + 8 * (v20 >> 6));
          uint64_t v23 = 1 << v20;
          uint64_t v13 = v24;
          if ((v22 & (1 << v20)) == 0) {
            goto LABEL_8;
          }
        }
        v26(v39, v2);
        uint64_t v13 = v24;
      }
      else
      {
LABEL_8:
        uint64_t v27 = v39;
        *(void *)(v38 + 8 * v21) = v23 | v22;
        uint64_t result = (void *)(*v33)(*(void *)(v11 + 48) + v20 * v16, v27, v2);
        uint64_t v29 = *(void *)(v11 + 16);
        BOOL v30 = __OFADD__(v29, 1);
        uint64_t v31 = v29 + 1;
        if (v30)
        {
          __break(1u);
          return result;
        }
        *(void *)(v11 + 16) = v31;
      }
      uint64_t v12 = v36 + 1;
      if (v36 + 1 == v34) {
        return (void *)v11;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

uint64_t sub_100047CE8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100047E44()
{
  return CKSyncEngine.SendChangesOptions.Scope.contains(_:)() & 1;
}

void *sub_100047E74(void *a1)
{
  return sub_10003B104(a1);
}

void *sub_100047E7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000222D4(&qword_100095CE0);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v31 = v1;
    uint64_t v32 = a1 + 32;
    while (1)
    {
      uint64_t v6 = *(void **)(v32 + 8 * v4);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      id v7 = v6;
      String.hash(into:)();
      Swift::Int v8 = Hasher._finalize()();
      uint64_t result = (void *)swift_bridgeObjectRelease();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = v8 & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;
        if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
        {
LABEL_3:
          swift_bridgeObjectRelease_n();
LABEL_4:

          goto LABEL_5;
        }
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        if (v20) {
          goto LABEL_4;
        }
        uint64_t v21 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v21;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v24 = v23;
          if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25) {
            goto LABEL_3;
          }
          char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t result = (void *)swift_bridgeObjectRelease();
          if (v27) {
            goto LABEL_4;
          }
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      *(void *)(*(void *)(v3 + 48) + 8 * v11) = v7;
      uint64_t v28 = *(void *)(v3 + 16);
      BOOL v29 = __OFADD__(v28, 1);
      uint64_t v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v30;
LABEL_5:
      if (++v4 == v31) {
        return (void *)v3;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

void *sub_1000480AC(void *a1)
{
  uint64_t v2 = sub_1000222D4((uint64_t *)&unk_100095C90);
  __chkstk_darwin(v2 - 8, v3);
  id v184 = (char *)v176 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v187 = type metadata accessor for URLResourceValues();
  uint64_t v186 = *(void *)(v187 - 8);
  uint64_t v6 = __chkstk_darwin(v187, v5);
  Swift::Int v8 = (char *)v176 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v180 = (char *)v176 - v10;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v192 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  id v182 = (char *)v176 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)v176 - v16;
  uint64_t v18 = sub_1000222D4(&qword_100095938);
  __chkstk_darwin(v18 - 8, v19);
  id v183 = (char *)v176 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for _DeviceActivityData.ActivitySegment();
  uint64_t v189 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21, v22);
  v181 = (char *)v176 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v25);
  long long v194 = (char *)v176 - v26;
  uint64_t v27 = sub_1000222D4(&qword_100095CA0);
  __chkstk_darwin(v27 - 8, v28);
  long long v197 = (char *)v176 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v193 = type metadata accessor for _DeviceActivityData.Metadata();
  uint64_t v195 = *(void *)(v193 - 8);
  uint64_t v31 = __chkstk_darwin(v193, v30);
  id v185 = (char *)v176 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31, v33);
  long long v196 = (char *)v176 - v34;
  uint64_t v35 = sub_1000222D4(&qword_100095CA8);
  __chkstk_darwin(v35 - 8, v36);
  long long v206 = (char *)v176 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for _SegmentInterval();
  uint64_t v205 = *(void *)(v38 - 8);
  uint64_t v40 = __chkstk_darwin(v38, v39);
  uint64_t v198 = (char *)v176 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40, v42);
  unint64_t v44 = (char *)v176 - v43;
  uint64_t v45 = type metadata accessor for _DeviceActivityData.User();
  uint64_t v203 = *(void *)(v45 - 8);
  uint64_t v204 = v45;
  __chkstk_darwin(v45, v46);
  id v202 = (char *)v176 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v201 = type metadata accessor for DeviceActivityDataSource();
  uint64_t v200 = *(void *)(v201 - 8);
  __chkstk_darwin(v201, v48);
  id v199 = (char *)v176 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000950C8 != -1) {
    swift_once();
  }
  uint64_t v50 = type metadata accessor for Logger();
  uint64_t v51 = sub_100022718(v50, (uint64_t)qword_100097490);
  id v52 = a1;
  id v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.debug.getter();
  BOOL v55 = os_log_type_enabled(v53, v54);
  uint64_t v188 = v11;
  uint64_t v191 = v21;
  id v190 = v17;
  uint64_t v179 = v8;
  if (v55)
  {
    uint64_t v56 = swift_slowAlloc();
    long long v207 = v44;
    uint64_t v57 = (uint8_t *)v56;
    uint64_t v178 = swift_slowAlloc();
    uint64_t v209 = v178;
    id v177 = v57;
    *(_DWORD *)uint64_t v57 = 136446210;
    v176[1] = v57 + 4;
    id v58 = v52;
    uint64_t v59 = v38;
    id v60 = [v58 description];
    uint64_t v61 = v51;
    uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v64 = v63;

    uint64_t v38 = v59;
    uint64_t v65 = v62;
    uint64_t v51 = v61;
    uint64_t v213 = sub_100035724(v65, v64, &v209);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "Saving record: %{public}s", v177, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    unint64_t v44 = v207;
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v66 = v52;
  uint64_t v67 = (uint64_t *)(v208 + *(void *)(*(void *)v208 + 240));
  unint64_t v68 = v67[1];
  if (!v68)
  {
    uint64_t v69 = v208 + *(void *)(*(void *)v208 + 184);
    uint64_t v70 = type metadata accessor for DeviceActivityDataStore();
    long long v211 = (void *)v70;
    long long v212 = &protocol witness table for DeviceActivityDataStore;
    uint64_t v71 = sub_10002B118(&v209);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v70 - 8) + 16))(v71, v69, v70);
    unint64_t v72 = v199;
    DeviceActivityDataSource.init(dataStoring:)();
    id v73 = v202;
    DeviceActivityDataSource.localUser.getter();
    (*(void (**)(char *, uint64_t))(v200 + 8))(v72, v201);
    uint64_t v74 = _DeviceActivityData.User.altDSID.getter();
    uint64_t v76 = v75;
    (*(void (**)(char *, uint64_t))(v203 + 8))(v73, v204);
    *uint64_t v67 = v74;
    v67[1] = v76;
    swift_bridgeObjectRelease();
    unint64_t v68 = v67[1];
  }
  uint64_t v77 = *v67;
  swift_bridgeObjectRetain();
  uint64_t v78 = v66;
  id v79 = [v66 zoneID];
  id v80 = [v79 zoneName];

  uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v83 = v82;

  if (!v68) {
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  id v84 = v206;
  sub_10003D030(v81, v83, v206);
  uint64_t v85 = sub_1000222D4(&qword_100095CB0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v85 - 8) + 48))(v84, 1, v85) == 1)
  {
    sub_10002BDA0((uint64_t)v84, &qword_100095CA8);
    swift_bridgeObjectRelease();
LABEL_11:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v86 = Logger.logObject.getter();
    os_log_type_t v87 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v86, v87))
    {
      uint64_t v88 = v77;
      uint64_t v89 = swift_slowAlloc();
      uint64_t v209 = swift_slowAlloc();
      *(_DWORD *)uint64_t v89 = 136446466;
      swift_bridgeObjectRetain();
      uint64_t v213 = sub_100035724(v81, v83, &v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v89 + 12) = 2082;
      if (v68) {
        uint64_t v90 = v88;
      }
      else {
        uint64_t v90 = 7104878;
      }
      if (v68) {
        unint64_t v91 = v68;
      }
      else {
        unint64_t v91 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      uint64_t v213 = sub_100035724(v90, v91, &v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v86, v87, "Failed to create record for %{public}s and user: %{public}s", (uint8_t *)v89, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  uint64_t v203 = v77;
  uint64_t v204 = v51;
  swift_bridgeObjectRelease();
  uint64_t v92 = *(void (**)(char *, char *, uint64_t))(v205 + 32);
  uint64_t v93 = v198;
  v92(v198, &v84[*(int *)(v85 + 48)], v38);
  swift_bridgeObjectRelease();
  v92(v44, v93, v38);
  id v94 = [v78 recordName];
  uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v97 = v96;

  long long v207 = v44;
  if (v95 == v81 && v97 == v83)
  {
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  char v98 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v98 & 1) == 0)
  {
    v176[0] = v38;
    id v108 = (char *)(v208 + *(void *)(*(void *)v208 + 184));
    DeviceActivityDataStore.localDeviceIdentifier()();
    if (v109)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v116 = 0;
      uint64_t v38 = v176[0];
      goto LABEL_31;
    }
    DeviceActivityDataStore.fetchLocalSegment(segmentInterval:recordName:)();
    id v123 = v183;
    id v202 = v108;
    DeviceActivityDataStore.fetchCloudSegment(userAltDSID:deviceIdentifier:segmentInterval:recordName:)();
    swift_bridgeObjectRelease();
    uint64_t v124 = v189;
    uint64_t v125 = v191;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v189 + 56))(v123, 0, 1, v191);
    uint64_t v126 = v181;
    (*(void (**)(char *, char *, uint64_t))(v124 + 32))(v181, v123, v125);
    long long v206 = (char *)sub_100038168();
    (*(void (**)(char *, uint64_t))(v124 + 8))(v126, v125);
    _DeviceActivityData.ActivitySegment.recordSystemFields.setter();
    sub_10002ADE8((void *)(v208 + *(void *)(*(void *)v208 + 192)), *(void *)(v208 + *(void *)(*(void *)v208 + 192) + 24));
    uint64_t v127 = v190;
    dispatch thunk of DeviceActivityDataLocating.localActivitySegmentURL(segmentInterval:recordName:)();
    swift_bridgeObjectRelease();
    sub_1000222D4(&qword_100095CB8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100073720;
    *(void *)(inited + 32) = NSURLFileSizeKey;
    *(void *)(inited + 40) = NSURLTotalFileSizeKey;
    uint64_t v129 = NSURLFileSizeKey;
    uint64_t v130 = NSURLTotalFileSizeKey;
    sub_100047E7C(inited);
    swift_setDeallocating();
    type metadata accessor for URLResourceKey(0);
    swift_arrayDestroy();
    uint64_t v131 = v184;
    URL.resourceValues(forKeys:)();
    uint64_t v132 = v188;
    uint64_t v208 = 0;
    swift_bridgeObjectRelease();
    uint64_t v133 = v186;
    uint64_t v134 = v187;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v186 + 56))(v131, 0, 1, v187);
    int v135 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v133 + 48))(v131, 1, v134);
    uint64_t v38 = v176[0];
    uint64_t v136 = (uint64_t)v131;
    id v116 = v206;
    if (v135 == 1)
    {
      sub_10002BDA0(v136, (uint64_t *)&unk_100095C90);
LABEL_39:
      id v137 = v182;
      uint64_t v138 = v192;
      (*(void (**)(char *, char *, uint64_t))(v192 + 16))(v182, v127, v132);
      uint64_t v139 = Logger.logObject.getter();
      os_log_type_t v140 = static os_log_type_t.error.getter();
      uint64_t v141 = v132;
      if (os_log_type_enabled(v139, v140))
      {
        uint64_t v142 = (uint8_t *)swift_slowAlloc();
        uint64_t v209 = swift_slowAlloc();
        *(_DWORD *)uint64_t v142 = 136446210;
        sub_100046944((unint64_t *)&unk_100095CC0, 255, (void (*)(uint64_t))&type metadata accessor for URL);
        uint64_t v143 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v213 = sub_100035724(v143, v144, &v209);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        unint64_t v145 = *(void (**)(char *, uint64_t))(v192 + 8);
        v145(v137, v141);
        _os_log_impl((void *)&_mh_execute_header, v139, v140, "Failed to extract file size for url: %{public}s", v142, 0xCu);
        swift_arrayDestroy();
        uint64_t v38 = v176[0];
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        unint64_t v145 = *(void (**)(char *, uint64_t))(v138 + 8);
        v145(v137, v141);
      }

      id v116 = v206;
      id v146 = [v206 encryptedValues];
      NSString v147 = String._bridgeToObjectiveC()();
      [v146 setObject:0 forKeyedSubscript:v147];
      swift_unknownObjectRelease();

      id v148 = v194;
      uint64_t v122 = v207;
      uint64_t v109 = v208;
      DeviceActivityDataStore.saveLocalSegment(_:segmentInterval:)();
      if (v109)
      {
        swift_bridgeObjectRelease();
        v145(v190, v188);
        (*(void (**)(char *, uint64_t))(v189 + 8))(v148, v191);
        goto LABEL_31;
      }
      id v149 = objc_allocWithZone((Class)CKAsset);
      id v116 = v116;
      uint64_t v150 = v190;
      URL._bridgeToObjectiveC()(&v214);
      unint64_t v152 = v151;
      [v149 initWithFileURL:v151];

      CKRecord.subscript.setter();
      v145(v150, v188);
LABEL_45:
      (*(void (**)(char *, uint64_t))(v189 + 8))(v148, v191);
      goto LABEL_46;
    }
    uint64_t v154 = v180;
    (*(void (**)(char *, uint64_t, uint64_t))(v133 + 32))(v180, v136, v134);
    uint64_t v155 = URLResourceValues.totalFileSize.getter();
    LODWORD(v201) = v156;
    unint64_t v157 = v179;
    (*(void (**)(char *, char *, uint64_t))(v133 + 16))(v179, v154, v134);
    if (v201)
    {
      uint64_t v200 = URLResourceValues.fileSize.getter();
      LODWORD(v201) = v159;
      uint64_t v160 = *(void (**)(char *, uint64_t))(v133 + 8);
      v160(v157, v134);
      if (v201)
      {
        v160(v180, v134);
        goto LABEL_39;
      }
      uint64_t v158 = v160;
      uint64_t v155 = v200;
    }
    else
    {
      uint64_t v158 = *(void (**)(char *, uint64_t))(v133 + 8);
      v158(v157, v134);
    }
    id v161 = [v116 encryptedValues];
    uint64_t v109 = v208;
    if (v155 > 899999)
    {
      NSString v166 = String._bridgeToObjectiveC()();
      [v161 setObject:0 forKeyedSubscript:v166];
      swift_unknownObjectRelease();

      id v148 = v194;
      uint64_t v122 = v207;
      DeviceActivityDataStore.saveLocalSegment(_:segmentInterval:)();
      if (v109)
      {
        swift_bridgeObjectRelease();
        v158(v180, v187);
        (*(void (**)(char *, uint64_t))(v192 + 8))(v190, v188);
        (*(void (**)(char *, uint64_t))(v189 + 8))(v148, v191);
LABEL_31:
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v101 = Logger.logObject.getter();
        os_log_type_t v102 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v101, v102))
        {
          unint64_t v103 = (uint8_t *)swift_slowAlloc();
          uint64_t v209 = swift_slowAlloc();
          long long v206 = (char *)v116;
          *(_DWORD *)unint64_t v103 = 136446210;
          uint64_t v213 = v109;
          swift_errorRetain();
          sub_1000222D4(&qword_100095330);
          uint64_t v110 = String.init<A>(describing:)();
          uint64_t v105 = v205;
          uint64_t v213 = sub_100035724(v110, v111, &v209);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          uint64_t v107 = "Failed to add segment to record because it was likely already moved to the Cloud folder: %{public}s";
          goto LABEL_33;
        }
LABEL_34:

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v205 + 8))(v207, v38);

        return 0;
      }
      id v172 = objc_allocWithZone((Class)CKAsset);
      uint64_t v173 = v116;
      uint64_t v171 = v190;
      URL._bridgeToObjectiveC()(&v214);
      uint64_t v175 = v174;
      [v172 initWithFileURL:v174];
    }
    else
    {
      sub_100046944(&qword_100095118, 255, (void (*)(uint64_t))&type metadata accessor for _DeviceActivityData.ActivitySegment);
      sub_100046944(&qword_100095120, 255, (void (*)(uint64_t))&type metadata accessor for _DeviceActivityData.ActivitySegment);
      uint64_t v162 = v194;
      uint64_t v163 = v191;
      uint64_t v164 = static DeviceActivityDataStore.encode<A>(_:)();
      if (v109)
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        v158(v180, v187);
        (*(void (**)(char *, uint64_t))(v192 + 8))(v190, v132);
        (*(void (**)(char *, uint64_t))(v189 + 8))(v162, v163);
        id v116 = v206;
        goto LABEL_31;
      }
      uint64_t v167 = v164;
      unint64_t v168 = v165;
      swift_getObjectType();
      long long v211 = &type metadata for Data;
      long long v212 = &protocol witness table for Data;
      uint64_t v209 = v167;
      unint64_t v210 = v168;
      CKRecordKeyValueSetting.subscript.setter();
      swift_unknownObjectRelease();
      double v169 = v206;
      uint64_t v170 = v206;
      uint64_t v122 = v207;
      uint64_t v171 = v190;
      id v148 = v162;
      id v116 = v169;
    }
    CKRecord.subscript.setter();

    v158(v180, v187);
    (*(void (**)(char *, uint64_t))(v192 + 8))(v171, v188);
    goto LABEL_45;
  }
LABEL_24:
  swift_bridgeObjectRelease();
  DeviceActivityDataStore.localDeviceIdentifier()();
  uint64_t v100 = v197;
  if (!v99)
  {
    DeviceActivityDataStore.fetchLocalMetadata(segmentInterval:)();
    DeviceActivityDataStore.fetchCloudMetadata(userAltDSID:deviceIdentifier:segmentInterval:)();
    swift_bridgeObjectRelease();
    uint64_t v113 = v195;
    uint64_t v114 = v193;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v195 + 56))(v100, 0, 1, v193);
    long long v115 = v185;
    (*(void (**)(char *, char *, uint64_t))(v113 + 32))(v185, v100, v114);
    id v116 = sub_100037F8C();
    (*(void (**)(char *, uint64_t))(v113 + 8))(v115, v114);
    id v117 = v196;
    _DeviceActivityData.Metadata.recordSystemFields.setter();
    id v118 = [v116 encryptedValues];
    sub_100046944(&qword_100095AD8, 255, (void (*)(uint64_t))&type metadata accessor for _DeviceActivityData.Metadata);
    sub_100046944((unint64_t *)&unk_100095CD0, 255, (void (*)(uint64_t))&type metadata accessor for _DeviceActivityData.Metadata);
    uint64_t v119 = static DeviceActivityDataStore.encode<A>(_:)();
    unint64_t v121 = v120;
    swift_getObjectType();
    long long v211 = &type metadata for Data;
    long long v212 = &protocol witness table for Data;
    uint64_t v209 = v119;
    unint64_t v210 = v121;
    CKRecordKeyValueSetting.subscript.setter();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v195 + 8))(v117, v114);
    uint64_t v122 = v207;
LABEL_46:
    id v153 = [v116 encryptedValues];
    swift_getObjectType();
    long long v211 = &type metadata for String;
    long long v212 = &protocol witness table for String;
    uint64_t v209 = v203;
    unint64_t v210 = v68;
    CKRecordKeyValueSetting.subscript.setter();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v205 + 8))(v122, v38);
    return v116;
  }
  swift_bridgeObjectRelease();
  id v116 = 0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v101 = Logger.logObject.getter();
  os_log_type_t v102 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v101, v102)) {
    goto LABEL_34;
  }
  v176[0] = v38;
  unint64_t v103 = (uint8_t *)swift_slowAlloc();
  uint64_t v209 = swift_slowAlloc();
  long long v206 = 0;
  *(_DWORD *)unint64_t v103 = 136446210;
  uint64_t v213 = v99;
  swift_errorRetain();
  sub_1000222D4(&qword_100095330);
  uint64_t v104 = String.init<A>(describing:)();
  uint64_t v105 = v205;
  uint64_t v213 = sub_100035724(v104, v106, &v209);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v107 = "Failed to add metadata to record because it was likely already moved to the Cloud folder: %{public}s";
LABEL_33:
  _os_log_impl((void *)&_mh_execute_header, v101, v102, v107, v103, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  swift_errorRelease();
  (*(void (**)(char *, void))(v105 + 8))(v207, v176[0]);

  return 0;
}

unint64_t sub_100049DE8()
{
  unint64_t result = qword_100095CF0;
  if (!qword_100095CF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100095CF0);
  }
  return result;
}

void sub_100049E3C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1000222D4(&qword_100095CA8);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (void *)((char *)v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_1000222D4(&qword_100095CB0);
  uint64_t v87 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  id v86 = (void *)((char *)v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for _DeviceActivityData.User();
  uint64_t v84 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  unint64_t v83 = (char *)v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DeviceActivityDataSource();
  uint64_t v81 = *(void *)(v14 - 8);
  uint64_t v82 = v14;
  __chkstk_darwin(v14, v15);
  id v80 = (char *)v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000950C8 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = sub_100022718(v17, (uint64_t)qword_100097490);
  id v19 = a1;
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v88 = v7;
  id v89 = v19;
  if (v22)
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    uint64_t v78 = v11;
    v90[0] = v24;
    *(_DWORD *)uint64_t v23 = 136446210;
    uint64_t v79 = v2;
    v77[1] = v23 + 4;
    id v25 = v19;
    uint64_t v85 = v18;
    id v26 = v25;
    uint64_t v27 = v8;
    id v28 = [v25 description];
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v31 = v30;

    uint64_t v8 = v27;
    uint64_t v91 = sub_100035724(v29, v31, v90);
    uint64_t v2 = v79;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v18 = v85;
    id v19 = v89;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Saved record: %{public}s", v23, 0xCu);
    swift_arrayDestroy();
    uint64_t v11 = v78;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v32 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 240));
  unint64_t v33 = v32[1];
  if (!v33)
  {
    uint64_t v34 = v2 + *(void *)(*(void *)v2 + 184);
    uint64_t v35 = type metadata accessor for DeviceActivityDataStore();
    v90[3] = v35;
    v90[4] = (uint64_t)&protocol witness table for DeviceActivityDataStore;
    uint64_t v36 = sub_10002B118(v90);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 16))(v36, v34, v35);
    uint64_t v37 = v80;
    DeviceActivityDataSource.init(dataStoring:)();
    uint64_t v38 = v83;
    DeviceActivityDataSource.localUser.getter();
    (*(void (**)(char *, uint64_t))(v81 + 8))(v37, v82);
    uint64_t v39 = _DeviceActivityData.User.altDSID.getter();
    uint64_t v41 = v40;
    (*(void (**)(char *, uint64_t))(v84 + 8))(v38, v11);
    uint64_t *v32 = v39;
    v32[1] = v41;
    swift_bridgeObjectRelease();
    unint64_t v33 = v32[1];
  }
  uint64_t v42 = *v32;
  swift_bridgeObjectRetain();
  id v43 = [v19 recordID];
  id v44 = [v43 zoneID];
  id v45 = [v44 zoneName];

  uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v48 = v47;

  if (!v33) {
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  uint64_t v49 = v88;
  sub_10003D030(v46, v48, v88);
  int v50 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v87 + 48))(v49, 1, v8);
  swift_bridgeObjectRelease();
  if (v50 != 1)
  {
    uint64_t v87 = v42;
    uint64_t v85 = v18;
    uint64_t v56 = *(int *)(v8 + 48);
    swift_bridgeObjectRelease();
    uint64_t v57 = v86;
    id v58 = (void *)((char *)v86 + v56);
    uint64_t v59 = (char *)v49 + *(int *)(v8 + 48);
    uint64_t v60 = v49[1];
    void *v86 = *v49;
    v57[1] = v60;
    uint64_t v61 = type metadata accessor for _SegmentInterval();
    uint64_t v62 = *(void (**)(void *, char *, uint64_t))(*(void *)(v61 - 8) + 32);
    uint64_t v88 = v58;
    v62(v58, v59, v61);
    id v63 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
    id v64 = v89;
    [v89 encodeSystemFieldsWithCoder:v63];
    [v63 finishEncoding];
    id v65 = [v63 encodedData];
    uint64_t v66 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v68 = v67;

    sub_10003D2C8(v64, v66, v68);
    sub_100022764(v66, v68);
    uint64_t v70 = CKRecord.recordType.getter();
    uint64_t v71 = v69;
    if (v70 == 0x617461646174654DLL && v69 == 0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      DeviceActivityDataStore.moveLocalMetadataToCloud(userAltDSID:deviceIdentifier:segmentInterval:)();
    }
    else
    {
      if (v70 == 0x7974697669746341 && v71 == 0xEF746E656D676553)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v72 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          uint64_t v74 = Logger.logObject.getter();
          os_log_type_t v75 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v74, v75))
          {
            uint64_t v76 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v76 = 0;
            _os_log_impl((void *)&_mh_execute_header, v74, v75, "Failed to move unknown record type", v76, 2u);
            swift_slowDealloc();
          }

          goto LABEL_25;
        }
      }
      id v73 = [v43 recordName];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      DeviceActivityDataStore.moveLocalActivitySegmentToCloud(userAltDSID:deviceIdentifier:segmentInterval:recordName:)();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
LABEL_25:

    sub_10002BDA0((uint64_t)v86, &qword_100095CB0);
    return;
  }
  sub_10002BDA0((uint64_t)v49, &qword_100095CA8);
LABEL_11:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = swift_slowAlloc();
    v90[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v53 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v91 = sub_100035724(v46, v48, v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v53 + 12) = 2082;
    if (v33) {
      uint64_t v54 = v42;
    }
    else {
      uint64_t v54 = 7104878;
    }
    if (v33) {
      unint64_t v55 = v33;
    }
    else {
      unint64_t v55 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v91 = sub_100035724(v54, v55, v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Failed to move record for %{public}s and user: %{public}s", (uint8_t *)v53, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

void sub_10004AA60(void *a1, uint64_t a2)
{
  uint64_t v63 = a2;
  swift_errorRetain();
  sub_1000222D4(&qword_100095330);
  type metadata accessor for CKError(0);
  if (swift_dynamicCast())
  {
    id v3 = v62;
    sub_100046944(&qword_100095180, 255, type metadata accessor for CKError);
    _BridgedStoredNSError.code.getter();
    switch(v63)
    {
      case 9:
        if (qword_1000950C8 != -1) {
          swift_once();
        }
        uint64_t v4 = type metadata accessor for Logger();
        sub_100022718(v4, (uint64_t)qword_100097490);
        id v5 = v62;
        uint64_t v6 = Logger.logObject.getter();
        os_log_type_t v7 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v6, v7)) {
          goto LABEL_22;
        }
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        id v62 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v8 = 136446210;
        id v9 = v5;
        uint64_t v10 = related decl 'e' for CKErrorCode.description.getter();
        unint64_t v12 = v11;

        sub_100035724(v10, v12, (uint64_t *)&v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        uint64_t v13 = "The current user is not authenticated: %{public}s";
        goto LABEL_16;
      case 11:
        sub_10003D2C8(a1, 0, 0xF000000000000000);
        CKSyncEngine.state.getter();
        sub_1000222D4(&qword_100095C80);
        uint64_t v24 = type metadata accessor for CKSyncEngine.PendingRecordZoneChange();
        uint64_t v25 = *(void *)(v24 - 8);
        unint64_t v26 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
        uint64_t v27 = swift_allocObject();
        *(_OWORD *)(v27 + 16) = xmmword_100073730;
        id v28 = (void *)(v27 + v26);
        *id v28 = [a1 recordID];
        (*(void (**)(void *, void, uint64_t))(v25 + 104))(v28, enum case for CKSyncEngine.PendingRecordZoneChange.saveRecord(_:), v24);
        CKSyncEngine.State.add(pendingRecordZoneChanges:)((Swift::OpaquePointer)v27);
        swift_release();

        goto LABEL_21;
      case 14:
        uint64_t v29 = related decl 'e' for CKErrorCode.serverRecord.getter();
        if (v29)
        {
          unint64_t v30 = (void *)v29;
          id v31 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
          [v30 encodeSystemFieldsWithCoder:v31];
          [v31 finishEncoding];
          id v32 = [v31 encodedData];
          uint64_t v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v35 = v34;

          sub_10003D2C8(a1, v33, v35);
          sub_100022764(v33, v35);
          CKSyncEngine.state.getter();
          sub_1000222D4(&qword_100095C80);
          uint64_t v36 = type metadata accessor for CKSyncEngine.PendingRecordZoneChange();
          uint64_t v37 = *(void *)(v36 - 8);
          unint64_t v38 = (*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
          uint64_t v39 = swift_allocObject();
          *(_OWORD *)(v39 + 16) = xmmword_100073730;
          uint64_t v40 = (void *)(v39 + v38);
          void *v40 = [a1 recordID];
          (*(void (**)(void *, void, uint64_t))(v37 + 104))(v40, enum case for CKSyncEngine.PendingRecordZoneChange.saveRecord(_:), v36);
          CKSyncEngine.State.add(pendingRecordZoneChanges:)((Swift::OpaquePointer)v39);
          swift_release();

LABEL_21:
          swift_bridgeObjectRelease();
        }
        else
        {
          if (qword_1000950C8 != -1) {
            swift_once();
          }
          uint64_t v52 = type metadata accessor for Logger();
          sub_100022718(v52, (uint64_t)qword_100097490);
          id v53 = a1;
          uint64_t v54 = Logger.logObject.getter();
          os_log_type_t v55 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v54, v55))
          {
            uint64_t v56 = (uint8_t *)swift_slowAlloc();
            id v62 = (id)swift_slowAlloc();
            *(_DWORD *)uint64_t v56 = 136446210;
            id v57 = v53;
            id v58 = [v57 description];
            uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v61 = v60;

            sub_100035724(v59, v61, (uint64_t *)&v62);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v54, v55, "No server record when resolving conflict for record: %{public}s", v56, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
        }
        break;
      case 26:
        id v41 = [a1 recordID];
        id v42 = [v41 zoneID];
        id v43 = [objc_allocWithZone((Class)CKRecordZone) initWithZoneID:v42];

        CKSyncEngine.state.getter();
        sub_1000222D4(&qword_100095B40);
        uint64_t v44 = *(void *)(type metadata accessor for CKSyncEngine.PendingDatabaseChange() - 8);
        unint64_t v45 = (*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
        uint64_t v46 = swift_allocObject();
        *(_OWORD *)(v46 + 16) = xmmword_100073730;
        *(void *)(v46 + v45) = v43;
        (*(void (**)(void))(v44 + 104))();
        id v47 = v43;
        CKSyncEngine.State.add(pendingDatabaseChanges:)((Swift::OpaquePointer)v46);
        swift_release();
        swift_bridgeObjectRelease();
        CKSyncEngine.state.getter();
        sub_1000222D4(&qword_100095C80);
        uint64_t v48 = *(void *)(type metadata accessor for CKSyncEngine.PendingRecordZoneChange() - 8);
        unint64_t v49 = (*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
        uint64_t v50 = swift_allocObject();
        *(_OWORD *)(v50 + 16) = xmmword_100073730;
        *(void *)(v50 + v49) = v41;
        (*(void (**)(void))(v48 + 104))();
        id v51 = v41;
        CKSyncEngine.State.add(pendingRecordZoneChanges:)((Swift::OpaquePointer)v50);
        swift_release();

        goto LABEL_21;
      default:
        if (qword_1000950C8 != -1) {
          swift_once();
        }
        uint64_t v20 = type metadata accessor for Logger();
        sub_100022718(v20, (uint64_t)qword_100097490);
        id v5 = v62;
        uint64_t v6 = Logger.logObject.getter();
        os_log_type_t v7 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v6, v7))
        {
          uint64_t v8 = (uint8_t *)swift_slowAlloc();
          id v62 = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v8 = 136446210;
          id v9 = v5;
          uint64_t v21 = related decl 'e' for CKErrorCode.description.getter();
          unint64_t v23 = v22;

          sub_100035724(v21, v23, (uint64_t *)&v62);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          uint64_t v13 = "Failed to save record: %{public}s";
LABEL_16:
          _os_log_impl((void *)&_mh_execute_header, v6, v7, v13, v8, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
LABEL_22:
        }
        return;
    }
  }
  else
  {
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100022718(v14, (uint64_t)qword_100097490);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v63 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136446210;
      swift_errorRetain();
      uint64_t v18 = String.init<A>(describing:)();
      id v62 = (id)sub_100035724(v18, v19, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to save record with unknown error: %{public}s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

void sub_10004B688(id a1)
{
  uint64_t v2 = sub_1000222D4(&qword_100095C08);
  uint64_t v4 = __chkstk_darwin(v2 - 8, v3);
  uint64_t v141 = (char *)v137 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v6);
  id v149 = (char *)v137 - v7;
  uint64_t v148 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v148 - 8);
  __chkstk_darwin(v148, v9);
  unint64_t v11 = (char *)v137 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = type metadata accessor for _DeviceActivityData.ActivitySegment();
  uint64_t v139 = *(void *)(v145 - 8);
  __chkstk_darwin(v145, v12);
  unint64_t v144 = (char *)v137 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DeviceActivityDataStore();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  os_log_type_t v140 = (char *)v137 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  uint64_t v143 = (char *)v137 - v20;
  uint64_t v152 = type metadata accessor for _DeviceActivityData.Metadata();
  uint64_t v142 = *(void *)(v152 - 8);
  __chkstk_darwin(v152, v21);
  uint64_t v151 = (char *)v137 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_1000222D4(&qword_100095CA8);
  __chkstk_darwin(v23 - 8, v24);
  unint64_t v157 = (id *)((char *)v137 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = sub_1000222D4(&qword_100095CB0);
  unint64_t v155 = *(void *)(v26 - 8);
  unint64_t v156 = v26;
  __chkstk_darwin(v26, v27);
  uint64_t v29 = (char *)v137 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v30 = [a1 recordID];
  if (qword_1000950C8 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  uint64_t v32 = sub_100022718(v31, (uint64_t)qword_100097490);
  id v33 = v30;
  unint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  BOOL v36 = os_log_type_enabled(v34, v35);
  id v160 = a1;
  uint64_t v146 = v15;
  uint64_t v147 = v14;
  uint64_t v150 = v8;
  uint64_t v138 = v11;
  if (v36)
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    uint64_t v153 = swift_slowAlloc();
    uint64_t v161 = v153;
    *(_DWORD *)uint64_t v37 = 136446210;
    v137[1] = v37 + 4;
    id v38 = v33;
    uint64_t v39 = v29;
    id v40 = [v38 description];
    id v41 = v33;
    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v159 = v32;
    unint64_t v44 = v43;

    uint64_t v29 = v39;
    a1 = v160;
    uint64_t v45 = v42;
    id v33 = v41;
    uint64_t v163 = sub_100035724(v45, v44, &v161);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v32 = v159;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Fetched record: %{public}s", v37, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v46 = [a1 encryptedValues];
  NSString v47 = String._bridgeToObjectiveC()();
  id v48 = [v46 objectForKeyedSubscript:v47];
  swift_unknownObjectRelease();

  if (v48 && (uint64_t v163 = (uint64_t)v48, sub_1000222D4(&qword_100095D28), swift_dynamicCast()))
  {
    unint64_t v49 = v162;
    uint64_t v153 = v161;
  }
  else
  {
    uint64_t v153 = 0;
    unint64_t v49 = 0;
  }
  id v50 = [v33 zoneID];
  id v51 = [v50 zoneName];

  uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v54 = v53;

  if (v49)
  {
    uint64_t v154 = v29;
    swift_bridgeObjectRetain();
    os_log_type_t v55 = v157;
    sub_10003D030(v52, v54, v157);
    uint64_t v56 = (uint64_t)v55;
    unint64_t v57 = v156;
    LODWORD(v55) = (*(uint64_t (**)(void *, uint64_t, unint64_t))(v155 + 48))(v55, 1, v156);
    swift_bridgeObjectRelease();
    if (v55 == 1)
    {
      sub_10002BDA0(v56, &qword_100095CA8);
      unint64_t v58 = v49;
      goto LABEL_14;
    }
    uint64_t v159 = v32;
    uint64_t v63 = *(int *)(v57 + 48);
    swift_bridgeObjectRelease();
    id v64 = (uint64_t *)v56;
    id v65 = v154;
    uint64_t v66 = (void *)((char *)v154 + v63);
    unint64_t v67 = (char *)v64 + *(int *)(v57 + 48);
    uint64_t v68 = *v64;
    uint64_t v69 = v64[1];
    void *v154 = v68;
    v65[1] = v69;
    uint64_t v70 = type metadata accessor for _SegmentInterval();
    uint64_t v71 = *(void (**)(void *, char *, uint64_t))(*(void *)(v70 - 8) + 32);
    unint64_t v157 = v66;
    v71(v66, v67, v70);
    id v72 = v160;
    uint64_t v74 = CKRecord.recordType.getter();
    uint64_t v75 = v73;
    if (v74 == 0x617461646174654DLL && v73 == 0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      id v76 = [v72 encryptedValues];
      NSString v77 = String._bridgeToObjectiveC()();
      id v78 = [v76 objectForKeyedSubscript:v77];
      swift_unknownObjectRelease();

      if (v78)
      {
        uint64_t v163 = (uint64_t)v78;
        sub_1000222D4(&qword_100095D28);
        char v79 = swift_dynamicCast();
        uint64_t v80 = (uint64_t)v154;
        if (v79)
        {
          v137[0] = v33;
          uint64_t v81 = v161;
          unint64_t v82 = v162;
          sub_100046944(&qword_100095AD8, 255, (void (*)(uint64_t))&type metadata accessor for _DeviceActivityData.Metadata);
          sub_100046944((unint64_t *)&unk_100095CD0, 255, (void (*)(uint64_t))&type metadata accessor for _DeviceActivityData.Metadata);
          unint64_t v156 = v81;
          static DeviceActivityDataStore.decode<A>(_:)();
          unint64_t v155 = v82;
          id v107 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
          [v160 encodeSystemFieldsWithCoder:v107];
          [v107 finishEncoding];
          id v108 = [v107 encodedData];
          static Data._unconditionallyBridgeFromObjectiveC(_:)();

          _DeviceActivityData.Metadata.recordSystemFields.setter();
          uint64_t v110 = v146;
          uint64_t v109 = v147;
          unint64_t v111 = v143;
          (*(void (**)(char *, uint64_t, uint64_t))(v146 + 16))(v143, v158 + *(void *)(*(void *)v158 + 184), v147);
          uint64_t v115 = static DeviceActivityDataStore.encode<A>(_:)();
          unint64_t v117 = v116;
          DeviceActivityDataStore.saveEncodedCloudMetadata(_:userAltDSID:deviceIdentifier:segmentInterval:)();
          id v118 = v137[0];
          swift_bridgeObjectRelease();
          sub_100022764(v115, v117);
          sub_100022764(v156, v155);

          (*(void (**)(char *, uint64_t))(v110 + 8))(v111, v109);
          (*(void (**)(char *, uint64_t))(v142 + 8))(v151, v152);
LABEL_54:
          uint64_t v80 = (uint64_t)v154;
          goto LABEL_55;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v80 = (uint64_t)v154;
      }
      id v83 = v72;
      uint64_t v84 = Logger.logObject.getter();
      os_log_type_t v85 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v84, v85))
      {
        id v86 = (uint8_t *)swift_slowAlloc();
        uint64_t v161 = swift_slowAlloc();
        *(_DWORD *)id v86 = 136446210;
        id v87 = v83;
        id v88 = [v87 description];
        uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v137[0] = v33;
        unint64_t v91 = v90;

        uint64_t v163 = sub_100035724(v89, v91, &v161);
        uint64_t v80 = (uint64_t)v154;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        uint64_t v92 = "Failed to extract metadata from record: %{public}s";
LABEL_33:
        _os_log_impl((void *)&_mh_execute_header, v84, v85, v92, v86, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

LABEL_55:
        sub_10002BDA0(v80, &qword_100095CB0);
        return;
      }
      goto LABEL_52;
    }
    if (v74 == 0x7974697669746341 && v75 == 0xEF746E656D676553)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v93 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v93 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v112 = Logger.logObject.getter();
        os_log_type_t v113 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v112, v113))
        {
          uint64_t v114 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v114 = 0;
          _os_log_impl((void *)&_mh_execute_header, v112, v113, "Failed to download unknown record type", v114, 2u);
          swift_slowDealloc();
        }
        else
        {
        }
        goto LABEL_54;
      }
    }
    id v94 = [v72 encryptedValues];
    NSString v95 = String._bridgeToObjectiveC()();
    id v96 = [v94 objectForKeyedSubscript:v95];
    swift_unknownObjectRelease();

    uint64_t v97 = (uint64_t)v149;
    uint64_t v98 = v150;
    uint64_t v80 = (uint64_t)v154;
    if (v96)
    {
      uint64_t v163 = (uint64_t)v96;
      sub_1000222D4(&qword_100095D28);
      if (swift_dynamicCast())
      {
        uint64_t v99 = v161;
        unint64_t v100 = v162;
LABEL_38:
        sub_100046944(&qword_100095118, 255, (void (*)(uint64_t))&type metadata accessor for _DeviceActivityData.ActivitySegment);
        sub_100046944(&qword_100095120, 255, (void (*)(uint64_t))&type metadata accessor for _DeviceActivityData.ActivitySegment);
        static DeviceActivityDataStore.decode<A>(_:)();
        unint64_t v156 = v100;
        v137[0] = v33;
        id v119 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
        [v72 encodeSystemFieldsWithCoder:v119];
        [v119 finishEncoding];
        id v120 = [v119 encodedData];
        static Data._unconditionallyBridgeFromObjectiveC(_:)();

        _DeviceActivityData.ActivitySegment.recordSystemFields.setter();
        uint64_t v121 = v146;
        (*(void (**)(char *, uint64_t, uint64_t))(v146 + 16))(v140, v158 + *(void *)(*(void *)v158 + 184), v147);
        uint64_t v128 = static DeviceActivityDataStore.encode<A>(_:)();
        unint64_t v130 = v129;
        unint64_t v131 = v154[1];
        uint64_t v158 = *v154;
        unint64_t v155 = v131;
        id v132 = [v160 recordID];
        id v133 = [v132 recordName];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v134 = v140;
        DeviceActivityDataStore.saveEncodedCloudSegment(_:userAltDSID:deviceIdentifier:segmentInterval:recordName:)();
        int v135 = (void (**)(char *, uint64_t))(v139 + 8);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100022764(v128, v130);

        sub_100022764(v99, v156);
        (*(void (**)(char *, uint64_t))(v121 + 8))(v134, v147);
        (*v135)(v144, v145);
        goto LABEL_54;
      }
    }
    if (CKRecord.subscript.getter())
    {
      self;
      uint64_t v101 = (void *)swift_dynamicCastObjCClass();
      if (v101)
      {
        id v102 = [v101 fileURL];
        swift_unknownObjectRelease();
        if (v102)
        {
          unint64_t v103 = v141;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v104 = (uint64_t)v103;
          uint64_t v105 = 0;
          uint64_t v106 = v148;
        }
        else
        {
          uint64_t v105 = 1;
          uint64_t v106 = v148;
          uint64_t v104 = (uint64_t)v141;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v98 + 56))(v104, v105, 1, v106);
        sub_10002C590(v104, v97, &qword_100095C08);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))(v97, 1, v106) != 1)
        {
          uint64_t v127 = v138;
          (*(void (**)(char *, uint64_t, uint64_t))(v98 + 32))(v138, v97, v106);
          uint64_t v99 = Data.init(contentsOf:options:)();
          unint64_t v100 = v136;
          (*(void (**)(char *, uint64_t))(v98 + 8))(v127, v106);
          goto LABEL_38;
        }
LABEL_50:
        swift_bridgeObjectRelease();
        sub_10002BDA0(v97, &qword_100095C08);
        id v83 = v72;
        uint64_t v84 = Logger.logObject.getter();
        os_log_type_t v85 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v84, v85))
        {
          id v86 = (uint8_t *)swift_slowAlloc();
          uint64_t v161 = swift_slowAlloc();
          *(_DWORD *)id v86 = 136446210;
          id v122 = v83;
          id v123 = [v122 description];
          uint64_t v124 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v137[0] = v33;
          unint64_t v126 = v125;

          uint64_t v163 = sub_100035724(v124, v126, &v161);
          uint64_t v80 = (uint64_t)v154;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          uint64_t v92 = "Failed to extract encoded activity segment from record: %{public}s";
          goto LABEL_33;
        }
LABEL_52:

        goto LABEL_55;
      }
      swift_unknownObjectRelease();
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v98 + 56))(v97, 1, 1, v148);
    goto LABEL_50;
  }
  unint64_t v58 = 0xE300000000000000;
LABEL_14:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v59 = Logger.logObject.getter();
  os_log_type_t v60 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v59, v60))
  {
    uint64_t v61 = swift_slowAlloc();
    uint64_t v161 = swift_slowAlloc();
    *(_DWORD *)uint64_t v61 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v163 = sub_100035724(v52, v54, &v161);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v61 + 12) = 2082;
    if (v49) {
      uint64_t v62 = v153;
    }
    else {
      uint64_t v62 = 7104878;
    }
    swift_bridgeObjectRetain();
    uint64_t v163 = sub_100035724(v62, v58, &v161);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v59, v60, "Failed to download record for %{public}s and user: %{public}s", (uint8_t *)v61, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

void sub_10004CF8C(void *a1, void *a2)
{
  uint64_t v3 = v2;
  if (qword_1000950C8 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100022718(v6, (uint64_t)qword_100097490);
  id v7 = a2;
  id v8 = a1;
  id v9 = v7;
  id v10 = v8;
  unint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    v27[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446466;
    id v14 = v10;
    sub_1000222D4(&qword_100095D38);
    uint64_t v15 = String.init<A>(describing:)();
    sub_100035724(v15, v16, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2082;
    id v17 = v9;
    uint64_t v18 = String.init<A>(describing:)();
    sub_100035724(v18, v19, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Account changed from %{public}s to %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  DeviceActivityDataStore.deleteAllData()();
  if (v20)
  {
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      v27[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136446210;
      swift_errorRetain();
      sub_1000222D4(&qword_100095330);
      uint64_t v24 = String.init<A>(describing:)();
      sub_100035724(v24, v25, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to delete all data: %{public}s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  uint64_t v26 = (void *)(v3 + *(void *)(*(void *)v3 + 240));
  void *v26 = 0;
  v26[1] = 0;
  swift_bridgeObjectRelease();
  sub_10003BEE8();
}

void sub_10004D380(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CKSyncEngine.Event.AccountChange();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CKSyncEngine.Event.AccountChange.ChangeType();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  unint64_t v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  CKSyncEngine.Event.AccountChange.changeType.getter();
  int v12 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v11, v7);
  if (v12 == enum case for CKSyncEngine.Event.AccountChange.ChangeType.signIn(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 96))(v11, v7);
    uint64_t v13 = *(void **)v11;
    if (qword_1000950E8 != -1) {
      swift_once();
    }
    id v14 = v13;
    uint64_t v15 = 0;
    unint64_t v16 = v13;
LABEL_9:
    sub_10004CF8C(v15, v16);

    return;
  }
  if (v12 == enum case for CKSyncEngine.Event.AccountChange.ChangeType.signOut(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 96))(v11, v7);
    id v17 = *(void **)v11;
    if (qword_1000950E8 != -1) {
      swift_once();
    }
    id v14 = v17;
    uint64_t v15 = v17;
    unint64_t v16 = 0;
    goto LABEL_9;
  }
  if (v12 == enum case for CKSyncEngine.Event.AccountChange.ChangeType.switchAccounts(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 96))(v11, v7);
    uint64_t v18 = *(void **)v11;
    unint64_t v19 = (void *)*((void *)v11 + 1);
    if (qword_1000950E8 != -1) {
      swift_once();
    }
    id v20 = v18;
    id v21 = v19;
    sub_10004CF8C(v18, v19);
  }
  else
  {
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100022718(v22, (uint64_t)qword_100097490);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v23, v24))
    {
      unint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      uint64_t v32 = v30;
      uint64_t v29 = v25;
      *(_DWORD *)unint64_t v25 = 136446210;
      v28[1] = v25 + 4;
      sub_100046944(&qword_100095D30, 255, (void (*)(uint64_t))&type metadata accessor for CKSyncEngine.Event.AccountChange);
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v31 = sub_100035724(v26, v27, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Received unknown account change: %{public}s", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
}

uint64_t sub_10004D874(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v42 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  id v40 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for DispatchQoS();
  uint64_t v39 = *(void *)(v41 - 8);
  __chkstk_darwin(v41, v7);
  id v38 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v35 = *(void *)(v37 - 8);
  __chkstk_darwin(v37, v9);
  unint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v36 = a1;
  id v12 = [a1 zoneID];
  id v13 = [v12 zoneName];

  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v16 = v15;

  if (qword_1000950C8 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100022718(v17, (uint64_t)qword_100097490);
  swift_bridgeObjectRetain_n();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v34 = v4;
    id v21 = (uint8_t *)v20;
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)id v21 = 136446210;
    swift_bridgeObjectRetain();
    unint64_t v43 = (void *)sub_100035724(v14, v16, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Zone was saved: %{public}s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v4 = v34;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v22 = v2[10];
  uint64_t v23 = v2[11];
  sub_10002ADE8(v2 + 7, v22);
  uint64_t v45 = &type metadata for Bool;
  LOBYTE(aBlock[0]) = 1;
  (*(void (**)(uint64_t *, uint64_t, unint64_t, uint64_t, uint64_t))(v23 + 40))(aBlock, v14, v16, v22, v23);
  sub_10002BDA0((uint64_t)aBlock, (uint64_t *)&unk_100095B90);
  os_log_type_t v24 = dispatch_group_create();
  dispatch_group_enter(v24);
  id v25 = [v36 zoneID];
  sub_10003EB0C((uint64_t)v25, v24);

  sub_100023228(0, (unint64_t *)&unk_100095F20);
  uint64_t v26 = v35;
  uint64_t v27 = v37;
  (*(void (**)(char *, void, uint64_t))(v35 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v37);
  uint64_t v28 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v27);
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v14;
  *(void *)(v29 + 24) = v16;
  id v46 = sub_100050800;
  uint64_t v47 = v29;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10003D02C;
  uint64_t v45 = &unk_10008B548;
  uint64_t v30 = _Block_copy(aBlock);
  uint64_t v31 = v38;
  static DispatchQoS.unspecified.getter();
  unint64_t v43 = &_swiftEmptyArrayStorage;
  sub_100046944((unint64_t *)&qword_100095BE0, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000222D4((uint64_t *)&unk_100095F30);
  sub_10004785C((unint64_t *)&qword_100095BF0, (uint64_t *)&unk_100095F30);
  uint64_t v32 = v40;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_group.notify(qos:flags:queue:execute:)();
  _Block_release(v30);

  (*(void (**)(char *, uint64_t))(v42 + 8))(v32, v4);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v31, v41);
  return swift_release();
}

uint64_t sub_10004DE74(void *a1)
{
  uint64_t v2 = v1;
  id v3 = [a1 zoneName];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v6 = v5;

  if (qword_1000950C8 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100022718(v7, (uint64_t)qword_100097490);
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(void *)&v15[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446210;
    swift_bridgeObjectRetain();
    sub_100035724(v4, v6, (uint64_t *)v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Deleted %{public}s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v11 = v2 + 7;
  uint64_t v13 = v2[10];
  uint64_t v12 = v2[11];
  sub_10002ADE8(v11, v13);
  memset(v15, 0, sizeof(v15));
  (*(void (**)(_OWORD *, uint64_t, unint64_t, uint64_t, uint64_t))(v12 + 40))(v15, v4, v6, v13, v12);
  swift_bridgeObjectRelease();
  return sub_10002BDA0((uint64_t)v15, (uint64_t *)&unk_100095B90);
}

void sub_10004E0A4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v69 = type metadata accessor for _SegmentInterval();
  uint64_t v4 = *(void *)(v69 - 8);
  __chkstk_darwin(v69, v5);
  uint64_t v7 = (char *)v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000222D4(&qword_100095CA8);
  __chkstk_darwin(v8 - 8, v9);
  unint64_t v11 = (void *)((char *)v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v70 = sub_1000222D4(&qword_100095CB0);
  uint64_t v12 = *(void *)(v70 - 8);
  uint64_t v14 = __chkstk_darwin(v70, v13);
  id v64 = (char *)v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v16);
  uint64_t v68 = (void *)((char *)v58 - v17);
  id v18 = [a1 zoneName];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v21 = v20;

  if (qword_1000950C8 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v23 = sub_100022718(v22, (uint64_t)qword_100097490);
  swift_bridgeObjectRetain_n();
  uint64_t v66 = v23;
  os_log_type_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  id v65 = v7;
  uint64_t v63 = a1;
  if (v26)
  {
    uint64_t v62 = v2;
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v67 = v4;
    *(void *)&v71[0] = v28;
    *(_DWORD *)uint64_t v27 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v72 = sub_100035724(v19, v21, (uint64_t *)v71);
    uint64_t v2 = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Zone was deleted: %{public}s", v27, 0xCu);
    swift_arrayDestroy();
    uint64_t v4 = v67;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_10003D030(v19, v21, v11);
  uint64_t v29 = v70;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v70) == 1)
  {
    sub_10002BDA0((uint64_t)v11, &qword_100095CA8);
    swift_bridgeObjectRetain();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(void *)&v71[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v72 = sub_100035724(v19, v21, (uint64_t *)v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Failed to get zone components from %{public}s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    v58[0] = v19;
    v58[1] = v21;
    uint64_t v33 = *(int *)(v29 + 48);
    uint64_t v34 = v68;
    uint64_t v35 = v69;
    id v36 = (char *)v68 + v33;
    uint64_t v37 = (char *)v11 + v33;
    uint64_t v38 = *v11;
    uint64_t v39 = v11[1];
    void *v68 = v38;
    v34[1] = v39;
    uint64_t v40 = v38;
    uint64_t v61 = v38;
    uint64_t v41 = v4;
    uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v59 = v36;
    os_log_type_t v60 = v42;
    unint64_t v43 = v36;
    ((void (*)(char *, char *))v42)(v36, v37);
    uint64_t v44 = *(int *)(v29 + 48);
    uint64_t v45 = v64;
    id v46 = &v64[v44];
    *(void *)id v64 = v40;
    *((void *)v45 + 1) = v39;
    uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
    v47(&v45[v44], v43, v35);
    id v48 = *(void **)(v41 + 8);
    swift_bridgeObjectRetain();
    uint64_t v67 = v41 + 8;
    uint64_t v62 = v48;
    ((void (*)(char *, uint64_t))v48)(v46, v35);
    unint64_t v49 = &v45[*(int *)(v70 + 48)];
    v47(v49, v59, v35);
    id v50 = v65;
    v60(v65, v49, v35);
    DeviceActivityDataStore.deleteRemoteData(deviceIdentifier:segmentInterval:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v51 = v63;
    uint64_t v52 = v2[10];
    uint64_t v53 = v2[11];
    sub_10002ADE8(v2 + 7, v52);
    memset(v71, 0, 32);
    id v54 = [v51 zoneName];
    uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v57 = v56;

    (*(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 40))(v71, v55, v57, v52, v53);
    swift_bridgeObjectRelease();
    sub_10002BDA0((uint64_t)v71, (uint64_t *)&unk_100095B90);
    ((void (*)(char *, uint64_t))v62)(v50, v69);
    sub_10002BDA0((uint64_t)v68, &qword_100095CB0);
  }
}

void sub_10004E914()
{
  uint64_t v0 = (void *)CKSyncEngine.database.getter();
  id v1 = [v0 scope];

  if (qword_1000950C8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100022718(v2, (uint64_t)qword_100097490);
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    type metadata accessor for Scope(0);
    uint64_t v6 = String.init<A>(describing:)();
    uint64_t v9 = sub_100035724(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Sync engine did fetch changes for %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (v1 == (id)2)
  {
    id v8 = [self defaultCenter];
    if (qword_1000950F0 != -1) {
      swift_once();
    }
    objc_msgSend(v8, "postNotificationName:object:", qword_1000974E0, 0, v9, v10);
  }
}

uint64_t sub_10004EB3C(uint64_t a1, uint64_t a2)
{
  v2[4] = a1;
  v2[5] = a2;
  uint64_t v3 = type metadata accessor for CKDatabase.DatabaseChange.Deletion();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  sub_1000222D4(&qword_100095D00);
  v2[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for CKSyncEngine.Event.FetchedDatabaseChanges();
  v2[10] = v4;
  v2[11] = *(void *)(v4 - 8);
  v2[12] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for CKSyncEngine.Event.SentDatabaseChanges();
  v2[13] = v5;
  v2[14] = *(void *)(v5 - 8);
  v2[15] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for CKSyncEngine.Event.AccountChange();
  v2[16] = v6;
  v2[17] = *(void *)(v6 - 8);
  v2[18] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for CKSyncEngine.State.Serialization();
  v2[19] = v7;
  v2[20] = *(void *)(v7 - 8);
  v2[21] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for CKSyncEngine.Event.StateUpdate();
  v2[22] = v8;
  v2[23] = *(void *)(v8 - 8);
  v2[24] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for CKDatabase.RecordZoneChange.Deletion();
  v2[25] = v9;
  v2[26] = *(void *)(v9 - 8);
  v2[27] = swift_task_alloc();
  sub_1000222D4(&qword_100095D08);
  v2[28] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for CKDatabase.RecordZoneChange.Modification();
  v2[29] = v10;
  v2[30] = *(void *)(v10 - 8);
  v2[31] = swift_task_alloc();
  sub_1000222D4(&qword_100095D10);
  v2[32] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for CKSyncEngine.Event.FetchedRecordZoneChanges();
  v2[33] = v11;
  v2[34] = *(void *)(v11 - 8);
  v2[35] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave();
  v2[36] = v12;
  v2[37] = *(void *)(v12 - 8);
  v2[38] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for CKSyncEngine.Event.SentRecordZoneChanges();
  v2[39] = v13;
  v2[40] = *(void *)(v13 - 8);
  v2[41] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for CKSyncEngine.Event();
  v2[42] = v14;
  v2[43] = *(void *)(v14 - 8);
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  return _swift_task_switch(sub_10004F090);
}

uint64_t sub_10004F090()
{
  long long v207 = v0;
  unint64_t v1 = (unint64_t)v0;
  uint64_t v2 = v0[45];
  uint64_t v3 = v0[42];
  uint64_t v4 = v0[43];
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v5(v2, v0[4], v3);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 88))(v2, v3);
  if (v6 != enum case for CKSyncEngine.Event.stateUpdate(_:))
  {
    if (v6 == enum case for CKSyncEngine.Event.accountChange(_:))
    {
      uint64_t v19 = v0[45];
      uint64_t v21 = v0[17];
      uint64_t v20 = *(void *)(v1 + 144);
      uint64_t v22 = *(void *)(v1 + 128);
      (*(void (**)(void, void))(*(void *)(v1 + 344) + 96))(*(void *)(v1 + 360), *(void *)(v1 + 336));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v20, v19, v22);
      sub_10004D380(v20);
LABEL_6:
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
      goto LABEL_37;
    }
    uint64_t v205 = v0;
    if (v6 == enum case for CKSyncEngine.Event.fetchedDatabaseChanges(_:))
    {
      uint64_t v23 = v0[45];
      uint64_t v25 = v0[11];
      uint64_t v24 = *(void *)(v1 + 96);
      uint64_t v26 = *(void *)(v1 + 80);
      (*(void (**)(void, void))(*(void *)(v1 + 344) + 96))(*(void *)(v1 + 360), *(void *)(v1 + 336));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v24, v23, v26);
      uint64_t v27 = CKSyncEngine.Event.FetchedDatabaseChanges.deletions.getter();
      uint64_t v28 = *(void *)(v27 + 16);
      uint64_t v29 = *(void *)(v1 + 56);
      if (v28)
      {
        os_log_type_t v31 = *(void (**)(uint64_t, unint64_t, uint64_t))(v29 + 16);
        uint64_t v30 = v29 + 16;
        unint64_t v32 = v27 + ((*(unsigned __int8 *)(v30 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 64));
        uint64_t v33 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 40);
        uint64_t v200 = v31;
        uint64_t v194 = *(void *)(v30 + 56);
        while (1)
        {
          uint64_t v34 = *(void *)(v1 + 72);
          uint64_t v35 = *(void *)(v1 + 48);
          v200(v34, v32, v35);
          id v36 = *v33;
          (*v33)(v34, 0, 1, v35);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v34, 1, v35) == 1) {
            break;
          }
          (*(void (**)(void, void, void))(v30 + 16))(*(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 48));
          if (qword_1000950E8 != -1) {
            swift_once();
          }
          uint64_t v37 = *(void *)(v1 + 64);
          uint64_t v38 = *(void *)(v1 + 48);
          uint64_t v39 = (void *)CKDatabase.DatabaseChange.Deletion.zoneID.getter();
          sub_10004E0A4(v39);

          unint64_t v1 = (unint64_t)v205;
          (*(void (**)(uint64_t, uint64_t))(v30 - 8))(v37, v38);
          v32 += v194;
          if (!--v28)
          {
            v36(v205[9], 1, 1, v205[6]);
            break;
          }
        }
      }
      else
      {
        (*(void (**)(void, uint64_t, uint64_t, void))(v29 + 56))(*(void *)(v1 + 72), 1, 1, *(void *)(v1 + 48));
      }
      uint64_t v68 = *(void *)(v1 + 88);
      uint64_t v67 = *(void *)(v1 + 96);
      uint64_t v69 = *(void *)(v1 + 80);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
      goto LABEL_37;
    }
    if (v6 == enum case for CKSyncEngine.Event.fetchedRecordZoneChanges(_:))
    {
      uint64_t v40 = v0[45];
      uint64_t v42 = v0[34];
      uint64_t v41 = *(void *)(v1 + 280);
      uint64_t v43 = *(void *)(v1 + 264);
      (*(void (**)(void, void))(*(void *)(v1 + 344) + 96))(*(void *)(v1 + 360), *(void *)(v1 + 336));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v41, v40, v43);
      uint64_t v44 = CKSyncEngine.Event.FetchedRecordZoneChanges.modifications.getter();
      uint64_t v45 = *(void *)(v44 + 16);
      uint64_t v46 = *(void *)(v1 + 240);
      if (v45)
      {
        id v48 = *(void (**)(uint64_t, unint64_t, uint64_t))(v46 + 16);
        uint64_t v47 = v46 + 16;
        unint64_t v49 = v44 + ((*(unsigned __int8 *)(v47 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 64));
        id v50 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 40);
        uint64_t v201 = v48;
        uint64_t v195 = *(void *)(v47 + 56);
        while (1)
        {
          uint64_t v51 = *(void *)(v1 + 256);
          uint64_t v52 = *(void *)(v1 + 232);
          v201(v51, v49, v52);
          uint64_t v53 = *v50;
          (*v50)(v51, 0, 1, v52);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 32))(v51, 1, v52) == 1) {
            break;
          }
          (*(void (**)(void, void, void))(v47 + 16))(*(void *)(v1 + 248), *(void *)(v1 + 256), *(void *)(v1 + 232));
          if (qword_1000950E8 != -1) {
            swift_once();
          }
          uint64_t v54 = *(void *)(v1 + 248);
          uint64_t v55 = *(void *)(v1 + 232);
          uint64_t v56 = (void *)CKDatabase.RecordZoneChange.Modification.record.getter();
          sub_10004B688(v56);

          unint64_t v1 = (unint64_t)v205;
          (*(void (**)(uint64_t, uint64_t))(v47 - 8))(v54, v55);
          v49 += v195;
          if (!--v45)
          {
            v53(v205[32], 1, 1, v205[29]);
            break;
          }
        }
      }
      else
      {
        (*(void (**)(void, uint64_t, uint64_t, void))(v46 + 56))(*(void *)(v1 + 256), 1, 1, *(void *)(v1 + 232));
      }
      swift_bridgeObjectRelease();
      uint64_t v81 = CKSyncEngine.Event.FetchedRecordZoneChanges.deletions.getter();
      uint64_t v82 = *(void *)(v81 + 16);
      if (v82)
      {
        uint64_t v83 = v81;
        uint64_t v84 = *(void *)(v1 + 208);
        unint64_t v85 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
        uint64_t v86 = *(void *)(v84 + 72);
        uint64_t v188 = *(void (**)(void, unint64_t, void))(v84 + 16);
        v188(*(void *)(v1 + 224), v81 + v85, *(void *)(v1 + 200));
        id v88 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v84 + 56);
        v84 += 56;
        id v87 = v88;
        uint64_t v192 = (void (**)(void, void, void))(v84 - 24);
        long long v196 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 - 8);
        uint64_t v191 = (void (**)(uint64_t, uint64_t))(v84 - 48);
        uint64_t v189 = v86;
        unint64_t v89 = v83 + v86 + v85;
        uint64_t v90 = 1;
        uint64_t v185 = v82;
        uint64_t v186 = v88;
        while (1)
        {
          uint64_t v91 = *(void *)(v1 + 224);
          uint64_t v92 = *(void *)(v1 + 200);
          v87(v91, 0, 1, v92);
          if ((*v196)(v91, 1, v92) == 1) {
            break;
          }
          (*v192)(*(void *)(v1 + 216), *(void *)(v1 + 224), *(void *)(v1 + 200));
          if (qword_1000950E8 != -1) {
            swift_once();
          }
          char v93 = (void *)CKDatabase.RecordZoneChange.Deletion.recordID.getter();
          CKDatabase.RecordZoneChange.Deletion.recordType.getter();
          if (qword_1000950C8 != -1) {
            swift_once();
          }
          uint64_t v94 = type metadata accessor for Logger();
          sub_100022718(v94, (uint64_t)qword_100097490);
          id v95 = v93;
          id v96 = Logger.logObject.getter();
          os_log_type_t v97 = static os_log_type_t.debug.getter();
          BOOL v98 = os_log_type_enabled(v96, v97);
          uint64_t v99 = *(void *)(v1 + 216);
          uint64_t v198 = *(void *)(v1 + 200);
          if (v98)
          {
            uint64_t v100 = swift_slowAlloc();
            uint64_t v206 = swift_slowAlloc();
            *(_DWORD *)uint64_t v100 = 136446210;
            id v101 = v95;
            id v102 = [v101 description];
            uint64_t v187 = v99;
            uint64_t v103 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v105 = v104;

            unint64_t v1 = (unint64_t)v205;
            *(void *)(v100 + 4) = sub_100035724(v103, v105, &v206);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v96, v97, "Record was deleted: %{public}s", (uint8_t *)v100, 0xCu);
            swift_arrayDestroy();
            uint64_t v82 = v185;
            swift_slowDealloc();
            id v87 = v186;
            swift_slowDealloc();

            swift_bridgeObjectRelease();
            (*v191)(v187, v198);
          }
          else
          {
            swift_bridgeObjectRelease();

            (*v191)(v99, v198);
          }
          if (v82 == v90)
          {
            v87(*(void *)(v1 + 224), 1, 1, *(void *)(v1 + 200));
            break;
          }
          v188(*(void *)(v1 + 224), v89, *(void *)(v1 + 200));
          v89 += v189;
          if (__OFADD__(v90++, 1))
          {
            __break(1u);
            goto LABEL_80;
          }
        }
      }
      else
      {
        (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v1 + 208) + 56))(*(void *)(v1 + 224), 1, 1, *(void *)(v1 + 200));
      }
      uint64_t v108 = *(void *)(v1 + 272);
      uint64_t v107 = *(void *)(v1 + 280);
      uint64_t v109 = *(void *)(v1 + 264);
      swift_bridgeObjectRelease();
      goto LABEL_70;
    }
    if (v6 != enum case for CKSyncEngine.Event.sentDatabaseChanges(_:))
    {
      id v190 = v0 + 3;
      if (v6 != enum case for CKSyncEngine.Event.sentRecordZoneChanges(_:))
      {
        if (v6 != enum case for CKSyncEngine.Event.didFetchChanges(_:))
        {
          if (qword_1000950C8 != -1) {
            swift_once();
          }
          uint64_t v110 = v0[44];
          uint64_t v111 = v0[42];
          uint64_t v112 = v0[4];
          uint64_t v113 = type metadata accessor for Logger();
          sub_100022718(v113, (uint64_t)qword_100097490);
          v5(v110, v112, v111);
          uint64_t v114 = Logger.logObject.getter();
          os_log_type_t v115 = static os_log_type_t.debug.getter();
          BOOL v116 = os_log_type_enabled(v114, v115);
          uint64_t v118 = v0[43];
          uint64_t v117 = *(void *)(v1 + 352);
          uint64_t v119 = *(void *)(v1 + 336);
          if (v116)
          {
            id v120 = (uint8_t *)swift_slowAlloc();
            uint64_t v206 = swift_slowAlloc();
            unint64_t v121 = v1;
            *(_DWORD *)id v120 = 136446210;
            sub_100046944((unint64_t *)&unk_100095D18, 255, (void (*)(uint64_t))&type metadata accessor for CKSyncEngine.Event);
            uint64_t v122 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v1 + 16) = sub_100035724(v122, v123, &v206);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            uint64_t v124 = *(void (**)(uint64_t, uint64_t))(v118 + 8);
            v124(v117, v119);
            _os_log_impl((void *)&_mh_execute_header, v114, v115, "Received event: %{public}s", v120, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            uint64_t v124 = *(void (**)(uint64_t, uint64_t))(v118 + 8);
            unint64_t v121 = v1;
            v124(v117, v119);
          }

          v124(*(void *)(v121 + 360), *(void *)(v121 + 336));
          unint64_t v1 = v121;
          goto LABEL_37;
        }
        if (qword_1000950E8 == -1) {
          goto LABEL_73;
        }
        goto LABEL_157;
      }
      uint64_t v72 = v0[45];
      uint64_t v74 = v0[40];
      uint64_t v73 = *(void *)(v1 + 328);
      uint64_t v75 = *(void *)(v1 + 312);
      (*(void (**)(void, void))(*(void *)(v1 + 344) + 96))(*(void *)(v1 + 360), *(void *)(v1 + 336));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 32))(v73, v72, v75);
      unint64_t v76 = CKSyncEngine.Event.SentRecordZoneChanges.savedRecords.getter();
      uint64_t v63 = v76;
      if (!(v76 >> 62))
      {
        uint64_t v77 = *(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v77) {
          goto LABEL_100;
        }
        goto LABEL_43;
      }
LABEL_99:
      uint64_t v77 = _CocoaArrayWrapper.endIndex.getter();
      if (!v77) {
        goto LABEL_100;
      }
LABEL_43:
      if (v77 < 1)
      {
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        swift_once();
LABEL_73:
        uint64_t v107 = *(void *)(v1 + 360);
        uint64_t v109 = *(void *)(v1 + 336);
        uint64_t v108 = *(void *)(v1 + 344);
        sub_10004E914();
LABEL_70:
        (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v107, v109);
        goto LABEL_37;
      }
      for (uint64_t i = 0; i != v77; ++i)
      {
        if ((v63 & 0xC000000000000001) != 0) {
          id v79 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v79 = *(id *)(v63 + 8 * i + 32);
        }
        uint64_t v80 = v79;
        if (qword_1000950E8 != -1) {
          swift_once();
        }
        sub_100049E3C(v80);
      }
LABEL_100:
      swift_bridgeObjectRelease();
      uint64_t v130 = CKSyncEngine.Event.SentRecordZoneChanges.failedRecordSaves.getter();
      uint64_t v131 = *(void *)(v130 + 16);
      if (v131)
      {
        uint64_t v132 = *(void *)(v1 + 296);
        uint64_t v134 = *(void (**)(void, unint64_t, void))(v132 + 16);
        uint64_t v133 = v132 + 16;
        id v202 = v134;
        unint64_t v135 = v130 + ((*(unsigned __int8 *)(v133 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v133 + 64));
        uint64_t v199 = *(void *)(v133 + 56);
        do
        {
          v202(*(void *)(v1 + 304), v135, *(void *)(v1 + 288));
          if (qword_1000950E8 != -1) {
            swift_once();
          }
          uint64_t v136 = *(void *)(v1 + 304);
          uint64_t v137 = *(void *)(v1 + 288);
          uint64_t v138 = (void *)CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave.record.getter();
          uint64_t v139 = (void *)CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave.error.getter();
          unint64_t v1 = (unint64_t)v205;
          sub_10004AA60(v138, (uint64_t)v139);

          (*(void (**)(uint64_t, uint64_t))(v133 - 8))(v136, v137);
          v135 += v199;
          --v131;
        }
        while (v131);
      }
      swift_bridgeObjectRelease();
      unint64_t v140 = CKSyncEngine.Event.SentRecordZoneChanges.deletedRecordIDs.getter();
      unint64_t v141 = v140;
      if (v140 >> 62)
      {
        uint64_t v142 = _CocoaArrayWrapper.endIndex.getter();
        if (!v142) {
          goto LABEL_122;
        }
      }
      else
      {
        uint64_t v142 = *(void *)((v140 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v142) {
          goto LABEL_122;
        }
      }
      uint64_t v143 = v142 - 1;
      if (v142 >= 1)
      {
        uint64_t v144 = 0;
        unint64_t v145 = v141 & 0xC000000000000001;
        p_prots = &OBJC_PROTOCOL___USUsageTrackingAgentPrivate.prots;
        if ((v141 & 0xC000000000000001) == 0) {
          goto LABEL_110;
        }
LABEL_109:
        for (id j = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(); ; id j = *(id *)(v141 + 8 * v144 + 32))
        {
          uint64_t v148 = j;
          if (p_prots[29] != (__objc2_prot_list *)-1) {
            swift_once();
          }
          if (qword_1000950C8 != -1) {
            swift_once();
          }
          uint64_t v149 = type metadata accessor for Logger();
          sub_100022718(v149, (uint64_t)qword_100097490);
          id v150 = v148;
          uint64_t v151 = Logger.logObject.getter();
          os_log_type_t v152 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v151, v152))
          {
            uint64_t v153 = swift_slowAlloc();
            uint64_t v206 = swift_slowAlloc();
            *(_DWORD *)uint64_t v153 = 136446210;
            id v154 = v150;
            id v155 = [v154 description];
            unint64_t v156 = v145;
            uint64_t v157 = v143;
            unint64_t v158 = v141;
            uint64_t v159 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v203 = v144;
            unint64_t v161 = v160;

            uint64_t v162 = v159;
            unint64_t v141 = v158;
            uint64_t v143 = v157;
            unint64_t v145 = v156;
            *(void *)(v153 + 4) = sub_100035724(v162, v161, &v206);

            uint64_t v144 = v203;
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v151, v152, "Deleted record: %{public}s", (uint8_t *)v153, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            p_prots = (__objc2_prot_list **)(&OBJC_PROTOCOL___USUsageTrackingAgentPrivate + 16);
            swift_slowDealloc();
          }
          else
          {
          }
          if (v143 == v144) {
            break;
          }
          ++v144;
          if (v145) {
            goto LABEL_109;
          }
LABEL_110:
          ;
        }
LABEL_122:
        swift_bridgeObjectRelease();
        uint64_t v163 = CKSyncEngine.Event.SentRecordZoneChanges.failedRecordDeletes.getter();
        int64_t v164 = 0;
        uint64_t v165 = *(void *)(v163 + 64);
        uint64_t v193 = v163 + 64;
        uint64_t v166 = -1;
        uint64_t v167 = -1 << *(unsigned char *)(v163 + 32);
        if (-v167 < 64) {
          uint64_t v166 = ~(-1 << -(char)v167);
        }
        unint64_t v1 = v166 & v165;
        int64_t v197 = (unint64_t)(63 - v167) >> 6;
        if ((v166 & v165) != 0) {
          goto LABEL_127;
        }
LABEL_128:
        int64_t v170 = v164 + 1;
        if (__OFADD__(v164, 1))
        {
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        unint64_t v1 = (unint64_t)v205;
        if (v170 < v197)
        {
          unint64_t v171 = *(void *)(v193 + 8 * v170);
          ++v164;
          if (v171) {
            goto LABEL_141;
          }
          int64_t v164 = v170 + 1;
          if (v170 + 1 >= v197) {
            goto LABEL_149;
          }
          unint64_t v171 = *(void *)(v193 + 8 * v164);
          if (v171) {
            goto LABEL_141;
          }
          int64_t v164 = v170 + 2;
          if (v170 + 2 >= v197) {
            goto LABEL_149;
          }
          unint64_t v171 = *(void *)(v193 + 8 * v164);
          if (v171)
          {
LABEL_141:
            unint64_t v1 = (v171 - 1) & v171;
            for (unint64_t k = __clz(__rbit64(v171)) + (v164 << 6); ; unint64_t k = v168 | (v164 << 6))
            {
              uint64_t v173 = 8 * k;
              id v174 = *(void **)(*(void *)(v163 + 56) + v173);
              uint64_t v175 = qword_1000950E8;
              id v204 = *(id *)(*(void *)(v163 + 48) + v173);
              id v176 = v174;
              if (v175 != -1) {
                swift_once();
              }
              uint64_t v177 = qword_1000950C8;
              id v178 = v176;
              if (v177 != -1) {
                swift_once();
              }
              uint64_t v179 = type metadata accessor for Logger();
              sub_100022718(v179, (uint64_t)qword_100097490);
              swift_errorRetain();
              swift_errorRetain();
              uint64_t v180 = Logger.logObject.getter();
              os_log_type_t v181 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v180, v181))
              {
                uint64_t v182 = swift_slowAlloc();
                uint64_t v206 = swift_slowAlloc();
                *(_DWORD *)uint64_t v182 = 136446210;
                *id v190 = v178;
                swift_errorRetain();
                sub_1000222D4(&qword_100095330);
                uint64_t v183 = String.init<A>(describing:)();
                *(void *)(v182 + 4) = sub_100035724(v183, v184, &v206);

                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v180, v181, "Failed to delete record: %{public}s", (uint8_t *)v182, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                if (!v1) {
                  goto LABEL_128;
                }
              }
              else
              {

                if (!v1) {
                  goto LABEL_128;
                }
              }
LABEL_127:
              unint64_t v168 = __clz(__rbit64(v1));
              v1 &= v1 - 1;
            }
          }
          int64_t v172 = v170 + 3;
          if (v172 < v197)
          {
            unint64_t v171 = *(void *)(v193 + 8 * v172);
            if (v171)
            {
              int64_t v164 = v172;
              goto LABEL_141;
            }
            while (1)
            {
              int64_t v164 = v172 + 1;
              if (__OFADD__(v172, 1)) {
                goto LABEL_153;
              }
              if (v164 >= v197) {
                break;
              }
              unint64_t v171 = *(void *)(v193 + 8 * v164);
              ++v172;
              if (v171) {
                goto LABEL_141;
              }
            }
          }
        }
LABEL_149:
        swift_release();
        if (qword_1000950E8 == -1)
        {
LABEL_150:
          uint64_t v21 = *(void *)(v1 + 320);
          uint64_t v20 = *(void *)(v1 + 328);
          uint64_t v22 = *(void *)(v1 + 312);
LABEL_151:
          sub_10003BEE8();
          goto LABEL_6;
        }
LABEL_154:
        swift_once();
        goto LABEL_150;
      }
      goto LABEL_156;
    }
    uint64_t v57 = v0[45];
    uint64_t v59 = v0[14];
    uint64_t v58 = *(void *)(v1 + 120);
    uint64_t v60 = *(void *)(v1 + 104);
    (*(void (**)(void, void))(*(void *)(v1 + 344) + 96))(*(void *)(v1 + 360), *(void *)(v1 + 336));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 32))(v58, v57, v60);
    unint64_t v61 = CKSyncEngine.Event.SentDatabaseChanges.savedZones.getter();
    unint64_t v62 = v61;
    if (v61 >> 62)
    {
      uint64_t v63 = _CocoaArrayWrapper.endIndex.getter();
      if (!v63) {
        goto LABEL_82;
      }
    }
    else
    {
      uint64_t v63 = *(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v63) {
        goto LABEL_82;
      }
    }
    if (v63 < 1)
    {
      __break(1u);
LABEL_98:
      __break(1u);
      goto LABEL_99;
    }
    uint64_t v64 = 0;
    unint64_t v1 = (unint64_t)&unk_100097000;
    do
    {
      if ((v62 & 0xC000000000000001) != 0) {
        id v65 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v65 = *(id *)(v62 + 8 * v64 + 32);
      }
      uint64_t v66 = v65;
      if (qword_1000950E8 != -1) {
        swift_once();
      }
      ++v64;
      sub_10004D874(v66);
    }
    while (v63 != v64);
LABEL_82:
    swift_bridgeObjectRelease();
    unint64_t v125 = CKSyncEngine.Event.SentDatabaseChanges.deletedZoneIDs.getter();
    unint64_t v126 = v125;
    if (v125 >> 62)
    {
      uint64_t v63 = _CocoaArrayWrapper.endIndex.getter();
      if (v63)
      {
LABEL_84:
        if (v63 >= 1)
        {
          for (uint64_t m = 0; m != v63; ++m)
          {
            if ((v126 & 0xC000000000000001) != 0) {
              id v128 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v128 = *(id *)(v126 + 8 * m + 32);
            }
            unint64_t v129 = v128;
            if (qword_1000950E8 != -1) {
              swift_once();
            }
            sub_10004DE74(v129);
          }
          goto LABEL_94;
        }
        goto LABEL_98;
      }
    }
    else
    {
      uint64_t v63 = *(void *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v63) {
        goto LABEL_84;
      }
    }
LABEL_94:
    swift_bridgeObjectRelease();
    if (qword_1000950E8 != -1) {
      swift_once();
    }
    unint64_t v1 = (unint64_t)v205;
    uint64_t v21 = v205[14];
    uint64_t v20 = v205[15];
    uint64_t v22 = v205[13];
    goto LABEL_151;
  }
  uint64_t v7 = v0[45];
  uint64_t v9 = v0[23];
  uint64_t v8 = *(void *)(v1 + 192);
  uint64_t v10 = *(void *)(v1 + 176);
  (*(void (**)(void, void))(*(void *)(v1 + 344) + 96))(*(void *)(v1 + 360), *(void *)(v1 + 336));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v8, v7, v10);
  if (qword_1000950E8 != -1) {
LABEL_80:
  }
    swift_once();
  uint64_t v12 = *(void *)(v1 + 184);
  uint64_t v11 = *(void *)(v1 + 192);
  uint64_t v14 = *(void *)(v1 + 168);
  uint64_t v13 = *(void *)(v1 + 176);
  uint64_t v15 = *(void *)(v1 + 152);
  uint64_t v16 = *(void *)(v1 + 160);
  uint64_t v17 = *(void *)(v1 + 40);
  uint64_t v18 = qword_1000974D8;
  CKSyncEngine.Event.StateUpdate.stateSerialization.getter();
  sub_100046A08(v17, v14, v18);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
LABEL_37:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v70 = *(uint64_t (**)(void))(v1 + 8);
  return v70();
}

uint64_t sub_1000507C8()
{
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100050800()
{
  sub_100054C94(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_100050808(uint64_t a1, uint64_t a2)
{
  sub_100050A80(*(void **)a2, *(unsigned char *)(a2 + 8), *(id *)(v2 + 16));
}

uint64_t sub_10005081C()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100050864(uint64_t a1, char a2)
{
  return sub_1000407D8(a1, a2 & 1, *(void *)(v2 + 16), *(void **)(v2 + 24), *(NSObject **)(v2 + 32));
}

void sub_100050878()
{
  sub_1000435A0(*(void *)(v0 + 16), *(void *)(v0 + 24), &qword_100095D48);
}

uint64_t sub_1000508A4()
{
  swift_release();
  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000508EC(uint64_t a1, uint64_t a2)
{
  sub_100052E40(*(void **)a2, *(unsigned char *)(a2 + 8), *(NSObject **)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t sub_100050900(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t *))(v3 + 16);
  uint64_t v6 = a2;
  char v7 = a3 & 1;
  return v4(a1, &v6);
}

uint64_t sub_100050944()
{
  swift_release();
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100050984()
{
  sub_1000428E0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10005098C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100050A80(void *a1, char a2, id a3)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100022718(v4, (uint64_t)qword_100097490);
    swift_errorRetain();
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      unint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)unint64_t v6 = 136446210;
      swift_errorRetain();
      sub_1000222D4(&qword_100095330);
      uint64_t v7 = String.init<A>(describing:)();
      sub_100035724(v7, v8, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000478F8(a1, 1);
      sub_1000478F8(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, "Failed to fetch participant: %{public}s", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1000478F8(a1, 1);
    }
    else
    {
      sub_1000478F8(a1, 1);
      sub_1000478F8(a1, 1);
      swift_errorRelease();
    }
  }
  else
  {
    [a3 addParticipant:a1];
  }
}

void sub_100050CE4(uint64_t a1, NSObject *a2)
{
  if (qword_1000950C8 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100022718(v3, (uint64_t)qword_100097490);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)unint64_t v6 = 136446210;
    swift_errorRetain();
    sub_1000222D4(&qword_100095330);
    uint64_t v7 = String.init<A>(describing:)();
    sub_100035724(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to save share: %{public}s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  id v9 = [self defaultCenter];
  if (qword_100095108 != -1) {
    swift_once();
  }
  uint64_t v10 = 0x40AC200000000000;
  char v11 = 0;
  [v9 postNotificationName:qword_1000974F0 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

  swift_unknownObjectRelease();
  dispatch_group_leave(a2);
}

uint64_t sub_100050F64(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!((unint64_t)*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v20 < v2) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v21 + v5;
    if (!__OFADD__(v21, v5)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if ((unint64_t)*v3 >> 62) {
    goto LABEL_32;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t *v3 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      uint64_t *v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      uint64_t v11 = *v3 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v12 = v11 + 32;
  uint64_t v13 = (char *)(v11 + 32 + 8 * v4);
  sub_100023228(0, (unint64_t *)&qword_100095510);
  swift_arrayDestroy();
  if (v5)
  {
    if ((unint64_t)*v3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v15 = v22 - v2;
      if (!__OFSUB__(v22, v2))
      {
LABEL_17:
        if (v15 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v16 = (char *)(v12 + 8 * v2);
        if (v4 != v2 || v13 >= &v16[8 * v15]) {
          memmove(v13, v16, 8 * v15);
        }
        if (!((unint64_t)*v3 >> 62))
        {
          uint64_t v17 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
          uint64_t v18 = v17 + v5;
          if (!__OFADD__(v17, v5))
          {
LABEL_23:
            *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) = v18;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v18 = v23 + v5;
        if (!__OFADD__(v23, v5)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v14 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v15 = v14 - v2;
      if (!__OFSUB__(v14, v2)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:
  return specialized Array._endMutation()();
}

uint64_t sub_100051280(void *a1, id a2)
{
  id v4 = [a2 recordID];
  id v5 = [v4 zoneID];

  id v6 = [v5 zoneName];
  uint64_t v157 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;

  id v161 = a2;
  id v9 = [a2 participants];
  sub_100023228(0, (unint64_t *)&qword_100095510);
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v173 = v10;
  id v153 = a1;
  id v11 = [a1 participants];
  unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v12 >> 62) {
    goto LABEL_240;
  }
  uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  uint64_t v14 = &selRef_validateBudget_error_;
  unint64_t v166 = v8;
  if (!v13)
  {
    swift_bridgeObjectRelease();
    char v154 = 0;
    goto LABEL_194;
  }
  char v154 = 0;
  unint64_t v15 = 0;
  unint64_t v16 = v12 & 0xC000000000000001;
  unint64_t v155 = v12 + 32;
  uint64_t v156 = v12 & 0xFFFFFFFFFFFFFF8;
  unint64_t v159 = v12;
  uint64_t v160 = v13;
  unint64_t v158 = v12 & 0xC000000000000001;
  do
  {
    while (1)
    {
      while (1)
      {
LABEL_6:
        if (v16)
        {
          id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          BOOL v18 = __OFADD__(v15++, 1);
          if (v18) {
            goto LABEL_228;
          }
        }
        else
        {
          if (v15 >= *(void *)(v156 + 16)) {
            goto LABEL_237;
          }
          id v17 = *(id *)(v155 + 8 * v15);
          BOOL v18 = __OFADD__(v15++, 1);
          if (v18)
          {
LABEL_228:
            __break(1u);
LABEL_229:
            __break(1u);
LABEL_230:
            __break(1u);
LABEL_231:
            __break(1u);
LABEL_232:
            __break(1u);
LABEL_233:
            __break(1u);
LABEL_234:
            __break(1u);
LABEL_235:
            __break(1u);
LABEL_236:
            __break(1u);
LABEL_237:
            __break(1u);
LABEL_238:
            __break(1u);
            goto LABEL_239;
          }
        }
        uint64_t v19 = v17;
        if ([v17 v14[56]] != (id)1) {
          break;
        }

        if (v15 == v13) {
          goto LABEL_192;
        }
      }
      int64_t v164 = v19;
      id v20 = [v19 userIdentity];
      id v21 = [v20 lookupInfo];

      if (v21) {
        break;
      }
LABEL_161:
      unint64_t v112 = v15;
      if (qword_1000950C8 != -1) {
        swift_once();
      }
      uint64_t v113 = type metadata accessor for Logger();
      sub_100022718(v113, (uint64_t)qword_100097490);
      swift_bridgeObjectRetain_n();
      id v114 = v19;
      os_log_type_t v115 = Logger.logObject.getter();
      os_log_type_t v116 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v115, v116))
      {
        uint64_t v117 = swift_slowAlloc();
        uint64_t v172 = swift_slowAlloc();
        *(_DWORD *)uint64_t v117 = 136446466;
        id v118 = v114;
        uint64_t v119 = String.init<A>(describing:)();
        *(void *)(v117 + 4) = sub_100035724(v119, v120, &v172);

        unint64_t v8 = v166;
        uint64_t v14 = &selRef_validateBudget_error_;
        swift_bridgeObjectRelease();
        *(_WORD *)(v117 + 12) = 2082;
        swift_bridgeObjectRetain();
        *(void *)(v117 + 14) = sub_100035724(v157, v166, &v172);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v115, v116, "Removing %{public}s from %{public}s", (uint8_t *)v117, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      unint64_t v16 = v158;
      unint64_t v12 = v159;
      [v153 removeParticipant:v114];

      char v154 = 1;
      uint64_t v13 = v160;
      unint64_t v15 = v112;
      if (v112 == v160) {
        goto LABEL_193;
      }
    }
    id v22 = [v21 emailAddress];
    if (!v22)
    {
      id v22 = [v21 phoneNumber];
      if (!v22)
      {

        goto LABEL_161;
      }
    }
    uint64_t v168 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v170 = v23;

    id v24 = [v161 participants];
    unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v162 = v21;
    unint64_t v163 = v15;
    if (v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      if (!v25)
      {
LABEL_177:
        swift_bridgeObjectRelease_n();
        if (qword_1000950C8 != -1) {
          swift_once();
        }
        uint64_t v126 = type metadata accessor for Logger();
        sub_100022718(v126, (uint64_t)qword_100097490);
        unint64_t v8 = v166;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        uint64_t v127 = Logger.logObject.getter();
        os_log_type_t v128 = static os_log_type_t.default.getter();
        uint64_t v14 = &selRef_validateBudget_error_;
        if (os_log_type_enabled(v127, v128))
        {
          uint64_t v129 = swift_slowAlloc();
          uint64_t v172 = swift_slowAlloc();
          *(_DWORD *)uint64_t v129 = 136446466;
          swift_bridgeObjectRetain();
          *(void *)(v129 + 4) = sub_100035724(v168, v170, &v172);
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v129 + 12) = 2082;
          swift_bridgeObjectRetain();
          *(void *)(v129 + 14) = sub_100035724(v157, v166, &v172);
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v127, v128, "Removing %{public}s from %{public}s", (uint8_t *)v129, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        unint64_t v16 = v158;
        unint64_t v12 = v159;
        unint64_t v125 = v164;
        [v153 removeParticipant:v164];
        goto LABEL_183;
      }
    }
    else
    {
      uint64_t v25 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v25) {
        goto LABEL_177;
      }
    }
    unint64_t v8 = 4;
    while (1)
    {
      if ((v12 & 0xC000000000000001) != 0) {
        id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v27 = *(id *)(v12 + 8 * v8);
      }
      id v28 = v27;
      unint64_t v29 = v8 - 3;
      if (__OFADD__(v8 - 4, 1))
      {
        __break(1u);
LABEL_223:
        __break(1u);
LABEL_224:
        __break(1u);
LABEL_225:
        __break(1u);
LABEL_226:
        __break(1u);
LABEL_227:
        __break(1u);
        goto LABEL_228;
      }
      id v30 = [v27 userIdentity];
      id v26 = [v30 lookupInfo];

      if (!v26)
      {
        id v26 = v28;
        goto LABEL_20;
      }
      uint64_t v167 = v28;
      id v31 = [v26 emailAddress];
      if (v31)
      {
        unint64_t v32 = v31;
        uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v35 = v34;

        if (v168 == v33 && v170 == v35)
        {
          swift_bridgeObjectRelease_n();

          swift_bridgeObjectRelease();
          goto LABEL_44;
        }
        char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v37)
        {
          swift_bridgeObjectRelease_n();

          goto LABEL_44;
        }
      }
      id v38 = [v26 phoneNumber];
      if (!v38)
      {

        goto LABEL_20;
      }
      uint64_t v39 = v38;
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v42 = v41;

      if (v168 == v40 && v170 == v42) {
        break;
      }
      char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();

      if (v44) {
        goto LABEL_43;
      }
      id v26 = v167;
LABEL_20:

      ++v8;
      if (v29 == v25) {
        goto LABEL_177;
      }
    }
    swift_bridgeObjectRelease();

LABEL_43:
    swift_bridgeObjectRelease_n();
LABEL_44:
    unint64_t v12 = v173;
    if (v173 >> 62)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
      if (!v45) {
        goto LABEL_69;
      }
LABEL_46:
      uint64_t v46 = 0;
      unint64_t v8 = v12 & 0xC000000000000001;
      uint64_t v47 = 5;
      while (2)
      {
        if (v8) {
          id v48 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v48 = *(id *)(v12 + 8 * v46 + 32);
        }
        unint64_t v49 = v48;
        id v50 = [v48 userIdentity];
        id v51 = [v50 lookupInfo];

        if (!v51)
        {
          id v51 = v49;
LABEL_66:

          goto LABEL_67;
        }
        id v52 = [v51 emailAddress];
        if (v52)
        {
          uint64_t v53 = v52;
          uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v56 = v55;

          if (v168 == v54 && v170 == v56)
          {
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease_n();
            goto LABEL_96;
          }
          char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v58)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            goto LABEL_96;
          }
        }
        id v59 = [v51 phoneNumber];
        if (!v59)
        {

          goto LABEL_66;
        }
        uint64_t v60 = v59;
        uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v63 = v62;

        if (v168 != v61 || v170 != v63)
        {
          char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          if (v65) {
            goto LABEL_95;
          }
LABEL_67:
          uint64_t v66 = v46 + 1;
          if (__OFADD__(v46, 1)) {
            goto LABEL_223;
          }
          ++v46;
          ++v47;
          if (v66 == v45) {
            goto LABEL_69;
          }
          continue;
        }
        break;
      }

      swift_bridgeObjectRelease();
LABEL_95:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_96:
      uint64_t v80 = v46 + 1;
      unint64_t v8 = v166;
      if (!__OFADD__(v46, 1))
      {
        unint64_t v12 = v173;
        if (v173 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v81 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v81 = *(void *)((v173 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        while (1)
        {
          if (v80 == v81) {
            goto LABEL_72;
          }
          unint64_t v82 = v47 - 4;
          if ((v12 & 0xC000000000000001) != 0)
          {
            id v83 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if ((v82 & 0x8000000000000000) != 0) {
              goto LABEL_224;
            }
            if (v82 >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_225;
            }
            id v83 = *(id *)(v12 + 8 * v47);
          }
          unint64_t v12 = (unint64_t)v83;
          id v84 = [v83 userIdentity];
          id v85 = [v84 lookupInfo];

          if (!v85) {
            break;
          }
          id v86 = [v85 emailAddress];
          if (!v86) {
            goto LABEL_113;
          }
          id v87 = v86;
          uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v90 = v89;

          if (v168 == v88 && v170 == v90)
          {

            swift_bridgeObjectRelease();
            uint64_t v80 = v47 - 3;
            if (__OFADD__(v82, 1)) {
              goto LABEL_226;
            }
            goto LABEL_146;
          }
          char v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v92)
          {
          }
          else
          {
LABEL_113:
            id v93 = [v85 phoneNumber];
            if (!v93)
            {

LABEL_127:
              if (v82 == v46) {
                goto LABEL_120;
              }
              goto LABEL_128;
            }
            uint64_t v94 = v93;
            uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v97 = v96;

            if (v168 != v95 || v170 != v97)
            {
              char v99 = _stringCompareWithSmolCheck(_:_:expecting:)();

              swift_bridgeObjectRelease();
              if (v99) {
                goto LABEL_145;
              }
              if (v82 == v46)
              {
LABEL_120:
                BOOL v18 = __OFADD__(v46++, 1);
                if (v18) {
                  goto LABEL_229;
                }
LABEL_145:
                uint64_t v80 = v47 - 3;
                if (__OFADD__(v82, 1)) {
                  goto LABEL_226;
                }
                goto LABEL_146;
              }
LABEL_128:
              unint64_t v12 = v173;
              if ((v173 & 0xC000000000000001) != 0)
              {
                uint64_t v102 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                id v103 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else
              {
                if (v46 < 0) {
                  goto LABEL_230;
                }
                unint64_t v100 = *(void *)((v173 & 0xFFFFFFFFFFFFFF8) + 0x10);
                if (v46 >= v100) {
                  goto LABEL_231;
                }
                id v101 = *(id *)(v173 + 8 * v46 + 32);
                if ((v82 & 0x8000000000000000) != 0) {
                  goto LABEL_232;
                }
                if (v82 >= v100) {
                  goto LABEL_233;
                }
                uint64_t v102 = (uint64_t)v101;
                id v103 = *(id *)(v12 + 8 * v47);
              }
              id v104 = v103;
              if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
                || (v12 & 0x8000000000000000) != 0
                || (v12 & 0x4000000000000000) != 0)
              {
                unint64_t v12 = sub_10004698C(v12);
                unint64_t v173 = v12;
              }
              unint64_t v105 = *(void **)((v12 & 0xFFFFFFFFFFFFFF8) + 8 * v46 + 0x20);
              *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 8 * v46 + 0x20) = v104;

              specialized Array._endMutation()();
              unint64_t v12 = v173;
              if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
                || (v12 & 0x8000000000000000) != 0
                || (v12 & 0x4000000000000000) != 0)
              {
                unint64_t v12 = sub_10004698C(v12);
                unint64_t v173 = v12;
              }
              if ((v82 & 0x8000000000000000) != 0) {
                goto LABEL_234;
              }
              uint64_t v106 = v12 & 0xFFFFFFFFFFFFFF8;
              if (v82 >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_235;
              }
              uint64_t v107 = *(void **)(v106 + 8 * v47);
              *(void *)(v106 + 8 * v47) = v102;

              unint64_t v12 = (unint64_t)&v173;
              specialized Array._endMutation()();
              BOOL v18 = __OFADD__(v46++, 1);
              if (v18) {
                goto LABEL_229;
              }
              goto LABEL_145;
            }

            swift_bridgeObjectRelease();
          }

          uint64_t v80 = v47 - 3;
          if (__OFADD__(v82, 1)) {
            goto LABEL_226;
          }
LABEL_146:
          unint64_t v12 = v173;
          if (v173 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v81 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v81 = *(void *)((v173 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          ++v47;
        }
        id v85 = (id)v12;
        goto LABEL_127;
      }
LABEL_239:
      __break(1u);
LABEL_240:
      swift_bridgeObjectRetain();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      goto LABEL_3;
    }
    uint64_t v45 = *(void *)((v173 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v45) {
      goto LABEL_46;
    }
LABEL_69:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v12 = v173;
    if (v173 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v46 = *(void *)((v173 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    unint64_t v8 = v166;
LABEL_72:
    if (v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v67 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v67 < v46) {
      goto LABEL_238;
    }
    sub_100050F64(v46, v67);
    id v68 = [v164 acceptanceStatus];
    if (v68 == (id)2)
    {
      if (qword_1000950C8 != -1) {
        swift_once();
      }
      uint64_t v76 = type metadata accessor for Logger();
      sub_100022718(v76, (uint64_t)qword_100097490);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v77 = Logger.logObject.getter();
      os_log_type_t v78 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v77, v78))
      {
        uint64_t v79 = swift_slowAlloc();
        uint64_t v172 = swift_slowAlloc();
        *(_DWORD *)uint64_t v79 = 136446466;
        swift_bridgeObjectRetain();
        sub_100035724(v168, v170, &v172);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v79 + 12) = 2082;
        swift_bridgeObjectRetain();
        sub_100035724(v157, v8, &v172);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v77, v78, "%{public}s is already sharing %{public}s", (uint8_t *)v79, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }

LABEL_90:
      uint64_t v14 = &selRef_validateBudget_error_;
      unint64_t v12 = v159;
      uint64_t v13 = v160;
      unint64_t v15 = v163;
      unint64_t v16 = v158;
      if (v163 == v160)
      {
LABEL_192:
        swift_bridgeObjectRelease();
        goto LABEL_194;
      }
      goto LABEL_6;
    }
    if ((unint64_t)v68 < 2)
    {
      if (qword_1000950C8 != -1) {
        swift_once();
      }
      uint64_t v108 = type metadata accessor for Logger();
      sub_100022718(v108, (uint64_t)qword_100097490);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v109 = Logger.logObject.getter();
      os_log_type_t v110 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v109, v110))
      {
        uint64_t v111 = swift_slowAlloc();
        uint64_t v172 = swift_slowAlloc();
        *(_DWORD *)uint64_t v111 = 136446466;
        swift_bridgeObjectRetain();
        sub_100035724(v168, v170, &v172);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v111 + 12) = 2082;
        swift_bridgeObjectRetain();
        sub_100035724(v157, v8, &v172);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v109, v110, "Re-inviting %{public}s to %{public}s", (uint8_t *)v111, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      uint64_t v14 = &selRef_validateBudget_error_;
      unint64_t v16 = v158;
      unint64_t v12 = v159;
      [v153 removeParticipant:v164];
      [v153 addParticipant:v167];
    }
    else
    {
      if (v68 != (id)3)
      {
        swift_bridgeObjectRelease();
        if (qword_1000950C8 != -1) {
          swift_once();
        }
        uint64_t v69 = type metadata accessor for Logger();
        sub_100022718(v69, (uint64_t)qword_100097490);
        id v70 = v164;
        uint64_t v71 = Logger.logObject.getter();
        os_log_type_t v72 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v71, v72))
        {
          uint64_t v73 = (uint8_t *)swift_slowAlloc();
          uint64_t v172 = swift_slowAlloc();
          *(_DWORD *)uint64_t v73 = 136446210;
          [v70 acceptanceStatus];
          type metadata accessor for ParticipantAcceptanceStatus(0);
          uint64_t v74 = String.init<A>(describing:)();
          sub_100035724(v74, v75, &v172);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v71, v72, "Unknown acceptance status: %{public}s", v73, 0xCu);
          swift_arrayDestroy();
          unint64_t v8 = v166;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        goto LABEL_90;
      }
      if (qword_1000950C8 != -1) {
        swift_once();
      }
      uint64_t v121 = type metadata accessor for Logger();
      sub_100022718(v121, (uint64_t)qword_100097490);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v122 = Logger.logObject.getter();
      os_log_type_t v123 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v122, v123))
      {
        uint64_t v124 = swift_slowAlloc();
        uint64_t v172 = swift_slowAlloc();
        *(_DWORD *)uint64_t v124 = 136446466;
        swift_bridgeObjectRetain();
        sub_100035724(v168, v170, &v172);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v124 + 12) = 2082;
        swift_bridgeObjectRetain();
        sub_100035724(v157, v8, &v172);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v122, v123, "Adding %{public}s to %{public}s", (uint8_t *)v124, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      uint64_t v14 = &selRef_validateBudget_error_;
      unint64_t v16 = v158;
      unint64_t v12 = v159;
      unint64_t v125 = v167;
      [v153 addParticipant:v167];

LABEL_183:
    }

    char v154 = 1;
    uint64_t v13 = v160;
    unint64_t v15 = v163;
  }
  while (v163 != v160);
LABEL_193:
  swift_bridgeObjectRelease();
  char v154 = 1;
LABEL_194:
  unint64_t v130 = v173;
  if (v173 >> 62)
  {
    if ((v173 & 0x8000000000000000) != 0) {
      unint64_t v12 = v173;
    }
    else {
      unint64_t v12 = v173 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    uint64_t v131 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v132 = &off_100072000;
    if (!v131) {
      goto LABEL_245;
    }
LABEL_196:
    unint64_t v133 = 0;
    int v165 = *((void *)v132 + 327);
    while (1)
    {
      while (1)
      {
        if ((v130 & 0xC000000000000001) != 0)
        {
          id v134 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v133 >= *(void *)((v130 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_236;
          }
          id v134 = *(id *)(v130 + 8 * v133 + 32);
        }
        unint64_t v135 = v134;
        unint64_t v136 = v133 + 1;
        if (__OFADD__(v133, 1)) {
          goto LABEL_227;
        }
        if ([v134 v14[56]] != (id)1) {
          break;
        }

LABEL_198:
        ++v133;
        if (v136 == v131) {
          goto LABEL_245;
        }
      }
      id v137 = [v135 userIdentity];
      id v138 = [v137 lookupInfo];

      if (!v138) {
        goto LABEL_209;
      }
      id v139 = [v138 emailAddress];
      if (!v139)
      {
        id v139 = [v138 phoneNumber];
        if (!v139) {
          break;
        }
      }
      uint64_t v146 = v139;
      unint64_t v171 = v133 + 1;
      uint64_t v169 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v148 = v147;

      if (qword_1000950C8 != -1) {
        swift_once();
      }
      uint64_t v149 = type metadata accessor for Logger();
      sub_100022718(v149, (uint64_t)qword_100097490);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      unint64_t v12 = Logger.logObject.getter();
      os_log_type_t v150 = static os_log_type_t.default.getter();
      if (os_log_type_enabled((os_log_t)v12, v150))
      {
        uint64_t v151 = swift_slowAlloc();
        uint64_t v172 = swift_slowAlloc();
        *(_DWORD *)uint64_t v151 = v165;
        swift_bridgeObjectRetain();
        *(void *)(v151 + 4) = sub_100035724(v169, v148, &v172);
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v151 + 12) = 2082;
        swift_bridgeObjectRetain();
        *(void *)(v151 + 14) = sub_100035724(v157, v166, &v172);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v12, v150, "Adding %{public}s to %{public}s", (uint8_t *)v151, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        unint64_t v8 = v166;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      [v153 addParticipant:v135];

      char v154 = 1;
      unint64_t v133 = v171;
      uint64_t v14 = &selRef_validateBudget_error_;
      if (v171 == v131) {
        goto LABEL_245;
      }
    }

LABEL_209:
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v140 = type metadata accessor for Logger();
    sub_100022718(v140, (uint64_t)qword_100097490);
    swift_bridgeObjectRetain_n();
    id v141 = v135;
    unint64_t v12 = Logger.logObject.getter();
    os_log_type_t v142 = static os_log_type_t.error.getter();
    if (os_log_type_enabled((os_log_t)v12, v142))
    {
      uint64_t v143 = swift_slowAlloc();
      uint64_t v172 = swift_slowAlloc();
      *(_DWORD *)uint64_t v143 = v165;
      swift_bridgeObjectRetain();
      *(void *)(v143 + 4) = sub_100035724(v157, v166, &v172);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v143 + 12) = 2082;
      id v141 = v141;
      uint64_t v144 = String.init<A>(describing:)();
      *(void *)(v143 + 14) = sub_100035724(v144, v145, &v172);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v12, v142, "Failed to share %{public}s with %{public}s", (uint8_t *)v143, 0x16u);
      swift_arrayDestroy();
      unint64_t v8 = v166;
      swift_slowDealloc();
      unint64_t v136 = v133 + 1;
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    uint64_t v14 = &selRef_validateBudget_error_;
    goto LABEL_198;
  }
  uint64_t v131 = *(void *)((v173 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v132 = &off_100072000;
  if (v131) {
    goto LABEL_196;
  }
LABEL_245:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v154 & 1;
}

void sub_100052E40(void *a1, char a2, NSObject *a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    swift_errorRetain();
    sub_1000420A8((uint64_t)a1, a5, a3);
    sub_1000478F8(a1, 1);
    return;
  }
  sub_100023228(0, &qword_1000954C0);
  sub_100023228(0, (unint64_t *)&unk_100095D80);
  id v7 = a1;
  swift_dynamicCast();
  id v8 = [v17 participants];
  sub_100023228(0, (unint64_t *)&qword_100095510);
  unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v16 = a1;
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10) {
      goto LABEL_4;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    dispatch_group_leave(a3);
    sub_1000478F8(v16, 0);

    return;
  }
  uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v10) {
    goto LABEL_16;
  }
LABEL_4:
  if (v10 >= 1)
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      if ((v9 & 0xC000000000000001) != 0) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v12 = *(id *)(v9 + 8 * i + 32);
      }
      uint64_t v13 = v12;
      if (objc_msgSend(v12, "role", v16) != (id)1)
      {
        dispatch_group_enter(a3);
        id v14 = v17;
        sub_100040ECC(v13, v17, 0xD000000000000030, 0x8000000100075E40, a3);

        uint64_t v13 = v14;
      }
    }
    goto LABEL_16;
  }
  __break(1u);
}

uint64_t sub_1000530B0(uint64_t a1, uint64_t a2)
{
  return sub_10005D51C(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_1000530C0()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100053100()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100053138(uint64_t a1, uint64_t a2)
{
  sub_10005CF00(a1, a2, *(NSObject **)(v2 + 16));
}

uint64_t sub_100053140()
{
  _Block_release(*(const void **)(v0 + 16));
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100053178(uint64_t a1)
{
  sub_10003A7F8(a1, *(void *)(v1 + 16));
}

uint64_t sub_100053180()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000531C8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  unint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *unint64_t v9 = v2;
  v9[1] = sub_10002C9FC;
  return sub_10003C1FC(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100053290()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000532C8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10002C9FC;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100095DD0 + dword_100095DD0);
  return v6(a1, v4);
}

uint64_t sub_100053380()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000533C0(int a1, uint64_t a2)
{
  sub_10005889C(a1, a2, *(id *)(v2 + 16), *(NSObject **)(v2 + 24));
}

uint64_t sub_1000533C8()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100053408()
{
  sub_100058C84(*(void (**)(uint64_t))(v0 + 16));
}

uint64_t sub_10005349C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for DeviceActivityDataStore();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F) {
        return swift_initClassMetadata2();
      }
    }
  }
  return result;
}

uint64_t sub_10005360C(uint64_t a1, void *aBlock)
{
  unint64_t v2 = *(void (**)(uint64_t (*)(), uint64_t))(a1 + 32);
  unint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  swift_retain();
  v2(sub_100055030, v4);
  swift_release();
  return swift_release();
}

uint64_t sub_1000536A0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_1000222D4(&qword_100095BA0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v10 = (void *)((char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (void *)((char *)v36 - v12);
  uint64_t v14 = DeviceActivityDataStore.localZones.getter();
  uint64_t v15 = *(void *)(v14 + 16);
  if (v15)
  {
    v36[1] = v2;
    uint64_t v37 = a2;
    uint64_t v38 = a1;
    char v44 = &_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v16 = sub_100023228(0, qword_100095F40);
    uint64_t v17 = *(unsigned __int8 *)(v6 + 80);
    v36[0] = v14;
    uint64_t v18 = v14 + ((v17 + 32) & ~v17);
    uint64_t v40 = *(void *)(v6 + 72);
    uint64_t v41 = v16;
    uint64_t v39 = CKCurrentUserDefaultName;
    uint64_t v42 = v10;
    do
    {
      uint64_t v43 = v15;
      sub_100055044(v18, (uint64_t)v13);
      uint64_t v19 = *(int *)(v5 + 48);
      id v20 = (char *)v10 + v19;
      id v21 = (char *)v13 + v19;
      uint64_t v23 = *v13;
      id v22 = (void *)v13[1];
      *uint64_t v10 = *v13;
      v10[1] = (uint64_t)v22;
      uint64_t v24 = type metadata accessor for _SegmentInterval();
      uint64_t v25 = v5;
      uint64_t v26 = *(void *)(v24 - 8);
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v20, v21, v24);
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v29 = v28;
      swift_bridgeObjectRetain();
      v30._uint64_t countAndFlagsBits = v23;
      v30._object = v22;
      v31._uint64_t countAndFlagsBits = v27;
      v31._object = v29;
      CKRecordZoneID.init(zoneName:ownerName:)(v30, v31);
      unint64_t v32 = v20;
      uint64_t v33 = v43;
      (*(void (**)(char *, uint64_t))(v26 + 8))(v32, v24);
      uint64_t v5 = v25;
      uint64_t v10 = v42;
      sub_10002BDA0((uint64_t)v13, &qword_100095BA0);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v18 += v40;
      uint64_t v15 = v33 - 1;
    }
    while (v15);
    uint64_t v34 = v44;
    swift_bridgeObjectRelease();
    a2 = v37;
    a1 = v38;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v34 = &_swiftEmptyArrayStorage;
  }
  sub_1000565A8((unint64_t)v34, a1, a2);
  return swift_bridgeObjectRelease();
}

id sub_100053B54()
{
  id result = [objc_allocWithZone((Class)MOEffectiveSettingsStore) init];
  qword_100095E10 = (uint64_t)result;
  return result;
}

void sub_100053B88()
{
  Notification.object.getter();
  if (v7)
  {
    if (swift_dynamicCast())
    {
      sub_100053CCC(v4, v5);
      return;
    }
  }
  else
  {
    sub_10002BDA0((uint64_t)v6, (uint64_t *)&unk_100095B90);
  }
  if (qword_1000950C8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100022718(v0, (uint64_t)qword_100097490);
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to get retry urgency from notification", v3, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_100053CCC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    sub_100054898();
    return sub_1000536A0(0, 0);
  }
  else
  {
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100022718(v16, (uint64_t)qword_100097490);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = v7;
      aBlock[0] = a1;
      id v20 = v19;
      *(_DWORD *)uint64_t v19 = 134349056;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Scheduling a background activity to retry sharing in %{public}f seconds", v20, 0xCu);
      uint64_t v7 = v26;
      swift_slowDealloc();
    }

    sub_100023228(0, (unint64_t *)&unk_100095F20);
    id v21 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = v3;
    *(void *)(v22 + 24) = a1;
    aBlock[4] = sub_100054E74;
    aBlock[5] = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10003D02C;
    uint64_t aBlock[3] = &unk_10008B9C0;
    uint64_t v23 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = &_swiftEmptyArrayStorage;
    sub_100054E98();
    sub_1000222D4((uint64_t *)&unk_100095F30);
    sub_100054EF0();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v23);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
}

uint64_t sub_100054088()
{
  uint64_t v0 = type metadata accessor for Notification();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  sub_100053B88();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

char *sub_100054174()
{
  uint64_t v1 = *(void *)v0;
  (*(void (**)(char *))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(&v0[*(void *)(*(void *)v0 + 152)]);
  swift_release();
  sub_100037890((uint64_t)&v0[*(void *)(*(void *)v0 + 168)]);
  sub_10002AE2C((uint64_t)&v0[*(void *)(*(void *)v0 + 176)]);
  uint64_t v2 = &v0[*(void *)(*(void *)v0 + 184)];
  uint64_t v3 = type metadata accessor for DeviceActivityDataStore();
  (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  sub_10002AE2C((uint64_t)&v0[*(void *)(*(void *)v0 + 192)]);

  swift_unknownObjectRelease();
  uint64_t v4 = *(void *)(v1 + 96);
  char v5 = *(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(&v0[*(void *)(*(void *)v0 + 224)], v4);
  v5(&v0[*(void *)(*(void *)v0 + 232)], v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100054428()
{
  sub_100054174();
  return swift_deallocClassInstance();
}

uint64_t _s6EngineCMa(uint64_t a1, uint64_t a2)
{
  return _swift_getGenericMetadata(a1, a2, &_s6EngineCMn);
}

uint64_t sub_100054498(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 136);
}

uint64_t sub_1000544A0(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 8);
  unsigned int v4 = *(unsigned __int8 *)(a2 + 8);
  uint64_t result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0) {
    return *(double *)a1 == *(double *)a2;
  }
  return result;
}

void sub_1000544D0(uint64_t a1, double a2)
{
  unsigned int v4 = *(void **)a1;
  char v5 = *(void **)a1;
  uint64_t v6 = (void *)(a1 + *(void *)(*(void *)a1 + 176));
  uint64_t v7 = v6[3];
  uint64_t v8 = v6[4];
  sub_10002ADE8(v6, v7);
  uint64_t v14 = &type metadata for Double;
  *(double *)uint64_t v13 = a2;
  (*(void (**)(void *, void, void, uint64_t, uint64_t))(v8 + 40))(v13, *(void *)(a1 + *(void *)(*(void *)a1 + 264)), *(void *)(a1 + *(void *)(*(void *)a1 + 264) + 8), v7, v8);
  sub_10002BDA0((uint64_t)v13, (uint64_t *)&unk_100095B90);
  uint64_t v9 = *(void **)(a1 + *(void *)(*(void *)a1 + 200));
  [v9 setInterval:a2];
  [v9 setQualityOfService:25];
  uint64_t v10 = swift_allocObject();
  swift_weakInit();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v4[10];
  *(void *)(v11 + 24) = v4[11];
  *(_OWORD *)(v11 + 32) = *((_OWORD *)v5 + 6);
  *(void *)(v11 + 48) = v4[14];
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(v5 + 15);
  *(void *)(v11 + 72) = v4[17];
  *(void *)(v11 + 80) = v10;
  uint64_t v15 = sub_100054FBC;
  uint64_t v16 = v11;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_10005360C;
  uint64_t v14 = &unk_10008BA38;
  uint64_t v12 = _Block_copy(v13);
  swift_release();
  [v9 scheduleWithBlock:v12];
  _Block_release(v12);
}

uint64_t sub_10005473C(uint64_t a1, uint64_t a2)
{
  if (qword_1000950C8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100022718(v4, (uint64_t)qword_100097490);
  char v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Running background activity to retry sharing", v7, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_100054898();
    swift_release();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1000536A0(a1, a2);
    return swift_release();
  }
  return result;
}

uint64_t sub_100054898()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  os_log_type_t v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000950C8 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100022718(v12, (uint64_t)qword_100097490);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Invalidating background sharing activity", v15, 2u);
    swift_slowDealloc();
  }

  sub_100023228(0, (unint64_t *)&unk_100095F20);
  uint64_t v16 = (void *)static OS_dispatch_queue.main.getter();
  aBlock[4] = sub_1000550AC;
  aBlock[5] = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003D02C;
  uint64_t aBlock[3] = &unk_10008BA88;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_100054E98();
  sub_1000222D4((uint64_t *)&unk_100095F30);
  sub_100054EF0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_100054BC4(uint64_t a1)
{
  [*(id *)(a1 + *(void *)(*(void *)a1 + 200)) invalidate];
  uint64_t v2 = (void *)(a1 + *(void *)(*(void *)a1 + 176));
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  sub_10002ADE8(v2, v3);
  memset(v6, 0, sizeof(v6));
  (*(void (**)(_OWORD *, void, void, uint64_t, uint64_t))(v4 + 40))(v6, *(void *)(a1 + *(void *)(*(void *)a1 + 264)), *(void *)(a1 + *(void *)(*(void *)a1 + 264) + 8), v3, v4);
  return sub_10002BDA0((uint64_t)v6, (uint64_t *)&unk_100095B90);
}

void sub_100054C94(uint64_t a1, unint64_t a2)
{
  if (qword_1000950C8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100022718(v4, (uint64_t)qword_100097490);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446210;
    swift_bridgeObjectRetain();
    sub_100035724(a1, a2, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Finished sharing %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_100054E3C()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100054E74()
{
  sub_1000544D0(*(void *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_100054E80(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100054E90()
{
  return swift_release();
}

unint64_t sub_100054E98()
{
  unint64_t result = qword_100095BE0;
  if (!qword_100095BE0)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100095BE0);
  }
  return result;
}

unint64_t sub_100054EF0()
{
  unint64_t result = qword_100095BF0;
  if (!qword_100095BF0)
  {
    sub_100036FC4((uint64_t *)&unk_100095F30);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100095BF0);
  }
  return result;
}

uint64_t sub_100054F4C()
{
  swift_weakDestroy();
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100054F84()
{
  swift_release();
  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_100054FBC(uint64_t a1, uint64_t a2)
{
  return sub_10005473C(a1, a2);
}

uint64_t sub_100054FF8()
{
  _Block_release(*(const void **)(v0 + 16));
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100055030()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_100055044(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000222D4(&qword_100095BA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000550AC()
{
  return sub_100054BC4(v0);
}

uint64_t sub_1000550B4(NSString *a1, uint64_t a2)
{
  uint64_t v124 = a2;
  uint64_t v3 = type metadata accessor for CKSyncEngine.PendingRecordZoneChange();
  uint64_t v138 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  os_log_type_t v6 = (Class *)((char *)&v119 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_1000222D4(&qword_100095BA0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  id v134 = (uint64_t *)((char *)&v119 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = (char *)&v119 - v14;
  __chkstk_darwin(v13, v16);
  unint64_t v135 = (uint64_t *)((char *)&v119 - v17);
  if (![(id)swift_getObjCClassFromMetadata() isAuthorized])
  {
    if (qword_1000950C8 != -1) {
      goto LABEL_81;
    }
    goto LABEL_5;
  }
  unint64_t v133 = (uint64_t *)v15;
  id v139 = v6;
  uint64_t v140 = v3;
  os_log_type_t v18 = *(NSObject **)((char *)a1 + *((void *)*a1 + 27));
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = sub_100047958;
  *(void *)(v19 + 24) = a1;
  aBlock[4] = (uint64_t)sub_100056018;
  aBlock[5] = v19;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10003BEC0;
  uint64_t aBlock[3] = (uint64_t)&unk_10008BAD8;
  id v20 = a1;
  id v21 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v18, v21);
  _Block_release(v21);
  LOBYTE(v18) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v18) {
    goto LABEL_80;
  }
  uint64_t v22 = (char *)v20 + *((void *)*v20 + 23);
  uint64_t v23 = DeviceActivityDataStore.localZones.getter();
  uint64_t v129 = 0;
  uint64_t v32 = *(void *)(v23 + 16);
  unint64_t v125 = v20;
  if (!v32)
  {
    swift_bridgeObjectRelease();
    uint64_t v35 = (char *)&_swiftEmptyDictionarySingleton;
    goto LABEL_36;
  }
  uint64_t v131 = (char *)v135 + *(int *)(v7 + 48);
  uint64_t v132 = v22;
  uint64_t v126 = *(char **)((char *)v20 + *((void *)*v20 + 28));
  unint64_t v130 = v20 + 7;
  unint64_t v33 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v119 = v23;
  uint64_t v34 = v23 + v33;
  os_log_type_t v128 = *(char **)(v8 + 72);
  uint64_t v35 = (char *)&_swiftEmptyDictionarySingleton;
  LODWORD(v123) = enum case for CKSyncEngine.PendingDatabaseChange.saveZone(_:);
  *(void *)&long long v24 = 134349314;
  long long v121 = v24;
  unint64_t v120 = (char *)&type metadata for Any + 8;
  long long v122 = xmmword_100073730;
  id v36 = v133;
  do
  {
    unint64_t v136 = (void (**)(void, void, void))v34;
    uint64_t v137 = v32;
    uint64_t v39 = v135;
    sub_100055044(v34, (uint64_t)v135);
    uint64_t v40 = (char *)v36 + *(int *)(v7 + 48);
    unint64_t v41 = v39[1];
    uint64_t v42 = *v39;
    *id v36 = v42;
    v36[1] = v41;
    uint64_t v43 = type metadata accessor for _SegmentInterval();
    uint64_t v44 = *(void *)(v43 - 8);
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v40, v131, v43);
    uint64_t v45 = v134;
    uint64_t v46 = (char *)v134 + *(int *)(v7 + 48);
    *id v134 = v42;
    v45[1] = v41;
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v46, v40, v43);
    uint64_t v47 = *(void (**)(char *, uint64_t))(v44 + 8);
    swift_bridgeObjectRetain();
    v47(v46, v43);
    uint64_t v48 = (uint64_t)v125[10];
    unint64_t v49 = (uint64_t (**)(uint64_t, unint64_t, uint64_t, NSString))v125[11];
    sub_10002ADE8(v130, v48);
    if ((v49[1](v42, v41, v48, v49) & 1) == 0)
    {
      id v50 = objc_allocWithZone((Class)CKRecordZone);
      swift_bridgeObjectRetain();
      NSString v51 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v52 = objc_msgSend(v50, "initWithZoneName:", v51, v119, v120);

      [v52 setCapabilities:8];
      int64_t v127 = CKSyncEngine.state.getter();
      sub_1000222D4(&qword_100095B40);
      uint64_t v53 = *(void *)(type metadata accessor for CKSyncEngine.PendingDatabaseChange() - 8);
      uint64_t v54 = v42;
      uint64_t v55 = v35;
      uint64_t v56 = v7;
      unint64_t v57 = (*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
      uint64_t v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = v122;
      id v59 = (void *)(v58 + v57);
      uint64_t v7 = v56;
      uint64_t v35 = v55;
      uint64_t v42 = v54;
      *id v59 = v52;
      (*(void (**)(void))(v53 + 104))();
      id v60 = v52;
      CKSyncEngine.State.add(pendingDatabaseChanges:)((Swift::OpaquePointer)v58);
      swift_release();

      swift_bridgeObjectRelease();
    }
    uint64_t v61 = v129;
    uint64_t v62 = DeviceActivityDataStore.localRecordNames(forZoneName:segmentInterval:)();
    if (v61)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10002BDA0((uint64_t)v133, &qword_100095BA0);
      swift_errorRetain();
      uint64_t v25 = (void *)_convertErrorToNSError(_:)();
      (*(void (**)(uint64_t, void *))(v124 + 16))(v124, v25);

      swift_errorRelease();
      swift_errorRelease();
      return swift_release();
    }
    uint64_t v63 = v62;
    uint64_t v64 = *(void *)(v62 + 16);
    id v36 = v133;
    uint64_t v129 = 0;
    if (v64)
    {
      if (qword_1000950C8 != -1) {
        swift_once();
      }
      uint64_t v65 = type metadata accessor for Logger();
      sub_100022718(v65, (uint64_t)qword_100097490);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v66 = Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v66, v67))
      {
        uint64_t v68 = swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v68 = v121;
        *(void *)(v68 + 4) = *(void *)(v63 + 16);
        swift_bridgeObjectRelease();
        *(_WORD *)(v68 + 12) = 2082;
        swift_bridgeObjectRetain();
        *(void *)(v68 + 14) = sub_100035724(v42, v41, aBlock);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v66, v67, "Uploading %{public}ld records for %{public}s.", (uint8_t *)v68, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = (uint64_t)v35;
      unint64_t v71 = sub_100035E24(v42, v41);
      uint64_t v72 = *((void *)v35 + 2);
      BOOL v73 = (v70 & 1) == 0;
      uint64_t v74 = v72 + v73;
      if (__OFADD__(v72, v73))
      {
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        swift_once();
LABEL_5:
        uint64_t v26 = type metadata accessor for Logger();
        sub_100022718(v26, (uint64_t)qword_100097490);
        uint64_t v27 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v27, v28))
        {
          unint64_t v29 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v29 = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "Not uploading local data because Device Activity is not authorized.", v29, 2u);
          swift_slowDealloc();
        }

        Swift::String v30 = *(uint64_t (**)(void))(v124 + 16);
        return v30();
      }
      char v75 = v70;
      if (*((void *)v35 + 3) >= v74)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v35 = (char *)aBlock[0];
          if (v70) {
            goto LABEL_30;
          }
        }
        else
        {
          sub_100044D14();
          uint64_t v35 = (char *)aBlock[0];
          if (v75) {
            goto LABEL_30;
          }
        }
      }
      else
      {
        sub_1000446EC(v74, isUniquelyReferenced_nonNull_native);
        unint64_t v76 = sub_100035E24(v42, v41);
        if ((v75 & 1) != (v77 & 1)) {
          goto LABEL_83;
        }
        unint64_t v71 = v76;
        uint64_t v35 = (char *)aBlock[0];
        if (v75)
        {
LABEL_30:
          uint64_t v82 = *((void *)v35 + 7);
          swift_bridgeObjectRelease();
          *(void *)(v82 + 8 * v71) = v63;
          goto LABEL_12;
        }
      }
      *(void *)&v35[8 * (v71 >> 6) + 64] |= 1 << v71;
      os_log_type_t v78 = (uint64_t *)(*((void *)v35 + 6) + 16 * v71);
      *os_log_type_t v78 = v42;
      v78[1] = v41;
      *(void *)(*((void *)v35 + 7) + 8 * v71) = v63;
      uint64_t v79 = *((void *)v35 + 2);
      BOOL v80 = __OFADD__(v79, 1);
      uint64_t v81 = v79 + 1;
      if (v80) {
        goto LABEL_79;
      }
      *((void *)v35 + 2) = v81;
      swift_bridgeObjectRetain();
    }
LABEL_12:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v37 = v136;
    uint64_t v38 = v137;
    sub_10002BDA0((uint64_t)v36, &qword_100095BA0);
    uint64_t v34 = (uint64_t)&v128[(void)v37];
    uint64_t v32 = v38 - 1;
  }
  while (v32);
  swift_bridgeObjectRelease();
LABEL_36:
  CKSyncEngine.state.getter();
  uint64_t v83 = CKSyncEngine.State.pendingRecordZoneChanges.getter();
  swift_release();
  CKSyncEngine.state.getter();
  CKSyncEngine.State.remove(pendingRecordZoneChanges:)((Swift::OpaquePointer)v83);
  swift_release();
  swift_bridgeObjectRelease();
  if (!*((void *)v35 + 2))
  {
    swift_bridgeObjectRelease();
    sub_10003BEE8();
LABEL_75:
    (*(void (**)(uint64_t, void))(v124 + 16))(v124, 0);
    return swift_release();
  }
  uint64_t v123 = CKSyncEngine.state.getter();
  uint64_t v84 = *((void *)v35 + 8);
  uint64_t v126 = v35 + 64;
  uint64_t v85 = 1 << v35[32];
  uint64_t v86 = -1;
  if (v85 < 64) {
    uint64_t v86 = ~(-1 << v85);
  }
  unint64_t v87 = v86 & v84;
  int64_t v127 = (unint64_t)(v85 + 63) >> 6;
  unint64_t v130 = CKCurrentUserDefaultName;
  LODWORD(v137) = enum case for CKSyncEngine.PendingRecordZoneChange.saveRecord(_:);
  unint64_t v135 = (uint64_t *)(v138 + 32);
  unint64_t v136 = (void (**)(void, void, void))(v138 + 104);
  swift_bridgeObjectRetain_n();
  int64_t v88 = 0;
  uint64_t v89 = &_swiftEmptyArrayStorage;
  os_log_type_t v128 = v35;
  while (2)
  {
    if (v87)
    {
      unint64_t v90 = __clz(__rbit64(v87));
      v87 &= v87 - 1;
      unint64_t v91 = v90 | (v88 << 6);
LABEL_58:
      uint64_t v94 = (uint64_t *)(*((void *)v35 + 6) + 16 * v91);
      uint64_t v95 = *v94;
      uint64_t v96 = (char *)v94[1];
      uint64_t v97 = *(char **)(*((void *)v35 + 7) + 8 * v91);
      sub_100023228(0, qword_100095F40);
      uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v100 = v99;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v101._uint64_t countAndFlagsBits = v95;
      uint64_t v102 = v96;
      v101._object = v96;
      v103._uint64_t countAndFlagsBits = v98;
      v103._object = v100;
      v104.super.Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v101, v103).super.isa;
      uint64_t v105 = *((void *)v97 + 2);
      if (v105)
      {
        uint64_t v131 = v102;
        unint64_t v133 = (uint64_t *)v87;
        id v134 = (uint64_t *)v88;
        sub_100023228(0, &qword_100095C70);
        swift_bridgeObjectRetain();
        uint64_t v132 = v97;
        uint64_t v106 = (void **)(v97 + 40);
        uint64_t v108 = v139;
        uint64_t v107 = v140;
        do
        {
          uint64_t v109 = (uint64_t)*(v106 - 1);
          os_log_type_t v110 = *v106;
          swift_bridgeObjectRetain();
          uint64_t v111 = v104.super.isa;
          v112._uint64_t countAndFlagsBits = v109;
          v112._object = v110;
          Class isa = CKRecordID.init(recordName:zoneID:)(v112, (CKRecordZoneID)v111).super.isa;
          Class *v108 = isa;
          (*v136)(v108, v137, v107);
          id v114 = isa;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v89 = (void *)sub_100043E14(0, v89[2] + 1, 1, (unint64_t)v89);
          }
          unint64_t v116 = v89[2];
          unint64_t v115 = v89[3];
          if (v116 >= v115 >> 1) {
            uint64_t v89 = (void *)sub_100043E14(v115 > 1, v116 + 1, 1, (unint64_t)v89);
          }
          v106 += 2;
          v89[2] = v116 + 1;
          unint64_t v117 = (unint64_t)v89
               + ((*(unsigned __int8 *)(v138 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80))
               + *(void *)(v138 + 72) * v116;
          uint64_t v108 = v139;
          uint64_t v107 = v140;
          (*(void (**)(unint64_t, Class *, uint64_t))(v138 + 32))(v117, v139, v140);

          --v105;
        }
        while (v105);
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        uint64_t v35 = v128;
        unint64_t v87 = (unint64_t)v133;
        int64_t v88 = (int64_t)v134;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
  BOOL v80 = __OFADD__(v88++, 1);
  if (v80)
  {
    __break(1u);
    goto LABEL_78;
  }
  if (v88 >= v127) {
    goto LABEL_73;
  }
  unint64_t v92 = *(void *)&v126[8 * v88];
  if (v92)
  {
LABEL_57:
    unint64_t v87 = (v92 - 1) & v92;
    unint64_t v91 = __clz(__rbit64(v92)) + (v88 << 6);
    goto LABEL_58;
  }
  int64_t v93 = v88 + 1;
  if (v88 + 1 >= v127) {
    goto LABEL_73;
  }
  unint64_t v92 = *(void *)&v126[8 * v93];
  if (v92) {
    goto LABEL_56;
  }
  int64_t v93 = v88 + 2;
  if (v88 + 2 >= v127) {
    goto LABEL_73;
  }
  unint64_t v92 = *(void *)&v126[8 * v93];
  if (v92) {
    goto LABEL_56;
  }
  int64_t v93 = v88 + 3;
  if (v88 + 3 >= v127) {
    goto LABEL_73;
  }
  unint64_t v92 = *(void *)&v126[8 * v93];
  if (v92) {
    goto LABEL_56;
  }
  int64_t v93 = v88 + 4;
  if (v88 + 4 >= v127) {
    goto LABEL_73;
  }
  unint64_t v92 = *(void *)&v126[8 * v93];
  if (v92) {
    goto LABEL_56;
  }
  int64_t v93 = v88 + 5;
  if (v88 + 5 >= v127) {
    goto LABEL_73;
  }
  unint64_t v92 = *(void *)&v126[8 * v93];
  if (v92)
  {
LABEL_56:
    int64_t v88 = v93;
    goto LABEL_57;
  }
  int64_t v118 = v88 + 6;
  if (v88 + 6 >= v127)
  {
LABEL_73:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    CKSyncEngine.State.add(pendingRecordZoneChanges:)((Swift::OpaquePointer)v89);
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_75;
  }
  unint64_t v92 = *(void *)&v126[8 * v118];
  v88 += 6;
  if (v92) {
    goto LABEL_57;
  }
  while (1)
  {
    int64_t v88 = v118 + 1;
    if (__OFADD__(v118, 1)) {
      break;
    }
    if (v88 >= v127) {
      goto LABEL_73;
    }
    unint64_t v92 = *(void *)&v126[8 * v88];
    ++v118;
    if (v92) {
      goto LABEL_57;
    }
  }
  __break(1u);
LABEL_83:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100056008()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100056018()
{
  return sub_10003BE98(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for RetryUrgency(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for RetryUrgency(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RetryUrgency(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t sub_100056088(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000560A8(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for RetryUrgency()
{
  return &type metadata for RetryUrgency;
}

uint64_t sub_1000560F0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1000561E0(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1000222D4(&qword_100095D70);
    unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  os_log_type_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_100035E9C(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v19;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_1000366C4(v38, v32);
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    sub_1000366C4(v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    sub_1000366C4(v36, v37);
    sub_1000366C4(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)&v6[8 * v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)sub_1000366C4(&v33, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_10003705C();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1000565A8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v49 = a3;
  uint64_t v48 = a2;
  uint64_t v5 = *v3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v51 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  id v50 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = dispatch_group_create();
  uint64_t v15 = *(void *)(*v3 + 216);
  uint64_t v56 = v3;
  uint64_t v16 = *(uint64_t *)((char *)v3 + v15 + 24);
  uint64_t v17 = *(uint64_t *)((char *)v3 + v15 + 32);
  sub_10002ADE8((uint64_t *)((char *)v3 + v15), v16);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17);
  uint64_t v54 = v7;
  uint64_t v55 = v6;
  id v52 = v10;
  uint64_t v53 = v11;
  if (!v18 || (uint64_t v19 = *(void *)(v18 + 16), swift_bridgeObjectRelease(), !v19))
  {
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      if (!v25) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v25 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v25) {
        goto LABEL_22;
      }
    }
    uint64_t v62 = sub_100023228(0, &qword_100095C70);
    uint64_t v61 = *(void *)(v5 + 88);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t result = AssociatedConformanceWitness + 56;
    uint64_t v58 = *(void (**)(Class, void (*)(int, uint64_t), uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 56);
    uint64_t v59 = AssociatedConformanceWitness + 56;
    if (v25 >= 1)
    {
      uint64_t v26 = 0;
      uint64_t v57 = (uint64_t)v56 + *(void *)(*v56 + 208);
      unint64_t v27 = a1 & 0xC000000000000001;
      unint64_t v28 = a1;
      do
      {
        if (v27) {
          id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v29 = *(id *)(a1 + 8 * v26 + 32);
        }
        long long v30 = v29;
        ++v26;
        dispatch_group_enter(v14);
        uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        long long v33 = v32;
        id v34 = v30;
        v35._uint64_t countAndFlagsBits = v31;
        v35._object = v33;
        Class isa = CKRecordID.init(recordName:zoneID:)(v35, (CKRecordZoneID)v34).super.isa;
        uint64_t v37 = swift_allocObject();
        *(void *)(v37 + 16) = v34;
        *(void *)(v37 + 24) = v14;
        id v38 = v34;
        long long v39 = v14;
        v58(isa, sub_1000533C0, v37, v61, AssociatedConformanceWitness);

        swift_release();
        a1 = v28;
      }
      while (v25 != v26);
      goto LABEL_22;
    }
    __break(1u);
    goto LABEL_24;
  }
  if (!(a1 >> 62))
  {
    uint64_t v20 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v20) {
      goto LABEL_5;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    uint64_t v40 = swift_allocObject();
    uint64_t v41 = v48;
    uint64_t v42 = v49;
    *(void *)(v40 + 16) = v48;
    *(void *)(v40 + 24) = v42;
    aBlock[4] = sub_100053408;
    aBlock[5] = v40;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10003D02C;
    uint64_t aBlock[3] = &unk_10008BF90;
    uint64_t v43 = _Block_copy(aBlock);
    sub_10002CAF0(v41);
    uint64_t v44 = v50;
    static DispatchQoS.unspecified.getter();
    uint64_t v63 = &_swiftEmptyArrayStorage;
    sub_100054E98();
    sub_1000222D4((uint64_t *)&unk_100095F30);
    sub_100054EF0();
    uint64_t v45 = v52;
    uint64_t v46 = v55;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_group.notify(qos:flags:queue:execute:)();
    _Block_release(v43);

    (*(void (**)(char *, uint64_t))(v54 + 8))(v45, v46);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v44, v53);
    return swift_release();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v20 = result;
  if (!result) {
    goto LABEL_22;
  }
LABEL_5:
  if (v20 >= 1)
  {
    uint64_t v22 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v23 = *(id *)(a1 + 8 * v22 + 32);
      }
      unint64_t v24 = v23;
      ++v22;
      dispatch_group_enter(v14);
      sub_100056B48(v24, v14);
    }
    while (v20 != v22);
    goto LABEL_22;
  }
LABEL_24:
  __break(1u);
  return result;
}

void sub_100056B48(void *a1, NSObject *a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 120);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v9 = (char *)&v20 - v8;
  uint64_t v11 = (uint64_t *)((char *)v2 + *(void *)(v10 + 216));
  uint64_t v12 = v11[3];
  uint64_t v13 = v11[4];
  sub_10002ADE8(v11, v12);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  if (v14)
  {
    uint64_t v15 = v14;
    if (*(void *)(v14 + 16))
    {
      (*(void (**)(void *, uint64_t, void))(*(void *)(v5 + 176) + 48))(a1, v6, *(void *)(v5 + 176));
      sub_100057F3C(v15, (uint64_t)v9, a2);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      return;
    }
    swift_bridgeObjectRelease();
  }
  if (qword_1000950C8 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100022718(v16, (uint64_t)qword_100097490);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "No Apple IDs to share with", v19, 2u);
    swift_slowDealloc();
  }

  dispatch_group_leave(a2);
}

id sub_100056DE8()
{
  sub_100023228(0, qword_100095F40);
  v0._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v0._object = v1;
  v2._uint64_t countAndFlagsBits = 0x6163696669726556;
  v2._object = (void *)0xEC0000006E6F6974;
  Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v2, v0).super.isa;
  id v4 = [objc_allocWithZone((Class)CKRecordZone) initWithZoneID:isa];

  id result = [v4 setCapabilities:8];
  qword_1000974E8 = (uint64_t)v4;
  return result;
}

NSString sub_100056E9C()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_1000974F0 = (uint64_t)result;
  return result;
}

uint64_t sub_100056ED8(uint64_t a1, void *a2)
{
  uint64_t v113 = (void *)*v2;
  id v114 = v2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v110 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v109 = (char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000222D4(&qword_100095C08);
  uint64_t v14 = __chkstk_darwin(v12 - 8, v13);
  uint64_t v16 = (char *)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v95 - v18;
  uint64_t v112 = type metadata accessor for URL();
  uint64_t v20 = *(void *)(v112 - 8);
  __chkstk_darwin(v112, v21);
  uint64_t v111 = (char *)&v95 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v23 = [a2 context];
  self;
  unint64_t v24 = (void *)swift_dynamicCastObjCClass();
  if (!v24)
  {
    swift_unknownObjectRelease();
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_100022718(v38, (uint64_t)qword_100097490);
    long long v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Failed to extract context from invitation. Declining the invitation.", v41, 2u);
      swift_slowDealloc();
    }

    return sub_10005D988((uint64_t)a2);
  }
  uint64_t v25 = v24;
  uint64_t v105 = v8;
  uint64_t v106 = v9;
  uint64_t v107 = v5;
  uint64_t v108 = v4;
  id v26 = [v24 schemaIdentifier];
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v29 = v28;

  if ((v27 != 0xD000000000000030 || v29 != 0x8000000100075E40)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (v27 == 0xD000000000000037 && v29 == 0x8000000100075E80)
    {
      swift_bridgeObjectRelease();
      uint64_t v49 = v114;
    }
    else
    {
      char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v49 = v114;
      if ((v50 & 1) == 0)
      {
        if (qword_1000950C8 != -1) {
          swift_once();
        }
        uint64_t v57 = type metadata accessor for Logger();
        sub_100022718(v57, (uint64_t)qword_100097490);
        swift_bridgeObjectRetain();
        uint64_t v46 = Logger.logObject.getter();
        os_log_type_t v58 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v46, v58))
        {

          swift_bridgeObjectRelease_n();
          goto LABEL_28;
        }
        uint64_t v113 = v23;
        uint64_t v59 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long aBlock = swift_slowAlloc();
        *(_DWORD *)uint64_t v59 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v119 = sub_100035724(v27, v29, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v46, v58, "Received invitation using unknown schema: %{public}s", v59, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        goto LABEL_26;
      }
      swift_bridgeObjectRelease();
    }
    if (qword_100095100 != -1) {
      swift_once();
    }
    uint64_t v51 = qword_1000974E8;
    uint64_t v52 = swift_allocObject();
    *(void *)(v52 + 16) = v49;
    *(void *)(v52 + 24) = a2;
    uint64_t v53 = v113[11];
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v55 = *(void (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
    swift_retain();
    id v56 = a2;
    v55(v51, sub_10005F2CC, v52, v53, AssociatedConformanceWitness);
    swift_release();
    return swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  id v30 = [v25 dictionary];
  uint64_t v31 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v31 + 16) || (unint64_t v32 = sub_100035E24(0x6974617469766E69, 0xEE00617461446E6FLL), (v33 & 1) == 0))
  {
    long long aBlock = 0u;
    long long v116 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  sub_100035E9C(*(void *)(v31 + 56) + 32 * v32, (uint64_t)&aBlock);
  swift_bridgeObjectRelease();
  if (!*((void *)&v116 + 1))
  {
LABEL_20:
    uint64_t v43 = (uint64_t *)&unk_100095B90;
    p_long long aBlock = (char *)&aBlock;
LABEL_21:
    sub_10002BDA0((uint64_t)p_aBlock, v43);
    goto LABEL_22;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_22:
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    sub_100022718(v45, (uint64_t)qword_100097490);
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v46, v47)) {
      goto LABEL_27;
    }
    uint64_t v48 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v48 = 0;
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Failed to extract share metadata from invitation. Declining the invitation.", v48, 2u);
LABEL_26:
    swift_slowDealloc();
LABEL_27:

LABEL_28:
    sub_10005D988((uint64_t)a2);
    return swift_unknownObjectRelease();
  }
  uint64_t v103 = v119;
  unint64_t v104 = v120;
  id v34 = [v25 dictionary];
  uint64_t v35 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v35 + 16) && (unint64_t v36 = sub_100035E24(0xD000000000000018, 0x8000000100075EC0), (v37 & 1) != 0))
  {
    sub_100035E9C(*(void *)(v35 + 56) + 32 * v36, (uint64_t)&aBlock);
  }
  else
  {
    long long aBlock = 0u;
    long long v116 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v116 + 1))
  {
    sub_100022764(v103, v104);
    goto LABEL_20;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_100022764(v103, v104);
    goto LABEL_22;
  }
  URL.init(string:)();
  swift_bridgeObjectRelease();
  id v60 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  uint64_t v61 = v112;
  if (v60(v19, 1, v112) == 1)
  {
    sub_100022764(v103, v104);
    uint64_t v43 = &qword_100095C08;
    p_long long aBlock = v19;
    goto LABEL_21;
  }
  uint64_t v62 = v111;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v111, v19, v61);
  Swift::String v101 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  v101(v16, v62, v61);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v16, 0, 1, v61);
  sub_1000226C0(v103, v104);
  v63.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  unsigned int v64 = v60(v16, 1, v61);
  uint64_t v100 = v20 + 16;
  if (v64 == 1)
  {
    uint64_t v65 = 0;
  }
  else
  {
    URL._bridgeToObjectiveC()(&var18);
    uint64_t v65 = v66;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v16, v61);
  }
  uint64_t v67 = v61;
  uint64_t v102 = v20;
  id v97 = [objc_allocWithZone((Class)CKDeviceToDeviceShareInvitationToken) initWithSharingInvitationData:v63.super.isa shareURL:v65];
  sub_100022764(v103, v104);

  uint64_t v98 = v113[16];
  uint64_t v99 = swift_allocBox();
  uint64_t v96 = v68;
  sub_1000222D4(&qword_100095C10);
  unint64_t v69 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  uint64_t v70 = swift_allocObject();
  long long v95 = xmmword_100073730;
  *(_OWORD *)(v70 + 16) = xmmword_100073730;
  unint64_t v71 = v111;
  uint64_t v72 = (void (*)(unint64_t, char *, uint64_t))v101;
  v101((char *)(v70 + v69), v111, v67);
  sub_1000222D4(&qword_100095C18);
  BOOL v73 = (int *)(sub_1000222D4((uint64_t *)&unk_100095C20) - 8);
  uint64_t v74 = v67;
  unint64_t v75 = (*(unsigned __int8 *)(*(void *)v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v73 + 80);
  uint64_t v76 = swift_allocObject();
  *(_OWORD *)(v76 + 16) = v95;
  unint64_t v77 = v76 + v75;
  uint64_t v78 = v73[14];
  v72(v77, v71, v74);
  uint64_t v79 = v97;
  *(void *)(v77 + v78) = v97;
  id v80 = v79;
  unint64_t v81 = sub_1000429E4(v76);
  uint64_t v82 = v113[23];
  uint64_t v83 = v98;
  (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v82 + 16))(v70, v81, v98, v82);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v82 + 8) + 16))(25, v83);
  uint64_t v84 = swift_allocObject();
  uint64_t v85 = v114;
  *(void *)(v84 + 16) = v114;
  *(void *)(v84 + 24) = a2;
  uint64_t v86 = *(void (**)(void (*)(uint64_t, void *, char), uint64_t, uint64_t, uint64_t))(v82 + 32);
  swift_retain();
  id v87 = a2;
  v86(sub_10005F2D8, v84, v83, v82);
  sub_100023228(0, (unint64_t *)&unk_100095F20);
  int64_t v88 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v89 = swift_allocObject();
  uint64_t v90 = v99;
  *(void *)(v89 + 16) = v85;
  *(void *)(v89 + 24) = v90;
  unint64_t v117 = sub_10005F2E8;
  uint64_t v118 = v89;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v116 = sub_10003D02C;
  *((void *)&v116 + 1) = &unk_10008BD88;
  unint64_t v91 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  unint64_t v92 = v109;
  static DispatchQoS.unspecified.getter();
  *(void *)&long long aBlock = &_swiftEmptyArrayStorage;
  sub_100054E98();
  sub_1000222D4((uint64_t *)&unk_100095F30);
  sub_100054EF0();
  int64_t v93 = v105;
  uint64_t v94 = v108;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v91);

  swift_unknownObjectRelease();
  sub_100022764(v103, v104);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v93, v94);
  (*(void (**)(char *, uint64_t))(v110 + 8))(v92, v106);
  (*(void (**)(char *, uint64_t))(v102 + 8))(v111, v112);
  return swift_release();
}

uint64_t *sub_100057D90()
{
  uint64_t v1 = *v0;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*v0 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 200));
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 208));
  sub_10002AE2C((uint64_t)v0 + *(void *)(*v0 + 216));
  sub_10002AE2C((uint64_t)v0 + *(void *)(*v0 + 224));

  return v0;
}

uint64_t sub_100057ECC()
{
  sub_100057D90();
  return swift_deallocClassInstance();
}

uint64_t _s15ShareDispatcherCMa(uint64_t a1, uint64_t a2)
{
  return _swift_getGenericMetadata(a1, a2, &_s15ShareDispatcherCMn);
}

uint64_t sub_100057F3C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v84 = a3;
  uint64_t v94 = a2;
  id v80 = (void *)*v3;
  uint64_t v5 = v80;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v90 = *(void *)(v6 - 8);
  uint64_t v91 = v6;
  __chkstk_darwin(v6, v7);
  int64_t v88 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for DispatchQoS();
  uint64_t v87 = *(void *)(v89 - 8);
  uint64_t v10 = __chkstk_darwin(v89, v9);
  uint64_t v85 = v3;
  uint64_t v86 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = v5[15];
  uint64_t v82 = *(void *)(v83 - 8);
  uint64_t v93 = *(void *)(v82 + 64);
  __chkstk_darwin(v10, v12);
  unint64_t v81 = (char *)&v65 - v13;
  if (qword_1000950C8 != -1) {
    goto LABEL_17;
  }
  while (1)
  {
    uint64_t v14 = type metadata accessor for Logger();
    sub_100022718(v14, (uint64_t)qword_100097490);
    swift_bridgeObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v18 = Set.description.getter();
      unint64_t v20 = v19;
      swift_bridgeObjectRelease();
      uint64_t v95 = sub_100035724(v18, v20, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Fetching share participants with Apple IDs: %{public}s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v21 = *(void *)(a1 + 16);
    uint64_t v22 = &_swiftEmptyArrayStorage;
    if (!v21) {
      break;
    }
    aBlock[0] = (uint64_t)&_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    int64_t v23 = sub_1000467B4(a1);
    int v25 = v24;
    char v27 = v26 & 1;
    while ((v23 & 0x8000000000000000) == 0 && v23 < 1 << *(unsigned char *)(a1 + 32))
    {
      if (((*(void *)(a1 + 56 + (((unint64_t)v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
        goto LABEL_15;
      }
      if (*(_DWORD *)(a1 + 36) != v25) {
        goto LABEL_16;
      }
      id v28 = objc_allocWithZone((Class)CKUserIdentityLookupInfo);
      swift_bridgeObjectRetain();
      NSString v29 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v28 initWithEmailAddress:v29];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      int64_t v30 = sub_100046854(v23, v25, v27 & 1, a1);
      int64_t v23 = v30;
      int v25 = v31;
      char v27 = v32 & 1;
      if (!--v21)
      {
        sub_100046938(v30, v31, v32 & 1);
        uint64_t v22 = (void *)aBlock[0];
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    swift_once();
  }
LABEL_13:
  char v33 = v80;
  uint64_t v34 = v80[12];
  uint64_t v79 = swift_allocBox();
  uint64_t v35 = v33[19];
  unint64_t v36 = *(void (**)(void *, uint64_t, uint64_t))(v35 + 32);
  uint64_t v92 = v37;
  v36(v22, v34, v35);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v35 + 8) + 16))(25, v34);
  uint64_t v38 = v82;
  uint64_t v78 = *(void (**)(char *, uint64_t, uint64_t))(v82 + 16);
  long long v39 = v81;
  uint64_t v40 = v83;
  v78(v81, v94, v83);
  uint64_t v41 = *(unsigned __int8 *)(v38 + 80);
  uint64_t v77 = v41 | 7;
  uint64_t v42 = (char *)swift_allocObject();
  uint64_t v76 = v33[10];
  *((void *)v42 + 2) = v76;
  uint64_t v75 = v33[11];
  *((void *)v42 + 3) = v75;
  *((void *)v42 + 4) = v34;
  uint64_t v74 = v33[13];
  *((void *)v42 + 5) = v74;
  uint64_t v73 = v33[14];
  *((void *)v42 + 6) = v73;
  *((void *)v42 + 7) = v40;
  uint64_t v72 = v33[16];
  *((void *)v42 + 8) = v72;
  uint64_t v71 = v33[17];
  *((void *)v42 + 9) = v71;
  uint64_t v70 = v33[18];
  *((void *)v42 + 10) = v70;
  *((void *)v42 + 11) = v35;
  uint64_t v69 = v33[20];
  *((void *)v42 + 12) = v69;
  uint64_t v68 = v33[21];
  *((void *)v42 + 13) = v68;
  uint64_t v67 = v33[22];
  *((void *)v42 + 14) = v67;
  uint64_t v66 = v33[23];
  *((void *)v42 + 15) = v66;
  uint64_t v43 = v33[24];
  *((void *)v42 + 16) = v43;
  uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
  v44(&v42[(v41 + 136) & ~v41], v39, v40);
  (*(void (**)(void (*)(uint64_t, uint64_t), char *, uint64_t, uint64_t))(v35 + 48))(sub_1000621E0, v42, v34, v35);
  v78(v39, v94, v40);
  uint64_t v45 = (v41 + 144) & ~v41;
  unint64_t v46 = (v93 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
  os_log_type_t v47 = (char *)swift_allocObject();
  uint64_t v48 = v75;
  *((void *)v47 + 2) = v76;
  *((void *)v47 + 3) = v48;
  uint64_t v49 = v74;
  *((void *)v47 + 4) = v34;
  *((void *)v47 + 5) = v49;
  *((void *)v47 + 6) = v73;
  *((void *)v47 + 7) = v40;
  uint64_t v50 = v71;
  *((void *)v47 + 8) = v72;
  *((void *)v47 + 9) = v50;
  *((void *)v47 + 10) = v70;
  *((void *)v47 + 11) = v35;
  uint64_t v51 = v68;
  *((void *)v47 + 12) = v69;
  *((void *)v47 + 13) = v51;
  uint64_t v52 = v66;
  *((void *)v47 + 14) = v67;
  *((void *)v47 + 15) = v52;
  *((void *)v47 + 16) = v43;
  uint64_t v53 = v85;
  *((void *)v47 + 17) = v85;
  v44(&v47[v45], v39, v40);
  uint64_t v54 = v84;
  *(void *)&v47[v46] = v84;
  uint64_t v55 = *(void (**)(uint64_t (*)(uint64_t, char), char *, uint64_t, uint64_t))(v35 + 72);
  swift_retain();
  id v56 = v54;
  v55(sub_100062348, v47, v34, v35);
  sub_100023228(0, (unint64_t *)&unk_100095F20);
  uint64_t v57 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v58 = swift_allocObject();
  uint64_t v59 = v79;
  *(void *)(v58 + 16) = v53;
  *(void *)(v58 + 24) = v59;
  aBlock[4] = (uint64_t)sub_1000623B8;
  aBlock[5] = v58;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10003D02C;
  uint64_t aBlock[3] = (uint64_t)&unk_10008BF18;
  id v60 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  uint64_t v61 = v86;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = (uint64_t)&_swiftEmptyArrayStorage;
  sub_100054E98();
  sub_1000222D4((uint64_t *)&unk_100095F30);
  sub_100054EF0();
  uint64_t v62 = v88;
  uint64_t v63 = v91;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v60);

  (*(void (**)(char *, uint64_t))(v90 + 8))(v62, v63);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v61, v89);
  return swift_release();
}

void sub_10005889C(int a1, uint64_t a2, id a3, NSObject *a4)
{
  id v6 = [a3 zoneName];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

  if (a2)
  {
    swift_errorRetain();
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100022718(v10, (uint64_t)qword_100097490);
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446466;
      swift_bridgeObjectRetain();
      sub_100035724(v7, v9, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v13 + 12) = 2082;
      swift_errorRetain();
      sub_1000222D4(&qword_100095330);
      uint64_t v14 = String.init<A>(describing:)();
      sub_100035724(v14, v15, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failed to stop sharing %{public}s: %{public}s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100022718(v16, (uint64_t)qword_100097490);
    swift_bridgeObjectRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      unint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)unint64_t v19 = 136446210;
      swift_bridgeObjectRetain();
      sub_100035724(v7, v9, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Successfully stopped sharing %{public}s)", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  dispatch_group_leave(a4);
}

void sub_100058C84(void (*a1)(uint64_t))
{
  if (qword_1000950C8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100022718(v2, (uint64_t)qword_100097490);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Finished resetting sharing permissions.", v5, 2u);
    swift_slowDealloc();
  }

  if (a1) {
    a1(1);
  }
}

void sub_100058D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v19);
  uint64_t v21 = (char *)&v35 - v20;
  sub_100036FC4(&qword_100095330);
  uint64_t v22 = type metadata accessor for Result();
  __chkstk_darwin(v22, v23);
  int v25 = (uint64_t *)((char *)&v35 - v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))((char *)&v35 - v24, a2, v22);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v27 = *v25;
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_100022718(v28, (uint64_t)qword_100097490);
    swift_errorRetain();
    swift_errorRetain();
    NSString v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      uint64_t v35 = v27;
      uint64_t v36 = v32;
      *(_DWORD *)uint64_t v31 = 136446210;
      swift_errorRetain();
      uint64_t v33 = String.init<A>(describing:)();
      uint64_t v35 = sub_100035724(v33, v34, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to fetch participant: %{public}s", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v18 + 32))(v21, v25, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(a16 + 56))(v21, a9, a16);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, AssociatedTypeWitness);
  }
}

uint64_t sub_100059114(uint64_t a1, char a2, uint64_t a3, uint64_t a4, NSObject *a5)
{
  if ((a2 & 1) == 0) {
    return sub_1000593CC(a4, a5);
  }
  swift_errorRetain();
  if (qword_1000950C8 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100022718(v8, (uint64_t)qword_100097490);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446210;
    swift_errorRetain();
    sub_1000222D4(&qword_100095330);
    uint64_t v12 = String.init<A>(describing:)();
    sub_100035724(v12, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100047944(a1, 1);
    sub_100047944(a1, 1);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to fetch participants: %{public}s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100047944(a1, 1);
    sub_100047944(a1, 1);
  }

  id v14 = [self defaultCenter];
  if (qword_100095108 != -1) {
    swift_once();
  }
  uint64_t v15 = 0x40AC200000000000;
  char v16 = 0;
  [v14 postNotificationName:qword_1000974F0 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

  swift_unknownObjectRelease();
  dispatch_group_leave(a5);
  return sub_100047944(a1, 1);
}

uint64_t sub_1000593CC(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v54 = a2;
  uint64_t v52 = *v2;
  uint64_t v5 = (void *)v52;
  uint64_t v57 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v60 = *(void *)(v57 - 8);
  __chkstk_darwin(v57, v6);
  id v56 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v58 = *(void *)(v8 - 8);
  uint64_t v59 = v8;
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v55 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = v5[15];
  uint64_t v46 = *(void *)(v50 - 8);
  uint64_t v12 = v46;
  uint64_t v51 = *(void *)(v46 + 64);
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v44 - v14;
  uint64_t v16 = v5[13];
  uint64_t v53 = swift_allocBox();
  uint64_t v17 = v5[20];
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v17 + 32);
  uint64_t v49 = v19;
  v18(v16, v17);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(*(void *)(v17 + 8) + 16);
  uint64_t v48 = v16;
  v20(25, v16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_10005F258(AssociatedTypeWitness, AssociatedTypeWitness);
  swift_allocObject();
  uint64_t v45 = static Array._adoptStorage(_:count:)();
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v23 = a1;
  uint64_t v24 = a1;
  uint64_t v25 = v50;
  v22(v15, v24, v50);
  uint64_t v26 = v15;
  os_log_type_t v47 = v15;
  swift_dynamicCast();
  type metadata accessor for Array();
  uint64_t v27 = v48;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 72))(v45, v48, v17);
  v22(v26, v23, v25);
  uint64_t v28 = v46;
  unint64_t v29 = (*(unsigned __int8 *)(v46 + 80) + 152) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
  uint64_t v30 = swift_allocObject();
  uint64_t v31 = v52;
  *(_OWORD *)(v30 + 16) = *(_OWORD *)(v52 + 80);
  *(void *)(v30 + 32) = v5[12];
  *(void *)(v30 + 40) = v27;
  *(void *)(v30 + 48) = v5[14];
  *(void *)(v30 + 56) = v25;
  *(void *)(v30 + 64) = v5[16];
  *(_OWORD *)(v30 + 72) = *(_OWORD *)(v31 + 136);
  *(void *)(v30 + 88) = v5[19];
  *(void *)(v30 + 96) = v17;
  *(void *)(v30 + 104) = v5[21];
  *(_OWORD *)(v30 + 112) = *(_OWORD *)(v31 + 176);
  uint64_t v32 = v5[24];
  uint64_t v33 = v54;
  *(void *)(v30 + 128) = v32;
  *(void *)(v30 + 136) = v33;
  *(void *)(v30 + 144) = v3;
  (*(void (**)(unint64_t, char *, uint64_t))(v28 + 32))(v30 + v29, v47, v25);
  unint64_t v34 = *(void (**)(uint64_t (*)(uint64_t, void (**)(char *, uint64_t *, uint64_t)), uint64_t, uint64_t, uint64_t))(v17 + 48);
  id v35 = v33;
  swift_retain();
  v34(sub_10005F3BC, v30, v27, v17);
  sub_100023228(0, (unint64_t *)&unk_100095F20);
  uint64_t v36 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v37 = swift_allocObject();
  uint64_t v38 = v53;
  *(void *)(v37 + 16) = v3;
  *(void *)(v37 + 24) = v38;
  aBlock[4] = sub_10005F400;
  aBlock[5] = v37;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003D02C;
  uint64_t aBlock[3] = &unk_10008BE00;
  long long v39 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  uint64_t v40 = v55;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_100054E98();
  sub_1000222D4((uint64_t *)&unk_100095F30);
  sub_100054EF0();
  uint64_t v42 = v56;
  uint64_t v41 = v57;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v39);

  (*(void (**)(char *, uint64_t))(v60 + 8))(v42, v41);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v40, v59);
  return swift_release();
}

uint64_t sub_100059A34(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 80);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v7 = &v12[-v6];
  uint64_t v8 = v3[12];
  uint64_t v9 = swift_projectBox();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, a1 + v3[25], v4);
  swift_beginAccess();
  void v13[3] = v8;
  void v13[4] = *(void *)(v3[19] + 8);
  uint64_t v10 = sub_10002B118(v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v10, v9, v8);
  (*(void (**)(uint64_t *, uint64_t))(v3[18] + 72))(v13, v4);
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  return sub_10002AE2C((uint64_t)v13);
}

uint64_t sub_100059C08(uint64_t a1, void (**a2)(char *, uint64_t *, uint64_t), NSObject *a3, void *a4, uint64_t a5)
{
  uint64_t v5 = a4;
  uint64_t v70 = a3;
  uint64_t v78 = a2;
  uint64_t v6 = (void *)*a4;
  uint64_t v7 = (void *)*a4;
  uint64_t AssociatedConformanceWitness = a5;
  uint64_t v77 = (uint64_t)v7;
  uint64_t v8 = v6[15];
  uint64_t v67 = type metadata accessor for Optional();
  uint64_t v72 = *(void (***)(char *, uint64_t))(v67 - 8);
  __chkstk_darwin(v67, v9);
  uint64_t v66 = (char *)&v57 - v10;
  uint64_t v11 = v6[19];
  uint64_t v74 = (uint64_t (*)(uint64_t, uint64_t))v6[12];
  uint64_t v75 = v11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v15 = __chkstk_darwin(AssociatedTypeWitness, v14);
  uint64_t v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = v16;
  uint64_t v19 = __chkstk_darwin(v15, v18);
  uint64_t v68 = (char *)&v57 - v20;
  uint64_t v71 = v8;
  uint64_t v60 = *(void *)(v8 - 8);
  __chkstk_darwin(v19, v21);
  uint64_t v69 = (char *)&v57 - v22;
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v26 = __chkstk_darwin(v23, v25);
  uint64_t v28 = (char *)&v57 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26, v29);
  uint64_t v31 = (char *)&v57 - v30;
  sub_100036FC4(&qword_100095330);
  uint64_t v32 = type metadata accessor for Result();
  __chkstk_darwin(v32, v33);
  id v35 = (uint64_t *)((char *)&v57 - v34);
  (*(void (**)(char *, void, uint64_t))(v36 + 16))((char *)&v57 - v34, v78, v32);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_10005BAAC(*v35, AssociatedConformanceWitness, v70);
    return swift_errorRelease();
  }
  (*(void (**)(char *, uint64_t *, uint64_t))(v24 + 32))(v31, v35, v23);
  uint64_t v58 = v24;
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
  uint64_t v57 = v31;
  v38(v28, v31, v23);
  uint64_t v39 = v71;
  swift_dynamicCast();
  uint64_t v40 = (*(uint64_t (**)(uint64_t))(*(void *)(v77 + 176) + 32))(v39);
  uint64_t v41 = Array.endIndex.getter();
  uint64_t v42 = v68;
  uint64_t v43 = v23;
  if (v41)
  {
    uint64_t v44 = 0;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v74 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
    uint64_t v75 = AssociatedConformanceWitness + 48;
    uint64_t v77 = v40;
    uint64_t v78 = (void (**)(char *, uint64_t *, uint64_t))(v13 + 16);
    uint64_t v63 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v60 + 56);
    unsigned int v64 = (void (**)(char *, char *, uint64_t))(v60 + 16);
    uint64_t v45 = (void (**)(uint64_t, uint64_t))(v72 + 1);
    uint64_t v72 = (void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v73 = (void (**)(char *, char *, uint64_t))(v13 + 32);
    unint64_t v61 = 0x8000000100075E40;
    uint64_t v62 = v45;
    uint64_t v65 = v23;
    do
    {
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v42, v40+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(void *)(v13 + 72) * v44, AssociatedTypeWitness);
        uint64_t v47 = v44 + 1;
        if (__OFADD__(v44, 1)) {
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
        if (v59 != 8)
        {
          __break(1u);
          return result;
        }
        uint64_t v79 = result;
        (*v78)(v42, &v79, AssociatedTypeWitness);
        swift_unknownObjectRelease();
        uint64_t v47 = v44 + 1;
        if (__OFADD__(v44, 1))
        {
LABEL_13:
          __break(1u);
          break;
        }
      }
      (*v73)(v17, v42, AssociatedTypeWitness);
      if (v74(AssociatedTypeWitness, AssociatedConformanceWitness) != 1)
      {
        uint64_t v48 = AssociatedTypeWitness;
        uint64_t v49 = v13;
        uint64_t v50 = v5;
        uint64_t v51 = v70;
        dispatch_group_enter(v70);
        uint64_t v52 = v17;
        uint64_t v53 = (uint64_t)v66;
        uint64_t v54 = v71;
        (*v64)(v66, v69, v71);
        (*v63)(v53, 0, 1, v54);
        uint64_t v55 = v51;
        uint64_t v5 = v50;
        uint64_t v13 = v49;
        uint64_t AssociatedTypeWitness = v48;
        uint64_t v43 = v65;
        sub_10005A370(v52, v53, 0xD000000000000030, v61, v55);
        uint64_t v56 = v53;
        uint64_t v17 = v52;
        uint64_t v42 = v68;
        (*v62)(v56, v67);
      }
      (*v72)(v17, AssociatedTypeWitness);
      uint64_t v40 = v77;
      ++v44;
    }
    while (v47 != Array.endIndex.getter());
  }
  swift_bridgeObjectRelease();
  dispatch_group_leave(v70);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v57, v43);
  return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v69, v71);
}

void sub_10005A370(char *a1, uint64_t a2, uint64_t a3, unint64_t a4, NSObject *a5)
{
  uint64_t v6 = v5;
  uint64_t v169 = a3;
  uint64_t v149 = a2;
  unint64_t v170 = a1;
  uint64_t v9 = *v5;
  uint64_t v10 = *v5;
  uint64_t v11 = sub_1000222D4(&qword_100095D90);
  __chkstk_darwin(v11 - 8, v12);
  unint64_t v148 = (char *)&v143 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = *(void *)(v9 + 120);
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v155 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v15);
  os_log_type_t v150 = (char *)&v143 - v16;
  uint64_t v17 = sub_1000222D4(&qword_100095C08);
  __chkstk_darwin(v17 - 8, v18);
  uint64_t v146 = (char *)&v143 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v159 = *(void (***)(void, void))(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v20);
  unint64_t v158 = (char *)&v143 - v21;
  uint64_t v22 = swift_checkMetadataState();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v25 = __chkstk_darwin(v22, v24);
  uint64_t v153 = (uint64_t)&v143 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v25, v27);
  os_log_type_t v152 = (char *)&v143 - v29;
  uint64_t v31 = __chkstk_darwin(v28, v30);
  id v161 = (char *)&v143 - v32;
  uint64_t v34 = __chkstk_darwin(v31, v33);
  uint64_t v162 = (char *)&v143 - v35;
  __chkstk_darwin(v34, v36);
  uint64_t v38 = (char *)&v143 - v37;
  if (qword_1000950C8 != -1) {
    swift_once();
  }
  uint64_t v39 = type metadata accessor for Logger();
  uint64_t v40 = sub_100022718(v39, (uint64_t)qword_100097490);
  unint64_t v163 = *(void (**)(uint64_t, char *, uint64_t))(v23 + 16);
  v163((uint64_t)v38, v170, v22);
  swift_bridgeObjectRetain_n();
  uint64_t v166 = v40;
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.default.getter();
  LODWORD(v154) = v42;
  BOOL v43 = os_log_type_enabled(v41, v42);
  uint64_t v165 = v23 + 16;
  dispatch_group_t v157 = a5;
  unint64_t v147 = v6;
  uint64_t v145 = v10;
  uint64_t v164 = v23;
  uint64_t v156 = v14;
  if (v43)
  {
    uint64_t v44 = swift_slowAlloc();
    uint64_t v168 = a4;
    uint64_t v45 = v44;
    os_log_t v144 = (os_log_t)swift_slowAlloc();
    uint64_t v172 = (uint64_t)v144;
    *(_DWORD *)uint64_t v45 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v171 = sub_100035724(v169, v168, &v172);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v45 + 12) = 2082;
    uint64_t v46 = v23;
    uint64_t v47 = v163;
    v163((uint64_t)v162, v38, v22);
    uint64_t v48 = String.init<A>(describing:)();
    uint64_t v171 = sub_100035724(v48, v49, &v172);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v50 = *(void (**)(char *, uint64_t))(v46 + 8);
    v50(v38, v22);
    _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v154, "Sending %{public}s to participant: %{public}s", (uint8_t *)v45, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a4 = v168;
    swift_slowDealloc();

    uint64_t v51 = v47;
  }
  else
  {
    swift_bridgeObjectRelease_n();
    uint64_t v50 = *(void (**)(char *, uint64_t))(v23 + 8);
    v50(v38, v22);

    uint64_t v51 = v163;
  }
  uint64_t v52 = v158;
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v22, AssociatedConformanceWitness);
  uint64_t v53 = AssociatedTypeWitness;
  uint64_t v54 = swift_getAssociatedConformanceWitness();
  uint64_t v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v54 + 8))(v53, v54);
  ((void (**)(char *, uint64_t))v159)[1](v52, v53);
  uint64_t v56 = v161;
  if (!v55) {
    goto LABEL_33;
  }
  id v57 = [v55 emailAddress];
  if (!v57)
  {
    id v57 = [v55 phoneNumber];
    if (!v57)
    {

LABEL_33:
      uint64_t v111 = v153;
      v51(v153, v170, v22);
      uint64_t v112 = Logger.logObject.getter();
      os_log_type_t v113 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v112, v113))
      {
        char v154 = (void (*)(uint64_t, uint64_t))v50;
        id v114 = (uint8_t *)swift_slowAlloc();
        uint64_t v172 = swift_slowAlloc();
        *(_DWORD *)id v114 = 136446210;
        v51((uint64_t)v162, (char *)v111, v22);
        uint64_t v115 = String.init<A>(describing:)();
        uint64_t v171 = sub_100035724(v115, v116, &v172);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v154(v111, v22);
        _os_log_impl((void *)&_mh_execute_header, v112, v113, "Failed to create invitation for: %{public}s", v114, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        v50((char *)v111, v22);
      }

      unint64_t v117 = v157;
      id v118 = [self defaultCenter];
      if (qword_100095108 != -1) {
        swift_once();
      }
      uint64_t v172 = 0x40AC200000000000;
      char v173 = 0;
      [v118 postNotificationName:qword_1000974F0 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

      swift_unknownObjectRelease();
      dispatch_group_leave(v117);
      return;
    }
  }
  unint64_t v159 = (void (**)(void, void))v55;
  uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t AssociatedTypeWitness = v59;

  v51((uint64_t)v56, v170, v22);
  swift_bridgeObjectRetain_n();
  uint64_t v60 = Logger.logObject.getter();
  os_log_type_t v61 = static os_log_type_t.default.getter();
  int v62 = v61;
  BOOL v63 = os_log_type_enabled(v60, v61);
  char v154 = (void (*)(uint64_t, uint64_t))v50;
  unint64_t v158 = (char *)v58;
  if (v63)
  {
    uint64_t v64 = swift_slowAlloc();
    LODWORD(v153) = v62;
    uint64_t v65 = v64;
    uint64_t v168 = swift_slowAlloc();
    uint64_t v172 = v168;
    *(_DWORD *)uint64_t v65 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v171 = sub_100035724(v169, a4, &v172);
    os_log_t v144 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v65 + 12) = 2082;
    v51((uint64_t)v162, v56, v22);
    uint64_t v66 = String.init<A>(describing:)();
    uint64_t v171 = sub_100035724(v66, v67, &v172);
    uint64_t v58 = (uint64_t)v158;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v50(v56, v22);
    uint64_t v60 = v144;
    _os_log_impl((void *)&_mh_execute_header, v144, (os_log_type_t)v153, "Sending %{public}s to participant: %{public}s", (uint8_t *)v65, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    v50(v56, v22);
  }

  uint64_t v68 = v156;
  uint64_t v69 = AssociatedTypeWitness;
  id v161 = (char *)String._bridgeToObjectiveC()();
  uint64_t v70 = v155;
  if (v169 == 0xD000000000000030 && a4 == 0x8000000100075E40
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v71 = (void *)(*(uint64_t (**)(uint64_t))(AssociatedConformanceWitness + 40))(v22);
    if (v71)
    {
      uint64_t v72 = v71;
      uint64_t AssociatedConformanceWitness = v22;
      id v73 = [v71 sharingInvitationData];

      uint64_t v74 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v76 = v75;

      uint64_t v77 = v150;
      (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v150, v149, v68);
      uint64_t v78 = v151;
      uint64_t v79 = *(void *)(v151 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v151) == 1)
      {
        swift_bridgeObjectRelease();
        sub_100022764(v74, v76);
        (*(void (**)(char *, uint64_t))(v70 + 8))(v77, v68);
      }
      else
      {
        uint64_t v96 = v74;
        uint64_t v168 = a4;
        id v97 = v77;
        uint64_t v98 = (uint64_t)v146;
        (*(void (**)(uint64_t))(*(void *)(v145 + 176) + 40))(v78);
        (*(void (**)(char *, uint64_t))(v79 + 8))(v97, v78);
        uint64_t v99 = type metadata accessor for URL();
        uint64_t v100 = *(void *)(v99 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v100 + 48))(v98, 1, v99) != 1)
        {
          uint64_t v119 = URL.absoluteString.getter();
          uint64_t v121 = v120;
          (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v98, v99);
          sub_1000222D4(&qword_100095D98);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_100073720;
          strcpy((char *)(inited + 32), "invitationData");
          *(unsigned char *)(inited + 47) = -18;
          *(void *)(inited + 48) = v96;
          *(void *)(inited + 56) = v76;
          uint64_t v153 = v96;
          *(void *)(inited + 72) = &type metadata for Data;
          *(void *)(inited + 80) = 0xD000000000000018;
          *(void *)(inited + 120) = &type metadata for String;
          *(void *)(inited + 88) = 0x8000000100075EC0;
          *(void *)(inited + 96) = v119;
          *(void *)(inited + 104) = v121;
          sub_1000226C0(v96, v76);
          unint64_t v123 = sub_100042BD8(inited);
          sub_1000561E0(v123);
          swift_bridgeObjectRelease();
          id v124 = objc_allocWithZone((Class)IDSDictionaryInvitationContext);
          swift_bridgeObjectRetain();
          Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          NSString v126 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v127 = [v124 initWithDictionary:isa schema:v126];

          os_log_type_t v128 = (void *)((char *)v147 + *(void *)(*v147 + 224));
          uint64_t v129 = v128[3];
          uint64_t v130 = v128[4];
          unint64_t v170 = (char *)sub_10002ADE8(v128, v129);
          uint64_t v131 = (uint64_t)v148;
          static Date.distantFuture.getter();
          uint64_t v132 = type metadata accessor for Date();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v132 - 8) + 56))(v131, 0, 1, v132);
          unint64_t v133 = (void *)swift_allocObject();
          v133[2] = v158;
          v133[3] = v69;
          dispatch_group_t v134 = v157;
          v133[4] = v157;
          id v135 = v161;
          unint64_t v136 = *(void (**)(id, uint64_t, id, void (*)(uint64_t, uint64_t), void *, uint64_t, uint64_t))(v130 + 32);
          id v137 = v127;
          uint64_t v138 = v134;
          v136(v135, v131, v137, sub_100062464, v133, v129, v130);

          swift_release();
          sub_100022764(v153, v76);
          sub_10002BDA0(v131, &qword_100095D90);
          return;
        }
        swift_bridgeObjectRelease();
        sub_100022764(v74, v76);
        sub_10002BDA0(v98, &qword_100095C08);
      }
      uint64_t v22 = AssociatedConformanceWitness;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    Swift::String v101 = (void (*)(char *, char *, uint64_t))v163;
    uint64_t v102 = v152;
    v163((uint64_t)v152, v170, v22);
    uint64_t v103 = Logger.logObject.getter();
    uint64_t v104 = v22;
    os_log_type_t v105 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v103, v105))
    {
      uint64_t v106 = (uint8_t *)swift_slowAlloc();
      uint64_t v172 = swift_slowAlloc();
      *(_DWORD *)uint64_t v106 = 136446210;
      unint64_t v170 = (char *)(v106 + 4);
      v101(v162, v102, v104);
      uint64_t v107 = String.init<A>(describing:)();
      uint64_t v171 = sub_100035724(v107, v108, &v172);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v154((uint64_t)v102, v104);
      _os_log_impl((void *)&_mh_execute_header, v103, v105, "Failed to create share invitation for: %{public}s", v106, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v154((uint64_t)v102, v104);
    }

    uint64_t v109 = v157;
    id v110 = [self defaultCenter];
    if (qword_100095108 != -1) {
      swift_once();
    }
    uint64_t v172 = 0x40AC200000000000;
    char v173 = 0;
    [v110 postNotificationName:qword_1000974F0 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

    swift_unknownObjectRelease();
    dispatch_group_leave(v109);
  }
  else if (v169 == 0xD000000000000037 && a4 == 0x8000000100075E80 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    sub_100042D10((uint64_t)&_swiftEmptyArrayStorage);
    id v80 = objc_allocWithZone((Class)IDSDictionaryInvitationContext);
    swift_bridgeObjectRetain();
    Class v81 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v82 = v58;
    NSString v83 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v84 = [v80 initWithDictionary:v81 schema:v83];

    uint64_t v85 = (void *)((char *)v147 + *(void *)(*v147 + 224));
    uint64_t v86 = v85[3];
    uint64_t v87 = v85[4];
    sub_10002ADE8(v85, v86);
    uint64_t v88 = (uint64_t)v148;
    static Date.distantFuture.getter();
    uint64_t v89 = type metadata accessor for Date();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v89 - 8) + 56))(v88, 0, 1, v89);
    uint64_t v90 = (void *)swift_allocObject();
    v90[2] = v82;
    v90[3] = v69;
    dispatch_group_t v91 = v157;
    v90[4] = v157;
    uint64_t v92 = *(void (**)(char *, uint64_t, id, void (*)(uint64_t, uint64_t), void *, uint64_t, uint64_t))(v87 + 32);
    uint64_t v93 = v91;
    id v94 = v84;
    id v95 = v161;
    v92(v161, v88, v94, sub_10005F40C, v90, v86, v87);

    swift_release();
    sub_10002BDA0(v88, &qword_100095D90);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    id v139 = Logger.logObject.getter();
    os_log_type_t v140 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v139, v140))
    {
      id v141 = (uint8_t *)swift_slowAlloc();
      uint64_t v172 = swift_slowAlloc();
      *(_DWORD *)id v141 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v171 = sub_100035724(v169, a4, &v172);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v139, v140, "Tried to send invitation using unknown schema: %{public}s", v141, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v142 = v159;
    dispatch_group_leave(v157);
  }
}

void sub_10005BAAC(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v149 = a3;
  uint64_t v140 = a2;
  uint64_t v5 = *v3;
  uint64_t v6 = *v3;
  uint64_t v7 = (void (**)(uint64_t, uint64_t))(*v3)[14];
  uint64_t v143 = (uint8_t *)(*v3)[21];
  swift_getAssociatedTypeWitness();
  uint64_t v139 = type metadata accessor for Optional();
  uint64_t v9 = __chkstk_darwin(v139, v8);
  uint64_t v132 = (char *)&v125 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  unint64_t v136 = (char *)&v125 - v13;
  uint64_t v14 = v5[15];
  unint64_t v141 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  id v127 = (char *)&v125 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15, v17);
  os_log_type_t v128 = (char *)&v125 - v19;
  __chkstk_darwin(v18, v20);
  id v137 = (char *)&v125 - v21;
  uint64_t v150 = v22;
  uint64_t v147 = type metadata accessor for Optional();
  uint64_t v138 = *(void *)(v147 - 8);
  uint64_t v24 = __chkstk_darwin(v147, v23);
  uint64_t v131 = (char *)&v125 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  id v135 = (char *)&v125 - v28;
  __chkstk_darwin(v27, v29);
  uint64_t v145 = (char *)&v125 - v30;
  uint64_t v31 = v5[19];
  unint64_t v148 = v3;
  id v142 = (void (**)(char *, char *, uint64_t))v5[12];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v146 = *(uint8_t **)(AssociatedTypeWitness - 8);
  uint64_t v34 = __chkstk_darwin(AssociatedTypeWitness, v33);
  os_log_t v144 = (void (**)(char *, uint64_t))((char *)&v125 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v126 = v35;
  __chkstk_darwin(v34, v36);
  uint64_t v151 = (char *)&v125 - v37;
  uint64_t v38 = type metadata accessor for Optional();
  uint64_t v39 = *(void (***)(char *, uint64_t))(v38 - 8);
  uint64_t v41 = __chkstk_darwin(v38, v40);
  BOOL v43 = (char *)&v125 - v42;
  uint64_t v45 = __chkstk_darwin(v41, v44);
  dispatch_group_t v134 = (char *)&v125 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = __chkstk_darwin(v45, v47);
  unint64_t v133 = (char *)&v125 - v49;
  __chkstk_darwin(v48, v50);
  uint64_t v52 = (char *)&v125 - v51;
  v153[0] = a1;
  uint64_t v53 = a1;
  uint64_t v55 = v54;
  swift_errorRetain();
  sub_1000222D4(&qword_100095330);
  int v56 = swift_dynamicCast();
  id v57 = (void (*)(char *, uint64_t, uint64_t, void (**)(uint64_t, uint64_t)))*((void *)v55 + 7);
  if (!v56)
  {
LABEL_15:
    v57(v43, 1, 1, v7);
    v39[1](v43, v38);
    sub_100050CE4(v53, v149);
    return;
  }
  uint64_t v125 = v31;
  uint64_t v130 = v6;
  v57(v43, 0, 1, v7);
  uint64_t v58 = (char *)*((void *)v55 + 4);
  ((void (*)(char *, char *, void (**)(uint64_t, uint64_t)))v58)(v52, v43, v7);
  uint64_t v59 = (uint64_t)v143;
  uint64_t v60 = (uint64_t (*)(void, uint8_t *))*((void *)v143 + 6);
  uint64_t v129 = v52;
  uint64_t v61 = v60(v7, v143);
  switch(v61)
  {
    case 14:
      dispatch_group_t v134 = v55;
      uint64_t v68 = v129;
      (*(void (**)(void, uint64_t))(v59 + 40))(v7, v59);
      uint64_t v69 = v135;
      uint64_t v70 = v150;
      char v71 = swift_dynamicCast();
      unint64_t v72 = v141;
      id v73 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v141 + 56);
      if (v71)
      {
        uint64_t v151 = v58;
        v73(v69, 0, 1, v70);
        uint64_t v146 = *(uint8_t **)(v72 + 32);
        ((void (*)(char *, char *, uint64_t))v146)(v137, v69, v70);
        (*(void (**)(void, uint64_t))(v59 + 32))(v7, v59);
        uint64_t v74 = v131;
        if (swift_dynamicCast())
        {
          v73(v74, 0, 1, v70);
          uint64_t v75 = (uint64_t)v128;
          ((void (*)(char *, char *, uint64_t))v146)(v128, v74, v70);
          if (qword_1000950C8 != -1) {
            swift_once();
          }
          uint64_t v76 = type metadata accessor for Logger();
          sub_100022718(v76, (uint64_t)qword_100097490);
          unint64_t v77 = v141;
          uint64_t v78 = v127;
          uint64_t v79 = (uint64_t)v137;
          (*(void (**)(char *, char *, uint64_t))(v141 + 16))(v127, v137, v70);
          id v80 = Logger.logObject.getter();
          os_log_type_t v81 = static os_log_type_t.debug.getter();
          uint64_t v82 = v70;
          if (os_log_type_enabled(v80, v81))
          {
            NSString v83 = (uint8_t *)swift_slowAlloc();
            uint64_t v147 = swift_slowAlloc();
            v153[0] = v147;
            *(_DWORD *)NSString v83 = 136446210;
            uint64_t v139 = (uint64_t)v7;
            uint64_t v146 = v83 + 4;
            id v84 = v130;
            uint64_t v151 = (char *)v130[22];
            uint64_t v85 = (void *)(*(uint64_t (**)(uint64_t))(*((void *)v151 + 1) + 8))(v70);
            id v86 = [v85 zoneID];

            id v87 = [v86 zoneName];
            uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v90 = v89;

            uint64_t v91 = v88;
            uint64_t v79 = (uint64_t)v137;
            uint64_t v152 = sub_100035724(v91, v90, v153);
            uint64_t v92 = v139;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            uint64_t v75 = (uint64_t)v128;
            uint64_t v82 = v150;
            swift_bridgeObjectRelease();
            uint64_t v93 = *(void (**)(char *, uint64_t))(v77 + 8);
            v93(v127, v82);
            _os_log_impl((void *)&_mh_execute_header, v80, v81, "Updating share for: %{public}s", v83, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v94 = (uint64_t)v151;
          }
          else
          {
            uint64_t v93 = *(void (**)(char *, uint64_t))(v77 + 8);
            v93(v78, v82);

            uint64_t v92 = (uint64_t)v7;
            id v84 = v130;
            uint64_t v94 = v130[22];
          }
          id v124 = v134;
          if (sub_10005FF80(v79, v75, v84[10], v84[11], (uint64_t)v142, v84[13], v92, v82, v84[16], v84[17], v84[18], v125, v84[20], (uint64_t)v143, v94, v84[23], v84[24]))sub_1000593CC(v79, v149); {
          else
          }
            dispatch_group_leave(v149);
          v93((char *)v75, v82);
          v93((char *)v79, v82);
          (*((void (**)(char *, uint64_t))v124 + 1))(v129, v92);
          return;
        }
        v73(v74, 1, 1, v70);
        (*(void (**)(char *, uint64_t))(v72 + 8))(v137, v70);
        uint64_t v69 = v74;
        uint64_t v68 = v129;
        uint64_t v58 = v151;
      }
      else
      {
        v73(v69, 1, 1, v70);
      }
      (*(void (**)(char *, uint64_t))(v138 + 8))(v69, v147);
      uint64_t v120 = v133;
      uint64_t v119 = v134;
      (*((void (**)(char *, char *, void (**)(uint64_t, uint64_t)))v134 + 2))(v133, v68, v7);
      uint64_t v121 = _getErrorEmbeddedNSError<A>(_:)();
      if (v121)
      {
        uint64_t v122 = v121;
        (*((void (**)(char *, void))v119 + 1))(v120, v7);
      }
      else
      {
        uint64_t v122 = swift_allocError();
        ((void (*)(uint64_t, char *, void (**)(uint64_t, uint64_t)))v58)(v123, v120, v7);
      }
      sub_100050CE4(v122, v149);
      swift_errorRelease();
      (*((void (**)(char *, void))v119 + 1))(v68, v7);
      return;
    case 26:
      id v95 = v130;
      uint64_t v96 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(v130[22] + 8) + 8))(v150);
      id v97 = [v96 zoneID];

      if (qword_1000950C8 != -1) {
        swift_once();
      }
      dispatch_group_t v134 = v55;
      uint64_t v139 = (uint64_t)v7;
      uint64_t v98 = type metadata accessor for Logger();
      sub_100022718(v98, (uint64_t)qword_100097490);
      id v99 = v97;
      uint64_t v100 = Logger.logObject.getter();
      os_log_type_t v101 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v100, v101))
      {
        uint64_t v102 = (uint8_t *)swift_slowAlloc();
        v153[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v102 = 136446210;
        id v103 = [v99 zoneName];
        uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v106 = v105;

        uint64_t v152 = sub_100035724(v104, v106, v153);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        uint64_t v107 = v149;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v100, v101, "%{public}s was not found, attempting to re-save it.", v102, 0xCu);
        swift_arrayDestroy();
        id v95 = v130;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v107 = v149;
      }
      id v112 = [objc_allocWithZone((Class)CKRecordZone) initWithZoneID:v99];
      [v112 setCapabilities:8];
      uint64_t v113 = swift_allocObject();
      *(void *)(v113 + 16) = v107;
      uint64_t v114 = v95[11];
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      unint64_t v116 = *(void (**)(id, void (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
      unint64_t v117 = v107;
      v116(v112, sub_100053138, v113, v114, AssociatedConformanceWitness);

      swift_release();
      goto LABEL_32;
    case 33:
      dispatch_group_t v134 = v55;
      uint64_t v139 = (uint64_t)v7;
      uint64_t v38 = (*(uint64_t (**)(uint64_t))(v130[22] + 32))(v150);
      if (Array.endIndex.getter())
      {
        uint64_t v62 = 0;
        uint64_t v53 = (uint64_t)v145;
        id v142 = (void (**)(char *, char *, uint64_t))(v146 + 32);
        uint64_t v143 = v146 + 16;
        BOOL v43 = (char *)(v141 + 56);
        uint64_t v7 = (void (**)(uint64_t, uint64_t))(v138 + 8);
        BOOL v63 = (void (**)(char *, uint64_t))(v146 + 8);
        unint64_t v141 = 0x8000000100075E80;
        uint64_t v39 = v144;
        do
        {
          Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
          Array._checkSubscript(_:wasNativeTypeChecked:)();
          if (IsNativeType)
          {
            (*((void (**)(char *, unint64_t, uint64_t))v146 + 2))(v151, v38 + ((v146[80] + 32) & ~(unint64_t)v146[80]) + *((void *)v146 + 9) * v62, AssociatedTypeWitness);
            uint64_t v65 = v62 + 1;
            if (__OFADD__(v62, 1)) {
              goto LABEL_14;
            }
          }
          else
          {
            uint64_t v67 = _ArrayBuffer._getElementSlowPath(_:)();
            if (v126 != 8)
            {
              __break(1u);
              return;
            }
            v153[0] = v67;
            (*(void (**)(char *, uint64_t *, uint64_t))v143)(v151, v153, AssociatedTypeWitness);
            swift_unknownObjectRelease();
            uint64_t v65 = v62 + 1;
            if (__OFADD__(v62, 1))
            {
LABEL_14:
              __break(1u);
              goto LABEL_15;
            }
          }
          (*v142)((char *)v39, v151, AssociatedTypeWitness);
          uint64_t v66 = v149;
          dispatch_group_enter(v149);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v43)(v53, 1, 1, v150);
          sub_10005A370((char *)v39, v53, 0xD000000000000037, v141, v66);
          (*v7)(v53, v147);
          (*v63)((char *)v39, AssociatedTypeWitness);
          ++v62;
        }
        while (v65 != Array.endIndex.getter());
      }
      swift_bridgeObjectRelease();
      dispatch_group_leave(v149);
LABEL_32:
      (*((void (**)(char *, uint64_t))v134 + 1))(v129, v139);
      return;
  }
  unint64_t v108 = v134;
  uint64_t v109 = v129;
  (*((void (**)(char *, char *, void (**)(uint64_t, uint64_t)))v55 + 2))(v134, v129, v7);
  uint64_t v110 = _getErrorEmbeddedNSError<A>(_:)();
  if (v110)
  {
    uint64_t v111 = v110;
    (*((void (**)(char *, void))v55 + 1))(v108, v7);
  }
  else
  {
    uint64_t v111 = swift_allocError();
    ((void (*)(uint64_t, char *, void (**)(uint64_t, uint64_t)))v58)(v118, v108, v7);
  }
  sub_100050CE4(v111, v149);
  swift_errorRelease();
  (*((void (**)(char *, void))v55 + 1))(v109, v7);
}

uint64_t sub_10005CD00(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 88);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v7 = &v13[-v6];
  uint64_t v8 = v3[13];
  uint64_t v9 = swift_projectBox();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, a1 + v3[26], v4);
  swift_beginAccess();
  v14[3] = v8;
  v14[4] = *(void *)(v3[20] + 8);
  uint64_t v10 = sub_10002B118(v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v10, v9, v8);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v14, v4, AssociatedConformanceWitness);
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  return sub_10002AE2C((uint64_t)v14);
}

void sub_10005CF00(uint64_t a1, uint64_t a2, NSObject *a3)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100022718(v4, (uint64_t)qword_100097490);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446210;
      swift_errorRetain();
      sub_1000222D4(&qword_100095330);
      uint64_t v8 = String.init<A>(describing:)();
      sub_100035724(v8, v9, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to save authorization zone: %{public}s", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      goto LABEL_12;
    }
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100022718(v10, (uint64_t)qword_100097490);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v11, "Successfully saved authorization zone", v12, 2u);
      swift_slowDealloc();
    }
  }

LABEL_12:
  id v13 = [self defaultCenter];
  if (qword_100095108 != -1) {
    swift_once();
  }
  uint64_t v14 = 0x40AC200000000000;
  char v15 = 0;
  [v13 postNotificationName:qword_1000974F0 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

  swift_unknownObjectRelease();
  dispatch_group_leave(a3);
}

uint64_t sub_10005D254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v6);
  uint64_t v8 = (char *)&v29 - v7;
  unint64_t v9 = *(void (**)(void))(AssociatedConformanceWitness + 32);
  swift_checkMetadataState();
  v9();
  uint64_t v10 = swift_getAssociatedConformanceWitness();
  os_log_type_t v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(AssociatedTypeWitness, v10);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
  if (v11)
  {
    id v12 = [v11 emailAddress];
    uint64_t v14 = v29;
    uint64_t v13 = v30;
    if (!v12) {
      goto LABEL_10;
    }
    char v15 = v12;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    if (v16 == v14 && v18 == v13)
    {

      swift_bridgeObjectRelease();
      char v21 = 1;
      return v21 & 1;
    }
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v20)
    {

      char v21 = 1;
    }
    else
    {
LABEL_10:
      id v22 = objc_msgSend(v11, "phoneNumber", v29, v30);
      if (v22)
      {
        uint64_t v23 = v22;
        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v26 = v25;

        if (v24 == v14 && v26 == v13) {
          char v21 = 1;
        }
        else {
          char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        swift_bridgeObjectRelease();
      }
      else
      {

        char v21 = 0;
      }
    }
  }
  else
  {
    char v21 = 0;
  }
  return v21 & 1;
}

void sub_10005D520(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, NSObject *a5)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100022718(v9, (uint64_t)qword_100097490);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446466;
      swift_bridgeObjectRetain();
      uint64_t v22 = sub_100035724(a3, a4, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v12 + 12) = 2082;
      uint64_t v22 = a2;
      swift_errorRetain();
      sub_1000222D4(&qword_100095330);
      uint64_t v13 = String.init<A>(describing:)();
      uint64_t v22 = sub_100035724(v13, v14, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to send invitation to %{public}s: %{public}s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }

    id v19 = [self defaultCenter];
    if (qword_100095108 != -1) {
      swift_once();
    }
    uint64_t v20 = 0x40AC200000000000;
    char v21 = 0;
    [v19 postNotificationName:qword_1000974F0 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

    swift_unknownObjectRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100022718(v15, (uint64_t)qword_100097490);
    swift_bridgeObjectRetain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v22 = sub_100035724(a3, a4, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Successfully sent invitation to %{public}s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  dispatch_group_leave(a5);
}

uint64_t sub_10005D988(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + *(void *)(*(void *)v1 + 224));
  uint64_t v4 = v3[3];
  uint64_t v5 = v3[4];
  sub_10002ADE8(v3, v4);
  return (*(uint64_t (**)(uint64_t, void (*)(uint64_t), void, uint64_t, uint64_t))(v5 + 48))(a1, sub_10005EED8, 0, v4, v5);
}

void sub_10005DA10(uint64_t a1, void *a2, char a3, uint64_t a4, void *a5)
{
  if (a3)
  {
    swift_errorRetain();
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100022718(v13, (uint64_t)qword_100097490);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136446210;
      swift_errorRetain();
      sub_1000222D4(&qword_100095330);
      uint64_t v17 = String.init<A>(describing:)();
      sub_100035724(v17, v18, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000478F8(a2, 1);
      sub_1000478F8(a2, 1);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to fetch share metadata: %{public}s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000478F8(a2, 1);
      sub_1000478F8(a2, 1);
    }

    sub_10005D988((uint64_t)a5);
    sub_1000478F8(a2, 1);
  }
  else
  {
    uint64_t v7 = qword_1000950C8;
    id v8 = a2;
    if (v7 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100022718(v9, (uint64_t)qword_100097490);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Successfully fetched share metadata", v12, 2u);
      swift_slowDealloc();
    }

    sub_10005DD20(v8, a5);
    sub_1000478F8(a2, 0);
  }
}

uint64_t sub_10005DD20(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v30 = a2;
  uint64_t v5 = *v2;
  uint64_t v31 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v34 = *(void *)(v31 - 8);
  __chkstk_darwin(v31, v6);
  id v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v9 - 8);
  uint64_t v33 = v9;
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v5 + 136);
  uint64_t v29 = swift_allocBox();
  sub_1000222D4((uint64_t *)&unk_100095C50);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_100073BB0;
  *(void *)(v14 + 32) = a1;
  aBlock[0] = v14;
  specialized Array._endMutation()();
  uint64_t v15 = aBlock[0];
  uint64_t v16 = *(void **)(v5 + 192);
  uint64_t v17 = (void (*)(uint64_t, uint64_t, void *))v16[2];
  id v18 = a1;
  v17(v15, v13, v16);
  (*(void (**)(uint64_t, uint64_t))(v16[1] + 16))(25, v13);
  uint64_t v19 = swift_allocObject();
  uint64_t v20 = v30;
  *(void *)(v19 + 16) = v3;
  *(void *)(v19 + 24) = v20;
  char v21 = (void (*)(uint64_t (*)(uint64_t, char), uint64_t, uint64_t, void *))v16[4];
  swift_retain();
  id v22 = v20;
  v21(sub_10005F228, v19, v13, v16);
  sub_100023228(0, (unint64_t *)&unk_100095F20);
  uint64_t v23 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v24 = swift_allocObject();
  uint64_t v25 = v29;
  *(void *)(v24 + 16) = v3;
  *(void *)(v24 + 24) = v25;
  aBlock[4] = sub_10005F238;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003D02C;
  uint64_t aBlock[3] = &unk_10008BCC0;
  uint64_t v26 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_100054E98();
  sub_1000222D4((uint64_t *)&unk_100095F30);
  sub_100054EF0();
  uint64_t v27 = v31;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v26);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v27);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v33);
  return swift_release();
}

uint64_t sub_10005E0FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 80);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v7 = &v12[-v6];
  uint64_t v8 = v3[16];
  uint64_t v9 = swift_projectBox();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, a1 + v3[25], v4);
  swift_beginAccess();
  void v13[3] = v8;
  void v13[4] = *(void *)(v3[23] + 8);
  uint64_t v10 = sub_10002B118(v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v10, v9, v8);
  (*(void (**)(uint64_t *, uint64_t))(v3[18] + 72))(v13, v4);
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  return sub_10002AE2C((uint64_t)v13);
}

uint64_t sub_10005E2D0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100022718(v5, (uint64_t)qword_100097490);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136446210;
      swift_errorRetain();
      sub_1000222D4(&qword_100095330);
      uint64_t v9 = String.init<A>(describing:)();
      sub_100035724(v9, v10, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to save verification zone: %{public}s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_10005D988((uint64_t)a4);
    return swift_errorRelease();
  }
  else
  {
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100022718(v11, (uint64_t)qword_100097490);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Successfully saved verification zone", v14, 2u);
      swift_slowDealloc();
    }

    return sub_10005E58C(a4);
  }
}

uint64_t sub_10005E58C(void *a1)
{
  uint64_t v3 = (void *)(v1 + *(void *)(*(void *)v1 + 224));
  uint64_t v4 = v3[3];
  uint64_t v5 = v3[4];
  sub_10002ADE8(v3, v4);
  id v6 = [a1 context];
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  (*(void (**)(void *, id, void (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, v6, sub_100047950, v7, v4, v5);
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t sub_10005E67C(uint64_t a1, char a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100022718(v11, (uint64_t)qword_100097490);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136446210;
      swift_errorRetain();
      sub_1000222D4(&qword_100095330);
      uint64_t v15 = String.init<A>(describing:)();
      sub_100035724(v15, v16, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100047944(a1, 1);
      sub_100047944(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed to accept share: %{public}s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100047944(a1, 1);
      sub_100047944(a1, 1);
    }

    sub_10005D988((uint64_t)a4);
    return sub_100047944(a1, 1);
  }
  else
  {
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100022718(v5, (uint64_t)qword_100097490);
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Successfully accepted share", v8, 2u);
      swift_slowDealloc();
    }

    return sub_10005E58C(a4);
  }
}

uint64_t sub_10005E948(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 80);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(a1, a2);
  os_log_type_t v7 = &v12[-v6];
  uint64_t v8 = v3[17];
  uint64_t v9 = swift_projectBox();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, a1 + v3[25], v4);
  swift_beginAccess();
  void v13[3] = v8;
  void v13[4] = *(void *)(v3[24] + 8);
  unint64_t v10 = sub_10002B118(v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v10, v9, v8);
  (*(void (**)(uint64_t *, uint64_t))(v3[18] + 72))(v13, v4);
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  return sub_10002AE2C((uint64_t)v13);
}

void sub_10005EB1C(uint64_t a1, void *a2)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100022718(v2, (uint64_t)qword_100097490);
    swift_errorRetain();
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 136446210;
      swift_errorRetain();
      sub_1000222D4(&qword_100095330);
      uint64_t v5 = String.init<A>(describing:)();
      sub_100035724(v5, v6, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Failed to accept invitation: %{public}s", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return;
    }
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100022718(v8, (uint64_t)qword_100097490);
    oslog = a2;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446210;
      uint64_t v12 = oslog;
      id v13 = [v12 description];
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v16 = v15;

      sub_100035724(v14, v16, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Successfully accepted invitation %{public}s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
  }
}

void sub_10005EED8(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100022718(v1, (uint64_t)qword_100097490);
    swift_errorRetain();
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v3 = 136446210;
      swift_errorRetain();
      sub_1000222D4(&qword_100095330);
      uint64_t v4 = String.init<A>(describing:)();
      sub_100035724(v4, v5, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Failed to decline invitation: %{public}s", v3, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return;
    }
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_1000950C8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100022718(v6, (uint64_t)qword_100097490);
    oslog = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Successfully declined invitation", v8, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_10005F1A4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_10005F1D4(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10005F63C);
}

uint64_t sub_10005F1BC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_10005F1D4(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10005FD04);
}

uint64_t sub_10005F1D4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a5(a1, a2, a3[10], a3[11], a3[12], a3[13], a3[14], a3[15], a3[16], a3[17], a3[18], a3[19], a3[20], a3[21], a3[22], a3[23], a3[24]);
}

uint64_t sub_10005F228(uint64_t a1, char a2)
{
  return sub_10005E67C(a1, a2 & 1, *(void *)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t sub_10005F238()
{
  return sub_10005E948(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10005F240(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10005F250()
{
  return swift_release();
}

uint64_t sub_10005F258(uint64_t a1, uint64_t a2)
{
  if (swift_isClassType()) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    return sub_1000222D4((uint64_t *)&unk_100095C50);
  }
  else
  {
    return type metadata accessor for _ContiguousArrayStorage(0, a2);
  }
}

uint64_t sub_10005F2CC(uint64_t a1, uint64_t a2)
{
  return sub_10005E2D0(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24));
}

void sub_10005F2D8(uint64_t a1, void *a2, char a3)
{
  sub_10005DA10(a1, a2, a3 & 1, *(void *)(v3 + 16), *(void **)(v3 + 24));
}

uint64_t sub_10005F2E8()
{
  return sub_10005E0FC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10005F2F0()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 152) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10005F3BC(uint64_t a1, void (**a2)(char *, uint64_t *, uint64_t))
{
  return sub_100059C08(a1, a2, *(NSObject **)(v2 + 136), *(void **)(v2 + 144), v2+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 56) - 8) + 80) + 152) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 56) - 8) + 80)));
}

uint64_t sub_10005F400()
{
  return sub_10005CD00(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_10005F40C(uint64_t a1, uint64_t a2)
{
  sub_10005D520(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(NSObject **)(v2 + 32));
}

void sub_10005F430(uint64_t a1, void *a2)
{
  if (qword_1000950C8 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100022718(v3, (uint64_t)qword_100097490);
  id v12 = a2;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446210;
    id v7 = v12;
    id v8 = [v7 description];
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v11 = v10;

    sub_100035724(v9, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Sender canceled invitation %{public}s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_10005F63C(int a1, id a2)
{
  [a2 context];
  self;
  uint64_t v3 = (void *)swift_dynamicCastObjCClass();
  if (v3)
  {
    id v4 = [v3 schemaIdentifier];
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v7 = v6;

    if (v5 == 0xD000000000000030 && v7 == 0x8000000100075E40
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      if (qword_1000950C8 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      sub_100022718(v8, (uint64_t)qword_100097490);
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v9, v10))
      {
        unint64_t v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Receiver accepted share invitation", v11, 2u);
        swift_slowDealloc();
      }

      goto LABEL_10;
    }
    if (v5 == 0xD000000000000037 && v7 == 0x8000000100075E80
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      if (qword_1000950C8 != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      sub_100022718(v21, (uint64_t)qword_100097490);
      id v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Receiver accepted verification invitation", v24, 2u);
        swift_slowDealloc();
      }

      id v25 = [self defaultCenter];
      if (qword_100095108 != -1) {
        swift_once();
      }
      uint64_t v31 = 0;
      char v32 = 1;
      [v25 postNotificationName:qword_1000974F0 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

      swift_unknownObjectRelease();
    }
    else
    {
      if (qword_1000950C8 != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      sub_100022718(v26, (uint64_t)qword_100097490);
      swift_bridgeObjectRetain();
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v27, v28))
      {

        swift_bridgeObjectRelease_n();
LABEL_10:
        swift_unknownObjectRelease();
        return;
      }
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v33 = sub_100035724(v5, v7, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Receiver accepted invitation with unknown schema: %{public}s", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    swift_unknownObjectRelease();
    return;
  }
  swift_unknownObjectRelease();
  if (qword_1000950C8 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100022718(v12, (uint64_t)qword_100097490);
  id v30 = a2;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    unint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)unint64_t v15 = 136446210;
    id v16 = v30;
    id v17 = [v16 description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v33 = sub_100035724(v18, v20, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Failed to extract context from accepted invitation %{public}s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_10005FD04(uint64_t a1, void *a2)
{
  if (qword_1000950C8 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100022718(v3, (uint64_t)qword_100097490);
  id v4 = a2;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    unint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)unint64_t v7 = 136446210;
    id v8 = v4;
    id v9 = [v8 description];
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;

    sub_100035724(v10, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Receiver declined invitation %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v13 = [self defaultCenter];
  if (qword_100095108 != -1) {
    swift_once();
  }
  uint64_t v15 = 0x40AC200000000000;
  char v16 = 0;
  [v13 postNotificationName:qword_1000974F0 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

  return swift_unknownObjectRelease();
}

uint64_t sub_10005FF80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v217 = a7;
  uint64_t v230 = a6;
  uint64_t v229 = a4;
  uint64_t v228 = a3;
  uint64_t v245 = a1;
  uint64_t v241 = 0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v207 = type metadata accessor for Optional();
  long long v260 = *(void (***)(char *, uint64_t *, uint64_t))(v207 - 8);
  __chkstk_darwin(v207, v21);
  long long v215 = (char *)&v198 - v22;
  uint64_t v227 = a12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v255 = swift_getAssociatedTypeWitness();
  uint64_t v201 = *(void *)(v255 - 8);
  uint64_t v25 = __chkstk_darwin(v255, v24);
  long long v236 = (char *)&v198 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v25, v27);
  long long v238 = (char *)&v198 - v29;
  uint64_t v30 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v32 = __chkstk_darwin(v28, v31);
  long long v235 = (char *)&v198 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __chkstk_darwin(v32, v34);
  long long v243 = (char *)&v198 - v36;
  uint64_t v38 = __chkstk_darwin(v35, v37);
  long long v261 = (char *)&v198 - v39;
  uint64_t v41 = __chkstk_darwin(v38, v40);
  unint64_t v210 = (char *)&v198 - v42;
  uint64_t v44 = __chkstk_darwin(v41, v43);
  long long v237 = (char *)&v198 - v45;
  uint64_t v47 = __chkstk_darwin(v44, v46);
  id v202 = (char *)&v198 - v48;
  uint64_t v50 = __chkstk_darwin(v47, v49);
  long long v212 = (char *)&v198 - v51;
  uint64_t v53 = __chkstk_darwin(v50, v52);
  *(void *)&long long v248 = (char *)&v198 - v54;
  uint64_t v199 = v55;
  __chkstk_darwin(v53, v56);
  long long v240 = (char *)&v198 - v57;
  uint64_t v58 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a15 + 8) + 8))(a8);
  id v59 = [v58 zoneID];

  id v60 = [v59 zoneName];
  uint64_t v233 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v242 = v61;

  uint64_t v62 = *(uint64_t (**)(uint64_t, uint64_t))(a15 + 32);
  uint64_t v216 = a2;
  uint64_t v63 = v62(a8, a15);
  uint64_t v265 = v63;
  uint64_t v214 = a15 + 32;
  uint64_t v213 = v62;
  uint64_t v64 = v62(a8, a15);
  uint64_t v65 = Array.endIndex.getter();
  uint64_t v67 = &off_100072000;
  uint64_t v246 = AssociatedConformanceWitness;
  uint64_t v247 = a8;
  uint64_t v256 = a15;
  uint64_t v254 = v30;
  if (!v65)
  {
    swift_bridgeObjectRelease();
    LODWORD(v244) = 0;
    goto LABEL_62;
  }
  uint64_t v225 = a5;
  uint64_t v68 = 0;
  LODWORD(v244) = 0;
  CFStringRef v252 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
  long long v259 = (uint64_t (**)(char *, unint64_t, uint64_t))(v30 + 16);
  long long v257 = (void (**)(uint64_t, char *, uint64_t))(v30 + 32);
  uint64_t v224 = a17;
  uint64_t v223 = a16;
  uint64_t v232 = AssociatedConformanceWitness + 32;
  long long v231 = (void (**)(char *, uint64_t))(v201 + 8);
  long long v211 = (unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
  long long v253 = (void (**)(char *, uint64_t))(AssociatedConformanceWitness + 48);
  uint64_t v206 = AssociatedConformanceWitness + 24;
  uint64_t v222 = a14;
  uint64_t v221 = a13;
  long long v250 = (void (**)(uint64_t, uint64_t))(v30 + 8);
  uint64_t v220 = a11;
  id v204 = &v263;
  uint64_t v200 = a15 + 56;
  uint64_t v226 = a15 + 64;
  uint64_t v205 = (void (**)(char *, uint64_t))(v260 + 1);
  uint64_t v219 = a10;
  uint64_t v218 = a9;
  *(void *)&long long v66 = 136446466;
  long long v208 = v66;
  *(void *)&long long v66 = 136446210;
  long long v198 = v66;
  uint64_t v203 = (char *)&type metadata for Any + 8;
  uint64_t v69 = v248;
  uint64_t v70 = v240;
  uint64_t v251 = v64;
  while (1)
  {
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    long long v260 = (void (**)(char *, uint64_t *, uint64_t))v68;
    if (IsNativeType)
    {
      unint64_t v73 = v64
          + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))
          + *(void *)(v30 + 72) * (void)v68;
      long long v258 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v30 + 16);
      uint64_t result = v258(v70, v73, AssociatedTypeWitness);
      uint64_t v75 = v68 + 1;
      if (__OFADD__(v68, 1)) {
        break;
      }
      goto LABEL_8;
    }
    uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
    if (v199 != 8) {
      goto LABEL_92;
    }
    long long v264 = (void (*)(void, void, void))result;
    long long v258 = *v259;
    v258(v70, (unint64_t)&v264, AssociatedTypeWitness);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v75 = (char *)v260 + 1;
    if (__OFADD__(v260, 1)) {
      break;
    }
LABEL_8:
    uint64_t v76 = *v257;
    (*v257)(v69, v70, AssociatedTypeWitness);
    if (v252(AssociatedTypeWitness, AssociatedConformanceWitness) != 1)
    {
      unint64_t v77 = v238;
      (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
      uint64_t v78 = v255;
      uint64_t v79 = swift_getAssociatedConformanceWitness();
      id v80 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v79 + 8))(v78, v79);
      (*v231)(v77, v78);
      os_log_type_t v81 = v237;
      long long v249 = v75;
      if (v80)
      {
        id v82 = [v80 emailAddress];
        if (v82 || (id v82 = [v80 phoneNumber]) != 0)
        {
          id v234 = v80;
          uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v85 = v84;

          uint64_t v86 = v256;
          long long v264 = (void (*)(void, void, void))v213(a8, v256);
          __chkstk_darwin(v264, v87);
          uint64_t v88 = v229;
          *((void *)&v198 - 18) = v228;
          *((void *)&v198 - 17) = v88;
          uint64_t v89 = v230;
          *((void *)&v198 - 16) = v225;
          *((void *)&v198 - 15) = v89;
          uint64_t v90 = v217;
          *((void *)&v198 - 14) = v217;
          *((void *)&v198 - 13) = a8;
          uint64_t v91 = v219;
          *((void *)&v198 - 12) = v218;
          *((void *)&v198 - 11) = v91;
          uint64_t v92 = v227;
          *((void *)&v198 - 10) = v220;
          *((void *)&v198 - 9) = v92;
          uint64_t v93 = v222;
          *((void *)&v198 - 8) = v221;
          *((void *)&v198 - 7) = v93;
          uint64_t v94 = v223;
          *((void *)&v198 - 6) = v86;
          *((void *)&v198 - 5) = v94;
          *((void *)&v198 - 4) = v224;
          *((void *)&v198 - 3) = v83;
          long long v239 = (uint8_t *)v83;
          unint64_t v95 = v85;
          *((void *)&v198 - 2) = v85;
          type metadata accessor for Array();
          uint64_t v96 = v86;
          swift_getWitnessTable();
          id v97 = v215;
          uint64_t v98 = v241;
          Sequence.first(where:)();
          swift_bridgeObjectRelease();
          if ((*v211)(v97, 1, AssociatedTypeWitness) == 1)
          {
            uint64_t v99 = (uint64_t)v239;
            uint64_t v241 = v98;
            (*v205)(v97, v207);
            if (qword_1000950C8 != -1) {
              swift_once();
            }
            uint64_t v100 = type metadata accessor for Logger();
            sub_100022718(v100, (uint64_t)qword_100097490);
            unint64_t v101 = v242;
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            uint64_t v102 = Logger.logObject.getter();
            os_log_type_t v103 = static os_log_type_t.default.getter();
            BOOL v104 = os_log_type_enabled(v102, v103);
            uint64_t AssociatedConformanceWitness = v246;
            if (v104)
            {
              uint64_t v105 = swift_slowAlloc();
              long long v264 = (void (*)(void, void, void))swift_slowAlloc();
              *(_DWORD *)uint64_t v105 = v208;
              swift_bridgeObjectRetain();
              uint64_t v262 = sub_100035724(v99, v95, (uint64_t *)&v264);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v105 + 12) = 2082;
              swift_bridgeObjectRetain();
              uint64_t v262 = sub_100035724(v233, v101, (uint64_t *)&v264);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v102, v103, "Removing %{public}s from %{public}s", (uint8_t *)v105, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
            }
            a8 = v247;
            uint64_t v69 = v248;
            uint64_t v30 = v254;
            char v71 = v260;
            uint64_t v75 = v249;
            (*(void (**)(void, uint64_t))(v256 + 64))(v248, v247);

            (*v250)(v69, AssociatedTypeWitness);
            LODWORD(v244) = 1;
            uint64_t v70 = v240;
            uint64_t v64 = v251;
            goto LABEL_5;
          }
          uint64_t v106 = ((uint64_t (*)(char *, char *, uint64_t))v76)(v212, v97, AssociatedTypeWitness);
          uint64_t v209 = &v198;
          __chkstk_darwin(v106, v107);
          uint64_t v108 = v229;
          *((void *)&v198 - 18) = v228;
          *((void *)&v198 - 17) = v108;
          uint64_t v109 = v230;
          *((void *)&v198 - 16) = v225;
          *((void *)&v198 - 15) = v109;
          uint64_t v110 = v247;
          *((void *)&v198 - 14) = v90;
          *((void *)&v198 - 13) = v110;
          uint64_t v111 = v219;
          *((void *)&v198 - 12) = v218;
          *((void *)&v198 - 11) = v111;
          uint64_t v112 = v227;
          *((void *)&v198 - 10) = v220;
          *((void *)&v198 - 9) = v112;
          uint64_t v113 = v222;
          *((void *)&v198 - 8) = v221;
          *((void *)&v198 - 7) = v113;
          uint64_t v114 = v223;
          *((void *)&v198 - 6) = v96;
          *((void *)&v198 - 5) = v114;
          uint64_t v115 = (uint64_t)v239;
          *((void *)&v198 - 4) = v224;
          *((void *)&v198 - 3) = v115;
          *((void *)&v198 - 2) = v95;
          swift_getWitnessTable();
          swift_getWitnessTable();
          RangeReplaceableCollection<>.removeAll(where:)();
          unint64_t v116 = *(uint64_t (**)(uint64_t))(v246 + 24);
          unint64_t v117 = v116(AssociatedTypeWitness);
          unint64_t v118 = v95;
          uint64_t v241 = v98;
          if (v117 < 2)
          {
            uint64_t v126 = v115;
            if (qword_1000950C8 != -1) {
              swift_once();
            }
            uint64_t v127 = type metadata accessor for Logger();
            sub_100022718(v127, (uint64_t)qword_100097490);
            unint64_t v128 = v242;
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            uint64_t v129 = Logger.logObject.getter();
            os_log_type_t v130 = static os_log_type_t.default.getter();
            BOOL v131 = os_log_type_enabled(v129, v130);
            uint64_t AssociatedConformanceWitness = v246;
            if (v131)
            {
              uint64_t v132 = swift_slowAlloc();
              long long v258 = (uint64_t (*)(char *, unint64_t, uint64_t))swift_slowAlloc();
              long long v264 = (void (*)(void, void, void))v258;
              *(_DWORD *)uint64_t v132 = v208;
              swift_bridgeObjectRetain();
              uint64_t v262 = sub_100035724(v126, v95, (uint64_t *)&v264);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v132 + 12) = 2082;
              swift_bridgeObjectRetain();
              uint64_t v262 = sub_100035724(v233, v128, (uint64_t *)&v264);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v129, v130, "Re-inviting %{public}s to %{public}s", (uint8_t *)v132, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
            }
            a8 = v247;
            uint64_t v158 = v248;
            uint64_t v30 = v254;
            uint64_t v75 = v249;
            uint64_t v159 = v256;
            (*(void (**)(void, uint64_t, uint64_t))(v256 + 64))(v248, v247, v256);
            uint64_t v160 = v212;
            (*(void (**)(char *, uint64_t, uint64_t))(v159 + 56))(v212, a8, v159);

            id v161 = *v250;
            uint64_t v162 = v160;
            uint64_t v69 = v158;
            (*v250)((uint64_t)v162, AssociatedTypeWitness);
            uint64_t v163 = v158;
LABEL_50:
            v161(v163, AssociatedTypeWitness);
            LODWORD(v244) = 1;
            goto LABEL_55;
          }
          uint64_t v119 = v202;
          uint64_t v75 = v249;
          if (v117 != 2)
          {
            uint64_t AssociatedConformanceWitness = v246;
            if (v117 != 3)
            {
              swift_bridgeObjectRelease();
              if (qword_1000950C8 != -1) {
                swift_once();
              }
              uint64_t v149 = type metadata accessor for Logger();
              sub_100022718(v149, (uint64_t)qword_100097490);
              uint64_t v150 = v248;
              v258(v119, v248, AssociatedTypeWitness);
              uint64_t v151 = v119;
              uint64_t v152 = Logger.logObject.getter();
              os_log_type_t v153 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v152, v153))
              {
                char v154 = (uint8_t *)swift_slowAlloc();
                long long v258 = (uint64_t (*)(char *, unint64_t, uint64_t))swift_slowAlloc();
                long long v264 = (void (*)(void, void, void))v258;
                *(_DWORD *)char v154 = v198;
                long long v239 = v154 + 4;
                uint64_t v262 = ((uint64_t (*)(uint64_t, uint64_t))v116)(AssociatedTypeWitness, AssociatedConformanceWitness);
                type metadata accessor for ParticipantAcceptanceStatus(0);
                uint64_t v155 = String.init<A>(describing:)();
                uint64_t v262 = sub_100035724(v155, v156, (uint64_t *)&v264);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                dispatch_group_t v157 = *v250;
                (*v250)((uint64_t)v202, AssociatedTypeWitness);
                _os_log_impl((void *)&_mh_execute_header, v152, v153, "Unknown acceptance status: %{public}s", v154, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                v157((uint64_t)v212, AssociatedTypeWitness);
                v157(v150, AssociatedTypeWitness);
              }
              else
              {

                uint64_t v166 = *v250;
                (*v250)((uint64_t)v151, AssociatedTypeWitness);
                v166((uint64_t)v212, AssociatedTypeWitness);
                v166(v150, AssociatedTypeWitness);
              }
              a8 = v247;
              uint64_t v30 = v254;
              uint64_t v69 = v150;
              goto LABEL_55;
            }
            if (qword_1000950C8 != -1) {
              swift_once();
            }
            uint64_t v120 = type metadata accessor for Logger();
            sub_100022718(v120, (uint64_t)qword_100097490);
            unint64_t v121 = v242;
            swift_bridgeObjectRetain_n();
            unint64_t v122 = v118;
            swift_bridgeObjectRetain();
            uint64_t v123 = Logger.logObject.getter();
            os_log_type_t v124 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v123, v124))
            {
              uint64_t v125 = swift_slowAlloc();
              long long v264 = (void (*)(void, void, void))swift_slowAlloc();
              *(_DWORD *)uint64_t v125 = v208;
              swift_bridgeObjectRetain();
              uint64_t v262 = sub_100035724((uint64_t)v239, v122, (uint64_t *)&v264);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v125 + 12) = 2082;
              swift_bridgeObjectRetain();
              uint64_t v262 = sub_100035724(v233, v121, (uint64_t *)&v264);
              uint64_t v75 = v249;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v123, v124, "Adding %{public}s to %{public}s", (uint8_t *)v125, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
            }
            a8 = v247;
            uint64_t v30 = v254;
            uint64_t v164 = v212;
            (*(void (**)(char *, uint64_t))(v256 + 56))(v212, v247);

            id v161 = *v250;
            (*v250)((uint64_t)v164, AssociatedTypeWitness);
            uint64_t v69 = v248;
            uint64_t v163 = v248;
            goto LABEL_50;
          }
          uint64_t AssociatedConformanceWitness = v246;
          if (qword_1000950C8 != -1) {
            swift_once();
          }
          uint64_t v144 = type metadata accessor for Logger();
          sub_100022718(v144, (uint64_t)qword_100097490);
          unint64_t v145 = v242;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          uint64_t v146 = Logger.logObject.getter();
          os_log_type_t v147 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v146, v147))
          {
            uint64_t v148 = swift_slowAlloc();
            long long v258 = (uint64_t (*)(char *, unint64_t, uint64_t))swift_slowAlloc();
            long long v264 = (void (*)(void, void, void))v258;
            *(_DWORD *)uint64_t v148 = v208;
            swift_bridgeObjectRetain();
            uint64_t v262 = sub_100035724((uint64_t)v239, v118, (uint64_t *)&v264);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v148 + 12) = 2082;
            swift_bridgeObjectRetain();
            uint64_t v262 = sub_100035724(v233, v145, (uint64_t *)&v264);
            uint64_t v75 = v249;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v146, v147, "%{public}s is already sharing %{public}s", (uint8_t *)v148, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }

          uint64_t v165 = *v250;
          (*v250)((uint64_t)v212, AssociatedTypeWitness);
          uint64_t v69 = v248;
          v165(v248, AssociatedTypeWitness);
          a8 = v247;
LABEL_37:
          uint64_t v30 = v254;
LABEL_55:
          uint64_t v70 = v240;
          goto LABEL_4;
        }
      }
      if (qword_1000950C8 != -1) {
        swift_once();
      }
      uint64_t v133 = type metadata accessor for Logger();
      sub_100022718(v133, (uint64_t)qword_100097490);
      dispatch_group_t v134 = (void (*)(char *, char *, uint64_t))v258;
      v258(v81, v248, AssociatedTypeWitness);
      unint64_t v135 = v242;
      swift_bridgeObjectRetain_n();
      unint64_t v136 = Logger.logObject.getter();
      os_log_type_t v137 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v136, v137))
      {
        uint64_t v138 = swift_slowAlloc();
        long long v264 = (void (*)(void, void, void))swift_slowAlloc();
        *(_DWORD *)uint64_t v138 = v208;
        v134(v210, v81, AssociatedTypeWitness);
        uint64_t v139 = String.init<A>(describing:)();
        *(void *)(v138 + 4) = sub_100035724(v139, v140, (uint64_t *)&v264);
        swift_bridgeObjectRelease();
        unint64_t v141 = v81;
        id v142 = *v250;
        (*v250)((uint64_t)v141, AssociatedTypeWitness);
        *(_WORD *)(v138 + 12) = 2082;
        swift_bridgeObjectRetain();
        *(void *)(v138 + 14) = sub_100035724(v233, v135, (uint64_t *)&v264);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v136, v137, "Removing %{public}s from %{public}s", (uint8_t *)v138, 0x16u);
        swift_arrayDestroy();
        a8 = v247;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v143 = v81;
        id v142 = *v250;
        (*v250)((uint64_t)v143, AssociatedTypeWitness);

        swift_bridgeObjectRelease_n();
      }
      uint64_t v75 = v249;
      uint64_t v69 = v248;
      (*(void (**)(void, uint64_t))(v256 + 64))(v248, a8);
      v142(v69, AssociatedTypeWitness);
      LODWORD(v244) = 1;
      goto LABEL_37;
    }
    (*v250)(v69, AssociatedTypeWitness);
LABEL_4:
    uint64_t v64 = v251;
    char v71 = v260;
LABEL_5:
    uint64_t v68 = (char *)v71 + 1;
    if (v75 == (char *)Array.endIndex.getter())
    {
      swift_bridgeObjectRelease();
      uint64_t v63 = v265;
      uint64_t v67 = &off_100072000;
LABEL_62:
      swift_bridgeObjectRetain();
      uint64_t v167 = Array.endIndex.getter();
      uint64_t v169 = v243;
      if (!v167)
      {
LABEL_89:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v244 & 1;
      }
      uint64_t v170 = 0;
      uint64_t v171 = *(uint64_t (**)(char *, unint64_t, uint64_t))(AssociatedConformanceWitness + 48);
      long long v259 = (uint64_t (**)(char *, unint64_t, uint64_t))(AssociatedConformanceWitness + 48);
      long long v260 = (void (**)(char *, uint64_t *, uint64_t))(v30 + 16);
      long long v257 = (void (**)(uint64_t, char *, uint64_t))(v30 + 32);
      long long v258 = v171;
      long long v250 = (void (**)(uint64_t, uint64_t))(v201 + 8);
      uint64_t v251 = AssociatedConformanceWitness + 32;
      long long v249 = (char *)(v256 + 56);
      long long v253 = (void (**)(char *, uint64_t))(v30 + 8);
      *(void *)&long long v168 = *((void *)v67 + 327);
      long long v248 = v168;
      long long v240 = (char *)&type metadata for Any + 8;
      unint64_t v172 = v242;
      CFStringRef v252 = (uint64_t (*)(uint64_t, uint64_t))v63;
      while (1)
      {
        Swift::Bool v173 = Array._hoistableIsNativeTypeChecked()();
        Array._checkSubscript(_:wasNativeTypeChecked:)();
        if (v173)
        {
          id v174 = *(void (**)(char *, uint64_t *, uint64_t))(v30 + 16);
          uint64_t result = ((uint64_t (*)(char *, unint64_t, uint64_t))v174)(v261, v63+ ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(void *)(v30 + 72) * v170, AssociatedTypeWitness);
          uint64_t v175 = v170 + 1;
          if (__OFADD__(v170, 1)) {
            goto LABEL_91;
          }
        }
        else
        {
          uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
          if (v199 != 8) {
            goto LABEL_93;
          }
          long long v264 = (void (*)(void, void, void))result;
          id v174 = *v260;
          (*v260)(v261, (uint64_t *)&v264, AssociatedTypeWitness);
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v175 = v170 + 1;
          if (__OFADD__(v170, 1)) {
            goto LABEL_91;
          }
        }
        (*v257)((uint64_t)v169, v261, AssociatedTypeWitness);
        if (((uint64_t (*)(uint64_t, uint64_t))v258)(AssociatedTypeWitness, AssociatedConformanceWitness) == 1)
        {
          (*v253)(v169, AssociatedTypeWitness);
        }
        else
        {
          id v176 = v236;
          (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
          uint64_t v177 = v255;
          uint64_t v178 = swift_getAssociatedConformanceWitness();
          uint64_t v179 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v178 + 8))(v177, v178);
          (*v250)((uint64_t)v176, v177);
          uint64_t v180 = v235;
          if (!v179) {
            goto LABEL_79;
          }
          id v181 = [v179 emailAddress];
          if (!v181)
          {
            id v181 = [v179 phoneNumber];
            if (!v181)
            {

LABEL_79:
              if (qword_1000950C8 != -1) {
                swift_once();
              }
              uint64_t v190 = type metadata accessor for Logger();
              sub_100022718(v190, (uint64_t)qword_100097490);
              uint64_t v169 = v243;
              v174(v180, (uint64_t *)v243, AssociatedTypeWitness);
              swift_bridgeObjectRetain_n();
              uint64_t v191 = Logger.logObject.getter();
              os_log_type_t v192 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v191, v192))
              {
                uint64_t v193 = swift_slowAlloc();
                uint64_t v241 = swift_slowAlloc();
                long long v264 = (void (*)(void, void, void))v241;
                *(_DWORD *)uint64_t v193 = v248;
                swift_bridgeObjectRetain();
                *(void *)(v193 + 4) = sub_100035724(v233, v172, (uint64_t *)&v264);
                swift_bridgeObjectRelease_n();
                *(_WORD *)(v193 + 12) = 2082;
                v174(v210, (uint64_t *)v180, AssociatedTypeWitness);
                unint64_t v172 = v242;
                uint64_t v194 = String.init<A>(describing:)();
                *(void *)(v193 + 14) = sub_100035724(v194, v195, (uint64_t *)&v264);
                swift_bridgeObjectRelease();
                long long v196 = *v253;
                (*v253)(v180, AssociatedTypeWitness);
                _os_log_impl((void *)&_mh_execute_header, v191, v192, "Failed to share %{public}s with %{public}s", (uint8_t *)v193, 0x16u);
                swift_arrayDestroy();
                swift_slowDealloc();
                uint64_t v169 = v243;
                swift_slowDealloc();

                v196(v169, AssociatedTypeWitness);
              }
              else
              {

                int64_t v197 = *v253;
                (*v253)(v180, AssociatedTypeWitness);
                swift_bridgeObjectRelease_n();
                v197(v169, AssociatedTypeWitness);
              }
              uint64_t v30 = v254;
              uint64_t v63 = (uint64_t)v252;
              uint64_t AssociatedConformanceWitness = v246;
              goto LABEL_65;
            }
          }
          uint64_t v182 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v184 = v183;

          if (qword_1000950C8 != -1) {
            swift_once();
          }
          uint64_t v185 = type metadata accessor for Logger();
          sub_100022718(v185, (uint64_t)qword_100097490);
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          uint64_t v186 = Logger.logObject.getter();
          os_log_type_t v187 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v186, v187))
          {
            uint64_t v188 = swift_slowAlloc();
            uint64_t v244 = v182;
            uint64_t v189 = v188;
            long long v264 = (void (*)(void, void, void))swift_slowAlloc();
            *(_DWORD *)uint64_t v189 = v248;
            swift_bridgeObjectRetain();
            *(void *)(v189 + 4) = sub_100035724(v244, v184, (uint64_t *)&v264);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v189 + 12) = 2082;
            swift_bridgeObjectRetain();
            *(void *)(v189 + 14) = sub_100035724(v233, v172, (uint64_t *)&v264);
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v186, v187, "Adding %{public}s to %{public}s", (uint8_t *)v189, 0x16u);
            swift_arrayDestroy();
            uint64_t AssociatedConformanceWitness = v246;
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
          uint64_t v30 = v254;
          uint64_t v169 = v243;
          (*(void (**)(char *, uint64_t))(v256 + 56))(v243, v247);

          (*v253)(v169, AssociatedTypeWitness);
          LODWORD(v244) = 1;
          uint64_t v63 = (uint64_t)v252;
        }
LABEL_65:
        ++v170;
        if (v175 == Array.endIndex.getter()) {
          goto LABEL_89;
        }
      }
    }
  }
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
  return result;
}

uint64_t sub_1000620B0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000620E8(uint64_t a1)
{
  return sub_100062104(a1) & 1;
}

uint64_t sub_100062104(uint64_t a1)
{
  return sub_10005D254(a1, *(void *)(v1 + 136), *(void *)(v1 + 144)) & 1;
}

uint64_t sub_100062158()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 56) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 136) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return _swift_deallocObject(v0, v4, v5);
}

void sub_1000621E0(uint64_t a1, uint64_t a2)
{
  sub_100058D80(a1, a2, (uint64_t)v2+ ((*(unsigned __int8 *)(*(void *)(v2[7] - 8) + 80) + 136) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2[7] - 8) + 80)), v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[9], v2[10], v2[11], v2[12], v2[13], v2[14]);
}

uint64_t sub_100062268()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 144) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100062348(uint64_t a1, char a2)
{
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 56) - 8) + 80) + 144) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 56) - 8) + 80);
  return sub_100059114(a1, a2 & 1, *(void *)(v2 + 136), v2 + v3, *(NSObject **)(v2+ ((*(void *)(*(void *)(*(void *)(v2 + 56) - 8) + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1000623B8()
{
  return sub_100059A34(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000623C0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100062400()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10006246C()
{
  unint64_t result = qword_100095FC8;
  if (!qword_100095FC8)
  {
    type metadata accessor for CKSyncEngine.Configuration();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100095FC8);
  }
  return result;
}

_UNKNOWN **sub_1000624C4()
{
  return &off_10008BFB8;
}

unint64_t sub_1000624D4()
{
  unint64_t result = qword_100096028;
  if (!qword_100096028)
  {
    type metadata accessor for CKSyncEngine.State.Serialization();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100096028);
  }
  return result;
}

uint64_t sub_10006252C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100062594(&qword_100095BB8);
  uint64_t result = sub_100062594(&qword_100095BC8);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100062594(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CKSyncEngine.State.Serialization();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000625D8()
{
  uint64_t v0 = type metadata accessor for KeyRetriever();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v3 = __chkstk_darwin(v0, v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3, v6);
  id v8 = (char *)&v12 - v7;
  KeyRetriever.init()();
  id v9 = (char *)objc_allocWithZone((Class)type metadata accessor for TokenCoder());
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v5, v8, v0);
  id v10 = sub_100068F6C(0x656C707041, 0xE500000000000000, (uint64_t)v5, v9);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v8, v0);
  qword_1000974F8 = (uint64_t)v10;
  return result;
}

id sub_100062770()
{
  uint64_t v1 = type metadata accessor for KeyRetriever();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v4 = __chkstk_darwin(v1, v3);
  uint64_t v6 = (char *)&token - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  id v9 = (char *)&token - v8;
  id v10 = self;
  id v11 = v0;
  id v12 = [v10 currentConnection];
  if (!v12)
  {
    if (qword_1000950D0 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100022718(v20, (uint64_t)qword_1000974A8);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to get the current XPC connection", v23, 2u);
      swift_slowDealloc();
    }

    goto LABEL_14;
  }
  id v13 = v12;
  [v12 auditToken];
  SecTaskRef v14 = SecTaskCreateWithAuditToken(0, &token);
  if (!v14 || (uint64_t v15 = sub_100062A60(), !v16))
  {
    if (os_variant_allows_internal_security_policies())
    {
      uint64_t v17 = sub_100062C84();
      uint64_t v18 = v19;

      swift_bridgeObjectRelease();
      goto LABEL_7;
    }

    swift_bridgeObjectRelease();
LABEL_14:
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    goto LABEL_15;
  }
  uint64_t v17 = v15;
  uint64_t v18 = v16;

LABEL_7:
LABEL_15:
  KeyRetriever.init()();
  uint64_t v24 = (char *)objc_allocWithZone((Class)type metadata accessor for TokenCoder());
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v6, v9, v1);
  id v25 = sub_100068F6C(v17, v18, (uint64_t)v6, v24);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v9, v1);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v25;
}

uint64_t sub_100062A60()
{
  id v12 = 0;
  uint64_t v0 = SecTaskCopyTeamIdentifier();
  if (v0)
  {
    uint64_t v1 = (void *)v0;
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    if (qword_1000950D0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100022718(v3, (uint64_t)qword_1000974A8);
    id v4 = v12;
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446210;
      sub_1000222D4(&qword_1000960F0);
      uint64_t v8 = Optional.debugDescription.getter();
      sub_100035724(v8, v9, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to extract team identifier from SecTask: %{public}s", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return 0;
  }
  return v2;
}

uint64_t sub_100062C84()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 valueForEntitlement:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_1000696F8((uint64_t)v9, (uint64_t)v10);
  if (v11)
  {
    if (swift_dynamicCast()) {
      return v8;
    }
  }
  else
  {
    sub_100069760((uint64_t)v10);
  }
  if (qword_1000950D0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100022718(v4, (uint64_t)qword_1000974A8);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to extract team identifier from connection entitlements", v7, 2u);
    swift_slowDealloc();
  }

  return 0;
}

uint64_t sub_100062E44()
{
  return dispatch thunk of TokenDecoder.decode(bundleIdentifierToken:)();
}

uint64_t sub_100062F38()
{
  return dispatch thunk of TokenDecoder.decode(categoryIdentifierToken:)();
}

uint64_t sub_10006302C()
{
  return dispatch thunk of TokenDecoder.decode(webDomainToken:)();
}

uint64_t sub_100063120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, uint64_t))
{
  uint64_t v8 = sub_1000222D4(&qword_1000960D0);
  uint64_t v28 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000226C0(*(void *)a2, *(void *)(a2 + 8));
  Token.init(data:)();
  uint64_t v12 = *(void *)(a3 + OBJC_IVAR____TtC18UsageTrackingAgent10TokenCoder_decoder);
  if (!v12)
  {
    if (qword_1000950D0 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100022718(v22, (uint64_t)qword_1000974A8);
    os_log_type_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      id v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed to create token decoder", v25, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v11, v8);
  }
  swift_retain();
  Swift::Int v13 = a4(v11, v12);
  if (!v4)
  {
    sub_100064528(&v29, v13, v14);
    swift_release();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v11, v8);
  }
  if (qword_1000950D0 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100022718(v15, (uint64_t)qword_1000974A8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v27 = v8;
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136446210;
    v26[1] = v18 + 4;
    uint64_t v30 = v4;
    swift_errorRetain();
    sub_1000222D4(&qword_100095330);
    uint64_t v19 = String.init<A>(describing:)();
    uint64_t v30 = sub_100035724(v19, v20, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to decode token: %{public}s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
    swift_errorRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v11, v27);
  }
  else
  {

    swift_release();
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v11, v8);
  }
}

Class sub_100063588(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  id v7 = a1;
  uint64_t v8 = sub_1000693BC(v6, (uint64_t)v7, a4);
  sub_100069608(v8);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000696A4();
  v9.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return v9.super.isa;
}

Class sub_100063680(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  id v9 = a1;
  uint64_t v10 = sub_100063750(v6, v8, (uint64_t)v9, a4);
  unint64_t v12 = v11;

  swift_bridgeObjectRelease();
  if (v12 >> 60 == 15)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100022750(v10, v12);
  }
  return isa;
}

uint64_t sub_100063750(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v8 = sub_1000222D4(&qword_1000960D0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a3 + OBJC_IVAR____TtC18UsageTrackingAgent10TokenCoder_encoder))
  {
    swift_retain();
    a4(a1, a2);
    uint64_t v17 = Token.data.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  else
  {
    if (qword_1000950D0 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100022718(v13, (uint64_t)qword_1000974A8);
    Swift::Int v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to create token encoder", v16, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  return v17;
}

id sub_100063B04()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TokenCoder();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TokenCoder()
{
  return self;
}

uint64_t sub_100063BBC(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Application();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_1000697C0(&qword_100096128, (void (*)(uint64_t))&type metadata accessor for Application);
  swift_bridgeObjectRetain();
  uint64_t v34 = a2;
  uint64_t v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  uint64_t v33 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v29 = v2;
    uint64_t v30 = a1;
    uint64_t v31 = ~v13;
    uint64_t v28 = v7;
    uint64_t v17 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v16 = v7 + 16;
    os_log_type_t v15 = v17;
    uint64_t v32 = *(void *)(v16 + 56);
    uint64_t v18 = (void (**)(char *, uint64_t))(v16 - 8);
    v27[1] = v16 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v19 = v11;
      unint64_t v20 = v32 * v14;
      uint64_t v21 = v15;
      v15(v10, *(void *)(v11 + 48) + v32 * v14, v6);
      sub_1000697C0(&qword_100096130, (void (*)(uint64_t))&type metadata accessor for Application);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      os_log_type_t v23 = *v18;
      (*v18)(v10, v6);
      if (v22) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v31;
      uint64_t v11 = v19;
      os_log_type_t v15 = v21;
      if (((*(void *)(v33 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v29;
        a1 = v30;
        uint64_t v7 = v28;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v34, v6);
    v21(v30, *(void *)(*v29 + 48) + v20, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    os_log_type_t v15 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v25 = v34;
    v15(v10, v34, v6);
    uint64_t v35 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_100066298((uint64_t)v10, v14, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_100063EE0(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for ActivityCategory();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_1000697C0(&qword_100096110, (void (*)(uint64_t))&type metadata accessor for ActivityCategory);
  swift_bridgeObjectRetain();
  uint64_t v34 = a2;
  uint64_t v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  uint64_t v33 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v29 = v2;
    uint64_t v30 = a1;
    uint64_t v31 = ~v13;
    uint64_t v28 = v7;
    uint64_t v17 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v16 = v7 + 16;
    os_log_type_t v15 = v17;
    uint64_t v32 = *(void *)(v16 + 56);
    uint64_t v18 = (void (**)(char *, uint64_t))(v16 - 8);
    v27[1] = v16 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v19 = v11;
      unint64_t v20 = v32 * v14;
      uint64_t v21 = v15;
      v15(v10, *(void *)(v11 + 48) + v32 * v14, v6);
      sub_1000697C0(&qword_100096118, (void (*)(uint64_t))&type metadata accessor for ActivityCategory);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      os_log_type_t v23 = *v18;
      (*v18)(v10, v6);
      if (v22) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v31;
      uint64_t v11 = v19;
      os_log_type_t v15 = v21;
      if (((*(void *)(v33 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v29;
        a1 = v30;
        uint64_t v7 = v28;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v34, v6);
    v21(v30, *(void *)(*v29 + 48) + v20, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    os_log_type_t v15 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v25 = v34;
    v15(v10, v34, v6);
    uint64_t v35 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_100066538((uint64_t)v10, v14, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_100064204(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for WebDomain();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_1000697C0(&qword_1000960F8, (void (*)(uint64_t))&type metadata accessor for WebDomain);
  swift_bridgeObjectRetain();
  uint64_t v34 = a2;
  uint64_t v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  uint64_t v33 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v29 = v2;
    uint64_t v30 = a1;
    uint64_t v31 = ~v13;
    uint64_t v28 = v7;
    uint64_t v17 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v16 = v7 + 16;
    os_log_type_t v15 = v17;
    uint64_t v32 = *(void *)(v16 + 56);
    uint64_t v18 = (void (**)(char *, uint64_t))(v16 - 8);
    v27[1] = v16 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v19 = v11;
      unint64_t v20 = v32 * v14;
      uint64_t v21 = v15;
      v15(v10, *(void *)(v11 + 48) + v32 * v14, v6);
      sub_1000697C0(&qword_100096100, (void (*)(uint64_t))&type metadata accessor for WebDomain);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      os_log_type_t v23 = *v18;
      (*v18)(v10, v6);
      if (v22) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v31;
      uint64_t v11 = v19;
      os_log_type_t v15 = v21;
      if (((*(void *)(v33 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v29;
        a1 = v30;
        uint64_t v7 = v28;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v34, v6);
    v21(v30, *(void *)(*v29 + 48) + v20, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    os_log_type_t v15 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v25 = v34;
    v15(v10, v34, v6);
    uint64_t v35 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_1000667F4((uint64_t)v10, v14, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_100064528(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_100066AB0(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1000646D8(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  Data.hash(into:)();
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  uint64_t v10 = v6 + 56;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_116:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)__s1 = *(void *)v81;
    *(void *)uint64_t v81 = 0x8000000000000000;
    sub_1000226C0(a2, a3);
    sub_100066C4C(a2, a3, v9, isUniquelyReferenced_nonNull_native);
    *(void *)uint64_t v81 = *(void *)__s1;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
  uint64_t v86 = ~v8;
  unint64_t v11 = a3 >> 62;
  BOOL v12 = __OFSUB__(HIDWORD(a2), a2);
  BOOL v84 = v12;
  uint64_t v83 = v6;
  size_t __n = BYTE6(a3);
  uint64_t v85 = v6 + 56;
  uint64_t v79 = (a2 >> 32) - (int)a2;
  uint64_t v80 = a2 >> 32;
  unint64_t v78 = a3;
  while (2)
  {
    BOOL v13 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v9);
    uint64_t v14 = *v13;
    unint64_t v15 = v13[1];
    uint64_t v16 = 0;
    switch(v15 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v14), v14))
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
        }
        uint64_t v16 = HIDWORD(v14) - (int)v14;
LABEL_14:
        sub_1000226C0(v14, v15);
        break;
      case 2uLL:
        uint64_t v18 = *(void *)(v14 + 16);
        uint64_t v17 = *(void *)(v14 + 24);
        uint64_t v16 = v17 - v18;
        if (!__OFSUB__(v17, v18)) {
          goto LABEL_14;
        }
        goto LABEL_120;
      case 3uLL:
        break;
      default:
        uint64_t v16 = BYTE6(v15);
        break;
    }
    size_t v19 = __n;
    switch((int)v11)
    {
      case 1:
        size_t v19 = HIDWORD(a2) - (int)a2;
        if (v84) {
          goto LABEL_121;
        }
        goto LABEL_19;
      case 2:
        uint64_t v21 = *(void *)(a2 + 16);
        uint64_t v20 = *(void *)(a2 + 24);
        BOOL v22 = __OFSUB__(v20, v21);
        size_t v19 = v20 - v21;
        if (!v22) {
          goto LABEL_19;
        }
        goto LABEL_122;
      case 3:
        if (v16) {
          goto LABEL_7;
        }
        goto LABEL_117;
      default:
LABEL_19:
        if (v16 != v19)
        {
LABEL_7:
          sub_100022764(v14, v15);
          goto LABEL_8;
        }
        if (v16 >= 1)
        {
          switch(v15 >> 62)
          {
            case 1uLL:
              if ((int)v14 > v14 >> 32) {
                goto LABEL_123;
              }
              uint64_t v27 = (char *)__DataStorage._bytes.getter();
              if (!v27) {
                goto LABEL_33;
              }
              uint64_t v28 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v14, v28)) {
                goto LABEL_125;
              }
              v27 += (int)v14 - v28;
LABEL_33:
              __DataStorage._length.getter();
              uint64_t v10 = v85;
              if (v11)
              {
                if (v11 == 1)
                {
                  if (v80 < (int)a2) {
                    goto LABEL_134;
                  }
                  swift_retain();
                  uint64_t v29 = (char *)__DataStorage._bytes.getter();
                  if (v29)
                  {
                    uint64_t v30 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)a2, v30)) {
                      goto LABEL_141;
                    }
                    v29 += (int)a2 - v30;
                  }
                  uint64_t v31 = __DataStorage._length.getter();
                  size_t v32 = (a2 >> 32) - (int)a2;
                  if (v31 < v79) {
                    size_t v32 = v31;
                  }
                  if (!v27) {
                    goto LABEL_143;
                  }
                  if (!v29) {
                    goto LABEL_144;
                  }
                  int v33 = memcmp(v27, v29, v32);
                  sub_100022764(a2, a3);
                }
                else
                {
                  uint64_t v66 = *(void *)(a2 + 16);
                  uint64_t v65 = *(void *)(a2 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v67 = (char *)__DataStorage._bytes.getter();
                  if (v67)
                  {
                    uint64_t v68 = __DataStorage._offset.getter();
                    if (__OFSUB__(v66, v68)) {
                      goto LABEL_140;
                    }
                    v67 += v66 - v68;
                  }
                  BOOL v22 = __OFSUB__(v65, v66);
                  int64_t v69 = v65 - v66;
                  if (v22) {
                    goto LABEL_135;
                  }
                  uint64_t v70 = __DataStorage._length.getter();
                  if (v70 >= v69) {
                    size_t v71 = v69;
                  }
                  else {
                    size_t v71 = v70;
                  }
                  if (!v27) {
                    goto LABEL_154;
                  }
                  a3 = v78;
                  uint64_t v6 = v83;
                  if (!v67) {
                    goto LABEL_155;
                  }
                  int v33 = memcmp(v27, v67, v71);
                  swift_release();
LABEL_112:
                  swift_release();
                }
                sub_100022764(v14, v15);
LABEL_114:
                uint64_t v10 = v85;
                if (!v33) {
                  goto LABEL_118;
                }
              }
              else
              {
                *(void *)__s1 = a2;
                *(_WORD *)&__s1[8] = a3;
                __s1[10] = BYTE2(a3);
                __s1[11] = BYTE3(a3);
                __s1[12] = BYTE4(a3);
                __s1[13] = BYTE5(a3);
                if (!v27) {
                  goto LABEL_153;
                }
                uint64_t v47 = (uint64_t *)__s1;
                uint64_t v46 = v27;
LABEL_99:
                int v45 = memcmp(v46, v47, __n);
LABEL_100:
                sub_100022764(v14, v15);
                if (!v45) {
                  goto LABEL_118;
                }
              }
              break;
            case 2uLL:
              uint64_t v34 = *(void *)(v14 + 16);
              swift_retain();
              swift_retain();
              uint64_t v35 = (char *)__DataStorage._bytes.getter();
              if (!v35) {
                goto LABEL_47;
              }
              uint64_t v36 = __DataStorage._offset.getter();
              if (__OFSUB__(v34, v36)) {
                goto LABEL_124;
              }
              v35 += v34 - v36;
LABEL_47:
              __DataStorage._length.getter();
              uint64_t v6 = v83;
              if (!v11)
              {
                *(void *)__s1 = a2;
                *(_WORD *)&__s1[8] = a3;
                __s1[10] = BYTE2(a3);
                __s1[11] = BYTE3(a3);
                __s1[12] = BYTE4(a3);
                __s1[13] = BYTE5(a3);
                if (!v35) {
                  goto LABEL_150;
                }
                int v33 = memcmp(v35, __s1, __n);
                swift_release();
                goto LABEL_112;
              }
              if (v11 == 1)
              {
                if (v80 < (int)a2) {
                  goto LABEL_128;
                }
                swift_retain();
                uint64_t v37 = (char *)__DataStorage._bytes.getter();
                if (v37)
                {
                  uint64_t v38 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)a2, v38)) {
                    goto LABEL_139;
                  }
                  v37 += (int)a2 - v38;
                }
                uint64_t v39 = __DataStorage._length.getter();
                size_t v40 = (a2 >> 32) - (int)a2;
                if (v39 < v79) {
                  size_t v40 = v39;
                }
                if (!v35) {
                  goto LABEL_145;
                }
                if (!v37) {
                  goto LABEL_146;
                }
                int v33 = memcmp(v35, v37, v40);
                sub_100022764(a2, a3);
                swift_release();
              }
              else
              {
                uint64_t v59 = *(void *)(a2 + 16);
                uint64_t v77 = *(void *)(a2 + 24);
                swift_retain();
                swift_retain();
                id v60 = (char *)__DataStorage._bytes.getter();
                if (v60)
                {
                  uint64_t v61 = __DataStorage._offset.getter();
                  if (__OFSUB__(v59, v61)) {
                    goto LABEL_138;
                  }
                  v60 += v59 - v61;
                }
                BOOL v22 = __OFSUB__(v77, v59);
                int64_t v62 = v77 - v59;
                if (v22) {
                  goto LABEL_133;
                }
                uint64_t v63 = __DataStorage._length.getter();
                if (v63 >= v62) {
                  size_t v64 = v62;
                }
                else {
                  size_t v64 = v63;
                }
                if (!v35) {
                  goto LABEL_151;
                }
                a3 = v78;
                if (!v60) {
                  goto LABEL_152;
                }
                int v33 = memcmp(v35, v60, v64);
                swift_release();
                swift_release();
                swift_release();
              }
              swift_release();
              sub_100022764(v14, v15);
              uint64_t v6 = v83;
              goto LABEL_114;
            case 3uLL:
              *(void *)&__s1[6] = 0;
              *(void *)__s1 = 0;
              if (!v11) {
                goto LABEL_67;
              }
              if (v11 == 1)
              {
                if (v80 < (int)a2) {
                  goto LABEL_127;
                }
                swift_retain();
                uint64_t v41 = __DataStorage._bytes.getter();
                if (!v41) {
                  goto LABEL_147;
                }
                uint64_t v24 = v41;
                uint64_t v42 = __DataStorage._offset.getter();
                uint64_t v26 = (int)a2 - v42;
                if (__OFSUB__((int)a2, v42)) {
                  goto LABEL_132;
                }
LABEL_63:
                uint64_t v43 = __DataStorage._length.getter();
                if (v43 >= v79) {
                  size_t v44 = (a2 >> 32) - (int)a2;
                }
                else {
                  size_t v44 = v43;
                }
                int v45 = memcmp(__s1, (const void *)(v24 + v26), v44);
                a3 = v78;
                sub_100022764(a2, v78);
                goto LABEL_100;
              }
              uint64_t v54 = *(void *)(a2 + 16);
              uint64_t v55 = *(void *)(a2 + 24);
              swift_retain();
              swift_retain();
              uint64_t v50 = (char *)__DataStorage._bytes.getter();
              if (v50)
              {
                uint64_t v56 = __DataStorage._offset.getter();
                if (__OFSUB__(v54, v56)) {
                  goto LABEL_137;
                }
                v50 += v54 - v56;
              }
              BOOL v22 = __OFSUB__(v55, v54);
              int64_t v52 = v55 - v54;
              if (v22) {
                goto LABEL_130;
              }
              uint64_t v53 = __DataStorage._length.getter();
              if (!v50) {
                goto LABEL_149;
              }
LABEL_79:
              if (v53 >= v52) {
                size_t v57 = v52;
              }
              else {
                size_t v57 = v53;
              }
              int v58 = memcmp(__s1, v50, v57);
              swift_release();
              swift_release();
              sub_100022764(v14, v15);
              uint64_t v6 = v83;
              uint64_t v10 = v85;
              if (!v58) {
                goto LABEL_118;
              }
              break;
            default:
              *(void *)__s1 = v14;
              *(_WORD *)&__s1[8] = v15;
              __s1[10] = BYTE2(v15);
              __s1[11] = BYTE3(v15);
              __s1[12] = BYTE4(v15);
              __s1[13] = BYTE5(v15);
              if (!v11)
              {
LABEL_67:
                uint64_t v88 = a2;
                __int16 v89 = a3;
                char v90 = BYTE2(a3);
                char v91 = BYTE3(a3);
                char v92 = BYTE4(a3);
                char v93 = BYTE5(a3);
                uint64_t v46 = __s1;
                uint64_t v47 = &v88;
                goto LABEL_99;
              }
              if (v11 == 1)
              {
                if (v80 < (int)a2) {
                  goto LABEL_126;
                }
                swift_retain();
                uint64_t v23 = __DataStorage._bytes.getter();
                if (!v23)
                {
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_143:
                  __break(1u);
LABEL_144:
                  __break(1u);
LABEL_145:
                  __break(1u);
LABEL_146:
                  __break(1u);
LABEL_147:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
                  JUMPOUT(0x1000650ECLL);
                }
                uint64_t v24 = v23;
                uint64_t v25 = __DataStorage._offset.getter();
                uint64_t v26 = (int)a2 - v25;
                if (__OFSUB__((int)a2, v25)) {
                  goto LABEL_131;
                }
                goto LABEL_63;
              }
              uint64_t v48 = *(void *)(a2 + 16);
              uint64_t v49 = *(void *)(a2 + 24);
              swift_retain();
              swift_retain();
              uint64_t v50 = (char *)__DataStorage._bytes.getter();
              if (v50)
              {
                uint64_t v51 = __DataStorage._offset.getter();
                if (__OFSUB__(v48, v51)) {
                  goto LABEL_136;
                }
                v50 += v48 - v51;
              }
              BOOL v22 = __OFSUB__(v49, v48);
              int64_t v52 = v49 - v48;
              if (v22) {
                goto LABEL_129;
              }
              uint64_t v53 = __DataStorage._length.getter();
              if (!v50) {
                goto LABEL_148;
              }
              goto LABEL_79;
          }
LABEL_8:
          unint64_t v9 = (v9 + 1) & v86;
          if (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
            goto LABEL_116;
          }
          continue;
        }
LABEL_117:
        sub_100022764(v14, v15);
LABEL_118:
        swift_bridgeObjectRelease();
        sub_100022764(a2, a3);
        uint64_t v74 = (uint64_t *)(*(void *)(*(void *)v81 + 48) + 16 * v9);
        uint64_t v75 = *v74;
        unint64_t v76 = v74[1];
        *a1 = *v74;
        a1[1] = v76;
        sub_1000226C0(v75, v76);
        return 0;
    }
  }
}

uint64_t sub_10006511C()
{
  NSString v1 = v0;
  uint64_t v2 = type metadata accessor for Application();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v0;
  sub_1000222D4(&qword_100096138);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_37;
  }
  uint64_t v37 = v0;
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v39 = (void *)(v7 + 56);
  uint64_t v40 = v3;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  int64_t v38 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v41 = v3 + 32;
  uint64_t v14 = v8 + 56;
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_22;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      return result;
    }
    if (v20 >= v38) {
      break;
    }
    uint64_t v21 = v39;
    unint64_t v22 = v39[v20];
    ++v16;
    if (!v22)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v38) {
        goto LABEL_31;
      }
      unint64_t v22 = v39[v16];
      if (!v22)
      {
        int64_t v23 = v20 + 2;
        if (v23 >= v38)
        {
LABEL_31:
          swift_release();
          NSString v1 = v37;
          goto LABEL_33;
        }
        unint64_t v22 = v39[v23];
        if (!v22)
        {
          while (1)
          {
            int64_t v16 = v23 + 1;
            if (__OFADD__(v23, 1)) {
              goto LABEL_39;
            }
            if (v16 >= v38) {
              goto LABEL_31;
            }
            unint64_t v22 = v39[v16];
            ++v23;
            if (v22) {
              goto LABEL_21;
            }
          }
        }
        int64_t v16 = v23;
      }
    }
LABEL_21:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v19 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_22:
    uint64_t v24 = v7;
    uint64_t v25 = *(void *)(v40 + 72);
    unint64_t v26 = *(void *)(v7 + 48) + v25 * v19;
    uint64_t v27 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
    v27(v6, v26, v2);
    sub_1000697C0(&qword_100096128, (void (*)(uint64_t))&type metadata accessor for Application);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v28 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v14 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v29) & ~*(void *)(v14 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v14 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v17 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v27)(*(void *)(v9 + 48) + v17 * v25, v6, v2);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v24;
  }
  swift_release();
  NSString v1 = v37;
  uint64_t v21 = v39;
LABEL_33:
  uint64_t v35 = 1 << *(unsigned char *)(v7 + 32);
  if (v35 > 63) {
    bzero(v21, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v21 = -1 << v35;
  }
  *(void *)(v7 + 16) = 0;
LABEL_37:
  uint64_t result = swift_release();
  uint64_t *v1 = v9;
  return result;
}

uint64_t sub_1000654E0()
{
  NSString v1 = v0;
  uint64_t v43 = type metadata accessor for ActivityCategory();
  uint64_t v2 = *(void *)(v43 - 8);
  __chkstk_darwin(v43, v3);
  uint64_t v42 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_1000222D4(&qword_100096120);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    int64_t v38 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    uint64_t v36 = v0;
    int64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v40 = v2;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    uint64_t v39 = v7;
    unint64_t v15 = v42;
    uint64_t v16 = v43;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        int64_t v41 = v14;
        unint64_t v19 = v18 | (v14 << 6);
      }
      else
      {
        int64_t v20 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v20 >= v37) {
          goto LABEL_33;
        }
        unint64_t v21 = v38[v20];
        int64_t v22 = v14 + 1;
        if (!v21)
        {
          int64_t v22 = v14 + 2;
          if (v14 + 2 >= v37) {
            goto LABEL_33;
          }
          unint64_t v21 = v38[v22];
          if (!v21)
          {
            int64_t v22 = v14 + 3;
            if (v14 + 3 >= v37) {
              goto LABEL_33;
            }
            unint64_t v21 = v38[v22];
            if (!v21)
            {
              uint64_t v23 = v14 + 4;
              if (v14 + 4 >= v37)
              {
LABEL_33:
                swift_release();
                NSString v1 = v36;
                uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
                if (v35 > 63) {
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v38 = -1 << v35;
                }
                *(void *)(v5 + 16) = 0;
                break;
              }
              unint64_t v21 = v38[v23];
              if (!v21)
              {
                while (1)
                {
                  int64_t v22 = v23 + 1;
                  if (__OFADD__(v23, 1)) {
                    goto LABEL_39;
                  }
                  if (v22 >= v37) {
                    goto LABEL_33;
                  }
                  unint64_t v21 = v38[v22];
                  ++v23;
                  if (v21) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v22 = v14 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v11 = (v21 - 1) & v21;
        int64_t v41 = v22;
        unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
      }
      uint64_t v24 = v5;
      uint64_t v25 = *(void *)(v5 + 48);
      uint64_t v26 = *(void *)(v40 + 72);
      uint64_t v27 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
      v27(v15, v25 + v26 * v19, v16);
      uint64_t v7 = v39;
      sub_1000697C0(&qword_100096110, (void (*)(uint64_t))&type metadata accessor for ActivityCategory);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v33 = v30 == v32;
          if (v30 == v32) {
            unint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v12 + 8 * v30);
        }
        while (v34 == -1);
        unint64_t v17 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v12 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v27)(*(void *)(v7 + 48) + v17 * v26, v42, v43);
      ++*(void *)(v7 + 16);
      uint64_t v5 = v24;
      int64_t v14 = v41;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v7;
  return result;
}

uint64_t sub_1000658DC()
{
  NSString v1 = v0;
  uint64_t v43 = type metadata accessor for WebDomain();
  uint64_t v2 = *(void *)(v43 - 8);
  __chkstk_darwin(v43, v3);
  uint64_t v42 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_1000222D4(&qword_100096108);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    int64_t v38 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    uint64_t v36 = v0;
    int64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v40 = v2;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    uint64_t v39 = v7;
    unint64_t v15 = v42;
    uint64_t v16 = v43;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        int64_t v41 = v14;
        unint64_t v19 = v18 | (v14 << 6);
      }
      else
      {
        int64_t v20 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v20 >= v37) {
          goto LABEL_33;
        }
        unint64_t v21 = v38[v20];
        int64_t v22 = v14 + 1;
        if (!v21)
        {
          int64_t v22 = v14 + 2;
          if (v14 + 2 >= v37) {
            goto LABEL_33;
          }
          unint64_t v21 = v38[v22];
          if (!v21)
          {
            int64_t v22 = v14 + 3;
            if (v14 + 3 >= v37) {
              goto LABEL_33;
            }
            unint64_t v21 = v38[v22];
            if (!v21)
            {
              uint64_t v23 = v14 + 4;
              if (v14 + 4 >= v37)
              {
LABEL_33:
                swift_release();
                NSString v1 = v36;
                uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
                if (v35 > 63) {
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v38 = -1 << v35;
                }
                *(void *)(v5 + 16) = 0;
                break;
              }
              unint64_t v21 = v38[v23];
              if (!v21)
              {
                while (1)
                {
                  int64_t v22 = v23 + 1;
                  if (__OFADD__(v23, 1)) {
                    goto LABEL_39;
                  }
                  if (v22 >= v37) {
                    goto LABEL_33;
                  }
                  unint64_t v21 = v38[v22];
                  ++v23;
                  if (v21) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v22 = v14 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v11 = (v21 - 1) & v21;
        int64_t v41 = v22;
        unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
      }
      uint64_t v24 = v5;
      uint64_t v25 = *(void *)(v5 + 48);
      uint64_t v26 = *(void *)(v40 + 72);
      uint64_t v27 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
      v27(v15, v25 + v26 * v19, v16);
      uint64_t v7 = v39;
      sub_1000697C0(&qword_1000960F8, (void (*)(uint64_t))&type metadata accessor for WebDomain);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v33 = v30 == v32;
          if (v30 == v32) {
            unint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v12 + 8 * v30);
        }
        while (v34 == -1);
        unint64_t v17 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v12 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v27)(*(void *)(v7 + 48) + v17 * v26, v42, v43);
      ++*(void *)(v7 + 16);
      uint64_t v5 = v24;
      int64_t v14 = v41;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v7;
  return result;
}

uint64_t sub_100065CD8()
{
  NSString v1 = v0;
  uint64_t v2 = *v0;
  sub_1000222D4(&qword_1000960E8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                NSString v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      void *v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_100065FB8()
{
  NSString v1 = v0;
  uint64_t v2 = *v0;
  sub_1000222D4(&qword_1000960E0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                NSString v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      Data.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      void *v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_100066298(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for Application();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_10006511C();
  }
  else
  {
    if (v12 > v11)
    {
      sub_100067694();
      goto LABEL_12;
    }
    sub_100067F2C();
  }
  uint64_t v13 = *v3;
  sub_1000697C0(&qword_100096128, (void (*)(uint64_t))&type metadata accessor for Application);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    int64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      sub_1000697C0(&qword_100096130, (void (*)(uint64_t))&type metadata accessor for Application);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100066538(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for ActivityCategory();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1000654E0();
  }
  else
  {
    if (v12 > v11)
    {
      sub_100067914((uint64_t (*)(void))&type metadata accessor for ActivityCategory, &qword_100096120);
      goto LABEL_12;
    }
    sub_1000682A8();
  }
  uint64_t v13 = *v3;
  sub_1000697C0(&qword_100096110, (void (*)(uint64_t))&type metadata accessor for ActivityCategory);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    int64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      sub_1000697C0(&qword_100096118, (void (*)(uint64_t))&type metadata accessor for ActivityCategory);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000667F4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for WebDomain();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1000658DC();
  }
  else
  {
    if (v12 > v11)
    {
      sub_100067914((uint64_t (*)(void))&type metadata accessor for WebDomain, &qword_100096108);
      goto LABEL_12;
    }
    sub_100068658();
  }
  uint64_t v13 = *v3;
  sub_1000697C0(&qword_1000960F8, (void (*)(uint64_t))&type metadata accessor for WebDomain);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    int64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      sub_1000697C0(&qword_100096100, (void (*)(uint64_t))&type metadata accessor for WebDomain);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_100066AB0(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_100065CD8();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_100067BC4();
      goto LABEL_22;
    }
    sub_100068A08();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  Swift::Int *v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

Swift::Int sub_100066C4C(Swift::Int result, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 <= v9 || (a4 & 1) == 0)
  {
    if (a4)
    {
      sub_100065FB8();
    }
    else
    {
      if (v10 > v9)
      {
        uint64_t result = (Swift::Int)sub_100067D78();
        goto LABEL_125;
      }
      sub_100068CB8();
    }
    uint64_t v11 = *v4;
    Hasher.init(_seed:)();
    Data.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
    a3 = result & ~v12;
    uint64_t v13 = v11 + 56;
    if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
    {
      uint64_t v92 = ~v12;
      uint64_t v88 = v11;
      unint64_t v90 = a2 >> 62;
      BOOL v14 = __OFSUB__(HIDWORD(v8), v8);
      BOOL v89 = v14;
      uint64_t v91 = v11 + 56;
      uint64_t v86 = v4;
      uint64_t v87 = v8 >> 32;
      uint64_t v85 = (v8 >> 32) - (int)v8;
      do
      {
        uint64_t v15 = (uint64_t *)(*(void *)(v11 + 48) + 16 * a3);
        uint64_t v17 = *v15;
        unint64_t v16 = v15[1];
        uint64_t v18 = 0;
        switch(v16 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v17), v17))
            {
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
              goto LABEL_131;
            }
            uint64_t v18 = HIDWORD(v17) - (int)v17;
LABEL_21:
            sub_1000226C0(v17, v16);
LABEL_22:
            uint64_t v21 = BYTE6(a2);
            switch(a2 >> 62)
            {
              case 1uLL:
                uint64_t v21 = HIDWORD(v8) - (int)v8;
                if (v89) {
                  goto LABEL_129;
                }
                goto LABEL_26;
              case 2uLL:
                uint64_t v23 = *(void *)(v8 + 16);
                uint64_t v22 = *(void *)(v8 + 24);
                BOOL v24 = __OFSUB__(v22, v23);
                uint64_t v21 = v22 - v23;
                if (!v24) {
                  goto LABEL_26;
                }
                goto LABEL_130;
              case 3uLL:
                if (v18) {
                  goto LABEL_14;
                }
                goto LABEL_165;
              default:
LABEL_26:
                if (v18 != v21)
                {
LABEL_14:
                  uint64_t result = sub_100022764(v17, v16);
                  goto LABEL_15;
                }
                if (v18 < 1) {
                  goto LABEL_165;
                }
                break;
            }
            break;
          case 2uLL:
            uint64_t v20 = *(void *)(v17 + 16);
            uint64_t v19 = *(void *)(v17 + 24);
            uint64_t v18 = v19 - v20;
            if (!__OFSUB__(v19, v20)) {
              goto LABEL_21;
            }
            goto LABEL_128;
          case 3uLL:
            goto LABEL_22;
          default:
            uint64_t v18 = BYTE6(v16);
            goto LABEL_22;
        }
        switch(v16 >> 62)
        {
          case 1uLL:
            if ((int)v17 > v17 >> 32) {
              goto LABEL_132;
            }
            uint64_t v40 = (unsigned char *)__DataStorage._bytes.getter();
            if (!v40) {
              goto LABEL_52;
            }
            uint64_t v41 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v17, v41)) {
              goto LABEL_134;
            }
            v40 += (int)v17 - v41;
LABEL_52:
            __DataStorage._length.getter();
            uint64_t v13 = v91;
            if (!v90)
            {
              *(void *)__s1 = v8;
              *(_WORD *)&__s1[8] = a2;
              __s1[10] = BYTE2(a2);
              __s1[11] = BYTE3(a2);
              __s1[12] = BYTE4(a2);
              __s1[13] = BYTE5(a2);
              if (!v40) {
                goto LABEL_160;
              }
              uint64_t v48 = (uint64_t *)__s1;
              uint64_t v47 = v40;
LABEL_110:
              int v71 = memcmp(v47, v48, BYTE6(a2));
              uint64_t result = sub_100022764(v17, v16);
              if (!v71) {
                goto LABEL_166;
              }
              break;
            }
            if (v90 == 1)
            {
              if (v87 < (int)v8) {
                goto LABEL_143;
              }
              swift_retain();
              uint64_t v42 = __DataStorage._bytes.getter();
              if (v42)
              {
                uint64_t v43 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v8, v43)) {
                  goto LABEL_150;
                }
                v42 += (int)v8 - v43;
              }
              uint64_t v44 = __DataStorage._length.getter();
              uint64_t v45 = (v8 >> 32) - (int)v8;
              if (v44 < v85) {
                uint64_t v45 = v44;
              }
              if (!v40) {
                goto LABEL_153;
              }
              if (!v42) {
                goto LABEL_154;
              }
              size_t v38 = v45;
              uint64_t v39 = v40;
              int64_t v37 = (const void *)v42;
              goto LABEL_63;
            }
            uint64_t v72 = *(void *)(v8 + 16);
            uint64_t v84 = *(void *)(v8 + 24);
            swift_retain();
            swift_retain();
            uint64_t v73 = __DataStorage._bytes.getter();
            if (v73)
            {
              uint64_t v74 = v73;
              uint64_t v75 = __DataStorage._offset.getter();
              if (__OFSUB__(v72, v75)) {
                goto LABEL_149;
              }
              unint64_t v76 = (const void *)(v74 + v72 - v75);
            }
            else
            {
              unint64_t v76 = 0;
            }
            if (__OFSUB__(v84, v72)) {
              goto LABEL_144;
            }
            uint64_t v77 = __DataStorage._length.getter();
            if (v77 >= v84 - v72) {
              size_t v78 = v84 - v72;
            }
            else {
              size_t v78 = v77;
            }
            uint64_t v11 = v88;
            if (!v40) {
              goto LABEL_163;
            }
            uint64_t v13 = v91;
            if (!v76) {
              goto LABEL_164;
            }
            int v64 = memcmp(v40, v76, v78);
            swift_release();
LABEL_123:
            swift_release();
            uint64_t result = sub_100022764(v17, v16);
            uint64_t v5 = v86;
            if (!v64) {
              goto LABEL_166;
            }
            break;
          case 2uLL:
            uint64_t v29 = *(void *)(v17 + 16);
            swift_retain();
            swift_retain();
            uint64_t v30 = __DataStorage._bytes.getter();
            if (v30)
            {
              uint64_t v31 = v30;
              uint64_t v32 = __DataStorage._offset.getter();
              if (__OFSUB__(v29, v32)) {
                goto LABEL_133;
              }
              BOOL v33 = (const void *)(v31 + v29 - v32);
            }
            else
            {
              BOOL v33 = 0;
            }
            __DataStorage._length.getter();
            uint64_t v11 = v88;
            uint64_t v13 = v91;
            if (v90)
            {
              if (v90 == 1)
              {
                if (v87 < (int)v8) {
                  goto LABEL_137;
                }
                swift_retain();
                uint64_t v49 = (char *)__DataStorage._bytes.getter();
                if (v49)
                {
                  uint64_t v50 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v8, v50)) {
                    goto LABEL_148;
                  }
                  v49 += (int)v8 - v50;
                }
                uint64_t v51 = __DataStorage._length.getter();
                size_t v52 = (v8 >> 32) - (int)v8;
                if (v51 < v85) {
                  size_t v52 = v51;
                }
                if (!v33) {
                  goto LABEL_155;
                }
                if (!v49) {
                  goto LABEL_156;
                }
                int v46 = memcmp(v33, v49, v52);
                sub_100022764(v8, a2);
                swift_release();
              }
              else
              {
                uint64_t v65 = *(void *)(v8 + 16);
                uint64_t v83 = *(void *)(v8 + 24);
                swift_retain();
                swift_retain();
                uint64_t v66 = (char *)__DataStorage._bytes.getter();
                if (v66)
                {
                  uint64_t v67 = __DataStorage._offset.getter();
                  if (__OFSUB__(v65, v67)) {
                    goto LABEL_147;
                  }
                  v66 += v65 - v67;
                }
                BOOL v24 = __OFSUB__(v83, v65);
                int64_t v68 = v83 - v65;
                if (v24) {
                  goto LABEL_142;
                }
                uint64_t v69 = __DataStorage._length.getter();
                if (v69 >= v68) {
                  size_t v70 = v68;
                }
                else {
                  size_t v70 = v69;
                }
                if (!v33) {
                  goto LABEL_161;
                }
                uint64_t v11 = v88;
                if (!v66) {
                  goto LABEL_162;
                }
                int v46 = memcmp(v33, v66, v70);
                swift_release();
                swift_release();
                swift_release();
              }
              swift_release();
              uint64_t result = sub_100022764(v17, v16);
              uint64_t v5 = v86;
              goto LABEL_106;
            }
            *(void *)__s1 = v8;
            *(_WORD *)&__s1[8] = a2;
            __s1[10] = BYTE2(a2);
            __s1[11] = BYTE3(a2);
            __s1[12] = BYTE4(a2);
            __s1[13] = BYTE5(a2);
            if (!v33) {
              goto LABEL_159;
            }
            int v64 = memcmp(v33, __s1, BYTE6(a2));
            swift_release();
            goto LABEL_123;
          case 3uLL:
            *(void *)&__s1[6] = 0;
            *(void *)__s1 = 0;
            if (!v90) {
              goto LABEL_64;
            }
            if (v90 == 1)
            {
              if (v87 < (int)v8) {
                goto LABEL_136;
              }
              swift_retain();
              uint64_t v34 = __DataStorage._bytes.getter();
              if (!v34) {
                goto LABEL_152;
              }
              uint64_t v26 = v34;
              uint64_t v35 = __DataStorage._offset.getter();
              uint64_t v28 = (int)v8 - v35;
              if (__OFSUB__((int)v8, v35)) {
                goto LABEL_141;
              }
              goto LABEL_44;
            }
            uint64_t v59 = *(void *)(v8 + 16);
            uint64_t v60 = *(void *)(v8 + 24);
            swift_retain();
            swift_retain();
            uint64_t v55 = (char *)__DataStorage._bytes.getter();
            if (v55)
            {
              uint64_t v61 = __DataStorage._offset.getter();
              if (__OFSUB__(v59, v61)) {
                goto LABEL_146;
              }
              v55 += v59 - v61;
            }
            BOOL v24 = __OFSUB__(v60, v59);
            int64_t v57 = v60 - v59;
            if (v24) {
              goto LABEL_139;
            }
            uint64_t v58 = __DataStorage._length.getter();
            uint64_t v11 = v88;
            if (!v55) {
              goto LABEL_158;
            }
            goto LABEL_88;
          default:
            *(void *)__s1 = v17;
            *(_WORD *)&__s1[8] = v16;
            __s1[10] = BYTE2(v16);
            __s1[11] = BYTE3(v16);
            __s1[12] = BYTE4(v16);
            __s1[13] = BYTE5(v16);
            if (!v90)
            {
LABEL_64:
              uint64_t v93 = v8;
              __int16 v94 = a2;
              char v95 = BYTE2(a2);
              char v96 = BYTE3(a2);
              char v97 = BYTE4(a2);
              char v98 = BYTE5(a2);
              uint64_t v47 = __s1;
              uint64_t v48 = &v93;
              goto LABEL_110;
            }
            if (v90 == 1)
            {
              if (v87 < (int)v8) {
                goto LABEL_135;
              }
              swift_retain();
              uint64_t v25 = __DataStorage._bytes.getter();
              if (!v25)
              {
                __DataStorage._length.getter();
                __break(1u);
LABEL_152:
                __DataStorage._length.getter();
                __break(1u);
LABEL_153:
                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
LABEL_157:
                __break(1u);
LABEL_158:
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                sub_100022764(v17, v16);
LABEL_166:
                ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                JUMPOUT(0x100067664);
              }
              uint64_t v26 = v25;
              uint64_t v27 = __DataStorage._offset.getter();
              uint64_t v28 = (int)v8 - v27;
              if (__OFSUB__((int)v8, v27)) {
                goto LABEL_140;
              }
LABEL_44:
              uint64_t v36 = __DataStorage._length.getter();
              int64_t v37 = (const void *)(v26 + v28);
              if (v36 >= v85) {
                size_t v38 = (v8 >> 32) - (int)v8;
              }
              else {
                size_t v38 = v36;
              }
              uint64_t v39 = __s1;
LABEL_63:
              int v46 = memcmp(v39, v37, v38);
              sub_100022764(v8, a2);
              uint64_t result = sub_100022764(v17, v16);
LABEL_106:
              uint64_t v13 = v91;
              if (!v46) {
                goto LABEL_166;
              }
              break;
            }
            uint64_t v53 = *(void *)(v8 + 16);
            uint64_t v54 = *(void *)(v8 + 24);
            swift_retain();
            swift_retain();
            uint64_t v55 = (char *)__DataStorage._bytes.getter();
            if (v55)
            {
              uint64_t v56 = __DataStorage._offset.getter();
              if (__OFSUB__(v53, v56)) {
                goto LABEL_145;
              }
              v55 += v53 - v56;
            }
            BOOL v24 = __OFSUB__(v54, v53);
            int64_t v57 = v54 - v53;
            if (v24) {
              goto LABEL_138;
            }
            uint64_t v58 = __DataStorage._length.getter();
            uint64_t v11 = v88;
            if (!v55) {
              goto LABEL_157;
            }
LABEL_88:
            if (v58 >= v57) {
              size_t v62 = v57;
            }
            else {
              size_t v62 = v58;
            }
            int v63 = memcmp(__s1, v55, v62);
            swift_release();
            swift_release();
            uint64_t result = sub_100022764(v17, v16);
            uint64_t v13 = v91;
            if (!v63) {
              goto LABEL_166;
            }
            break;
        }
LABEL_15:
        a3 = (a3 + 1) & v92;
      }
      while (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
    }
  }
LABEL_125:
  uint64_t v79 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v80 = (uint64_t *)(*(void *)(v79 + 48) + 16 * a3);
  *uint64_t v80 = v8;
  v80[1] = a2;
  uint64_t v81 = *(void *)(v79 + 16);
  BOOL v24 = __OFADD__(v81, 1);
  uint64_t v82 = v81 + 1;
  if (v24)
  {
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
  }
  *(void *)(v79 + 16) = v82;
  return result;
}

void *sub_100067694()
{
  NSString v1 = v0;
  uint64_t v2 = type metadata accessor for Application();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000222D4(&qword_100096138);
  uint64_t v7 = *v0;
  uint64_t v8 = static _SetStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    uint64_t *v1 = v9;
    return result;
  }
  BOOL v24 = v1;
  uint64_t result = (void *)(v8 + 56);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 56 + 8 * v11) {
    uint64_t result = memmove(result, (const void *)(v7 + 56), 8 * v11);
  }
  uint64_t v25 = v7 + 56;
  uint64_t v26 = v9;
  int64_t v12 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v7 + 56);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v16) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v12;
    if (!v21)
    {
      int64_t v12 = v20 + 1;
      if (v20 + 1 >= v16) {
        goto LABEL_23;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v12);
      if (!v21) {
        break;
      }
    }
LABEL_22:
    unint64_t v15 = (v21 - 1) & v21;
    unint64_t v18 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(void *)(v7 + 48) + v19, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v26 + 48) + v19, v6, v2);
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v16)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    NSString v1 = v24;
    uint64_t v9 = v26;
    goto LABEL_25;
  }
  unint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    int64_t v12 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v12);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100067914(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = a1(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v26 - v8;
  sub_1000222D4(a2);
  uint64_t v10 = *v2;
  uint64_t v11 = static _SetStorage.copy(original:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_30:
    uint64_t *v4 = v12;
    return result;
  }
  uint64_t result = (void *)(v11 + 56);
  unint64_t v14 = (unint64_t)((1 << *(unsigned char *)(v12 + 32)) + 63) >> 6;
  uint64_t v27 = v4;
  uint64_t v28 = (const void *)(v10 + 56);
  if (v12 != v10 || (unint64_t)result >= v10 + 56 + 8 * v14) {
    uint64_t result = memmove(result, v28, 8 * v14);
  }
  int64_t v16 = 0;
  *(void *)(v12 + 16) = *(void *)(v10 + 16);
  uint64_t v17 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & *(void *)(v10 + 56);
  int64_t v29 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      unint64_t v20 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v21 = v20 | (v16 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v23 >= v29) {
      goto LABEL_28;
    }
    unint64_t v24 = *((void *)v28 + v23);
    ++v16;
    if (!v24)
    {
      int64_t v16 = v23 + 1;
      if (v23 + 1 >= v29) {
        goto LABEL_28;
      }
      unint64_t v24 = *((void *)v28 + v16);
      if (!v24)
      {
        int64_t v16 = v23 + 2;
        if (v23 + 2 >= v29) {
          goto LABEL_28;
        }
        unint64_t v24 = *((void *)v28 + v16);
        if (!v24) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v19 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v16 << 6);
LABEL_12:
    unint64_t v22 = *(void *)(v6 + 72) * v21;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, *(void *)(v10 + 48) + v22, v5);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v12 + 48) + v22, v9, v5);
  }
  int64_t v25 = v23 + 3;
  if (v25 >= v29)
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t v4 = v27;
    goto LABEL_30;
  }
  unint64_t v24 = *((void *)v28 + v25);
  if (v24)
  {
    int64_t v16 = v25;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v16 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v16 >= v29) {
      goto LABEL_28;
    }
    unint64_t v24 = *((void *)v28 + v16);
    ++v25;
    if (v24) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_100067BC4()
{
  NSString v1 = v0;
  sub_1000222D4(&qword_1000960E8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    unint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    void *v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100067D78()
{
  NSString v1 = v0;
  sub_1000222D4(&qword_1000960E0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    long long v17 = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = (void *)sub_1000226C0(v17, *((unint64_t *)&v17 + 1));
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100067F2C()
{
  NSString v1 = v0;
  uint64_t v2 = type metadata accessor for Application();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v0;
  sub_1000222D4(&qword_100096138);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = swift_release();
LABEL_33:
    uint64_t *v1 = v9;
    return result;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v35 = v0;
  uint64_t v36 = v7 + 56;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  int64_t v37 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v38 = v3 + 16;
  uint64_t v14 = v8 + 56;
  uint64_t v39 = v3;
  unint64_t v15 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    if (v21 >= v37) {
      goto LABEL_31;
    }
    unint64_t v22 = *(void *)(v36 + 8 * v21);
    ++v17;
    if (!v22)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v37) {
        goto LABEL_31;
      }
      unint64_t v22 = *(void *)(v36 + 8 * v17);
      if (!v22) {
        break;
      }
    }
LABEL_21:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_22:
    uint64_t v24 = v7;
    uint64_t v25 = *(void *)(v7 + 48);
    uint64_t v26 = *(void *)(v39 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v39 + 16))(v6, v25 + v26 * v20, v2);
    sub_1000697C0(&qword_100096128, (void (*)(uint64_t))&type metadata accessor for Application);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v27 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v14 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v28) & ~*(void *)(v14 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_34;
        }
        BOOL v32 = v29 == v31;
        if (v29 == v31) {
          unint64_t v29 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v14 + 8 * v29);
      }
      while (v33 == -1);
      unint64_t v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t result = (*v15)(*(void *)(v9 + 48) + v18 * v26, v6, v2);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v24;
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v37)
  {
LABEL_31:
    uint64_t result = swift_release_n();
    NSString v1 = v35;
    goto LABEL_33;
  }
  unint64_t v22 = *(void *)(v36 + 8 * v23);
  if (v22)
  {
    int64_t v17 = v23;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v17 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v17 >= v37) {
      goto LABEL_31;
    }
    unint64_t v22 = *(void *)(v36 + 8 * v17);
    ++v23;
    if (v22) {
      goto LABEL_21;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_1000682A8()
{
  NSString v1 = v0;
  uint64_t v2 = type metadata accessor for ActivityCategory();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v0;
  sub_1000222D4(&qword_100096120);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v9;
    return result;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v35 = v0;
  uint64_t v36 = v7 + 56;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  int64_t v37 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v38 = v3 + 16;
  uint64_t v14 = v8 + 56;
  uint64_t v39 = v3;
  unint64_t v15 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_24;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v21 >= v37) {
      goto LABEL_33;
    }
    unint64_t v22 = *(void *)(v36 + 8 * v21);
    ++v17;
    if (!v22)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v22 = *(void *)(v36 + 8 * v17);
      if (!v22)
      {
        int64_t v17 = v21 + 2;
        if (v21 + 2 >= v37) {
          goto LABEL_33;
        }
        unint64_t v22 = *(void *)(v36 + 8 * v17);
        if (!v22) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_24:
    uint64_t v24 = v7;
    uint64_t v25 = *(void *)(v7 + 48);
    uint64_t v26 = *(void *)(v39 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v39 + 16))(v6, v25 + v26 * v20, v2);
    sub_1000697C0(&qword_100096110, (void (*)(uint64_t))&type metadata accessor for ActivityCategory);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v27 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v14 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v28) & ~*(void *)(v14 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v32 = v29 == v31;
        if (v29 == v31) {
          unint64_t v29 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v14 + 8 * v29);
      }
      while (v33 == -1);
      unint64_t v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t result = (*v15)(*(void *)(v9 + 48) + v18 * v26, v6, v2);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v24;
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v37)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    NSString v1 = v35;
    goto LABEL_35;
  }
  unint64_t v22 = *(void *)(v36 + 8 * v23);
  if (v22)
  {
    int64_t v17 = v23;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v17 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v17 >= v37) {
      goto LABEL_33;
    }
    unint64_t v22 = *(void *)(v36 + 8 * v17);
    ++v23;
    if (v22) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100068658()
{
  NSString v1 = v0;
  uint64_t v2 = type metadata accessor for WebDomain();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v0;
  sub_1000222D4(&qword_100096108);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v9;
    return result;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v35 = v0;
  uint64_t v36 = v7 + 56;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  int64_t v37 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v38 = v3 + 16;
  uint64_t v14 = v8 + 56;
  uint64_t v39 = v3;
  unint64_t v15 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_24;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v21 >= v37) {
      goto LABEL_33;
    }
    unint64_t v22 = *(void *)(v36 + 8 * v21);
    ++v17;
    if (!v22)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v22 = *(void *)(v36 + 8 * v17);
      if (!v22)
      {
        int64_t v17 = v21 + 2;
        if (v21 + 2 >= v37) {
          goto LABEL_33;
        }
        unint64_t v22 = *(void *)(v36 + 8 * v17);
        if (!v22) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_24:
    uint64_t v24 = v7;
    uint64_t v25 = *(void *)(v7 + 48);
    uint64_t v26 = *(void *)(v39 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v39 + 16))(v6, v25 + v26 * v20, v2);
    sub_1000697C0(&qword_1000960F8, (void (*)(uint64_t))&type metadata accessor for WebDomain);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v27 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v14 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v28) & ~*(void *)(v14 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v32 = v29 == v31;
        if (v29 == v31) {
          unint64_t v29 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v14 + 8 * v29);
      }
      while (v33 == -1);
      unint64_t v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t result = (*v15)(*(void *)(v9 + 48) + v18 * v26, v6, v2);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v24;
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v37)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    NSString v1 = v35;
    goto LABEL_35;
  }
  unint64_t v22 = *(void *)(v36 + 8 * v23);
  if (v22)
  {
    int64_t v17 = v23;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v17 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v17 >= v37) {
      goto LABEL_33;
    }
    unint64_t v22 = *(void *)(v36 + 8 * v17);
    ++v23;
    if (v22) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100068A08()
{
  NSString v1 = v0;
  uint64_t v2 = *v0;
  sub_1000222D4(&qword_1000960E8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    void *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    NSString v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100068CB8()
{
  NSString v1 = v0;
  uint64_t v2 = *v0;
  sub_1000222D4(&qword_1000960E0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    sub_1000226C0(v20, v21);
    Data.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v12);
    uint64_t *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    NSString v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

id sub_100068F6C(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v8 = type metadata accessor for KeyRetriever();
  v22[3] = v8;
  v22[4] = (uint64_t)&protocol witness table for KeyRetriever;
  uint64_t v9 = sub_10002B118(v22);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v9, a3, v8);
  uint64_t v10 = &a4[OBJC_IVAR____TtC18UsageTrackingAgent10TokenCoder_teamIdentifier];
  *(void *)uint64_t v10 = a1;
  *((void *)v10 + 1) = a2;
  swift_bridgeObjectRetain();
  int64_t v11 = a4;
  swift_bridgeObjectRelease();
  if (a2)
  {
    sub_100022928((uint64_t)v22, (uint64_t)v20);
    type metadata accessor for TokenDecoder();
    swift_allocObject();
    swift_bridgeObjectRetain();
    *(void *)&v11[OBJC_IVAR____TtC18UsageTrackingAgent10TokenCoder_decoder] = TokenDecoder.init(teamIdentifier:keyRetriever:)();
    sub_100022928((uint64_t)v22, (uint64_t)v20);
    type metadata accessor for TokenEncoder();
    swift_allocObject();
    uint64_t v12 = TokenEncoder.init(teamIdentifier:keyRetriever:)();
  }
  else
  {
    if (qword_1000950D0 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100022718(v13, (uint64_t)qword_1000974A8);
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      int64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to create token coder with nil team identifier", v16, 2u);
      swift_slowDealloc();
    }

    uint64_t v12 = 0;
    *(void *)&v11[OBJC_IVAR____TtC18UsageTrackingAgent10TokenCoder_decoder] = 0;
  }
  *(void *)&v11[OBJC_IVAR____TtC18UsageTrackingAgent10TokenCoder_encoder] = v12;

  unint64_t v17 = (objc_class *)type metadata accessor for TokenCoder();
  v21.receiver = v11;
  v21.super_class = v17;
  id v18 = objc_msgSendSuper2(&v21, "init");
  sub_10002AE2C((uint64_t)v22);
  return v18;
}

uint64_t sub_1000691A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, uint64_t))
{
  uint64_t v24 = a1;
  uint64_t v21 = a2 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a2 + 56);
  int64_t v22 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  if (!v10) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    id v18 = (uint64_t *)(*(void *)(a2 + 48) + 16 * i);
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    v23[0] = v19;
    v23[1] = v20;
    sub_1000226C0(v19, v20);
    sub_100063120((uint64_t)&v24, (uint64_t)v23, a3, a4);
    if (v4)
    {
      swift_bridgeObjectRelease();
      sub_100022764(v19, v20);
      return swift_release();
    }
    uint64_t result = sub_100022764(v19, v20);
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v12++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v12 >= v22) {
      goto LABEL_26;
    }
    unint64_t v16 = *(void *)(v21 + 8 * v12);
    if (!v16) {
      break;
    }
LABEL_17:
    unint64_t v10 = (v16 - 1) & v16;
  }
  int64_t v17 = v12 + 1;
  if (v12 + 1 >= v22) {
    goto LABEL_26;
  }
  unint64_t v16 = *(void *)(v21 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 2;
  if (v12 + 2 >= v22) {
    goto LABEL_26;
  }
  unint64_t v16 = *(void *)(v21 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 3;
  if (v12 + 3 >= v22) {
    goto LABEL_26;
  }
  unint64_t v16 = *(void *)(v21 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 4;
  if (v12 + 4 >= v22)
  {
LABEL_26:
    swift_release();
    return v24;
  }
  unint64_t v16 = *(void *)(v21 + 8 * v17);
  if (v16)
  {
LABEL_16:
    int64_t v12 = v17;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v12 >= v22) {
      goto LABEL_26;
    }
    unint64_t v16 = *(void *)(v21 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000693BC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  BOOL v27 = (char *)&_swiftEmptyArrayStorage;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v11 << 6))
  {
    unint64_t v14 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_100063750(v15, v16, a2, a3);
    unint64_t v19 = v18;
    uint64_t result = swift_bridgeObjectRelease();
    if (v19 >> 60 == 15)
    {
      if (v8) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1000440B8(0, *((void *)v27 + 2) + 1, 1, v27);
        BOOL v27 = (char *)result;
      }
      unint64_t v24 = *((void *)v27 + 2);
      unint64_t v23 = *((void *)v27 + 3);
      unint64_t v25 = v24 + 1;
      if (v24 >= v23 >> 1)
      {
        uint64_t result = (uint64_t)sub_1000440B8((char *)(v23 > 1), v24 + 1, 1, v27);
        unint64_t v25 = v24 + 1;
        BOOL v27 = (char *)result;
      }
      *((void *)v27 + 2) = v25;
      unint64_t v26 = &v27[16 * v24];
      *((void *)v26 + 4) = v17;
      *((void *)v26 + 5) = v19;
      if (v8) {
        goto LABEL_4;
      }
    }
LABEL_7:
    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v20 >= v9) {
      goto LABEL_29;
    }
    unint64_t v21 = *(void *)(v28 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v9) {
        goto LABEL_29;
      }
      unint64_t v21 = *(void *)(v28 + 8 * v11);
      if (!v21)
      {
        int64_t v11 = v20 + 2;
        if (v20 + 2 >= v9) {
          goto LABEL_29;
        }
        unint64_t v21 = *(void *)(v28 + 8 * v11);
        if (!v21)
        {
          int64_t v11 = v20 + 3;
          if (v20 + 3 >= v9) {
            goto LABEL_29;
          }
          unint64_t v21 = *(void *)(v28 + 8 * v11);
          if (!v21) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v8 = (v21 - 1) & v21;
  }
  int64_t v22 = v20 + 4;
  if (v22 >= v9)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v27;
  }
  unint64_t v21 = *(void *)(v28 + 8 * v22);
  if (v21)
  {
    int64_t v11 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v11 >= v9) {
      goto LABEL_29;
    }
    unint64_t v21 = *(void *)(v28 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100069608(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_1000696A4();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      unint64_t v6 = *v4;
      sub_1000226C0(v5, *v4);
      sub_1000646D8(v7, v5, v6);
      sub_100022764(v7[0], v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

unint64_t sub_1000696A4()
{
  unint64_t result = qword_1000960D8;
  if (!qword_1000960D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000960D8);
  }
  return result;
}

uint64_t sub_1000696F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000222D4((uint64_t *)&unk_100095B90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100069760(uint64_t a1)
{
  uint64_t v2 = sub_1000222D4((uint64_t *)&unk_100095B90);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000697C0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_100069808()
{
  return sub_10006982C();
}

id sub_10006982C()
{
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  Class v2 = Set._bridgeToObjectiveC()().super.isa;
  type metadata accessor for Identifier(0);
  sub_10006A1E4();
  Class v3 = Set._bridgeToObjectiveC()().super.isa;
  Class v4 = DateInterval._bridgeToObjectiveC()().super.isa;
  id v9 = 0;
  id v5 = [v0 queryForApplications:isa webDomains:v2 categories:v3 interval:v4 error:&v9];

  if (v5)
  {
    id v6 = v9;
  }
  else
  {
    id v7 = v9;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v5;
}

uint64_t sub_100069984()
{
  Class v2 = *v0;
  Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
  uint8_t v1[16] = isa;
  v1[2] = v1;
  v1[7] = v1 + 15;
  v1[3] = sub_100021AB0;
  uint64_t v4 = swift_continuation_init();
  v1[10] = _NSConcreteStackBlock;
  v1[11] = 0x40000000;
  v1[12] = sub_100069A9C;
  v1[13] = &unk_10008C070;
  v1[14] = v4;
  [v2 queryForUncategorizedLocalWebUsageDuringInterval:isa completionHandler:v1 + 10];
  return _swift_continuation_await(v1 + 2);
}

uint64_t sub_100069A9C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_1000222D4(&qword_100095330);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    sub_100023228(0, &qword_100095998);
    **(void **)(*(void *)(v3 + 64) + 40) = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    return _swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_100069B88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  int64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))((char *)&dword_100096150 + dword_100096150);
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v17;
  *uint64_t v17 = v8;
  v17[1] = sub_10002C9FC;
  v18.n128_f64[0] = a8;
  return v20(a1, a2, a3, a4, a5, a6, a7, v18);
}

uint64_t sub_100069C88(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, objc_class *a7, objc_class *a8)
{
  sub_1000222D4(&qword_100095D90);
  uint64_t v11 = swift_task_alloc();
  v8[21].super.Class isa = (Class)v11;
  v23.super.Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
  v8[22].super.Class isa = v23.super.isa;
  sub_100037DD0(a3, v11);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }
  v8[23].super.Class isa = isa;
  Class v15 = Array._bridgeToObjectiveC()().super.isa;
  v8[24].super.Class isa = v15;
  sub_100023228(0, (unint64_t *)&qword_100095328);
  Class v16 = Dictionary._bridgeToObjectiveC()().super.isa;
  v8[25].super.Class isa = v16;
  Class v17 = Dictionary._bridgeToObjectiveC()().super.isa;
  v8[26].super.Class isa = v17;
  v8[14].super.Class isa = a7;
  v8[15].super.Class isa = a8;
  v8[10].super.Class isa = (Class)_NSConcreteStackBlock;
  v8[11].super.Class isa = (Class)1107296256;
  v8[12].super.Class isa = (Class)sub_10006A15C;
  v8[13].super.Class isa = (Class)&unk_10008C030;
  __n128 v18 = (objc_class *)_Block_copy(&v8[10]);
  v8[27].super.Class isa = v18;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v8[2].super.Class isa = (Class)v8;
  v8[3].super.Class isa = (Class)sub_100069FA0;
  uint64_t v20 = swift_continuation_init();
  v8[16].super.Class isa = (Class)_NSConcreteStackBlock;
  v8[17].super.Class isa = (Class)0x40000000;
  v8[18].super.Class isa = (Class)sub_10006A1DC;
  v8[19].super.Class isa = (Class)&unk_10008C058;
  v8[20].super.Class isa = (Class)v20;
  swift_retain();
  [ObjCClassFromMetadata queryUsageDuringInterval:v23.super.isa partitionInterval:isa adjustedStartDate:v15 eventStreams:v16 categoryByBundleIdentifier:v17 categoryByWebDomain:v18 usageReportHandler:a1 completionHandler:&v8[16]];
  return _swift_continuation_await(&v8[2]);
}

uint64_t sub_100069FA0()
{
  NSString v1 = *(void **)(*v0 + 208);
  Class v2 = *(void **)(*v0 + 200);
  uint64_t v3 = *(void **)(*v0 + 192);
  uint64_t v4 = *(void **)(*v0 + 184);
  uint64_t v5 = *(void **)(*v0 + 176);
  uint64_t v8 = *v0;
  _Block_release(*(const void **)(*v0 + 216));

  swift_release();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v8 + 8);
  return v6();
}

void sub_10006A15C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_10006A1C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10006A1D4()
{
  return swift_release();
}

uint64_t sub_10006A1DC(uint64_t a1)
{
  return _swift_continuation_resume(*(void *)(a1 + 32));
}

unint64_t sub_10006A1E4()
{
  unint64_t result = qword_100095200;
  if (!qword_100095200)
  {
    type metadata accessor for Identifier(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100095200);
  }
  return result;
}

_UNKNOWN **sub_10006A23C()
{
  return &off_100096158;
}

void sub_10006A248()
{
  sub_100011780();
  sub_100011734((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to load persistent store %{public}@: %{public}@", v1, v2, v3, v4, 2u);
}

void sub_10006A2C0(uint64_t a1, id *a2)
{
  id v7 = [*a2 valueForKey:@"identifier"];
  sub_1000117EC((void *)&_mh_execute_header, &_os_log_default, v2, "Failed to fetch budgets for updating %{public}@/%{public}@: %{public}@", v3, v4, v5, v6, 2u);
}

void sub_10006A37C()
{
  sub_10001182C(__stack_chk_guard);
  sub_100011780();
  sub_100011734((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to save budgets %@: %{public}@", v1, v2, v3, v4, 2u);
}

void sub_10006A3F4()
{
  sub_100011808();
  sub_1000117AC((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to fetch bundle record for the client process: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006A464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10006A4A0()
{
  sub_100011750();
  sub_1000117EC((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to fetch budgets for updating %{public}@/%{public}@: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006A52C()
{
  sub_100011768(__stack_chk_guard);
  sub_100011750();
  sub_100011734((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to save budget %{public}@: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006A59C()
{
  sub_100011768(__stack_chk_guard);
  sub_100011750();
  sub_100011734((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to fetch budgets for deletion for activities %{public}@: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006A60C()
{
  sub_100011768(__stack_chk_guard);
  sub_100011750();
  sub_100011734((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to delete budgets for activities %{public}@: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006A67C()
{
  sub_10001182C(__stack_chk_guard);
  sub_100011780();
  sub_100011734((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to fetch budgets for deletion matching %{public}@: %{public}@", v1, v2, v3, v4, 2u);
}

void sub_10006A6F4()
{
  sub_10001182C(__stack_chk_guard);
  sub_100011780();
  sub_100011734((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to delete budgets matching %{public}@: %{public}@", v1, v2, v3, v4, 2u);
}

void sub_10006A76C(void *a1)
{
  uint64_t v1 = [a1 predicate];
  sub_100011734((void *)&_mh_execute_header, &_os_log_default, v2, "Failed to fetch budgets matching %{public}@: %{public}@", v3, v4, v5, v6, 2u);
}

void sub_10006A808(uint64_t a1, uint64_t a2)
{
  sub_100011838(a1, a2, 3.852e-34);
  sub_100011814((void *)&_mh_execute_header, &_os_log_default, v2, "Looking up %lu web domain categories to determine if budgeted web domains are associated with applications", v3);
}

void sub_10006A848(uint64_t a1, uint64_t a2)
{
  sub_100011838(a1, a2, 3.852e-34);
  sub_100011814((void *)&_mh_execute_header, &_os_log_default, v2, "Looking up %lu application categories to determine if there are any associated equivalent bundle identifiers", v3);
}

void sub_10006A888(void *a1)
{
  [a1 count];
  sub_100011808();
  sub_100011814((void *)&_mh_execute_header, &_os_log_default, v1, "Looking up %lu application categories to find all equivalent applications and web domain budgets that are associated with applications", v2);
}

void sub_10006A900(uint64_t a1, uint64_t a2)
{
  sub_100011838(a1, a2, 3.852e-34);
  sub_100011814((void *)&_mh_execute_header, &_os_log_default, v2, "Looking up %lu application categories to determine if budgeted applications are associated with web domains", v3);
}

void sub_10006A940(uint64_t a1, uint64_t a2)
{
  sub_100011838(a1, a2, 3.852e-34);
  sub_100011814((void *)&_mh_execute_header, &_os_log_default, v2, "Looking up %lu web domain categories to determine if budgeted web domains are associated with other web domains", v3);
}

void sub_10006A980(void *a1)
{
  [a1 count];
  sub_100011808();
  sub_100011814((void *)&_mh_execute_header, &_os_log_default, v1, "Looking up %lu web domain categories to find application budgets that are associated with web domains", v2);
}

void sub_10006A9F8()
{
  sub_1000117C8();
  sub_1000117EC((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to save after processing budgets %@ and events %@: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006AA68()
{
  sub_100011768(__stack_chk_guard);
  sub_100011750();
  sub_100011734((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to fetch budgets for %{public}@: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006AAD8()
{
  sub_10001182C(__stack_chk_guard);
  int v1 = 138543362;
  uint64_t v2 = v0;
  _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT, "Failed to get managed object ID for budget URI: %{public}@", (uint8_t *)&v1, 0xCu);
}

void sub_10006AB58()
{
  sub_100011780();
  sub_100011734((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to save after processing device activity budget %@: %{public}@", v1, v2, v3, v4, 2u);
}

void sub_10006ABD0()
{
  sub_100011780();
  sub_100011734((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to save after processing device activity budgets %@: %{public}@", v1, v2, v3, v4, 2u);
}

void sub_10006AC48(int a1)
{
  v1[0] = 67109120;
  v1[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Failed to determine whether or not the device has been unlocked since boot: %d", (uint8_t *)v1, 8u);
}

void sub_10006ACC8(uint8_t *buf, uint64_t a2, void *a3)
{
  *(_DWORD *)long long buf = 138543362;
  *a3 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Failed to delete local data from iCloud: %{public}@", buf, 0xCu);
}

void sub_10006AD14()
{
  sub_100011808();
  sub_1000117AC((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to remove all Device Activity budgets: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006AD84()
{
  sub_10001E240(__stack_chk_guard);
  sub_10001E1D8();
  sub_100011734((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to fetch budget for device activity %{public}@: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006ADF4()
{
  sub_100011808();
  sub_1000117AC((void *)&_mh_execute_header, &_os_log_default, v0, "Could not start tracking budgeted applications because an error occurred while fetching categories: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006AE64()
{
  sub_100011808();
  sub_1000117AC((void *)&_mh_execute_header, &_os_log_default, v0, "Could not start tracking budgeted applications because an error occurred while fetching applications: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006AED4()
{
  sub_100011808();
  sub_1000117AC((void *)&_mh_execute_header, &_os_log_default, v0, "Could not start tracking budgeted applications because an error occurred while fetching budgets: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006AF44()
{
  sub_100011808();
  sub_1000117AC((void *)&_mh_execute_header, &_os_log_default, v0, "Could not start tracking budgeted applications because an error occurred while fetching them: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006AFB4()
{
  sub_100011808();
  sub_1000117AC((void *)&_mh_execute_header, &_os_log_default, v0, "Could not start tracking budgeted web domains because an error occurred while fetching categories: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006B024()
{
  sub_100011808();
  sub_1000117AC((void *)&_mh_execute_header, &_os_log_default, v0, "Could not start tracking budgeted web domains because an error occurred while fetching web domains: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006B094()
{
  sub_100011808();
  sub_1000117AC((void *)&_mh_execute_header, &_os_log_default, v0, "Could not start tracking budgeted web domains because an error occurred while fetching budgets: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006B104()
{
  sub_100011808();
  sub_1000117AC((void *)&_mh_execute_header, &_os_log_default, v0, "Could not start tracking budgeted web domains because an error occurred while fetching them: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006B174()
{
  sub_100011808();
  sub_1000117AC((void *)&_mh_execute_header, &_os_log_default, v0, "Could not start tracking now playing because an error occurred while fetching categories: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006B1E4()
{
  sub_100011808();
  sub_1000117AC((void *)&_mh_execute_header, &_os_log_default, v0, "Could not start tracking budgeted Now Playing because an error occurred while fetching budgets: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006B254()
{
  sub_100011808();
  sub_1000117AC((void *)&_mh_execute_header, &_os_log_default, v0, "Could not start tracking video usage because an error occurred while fetching categories: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006B2C4()
{
  sub_100011808();
  sub_1000117AC((void *)&_mh_execute_header, &_os_log_default, v0, "Could not start tracking video usage because an error occurred while fetching bundle identifiers: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006B334()
{
  sub_100011808();
  sub_1000117AC((void *)&_mh_execute_header, &_os_log_default, v0, "Could not start tracking video usage because an error occurred while fetching web domains: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006B3A4()
{
  sub_100011808();
  sub_1000117AC((void *)&_mh_execute_header, &_os_log_default, v0, "Could not start tracking budgeted video because an error occurred while fetching budgets: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006B414()
{
  sub_100011808();
  sub_1000117AC((void *)&_mh_execute_header, &_os_log_default, v0, "Could not start tracking budgeted video applications because an error occurred while fetching them: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006B484()
{
  sub_100011808();
  sub_1000117AC((void *)&_mh_execute_header, &_os_log_default, v0, "Could not start tracking budgeted video web domains because an error occurred while fetching them: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006B4F4(uint64_t a1, void *a2)
{
  id v7 = [a2 error];
  sub_100011734((void *)&_mh_execute_header, &_os_log_default, v2, "Failed to subscribe for %{public}@: %{public}@", v3, v4, v5, v6, 2u);
}

void sub_10006B594()
{
  sub_100011808();
  sub_1000117AC((void *)&_mh_execute_header, &_os_log_default, v0, "Error fetching budgets: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006B604()
{
  sub_10001E1D8();
  sub_100011734((void *)&_mh_execute_header, &_os_log_default, v0, "Unregistered alarm for today in %{public}@, but received an error fetching and clearing posted budget notification times: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006B678()
{
  sub_100011808();
  __int16 v2 = 2082;
  uint64_t v3 = v0;
  _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT, "Failed to create budget URI from string: %{public}s for alarm: %{public}s", v1, 0x16u);
}

void sub_10006B700()
{
  sub_10001E1D8();
  sub_100011734((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to fetch budget for device activity %{public}s: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006B774()
{
  sub_100011808();
  sub_1000117AC((void *)&_mh_execute_header, &_os_log_default, v0, "Error checking event status: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006B7E4()
{
  sub_100011808();
  sub_1000117AC((void *)&_mh_execute_header, &_os_log_default, v0, "Error checking budget status: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006B854()
{
  sub_100011808();
  sub_1000117AC((void *)&_mh_execute_header, &_os_log_default, v0, "Error fetching budgets and events: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006B8C4()
{
  sub_100011808();
  sub_1000117AC((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to fetch all device activity budgets for significant time change notification: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006B934()
{
  sub_10001E240(__stack_chk_guard);
  sub_10001E1D8();
  sub_100011734((void *)&_mh_execute_header, &_os_log_default, v0, "Error fetching budgets for applications: %{public}@, %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006B9A4()
{
  sub_10001E240(__stack_chk_guard);
  sub_10001E1D8();
  sub_100011734((void *)&_mh_execute_header, &_os_log_default, v0, "Error fetching budgets for web domains: %{public}@, %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006BA14()
{
  sub_10001E240(__stack_chk_guard);
  sub_10001E1D8();
  sub_100011734((void *)&_mh_execute_header, &_os_log_default, v0, "Error fetching budgets for Now Playing categories: %{public}@, %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006BA84()
{
  sub_10001E240(__stack_chk_guard);
  sub_10001E1D8();
  sub_100011734((void *)&_mh_execute_header, &_os_log_default, v0, "Error fetching budgets for video bundle identifiers: %{public}@, %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006BAF4()
{
  sub_10001E240(__stack_chk_guard);
  sub_10001E1D8();
  sub_100011734((void *)&_mh_execute_header, &_os_log_default, v0, "Error fetching budgets for video web domains: %{public}@, %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006BB64()
{
  sub_100011808();
  _os_log_debug_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG, "Skipping medium urgency sync due to last sync date: %{public}@", v0, 0xCu);
}

void sub_10006BBE0()
{
  sub_100011808();
  sub_1000117AC((void *)&_mh_execute_header, &_os_log_default, v0, "Error synchronizing with medium urgency: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006BC50(uint8_t *buf, uint64_t a2, void *a3)
{
  *(_DWORD *)long long buf = 138543362;
  *a3 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Failed to calculate threshold adjust time: %{public}@", buf, 0xCu);
}

void sub_10006BC9C()
{
  sub_100011780();
  sub_100011734((void *)&_mh_execute_header, &_os_log_default, v0, "Could not compute date for start warning alarm with components: %{public}@ and reference date: %{public}@", v1, v2, v3, v4, 2u);
}

void sub_10006BD14()
{
  sub_100011780();
  sub_100011734((void *)&_mh_execute_header, &_os_log_default, v0, "Could not compute date for end warning alarm with components: %{public}@ and reference date: %{public}@", v1, v2, v3, v4, 2u);
}

void sub_10006BD8C()
{
  sub_100011780();
  sub_100011734((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to create proxy for %{public}@: %{public}@", v1, v2, v3, v4, 2u);
}

void sub_10006BE04()
{
  sub_10001E230(__stack_chk_guard);
  sub_10001E1F0();
  sub_1000117EC((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to notify %{public}@ that %{public}@'s interval will start: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006BE74()
{
  sub_10001E230(__stack_chk_guard);
  sub_10001E1F0();
  sub_1000117EC((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to notify %{public}@ that %{public}@'s interval started: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006BEE4()
{
  sub_10001E230(__stack_chk_guard);
  sub_10001E1F0();
  sub_1000117EC((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to notify %{public}@ that %{public}@'s interval will end: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006BF54()
{
  sub_10001E230(__stack_chk_guard);
  sub_10001E1F0();
  sub_1000117EC((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to notify %{public}@ that %{public}@'s interval ended: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006BFC4()
{
  sub_10001E210();
  sub_1000117EC((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to notify %{public}@ that %{public}@'s threshold will be reached: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006C038()
{
  sub_10001E210();
  sub_1000117EC((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to notify %{public}@ that %{public}@'s threshold was reached: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006C0AC()
{
  sub_10001E210();
  sub_1000117EC((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to notify %{public}@ that %{public}@'s threshold was unreached: %{public}@", v1, v2, v3, v4, v5);
}

void sub_10006C120(void *a1)
{
  uint64_t v2 = [a1 name];
  uint64_t v3 = [a1 clientIdentifier];
  sub_10001EBF4();
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Could not compute next threshold date for %{public}@/%{public}@", v4, 0x16u);
}

void sub_10006C1CC(void *a1, void *a2)
{
  uint64_t v3 = [a1 threshold];
  uint64_t v4 = [a2 name];
  uint8_t v5 = [a2 clientIdentifier];
  int v6 = 138543874;
  id v7 = v3;
  __int16 v8 = 2114;
  uint64_t v9 = v4;
  __int16 v10 = 2114;
  uint64_t v11 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Could not compute warning date for threshold: %{public}@ for %{public}@/%{public}@", (uint8_t *)&v6, 0x20u);
}

void sub_10006C2AC(void *a1)
{
  uint64_t v2 = [a1 name];
  uint64_t v3 = [a1 clientIdentifier];
  sub_10001EBF4();
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Could not compute next interval for %{public}@/%{public}@", v4, 0x16u);
}

void sub_10006C358(uint64_t a1)
{
  int v1 = 138412290;
  uint64_t v2 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Failed to query uncategorized local web usage, %@", (uint8_t *)&v1, 0xCu);
}

void sub_10006C3D8()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG, "No uncategorized web domain was used for more than a minute in the last day, not recording anything with DifferentialPrivacy", v0, 2u);
}

void sub_10006C420(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 40);
  int v2 = 138412290;
  uint64_t v3 = v1;
  _os_log_debug_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG, "Recording the most uncategorized web domain of the day with DifferentialPrivacy: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10006C4A8(uint64_t a1)
{
  int v1 = 138543618;
  uint64_t v2 = a1;
  __int16 v3 = 2114;
  uint64_t v4 = USUsageTrackingPrivateEntitlement;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%{public}@ is missing the %{public}@ entitlement.", (uint8_t *)&v1, 0x16u);
}

void sub_10006C540(uint64_t a1)
{
  int v1 = 138412290;
  uint64_t v2 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Unexpected Mach service name %@", (uint8_t *)&v1, 0xCu);
}

void sub_10006C5C0(uint64_t a1, void *a2)
{
  int v2 = 138543618;
  uint64_t v3 = a1;
  __int16 v4 = 1024;
  unsigned int v5 = [a2 processIdentifier];
  _os_log_debug_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG, "%{public}@ connection received from process %d", (uint8_t *)&v2, 0x12u);
}

NSDateInterval __swiftcall DateInterval._bridgeToObjectiveC()()
{
  return (NSDateInterval)DateInterval._bridgeToObjectiveC()();
}

uint64_t static DateInterval._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t DateInterval.start.getter()
{
  return DateInterval.start.getter();
}

uint64_t DateInterval.duration.getter()
{
  return DateInterval.duration.getter();
}

uint64_t type metadata accessor for DateInterval()
{
  return type metadata accessor for DateInterval();
}

uint64_t static Notification._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Notification._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Notification.object.getter()
{
  return Notification.object.getter();
}

uint64_t type metadata accessor for Notification()
{
  return type metadata accessor for Notification();
}

uint64_t __DataStorage._bytes.getter()
{
  return __DataStorage._bytes.getter();
}

uint64_t __DataStorage._length.getter()
{
  return __DataStorage._length.getter();
}

uint64_t __DataStorage._offset.getter()
{
  return __DataStorage._offset.getter();
}

uint64_t DateComponents.minute.getter()
{
  return DateComponents.minute.getter();
}

uint64_t type metadata accessor for DateComponents()
{
  return type metadata accessor for DateComponents();
}

uint64_t URLResourceValues.totalFileSize.getter()
{
  return URLResourceValues.totalFileSize.getter();
}

uint64_t URLResourceValues.fileSize.getter()
{
  return URLResourceValues.fileSize.getter();
}

uint64_t type metadata accessor for URLResourceValues()
{
  return type metadata accessor for URLResourceValues();
}

uint64_t _BridgedStoredNSError.code.getter()
{
  return _BridgedStoredNSError.code.getter();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t URL.absoluteString.getter()
{
  return URL.absoluteString.getter();
}

uint64_t URL.resourceValues(forKeys:)()
{
  return URL.resourceValues(forKeys:)();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t URL.init(string:)()
{
  return URL.init(string:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

uint64_t Data.init(contentsOf:options:)()
{
  return Data.init(contentsOf:options:)();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Data.hash(into:)()
{
  return Data.hash(into:)();
}

uint64_t static Date.distantFuture.getter()
{
  return static Date.distantFuture.getter();
}

uint64_t Date.debugDescription.getter()
{
  return Date.debugDescription.getter();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t Calendar.startOfDay(for:)()
{
  return Calendar.startOfDay(for:)();
}

uint64_t Calendar.firstWeekday.getter()
{
  return Calendar.firstWeekday.getter();
}

uint64_t Calendar.dateComponents(_:from:to:)()
{
  return Calendar.dateComponents(_:from:to:)();
}

uint64_t Calendar.date(byAdding:value:to:wrappingComponents:)()
{
  return Calendar.date(byAdding:value:to:wrappingComponents:)();
}

uint64_t static Calendar.current.getter()
{
  return static Calendar.current.getter();
}

uint64_t type metadata accessor for Calendar.Component()
{
  return type metadata accessor for Calendar.Component();
}

uint64_t type metadata accessor for Calendar()
{
  return type metadata accessor for Calendar();
}

uint64_t TimeZone.secondsFromGMT(for:)()
{
  return TimeZone.secondsFromGMT(for:)();
}

uint64_t static TimeZone.current.getter()
{
  return static TimeZone.current.getter();
}

uint64_t type metadata accessor for TimeZone()
{
  return type metadata accessor for TimeZone();
}

uint64_t _DeviceActivityData.ApplicationActivity.totalActivityDuration.getter()
{
  return _DeviceActivityData.ApplicationActivity.totalActivityDuration.getter();
}

uint64_t type metadata accessor for _DeviceActivityData.ApplicationActivity()
{
  return type metadata accessor for _DeviceActivityData.ApplicationActivity();
}

uint64_t _DeviceActivityData.CategoryActivity.totalActivityDuration.getter()
{
  return _DeviceActivityData.CategoryActivity.totalActivityDuration.getter();
}

uint64_t _DeviceActivityData.CategoryActivity.identifier.getter()
{
  return _DeviceActivityData.CategoryActivity.identifier.getter();
}

uint64_t _DeviceActivityData.CategoryActivity.webDomainActivities.getter()
{
  return _DeviceActivityData.CategoryActivity.webDomainActivities.getter();
}

uint64_t _DeviceActivityData.CategoryActivity.applicationActivities.getter()
{
  return _DeviceActivityData.CategoryActivity.applicationActivities.getter();
}

uint64_t type metadata accessor for _DeviceActivityData.CategoryActivity()
{
  return type metadata accessor for _DeviceActivityData.CategoryActivity();
}

uint64_t _DeviceActivityData.WebDomainActivity.totalActivityDuration.getter()
{
  return _DeviceActivityData.WebDomainActivity.totalActivityDuration.getter();
}

uint64_t type metadata accessor for _DeviceActivityData.WebDomainActivity()
{
  return type metadata accessor for _DeviceActivityData.WebDomainActivity();
}

uint64_t _DeviceActivityData.ActivitySegment.recordName.getter()
{
  return _DeviceActivityData.ActivitySegment.recordName.getter();
}

uint64_t _DeviceActivityData.ActivitySegment.recordZoneName.getter()
{
  return _DeviceActivityData.ActivitySegment.recordZoneName.getter();
}

uint64_t _DeviceActivityData.ActivitySegment.categoryActivities.getter()
{
  return _DeviceActivityData.ActivitySegment.categoryActivities.getter();
}

uint64_t _DeviceActivityData.ActivitySegment.recordSystemFields.getter()
{
  return _DeviceActivityData.ActivitySegment.recordSystemFields.getter();
}

uint64_t _DeviceActivityData.ActivitySegment.recordSystemFields.setter()
{
  return _DeviceActivityData.ActivitySegment.recordSystemFields.setter();
}

uint64_t type metadata accessor for _DeviceActivityData.ActivitySegment()
{
  return type metadata accessor for _DeviceActivityData.ActivitySegment();
}

uint64_t _DeviceActivityData.activitySegments(filteredBy:)()
{
  return _DeviceActivityData.activitySegments(filteredBy:)();
}

uint64_t _DeviceActivityData.User.altDSID.getter()
{
  return _DeviceActivityData.User.altDSID.getter();
}

uint64_t type metadata accessor for _DeviceActivityData.User()
{
  return type metadata accessor for _DeviceActivityData.User();
}

uint64_t _DeviceActivityData.Metadata.recordName.getter()
{
  return _DeviceActivityData.Metadata.recordName.getter();
}

uint64_t _DeviceActivityData.Metadata.recordSystemFields.getter()
{
  return _DeviceActivityData.Metadata.recordSystemFields.getter();
}

uint64_t _DeviceActivityData.Metadata.recordSystemFields.setter()
{
  return _DeviceActivityData.Metadata.recordSystemFields.setter();
}

uint64_t type metadata accessor for _DeviceActivityData.Metadata()
{
  return type metadata accessor for _DeviceActivityData.Metadata();
}

uint64_t type metadata accessor for _DeviceActivityData()
{
  return type metadata accessor for _DeviceActivityData();
}

uint64_t _DeviceActivityResults.next()()
{
  return _DeviceActivityResults.next()();
}

uint64_t DeviceActivityDataSource.init(dataStoring:)()
{
  return DeviceActivityDataSource.init(dataStoring:)();
}

uint64_t DeviceActivityDataSource.activity(filteredBy:)()
{
  return DeviceActivityDataSource.activity(filteredBy:)();
}

uint64_t DeviceActivityDataSource.localUser.getter()
{
  return DeviceActivityDataSource.localUser.getter();
}

uint64_t DeviceActivityDataSource.init()()
{
  return DeviceActivityDataSource.init()();
}

uint64_t type metadata accessor for DeviceActivityDataSource()
{
  return type metadata accessor for DeviceActivityDataSource();
}

uint64_t dispatch thunk of DeviceActivityDataStoring.deleteLocalData(deleteDeviceIdentifier:segmentIntervals:)()
{
  return dispatch thunk of DeviceActivityDataStoring.deleteLocalData(deleteDeviceIdentifier:segmentIntervals:)();
}

uint64_t dispatch thunk of DeviceActivityDataStoring.deviceIdentifierByCoreDuetIdentifier.getter()
{
  return dispatch thunk of DeviceActivityDataStoring.deviceIdentifierByCoreDuetIdentifier.getter();
}

uint64_t dispatch thunk of DeviceActivityDataStoring.deleteData(olderThan:)()
{
  return dispatch thunk of DeviceActivityDataStoring.deleteData(olderThan:)();
}

uint64_t dispatch thunk of DeviceActivityDataStoring.localTimeZone()()
{
  return dispatch thunk of DeviceActivityDataStoring.localTimeZone()();
}

uint64_t dispatch thunk of DeviceActivityDataStoring.localStartDate()()
{
  return dispatch thunk of DeviceActivityDataStoring.localStartDate()();
}

uint64_t dispatch thunk of DeviceActivityDataStoring.localFirstWeekday()()
{
  return dispatch thunk of DeviceActivityDataStoring.localFirstWeekday()();
}

uint64_t dispatch thunk of DeviceActivityDataStoring.write(localTimeZone:)()
{
  return dispatch thunk of DeviceActivityDataStoring.write(localTimeZone:)();
}

uint64_t dispatch thunk of DeviceActivityDataStoring.write(localStartDate:)()
{
  return dispatch thunk of DeviceActivityDataStoring.write(localStartDate:)();
}

uint64_t dispatch thunk of DeviceActivityDataStoring.write(localFirstWeekday:)()
{
  return dispatch thunk of DeviceActivityDataStoring.write(localFirstWeekday:)();
}

uint64_t dispatch thunk of DeviceActivityDataLocating.localActivitySegmentURL(segmentInterval:recordName:)()
{
  return dispatch thunk of DeviceActivityDataLocating.localActivitySegmentURL(segmentInterval:recordName:)();
}

uint64_t static DeviceActivityAuthorization.isAuthorized.getter()
{
  return static DeviceActivityAuthorization.isAuthorized.getter();
}

uint64_t static DeviceActivityAuthorization.isOverridden.getter()
{
  return static DeviceActivityAuthorization.isOverridden.getter();
}

uint64_t static DeviceActivityAuthorization.isOverridden.setter()
{
  return static DeviceActivityAuthorization.isOverridden.setter();
}

uint64_t static DeviceActivityAuthorization.sharingEnabled.getter()
{
  return static DeviceActivityAuthorization.sharingEnabled.getter();
}

uint64_t static DeviceActivityAuthorization.authorizedClientIdentifiers.getter()
{
  return static DeviceActivityAuthorization.authorizedClientIdentifiers.getter();
}

uint64_t type metadata accessor for DeviceActivityAuthorization()
{
  return type metadata accessor for DeviceActivityAuthorization();
}

uint64_t DeviceActivityDataLocations.init()()
{
  return DeviceActivityDataLocations.init()();
}

uint64_t type metadata accessor for DeviceActivityDataLocations()
{
  return type metadata accessor for DeviceActivityDataLocations();
}

uint64_t type metadata accessor for DeviceActivityFilter.SegmentInterval()
{
  return type metadata accessor for DeviceActivityFilter.SegmentInterval();
}

uint64_t DeviceActivityFilter.init(segment:userAltDSID:deviceIdentifier:untokenizedApplications:untokenizedCategories:untokenizedWebDomains:)()
{
  return DeviceActivityFilter.init(segment:userAltDSID:deviceIdentifier:untokenizedApplications:untokenizedCategories:untokenizedWebDomains:)();
}

uint64_t type metadata accessor for DeviceActivityFilter()
{
  return type metadata accessor for DeviceActivityFilter();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DeviceActivityDataStore.deleteLocalData(deleteDeviceIdentifier:segmentIntervals:)(Swift::Bool deleteDeviceIdentifier, Swift::OpaquePointer segmentIntervals)
{
}

uint64_t DeviceActivityDataStore.deleteRemoteData(deviceIdentifier:segmentInterval:)()
{
  return DeviceActivityDataStore.deleteRemoteData(deviceIdentifier:segmentInterval:)();
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DeviceActivityDataStore.localDeviceIdentifier()()
{
  uint64_t v0 = DeviceActivityDataStore.localDeviceIdentifier()();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DeviceActivityDataStore.deleteAllData()()
{
}

uint64_t DeviceActivityDataStore.moveLocalActivitySegmentToCloud(userAltDSID:deviceIdentifier:segmentInterval:recordName:)()
{
  return DeviceActivityDataStore.moveLocalActivitySegmentToCloud(userAltDSID:deviceIdentifier:segmentInterval:recordName:)();
}

uint64_t DeviceActivityDataStore.localZones.getter()
{
  return DeviceActivityDataStore.localZones.getter();
}

uint64_t type metadata accessor for DeviceActivityDataStore.SyncStateType()
{
  return type metadata accessor for DeviceActivityDataStore.SyncStateType();
}

uint64_t DeviceActivityDataStore.localRecordNames(forZoneName:segmentInterval:)()
{
  return DeviceActivityDataStore.localRecordNames(forZoneName:segmentInterval:)();
}

uint64_t DeviceActivityDataStore.saveLocalSegment(_:segmentInterval:)()
{
  return DeviceActivityDataStore.saveLocalSegment(_:segmentInterval:)();
}

uint64_t DeviceActivityDataStore.fetchCloudSegment(userAltDSID:deviceIdentifier:segmentInterval:recordName:)()
{
  return DeviceActivityDataStore.fetchCloudSegment(userAltDSID:deviceIdentifier:segmentInterval:recordName:)();
}

uint64_t DeviceActivityDataStore.fetchLocalSegment(segmentInterval:recordName:)()
{
  return DeviceActivityDataStore.fetchLocalSegment(segmentInterval:recordName:)();
}

uint64_t DeviceActivityDataStore.saveLocalMetadata(_:)()
{
  return DeviceActivityDataStore.saveLocalMetadata(_:)();
}

uint64_t DeviceActivityDataStore.fetchCloudMetadata(userAltDSID:deviceIdentifier:segmentInterval:)()
{
  return DeviceActivityDataStore.fetchCloudMetadata(userAltDSID:deviceIdentifier:segmentInterval:)();
}

uint64_t DeviceActivityDataStore.fetchLocalMetadata(segmentInterval:)()
{
  return DeviceActivityDataStore.fetchLocalMetadata(segmentInterval:)();
}

uint64_t DeviceActivityDataStore.saveEncodedCloudSegment(_:userAltDSID:deviceIdentifier:segmentInterval:recordName:)()
{
  return DeviceActivityDataStore.saveEncodedCloudSegment(_:userAltDSID:deviceIdentifier:segmentInterval:recordName:)();
}

uint64_t DeviceActivityDataStore.moveLocalMetadataToCloud(userAltDSID:deviceIdentifier:segmentInterval:)()
{
  return DeviceActivityDataStore.moveLocalMetadataToCloud(userAltDSID:deviceIdentifier:segmentInterval:)();
}

uint64_t DeviceActivityDataStore.saveEncodedCloudMetadata(_:userAltDSID:deviceIdentifier:segmentInterval:)()
{
  return DeviceActivityDataStore.saveEncodedCloudMetadata(_:userAltDSID:deviceIdentifier:segmentInterval:)();
}

uint64_t DeviceActivityDataStore.write<A>(_:type:)()
{
  return DeviceActivityDataStore.write<A>(_:type:)();
}

uint64_t static DeviceActivityDataStore.decode<A>(_:)()
{
  return static DeviceActivityDataStore.decode<A>(_:)();
}

uint64_t static DeviceActivityDataStore.encode<A>(_:)()
{
  return static DeviceActivityDataStore.encode<A>(_:)();
}

uint64_t DeviceActivityDataStore.syncState<A>(_:)()
{
  return DeviceActivityDataStore.syncState<A>(_:)();
}

uint64_t DeviceActivityDataStore.init()()
{
  return DeviceActivityDataStore.init()();
}

uint64_t type metadata accessor for DeviceActivityDataStore()
{
  return type metadata accessor for DeviceActivityDataStore();
}

uint64_t static EventStreams.identifiers(during:)()
{
  return static EventStreams.identifiers(during:)();
}

uint64_t static EventStreams.currentWebDomains.getter()
{
  return static EventStreams.currentWebDomains.getter();
}

uint64_t static EventStreams.currentBundleIdentifiers.getter()
{
  return static EventStreams.currentBundleIdentifiers.getter();
}

uint64_t static EventStreams.isQuickLookVideoNowPlaying.getter()
{
  return static EventStreams.isQuickLookVideoNowPlaying.getter();
}

uint64_t static EventStreams.allRemoteCoreDuetIdentifiers.getter()
{
  return static EventStreams.allRemoteCoreDuetIdentifiers.getter();
}

uint64_t static EventStreams.currentMediaUsageIdentifiers.getter()
{
  return static EventStreams.currentMediaUsageIdentifiers.getter();
}

uint64_t static EventStreams.Biome.all.getter()
{
  return static EventStreams.Biome.all.getter();
}

uint64_t static EventStreams.adjust(_:)()
{
  return static EventStreams.adjust(_:)();
}

uint64_t type metadata accessor for EventStreams()
{
  return type metadata accessor for EventStreams();
}

uint64_t _SegmentInterval.init(unlocalizedSegmentName:)()
{
  return _SegmentInterval.init(unlocalizedSegmentName:)();
}

uint64_t static _SegmentInterval.allCases.getter()
{
  return static _SegmentInterval.allCases.getter();
}

uint64_t type metadata accessor for _SegmentInterval()
{
  return type metadata accessor for _SegmentInterval();
}

uint64_t static Feature.isDeviceActivityBiomeEnabled.getter()
{
  return static Feature.isDeviceActivityBiomeEnabled.getter();
}

uint64_t static Feature.isDeviceActivityUIEnabled.getter()
{
  return static Feature.isDeviceActivityUIEnabled.getter();
}

uint64_t type metadata accessor for Feature()
{
  return type metadata accessor for Feature();
}

uint64_t type metadata accessor for Application()
{
  return type metadata accessor for Application();
}

uint64_t ActivityCategory.init(identifier:localizedDisplayName:)()
{
  return ActivityCategory.init(identifier:localizedDisplayName:)();
}

uint64_t type metadata accessor for ActivityCategory()
{
  return type metadata accessor for ActivityCategory();
}

uint64_t Token.data.getter()
{
  return Token.data.getter();
}

uint64_t Token.init(data:)()
{
  return Token.init(data:)();
}

uint64_t type metadata accessor for WebDomain()
{
  return type metadata accessor for WebDomain();
}

uint64_t KeyRetriever.init()()
{
  return KeyRetriever.init()();
}

uint64_t type metadata accessor for KeyRetriever()
{
  return type metadata accessor for KeyRetriever();
}

uint64_t TokenDecoder.init(teamIdentifier:keyRetriever:)()
{
  return TokenDecoder.init(teamIdentifier:keyRetriever:)();
}

uint64_t dispatch thunk of TokenDecoder.decode(bundleIdentifierToken:)()
{
  return dispatch thunk of TokenDecoder.decode(bundleIdentifierToken:)();
}

uint64_t dispatch thunk of TokenDecoder.decode(categoryIdentifierToken:)()
{
  return dispatch thunk of TokenDecoder.decode(categoryIdentifierToken:)();
}

uint64_t dispatch thunk of TokenDecoder.decode(webDomainToken:)()
{
  return dispatch thunk of TokenDecoder.decode(webDomainToken:)();
}

uint64_t type metadata accessor for TokenDecoder()
{
  return type metadata accessor for TokenDecoder();
}

uint64_t TokenEncoder.init(teamIdentifier:keyRetriever:)()
{
  return TokenEncoder.init(teamIdentifier:keyRetriever:)();
}

uint64_t type metadata accessor for TokenEncoder()
{
  return type metadata accessor for TokenEncoder();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t CKSyncEngine.Configuration.apsMachServiceName.setter()
{
  return CKSyncEngine.Configuration.apsMachServiceName.setter();
}

uint64_t CKSyncEngine.Configuration.useOpportunisticPushTopic.setter()
{
  return CKSyncEngine.Configuration.useOpportunisticPushTopic.setter();
}

uint64_t CKSyncEngine.Configuration.init(database:stateSerialization:delegate:)()
{
  return CKSyncEngine.Configuration.init(database:stateSerialization:delegate:)();
}

uint64_t type metadata accessor for CKSyncEngine.Configuration()
{
  return type metadata accessor for CKSyncEngine.Configuration();
}

uint64_t CKSyncEngine.SendChangesContext.options.getter()
{
  return CKSyncEngine.SendChangesContext.options.getter();
}

uint64_t CKSyncEngine.SendChangesOptions.Scope.contains(_:)()
{
  return CKSyncEngine.SendChangesOptions.Scope.contains(_:)();
}

uint64_t type metadata accessor for CKSyncEngine.SendChangesOptions.Scope()
{
  return type metadata accessor for CKSyncEngine.SendChangesOptions.Scope();
}

uint64_t CKSyncEngine.SendChangesOptions.scope.getter()
{
  return CKSyncEngine.SendChangesOptions.scope.getter();
}

uint64_t type metadata accessor for CKSyncEngine.SendChangesOptions()
{
  return type metadata accessor for CKSyncEngine.SendChangesOptions();
}

uint64_t type metadata accessor for CKSyncEngine.FetchChangesOptions.Scope()
{
  return type metadata accessor for CKSyncEngine.FetchChangesOptions.Scope();
}

uint64_t CKSyncEngine.FetchChangesOptions.init(scope:operationGroup:)()
{
  return CKSyncEngine.FetchChangesOptions.init(scope:operationGroup:)();
}

uint64_t type metadata accessor for CKSyncEngine.FetchChangesOptions()
{
  return type metadata accessor for CKSyncEngine.FetchChangesOptions();
}

uint64_t type metadata accessor for CKSyncEngine.PendingDatabaseChange()
{
  return type metadata accessor for CKSyncEngine.PendingDatabaseChange();
}

uint64_t CKSyncEngine.RecordZoneChangeBatch.init(pendingChanges:synchronousRecordProvider:)()
{
  return CKSyncEngine.RecordZoneChangeBatch.init(pendingChanges:synchronousRecordProvider:)();
}

uint64_t type metadata accessor for CKSyncEngine.RecordZoneChangeBatch()
{
  return type metadata accessor for CKSyncEngine.RecordZoneChangeBatch();
}

uint64_t type metadata accessor for CKSyncEngine.PendingRecordZoneChange()
{
  return type metadata accessor for CKSyncEngine.PendingRecordZoneChange();
}

uint64_t CKSyncEngine.Event.StateUpdate.stateSerialization.getter()
{
  return CKSyncEngine.Event.StateUpdate.stateSerialization.getter();
}

uint64_t type metadata accessor for CKSyncEngine.Event.StateUpdate()
{
  return type metadata accessor for CKSyncEngine.Event.StateUpdate();
}

uint64_t type metadata accessor for CKSyncEngine.Event.AccountChange.ChangeType()
{
  return type metadata accessor for CKSyncEngine.Event.AccountChange.ChangeType();
}

uint64_t CKSyncEngine.Event.AccountChange.changeType.getter()
{
  return CKSyncEngine.Event.AccountChange.changeType.getter();
}

uint64_t type metadata accessor for CKSyncEngine.Event.AccountChange()
{
  return type metadata accessor for CKSyncEngine.Event.AccountChange();
}

uint64_t CKSyncEngine.Event.SentDatabaseChanges.savedZones.getter()
{
  return CKSyncEngine.Event.SentDatabaseChanges.savedZones.getter();
}

uint64_t CKSyncEngine.Event.SentDatabaseChanges.deletedZoneIDs.getter()
{
  return CKSyncEngine.Event.SentDatabaseChanges.deletedZoneIDs.getter();
}

uint64_t type metadata accessor for CKSyncEngine.Event.SentDatabaseChanges()
{
  return type metadata accessor for CKSyncEngine.Event.SentDatabaseChanges();
}

uint64_t CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave.error.getter()
{
  return CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave.error.getter();
}

uint64_t CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave.record.getter()
{
  return CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave.record.getter();
}

uint64_t type metadata accessor for CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave()
{
  return type metadata accessor for CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave();
}

uint64_t CKSyncEngine.Event.SentRecordZoneChanges.failedRecordSaves.getter()
{
  return CKSyncEngine.Event.SentRecordZoneChanges.failedRecordSaves.getter();
}

uint64_t CKSyncEngine.Event.SentRecordZoneChanges.failedRecordDeletes.getter()
{
  return CKSyncEngine.Event.SentRecordZoneChanges.failedRecordDeletes.getter();
}

uint64_t CKSyncEngine.Event.SentRecordZoneChanges.deletedRecordIDs.getter()
{
  return CKSyncEngine.Event.SentRecordZoneChanges.deletedRecordIDs.getter();
}

uint64_t CKSyncEngine.Event.SentRecordZoneChanges.savedRecords.getter()
{
  return CKSyncEngine.Event.SentRecordZoneChanges.savedRecords.getter();
}

uint64_t type metadata accessor for CKSyncEngine.Event.SentRecordZoneChanges()
{
  return type metadata accessor for CKSyncEngine.Event.SentRecordZoneChanges();
}

uint64_t CKSyncEngine.Event.FetchedDatabaseChanges.deletions.getter()
{
  return CKSyncEngine.Event.FetchedDatabaseChanges.deletions.getter();
}

uint64_t type metadata accessor for CKSyncEngine.Event.FetchedDatabaseChanges()
{
  return type metadata accessor for CKSyncEngine.Event.FetchedDatabaseChanges();
}

uint64_t CKSyncEngine.Event.FetchedRecordZoneChanges.modifications.getter()
{
  return CKSyncEngine.Event.FetchedRecordZoneChanges.modifications.getter();
}

uint64_t CKSyncEngine.Event.FetchedRecordZoneChanges.deletions.getter()
{
  return CKSyncEngine.Event.FetchedRecordZoneChanges.deletions.getter();
}

uint64_t type metadata accessor for CKSyncEngine.Event.FetchedRecordZoneChanges()
{
  return type metadata accessor for CKSyncEngine.Event.FetchedRecordZoneChanges();
}

uint64_t type metadata accessor for CKSyncEngine.Event()
{
  return type metadata accessor for CKSyncEngine.Event();
}

uint64_t CKSyncEngine.State.Serialization.init(deprecatedData:)()
{
  return CKSyncEngine.State.Serialization.init(deprecatedData:)();
}

uint64_t type metadata accessor for CKSyncEngine.State.Serialization()
{
  return type metadata accessor for CKSyncEngine.State.Serialization();
}

uint64_t CKSyncEngine.State.pendingRecordZoneChanges.getter()
{
  return CKSyncEngine.State.pendingRecordZoneChanges.getter();
}

Swift::Void __swiftcall CKSyncEngine.State.add(pendingDatabaseChanges:)(Swift::OpaquePointer pendingDatabaseChanges)
{
}

Swift::Void __swiftcall CKSyncEngine.State.add(pendingRecordZoneChanges:)(Swift::OpaquePointer pendingRecordZoneChanges)
{
}

Swift::Void __swiftcall CKSyncEngine.State.remove(pendingRecordZoneChanges:)(Swift::OpaquePointer pendingRecordZoneChanges)
{
}

uint64_t CKSyncEngine.state.getter()
{
  return CKSyncEngine.state.getter();
}

uint64_t CKSyncEngine.database.getter()
{
  return CKSyncEngine.database.getter();
}

uint64_t type metadata accessor for CKSyncEngine()
{
  return type metadata accessor for CKSyncEngine();
}

uint64_t CKSyncEngine.init(_:)()
{
  return CKSyncEngine.init(_:)();
}

uint64_t static DispatchTimeoutResult.== infix(_:_:)()
{
  return static DispatchTimeoutResult.== infix(_:_:)();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return type metadata accessor for DispatchQoS.QoSClass();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t static DispatchTime.now()()
{
  return static DispatchTime.now()();
}

uint64_t type metadata accessor for DispatchTime()
{
  return type metadata accessor for DispatchTime();
}

uint64_t + infix(_:_:)()
{
  return + infix(_:_:)();
}

uint64_t related decl 'e' for CKErrorCode.description.getter()
{
  return related decl 'e' for CKErrorCode.description.getter();
}

uint64_t related decl 'e' for CKErrorCode.clientRecord.getter()
{
  return related decl 'e' for CKErrorCode.clientRecord.getter();
}

uint64_t related decl 'e' for CKErrorCode.serverRecord.getter()
{
  return related decl 'e' for CKErrorCode.serverRecord.getter();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t Sequence.first(where:)()
{
  return Sequence.first(where:)();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t static Array._adoptStorage(_:count:)()
{
  return static Array._adoptStorage(_:count:)();
}

uint64_t Array._checkSubscript(_:wasNativeTypeChecked:)()
{
  return Array._checkSubscript(_:wasNativeTypeChecked:)();
}

Swift::Bool __swiftcall Array._hoistableIsNativeTypeChecked()()
{
  return Array._hoistableIsNativeTypeChecked()();
}

uint64_t Array.endIndex.getter()
{
  return Array.endIndex.getter();
}

uint64_t type metadata accessor for Array()
{
  return type metadata accessor for Array();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

NSNumber __swiftcall Double._bridgeToObjectiveC()()
{
  return (NSNumber)Double._bridgeToObjectiveC()();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)Set._bridgeToObjectiveC()();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Set.description.getter()
{
  return Set.description.getter();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return Set.Iterator.init(_cocoa:)();
}

uint64_t RangeReplaceableCollection<>.removeAll(where:)()
{
  return RangeReplaceableCollection<>.removeAll(where:)();
}

uint64_t CKDatabase.DatabaseChange.Deletion.zoneID.getter()
{
  return CKDatabase.DatabaseChange.Deletion.zoneID.getter();
}

uint64_t type metadata accessor for CKDatabase.DatabaseChange.Deletion()
{
  return type metadata accessor for CKDatabase.DatabaseChange.Deletion();
}

uint64_t CKDatabase.RecordZoneChange.Modification.record.getter()
{
  return CKDatabase.RecordZoneChange.Modification.record.getter();
}

uint64_t type metadata accessor for CKDatabase.RecordZoneChange.Modification()
{
  return type metadata accessor for CKDatabase.RecordZoneChange.Modification();
}

uint64_t CKDatabase.RecordZoneChange.Deletion.recordType.getter()
{
  return CKDatabase.RecordZoneChange.Deletion.recordType.getter();
}

uint64_t CKDatabase.RecordZoneChange.Deletion.recordID.getter()
{
  return CKDatabase.RecordZoneChange.Deletion.recordID.getter();
}

uint64_t type metadata accessor for CKDatabase.RecordZoneChange.Deletion()
{
  return type metadata accessor for CKDatabase.RecordZoneChange.Deletion();
}

CKRecordID __swiftcall CKRecordID.init(recordName:zoneID:)(Swift::String recordName, CKRecordZoneID zoneID)
{
  return (CKRecordID)CKRecordID.init(recordName:zoneID:)(recordName._countAndFlagsBits, recordName._object, zoneID.super.isa);
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

CKRecordZoneID __swiftcall CKRecordZoneID.init(zoneName:ownerName:)(Swift::String zoneName, Swift::String ownerName)
{
  return (CKRecordZoneID)CKRecordZoneID.init(zoneName:ownerName:)(zoneName._countAndFlagsBits, zoneName._object, ownerName._countAndFlagsBits, ownerName._object);
}

uint64_t OS_dispatch_group.wait(timeout:)()
{
  return OS_dispatch_group.wait(timeout:)();
}

uint64_t OS_dispatch_group.notify(qos:flags:queue:execute:)()
{
  return OS_dispatch_group.notify(qos:flags:queue:execute:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return static OS_dispatch_queue.global(qos:)();
}

uint64_t CKAcceptSharesOperation.acceptSharesResultBlock.setter()
{
  return CKAcceptSharesOperation.acceptSharesResultBlock.setter();
}

uint64_t CKRecordKeyValueSetting.subscript.setter()
{
  return CKRecordKeyValueSetting.subscript.setter();
}

uint64_t CKModifyRecordsOperation.perRecordSaveBlock.setter()
{
  return CKModifyRecordsOperation.perRecordSaveBlock.setter();
}

uint64_t CKFetchShareMetadataOperation.perShareMetadataResultBlock.setter()
{
  return CKFetchShareMetadataOperation.perShareMetadataResultBlock.setter();
}

uint64_t CKFetchShareParticipantsOperation.perShareParticipantResultBlock.setter()
{
  return CKFetchShareParticipantsOperation.perShareParticipantResultBlock.setter();
}

uint64_t CKFetchShareParticipantsOperation.fetchShareParticipantsResultBlock.setter()
{
  return CKFetchShareParticipantsOperation.fetchShareParticipantsResultBlock.setter();
}

CKRecord __swiftcall CKRecord.init(recordType:recordID:)(Swift::String recordType, CKRecordID recordID)
{
  return (CKRecord)CKRecord.init(recordType:recordID:)(recordType._countAndFlagsBits, recordType._object, recordID.super.isa);
}

uint64_t CKRecord.recordType.getter()
{
  return CKRecord.recordType.getter();
}

uint64_t CKRecord.subscript.getter()
{
  return CKRecord.subscript.getter();
}

uint64_t CKRecord.subscript.setter()
{
  return CKRecord.subscript.setter();
}

uint64_t NSObject.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

uint64_t Optional.debugDescription.getter()
{
  return Optional.debugDescription.getter();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return dispatch thunk of IteratorProtocol.next()();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return StringProtocol.components<A>(separatedBy:)();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t __CocoaSet.makeIterator()()
{
  return __CocoaSet.makeIterator()();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return __CocoaSet.Iterator.next()();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t _ArrayBuffer._getElementSlowPath(_:)()
{
  return _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _dictionaryUpCast<A, B, C, D>(_:)()
{
  return _dictionaryUpCast<A, B, C, D>(_:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _getErrorEmbeddedNSError<A>(_:)()
{
  return _getErrorEmbeddedNSError<A>(_:)();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)()
{
  return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t type metadata accessor for Result()
{
  return type metadata accessor for Result();
}

uint64_t BiomeLibrary()
{
  return _BiomeLibrary();
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return _CFBundleGetIdentifier(bundle);
}

CFDictionaryRef CFBundleGetInfoDictionary(CFBundleRef bundle)
{
  return _CFBundleGetInfoDictionary(bundle);
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return _CFBundleGetMainBundle();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryGetValue(theDict, key);
}

uint64_t MKBUserUnlockedSinceBoot()
{
  return _MKBUserUnlockedSinceBoot();
}

uint64_t SecTaskCopyTeamIdentifier()
{
  return _SecTaskCopyTeamIdentifier();
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return _SecTaskCreateWithAuditToken(allocator, token);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t _os_feature_enabled_impl()
{
  return __os_feature_enabled_impl();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _set_user_dir_suffix()
{
  return __set_user_dir_suffix();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

void bzero(void *a1, size_t a2)
{
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return _clock_gettime_nsec_np(__clock_id);
}

size_t confstr(int a1, char *a2, size_t a3)
{
  return _confstr(a1, a2, a3);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_main(void)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return _dispatch_queue_attr_make_with_autorelease_frequency(attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_begin_catch(void *exc_buf)
{
  return _objc_begin_catch(exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return _objc_msgSendSuper2(a1, a2);
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

int objc_sync_enter(id obj)
{
  return _objc_sync_enter(obj);
}

int objc_sync_exit(id obj)
{
  return _objc_sync_exit(obj);
}

void objc_terminate(void)
{
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

uint64_t os_variant_allows_internal_security_policies()
{
  return _os_variant_allows_internal_security_policies();
}

qos_class_t qos_class_self(void)
{
  return _qos_class_self();
}

int strcmp(const char *__s1, const char *__s2)
{
  return _strcmp(__s1, __s2);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return _strncmp(__s1, __s2, __n);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return _swift_allocateGenericClassMetadata();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_checkMetadataState()
{
  return _swift_checkMetadataState();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_defaultActor_destroy()
{
  return _swift_defaultActor_destroy();
}

uint64_t swift_defaultActor_initialize()
{
  return _swift_defaultActor_initialize();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return _swift_getAssociatedConformanceWitness();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return _swift_getAssociatedTypeWitness();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_isClassType()
{
  return _swift_isClassType();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_projectBox()
{
  return _swift_projectBox();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

uint64_t usageContextContainsPlayingQuickLookVideo()
{
  return _usageContextContainsPlayingQuickLookVideo();
}

uint64_t xpc_copy_event()
{
  return _xpc_copy_event();
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return _xpc_dictionary_create(keys, values, count);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_string(xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_date(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
}

uint64_t xpc_set_event()
{
  return _xpc_set_event();
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

id objc_msgSend_App(void *a1, const char *a2, ...)
{
  return _[a1 App];
}

id objc_msgSend_AppUsage(void *a1, const char *a2, ...)
{
  return _[a1 AppUsage];
}

id objc_msgSend_DSLPublisher(void *a1, const char *a2, ...)
{
  return _[a1 DSLPublisher];
}

id objc_msgSend_Media(void *a1, const char *a2, ...)
{
  return _[a1 Media];
}

id objc_msgSend_MediaUsage(void *a1, const char *a2, ...)
{
  return _[a1 MediaUsage];
}

id objc_msgSend_NowPlaying(void *a1, const char *a2, ...)
{
  return _[a1 NowPlaying];
}

id objc_msgSend_ScreenTime(void *a1, const char *a2, ...)
{
  return _[a1 ScreenTime];
}

id objc_msgSend_URIRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 URIRepresentation];
}

id objc_msgSend_URLByAppendingPathComponent_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:isDirectory:");
}

id objc_msgSend_URLByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathExtension:");
}

id objc_msgSend_URLForDirectory_inDomain_appropriateForURL_create_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForDirectory:inDomain:appropriateForURL:create:error:");
}

id objc_msgSend_URLForResource_withExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForResource:withExtension:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_WebUsage(void *a1, const char *a2, ...)
{
  return _[a1 WebUsage];
}

id objc_msgSend__applicationAlarmDidFire(void *a1, const char *a2, ...)
{
  return _[a1 _applicationAlarmDidFire];
}

id objc_msgSend__applicationRegistrationDidFire(void *a1, const char *a2, ...)
{
  return _[a1 _applicationRegistrationDidFire];
}

id objc_msgSend__areCategoriesBudgetedWithPredicate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_areCategoriesBudgetedWithPredicate:error:");
}

id objc_msgSend__budgetIntervalAlarmDidFire_isWarning_isEndOfInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_budgetIntervalAlarmDidFire:isWarning:isEndOfInterval:");
}

id objc_msgSend__budgetsResetAlarmDidFire_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_budgetsResetAlarmDidFire:");
}

id objc_msgSend__checkBudgetStatusForAllCurrentUsage(void *a1, const char *a2, ...)
{
  return _[a1 _checkBudgetStatusForAllCurrentUsage];
}

id objc_msgSend__checkBudgetStatusForApplications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkBudgetStatusForApplications:");
}

id objc_msgSend__checkBudgetStatusForNowPlayingCategories_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkBudgetStatusForNowPlayingCategories:");
}

id objc_msgSend__checkBudgetStatusForVideoBundleIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkBudgetStatusForVideoBundleIdentifiers:");
}

id objc_msgSend__checkBudgetStatusForVideoWebDomains_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkBudgetStatusForVideoWebDomains:");
}

id objc_msgSend__checkBudgetStatusForWebDomains_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkBudgetStatusForWebDomains:");
}

id objc_msgSend__clearPostedNotificationsForNoLongerExpiredBudgets(void *a1, const char *a2, ...)
{
  return _[a1 _clearPostedNotificationsForNoLongerExpiredBudgets];
}

id objc_msgSend__deviceActivityBudgetWasAddedOrUpdated_didCollectLocalActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deviceActivityBudgetWasAddedOrUpdated:didCollectLocalActivity:");
}

id objc_msgSend__fetchAllBudgetedApplications_webDomains_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchAllBudgetedApplications:webDomains:error:");
}

id objc_msgSend__fetchBudgetsAndEventsMatchingBudgetedUsagePredicate_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchBudgetsAndEventsMatchingBudgetedUsagePredicate:completionHandler:");
}

id objc_msgSend__fetchBudgetsWithPredicate_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchBudgetsWithPredicate:completionHandler:");
}

id objc_msgSend__getDeviceActivityContextForClientIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getDeviceActivityContextForClientIdentifier:");
}

id objc_msgSend__getRemainingTimeForBudgets_referenceDate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getRemainingTimeForBudgets:referenceDate:error:");
}

id objc_msgSend__getRemainingTimeForEvents_referenceDate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getRemainingTimeForEvents:referenceDate:error:");
}

id objc_msgSend__notifyExtensionThatEventDidReachThreshold_activity_clientIdentifier_extensionIdentifier_isWarning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyExtensionThatEventDidReachThreshold:activity:clientIdentifier:extensionIdentifier:isWarning:");
}

id objc_msgSend__notifyExtensionThatEventDidUnreachThreshold_activity_clientIdentifier_extensionIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyExtensionThatEventDidUnreachThreshold:activity:clientIdentifier:extensionIdentifier:");
}

id objc_msgSend__notifyExtensionThatIntervalDidEndForActivity_clientIdentifier_extensionIdentifier_isWarning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyExtensionThatIntervalDidEndForActivity:clientIdentifier:extensionIdentifier:isWarning:");
}

id objc_msgSend__notifyExtensionThatIntervalDidStartForActivity_clientIdentifier_extensionIdentifier_isWarning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyExtensionThatIntervalDidStartForActivity:clientIdentifier:extensionIdentifier:isWarning:");
}

id objc_msgSend__notifyForBudgets_events_nextNotificationEventName_syncForImpendingBudgets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyForBudgets:events:nextNotificationEventName:syncForImpendingBudgets:");
}

id objc_msgSend__nowPlayingAlarmDidFire(void *a1, const char *a2, ...)
{
  return _[a1 _nowPlayingAlarmDidFire];
}

id objc_msgSend__nowPlayingRegistrationDidFire(void *a1, const char *a2, ...)
{
  return _[a1 _nowPlayingRegistrationDidFire];
}

id objc_msgSend__registerForAllUsage(void *a1, const char *a2, ...)
{
  return _[a1 _registerForAllUsage];
}

id objc_msgSend__registerForApplicationUsage(void *a1, const char *a2, ...)
{
  return _[a1 _registerForApplicationUsage];
}

id objc_msgSend__registerForNowPlayingUsage(void *a1, const char *a2, ...)
{
  return _[a1 _registerForNowPlayingUsage];
}

id objc_msgSend__registerForWebDomainUsage(void *a1, const char *a2, ...)
{
  return _[a1 _registerForWebDomainUsage];
}

id objc_msgSend__removeBudgetsWithPredicate_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeBudgetsWithPredicate:completionHandler:");
}

id objc_msgSend__resetDeviceActivityAlarms(void *a1, const char *a2, ...)
{
  return _[a1 _resetDeviceActivityAlarms];
}

id objc_msgSend__setAlarmsOrNotifyExtensionsForDeviceActivityBudgets_notifyForIntervalEnd_isEndOfInterval_includePastActivityIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setAlarmsOrNotifyExtensionsForDeviceActivityBudgets:notifyForIntervalEnd:isEndOfInterval:includePastActivityIfNeeded:");
}

id objc_msgSend__setWarningAlarmOrNotifyExtensionWithComponents_referenceDate_budgetID_activity_clientIdentifier_extensionIdentifier_warnForStartOfInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setWarningAlarmOrNotifyExtensionWithComponents:referenceDate:budgetID:activity:clientIdentifier:extensionIdentifier:warnForStartOfInterval:");
}

id objc_msgSend__startReporting(void *a1, const char *a2, ...)
{
  return _[a1 _startReporting];
}

id objc_msgSend__startTracking(void *a1, const char *a2, ...)
{
  return _[a1 _startTracking];
}

id objc_msgSend__subscribeForApplicationUsage(void *a1, const char *a2, ...)
{
  return _[a1 _subscribeForApplicationUsage];
}

id objc_msgSend__subscribeForNowPlayingUsage(void *a1, const char *a2, ...)
{
  return _[a1 _subscribeForNowPlayingUsage];
}

id objc_msgSend__subscribeForWebDomainUsage(void *a1, const char *a2, ...)
{
  return _[a1 _subscribeForWebDomainUsage];
}

id objc_msgSend__systemTimeDidChange(void *a1, const char *a2, ...)
{
  return _[a1 _systemTimeDidChange];
}

id objc_msgSend__validateBudget_andEvent_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateBudget:andEvent:error:");
}

id objc_msgSend__videoAlarmDidFire(void *a1, const char *a2, ...)
{
  return _[a1 _videoAlarmDidFire];
}

id objc_msgSend__videoRegistrationDidFire(void *a1, const char *a2, ...)
{
  return _[a1 _videoRegistrationDidFire];
}

id objc_msgSend__webDomainAlarmDidFire(void *a1, const char *a2, ...)
{
  return _[a1 _webDomainAlarmDidFire];
}

id objc_msgSend__webDomainRegistrationDidFire(void *a1, const char *a2, ...)
{
  return _[a1 _webDomainRegistrationDidFire];
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _[a1 absoluteString];
}

id objc_msgSend_activity(void *a1, const char *a2, ...)
{
  return _[a1 activity];
}

id objc_msgSend_addBudgetForActivity_withSchedule_events_forClient_withExtension_isPrivateClient_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBudgetForActivity:withSchedule:events:forClient:withExtension:isPrivateClient:error:");
}

id objc_msgSend_addBudgetedApplicationsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBudgetedApplicationsObject:");
}

id objc_msgSend_addBudgetedCategoriesObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBudgetedCategoriesObject:");
}

id objc_msgSend_addBudgetedWebDomainsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBudgetedWebDomainsObject:");
}

id objc_msgSend_addBudgets_darwinNotificationName_notificationTimes_clientIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBudgets:darwinNotificationName:notificationTimes:clientIdentifier:completionHandler:");
}

id objc_msgSend_addEventsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEventsObject:");
}

id objc_msgSend_addNotificationTimesObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addNotificationTimesObject:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addOperationWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperationWithBlock:");
}

id objc_msgSend_addScheduleObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addScheduleObject:");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_appMediaUsageBundleID(void *a1, const char *a2, ...)
{
  return _[a1 appMediaUsageBundleID];
}

id objc_msgSend_appMediaUsageURL(void *a1, const char *a2, ...)
{
  return _[a1 appMediaUsageURL];
}

id objc_msgSend_appUsageBundleID(void *a1, const char *a2, ...)
{
  return _[a1 appUsageBundleID];
}

id objc_msgSend_appUsageType(void *a1, const char *a2, ...)
{
  return _[a1 appUsageType];
}

id objc_msgSend_appWebUsageType(void *a1, const char *a2, ...)
{
  return _[a1 appWebUsageType];
}

id objc_msgSend_appWebUsageWebDomain(void *a1, const char *a2, ...)
{
  return _[a1 appWebUsageWebDomain];
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_applicationIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 applicationIdentifier];
}

id objc_msgSend_applicationRegistration(void *a1, const char *a2, ...)
{
  return _[a1 applicationRegistration];
}

id objc_msgSend_applicationScheduler(void *a1, const char *a2, ...)
{
  return _[a1 applicationScheduler];
}

id objc_msgSend_applicationSubscription(void *a1, const char *a2, ...)
{
  return _[a1 applicationSubscription];
}

id objc_msgSend_applicationTokens(void *a1, const char *a2, ...)
{
  return _[a1 applicationTokens];
}

id objc_msgSend_areCategoriesBudgeted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "areCategoriesBudgeted:");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_auditToken(void *a1, const char *a2, ...)
{
  return _[a1 auditToken];
}

id objc_msgSend_authorizedClientIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 authorizedClientIdentifiers];
}

id objc_msgSend_availableCategoryIDs(void *a1, const char *a2, ...)
{
  return _[a1 availableCategoryIDs];
}

id objc_msgSend_backgroundActivity(void *a1, const char *a2, ...)
{
  return _[a1 backgroundActivity];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_budget(void *a1, const char *a2, ...)
{
  return _[a1 budget];
}

id objc_msgSend_budgetID(void *a1, const char *a2, ...)
{
  return _[a1 budgetID];
}

id objc_msgSend_budgetedApplications(void *a1, const char *a2, ...)
{
  return _[a1 budgetedApplications];
}

id objc_msgSend_budgetedCategories(void *a1, const char *a2, ...)
{
  return _[a1 budgetedCategories];
}

id objc_msgSend_budgetedWebDomains(void *a1, const char *a2, ...)
{
  return _[a1 budgetedWebDomains];
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 bundleIdentifier];
}

id objc_msgSend_bundleIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 bundleIdentifiers];
}

id objc_msgSend_bundleRecordForAuditToken_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleRecordForAuditToken:error:");
}

id objc_msgSend_calendar(void *a1, const char *a2, ...)
{
  return _[a1 calendar];
}

id objc_msgSend_calendarIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 calendarIdentifier];
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _[a1 cancel];
}

id objc_msgSend_categoriesForBundleIDs_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "categoriesForBundleIDs:completionHandler:");
}

id objc_msgSend_categoriesForDomainNames_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "categoriesForDomainNames:completionHandler:");
}

id objc_msgSend_categoryIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 categoryIdentifier];
}

id objc_msgSend_categoryIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 categoryIdentifiers];
}

id objc_msgSend_categoryTokens(void *a1, const char *a2, ...)
{
  return _[a1 categoryTokens];
}

id objc_msgSend_clearPostedNotificationTimesWithCalendarIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearPostedNotificationTimesWithCalendarIdentifier:completionHandler:");
}

id objc_msgSend_clientIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 clientIdentifier];
}

id objc_msgSend_collectLocalActivityWithOptions_shouldSync_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectLocalActivityWithOptions:shouldSync:completionHandler:");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_components_fromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "components:fromDate:");
}

id objc_msgSend_condition(void *a1, const char *a2, ...)
{
  return _[a1 condition];
}

id objc_msgSend_connectionHasPrivateEntitlement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionHasPrivateEntitlement:");
}

id objc_msgSend_container(void *a1, const char *a2, ...)
{
  return _[a1 container];
}

id objc_msgSend_containingBundleRecord(void *a1, const char *a2, ...)
{
  return _[a1 containingBundleRecord];
}

id objc_msgSend_containsDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsDate:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_createDirectoryAtURL_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_currentBundleIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 currentBundleIdentifiers];
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return _[a1 currentCalendar];
}

id objc_msgSend_currentConnection(void *a1, const char *a2, ...)
{
  return _[a1 currentConnection];
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _[a1 currentHandler];
}

id objc_msgSend_currentLocale(void *a1, const char *a2, ...)
{
  return _[a1 currentLocale];
}

id objc_msgSend_currentVideoIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 currentVideoIdentifiers];
}

id objc_msgSend_currentWebDomains(void *a1, const char *a2, ...)
{
  return _[a1 currentWebDomains];
}

id objc_msgSend_darwinNotificationName(void *a1, const char *a2, ...)
{
  return _[a1 darwinNotificationName];
}

id objc_msgSend_dateByAddingComponents_toDate_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingComponents:toDate:options:");
}

id objc_msgSend_decodeApplications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeApplications:");
}

id objc_msgSend_decodeCategories_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeCategories:");
}

id objc_msgSend_decodeWebDomains_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeWebDomains:");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultManager];
}

id objc_msgSend_deleteLocalActivityWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteLocalActivityWithCompletionHandler:");
}

id objc_msgSend_deleteLocalDataAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteLocalDataAndReturnError:");
}

id objc_msgSend_deleteObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteObject:");
}

id objc_msgSend_deregisterCallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deregisterCallback:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_didReachThreshold(void *a1, const char *a2, ...)
{
  return _[a1 didReachThreshold];
}

id objc_msgSend_didWarnForIntervalEnd(void *a1, const char *a2, ...)
{
  return _[a1 didWarnForIntervalEnd];
}

id objc_msgSend_didWarnForIntervalStart(void *a1, const char *a2, ...)
{
  return _[a1 didWarnForIntervalStart];
}

id objc_msgSend_didWarnForThreshold(void *a1, const char *a2, ...)
{
  return _[a1 didWarnForThreshold];
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_downloadWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadWithCompletionHandler:");
}

id objc_msgSend_encodeApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeApplication:");
}

id objc_msgSend_encodeCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeCategory:");
}

id objc_msgSend_encodeWebDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeWebDomain:");
}

id objc_msgSend_endDate(void *a1, const char *a2, ...)
{
  return _[a1 endDate];
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_equivalentBundleIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 equivalentBundleIdentifiers];
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _[a1 error];
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_evaluatePredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evaluatePredicate:");
}

id objc_msgSend_event(void *a1, const char *a2, ...)
{
  return _[a1 event];
}

id objc_msgSend_eventDidReachThreshold_activity_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventDidReachThreshold:activity:replyHandler:");
}

id objc_msgSend_eventDidUnreachThreshold_activity_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventDidUnreachThreshold:activity:replyHandler:");
}

id objc_msgSend_eventWillReachThresholdWarning_activity_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventWillReachThresholdWarning:activity:replyHandler:");
}

id objc_msgSend_events(void *a1, const char *a2, ...)
{
  return _[a1 events];
}

id objc_msgSend_execute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "execute:");
}

id objc_msgSend_existingObjectWithID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingObjectWithID:error:");
}

id objc_msgSend_extensionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 extensionIdentifier];
}

id objc_msgSend_fetchActivitiesForClient_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchActivitiesForClient:error:");
}

id objc_msgSend_fetchAllBudgetedApplicationsAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAllBudgetedApplicationsAndReturnError:");
}

id objc_msgSend_fetchAllBudgetedWebDomainsAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAllBudgetedWebDomainsAndReturnError:");
}

id objc_msgSend_fetchAllBudgetsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAllBudgetsWithCompletionHandler:");
}

id objc_msgSend_fetchAllDeviceActivityBudgetsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAllDeviceActivityBudgetsWithCompletionHandler:");
}

id objc_msgSend_fetchAllRegisteredBudgetsAndEventsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAllRegisteredBudgetsAndEventsWithCompletionHandler:");
}

id objc_msgSend_fetchBudgetForDeviceActivityWithURI_clientIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchBudgetForDeviceActivityWithURI:clientIdentifier:completionHandler:");
}

id objc_msgSend_fetchBudgetForDeviceActivityWithURI_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchBudgetForDeviceActivityWithURI:completionHandler:");
}

id objc_msgSend_fetchBudgetsAndEventsForApplications_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchBudgetsAndEventsForApplications:completionHandler:");
}

id objc_msgSend_fetchBudgetsAndEventsForCategories_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchBudgetsAndEventsForCategories:completionHandler:");
}

id objc_msgSend_fetchBudgetsAndEventsForWebDomains_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchBudgetsAndEventsForWebDomains:completionHandler:");
}

id objc_msgSend_fetchBudgetsAndEventsWithPostedNotificationsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchBudgetsAndEventsWithPostedNotificationsWithCompletionHandler:");
}

id objc_msgSend_fetchBudgetsWithIdentifier_clientIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchBudgetsWithIdentifier:clientIdentifier:completionHandler:");
}

id objc_msgSend_fetchBudgetsWithIdentifiers_clientIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchBudgetsWithIdentifiers:clientIdentifier:completionHandler:");
}

id objc_msgSend_fetchBudgetsWithIdentifiers_clientIdentifiers_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchBudgetsWithIdentifiers:clientIdentifiers:completionHandler:");
}

id objc_msgSend_fetchEventsForActivity_withClient_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchEventsForActivity:withClient:error:");
}

id objc_msgSend_fetchRequest(void *a1, const char *a2, ...)
{
  return _[a1 fetchRequest];
}

id objc_msgSend_fetchScheduleForActivity_withClient_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchScheduleForActivity:withClient:error:");
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 fileSystemRepresentation];
}

id objc_msgSend_filterWithKeyPath_comparison_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterWithKeyPath:comparison:value:");
}

id objc_msgSend_filterWithKeyPath_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterWithKeyPath:value:");
}

id objc_msgSend_firesOnAnyChange(void *a1, const char *a2, ...)
{
  return _[a1 firesOnAnyChange];
}

id objc_msgSend_first(void *a1, const char *a2, ...)
{
  return _[a1 first];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:");
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInMethod:object:file:lineNumber:description:");
}

id objc_msgSend_hasPersistentChangedValues(void *a1, const char *a2, ...)
{
  return _[a1 hasPersistentChangedValues];
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return _[a1 host];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _[a1 identifier];
}

id objc_msgSend_includesPastActivity(void *a1, const char *a2, ...)
{
  return _[a1 includesPastActivity];
}

id objc_msgSend_indexOfObjectPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObjectPassingTest:");
}

id objc_msgSend_initWithActivity_budgetID_clientIdentifier_extensionIdentifier_intervalDidStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithActivity:budgetID:clientIdentifier:extensionIdentifier:intervalDidStart:");
}

id objc_msgSend_initWithApplicationTokens_categoryTokens_webDomainTokens_threshold_includesPastActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithApplicationTokens:categoryTokens:webDomainTokens:threshold:includesPastActivity:");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithBundleIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifier:error:");
}

id objc_msgSend_initWithBundleIdentifiers_categoryIdentifiers_domains_interval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifiers:categoryIdentifiers:domains:interval:");
}

id objc_msgSend_initWithBundleIdentifiers_categoryIdentifiers_webDomains_threshold_includesPastActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifiers:categoryIdentifiers:webDomains:threshold:includesPastActivity:");
}

id objc_msgSend_initWithCalendarIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCalendarIdentifier:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithClientIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClientIdentifier:error:");
}

id objc_msgSend_initWithCondition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCondition:");
}

id objc_msgSend_initWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfURL:");
}

id objc_msgSend_initWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContext:");
}

id objc_msgSend_initWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:code:userInfo:");
}

id objc_msgSend_initWithFirst_second_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFirst:second:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithFormat_locale_arguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:locale:arguments:");
}

id objc_msgSend_initWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:");
}

id objc_msgSend_initWithIdentifier_targetQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:targetQueue:");
}

id objc_msgSend_initWithIntervalStart_intervalEnd_repeats_warningTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIntervalStart:intervalEnd:repeats:warningTime:");
}

id objc_msgSend_initWithKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKey:");
}

id objc_msgSend_initWithKeyOptions_valueOptions_capacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKeyOptions:valueOptions:capacity:");
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:");
}

id objc_msgSend_initWithName_managedObjectModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:managedObjectModel:");
}

id objc_msgSend_initWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObject:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithPersistentContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersistentContainer:");
}

id objc_msgSend_initWithStartDate_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartDate:endDate:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithTimeInterval_sinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeInterval:sinceDate:");
}

id objc_msgSend_initWithType_subpredicates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:subpredicates:");
}

id objc_msgSend_initWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_intersectsOrderedSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intersectsOrderedSet:");
}

id objc_msgSend_intervalDidEndForActivity_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intervalDidEndForActivity:replyHandler:");
}

id objc_msgSend_intervalDidStart(void *a1, const char *a2, ...)
{
  return _[a1 intervalDidStart];
}

id objc_msgSend_intervalDidStartForActivity_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intervalDidStartForActivity:replyHandler:");
}

id objc_msgSend_intervalEnd(void *a1, const char *a2, ...)
{
  return _[a1 intervalEnd];
}

id objc_msgSend_intervalStart(void *a1, const char *a2, ...)
{
  return _[a1 intervalStart];
}

id objc_msgSend_intervalStartDate(void *a1, const char *a2, ...)
{
  return _[a1 intervalStartDate];
}

id objc_msgSend_intervalWillEndWarningForActivity_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intervalWillEndWarningForActivity:replyHandler:");
}

id objc_msgSend_intervalWillStartWarningForActivity_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intervalWillStartWarningForActivity:replyHandler:");
}

id objc_msgSend_isAuthorized_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAuthorized:");
}

id objc_msgSend_isCategoryBudgeted_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCategoryBudgeted:error:");
}

id objc_msgSend_isDeleted(void *a1, const char *a2, ...)
{
  return _[a1 isDeleted];
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isInserted(void *a1, const char *a2, ...)
{
  return _[a1 isInserted];
}

id objc_msgSend_isQuickLookVideoNowPlaying(void *a1, const char *a2, ...)
{
  return _[a1 isQuickLookVideoNowPlaying];
}

id objc_msgSend_isUntokenized(void *a1, const char *a2, ...)
{
  return _[a1 isUntokenized];
}

id objc_msgSend_keyPathForAppMediaUsageDataDictionaries(void *a1, const char *a2, ...)
{
  return _[a1 keyPathForAppMediaUsageDataDictionaries];
}

id objc_msgSend_keyPathForAppUsageDataDictionaries(void *a1, const char *a2, ...)
{
  return _[a1 keyPathForAppUsageDataDictionaries];
}

id objc_msgSend_keyPathForAppWebUsageDataDictionaries(void *a1, const char *a2, ...)
{
  return _[a1 keyPathForAppWebUsageDataDictionaries];
}

id objc_msgSend_keyPathForNowPlayingDataDictionary(void *a1, const char *a2, ...)
{
  return _[a1 keyPathForNowPlayingDataDictionary];
}

id objc_msgSend_keysOfEntriesPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keysOfEntriesPassingTest:");
}

id objc_msgSend_lastSyncDate(void *a1, const char *a2, ...)
{
  return _[a1 lastSyncDate];
}

id objc_msgSend_loadPersistentStoresWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadPersistentStoresWithCompletionHandler:");
}

id objc_msgSend_localTimeZone(void *a1, const char *a2, ...)
{
  return _[a1 localTimeZone];
}

id objc_msgSend_localWakingRegistrationWithIdentifier_contextualPredicate_clientIdentifier_callback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localWakingRegistrationWithIdentifier:contextualPredicate:clientIdentifier:callback:");
}

id objc_msgSend_localizedStringForKey_value_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForKey:value:table:");
}

id objc_msgSend_lock(void *a1, const char *a2, ...)
{
  return _[a1 lock];
}

id objc_msgSend_lockWhenCondition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockWhenCondition:");
}

id objc_msgSend_managedObjectContext(void *a1, const char *a2, ...)
{
  return _[a1 managedObjectContext];
}

id objc_msgSend_managedObjectIDForURIRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managedObjectIDForURIRepresentation:");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_newBackgroundContext(void *a1, const char *a2, ...)
{
  return _[a1 newBackgroundContext];
}

id objc_msgSend_newInterface(void *a1, const char *a2, ...)
{
  return _[a1 newInterface];
}

id objc_msgSend_nextDateAfterDate_matchingHour_minute_second_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextDateAfterDate:matchingHour:minute:second:options:");
}

id objc_msgSend_nextIntervalForStartComponents_endComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextIntervalForStartComponents:endComponents:");
}

id objc_msgSend_nextThresholdDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextThresholdDate:");
}

id objc_msgSend_nextWarningDateForComponents_referenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextWarningDateForComponents:referenceDate:");
}

id objc_msgSend_nextWarningTime(void *a1, const char *a2, ...)
{
  return _[a1 nextWarningTime];
}

id objc_msgSend_normalizeDomainName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "normalizeDomainName:");
}

id objc_msgSend_notificationPostingQueue(void *a1, const char *a2, ...)
{
  return _[a1 notificationPostingQueue];
}

id objc_msgSend_notificationTimes(void *a1, const char *a2, ...)
{
  return _[a1 notificationTimes];
}

id objc_msgSend_notificationWasPosted(void *a1, const char *a2, ...)
{
  return _[a1 notificationWasPosted];
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return _[a1 now];
}

id objc_msgSend_nowPlayingBundleIdKey(void *a1, const char *a2, ...)
{
  return _[a1 nowPlayingBundleIdKey];
}

id objc_msgSend_nowPlayingMediaTypeKey(void *a1, const char *a2, ...)
{
  return _[a1 nowPlayingMediaTypeKey];
}

id objc_msgSend_nowPlayingRegistration(void *a1, const char *a2, ...)
{
  return _[a1 nowPlayingRegistration];
}

id objc_msgSend_nowPlayingScheduler(void *a1, const char *a2, ...)
{
  return _[a1 nowPlayingScheduler];
}

id objc_msgSend_nowPlayingStatusKey(void *a1, const char *a2, ...)
{
  return _[a1 nowPlayingStatusKey];
}

id objc_msgSend_nowPlayingSubscription(void *a1, const char *a2, ...)
{
  return _[a1 nowPlayingSubscription];
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_objectID(void *a1, const char *a2, ...)
{
  return _[a1 objectID];
}

id objc_msgSend_performBackgroundTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBackgroundTask:");
}

id objc_msgSend_performBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlock:");
}

id objc_msgSend_performBlockAndWait_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlockAndWait:");
}

id objc_msgSend_persistentStoreCoordinator(void *a1, const char *a2, ...)
{
  return _[a1 persistentStoreCoordinator];
}

id objc_msgSend_postNotificationName_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:");
}

id objc_msgSend_postNotificationName_object_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:userInfo:");
}

id objc_msgSend_predicate(void *a1, const char *a2, ...)
{
  return _[a1 predicate];
}

id objc_msgSend_predicateForChangeAtKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForChangeAtKeyPath:");
}

id objc_msgSend_predicateForKeyPath_withFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForKeyPath:withFormat:");
}

id objc_msgSend_predicateWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithFormat:");
}

id objc_msgSend_privateEngineDidIdleNotificationName(void *a1, const char *a2, ...)
{
  return _[a1 privateEngineDidIdleNotificationName];
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 processIdentifier];
}

id objc_msgSend_query_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "query:error:");
}

id objc_msgSend_queryForApplications_webDomains_categories_interval_segmentInterval_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryForApplications:webDomains:categories:interval:segmentInterval:error:");
}

id objc_msgSend_queryForInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryForInterval:");
}

id objc_msgSend_queryForUncategorizedLocalWebUsageDuringInterval_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryForUncategorizedLocalWebUsageDuringInterval:completionHandler:");
}

id objc_msgSend_queryUsageDuringInterval_partitionInterval_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryUsageDuringInterval:partitionInterval:completionHandler:");
}

id objc_msgSend_record_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "record:");
}

id objc_msgSend_registerCallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerCallback:");
}

id objc_msgSend_remainingTime(void *a1, const char *a2, ...)
{
  return _[a1 remainingTime];
}

id objc_msgSend_removeAllBudgetsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllBudgetsWithCompletionHandler:");
}

id objc_msgSend_removeBudgets_clientIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeBudgets:clientIdentifier:completionHandler:");
}

id objc_msgSend_removeBudgetsForActivities_withClient_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeBudgetsForActivities:withClient:error:");
}

id objc_msgSend_removeDeviceActivityBudgetsNotMatchingClients_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDeviceActivityBudgetsNotMatchingClients:completionHandler:");
}

id objc_msgSend_repeats(void *a1, const char *a2, ...)
{
  return _[a1 repeats];
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return _[a1 reset];
}

id objc_msgSend_resetDeviceActivityAlarms(void *a1, const char *a2, ...)
{
  return _[a1 resetDeviceActivityAlarms];
}

id objc_msgSend_resetSharingPermissions(void *a1, const char *a2, ...)
{
  return _[a1 resetSharingPermissions];
}

id objc_msgSend_resetSystemTimeZone(void *a1, const char *a2, ...)
{
  return _[a1 resetSystemTimeZone];
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _[a1 resume];
}

id objc_msgSend_save_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "save:");
}

id objc_msgSend_schedule(void *a1, const char *a2, ...)
{
  return _[a1 schedule];
}

id objc_msgSend_scheduleWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleWithBlock:");
}

id objc_msgSend_schedulerQueue(void *a1, const char *a2, ...)
{
  return _[a1 schedulerQueue];
}

id objc_msgSend_second(void *a1, const char *a2, ...)
{
  return _[a1 second];
}

id objc_msgSend_serviceName(void *a1, const char *a2, ...)
{
  return _[a1 serviceName];
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _[a1 set];
}

id objc_msgSend_setApplicationRegistration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApplicationRegistration:");
}

id objc_msgSend_setApplicationSubscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApplicationSubscription:");
}

id objc_msgSend_setBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleIdentifier:");
}

id objc_msgSend_setCalendarIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCalendarIdentifier:");
}

id objc_msgSend_setCategoryIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCategoryIdentifier:");
}

id objc_msgSend_setClientIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientIdentifier:");
}

id objc_msgSend_setDarwinNotificationName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDarwinNotificationName:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDidReachThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidReachThreshold:");
}

id objc_msgSend_setDidWarnForIntervalEnd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidWarnForIntervalEnd:");
}

id objc_msgSend_setDidWarnForIntervalStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidWarnForIntervalStart:");
}

id objc_msgSend_setDidWarnForThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidWarnForThreshold:");
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedInterface:");
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedObject:");
}

id objc_msgSend_setExtensionIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExtensionIdentifier:");
}

id objc_msgSend_setIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentifier:");
}

id objc_msgSend_setIncludesPastActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIncludesPastActivity:");
}

id objc_msgSend_setIntervalDidStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIntervalDidStart:");
}

id objc_msgSend_setIntervalEnd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIntervalEnd:");
}

id objc_msgSend_setIntervalStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIntervalStart:");
}

id objc_msgSend_setIntervalStartDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIntervalStartDate:");
}

id objc_msgSend_setIsOverridden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsOverridden:");
}

id objc_msgSend_setIsUntokenized_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsUntokenized:");
}

id objc_msgSend_setLastSyncDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastSyncDate:");
}

id objc_msgSend_setMergePolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMergePolicy:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNotificationWasPosted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotificationWasPosted:");
}

id objc_msgSend_setNowPlayingRegistration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNowPlayingRegistration:");
}

id objc_msgSend_setNowPlayingSubscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNowPlayingSubscription:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setPersistentStoreDescriptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersistentStoreDescriptions:");
}

id objc_msgSend_setPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPredicate:");
}

id objc_msgSend_setPreregistered_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreregistered:");
}

id objc_msgSend_setRelationshipKeyPathsForPrefetching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelationshipKeyPathsForPrefetching:");
}

id objc_msgSend_setRemainingTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemainingTime:");
}

id objc_msgSend_setRepeats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRepeats:");
}

id objc_msgSend_setResultType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResultType:");
}

id objc_msgSend_setReturnsObjectsAsFaults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReturnsObjectsAsFaults:");
}

id objc_msgSend_setThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setThreshold:");
}

id objc_msgSend_setThresholdAdjustmentTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setThresholdAdjustmentTime:");
}

id objc_msgSend_setTimeLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeLimit:");
}

id objc_msgSend_setTimeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeZone:");
}

id objc_msgSend_setTransactionAuthor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransactionAuthor:");
}

id objc_msgSend_setVideoRegistration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVideoRegistration:");
}

id objc_msgSend_setVideoSubscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVideoSubscription:");
}

id objc_msgSend_setWarningTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWarningTime:");
}

id objc_msgSend_setWebDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWebDomain:");
}

id objc_msgSend_setWebDomainRegistration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWebDomainRegistration:");
}

id objc_msgSend_setWebDomainSubscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWebDomainSubscription:");
}

id objc_msgSend_setWeekday_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeekday:");
}

id objc_msgSend_sharedCategories(void *a1, const char *a2, ...)
{
  return _[a1 sharedCategories];
}

id objc_msgSend_sharedRegistration(void *a1, const char *a2, ...)
{
  return _[a1 sharedRegistration];
}

id objc_msgSend_sharedReporter(void *a1, const char *a2, ...)
{
  return _[a1 sharedReporter];
}

id objc_msgSend_sharedTracker(void *a1, const char *a2, ...)
{
  return _[a1 sharedTracker];
}

id objc_msgSend_sharingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 sharingEnabled];
}

id objc_msgSend_sinkWithCompletion_receiveInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sinkWithCompletion:receiveInput:");
}

id objc_msgSend_startCollecting(void *a1, const char *a2, ...)
{
  return _[a1 startCollecting];
}

id objc_msgSend_startDate(void *a1, const char *a2, ...)
{
  return _[a1 startDate];
}

id objc_msgSend_startObservingChangesWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startObservingChangesWithHandler:");
}

id objc_msgSend_startOfDayForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startOfDayForDate:");
}

id objc_msgSend_startReporting(void *a1, const char *a2, ...)
{
  return _[a1 startReporting];
}

id objc_msgSend_startSyncing(void *a1, const char *a2, ...)
{
  return _[a1 startSyncing];
}

id objc_msgSend_startTracking(void *a1, const char *a2, ...)
{
  return _[a1 startTracking];
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _[a1 state];
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_subscribeOn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscribeOn:");
}

id objc_msgSend_synchronizeWithUrgency_client_responseQueue_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronizeWithUrgency:client:responseQueue:completion:");
}

id objc_msgSend_threshold(void *a1, const char *a2, ...)
{
  return _[a1 threshold];
}

id objc_msgSend_thresholdAdjustmentTime(void *a1, const char *a2, ...)
{
  return _[a1 thresholdAdjustmentTime];
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSince1970];
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceNow];
}

id objc_msgSend_timeLimit(void *a1, const char *a2, ...)
{
  return _[a1 timeLimit];
}

id objc_msgSend_timeZone(void *a1, const char *a2, ...)
{
  return _[a1 timeZone];
}

id objc_msgSend_unlock(void *a1, const char *a2, ...)
{
  return _[a1 unlock];
}

id objc_msgSend_unlockWithCondition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unlockWithCondition:");
}

id objc_msgSend_uploadLocalDataWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadLocalDataWithCompletionHandler:");
}

id objc_msgSend_usageQuerying(void *a1, const char *a2, ...)
{
  return _[a1 usageQuerying];
}

id objc_msgSend_usageTrackingBundle(void *a1, const char *a2, ...)
{
  return _[a1 usageTrackingBundle];
}

id objc_msgSend_userContext(void *a1, const char *a2, ...)
{
  return _[a1 userContext];
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _[a1 userInfo];
}

id objc_msgSend_userKnowledgeStore(void *a1, const char *a2, ...)
{
  return _[a1 userKnowledgeStore];
}

id objc_msgSend_valueForEntitlement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForEntitlement:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_valueForKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKeyPath:");
}

id objc_msgSend_videoRegistration(void *a1, const char *a2, ...)
{
  return _[a1 videoRegistration];
}

id objc_msgSend_videoScheduler(void *a1, const char *a2, ...)
{
  return _[a1 videoScheduler];
}

id objc_msgSend_videoSubscription(void *a1, const char *a2, ...)
{
  return _[a1 videoSubscription];
}

id objc_msgSend_warningTime(void *a1, const char *a2, ...)
{
  return _[a1 warningTime];
}

id objc_msgSend_webDomain(void *a1, const char *a2, ...)
{
  return _[a1 webDomain];
}

id objc_msgSend_webDomainRegistration(void *a1, const char *a2, ...)
{
  return _[a1 webDomainRegistration];
}

id objc_msgSend_webDomainScheduler(void *a1, const char *a2, ...)
{
  return _[a1 webDomainScheduler];
}

id objc_msgSend_webDomainSubscription(void *a1, const char *a2, ...)
{
  return _[a1 webDomainSubscription];
}

id objc_msgSend_webDomainTokens(void *a1, const char *a2, ...)
{
  return _[a1 webDomainTokens];
}

id objc_msgSend_webDomains(void *a1, const char *a2, ...)
{
  return _[a1 webDomains];
}

id objc_msgSend_weekday(void *a1, const char *a2, ...)
{
  return _[a1 weekday];
}